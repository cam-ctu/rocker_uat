
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:27:07.486] plan(): Setting new future strategy stack:
[08:27:07.486] List of future strategies:
[08:27:07.486] 1. sequential:
[08:27:07.486]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:07.486]    - tweaked: FALSE
[08:27:07.486]    - call: future::plan("sequential")
[08:27:07.502] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[08:27:07.520] plan(): Setting new future strategy stack:
[08:27:07.520] List of future strategies:
[08:27:07.520] 1. multisession:
[08:27:07.520]    - args: function (..., workers = 2, envir = parent.frame())
[08:27:07.520]    - tweaked: TRUE
[08:27:07.520]    - call: plan(multisession, workers = 2)
[08:27:07.532] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:27:07.532] multisession:
[08:27:07.532] - args: function (..., workers = 2, envir = parent.frame())
[08:27:07.532] - tweaked: TRUE
[08:27:07.532] - call: plan(multisession, workers = 2)
[08:27:07.533] getGlobalsAndPackages() ...
[08:27:07.534] Not searching for globals
[08:27:07.534] - globals: [0] <none>
[08:27:07.534] getGlobalsAndPackages() ... DONE
[08:27:08.028] Packages needed by the future expression (n = 0): <none>
[08:27:08.028] Packages needed by future strategies (n = 0): <none>
[08:27:08.029] {
[08:27:08.029]     {
[08:27:08.029]         {
[08:27:08.029]             ...future.startTime <- base::Sys.time()
[08:27:08.029]             {
[08:27:08.029]                 {
[08:27:08.029]                   {
[08:27:08.029]                     {
[08:27:08.029]                       base::local({
[08:27:08.029]                         has_future <- base::requireNamespace("future", 
[08:27:08.029]                           quietly = TRUE)
[08:27:08.029]                         if (has_future) {
[08:27:08.029]                           ns <- base::getNamespace("future")
[08:27:08.029]                           version <- ns[[".package"]][["version"]]
[08:27:08.029]                           if (is.null(version)) 
[08:27:08.029]                             version <- utils::packageVersion("future")
[08:27:08.029]                         }
[08:27:08.029]                         else {
[08:27:08.029]                           version <- NULL
[08:27:08.029]                         }
[08:27:08.029]                         if (!has_future || version < "1.8.0") {
[08:27:08.029]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:08.029]                             "", base::R.version$version.string), 
[08:27:08.029]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:08.029]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:08.029]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:08.029]                               "release", "version")], collapse = " "), 
[08:27:08.029]                             hostname = base::Sys.info()[["nodename"]])
[08:27:08.029]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:08.029]                             info)
[08:27:08.029]                           info <- base::paste(info, collapse = "; ")
[08:27:08.029]                           if (!has_future) {
[08:27:08.029]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:08.029]                               info)
[08:27:08.029]                           }
[08:27:08.029]                           else {
[08:27:08.029]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:08.029]                               info, version)
[08:27:08.029]                           }
[08:27:08.029]                           base::stop(msg)
[08:27:08.029]                         }
[08:27:08.029]                       })
[08:27:08.029]                     }
[08:27:08.029]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:08.029]                     base::options(mc.cores = 1L)
[08:27:08.029]                   }
[08:27:08.029]                   ...future.strategy.old <- future::plan("list")
[08:27:08.029]                   options(future.plan = NULL)
[08:27:08.029]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:08.029]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:08.029]                 }
[08:27:08.029]                 ...future.workdir <- getwd()
[08:27:08.029]             }
[08:27:08.029]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:08.029]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:08.029]         }
[08:27:08.029]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:08.029]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:08.029]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:08.029]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:08.029]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:08.029]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:08.029]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:08.029]             base::names(...future.oldOptions))
[08:27:08.029]     }
[08:27:08.029]     if (FALSE) {
[08:27:08.029]     }
[08:27:08.029]     else {
[08:27:08.029]         if (TRUE) {
[08:27:08.029]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:08.029]                 open = "w")
[08:27:08.029]         }
[08:27:08.029]         else {
[08:27:08.029]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:08.029]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:08.029]         }
[08:27:08.029]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:08.029]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:08.029]             base::sink(type = "output", split = FALSE)
[08:27:08.029]             base::close(...future.stdout)
[08:27:08.029]         }, add = TRUE)
[08:27:08.029]     }
[08:27:08.029]     ...future.frame <- base::sys.nframe()
[08:27:08.029]     ...future.conditions <- base::list()
[08:27:08.029]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:08.029]     if (FALSE) {
[08:27:08.029]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:08.029]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:08.029]     }
[08:27:08.029]     ...future.result <- base::tryCatch({
[08:27:08.029]         base::withCallingHandlers({
[08:27:08.029]             ...future.value <- base::withVisible(base::local({
[08:27:08.029]                 ...future.makeSendCondition <- base::local({
[08:27:08.029]                   sendCondition <- NULL
[08:27:08.029]                   function(frame = 1L) {
[08:27:08.029]                     if (is.function(sendCondition)) 
[08:27:08.029]                       return(sendCondition)
[08:27:08.029]                     ns <- getNamespace("parallel")
[08:27:08.029]                     if (exists("sendData", mode = "function", 
[08:27:08.029]                       envir = ns)) {
[08:27:08.029]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:08.029]                         envir = ns)
[08:27:08.029]                       envir <- sys.frame(frame)
[08:27:08.029]                       master <- NULL
[08:27:08.029]                       while (!identical(envir, .GlobalEnv) && 
[08:27:08.029]                         !identical(envir, emptyenv())) {
[08:27:08.029]                         if (exists("master", mode = "list", envir = envir, 
[08:27:08.029]                           inherits = FALSE)) {
[08:27:08.029]                           master <- get("master", mode = "list", 
[08:27:08.029]                             envir = envir, inherits = FALSE)
[08:27:08.029]                           if (inherits(master, c("SOCKnode", 
[08:27:08.029]                             "SOCK0node"))) {
[08:27:08.029]                             sendCondition <<- function(cond) {
[08:27:08.029]                               data <- list(type = "VALUE", value = cond, 
[08:27:08.029]                                 success = TRUE)
[08:27:08.029]                               parallel_sendData(master, data)
[08:27:08.029]                             }
[08:27:08.029]                             return(sendCondition)
[08:27:08.029]                           }
[08:27:08.029]                         }
[08:27:08.029]                         frame <- frame + 1L
[08:27:08.029]                         envir <- sys.frame(frame)
[08:27:08.029]                       }
[08:27:08.029]                     }
[08:27:08.029]                     sendCondition <<- function(cond) NULL
[08:27:08.029]                   }
[08:27:08.029]                 })
[08:27:08.029]                 withCallingHandlers({
[08:27:08.029]                   NA
[08:27:08.029]                 }, immediateCondition = function(cond) {
[08:27:08.029]                   sendCondition <- ...future.makeSendCondition()
[08:27:08.029]                   sendCondition(cond)
[08:27:08.029]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.029]                   {
[08:27:08.029]                     inherits <- base::inherits
[08:27:08.029]                     invokeRestart <- base::invokeRestart
[08:27:08.029]                     is.null <- base::is.null
[08:27:08.029]                     muffled <- FALSE
[08:27:08.029]                     if (inherits(cond, "message")) {
[08:27:08.029]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:08.029]                       if (muffled) 
[08:27:08.029]                         invokeRestart("muffleMessage")
[08:27:08.029]                     }
[08:27:08.029]                     else if (inherits(cond, "warning")) {
[08:27:08.029]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:08.029]                       if (muffled) 
[08:27:08.029]                         invokeRestart("muffleWarning")
[08:27:08.029]                     }
[08:27:08.029]                     else if (inherits(cond, "condition")) {
[08:27:08.029]                       if (!is.null(pattern)) {
[08:27:08.029]                         computeRestarts <- base::computeRestarts
[08:27:08.029]                         grepl <- base::grepl
[08:27:08.029]                         restarts <- computeRestarts(cond)
[08:27:08.029]                         for (restart in restarts) {
[08:27:08.029]                           name <- restart$name
[08:27:08.029]                           if (is.null(name)) 
[08:27:08.029]                             next
[08:27:08.029]                           if (!grepl(pattern, name)) 
[08:27:08.029]                             next
[08:27:08.029]                           invokeRestart(restart)
[08:27:08.029]                           muffled <- TRUE
[08:27:08.029]                           break
[08:27:08.029]                         }
[08:27:08.029]                       }
[08:27:08.029]                     }
[08:27:08.029]                     invisible(muffled)
[08:27:08.029]                   }
[08:27:08.029]                   muffleCondition(cond)
[08:27:08.029]                 })
[08:27:08.029]             }))
[08:27:08.029]             future::FutureResult(value = ...future.value$value, 
[08:27:08.029]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:08.029]                   ...future.rng), globalenv = if (FALSE) 
[08:27:08.029]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:08.029]                     ...future.globalenv.names))
[08:27:08.029]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:08.029]         }, condition = base::local({
[08:27:08.029]             c <- base::c
[08:27:08.029]             inherits <- base::inherits
[08:27:08.029]             invokeRestart <- base::invokeRestart
[08:27:08.029]             length <- base::length
[08:27:08.029]             list <- base::list
[08:27:08.029]             seq.int <- base::seq.int
[08:27:08.029]             signalCondition <- base::signalCondition
[08:27:08.029]             sys.calls <- base::sys.calls
[08:27:08.029]             `[[` <- base::`[[`
[08:27:08.029]             `+` <- base::`+`
[08:27:08.029]             `<<-` <- base::`<<-`
[08:27:08.029]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:08.029]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:08.029]                   3L)]
[08:27:08.029]             }
[08:27:08.029]             function(cond) {
[08:27:08.029]                 is_error <- inherits(cond, "error")
[08:27:08.029]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:08.029]                   NULL)
[08:27:08.029]                 if (is_error) {
[08:27:08.029]                   sessionInformation <- function() {
[08:27:08.029]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:08.029]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:08.029]                       search = base::search(), system = base::Sys.info())
[08:27:08.029]                   }
[08:27:08.029]                   ...future.conditions[[length(...future.conditions) + 
[08:27:08.029]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:08.029]                     cond$call), session = sessionInformation(), 
[08:27:08.029]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:08.029]                   signalCondition(cond)
[08:27:08.029]                 }
[08:27:08.029]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:08.029]                 "immediateCondition"))) {
[08:27:08.029]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:08.029]                   ...future.conditions[[length(...future.conditions) + 
[08:27:08.029]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:08.029]                   if (TRUE && !signal) {
[08:27:08.029]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.029]                     {
[08:27:08.029]                       inherits <- base::inherits
[08:27:08.029]                       invokeRestart <- base::invokeRestart
[08:27:08.029]                       is.null <- base::is.null
[08:27:08.029]                       muffled <- FALSE
[08:27:08.029]                       if (inherits(cond, "message")) {
[08:27:08.029]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:08.029]                         if (muffled) 
[08:27:08.029]                           invokeRestart("muffleMessage")
[08:27:08.029]                       }
[08:27:08.029]                       else if (inherits(cond, "warning")) {
[08:27:08.029]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:08.029]                         if (muffled) 
[08:27:08.029]                           invokeRestart("muffleWarning")
[08:27:08.029]                       }
[08:27:08.029]                       else if (inherits(cond, "condition")) {
[08:27:08.029]                         if (!is.null(pattern)) {
[08:27:08.029]                           computeRestarts <- base::computeRestarts
[08:27:08.029]                           grepl <- base::grepl
[08:27:08.029]                           restarts <- computeRestarts(cond)
[08:27:08.029]                           for (restart in restarts) {
[08:27:08.029]                             name <- restart$name
[08:27:08.029]                             if (is.null(name)) 
[08:27:08.029]                               next
[08:27:08.029]                             if (!grepl(pattern, name)) 
[08:27:08.029]                               next
[08:27:08.029]                             invokeRestart(restart)
[08:27:08.029]                             muffled <- TRUE
[08:27:08.029]                             break
[08:27:08.029]                           }
[08:27:08.029]                         }
[08:27:08.029]                       }
[08:27:08.029]                       invisible(muffled)
[08:27:08.029]                     }
[08:27:08.029]                     muffleCondition(cond, pattern = "^muffle")
[08:27:08.029]                   }
[08:27:08.029]                 }
[08:27:08.029]                 else {
[08:27:08.029]                   if (TRUE) {
[08:27:08.029]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.029]                     {
[08:27:08.029]                       inherits <- base::inherits
[08:27:08.029]                       invokeRestart <- base::invokeRestart
[08:27:08.029]                       is.null <- base::is.null
[08:27:08.029]                       muffled <- FALSE
[08:27:08.029]                       if (inherits(cond, "message")) {
[08:27:08.029]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:08.029]                         if (muffled) 
[08:27:08.029]                           invokeRestart("muffleMessage")
[08:27:08.029]                       }
[08:27:08.029]                       else if (inherits(cond, "warning")) {
[08:27:08.029]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:08.029]                         if (muffled) 
[08:27:08.029]                           invokeRestart("muffleWarning")
[08:27:08.029]                       }
[08:27:08.029]                       else if (inherits(cond, "condition")) {
[08:27:08.029]                         if (!is.null(pattern)) {
[08:27:08.029]                           computeRestarts <- base::computeRestarts
[08:27:08.029]                           grepl <- base::grepl
[08:27:08.029]                           restarts <- computeRestarts(cond)
[08:27:08.029]                           for (restart in restarts) {
[08:27:08.029]                             name <- restart$name
[08:27:08.029]                             if (is.null(name)) 
[08:27:08.029]                               next
[08:27:08.029]                             if (!grepl(pattern, name)) 
[08:27:08.029]                               next
[08:27:08.029]                             invokeRestart(restart)
[08:27:08.029]                             muffled <- TRUE
[08:27:08.029]                             break
[08:27:08.029]                           }
[08:27:08.029]                         }
[08:27:08.029]                       }
[08:27:08.029]                       invisible(muffled)
[08:27:08.029]                     }
[08:27:08.029]                     muffleCondition(cond, pattern = "^muffle")
[08:27:08.029]                   }
[08:27:08.029]                 }
[08:27:08.029]             }
[08:27:08.029]         }))
[08:27:08.029]     }, error = function(ex) {
[08:27:08.029]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:08.029]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:08.029]                 ...future.rng), started = ...future.startTime, 
[08:27:08.029]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:08.029]             version = "1.8"), class = "FutureResult")
[08:27:08.029]     }, finally = {
[08:27:08.029]         if (!identical(...future.workdir, getwd())) 
[08:27:08.029]             setwd(...future.workdir)
[08:27:08.029]         {
[08:27:08.029]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:08.029]                 ...future.oldOptions$nwarnings <- NULL
[08:27:08.029]             }
[08:27:08.029]             base::options(...future.oldOptions)
[08:27:08.029]             if (.Platform$OS.type == "windows") {
[08:27:08.029]                 old_names <- names(...future.oldEnvVars)
[08:27:08.029]                 envs <- base::Sys.getenv()
[08:27:08.029]                 names <- names(envs)
[08:27:08.029]                 common <- intersect(names, old_names)
[08:27:08.029]                 added <- setdiff(names, old_names)
[08:27:08.029]                 removed <- setdiff(old_names, names)
[08:27:08.029]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:08.029]                   envs[common]]
[08:27:08.029]                 NAMES <- toupper(changed)
[08:27:08.029]                 args <- list()
[08:27:08.029]                 for (kk in seq_along(NAMES)) {
[08:27:08.029]                   name <- changed[[kk]]
[08:27:08.029]                   NAME <- NAMES[[kk]]
[08:27:08.029]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.029]                     next
[08:27:08.029]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:08.029]                 }
[08:27:08.029]                 NAMES <- toupper(added)
[08:27:08.029]                 for (kk in seq_along(NAMES)) {
[08:27:08.029]                   name <- added[[kk]]
[08:27:08.029]                   NAME <- NAMES[[kk]]
[08:27:08.029]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.029]                     next
[08:27:08.029]                   args[[name]] <- ""
[08:27:08.029]                 }
[08:27:08.029]                 NAMES <- toupper(removed)
[08:27:08.029]                 for (kk in seq_along(NAMES)) {
[08:27:08.029]                   name <- removed[[kk]]
[08:27:08.029]                   NAME <- NAMES[[kk]]
[08:27:08.029]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.029]                     next
[08:27:08.029]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:08.029]                 }
[08:27:08.029]                 if (length(args) > 0) 
[08:27:08.029]                   base::do.call(base::Sys.setenv, args = args)
[08:27:08.029]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:08.029]             }
[08:27:08.029]             else {
[08:27:08.029]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:08.029]             }
[08:27:08.029]             {
[08:27:08.029]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:08.029]                   0L) {
[08:27:08.029]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:08.029]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:08.029]                   base::options(opts)
[08:27:08.029]                 }
[08:27:08.029]                 {
[08:27:08.029]                   {
[08:27:08.029]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:08.029]                     NULL
[08:27:08.029]                   }
[08:27:08.029]                   options(future.plan = NULL)
[08:27:08.029]                   if (is.na(NA_character_)) 
[08:27:08.029]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:08.029]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:08.029]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:08.029]                     .init = FALSE)
[08:27:08.029]                 }
[08:27:08.029]             }
[08:27:08.029]         }
[08:27:08.029]     })
[08:27:08.029]     if (TRUE) {
[08:27:08.029]         base::sink(type = "output", split = FALSE)
[08:27:08.029]         if (TRUE) {
[08:27:08.029]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:08.029]         }
[08:27:08.029]         else {
[08:27:08.029]             ...future.result["stdout"] <- base::list(NULL)
[08:27:08.029]         }
[08:27:08.029]         base::close(...future.stdout)
[08:27:08.029]         ...future.stdout <- NULL
[08:27:08.029]     }
[08:27:08.029]     ...future.result$conditions <- ...future.conditions
[08:27:08.029]     ...future.result$finished <- base::Sys.time()
[08:27:08.029]     ...future.result
[08:27:08.029] }
[08:27:08.086] MultisessionFuture started
[08:27:08.087] result() for ClusterFuture ...
[08:27:08.087] receiveMessageFromWorker() for ClusterFuture ...
[08:27:08.087] - Validating connection of MultisessionFuture
[08:27:08.119] - received message: FutureResult
[08:27:08.120] - Received FutureResult
[08:27:08.122] - Erased future from FutureRegistry
[08:27:08.123] result() for ClusterFuture ...
[08:27:08.123] - result already collected: FutureResult
[08:27:08.123] result() for ClusterFuture ... done
[08:27:08.123] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:08.123] result() for ClusterFuture ... done
[08:27:08.123] result() for ClusterFuture ...
[08:27:08.123] - result already collected: FutureResult
[08:27:08.123] result() for ClusterFuture ... done
[08:27:08.123] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:27:08.124] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[08:27:08.124] getGlobalsAndPackages() ...
[08:27:08.124] Searching for globals...
[08:27:08.129] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[08:27:08.129] Searching for globals ... DONE
[08:27:08.129] Resolving globals: FALSE
[08:27:08.130] The total size of the 2 globals is 243 bytes (243 bytes)
[08:27:08.131] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 243 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (208 bytes of class ‘function’) and ‘x’ (35 bytes of class ‘numeric’)
[08:27:08.131] - globals: [2] ‘slow_fcn’, ‘x’
[08:27:08.131] 
[08:27:08.131] getGlobalsAndPackages() ... DONE
[08:27:08.132] run() for ‘Future’ ...
[08:27:08.132] - state: ‘created’
[08:27:08.132] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:08.146] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:08.146] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:08.146]   - Field: ‘node’
[08:27:08.146]   - Field: ‘label’
[08:27:08.146]   - Field: ‘local’
[08:27:08.146]   - Field: ‘owner’
[08:27:08.147]   - Field: ‘envir’
[08:27:08.147]   - Field: ‘workers’
[08:27:08.147]   - Field: ‘packages’
[08:27:08.147]   - Field: ‘gc’
[08:27:08.147]   - Field: ‘conditions’
[08:27:08.147]   - Field: ‘persistent’
[08:27:08.147]   - Field: ‘expr’
[08:27:08.147]   - Field: ‘uuid’
[08:27:08.147]   - Field: ‘seed’
[08:27:08.147]   - Field: ‘version’
[08:27:08.147]   - Field: ‘result’
[08:27:08.148]   - Field: ‘asynchronous’
[08:27:08.148]   - Field: ‘calls’
[08:27:08.148]   - Field: ‘globals’
[08:27:08.148]   - Field: ‘stdout’
[08:27:08.148]   - Field: ‘earlySignal’
[08:27:08.148]   - Field: ‘lazy’
[08:27:08.148]   - Field: ‘state’
[08:27:08.148] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:08.148] - Launch lazy future ...
[08:27:08.149] Packages needed by the future expression (n = 0): <none>
[08:27:08.149] Packages needed by future strategies (n = 0): <none>
[08:27:08.149] {
[08:27:08.149]     {
[08:27:08.149]         {
[08:27:08.149]             ...future.startTime <- base::Sys.time()
[08:27:08.149]             {
[08:27:08.149]                 {
[08:27:08.149]                   {
[08:27:08.149]                     {
[08:27:08.149]                       base::local({
[08:27:08.149]                         has_future <- base::requireNamespace("future", 
[08:27:08.149]                           quietly = TRUE)
[08:27:08.149]                         if (has_future) {
[08:27:08.149]                           ns <- base::getNamespace("future")
[08:27:08.149]                           version <- ns[[".package"]][["version"]]
[08:27:08.149]                           if (is.null(version)) 
[08:27:08.149]                             version <- utils::packageVersion("future")
[08:27:08.149]                         }
[08:27:08.149]                         else {
[08:27:08.149]                           version <- NULL
[08:27:08.149]                         }
[08:27:08.149]                         if (!has_future || version < "1.8.0") {
[08:27:08.149]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:08.149]                             "", base::R.version$version.string), 
[08:27:08.149]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:08.149]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:08.149]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:08.149]                               "release", "version")], collapse = " "), 
[08:27:08.149]                             hostname = base::Sys.info()[["nodename"]])
[08:27:08.149]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:08.149]                             info)
[08:27:08.149]                           info <- base::paste(info, collapse = "; ")
[08:27:08.149]                           if (!has_future) {
[08:27:08.149]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:08.149]                               info)
[08:27:08.149]                           }
[08:27:08.149]                           else {
[08:27:08.149]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:08.149]                               info, version)
[08:27:08.149]                           }
[08:27:08.149]                           base::stop(msg)
[08:27:08.149]                         }
[08:27:08.149]                       })
[08:27:08.149]                     }
[08:27:08.149]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:08.149]                     base::options(mc.cores = 1L)
[08:27:08.149]                   }
[08:27:08.149]                   ...future.strategy.old <- future::plan("list")
[08:27:08.149]                   options(future.plan = NULL)
[08:27:08.149]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:08.149]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:08.149]                 }
[08:27:08.149]                 ...future.workdir <- getwd()
[08:27:08.149]             }
[08:27:08.149]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:08.149]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:08.149]         }
[08:27:08.149]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:08.149]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:08.149]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:08.149]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:08.149]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:08.149]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:08.149]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:08.149]             base::names(...future.oldOptions))
[08:27:08.149]     }
[08:27:08.149]     if (FALSE) {
[08:27:08.149]     }
[08:27:08.149]     else {
[08:27:08.149]         if (TRUE) {
[08:27:08.149]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:08.149]                 open = "w")
[08:27:08.149]         }
[08:27:08.149]         else {
[08:27:08.149]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:08.149]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:08.149]         }
[08:27:08.149]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:08.149]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:08.149]             base::sink(type = "output", split = FALSE)
[08:27:08.149]             base::close(...future.stdout)
[08:27:08.149]         }, add = TRUE)
[08:27:08.149]     }
[08:27:08.149]     ...future.frame <- base::sys.nframe()
[08:27:08.149]     ...future.conditions <- base::list()
[08:27:08.149]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:08.149]     if (FALSE) {
[08:27:08.149]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:08.149]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:08.149]     }
[08:27:08.149]     ...future.result <- base::tryCatch({
[08:27:08.149]         base::withCallingHandlers({
[08:27:08.149]             ...future.value <- base::withVisible(base::local({
[08:27:08.149]                 ...future.makeSendCondition <- base::local({
[08:27:08.149]                   sendCondition <- NULL
[08:27:08.149]                   function(frame = 1L) {
[08:27:08.149]                     if (is.function(sendCondition)) 
[08:27:08.149]                       return(sendCondition)
[08:27:08.149]                     ns <- getNamespace("parallel")
[08:27:08.149]                     if (exists("sendData", mode = "function", 
[08:27:08.149]                       envir = ns)) {
[08:27:08.149]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:08.149]                         envir = ns)
[08:27:08.149]                       envir <- sys.frame(frame)
[08:27:08.149]                       master <- NULL
[08:27:08.149]                       while (!identical(envir, .GlobalEnv) && 
[08:27:08.149]                         !identical(envir, emptyenv())) {
[08:27:08.149]                         if (exists("master", mode = "list", envir = envir, 
[08:27:08.149]                           inherits = FALSE)) {
[08:27:08.149]                           master <- get("master", mode = "list", 
[08:27:08.149]                             envir = envir, inherits = FALSE)
[08:27:08.149]                           if (inherits(master, c("SOCKnode", 
[08:27:08.149]                             "SOCK0node"))) {
[08:27:08.149]                             sendCondition <<- function(cond) {
[08:27:08.149]                               data <- list(type = "VALUE", value = cond, 
[08:27:08.149]                                 success = TRUE)
[08:27:08.149]                               parallel_sendData(master, data)
[08:27:08.149]                             }
[08:27:08.149]                             return(sendCondition)
[08:27:08.149]                           }
[08:27:08.149]                         }
[08:27:08.149]                         frame <- frame + 1L
[08:27:08.149]                         envir <- sys.frame(frame)
[08:27:08.149]                       }
[08:27:08.149]                     }
[08:27:08.149]                     sendCondition <<- function(cond) NULL
[08:27:08.149]                   }
[08:27:08.149]                 })
[08:27:08.149]                 withCallingHandlers({
[08:27:08.149]                   slow_fcn(x)
[08:27:08.149]                 }, immediateCondition = function(cond) {
[08:27:08.149]                   sendCondition <- ...future.makeSendCondition()
[08:27:08.149]                   sendCondition(cond)
[08:27:08.149]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.149]                   {
[08:27:08.149]                     inherits <- base::inherits
[08:27:08.149]                     invokeRestart <- base::invokeRestart
[08:27:08.149]                     is.null <- base::is.null
[08:27:08.149]                     muffled <- FALSE
[08:27:08.149]                     if (inherits(cond, "message")) {
[08:27:08.149]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:08.149]                       if (muffled) 
[08:27:08.149]                         invokeRestart("muffleMessage")
[08:27:08.149]                     }
[08:27:08.149]                     else if (inherits(cond, "warning")) {
[08:27:08.149]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:08.149]                       if (muffled) 
[08:27:08.149]                         invokeRestart("muffleWarning")
[08:27:08.149]                     }
[08:27:08.149]                     else if (inherits(cond, "condition")) {
[08:27:08.149]                       if (!is.null(pattern)) {
[08:27:08.149]                         computeRestarts <- base::computeRestarts
[08:27:08.149]                         grepl <- base::grepl
[08:27:08.149]                         restarts <- computeRestarts(cond)
[08:27:08.149]                         for (restart in restarts) {
[08:27:08.149]                           name <- restart$name
[08:27:08.149]                           if (is.null(name)) 
[08:27:08.149]                             next
[08:27:08.149]                           if (!grepl(pattern, name)) 
[08:27:08.149]                             next
[08:27:08.149]                           invokeRestart(restart)
[08:27:08.149]                           muffled <- TRUE
[08:27:08.149]                           break
[08:27:08.149]                         }
[08:27:08.149]                       }
[08:27:08.149]                     }
[08:27:08.149]                     invisible(muffled)
[08:27:08.149]                   }
[08:27:08.149]                   muffleCondition(cond)
[08:27:08.149]                 })
[08:27:08.149]             }))
[08:27:08.149]             future::FutureResult(value = ...future.value$value, 
[08:27:08.149]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:08.149]                   ...future.rng), globalenv = if (FALSE) 
[08:27:08.149]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:08.149]                     ...future.globalenv.names))
[08:27:08.149]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:08.149]         }, condition = base::local({
[08:27:08.149]             c <- base::c
[08:27:08.149]             inherits <- base::inherits
[08:27:08.149]             invokeRestart <- base::invokeRestart
[08:27:08.149]             length <- base::length
[08:27:08.149]             list <- base::list
[08:27:08.149]             seq.int <- base::seq.int
[08:27:08.149]             signalCondition <- base::signalCondition
[08:27:08.149]             sys.calls <- base::sys.calls
[08:27:08.149]             `[[` <- base::`[[`
[08:27:08.149]             `+` <- base::`+`
[08:27:08.149]             `<<-` <- base::`<<-`
[08:27:08.149]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:08.149]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:08.149]                   3L)]
[08:27:08.149]             }
[08:27:08.149]             function(cond) {
[08:27:08.149]                 is_error <- inherits(cond, "error")
[08:27:08.149]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:08.149]                   NULL)
[08:27:08.149]                 if (is_error) {
[08:27:08.149]                   sessionInformation <- function() {
[08:27:08.149]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:08.149]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:08.149]                       search = base::search(), system = base::Sys.info())
[08:27:08.149]                   }
[08:27:08.149]                   ...future.conditions[[length(...future.conditions) + 
[08:27:08.149]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:08.149]                     cond$call), session = sessionInformation(), 
[08:27:08.149]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:08.149]                   signalCondition(cond)
[08:27:08.149]                 }
[08:27:08.149]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:08.149]                 "immediateCondition"))) {
[08:27:08.149]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:08.149]                   ...future.conditions[[length(...future.conditions) + 
[08:27:08.149]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:08.149]                   if (TRUE && !signal) {
[08:27:08.149]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.149]                     {
[08:27:08.149]                       inherits <- base::inherits
[08:27:08.149]                       invokeRestart <- base::invokeRestart
[08:27:08.149]                       is.null <- base::is.null
[08:27:08.149]                       muffled <- FALSE
[08:27:08.149]                       if (inherits(cond, "message")) {
[08:27:08.149]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:08.149]                         if (muffled) 
[08:27:08.149]                           invokeRestart("muffleMessage")
[08:27:08.149]                       }
[08:27:08.149]                       else if (inherits(cond, "warning")) {
[08:27:08.149]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:08.149]                         if (muffled) 
[08:27:08.149]                           invokeRestart("muffleWarning")
[08:27:08.149]                       }
[08:27:08.149]                       else if (inherits(cond, "condition")) {
[08:27:08.149]                         if (!is.null(pattern)) {
[08:27:08.149]                           computeRestarts <- base::computeRestarts
[08:27:08.149]                           grepl <- base::grepl
[08:27:08.149]                           restarts <- computeRestarts(cond)
[08:27:08.149]                           for (restart in restarts) {
[08:27:08.149]                             name <- restart$name
[08:27:08.149]                             if (is.null(name)) 
[08:27:08.149]                               next
[08:27:08.149]                             if (!grepl(pattern, name)) 
[08:27:08.149]                               next
[08:27:08.149]                             invokeRestart(restart)
[08:27:08.149]                             muffled <- TRUE
[08:27:08.149]                             break
[08:27:08.149]                           }
[08:27:08.149]                         }
[08:27:08.149]                       }
[08:27:08.149]                       invisible(muffled)
[08:27:08.149]                     }
[08:27:08.149]                     muffleCondition(cond, pattern = "^muffle")
[08:27:08.149]                   }
[08:27:08.149]                 }
[08:27:08.149]                 else {
[08:27:08.149]                   if (TRUE) {
[08:27:08.149]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.149]                     {
[08:27:08.149]                       inherits <- base::inherits
[08:27:08.149]                       invokeRestart <- base::invokeRestart
[08:27:08.149]                       is.null <- base::is.null
[08:27:08.149]                       muffled <- FALSE
[08:27:08.149]                       if (inherits(cond, "message")) {
[08:27:08.149]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:08.149]                         if (muffled) 
[08:27:08.149]                           invokeRestart("muffleMessage")
[08:27:08.149]                       }
[08:27:08.149]                       else if (inherits(cond, "warning")) {
[08:27:08.149]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:08.149]                         if (muffled) 
[08:27:08.149]                           invokeRestart("muffleWarning")
[08:27:08.149]                       }
[08:27:08.149]                       else if (inherits(cond, "condition")) {
[08:27:08.149]                         if (!is.null(pattern)) {
[08:27:08.149]                           computeRestarts <- base::computeRestarts
[08:27:08.149]                           grepl <- base::grepl
[08:27:08.149]                           restarts <- computeRestarts(cond)
[08:27:08.149]                           for (restart in restarts) {
[08:27:08.149]                             name <- restart$name
[08:27:08.149]                             if (is.null(name)) 
[08:27:08.149]                               next
[08:27:08.149]                             if (!grepl(pattern, name)) 
[08:27:08.149]                               next
[08:27:08.149]                             invokeRestart(restart)
[08:27:08.149]                             muffled <- TRUE
[08:27:08.149]                             break
[08:27:08.149]                           }
[08:27:08.149]                         }
[08:27:08.149]                       }
[08:27:08.149]                       invisible(muffled)
[08:27:08.149]                     }
[08:27:08.149]                     muffleCondition(cond, pattern = "^muffle")
[08:27:08.149]                   }
[08:27:08.149]                 }
[08:27:08.149]             }
[08:27:08.149]         }))
[08:27:08.149]     }, error = function(ex) {
[08:27:08.149]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:08.149]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:08.149]                 ...future.rng), started = ...future.startTime, 
[08:27:08.149]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:08.149]             version = "1.8"), class = "FutureResult")
[08:27:08.149]     }, finally = {
[08:27:08.149]         if (!identical(...future.workdir, getwd())) 
[08:27:08.149]             setwd(...future.workdir)
[08:27:08.149]         {
[08:27:08.149]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:08.149]                 ...future.oldOptions$nwarnings <- NULL
[08:27:08.149]             }
[08:27:08.149]             base::options(...future.oldOptions)
[08:27:08.149]             if (.Platform$OS.type == "windows") {
[08:27:08.149]                 old_names <- names(...future.oldEnvVars)
[08:27:08.149]                 envs <- base::Sys.getenv()
[08:27:08.149]                 names <- names(envs)
[08:27:08.149]                 common <- intersect(names, old_names)
[08:27:08.149]                 added <- setdiff(names, old_names)
[08:27:08.149]                 removed <- setdiff(old_names, names)
[08:27:08.149]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:08.149]                   envs[common]]
[08:27:08.149]                 NAMES <- toupper(changed)
[08:27:08.149]                 args <- list()
[08:27:08.149]                 for (kk in seq_along(NAMES)) {
[08:27:08.149]                   name <- changed[[kk]]
[08:27:08.149]                   NAME <- NAMES[[kk]]
[08:27:08.149]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.149]                     next
[08:27:08.149]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:08.149]                 }
[08:27:08.149]                 NAMES <- toupper(added)
[08:27:08.149]                 for (kk in seq_along(NAMES)) {
[08:27:08.149]                   name <- added[[kk]]
[08:27:08.149]                   NAME <- NAMES[[kk]]
[08:27:08.149]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.149]                     next
[08:27:08.149]                   args[[name]] <- ""
[08:27:08.149]                 }
[08:27:08.149]                 NAMES <- toupper(removed)
[08:27:08.149]                 for (kk in seq_along(NAMES)) {
[08:27:08.149]                   name <- removed[[kk]]
[08:27:08.149]                   NAME <- NAMES[[kk]]
[08:27:08.149]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.149]                     next
[08:27:08.149]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:08.149]                 }
[08:27:08.149]                 if (length(args) > 0) 
[08:27:08.149]                   base::do.call(base::Sys.setenv, args = args)
[08:27:08.149]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:08.149]             }
[08:27:08.149]             else {
[08:27:08.149]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:08.149]             }
[08:27:08.149]             {
[08:27:08.149]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:08.149]                   0L) {
[08:27:08.149]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:08.149]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:08.149]                   base::options(opts)
[08:27:08.149]                 }
[08:27:08.149]                 {
[08:27:08.149]                   {
[08:27:08.149]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:08.149]                     NULL
[08:27:08.149]                   }
[08:27:08.149]                   options(future.plan = NULL)
[08:27:08.149]                   if (is.na(NA_character_)) 
[08:27:08.149]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:08.149]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:08.149]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:08.149]                     .init = FALSE)
[08:27:08.149]                 }
[08:27:08.149]             }
[08:27:08.149]         }
[08:27:08.149]     })
[08:27:08.149]     if (TRUE) {
[08:27:08.149]         base::sink(type = "output", split = FALSE)
[08:27:08.149]         if (TRUE) {
[08:27:08.149]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:08.149]         }
[08:27:08.149]         else {
[08:27:08.149]             ...future.result["stdout"] <- base::list(NULL)
[08:27:08.149]         }
[08:27:08.149]         base::close(...future.stdout)
[08:27:08.149]         ...future.stdout <- NULL
[08:27:08.149]     }
[08:27:08.149]     ...future.result$conditions <- ...future.conditions
[08:27:08.149]     ...future.result$finished <- base::Sys.time()
[08:27:08.149]     ...future.result
[08:27:08.149] }
[08:27:08.155] Exporting 2 global objects (563 bytes) to cluster node #1 ...
[08:27:08.155] Exporting ‘slow_fcn’ (208 bytes) to cluster node #1 ...
[08:27:08.156] Exporting ‘slow_fcn’ (208 bytes) to cluster node #1 ... DONE
[08:27:08.156] Exporting ‘x’ (35 bytes) to cluster node #1 ...
[08:27:08.156] Exporting ‘x’ (35 bytes) to cluster node #1 ... DONE
[08:27:08.156] Exporting 2 global objects (563 bytes) to cluster node #1 ... DONE
[08:27:08.158] MultisessionFuture started
[08:27:08.158] - Launch lazy future ... done
[08:27:08.158] run() for ‘MultisessionFuture’ ... done
[08:27:08.160] getGlobalsAndPackages() ...
[08:27:08.160] Searching for globals...
[08:27:08.162] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[08:27:08.162] Searching for globals ... DONE
[08:27:08.162] Resolving globals: FALSE
[08:27:08.162] The total size of the 2 globals is 243 bytes (243 bytes)
[08:27:08.163] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 243 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (208 bytes of class ‘function’) and ‘x’ (35 bytes of class ‘numeric’)
[08:27:08.163] - globals: [2] ‘slow_fcn’, ‘x’
[08:27:08.163] 
[08:27:08.163] getGlobalsAndPackages() ... DONE
[08:27:08.164] run() for ‘Future’ ...
[08:27:08.164] - state: ‘created’
[08:27:08.164] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:08.178] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:08.178] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:08.178]   - Field: ‘node’
[08:27:08.178]   - Field: ‘label’
[08:27:08.178]   - Field: ‘local’
[08:27:08.178]   - Field: ‘owner’
[08:27:08.178]   - Field: ‘envir’
[08:27:08.178]   - Field: ‘workers’
[08:27:08.179]   - Field: ‘packages’
[08:27:08.179]   - Field: ‘gc’
[08:27:08.179]   - Field: ‘conditions’
[08:27:08.179]   - Field: ‘persistent’
[08:27:08.179]   - Field: ‘expr’
[08:27:08.179]   - Field: ‘uuid’
[08:27:08.179]   - Field: ‘seed’
[08:27:08.179]   - Field: ‘version’
[08:27:08.179]   - Field: ‘result’
[08:27:08.180]   - Field: ‘asynchronous’
[08:27:08.180]   - Field: ‘calls’
[08:27:08.180]   - Field: ‘globals’
[08:27:08.180]   - Field: ‘stdout’
[08:27:08.180]   - Field: ‘earlySignal’
[08:27:08.180]   - Field: ‘lazy’
[08:27:08.180]   - Field: ‘state’
[08:27:08.180] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:08.180] - Launch lazy future ...
[08:27:08.181] Packages needed by the future expression (n = 0): <none>
[08:27:08.181] Packages needed by future strategies (n = 0): <none>
[08:27:08.182] {
[08:27:08.182]     {
[08:27:08.182]         {
[08:27:08.182]             ...future.startTime <- base::Sys.time()
[08:27:08.182]             {
[08:27:08.182]                 {
[08:27:08.182]                   {
[08:27:08.182]                     {
[08:27:08.182]                       base::local({
[08:27:08.182]                         has_future <- base::requireNamespace("future", 
[08:27:08.182]                           quietly = TRUE)
[08:27:08.182]                         if (has_future) {
[08:27:08.182]                           ns <- base::getNamespace("future")
[08:27:08.182]                           version <- ns[[".package"]][["version"]]
[08:27:08.182]                           if (is.null(version)) 
[08:27:08.182]                             version <- utils::packageVersion("future")
[08:27:08.182]                         }
[08:27:08.182]                         else {
[08:27:08.182]                           version <- NULL
[08:27:08.182]                         }
[08:27:08.182]                         if (!has_future || version < "1.8.0") {
[08:27:08.182]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:08.182]                             "", base::R.version$version.string), 
[08:27:08.182]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:08.182]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:08.182]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:08.182]                               "release", "version")], collapse = " "), 
[08:27:08.182]                             hostname = base::Sys.info()[["nodename"]])
[08:27:08.182]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:08.182]                             info)
[08:27:08.182]                           info <- base::paste(info, collapse = "; ")
[08:27:08.182]                           if (!has_future) {
[08:27:08.182]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:08.182]                               info)
[08:27:08.182]                           }
[08:27:08.182]                           else {
[08:27:08.182]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:08.182]                               info, version)
[08:27:08.182]                           }
[08:27:08.182]                           base::stop(msg)
[08:27:08.182]                         }
[08:27:08.182]                       })
[08:27:08.182]                     }
[08:27:08.182]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:08.182]                     base::options(mc.cores = 1L)
[08:27:08.182]                   }
[08:27:08.182]                   ...future.strategy.old <- future::plan("list")
[08:27:08.182]                   options(future.plan = NULL)
[08:27:08.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:08.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:08.182]                 }
[08:27:08.182]                 ...future.workdir <- getwd()
[08:27:08.182]             }
[08:27:08.182]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:08.182]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:08.182]         }
[08:27:08.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:08.182]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:08.182]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:08.182]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:08.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:08.182]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:08.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:08.182]             base::names(...future.oldOptions))
[08:27:08.182]     }
[08:27:08.182]     if (FALSE) {
[08:27:08.182]     }
[08:27:08.182]     else {
[08:27:08.182]         if (TRUE) {
[08:27:08.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:08.182]                 open = "w")
[08:27:08.182]         }
[08:27:08.182]         else {
[08:27:08.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:08.182]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:08.182]         }
[08:27:08.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:08.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:08.182]             base::sink(type = "output", split = FALSE)
[08:27:08.182]             base::close(...future.stdout)
[08:27:08.182]         }, add = TRUE)
[08:27:08.182]     }
[08:27:08.182]     ...future.frame <- base::sys.nframe()
[08:27:08.182]     ...future.conditions <- base::list()
[08:27:08.182]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:08.182]     if (FALSE) {
[08:27:08.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:08.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:08.182]     }
[08:27:08.182]     ...future.result <- base::tryCatch({
[08:27:08.182]         base::withCallingHandlers({
[08:27:08.182]             ...future.value <- base::withVisible(base::local({
[08:27:08.182]                 ...future.makeSendCondition <- base::local({
[08:27:08.182]                   sendCondition <- NULL
[08:27:08.182]                   function(frame = 1L) {
[08:27:08.182]                     if (is.function(sendCondition)) 
[08:27:08.182]                       return(sendCondition)
[08:27:08.182]                     ns <- getNamespace("parallel")
[08:27:08.182]                     if (exists("sendData", mode = "function", 
[08:27:08.182]                       envir = ns)) {
[08:27:08.182]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:08.182]                         envir = ns)
[08:27:08.182]                       envir <- sys.frame(frame)
[08:27:08.182]                       master <- NULL
[08:27:08.182]                       while (!identical(envir, .GlobalEnv) && 
[08:27:08.182]                         !identical(envir, emptyenv())) {
[08:27:08.182]                         if (exists("master", mode = "list", envir = envir, 
[08:27:08.182]                           inherits = FALSE)) {
[08:27:08.182]                           master <- get("master", mode = "list", 
[08:27:08.182]                             envir = envir, inherits = FALSE)
[08:27:08.182]                           if (inherits(master, c("SOCKnode", 
[08:27:08.182]                             "SOCK0node"))) {
[08:27:08.182]                             sendCondition <<- function(cond) {
[08:27:08.182]                               data <- list(type = "VALUE", value = cond, 
[08:27:08.182]                                 success = TRUE)
[08:27:08.182]                               parallel_sendData(master, data)
[08:27:08.182]                             }
[08:27:08.182]                             return(sendCondition)
[08:27:08.182]                           }
[08:27:08.182]                         }
[08:27:08.182]                         frame <- frame + 1L
[08:27:08.182]                         envir <- sys.frame(frame)
[08:27:08.182]                       }
[08:27:08.182]                     }
[08:27:08.182]                     sendCondition <<- function(cond) NULL
[08:27:08.182]                   }
[08:27:08.182]                 })
[08:27:08.182]                 withCallingHandlers({
[08:27:08.182]                   slow_fcn(x)
[08:27:08.182]                 }, immediateCondition = function(cond) {
[08:27:08.182]                   sendCondition <- ...future.makeSendCondition()
[08:27:08.182]                   sendCondition(cond)
[08:27:08.182]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.182]                   {
[08:27:08.182]                     inherits <- base::inherits
[08:27:08.182]                     invokeRestart <- base::invokeRestart
[08:27:08.182]                     is.null <- base::is.null
[08:27:08.182]                     muffled <- FALSE
[08:27:08.182]                     if (inherits(cond, "message")) {
[08:27:08.182]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:08.182]                       if (muffled) 
[08:27:08.182]                         invokeRestart("muffleMessage")
[08:27:08.182]                     }
[08:27:08.182]                     else if (inherits(cond, "warning")) {
[08:27:08.182]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:08.182]                       if (muffled) 
[08:27:08.182]                         invokeRestart("muffleWarning")
[08:27:08.182]                     }
[08:27:08.182]                     else if (inherits(cond, "condition")) {
[08:27:08.182]                       if (!is.null(pattern)) {
[08:27:08.182]                         computeRestarts <- base::computeRestarts
[08:27:08.182]                         grepl <- base::grepl
[08:27:08.182]                         restarts <- computeRestarts(cond)
[08:27:08.182]                         for (restart in restarts) {
[08:27:08.182]                           name <- restart$name
[08:27:08.182]                           if (is.null(name)) 
[08:27:08.182]                             next
[08:27:08.182]                           if (!grepl(pattern, name)) 
[08:27:08.182]                             next
[08:27:08.182]                           invokeRestart(restart)
[08:27:08.182]                           muffled <- TRUE
[08:27:08.182]                           break
[08:27:08.182]                         }
[08:27:08.182]                       }
[08:27:08.182]                     }
[08:27:08.182]                     invisible(muffled)
[08:27:08.182]                   }
[08:27:08.182]                   muffleCondition(cond)
[08:27:08.182]                 })
[08:27:08.182]             }))
[08:27:08.182]             future::FutureResult(value = ...future.value$value, 
[08:27:08.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:08.182]                   ...future.rng), globalenv = if (FALSE) 
[08:27:08.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:08.182]                     ...future.globalenv.names))
[08:27:08.182]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:08.182]         }, condition = base::local({
[08:27:08.182]             c <- base::c
[08:27:08.182]             inherits <- base::inherits
[08:27:08.182]             invokeRestart <- base::invokeRestart
[08:27:08.182]             length <- base::length
[08:27:08.182]             list <- base::list
[08:27:08.182]             seq.int <- base::seq.int
[08:27:08.182]             signalCondition <- base::signalCondition
[08:27:08.182]             sys.calls <- base::sys.calls
[08:27:08.182]             `[[` <- base::`[[`
[08:27:08.182]             `+` <- base::`+`
[08:27:08.182]             `<<-` <- base::`<<-`
[08:27:08.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:08.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:08.182]                   3L)]
[08:27:08.182]             }
[08:27:08.182]             function(cond) {
[08:27:08.182]                 is_error <- inherits(cond, "error")
[08:27:08.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:08.182]                   NULL)
[08:27:08.182]                 if (is_error) {
[08:27:08.182]                   sessionInformation <- function() {
[08:27:08.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:08.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:08.182]                       search = base::search(), system = base::Sys.info())
[08:27:08.182]                   }
[08:27:08.182]                   ...future.conditions[[length(...future.conditions) + 
[08:27:08.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:08.182]                     cond$call), session = sessionInformation(), 
[08:27:08.182]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:08.182]                   signalCondition(cond)
[08:27:08.182]                 }
[08:27:08.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:08.182]                 "immediateCondition"))) {
[08:27:08.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:08.182]                   ...future.conditions[[length(...future.conditions) + 
[08:27:08.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:08.182]                   if (TRUE && !signal) {
[08:27:08.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.182]                     {
[08:27:08.182]                       inherits <- base::inherits
[08:27:08.182]                       invokeRestart <- base::invokeRestart
[08:27:08.182]                       is.null <- base::is.null
[08:27:08.182]                       muffled <- FALSE
[08:27:08.182]                       if (inherits(cond, "message")) {
[08:27:08.182]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:08.182]                         if (muffled) 
[08:27:08.182]                           invokeRestart("muffleMessage")
[08:27:08.182]                       }
[08:27:08.182]                       else if (inherits(cond, "warning")) {
[08:27:08.182]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:08.182]                         if (muffled) 
[08:27:08.182]                           invokeRestart("muffleWarning")
[08:27:08.182]                       }
[08:27:08.182]                       else if (inherits(cond, "condition")) {
[08:27:08.182]                         if (!is.null(pattern)) {
[08:27:08.182]                           computeRestarts <- base::computeRestarts
[08:27:08.182]                           grepl <- base::grepl
[08:27:08.182]                           restarts <- computeRestarts(cond)
[08:27:08.182]                           for (restart in restarts) {
[08:27:08.182]                             name <- restart$name
[08:27:08.182]                             if (is.null(name)) 
[08:27:08.182]                               next
[08:27:08.182]                             if (!grepl(pattern, name)) 
[08:27:08.182]                               next
[08:27:08.182]                             invokeRestart(restart)
[08:27:08.182]                             muffled <- TRUE
[08:27:08.182]                             break
[08:27:08.182]                           }
[08:27:08.182]                         }
[08:27:08.182]                       }
[08:27:08.182]                       invisible(muffled)
[08:27:08.182]                     }
[08:27:08.182]                     muffleCondition(cond, pattern = "^muffle")
[08:27:08.182]                   }
[08:27:08.182]                 }
[08:27:08.182]                 else {
[08:27:08.182]                   if (TRUE) {
[08:27:08.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.182]                     {
[08:27:08.182]                       inherits <- base::inherits
[08:27:08.182]                       invokeRestart <- base::invokeRestart
[08:27:08.182]                       is.null <- base::is.null
[08:27:08.182]                       muffled <- FALSE
[08:27:08.182]                       if (inherits(cond, "message")) {
[08:27:08.182]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:08.182]                         if (muffled) 
[08:27:08.182]                           invokeRestart("muffleMessage")
[08:27:08.182]                       }
[08:27:08.182]                       else if (inherits(cond, "warning")) {
[08:27:08.182]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:08.182]                         if (muffled) 
[08:27:08.182]                           invokeRestart("muffleWarning")
[08:27:08.182]                       }
[08:27:08.182]                       else if (inherits(cond, "condition")) {
[08:27:08.182]                         if (!is.null(pattern)) {
[08:27:08.182]                           computeRestarts <- base::computeRestarts
[08:27:08.182]                           grepl <- base::grepl
[08:27:08.182]                           restarts <- computeRestarts(cond)
[08:27:08.182]                           for (restart in restarts) {
[08:27:08.182]                             name <- restart$name
[08:27:08.182]                             if (is.null(name)) 
[08:27:08.182]                               next
[08:27:08.182]                             if (!grepl(pattern, name)) 
[08:27:08.182]                               next
[08:27:08.182]                             invokeRestart(restart)
[08:27:08.182]                             muffled <- TRUE
[08:27:08.182]                             break
[08:27:08.182]                           }
[08:27:08.182]                         }
[08:27:08.182]                       }
[08:27:08.182]                       invisible(muffled)
[08:27:08.182]                     }
[08:27:08.182]                     muffleCondition(cond, pattern = "^muffle")
[08:27:08.182]                   }
[08:27:08.182]                 }
[08:27:08.182]             }
[08:27:08.182]         }))
[08:27:08.182]     }, error = function(ex) {
[08:27:08.182]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:08.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:08.182]                 ...future.rng), started = ...future.startTime, 
[08:27:08.182]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:08.182]             version = "1.8"), class = "FutureResult")
[08:27:08.182]     }, finally = {
[08:27:08.182]         if (!identical(...future.workdir, getwd())) 
[08:27:08.182]             setwd(...future.workdir)
[08:27:08.182]         {
[08:27:08.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:08.182]                 ...future.oldOptions$nwarnings <- NULL
[08:27:08.182]             }
[08:27:08.182]             base::options(...future.oldOptions)
[08:27:08.182]             if (.Platform$OS.type == "windows") {
[08:27:08.182]                 old_names <- names(...future.oldEnvVars)
[08:27:08.182]                 envs <- base::Sys.getenv()
[08:27:08.182]                 names <- names(envs)
[08:27:08.182]                 common <- intersect(names, old_names)
[08:27:08.182]                 added <- setdiff(names, old_names)
[08:27:08.182]                 removed <- setdiff(old_names, names)
[08:27:08.182]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:08.182]                   envs[common]]
[08:27:08.182]                 NAMES <- toupper(changed)
[08:27:08.182]                 args <- list()
[08:27:08.182]                 for (kk in seq_along(NAMES)) {
[08:27:08.182]                   name <- changed[[kk]]
[08:27:08.182]                   NAME <- NAMES[[kk]]
[08:27:08.182]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.182]                     next
[08:27:08.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:08.182]                 }
[08:27:08.182]                 NAMES <- toupper(added)
[08:27:08.182]                 for (kk in seq_along(NAMES)) {
[08:27:08.182]                   name <- added[[kk]]
[08:27:08.182]                   NAME <- NAMES[[kk]]
[08:27:08.182]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.182]                     next
[08:27:08.182]                   args[[name]] <- ""
[08:27:08.182]                 }
[08:27:08.182]                 NAMES <- toupper(removed)
[08:27:08.182]                 for (kk in seq_along(NAMES)) {
[08:27:08.182]                   name <- removed[[kk]]
[08:27:08.182]                   NAME <- NAMES[[kk]]
[08:27:08.182]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.182]                     next
[08:27:08.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:08.182]                 }
[08:27:08.182]                 if (length(args) > 0) 
[08:27:08.182]                   base::do.call(base::Sys.setenv, args = args)
[08:27:08.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:08.182]             }
[08:27:08.182]             else {
[08:27:08.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:08.182]             }
[08:27:08.182]             {
[08:27:08.182]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:08.182]                   0L) {
[08:27:08.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:08.182]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:08.182]                   base::options(opts)
[08:27:08.182]                 }
[08:27:08.182]                 {
[08:27:08.182]                   {
[08:27:08.182]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:08.182]                     NULL
[08:27:08.182]                   }
[08:27:08.182]                   options(future.plan = NULL)
[08:27:08.182]                   if (is.na(NA_character_)) 
[08:27:08.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:08.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:08.182]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:08.182]                     .init = FALSE)
[08:27:08.182]                 }
[08:27:08.182]             }
[08:27:08.182]         }
[08:27:08.182]     })
[08:27:08.182]     if (TRUE) {
[08:27:08.182]         base::sink(type = "output", split = FALSE)
[08:27:08.182]         if (TRUE) {
[08:27:08.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:08.182]         }
[08:27:08.182]         else {
[08:27:08.182]             ...future.result["stdout"] <- base::list(NULL)
[08:27:08.182]         }
[08:27:08.182]         base::close(...future.stdout)
[08:27:08.182]         ...future.stdout <- NULL
[08:27:08.182]     }
[08:27:08.182]     ...future.result$conditions <- ...future.conditions
[08:27:08.182]     ...future.result$finished <- base::Sys.time()
[08:27:08.182]     ...future.result
[08:27:08.182] }
[08:27:08.238] Exporting 2 global objects (563 bytes) to cluster node #2 ...
[08:27:08.239] Exporting ‘slow_fcn’ (208 bytes) to cluster node #2 ...
[08:27:08.239] Exporting ‘slow_fcn’ (208 bytes) to cluster node #2 ... DONE
[08:27:08.239] Exporting ‘x’ (35 bytes) to cluster node #2 ...
[08:27:08.240] Exporting ‘x’ (35 bytes) to cluster node #2 ... DONE
[08:27:08.240] Exporting 2 global objects (563 bytes) to cluster node #2 ... DONE
[08:27:08.241] MultisessionFuture started
[08:27:08.242] - Launch lazy future ... done
[08:27:08.242] run() for ‘MultisessionFuture’ ... done
[08:27:08.242] getGlobalsAndPackages() ...
[08:27:08.242] Searching for globals...
[08:27:08.244] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[08:27:08.245] Searching for globals ... DONE
[08:27:08.245] Resolving globals: FALSE
[08:27:08.245] The total size of the 2 globals is 243 bytes (243 bytes)
[08:27:08.246] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 243 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (208 bytes of class ‘function’) and ‘x’ (35 bytes of class ‘numeric’)
[08:27:08.246] - globals: [2] ‘slow_fcn’, ‘x’
[08:27:08.246] 
[08:27:08.246] getGlobalsAndPackages() ... DONE
[08:27:08.247] run() for ‘Future’ ...
[08:27:08.247] - state: ‘created’
[08:27:08.247] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:08.261] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:08.261] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:08.261]   - Field: ‘node’
[08:27:08.261]   - Field: ‘label’
[08:27:08.261]   - Field: ‘local’
[08:27:08.261]   - Field: ‘owner’
[08:27:08.261]   - Field: ‘envir’
[08:27:08.261]   - Field: ‘workers’
[08:27:08.261]   - Field: ‘packages’
[08:27:08.262]   - Field: ‘gc’
[08:27:08.262]   - Field: ‘conditions’
[08:27:08.262]   - Field: ‘persistent’
[08:27:08.262]   - Field: ‘expr’
[08:27:08.262]   - Field: ‘uuid’
[08:27:08.262]   - Field: ‘seed’
[08:27:08.262]   - Field: ‘version’
[08:27:08.262]   - Field: ‘result’
[08:27:08.262]   - Field: ‘asynchronous’
[08:27:08.263]   - Field: ‘calls’
[08:27:08.263]   - Field: ‘globals’
[08:27:08.263]   - Field: ‘stdout’
[08:27:08.263]   - Field: ‘earlySignal’
[08:27:08.263]   - Field: ‘lazy’
[08:27:08.263]   - Field: ‘state’
[08:27:08.263] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:08.263] - Launch lazy future ...
[08:27:08.264] Packages needed by the future expression (n = 0): <none>
[08:27:08.264] Packages needed by future strategies (n = 0): <none>
[08:27:08.264] {
[08:27:08.264]     {
[08:27:08.264]         {
[08:27:08.264]             ...future.startTime <- base::Sys.time()
[08:27:08.264]             {
[08:27:08.264]                 {
[08:27:08.264]                   {
[08:27:08.264]                     {
[08:27:08.264]                       base::local({
[08:27:08.264]                         has_future <- base::requireNamespace("future", 
[08:27:08.264]                           quietly = TRUE)
[08:27:08.264]                         if (has_future) {
[08:27:08.264]                           ns <- base::getNamespace("future")
[08:27:08.264]                           version <- ns[[".package"]][["version"]]
[08:27:08.264]                           if (is.null(version)) 
[08:27:08.264]                             version <- utils::packageVersion("future")
[08:27:08.264]                         }
[08:27:08.264]                         else {
[08:27:08.264]                           version <- NULL
[08:27:08.264]                         }
[08:27:08.264]                         if (!has_future || version < "1.8.0") {
[08:27:08.264]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:08.264]                             "", base::R.version$version.string), 
[08:27:08.264]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:08.264]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:08.264]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:08.264]                               "release", "version")], collapse = " "), 
[08:27:08.264]                             hostname = base::Sys.info()[["nodename"]])
[08:27:08.264]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:08.264]                             info)
[08:27:08.264]                           info <- base::paste(info, collapse = "; ")
[08:27:08.264]                           if (!has_future) {
[08:27:08.264]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:08.264]                               info)
[08:27:08.264]                           }
[08:27:08.264]                           else {
[08:27:08.264]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:08.264]                               info, version)
[08:27:08.264]                           }
[08:27:08.264]                           base::stop(msg)
[08:27:08.264]                         }
[08:27:08.264]                       })
[08:27:08.264]                     }
[08:27:08.264]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:08.264]                     base::options(mc.cores = 1L)
[08:27:08.264]                   }
[08:27:08.264]                   ...future.strategy.old <- future::plan("list")
[08:27:08.264]                   options(future.plan = NULL)
[08:27:08.264]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:08.264]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:08.264]                 }
[08:27:08.264]                 ...future.workdir <- getwd()
[08:27:08.264]             }
[08:27:08.264]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:08.264]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:08.264]         }
[08:27:08.264]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:08.264]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:08.264]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:08.264]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:08.264]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:08.264]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:08.264]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:08.264]             base::names(...future.oldOptions))
[08:27:08.264]     }
[08:27:08.264]     if (FALSE) {
[08:27:08.264]     }
[08:27:08.264]     else {
[08:27:08.264]         if (TRUE) {
[08:27:08.264]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:08.264]                 open = "w")
[08:27:08.264]         }
[08:27:08.264]         else {
[08:27:08.264]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:08.264]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:08.264]         }
[08:27:08.264]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:08.264]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:08.264]             base::sink(type = "output", split = FALSE)
[08:27:08.264]             base::close(...future.stdout)
[08:27:08.264]         }, add = TRUE)
[08:27:08.264]     }
[08:27:08.264]     ...future.frame <- base::sys.nframe()
[08:27:08.264]     ...future.conditions <- base::list()
[08:27:08.264]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:08.264]     if (FALSE) {
[08:27:08.264]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:08.264]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:08.264]     }
[08:27:08.264]     ...future.result <- base::tryCatch({
[08:27:08.264]         base::withCallingHandlers({
[08:27:08.264]             ...future.value <- base::withVisible(base::local({
[08:27:08.264]                 ...future.makeSendCondition <- base::local({
[08:27:08.264]                   sendCondition <- NULL
[08:27:08.264]                   function(frame = 1L) {
[08:27:08.264]                     if (is.function(sendCondition)) 
[08:27:08.264]                       return(sendCondition)
[08:27:08.264]                     ns <- getNamespace("parallel")
[08:27:08.264]                     if (exists("sendData", mode = "function", 
[08:27:08.264]                       envir = ns)) {
[08:27:08.264]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:08.264]                         envir = ns)
[08:27:08.264]                       envir <- sys.frame(frame)
[08:27:08.264]                       master <- NULL
[08:27:08.264]                       while (!identical(envir, .GlobalEnv) && 
[08:27:08.264]                         !identical(envir, emptyenv())) {
[08:27:08.264]                         if (exists("master", mode = "list", envir = envir, 
[08:27:08.264]                           inherits = FALSE)) {
[08:27:08.264]                           master <- get("master", mode = "list", 
[08:27:08.264]                             envir = envir, inherits = FALSE)
[08:27:08.264]                           if (inherits(master, c("SOCKnode", 
[08:27:08.264]                             "SOCK0node"))) {
[08:27:08.264]                             sendCondition <<- function(cond) {
[08:27:08.264]                               data <- list(type = "VALUE", value = cond, 
[08:27:08.264]                                 success = TRUE)
[08:27:08.264]                               parallel_sendData(master, data)
[08:27:08.264]                             }
[08:27:08.264]                             return(sendCondition)
[08:27:08.264]                           }
[08:27:08.264]                         }
[08:27:08.264]                         frame <- frame + 1L
[08:27:08.264]                         envir <- sys.frame(frame)
[08:27:08.264]                       }
[08:27:08.264]                     }
[08:27:08.264]                     sendCondition <<- function(cond) NULL
[08:27:08.264]                   }
[08:27:08.264]                 })
[08:27:08.264]                 withCallingHandlers({
[08:27:08.264]                   slow_fcn(x)
[08:27:08.264]                 }, immediateCondition = function(cond) {
[08:27:08.264]                   sendCondition <- ...future.makeSendCondition()
[08:27:08.264]                   sendCondition(cond)
[08:27:08.264]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.264]                   {
[08:27:08.264]                     inherits <- base::inherits
[08:27:08.264]                     invokeRestart <- base::invokeRestart
[08:27:08.264]                     is.null <- base::is.null
[08:27:08.264]                     muffled <- FALSE
[08:27:08.264]                     if (inherits(cond, "message")) {
[08:27:08.264]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:08.264]                       if (muffled) 
[08:27:08.264]                         invokeRestart("muffleMessage")
[08:27:08.264]                     }
[08:27:08.264]                     else if (inherits(cond, "warning")) {
[08:27:08.264]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:08.264]                       if (muffled) 
[08:27:08.264]                         invokeRestart("muffleWarning")
[08:27:08.264]                     }
[08:27:08.264]                     else if (inherits(cond, "condition")) {
[08:27:08.264]                       if (!is.null(pattern)) {
[08:27:08.264]                         computeRestarts <- base::computeRestarts
[08:27:08.264]                         grepl <- base::grepl
[08:27:08.264]                         restarts <- computeRestarts(cond)
[08:27:08.264]                         for (restart in restarts) {
[08:27:08.264]                           name <- restart$name
[08:27:08.264]                           if (is.null(name)) 
[08:27:08.264]                             next
[08:27:08.264]                           if (!grepl(pattern, name)) 
[08:27:08.264]                             next
[08:27:08.264]                           invokeRestart(restart)
[08:27:08.264]                           muffled <- TRUE
[08:27:08.264]                           break
[08:27:08.264]                         }
[08:27:08.264]                       }
[08:27:08.264]                     }
[08:27:08.264]                     invisible(muffled)
[08:27:08.264]                   }
[08:27:08.264]                   muffleCondition(cond)
[08:27:08.264]                 })
[08:27:08.264]             }))
[08:27:08.264]             future::FutureResult(value = ...future.value$value, 
[08:27:08.264]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:08.264]                   ...future.rng), globalenv = if (FALSE) 
[08:27:08.264]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:08.264]                     ...future.globalenv.names))
[08:27:08.264]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:08.264]         }, condition = base::local({
[08:27:08.264]             c <- base::c
[08:27:08.264]             inherits <- base::inherits
[08:27:08.264]             invokeRestart <- base::invokeRestart
[08:27:08.264]             length <- base::length
[08:27:08.264]             list <- base::list
[08:27:08.264]             seq.int <- base::seq.int
[08:27:08.264]             signalCondition <- base::signalCondition
[08:27:08.264]             sys.calls <- base::sys.calls
[08:27:08.264]             `[[` <- base::`[[`
[08:27:08.264]             `+` <- base::`+`
[08:27:08.264]             `<<-` <- base::`<<-`
[08:27:08.264]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:08.264]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:08.264]                   3L)]
[08:27:08.264]             }
[08:27:08.264]             function(cond) {
[08:27:08.264]                 is_error <- inherits(cond, "error")
[08:27:08.264]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:08.264]                   NULL)
[08:27:08.264]                 if (is_error) {
[08:27:08.264]                   sessionInformation <- function() {
[08:27:08.264]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:08.264]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:08.264]                       search = base::search(), system = base::Sys.info())
[08:27:08.264]                   }
[08:27:08.264]                   ...future.conditions[[length(...future.conditions) + 
[08:27:08.264]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:08.264]                     cond$call), session = sessionInformation(), 
[08:27:08.264]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:08.264]                   signalCondition(cond)
[08:27:08.264]                 }
[08:27:08.264]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:08.264]                 "immediateCondition"))) {
[08:27:08.264]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:08.264]                   ...future.conditions[[length(...future.conditions) + 
[08:27:08.264]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:08.264]                   if (TRUE && !signal) {
[08:27:08.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.264]                     {
[08:27:08.264]                       inherits <- base::inherits
[08:27:08.264]                       invokeRestart <- base::invokeRestart
[08:27:08.264]                       is.null <- base::is.null
[08:27:08.264]                       muffled <- FALSE
[08:27:08.264]                       if (inherits(cond, "message")) {
[08:27:08.264]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:08.264]                         if (muffled) 
[08:27:08.264]                           invokeRestart("muffleMessage")
[08:27:08.264]                       }
[08:27:08.264]                       else if (inherits(cond, "warning")) {
[08:27:08.264]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:08.264]                         if (muffled) 
[08:27:08.264]                           invokeRestart("muffleWarning")
[08:27:08.264]                       }
[08:27:08.264]                       else if (inherits(cond, "condition")) {
[08:27:08.264]                         if (!is.null(pattern)) {
[08:27:08.264]                           computeRestarts <- base::computeRestarts
[08:27:08.264]                           grepl <- base::grepl
[08:27:08.264]                           restarts <- computeRestarts(cond)
[08:27:08.264]                           for (restart in restarts) {
[08:27:08.264]                             name <- restart$name
[08:27:08.264]                             if (is.null(name)) 
[08:27:08.264]                               next
[08:27:08.264]                             if (!grepl(pattern, name)) 
[08:27:08.264]                               next
[08:27:08.264]                             invokeRestart(restart)
[08:27:08.264]                             muffled <- TRUE
[08:27:08.264]                             break
[08:27:08.264]                           }
[08:27:08.264]                         }
[08:27:08.264]                       }
[08:27:08.264]                       invisible(muffled)
[08:27:08.264]                     }
[08:27:08.264]                     muffleCondition(cond, pattern = "^muffle")
[08:27:08.264]                   }
[08:27:08.264]                 }
[08:27:08.264]                 else {
[08:27:08.264]                   if (TRUE) {
[08:27:08.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:08.264]                     {
[08:27:08.264]                       inherits <- base::inherits
[08:27:08.264]                       invokeRestart <- base::invokeRestart
[08:27:08.264]                       is.null <- base::is.null
[08:27:08.264]                       muffled <- FALSE
[08:27:08.264]                       if (inherits(cond, "message")) {
[08:27:08.264]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:08.264]                         if (muffled) 
[08:27:08.264]                           invokeRestart("muffleMessage")
[08:27:08.264]                       }
[08:27:08.264]                       else if (inherits(cond, "warning")) {
[08:27:08.264]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:08.264]                         if (muffled) 
[08:27:08.264]                           invokeRestart("muffleWarning")
[08:27:08.264]                       }
[08:27:08.264]                       else if (inherits(cond, "condition")) {
[08:27:08.264]                         if (!is.null(pattern)) {
[08:27:08.264]                           computeRestarts <- base::computeRestarts
[08:27:08.264]                           grepl <- base::grepl
[08:27:08.264]                           restarts <- computeRestarts(cond)
[08:27:08.264]                           for (restart in restarts) {
[08:27:08.264]                             name <- restart$name
[08:27:08.264]                             if (is.null(name)) 
[08:27:08.264]                               next
[08:27:08.264]                             if (!grepl(pattern, name)) 
[08:27:08.264]                               next
[08:27:08.264]                             invokeRestart(restart)
[08:27:08.264]                             muffled <- TRUE
[08:27:08.264]                             break
[08:27:08.264]                           }
[08:27:08.264]                         }
[08:27:08.264]                       }
[08:27:08.264]                       invisible(muffled)
[08:27:08.264]                     }
[08:27:08.264]                     muffleCondition(cond, pattern = "^muffle")
[08:27:08.264]                   }
[08:27:08.264]                 }
[08:27:08.264]             }
[08:27:08.264]         }))
[08:27:08.264]     }, error = function(ex) {
[08:27:08.264]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:08.264]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:08.264]                 ...future.rng), started = ...future.startTime, 
[08:27:08.264]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:08.264]             version = "1.8"), class = "FutureResult")
[08:27:08.264]     }, finally = {
[08:27:08.264]         if (!identical(...future.workdir, getwd())) 
[08:27:08.264]             setwd(...future.workdir)
[08:27:08.264]         {
[08:27:08.264]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:08.264]                 ...future.oldOptions$nwarnings <- NULL
[08:27:08.264]             }
[08:27:08.264]             base::options(...future.oldOptions)
[08:27:08.264]             if (.Platform$OS.type == "windows") {
[08:27:08.264]                 old_names <- names(...future.oldEnvVars)
[08:27:08.264]                 envs <- base::Sys.getenv()
[08:27:08.264]                 names <- names(envs)
[08:27:08.264]                 common <- intersect(names, old_names)
[08:27:08.264]                 added <- setdiff(names, old_names)
[08:27:08.264]                 removed <- setdiff(old_names, names)
[08:27:08.264]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:08.264]                   envs[common]]
[08:27:08.264]                 NAMES <- toupper(changed)
[08:27:08.264]                 args <- list()
[08:27:08.264]                 for (kk in seq_along(NAMES)) {
[08:27:08.264]                   name <- changed[[kk]]
[08:27:08.264]                   NAME <- NAMES[[kk]]
[08:27:08.264]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.264]                     next
[08:27:08.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:08.264]                 }
[08:27:08.264]                 NAMES <- toupper(added)
[08:27:08.264]                 for (kk in seq_along(NAMES)) {
[08:27:08.264]                   name <- added[[kk]]
[08:27:08.264]                   NAME <- NAMES[[kk]]
[08:27:08.264]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.264]                     next
[08:27:08.264]                   args[[name]] <- ""
[08:27:08.264]                 }
[08:27:08.264]                 NAMES <- toupper(removed)
[08:27:08.264]                 for (kk in seq_along(NAMES)) {
[08:27:08.264]                   name <- removed[[kk]]
[08:27:08.264]                   NAME <- NAMES[[kk]]
[08:27:08.264]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:08.264]                     next
[08:27:08.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:08.264]                 }
[08:27:08.264]                 if (length(args) > 0) 
[08:27:08.264]                   base::do.call(base::Sys.setenv, args = args)
[08:27:08.264]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:08.264]             }
[08:27:08.264]             else {
[08:27:08.264]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:08.264]             }
[08:27:08.264]             {
[08:27:08.264]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:08.264]                   0L) {
[08:27:08.264]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:08.264]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:08.264]                   base::options(opts)
[08:27:08.264]                 }
[08:27:08.264]                 {
[08:27:08.264]                   {
[08:27:08.264]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:08.264]                     NULL
[08:27:08.264]                   }
[08:27:08.264]                   options(future.plan = NULL)
[08:27:08.264]                   if (is.na(NA_character_)) 
[08:27:08.264]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:08.264]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:08.264]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:08.264]                     .init = FALSE)
[08:27:08.264]                 }
[08:27:08.264]             }
[08:27:08.264]         }
[08:27:08.264]     })
[08:27:08.264]     if (TRUE) {
[08:27:08.264]         base::sink(type = "output", split = FALSE)
[08:27:08.264]         if (TRUE) {
[08:27:08.264]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:08.264]         }
[08:27:08.264]         else {
[08:27:08.264]             ...future.result["stdout"] <- base::list(NULL)
[08:27:08.264]         }
[08:27:08.264]         base::close(...future.stdout)
[08:27:08.264]         ...future.stdout <- NULL
[08:27:08.264]     }
[08:27:08.264]     ...future.result$conditions <- ...future.conditions
[08:27:08.264]     ...future.result$finished <- base::Sys.time()
[08:27:08.264]     ...future.result
[08:27:08.264] }
[08:27:08.267] Poll #1 (0): usedNodes() = 2, workers = 2
[08:27:08.300] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[08:27:08.344] Poll #3 (0.08 secs): usedNodes() = 2, workers = 2
[08:27:08.376] Poll #4 (0.11 secs): usedNodes() = 2, workers = 2
[08:27:08.408] Poll #5 (0.14 secs): usedNodes() = 2, workers = 2
[08:27:08.440] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[08:27:08.472] Poll #7 (0.21 secs): usedNodes() = 2, workers = 2
[08:27:08.505] Poll #8 (0.24 secs): usedNodes() = 2, workers = 2
[08:27:08.537] Poll #9 (0.27 secs): usedNodes() = 2, workers = 2
[08:27:08.570] Poll #10 (0.3 secs): usedNodes() = 2, workers = 2
[08:27:08.603] Poll #11 (0.34 secs): usedNodes() = 2, workers = 2
[08:27:08.636] Poll #12 (0.37 secs): usedNodes() = 2, workers = 2
[08:27:08.669] Poll #13 (0.4 secs): usedNodes() = 2, workers = 2
[08:27:08.702] Poll #14 (0.44 secs): usedNodes() = 2, workers = 2
[08:27:08.736] Poll #15 (0.47 secs): usedNodes() = 2, workers = 2
[08:27:08.769] Poll #16 (0.5 secs): usedNodes() = 2, workers = 2
[08:27:08.803] Poll #17 (0.54 secs): usedNodes() = 2, workers = 2
[08:27:08.836] Poll #18 (0.57 secs): usedNodes() = 2, workers = 2
[08:27:08.870] Poll #19 (0.6 secs): usedNodes() = 2, workers = 2
[08:27:08.904] Poll #20 (0.64 secs): usedNodes() = 2, workers = 2
[08:27:08.938] Poll #21 (0.67 secs): usedNodes() = 2, workers = 2
[08:27:08.972] Poll #22 (0.71 secs): usedNodes() = 2, workers = 2
[08:27:09.006] Poll #23 (0.74 secs): usedNodes() = 2, workers = 2
[08:27:09.041] Poll #24 (0.77 secs): usedNodes() = 2, workers = 2
[08:27:09.054] receiveMessageFromWorker() for ClusterFuture ...
[08:27:09.054] - Validating connection of MultisessionFuture
[08:27:09.055] - received message: FutureResult
[08:27:09.055] - Received FutureResult
[08:27:09.056] - Erased future from FutureRegistry
[08:27:09.056] result() for ClusterFuture ...
[08:27:09.056] - result already collected: FutureResult
[08:27:09.056] result() for ClusterFuture ... done
[08:27:09.059] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:09.059] result() for ClusterFuture ...
[08:27:09.059] - result already collected: FutureResult
[08:27:09.059] result() for ClusterFuture ... done
[08:27:09.059] result() for ClusterFuture ...
[08:27:09.060] - result already collected: FutureResult
[08:27:09.060] result() for ClusterFuture ... done
[08:27:09.062] Exporting 2 global objects (563 bytes) to cluster node #1 ...
[08:27:09.062] Exporting ‘slow_fcn’ (208 bytes) to cluster node #1 ...
[08:27:09.063] Exporting ‘slow_fcn’ (208 bytes) to cluster node #1 ... DONE
[08:27:09.063] Exporting ‘x’ (35 bytes) to cluster node #1 ...
[08:27:09.063] Exporting ‘x’ (35 bytes) to cluster node #1 ... DONE
[08:27:09.063] Exporting 2 global objects (563 bytes) to cluster node #1 ... DONE
[08:27:09.064] MultisessionFuture started
[08:27:09.065] - Launch lazy future ... done
[08:27:09.065] run() for ‘MultisessionFuture’ ... done
[08:27:09.065] resolve() on list ...
[08:27:09.066]  recursive: 0
[08:27:09.066]  length: 3
[08:27:09.066] 
[08:27:09.066] Future #1
[08:27:09.066] result() for ClusterFuture ...
[08:27:09.066] - result already collected: FutureResult
[08:27:09.066] result() for ClusterFuture ... done
[08:27:09.066] result() for ClusterFuture ...
[08:27:09.066] - result already collected: FutureResult
[08:27:09.067] result() for ClusterFuture ... done
[08:27:09.067] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:27:09.067] - nx: 3
[08:27:09.067] - relay: TRUE
[08:27:09.067] - stdout: TRUE
[08:27:09.067] - signal: TRUE
[08:27:09.067] - resignal: FALSE
[08:27:09.067] - force: TRUE
[08:27:09.067] - relayed: [n=3] FALSE, FALSE, FALSE
[08:27:09.067] - queued futures: [n=3] FALSE, FALSE, FALSE
[08:27:09.067]  - until=1
[08:27:09.068]  - relaying element #1
[08:27:09.068] result() for ClusterFuture ...
[08:27:09.068] - result already collected: FutureResult
[08:27:09.068] result() for ClusterFuture ... done
[08:27:09.068] result() for ClusterFuture ...
[08:27:09.068] - result already collected: FutureResult
[08:27:09.068] result() for ClusterFuture ... done
[08:27:09.068] result() for ClusterFuture ...
[08:27:09.068] - result already collected: FutureResult
[08:27:09.068] result() for ClusterFuture ... done
[08:27:09.068] result() for ClusterFuture ...
[08:27:09.069] - result already collected: FutureResult
[08:27:09.069] result() for ClusterFuture ... done
[08:27:09.069] - relayed: [n=3] TRUE, FALSE, FALSE
[08:27:09.069] - queued futures: [n=3] TRUE, FALSE, FALSE
[08:27:09.069] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:27:09.069]  length: 2 (resolved future 1)
[08:27:09.321] receiveMessageFromWorker() for ClusterFuture ...
[08:27:09.321] - Validating connection of MultisessionFuture
[08:27:09.321] - received message: FutureResult
[08:27:09.322] - Received FutureResult
[08:27:09.322] - Erased future from FutureRegistry
[08:27:09.322] result() for ClusterFuture ...
[08:27:09.322] - result already collected: FutureResult
[08:27:09.322] result() for ClusterFuture ... done
[08:27:09.324] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:09.324] Future #2
[08:27:09.324] result() for ClusterFuture ...
[08:27:09.324] - result already collected: FutureResult
[08:27:09.324] result() for ClusterFuture ... done
[08:27:09.325] result() for ClusterFuture ...
[08:27:09.325] - result already collected: FutureResult
[08:27:09.325] result() for ClusterFuture ... done
[08:27:09.325] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:27:09.325] - nx: 3
[08:27:09.325] - relay: TRUE
[08:27:09.325] - stdout: TRUE
[08:27:09.325] - signal: TRUE
[08:27:09.325] - resignal: FALSE
[08:27:09.325] - force: TRUE
[08:27:09.325] - relayed: [n=3] TRUE, FALSE, FALSE
[08:27:09.326] - queued futures: [n=3] TRUE, FALSE, FALSE
[08:27:09.326]  - until=2
[08:27:09.326]  - relaying element #2
[08:27:09.326] result() for ClusterFuture ...
[08:27:09.326] - result already collected: FutureResult
[08:27:09.326] result() for ClusterFuture ... done
[08:27:09.326] result() for ClusterFuture ...
[08:27:09.326] - result already collected: FutureResult
[08:27:09.326] result() for ClusterFuture ... done
[08:27:09.326] result() for ClusterFuture ...
[08:27:09.326] - result already collected: FutureResult
[08:27:09.327] result() for ClusterFuture ... done
[08:27:09.327] result() for ClusterFuture ...
[08:27:09.327] - result already collected: FutureResult
[08:27:09.327] result() for ClusterFuture ... done
[08:27:09.327] - relayed: [n=3] TRUE, TRUE, FALSE
[08:27:09.327] - queued futures: [n=3] TRUE, TRUE, FALSE
[08:27:09.327] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:27:09.327]  length: 1 (resolved future 2)
[08:27:10.608] receiveMessageFromWorker() for ClusterFuture ...
[08:27:10.608] - Validating connection of MultisessionFuture
[08:27:10.609] - received message: FutureResult
[08:27:10.610] - Received FutureResult
[08:27:10.610] - Erased future from FutureRegistry
[08:27:10.610] result() for ClusterFuture ...
[08:27:10.610] - result already collected: FutureResult
[08:27:10.610] result() for ClusterFuture ... done
[08:27:10.612] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:10.612] Future #3
[08:27:10.612] result() for ClusterFuture ...
[08:27:10.612] - result already collected: FutureResult
[08:27:10.612] result() for ClusterFuture ... done
[08:27:10.612] result() for ClusterFuture ...
[08:27:10.612] - result already collected: FutureResult
[08:27:10.613] result() for ClusterFuture ... done
[08:27:10.613] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:27:10.613] - nx: 3
[08:27:10.613] - relay: TRUE
[08:27:10.613] - stdout: TRUE
[08:27:10.613] - signal: TRUE
[08:27:10.613] - resignal: FALSE
[08:27:10.613] - force: TRUE
[08:27:10.613] - relayed: [n=3] TRUE, TRUE, FALSE
[08:27:10.613] - queued futures: [n=3] TRUE, TRUE, FALSE
[08:27:10.613]  - until=3
[08:27:10.613]  - relaying element #3
[08:27:10.614] result() for ClusterFuture ...
[08:27:10.614] - result already collected: FutureResult
[08:27:10.614] result() for ClusterFuture ... done
[08:27:10.614] result() for ClusterFuture ...
[08:27:10.614] - result already collected: FutureResult
[08:27:10.614] result() for ClusterFuture ... done
[08:27:10.614] result() for ClusterFuture ...
[08:27:10.614] - result already collected: FutureResult
[08:27:10.614] result() for ClusterFuture ... done
[08:27:10.614] result() for ClusterFuture ...
[08:27:10.614] - result already collected: FutureResult
[08:27:10.615] result() for ClusterFuture ... done
[08:27:10.615] - relayed: [n=3] TRUE, TRUE, TRUE
[08:27:10.615] - queued futures: [n=3] TRUE, TRUE, TRUE
[08:27:10.615] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:27:10.615]  length: 0 (resolved future 3)
[08:27:10.615] Relaying remaining futures
[08:27:10.615] signalConditionsASAP(NULL, pos=0) ...
[08:27:10.615] - nx: 3
[08:27:10.615] - relay: TRUE
[08:27:10.615] - stdout: TRUE
[08:27:10.615] - signal: TRUE
[08:27:10.615] - resignal: FALSE
[08:27:10.616] - force: TRUE
[08:27:10.616] - relayed: [n=3] TRUE, TRUE, TRUE
[08:27:10.616] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[08:27:10.616] - relayed: [n=3] TRUE, TRUE, TRUE
[08:27:10.616] - queued futures: [n=3] TRUE, TRUE, TRUE
[08:27:10.616] signalConditionsASAP(NULL, pos=0) ... done
[08:27:10.616] resolve() on list ... DONE
[08:27:10.616] result() for ClusterFuture ...
[08:27:10.616] - result already collected: FutureResult
[08:27:10.616] result() for ClusterFuture ... done
[08:27:10.616] result() for ClusterFuture ...
[08:27:10.617] - result already collected: FutureResult
[08:27:10.617] result() for ClusterFuture ... done
[08:27:10.617] result() for ClusterFuture ...
[08:27:10.617] - result already collected: FutureResult
[08:27:10.617] result() for ClusterFuture ... done
[08:27:10.617] result() for ClusterFuture ...
[08:27:10.617] - result already collected: FutureResult
[08:27:10.617] result() for ClusterFuture ... done
[08:27:10.617] result() for ClusterFuture ...
[08:27:10.617] - result already collected: FutureResult
[08:27:10.617] result() for ClusterFuture ... done
[08:27:10.618] result() for ClusterFuture ...
[08:27:10.618] - result already collected: FutureResult
[08:27:10.618] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-06-17 08:27:08 0.00000000 secs
6         launch   overhead   <NA> 2025-06-17 08:27:08 0.02447987 secs
2      getWorker   overhead launch 2025-06-17 08:27:08 0.02774668 secs
3    eraseWorker   overhead launch 2025-06-17 08:27:08 0.02926373 secs
4 attachPackages   overhead launch 2025-06-17 08:27:08 0.03048921 secs
5  exportGlobals   overhead launch 2025-06-17 08:27:08 0.03107905 secs
9       evaluate evaluation   <NA> 2025-06-17 08:27:08 0.07490444 secs
7  receiveResult   overhead gather 2025-06-17 08:27:09 0.93067002 secs
8         gather   overhead   <NA> 2025-06-17 08:27:09 0.93176627 secs
           duration future_label                          future_uuid
1 7.611275e-03 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
6 9.409189e-03 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
2 2.477169e-04 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
3 5.869865e-04 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
4 5.364418e-05 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
5 1.593351e-03 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
9 8.397937e-01 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
7 2.069473e-04 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
8 2.684593e-04 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
                          session_uuid
1 27f48bdf-6826-a9f6-4bc2-885f772386f5
6 27f48bdf-6826-a9f6-4bc2-885f772386f5
2 27f48bdf-6826-a9f6-4bc2-885f772386f5
3 27f48bdf-6826-a9f6-4bc2-885f772386f5
4 27f48bdf-6826-a9f6-4bc2-885f772386f5
5 27f48bdf-6826-a9f6-4bc2-885f772386f5
9 fa92dbb6-b5ca-e000-42f6-94a2ed454621
7 27f48bdf-6826-a9f6-4bc2-885f772386f5
8 27f48bdf-6826-a9f6-4bc2-885f772386f5

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-06-17 08:27:08 0.00000000 secs
6         launch   overhead   <NA> 2025-06-17 08:27:08 0.02077651 secs
2      getWorker   overhead launch 2025-06-17 08:27:08 0.02423048 secs
3    eraseWorker   overhead launch 2025-06-17 08:27:08 0.02516079 secs
4 attachPackages   overhead launch 2025-06-17 08:27:08 0.07780218 secs
5  exportGlobals   overhead launch 2025-06-17 08:27:08 0.07858801 secs
9       evaluate evaluation   <NA> 2025-06-17 08:27:08 0.12192822 secs
7  receiveResult   overhead gather 2025-06-17 08:27:09 1.16110897 secs
8         gather   overhead   <NA> 2025-06-17 08:27:09 1.16219068 secs
           duration future_label                          future_uuid
1 3.700733e-03 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
6 6.077671e-02 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
2 1.950264e-04 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
3 5.160332e-02 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
4 5.888939e-05 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
5 1.592636e-03 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
9 1.033642e+00 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
7 2.024174e-04 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
8 2.951622e-04 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
                          session_uuid
1 27f48bdf-6826-a9f6-4bc2-885f772386f5
6 27f48bdf-6826-a9f6-4bc2-885f772386f5
2 27f48bdf-6826-a9f6-4bc2-885f772386f5
3 27f48bdf-6826-a9f6-4bc2-885f772386f5
4 27f48bdf-6826-a9f6-4bc2-885f772386f5
5 27f48bdf-6826-a9f6-4bc2-885f772386f5
9 df10b1ae-e0a8-663e-ae97-ca9563bccba4
7 27f48bdf-6826-a9f6-4bc2-885f772386f5
8 27f48bdf-6826-a9f6-4bc2-885f772386f5

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-06-17 08:27:08 0.00000000 secs
6         launch   overhead   <NA> 2025-06-17 08:27:08 0.02112889 secs
2      getWorker   overhead launch 2025-06-17 08:27:08 0.02452707 secs
3    eraseWorker   overhead launch 2025-06-17 08:27:09 0.81813598 secs
4 attachPackages   overhead launch 2025-06-17 08:27:09 0.81910563 secs
5  exportGlobals   overhead launch 2025-06-17 08:27:09 0.81964040 secs
9       evaluate evaluation   <NA> 2025-06-17 08:27:09 0.86240339 secs
7  receiveResult   overhead gather 2025-06-17 08:27:10 2.36629152 secs
8         gather   overhead   <NA> 2025-06-17 08:27:10 2.36743927 secs
           duration future_label                          future_uuid
1 4.114628e-03 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
6 8.009472e-01 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
2 7.930553e-01 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
3 4.360676e-04 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
4 4.339218e-05 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
5 1.396418e-03 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
9 1.503217e+00 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
7 2.391338e-04 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
8 2.615452e-04 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
                          session_uuid
1 27f48bdf-6826-a9f6-4bc2-885f772386f5
6 27f48bdf-6826-a9f6-4bc2-885f772386f5
2 27f48bdf-6826-a9f6-4bc2-885f772386f5
3 27f48bdf-6826-a9f6-4bc2-885f772386f5
4 27f48bdf-6826-a9f6-4bc2-885f772386f5
5 27f48bdf-6826-a9f6-4bc2-885f772386f5
9 fa92dbb6-b5ca-e000-42f6-94a2ed454621
7 27f48bdf-6826-a9f6-4bc2-885f772386f5
8 27f48bdf-6826-a9f6-4bc2-885f772386f5

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[08:27:10.622] plan(): Setting new future strategy stack:
[08:27:10.623] List of future strategies:
[08:27:10.623] 1. sequential:
[08:27:10.623]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:10.623]    - tweaked: FALSE
[08:27:10.623]    - call: plan(sequential)
[08:27:10.623] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2025-06-17 08:27:08 0.00000000 secs
6          launch   overhead   <NA> 2025-06-17 08:27:08 0.02447987 secs
2       getWorker   overhead launch 2025-06-17 08:27:08 0.02774668 secs
3     eraseWorker   overhead launch 2025-06-17 08:27:08 0.02926373 secs
4  attachPackages   overhead launch 2025-06-17 08:27:08 0.03048921 secs
5   exportGlobals   overhead launch 2025-06-17 08:27:08 0.03107905 secs
9        evaluate evaluation   <NA> 2025-06-17 08:27:08 0.07490444 secs
7   receiveResult   overhead gather 2025-06-17 08:27:09 0.93067002 secs
8          gather   overhead   <NA> 2025-06-17 08:27:09 0.93176627 secs
11         create   overhead   <NA> 2025-06-17 08:27:08 0.00000000 secs
61         launch   overhead   <NA> 2025-06-17 08:27:08 0.02077651 secs
21      getWorker   overhead launch 2025-06-17 08:27:08 0.02423048 secs
31    eraseWorker   overhead launch 2025-06-17 08:27:08 0.02516079 secs
41 attachPackages   overhead launch 2025-06-17 08:27:08 0.07780218 secs
51  exportGlobals   overhead launch 2025-06-17 08:27:08 0.07858801 secs
91       evaluate evaluation   <NA> 2025-06-17 08:27:08 0.12192822 secs
71  receiveResult   overhead gather 2025-06-17 08:27:09 1.16110897 secs
81         gather   overhead   <NA> 2025-06-17 08:27:09 1.16219068 secs
12         create   overhead   <NA> 2025-06-17 08:27:08 0.00000000 secs
62         launch   overhead   <NA> 2025-06-17 08:27:08 0.02112889 secs
22      getWorker   overhead launch 2025-06-17 08:27:08 0.02452707 secs
32    eraseWorker   overhead launch 2025-06-17 08:27:09 0.81813598 secs
42 attachPackages   overhead launch 2025-06-17 08:27:09 0.81910563 secs
52  exportGlobals   overhead launch 2025-06-17 08:27:09 0.81964040 secs
92       evaluate evaluation   <NA> 2025-06-17 08:27:09 0.86240339 secs
72  receiveResult   overhead gather 2025-06-17 08:27:10 2.36629152 secs
82         gather   overhead   <NA> 2025-06-17 08:27:10 2.36743927 secs
            duration future_label                          future_uuid
1  7.611275e-03 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
6  9.409189e-03 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
2  2.477169e-04 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
3  5.869865e-04 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
4  5.364418e-05 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
5  1.593351e-03 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
9  8.397937e-01 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
7  2.069473e-04 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
8  2.684593e-04 secs         <NA> 2116d9b2-864a-3264-6158-1bd7899b2d77
11 3.700733e-03 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
61 6.077671e-02 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
21 1.950264e-04 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
31 5.160332e-02 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
41 5.888939e-05 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
51 1.592636e-03 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
91 1.033642e+00 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
71 2.024174e-04 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
81 2.951622e-04 secs         <NA> d02db751-3976-1292-92c9-f10e169ee2b0
12 4.114628e-03 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
62 8.009472e-01 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
22 7.930553e-01 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
32 4.360676e-04 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
42 4.339218e-05 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
52 1.396418e-03 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
92 1.503217e+00 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
72 2.391338e-04 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
82 2.615452e-04 secs         <NA> af655cac-12c4-7925-04a0-38024eb364c6
                           session_uuid
1  27f48bdf-6826-a9f6-4bc2-885f772386f5
6  27f48bdf-6826-a9f6-4bc2-885f772386f5
2  27f48bdf-6826-a9f6-4bc2-885f772386f5
3  27f48bdf-6826-a9f6-4bc2-885f772386f5
4  27f48bdf-6826-a9f6-4bc2-885f772386f5
5  27f48bdf-6826-a9f6-4bc2-885f772386f5
9  fa92dbb6-b5ca-e000-42f6-94a2ed454621
7  27f48bdf-6826-a9f6-4bc2-885f772386f5
8  27f48bdf-6826-a9f6-4bc2-885f772386f5
11 27f48bdf-6826-a9f6-4bc2-885f772386f5
61 27f48bdf-6826-a9f6-4bc2-885f772386f5
21 27f48bdf-6826-a9f6-4bc2-885f772386f5
31 27f48bdf-6826-a9f6-4bc2-885f772386f5
41 27f48bdf-6826-a9f6-4bc2-885f772386f5
51 27f48bdf-6826-a9f6-4bc2-885f772386f5
91 df10b1ae-e0a8-663e-ae97-ca9563bccba4
71 27f48bdf-6826-a9f6-4bc2-885f772386f5
81 27f48bdf-6826-a9f6-4bc2-885f772386f5
12 27f48bdf-6826-a9f6-4bc2-885f772386f5
62 27f48bdf-6826-a9f6-4bc2-885f772386f5
22 27f48bdf-6826-a9f6-4bc2-885f772386f5
32 27f48bdf-6826-a9f6-4bc2-885f772386f5
42 27f48bdf-6826-a9f6-4bc2-885f772386f5
52 27f48bdf-6826-a9f6-4bc2-885f772386f5
92 fa92dbb6-b5ca-e000-42f6-94a2ed454621
72 27f48bdf-6826-a9f6-4bc2-885f772386f5
82 27f48bdf-6826-a9f6-4bc2-885f772386f5
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8397937 secs      0.9010326 0.01728892 secs     0.01854966
2    mean 1.1255507 secs      0.7567200 0.29579496 secs     0.19886617
3  median 1.0336418 secs      0.8891651 0.06477261 secs     0.05571905
4     max 1.5032167 secs      0.6348846 0.80532336 secs     0.34012885
5   total 3.3766522 secs      0.7567200 0.88738489 secs     0.19886617
        duration       walltime
1 0.9320347 secs 0.9320347 secs
2 1.4874071 secs 1.4874071 secs
3 1.1624858 secs 1.1624858 secs
4 2.3677008 secs 2.3677008 secs
5 4.4622214 secs 4.4622214 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
