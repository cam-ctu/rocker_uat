
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:18.795] plan(): Setting new future strategy stack:
[11:01:18.795] List of future strategies:
[11:01:18.795] 1. sequential:
[11:01:18.795]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.795]    - tweaked: FALSE
[11:01:18.795]    - call: future::plan("sequential")
[11:01:18.808] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[11:01:18.824] getGlobalsAndPackages() ...
[11:01:18.824] Searching for globals...
[11:01:18.826] - globals found: [1] ‘{’
[11:01:18.827] Searching for globals ... DONE
[11:01:18.827] Resolving globals: FALSE
[11:01:18.827] 
[11:01:18.827] 
[11:01:18.827] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[11:01:18.828] resolved() for ‘Future’ ...
[11:01:18.828] - state: ‘created’
[11:01:18.828] - run: TRUE
[11:01:18.828] - run() ...
[11:01:18.828] run() for ‘Future’ ...
[11:01:18.828] - state: ‘created’
[11:01:18.829] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:18.829] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:18.829] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:18.829]   - Field: ‘label’
[11:01:18.829]   - Field: ‘local’
[11:01:18.829]   - Field: ‘owner’
[11:01:18.829]   - Field: ‘envir’
[11:01:18.829]   - Field: ‘packages’
[11:01:18.829]   - Field: ‘gc’
[11:01:18.830]   - Field: ‘conditions’
[11:01:18.830]   - Field: ‘expr’
[11:01:18.830]   - Field: ‘uuid’
[11:01:18.830]   - Field: ‘seed’
[11:01:18.830]   - Field: ‘version’
[11:01:18.830]   - Field: ‘result’
[11:01:18.830]   - Field: ‘asynchronous’
[11:01:18.830]   - Field: ‘calls’
[11:01:18.830]   - Field: ‘globals’
[11:01:18.830]   - Field: ‘stdout’
[11:01:18.830]   - Field: ‘earlySignal’
[11:01:18.830]   - Field: ‘lazy’
[11:01:18.831]   - Field: ‘state’
[11:01:18.831] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:18.831] - Launch lazy future ...
[11:01:18.831] Packages needed by the future expression (n = 0): <none>
[11:01:18.831] Packages needed by future strategies (n = 0): <none>
[11:01:18.832] {
[11:01:18.832]     {
[11:01:18.832]         {
[11:01:18.832]             ...future.startTime <- base::Sys.time()
[11:01:18.832]             {
[11:01:18.832]                 {
[11:01:18.832]                   {
[11:01:18.832]                     base::local({
[11:01:18.832]                       has_future <- base::requireNamespace("future", 
[11:01:18.832]                         quietly = TRUE)
[11:01:18.832]                       if (has_future) {
[11:01:18.832]                         ns <- base::getNamespace("future")
[11:01:18.832]                         version <- ns[[".package"]][["version"]]
[11:01:18.832]                         if (is.null(version)) 
[11:01:18.832]                           version <- utils::packageVersion("future")
[11:01:18.832]                       }
[11:01:18.832]                       else {
[11:01:18.832]                         version <- NULL
[11:01:18.832]                       }
[11:01:18.832]                       if (!has_future || version < "1.8.0") {
[11:01:18.832]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:18.832]                           "", base::R.version$version.string), 
[11:01:18.832]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:18.832]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:18.832]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:18.832]                             "release", "version")], collapse = " "), 
[11:01:18.832]                           hostname = base::Sys.info()[["nodename"]])
[11:01:18.832]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:18.832]                           info)
[11:01:18.832]                         info <- base::paste(info, collapse = "; ")
[11:01:18.832]                         if (!has_future) {
[11:01:18.832]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:18.832]                             info)
[11:01:18.832]                         }
[11:01:18.832]                         else {
[11:01:18.832]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:18.832]                             info, version)
[11:01:18.832]                         }
[11:01:18.832]                         base::stop(msg)
[11:01:18.832]                       }
[11:01:18.832]                     })
[11:01:18.832]                   }
[11:01:18.832]                   ...future.strategy.old <- future::plan("list")
[11:01:18.832]                   options(future.plan = NULL)
[11:01:18.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:18.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:18.832]                 }
[11:01:18.832]                 ...future.workdir <- getwd()
[11:01:18.832]             }
[11:01:18.832]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:18.832]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:18.832]         }
[11:01:18.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:18.832]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:18.832]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:18.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:18.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:18.832]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:18.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:18.832]             base::names(...future.oldOptions))
[11:01:18.832]     }
[11:01:18.832]     if (FALSE) {
[11:01:18.832]     }
[11:01:18.832]     else {
[11:01:18.832]         if (TRUE) {
[11:01:18.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:18.832]                 open = "w")
[11:01:18.832]         }
[11:01:18.832]         else {
[11:01:18.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:18.832]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:18.832]         }
[11:01:18.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:18.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:18.832]             base::sink(type = "output", split = FALSE)
[11:01:18.832]             base::close(...future.stdout)
[11:01:18.832]         }, add = TRUE)
[11:01:18.832]     }
[11:01:18.832]     ...future.frame <- base::sys.nframe()
[11:01:18.832]     ...future.conditions <- base::list()
[11:01:18.832]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:18.832]     if (FALSE) {
[11:01:18.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:18.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:18.832]     }
[11:01:18.832]     ...future.result <- base::tryCatch({
[11:01:18.832]         base::withCallingHandlers({
[11:01:18.832]             ...future.value <- base::withVisible(base::local({
[11:01:18.832]                 42L
[11:01:18.832]             }))
[11:01:18.832]             future::FutureResult(value = ...future.value$value, 
[11:01:18.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:18.832]                   ...future.rng), globalenv = if (FALSE) 
[11:01:18.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:18.832]                     ...future.globalenv.names))
[11:01:18.832]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:18.832]         }, condition = base::local({
[11:01:18.832]             c <- base::c
[11:01:18.832]             inherits <- base::inherits
[11:01:18.832]             invokeRestart <- base::invokeRestart
[11:01:18.832]             length <- base::length
[11:01:18.832]             list <- base::list
[11:01:18.832]             seq.int <- base::seq.int
[11:01:18.832]             signalCondition <- base::signalCondition
[11:01:18.832]             sys.calls <- base::sys.calls
[11:01:18.832]             `[[` <- base::`[[`
[11:01:18.832]             `+` <- base::`+`
[11:01:18.832]             `<<-` <- base::`<<-`
[11:01:18.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:18.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:18.832]                   3L)]
[11:01:18.832]             }
[11:01:18.832]             function(cond) {
[11:01:18.832]                 is_error <- inherits(cond, "error")
[11:01:18.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:18.832]                   NULL)
[11:01:18.832]                 if (is_error) {
[11:01:18.832]                   sessionInformation <- function() {
[11:01:18.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:18.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:18.832]                       search = base::search(), system = base::Sys.info())
[11:01:18.832]                   }
[11:01:18.832]                   ...future.conditions[[length(...future.conditions) + 
[11:01:18.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:18.832]                     cond$call), session = sessionInformation(), 
[11:01:18.832]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:18.832]                   signalCondition(cond)
[11:01:18.832]                 }
[11:01:18.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:18.832]                 "immediateCondition"))) {
[11:01:18.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:18.832]                   ...future.conditions[[length(...future.conditions) + 
[11:01:18.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:18.832]                   if (TRUE && !signal) {
[11:01:18.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:18.832]                     {
[11:01:18.832]                       inherits <- base::inherits
[11:01:18.832]                       invokeRestart <- base::invokeRestart
[11:01:18.832]                       is.null <- base::is.null
[11:01:18.832]                       muffled <- FALSE
[11:01:18.832]                       if (inherits(cond, "message")) {
[11:01:18.832]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:18.832]                         if (muffled) 
[11:01:18.832]                           invokeRestart("muffleMessage")
[11:01:18.832]                       }
[11:01:18.832]                       else if (inherits(cond, "warning")) {
[11:01:18.832]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:18.832]                         if (muffled) 
[11:01:18.832]                           invokeRestart("muffleWarning")
[11:01:18.832]                       }
[11:01:18.832]                       else if (inherits(cond, "condition")) {
[11:01:18.832]                         if (!is.null(pattern)) {
[11:01:18.832]                           computeRestarts <- base::computeRestarts
[11:01:18.832]                           grepl <- base::grepl
[11:01:18.832]                           restarts <- computeRestarts(cond)
[11:01:18.832]                           for (restart in restarts) {
[11:01:18.832]                             name <- restart$name
[11:01:18.832]                             if (is.null(name)) 
[11:01:18.832]                               next
[11:01:18.832]                             if (!grepl(pattern, name)) 
[11:01:18.832]                               next
[11:01:18.832]                             invokeRestart(restart)
[11:01:18.832]                             muffled <- TRUE
[11:01:18.832]                             break
[11:01:18.832]                           }
[11:01:18.832]                         }
[11:01:18.832]                       }
[11:01:18.832]                       invisible(muffled)
[11:01:18.832]                     }
[11:01:18.832]                     muffleCondition(cond, pattern = "^muffle")
[11:01:18.832]                   }
[11:01:18.832]                 }
[11:01:18.832]                 else {
[11:01:18.832]                   if (TRUE) {
[11:01:18.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:18.832]                     {
[11:01:18.832]                       inherits <- base::inherits
[11:01:18.832]                       invokeRestart <- base::invokeRestart
[11:01:18.832]                       is.null <- base::is.null
[11:01:18.832]                       muffled <- FALSE
[11:01:18.832]                       if (inherits(cond, "message")) {
[11:01:18.832]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:18.832]                         if (muffled) 
[11:01:18.832]                           invokeRestart("muffleMessage")
[11:01:18.832]                       }
[11:01:18.832]                       else if (inherits(cond, "warning")) {
[11:01:18.832]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:18.832]                         if (muffled) 
[11:01:18.832]                           invokeRestart("muffleWarning")
[11:01:18.832]                       }
[11:01:18.832]                       else if (inherits(cond, "condition")) {
[11:01:18.832]                         if (!is.null(pattern)) {
[11:01:18.832]                           computeRestarts <- base::computeRestarts
[11:01:18.832]                           grepl <- base::grepl
[11:01:18.832]                           restarts <- computeRestarts(cond)
[11:01:18.832]                           for (restart in restarts) {
[11:01:18.832]                             name <- restart$name
[11:01:18.832]                             if (is.null(name)) 
[11:01:18.832]                               next
[11:01:18.832]                             if (!grepl(pattern, name)) 
[11:01:18.832]                               next
[11:01:18.832]                             invokeRestart(restart)
[11:01:18.832]                             muffled <- TRUE
[11:01:18.832]                             break
[11:01:18.832]                           }
[11:01:18.832]                         }
[11:01:18.832]                       }
[11:01:18.832]                       invisible(muffled)
[11:01:18.832]                     }
[11:01:18.832]                     muffleCondition(cond, pattern = "^muffle")
[11:01:18.832]                   }
[11:01:18.832]                 }
[11:01:18.832]             }
[11:01:18.832]         }))
[11:01:18.832]     }, error = function(ex) {
[11:01:18.832]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:18.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:18.832]                 ...future.rng), started = ...future.startTime, 
[11:01:18.832]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:18.832]             version = "1.8"), class = "FutureResult")
[11:01:18.832]     }, finally = {
[11:01:18.832]         if (!identical(...future.workdir, getwd())) 
[11:01:18.832]             setwd(...future.workdir)
[11:01:18.832]         {
[11:01:18.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:18.832]                 ...future.oldOptions$nwarnings <- NULL
[11:01:18.832]             }
[11:01:18.832]             base::options(...future.oldOptions)
[11:01:18.832]             if (.Platform$OS.type == "windows") {
[11:01:18.832]                 old_names <- names(...future.oldEnvVars)
[11:01:18.832]                 envs <- base::Sys.getenv()
[11:01:18.832]                 names <- names(envs)
[11:01:18.832]                 common <- intersect(names, old_names)
[11:01:18.832]                 added <- setdiff(names, old_names)
[11:01:18.832]                 removed <- setdiff(old_names, names)
[11:01:18.832]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:18.832]                   envs[common]]
[11:01:18.832]                 NAMES <- toupper(changed)
[11:01:18.832]                 args <- list()
[11:01:18.832]                 for (kk in seq_along(NAMES)) {
[11:01:18.832]                   name <- changed[[kk]]
[11:01:18.832]                   NAME <- NAMES[[kk]]
[11:01:18.832]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.832]                     next
[11:01:18.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:18.832]                 }
[11:01:18.832]                 NAMES <- toupper(added)
[11:01:18.832]                 for (kk in seq_along(NAMES)) {
[11:01:18.832]                   name <- added[[kk]]
[11:01:18.832]                   NAME <- NAMES[[kk]]
[11:01:18.832]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.832]                     next
[11:01:18.832]                   args[[name]] <- ""
[11:01:18.832]                 }
[11:01:18.832]                 NAMES <- toupper(removed)
[11:01:18.832]                 for (kk in seq_along(NAMES)) {
[11:01:18.832]                   name <- removed[[kk]]
[11:01:18.832]                   NAME <- NAMES[[kk]]
[11:01:18.832]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.832]                     next
[11:01:18.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:18.832]                 }
[11:01:18.832]                 if (length(args) > 0) 
[11:01:18.832]                   base::do.call(base::Sys.setenv, args = args)
[11:01:18.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:18.832]             }
[11:01:18.832]             else {
[11:01:18.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:18.832]             }
[11:01:18.832]             {
[11:01:18.832]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:18.832]                   0L) {
[11:01:18.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:18.832]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:18.832]                   base::options(opts)
[11:01:18.832]                 }
[11:01:18.832]                 {
[11:01:18.832]                   {
[11:01:18.832]                     NULL
[11:01:18.832]                     RNGkind("Mersenne-Twister")
[11:01:18.832]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:18.832]                       inherits = FALSE)
[11:01:18.832]                   }
[11:01:18.832]                   options(future.plan = NULL)
[11:01:18.832]                   if (is.na(NA_character_)) 
[11:01:18.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:18.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:18.832]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:18.832]                     .init = FALSE)
[11:01:18.832]                 }
[11:01:18.832]             }
[11:01:18.832]         }
[11:01:18.832]     })
[11:01:18.832]     if (TRUE) {
[11:01:18.832]         base::sink(type = "output", split = FALSE)
[11:01:18.832]         if (TRUE) {
[11:01:18.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:18.832]         }
[11:01:18.832]         else {
[11:01:18.832]             ...future.result["stdout"] <- base::list(NULL)
[11:01:18.832]         }
[11:01:18.832]         base::close(...future.stdout)
[11:01:18.832]         ...future.stdout <- NULL
[11:01:18.832]     }
[11:01:18.832]     ...future.result$conditions <- ...future.conditions
[11:01:18.832]     ...future.result$finished <- base::Sys.time()
[11:01:18.832]     ...future.result
[11:01:18.832] }
[11:01:18.834] plan(): Setting new future strategy stack:
[11:01:18.834] List of future strategies:
[11:01:18.834] 1. sequential:
[11:01:18.834]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.834]    - tweaked: FALSE
[11:01:18.834]    - call: NULL
[11:01:18.835] plan(): nbrOfWorkers() = 1
[11:01:18.836] plan(): Setting new future strategy stack:
[11:01:18.836] List of future strategies:
[11:01:18.836] 1. sequential:
[11:01:18.836]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.836]    - tweaked: FALSE
[11:01:18.836]    - call: future::plan("sequential")
[11:01:18.836] plan(): nbrOfWorkers() = 1
[11:01:18.836] SequentialFuture started (and completed)
[11:01:18.837] - Launch lazy future ... done
[11:01:18.837] run() for ‘SequentialFuture’ ... done
[11:01:18.837] - run() ... done
[11:01:18.837] - resolved() ...
[11:01:18.837] resolved() for ‘SequentialFuture’ ...
[11:01:18.837] - state: ‘finished’
[11:01:18.837] - run: TRUE
[11:01:18.837] - result: ‘FutureResult’
[11:01:18.837] resolved() for ‘SequentialFuture’ ... done
[11:01:18.838] - resolved: TRUE
[11:01:18.838] - resolved() ... done
[11:01:18.838] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[11:01:18.838] getGlobalsAndPackages() ...
[11:01:18.838] Searching for globals...
[11:01:18.839] 
[11:01:18.839] Searching for globals ... DONE
[11:01:18.839] - globals: [0] <none>
[11:01:18.839] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 235f50a4-69ef-8996-ea29-8546c15f8310
Class: ‘Future’, ‘environment’
> y <- value(f)
[11:01:18.840] run() for ‘Future’ ...
[11:01:18.840] - state: ‘created’
[11:01:18.840] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:18.840] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:18.840] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:18.840]   - Field: ‘label’
[11:01:18.840]   - Field: ‘local’
[11:01:18.840]   - Field: ‘owner’
[11:01:18.840]   - Field: ‘envir’
[11:01:18.841]   - Field: ‘packages’
[11:01:18.841]   - Field: ‘gc’
[11:01:18.841]   - Field: ‘conditions’
[11:01:18.841]   - Field: ‘expr’
[11:01:18.841]   - Field: ‘uuid’
[11:01:18.841]   - Field: ‘seed’
[11:01:18.841]   - Field: ‘version’
[11:01:18.841]   - Field: ‘result’
[11:01:18.841]   - Field: ‘asynchronous’
[11:01:18.841]   - Field: ‘calls’
[11:01:18.841]   - Field: ‘globals’
[11:01:18.841]   - Field: ‘stdout’
[11:01:18.842]   - Field: ‘earlySignal’
[11:01:18.842]   - Field: ‘lazy’
[11:01:18.842]   - Field: ‘state’
[11:01:18.842] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:18.842] - Launch lazy future ...
[11:01:18.842] Packages needed by the future expression (n = 0): <none>
[11:01:18.842] Packages needed by future strategies (n = 0): <none>
[11:01:18.842] {
[11:01:18.842]     {
[11:01:18.842]         {
[11:01:18.842]             ...future.startTime <- base::Sys.time()
[11:01:18.842]             {
[11:01:18.842]                 {
[11:01:18.842]                   {
[11:01:18.842]                     base::local({
[11:01:18.842]                       has_future <- base::requireNamespace("future", 
[11:01:18.842]                         quietly = TRUE)
[11:01:18.842]                       if (has_future) {
[11:01:18.842]                         ns <- base::getNamespace("future")
[11:01:18.842]                         version <- ns[[".package"]][["version"]]
[11:01:18.842]                         if (is.null(version)) 
[11:01:18.842]                           version <- utils::packageVersion("future")
[11:01:18.842]                       }
[11:01:18.842]                       else {
[11:01:18.842]                         version <- NULL
[11:01:18.842]                       }
[11:01:18.842]                       if (!has_future || version < "1.8.0") {
[11:01:18.842]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:18.842]                           "", base::R.version$version.string), 
[11:01:18.842]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:18.842]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:18.842]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:18.842]                             "release", "version")], collapse = " "), 
[11:01:18.842]                           hostname = base::Sys.info()[["nodename"]])
[11:01:18.842]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:18.842]                           info)
[11:01:18.842]                         info <- base::paste(info, collapse = "; ")
[11:01:18.842]                         if (!has_future) {
[11:01:18.842]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:18.842]                             info)
[11:01:18.842]                         }
[11:01:18.842]                         else {
[11:01:18.842]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:18.842]                             info, version)
[11:01:18.842]                         }
[11:01:18.842]                         base::stop(msg)
[11:01:18.842]                       }
[11:01:18.842]                     })
[11:01:18.842]                   }
[11:01:18.842]                   ...future.strategy.old <- future::plan("list")
[11:01:18.842]                   options(future.plan = NULL)
[11:01:18.842]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:18.842]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:18.842]                 }
[11:01:18.842]                 ...future.workdir <- getwd()
[11:01:18.842]             }
[11:01:18.842]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:18.842]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:18.842]         }
[11:01:18.842]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:18.842]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:18.842]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:18.842]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:18.842]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:18.842]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:18.842]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:18.842]             base::names(...future.oldOptions))
[11:01:18.842]     }
[11:01:18.842]     if (FALSE) {
[11:01:18.842]     }
[11:01:18.842]     else {
[11:01:18.842]         if (TRUE) {
[11:01:18.842]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:18.842]                 open = "w")
[11:01:18.842]         }
[11:01:18.842]         else {
[11:01:18.842]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:18.842]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:18.842]         }
[11:01:18.842]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:18.842]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:18.842]             base::sink(type = "output", split = FALSE)
[11:01:18.842]             base::close(...future.stdout)
[11:01:18.842]         }, add = TRUE)
[11:01:18.842]     }
[11:01:18.842]     ...future.frame <- base::sys.nframe()
[11:01:18.842]     ...future.conditions <- base::list()
[11:01:18.842]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:18.842]     if (FALSE) {
[11:01:18.842]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:18.842]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:18.842]     }
[11:01:18.842]     ...future.result <- base::tryCatch({
[11:01:18.842]         base::withCallingHandlers({
[11:01:18.842]             ...future.value <- base::withVisible(base::local(42L))
[11:01:18.842]             future::FutureResult(value = ...future.value$value, 
[11:01:18.842]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:18.842]                   ...future.rng), globalenv = if (FALSE) 
[11:01:18.842]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:18.842]                     ...future.globalenv.names))
[11:01:18.842]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:18.842]         }, condition = base::local({
[11:01:18.842]             c <- base::c
[11:01:18.842]             inherits <- base::inherits
[11:01:18.842]             invokeRestart <- base::invokeRestart
[11:01:18.842]             length <- base::length
[11:01:18.842]             list <- base::list
[11:01:18.842]             seq.int <- base::seq.int
[11:01:18.842]             signalCondition <- base::signalCondition
[11:01:18.842]             sys.calls <- base::sys.calls
[11:01:18.842]             `[[` <- base::`[[`
[11:01:18.842]             `+` <- base::`+`
[11:01:18.842]             `<<-` <- base::`<<-`
[11:01:18.842]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:18.842]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:18.842]                   3L)]
[11:01:18.842]             }
[11:01:18.842]             function(cond) {
[11:01:18.842]                 is_error <- inherits(cond, "error")
[11:01:18.842]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:18.842]                   NULL)
[11:01:18.842]                 if (is_error) {
[11:01:18.842]                   sessionInformation <- function() {
[11:01:18.842]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:18.842]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:18.842]                       search = base::search(), system = base::Sys.info())
[11:01:18.842]                   }
[11:01:18.842]                   ...future.conditions[[length(...future.conditions) + 
[11:01:18.842]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:18.842]                     cond$call), session = sessionInformation(), 
[11:01:18.842]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:18.842]                   signalCondition(cond)
[11:01:18.842]                 }
[11:01:18.842]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:18.842]                 "immediateCondition"))) {
[11:01:18.842]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:18.842]                   ...future.conditions[[length(...future.conditions) + 
[11:01:18.842]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:18.842]                   if (TRUE && !signal) {
[11:01:18.842]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:18.842]                     {
[11:01:18.842]                       inherits <- base::inherits
[11:01:18.842]                       invokeRestart <- base::invokeRestart
[11:01:18.842]                       is.null <- base::is.null
[11:01:18.842]                       muffled <- FALSE
[11:01:18.842]                       if (inherits(cond, "message")) {
[11:01:18.842]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:18.842]                         if (muffled) 
[11:01:18.842]                           invokeRestart("muffleMessage")
[11:01:18.842]                       }
[11:01:18.842]                       else if (inherits(cond, "warning")) {
[11:01:18.842]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:18.842]                         if (muffled) 
[11:01:18.842]                           invokeRestart("muffleWarning")
[11:01:18.842]                       }
[11:01:18.842]                       else if (inherits(cond, "condition")) {
[11:01:18.842]                         if (!is.null(pattern)) {
[11:01:18.842]                           computeRestarts <- base::computeRestarts
[11:01:18.842]                           grepl <- base::grepl
[11:01:18.842]                           restarts <- computeRestarts(cond)
[11:01:18.842]                           for (restart in restarts) {
[11:01:18.842]                             name <- restart$name
[11:01:18.842]                             if (is.null(name)) 
[11:01:18.842]                               next
[11:01:18.842]                             if (!grepl(pattern, name)) 
[11:01:18.842]                               next
[11:01:18.842]                             invokeRestart(restart)
[11:01:18.842]                             muffled <- TRUE
[11:01:18.842]                             break
[11:01:18.842]                           }
[11:01:18.842]                         }
[11:01:18.842]                       }
[11:01:18.842]                       invisible(muffled)
[11:01:18.842]                     }
[11:01:18.842]                     muffleCondition(cond, pattern = "^muffle")
[11:01:18.842]                   }
[11:01:18.842]                 }
[11:01:18.842]                 else {
[11:01:18.842]                   if (TRUE) {
[11:01:18.842]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:18.842]                     {
[11:01:18.842]                       inherits <- base::inherits
[11:01:18.842]                       invokeRestart <- base::invokeRestart
[11:01:18.842]                       is.null <- base::is.null
[11:01:18.842]                       muffled <- FALSE
[11:01:18.842]                       if (inherits(cond, "message")) {
[11:01:18.842]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:18.842]                         if (muffled) 
[11:01:18.842]                           invokeRestart("muffleMessage")
[11:01:18.842]                       }
[11:01:18.842]                       else if (inherits(cond, "warning")) {
[11:01:18.842]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:18.842]                         if (muffled) 
[11:01:18.842]                           invokeRestart("muffleWarning")
[11:01:18.842]                       }
[11:01:18.842]                       else if (inherits(cond, "condition")) {
[11:01:18.842]                         if (!is.null(pattern)) {
[11:01:18.842]                           computeRestarts <- base::computeRestarts
[11:01:18.842]                           grepl <- base::grepl
[11:01:18.842]                           restarts <- computeRestarts(cond)
[11:01:18.842]                           for (restart in restarts) {
[11:01:18.842]                             name <- restart$name
[11:01:18.842]                             if (is.null(name)) 
[11:01:18.842]                               next
[11:01:18.842]                             if (!grepl(pattern, name)) 
[11:01:18.842]                               next
[11:01:18.842]                             invokeRestart(restart)
[11:01:18.842]                             muffled <- TRUE
[11:01:18.842]                             break
[11:01:18.842]                           }
[11:01:18.842]                         }
[11:01:18.842]                       }
[11:01:18.842]                       invisible(muffled)
[11:01:18.842]                     }
[11:01:18.842]                     muffleCondition(cond, pattern = "^muffle")
[11:01:18.842]                   }
[11:01:18.842]                 }
[11:01:18.842]             }
[11:01:18.842]         }))
[11:01:18.842]     }, error = function(ex) {
[11:01:18.842]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:18.842]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:18.842]                 ...future.rng), started = ...future.startTime, 
[11:01:18.842]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:18.842]             version = "1.8"), class = "FutureResult")
[11:01:18.842]     }, finally = {
[11:01:18.842]         if (!identical(...future.workdir, getwd())) 
[11:01:18.842]             setwd(...future.workdir)
[11:01:18.842]         {
[11:01:18.842]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:18.842]                 ...future.oldOptions$nwarnings <- NULL
[11:01:18.842]             }
[11:01:18.842]             base::options(...future.oldOptions)
[11:01:18.842]             if (.Platform$OS.type == "windows") {
[11:01:18.842]                 old_names <- names(...future.oldEnvVars)
[11:01:18.842]                 envs <- base::Sys.getenv()
[11:01:18.842]                 names <- names(envs)
[11:01:18.842]                 common <- intersect(names, old_names)
[11:01:18.842]                 added <- setdiff(names, old_names)
[11:01:18.842]                 removed <- setdiff(old_names, names)
[11:01:18.842]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:18.842]                   envs[common]]
[11:01:18.842]                 NAMES <- toupper(changed)
[11:01:18.842]                 args <- list()
[11:01:18.842]                 for (kk in seq_along(NAMES)) {
[11:01:18.842]                   name <- changed[[kk]]
[11:01:18.842]                   NAME <- NAMES[[kk]]
[11:01:18.842]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.842]                     next
[11:01:18.842]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:18.842]                 }
[11:01:18.842]                 NAMES <- toupper(added)
[11:01:18.842]                 for (kk in seq_along(NAMES)) {
[11:01:18.842]                   name <- added[[kk]]
[11:01:18.842]                   NAME <- NAMES[[kk]]
[11:01:18.842]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.842]                     next
[11:01:18.842]                   args[[name]] <- ""
[11:01:18.842]                 }
[11:01:18.842]                 NAMES <- toupper(removed)
[11:01:18.842]                 for (kk in seq_along(NAMES)) {
[11:01:18.842]                   name <- removed[[kk]]
[11:01:18.842]                   NAME <- NAMES[[kk]]
[11:01:18.842]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.842]                     next
[11:01:18.842]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:18.842]                 }
[11:01:18.842]                 if (length(args) > 0) 
[11:01:18.842]                   base::do.call(base::Sys.setenv, args = args)
[11:01:18.842]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:18.842]             }
[11:01:18.842]             else {
[11:01:18.842]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:18.842]             }
[11:01:18.842]             {
[11:01:18.842]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:18.842]                   0L) {
[11:01:18.842]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:18.842]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:18.842]                   base::options(opts)
[11:01:18.842]                 }
[11:01:18.842]                 {
[11:01:18.842]                   {
[11:01:18.842]                     NULL
[11:01:18.842]                     RNGkind("Mersenne-Twister")
[11:01:18.842]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:18.842]                       inherits = FALSE)
[11:01:18.842]                   }
[11:01:18.842]                   options(future.plan = NULL)
[11:01:18.842]                   if (is.na(NA_character_)) 
[11:01:18.842]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:18.842]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:18.842]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:18.842]                     .init = FALSE)
[11:01:18.842]                 }
[11:01:18.842]             }
[11:01:18.842]         }
[11:01:18.842]     })
[11:01:18.842]     if (TRUE) {
[11:01:18.842]         base::sink(type = "output", split = FALSE)
[11:01:18.842]         if (TRUE) {
[11:01:18.842]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:18.842]         }
[11:01:18.842]         else {
[11:01:18.842]             ...future.result["stdout"] <- base::list(NULL)
[11:01:18.842]         }
[11:01:18.842]         base::close(...future.stdout)
[11:01:18.842]         ...future.stdout <- NULL
[11:01:18.842]     }
[11:01:18.842]     ...future.result$conditions <- ...future.conditions
[11:01:18.842]     ...future.result$finished <- base::Sys.time()
[11:01:18.842]     ...future.result
[11:01:18.842] }
[11:01:18.844] plan(): Setting new future strategy stack:
[11:01:18.844] List of future strategies:
[11:01:18.844] 1. sequential:
[11:01:18.844]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.844]    - tweaked: FALSE
[11:01:18.844]    - call: NULL
[11:01:18.845] plan(): nbrOfWorkers() = 1
[11:01:18.845] plan(): Setting new future strategy stack:
[11:01:18.845] List of future strategies:
[11:01:18.845] 1. sequential:
[11:01:18.845]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.845]    - tweaked: FALSE
[11:01:18.845]    - call: future::plan("sequential")
[11:01:18.846] plan(): nbrOfWorkers() = 1
[11:01:18.846] SequentialFuture started (and completed)
[11:01:18.846] - Launch lazy future ... done
[11:01:18.846] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[11:01:18.847] getGlobalsAndPackages() ...
[11:01:18.847] Searching for globals...
[11:01:18.847] - globals found: [1] ‘{’
[11:01:18.847] Searching for globals ... DONE
[11:01:18.848] Resolving globals: FALSE
[11:01:18.848] 
[11:01:18.848] 
[11:01:18.848] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[11:01:18.848] resolved() for ‘Future’ ...
[11:01:18.848] - state: ‘created’
[11:01:18.848] - run: TRUE
[11:01:18.848] - run() ...
[11:01:18.848] run() for ‘Future’ ...
[11:01:18.849] - state: ‘created’
[11:01:18.849] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:18.849] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:18.849] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:18.849]   - Field: ‘label’
[11:01:18.849]   - Field: ‘local’
[11:01:18.849]   - Field: ‘owner’
[11:01:18.849]   - Field: ‘envir’
[11:01:18.849]   - Field: ‘packages’
[11:01:18.850]   - Field: ‘gc’
[11:01:18.850]   - Field: ‘conditions’
[11:01:18.850]   - Field: ‘expr’
[11:01:18.850]   - Field: ‘uuid’
[11:01:18.850]   - Field: ‘seed’
[11:01:18.850]   - Field: ‘version’
[11:01:18.850]   - Field: ‘result’
[11:01:18.850]   - Field: ‘asynchronous’
[11:01:18.850]   - Field: ‘calls’
[11:01:18.850]   - Field: ‘globals’
[11:01:18.850]   - Field: ‘stdout’
[11:01:18.851]   - Field: ‘earlySignal’
[11:01:18.851]   - Field: ‘lazy’
[11:01:18.851]   - Field: ‘state’
[11:01:18.851] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:18.851] - Launch lazy future ...
[11:01:18.851] Packages needed by the future expression (n = 0): <none>
[11:01:18.851] Packages needed by future strategies (n = 0): <none>
[11:01:18.852] {
[11:01:18.852]     {
[11:01:18.852]         {
[11:01:18.852]             ...future.startTime <- base::Sys.time()
[11:01:18.852]             {
[11:01:18.852]                 {
[11:01:18.852]                   {
[11:01:18.852]                     base::local({
[11:01:18.852]                       has_future <- base::requireNamespace("future", 
[11:01:18.852]                         quietly = TRUE)
[11:01:18.852]                       if (has_future) {
[11:01:18.852]                         ns <- base::getNamespace("future")
[11:01:18.852]                         version <- ns[[".package"]][["version"]]
[11:01:18.852]                         if (is.null(version)) 
[11:01:18.852]                           version <- utils::packageVersion("future")
[11:01:18.852]                       }
[11:01:18.852]                       else {
[11:01:18.852]                         version <- NULL
[11:01:18.852]                       }
[11:01:18.852]                       if (!has_future || version < "1.8.0") {
[11:01:18.852]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:18.852]                           "", base::R.version$version.string), 
[11:01:18.852]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:18.852]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:18.852]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:18.852]                             "release", "version")], collapse = " "), 
[11:01:18.852]                           hostname = base::Sys.info()[["nodename"]])
[11:01:18.852]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:18.852]                           info)
[11:01:18.852]                         info <- base::paste(info, collapse = "; ")
[11:01:18.852]                         if (!has_future) {
[11:01:18.852]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:18.852]                             info)
[11:01:18.852]                         }
[11:01:18.852]                         else {
[11:01:18.852]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:18.852]                             info, version)
[11:01:18.852]                         }
[11:01:18.852]                         base::stop(msg)
[11:01:18.852]                       }
[11:01:18.852]                     })
[11:01:18.852]                   }
[11:01:18.852]                   ...future.strategy.old <- future::plan("list")
[11:01:18.852]                   options(future.plan = NULL)
[11:01:18.852]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:18.852]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:18.852]                 }
[11:01:18.852]                 ...future.workdir <- getwd()
[11:01:18.852]             }
[11:01:18.852]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:18.852]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:18.852]         }
[11:01:18.852]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:18.852]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:18.852]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:18.852]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:18.852]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:18.852]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:18.852]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:18.852]             base::names(...future.oldOptions))
[11:01:18.852]     }
[11:01:18.852]     if (FALSE) {
[11:01:18.852]     }
[11:01:18.852]     else {
[11:01:18.852]         if (TRUE) {
[11:01:18.852]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:18.852]                 open = "w")
[11:01:18.852]         }
[11:01:18.852]         else {
[11:01:18.852]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:18.852]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:18.852]         }
[11:01:18.852]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:18.852]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:18.852]             base::sink(type = "output", split = FALSE)
[11:01:18.852]             base::close(...future.stdout)
[11:01:18.852]         }, add = TRUE)
[11:01:18.852]     }
[11:01:18.852]     ...future.frame <- base::sys.nframe()
[11:01:18.852]     ...future.conditions <- base::list()
[11:01:18.852]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:18.852]     if (FALSE) {
[11:01:18.852]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:18.852]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:18.852]     }
[11:01:18.852]     ...future.result <- base::tryCatch({
[11:01:18.852]         base::withCallingHandlers({
[11:01:18.852]             ...future.value <- base::withVisible(base::local({
[11:01:18.852]                 42L
[11:01:18.852]             }))
[11:01:18.852]             future::FutureResult(value = ...future.value$value, 
[11:01:18.852]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:18.852]                   ...future.rng), globalenv = if (FALSE) 
[11:01:18.852]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:18.852]                     ...future.globalenv.names))
[11:01:18.852]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:18.852]         }, condition = base::local({
[11:01:18.852]             c <- base::c
[11:01:18.852]             inherits <- base::inherits
[11:01:18.852]             invokeRestart <- base::invokeRestart
[11:01:18.852]             length <- base::length
[11:01:18.852]             list <- base::list
[11:01:18.852]             seq.int <- base::seq.int
[11:01:18.852]             signalCondition <- base::signalCondition
[11:01:18.852]             sys.calls <- base::sys.calls
[11:01:18.852]             `[[` <- base::`[[`
[11:01:18.852]             `+` <- base::`+`
[11:01:18.852]             `<<-` <- base::`<<-`
[11:01:18.852]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:18.852]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:18.852]                   3L)]
[11:01:18.852]             }
[11:01:18.852]             function(cond) {
[11:01:18.852]                 is_error <- inherits(cond, "error")
[11:01:18.852]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:18.852]                   NULL)
[11:01:18.852]                 if (is_error) {
[11:01:18.852]                   sessionInformation <- function() {
[11:01:18.852]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:18.852]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:18.852]                       search = base::search(), system = base::Sys.info())
[11:01:18.852]                   }
[11:01:18.852]                   ...future.conditions[[length(...future.conditions) + 
[11:01:18.852]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:18.852]                     cond$call), session = sessionInformation(), 
[11:01:18.852]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:18.852]                   signalCondition(cond)
[11:01:18.852]                 }
[11:01:18.852]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:18.852]                 "immediateCondition"))) {
[11:01:18.852]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:18.852]                   ...future.conditions[[length(...future.conditions) + 
[11:01:18.852]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:18.852]                   if (TRUE && !signal) {
[11:01:18.852]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:18.852]                     {
[11:01:18.852]                       inherits <- base::inherits
[11:01:18.852]                       invokeRestart <- base::invokeRestart
[11:01:18.852]                       is.null <- base::is.null
[11:01:18.852]                       muffled <- FALSE
[11:01:18.852]                       if (inherits(cond, "message")) {
[11:01:18.852]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:18.852]                         if (muffled) 
[11:01:18.852]                           invokeRestart("muffleMessage")
[11:01:18.852]                       }
[11:01:18.852]                       else if (inherits(cond, "warning")) {
[11:01:18.852]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:18.852]                         if (muffled) 
[11:01:18.852]                           invokeRestart("muffleWarning")
[11:01:18.852]                       }
[11:01:18.852]                       else if (inherits(cond, "condition")) {
[11:01:18.852]                         if (!is.null(pattern)) {
[11:01:18.852]                           computeRestarts <- base::computeRestarts
[11:01:18.852]                           grepl <- base::grepl
[11:01:18.852]                           restarts <- computeRestarts(cond)
[11:01:18.852]                           for (restart in restarts) {
[11:01:18.852]                             name <- restart$name
[11:01:18.852]                             if (is.null(name)) 
[11:01:18.852]                               next
[11:01:18.852]                             if (!grepl(pattern, name)) 
[11:01:18.852]                               next
[11:01:18.852]                             invokeRestart(restart)
[11:01:18.852]                             muffled <- TRUE
[11:01:18.852]                             break
[11:01:18.852]                           }
[11:01:18.852]                         }
[11:01:18.852]                       }
[11:01:18.852]                       invisible(muffled)
[11:01:18.852]                     }
[11:01:18.852]                     muffleCondition(cond, pattern = "^muffle")
[11:01:18.852]                   }
[11:01:18.852]                 }
[11:01:18.852]                 else {
[11:01:18.852]                   if (TRUE) {
[11:01:18.852]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:18.852]                     {
[11:01:18.852]                       inherits <- base::inherits
[11:01:18.852]                       invokeRestart <- base::invokeRestart
[11:01:18.852]                       is.null <- base::is.null
[11:01:18.852]                       muffled <- FALSE
[11:01:18.852]                       if (inherits(cond, "message")) {
[11:01:18.852]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:18.852]                         if (muffled) 
[11:01:18.852]                           invokeRestart("muffleMessage")
[11:01:18.852]                       }
[11:01:18.852]                       else if (inherits(cond, "warning")) {
[11:01:18.852]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:18.852]                         if (muffled) 
[11:01:18.852]                           invokeRestart("muffleWarning")
[11:01:18.852]                       }
[11:01:18.852]                       else if (inherits(cond, "condition")) {
[11:01:18.852]                         if (!is.null(pattern)) {
[11:01:18.852]                           computeRestarts <- base::computeRestarts
[11:01:18.852]                           grepl <- base::grepl
[11:01:18.852]                           restarts <- computeRestarts(cond)
[11:01:18.852]                           for (restart in restarts) {
[11:01:18.852]                             name <- restart$name
[11:01:18.852]                             if (is.null(name)) 
[11:01:18.852]                               next
[11:01:18.852]                             if (!grepl(pattern, name)) 
[11:01:18.852]                               next
[11:01:18.852]                             invokeRestart(restart)
[11:01:18.852]                             muffled <- TRUE
[11:01:18.852]                             break
[11:01:18.852]                           }
[11:01:18.852]                         }
[11:01:18.852]                       }
[11:01:18.852]                       invisible(muffled)
[11:01:18.852]                     }
[11:01:18.852]                     muffleCondition(cond, pattern = "^muffle")
[11:01:18.852]                   }
[11:01:18.852]                 }
[11:01:18.852]             }
[11:01:18.852]         }))
[11:01:18.852]     }, error = function(ex) {
[11:01:18.852]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:18.852]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:18.852]                 ...future.rng), started = ...future.startTime, 
[11:01:18.852]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:18.852]             version = "1.8"), class = "FutureResult")
[11:01:18.852]     }, finally = {
[11:01:18.852]         if (!identical(...future.workdir, getwd())) 
[11:01:18.852]             setwd(...future.workdir)
[11:01:18.852]         {
[11:01:18.852]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:18.852]                 ...future.oldOptions$nwarnings <- NULL
[11:01:18.852]             }
[11:01:18.852]             base::options(...future.oldOptions)
[11:01:18.852]             if (.Platform$OS.type == "windows") {
[11:01:18.852]                 old_names <- names(...future.oldEnvVars)
[11:01:18.852]                 envs <- base::Sys.getenv()
[11:01:18.852]                 names <- names(envs)
[11:01:18.852]                 common <- intersect(names, old_names)
[11:01:18.852]                 added <- setdiff(names, old_names)
[11:01:18.852]                 removed <- setdiff(old_names, names)
[11:01:18.852]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:18.852]                   envs[common]]
[11:01:18.852]                 NAMES <- toupper(changed)
[11:01:18.852]                 args <- list()
[11:01:18.852]                 for (kk in seq_along(NAMES)) {
[11:01:18.852]                   name <- changed[[kk]]
[11:01:18.852]                   NAME <- NAMES[[kk]]
[11:01:18.852]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.852]                     next
[11:01:18.852]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:18.852]                 }
[11:01:18.852]                 NAMES <- toupper(added)
[11:01:18.852]                 for (kk in seq_along(NAMES)) {
[11:01:18.852]                   name <- added[[kk]]
[11:01:18.852]                   NAME <- NAMES[[kk]]
[11:01:18.852]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.852]                     next
[11:01:18.852]                   args[[name]] <- ""
[11:01:18.852]                 }
[11:01:18.852]                 NAMES <- toupper(removed)
[11:01:18.852]                 for (kk in seq_along(NAMES)) {
[11:01:18.852]                   name <- removed[[kk]]
[11:01:18.852]                   NAME <- NAMES[[kk]]
[11:01:18.852]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.852]                     next
[11:01:18.852]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:18.852]                 }
[11:01:18.852]                 if (length(args) > 0) 
[11:01:18.852]                   base::do.call(base::Sys.setenv, args = args)
[11:01:18.852]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:18.852]             }
[11:01:18.852]             else {
[11:01:18.852]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:18.852]             }
[11:01:18.852]             {
[11:01:18.852]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:18.852]                   0L) {
[11:01:18.852]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:18.852]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:18.852]                   base::options(opts)
[11:01:18.852]                 }
[11:01:18.852]                 {
[11:01:18.852]                   {
[11:01:18.852]                     NULL
[11:01:18.852]                     RNGkind("Mersenne-Twister")
[11:01:18.852]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:18.852]                       inherits = FALSE)
[11:01:18.852]                   }
[11:01:18.852]                   options(future.plan = NULL)
[11:01:18.852]                   if (is.na(NA_character_)) 
[11:01:18.852]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:18.852]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:18.852]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:18.852]                     .init = FALSE)
[11:01:18.852]                 }
[11:01:18.852]             }
[11:01:18.852]         }
[11:01:18.852]     })
[11:01:18.852]     if (TRUE) {
[11:01:18.852]         base::sink(type = "output", split = FALSE)
[11:01:18.852]         if (TRUE) {
[11:01:18.852]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:18.852]         }
[11:01:18.852]         else {
[11:01:18.852]             ...future.result["stdout"] <- base::list(NULL)
[11:01:18.852]         }
[11:01:18.852]         base::close(...future.stdout)
[11:01:18.852]         ...future.stdout <- NULL
[11:01:18.852]     }
[11:01:18.852]     ...future.result$conditions <- ...future.conditions
[11:01:18.852]     ...future.result$finished <- base::Sys.time()
[11:01:18.852]     ...future.result
[11:01:18.852] }
[11:01:18.854] plan(): Setting new future strategy stack:
[11:01:18.854] List of future strategies:
[11:01:18.854] 1. sequential:
[11:01:18.854]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.854]    - tweaked: FALSE
[11:01:18.854]    - call: NULL
[11:01:18.854] plan(): nbrOfWorkers() = 1
[11:01:18.857] plan(): Setting new future strategy stack:
[11:01:18.857] List of future strategies:
[11:01:18.857] 1. sequential:
[11:01:18.857]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.857]    - tweaked: FALSE
[11:01:18.857]    - call: future::plan("sequential")
[11:01:18.857] plan(): nbrOfWorkers() = 1
[11:01:18.857] SequentialFuture started (and completed)
[11:01:18.858] - Launch lazy future ... done
[11:01:18.858] run() for ‘SequentialFuture’ ... done
[11:01:18.858] - run() ... done
[11:01:18.858] - resolved() ...
[11:01:18.858] resolved() for ‘SequentialFuture’ ...
[11:01:18.858] - state: ‘finished’
[11:01:18.858] - run: TRUE
[11:01:18.858] - result: ‘FutureResult’
[11:01:18.858] resolved() for ‘SequentialFuture’ ... done
[11:01:18.858] - resolved: TRUE
[11:01:18.858] - resolved() ... done
[11:01:18.858] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[11:01:18.859] getGlobalsAndPackages() ...
[11:01:18.859] Searching for globals...
[11:01:18.859] 
[11:01:18.859] Searching for globals ... DONE
[11:01:18.859] - globals: [0] <none>
[11:01:18.859] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 235f50a4-69ef-8996-ea29-8546c15f8310
Class: ‘Future’, ‘environment’
> y <- value(f)
[11:01:18.860] run() for ‘Future’ ...
[11:01:18.860] - state: ‘created’
[11:01:18.860] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:18.860] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:18.860] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:18.861]   - Field: ‘label’
[11:01:18.861]   - Field: ‘local’
[11:01:18.861]   - Field: ‘owner’
[11:01:18.861]   - Field: ‘envir’
[11:01:18.861]   - Field: ‘packages’
[11:01:18.861]   - Field: ‘gc’
[11:01:18.861]   - Field: ‘conditions’
[11:01:18.861]   - Field: ‘expr’
[11:01:18.861]   - Field: ‘uuid’
[11:01:18.861]   - Field: ‘seed’
[11:01:18.861]   - Field: ‘version’
[11:01:18.861]   - Field: ‘result’
[11:01:18.862]   - Field: ‘asynchronous’
[11:01:18.862]   - Field: ‘calls’
[11:01:18.862]   - Field: ‘globals’
[11:01:18.862]   - Field: ‘stdout’
[11:01:18.862]   - Field: ‘earlySignal’
[11:01:18.862]   - Field: ‘lazy’
[11:01:18.862]   - Field: ‘state’
[11:01:18.862] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:18.862] - Launch lazy future ...
[11:01:18.862] Packages needed by the future expression (n = 0): <none>
[11:01:18.862] Packages needed by future strategies (n = 0): <none>
[11:01:18.863] {
[11:01:18.863]     {
[11:01:18.863]         {
[11:01:18.863]             ...future.startTime <- base::Sys.time()
[11:01:18.863]             {
[11:01:18.863]                 {
[11:01:18.863]                   {
[11:01:18.863]                     base::local({
[11:01:18.863]                       has_future <- base::requireNamespace("future", 
[11:01:18.863]                         quietly = TRUE)
[11:01:18.863]                       if (has_future) {
[11:01:18.863]                         ns <- base::getNamespace("future")
[11:01:18.863]                         version <- ns[[".package"]][["version"]]
[11:01:18.863]                         if (is.null(version)) 
[11:01:18.863]                           version <- utils::packageVersion("future")
[11:01:18.863]                       }
[11:01:18.863]                       else {
[11:01:18.863]                         version <- NULL
[11:01:18.863]                       }
[11:01:18.863]                       if (!has_future || version < "1.8.0") {
[11:01:18.863]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:18.863]                           "", base::R.version$version.string), 
[11:01:18.863]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:18.863]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:18.863]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:18.863]                             "release", "version")], collapse = " "), 
[11:01:18.863]                           hostname = base::Sys.info()[["nodename"]])
[11:01:18.863]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:18.863]                           info)
[11:01:18.863]                         info <- base::paste(info, collapse = "; ")
[11:01:18.863]                         if (!has_future) {
[11:01:18.863]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:18.863]                             info)
[11:01:18.863]                         }
[11:01:18.863]                         else {
[11:01:18.863]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:18.863]                             info, version)
[11:01:18.863]                         }
[11:01:18.863]                         base::stop(msg)
[11:01:18.863]                       }
[11:01:18.863]                     })
[11:01:18.863]                   }
[11:01:18.863]                   ...future.strategy.old <- future::plan("list")
[11:01:18.863]                   options(future.plan = NULL)
[11:01:18.863]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:18.863]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:18.863]                 }
[11:01:18.863]                 ...future.workdir <- getwd()
[11:01:18.863]             }
[11:01:18.863]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:18.863]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:18.863]         }
[11:01:18.863]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:18.863]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:18.863]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:18.863]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:18.863]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:18.863]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:18.863]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:18.863]             base::names(...future.oldOptions))
[11:01:18.863]     }
[11:01:18.863]     if (FALSE) {
[11:01:18.863]     }
[11:01:18.863]     else {
[11:01:18.863]         if (TRUE) {
[11:01:18.863]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:18.863]                 open = "w")
[11:01:18.863]         }
[11:01:18.863]         else {
[11:01:18.863]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:18.863]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:18.863]         }
[11:01:18.863]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:18.863]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:18.863]             base::sink(type = "output", split = FALSE)
[11:01:18.863]             base::close(...future.stdout)
[11:01:18.863]         }, add = TRUE)
[11:01:18.863]     }
[11:01:18.863]     ...future.frame <- base::sys.nframe()
[11:01:18.863]     ...future.conditions <- base::list()
[11:01:18.863]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:18.863]     if (FALSE) {
[11:01:18.863]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:18.863]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:18.863]     }
[11:01:18.863]     ...future.result <- base::tryCatch({
[11:01:18.863]         base::withCallingHandlers({
[11:01:18.863]             ...future.value <- base::withVisible(base::local(42L))
[11:01:18.863]             future::FutureResult(value = ...future.value$value, 
[11:01:18.863]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:18.863]                   ...future.rng), globalenv = if (FALSE) 
[11:01:18.863]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:18.863]                     ...future.globalenv.names))
[11:01:18.863]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:18.863]         }, condition = base::local({
[11:01:18.863]             c <- base::c
[11:01:18.863]             inherits <- base::inherits
[11:01:18.863]             invokeRestart <- base::invokeRestart
[11:01:18.863]             length <- base::length
[11:01:18.863]             list <- base::list
[11:01:18.863]             seq.int <- base::seq.int
[11:01:18.863]             signalCondition <- base::signalCondition
[11:01:18.863]             sys.calls <- base::sys.calls
[11:01:18.863]             `[[` <- base::`[[`
[11:01:18.863]             `+` <- base::`+`
[11:01:18.863]             `<<-` <- base::`<<-`
[11:01:18.863]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:18.863]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:18.863]                   3L)]
[11:01:18.863]             }
[11:01:18.863]             function(cond) {
[11:01:18.863]                 is_error <- inherits(cond, "error")
[11:01:18.863]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:18.863]                   NULL)
[11:01:18.863]                 if (is_error) {
[11:01:18.863]                   sessionInformation <- function() {
[11:01:18.863]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:18.863]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:18.863]                       search = base::search(), system = base::Sys.info())
[11:01:18.863]                   }
[11:01:18.863]                   ...future.conditions[[length(...future.conditions) + 
[11:01:18.863]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:18.863]                     cond$call), session = sessionInformation(), 
[11:01:18.863]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:18.863]                   signalCondition(cond)
[11:01:18.863]                 }
[11:01:18.863]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:18.863]                 "immediateCondition"))) {
[11:01:18.863]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:18.863]                   ...future.conditions[[length(...future.conditions) + 
[11:01:18.863]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:18.863]                   if (TRUE && !signal) {
[11:01:18.863]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:18.863]                     {
[11:01:18.863]                       inherits <- base::inherits
[11:01:18.863]                       invokeRestart <- base::invokeRestart
[11:01:18.863]                       is.null <- base::is.null
[11:01:18.863]                       muffled <- FALSE
[11:01:18.863]                       if (inherits(cond, "message")) {
[11:01:18.863]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:18.863]                         if (muffled) 
[11:01:18.863]                           invokeRestart("muffleMessage")
[11:01:18.863]                       }
[11:01:18.863]                       else if (inherits(cond, "warning")) {
[11:01:18.863]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:18.863]                         if (muffled) 
[11:01:18.863]                           invokeRestart("muffleWarning")
[11:01:18.863]                       }
[11:01:18.863]                       else if (inherits(cond, "condition")) {
[11:01:18.863]                         if (!is.null(pattern)) {
[11:01:18.863]                           computeRestarts <- base::computeRestarts
[11:01:18.863]                           grepl <- base::grepl
[11:01:18.863]                           restarts <- computeRestarts(cond)
[11:01:18.863]                           for (restart in restarts) {
[11:01:18.863]                             name <- restart$name
[11:01:18.863]                             if (is.null(name)) 
[11:01:18.863]                               next
[11:01:18.863]                             if (!grepl(pattern, name)) 
[11:01:18.863]                               next
[11:01:18.863]                             invokeRestart(restart)
[11:01:18.863]                             muffled <- TRUE
[11:01:18.863]                             break
[11:01:18.863]                           }
[11:01:18.863]                         }
[11:01:18.863]                       }
[11:01:18.863]                       invisible(muffled)
[11:01:18.863]                     }
[11:01:18.863]                     muffleCondition(cond, pattern = "^muffle")
[11:01:18.863]                   }
[11:01:18.863]                 }
[11:01:18.863]                 else {
[11:01:18.863]                   if (TRUE) {
[11:01:18.863]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:18.863]                     {
[11:01:18.863]                       inherits <- base::inherits
[11:01:18.863]                       invokeRestart <- base::invokeRestart
[11:01:18.863]                       is.null <- base::is.null
[11:01:18.863]                       muffled <- FALSE
[11:01:18.863]                       if (inherits(cond, "message")) {
[11:01:18.863]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:18.863]                         if (muffled) 
[11:01:18.863]                           invokeRestart("muffleMessage")
[11:01:18.863]                       }
[11:01:18.863]                       else if (inherits(cond, "warning")) {
[11:01:18.863]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:18.863]                         if (muffled) 
[11:01:18.863]                           invokeRestart("muffleWarning")
[11:01:18.863]                       }
[11:01:18.863]                       else if (inherits(cond, "condition")) {
[11:01:18.863]                         if (!is.null(pattern)) {
[11:01:18.863]                           computeRestarts <- base::computeRestarts
[11:01:18.863]                           grepl <- base::grepl
[11:01:18.863]                           restarts <- computeRestarts(cond)
[11:01:18.863]                           for (restart in restarts) {
[11:01:18.863]                             name <- restart$name
[11:01:18.863]                             if (is.null(name)) 
[11:01:18.863]                               next
[11:01:18.863]                             if (!grepl(pattern, name)) 
[11:01:18.863]                               next
[11:01:18.863]                             invokeRestart(restart)
[11:01:18.863]                             muffled <- TRUE
[11:01:18.863]                             break
[11:01:18.863]                           }
[11:01:18.863]                         }
[11:01:18.863]                       }
[11:01:18.863]                       invisible(muffled)
[11:01:18.863]                     }
[11:01:18.863]                     muffleCondition(cond, pattern = "^muffle")
[11:01:18.863]                   }
[11:01:18.863]                 }
[11:01:18.863]             }
[11:01:18.863]         }))
[11:01:18.863]     }, error = function(ex) {
[11:01:18.863]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:18.863]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:18.863]                 ...future.rng), started = ...future.startTime, 
[11:01:18.863]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:18.863]             version = "1.8"), class = "FutureResult")
[11:01:18.863]     }, finally = {
[11:01:18.863]         if (!identical(...future.workdir, getwd())) 
[11:01:18.863]             setwd(...future.workdir)
[11:01:18.863]         {
[11:01:18.863]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:18.863]                 ...future.oldOptions$nwarnings <- NULL
[11:01:18.863]             }
[11:01:18.863]             base::options(...future.oldOptions)
[11:01:18.863]             if (.Platform$OS.type == "windows") {
[11:01:18.863]                 old_names <- names(...future.oldEnvVars)
[11:01:18.863]                 envs <- base::Sys.getenv()
[11:01:18.863]                 names <- names(envs)
[11:01:18.863]                 common <- intersect(names, old_names)
[11:01:18.863]                 added <- setdiff(names, old_names)
[11:01:18.863]                 removed <- setdiff(old_names, names)
[11:01:18.863]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:18.863]                   envs[common]]
[11:01:18.863]                 NAMES <- toupper(changed)
[11:01:18.863]                 args <- list()
[11:01:18.863]                 for (kk in seq_along(NAMES)) {
[11:01:18.863]                   name <- changed[[kk]]
[11:01:18.863]                   NAME <- NAMES[[kk]]
[11:01:18.863]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.863]                     next
[11:01:18.863]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:18.863]                 }
[11:01:18.863]                 NAMES <- toupper(added)
[11:01:18.863]                 for (kk in seq_along(NAMES)) {
[11:01:18.863]                   name <- added[[kk]]
[11:01:18.863]                   NAME <- NAMES[[kk]]
[11:01:18.863]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.863]                     next
[11:01:18.863]                   args[[name]] <- ""
[11:01:18.863]                 }
[11:01:18.863]                 NAMES <- toupper(removed)
[11:01:18.863]                 for (kk in seq_along(NAMES)) {
[11:01:18.863]                   name <- removed[[kk]]
[11:01:18.863]                   NAME <- NAMES[[kk]]
[11:01:18.863]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:18.863]                     next
[11:01:18.863]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:18.863]                 }
[11:01:18.863]                 if (length(args) > 0) 
[11:01:18.863]                   base::do.call(base::Sys.setenv, args = args)
[11:01:18.863]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:18.863]             }
[11:01:18.863]             else {
[11:01:18.863]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:18.863]             }
[11:01:18.863]             {
[11:01:18.863]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:18.863]                   0L) {
[11:01:18.863]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:18.863]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:18.863]                   base::options(opts)
[11:01:18.863]                 }
[11:01:18.863]                 {
[11:01:18.863]                   {
[11:01:18.863]                     NULL
[11:01:18.863]                     RNGkind("Mersenne-Twister")
[11:01:18.863]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:18.863]                       inherits = FALSE)
[11:01:18.863]                   }
[11:01:18.863]                   options(future.plan = NULL)
[11:01:18.863]                   if (is.na(NA_character_)) 
[11:01:18.863]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:18.863]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:18.863]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:18.863]                     .init = FALSE)
[11:01:18.863]                 }
[11:01:18.863]             }
[11:01:18.863]         }
[11:01:18.863]     })
[11:01:18.863]     if (TRUE) {
[11:01:18.863]         base::sink(type = "output", split = FALSE)
[11:01:18.863]         if (TRUE) {
[11:01:18.863]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:18.863]         }
[11:01:18.863]         else {
[11:01:18.863]             ...future.result["stdout"] <- base::list(NULL)
[11:01:18.863]         }
[11:01:18.863]         base::close(...future.stdout)
[11:01:18.863]         ...future.stdout <- NULL
[11:01:18.863]     }
[11:01:18.863]     ...future.result$conditions <- ...future.conditions
[11:01:18.863]     ...future.result$finished <- base::Sys.time()
[11:01:18.863]     ...future.result
[11:01:18.863] }
[11:01:18.865] plan(): Setting new future strategy stack:
[11:01:18.865] List of future strategies:
[11:01:18.865] 1. sequential:
[11:01:18.865]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.865]    - tweaked: FALSE
[11:01:18.865]    - call: NULL
[11:01:18.865] plan(): nbrOfWorkers() = 1
[11:01:18.866] plan(): Setting new future strategy stack:
[11:01:18.866] List of future strategies:
[11:01:18.866] 1. sequential:
[11:01:18.866]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.866]    - tweaked: FALSE
[11:01:18.866]    - call: future::plan("sequential")
[11:01:18.866] plan(): nbrOfWorkers() = 1
[11:01:18.866] SequentialFuture started (and completed)
[11:01:18.866] - Launch lazy future ... done
[11:01:18.867] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[11:01:18.867] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[11:01:18.868] plan(): Setting new future strategy stack:
[11:01:18.868] List of future strategies:
[11:01:18.868] 1. FutureStrategy:
[11:01:18.868]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:18.868]    - tweaked: FALSE
[11:01:18.868]    - call: future::plan(oplan)
[11:01:18.878] plan(): nbrOfWorkers() = 1
> 
