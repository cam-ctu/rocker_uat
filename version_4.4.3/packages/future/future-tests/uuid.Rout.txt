
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:29:52.471] plan(): Setting new future strategy stack:
[08:29:52.472] List of future strategies:
[08:29:52.472] 1. sequential:
[08:29:52.472]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:52.472]    - tweaked: FALSE
[08:29:52.472]    - call: future::plan("sequential")
[08:29:52.485] plan(): nbrOfWorkers() = 1
> session_uuid <- future:::session_uuid
> 
> message("*** session_uuid() ...")
*** session_uuid() ...
> 
> id0 <- session_uuid()
> print(id0)
[1] "a02e62ac-185f-29ba-0e45-2f2638ee1fde"
attr(,"source")
attr(,"source")$host
      HOSTNAME 
"e9e776910d73" 

attr(,"source")$info
                                              sysname 
                                              "Linux" 
                                              release 
                                  "6.11.0-1015-azure" 
                                              version 
"#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" 
                                             nodename 
                                       "e9e776910d73" 
                                              machine 
                                             "x86_64" 
                                                login 
                                            "unknown" 
                                                 user 
                                               "root" 
                                       effective_user 
                                               "root" 

attr(,"source")$pid
[1] 85304

attr(,"source")$time
[1] "2025-06-17 08:29:52 UTC"

attr(,"source")$random
[1] 2147483647

> 
> ## Reset session UUID (hack)
> environment(session_uuid)$uuids <- list()
> 
> id <- session_uuid()
> print(id)
[1] "4b08ecfa-0792-477a-6f3f-aab9fde33436"
attr(,"source")
attr(,"source")$host
      HOSTNAME 
"e9e776910d73" 

attr(,"source")$info
                                              sysname 
                                              "Linux" 
                                              release 
                                  "6.11.0-1015-azure" 
                                              version 
"#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" 
                                             nodename 
                                       "e9e776910d73" 
                                              machine 
                                             "x86_64" 
                                                login 
                                            "unknown" 
                                                 user 
                                               "root" 
                                       effective_user 
                                               "root" 

attr(,"source")$pid
[1] 85304

attr(,"source")$time
[1] "2025-06-17 08:29:52 UTC"

attr(,"source")$random
[1] 2147483647

> stopifnot(id != id0)
> 
> ## Assert that forked child processes get a unique session id
> ## Issue: https://github.com/HenrikBengtsson/future/issues/187
> if (supportsMulticore()) {
+   plan(multicore, workers = 2L)
+   fs <- lapply(1:2, FUN = function(i) {
+     future({
+       Sys.sleep(0.2)
+       session_uuid()
+     })
+   })
+   ids <- unlist(value(fs))
+   print(ids)
+   stopifnot(all(ids != id), length(unique(ids)) == 2L)
+ }
[08:29:52.501] plan(): Setting new future strategy stack:
[08:29:52.501] List of future strategies:
[08:29:52.501] 1. multicore:
[08:29:52.501]    - args: function (..., workers = 2L, envir = parent.frame())
[08:29:52.501]    - tweaked: TRUE
[08:29:52.501]    - call: plan(multicore, workers = 2L)
[08:29:52.512] plan(): nbrOfWorkers() = 2
[08:29:52.513] getGlobalsAndPackages() ...
[08:29:52.513] Searching for globals...
[08:29:52.526] - globals found: [28] ‘{’, ‘Sys.sleep’, ‘session_uuid’, ‘Sys.getpid’, ‘<-’, ‘as.character’, ‘[[’, ‘uuids’, ‘if’, ‘!’, ‘is.null’, ‘attr’, ‘attr<-’, ‘return’, ‘Sys.info’, ‘Sys.getenv’, ‘c’, ‘[’, ‘nzchar’, ‘==’, ‘length’, ‘list’, ‘Sys.time’, ‘stealth_sample’, ‘$’, ‘.Machine’, ‘<<-’, ‘[[<-’
[08:29:52.526] Searching for globals ... DONE
[08:29:52.527] Resolving globals: FALSE
[08:29:52.528] The total size of the 3 globals is 10.98 KiB (11244 bytes)
[08:29:52.528] The total size of the 3 globals exported for future expression (‘{; Sys.sleep(0.2); session_uuid(); }’) is 10.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘stealth_sample’ (7.71 KiB of class ‘function’), ‘session_uuid’ (2.56 KiB of class ‘function’) and ‘uuids’ (731 bytes of class ‘list’)
[08:29:52.529] - globals: [3] ‘session_uuid’, ‘uuids’, ‘stealth_sample’
[08:29:52.529] - packages: [1] ‘future’
[08:29:52.529] getGlobalsAndPackages() ... DONE
[08:29:52.529] run() for ‘Future’ ...
[08:29:52.530] - state: ‘created’
[08:29:52.530] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:52.530] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:52.530] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:52.530]   - Field: ‘label’
[08:29:52.530]   - Field: ‘local’
[08:29:52.531]   - Field: ‘owner’
[08:29:52.531]   - Field: ‘envir’
[08:29:52.531]   - Field: ‘workers’
[08:29:52.531]   - Field: ‘packages’
[08:29:52.531]   - Field: ‘gc’
[08:29:52.531]   - Field: ‘job’
[08:29:52.531]   - Field: ‘conditions’
[08:29:52.531]   - Field: ‘expr’
[08:29:52.531]   - Field: ‘uuid’
[08:29:52.531]   - Field: ‘seed’
[08:29:52.531]   - Field: ‘version’
[08:29:52.531]   - Field: ‘result’
[08:29:52.531]   - Field: ‘asynchronous’
[08:29:52.532]   - Field: ‘calls’
[08:29:52.532]   - Field: ‘globals’
[08:29:52.532]   - Field: ‘stdout’
[08:29:52.532]   - Field: ‘earlySignal’
[08:29:52.532]   - Field: ‘lazy’
[08:29:52.532]   - Field: ‘state’
[08:29:52.532] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:52.532] - Launch lazy future ...
[08:29:52.533] Packages needed by the future expression (n = 1): ‘future’
[08:29:52.533] Packages needed by future strategies (n = 0): <none>
[08:29:52.534] {
[08:29:52.534]     {
[08:29:52.534]         {
[08:29:52.534]             ...future.startTime <- base::Sys.time()
[08:29:52.534]             {
[08:29:52.534]                 {
[08:29:52.534]                   {
[08:29:52.534]                     {
[08:29:52.534]                       {
[08:29:52.534]                         base::local({
[08:29:52.534]                           has_future <- base::requireNamespace("future", 
[08:29:52.534]                             quietly = TRUE)
[08:29:52.534]                           if (has_future) {
[08:29:52.534]                             ns <- base::getNamespace("future")
[08:29:52.534]                             version <- ns[[".package"]][["version"]]
[08:29:52.534]                             if (is.null(version)) 
[08:29:52.534]                               version <- utils::packageVersion("future")
[08:29:52.534]                           }
[08:29:52.534]                           else {
[08:29:52.534]                             version <- NULL
[08:29:52.534]                           }
[08:29:52.534]                           if (!has_future || version < "1.8.0") {
[08:29:52.534]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:52.534]                               "", base::R.version$version.string), 
[08:29:52.534]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:52.534]                                 base::R.version$platform, 8 * 
[08:29:52.534]                                   base::.Machine$sizeof.pointer), 
[08:29:52.534]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:52.534]                                 "release", "version")], collapse = " "), 
[08:29:52.534]                               hostname = base::Sys.info()[["nodename"]])
[08:29:52.534]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:52.534]                               info)
[08:29:52.534]                             info <- base::paste(info, collapse = "; ")
[08:29:52.534]                             if (!has_future) {
[08:29:52.534]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:52.534]                                 info)
[08:29:52.534]                             }
[08:29:52.534]                             else {
[08:29:52.534]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:52.534]                                 info, version)
[08:29:52.534]                             }
[08:29:52.534]                             base::stop(msg)
[08:29:52.534]                           }
[08:29:52.534]                         })
[08:29:52.534]                       }
[08:29:52.534]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:52.534]                       base::options(mc.cores = 1L)
[08:29:52.534]                     }
[08:29:52.534]                     base::local({
[08:29:52.534]                       for (pkg in "future") {
[08:29:52.534]                         base::loadNamespace(pkg)
[08:29:52.534]                         base::library(pkg, character.only = TRUE)
[08:29:52.534]                       }
[08:29:52.534]                     })
[08:29:52.534]                   }
[08:29:52.534]                   ...future.strategy.old <- future::plan("list")
[08:29:52.534]                   options(future.plan = NULL)
[08:29:52.534]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:52.534]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:52.534]                 }
[08:29:52.534]                 ...future.workdir <- getwd()
[08:29:52.534]             }
[08:29:52.534]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:52.534]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:52.534]         }
[08:29:52.534]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:52.534]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:52.534]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:52.534]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:52.534]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:52.534]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:52.534]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:52.534]             base::names(...future.oldOptions))
[08:29:52.534]     }
[08:29:52.534]     if (FALSE) {
[08:29:52.534]     }
[08:29:52.534]     else {
[08:29:52.534]         if (TRUE) {
[08:29:52.534]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:52.534]                 open = "w")
[08:29:52.534]         }
[08:29:52.534]         else {
[08:29:52.534]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:52.534]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:52.534]         }
[08:29:52.534]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:52.534]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:52.534]             base::sink(type = "output", split = FALSE)
[08:29:52.534]             base::close(...future.stdout)
[08:29:52.534]         }, add = TRUE)
[08:29:52.534]     }
[08:29:52.534]     ...future.frame <- base::sys.nframe()
[08:29:52.534]     ...future.conditions <- base::list()
[08:29:52.534]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:52.534]     if (FALSE) {
[08:29:52.534]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:52.534]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:52.534]     }
[08:29:52.534]     ...future.result <- base::tryCatch({
[08:29:52.534]         base::withCallingHandlers({
[08:29:52.534]             ...future.value <- base::withVisible(base::local({
[08:29:52.534]                 withCallingHandlers({
[08:29:52.534]                   {
[08:29:52.534]                     Sys.sleep(0.2)
[08:29:52.534]                     session_uuid()
[08:29:52.534]                   }
[08:29:52.534]                 }, immediateCondition = function(cond) {
[08:29:52.534]                   save_rds <- function (object, pathname, ...) 
[08:29:52.534]                   {
[08:29:52.534]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:52.534]                     if (file_test("-f", pathname_tmp)) {
[08:29:52.534]                       fi_tmp <- file.info(pathname_tmp)
[08:29:52.534]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:52.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:52.534]                         fi_tmp[["mtime"]])
[08:29:52.534]                     }
[08:29:52.534]                     tryCatch({
[08:29:52.534]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:52.534]                     }, error = function(ex) {
[08:29:52.534]                       msg <- conditionMessage(ex)
[08:29:52.534]                       fi_tmp <- file.info(pathname_tmp)
[08:29:52.534]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:52.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:52.534]                         fi_tmp[["mtime"]], msg)
[08:29:52.534]                       ex$message <- msg
[08:29:52.534]                       stop(ex)
[08:29:52.534]                     })
[08:29:52.534]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:52.534]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:52.534]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:52.534]                       fi_tmp <- file.info(pathname_tmp)
[08:29:52.534]                       fi <- file.info(pathname)
[08:29:52.534]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:52.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:52.534]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:52.534]                         fi[["size"]], fi[["mtime"]])
[08:29:52.534]                       stop(msg)
[08:29:52.534]                     }
[08:29:52.534]                     invisible(pathname)
[08:29:52.534]                   }
[08:29:52.534]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:52.534]                     rootPath = tempdir()) 
[08:29:52.534]                   {
[08:29:52.534]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:52.534]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:52.534]                       tmpdir = path, fileext = ".rds")
[08:29:52.534]                     save_rds(obj, file)
[08:29:52.534]                   }
[08:29:52.534]                   saveImmediateCondition(cond, path = "/tmp/RtmpnU0NL1/.future/immediateConditions")
[08:29:52.534]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:52.534]                   {
[08:29:52.534]                     inherits <- base::inherits
[08:29:52.534]                     invokeRestart <- base::invokeRestart
[08:29:52.534]                     is.null <- base::is.null
[08:29:52.534]                     muffled <- FALSE
[08:29:52.534]                     if (inherits(cond, "message")) {
[08:29:52.534]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:52.534]                       if (muffled) 
[08:29:52.534]                         invokeRestart("muffleMessage")
[08:29:52.534]                     }
[08:29:52.534]                     else if (inherits(cond, "warning")) {
[08:29:52.534]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:52.534]                       if (muffled) 
[08:29:52.534]                         invokeRestart("muffleWarning")
[08:29:52.534]                     }
[08:29:52.534]                     else if (inherits(cond, "condition")) {
[08:29:52.534]                       if (!is.null(pattern)) {
[08:29:52.534]                         computeRestarts <- base::computeRestarts
[08:29:52.534]                         grepl <- base::grepl
[08:29:52.534]                         restarts <- computeRestarts(cond)
[08:29:52.534]                         for (restart in restarts) {
[08:29:52.534]                           name <- restart$name
[08:29:52.534]                           if (is.null(name)) 
[08:29:52.534]                             next
[08:29:52.534]                           if (!grepl(pattern, name)) 
[08:29:52.534]                             next
[08:29:52.534]                           invokeRestart(restart)
[08:29:52.534]                           muffled <- TRUE
[08:29:52.534]                           break
[08:29:52.534]                         }
[08:29:52.534]                       }
[08:29:52.534]                     }
[08:29:52.534]                     invisible(muffled)
[08:29:52.534]                   }
[08:29:52.534]                   muffleCondition(cond)
[08:29:52.534]                 })
[08:29:52.534]             }))
[08:29:52.534]             future::FutureResult(value = ...future.value$value, 
[08:29:52.534]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:52.534]                   ...future.rng), globalenv = if (FALSE) 
[08:29:52.534]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:52.534]                     ...future.globalenv.names))
[08:29:52.534]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:52.534]         }, condition = base::local({
[08:29:52.534]             c <- base::c
[08:29:52.534]             inherits <- base::inherits
[08:29:52.534]             invokeRestart <- base::invokeRestart
[08:29:52.534]             length <- base::length
[08:29:52.534]             list <- base::list
[08:29:52.534]             seq.int <- base::seq.int
[08:29:52.534]             signalCondition <- base::signalCondition
[08:29:52.534]             sys.calls <- base::sys.calls
[08:29:52.534]             `[[` <- base::`[[`
[08:29:52.534]             `+` <- base::`+`
[08:29:52.534]             `<<-` <- base::`<<-`
[08:29:52.534]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:52.534]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:52.534]                   3L)]
[08:29:52.534]             }
[08:29:52.534]             function(cond) {
[08:29:52.534]                 is_error <- inherits(cond, "error")
[08:29:52.534]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:52.534]                   NULL)
[08:29:52.534]                 if (is_error) {
[08:29:52.534]                   sessionInformation <- function() {
[08:29:52.534]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:52.534]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:52.534]                       search = base::search(), system = base::Sys.info())
[08:29:52.534]                   }
[08:29:52.534]                   ...future.conditions[[length(...future.conditions) + 
[08:29:52.534]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:52.534]                     cond$call), session = sessionInformation(), 
[08:29:52.534]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:52.534]                   signalCondition(cond)
[08:29:52.534]                 }
[08:29:52.534]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:52.534]                 "immediateCondition"))) {
[08:29:52.534]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:52.534]                   ...future.conditions[[length(...future.conditions) + 
[08:29:52.534]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:52.534]                   if (TRUE && !signal) {
[08:29:52.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:52.534]                     {
[08:29:52.534]                       inherits <- base::inherits
[08:29:52.534]                       invokeRestart <- base::invokeRestart
[08:29:52.534]                       is.null <- base::is.null
[08:29:52.534]                       muffled <- FALSE
[08:29:52.534]                       if (inherits(cond, "message")) {
[08:29:52.534]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:52.534]                         if (muffled) 
[08:29:52.534]                           invokeRestart("muffleMessage")
[08:29:52.534]                       }
[08:29:52.534]                       else if (inherits(cond, "warning")) {
[08:29:52.534]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:52.534]                         if (muffled) 
[08:29:52.534]                           invokeRestart("muffleWarning")
[08:29:52.534]                       }
[08:29:52.534]                       else if (inherits(cond, "condition")) {
[08:29:52.534]                         if (!is.null(pattern)) {
[08:29:52.534]                           computeRestarts <- base::computeRestarts
[08:29:52.534]                           grepl <- base::grepl
[08:29:52.534]                           restarts <- computeRestarts(cond)
[08:29:52.534]                           for (restart in restarts) {
[08:29:52.534]                             name <- restart$name
[08:29:52.534]                             if (is.null(name)) 
[08:29:52.534]                               next
[08:29:52.534]                             if (!grepl(pattern, name)) 
[08:29:52.534]                               next
[08:29:52.534]                             invokeRestart(restart)
[08:29:52.534]                             muffled <- TRUE
[08:29:52.534]                             break
[08:29:52.534]                           }
[08:29:52.534]                         }
[08:29:52.534]                       }
[08:29:52.534]                       invisible(muffled)
[08:29:52.534]                     }
[08:29:52.534]                     muffleCondition(cond, pattern = "^muffle")
[08:29:52.534]                   }
[08:29:52.534]                 }
[08:29:52.534]                 else {
[08:29:52.534]                   if (TRUE) {
[08:29:52.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:52.534]                     {
[08:29:52.534]                       inherits <- base::inherits
[08:29:52.534]                       invokeRestart <- base::invokeRestart
[08:29:52.534]                       is.null <- base::is.null
[08:29:52.534]                       muffled <- FALSE
[08:29:52.534]                       if (inherits(cond, "message")) {
[08:29:52.534]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:52.534]                         if (muffled) 
[08:29:52.534]                           invokeRestart("muffleMessage")
[08:29:52.534]                       }
[08:29:52.534]                       else if (inherits(cond, "warning")) {
[08:29:52.534]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:52.534]                         if (muffled) 
[08:29:52.534]                           invokeRestart("muffleWarning")
[08:29:52.534]                       }
[08:29:52.534]                       else if (inherits(cond, "condition")) {
[08:29:52.534]                         if (!is.null(pattern)) {
[08:29:52.534]                           computeRestarts <- base::computeRestarts
[08:29:52.534]                           grepl <- base::grepl
[08:29:52.534]                           restarts <- computeRestarts(cond)
[08:29:52.534]                           for (restart in restarts) {
[08:29:52.534]                             name <- restart$name
[08:29:52.534]                             if (is.null(name)) 
[08:29:52.534]                               next
[08:29:52.534]                             if (!grepl(pattern, name)) 
[08:29:52.534]                               next
[08:29:52.534]                             invokeRestart(restart)
[08:29:52.534]                             muffled <- TRUE
[08:29:52.534]                             break
[08:29:52.534]                           }
[08:29:52.534]                         }
[08:29:52.534]                       }
[08:29:52.534]                       invisible(muffled)
[08:29:52.534]                     }
[08:29:52.534]                     muffleCondition(cond, pattern = "^muffle")
[08:29:52.534]                   }
[08:29:52.534]                 }
[08:29:52.534]             }
[08:29:52.534]         }))
[08:29:52.534]     }, error = function(ex) {
[08:29:52.534]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:52.534]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:52.534]                 ...future.rng), started = ...future.startTime, 
[08:29:52.534]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:52.534]             version = "1.8"), class = "FutureResult")
[08:29:52.534]     }, finally = {
[08:29:52.534]         if (!identical(...future.workdir, getwd())) 
[08:29:52.534]             setwd(...future.workdir)
[08:29:52.534]         {
[08:29:52.534]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:52.534]                 ...future.oldOptions$nwarnings <- NULL
[08:29:52.534]             }
[08:29:52.534]             base::options(...future.oldOptions)
[08:29:52.534]             if (.Platform$OS.type == "windows") {
[08:29:52.534]                 old_names <- names(...future.oldEnvVars)
[08:29:52.534]                 envs <- base::Sys.getenv()
[08:29:52.534]                 names <- names(envs)
[08:29:52.534]                 common <- intersect(names, old_names)
[08:29:52.534]                 added <- setdiff(names, old_names)
[08:29:52.534]                 removed <- setdiff(old_names, names)
[08:29:52.534]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:52.534]                   envs[common]]
[08:29:52.534]                 NAMES <- toupper(changed)
[08:29:52.534]                 args <- list()
[08:29:52.534]                 for (kk in seq_along(NAMES)) {
[08:29:52.534]                   name <- changed[[kk]]
[08:29:52.534]                   NAME <- NAMES[[kk]]
[08:29:52.534]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:52.534]                     next
[08:29:52.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:52.534]                 }
[08:29:52.534]                 NAMES <- toupper(added)
[08:29:52.534]                 for (kk in seq_along(NAMES)) {
[08:29:52.534]                   name <- added[[kk]]
[08:29:52.534]                   NAME <- NAMES[[kk]]
[08:29:52.534]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:52.534]                     next
[08:29:52.534]                   args[[name]] <- ""
[08:29:52.534]                 }
[08:29:52.534]                 NAMES <- toupper(removed)
[08:29:52.534]                 for (kk in seq_along(NAMES)) {
[08:29:52.534]                   name <- removed[[kk]]
[08:29:52.534]                   NAME <- NAMES[[kk]]
[08:29:52.534]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:52.534]                     next
[08:29:52.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:52.534]                 }
[08:29:52.534]                 if (length(args) > 0) 
[08:29:52.534]                   base::do.call(base::Sys.setenv, args = args)
[08:29:52.534]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:52.534]             }
[08:29:52.534]             else {
[08:29:52.534]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:52.534]             }
[08:29:52.534]             {
[08:29:52.534]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:52.534]                   0L) {
[08:29:52.534]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:52.534]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:52.534]                   base::options(opts)
[08:29:52.534]                 }
[08:29:52.534]                 {
[08:29:52.534]                   {
[08:29:52.534]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:52.534]                     NULL
[08:29:52.534]                   }
[08:29:52.534]                   options(future.plan = NULL)
[08:29:52.534]                   if (is.na(NA_character_)) 
[08:29:52.534]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:52.534]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:52.534]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:52.534]                     .init = FALSE)
[08:29:52.534]                 }
[08:29:52.534]             }
[08:29:52.534]         }
[08:29:52.534]     })
[08:29:52.534]     if (TRUE) {
[08:29:52.534]         base::sink(type = "output", split = FALSE)
[08:29:52.534]         if (TRUE) {
[08:29:52.534]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:52.534]         }
[08:29:52.534]         else {
[08:29:52.534]             ...future.result["stdout"] <- base::list(NULL)
[08:29:52.534]         }
[08:29:52.534]         base::close(...future.stdout)
[08:29:52.534]         ...future.stdout <- NULL
[08:29:52.534]     }
[08:29:52.534]     ...future.result$conditions <- ...future.conditions
[08:29:52.534]     ...future.result$finished <- base::Sys.time()
[08:29:52.534]     ...future.result
[08:29:52.534] }
[08:29:52.537] assign_globals() ...
[08:29:52.537] List of 3
[08:29:52.537]  $ session_uuid  :function (pid = Sys.getpid(), attributes = TRUE)  
[08:29:52.537]  $ uuids         :List of 1
[08:29:52.537]   ..$ 85304: chr "4b08ecfa-0792-477a-6f3f-aab9fde33436"
[08:29:52.537]   .. ..- attr(*, "source")=List of 5
[08:29:52.537]   .. .. ..$ host  : Named chr "e9e776910d73"
[08:29:52.537]   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:29:52.537]   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
[08:29:52.537]   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:29:52.537]   .. .. ..$ pid   : int 85304
[08:29:52.537]   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:52"
[08:29:52.537]   .. .. ..$ random: int 2147483647
[08:29:52.537]  $ stealth_sample:function (x, size = length(x), replace = FALSE, ...)  
[08:29:52.537]  - attr(*, "where")=List of 3
[08:29:52.537]   ..$ session_uuid  :<environment: R_EmptyEnv> 
[08:29:52.537]   ..$ uuids         :<environment: R_EmptyEnv> 
[08:29:52.537]   ..$ stealth_sample:<environment: R_EmptyEnv> 
[08:29:52.537]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:29:52.537]  - attr(*, "resolved")= logi FALSE
[08:29:52.537]  - attr(*, "total_size")= num 11244
[08:29:52.537]  - attr(*, "already-done")= logi TRUE
[08:29:52.544] - copied ‘session_uuid’ to environment
[08:29:52.544] - copied ‘uuids’ to environment
[08:29:52.544] - copied ‘stealth_sample’ to environment
[08:29:52.544] assign_globals() ... done
[08:29:52.544] requestCore(): workers = 2
[08:29:52.547] MulticoreFuture started
[08:29:52.548] - Launch lazy future ... done
[08:29:52.548] run() for ‘MulticoreFuture’ ... done
[08:29:52.548] plan(): Setting new future strategy stack:
[08:29:52.549] List of future strategies:
[08:29:52.549] 1. sequential:
[08:29:52.549]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:52.549]    - tweaked: FALSE
[08:29:52.549]    - call: NULL
[08:29:52.550] plan(): nbrOfWorkers() = 1
[08:29:52.552] getGlobalsAndPackages() ...
[08:29:52.552] Searching for globals...
[08:29:52.569] - globals found: [28] ‘{’, ‘Sys.sleep’, ‘session_uuid’, ‘Sys.getpid’, ‘<-’, ‘as.character’, ‘[[’, ‘uuids’, ‘if’, ‘!’, ‘is.null’, ‘attr’, ‘attr<-’, ‘return’, ‘Sys.info’, ‘Sys.getenv’, ‘c’, ‘[’, ‘nzchar’, ‘==’, ‘length’, ‘list’, ‘Sys.time’, ‘stealth_sample’, ‘$’, ‘.Machine’, ‘<<-’, ‘[[<-’
[08:29:52.569] Searching for globals ... DONE
[08:29:52.569] Resolving globals: FALSE
[08:29:52.571] The total size of the 3 globals is 10.98 KiB (11244 bytes)
[08:29:52.572] The total size of the 3 globals exported for future expression (‘{; Sys.sleep(0.2); session_uuid(); }’) is 10.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘stealth_sample’ (7.71 KiB of class ‘function’), ‘session_uuid’ (2.56 KiB of class ‘function’) and ‘uuids’ (731 bytes of class ‘list’)
[08:29:52.572] - globals: [3] ‘session_uuid’, ‘uuids’, ‘stealth_sample’
[08:29:52.572] - packages: [1] ‘future’
[08:29:52.572] getGlobalsAndPackages() ... DONE
[08:29:52.573] run() for ‘Future’ ...
[08:29:52.573] - state: ‘created’
[08:29:52.573] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:52.573] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:52.574] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:52.574]   - Field: ‘label’
[08:29:52.574]   - Field: ‘local’
[08:29:52.574]   - Field: ‘owner’
[08:29:52.574]   - Field: ‘envir’
[08:29:52.574]   - Field: ‘workers’
[08:29:52.574]   - Field: ‘packages’
[08:29:52.574]   - Field: ‘gc’
[08:29:52.575]   - Field: ‘job’
[08:29:52.575]   - Field: ‘conditions’
[08:29:52.575]   - Field: ‘expr’
[08:29:52.575]   - Field: ‘uuid’
[08:29:52.575]   - Field: ‘seed’
[08:29:52.575]   - Field: ‘version’
[08:29:52.575]   - Field: ‘result’
[08:29:52.575]   - Field: ‘asynchronous’
[08:29:52.576]   - Field: ‘calls’
[08:29:52.576]   - Field: ‘globals’
[08:29:52.576]   - Field: ‘stdout’
[08:29:52.576]   - Field: ‘earlySignal’
[08:29:52.576]   - Field: ‘lazy’
[08:29:52.576]   - Field: ‘state’
[08:29:52.576] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:52.576] - Launch lazy future ...
[08:29:52.577] Packages needed by the future expression (n = 1): ‘future’
[08:29:52.577] Packages needed by future strategies (n = 0): <none>
[08:29:52.577] {
[08:29:52.577]     {
[08:29:52.577]         {
[08:29:52.577]             ...future.startTime <- base::Sys.time()
[08:29:52.577]             {
[08:29:52.577]                 {
[08:29:52.577]                   {
[08:29:52.577]                     {
[08:29:52.577]                       {
[08:29:52.577]                         base::local({
[08:29:52.577]                           has_future <- base::requireNamespace("future", 
[08:29:52.577]                             quietly = TRUE)
[08:29:52.577]                           if (has_future) {
[08:29:52.577]                             ns <- base::getNamespace("future")
[08:29:52.577]                             version <- ns[[".package"]][["version"]]
[08:29:52.577]                             if (is.null(version)) 
[08:29:52.577]                               version <- utils::packageVersion("future")
[08:29:52.577]                           }
[08:29:52.577]                           else {
[08:29:52.577]                             version <- NULL
[08:29:52.577]                           }
[08:29:52.577]                           if (!has_future || version < "1.8.0") {
[08:29:52.577]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:52.577]                               "", base::R.version$version.string), 
[08:29:52.577]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:52.577]                                 base::R.version$platform, 8 * 
[08:29:52.577]                                   base::.Machine$sizeof.pointer), 
[08:29:52.577]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:52.577]                                 "release", "version")], collapse = " "), 
[08:29:52.577]                               hostname = base::Sys.info()[["nodename"]])
[08:29:52.577]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:52.577]                               info)
[08:29:52.577]                             info <- base::paste(info, collapse = "; ")
[08:29:52.577]                             if (!has_future) {
[08:29:52.577]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:52.577]                                 info)
[08:29:52.577]                             }
[08:29:52.577]                             else {
[08:29:52.577]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:52.577]                                 info, version)
[08:29:52.577]                             }
[08:29:52.577]                             base::stop(msg)
[08:29:52.577]                           }
[08:29:52.577]                         })
[08:29:52.577]                       }
[08:29:52.577]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:52.577]                       base::options(mc.cores = 1L)
[08:29:52.577]                     }
[08:29:52.577]                     base::local({
[08:29:52.577]                       for (pkg in "future") {
[08:29:52.577]                         base::loadNamespace(pkg)
[08:29:52.577]                         base::library(pkg, character.only = TRUE)
[08:29:52.577]                       }
[08:29:52.577]                     })
[08:29:52.577]                   }
[08:29:52.577]                   ...future.strategy.old <- future::plan("list")
[08:29:52.577]                   options(future.plan = NULL)
[08:29:52.577]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:52.577]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:52.577]                 }
[08:29:52.577]                 ...future.workdir <- getwd()
[08:29:52.577]             }
[08:29:52.577]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:52.577]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:52.577]         }
[08:29:52.577]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:52.577]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:52.577]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:52.577]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:52.577]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:52.577]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:52.577]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:52.577]             base::names(...future.oldOptions))
[08:29:52.577]     }
[08:29:52.577]     if (FALSE) {
[08:29:52.577]     }
[08:29:52.577]     else {
[08:29:52.577]         if (TRUE) {
[08:29:52.577]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:52.577]                 open = "w")
[08:29:52.577]         }
[08:29:52.577]         else {
[08:29:52.577]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:52.577]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:52.577]         }
[08:29:52.577]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:52.577]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:52.577]             base::sink(type = "output", split = FALSE)
[08:29:52.577]             base::close(...future.stdout)
[08:29:52.577]         }, add = TRUE)
[08:29:52.577]     }
[08:29:52.577]     ...future.frame <- base::sys.nframe()
[08:29:52.577]     ...future.conditions <- base::list()
[08:29:52.577]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:52.577]     if (FALSE) {
[08:29:52.577]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:52.577]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:52.577]     }
[08:29:52.577]     ...future.result <- base::tryCatch({
[08:29:52.577]         base::withCallingHandlers({
[08:29:52.577]             ...future.value <- base::withVisible(base::local({
[08:29:52.577]                 withCallingHandlers({
[08:29:52.577]                   {
[08:29:52.577]                     Sys.sleep(0.2)
[08:29:52.577]                     session_uuid()
[08:29:52.577]                   }
[08:29:52.577]                 }, immediateCondition = function(cond) {
[08:29:52.577]                   save_rds <- function (object, pathname, ...) 
[08:29:52.577]                   {
[08:29:52.577]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:52.577]                     if (file_test("-f", pathname_tmp)) {
[08:29:52.577]                       fi_tmp <- file.info(pathname_tmp)
[08:29:52.577]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:52.577]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:52.577]                         fi_tmp[["mtime"]])
[08:29:52.577]                     }
[08:29:52.577]                     tryCatch({
[08:29:52.577]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:52.577]                     }, error = function(ex) {
[08:29:52.577]                       msg <- conditionMessage(ex)
[08:29:52.577]                       fi_tmp <- file.info(pathname_tmp)
[08:29:52.577]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:52.577]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:52.577]                         fi_tmp[["mtime"]], msg)
[08:29:52.577]                       ex$message <- msg
[08:29:52.577]                       stop(ex)
[08:29:52.577]                     })
[08:29:52.577]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:52.577]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:52.577]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:52.577]                       fi_tmp <- file.info(pathname_tmp)
[08:29:52.577]                       fi <- file.info(pathname)
[08:29:52.577]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:52.577]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:52.577]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:52.577]                         fi[["size"]], fi[["mtime"]])
[08:29:52.577]                       stop(msg)
[08:29:52.577]                     }
[08:29:52.577]                     invisible(pathname)
[08:29:52.577]                   }
[08:29:52.577]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:52.577]                     rootPath = tempdir()) 
[08:29:52.577]                   {
[08:29:52.577]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:52.577]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:52.577]                       tmpdir = path, fileext = ".rds")
[08:29:52.577]                     save_rds(obj, file)
[08:29:52.577]                   }
[08:29:52.577]                   saveImmediateCondition(cond, path = "/tmp/RtmpnU0NL1/.future/immediateConditions")
[08:29:52.577]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:52.577]                   {
[08:29:52.577]                     inherits <- base::inherits
[08:29:52.577]                     invokeRestart <- base::invokeRestart
[08:29:52.577]                     is.null <- base::is.null
[08:29:52.577]                     muffled <- FALSE
[08:29:52.577]                     if (inherits(cond, "message")) {
[08:29:52.577]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:52.577]                       if (muffled) 
[08:29:52.577]                         invokeRestart("muffleMessage")
[08:29:52.577]                     }
[08:29:52.577]                     else if (inherits(cond, "warning")) {
[08:29:52.577]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:52.577]                       if (muffled) 
[08:29:52.577]                         invokeRestart("muffleWarning")
[08:29:52.577]                     }
[08:29:52.577]                     else if (inherits(cond, "condition")) {
[08:29:52.577]                       if (!is.null(pattern)) {
[08:29:52.577]                         computeRestarts <- base::computeRestarts
[08:29:52.577]                         grepl <- base::grepl
[08:29:52.577]                         restarts <- computeRestarts(cond)
[08:29:52.577]                         for (restart in restarts) {
[08:29:52.577]                           name <- restart$name
[08:29:52.577]                           if (is.null(name)) 
[08:29:52.577]                             next
[08:29:52.577]                           if (!grepl(pattern, name)) 
[08:29:52.577]                             next
[08:29:52.577]                           invokeRestart(restart)
[08:29:52.577]                           muffled <- TRUE
[08:29:52.577]                           break
[08:29:52.577]                         }
[08:29:52.577]                       }
[08:29:52.577]                     }
[08:29:52.577]                     invisible(muffled)
[08:29:52.577]                   }
[08:29:52.577]                   muffleCondition(cond)
[08:29:52.577]                 })
[08:29:52.577]             }))
[08:29:52.577]             future::FutureResult(value = ...future.value$value, 
[08:29:52.577]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:52.577]                   ...future.rng), globalenv = if (FALSE) 
[08:29:52.577]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:52.577]                     ...future.globalenv.names))
[08:29:52.577]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:52.577]         }, condition = base::local({
[08:29:52.577]             c <- base::c
[08:29:52.577]             inherits <- base::inherits
[08:29:52.577]             invokeRestart <- base::invokeRestart
[08:29:52.577]             length <- base::length
[08:29:52.577]             list <- base::list
[08:29:52.577]             seq.int <- base::seq.int
[08:29:52.577]             signalCondition <- base::signalCondition
[08:29:52.577]             sys.calls <- base::sys.calls
[08:29:52.577]             `[[` <- base::`[[`
[08:29:52.577]             `+` <- base::`+`
[08:29:52.577]             `<<-` <- base::`<<-`
[08:29:52.577]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:52.577]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:52.577]                   3L)]
[08:29:52.577]             }
[08:29:52.577]             function(cond) {
[08:29:52.577]                 is_error <- inherits(cond, "error")
[08:29:52.577]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:52.577]                   NULL)
[08:29:52.577]                 if (is_error) {
[08:29:52.577]                   sessionInformation <- function() {
[08:29:52.577]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:52.577]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:52.577]                       search = base::search(), system = base::Sys.info())
[08:29:52.577]                   }
[08:29:52.577]                   ...future.conditions[[length(...future.conditions) + 
[08:29:52.577]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:52.577]                     cond$call), session = sessionInformation(), 
[08:29:52.577]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:52.577]                   signalCondition(cond)
[08:29:52.577]                 }
[08:29:52.577]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:52.577]                 "immediateCondition"))) {
[08:29:52.577]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:52.577]                   ...future.conditions[[length(...future.conditions) + 
[08:29:52.577]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:52.577]                   if (TRUE && !signal) {
[08:29:52.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:52.577]                     {
[08:29:52.577]                       inherits <- base::inherits
[08:29:52.577]                       invokeRestart <- base::invokeRestart
[08:29:52.577]                       is.null <- base::is.null
[08:29:52.577]                       muffled <- FALSE
[08:29:52.577]                       if (inherits(cond, "message")) {
[08:29:52.577]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:52.577]                         if (muffled) 
[08:29:52.577]                           invokeRestart("muffleMessage")
[08:29:52.577]                       }
[08:29:52.577]                       else if (inherits(cond, "warning")) {
[08:29:52.577]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:52.577]                         if (muffled) 
[08:29:52.577]                           invokeRestart("muffleWarning")
[08:29:52.577]                       }
[08:29:52.577]                       else if (inherits(cond, "condition")) {
[08:29:52.577]                         if (!is.null(pattern)) {
[08:29:52.577]                           computeRestarts <- base::computeRestarts
[08:29:52.577]                           grepl <- base::grepl
[08:29:52.577]                           restarts <- computeRestarts(cond)
[08:29:52.577]                           for (restart in restarts) {
[08:29:52.577]                             name <- restart$name
[08:29:52.577]                             if (is.null(name)) 
[08:29:52.577]                               next
[08:29:52.577]                             if (!grepl(pattern, name)) 
[08:29:52.577]                               next
[08:29:52.577]                             invokeRestart(restart)
[08:29:52.577]                             muffled <- TRUE
[08:29:52.577]                             break
[08:29:52.577]                           }
[08:29:52.577]                         }
[08:29:52.577]                       }
[08:29:52.577]                       invisible(muffled)
[08:29:52.577]                     }
[08:29:52.577]                     muffleCondition(cond, pattern = "^muffle")
[08:29:52.577]                   }
[08:29:52.577]                 }
[08:29:52.577]                 else {
[08:29:52.577]                   if (TRUE) {
[08:29:52.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:52.577]                     {
[08:29:52.577]                       inherits <- base::inherits
[08:29:52.577]                       invokeRestart <- base::invokeRestart
[08:29:52.577]                       is.null <- base::is.null
[08:29:52.577]                       muffled <- FALSE
[08:29:52.577]                       if (inherits(cond, "message")) {
[08:29:52.577]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:52.577]                         if (muffled) 
[08:29:52.577]                           invokeRestart("muffleMessage")
[08:29:52.577]                       }
[08:29:52.577]                       else if (inherits(cond, "warning")) {
[08:29:52.577]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:52.577]                         if (muffled) 
[08:29:52.577]                           invokeRestart("muffleWarning")
[08:29:52.577]                       }
[08:29:52.577]                       else if (inherits(cond, "condition")) {
[08:29:52.577]                         if (!is.null(pattern)) {
[08:29:52.577]                           computeRestarts <- base::computeRestarts
[08:29:52.577]                           grepl <- base::grepl
[08:29:52.577]                           restarts <- computeRestarts(cond)
[08:29:52.577]                           for (restart in restarts) {
[08:29:52.577]                             name <- restart$name
[08:29:52.577]                             if (is.null(name)) 
[08:29:52.577]                               next
[08:29:52.577]                             if (!grepl(pattern, name)) 
[08:29:52.577]                               next
[08:29:52.577]                             invokeRestart(restart)
[08:29:52.577]                             muffled <- TRUE
[08:29:52.577]                             break
[08:29:52.577]                           }
[08:29:52.577]                         }
[08:29:52.577]                       }
[08:29:52.577]                       invisible(muffled)
[08:29:52.577]                     }
[08:29:52.577]                     muffleCondition(cond, pattern = "^muffle")
[08:29:52.577]                   }
[08:29:52.577]                 }
[08:29:52.577]             }
[08:29:52.577]         }))
[08:29:52.577]     }, error = function(ex) {
[08:29:52.577]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:52.577]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:52.577]                 ...future.rng), started = ...future.startTime, 
[08:29:52.577]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:52.577]             version = "1.8"), class = "FutureResult")
[08:29:52.577]     }, finally = {
[08:29:52.577]         if (!identical(...future.workdir, getwd())) 
[08:29:52.577]             setwd(...future.workdir)
[08:29:52.577]         {
[08:29:52.577]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:52.577]                 ...future.oldOptions$nwarnings <- NULL
[08:29:52.577]             }
[08:29:52.577]             base::options(...future.oldOptions)
[08:29:52.577]             if (.Platform$OS.type == "windows") {
[08:29:52.577]                 old_names <- names(...future.oldEnvVars)
[08:29:52.577]                 envs <- base::Sys.getenv()
[08:29:52.577]                 names <- names(envs)
[08:29:52.577]                 common <- intersect(names, old_names)
[08:29:52.577]                 added <- setdiff(names, old_names)
[08:29:52.577]                 removed <- setdiff(old_names, names)
[08:29:52.577]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:52.577]                   envs[common]]
[08:29:52.577]                 NAMES <- toupper(changed)
[08:29:52.577]                 args <- list()
[08:29:52.577]                 for (kk in seq_along(NAMES)) {
[08:29:52.577]                   name <- changed[[kk]]
[08:29:52.577]                   NAME <- NAMES[[kk]]
[08:29:52.577]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:52.577]                     next
[08:29:52.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:52.577]                 }
[08:29:52.577]                 NAMES <- toupper(added)
[08:29:52.577]                 for (kk in seq_along(NAMES)) {
[08:29:52.577]                   name <- added[[kk]]
[08:29:52.577]                   NAME <- NAMES[[kk]]
[08:29:52.577]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:52.577]                     next
[08:29:52.577]                   args[[name]] <- ""
[08:29:52.577]                 }
[08:29:52.577]                 NAMES <- toupper(removed)
[08:29:52.577]                 for (kk in seq_along(NAMES)) {
[08:29:52.577]                   name <- removed[[kk]]
[08:29:52.577]                   NAME <- NAMES[[kk]]
[08:29:52.577]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:52.577]                     next
[08:29:52.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:52.577]                 }
[08:29:52.577]                 if (length(args) > 0) 
[08:29:52.577]                   base::do.call(base::Sys.setenv, args = args)
[08:29:52.577]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:52.577]             }
[08:29:52.577]             else {
[08:29:52.577]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:52.577]             }
[08:29:52.577]             {
[08:29:52.577]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:52.577]                   0L) {
[08:29:52.577]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:52.577]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:52.577]                   base::options(opts)
[08:29:52.577]                 }
[08:29:52.577]                 {
[08:29:52.577]                   {
[08:29:52.577]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:52.577]                     NULL
[08:29:52.577]                   }
[08:29:52.577]                   options(future.plan = NULL)
[08:29:52.577]                   if (is.na(NA_character_)) 
[08:29:52.577]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:52.577]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:52.577]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:52.577]                     .init = FALSE)
[08:29:52.577]                 }
[08:29:52.577]             }
[08:29:52.577]         }
[08:29:52.577]     })
[08:29:52.577]     if (TRUE) {
[08:29:52.577]         base::sink(type = "output", split = FALSE)
[08:29:52.577]         if (TRUE) {
[08:29:52.577]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:52.577]         }
[08:29:52.577]         else {
[08:29:52.577]             ...future.result["stdout"] <- base::list(NULL)
[08:29:52.577]         }
[08:29:52.577]         base::close(...future.stdout)
[08:29:52.577]         ...future.stdout <- NULL
[08:29:52.577]     }
[08:29:52.577]     ...future.result$conditions <- ...future.conditions
[08:29:52.577]     ...future.result$finished <- base::Sys.time()
[08:29:52.577]     ...future.result
[08:29:52.577] }
[08:29:52.580] assign_globals() ...
[08:29:52.580] List of 3
[08:29:52.580]  $ session_uuid  :function (pid = Sys.getpid(), attributes = TRUE)  
[08:29:52.580]  $ uuids         :List of 1
[08:29:52.580]   ..$ 85304: chr "4b08ecfa-0792-477a-6f3f-aab9fde33436"
[08:29:52.580]   .. ..- attr(*, "source")=List of 5
[08:29:52.580]   .. .. ..$ host  : Named chr "e9e776910d73"
[08:29:52.580]   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:29:52.580]   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
[08:29:52.580]   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:29:52.580]   .. .. ..$ pid   : int 85304
[08:29:52.580]   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:52"
[08:29:52.580]   .. .. ..$ random: int 2147483647
[08:29:52.580]  $ stealth_sample:function (x, size = length(x), replace = FALSE, ...)  
[08:29:52.580]  - attr(*, "where")=List of 3
[08:29:52.580]   ..$ session_uuid  :<environment: R_EmptyEnv> 
[08:29:52.580]   ..$ uuids         :<environment: R_EmptyEnv> 
[08:29:52.580]   ..$ stealth_sample:<environment: R_EmptyEnv> 
[08:29:52.580]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:29:52.580]  - attr(*, "resolved")= logi FALSE
[08:29:52.580]  - attr(*, "total_size")= num 11244
[08:29:52.580]  - attr(*, "already-done")= logi TRUE
[08:29:52.587] - copied ‘session_uuid’ to environment
[08:29:52.587] - copied ‘uuids’ to environment
[08:29:52.587] - copied ‘stealth_sample’ to environment
[08:29:52.588] assign_globals() ... done
[08:29:52.588] requestCore(): workers = 2
[08:29:52.592] MulticoreFuture started
[08:29:52.593] - Launch lazy future ... done
[08:29:52.593] run() for ‘MulticoreFuture’ ... done
[08:29:52.594] plan(): Setting new future strategy stack:
[08:29:52.594] resolve() on list ...
[08:29:52.594]  recursive: 0
[08:29:52.595]  length: 2
[08:29:52.595] 
[08:29:52.594] List of future strategies:
[08:29:52.594] 1. sequential:
[08:29:52.594]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:52.594]    - tweaked: FALSE
[08:29:52.594]    - call: NULL
[08:29:52.595] plan(): nbrOfWorkers() = 1
[08:29:52.753] plan(): Setting new future strategy stack:
[08:29:52.753] List of future strategies:
[08:29:52.753] 1. multicore:
[08:29:52.753]    - args: function (..., workers = 2L, envir = parent.frame())
[08:29:52.753]    - tweaked: TRUE
[08:29:52.753]    - call: plan(multicore, workers = 2L)
[08:29:52.753] plan(): nbrOfWorkers() = 2
[08:29:52.754] Future #1
[08:29:52.755] result() for MulticoreFuture ...
[08:29:52.757] result() for MulticoreFuture ...
[08:29:52.757] result() for MulticoreFuture ... done
[08:29:52.757] result() for MulticoreFuture ... done
[08:29:52.757] result() for MulticoreFuture ...
[08:29:52.758] result() for MulticoreFuture ... done
[08:29:52.758] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:29:52.758] - nx: 2
[08:29:52.758] - relay: TRUE
[08:29:52.758] - stdout: TRUE
[08:29:52.758] - signal: TRUE
[08:29:52.758] - resignal: FALSE
[08:29:52.758] - force: TRUE
[08:29:52.759] - relayed: [n=2] FALSE, FALSE
[08:29:52.759] - queued futures: [n=2] FALSE, FALSE
[08:29:52.759]  - until=1
[08:29:52.759]  - relaying element #1
[08:29:52.759] result() for MulticoreFuture ...
[08:29:52.759] result() for MulticoreFuture ... done
[08:29:52.759] result() for MulticoreFuture ...
[08:29:52.759] result() for MulticoreFuture ... done
[08:29:52.760] result() for MulticoreFuture ...
[08:29:52.760] result() for MulticoreFuture ... done
[08:29:52.760] result() for MulticoreFuture ...
[08:29:52.760] result() for MulticoreFuture ... done
[08:29:52.760] - relayed: [n=2] TRUE, FALSE
[08:29:52.760] - queued futures: [n=2] TRUE, FALSE
[08:29:52.760] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:29:52.761]  length: 1 (resolved future 1)
[08:29:52.798] plan(): Setting new future strategy stack:
[08:29:52.798] List of future strategies:
[08:29:52.798] 1. multicore:
[08:29:52.798]    - args: function (..., workers = 2L, envir = parent.frame())
[08:29:52.798]    - tweaked: TRUE
[08:29:52.798]    - call: plan(multicore, workers = 2L)
[08:29:52.799] plan(): nbrOfWorkers() = 2
[08:29:52.802] Future #2
[08:29:52.802] result() for MulticoreFuture ...
[08:29:52.803] result() for MulticoreFuture ...
[08:29:52.803] result() for MulticoreFuture ... done
[08:29:52.803] result() for MulticoreFuture ... done
[08:29:52.803] result() for MulticoreFuture ...
[08:29:52.803] result() for MulticoreFuture ... done
[08:29:52.803] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:29:52.803] - nx: 2
[08:29:52.804] - relay: TRUE
[08:29:52.804] - stdout: TRUE
[08:29:52.804] - signal: TRUE
[08:29:52.804] - resignal: FALSE
[08:29:52.804] - force: TRUE
[08:29:52.804] - relayed: [n=2] TRUE, FALSE
[08:29:52.804] - queued futures: [n=2] TRUE, FALSE
[08:29:52.804]  - until=2
[08:29:52.804]  - relaying element #2
[08:29:52.804] result() for MulticoreFuture ...
[08:29:52.805] result() for MulticoreFuture ... done
[08:29:52.807] result() for MulticoreFuture ...
[08:29:52.807] result() for MulticoreFuture ... done
[08:29:52.807] result() for MulticoreFuture ...
[08:29:52.807] result() for MulticoreFuture ... done
[08:29:52.807] result() for MulticoreFuture ...
[08:29:52.808] result() for MulticoreFuture ... done
[08:29:52.808] - relayed: [n=2] TRUE, TRUE
[08:29:52.808] - queued futures: [n=2] TRUE, TRUE
[08:29:52.808] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:29:52.808]  length: 0 (resolved future 2)
[08:29:52.808] Relaying remaining futures
[08:29:52.808] signalConditionsASAP(NULL, pos=0) ...
[08:29:52.808] - nx: 2
[08:29:52.809] - relay: TRUE
[08:29:52.809] - stdout: TRUE
[08:29:52.809] - signal: TRUE
[08:29:52.809] - resignal: FALSE
[08:29:52.809] - force: TRUE
[08:29:52.809] - relayed: [n=2] TRUE, TRUE
[08:29:52.809] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:29:52.809] - relayed: [n=2] TRUE, TRUE
[08:29:52.810] - queued futures: [n=2] TRUE, TRUE
[08:29:52.810] signalConditionsASAP(NULL, pos=0) ... done
[08:29:52.810] resolve() on list ... DONE
[08:29:52.810] result() for MulticoreFuture ...
[08:29:52.810] result() for MulticoreFuture ... done
[08:29:52.810] result() for MulticoreFuture ...
[08:29:52.810] result() for MulticoreFuture ... done
[08:29:52.810] result() for MulticoreFuture ...
[08:29:52.810] result() for MulticoreFuture ... done
[08:29:52.811] result() for MulticoreFuture ...
[08:29:52.811] result() for MulticoreFuture ... done
[1] "f7ff2731-0beb-3a65-eeab-715cbe0206c4"
[2] "c52ad731-cd6f-ece9-ab46-63141372db79"
> 
> message("*** session_uuid() ... DONE")
*** session_uuid() ... DONE
> 
> source("incl/end.R")
[08:29:52.811] plan(): Setting new future strategy stack:
[08:29:52.812] List of future strategies:
[08:29:52.812] 1. FutureStrategy:
[08:29:52.812]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:52.812]    - tweaked: FALSE
[08:29:52.812]    - call: future::plan(oplan)
[08:29:52.812] plan(): nbrOfWorkers() = 1
> 
