
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:28:09.531] plan(): Setting new future strategy stack:
[08:28:09.531] List of future strategies:
[08:28:09.531] 1. sequential:
[08:28:09.531]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.531]    - tweaked: FALSE
[08:28:09.531]    - call: future::plan("sequential")
[08:28:09.545] plan(): nbrOfWorkers() = 1
> 
> oopts <- c(oopts, options(
+   future.globals.resolve = TRUE,
+   future.globals.onMissing = "error"
+ ))
> 
> message("*** Globals - subassignments ...")
*** Globals - subassignments ...
> 
> message("*** Globals - subassignments w/ x$a <- value ...")
*** Globals - subassignments w/ x$a <- value ...
> 
> ## Truth:
> x <- x0 <- list()
> y0 <- list(a = 1)
> str(list(x = x, y0 = y0))
List of 2
 $ x : list()
 $ y0:List of 1
  ..$ a: num 1
> 
> y <- local({
+   x$a <- 1
+   x
+ })
> stopifnot(identical(y, y0))
> 
> y <- local({
+   x[["a"]] <- 1
+   x
+ })
> stopifnot(identical(y, y0))
> 
> y <- local({
+   x["a"] <- list(1)
+   x
+ })
> stopifnot(identical(y, y0))
> 
> stopifnot(identical(x, list()))
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("availableCores(): ", availableCores())
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy)
+ 
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x$a <- 1
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x$a <- 1
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x$a <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Same with forced lazy evaluation
+     x <- list()
+     y %<-% {
+       x$a <- 1
+       x
+     } %lazy% TRUE
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## 'x' is _not_ a global variable here
+     x <- list()
+     y %<-% {
+       x <- list(b = 2)
+       x$a <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, list(b = 2, a = 1)))
+ 
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x[["a"]] <- 1
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x[["a"]] <- 1
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x[["a"]] <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+     
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x["a"] <- list(1)
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x["a"] <- list(1)
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x["a"] <- list(1)
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     name <- "a"
+     y %<-% {
+       x[name] <- list(1)
+       x
+     }
+     rm(list = c("x", "name"))
+     print(y)
+     stopifnot(identical(y, y0))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
availableCores(): 1
- plan('sequential') ...
[08:28:09.614] plan(): Setting new future strategy stack:
[08:28:09.614] List of future strategies:
[08:28:09.614] 1. sequential:
[08:28:09.614]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.614]    - tweaked: FALSE
[08:28:09.614]    - call: plan(strategy)
[08:28:09.625] plan(): nbrOfWorkers() = 1
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.625] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.626] Searching for globals...
[08:28:09.632] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.633] Searching for globals ... DONE
[08:28:09.633] Resolving globals: TRUE
[08:28:09.633] Resolving any globals that are futures ...
[08:28:09.633] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.633] Resolving any globals that are futures ... DONE
[08:28:09.634] Resolving futures part of globals (recursively) ...
[08:28:09.634] resolve() on list ...
[08:28:09.634]  recursive: 99
[08:28:09.635]  length: 1
[08:28:09.635]  elements: ‘x’
[08:28:09.635]  length: 0 (resolved future 1)
[08:28:09.635] resolve() on list ... DONE
[08:28:09.635] - globals: [1] ‘x’
[08:28:09.635] Resolving futures part of globals (recursively) ... DONE
[08:28:09.635] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.636] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.636] - globals: [1] ‘x’
[08:28:09.636] 
[08:28:09.636] getGlobalsAndPackages() ... DONE
[08:28:09.637] run() for ‘Future’ ...
[08:28:09.637] - state: ‘created’
[08:28:09.637] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.637] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.637] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.637]   - Field: ‘label’
[08:28:09.638]   - Field: ‘local’
[08:28:09.638]   - Field: ‘owner’
[08:28:09.638]   - Field: ‘envir’
[08:28:09.638]   - Field: ‘packages’
[08:28:09.638]   - Field: ‘gc’
[08:28:09.638]   - Field: ‘conditions’
[08:28:09.638]   - Field: ‘expr’
[08:28:09.638]   - Field: ‘uuid’
[08:28:09.638]   - Field: ‘seed’
[08:28:09.638]   - Field: ‘version’
[08:28:09.638]   - Field: ‘result’
[08:28:09.638]   - Field: ‘asynchronous’
[08:28:09.639]   - Field: ‘calls’
[08:28:09.639]   - Field: ‘globals’
[08:28:09.639]   - Field: ‘stdout’
[08:28:09.639]   - Field: ‘earlySignal’
[08:28:09.639]   - Field: ‘lazy’
[08:28:09.639]   - Field: ‘state’
[08:28:09.639] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.641] - Launch lazy future ...
[08:28:09.641] Packages needed by the future expression (n = 0): <none>
[08:28:09.642] Packages needed by future strategies (n = 0): <none>
[08:28:09.642] {
[08:28:09.642]     {
[08:28:09.642]         {
[08:28:09.642]             ...future.startTime <- base::Sys.time()
[08:28:09.642]             {
[08:28:09.642]                 {
[08:28:09.642]                   {
[08:28:09.642]                     base::local({
[08:28:09.642]                       has_future <- base::requireNamespace("future", 
[08:28:09.642]                         quietly = TRUE)
[08:28:09.642]                       if (has_future) {
[08:28:09.642]                         ns <- base::getNamespace("future")
[08:28:09.642]                         version <- ns[[".package"]][["version"]]
[08:28:09.642]                         if (is.null(version)) 
[08:28:09.642]                           version <- utils::packageVersion("future")
[08:28:09.642]                       }
[08:28:09.642]                       else {
[08:28:09.642]                         version <- NULL
[08:28:09.642]                       }
[08:28:09.642]                       if (!has_future || version < "1.8.0") {
[08:28:09.642]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.642]                           "", base::R.version$version.string), 
[08:28:09.642]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.642]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.642]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.642]                             "release", "version")], collapse = " "), 
[08:28:09.642]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.642]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.642]                           info)
[08:28:09.642]                         info <- base::paste(info, collapse = "; ")
[08:28:09.642]                         if (!has_future) {
[08:28:09.642]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.642]                             info)
[08:28:09.642]                         }
[08:28:09.642]                         else {
[08:28:09.642]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.642]                             info, version)
[08:28:09.642]                         }
[08:28:09.642]                         base::stop(msg)
[08:28:09.642]                       }
[08:28:09.642]                     })
[08:28:09.642]                   }
[08:28:09.642]                   ...future.strategy.old <- future::plan("list")
[08:28:09.642]                   options(future.plan = NULL)
[08:28:09.642]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.642]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.642]                 }
[08:28:09.642]                 ...future.workdir <- getwd()
[08:28:09.642]             }
[08:28:09.642]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.642]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.642]         }
[08:28:09.642]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.642]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.642]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.642]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.642]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.642]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.642]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.642]             base::names(...future.oldOptions))
[08:28:09.642]     }
[08:28:09.642]     if (FALSE) {
[08:28:09.642]     }
[08:28:09.642]     else {
[08:28:09.642]         if (TRUE) {
[08:28:09.642]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.642]                 open = "w")
[08:28:09.642]         }
[08:28:09.642]         else {
[08:28:09.642]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.642]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.642]         }
[08:28:09.642]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.642]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.642]             base::sink(type = "output", split = FALSE)
[08:28:09.642]             base::close(...future.stdout)
[08:28:09.642]         }, add = TRUE)
[08:28:09.642]     }
[08:28:09.642]     ...future.frame <- base::sys.nframe()
[08:28:09.642]     ...future.conditions <- base::list()
[08:28:09.642]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.642]     if (FALSE) {
[08:28:09.642]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.642]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.642]     }
[08:28:09.642]     ...future.result <- base::tryCatch({
[08:28:09.642]         base::withCallingHandlers({
[08:28:09.642]             ...future.value <- base::withVisible(base::local({
[08:28:09.642]                 x$a <- 1
[08:28:09.642]                 x
[08:28:09.642]             }))
[08:28:09.642]             future::FutureResult(value = ...future.value$value, 
[08:28:09.642]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.642]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.642]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.642]                     ...future.globalenv.names))
[08:28:09.642]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.642]         }, condition = base::local({
[08:28:09.642]             c <- base::c
[08:28:09.642]             inherits <- base::inherits
[08:28:09.642]             invokeRestart <- base::invokeRestart
[08:28:09.642]             length <- base::length
[08:28:09.642]             list <- base::list
[08:28:09.642]             seq.int <- base::seq.int
[08:28:09.642]             signalCondition <- base::signalCondition
[08:28:09.642]             sys.calls <- base::sys.calls
[08:28:09.642]             `[[` <- base::`[[`
[08:28:09.642]             `+` <- base::`+`
[08:28:09.642]             `<<-` <- base::`<<-`
[08:28:09.642]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.642]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.642]                   3L)]
[08:28:09.642]             }
[08:28:09.642]             function(cond) {
[08:28:09.642]                 is_error <- inherits(cond, "error")
[08:28:09.642]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.642]                   NULL)
[08:28:09.642]                 if (is_error) {
[08:28:09.642]                   sessionInformation <- function() {
[08:28:09.642]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.642]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.642]                       search = base::search(), system = base::Sys.info())
[08:28:09.642]                   }
[08:28:09.642]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.642]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.642]                     cond$call), session = sessionInformation(), 
[08:28:09.642]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.642]                   signalCondition(cond)
[08:28:09.642]                 }
[08:28:09.642]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.642]                 "immediateCondition"))) {
[08:28:09.642]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.642]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.642]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.642]                   if (TRUE && !signal) {
[08:28:09.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.642]                     {
[08:28:09.642]                       inherits <- base::inherits
[08:28:09.642]                       invokeRestart <- base::invokeRestart
[08:28:09.642]                       is.null <- base::is.null
[08:28:09.642]                       muffled <- FALSE
[08:28:09.642]                       if (inherits(cond, "message")) {
[08:28:09.642]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.642]                         if (muffled) 
[08:28:09.642]                           invokeRestart("muffleMessage")
[08:28:09.642]                       }
[08:28:09.642]                       else if (inherits(cond, "warning")) {
[08:28:09.642]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.642]                         if (muffled) 
[08:28:09.642]                           invokeRestart("muffleWarning")
[08:28:09.642]                       }
[08:28:09.642]                       else if (inherits(cond, "condition")) {
[08:28:09.642]                         if (!is.null(pattern)) {
[08:28:09.642]                           computeRestarts <- base::computeRestarts
[08:28:09.642]                           grepl <- base::grepl
[08:28:09.642]                           restarts <- computeRestarts(cond)
[08:28:09.642]                           for (restart in restarts) {
[08:28:09.642]                             name <- restart$name
[08:28:09.642]                             if (is.null(name)) 
[08:28:09.642]                               next
[08:28:09.642]                             if (!grepl(pattern, name)) 
[08:28:09.642]                               next
[08:28:09.642]                             invokeRestart(restart)
[08:28:09.642]                             muffled <- TRUE
[08:28:09.642]                             break
[08:28:09.642]                           }
[08:28:09.642]                         }
[08:28:09.642]                       }
[08:28:09.642]                       invisible(muffled)
[08:28:09.642]                     }
[08:28:09.642]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.642]                   }
[08:28:09.642]                 }
[08:28:09.642]                 else {
[08:28:09.642]                   if (TRUE) {
[08:28:09.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.642]                     {
[08:28:09.642]                       inherits <- base::inherits
[08:28:09.642]                       invokeRestart <- base::invokeRestart
[08:28:09.642]                       is.null <- base::is.null
[08:28:09.642]                       muffled <- FALSE
[08:28:09.642]                       if (inherits(cond, "message")) {
[08:28:09.642]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.642]                         if (muffled) 
[08:28:09.642]                           invokeRestart("muffleMessage")
[08:28:09.642]                       }
[08:28:09.642]                       else if (inherits(cond, "warning")) {
[08:28:09.642]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.642]                         if (muffled) 
[08:28:09.642]                           invokeRestart("muffleWarning")
[08:28:09.642]                       }
[08:28:09.642]                       else if (inherits(cond, "condition")) {
[08:28:09.642]                         if (!is.null(pattern)) {
[08:28:09.642]                           computeRestarts <- base::computeRestarts
[08:28:09.642]                           grepl <- base::grepl
[08:28:09.642]                           restarts <- computeRestarts(cond)
[08:28:09.642]                           for (restart in restarts) {
[08:28:09.642]                             name <- restart$name
[08:28:09.642]                             if (is.null(name)) 
[08:28:09.642]                               next
[08:28:09.642]                             if (!grepl(pattern, name)) 
[08:28:09.642]                               next
[08:28:09.642]                             invokeRestart(restart)
[08:28:09.642]                             muffled <- TRUE
[08:28:09.642]                             break
[08:28:09.642]                           }
[08:28:09.642]                         }
[08:28:09.642]                       }
[08:28:09.642]                       invisible(muffled)
[08:28:09.642]                     }
[08:28:09.642]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.642]                   }
[08:28:09.642]                 }
[08:28:09.642]             }
[08:28:09.642]         }))
[08:28:09.642]     }, error = function(ex) {
[08:28:09.642]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.642]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.642]                 ...future.rng), started = ...future.startTime, 
[08:28:09.642]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.642]             version = "1.8"), class = "FutureResult")
[08:28:09.642]     }, finally = {
[08:28:09.642]         if (!identical(...future.workdir, getwd())) 
[08:28:09.642]             setwd(...future.workdir)
[08:28:09.642]         {
[08:28:09.642]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.642]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.642]             }
[08:28:09.642]             base::options(...future.oldOptions)
[08:28:09.642]             if (.Platform$OS.type == "windows") {
[08:28:09.642]                 old_names <- names(...future.oldEnvVars)
[08:28:09.642]                 envs <- base::Sys.getenv()
[08:28:09.642]                 names <- names(envs)
[08:28:09.642]                 common <- intersect(names, old_names)
[08:28:09.642]                 added <- setdiff(names, old_names)
[08:28:09.642]                 removed <- setdiff(old_names, names)
[08:28:09.642]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.642]                   envs[common]]
[08:28:09.642]                 NAMES <- toupper(changed)
[08:28:09.642]                 args <- list()
[08:28:09.642]                 for (kk in seq_along(NAMES)) {
[08:28:09.642]                   name <- changed[[kk]]
[08:28:09.642]                   NAME <- NAMES[[kk]]
[08:28:09.642]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.642]                     next
[08:28:09.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.642]                 }
[08:28:09.642]                 NAMES <- toupper(added)
[08:28:09.642]                 for (kk in seq_along(NAMES)) {
[08:28:09.642]                   name <- added[[kk]]
[08:28:09.642]                   NAME <- NAMES[[kk]]
[08:28:09.642]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.642]                     next
[08:28:09.642]                   args[[name]] <- ""
[08:28:09.642]                 }
[08:28:09.642]                 NAMES <- toupper(removed)
[08:28:09.642]                 for (kk in seq_along(NAMES)) {
[08:28:09.642]                   name <- removed[[kk]]
[08:28:09.642]                   NAME <- NAMES[[kk]]
[08:28:09.642]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.642]                     next
[08:28:09.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.642]                 }
[08:28:09.642]                 if (length(args) > 0) 
[08:28:09.642]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.642]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.642]             }
[08:28:09.642]             else {
[08:28:09.642]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.642]             }
[08:28:09.642]             {
[08:28:09.642]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.642]                   0L) {
[08:28:09.642]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.642]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.642]                   base::options(opts)
[08:28:09.642]                 }
[08:28:09.642]                 {
[08:28:09.642]                   {
[08:28:09.642]                     NULL
[08:28:09.642]                     RNGkind("Mersenne-Twister")
[08:28:09.642]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.642]                       inherits = FALSE)
[08:28:09.642]                   }
[08:28:09.642]                   options(future.plan = NULL)
[08:28:09.642]                   if (is.na(NA_character_)) 
[08:28:09.642]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.642]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.642]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.642]                     .init = FALSE)
[08:28:09.642]                 }
[08:28:09.642]             }
[08:28:09.642]         }
[08:28:09.642]     })
[08:28:09.642]     if (TRUE) {
[08:28:09.642]         base::sink(type = "output", split = FALSE)
[08:28:09.642]         if (TRUE) {
[08:28:09.642]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.642]         }
[08:28:09.642]         else {
[08:28:09.642]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.642]         }
[08:28:09.642]         base::close(...future.stdout)
[08:28:09.642]         ...future.stdout <- NULL
[08:28:09.642]     }
[08:28:09.642]     ...future.result$conditions <- ...future.conditions
[08:28:09.642]     ...future.result$finished <- base::Sys.time()
[08:28:09.642]     ...future.result
[08:28:09.642] }
[08:28:09.644] assign_globals() ...
[08:28:09.644] List of 1
[08:28:09.644]  $ x: list()
[08:28:09.644]  - attr(*, "where")=List of 1
[08:28:09.644]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.644]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.644]  - attr(*, "resolved")= logi TRUE
[08:28:09.644]  - attr(*, "total_size")= num 31
[08:28:09.644]  - attr(*, "already-done")= logi TRUE
[08:28:09.647] - copied ‘x’ to environment
[08:28:09.647] assign_globals() ... done
[08:28:09.647] plan(): Setting new future strategy stack:
[08:28:09.647] List of future strategies:
[08:28:09.647] 1. sequential:
[08:28:09.647]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.647]    - tweaked: FALSE
[08:28:09.647]    - call: NULL
[08:28:09.648] plan(): nbrOfWorkers() = 1
[08:28:09.649] plan(): Setting new future strategy stack:
[08:28:09.649] List of future strategies:
[08:28:09.649] 1. sequential:
[08:28:09.649]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.649]    - tweaked: FALSE
[08:28:09.649]    - call: plan(strategy)
[08:28:09.649] plan(): nbrOfWorkers() = 1
[08:28:09.649] SequentialFuture started (and completed)
[08:28:09.650] - Launch lazy future ... done
[08:28:09.650] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.650] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.651] Searching for globals...
[08:28:09.652] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.652] Searching for globals ... DONE
[08:28:09.652] Resolving globals: TRUE
[08:28:09.653] Resolving any globals that are futures ...
[08:28:09.653] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.653] Resolving any globals that are futures ... DONE
[08:28:09.653] Resolving futures part of globals (recursively) ...
[08:28:09.653] resolve() on list ...
[08:28:09.653]  recursive: 99
[08:28:09.653]  length: 1
[08:28:09.654]  elements: ‘x’
[08:28:09.654]  length: 0 (resolved future 1)
[08:28:09.654] resolve() on list ... DONE
[08:28:09.654] - globals: [1] ‘x’
[08:28:09.654] Resolving futures part of globals (recursively) ... DONE
[08:28:09.654] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.654] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.654] - globals: [1] ‘x’
[08:28:09.655] 
[08:28:09.655] getGlobalsAndPackages() ... DONE
[08:28:09.655] run() for ‘Future’ ...
[08:28:09.655] - state: ‘created’
[08:28:09.655] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.655] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.655] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.655]   - Field: ‘label’
[08:28:09.656]   - Field: ‘local’
[08:28:09.656]   - Field: ‘owner’
[08:28:09.656]   - Field: ‘envir’
[08:28:09.656]   - Field: ‘packages’
[08:28:09.656]   - Field: ‘gc’
[08:28:09.656]   - Field: ‘conditions’
[08:28:09.656]   - Field: ‘expr’
[08:28:09.656]   - Field: ‘uuid’
[08:28:09.656]   - Field: ‘seed’
[08:28:09.656]   - Field: ‘version’
[08:28:09.656]   - Field: ‘result’
[08:28:09.656]   - Field: ‘asynchronous’
[08:28:09.657]   - Field: ‘calls’
[08:28:09.657]   - Field: ‘globals’
[08:28:09.657]   - Field: ‘stdout’
[08:28:09.657]   - Field: ‘earlySignal’
[08:28:09.657]   - Field: ‘lazy’
[08:28:09.657]   - Field: ‘state’
[08:28:09.657] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.657] - Launch lazy future ...
[08:28:09.657] Packages needed by the future expression (n = 0): <none>
[08:28:09.657] Packages needed by future strategies (n = 0): <none>
[08:28:09.658] {
[08:28:09.658]     {
[08:28:09.658]         {
[08:28:09.658]             ...future.startTime <- base::Sys.time()
[08:28:09.658]             {
[08:28:09.658]                 {
[08:28:09.658]                   {
[08:28:09.658]                     base::local({
[08:28:09.658]                       has_future <- base::requireNamespace("future", 
[08:28:09.658]                         quietly = TRUE)
[08:28:09.658]                       if (has_future) {
[08:28:09.658]                         ns <- base::getNamespace("future")
[08:28:09.658]                         version <- ns[[".package"]][["version"]]
[08:28:09.658]                         if (is.null(version)) 
[08:28:09.658]                           version <- utils::packageVersion("future")
[08:28:09.658]                       }
[08:28:09.658]                       else {
[08:28:09.658]                         version <- NULL
[08:28:09.658]                       }
[08:28:09.658]                       if (!has_future || version < "1.8.0") {
[08:28:09.658]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.658]                           "", base::R.version$version.string), 
[08:28:09.658]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.658]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.658]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.658]                             "release", "version")], collapse = " "), 
[08:28:09.658]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.658]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.658]                           info)
[08:28:09.658]                         info <- base::paste(info, collapse = "; ")
[08:28:09.658]                         if (!has_future) {
[08:28:09.658]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.658]                             info)
[08:28:09.658]                         }
[08:28:09.658]                         else {
[08:28:09.658]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.658]                             info, version)
[08:28:09.658]                         }
[08:28:09.658]                         base::stop(msg)
[08:28:09.658]                       }
[08:28:09.658]                     })
[08:28:09.658]                   }
[08:28:09.658]                   ...future.strategy.old <- future::plan("list")
[08:28:09.658]                   options(future.plan = NULL)
[08:28:09.658]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.658]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.658]                 }
[08:28:09.658]                 ...future.workdir <- getwd()
[08:28:09.658]             }
[08:28:09.658]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.658]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.658]         }
[08:28:09.658]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.658]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.658]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.658]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.658]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.658]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.658]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.658]             base::names(...future.oldOptions))
[08:28:09.658]     }
[08:28:09.658]     if (FALSE) {
[08:28:09.658]     }
[08:28:09.658]     else {
[08:28:09.658]         if (TRUE) {
[08:28:09.658]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.658]                 open = "w")
[08:28:09.658]         }
[08:28:09.658]         else {
[08:28:09.658]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.658]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.658]         }
[08:28:09.658]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.658]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.658]             base::sink(type = "output", split = FALSE)
[08:28:09.658]             base::close(...future.stdout)
[08:28:09.658]         }, add = TRUE)
[08:28:09.658]     }
[08:28:09.658]     ...future.frame <- base::sys.nframe()
[08:28:09.658]     ...future.conditions <- base::list()
[08:28:09.658]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.658]     if (FALSE) {
[08:28:09.658]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.658]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.658]     }
[08:28:09.658]     ...future.result <- base::tryCatch({
[08:28:09.658]         base::withCallingHandlers({
[08:28:09.658]             ...future.value <- base::withVisible(base::local({
[08:28:09.658]                 x$a <- 1
[08:28:09.658]                 x
[08:28:09.658]             }))
[08:28:09.658]             future::FutureResult(value = ...future.value$value, 
[08:28:09.658]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.658]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.658]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.658]                     ...future.globalenv.names))
[08:28:09.658]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.658]         }, condition = base::local({
[08:28:09.658]             c <- base::c
[08:28:09.658]             inherits <- base::inherits
[08:28:09.658]             invokeRestart <- base::invokeRestart
[08:28:09.658]             length <- base::length
[08:28:09.658]             list <- base::list
[08:28:09.658]             seq.int <- base::seq.int
[08:28:09.658]             signalCondition <- base::signalCondition
[08:28:09.658]             sys.calls <- base::sys.calls
[08:28:09.658]             `[[` <- base::`[[`
[08:28:09.658]             `+` <- base::`+`
[08:28:09.658]             `<<-` <- base::`<<-`
[08:28:09.658]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.658]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.658]                   3L)]
[08:28:09.658]             }
[08:28:09.658]             function(cond) {
[08:28:09.658]                 is_error <- inherits(cond, "error")
[08:28:09.658]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.658]                   NULL)
[08:28:09.658]                 if (is_error) {
[08:28:09.658]                   sessionInformation <- function() {
[08:28:09.658]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.658]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.658]                       search = base::search(), system = base::Sys.info())
[08:28:09.658]                   }
[08:28:09.658]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.658]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.658]                     cond$call), session = sessionInformation(), 
[08:28:09.658]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.658]                   signalCondition(cond)
[08:28:09.658]                 }
[08:28:09.658]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.658]                 "immediateCondition"))) {
[08:28:09.658]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.658]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.658]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.658]                   if (TRUE && !signal) {
[08:28:09.658]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.658]                     {
[08:28:09.658]                       inherits <- base::inherits
[08:28:09.658]                       invokeRestart <- base::invokeRestart
[08:28:09.658]                       is.null <- base::is.null
[08:28:09.658]                       muffled <- FALSE
[08:28:09.658]                       if (inherits(cond, "message")) {
[08:28:09.658]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.658]                         if (muffled) 
[08:28:09.658]                           invokeRestart("muffleMessage")
[08:28:09.658]                       }
[08:28:09.658]                       else if (inherits(cond, "warning")) {
[08:28:09.658]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.658]                         if (muffled) 
[08:28:09.658]                           invokeRestart("muffleWarning")
[08:28:09.658]                       }
[08:28:09.658]                       else if (inherits(cond, "condition")) {
[08:28:09.658]                         if (!is.null(pattern)) {
[08:28:09.658]                           computeRestarts <- base::computeRestarts
[08:28:09.658]                           grepl <- base::grepl
[08:28:09.658]                           restarts <- computeRestarts(cond)
[08:28:09.658]                           for (restart in restarts) {
[08:28:09.658]                             name <- restart$name
[08:28:09.658]                             if (is.null(name)) 
[08:28:09.658]                               next
[08:28:09.658]                             if (!grepl(pattern, name)) 
[08:28:09.658]                               next
[08:28:09.658]                             invokeRestart(restart)
[08:28:09.658]                             muffled <- TRUE
[08:28:09.658]                             break
[08:28:09.658]                           }
[08:28:09.658]                         }
[08:28:09.658]                       }
[08:28:09.658]                       invisible(muffled)
[08:28:09.658]                     }
[08:28:09.658]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.658]                   }
[08:28:09.658]                 }
[08:28:09.658]                 else {
[08:28:09.658]                   if (TRUE) {
[08:28:09.658]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.658]                     {
[08:28:09.658]                       inherits <- base::inherits
[08:28:09.658]                       invokeRestart <- base::invokeRestart
[08:28:09.658]                       is.null <- base::is.null
[08:28:09.658]                       muffled <- FALSE
[08:28:09.658]                       if (inherits(cond, "message")) {
[08:28:09.658]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.658]                         if (muffled) 
[08:28:09.658]                           invokeRestart("muffleMessage")
[08:28:09.658]                       }
[08:28:09.658]                       else if (inherits(cond, "warning")) {
[08:28:09.658]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.658]                         if (muffled) 
[08:28:09.658]                           invokeRestart("muffleWarning")
[08:28:09.658]                       }
[08:28:09.658]                       else if (inherits(cond, "condition")) {
[08:28:09.658]                         if (!is.null(pattern)) {
[08:28:09.658]                           computeRestarts <- base::computeRestarts
[08:28:09.658]                           grepl <- base::grepl
[08:28:09.658]                           restarts <- computeRestarts(cond)
[08:28:09.658]                           for (restart in restarts) {
[08:28:09.658]                             name <- restart$name
[08:28:09.658]                             if (is.null(name)) 
[08:28:09.658]                               next
[08:28:09.658]                             if (!grepl(pattern, name)) 
[08:28:09.658]                               next
[08:28:09.658]                             invokeRestart(restart)
[08:28:09.658]                             muffled <- TRUE
[08:28:09.658]                             break
[08:28:09.658]                           }
[08:28:09.658]                         }
[08:28:09.658]                       }
[08:28:09.658]                       invisible(muffled)
[08:28:09.658]                     }
[08:28:09.658]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.658]                   }
[08:28:09.658]                 }
[08:28:09.658]             }
[08:28:09.658]         }))
[08:28:09.658]     }, error = function(ex) {
[08:28:09.658]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.658]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.658]                 ...future.rng), started = ...future.startTime, 
[08:28:09.658]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.658]             version = "1.8"), class = "FutureResult")
[08:28:09.658]     }, finally = {
[08:28:09.658]         if (!identical(...future.workdir, getwd())) 
[08:28:09.658]             setwd(...future.workdir)
[08:28:09.658]         {
[08:28:09.658]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.658]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.658]             }
[08:28:09.658]             base::options(...future.oldOptions)
[08:28:09.658]             if (.Platform$OS.type == "windows") {
[08:28:09.658]                 old_names <- names(...future.oldEnvVars)
[08:28:09.658]                 envs <- base::Sys.getenv()
[08:28:09.658]                 names <- names(envs)
[08:28:09.658]                 common <- intersect(names, old_names)
[08:28:09.658]                 added <- setdiff(names, old_names)
[08:28:09.658]                 removed <- setdiff(old_names, names)
[08:28:09.658]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.658]                   envs[common]]
[08:28:09.658]                 NAMES <- toupper(changed)
[08:28:09.658]                 args <- list()
[08:28:09.658]                 for (kk in seq_along(NAMES)) {
[08:28:09.658]                   name <- changed[[kk]]
[08:28:09.658]                   NAME <- NAMES[[kk]]
[08:28:09.658]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.658]                     next
[08:28:09.658]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.658]                 }
[08:28:09.658]                 NAMES <- toupper(added)
[08:28:09.658]                 for (kk in seq_along(NAMES)) {
[08:28:09.658]                   name <- added[[kk]]
[08:28:09.658]                   NAME <- NAMES[[kk]]
[08:28:09.658]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.658]                     next
[08:28:09.658]                   args[[name]] <- ""
[08:28:09.658]                 }
[08:28:09.658]                 NAMES <- toupper(removed)
[08:28:09.658]                 for (kk in seq_along(NAMES)) {
[08:28:09.658]                   name <- removed[[kk]]
[08:28:09.658]                   NAME <- NAMES[[kk]]
[08:28:09.658]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.658]                     next
[08:28:09.658]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.658]                 }
[08:28:09.658]                 if (length(args) > 0) 
[08:28:09.658]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.658]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.658]             }
[08:28:09.658]             else {
[08:28:09.658]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.658]             }
[08:28:09.658]             {
[08:28:09.658]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.658]                   0L) {
[08:28:09.658]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.658]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.658]                   base::options(opts)
[08:28:09.658]                 }
[08:28:09.658]                 {
[08:28:09.658]                   {
[08:28:09.658]                     NULL
[08:28:09.658]                     RNGkind("Mersenne-Twister")
[08:28:09.658]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.658]                       inherits = FALSE)
[08:28:09.658]                   }
[08:28:09.658]                   options(future.plan = NULL)
[08:28:09.658]                   if (is.na(NA_character_)) 
[08:28:09.658]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.658]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.658]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.658]                     .init = FALSE)
[08:28:09.658]                 }
[08:28:09.658]             }
[08:28:09.658]         }
[08:28:09.658]     })
[08:28:09.658]     if (TRUE) {
[08:28:09.658]         base::sink(type = "output", split = FALSE)
[08:28:09.658]         if (TRUE) {
[08:28:09.658]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.658]         }
[08:28:09.658]         else {
[08:28:09.658]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.658]         }
[08:28:09.658]         base::close(...future.stdout)
[08:28:09.658]         ...future.stdout <- NULL
[08:28:09.658]     }
[08:28:09.658]     ...future.result$conditions <- ...future.conditions
[08:28:09.658]     ...future.result$finished <- base::Sys.time()
[08:28:09.658]     ...future.result
[08:28:09.658] }
[08:28:09.659] assign_globals() ...
[08:28:09.660] List of 1
[08:28:09.660]  $ x: list()
[08:28:09.660]  - attr(*, "where")=List of 1
[08:28:09.660]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.660]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.660]  - attr(*, "resolved")= logi TRUE
[08:28:09.660]  - attr(*, "total_size")= num 31
[08:28:09.660]  - attr(*, "already-done")= logi TRUE
[08:28:09.662] - copied ‘x’ to environment
[08:28:09.662] assign_globals() ... done
[08:28:09.662] plan(): Setting new future strategy stack:
[08:28:09.662] List of future strategies:
[08:28:09.662] 1. sequential:
[08:28:09.662]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.662]    - tweaked: FALSE
[08:28:09.662]    - call: NULL
[08:28:09.663] plan(): nbrOfWorkers() = 1
[08:28:09.663] plan(): Setting new future strategy stack:
[08:28:09.663] List of future strategies:
[08:28:09.663] 1. sequential:
[08:28:09.663]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.663]    - tweaked: FALSE
[08:28:09.663]    - call: plan(strategy)
[08:28:09.664] plan(): nbrOfWorkers() = 1
[08:28:09.664] SequentialFuture started (and completed)
[08:28:09.664] - Launch lazy future ... done
[08:28:09.664] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.665] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.665] Searching for globals...
[08:28:09.667] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.667] Searching for globals ... DONE
[08:28:09.667] Resolving globals: TRUE
[08:28:09.668] Resolving any globals that are futures ...
[08:28:09.668] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.668] Resolving any globals that are futures ... DONE
[08:28:09.668] Resolving futures part of globals (recursively) ...
[08:28:09.668] resolve() on list ...
[08:28:09.668]  recursive: 99
[08:28:09.668]  length: 1
[08:28:09.668]  elements: ‘x’
[08:28:09.669]  length: 0 (resolved future 1)
[08:28:09.669] resolve() on list ... DONE
[08:28:09.669] - globals: [1] ‘x’
[08:28:09.669] Resolving futures part of globals (recursively) ... DONE
[08:28:09.669] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.669] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.671] - globals: [1] ‘x’
[08:28:09.671] 
[08:28:09.671] getGlobalsAndPackages() ... DONE
[08:28:09.671] run() for ‘Future’ ...
[08:28:09.672] - state: ‘created’
[08:28:09.672] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.672] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.672] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.672]   - Field: ‘label’
[08:28:09.672]   - Field: ‘local’
[08:28:09.672]   - Field: ‘owner’
[08:28:09.672]   - Field: ‘envir’
[08:28:09.672]   - Field: ‘packages’
[08:28:09.672]   - Field: ‘gc’
[08:28:09.673]   - Field: ‘conditions’
[08:28:09.673]   - Field: ‘expr’
[08:28:09.673]   - Field: ‘uuid’
[08:28:09.673]   - Field: ‘seed’
[08:28:09.673]   - Field: ‘version’
[08:28:09.673]   - Field: ‘result’
[08:28:09.673]   - Field: ‘asynchronous’
[08:28:09.673]   - Field: ‘calls’
[08:28:09.673]   - Field: ‘globals’
[08:28:09.673]   - Field: ‘stdout’
[08:28:09.673]   - Field: ‘earlySignal’
[08:28:09.673]   - Field: ‘lazy’
[08:28:09.674]   - Field: ‘state’
[08:28:09.674] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.674] - Launch lazy future ...
[08:28:09.674] Packages needed by the future expression (n = 0): <none>
[08:28:09.674] Packages needed by future strategies (n = 0): <none>
[08:28:09.674] {
[08:28:09.674]     {
[08:28:09.674]         {
[08:28:09.674]             ...future.startTime <- base::Sys.time()
[08:28:09.674]             {
[08:28:09.674]                 {
[08:28:09.674]                   {
[08:28:09.674]                     base::local({
[08:28:09.674]                       has_future <- base::requireNamespace("future", 
[08:28:09.674]                         quietly = TRUE)
[08:28:09.674]                       if (has_future) {
[08:28:09.674]                         ns <- base::getNamespace("future")
[08:28:09.674]                         version <- ns[[".package"]][["version"]]
[08:28:09.674]                         if (is.null(version)) 
[08:28:09.674]                           version <- utils::packageVersion("future")
[08:28:09.674]                       }
[08:28:09.674]                       else {
[08:28:09.674]                         version <- NULL
[08:28:09.674]                       }
[08:28:09.674]                       if (!has_future || version < "1.8.0") {
[08:28:09.674]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.674]                           "", base::R.version$version.string), 
[08:28:09.674]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.674]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.674]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.674]                             "release", "version")], collapse = " "), 
[08:28:09.674]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.674]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.674]                           info)
[08:28:09.674]                         info <- base::paste(info, collapse = "; ")
[08:28:09.674]                         if (!has_future) {
[08:28:09.674]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.674]                             info)
[08:28:09.674]                         }
[08:28:09.674]                         else {
[08:28:09.674]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.674]                             info, version)
[08:28:09.674]                         }
[08:28:09.674]                         base::stop(msg)
[08:28:09.674]                       }
[08:28:09.674]                     })
[08:28:09.674]                   }
[08:28:09.674]                   ...future.strategy.old <- future::plan("list")
[08:28:09.674]                   options(future.plan = NULL)
[08:28:09.674]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.674]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.674]                 }
[08:28:09.674]                 ...future.workdir <- getwd()
[08:28:09.674]             }
[08:28:09.674]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.674]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.674]         }
[08:28:09.674]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.674]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.674]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.674]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.674]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.674]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.674]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.674]             base::names(...future.oldOptions))
[08:28:09.674]     }
[08:28:09.674]     if (FALSE) {
[08:28:09.674]     }
[08:28:09.674]     else {
[08:28:09.674]         if (TRUE) {
[08:28:09.674]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.674]                 open = "w")
[08:28:09.674]         }
[08:28:09.674]         else {
[08:28:09.674]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.674]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.674]         }
[08:28:09.674]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.674]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.674]             base::sink(type = "output", split = FALSE)
[08:28:09.674]             base::close(...future.stdout)
[08:28:09.674]         }, add = TRUE)
[08:28:09.674]     }
[08:28:09.674]     ...future.frame <- base::sys.nframe()
[08:28:09.674]     ...future.conditions <- base::list()
[08:28:09.674]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.674]     if (FALSE) {
[08:28:09.674]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.674]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.674]     }
[08:28:09.674]     ...future.result <- base::tryCatch({
[08:28:09.674]         base::withCallingHandlers({
[08:28:09.674]             ...future.value <- base::withVisible(base::local({
[08:28:09.674]                 x$a <- 1
[08:28:09.674]                 x
[08:28:09.674]             }))
[08:28:09.674]             future::FutureResult(value = ...future.value$value, 
[08:28:09.674]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.674]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.674]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.674]                     ...future.globalenv.names))
[08:28:09.674]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.674]         }, condition = base::local({
[08:28:09.674]             c <- base::c
[08:28:09.674]             inherits <- base::inherits
[08:28:09.674]             invokeRestart <- base::invokeRestart
[08:28:09.674]             length <- base::length
[08:28:09.674]             list <- base::list
[08:28:09.674]             seq.int <- base::seq.int
[08:28:09.674]             signalCondition <- base::signalCondition
[08:28:09.674]             sys.calls <- base::sys.calls
[08:28:09.674]             `[[` <- base::`[[`
[08:28:09.674]             `+` <- base::`+`
[08:28:09.674]             `<<-` <- base::`<<-`
[08:28:09.674]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.674]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.674]                   3L)]
[08:28:09.674]             }
[08:28:09.674]             function(cond) {
[08:28:09.674]                 is_error <- inherits(cond, "error")
[08:28:09.674]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.674]                   NULL)
[08:28:09.674]                 if (is_error) {
[08:28:09.674]                   sessionInformation <- function() {
[08:28:09.674]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.674]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.674]                       search = base::search(), system = base::Sys.info())
[08:28:09.674]                   }
[08:28:09.674]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.674]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.674]                     cond$call), session = sessionInformation(), 
[08:28:09.674]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.674]                   signalCondition(cond)
[08:28:09.674]                 }
[08:28:09.674]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.674]                 "immediateCondition"))) {
[08:28:09.674]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.674]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.674]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.674]                   if (TRUE && !signal) {
[08:28:09.674]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.674]                     {
[08:28:09.674]                       inherits <- base::inherits
[08:28:09.674]                       invokeRestart <- base::invokeRestart
[08:28:09.674]                       is.null <- base::is.null
[08:28:09.674]                       muffled <- FALSE
[08:28:09.674]                       if (inherits(cond, "message")) {
[08:28:09.674]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.674]                         if (muffled) 
[08:28:09.674]                           invokeRestart("muffleMessage")
[08:28:09.674]                       }
[08:28:09.674]                       else if (inherits(cond, "warning")) {
[08:28:09.674]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.674]                         if (muffled) 
[08:28:09.674]                           invokeRestart("muffleWarning")
[08:28:09.674]                       }
[08:28:09.674]                       else if (inherits(cond, "condition")) {
[08:28:09.674]                         if (!is.null(pattern)) {
[08:28:09.674]                           computeRestarts <- base::computeRestarts
[08:28:09.674]                           grepl <- base::grepl
[08:28:09.674]                           restarts <- computeRestarts(cond)
[08:28:09.674]                           for (restart in restarts) {
[08:28:09.674]                             name <- restart$name
[08:28:09.674]                             if (is.null(name)) 
[08:28:09.674]                               next
[08:28:09.674]                             if (!grepl(pattern, name)) 
[08:28:09.674]                               next
[08:28:09.674]                             invokeRestart(restart)
[08:28:09.674]                             muffled <- TRUE
[08:28:09.674]                             break
[08:28:09.674]                           }
[08:28:09.674]                         }
[08:28:09.674]                       }
[08:28:09.674]                       invisible(muffled)
[08:28:09.674]                     }
[08:28:09.674]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.674]                   }
[08:28:09.674]                 }
[08:28:09.674]                 else {
[08:28:09.674]                   if (TRUE) {
[08:28:09.674]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.674]                     {
[08:28:09.674]                       inherits <- base::inherits
[08:28:09.674]                       invokeRestart <- base::invokeRestart
[08:28:09.674]                       is.null <- base::is.null
[08:28:09.674]                       muffled <- FALSE
[08:28:09.674]                       if (inherits(cond, "message")) {
[08:28:09.674]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.674]                         if (muffled) 
[08:28:09.674]                           invokeRestart("muffleMessage")
[08:28:09.674]                       }
[08:28:09.674]                       else if (inherits(cond, "warning")) {
[08:28:09.674]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.674]                         if (muffled) 
[08:28:09.674]                           invokeRestart("muffleWarning")
[08:28:09.674]                       }
[08:28:09.674]                       else if (inherits(cond, "condition")) {
[08:28:09.674]                         if (!is.null(pattern)) {
[08:28:09.674]                           computeRestarts <- base::computeRestarts
[08:28:09.674]                           grepl <- base::grepl
[08:28:09.674]                           restarts <- computeRestarts(cond)
[08:28:09.674]                           for (restart in restarts) {
[08:28:09.674]                             name <- restart$name
[08:28:09.674]                             if (is.null(name)) 
[08:28:09.674]                               next
[08:28:09.674]                             if (!grepl(pattern, name)) 
[08:28:09.674]                               next
[08:28:09.674]                             invokeRestart(restart)
[08:28:09.674]                             muffled <- TRUE
[08:28:09.674]                             break
[08:28:09.674]                           }
[08:28:09.674]                         }
[08:28:09.674]                       }
[08:28:09.674]                       invisible(muffled)
[08:28:09.674]                     }
[08:28:09.674]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.674]                   }
[08:28:09.674]                 }
[08:28:09.674]             }
[08:28:09.674]         }))
[08:28:09.674]     }, error = function(ex) {
[08:28:09.674]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.674]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.674]                 ...future.rng), started = ...future.startTime, 
[08:28:09.674]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.674]             version = "1.8"), class = "FutureResult")
[08:28:09.674]     }, finally = {
[08:28:09.674]         if (!identical(...future.workdir, getwd())) 
[08:28:09.674]             setwd(...future.workdir)
[08:28:09.674]         {
[08:28:09.674]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.674]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.674]             }
[08:28:09.674]             base::options(...future.oldOptions)
[08:28:09.674]             if (.Platform$OS.type == "windows") {
[08:28:09.674]                 old_names <- names(...future.oldEnvVars)
[08:28:09.674]                 envs <- base::Sys.getenv()
[08:28:09.674]                 names <- names(envs)
[08:28:09.674]                 common <- intersect(names, old_names)
[08:28:09.674]                 added <- setdiff(names, old_names)
[08:28:09.674]                 removed <- setdiff(old_names, names)
[08:28:09.674]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.674]                   envs[common]]
[08:28:09.674]                 NAMES <- toupper(changed)
[08:28:09.674]                 args <- list()
[08:28:09.674]                 for (kk in seq_along(NAMES)) {
[08:28:09.674]                   name <- changed[[kk]]
[08:28:09.674]                   NAME <- NAMES[[kk]]
[08:28:09.674]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.674]                     next
[08:28:09.674]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.674]                 }
[08:28:09.674]                 NAMES <- toupper(added)
[08:28:09.674]                 for (kk in seq_along(NAMES)) {
[08:28:09.674]                   name <- added[[kk]]
[08:28:09.674]                   NAME <- NAMES[[kk]]
[08:28:09.674]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.674]                     next
[08:28:09.674]                   args[[name]] <- ""
[08:28:09.674]                 }
[08:28:09.674]                 NAMES <- toupper(removed)
[08:28:09.674]                 for (kk in seq_along(NAMES)) {
[08:28:09.674]                   name <- removed[[kk]]
[08:28:09.674]                   NAME <- NAMES[[kk]]
[08:28:09.674]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.674]                     next
[08:28:09.674]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.674]                 }
[08:28:09.674]                 if (length(args) > 0) 
[08:28:09.674]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.674]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.674]             }
[08:28:09.674]             else {
[08:28:09.674]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.674]             }
[08:28:09.674]             {
[08:28:09.674]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.674]                   0L) {
[08:28:09.674]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.674]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.674]                   base::options(opts)
[08:28:09.674]                 }
[08:28:09.674]                 {
[08:28:09.674]                   {
[08:28:09.674]                     NULL
[08:28:09.674]                     RNGkind("Mersenne-Twister")
[08:28:09.674]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.674]                       inherits = FALSE)
[08:28:09.674]                   }
[08:28:09.674]                   options(future.plan = NULL)
[08:28:09.674]                   if (is.na(NA_character_)) 
[08:28:09.674]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.674]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.674]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.674]                     .init = FALSE)
[08:28:09.674]                 }
[08:28:09.674]             }
[08:28:09.674]         }
[08:28:09.674]     })
[08:28:09.674]     if (TRUE) {
[08:28:09.674]         base::sink(type = "output", split = FALSE)
[08:28:09.674]         if (TRUE) {
[08:28:09.674]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.674]         }
[08:28:09.674]         else {
[08:28:09.674]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.674]         }
[08:28:09.674]         base::close(...future.stdout)
[08:28:09.674]         ...future.stdout <- NULL
[08:28:09.674]     }
[08:28:09.674]     ...future.result$conditions <- ...future.conditions
[08:28:09.674]     ...future.result$finished <- base::Sys.time()
[08:28:09.674]     ...future.result
[08:28:09.674] }
[08:28:09.676] assign_globals() ...
[08:28:09.676] List of 1
[08:28:09.676]  $ x: list()
[08:28:09.676]  - attr(*, "where")=List of 1
[08:28:09.676]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.676]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.676]  - attr(*, "resolved")= logi TRUE
[08:28:09.676]  - attr(*, "total_size")= num 31
[08:28:09.676]  - attr(*, "already-done")= logi TRUE
[08:28:09.678] - copied ‘x’ to environment
[08:28:09.678] assign_globals() ... done
[08:28:09.679] plan(): Setting new future strategy stack:
[08:28:09.679] List of future strategies:
[08:28:09.679] 1. sequential:
[08:28:09.679]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.679]    - tweaked: FALSE
[08:28:09.679]    - call: NULL
[08:28:09.679] plan(): nbrOfWorkers() = 1
[08:28:09.680] plan(): Setting new future strategy stack:
[08:28:09.680] List of future strategies:
[08:28:09.680] 1. sequential:
[08:28:09.680]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.680]    - tweaked: FALSE
[08:28:09.680]    - call: plan(strategy)
[08:28:09.680] plan(): nbrOfWorkers() = 1
[08:28:09.680] SequentialFuture started (and completed)
[08:28:09.681] - Launch lazy future ... done
[08:28:09.681] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.681] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.681] Searching for globals...
[08:28:09.683] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.683] Searching for globals ... DONE
[08:28:09.683] Resolving globals: TRUE
[08:28:09.683] Resolving any globals that are futures ...
[08:28:09.684] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.684] Resolving any globals that are futures ... DONE
[08:28:09.684] Resolving futures part of globals (recursively) ...
[08:28:09.684] resolve() on list ...
[08:28:09.684]  recursive: 99
[08:28:09.684]  length: 1
[08:28:09.684]  elements: ‘x’
[08:28:09.684]  length: 0 (resolved future 1)
[08:28:09.685] resolve() on list ... DONE
[08:28:09.685] - globals: [1] ‘x’
[08:28:09.685] Resolving futures part of globals (recursively) ... DONE
[08:28:09.685] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.685] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.685] - globals: [1] ‘x’
[08:28:09.685] 
[08:28:09.685] getGlobalsAndPackages() ... DONE
[08:28:09.686] run() for ‘Future’ ...
[08:28:09.686] - state: ‘created’
[08:28:09.686] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.686] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.686] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.686]   - Field: ‘label’
[08:28:09.686]   - Field: ‘local’
[08:28:09.687]   - Field: ‘owner’
[08:28:09.687]   - Field: ‘envir’
[08:28:09.687]   - Field: ‘packages’
[08:28:09.687]   - Field: ‘gc’
[08:28:09.687]   - Field: ‘conditions’
[08:28:09.687]   - Field: ‘expr’
[08:28:09.687]   - Field: ‘uuid’
[08:28:09.687]   - Field: ‘seed’
[08:28:09.687]   - Field: ‘version’
[08:28:09.687]   - Field: ‘result’
[08:28:09.687]   - Field: ‘asynchronous’
[08:28:09.688]   - Field: ‘calls’
[08:28:09.688]   - Field: ‘globals’
[08:28:09.688]   - Field: ‘stdout’
[08:28:09.688]   - Field: ‘earlySignal’
[08:28:09.688]   - Field: ‘lazy’
[08:28:09.688]   - Field: ‘state’
[08:28:09.688] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.688] - Launch lazy future ...
[08:28:09.688] Packages needed by the future expression (n = 0): <none>
[08:28:09.688] Packages needed by future strategies (n = 0): <none>
[08:28:09.689] {
[08:28:09.689]     {
[08:28:09.689]         {
[08:28:09.689]             ...future.startTime <- base::Sys.time()
[08:28:09.689]             {
[08:28:09.689]                 {
[08:28:09.689]                   {
[08:28:09.689]                     base::local({
[08:28:09.689]                       has_future <- base::requireNamespace("future", 
[08:28:09.689]                         quietly = TRUE)
[08:28:09.689]                       if (has_future) {
[08:28:09.689]                         ns <- base::getNamespace("future")
[08:28:09.689]                         version <- ns[[".package"]][["version"]]
[08:28:09.689]                         if (is.null(version)) 
[08:28:09.689]                           version <- utils::packageVersion("future")
[08:28:09.689]                       }
[08:28:09.689]                       else {
[08:28:09.689]                         version <- NULL
[08:28:09.689]                       }
[08:28:09.689]                       if (!has_future || version < "1.8.0") {
[08:28:09.689]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.689]                           "", base::R.version$version.string), 
[08:28:09.689]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.689]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.689]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.689]                             "release", "version")], collapse = " "), 
[08:28:09.689]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.689]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.689]                           info)
[08:28:09.689]                         info <- base::paste(info, collapse = "; ")
[08:28:09.689]                         if (!has_future) {
[08:28:09.689]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.689]                             info)
[08:28:09.689]                         }
[08:28:09.689]                         else {
[08:28:09.689]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.689]                             info, version)
[08:28:09.689]                         }
[08:28:09.689]                         base::stop(msg)
[08:28:09.689]                       }
[08:28:09.689]                     })
[08:28:09.689]                   }
[08:28:09.689]                   ...future.strategy.old <- future::plan("list")
[08:28:09.689]                   options(future.plan = NULL)
[08:28:09.689]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.689]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.689]                 }
[08:28:09.689]                 ...future.workdir <- getwd()
[08:28:09.689]             }
[08:28:09.689]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.689]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.689]         }
[08:28:09.689]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.689]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.689]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.689]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.689]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.689]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.689]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.689]             base::names(...future.oldOptions))
[08:28:09.689]     }
[08:28:09.689]     if (FALSE) {
[08:28:09.689]     }
[08:28:09.689]     else {
[08:28:09.689]         if (TRUE) {
[08:28:09.689]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.689]                 open = "w")
[08:28:09.689]         }
[08:28:09.689]         else {
[08:28:09.689]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.689]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.689]         }
[08:28:09.689]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.689]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.689]             base::sink(type = "output", split = FALSE)
[08:28:09.689]             base::close(...future.stdout)
[08:28:09.689]         }, add = TRUE)
[08:28:09.689]     }
[08:28:09.689]     ...future.frame <- base::sys.nframe()
[08:28:09.689]     ...future.conditions <- base::list()
[08:28:09.689]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.689]     if (FALSE) {
[08:28:09.689]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.689]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.689]     }
[08:28:09.689]     ...future.result <- base::tryCatch({
[08:28:09.689]         base::withCallingHandlers({
[08:28:09.689]             ...future.value <- base::withVisible(base::local({
[08:28:09.689]                 x$a <- 1
[08:28:09.689]                 x
[08:28:09.689]             }))
[08:28:09.689]             future::FutureResult(value = ...future.value$value, 
[08:28:09.689]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.689]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.689]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.689]                     ...future.globalenv.names))
[08:28:09.689]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.689]         }, condition = base::local({
[08:28:09.689]             c <- base::c
[08:28:09.689]             inherits <- base::inherits
[08:28:09.689]             invokeRestart <- base::invokeRestart
[08:28:09.689]             length <- base::length
[08:28:09.689]             list <- base::list
[08:28:09.689]             seq.int <- base::seq.int
[08:28:09.689]             signalCondition <- base::signalCondition
[08:28:09.689]             sys.calls <- base::sys.calls
[08:28:09.689]             `[[` <- base::`[[`
[08:28:09.689]             `+` <- base::`+`
[08:28:09.689]             `<<-` <- base::`<<-`
[08:28:09.689]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.689]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.689]                   3L)]
[08:28:09.689]             }
[08:28:09.689]             function(cond) {
[08:28:09.689]                 is_error <- inherits(cond, "error")
[08:28:09.689]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.689]                   NULL)
[08:28:09.689]                 if (is_error) {
[08:28:09.689]                   sessionInformation <- function() {
[08:28:09.689]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.689]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.689]                       search = base::search(), system = base::Sys.info())
[08:28:09.689]                   }
[08:28:09.689]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.689]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.689]                     cond$call), session = sessionInformation(), 
[08:28:09.689]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.689]                   signalCondition(cond)
[08:28:09.689]                 }
[08:28:09.689]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.689]                 "immediateCondition"))) {
[08:28:09.689]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.689]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.689]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.689]                   if (TRUE && !signal) {
[08:28:09.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.689]                     {
[08:28:09.689]                       inherits <- base::inherits
[08:28:09.689]                       invokeRestart <- base::invokeRestart
[08:28:09.689]                       is.null <- base::is.null
[08:28:09.689]                       muffled <- FALSE
[08:28:09.689]                       if (inherits(cond, "message")) {
[08:28:09.689]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.689]                         if (muffled) 
[08:28:09.689]                           invokeRestart("muffleMessage")
[08:28:09.689]                       }
[08:28:09.689]                       else if (inherits(cond, "warning")) {
[08:28:09.689]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.689]                         if (muffled) 
[08:28:09.689]                           invokeRestart("muffleWarning")
[08:28:09.689]                       }
[08:28:09.689]                       else if (inherits(cond, "condition")) {
[08:28:09.689]                         if (!is.null(pattern)) {
[08:28:09.689]                           computeRestarts <- base::computeRestarts
[08:28:09.689]                           grepl <- base::grepl
[08:28:09.689]                           restarts <- computeRestarts(cond)
[08:28:09.689]                           for (restart in restarts) {
[08:28:09.689]                             name <- restart$name
[08:28:09.689]                             if (is.null(name)) 
[08:28:09.689]                               next
[08:28:09.689]                             if (!grepl(pattern, name)) 
[08:28:09.689]                               next
[08:28:09.689]                             invokeRestart(restart)
[08:28:09.689]                             muffled <- TRUE
[08:28:09.689]                             break
[08:28:09.689]                           }
[08:28:09.689]                         }
[08:28:09.689]                       }
[08:28:09.689]                       invisible(muffled)
[08:28:09.689]                     }
[08:28:09.689]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.689]                   }
[08:28:09.689]                 }
[08:28:09.689]                 else {
[08:28:09.689]                   if (TRUE) {
[08:28:09.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.689]                     {
[08:28:09.689]                       inherits <- base::inherits
[08:28:09.689]                       invokeRestart <- base::invokeRestart
[08:28:09.689]                       is.null <- base::is.null
[08:28:09.689]                       muffled <- FALSE
[08:28:09.689]                       if (inherits(cond, "message")) {
[08:28:09.689]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.689]                         if (muffled) 
[08:28:09.689]                           invokeRestart("muffleMessage")
[08:28:09.689]                       }
[08:28:09.689]                       else if (inherits(cond, "warning")) {
[08:28:09.689]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.689]                         if (muffled) 
[08:28:09.689]                           invokeRestart("muffleWarning")
[08:28:09.689]                       }
[08:28:09.689]                       else if (inherits(cond, "condition")) {
[08:28:09.689]                         if (!is.null(pattern)) {
[08:28:09.689]                           computeRestarts <- base::computeRestarts
[08:28:09.689]                           grepl <- base::grepl
[08:28:09.689]                           restarts <- computeRestarts(cond)
[08:28:09.689]                           for (restart in restarts) {
[08:28:09.689]                             name <- restart$name
[08:28:09.689]                             if (is.null(name)) 
[08:28:09.689]                               next
[08:28:09.689]                             if (!grepl(pattern, name)) 
[08:28:09.689]                               next
[08:28:09.689]                             invokeRestart(restart)
[08:28:09.689]                             muffled <- TRUE
[08:28:09.689]                             break
[08:28:09.689]                           }
[08:28:09.689]                         }
[08:28:09.689]                       }
[08:28:09.689]                       invisible(muffled)
[08:28:09.689]                     }
[08:28:09.689]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.689]                   }
[08:28:09.689]                 }
[08:28:09.689]             }
[08:28:09.689]         }))
[08:28:09.689]     }, error = function(ex) {
[08:28:09.689]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.689]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.689]                 ...future.rng), started = ...future.startTime, 
[08:28:09.689]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.689]             version = "1.8"), class = "FutureResult")
[08:28:09.689]     }, finally = {
[08:28:09.689]         if (!identical(...future.workdir, getwd())) 
[08:28:09.689]             setwd(...future.workdir)
[08:28:09.689]         {
[08:28:09.689]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.689]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.689]             }
[08:28:09.689]             base::options(...future.oldOptions)
[08:28:09.689]             if (.Platform$OS.type == "windows") {
[08:28:09.689]                 old_names <- names(...future.oldEnvVars)
[08:28:09.689]                 envs <- base::Sys.getenv()
[08:28:09.689]                 names <- names(envs)
[08:28:09.689]                 common <- intersect(names, old_names)
[08:28:09.689]                 added <- setdiff(names, old_names)
[08:28:09.689]                 removed <- setdiff(old_names, names)
[08:28:09.689]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.689]                   envs[common]]
[08:28:09.689]                 NAMES <- toupper(changed)
[08:28:09.689]                 args <- list()
[08:28:09.689]                 for (kk in seq_along(NAMES)) {
[08:28:09.689]                   name <- changed[[kk]]
[08:28:09.689]                   NAME <- NAMES[[kk]]
[08:28:09.689]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.689]                     next
[08:28:09.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.689]                 }
[08:28:09.689]                 NAMES <- toupper(added)
[08:28:09.689]                 for (kk in seq_along(NAMES)) {
[08:28:09.689]                   name <- added[[kk]]
[08:28:09.689]                   NAME <- NAMES[[kk]]
[08:28:09.689]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.689]                     next
[08:28:09.689]                   args[[name]] <- ""
[08:28:09.689]                 }
[08:28:09.689]                 NAMES <- toupper(removed)
[08:28:09.689]                 for (kk in seq_along(NAMES)) {
[08:28:09.689]                   name <- removed[[kk]]
[08:28:09.689]                   NAME <- NAMES[[kk]]
[08:28:09.689]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.689]                     next
[08:28:09.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.689]                 }
[08:28:09.689]                 if (length(args) > 0) 
[08:28:09.689]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.689]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.689]             }
[08:28:09.689]             else {
[08:28:09.689]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.689]             }
[08:28:09.689]             {
[08:28:09.689]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.689]                   0L) {
[08:28:09.689]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.689]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.689]                   base::options(opts)
[08:28:09.689]                 }
[08:28:09.689]                 {
[08:28:09.689]                   {
[08:28:09.689]                     NULL
[08:28:09.689]                     RNGkind("Mersenne-Twister")
[08:28:09.689]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.689]                       inherits = FALSE)
[08:28:09.689]                   }
[08:28:09.689]                   options(future.plan = NULL)
[08:28:09.689]                   if (is.na(NA_character_)) 
[08:28:09.689]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.689]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.689]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.689]                     .init = FALSE)
[08:28:09.689]                 }
[08:28:09.689]             }
[08:28:09.689]         }
[08:28:09.689]     })
[08:28:09.689]     if (TRUE) {
[08:28:09.689]         base::sink(type = "output", split = FALSE)
[08:28:09.689]         if (TRUE) {
[08:28:09.689]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.689]         }
[08:28:09.689]         else {
[08:28:09.689]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.689]         }
[08:28:09.689]         base::close(...future.stdout)
[08:28:09.689]         ...future.stdout <- NULL
[08:28:09.689]     }
[08:28:09.689]     ...future.result$conditions <- ...future.conditions
[08:28:09.689]     ...future.result$finished <- base::Sys.time()
[08:28:09.689]     ...future.result
[08:28:09.689] }
[08:28:09.690] assign_globals() ...
[08:28:09.690] List of 1
[08:28:09.690]  $ x: list()
[08:28:09.690]  - attr(*, "where")=List of 1
[08:28:09.690]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.690]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.690]  - attr(*, "resolved")= logi TRUE
[08:28:09.690]  - attr(*, "total_size")= num 31
[08:28:09.690]  - attr(*, "already-done")= logi TRUE
[08:28:09.693] - copied ‘x’ to environment
[08:28:09.693] assign_globals() ... done
[08:28:09.693] plan(): Setting new future strategy stack:
[08:28:09.693] List of future strategies:
[08:28:09.693] 1. sequential:
[08:28:09.693]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.693]    - tweaked: FALSE
[08:28:09.693]    - call: NULL
[08:28:09.694] plan(): nbrOfWorkers() = 1
[08:28:09.694] plan(): Setting new future strategy stack:
[08:28:09.694] List of future strategies:
[08:28:09.694] 1. sequential:
[08:28:09.694]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.694]    - tweaked: FALSE
[08:28:09.694]    - call: plan(strategy)
[08:28:09.695] plan(): nbrOfWorkers() = 1
[08:28:09.695] SequentialFuture started (and completed)
[08:28:09.695] - Launch lazy future ... done
[08:28:09.695] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.695] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.696] Searching for globals...
[08:28:09.699] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:28:09.699] Searching for globals ... DONE
[08:28:09.699] Resolving globals: TRUE
[08:28:09.700] Resolving any globals that are futures ...
[08:28:09.700] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:28:09.700] Resolving any globals that are futures ... DONE
[08:28:09.700] 
[08:28:09.700] 
[08:28:09.700] getGlobalsAndPackages() ... DONE
[08:28:09.700] run() for ‘Future’ ...
[08:28:09.700] - state: ‘created’
[08:28:09.701] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.701] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.701] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.701]   - Field: ‘label’
[08:28:09.701]   - Field: ‘local’
[08:28:09.701]   - Field: ‘owner’
[08:28:09.701]   - Field: ‘envir’
[08:28:09.701]   - Field: ‘packages’
[08:28:09.702]   - Field: ‘gc’
[08:28:09.702]   - Field: ‘conditions’
[08:28:09.702]   - Field: ‘expr’
[08:28:09.702]   - Field: ‘uuid’
[08:28:09.702]   - Field: ‘seed’
[08:28:09.702]   - Field: ‘version’
[08:28:09.702]   - Field: ‘result’
[08:28:09.702]   - Field: ‘asynchronous’
[08:28:09.702]   - Field: ‘calls’
[08:28:09.702]   - Field: ‘globals’
[08:28:09.702]   - Field: ‘stdout’
[08:28:09.702]   - Field: ‘earlySignal’
[08:28:09.702]   - Field: ‘lazy’
[08:28:09.703]   - Field: ‘state’
[08:28:09.703] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.703] - Launch lazy future ...
[08:28:09.703] Packages needed by the future expression (n = 0): <none>
[08:28:09.703] Packages needed by future strategies (n = 0): <none>
[08:28:09.703] {
[08:28:09.703]     {
[08:28:09.703]         {
[08:28:09.703]             ...future.startTime <- base::Sys.time()
[08:28:09.703]             {
[08:28:09.703]                 {
[08:28:09.703]                   {
[08:28:09.703]                     base::local({
[08:28:09.703]                       has_future <- base::requireNamespace("future", 
[08:28:09.703]                         quietly = TRUE)
[08:28:09.703]                       if (has_future) {
[08:28:09.703]                         ns <- base::getNamespace("future")
[08:28:09.703]                         version <- ns[[".package"]][["version"]]
[08:28:09.703]                         if (is.null(version)) 
[08:28:09.703]                           version <- utils::packageVersion("future")
[08:28:09.703]                       }
[08:28:09.703]                       else {
[08:28:09.703]                         version <- NULL
[08:28:09.703]                       }
[08:28:09.703]                       if (!has_future || version < "1.8.0") {
[08:28:09.703]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.703]                           "", base::R.version$version.string), 
[08:28:09.703]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.703]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.703]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.703]                             "release", "version")], collapse = " "), 
[08:28:09.703]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.703]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.703]                           info)
[08:28:09.703]                         info <- base::paste(info, collapse = "; ")
[08:28:09.703]                         if (!has_future) {
[08:28:09.703]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.703]                             info)
[08:28:09.703]                         }
[08:28:09.703]                         else {
[08:28:09.703]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.703]                             info, version)
[08:28:09.703]                         }
[08:28:09.703]                         base::stop(msg)
[08:28:09.703]                       }
[08:28:09.703]                     })
[08:28:09.703]                   }
[08:28:09.703]                   ...future.strategy.old <- future::plan("list")
[08:28:09.703]                   options(future.plan = NULL)
[08:28:09.703]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.703]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.703]                 }
[08:28:09.703]                 ...future.workdir <- getwd()
[08:28:09.703]             }
[08:28:09.703]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.703]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.703]         }
[08:28:09.703]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.703]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.703]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.703]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.703]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.703]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.703]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.703]             base::names(...future.oldOptions))
[08:28:09.703]     }
[08:28:09.703]     if (FALSE) {
[08:28:09.703]     }
[08:28:09.703]     else {
[08:28:09.703]         if (TRUE) {
[08:28:09.703]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.703]                 open = "w")
[08:28:09.703]         }
[08:28:09.703]         else {
[08:28:09.703]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.703]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.703]         }
[08:28:09.703]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.703]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.703]             base::sink(type = "output", split = FALSE)
[08:28:09.703]             base::close(...future.stdout)
[08:28:09.703]         }, add = TRUE)
[08:28:09.703]     }
[08:28:09.703]     ...future.frame <- base::sys.nframe()
[08:28:09.703]     ...future.conditions <- base::list()
[08:28:09.703]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.703]     if (FALSE) {
[08:28:09.703]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.703]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.703]     }
[08:28:09.703]     ...future.result <- base::tryCatch({
[08:28:09.703]         base::withCallingHandlers({
[08:28:09.703]             ...future.value <- base::withVisible(base::local({
[08:28:09.703]                 x <- list(b = 2)
[08:28:09.703]                 x$a <- 1
[08:28:09.703]                 x
[08:28:09.703]             }))
[08:28:09.703]             future::FutureResult(value = ...future.value$value, 
[08:28:09.703]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.703]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.703]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.703]                     ...future.globalenv.names))
[08:28:09.703]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.703]         }, condition = base::local({
[08:28:09.703]             c <- base::c
[08:28:09.703]             inherits <- base::inherits
[08:28:09.703]             invokeRestart <- base::invokeRestart
[08:28:09.703]             length <- base::length
[08:28:09.703]             list <- base::list
[08:28:09.703]             seq.int <- base::seq.int
[08:28:09.703]             signalCondition <- base::signalCondition
[08:28:09.703]             sys.calls <- base::sys.calls
[08:28:09.703]             `[[` <- base::`[[`
[08:28:09.703]             `+` <- base::`+`
[08:28:09.703]             `<<-` <- base::`<<-`
[08:28:09.703]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.703]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.703]                   3L)]
[08:28:09.703]             }
[08:28:09.703]             function(cond) {
[08:28:09.703]                 is_error <- inherits(cond, "error")
[08:28:09.703]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.703]                   NULL)
[08:28:09.703]                 if (is_error) {
[08:28:09.703]                   sessionInformation <- function() {
[08:28:09.703]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.703]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.703]                       search = base::search(), system = base::Sys.info())
[08:28:09.703]                   }
[08:28:09.703]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.703]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.703]                     cond$call), session = sessionInformation(), 
[08:28:09.703]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.703]                   signalCondition(cond)
[08:28:09.703]                 }
[08:28:09.703]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.703]                 "immediateCondition"))) {
[08:28:09.703]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.703]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.703]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.703]                   if (TRUE && !signal) {
[08:28:09.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.703]                     {
[08:28:09.703]                       inherits <- base::inherits
[08:28:09.703]                       invokeRestart <- base::invokeRestart
[08:28:09.703]                       is.null <- base::is.null
[08:28:09.703]                       muffled <- FALSE
[08:28:09.703]                       if (inherits(cond, "message")) {
[08:28:09.703]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.703]                         if (muffled) 
[08:28:09.703]                           invokeRestart("muffleMessage")
[08:28:09.703]                       }
[08:28:09.703]                       else if (inherits(cond, "warning")) {
[08:28:09.703]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.703]                         if (muffled) 
[08:28:09.703]                           invokeRestart("muffleWarning")
[08:28:09.703]                       }
[08:28:09.703]                       else if (inherits(cond, "condition")) {
[08:28:09.703]                         if (!is.null(pattern)) {
[08:28:09.703]                           computeRestarts <- base::computeRestarts
[08:28:09.703]                           grepl <- base::grepl
[08:28:09.703]                           restarts <- computeRestarts(cond)
[08:28:09.703]                           for (restart in restarts) {
[08:28:09.703]                             name <- restart$name
[08:28:09.703]                             if (is.null(name)) 
[08:28:09.703]                               next
[08:28:09.703]                             if (!grepl(pattern, name)) 
[08:28:09.703]                               next
[08:28:09.703]                             invokeRestart(restart)
[08:28:09.703]                             muffled <- TRUE
[08:28:09.703]                             break
[08:28:09.703]                           }
[08:28:09.703]                         }
[08:28:09.703]                       }
[08:28:09.703]                       invisible(muffled)
[08:28:09.703]                     }
[08:28:09.703]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.703]                   }
[08:28:09.703]                 }
[08:28:09.703]                 else {
[08:28:09.703]                   if (TRUE) {
[08:28:09.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.703]                     {
[08:28:09.703]                       inherits <- base::inherits
[08:28:09.703]                       invokeRestart <- base::invokeRestart
[08:28:09.703]                       is.null <- base::is.null
[08:28:09.703]                       muffled <- FALSE
[08:28:09.703]                       if (inherits(cond, "message")) {
[08:28:09.703]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.703]                         if (muffled) 
[08:28:09.703]                           invokeRestart("muffleMessage")
[08:28:09.703]                       }
[08:28:09.703]                       else if (inherits(cond, "warning")) {
[08:28:09.703]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.703]                         if (muffled) 
[08:28:09.703]                           invokeRestart("muffleWarning")
[08:28:09.703]                       }
[08:28:09.703]                       else if (inherits(cond, "condition")) {
[08:28:09.703]                         if (!is.null(pattern)) {
[08:28:09.703]                           computeRestarts <- base::computeRestarts
[08:28:09.703]                           grepl <- base::grepl
[08:28:09.703]                           restarts <- computeRestarts(cond)
[08:28:09.703]                           for (restart in restarts) {
[08:28:09.703]                             name <- restart$name
[08:28:09.703]                             if (is.null(name)) 
[08:28:09.703]                               next
[08:28:09.703]                             if (!grepl(pattern, name)) 
[08:28:09.703]                               next
[08:28:09.703]                             invokeRestart(restart)
[08:28:09.703]                             muffled <- TRUE
[08:28:09.703]                             break
[08:28:09.703]                           }
[08:28:09.703]                         }
[08:28:09.703]                       }
[08:28:09.703]                       invisible(muffled)
[08:28:09.703]                     }
[08:28:09.703]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.703]                   }
[08:28:09.703]                 }
[08:28:09.703]             }
[08:28:09.703]         }))
[08:28:09.703]     }, error = function(ex) {
[08:28:09.703]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.703]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.703]                 ...future.rng), started = ...future.startTime, 
[08:28:09.703]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.703]             version = "1.8"), class = "FutureResult")
[08:28:09.703]     }, finally = {
[08:28:09.703]         if (!identical(...future.workdir, getwd())) 
[08:28:09.703]             setwd(...future.workdir)
[08:28:09.703]         {
[08:28:09.703]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.703]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.703]             }
[08:28:09.703]             base::options(...future.oldOptions)
[08:28:09.703]             if (.Platform$OS.type == "windows") {
[08:28:09.703]                 old_names <- names(...future.oldEnvVars)
[08:28:09.703]                 envs <- base::Sys.getenv()
[08:28:09.703]                 names <- names(envs)
[08:28:09.703]                 common <- intersect(names, old_names)
[08:28:09.703]                 added <- setdiff(names, old_names)
[08:28:09.703]                 removed <- setdiff(old_names, names)
[08:28:09.703]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.703]                   envs[common]]
[08:28:09.703]                 NAMES <- toupper(changed)
[08:28:09.703]                 args <- list()
[08:28:09.703]                 for (kk in seq_along(NAMES)) {
[08:28:09.703]                   name <- changed[[kk]]
[08:28:09.703]                   NAME <- NAMES[[kk]]
[08:28:09.703]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.703]                     next
[08:28:09.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.703]                 }
[08:28:09.703]                 NAMES <- toupper(added)
[08:28:09.703]                 for (kk in seq_along(NAMES)) {
[08:28:09.703]                   name <- added[[kk]]
[08:28:09.703]                   NAME <- NAMES[[kk]]
[08:28:09.703]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.703]                     next
[08:28:09.703]                   args[[name]] <- ""
[08:28:09.703]                 }
[08:28:09.703]                 NAMES <- toupper(removed)
[08:28:09.703]                 for (kk in seq_along(NAMES)) {
[08:28:09.703]                   name <- removed[[kk]]
[08:28:09.703]                   NAME <- NAMES[[kk]]
[08:28:09.703]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.703]                     next
[08:28:09.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.703]                 }
[08:28:09.703]                 if (length(args) > 0) 
[08:28:09.703]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.703]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.703]             }
[08:28:09.703]             else {
[08:28:09.703]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.703]             }
[08:28:09.703]             {
[08:28:09.703]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.703]                   0L) {
[08:28:09.703]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.703]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.703]                   base::options(opts)
[08:28:09.703]                 }
[08:28:09.703]                 {
[08:28:09.703]                   {
[08:28:09.703]                     NULL
[08:28:09.703]                     RNGkind("Mersenne-Twister")
[08:28:09.703]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.703]                       inherits = FALSE)
[08:28:09.703]                   }
[08:28:09.703]                   options(future.plan = NULL)
[08:28:09.703]                   if (is.na(NA_character_)) 
[08:28:09.703]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.703]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.703]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.703]                     .init = FALSE)
[08:28:09.703]                 }
[08:28:09.703]             }
[08:28:09.703]         }
[08:28:09.703]     })
[08:28:09.703]     if (TRUE) {
[08:28:09.703]         base::sink(type = "output", split = FALSE)
[08:28:09.703]         if (TRUE) {
[08:28:09.703]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.703]         }
[08:28:09.703]         else {
[08:28:09.703]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.703]         }
[08:28:09.703]         base::close(...future.stdout)
[08:28:09.703]         ...future.stdout <- NULL
[08:28:09.703]     }
[08:28:09.703]     ...future.result$conditions <- ...future.conditions
[08:28:09.703]     ...future.result$finished <- base::Sys.time()
[08:28:09.703]     ...future.result
[08:28:09.703] }
[08:28:09.705] plan(): Setting new future strategy stack:
[08:28:09.705] List of future strategies:
[08:28:09.705] 1. sequential:
[08:28:09.705]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.705]    - tweaked: FALSE
[08:28:09.705]    - call: NULL
[08:28:09.706] plan(): nbrOfWorkers() = 1
[08:28:09.706] plan(): Setting new future strategy stack:
[08:28:09.706] List of future strategies:
[08:28:09.706] 1. sequential:
[08:28:09.706]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.706]    - tweaked: FALSE
[08:28:09.706]    - call: plan(strategy)
[08:28:09.707] plan(): nbrOfWorkers() = 1
[08:28:09.707] SequentialFuture started (and completed)
[08:28:09.707] - Launch lazy future ... done
[08:28:09.707] run() for ‘SequentialFuture’ ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.708] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.708] Searching for globals...
[08:28:09.709] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:09.710] Searching for globals ... DONE
[08:28:09.710] Resolving globals: TRUE
[08:28:09.710] Resolving any globals that are futures ...
[08:28:09.710] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:09.710] Resolving any globals that are futures ... DONE
[08:28:09.710] Resolving futures part of globals (recursively) ...
[08:28:09.710] resolve() on list ...
[08:28:09.711]  recursive: 99
[08:28:09.711]  length: 1
[08:28:09.711]  elements: ‘x’
[08:28:09.711]  length: 0 (resolved future 1)
[08:28:09.711] resolve() on list ... DONE
[08:28:09.711] - globals: [1] ‘x’
[08:28:09.711] Resolving futures part of globals (recursively) ... DONE
[08:28:09.711] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.711] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.712] - globals: [1] ‘x’
[08:28:09.712] 
[08:28:09.712] getGlobalsAndPackages() ... DONE
[08:28:09.712] run() for ‘Future’ ...
[08:28:09.712] - state: ‘created’
[08:28:09.712] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.712] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.713] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.713]   - Field: ‘label’
[08:28:09.713]   - Field: ‘local’
[08:28:09.713]   - Field: ‘owner’
[08:28:09.713]   - Field: ‘envir’
[08:28:09.713]   - Field: ‘packages’
[08:28:09.713]   - Field: ‘gc’
[08:28:09.713]   - Field: ‘conditions’
[08:28:09.713]   - Field: ‘expr’
[08:28:09.713]   - Field: ‘uuid’
[08:28:09.713]   - Field: ‘seed’
[08:28:09.713]   - Field: ‘version’
[08:28:09.714]   - Field: ‘result’
[08:28:09.714]   - Field: ‘asynchronous’
[08:28:09.714]   - Field: ‘calls’
[08:28:09.714]   - Field: ‘globals’
[08:28:09.714]   - Field: ‘stdout’
[08:28:09.714]   - Field: ‘earlySignal’
[08:28:09.714]   - Field: ‘lazy’
[08:28:09.714]   - Field: ‘state’
[08:28:09.714] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.714] - Launch lazy future ...
[08:28:09.714] Packages needed by the future expression (n = 0): <none>
[08:28:09.715] Packages needed by future strategies (n = 0): <none>
[08:28:09.715] {
[08:28:09.715]     {
[08:28:09.715]         {
[08:28:09.715]             ...future.startTime <- base::Sys.time()
[08:28:09.715]             {
[08:28:09.715]                 {
[08:28:09.715]                   {
[08:28:09.715]                     base::local({
[08:28:09.715]                       has_future <- base::requireNamespace("future", 
[08:28:09.715]                         quietly = TRUE)
[08:28:09.715]                       if (has_future) {
[08:28:09.715]                         ns <- base::getNamespace("future")
[08:28:09.715]                         version <- ns[[".package"]][["version"]]
[08:28:09.715]                         if (is.null(version)) 
[08:28:09.715]                           version <- utils::packageVersion("future")
[08:28:09.715]                       }
[08:28:09.715]                       else {
[08:28:09.715]                         version <- NULL
[08:28:09.715]                       }
[08:28:09.715]                       if (!has_future || version < "1.8.0") {
[08:28:09.715]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.715]                           "", base::R.version$version.string), 
[08:28:09.715]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.715]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.715]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.715]                             "release", "version")], collapse = " "), 
[08:28:09.715]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.715]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.715]                           info)
[08:28:09.715]                         info <- base::paste(info, collapse = "; ")
[08:28:09.715]                         if (!has_future) {
[08:28:09.715]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.715]                             info)
[08:28:09.715]                         }
[08:28:09.715]                         else {
[08:28:09.715]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.715]                             info, version)
[08:28:09.715]                         }
[08:28:09.715]                         base::stop(msg)
[08:28:09.715]                       }
[08:28:09.715]                     })
[08:28:09.715]                   }
[08:28:09.715]                   ...future.strategy.old <- future::plan("list")
[08:28:09.715]                   options(future.plan = NULL)
[08:28:09.715]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.715]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.715]                 }
[08:28:09.715]                 ...future.workdir <- getwd()
[08:28:09.715]             }
[08:28:09.715]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.715]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.715]         }
[08:28:09.715]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.715]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.715]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.715]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.715]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.715]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.715]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.715]             base::names(...future.oldOptions))
[08:28:09.715]     }
[08:28:09.715]     if (FALSE) {
[08:28:09.715]     }
[08:28:09.715]     else {
[08:28:09.715]         if (TRUE) {
[08:28:09.715]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.715]                 open = "w")
[08:28:09.715]         }
[08:28:09.715]         else {
[08:28:09.715]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.715]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.715]         }
[08:28:09.715]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.715]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.715]             base::sink(type = "output", split = FALSE)
[08:28:09.715]             base::close(...future.stdout)
[08:28:09.715]         }, add = TRUE)
[08:28:09.715]     }
[08:28:09.715]     ...future.frame <- base::sys.nframe()
[08:28:09.715]     ...future.conditions <- base::list()
[08:28:09.715]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.715]     if (FALSE) {
[08:28:09.715]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.715]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.715]     }
[08:28:09.715]     ...future.result <- base::tryCatch({
[08:28:09.715]         base::withCallingHandlers({
[08:28:09.715]             ...future.value <- base::withVisible(base::local({
[08:28:09.715]                 x[["a"]] <- 1
[08:28:09.715]                 x
[08:28:09.715]             }))
[08:28:09.715]             future::FutureResult(value = ...future.value$value, 
[08:28:09.715]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.715]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.715]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.715]                     ...future.globalenv.names))
[08:28:09.715]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.715]         }, condition = base::local({
[08:28:09.715]             c <- base::c
[08:28:09.715]             inherits <- base::inherits
[08:28:09.715]             invokeRestart <- base::invokeRestart
[08:28:09.715]             length <- base::length
[08:28:09.715]             list <- base::list
[08:28:09.715]             seq.int <- base::seq.int
[08:28:09.715]             signalCondition <- base::signalCondition
[08:28:09.715]             sys.calls <- base::sys.calls
[08:28:09.715]             `[[` <- base::`[[`
[08:28:09.715]             `+` <- base::`+`
[08:28:09.715]             `<<-` <- base::`<<-`
[08:28:09.715]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.715]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.715]                   3L)]
[08:28:09.715]             }
[08:28:09.715]             function(cond) {
[08:28:09.715]                 is_error <- inherits(cond, "error")
[08:28:09.715]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.715]                   NULL)
[08:28:09.715]                 if (is_error) {
[08:28:09.715]                   sessionInformation <- function() {
[08:28:09.715]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.715]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.715]                       search = base::search(), system = base::Sys.info())
[08:28:09.715]                   }
[08:28:09.715]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.715]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.715]                     cond$call), session = sessionInformation(), 
[08:28:09.715]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.715]                   signalCondition(cond)
[08:28:09.715]                 }
[08:28:09.715]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.715]                 "immediateCondition"))) {
[08:28:09.715]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.715]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.715]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.715]                   if (TRUE && !signal) {
[08:28:09.715]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.715]                     {
[08:28:09.715]                       inherits <- base::inherits
[08:28:09.715]                       invokeRestart <- base::invokeRestart
[08:28:09.715]                       is.null <- base::is.null
[08:28:09.715]                       muffled <- FALSE
[08:28:09.715]                       if (inherits(cond, "message")) {
[08:28:09.715]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.715]                         if (muffled) 
[08:28:09.715]                           invokeRestart("muffleMessage")
[08:28:09.715]                       }
[08:28:09.715]                       else if (inherits(cond, "warning")) {
[08:28:09.715]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.715]                         if (muffled) 
[08:28:09.715]                           invokeRestart("muffleWarning")
[08:28:09.715]                       }
[08:28:09.715]                       else if (inherits(cond, "condition")) {
[08:28:09.715]                         if (!is.null(pattern)) {
[08:28:09.715]                           computeRestarts <- base::computeRestarts
[08:28:09.715]                           grepl <- base::grepl
[08:28:09.715]                           restarts <- computeRestarts(cond)
[08:28:09.715]                           for (restart in restarts) {
[08:28:09.715]                             name <- restart$name
[08:28:09.715]                             if (is.null(name)) 
[08:28:09.715]                               next
[08:28:09.715]                             if (!grepl(pattern, name)) 
[08:28:09.715]                               next
[08:28:09.715]                             invokeRestart(restart)
[08:28:09.715]                             muffled <- TRUE
[08:28:09.715]                             break
[08:28:09.715]                           }
[08:28:09.715]                         }
[08:28:09.715]                       }
[08:28:09.715]                       invisible(muffled)
[08:28:09.715]                     }
[08:28:09.715]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.715]                   }
[08:28:09.715]                 }
[08:28:09.715]                 else {
[08:28:09.715]                   if (TRUE) {
[08:28:09.715]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.715]                     {
[08:28:09.715]                       inherits <- base::inherits
[08:28:09.715]                       invokeRestart <- base::invokeRestart
[08:28:09.715]                       is.null <- base::is.null
[08:28:09.715]                       muffled <- FALSE
[08:28:09.715]                       if (inherits(cond, "message")) {
[08:28:09.715]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.715]                         if (muffled) 
[08:28:09.715]                           invokeRestart("muffleMessage")
[08:28:09.715]                       }
[08:28:09.715]                       else if (inherits(cond, "warning")) {
[08:28:09.715]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.715]                         if (muffled) 
[08:28:09.715]                           invokeRestart("muffleWarning")
[08:28:09.715]                       }
[08:28:09.715]                       else if (inherits(cond, "condition")) {
[08:28:09.715]                         if (!is.null(pattern)) {
[08:28:09.715]                           computeRestarts <- base::computeRestarts
[08:28:09.715]                           grepl <- base::grepl
[08:28:09.715]                           restarts <- computeRestarts(cond)
[08:28:09.715]                           for (restart in restarts) {
[08:28:09.715]                             name <- restart$name
[08:28:09.715]                             if (is.null(name)) 
[08:28:09.715]                               next
[08:28:09.715]                             if (!grepl(pattern, name)) 
[08:28:09.715]                               next
[08:28:09.715]                             invokeRestart(restart)
[08:28:09.715]                             muffled <- TRUE
[08:28:09.715]                             break
[08:28:09.715]                           }
[08:28:09.715]                         }
[08:28:09.715]                       }
[08:28:09.715]                       invisible(muffled)
[08:28:09.715]                     }
[08:28:09.715]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.715]                   }
[08:28:09.715]                 }
[08:28:09.715]             }
[08:28:09.715]         }))
[08:28:09.715]     }, error = function(ex) {
[08:28:09.715]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.715]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.715]                 ...future.rng), started = ...future.startTime, 
[08:28:09.715]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.715]             version = "1.8"), class = "FutureResult")
[08:28:09.715]     }, finally = {
[08:28:09.715]         if (!identical(...future.workdir, getwd())) 
[08:28:09.715]             setwd(...future.workdir)
[08:28:09.715]         {
[08:28:09.715]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.715]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.715]             }
[08:28:09.715]             base::options(...future.oldOptions)
[08:28:09.715]             if (.Platform$OS.type == "windows") {
[08:28:09.715]                 old_names <- names(...future.oldEnvVars)
[08:28:09.715]                 envs <- base::Sys.getenv()
[08:28:09.715]                 names <- names(envs)
[08:28:09.715]                 common <- intersect(names, old_names)
[08:28:09.715]                 added <- setdiff(names, old_names)
[08:28:09.715]                 removed <- setdiff(old_names, names)
[08:28:09.715]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.715]                   envs[common]]
[08:28:09.715]                 NAMES <- toupper(changed)
[08:28:09.715]                 args <- list()
[08:28:09.715]                 for (kk in seq_along(NAMES)) {
[08:28:09.715]                   name <- changed[[kk]]
[08:28:09.715]                   NAME <- NAMES[[kk]]
[08:28:09.715]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.715]                     next
[08:28:09.715]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.715]                 }
[08:28:09.715]                 NAMES <- toupper(added)
[08:28:09.715]                 for (kk in seq_along(NAMES)) {
[08:28:09.715]                   name <- added[[kk]]
[08:28:09.715]                   NAME <- NAMES[[kk]]
[08:28:09.715]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.715]                     next
[08:28:09.715]                   args[[name]] <- ""
[08:28:09.715]                 }
[08:28:09.715]                 NAMES <- toupper(removed)
[08:28:09.715]                 for (kk in seq_along(NAMES)) {
[08:28:09.715]                   name <- removed[[kk]]
[08:28:09.715]                   NAME <- NAMES[[kk]]
[08:28:09.715]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.715]                     next
[08:28:09.715]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.715]                 }
[08:28:09.715]                 if (length(args) > 0) 
[08:28:09.715]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.715]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.715]             }
[08:28:09.715]             else {
[08:28:09.715]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.715]             }
[08:28:09.715]             {
[08:28:09.715]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.715]                   0L) {
[08:28:09.715]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.715]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.715]                   base::options(opts)
[08:28:09.715]                 }
[08:28:09.715]                 {
[08:28:09.715]                   {
[08:28:09.715]                     NULL
[08:28:09.715]                     RNGkind("Mersenne-Twister")
[08:28:09.715]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.715]                       inherits = FALSE)
[08:28:09.715]                   }
[08:28:09.715]                   options(future.plan = NULL)
[08:28:09.715]                   if (is.na(NA_character_)) 
[08:28:09.715]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.715]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.715]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.715]                     .init = FALSE)
[08:28:09.715]                 }
[08:28:09.715]             }
[08:28:09.715]         }
[08:28:09.715]     })
[08:28:09.715]     if (TRUE) {
[08:28:09.715]         base::sink(type = "output", split = FALSE)
[08:28:09.715]         if (TRUE) {
[08:28:09.715]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.715]         }
[08:28:09.715]         else {
[08:28:09.715]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.715]         }
[08:28:09.715]         base::close(...future.stdout)
[08:28:09.715]         ...future.stdout <- NULL
[08:28:09.715]     }
[08:28:09.715]     ...future.result$conditions <- ...future.conditions
[08:28:09.715]     ...future.result$finished <- base::Sys.time()
[08:28:09.715]     ...future.result
[08:28:09.715] }
[08:28:09.717] assign_globals() ...
[08:28:09.717] List of 1
[08:28:09.717]  $ x: list()
[08:28:09.717]  - attr(*, "where")=List of 1
[08:28:09.717]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.717]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.717]  - attr(*, "resolved")= logi TRUE
[08:28:09.717]  - attr(*, "total_size")= num 31
[08:28:09.717]  - attr(*, "already-done")= logi TRUE
[08:28:09.719] - copied ‘x’ to environment
[08:28:09.719] assign_globals() ... done
[08:28:09.719] plan(): Setting new future strategy stack:
[08:28:09.719] List of future strategies:
[08:28:09.719] 1. sequential:
[08:28:09.719]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.719]    - tweaked: FALSE
[08:28:09.719]    - call: NULL
[08:28:09.720] plan(): nbrOfWorkers() = 1
[08:28:09.720] plan(): Setting new future strategy stack:
[08:28:09.720] List of future strategies:
[08:28:09.720] 1. sequential:
[08:28:09.720]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.720]    - tweaked: FALSE
[08:28:09.720]    - call: plan(strategy)
[08:28:09.721] plan(): nbrOfWorkers() = 1
[08:28:09.721] SequentialFuture started (and completed)
[08:28:09.721] - Launch lazy future ... done
[08:28:09.721] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.721] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.722] Searching for globals...
[08:28:09.724] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:09.725] Searching for globals ... DONE
[08:28:09.725] Resolving globals: TRUE
[08:28:09.725] Resolving any globals that are futures ...
[08:28:09.725] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:09.725] Resolving any globals that are futures ... DONE
[08:28:09.725] Resolving futures part of globals (recursively) ...
[08:28:09.725] resolve() on list ...
[08:28:09.726]  recursive: 99
[08:28:09.726]  length: 1
[08:28:09.726]  elements: ‘x’
[08:28:09.726]  length: 0 (resolved future 1)
[08:28:09.726] resolve() on list ... DONE
[08:28:09.726] - globals: [1] ‘x’
[08:28:09.726] Resolving futures part of globals (recursively) ... DONE
[08:28:09.726] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.727] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.727] - globals: [1] ‘x’
[08:28:09.727] 
[08:28:09.727] getGlobalsAndPackages() ... DONE
[08:28:09.727] run() for ‘Future’ ...
[08:28:09.727] - state: ‘created’
[08:28:09.727] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.727] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.728] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.728]   - Field: ‘label’
[08:28:09.728]   - Field: ‘local’
[08:28:09.728]   - Field: ‘owner’
[08:28:09.728]   - Field: ‘envir’
[08:28:09.728]   - Field: ‘packages’
[08:28:09.728]   - Field: ‘gc’
[08:28:09.728]   - Field: ‘conditions’
[08:28:09.728]   - Field: ‘expr’
[08:28:09.728]   - Field: ‘uuid’
[08:28:09.728]   - Field: ‘seed’
[08:28:09.728]   - Field: ‘version’
[08:28:09.729]   - Field: ‘result’
[08:28:09.729]   - Field: ‘asynchronous’
[08:28:09.729]   - Field: ‘calls’
[08:28:09.729]   - Field: ‘globals’
[08:28:09.729]   - Field: ‘stdout’
[08:28:09.729]   - Field: ‘earlySignal’
[08:28:09.729]   - Field: ‘lazy’
[08:28:09.729]   - Field: ‘state’
[08:28:09.729] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.729] - Launch lazy future ...
[08:28:09.729] Packages needed by the future expression (n = 0): <none>
[08:28:09.730] Packages needed by future strategies (n = 0): <none>
[08:28:09.730] {
[08:28:09.730]     {
[08:28:09.730]         {
[08:28:09.730]             ...future.startTime <- base::Sys.time()
[08:28:09.730]             {
[08:28:09.730]                 {
[08:28:09.730]                   {
[08:28:09.730]                     base::local({
[08:28:09.730]                       has_future <- base::requireNamespace("future", 
[08:28:09.730]                         quietly = TRUE)
[08:28:09.730]                       if (has_future) {
[08:28:09.730]                         ns <- base::getNamespace("future")
[08:28:09.730]                         version <- ns[[".package"]][["version"]]
[08:28:09.730]                         if (is.null(version)) 
[08:28:09.730]                           version <- utils::packageVersion("future")
[08:28:09.730]                       }
[08:28:09.730]                       else {
[08:28:09.730]                         version <- NULL
[08:28:09.730]                       }
[08:28:09.730]                       if (!has_future || version < "1.8.0") {
[08:28:09.730]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.730]                           "", base::R.version$version.string), 
[08:28:09.730]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.730]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.730]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.730]                             "release", "version")], collapse = " "), 
[08:28:09.730]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.730]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.730]                           info)
[08:28:09.730]                         info <- base::paste(info, collapse = "; ")
[08:28:09.730]                         if (!has_future) {
[08:28:09.730]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.730]                             info)
[08:28:09.730]                         }
[08:28:09.730]                         else {
[08:28:09.730]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.730]                             info, version)
[08:28:09.730]                         }
[08:28:09.730]                         base::stop(msg)
[08:28:09.730]                       }
[08:28:09.730]                     })
[08:28:09.730]                   }
[08:28:09.730]                   ...future.strategy.old <- future::plan("list")
[08:28:09.730]                   options(future.plan = NULL)
[08:28:09.730]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.730]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.730]                 }
[08:28:09.730]                 ...future.workdir <- getwd()
[08:28:09.730]             }
[08:28:09.730]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.730]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.730]         }
[08:28:09.730]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.730]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.730]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.730]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.730]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.730]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.730]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.730]             base::names(...future.oldOptions))
[08:28:09.730]     }
[08:28:09.730]     if (FALSE) {
[08:28:09.730]     }
[08:28:09.730]     else {
[08:28:09.730]         if (TRUE) {
[08:28:09.730]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.730]                 open = "w")
[08:28:09.730]         }
[08:28:09.730]         else {
[08:28:09.730]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.730]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.730]         }
[08:28:09.730]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.730]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.730]             base::sink(type = "output", split = FALSE)
[08:28:09.730]             base::close(...future.stdout)
[08:28:09.730]         }, add = TRUE)
[08:28:09.730]     }
[08:28:09.730]     ...future.frame <- base::sys.nframe()
[08:28:09.730]     ...future.conditions <- base::list()
[08:28:09.730]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.730]     if (FALSE) {
[08:28:09.730]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.730]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.730]     }
[08:28:09.730]     ...future.result <- base::tryCatch({
[08:28:09.730]         base::withCallingHandlers({
[08:28:09.730]             ...future.value <- base::withVisible(base::local({
[08:28:09.730]                 x[["a"]] <- 1
[08:28:09.730]                 x
[08:28:09.730]             }))
[08:28:09.730]             future::FutureResult(value = ...future.value$value, 
[08:28:09.730]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.730]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.730]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.730]                     ...future.globalenv.names))
[08:28:09.730]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.730]         }, condition = base::local({
[08:28:09.730]             c <- base::c
[08:28:09.730]             inherits <- base::inherits
[08:28:09.730]             invokeRestart <- base::invokeRestart
[08:28:09.730]             length <- base::length
[08:28:09.730]             list <- base::list
[08:28:09.730]             seq.int <- base::seq.int
[08:28:09.730]             signalCondition <- base::signalCondition
[08:28:09.730]             sys.calls <- base::sys.calls
[08:28:09.730]             `[[` <- base::`[[`
[08:28:09.730]             `+` <- base::`+`
[08:28:09.730]             `<<-` <- base::`<<-`
[08:28:09.730]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.730]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.730]                   3L)]
[08:28:09.730]             }
[08:28:09.730]             function(cond) {
[08:28:09.730]                 is_error <- inherits(cond, "error")
[08:28:09.730]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.730]                   NULL)
[08:28:09.730]                 if (is_error) {
[08:28:09.730]                   sessionInformation <- function() {
[08:28:09.730]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.730]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.730]                       search = base::search(), system = base::Sys.info())
[08:28:09.730]                   }
[08:28:09.730]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.730]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.730]                     cond$call), session = sessionInformation(), 
[08:28:09.730]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.730]                   signalCondition(cond)
[08:28:09.730]                 }
[08:28:09.730]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.730]                 "immediateCondition"))) {
[08:28:09.730]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.730]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.730]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.730]                   if (TRUE && !signal) {
[08:28:09.730]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.730]                     {
[08:28:09.730]                       inherits <- base::inherits
[08:28:09.730]                       invokeRestart <- base::invokeRestart
[08:28:09.730]                       is.null <- base::is.null
[08:28:09.730]                       muffled <- FALSE
[08:28:09.730]                       if (inherits(cond, "message")) {
[08:28:09.730]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.730]                         if (muffled) 
[08:28:09.730]                           invokeRestart("muffleMessage")
[08:28:09.730]                       }
[08:28:09.730]                       else if (inherits(cond, "warning")) {
[08:28:09.730]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.730]                         if (muffled) 
[08:28:09.730]                           invokeRestart("muffleWarning")
[08:28:09.730]                       }
[08:28:09.730]                       else if (inherits(cond, "condition")) {
[08:28:09.730]                         if (!is.null(pattern)) {
[08:28:09.730]                           computeRestarts <- base::computeRestarts
[08:28:09.730]                           grepl <- base::grepl
[08:28:09.730]                           restarts <- computeRestarts(cond)
[08:28:09.730]                           for (restart in restarts) {
[08:28:09.730]                             name <- restart$name
[08:28:09.730]                             if (is.null(name)) 
[08:28:09.730]                               next
[08:28:09.730]                             if (!grepl(pattern, name)) 
[08:28:09.730]                               next
[08:28:09.730]                             invokeRestart(restart)
[08:28:09.730]                             muffled <- TRUE
[08:28:09.730]                             break
[08:28:09.730]                           }
[08:28:09.730]                         }
[08:28:09.730]                       }
[08:28:09.730]                       invisible(muffled)
[08:28:09.730]                     }
[08:28:09.730]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.730]                   }
[08:28:09.730]                 }
[08:28:09.730]                 else {
[08:28:09.730]                   if (TRUE) {
[08:28:09.730]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.730]                     {
[08:28:09.730]                       inherits <- base::inherits
[08:28:09.730]                       invokeRestart <- base::invokeRestart
[08:28:09.730]                       is.null <- base::is.null
[08:28:09.730]                       muffled <- FALSE
[08:28:09.730]                       if (inherits(cond, "message")) {
[08:28:09.730]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.730]                         if (muffled) 
[08:28:09.730]                           invokeRestart("muffleMessage")
[08:28:09.730]                       }
[08:28:09.730]                       else if (inherits(cond, "warning")) {
[08:28:09.730]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.730]                         if (muffled) 
[08:28:09.730]                           invokeRestart("muffleWarning")
[08:28:09.730]                       }
[08:28:09.730]                       else if (inherits(cond, "condition")) {
[08:28:09.730]                         if (!is.null(pattern)) {
[08:28:09.730]                           computeRestarts <- base::computeRestarts
[08:28:09.730]                           grepl <- base::grepl
[08:28:09.730]                           restarts <- computeRestarts(cond)
[08:28:09.730]                           for (restart in restarts) {
[08:28:09.730]                             name <- restart$name
[08:28:09.730]                             if (is.null(name)) 
[08:28:09.730]                               next
[08:28:09.730]                             if (!grepl(pattern, name)) 
[08:28:09.730]                               next
[08:28:09.730]                             invokeRestart(restart)
[08:28:09.730]                             muffled <- TRUE
[08:28:09.730]                             break
[08:28:09.730]                           }
[08:28:09.730]                         }
[08:28:09.730]                       }
[08:28:09.730]                       invisible(muffled)
[08:28:09.730]                     }
[08:28:09.730]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.730]                   }
[08:28:09.730]                 }
[08:28:09.730]             }
[08:28:09.730]         }))
[08:28:09.730]     }, error = function(ex) {
[08:28:09.730]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.730]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.730]                 ...future.rng), started = ...future.startTime, 
[08:28:09.730]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.730]             version = "1.8"), class = "FutureResult")
[08:28:09.730]     }, finally = {
[08:28:09.730]         if (!identical(...future.workdir, getwd())) 
[08:28:09.730]             setwd(...future.workdir)
[08:28:09.730]         {
[08:28:09.730]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.730]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.730]             }
[08:28:09.730]             base::options(...future.oldOptions)
[08:28:09.730]             if (.Platform$OS.type == "windows") {
[08:28:09.730]                 old_names <- names(...future.oldEnvVars)
[08:28:09.730]                 envs <- base::Sys.getenv()
[08:28:09.730]                 names <- names(envs)
[08:28:09.730]                 common <- intersect(names, old_names)
[08:28:09.730]                 added <- setdiff(names, old_names)
[08:28:09.730]                 removed <- setdiff(old_names, names)
[08:28:09.730]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.730]                   envs[common]]
[08:28:09.730]                 NAMES <- toupper(changed)
[08:28:09.730]                 args <- list()
[08:28:09.730]                 for (kk in seq_along(NAMES)) {
[08:28:09.730]                   name <- changed[[kk]]
[08:28:09.730]                   NAME <- NAMES[[kk]]
[08:28:09.730]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.730]                     next
[08:28:09.730]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.730]                 }
[08:28:09.730]                 NAMES <- toupper(added)
[08:28:09.730]                 for (kk in seq_along(NAMES)) {
[08:28:09.730]                   name <- added[[kk]]
[08:28:09.730]                   NAME <- NAMES[[kk]]
[08:28:09.730]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.730]                     next
[08:28:09.730]                   args[[name]] <- ""
[08:28:09.730]                 }
[08:28:09.730]                 NAMES <- toupper(removed)
[08:28:09.730]                 for (kk in seq_along(NAMES)) {
[08:28:09.730]                   name <- removed[[kk]]
[08:28:09.730]                   NAME <- NAMES[[kk]]
[08:28:09.730]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.730]                     next
[08:28:09.730]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.730]                 }
[08:28:09.730]                 if (length(args) > 0) 
[08:28:09.730]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.730]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.730]             }
[08:28:09.730]             else {
[08:28:09.730]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.730]             }
[08:28:09.730]             {
[08:28:09.730]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.730]                   0L) {
[08:28:09.730]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.730]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.730]                   base::options(opts)
[08:28:09.730]                 }
[08:28:09.730]                 {
[08:28:09.730]                   {
[08:28:09.730]                     NULL
[08:28:09.730]                     RNGkind("Mersenne-Twister")
[08:28:09.730]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.730]                       inherits = FALSE)
[08:28:09.730]                   }
[08:28:09.730]                   options(future.plan = NULL)
[08:28:09.730]                   if (is.na(NA_character_)) 
[08:28:09.730]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.730]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.730]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.730]                     .init = FALSE)
[08:28:09.730]                 }
[08:28:09.730]             }
[08:28:09.730]         }
[08:28:09.730]     })
[08:28:09.730]     if (TRUE) {
[08:28:09.730]         base::sink(type = "output", split = FALSE)
[08:28:09.730]         if (TRUE) {
[08:28:09.730]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.730]         }
[08:28:09.730]         else {
[08:28:09.730]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.730]         }
[08:28:09.730]         base::close(...future.stdout)
[08:28:09.730]         ...future.stdout <- NULL
[08:28:09.730]     }
[08:28:09.730]     ...future.result$conditions <- ...future.conditions
[08:28:09.730]     ...future.result$finished <- base::Sys.time()
[08:28:09.730]     ...future.result
[08:28:09.730] }
[08:28:09.732] assign_globals() ...
[08:28:09.732] List of 1
[08:28:09.732]  $ x: list()
[08:28:09.732]  - attr(*, "where")=List of 1
[08:28:09.732]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.732]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.732]  - attr(*, "resolved")= logi TRUE
[08:28:09.732]  - attr(*, "total_size")= num 31
[08:28:09.732]  - attr(*, "already-done")= logi TRUE
[08:28:09.734] - copied ‘x’ to environment
[08:28:09.734] assign_globals() ... done
[08:28:09.734] plan(): Setting new future strategy stack:
[08:28:09.734] List of future strategies:
[08:28:09.734] 1. sequential:
[08:28:09.734]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.734]    - tweaked: FALSE
[08:28:09.734]    - call: NULL
[08:28:09.735] plan(): nbrOfWorkers() = 1
[08:28:09.735] plan(): Setting new future strategy stack:
[08:28:09.735] List of future strategies:
[08:28:09.735] 1. sequential:
[08:28:09.735]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.735]    - tweaked: FALSE
[08:28:09.735]    - call: plan(strategy)
[08:28:09.736] plan(): nbrOfWorkers() = 1
[08:28:09.736] SequentialFuture started (and completed)
[08:28:09.736] - Launch lazy future ... done
[08:28:09.736] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.737] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.737] Searching for globals...
[08:28:09.738] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:09.739] Searching for globals ... DONE
[08:28:09.739] Resolving globals: TRUE
[08:28:09.739] Resolving any globals that are futures ...
[08:28:09.739] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:09.739] Resolving any globals that are futures ... DONE
[08:28:09.739] Resolving futures part of globals (recursively) ...
[08:28:09.739] resolve() on list ...
[08:28:09.739]  recursive: 99
[08:28:09.740]  length: 1
[08:28:09.740]  elements: ‘x’
[08:28:09.740]  length: 0 (resolved future 1)
[08:28:09.740] resolve() on list ... DONE
[08:28:09.740] - globals: [1] ‘x’
[08:28:09.740] Resolving futures part of globals (recursively) ... DONE
[08:28:09.740] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.740] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.741] - globals: [1] ‘x’
[08:28:09.741] 
[08:28:09.741] getGlobalsAndPackages() ... DONE
[08:28:09.741] run() for ‘Future’ ...
[08:28:09.741] - state: ‘created’
[08:28:09.741] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.741] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.741] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.742]   - Field: ‘label’
[08:28:09.742]   - Field: ‘local’
[08:28:09.742]   - Field: ‘owner’
[08:28:09.742]   - Field: ‘envir’
[08:28:09.742]   - Field: ‘packages’
[08:28:09.742]   - Field: ‘gc’
[08:28:09.742]   - Field: ‘conditions’
[08:28:09.742]   - Field: ‘expr’
[08:28:09.742]   - Field: ‘uuid’
[08:28:09.742]   - Field: ‘seed’
[08:28:09.742]   - Field: ‘version’
[08:28:09.742]   - Field: ‘result’
[08:28:09.743]   - Field: ‘asynchronous’
[08:28:09.743]   - Field: ‘calls’
[08:28:09.743]   - Field: ‘globals’
[08:28:09.743]   - Field: ‘stdout’
[08:28:09.743]   - Field: ‘earlySignal’
[08:28:09.743]   - Field: ‘lazy’
[08:28:09.743]   - Field: ‘state’
[08:28:09.743] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.743] - Launch lazy future ...
[08:28:09.743] Packages needed by the future expression (n = 0): <none>
[08:28:09.743] Packages needed by future strategies (n = 0): <none>
[08:28:09.744] {
[08:28:09.744]     {
[08:28:09.744]         {
[08:28:09.744]             ...future.startTime <- base::Sys.time()
[08:28:09.744]             {
[08:28:09.744]                 {
[08:28:09.744]                   {
[08:28:09.744]                     base::local({
[08:28:09.744]                       has_future <- base::requireNamespace("future", 
[08:28:09.744]                         quietly = TRUE)
[08:28:09.744]                       if (has_future) {
[08:28:09.744]                         ns <- base::getNamespace("future")
[08:28:09.744]                         version <- ns[[".package"]][["version"]]
[08:28:09.744]                         if (is.null(version)) 
[08:28:09.744]                           version <- utils::packageVersion("future")
[08:28:09.744]                       }
[08:28:09.744]                       else {
[08:28:09.744]                         version <- NULL
[08:28:09.744]                       }
[08:28:09.744]                       if (!has_future || version < "1.8.0") {
[08:28:09.744]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.744]                           "", base::R.version$version.string), 
[08:28:09.744]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.744]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.744]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.744]                             "release", "version")], collapse = " "), 
[08:28:09.744]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.744]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.744]                           info)
[08:28:09.744]                         info <- base::paste(info, collapse = "; ")
[08:28:09.744]                         if (!has_future) {
[08:28:09.744]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.744]                             info)
[08:28:09.744]                         }
[08:28:09.744]                         else {
[08:28:09.744]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.744]                             info, version)
[08:28:09.744]                         }
[08:28:09.744]                         base::stop(msg)
[08:28:09.744]                       }
[08:28:09.744]                     })
[08:28:09.744]                   }
[08:28:09.744]                   ...future.strategy.old <- future::plan("list")
[08:28:09.744]                   options(future.plan = NULL)
[08:28:09.744]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.744]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.744]                 }
[08:28:09.744]                 ...future.workdir <- getwd()
[08:28:09.744]             }
[08:28:09.744]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.744]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.744]         }
[08:28:09.744]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.744]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.744]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.744]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.744]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.744]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.744]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.744]             base::names(...future.oldOptions))
[08:28:09.744]     }
[08:28:09.744]     if (FALSE) {
[08:28:09.744]     }
[08:28:09.744]     else {
[08:28:09.744]         if (TRUE) {
[08:28:09.744]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.744]                 open = "w")
[08:28:09.744]         }
[08:28:09.744]         else {
[08:28:09.744]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.744]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.744]         }
[08:28:09.744]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.744]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.744]             base::sink(type = "output", split = FALSE)
[08:28:09.744]             base::close(...future.stdout)
[08:28:09.744]         }, add = TRUE)
[08:28:09.744]     }
[08:28:09.744]     ...future.frame <- base::sys.nframe()
[08:28:09.744]     ...future.conditions <- base::list()
[08:28:09.744]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.744]     if (FALSE) {
[08:28:09.744]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.744]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.744]     }
[08:28:09.744]     ...future.result <- base::tryCatch({
[08:28:09.744]         base::withCallingHandlers({
[08:28:09.744]             ...future.value <- base::withVisible(base::local({
[08:28:09.744]                 x[["a"]] <- 1
[08:28:09.744]                 x
[08:28:09.744]             }))
[08:28:09.744]             future::FutureResult(value = ...future.value$value, 
[08:28:09.744]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.744]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.744]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.744]                     ...future.globalenv.names))
[08:28:09.744]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.744]         }, condition = base::local({
[08:28:09.744]             c <- base::c
[08:28:09.744]             inherits <- base::inherits
[08:28:09.744]             invokeRestart <- base::invokeRestart
[08:28:09.744]             length <- base::length
[08:28:09.744]             list <- base::list
[08:28:09.744]             seq.int <- base::seq.int
[08:28:09.744]             signalCondition <- base::signalCondition
[08:28:09.744]             sys.calls <- base::sys.calls
[08:28:09.744]             `[[` <- base::`[[`
[08:28:09.744]             `+` <- base::`+`
[08:28:09.744]             `<<-` <- base::`<<-`
[08:28:09.744]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.744]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.744]                   3L)]
[08:28:09.744]             }
[08:28:09.744]             function(cond) {
[08:28:09.744]                 is_error <- inherits(cond, "error")
[08:28:09.744]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.744]                   NULL)
[08:28:09.744]                 if (is_error) {
[08:28:09.744]                   sessionInformation <- function() {
[08:28:09.744]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.744]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.744]                       search = base::search(), system = base::Sys.info())
[08:28:09.744]                   }
[08:28:09.744]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.744]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.744]                     cond$call), session = sessionInformation(), 
[08:28:09.744]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.744]                   signalCondition(cond)
[08:28:09.744]                 }
[08:28:09.744]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.744]                 "immediateCondition"))) {
[08:28:09.744]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.744]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.744]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.744]                   if (TRUE && !signal) {
[08:28:09.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.744]                     {
[08:28:09.744]                       inherits <- base::inherits
[08:28:09.744]                       invokeRestart <- base::invokeRestart
[08:28:09.744]                       is.null <- base::is.null
[08:28:09.744]                       muffled <- FALSE
[08:28:09.744]                       if (inherits(cond, "message")) {
[08:28:09.744]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.744]                         if (muffled) 
[08:28:09.744]                           invokeRestart("muffleMessage")
[08:28:09.744]                       }
[08:28:09.744]                       else if (inherits(cond, "warning")) {
[08:28:09.744]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.744]                         if (muffled) 
[08:28:09.744]                           invokeRestart("muffleWarning")
[08:28:09.744]                       }
[08:28:09.744]                       else if (inherits(cond, "condition")) {
[08:28:09.744]                         if (!is.null(pattern)) {
[08:28:09.744]                           computeRestarts <- base::computeRestarts
[08:28:09.744]                           grepl <- base::grepl
[08:28:09.744]                           restarts <- computeRestarts(cond)
[08:28:09.744]                           for (restart in restarts) {
[08:28:09.744]                             name <- restart$name
[08:28:09.744]                             if (is.null(name)) 
[08:28:09.744]                               next
[08:28:09.744]                             if (!grepl(pattern, name)) 
[08:28:09.744]                               next
[08:28:09.744]                             invokeRestart(restart)
[08:28:09.744]                             muffled <- TRUE
[08:28:09.744]                             break
[08:28:09.744]                           }
[08:28:09.744]                         }
[08:28:09.744]                       }
[08:28:09.744]                       invisible(muffled)
[08:28:09.744]                     }
[08:28:09.744]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.744]                   }
[08:28:09.744]                 }
[08:28:09.744]                 else {
[08:28:09.744]                   if (TRUE) {
[08:28:09.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.744]                     {
[08:28:09.744]                       inherits <- base::inherits
[08:28:09.744]                       invokeRestart <- base::invokeRestart
[08:28:09.744]                       is.null <- base::is.null
[08:28:09.744]                       muffled <- FALSE
[08:28:09.744]                       if (inherits(cond, "message")) {
[08:28:09.744]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.744]                         if (muffled) 
[08:28:09.744]                           invokeRestart("muffleMessage")
[08:28:09.744]                       }
[08:28:09.744]                       else if (inherits(cond, "warning")) {
[08:28:09.744]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.744]                         if (muffled) 
[08:28:09.744]                           invokeRestart("muffleWarning")
[08:28:09.744]                       }
[08:28:09.744]                       else if (inherits(cond, "condition")) {
[08:28:09.744]                         if (!is.null(pattern)) {
[08:28:09.744]                           computeRestarts <- base::computeRestarts
[08:28:09.744]                           grepl <- base::grepl
[08:28:09.744]                           restarts <- computeRestarts(cond)
[08:28:09.744]                           for (restart in restarts) {
[08:28:09.744]                             name <- restart$name
[08:28:09.744]                             if (is.null(name)) 
[08:28:09.744]                               next
[08:28:09.744]                             if (!grepl(pattern, name)) 
[08:28:09.744]                               next
[08:28:09.744]                             invokeRestart(restart)
[08:28:09.744]                             muffled <- TRUE
[08:28:09.744]                             break
[08:28:09.744]                           }
[08:28:09.744]                         }
[08:28:09.744]                       }
[08:28:09.744]                       invisible(muffled)
[08:28:09.744]                     }
[08:28:09.744]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.744]                   }
[08:28:09.744]                 }
[08:28:09.744]             }
[08:28:09.744]         }))
[08:28:09.744]     }, error = function(ex) {
[08:28:09.744]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.744]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.744]                 ...future.rng), started = ...future.startTime, 
[08:28:09.744]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.744]             version = "1.8"), class = "FutureResult")
[08:28:09.744]     }, finally = {
[08:28:09.744]         if (!identical(...future.workdir, getwd())) 
[08:28:09.744]             setwd(...future.workdir)
[08:28:09.744]         {
[08:28:09.744]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.744]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.744]             }
[08:28:09.744]             base::options(...future.oldOptions)
[08:28:09.744]             if (.Platform$OS.type == "windows") {
[08:28:09.744]                 old_names <- names(...future.oldEnvVars)
[08:28:09.744]                 envs <- base::Sys.getenv()
[08:28:09.744]                 names <- names(envs)
[08:28:09.744]                 common <- intersect(names, old_names)
[08:28:09.744]                 added <- setdiff(names, old_names)
[08:28:09.744]                 removed <- setdiff(old_names, names)
[08:28:09.744]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.744]                   envs[common]]
[08:28:09.744]                 NAMES <- toupper(changed)
[08:28:09.744]                 args <- list()
[08:28:09.744]                 for (kk in seq_along(NAMES)) {
[08:28:09.744]                   name <- changed[[kk]]
[08:28:09.744]                   NAME <- NAMES[[kk]]
[08:28:09.744]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.744]                     next
[08:28:09.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.744]                 }
[08:28:09.744]                 NAMES <- toupper(added)
[08:28:09.744]                 for (kk in seq_along(NAMES)) {
[08:28:09.744]                   name <- added[[kk]]
[08:28:09.744]                   NAME <- NAMES[[kk]]
[08:28:09.744]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.744]                     next
[08:28:09.744]                   args[[name]] <- ""
[08:28:09.744]                 }
[08:28:09.744]                 NAMES <- toupper(removed)
[08:28:09.744]                 for (kk in seq_along(NAMES)) {
[08:28:09.744]                   name <- removed[[kk]]
[08:28:09.744]                   NAME <- NAMES[[kk]]
[08:28:09.744]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.744]                     next
[08:28:09.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.744]                 }
[08:28:09.744]                 if (length(args) > 0) 
[08:28:09.744]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.744]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.744]             }
[08:28:09.744]             else {
[08:28:09.744]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.744]             }
[08:28:09.744]             {
[08:28:09.744]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.744]                   0L) {
[08:28:09.744]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.744]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.744]                   base::options(opts)
[08:28:09.744]                 }
[08:28:09.744]                 {
[08:28:09.744]                   {
[08:28:09.744]                     NULL
[08:28:09.744]                     RNGkind("Mersenne-Twister")
[08:28:09.744]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.744]                       inherits = FALSE)
[08:28:09.744]                   }
[08:28:09.744]                   options(future.plan = NULL)
[08:28:09.744]                   if (is.na(NA_character_)) 
[08:28:09.744]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.744]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.744]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.744]                     .init = FALSE)
[08:28:09.744]                 }
[08:28:09.744]             }
[08:28:09.744]         }
[08:28:09.744]     })
[08:28:09.744]     if (TRUE) {
[08:28:09.744]         base::sink(type = "output", split = FALSE)
[08:28:09.744]         if (TRUE) {
[08:28:09.744]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.744]         }
[08:28:09.744]         else {
[08:28:09.744]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.744]         }
[08:28:09.744]         base::close(...future.stdout)
[08:28:09.744]         ...future.stdout <- NULL
[08:28:09.744]     }
[08:28:09.744]     ...future.result$conditions <- ...future.conditions
[08:28:09.744]     ...future.result$finished <- base::Sys.time()
[08:28:09.744]     ...future.result
[08:28:09.744] }
[08:28:09.745] assign_globals() ...
[08:28:09.745] List of 1
[08:28:09.745]  $ x: list()
[08:28:09.745]  - attr(*, "where")=List of 1
[08:28:09.745]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.745]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.745]  - attr(*, "resolved")= logi TRUE
[08:28:09.745]  - attr(*, "total_size")= num 31
[08:28:09.745]  - attr(*, "already-done")= logi TRUE
[08:28:09.748] - copied ‘x’ to environment
[08:28:09.748] assign_globals() ... done
[08:28:09.748] plan(): Setting new future strategy stack:
[08:28:09.748] List of future strategies:
[08:28:09.748] 1. sequential:
[08:28:09.748]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.748]    - tweaked: FALSE
[08:28:09.748]    - call: NULL
[08:28:09.749] plan(): nbrOfWorkers() = 1
[08:28:09.750] plan(): Setting new future strategy stack:
[08:28:09.751] List of future strategies:
[08:28:09.751] 1. sequential:
[08:28:09.751]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.751]    - tweaked: FALSE
[08:28:09.751]    - call: plan(strategy)
[08:28:09.751] plan(): nbrOfWorkers() = 1
[08:28:09.751] SequentialFuture started (and completed)
[08:28:09.751] - Launch lazy future ... done
[08:28:09.751] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.752] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.752] Searching for globals...
[08:28:09.754] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:09.754] Searching for globals ... DONE
[08:28:09.754] Resolving globals: TRUE
[08:28:09.754] Resolving any globals that are futures ...
[08:28:09.754] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:09.754] Resolving any globals that are futures ... DONE
[08:28:09.755] Resolving futures part of globals (recursively) ...
[08:28:09.755] resolve() on list ...
[08:28:09.755]  recursive: 99
[08:28:09.755]  length: 1
[08:28:09.755]  elements: ‘x’
[08:28:09.755]  length: 0 (resolved future 1)
[08:28:09.755] resolve() on list ... DONE
[08:28:09.755] - globals: [1] ‘x’
[08:28:09.755] Resolving futures part of globals (recursively) ... DONE
[08:28:09.755] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.756] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.756] - globals: [1] ‘x’
[08:28:09.756] 
[08:28:09.756] getGlobalsAndPackages() ... DONE
[08:28:09.756] run() for ‘Future’ ...
[08:28:09.756] - state: ‘created’
[08:28:09.756] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.757] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.757] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.757]   - Field: ‘label’
[08:28:09.757]   - Field: ‘local’
[08:28:09.757]   - Field: ‘owner’
[08:28:09.757]   - Field: ‘envir’
[08:28:09.757]   - Field: ‘packages’
[08:28:09.757]   - Field: ‘gc’
[08:28:09.757]   - Field: ‘conditions’
[08:28:09.757]   - Field: ‘expr’
[08:28:09.758]   - Field: ‘uuid’
[08:28:09.758]   - Field: ‘seed’
[08:28:09.758]   - Field: ‘version’
[08:28:09.758]   - Field: ‘result’
[08:28:09.758]   - Field: ‘asynchronous’
[08:28:09.758]   - Field: ‘calls’
[08:28:09.758]   - Field: ‘globals’
[08:28:09.758]   - Field: ‘stdout’
[08:28:09.758]   - Field: ‘earlySignal’
[08:28:09.758]   - Field: ‘lazy’
[08:28:09.758]   - Field: ‘state’
[08:28:09.758] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.758] - Launch lazy future ...
[08:28:09.759] Packages needed by the future expression (n = 0): <none>
[08:28:09.759] Packages needed by future strategies (n = 0): <none>
[08:28:09.759] {
[08:28:09.759]     {
[08:28:09.759]         {
[08:28:09.759]             ...future.startTime <- base::Sys.time()
[08:28:09.759]             {
[08:28:09.759]                 {
[08:28:09.759]                   {
[08:28:09.759]                     base::local({
[08:28:09.759]                       has_future <- base::requireNamespace("future", 
[08:28:09.759]                         quietly = TRUE)
[08:28:09.759]                       if (has_future) {
[08:28:09.759]                         ns <- base::getNamespace("future")
[08:28:09.759]                         version <- ns[[".package"]][["version"]]
[08:28:09.759]                         if (is.null(version)) 
[08:28:09.759]                           version <- utils::packageVersion("future")
[08:28:09.759]                       }
[08:28:09.759]                       else {
[08:28:09.759]                         version <- NULL
[08:28:09.759]                       }
[08:28:09.759]                       if (!has_future || version < "1.8.0") {
[08:28:09.759]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.759]                           "", base::R.version$version.string), 
[08:28:09.759]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.759]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.759]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.759]                             "release", "version")], collapse = " "), 
[08:28:09.759]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.759]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.759]                           info)
[08:28:09.759]                         info <- base::paste(info, collapse = "; ")
[08:28:09.759]                         if (!has_future) {
[08:28:09.759]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.759]                             info)
[08:28:09.759]                         }
[08:28:09.759]                         else {
[08:28:09.759]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.759]                             info, version)
[08:28:09.759]                         }
[08:28:09.759]                         base::stop(msg)
[08:28:09.759]                       }
[08:28:09.759]                     })
[08:28:09.759]                   }
[08:28:09.759]                   ...future.strategy.old <- future::plan("list")
[08:28:09.759]                   options(future.plan = NULL)
[08:28:09.759]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.759]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.759]                 }
[08:28:09.759]                 ...future.workdir <- getwd()
[08:28:09.759]             }
[08:28:09.759]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.759]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.759]         }
[08:28:09.759]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.759]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.759]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.759]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.759]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.759]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.759]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.759]             base::names(...future.oldOptions))
[08:28:09.759]     }
[08:28:09.759]     if (FALSE) {
[08:28:09.759]     }
[08:28:09.759]     else {
[08:28:09.759]         if (TRUE) {
[08:28:09.759]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.759]                 open = "w")
[08:28:09.759]         }
[08:28:09.759]         else {
[08:28:09.759]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.759]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.759]         }
[08:28:09.759]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.759]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.759]             base::sink(type = "output", split = FALSE)
[08:28:09.759]             base::close(...future.stdout)
[08:28:09.759]         }, add = TRUE)
[08:28:09.759]     }
[08:28:09.759]     ...future.frame <- base::sys.nframe()
[08:28:09.759]     ...future.conditions <- base::list()
[08:28:09.759]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.759]     if (FALSE) {
[08:28:09.759]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.759]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.759]     }
[08:28:09.759]     ...future.result <- base::tryCatch({
[08:28:09.759]         base::withCallingHandlers({
[08:28:09.759]             ...future.value <- base::withVisible(base::local({
[08:28:09.759]                 x["a"] <- list(1)
[08:28:09.759]                 x
[08:28:09.759]             }))
[08:28:09.759]             future::FutureResult(value = ...future.value$value, 
[08:28:09.759]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.759]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.759]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.759]                     ...future.globalenv.names))
[08:28:09.759]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.759]         }, condition = base::local({
[08:28:09.759]             c <- base::c
[08:28:09.759]             inherits <- base::inherits
[08:28:09.759]             invokeRestart <- base::invokeRestart
[08:28:09.759]             length <- base::length
[08:28:09.759]             list <- base::list
[08:28:09.759]             seq.int <- base::seq.int
[08:28:09.759]             signalCondition <- base::signalCondition
[08:28:09.759]             sys.calls <- base::sys.calls
[08:28:09.759]             `[[` <- base::`[[`
[08:28:09.759]             `+` <- base::`+`
[08:28:09.759]             `<<-` <- base::`<<-`
[08:28:09.759]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.759]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.759]                   3L)]
[08:28:09.759]             }
[08:28:09.759]             function(cond) {
[08:28:09.759]                 is_error <- inherits(cond, "error")
[08:28:09.759]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.759]                   NULL)
[08:28:09.759]                 if (is_error) {
[08:28:09.759]                   sessionInformation <- function() {
[08:28:09.759]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.759]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.759]                       search = base::search(), system = base::Sys.info())
[08:28:09.759]                   }
[08:28:09.759]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.759]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.759]                     cond$call), session = sessionInformation(), 
[08:28:09.759]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.759]                   signalCondition(cond)
[08:28:09.759]                 }
[08:28:09.759]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.759]                 "immediateCondition"))) {
[08:28:09.759]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.759]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.759]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.759]                   if (TRUE && !signal) {
[08:28:09.759]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.759]                     {
[08:28:09.759]                       inherits <- base::inherits
[08:28:09.759]                       invokeRestart <- base::invokeRestart
[08:28:09.759]                       is.null <- base::is.null
[08:28:09.759]                       muffled <- FALSE
[08:28:09.759]                       if (inherits(cond, "message")) {
[08:28:09.759]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.759]                         if (muffled) 
[08:28:09.759]                           invokeRestart("muffleMessage")
[08:28:09.759]                       }
[08:28:09.759]                       else if (inherits(cond, "warning")) {
[08:28:09.759]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.759]                         if (muffled) 
[08:28:09.759]                           invokeRestart("muffleWarning")
[08:28:09.759]                       }
[08:28:09.759]                       else if (inherits(cond, "condition")) {
[08:28:09.759]                         if (!is.null(pattern)) {
[08:28:09.759]                           computeRestarts <- base::computeRestarts
[08:28:09.759]                           grepl <- base::grepl
[08:28:09.759]                           restarts <- computeRestarts(cond)
[08:28:09.759]                           for (restart in restarts) {
[08:28:09.759]                             name <- restart$name
[08:28:09.759]                             if (is.null(name)) 
[08:28:09.759]                               next
[08:28:09.759]                             if (!grepl(pattern, name)) 
[08:28:09.759]                               next
[08:28:09.759]                             invokeRestart(restart)
[08:28:09.759]                             muffled <- TRUE
[08:28:09.759]                             break
[08:28:09.759]                           }
[08:28:09.759]                         }
[08:28:09.759]                       }
[08:28:09.759]                       invisible(muffled)
[08:28:09.759]                     }
[08:28:09.759]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.759]                   }
[08:28:09.759]                 }
[08:28:09.759]                 else {
[08:28:09.759]                   if (TRUE) {
[08:28:09.759]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.759]                     {
[08:28:09.759]                       inherits <- base::inherits
[08:28:09.759]                       invokeRestart <- base::invokeRestart
[08:28:09.759]                       is.null <- base::is.null
[08:28:09.759]                       muffled <- FALSE
[08:28:09.759]                       if (inherits(cond, "message")) {
[08:28:09.759]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.759]                         if (muffled) 
[08:28:09.759]                           invokeRestart("muffleMessage")
[08:28:09.759]                       }
[08:28:09.759]                       else if (inherits(cond, "warning")) {
[08:28:09.759]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.759]                         if (muffled) 
[08:28:09.759]                           invokeRestart("muffleWarning")
[08:28:09.759]                       }
[08:28:09.759]                       else if (inherits(cond, "condition")) {
[08:28:09.759]                         if (!is.null(pattern)) {
[08:28:09.759]                           computeRestarts <- base::computeRestarts
[08:28:09.759]                           grepl <- base::grepl
[08:28:09.759]                           restarts <- computeRestarts(cond)
[08:28:09.759]                           for (restart in restarts) {
[08:28:09.759]                             name <- restart$name
[08:28:09.759]                             if (is.null(name)) 
[08:28:09.759]                               next
[08:28:09.759]                             if (!grepl(pattern, name)) 
[08:28:09.759]                               next
[08:28:09.759]                             invokeRestart(restart)
[08:28:09.759]                             muffled <- TRUE
[08:28:09.759]                             break
[08:28:09.759]                           }
[08:28:09.759]                         }
[08:28:09.759]                       }
[08:28:09.759]                       invisible(muffled)
[08:28:09.759]                     }
[08:28:09.759]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.759]                   }
[08:28:09.759]                 }
[08:28:09.759]             }
[08:28:09.759]         }))
[08:28:09.759]     }, error = function(ex) {
[08:28:09.759]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.759]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.759]                 ...future.rng), started = ...future.startTime, 
[08:28:09.759]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.759]             version = "1.8"), class = "FutureResult")
[08:28:09.759]     }, finally = {
[08:28:09.759]         if (!identical(...future.workdir, getwd())) 
[08:28:09.759]             setwd(...future.workdir)
[08:28:09.759]         {
[08:28:09.759]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.759]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.759]             }
[08:28:09.759]             base::options(...future.oldOptions)
[08:28:09.759]             if (.Platform$OS.type == "windows") {
[08:28:09.759]                 old_names <- names(...future.oldEnvVars)
[08:28:09.759]                 envs <- base::Sys.getenv()
[08:28:09.759]                 names <- names(envs)
[08:28:09.759]                 common <- intersect(names, old_names)
[08:28:09.759]                 added <- setdiff(names, old_names)
[08:28:09.759]                 removed <- setdiff(old_names, names)
[08:28:09.759]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.759]                   envs[common]]
[08:28:09.759]                 NAMES <- toupper(changed)
[08:28:09.759]                 args <- list()
[08:28:09.759]                 for (kk in seq_along(NAMES)) {
[08:28:09.759]                   name <- changed[[kk]]
[08:28:09.759]                   NAME <- NAMES[[kk]]
[08:28:09.759]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.759]                     next
[08:28:09.759]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.759]                 }
[08:28:09.759]                 NAMES <- toupper(added)
[08:28:09.759]                 for (kk in seq_along(NAMES)) {
[08:28:09.759]                   name <- added[[kk]]
[08:28:09.759]                   NAME <- NAMES[[kk]]
[08:28:09.759]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.759]                     next
[08:28:09.759]                   args[[name]] <- ""
[08:28:09.759]                 }
[08:28:09.759]                 NAMES <- toupper(removed)
[08:28:09.759]                 for (kk in seq_along(NAMES)) {
[08:28:09.759]                   name <- removed[[kk]]
[08:28:09.759]                   NAME <- NAMES[[kk]]
[08:28:09.759]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.759]                     next
[08:28:09.759]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.759]                 }
[08:28:09.759]                 if (length(args) > 0) 
[08:28:09.759]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.759]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.759]             }
[08:28:09.759]             else {
[08:28:09.759]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.759]             }
[08:28:09.759]             {
[08:28:09.759]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.759]                   0L) {
[08:28:09.759]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.759]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.759]                   base::options(opts)
[08:28:09.759]                 }
[08:28:09.759]                 {
[08:28:09.759]                   {
[08:28:09.759]                     NULL
[08:28:09.759]                     RNGkind("Mersenne-Twister")
[08:28:09.759]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.759]                       inherits = FALSE)
[08:28:09.759]                   }
[08:28:09.759]                   options(future.plan = NULL)
[08:28:09.759]                   if (is.na(NA_character_)) 
[08:28:09.759]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.759]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.759]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.759]                     .init = FALSE)
[08:28:09.759]                 }
[08:28:09.759]             }
[08:28:09.759]         }
[08:28:09.759]     })
[08:28:09.759]     if (TRUE) {
[08:28:09.759]         base::sink(type = "output", split = FALSE)
[08:28:09.759]         if (TRUE) {
[08:28:09.759]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.759]         }
[08:28:09.759]         else {
[08:28:09.759]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.759]         }
[08:28:09.759]         base::close(...future.stdout)
[08:28:09.759]         ...future.stdout <- NULL
[08:28:09.759]     }
[08:28:09.759]     ...future.result$conditions <- ...future.conditions
[08:28:09.759]     ...future.result$finished <- base::Sys.time()
[08:28:09.759]     ...future.result
[08:28:09.759] }
[08:28:09.761] assign_globals() ...
[08:28:09.761] List of 1
[08:28:09.761]  $ x: list()
[08:28:09.761]  - attr(*, "where")=List of 1
[08:28:09.761]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.761]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.761]  - attr(*, "resolved")= logi TRUE
[08:28:09.761]  - attr(*, "total_size")= num 31
[08:28:09.761]  - attr(*, "already-done")= logi TRUE
[08:28:09.763] - copied ‘x’ to environment
[08:28:09.763] assign_globals() ... done
[08:28:09.763] plan(): Setting new future strategy stack:
[08:28:09.763] List of future strategies:
[08:28:09.763] 1. sequential:
[08:28:09.763]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.763]    - tweaked: FALSE
[08:28:09.763]    - call: NULL
[08:28:09.764] plan(): nbrOfWorkers() = 1
[08:28:09.764] plan(): Setting new future strategy stack:
[08:28:09.765] List of future strategies:
[08:28:09.765] 1. sequential:
[08:28:09.765]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.765]    - tweaked: FALSE
[08:28:09.765]    - call: plan(strategy)
[08:28:09.765] plan(): nbrOfWorkers() = 1
[08:28:09.765] SequentialFuture started (and completed)
[08:28:09.765] - Launch lazy future ... done
[08:28:09.765] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.766] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.766] Searching for globals...
[08:28:09.768] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:09.768] Searching for globals ... DONE
[08:28:09.768] Resolving globals: TRUE
[08:28:09.768] Resolving any globals that are futures ...
[08:28:09.768] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:09.768] Resolving any globals that are futures ... DONE
[08:28:09.768] Resolving futures part of globals (recursively) ...
[08:28:09.769] resolve() on list ...
[08:28:09.769]  recursive: 99
[08:28:09.769]  length: 1
[08:28:09.769]  elements: ‘x’
[08:28:09.769]  length: 0 (resolved future 1)
[08:28:09.769] resolve() on list ... DONE
[08:28:09.769] - globals: [1] ‘x’
[08:28:09.769] Resolving futures part of globals (recursively) ... DONE
[08:28:09.769] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.770] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.770] - globals: [1] ‘x’
[08:28:09.770] 
[08:28:09.770] getGlobalsAndPackages() ... DONE
[08:28:09.770] run() for ‘Future’ ...
[08:28:09.770] - state: ‘created’
[08:28:09.770] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.771] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.771] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.771]   - Field: ‘label’
[08:28:09.771]   - Field: ‘local’
[08:28:09.771]   - Field: ‘owner’
[08:28:09.771]   - Field: ‘envir’
[08:28:09.771]   - Field: ‘packages’
[08:28:09.771]   - Field: ‘gc’
[08:28:09.771]   - Field: ‘conditions’
[08:28:09.771]   - Field: ‘expr’
[08:28:09.771]   - Field: ‘uuid’
[08:28:09.771]   - Field: ‘seed’
[08:28:09.772]   - Field: ‘version’
[08:28:09.772]   - Field: ‘result’
[08:28:09.772]   - Field: ‘asynchronous’
[08:28:09.772]   - Field: ‘calls’
[08:28:09.772]   - Field: ‘globals’
[08:28:09.772]   - Field: ‘stdout’
[08:28:09.772]   - Field: ‘earlySignal’
[08:28:09.772]   - Field: ‘lazy’
[08:28:09.772]   - Field: ‘state’
[08:28:09.772] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.772] - Launch lazy future ...
[08:28:09.773] Packages needed by the future expression (n = 0): <none>
[08:28:09.774] Packages needed by future strategies (n = 0): <none>
[08:28:09.774] {
[08:28:09.774]     {
[08:28:09.774]         {
[08:28:09.774]             ...future.startTime <- base::Sys.time()
[08:28:09.774]             {
[08:28:09.774]                 {
[08:28:09.774]                   {
[08:28:09.774]                     base::local({
[08:28:09.774]                       has_future <- base::requireNamespace("future", 
[08:28:09.774]                         quietly = TRUE)
[08:28:09.774]                       if (has_future) {
[08:28:09.774]                         ns <- base::getNamespace("future")
[08:28:09.774]                         version <- ns[[".package"]][["version"]]
[08:28:09.774]                         if (is.null(version)) 
[08:28:09.774]                           version <- utils::packageVersion("future")
[08:28:09.774]                       }
[08:28:09.774]                       else {
[08:28:09.774]                         version <- NULL
[08:28:09.774]                       }
[08:28:09.774]                       if (!has_future || version < "1.8.0") {
[08:28:09.774]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.774]                           "", base::R.version$version.string), 
[08:28:09.774]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.774]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.774]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.774]                             "release", "version")], collapse = " "), 
[08:28:09.774]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.774]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.774]                           info)
[08:28:09.774]                         info <- base::paste(info, collapse = "; ")
[08:28:09.774]                         if (!has_future) {
[08:28:09.774]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.774]                             info)
[08:28:09.774]                         }
[08:28:09.774]                         else {
[08:28:09.774]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.774]                             info, version)
[08:28:09.774]                         }
[08:28:09.774]                         base::stop(msg)
[08:28:09.774]                       }
[08:28:09.774]                     })
[08:28:09.774]                   }
[08:28:09.774]                   ...future.strategy.old <- future::plan("list")
[08:28:09.774]                   options(future.plan = NULL)
[08:28:09.774]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.774]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.774]                 }
[08:28:09.774]                 ...future.workdir <- getwd()
[08:28:09.774]             }
[08:28:09.774]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.774]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.774]         }
[08:28:09.774]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.774]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.774]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.774]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.774]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.774]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.774]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.774]             base::names(...future.oldOptions))
[08:28:09.774]     }
[08:28:09.774]     if (FALSE) {
[08:28:09.774]     }
[08:28:09.774]     else {
[08:28:09.774]         if (TRUE) {
[08:28:09.774]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.774]                 open = "w")
[08:28:09.774]         }
[08:28:09.774]         else {
[08:28:09.774]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.774]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.774]         }
[08:28:09.774]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.774]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.774]             base::sink(type = "output", split = FALSE)
[08:28:09.774]             base::close(...future.stdout)
[08:28:09.774]         }, add = TRUE)
[08:28:09.774]     }
[08:28:09.774]     ...future.frame <- base::sys.nframe()
[08:28:09.774]     ...future.conditions <- base::list()
[08:28:09.774]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.774]     if (FALSE) {
[08:28:09.774]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.774]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.774]     }
[08:28:09.774]     ...future.result <- base::tryCatch({
[08:28:09.774]         base::withCallingHandlers({
[08:28:09.774]             ...future.value <- base::withVisible(base::local({
[08:28:09.774]                 x["a"] <- list(1)
[08:28:09.774]                 x
[08:28:09.774]             }))
[08:28:09.774]             future::FutureResult(value = ...future.value$value, 
[08:28:09.774]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.774]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.774]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.774]                     ...future.globalenv.names))
[08:28:09.774]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.774]         }, condition = base::local({
[08:28:09.774]             c <- base::c
[08:28:09.774]             inherits <- base::inherits
[08:28:09.774]             invokeRestart <- base::invokeRestart
[08:28:09.774]             length <- base::length
[08:28:09.774]             list <- base::list
[08:28:09.774]             seq.int <- base::seq.int
[08:28:09.774]             signalCondition <- base::signalCondition
[08:28:09.774]             sys.calls <- base::sys.calls
[08:28:09.774]             `[[` <- base::`[[`
[08:28:09.774]             `+` <- base::`+`
[08:28:09.774]             `<<-` <- base::`<<-`
[08:28:09.774]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.774]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.774]                   3L)]
[08:28:09.774]             }
[08:28:09.774]             function(cond) {
[08:28:09.774]                 is_error <- inherits(cond, "error")
[08:28:09.774]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.774]                   NULL)
[08:28:09.774]                 if (is_error) {
[08:28:09.774]                   sessionInformation <- function() {
[08:28:09.774]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.774]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.774]                       search = base::search(), system = base::Sys.info())
[08:28:09.774]                   }
[08:28:09.774]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.774]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.774]                     cond$call), session = sessionInformation(), 
[08:28:09.774]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.774]                   signalCondition(cond)
[08:28:09.774]                 }
[08:28:09.774]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.774]                 "immediateCondition"))) {
[08:28:09.774]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.774]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.774]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.774]                   if (TRUE && !signal) {
[08:28:09.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.774]                     {
[08:28:09.774]                       inherits <- base::inherits
[08:28:09.774]                       invokeRestart <- base::invokeRestart
[08:28:09.774]                       is.null <- base::is.null
[08:28:09.774]                       muffled <- FALSE
[08:28:09.774]                       if (inherits(cond, "message")) {
[08:28:09.774]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.774]                         if (muffled) 
[08:28:09.774]                           invokeRestart("muffleMessage")
[08:28:09.774]                       }
[08:28:09.774]                       else if (inherits(cond, "warning")) {
[08:28:09.774]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.774]                         if (muffled) 
[08:28:09.774]                           invokeRestart("muffleWarning")
[08:28:09.774]                       }
[08:28:09.774]                       else if (inherits(cond, "condition")) {
[08:28:09.774]                         if (!is.null(pattern)) {
[08:28:09.774]                           computeRestarts <- base::computeRestarts
[08:28:09.774]                           grepl <- base::grepl
[08:28:09.774]                           restarts <- computeRestarts(cond)
[08:28:09.774]                           for (restart in restarts) {
[08:28:09.774]                             name <- restart$name
[08:28:09.774]                             if (is.null(name)) 
[08:28:09.774]                               next
[08:28:09.774]                             if (!grepl(pattern, name)) 
[08:28:09.774]                               next
[08:28:09.774]                             invokeRestart(restart)
[08:28:09.774]                             muffled <- TRUE
[08:28:09.774]                             break
[08:28:09.774]                           }
[08:28:09.774]                         }
[08:28:09.774]                       }
[08:28:09.774]                       invisible(muffled)
[08:28:09.774]                     }
[08:28:09.774]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.774]                   }
[08:28:09.774]                 }
[08:28:09.774]                 else {
[08:28:09.774]                   if (TRUE) {
[08:28:09.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.774]                     {
[08:28:09.774]                       inherits <- base::inherits
[08:28:09.774]                       invokeRestart <- base::invokeRestart
[08:28:09.774]                       is.null <- base::is.null
[08:28:09.774]                       muffled <- FALSE
[08:28:09.774]                       if (inherits(cond, "message")) {
[08:28:09.774]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.774]                         if (muffled) 
[08:28:09.774]                           invokeRestart("muffleMessage")
[08:28:09.774]                       }
[08:28:09.774]                       else if (inherits(cond, "warning")) {
[08:28:09.774]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.774]                         if (muffled) 
[08:28:09.774]                           invokeRestart("muffleWarning")
[08:28:09.774]                       }
[08:28:09.774]                       else if (inherits(cond, "condition")) {
[08:28:09.774]                         if (!is.null(pattern)) {
[08:28:09.774]                           computeRestarts <- base::computeRestarts
[08:28:09.774]                           grepl <- base::grepl
[08:28:09.774]                           restarts <- computeRestarts(cond)
[08:28:09.774]                           for (restart in restarts) {
[08:28:09.774]                             name <- restart$name
[08:28:09.774]                             if (is.null(name)) 
[08:28:09.774]                               next
[08:28:09.774]                             if (!grepl(pattern, name)) 
[08:28:09.774]                               next
[08:28:09.774]                             invokeRestart(restart)
[08:28:09.774]                             muffled <- TRUE
[08:28:09.774]                             break
[08:28:09.774]                           }
[08:28:09.774]                         }
[08:28:09.774]                       }
[08:28:09.774]                       invisible(muffled)
[08:28:09.774]                     }
[08:28:09.774]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.774]                   }
[08:28:09.774]                 }
[08:28:09.774]             }
[08:28:09.774]         }))
[08:28:09.774]     }, error = function(ex) {
[08:28:09.774]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.774]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.774]                 ...future.rng), started = ...future.startTime, 
[08:28:09.774]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.774]             version = "1.8"), class = "FutureResult")
[08:28:09.774]     }, finally = {
[08:28:09.774]         if (!identical(...future.workdir, getwd())) 
[08:28:09.774]             setwd(...future.workdir)
[08:28:09.774]         {
[08:28:09.774]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.774]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.774]             }
[08:28:09.774]             base::options(...future.oldOptions)
[08:28:09.774]             if (.Platform$OS.type == "windows") {
[08:28:09.774]                 old_names <- names(...future.oldEnvVars)
[08:28:09.774]                 envs <- base::Sys.getenv()
[08:28:09.774]                 names <- names(envs)
[08:28:09.774]                 common <- intersect(names, old_names)
[08:28:09.774]                 added <- setdiff(names, old_names)
[08:28:09.774]                 removed <- setdiff(old_names, names)
[08:28:09.774]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.774]                   envs[common]]
[08:28:09.774]                 NAMES <- toupper(changed)
[08:28:09.774]                 args <- list()
[08:28:09.774]                 for (kk in seq_along(NAMES)) {
[08:28:09.774]                   name <- changed[[kk]]
[08:28:09.774]                   NAME <- NAMES[[kk]]
[08:28:09.774]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.774]                     next
[08:28:09.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.774]                 }
[08:28:09.774]                 NAMES <- toupper(added)
[08:28:09.774]                 for (kk in seq_along(NAMES)) {
[08:28:09.774]                   name <- added[[kk]]
[08:28:09.774]                   NAME <- NAMES[[kk]]
[08:28:09.774]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.774]                     next
[08:28:09.774]                   args[[name]] <- ""
[08:28:09.774]                 }
[08:28:09.774]                 NAMES <- toupper(removed)
[08:28:09.774]                 for (kk in seq_along(NAMES)) {
[08:28:09.774]                   name <- removed[[kk]]
[08:28:09.774]                   NAME <- NAMES[[kk]]
[08:28:09.774]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.774]                     next
[08:28:09.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.774]                 }
[08:28:09.774]                 if (length(args) > 0) 
[08:28:09.774]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.774]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.774]             }
[08:28:09.774]             else {
[08:28:09.774]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.774]             }
[08:28:09.774]             {
[08:28:09.774]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.774]                   0L) {
[08:28:09.774]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.774]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.774]                   base::options(opts)
[08:28:09.774]                 }
[08:28:09.774]                 {
[08:28:09.774]                   {
[08:28:09.774]                     NULL
[08:28:09.774]                     RNGkind("Mersenne-Twister")
[08:28:09.774]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.774]                       inherits = FALSE)
[08:28:09.774]                   }
[08:28:09.774]                   options(future.plan = NULL)
[08:28:09.774]                   if (is.na(NA_character_)) 
[08:28:09.774]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.774]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.774]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.774]                     .init = FALSE)
[08:28:09.774]                 }
[08:28:09.774]             }
[08:28:09.774]         }
[08:28:09.774]     })
[08:28:09.774]     if (TRUE) {
[08:28:09.774]         base::sink(type = "output", split = FALSE)
[08:28:09.774]         if (TRUE) {
[08:28:09.774]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.774]         }
[08:28:09.774]         else {
[08:28:09.774]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.774]         }
[08:28:09.774]         base::close(...future.stdout)
[08:28:09.774]         ...future.stdout <- NULL
[08:28:09.774]     }
[08:28:09.774]     ...future.result$conditions <- ...future.conditions
[08:28:09.774]     ...future.result$finished <- base::Sys.time()
[08:28:09.774]     ...future.result
[08:28:09.774] }
[08:28:09.776] assign_globals() ...
[08:28:09.776] List of 1
[08:28:09.776]  $ x: list()
[08:28:09.776]  - attr(*, "where")=List of 1
[08:28:09.776]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.776]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.776]  - attr(*, "resolved")= logi TRUE
[08:28:09.776]  - attr(*, "total_size")= num 31
[08:28:09.776]  - attr(*, "already-done")= logi TRUE
[08:28:09.778] - copied ‘x’ to environment
[08:28:09.778] assign_globals() ... done
[08:28:09.778] plan(): Setting new future strategy stack:
[08:28:09.778] List of future strategies:
[08:28:09.778] 1. sequential:
[08:28:09.778]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.778]    - tweaked: FALSE
[08:28:09.778]    - call: NULL
[08:28:09.779] plan(): nbrOfWorkers() = 1
[08:28:09.779] plan(): Setting new future strategy stack:
[08:28:09.779] List of future strategies:
[08:28:09.779] 1. sequential:
[08:28:09.779]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.779]    - tweaked: FALSE
[08:28:09.779]    - call: plan(strategy)
[08:28:09.780] plan(): nbrOfWorkers() = 1
[08:28:09.780] SequentialFuture started (and completed)
[08:28:09.780] - Launch lazy future ... done
[08:28:09.780] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.781] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.781] Searching for globals...
[08:28:09.783] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:09.783] Searching for globals ... DONE
[08:28:09.783] Resolving globals: TRUE
[08:28:09.783] Resolving any globals that are futures ...
[08:28:09.783] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:09.783] Resolving any globals that are futures ... DONE
[08:28:09.783] Resolving futures part of globals (recursively) ...
[08:28:09.784] resolve() on list ...
[08:28:09.784]  recursive: 99
[08:28:09.784]  length: 1
[08:28:09.784]  elements: ‘x’
[08:28:09.784]  length: 0 (resolved future 1)
[08:28:09.784] resolve() on list ... DONE
[08:28:09.784] - globals: [1] ‘x’
[08:28:09.784] Resolving futures part of globals (recursively) ... DONE
[08:28:09.784] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.785] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.785] - globals: [1] ‘x’
[08:28:09.785] 
[08:28:09.785] getGlobalsAndPackages() ... DONE
[08:28:09.785] run() for ‘Future’ ...
[08:28:09.785] - state: ‘created’
[08:28:09.785] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.786] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.786] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.786]   - Field: ‘label’
[08:28:09.786]   - Field: ‘local’
[08:28:09.786]   - Field: ‘owner’
[08:28:09.786]   - Field: ‘envir’
[08:28:09.786]   - Field: ‘packages’
[08:28:09.786]   - Field: ‘gc’
[08:28:09.786]   - Field: ‘conditions’
[08:28:09.786]   - Field: ‘expr’
[08:28:09.786]   - Field: ‘uuid’
[08:28:09.787]   - Field: ‘seed’
[08:28:09.787]   - Field: ‘version’
[08:28:09.787]   - Field: ‘result’
[08:28:09.787]   - Field: ‘asynchronous’
[08:28:09.787]   - Field: ‘calls’
[08:28:09.787]   - Field: ‘globals’
[08:28:09.787]   - Field: ‘stdout’
[08:28:09.787]   - Field: ‘earlySignal’
[08:28:09.787]   - Field: ‘lazy’
[08:28:09.787]   - Field: ‘state’
[08:28:09.787] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.787] - Launch lazy future ...
[08:28:09.788] Packages needed by the future expression (n = 0): <none>
[08:28:09.788] Packages needed by future strategies (n = 0): <none>
[08:28:09.788] {
[08:28:09.788]     {
[08:28:09.788]         {
[08:28:09.788]             ...future.startTime <- base::Sys.time()
[08:28:09.788]             {
[08:28:09.788]                 {
[08:28:09.788]                   {
[08:28:09.788]                     base::local({
[08:28:09.788]                       has_future <- base::requireNamespace("future", 
[08:28:09.788]                         quietly = TRUE)
[08:28:09.788]                       if (has_future) {
[08:28:09.788]                         ns <- base::getNamespace("future")
[08:28:09.788]                         version <- ns[[".package"]][["version"]]
[08:28:09.788]                         if (is.null(version)) 
[08:28:09.788]                           version <- utils::packageVersion("future")
[08:28:09.788]                       }
[08:28:09.788]                       else {
[08:28:09.788]                         version <- NULL
[08:28:09.788]                       }
[08:28:09.788]                       if (!has_future || version < "1.8.0") {
[08:28:09.788]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.788]                           "", base::R.version$version.string), 
[08:28:09.788]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.788]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.788]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.788]                             "release", "version")], collapse = " "), 
[08:28:09.788]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.788]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.788]                           info)
[08:28:09.788]                         info <- base::paste(info, collapse = "; ")
[08:28:09.788]                         if (!has_future) {
[08:28:09.788]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.788]                             info)
[08:28:09.788]                         }
[08:28:09.788]                         else {
[08:28:09.788]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.788]                             info, version)
[08:28:09.788]                         }
[08:28:09.788]                         base::stop(msg)
[08:28:09.788]                       }
[08:28:09.788]                     })
[08:28:09.788]                   }
[08:28:09.788]                   ...future.strategy.old <- future::plan("list")
[08:28:09.788]                   options(future.plan = NULL)
[08:28:09.788]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.788]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.788]                 }
[08:28:09.788]                 ...future.workdir <- getwd()
[08:28:09.788]             }
[08:28:09.788]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.788]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.788]         }
[08:28:09.788]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.788]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.788]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.788]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.788]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.788]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.788]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.788]             base::names(...future.oldOptions))
[08:28:09.788]     }
[08:28:09.788]     if (FALSE) {
[08:28:09.788]     }
[08:28:09.788]     else {
[08:28:09.788]         if (TRUE) {
[08:28:09.788]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.788]                 open = "w")
[08:28:09.788]         }
[08:28:09.788]         else {
[08:28:09.788]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.788]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.788]         }
[08:28:09.788]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.788]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.788]             base::sink(type = "output", split = FALSE)
[08:28:09.788]             base::close(...future.stdout)
[08:28:09.788]         }, add = TRUE)
[08:28:09.788]     }
[08:28:09.788]     ...future.frame <- base::sys.nframe()
[08:28:09.788]     ...future.conditions <- base::list()
[08:28:09.788]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.788]     if (FALSE) {
[08:28:09.788]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.788]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.788]     }
[08:28:09.788]     ...future.result <- base::tryCatch({
[08:28:09.788]         base::withCallingHandlers({
[08:28:09.788]             ...future.value <- base::withVisible(base::local({
[08:28:09.788]                 x["a"] <- list(1)
[08:28:09.788]                 x
[08:28:09.788]             }))
[08:28:09.788]             future::FutureResult(value = ...future.value$value, 
[08:28:09.788]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.788]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.788]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.788]                     ...future.globalenv.names))
[08:28:09.788]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.788]         }, condition = base::local({
[08:28:09.788]             c <- base::c
[08:28:09.788]             inherits <- base::inherits
[08:28:09.788]             invokeRestart <- base::invokeRestart
[08:28:09.788]             length <- base::length
[08:28:09.788]             list <- base::list
[08:28:09.788]             seq.int <- base::seq.int
[08:28:09.788]             signalCondition <- base::signalCondition
[08:28:09.788]             sys.calls <- base::sys.calls
[08:28:09.788]             `[[` <- base::`[[`
[08:28:09.788]             `+` <- base::`+`
[08:28:09.788]             `<<-` <- base::`<<-`
[08:28:09.788]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.788]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.788]                   3L)]
[08:28:09.788]             }
[08:28:09.788]             function(cond) {
[08:28:09.788]                 is_error <- inherits(cond, "error")
[08:28:09.788]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.788]                   NULL)
[08:28:09.788]                 if (is_error) {
[08:28:09.788]                   sessionInformation <- function() {
[08:28:09.788]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.788]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.788]                       search = base::search(), system = base::Sys.info())
[08:28:09.788]                   }
[08:28:09.788]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.788]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.788]                     cond$call), session = sessionInformation(), 
[08:28:09.788]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.788]                   signalCondition(cond)
[08:28:09.788]                 }
[08:28:09.788]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.788]                 "immediateCondition"))) {
[08:28:09.788]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.788]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.788]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.788]                   if (TRUE && !signal) {
[08:28:09.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.788]                     {
[08:28:09.788]                       inherits <- base::inherits
[08:28:09.788]                       invokeRestart <- base::invokeRestart
[08:28:09.788]                       is.null <- base::is.null
[08:28:09.788]                       muffled <- FALSE
[08:28:09.788]                       if (inherits(cond, "message")) {
[08:28:09.788]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.788]                         if (muffled) 
[08:28:09.788]                           invokeRestart("muffleMessage")
[08:28:09.788]                       }
[08:28:09.788]                       else if (inherits(cond, "warning")) {
[08:28:09.788]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.788]                         if (muffled) 
[08:28:09.788]                           invokeRestart("muffleWarning")
[08:28:09.788]                       }
[08:28:09.788]                       else if (inherits(cond, "condition")) {
[08:28:09.788]                         if (!is.null(pattern)) {
[08:28:09.788]                           computeRestarts <- base::computeRestarts
[08:28:09.788]                           grepl <- base::grepl
[08:28:09.788]                           restarts <- computeRestarts(cond)
[08:28:09.788]                           for (restart in restarts) {
[08:28:09.788]                             name <- restart$name
[08:28:09.788]                             if (is.null(name)) 
[08:28:09.788]                               next
[08:28:09.788]                             if (!grepl(pattern, name)) 
[08:28:09.788]                               next
[08:28:09.788]                             invokeRestart(restart)
[08:28:09.788]                             muffled <- TRUE
[08:28:09.788]                             break
[08:28:09.788]                           }
[08:28:09.788]                         }
[08:28:09.788]                       }
[08:28:09.788]                       invisible(muffled)
[08:28:09.788]                     }
[08:28:09.788]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.788]                   }
[08:28:09.788]                 }
[08:28:09.788]                 else {
[08:28:09.788]                   if (TRUE) {
[08:28:09.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.788]                     {
[08:28:09.788]                       inherits <- base::inherits
[08:28:09.788]                       invokeRestart <- base::invokeRestart
[08:28:09.788]                       is.null <- base::is.null
[08:28:09.788]                       muffled <- FALSE
[08:28:09.788]                       if (inherits(cond, "message")) {
[08:28:09.788]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.788]                         if (muffled) 
[08:28:09.788]                           invokeRestart("muffleMessage")
[08:28:09.788]                       }
[08:28:09.788]                       else if (inherits(cond, "warning")) {
[08:28:09.788]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.788]                         if (muffled) 
[08:28:09.788]                           invokeRestart("muffleWarning")
[08:28:09.788]                       }
[08:28:09.788]                       else if (inherits(cond, "condition")) {
[08:28:09.788]                         if (!is.null(pattern)) {
[08:28:09.788]                           computeRestarts <- base::computeRestarts
[08:28:09.788]                           grepl <- base::grepl
[08:28:09.788]                           restarts <- computeRestarts(cond)
[08:28:09.788]                           for (restart in restarts) {
[08:28:09.788]                             name <- restart$name
[08:28:09.788]                             if (is.null(name)) 
[08:28:09.788]                               next
[08:28:09.788]                             if (!grepl(pattern, name)) 
[08:28:09.788]                               next
[08:28:09.788]                             invokeRestart(restart)
[08:28:09.788]                             muffled <- TRUE
[08:28:09.788]                             break
[08:28:09.788]                           }
[08:28:09.788]                         }
[08:28:09.788]                       }
[08:28:09.788]                       invisible(muffled)
[08:28:09.788]                     }
[08:28:09.788]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.788]                   }
[08:28:09.788]                 }
[08:28:09.788]             }
[08:28:09.788]         }))
[08:28:09.788]     }, error = function(ex) {
[08:28:09.788]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.788]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.788]                 ...future.rng), started = ...future.startTime, 
[08:28:09.788]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.788]             version = "1.8"), class = "FutureResult")
[08:28:09.788]     }, finally = {
[08:28:09.788]         if (!identical(...future.workdir, getwd())) 
[08:28:09.788]             setwd(...future.workdir)
[08:28:09.788]         {
[08:28:09.788]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.788]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.788]             }
[08:28:09.788]             base::options(...future.oldOptions)
[08:28:09.788]             if (.Platform$OS.type == "windows") {
[08:28:09.788]                 old_names <- names(...future.oldEnvVars)
[08:28:09.788]                 envs <- base::Sys.getenv()
[08:28:09.788]                 names <- names(envs)
[08:28:09.788]                 common <- intersect(names, old_names)
[08:28:09.788]                 added <- setdiff(names, old_names)
[08:28:09.788]                 removed <- setdiff(old_names, names)
[08:28:09.788]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.788]                   envs[common]]
[08:28:09.788]                 NAMES <- toupper(changed)
[08:28:09.788]                 args <- list()
[08:28:09.788]                 for (kk in seq_along(NAMES)) {
[08:28:09.788]                   name <- changed[[kk]]
[08:28:09.788]                   NAME <- NAMES[[kk]]
[08:28:09.788]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.788]                     next
[08:28:09.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.788]                 }
[08:28:09.788]                 NAMES <- toupper(added)
[08:28:09.788]                 for (kk in seq_along(NAMES)) {
[08:28:09.788]                   name <- added[[kk]]
[08:28:09.788]                   NAME <- NAMES[[kk]]
[08:28:09.788]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.788]                     next
[08:28:09.788]                   args[[name]] <- ""
[08:28:09.788]                 }
[08:28:09.788]                 NAMES <- toupper(removed)
[08:28:09.788]                 for (kk in seq_along(NAMES)) {
[08:28:09.788]                   name <- removed[[kk]]
[08:28:09.788]                   NAME <- NAMES[[kk]]
[08:28:09.788]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.788]                     next
[08:28:09.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.788]                 }
[08:28:09.788]                 if (length(args) > 0) 
[08:28:09.788]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.788]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.788]             }
[08:28:09.788]             else {
[08:28:09.788]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.788]             }
[08:28:09.788]             {
[08:28:09.788]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.788]                   0L) {
[08:28:09.788]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.788]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.788]                   base::options(opts)
[08:28:09.788]                 }
[08:28:09.788]                 {
[08:28:09.788]                   {
[08:28:09.788]                     NULL
[08:28:09.788]                     RNGkind("Mersenne-Twister")
[08:28:09.788]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.788]                       inherits = FALSE)
[08:28:09.788]                   }
[08:28:09.788]                   options(future.plan = NULL)
[08:28:09.788]                   if (is.na(NA_character_)) 
[08:28:09.788]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.788]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.788]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.788]                     .init = FALSE)
[08:28:09.788]                 }
[08:28:09.788]             }
[08:28:09.788]         }
[08:28:09.788]     })
[08:28:09.788]     if (TRUE) {
[08:28:09.788]         base::sink(type = "output", split = FALSE)
[08:28:09.788]         if (TRUE) {
[08:28:09.788]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.788]         }
[08:28:09.788]         else {
[08:28:09.788]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.788]         }
[08:28:09.788]         base::close(...future.stdout)
[08:28:09.788]         ...future.stdout <- NULL
[08:28:09.788]     }
[08:28:09.788]     ...future.result$conditions <- ...future.conditions
[08:28:09.788]     ...future.result$finished <- base::Sys.time()
[08:28:09.788]     ...future.result
[08:28:09.788] }
[08:28:09.790] assign_globals() ...
[08:28:09.790] List of 1
[08:28:09.790]  $ x: list()
[08:28:09.790]  - attr(*, "where")=List of 1
[08:28:09.790]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.790]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.790]  - attr(*, "resolved")= logi TRUE
[08:28:09.790]  - attr(*, "total_size")= num 31
[08:28:09.790]  - attr(*, "already-done")= logi TRUE
[08:28:09.792] - copied ‘x’ to environment
[08:28:09.792] assign_globals() ... done
[08:28:09.792] plan(): Setting new future strategy stack:
[08:28:09.792] List of future strategies:
[08:28:09.792] 1. sequential:
[08:28:09.792]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.792]    - tweaked: FALSE
[08:28:09.792]    - call: NULL
[08:28:09.793] plan(): nbrOfWorkers() = 1
[08:28:09.794] plan(): Setting new future strategy stack:
[08:28:09.794] List of future strategies:
[08:28:09.794] 1. sequential:
[08:28:09.794]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.794]    - tweaked: FALSE
[08:28:09.794]    - call: plan(strategy)
[08:28:09.794] plan(): nbrOfWorkers() = 1
[08:28:09.794] SequentialFuture started (and completed)
[08:28:09.794] - Launch lazy future ... done
[08:28:09.794] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.795] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.795] Searching for globals...
[08:28:09.797] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:28:09.797] Searching for globals ... DONE
[08:28:09.797] Resolving globals: TRUE
[08:28:09.797] Resolving any globals that are futures ...
[08:28:09.797] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:28:09.797] Resolving any globals that are futures ... DONE
[08:28:09.798] Resolving futures part of globals (recursively) ...
[08:28:09.798] resolve() on list ...
[08:28:09.799]  recursive: 99
[08:28:09.799]  length: 2
[08:28:09.800]  elements: ‘x’, ‘name’
[08:28:09.800]  length: 1 (resolved future 1)
[08:28:09.800]  length: 0 (resolved future 2)
[08:28:09.800] resolve() on list ... DONE
[08:28:09.800] - globals: [2] ‘x’, ‘name’
[08:28:09.800] Resolving futures part of globals (recursively) ... DONE
[08:28:09.800] The total size of the 2 globals is 71 bytes (71 bytes)
[08:28:09.801] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 71 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (40 bytes of class ‘character’) and ‘x’ (31 bytes of class ‘list’)
[08:28:09.801] - globals: [2] ‘x’, ‘name’
[08:28:09.801] 
[08:28:09.801] getGlobalsAndPackages() ... DONE
[08:28:09.801] run() for ‘Future’ ...
[08:28:09.801] - state: ‘created’
[08:28:09.801] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:09.801] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:09.802] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:09.802]   - Field: ‘label’
[08:28:09.802]   - Field: ‘local’
[08:28:09.802]   - Field: ‘owner’
[08:28:09.802]   - Field: ‘envir’
[08:28:09.802]   - Field: ‘packages’
[08:28:09.802]   - Field: ‘gc’
[08:28:09.802]   - Field: ‘conditions’
[08:28:09.802]   - Field: ‘expr’
[08:28:09.802]   - Field: ‘uuid’
[08:28:09.802]   - Field: ‘seed’
[08:28:09.803]   - Field: ‘version’
[08:28:09.803]   - Field: ‘result’
[08:28:09.803]   - Field: ‘asynchronous’
[08:28:09.803]   - Field: ‘calls’
[08:28:09.803]   - Field: ‘globals’
[08:28:09.803]   - Field: ‘stdout’
[08:28:09.803]   - Field: ‘earlySignal’
[08:28:09.803]   - Field: ‘lazy’
[08:28:09.803]   - Field: ‘state’
[08:28:09.803] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:09.803] - Launch lazy future ...
[08:28:09.803] Packages needed by the future expression (n = 0): <none>
[08:28:09.804] Packages needed by future strategies (n = 0): <none>
[08:28:09.804] {
[08:28:09.804]     {
[08:28:09.804]         {
[08:28:09.804]             ...future.startTime <- base::Sys.time()
[08:28:09.804]             {
[08:28:09.804]                 {
[08:28:09.804]                   {
[08:28:09.804]                     base::local({
[08:28:09.804]                       has_future <- base::requireNamespace("future", 
[08:28:09.804]                         quietly = TRUE)
[08:28:09.804]                       if (has_future) {
[08:28:09.804]                         ns <- base::getNamespace("future")
[08:28:09.804]                         version <- ns[[".package"]][["version"]]
[08:28:09.804]                         if (is.null(version)) 
[08:28:09.804]                           version <- utils::packageVersion("future")
[08:28:09.804]                       }
[08:28:09.804]                       else {
[08:28:09.804]                         version <- NULL
[08:28:09.804]                       }
[08:28:09.804]                       if (!has_future || version < "1.8.0") {
[08:28:09.804]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.804]                           "", base::R.version$version.string), 
[08:28:09.804]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:09.804]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.804]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.804]                             "release", "version")], collapse = " "), 
[08:28:09.804]                           hostname = base::Sys.info()[["nodename"]])
[08:28:09.804]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.804]                           info)
[08:28:09.804]                         info <- base::paste(info, collapse = "; ")
[08:28:09.804]                         if (!has_future) {
[08:28:09.804]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.804]                             info)
[08:28:09.804]                         }
[08:28:09.804]                         else {
[08:28:09.804]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.804]                             info, version)
[08:28:09.804]                         }
[08:28:09.804]                         base::stop(msg)
[08:28:09.804]                       }
[08:28:09.804]                     })
[08:28:09.804]                   }
[08:28:09.804]                   ...future.strategy.old <- future::plan("list")
[08:28:09.804]                   options(future.plan = NULL)
[08:28:09.804]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.804]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.804]                 }
[08:28:09.804]                 ...future.workdir <- getwd()
[08:28:09.804]             }
[08:28:09.804]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.804]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.804]         }
[08:28:09.804]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.804]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.804]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.804]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.804]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.804]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.804]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.804]             base::names(...future.oldOptions))
[08:28:09.804]     }
[08:28:09.804]     if (FALSE) {
[08:28:09.804]     }
[08:28:09.804]     else {
[08:28:09.804]         if (TRUE) {
[08:28:09.804]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.804]                 open = "w")
[08:28:09.804]         }
[08:28:09.804]         else {
[08:28:09.804]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.804]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.804]         }
[08:28:09.804]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.804]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.804]             base::sink(type = "output", split = FALSE)
[08:28:09.804]             base::close(...future.stdout)
[08:28:09.804]         }, add = TRUE)
[08:28:09.804]     }
[08:28:09.804]     ...future.frame <- base::sys.nframe()
[08:28:09.804]     ...future.conditions <- base::list()
[08:28:09.804]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.804]     if (FALSE) {
[08:28:09.804]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.804]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.804]     }
[08:28:09.804]     ...future.result <- base::tryCatch({
[08:28:09.804]         base::withCallingHandlers({
[08:28:09.804]             ...future.value <- base::withVisible(base::local({
[08:28:09.804]                 x[name] <- list(1)
[08:28:09.804]                 x
[08:28:09.804]             }))
[08:28:09.804]             future::FutureResult(value = ...future.value$value, 
[08:28:09.804]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.804]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.804]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.804]                     ...future.globalenv.names))
[08:28:09.804]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.804]         }, condition = base::local({
[08:28:09.804]             c <- base::c
[08:28:09.804]             inherits <- base::inherits
[08:28:09.804]             invokeRestart <- base::invokeRestart
[08:28:09.804]             length <- base::length
[08:28:09.804]             list <- base::list
[08:28:09.804]             seq.int <- base::seq.int
[08:28:09.804]             signalCondition <- base::signalCondition
[08:28:09.804]             sys.calls <- base::sys.calls
[08:28:09.804]             `[[` <- base::`[[`
[08:28:09.804]             `+` <- base::`+`
[08:28:09.804]             `<<-` <- base::`<<-`
[08:28:09.804]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.804]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.804]                   3L)]
[08:28:09.804]             }
[08:28:09.804]             function(cond) {
[08:28:09.804]                 is_error <- inherits(cond, "error")
[08:28:09.804]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.804]                   NULL)
[08:28:09.804]                 if (is_error) {
[08:28:09.804]                   sessionInformation <- function() {
[08:28:09.804]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.804]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.804]                       search = base::search(), system = base::Sys.info())
[08:28:09.804]                   }
[08:28:09.804]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.804]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.804]                     cond$call), session = sessionInformation(), 
[08:28:09.804]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.804]                   signalCondition(cond)
[08:28:09.804]                 }
[08:28:09.804]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.804]                 "immediateCondition"))) {
[08:28:09.804]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.804]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.804]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.804]                   if (TRUE && !signal) {
[08:28:09.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.804]                     {
[08:28:09.804]                       inherits <- base::inherits
[08:28:09.804]                       invokeRestart <- base::invokeRestart
[08:28:09.804]                       is.null <- base::is.null
[08:28:09.804]                       muffled <- FALSE
[08:28:09.804]                       if (inherits(cond, "message")) {
[08:28:09.804]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.804]                         if (muffled) 
[08:28:09.804]                           invokeRestart("muffleMessage")
[08:28:09.804]                       }
[08:28:09.804]                       else if (inherits(cond, "warning")) {
[08:28:09.804]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.804]                         if (muffled) 
[08:28:09.804]                           invokeRestart("muffleWarning")
[08:28:09.804]                       }
[08:28:09.804]                       else if (inherits(cond, "condition")) {
[08:28:09.804]                         if (!is.null(pattern)) {
[08:28:09.804]                           computeRestarts <- base::computeRestarts
[08:28:09.804]                           grepl <- base::grepl
[08:28:09.804]                           restarts <- computeRestarts(cond)
[08:28:09.804]                           for (restart in restarts) {
[08:28:09.804]                             name <- restart$name
[08:28:09.804]                             if (is.null(name)) 
[08:28:09.804]                               next
[08:28:09.804]                             if (!grepl(pattern, name)) 
[08:28:09.804]                               next
[08:28:09.804]                             invokeRestart(restart)
[08:28:09.804]                             muffled <- TRUE
[08:28:09.804]                             break
[08:28:09.804]                           }
[08:28:09.804]                         }
[08:28:09.804]                       }
[08:28:09.804]                       invisible(muffled)
[08:28:09.804]                     }
[08:28:09.804]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.804]                   }
[08:28:09.804]                 }
[08:28:09.804]                 else {
[08:28:09.804]                   if (TRUE) {
[08:28:09.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.804]                     {
[08:28:09.804]                       inherits <- base::inherits
[08:28:09.804]                       invokeRestart <- base::invokeRestart
[08:28:09.804]                       is.null <- base::is.null
[08:28:09.804]                       muffled <- FALSE
[08:28:09.804]                       if (inherits(cond, "message")) {
[08:28:09.804]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.804]                         if (muffled) 
[08:28:09.804]                           invokeRestart("muffleMessage")
[08:28:09.804]                       }
[08:28:09.804]                       else if (inherits(cond, "warning")) {
[08:28:09.804]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.804]                         if (muffled) 
[08:28:09.804]                           invokeRestart("muffleWarning")
[08:28:09.804]                       }
[08:28:09.804]                       else if (inherits(cond, "condition")) {
[08:28:09.804]                         if (!is.null(pattern)) {
[08:28:09.804]                           computeRestarts <- base::computeRestarts
[08:28:09.804]                           grepl <- base::grepl
[08:28:09.804]                           restarts <- computeRestarts(cond)
[08:28:09.804]                           for (restart in restarts) {
[08:28:09.804]                             name <- restart$name
[08:28:09.804]                             if (is.null(name)) 
[08:28:09.804]                               next
[08:28:09.804]                             if (!grepl(pattern, name)) 
[08:28:09.804]                               next
[08:28:09.804]                             invokeRestart(restart)
[08:28:09.804]                             muffled <- TRUE
[08:28:09.804]                             break
[08:28:09.804]                           }
[08:28:09.804]                         }
[08:28:09.804]                       }
[08:28:09.804]                       invisible(muffled)
[08:28:09.804]                     }
[08:28:09.804]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.804]                   }
[08:28:09.804]                 }
[08:28:09.804]             }
[08:28:09.804]         }))
[08:28:09.804]     }, error = function(ex) {
[08:28:09.804]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.804]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.804]                 ...future.rng), started = ...future.startTime, 
[08:28:09.804]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.804]             version = "1.8"), class = "FutureResult")
[08:28:09.804]     }, finally = {
[08:28:09.804]         if (!identical(...future.workdir, getwd())) 
[08:28:09.804]             setwd(...future.workdir)
[08:28:09.804]         {
[08:28:09.804]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.804]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.804]             }
[08:28:09.804]             base::options(...future.oldOptions)
[08:28:09.804]             if (.Platform$OS.type == "windows") {
[08:28:09.804]                 old_names <- names(...future.oldEnvVars)
[08:28:09.804]                 envs <- base::Sys.getenv()
[08:28:09.804]                 names <- names(envs)
[08:28:09.804]                 common <- intersect(names, old_names)
[08:28:09.804]                 added <- setdiff(names, old_names)
[08:28:09.804]                 removed <- setdiff(old_names, names)
[08:28:09.804]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.804]                   envs[common]]
[08:28:09.804]                 NAMES <- toupper(changed)
[08:28:09.804]                 args <- list()
[08:28:09.804]                 for (kk in seq_along(NAMES)) {
[08:28:09.804]                   name <- changed[[kk]]
[08:28:09.804]                   NAME <- NAMES[[kk]]
[08:28:09.804]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.804]                     next
[08:28:09.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.804]                 }
[08:28:09.804]                 NAMES <- toupper(added)
[08:28:09.804]                 for (kk in seq_along(NAMES)) {
[08:28:09.804]                   name <- added[[kk]]
[08:28:09.804]                   NAME <- NAMES[[kk]]
[08:28:09.804]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.804]                     next
[08:28:09.804]                   args[[name]] <- ""
[08:28:09.804]                 }
[08:28:09.804]                 NAMES <- toupper(removed)
[08:28:09.804]                 for (kk in seq_along(NAMES)) {
[08:28:09.804]                   name <- removed[[kk]]
[08:28:09.804]                   NAME <- NAMES[[kk]]
[08:28:09.804]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.804]                     next
[08:28:09.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.804]                 }
[08:28:09.804]                 if (length(args) > 0) 
[08:28:09.804]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.804]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.804]             }
[08:28:09.804]             else {
[08:28:09.804]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.804]             }
[08:28:09.804]             {
[08:28:09.804]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.804]                   0L) {
[08:28:09.804]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.804]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.804]                   base::options(opts)
[08:28:09.804]                 }
[08:28:09.804]                 {
[08:28:09.804]                   {
[08:28:09.804]                     NULL
[08:28:09.804]                     RNGkind("Mersenne-Twister")
[08:28:09.804]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:09.804]                       inherits = FALSE)
[08:28:09.804]                   }
[08:28:09.804]                   options(future.plan = NULL)
[08:28:09.804]                   if (is.na(NA_character_)) 
[08:28:09.804]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.804]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.804]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.804]                     .init = FALSE)
[08:28:09.804]                 }
[08:28:09.804]             }
[08:28:09.804]         }
[08:28:09.804]     })
[08:28:09.804]     if (TRUE) {
[08:28:09.804]         base::sink(type = "output", split = FALSE)
[08:28:09.804]         if (TRUE) {
[08:28:09.804]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.804]         }
[08:28:09.804]         else {
[08:28:09.804]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.804]         }
[08:28:09.804]         base::close(...future.stdout)
[08:28:09.804]         ...future.stdout <- NULL
[08:28:09.804]     }
[08:28:09.804]     ...future.result$conditions <- ...future.conditions
[08:28:09.804]     ...future.result$finished <- base::Sys.time()
[08:28:09.804]     ...future.result
[08:28:09.804] }
[08:28:09.806] assign_globals() ...
[08:28:09.806] List of 2
[08:28:09.806]  $ x   : list()
[08:28:09.806]  $ name: chr "a"
[08:28:09.806]  - attr(*, "where")=List of 2
[08:28:09.806]   ..$ x   :<environment: R_EmptyEnv> 
[08:28:09.806]   ..$ name:<environment: R_EmptyEnv> 
[08:28:09.806]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.806]  - attr(*, "resolved")= logi TRUE
[08:28:09.806]  - attr(*, "total_size")= num 71
[08:28:09.806]  - attr(*, "already-done")= logi TRUE
[08:28:09.808] - copied ‘x’ to environment
[08:28:09.808] - copied ‘name’ to environment
[08:28:09.808] assign_globals() ... done
[08:28:09.809] plan(): Setting new future strategy stack:
[08:28:09.809] List of future strategies:
[08:28:09.809] 1. sequential:
[08:28:09.809]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.809]    - tweaked: FALSE
[08:28:09.809]    - call: NULL
[08:28:09.809] plan(): nbrOfWorkers() = 1
[08:28:09.810] plan(): Setting new future strategy stack:
[08:28:09.810] List of future strategies:
[08:28:09.810] 1. sequential:
[08:28:09.810]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.810]    - tweaked: FALSE
[08:28:09.810]    - call: plan(strategy)
[08:28:09.810] plan(): nbrOfWorkers() = 1
[08:28:09.811] SequentialFuture started (and completed)
[08:28:09.811] - Launch lazy future ... done
[08:28:09.811] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- plan('multicore') ...
[08:28:09.817] plan(): Setting new future strategy stack:
[08:28:09.817] List of future strategies:
[08:28:09.817] 1. multicore:
[08:28:09.817]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:09.817]    - tweaked: FALSE
[08:28:09.817]    - call: plan(strategy)
[08:28:09.819] plan(): nbrOfWorkers() = 2
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.819] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.819] Searching for globals...
[08:28:09.821] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.821] Searching for globals ... DONE
[08:28:09.821] Resolving globals: TRUE
[08:28:09.821] Resolving any globals that are futures ...
[08:28:09.821] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.821] Resolving any globals that are futures ... DONE
[08:28:09.822] Resolving futures part of globals (recursively) ...
[08:28:09.822] resolve() on list ...
[08:28:09.822]  recursive: 99
[08:28:09.822]  length: 1
[08:28:09.822]  elements: ‘x’
[08:28:09.822]  length: 0 (resolved future 1)
[08:28:09.823] resolve() on list ... DONE
[08:28:09.823] - globals: [1] ‘x’
[08:28:09.824] Resolving futures part of globals (recursively) ... DONE
[08:28:09.824] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.825] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.825] - globals: [1] ‘x’
[08:28:09.825] 
[08:28:09.825] getGlobalsAndPackages() ... DONE
[08:28:09.825] run() for ‘Future’ ...
[08:28:09.825] - state: ‘created’
[08:28:09.825] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:09.827] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:09.827] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:09.827]   - Field: ‘label’
[08:28:09.827]   - Field: ‘local’
[08:28:09.827]   - Field: ‘owner’
[08:28:09.827]   - Field: ‘envir’
[08:28:09.827]   - Field: ‘workers’
[08:28:09.828]   - Field: ‘packages’
[08:28:09.828]   - Field: ‘gc’
[08:28:09.828]   - Field: ‘job’
[08:28:09.828]   - Field: ‘conditions’
[08:28:09.828]   - Field: ‘expr’
[08:28:09.828]   - Field: ‘uuid’
[08:28:09.828]   - Field: ‘seed’
[08:28:09.828]   - Field: ‘version’
[08:28:09.828]   - Field: ‘result’
[08:28:09.828]   - Field: ‘asynchronous’
[08:28:09.828]   - Field: ‘calls’
[08:28:09.828]   - Field: ‘globals’
[08:28:09.828]   - Field: ‘stdout’
[08:28:09.829]   - Field: ‘earlySignal’
[08:28:09.829]   - Field: ‘lazy’
[08:28:09.829]   - Field: ‘state’
[08:28:09.829] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:09.829] - Launch lazy future ...
[08:28:09.830] Packages needed by the future expression (n = 0): <none>
[08:28:09.830] Packages needed by future strategies (n = 0): <none>
[08:28:09.830] {
[08:28:09.830]     {
[08:28:09.830]         {
[08:28:09.830]             ...future.startTime <- base::Sys.time()
[08:28:09.830]             {
[08:28:09.830]                 {
[08:28:09.830]                   {
[08:28:09.830]                     {
[08:28:09.830]                       base::local({
[08:28:09.830]                         has_future <- base::requireNamespace("future", 
[08:28:09.830]                           quietly = TRUE)
[08:28:09.830]                         if (has_future) {
[08:28:09.830]                           ns <- base::getNamespace("future")
[08:28:09.830]                           version <- ns[[".package"]][["version"]]
[08:28:09.830]                           if (is.null(version)) 
[08:28:09.830]                             version <- utils::packageVersion("future")
[08:28:09.830]                         }
[08:28:09.830]                         else {
[08:28:09.830]                           version <- NULL
[08:28:09.830]                         }
[08:28:09.830]                         if (!has_future || version < "1.8.0") {
[08:28:09.830]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.830]                             "", base::R.version$version.string), 
[08:28:09.830]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.830]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.830]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.830]                               "release", "version")], collapse = " "), 
[08:28:09.830]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.830]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.830]                             info)
[08:28:09.830]                           info <- base::paste(info, collapse = "; ")
[08:28:09.830]                           if (!has_future) {
[08:28:09.830]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.830]                               info)
[08:28:09.830]                           }
[08:28:09.830]                           else {
[08:28:09.830]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.830]                               info, version)
[08:28:09.830]                           }
[08:28:09.830]                           base::stop(msg)
[08:28:09.830]                         }
[08:28:09.830]                       })
[08:28:09.830]                     }
[08:28:09.830]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.830]                     base::options(mc.cores = 1L)
[08:28:09.830]                   }
[08:28:09.830]                   ...future.strategy.old <- future::plan("list")
[08:28:09.830]                   options(future.plan = NULL)
[08:28:09.830]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.830]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.830]                 }
[08:28:09.830]                 ...future.workdir <- getwd()
[08:28:09.830]             }
[08:28:09.830]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.830]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.830]         }
[08:28:09.830]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.830]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.830]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.830]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.830]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.830]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.830]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.830]             base::names(...future.oldOptions))
[08:28:09.830]     }
[08:28:09.830]     if (FALSE) {
[08:28:09.830]     }
[08:28:09.830]     else {
[08:28:09.830]         if (TRUE) {
[08:28:09.830]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.830]                 open = "w")
[08:28:09.830]         }
[08:28:09.830]         else {
[08:28:09.830]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.830]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.830]         }
[08:28:09.830]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.830]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.830]             base::sink(type = "output", split = FALSE)
[08:28:09.830]             base::close(...future.stdout)
[08:28:09.830]         }, add = TRUE)
[08:28:09.830]     }
[08:28:09.830]     ...future.frame <- base::sys.nframe()
[08:28:09.830]     ...future.conditions <- base::list()
[08:28:09.830]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.830]     if (FALSE) {
[08:28:09.830]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.830]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.830]     }
[08:28:09.830]     ...future.result <- base::tryCatch({
[08:28:09.830]         base::withCallingHandlers({
[08:28:09.830]             ...future.value <- base::withVisible(base::local({
[08:28:09.830]                 withCallingHandlers({
[08:28:09.830]                   {
[08:28:09.830]                     x$a <- 1
[08:28:09.830]                     x
[08:28:09.830]                   }
[08:28:09.830]                 }, immediateCondition = function(cond) {
[08:28:09.830]                   save_rds <- function (object, pathname, ...) 
[08:28:09.830]                   {
[08:28:09.830]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:09.830]                     if (file_test("-f", pathname_tmp)) {
[08:28:09.830]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.830]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:09.830]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.830]                         fi_tmp[["mtime"]])
[08:28:09.830]                     }
[08:28:09.830]                     tryCatch({
[08:28:09.830]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:09.830]                     }, error = function(ex) {
[08:28:09.830]                       msg <- conditionMessage(ex)
[08:28:09.830]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.830]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:09.830]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.830]                         fi_tmp[["mtime"]], msg)
[08:28:09.830]                       ex$message <- msg
[08:28:09.830]                       stop(ex)
[08:28:09.830]                     })
[08:28:09.830]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:09.830]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:09.830]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:09.830]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.830]                       fi <- file.info(pathname)
[08:28:09.830]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:09.830]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.830]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:09.830]                         fi[["size"]], fi[["mtime"]])
[08:28:09.830]                       stop(msg)
[08:28:09.830]                     }
[08:28:09.830]                     invisible(pathname)
[08:28:09.830]                   }
[08:28:09.830]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:09.830]                     rootPath = tempdir()) 
[08:28:09.830]                   {
[08:28:09.830]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:09.830]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:09.830]                       tmpdir = path, fileext = ".rds")
[08:28:09.830]                     save_rds(obj, file)
[08:28:09.830]                   }
[08:28:09.830]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:09.830]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.830]                   {
[08:28:09.830]                     inherits <- base::inherits
[08:28:09.830]                     invokeRestart <- base::invokeRestart
[08:28:09.830]                     is.null <- base::is.null
[08:28:09.830]                     muffled <- FALSE
[08:28:09.830]                     if (inherits(cond, "message")) {
[08:28:09.830]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.830]                       if (muffled) 
[08:28:09.830]                         invokeRestart("muffleMessage")
[08:28:09.830]                     }
[08:28:09.830]                     else if (inherits(cond, "warning")) {
[08:28:09.830]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.830]                       if (muffled) 
[08:28:09.830]                         invokeRestart("muffleWarning")
[08:28:09.830]                     }
[08:28:09.830]                     else if (inherits(cond, "condition")) {
[08:28:09.830]                       if (!is.null(pattern)) {
[08:28:09.830]                         computeRestarts <- base::computeRestarts
[08:28:09.830]                         grepl <- base::grepl
[08:28:09.830]                         restarts <- computeRestarts(cond)
[08:28:09.830]                         for (restart in restarts) {
[08:28:09.830]                           name <- restart$name
[08:28:09.830]                           if (is.null(name)) 
[08:28:09.830]                             next
[08:28:09.830]                           if (!grepl(pattern, name)) 
[08:28:09.830]                             next
[08:28:09.830]                           invokeRestart(restart)
[08:28:09.830]                           muffled <- TRUE
[08:28:09.830]                           break
[08:28:09.830]                         }
[08:28:09.830]                       }
[08:28:09.830]                     }
[08:28:09.830]                     invisible(muffled)
[08:28:09.830]                   }
[08:28:09.830]                   muffleCondition(cond)
[08:28:09.830]                 })
[08:28:09.830]             }))
[08:28:09.830]             future::FutureResult(value = ...future.value$value, 
[08:28:09.830]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.830]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.830]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.830]                     ...future.globalenv.names))
[08:28:09.830]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.830]         }, condition = base::local({
[08:28:09.830]             c <- base::c
[08:28:09.830]             inherits <- base::inherits
[08:28:09.830]             invokeRestart <- base::invokeRestart
[08:28:09.830]             length <- base::length
[08:28:09.830]             list <- base::list
[08:28:09.830]             seq.int <- base::seq.int
[08:28:09.830]             signalCondition <- base::signalCondition
[08:28:09.830]             sys.calls <- base::sys.calls
[08:28:09.830]             `[[` <- base::`[[`
[08:28:09.830]             `+` <- base::`+`
[08:28:09.830]             `<<-` <- base::`<<-`
[08:28:09.830]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.830]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.830]                   3L)]
[08:28:09.830]             }
[08:28:09.830]             function(cond) {
[08:28:09.830]                 is_error <- inherits(cond, "error")
[08:28:09.830]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.830]                   NULL)
[08:28:09.830]                 if (is_error) {
[08:28:09.830]                   sessionInformation <- function() {
[08:28:09.830]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.830]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.830]                       search = base::search(), system = base::Sys.info())
[08:28:09.830]                   }
[08:28:09.830]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.830]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.830]                     cond$call), session = sessionInformation(), 
[08:28:09.830]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.830]                   signalCondition(cond)
[08:28:09.830]                 }
[08:28:09.830]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.830]                 "immediateCondition"))) {
[08:28:09.830]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.830]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.830]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.830]                   if (TRUE && !signal) {
[08:28:09.830]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.830]                     {
[08:28:09.830]                       inherits <- base::inherits
[08:28:09.830]                       invokeRestart <- base::invokeRestart
[08:28:09.830]                       is.null <- base::is.null
[08:28:09.830]                       muffled <- FALSE
[08:28:09.830]                       if (inherits(cond, "message")) {
[08:28:09.830]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.830]                         if (muffled) 
[08:28:09.830]                           invokeRestart("muffleMessage")
[08:28:09.830]                       }
[08:28:09.830]                       else if (inherits(cond, "warning")) {
[08:28:09.830]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.830]                         if (muffled) 
[08:28:09.830]                           invokeRestart("muffleWarning")
[08:28:09.830]                       }
[08:28:09.830]                       else if (inherits(cond, "condition")) {
[08:28:09.830]                         if (!is.null(pattern)) {
[08:28:09.830]                           computeRestarts <- base::computeRestarts
[08:28:09.830]                           grepl <- base::grepl
[08:28:09.830]                           restarts <- computeRestarts(cond)
[08:28:09.830]                           for (restart in restarts) {
[08:28:09.830]                             name <- restart$name
[08:28:09.830]                             if (is.null(name)) 
[08:28:09.830]                               next
[08:28:09.830]                             if (!grepl(pattern, name)) 
[08:28:09.830]                               next
[08:28:09.830]                             invokeRestart(restart)
[08:28:09.830]                             muffled <- TRUE
[08:28:09.830]                             break
[08:28:09.830]                           }
[08:28:09.830]                         }
[08:28:09.830]                       }
[08:28:09.830]                       invisible(muffled)
[08:28:09.830]                     }
[08:28:09.830]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.830]                   }
[08:28:09.830]                 }
[08:28:09.830]                 else {
[08:28:09.830]                   if (TRUE) {
[08:28:09.830]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.830]                     {
[08:28:09.830]                       inherits <- base::inherits
[08:28:09.830]                       invokeRestart <- base::invokeRestart
[08:28:09.830]                       is.null <- base::is.null
[08:28:09.830]                       muffled <- FALSE
[08:28:09.830]                       if (inherits(cond, "message")) {
[08:28:09.830]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.830]                         if (muffled) 
[08:28:09.830]                           invokeRestart("muffleMessage")
[08:28:09.830]                       }
[08:28:09.830]                       else if (inherits(cond, "warning")) {
[08:28:09.830]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.830]                         if (muffled) 
[08:28:09.830]                           invokeRestart("muffleWarning")
[08:28:09.830]                       }
[08:28:09.830]                       else if (inherits(cond, "condition")) {
[08:28:09.830]                         if (!is.null(pattern)) {
[08:28:09.830]                           computeRestarts <- base::computeRestarts
[08:28:09.830]                           grepl <- base::grepl
[08:28:09.830]                           restarts <- computeRestarts(cond)
[08:28:09.830]                           for (restart in restarts) {
[08:28:09.830]                             name <- restart$name
[08:28:09.830]                             if (is.null(name)) 
[08:28:09.830]                               next
[08:28:09.830]                             if (!grepl(pattern, name)) 
[08:28:09.830]                               next
[08:28:09.830]                             invokeRestart(restart)
[08:28:09.830]                             muffled <- TRUE
[08:28:09.830]                             break
[08:28:09.830]                           }
[08:28:09.830]                         }
[08:28:09.830]                       }
[08:28:09.830]                       invisible(muffled)
[08:28:09.830]                     }
[08:28:09.830]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.830]                   }
[08:28:09.830]                 }
[08:28:09.830]             }
[08:28:09.830]         }))
[08:28:09.830]     }, error = function(ex) {
[08:28:09.830]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.830]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.830]                 ...future.rng), started = ...future.startTime, 
[08:28:09.830]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.830]             version = "1.8"), class = "FutureResult")
[08:28:09.830]     }, finally = {
[08:28:09.830]         if (!identical(...future.workdir, getwd())) 
[08:28:09.830]             setwd(...future.workdir)
[08:28:09.830]         {
[08:28:09.830]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.830]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.830]             }
[08:28:09.830]             base::options(...future.oldOptions)
[08:28:09.830]             if (.Platform$OS.type == "windows") {
[08:28:09.830]                 old_names <- names(...future.oldEnvVars)
[08:28:09.830]                 envs <- base::Sys.getenv()
[08:28:09.830]                 names <- names(envs)
[08:28:09.830]                 common <- intersect(names, old_names)
[08:28:09.830]                 added <- setdiff(names, old_names)
[08:28:09.830]                 removed <- setdiff(old_names, names)
[08:28:09.830]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.830]                   envs[common]]
[08:28:09.830]                 NAMES <- toupper(changed)
[08:28:09.830]                 args <- list()
[08:28:09.830]                 for (kk in seq_along(NAMES)) {
[08:28:09.830]                   name <- changed[[kk]]
[08:28:09.830]                   NAME <- NAMES[[kk]]
[08:28:09.830]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.830]                     next
[08:28:09.830]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.830]                 }
[08:28:09.830]                 NAMES <- toupper(added)
[08:28:09.830]                 for (kk in seq_along(NAMES)) {
[08:28:09.830]                   name <- added[[kk]]
[08:28:09.830]                   NAME <- NAMES[[kk]]
[08:28:09.830]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.830]                     next
[08:28:09.830]                   args[[name]] <- ""
[08:28:09.830]                 }
[08:28:09.830]                 NAMES <- toupper(removed)
[08:28:09.830]                 for (kk in seq_along(NAMES)) {
[08:28:09.830]                   name <- removed[[kk]]
[08:28:09.830]                   NAME <- NAMES[[kk]]
[08:28:09.830]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.830]                     next
[08:28:09.830]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.830]                 }
[08:28:09.830]                 if (length(args) > 0) 
[08:28:09.830]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.830]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.830]             }
[08:28:09.830]             else {
[08:28:09.830]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.830]             }
[08:28:09.830]             {
[08:28:09.830]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.830]                   0L) {
[08:28:09.830]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.830]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.830]                   base::options(opts)
[08:28:09.830]                 }
[08:28:09.830]                 {
[08:28:09.830]                   {
[08:28:09.830]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.830]                     NULL
[08:28:09.830]                   }
[08:28:09.830]                   options(future.plan = NULL)
[08:28:09.830]                   if (is.na(NA_character_)) 
[08:28:09.830]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.830]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.830]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.830]                     .init = FALSE)
[08:28:09.830]                 }
[08:28:09.830]             }
[08:28:09.830]         }
[08:28:09.830]     })
[08:28:09.830]     if (TRUE) {
[08:28:09.830]         base::sink(type = "output", split = FALSE)
[08:28:09.830]         if (TRUE) {
[08:28:09.830]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.830]         }
[08:28:09.830]         else {
[08:28:09.830]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.830]         }
[08:28:09.830]         base::close(...future.stdout)
[08:28:09.830]         ...future.stdout <- NULL
[08:28:09.830]     }
[08:28:09.830]     ...future.result$conditions <- ...future.conditions
[08:28:09.830]     ...future.result$finished <- base::Sys.time()
[08:28:09.830]     ...future.result
[08:28:09.830] }
[08:28:09.833] assign_globals() ...
[08:28:09.833] List of 1
[08:28:09.833]  $ x: list()
[08:28:09.833]  - attr(*, "where")=List of 1
[08:28:09.833]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.833]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.833]  - attr(*, "resolved")= logi TRUE
[08:28:09.833]  - attr(*, "total_size")= num 31
[08:28:09.833]  - attr(*, "already-done")= logi TRUE
[08:28:09.835] - copied ‘x’ to environment
[08:28:09.835] assign_globals() ... done
[08:28:09.835] requestCore(): workers = 2
[08:28:09.838] MulticoreFuture started
[08:28:09.838] - Launch lazy future ... done
[08:28:09.838] plan(): Setting new future strategy stack:
[08:28:09.838] run() for ‘MulticoreFuture’ ... done
[08:28:09.839] List of future strategies:
[08:28:09.839] 1. sequential:
[08:28:09.839]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.839]    - tweaked: FALSE
[08:28:09.839]    - call: NULL
[08:28:09.840] result() for MulticoreFuture ...
[08:28:09.840] plan(): nbrOfWorkers() = 1
[08:28:09.842] plan(): Setting new future strategy stack:
[08:28:09.842] List of future strategies:
[08:28:09.842] 1. multicore:
[08:28:09.842]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:09.842]    - tweaked: FALSE
[08:28:09.842]    - call: plan(strategy)
[08:28:09.845] plan(): nbrOfWorkers() = 2
[08:28:09.849] result() for MulticoreFuture ...
[08:28:09.850] result() for MulticoreFuture ... done
[08:28:09.850] result() for MulticoreFuture ... done
[08:28:09.850] result() for MulticoreFuture ...
[08:28:09.850] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.850] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.851] Searching for globals...
[08:28:09.853] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.853] Searching for globals ... DONE
[08:28:09.853] Resolving globals: TRUE
[08:28:09.854] Resolving any globals that are futures ...
[08:28:09.854] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.854] Resolving any globals that are futures ... DONE
[08:28:09.854] Resolving futures part of globals (recursively) ...
[08:28:09.855] resolve() on list ...
[08:28:09.855]  recursive: 99
[08:28:09.855]  length: 1
[08:28:09.855]  elements: ‘x’
[08:28:09.855]  length: 0 (resolved future 1)
[08:28:09.855] resolve() on list ... DONE
[08:28:09.855] - globals: [1] ‘x’
[08:28:09.855] Resolving futures part of globals (recursively) ... DONE
[08:28:09.856] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.856] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.856] - globals: [1] ‘x’
[08:28:09.856] 
[08:28:09.856] getGlobalsAndPackages() ... DONE
[08:28:09.857] run() for ‘Future’ ...
[08:28:09.857] - state: ‘created’
[08:28:09.857] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:09.859] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:09.859] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:09.859]   - Field: ‘label’
[08:28:09.859]   - Field: ‘local’
[08:28:09.859]   - Field: ‘owner’
[08:28:09.860]   - Field: ‘envir’
[08:28:09.860]   - Field: ‘workers’
[08:28:09.860]   - Field: ‘packages’
[08:28:09.860]   - Field: ‘gc’
[08:28:09.860]   - Field: ‘job’
[08:28:09.860]   - Field: ‘conditions’
[08:28:09.860]   - Field: ‘expr’
[08:28:09.860]   - Field: ‘uuid’
[08:28:09.860]   - Field: ‘seed’
[08:28:09.861]   - Field: ‘version’
[08:28:09.861]   - Field: ‘result’
[08:28:09.861]   - Field: ‘asynchronous’
[08:28:09.861]   - Field: ‘calls’
[08:28:09.861]   - Field: ‘globals’
[08:28:09.861]   - Field: ‘stdout’
[08:28:09.861]   - Field: ‘earlySignal’
[08:28:09.861]   - Field: ‘lazy’
[08:28:09.861]   - Field: ‘state’
[08:28:09.861] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:09.862] - Launch lazy future ...
[08:28:09.862] Packages needed by the future expression (n = 0): <none>
[08:28:09.862] Packages needed by future strategies (n = 0): <none>
[08:28:09.863] {
[08:28:09.863]     {
[08:28:09.863]         {
[08:28:09.863]             ...future.startTime <- base::Sys.time()
[08:28:09.863]             {
[08:28:09.863]                 {
[08:28:09.863]                   {
[08:28:09.863]                     {
[08:28:09.863]                       base::local({
[08:28:09.863]                         has_future <- base::requireNamespace("future", 
[08:28:09.863]                           quietly = TRUE)
[08:28:09.863]                         if (has_future) {
[08:28:09.863]                           ns <- base::getNamespace("future")
[08:28:09.863]                           version <- ns[[".package"]][["version"]]
[08:28:09.863]                           if (is.null(version)) 
[08:28:09.863]                             version <- utils::packageVersion("future")
[08:28:09.863]                         }
[08:28:09.863]                         else {
[08:28:09.863]                           version <- NULL
[08:28:09.863]                         }
[08:28:09.863]                         if (!has_future || version < "1.8.0") {
[08:28:09.863]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.863]                             "", base::R.version$version.string), 
[08:28:09.863]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.863]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.863]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.863]                               "release", "version")], collapse = " "), 
[08:28:09.863]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.863]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.863]                             info)
[08:28:09.863]                           info <- base::paste(info, collapse = "; ")
[08:28:09.863]                           if (!has_future) {
[08:28:09.863]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.863]                               info)
[08:28:09.863]                           }
[08:28:09.863]                           else {
[08:28:09.863]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.863]                               info, version)
[08:28:09.863]                           }
[08:28:09.863]                           base::stop(msg)
[08:28:09.863]                         }
[08:28:09.863]                       })
[08:28:09.863]                     }
[08:28:09.863]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.863]                     base::options(mc.cores = 1L)
[08:28:09.863]                   }
[08:28:09.863]                   ...future.strategy.old <- future::plan("list")
[08:28:09.863]                   options(future.plan = NULL)
[08:28:09.863]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.863]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.863]                 }
[08:28:09.863]                 ...future.workdir <- getwd()
[08:28:09.863]             }
[08:28:09.863]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.863]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.863]         }
[08:28:09.863]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.863]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.863]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.863]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.863]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.863]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.863]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.863]             base::names(...future.oldOptions))
[08:28:09.863]     }
[08:28:09.863]     if (FALSE) {
[08:28:09.863]     }
[08:28:09.863]     else {
[08:28:09.863]         if (TRUE) {
[08:28:09.863]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.863]                 open = "w")
[08:28:09.863]         }
[08:28:09.863]         else {
[08:28:09.863]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.863]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.863]         }
[08:28:09.863]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.863]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.863]             base::sink(type = "output", split = FALSE)
[08:28:09.863]             base::close(...future.stdout)
[08:28:09.863]         }, add = TRUE)
[08:28:09.863]     }
[08:28:09.863]     ...future.frame <- base::sys.nframe()
[08:28:09.863]     ...future.conditions <- base::list()
[08:28:09.863]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.863]     if (FALSE) {
[08:28:09.863]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.863]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.863]     }
[08:28:09.863]     ...future.result <- base::tryCatch({
[08:28:09.863]         base::withCallingHandlers({
[08:28:09.863]             ...future.value <- base::withVisible(base::local({
[08:28:09.863]                 withCallingHandlers({
[08:28:09.863]                   {
[08:28:09.863]                     x$a <- 1
[08:28:09.863]                     x
[08:28:09.863]                   }
[08:28:09.863]                 }, immediateCondition = function(cond) {
[08:28:09.863]                   save_rds <- function (object, pathname, ...) 
[08:28:09.863]                   {
[08:28:09.863]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:09.863]                     if (file_test("-f", pathname_tmp)) {
[08:28:09.863]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.863]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:09.863]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.863]                         fi_tmp[["mtime"]])
[08:28:09.863]                     }
[08:28:09.863]                     tryCatch({
[08:28:09.863]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:09.863]                     }, error = function(ex) {
[08:28:09.863]                       msg <- conditionMessage(ex)
[08:28:09.863]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.863]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:09.863]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.863]                         fi_tmp[["mtime"]], msg)
[08:28:09.863]                       ex$message <- msg
[08:28:09.863]                       stop(ex)
[08:28:09.863]                     })
[08:28:09.863]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:09.863]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:09.863]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:09.863]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.863]                       fi <- file.info(pathname)
[08:28:09.863]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:09.863]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.863]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:09.863]                         fi[["size"]], fi[["mtime"]])
[08:28:09.863]                       stop(msg)
[08:28:09.863]                     }
[08:28:09.863]                     invisible(pathname)
[08:28:09.863]                   }
[08:28:09.863]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:09.863]                     rootPath = tempdir()) 
[08:28:09.863]                   {
[08:28:09.863]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:09.863]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:09.863]                       tmpdir = path, fileext = ".rds")
[08:28:09.863]                     save_rds(obj, file)
[08:28:09.863]                   }
[08:28:09.863]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:09.863]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.863]                   {
[08:28:09.863]                     inherits <- base::inherits
[08:28:09.863]                     invokeRestart <- base::invokeRestart
[08:28:09.863]                     is.null <- base::is.null
[08:28:09.863]                     muffled <- FALSE
[08:28:09.863]                     if (inherits(cond, "message")) {
[08:28:09.863]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.863]                       if (muffled) 
[08:28:09.863]                         invokeRestart("muffleMessage")
[08:28:09.863]                     }
[08:28:09.863]                     else if (inherits(cond, "warning")) {
[08:28:09.863]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.863]                       if (muffled) 
[08:28:09.863]                         invokeRestart("muffleWarning")
[08:28:09.863]                     }
[08:28:09.863]                     else if (inherits(cond, "condition")) {
[08:28:09.863]                       if (!is.null(pattern)) {
[08:28:09.863]                         computeRestarts <- base::computeRestarts
[08:28:09.863]                         grepl <- base::grepl
[08:28:09.863]                         restarts <- computeRestarts(cond)
[08:28:09.863]                         for (restart in restarts) {
[08:28:09.863]                           name <- restart$name
[08:28:09.863]                           if (is.null(name)) 
[08:28:09.863]                             next
[08:28:09.863]                           if (!grepl(pattern, name)) 
[08:28:09.863]                             next
[08:28:09.863]                           invokeRestart(restart)
[08:28:09.863]                           muffled <- TRUE
[08:28:09.863]                           break
[08:28:09.863]                         }
[08:28:09.863]                       }
[08:28:09.863]                     }
[08:28:09.863]                     invisible(muffled)
[08:28:09.863]                   }
[08:28:09.863]                   muffleCondition(cond)
[08:28:09.863]                 })
[08:28:09.863]             }))
[08:28:09.863]             future::FutureResult(value = ...future.value$value, 
[08:28:09.863]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.863]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.863]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.863]                     ...future.globalenv.names))
[08:28:09.863]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.863]         }, condition = base::local({
[08:28:09.863]             c <- base::c
[08:28:09.863]             inherits <- base::inherits
[08:28:09.863]             invokeRestart <- base::invokeRestart
[08:28:09.863]             length <- base::length
[08:28:09.863]             list <- base::list
[08:28:09.863]             seq.int <- base::seq.int
[08:28:09.863]             signalCondition <- base::signalCondition
[08:28:09.863]             sys.calls <- base::sys.calls
[08:28:09.863]             `[[` <- base::`[[`
[08:28:09.863]             `+` <- base::`+`
[08:28:09.863]             `<<-` <- base::`<<-`
[08:28:09.863]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.863]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.863]                   3L)]
[08:28:09.863]             }
[08:28:09.863]             function(cond) {
[08:28:09.863]                 is_error <- inherits(cond, "error")
[08:28:09.863]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.863]                   NULL)
[08:28:09.863]                 if (is_error) {
[08:28:09.863]                   sessionInformation <- function() {
[08:28:09.863]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.863]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.863]                       search = base::search(), system = base::Sys.info())
[08:28:09.863]                   }
[08:28:09.863]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.863]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.863]                     cond$call), session = sessionInformation(), 
[08:28:09.863]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.863]                   signalCondition(cond)
[08:28:09.863]                 }
[08:28:09.863]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.863]                 "immediateCondition"))) {
[08:28:09.863]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.863]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.863]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.863]                   if (TRUE && !signal) {
[08:28:09.863]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.863]                     {
[08:28:09.863]                       inherits <- base::inherits
[08:28:09.863]                       invokeRestart <- base::invokeRestart
[08:28:09.863]                       is.null <- base::is.null
[08:28:09.863]                       muffled <- FALSE
[08:28:09.863]                       if (inherits(cond, "message")) {
[08:28:09.863]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.863]                         if (muffled) 
[08:28:09.863]                           invokeRestart("muffleMessage")
[08:28:09.863]                       }
[08:28:09.863]                       else if (inherits(cond, "warning")) {
[08:28:09.863]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.863]                         if (muffled) 
[08:28:09.863]                           invokeRestart("muffleWarning")
[08:28:09.863]                       }
[08:28:09.863]                       else if (inherits(cond, "condition")) {
[08:28:09.863]                         if (!is.null(pattern)) {
[08:28:09.863]                           computeRestarts <- base::computeRestarts
[08:28:09.863]                           grepl <- base::grepl
[08:28:09.863]                           restarts <- computeRestarts(cond)
[08:28:09.863]                           for (restart in restarts) {
[08:28:09.863]                             name <- restart$name
[08:28:09.863]                             if (is.null(name)) 
[08:28:09.863]                               next
[08:28:09.863]                             if (!grepl(pattern, name)) 
[08:28:09.863]                               next
[08:28:09.863]                             invokeRestart(restart)
[08:28:09.863]                             muffled <- TRUE
[08:28:09.863]                             break
[08:28:09.863]                           }
[08:28:09.863]                         }
[08:28:09.863]                       }
[08:28:09.863]                       invisible(muffled)
[08:28:09.863]                     }
[08:28:09.863]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.863]                   }
[08:28:09.863]                 }
[08:28:09.863]                 else {
[08:28:09.863]                   if (TRUE) {
[08:28:09.863]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.863]                     {
[08:28:09.863]                       inherits <- base::inherits
[08:28:09.863]                       invokeRestart <- base::invokeRestart
[08:28:09.863]                       is.null <- base::is.null
[08:28:09.863]                       muffled <- FALSE
[08:28:09.863]                       if (inherits(cond, "message")) {
[08:28:09.863]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.863]                         if (muffled) 
[08:28:09.863]                           invokeRestart("muffleMessage")
[08:28:09.863]                       }
[08:28:09.863]                       else if (inherits(cond, "warning")) {
[08:28:09.863]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.863]                         if (muffled) 
[08:28:09.863]                           invokeRestart("muffleWarning")
[08:28:09.863]                       }
[08:28:09.863]                       else if (inherits(cond, "condition")) {
[08:28:09.863]                         if (!is.null(pattern)) {
[08:28:09.863]                           computeRestarts <- base::computeRestarts
[08:28:09.863]                           grepl <- base::grepl
[08:28:09.863]                           restarts <- computeRestarts(cond)
[08:28:09.863]                           for (restart in restarts) {
[08:28:09.863]                             name <- restart$name
[08:28:09.863]                             if (is.null(name)) 
[08:28:09.863]                               next
[08:28:09.863]                             if (!grepl(pattern, name)) 
[08:28:09.863]                               next
[08:28:09.863]                             invokeRestart(restart)
[08:28:09.863]                             muffled <- TRUE
[08:28:09.863]                             break
[08:28:09.863]                           }
[08:28:09.863]                         }
[08:28:09.863]                       }
[08:28:09.863]                       invisible(muffled)
[08:28:09.863]                     }
[08:28:09.863]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.863]                   }
[08:28:09.863]                 }
[08:28:09.863]             }
[08:28:09.863]         }))
[08:28:09.863]     }, error = function(ex) {
[08:28:09.863]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.863]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.863]                 ...future.rng), started = ...future.startTime, 
[08:28:09.863]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.863]             version = "1.8"), class = "FutureResult")
[08:28:09.863]     }, finally = {
[08:28:09.863]         if (!identical(...future.workdir, getwd())) 
[08:28:09.863]             setwd(...future.workdir)
[08:28:09.863]         {
[08:28:09.863]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.863]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.863]             }
[08:28:09.863]             base::options(...future.oldOptions)
[08:28:09.863]             if (.Platform$OS.type == "windows") {
[08:28:09.863]                 old_names <- names(...future.oldEnvVars)
[08:28:09.863]                 envs <- base::Sys.getenv()
[08:28:09.863]                 names <- names(envs)
[08:28:09.863]                 common <- intersect(names, old_names)
[08:28:09.863]                 added <- setdiff(names, old_names)
[08:28:09.863]                 removed <- setdiff(old_names, names)
[08:28:09.863]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.863]                   envs[common]]
[08:28:09.863]                 NAMES <- toupper(changed)
[08:28:09.863]                 args <- list()
[08:28:09.863]                 for (kk in seq_along(NAMES)) {
[08:28:09.863]                   name <- changed[[kk]]
[08:28:09.863]                   NAME <- NAMES[[kk]]
[08:28:09.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.863]                     next
[08:28:09.863]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.863]                 }
[08:28:09.863]                 NAMES <- toupper(added)
[08:28:09.863]                 for (kk in seq_along(NAMES)) {
[08:28:09.863]                   name <- added[[kk]]
[08:28:09.863]                   NAME <- NAMES[[kk]]
[08:28:09.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.863]                     next
[08:28:09.863]                   args[[name]] <- ""
[08:28:09.863]                 }
[08:28:09.863]                 NAMES <- toupper(removed)
[08:28:09.863]                 for (kk in seq_along(NAMES)) {
[08:28:09.863]                   name <- removed[[kk]]
[08:28:09.863]                   NAME <- NAMES[[kk]]
[08:28:09.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.863]                     next
[08:28:09.863]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.863]                 }
[08:28:09.863]                 if (length(args) > 0) 
[08:28:09.863]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.863]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.863]             }
[08:28:09.863]             else {
[08:28:09.863]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.863]             }
[08:28:09.863]             {
[08:28:09.863]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.863]                   0L) {
[08:28:09.863]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.863]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.863]                   base::options(opts)
[08:28:09.863]                 }
[08:28:09.863]                 {
[08:28:09.863]                   {
[08:28:09.863]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.863]                     NULL
[08:28:09.863]                   }
[08:28:09.863]                   options(future.plan = NULL)
[08:28:09.863]                   if (is.na(NA_character_)) 
[08:28:09.863]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.863]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.863]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.863]                     .init = FALSE)
[08:28:09.863]                 }
[08:28:09.863]             }
[08:28:09.863]         }
[08:28:09.863]     })
[08:28:09.863]     if (TRUE) {
[08:28:09.863]         base::sink(type = "output", split = FALSE)
[08:28:09.863]         if (TRUE) {
[08:28:09.863]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.863]         }
[08:28:09.863]         else {
[08:28:09.863]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.863]         }
[08:28:09.863]         base::close(...future.stdout)
[08:28:09.863]         ...future.stdout <- NULL
[08:28:09.863]     }
[08:28:09.863]     ...future.result$conditions <- ...future.conditions
[08:28:09.863]     ...future.result$finished <- base::Sys.time()
[08:28:09.863]     ...future.result
[08:28:09.863] }
[08:28:09.865] assign_globals() ...
[08:28:09.865] List of 1
[08:28:09.865]  $ x: list()
[08:28:09.865]  - attr(*, "where")=List of 1
[08:28:09.865]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.865]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.865]  - attr(*, "resolved")= logi TRUE
[08:28:09.865]  - attr(*, "total_size")= num 31
[08:28:09.865]  - attr(*, "already-done")= logi TRUE
[08:28:09.871] - copied ‘x’ to environment
[08:28:09.871] assign_globals() ... done
[08:28:09.871] requestCore(): workers = 2
[08:28:09.873] MulticoreFuture started
[08:28:09.874] - Launch lazy future ... done
[08:28:09.874] plan(): Setting new future strategy stack:
[08:28:09.874] run() for ‘MulticoreFuture’ ... done
[08:28:09.875] result() for MulticoreFuture ...
[08:28:09.874] List of future strategies:
[08:28:09.874] 1. sequential:
[08:28:09.874]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.874]    - tweaked: FALSE
[08:28:09.874]    - call: NULL
[08:28:09.876] plan(): nbrOfWorkers() = 1
[08:28:09.878] plan(): Setting new future strategy stack:
[08:28:09.878] List of future strategies:
[08:28:09.878] 1. multicore:
[08:28:09.878]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:09.878]    - tweaked: FALSE
[08:28:09.878]    - call: plan(strategy)
[08:28:09.882] plan(): nbrOfWorkers() = 2
[08:28:09.883] result() for MulticoreFuture ...
[08:28:09.883] result() for MulticoreFuture ... done
[08:28:09.883] result() for MulticoreFuture ... done
[08:28:09.883] result() for MulticoreFuture ...
[08:28:09.883] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.884] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.884] Searching for globals...
[08:28:09.887] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.887] Searching for globals ... DONE
[08:28:09.887] Resolving globals: TRUE
[08:28:09.888] Resolving any globals that are futures ...
[08:28:09.888] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.888] Resolving any globals that are futures ... DONE
[08:28:09.888] Resolving futures part of globals (recursively) ...
[08:28:09.889] resolve() on list ...
[08:28:09.889]  recursive: 99
[08:28:09.889]  length: 1
[08:28:09.889]  elements: ‘x’
[08:28:09.889]  length: 0 (resolved future 1)
[08:28:09.889] resolve() on list ... DONE
[08:28:09.889] - globals: [1] ‘x’
[08:28:09.889] Resolving futures part of globals (recursively) ... DONE
[08:28:09.890] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.890] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.890] - globals: [1] ‘x’
[08:28:09.890] 
[08:28:09.890] getGlobalsAndPackages() ... DONE
[08:28:09.891] run() for ‘Future’ ...
[08:28:09.891] - state: ‘created’
[08:28:09.891] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:09.893] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:09.893] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:09.893]   - Field: ‘label’
[08:28:09.893]   - Field: ‘local’
[08:28:09.894]   - Field: ‘owner’
[08:28:09.894]   - Field: ‘envir’
[08:28:09.894]   - Field: ‘workers’
[08:28:09.894]   - Field: ‘packages’
[08:28:09.894]   - Field: ‘gc’
[08:28:09.894]   - Field: ‘job’
[08:28:09.894]   - Field: ‘conditions’
[08:28:09.894]   - Field: ‘expr’
[08:28:09.894]   - Field: ‘uuid’
[08:28:09.895]   - Field: ‘seed’
[08:28:09.895]   - Field: ‘version’
[08:28:09.895]   - Field: ‘result’
[08:28:09.895]   - Field: ‘asynchronous’
[08:28:09.895]   - Field: ‘calls’
[08:28:09.895]   - Field: ‘globals’
[08:28:09.895]   - Field: ‘stdout’
[08:28:09.895]   - Field: ‘earlySignal’
[08:28:09.895]   - Field: ‘lazy’
[08:28:09.896]   - Field: ‘state’
[08:28:09.896] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:09.896] - Launch lazy future ...
[08:28:09.896] Packages needed by the future expression (n = 0): <none>
[08:28:09.896] Packages needed by future strategies (n = 0): <none>
[08:28:09.897] {
[08:28:09.897]     {
[08:28:09.897]         {
[08:28:09.897]             ...future.startTime <- base::Sys.time()
[08:28:09.897]             {
[08:28:09.897]                 {
[08:28:09.897]                   {
[08:28:09.897]                     {
[08:28:09.897]                       base::local({
[08:28:09.897]                         has_future <- base::requireNamespace("future", 
[08:28:09.897]                           quietly = TRUE)
[08:28:09.897]                         if (has_future) {
[08:28:09.897]                           ns <- base::getNamespace("future")
[08:28:09.897]                           version <- ns[[".package"]][["version"]]
[08:28:09.897]                           if (is.null(version)) 
[08:28:09.897]                             version <- utils::packageVersion("future")
[08:28:09.897]                         }
[08:28:09.897]                         else {
[08:28:09.897]                           version <- NULL
[08:28:09.897]                         }
[08:28:09.897]                         if (!has_future || version < "1.8.0") {
[08:28:09.897]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.897]                             "", base::R.version$version.string), 
[08:28:09.897]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.897]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.897]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.897]                               "release", "version")], collapse = " "), 
[08:28:09.897]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.897]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.897]                             info)
[08:28:09.897]                           info <- base::paste(info, collapse = "; ")
[08:28:09.897]                           if (!has_future) {
[08:28:09.897]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.897]                               info)
[08:28:09.897]                           }
[08:28:09.897]                           else {
[08:28:09.897]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.897]                               info, version)
[08:28:09.897]                           }
[08:28:09.897]                           base::stop(msg)
[08:28:09.897]                         }
[08:28:09.897]                       })
[08:28:09.897]                     }
[08:28:09.897]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.897]                     base::options(mc.cores = 1L)
[08:28:09.897]                   }
[08:28:09.897]                   ...future.strategy.old <- future::plan("list")
[08:28:09.897]                   options(future.plan = NULL)
[08:28:09.897]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.897]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.897]                 }
[08:28:09.897]                 ...future.workdir <- getwd()
[08:28:09.897]             }
[08:28:09.897]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.897]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.897]         }
[08:28:09.897]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.897]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.897]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.897]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.897]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.897]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.897]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.897]             base::names(...future.oldOptions))
[08:28:09.897]     }
[08:28:09.897]     if (FALSE) {
[08:28:09.897]     }
[08:28:09.897]     else {
[08:28:09.897]         if (TRUE) {
[08:28:09.897]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.897]                 open = "w")
[08:28:09.897]         }
[08:28:09.897]         else {
[08:28:09.897]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.897]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.897]         }
[08:28:09.897]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.897]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.897]             base::sink(type = "output", split = FALSE)
[08:28:09.897]             base::close(...future.stdout)
[08:28:09.897]         }, add = TRUE)
[08:28:09.897]     }
[08:28:09.897]     ...future.frame <- base::sys.nframe()
[08:28:09.897]     ...future.conditions <- base::list()
[08:28:09.897]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.897]     if (FALSE) {
[08:28:09.897]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.897]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.897]     }
[08:28:09.897]     ...future.result <- base::tryCatch({
[08:28:09.897]         base::withCallingHandlers({
[08:28:09.897]             ...future.value <- base::withVisible(base::local({
[08:28:09.897]                 withCallingHandlers({
[08:28:09.897]                   {
[08:28:09.897]                     x$a <- 1
[08:28:09.897]                     x
[08:28:09.897]                   }
[08:28:09.897]                 }, immediateCondition = function(cond) {
[08:28:09.897]                   save_rds <- function (object, pathname, ...) 
[08:28:09.897]                   {
[08:28:09.897]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:09.897]                     if (file_test("-f", pathname_tmp)) {
[08:28:09.897]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.897]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:09.897]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.897]                         fi_tmp[["mtime"]])
[08:28:09.897]                     }
[08:28:09.897]                     tryCatch({
[08:28:09.897]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:09.897]                     }, error = function(ex) {
[08:28:09.897]                       msg <- conditionMessage(ex)
[08:28:09.897]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.897]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:09.897]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.897]                         fi_tmp[["mtime"]], msg)
[08:28:09.897]                       ex$message <- msg
[08:28:09.897]                       stop(ex)
[08:28:09.897]                     })
[08:28:09.897]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:09.897]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:09.897]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:09.897]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.897]                       fi <- file.info(pathname)
[08:28:09.897]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:09.897]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.897]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:09.897]                         fi[["size"]], fi[["mtime"]])
[08:28:09.897]                       stop(msg)
[08:28:09.897]                     }
[08:28:09.897]                     invisible(pathname)
[08:28:09.897]                   }
[08:28:09.897]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:09.897]                     rootPath = tempdir()) 
[08:28:09.897]                   {
[08:28:09.897]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:09.897]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:09.897]                       tmpdir = path, fileext = ".rds")
[08:28:09.897]                     save_rds(obj, file)
[08:28:09.897]                   }
[08:28:09.897]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:09.897]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.897]                   {
[08:28:09.897]                     inherits <- base::inherits
[08:28:09.897]                     invokeRestart <- base::invokeRestart
[08:28:09.897]                     is.null <- base::is.null
[08:28:09.897]                     muffled <- FALSE
[08:28:09.897]                     if (inherits(cond, "message")) {
[08:28:09.897]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.897]                       if (muffled) 
[08:28:09.897]                         invokeRestart("muffleMessage")
[08:28:09.897]                     }
[08:28:09.897]                     else if (inherits(cond, "warning")) {
[08:28:09.897]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.897]                       if (muffled) 
[08:28:09.897]                         invokeRestart("muffleWarning")
[08:28:09.897]                     }
[08:28:09.897]                     else if (inherits(cond, "condition")) {
[08:28:09.897]                       if (!is.null(pattern)) {
[08:28:09.897]                         computeRestarts <- base::computeRestarts
[08:28:09.897]                         grepl <- base::grepl
[08:28:09.897]                         restarts <- computeRestarts(cond)
[08:28:09.897]                         for (restart in restarts) {
[08:28:09.897]                           name <- restart$name
[08:28:09.897]                           if (is.null(name)) 
[08:28:09.897]                             next
[08:28:09.897]                           if (!grepl(pattern, name)) 
[08:28:09.897]                             next
[08:28:09.897]                           invokeRestart(restart)
[08:28:09.897]                           muffled <- TRUE
[08:28:09.897]                           break
[08:28:09.897]                         }
[08:28:09.897]                       }
[08:28:09.897]                     }
[08:28:09.897]                     invisible(muffled)
[08:28:09.897]                   }
[08:28:09.897]                   muffleCondition(cond)
[08:28:09.897]                 })
[08:28:09.897]             }))
[08:28:09.897]             future::FutureResult(value = ...future.value$value, 
[08:28:09.897]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.897]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.897]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.897]                     ...future.globalenv.names))
[08:28:09.897]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.897]         }, condition = base::local({
[08:28:09.897]             c <- base::c
[08:28:09.897]             inherits <- base::inherits
[08:28:09.897]             invokeRestart <- base::invokeRestart
[08:28:09.897]             length <- base::length
[08:28:09.897]             list <- base::list
[08:28:09.897]             seq.int <- base::seq.int
[08:28:09.897]             signalCondition <- base::signalCondition
[08:28:09.897]             sys.calls <- base::sys.calls
[08:28:09.897]             `[[` <- base::`[[`
[08:28:09.897]             `+` <- base::`+`
[08:28:09.897]             `<<-` <- base::`<<-`
[08:28:09.897]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.897]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.897]                   3L)]
[08:28:09.897]             }
[08:28:09.897]             function(cond) {
[08:28:09.897]                 is_error <- inherits(cond, "error")
[08:28:09.897]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.897]                   NULL)
[08:28:09.897]                 if (is_error) {
[08:28:09.897]                   sessionInformation <- function() {
[08:28:09.897]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.897]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.897]                       search = base::search(), system = base::Sys.info())
[08:28:09.897]                   }
[08:28:09.897]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.897]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.897]                     cond$call), session = sessionInformation(), 
[08:28:09.897]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.897]                   signalCondition(cond)
[08:28:09.897]                 }
[08:28:09.897]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.897]                 "immediateCondition"))) {
[08:28:09.897]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.897]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.897]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.897]                   if (TRUE && !signal) {
[08:28:09.897]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.897]                     {
[08:28:09.897]                       inherits <- base::inherits
[08:28:09.897]                       invokeRestart <- base::invokeRestart
[08:28:09.897]                       is.null <- base::is.null
[08:28:09.897]                       muffled <- FALSE
[08:28:09.897]                       if (inherits(cond, "message")) {
[08:28:09.897]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.897]                         if (muffled) 
[08:28:09.897]                           invokeRestart("muffleMessage")
[08:28:09.897]                       }
[08:28:09.897]                       else if (inherits(cond, "warning")) {
[08:28:09.897]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.897]                         if (muffled) 
[08:28:09.897]                           invokeRestart("muffleWarning")
[08:28:09.897]                       }
[08:28:09.897]                       else if (inherits(cond, "condition")) {
[08:28:09.897]                         if (!is.null(pattern)) {
[08:28:09.897]                           computeRestarts <- base::computeRestarts
[08:28:09.897]                           grepl <- base::grepl
[08:28:09.897]                           restarts <- computeRestarts(cond)
[08:28:09.897]                           for (restart in restarts) {
[08:28:09.897]                             name <- restart$name
[08:28:09.897]                             if (is.null(name)) 
[08:28:09.897]                               next
[08:28:09.897]                             if (!grepl(pattern, name)) 
[08:28:09.897]                               next
[08:28:09.897]                             invokeRestart(restart)
[08:28:09.897]                             muffled <- TRUE
[08:28:09.897]                             break
[08:28:09.897]                           }
[08:28:09.897]                         }
[08:28:09.897]                       }
[08:28:09.897]                       invisible(muffled)
[08:28:09.897]                     }
[08:28:09.897]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.897]                   }
[08:28:09.897]                 }
[08:28:09.897]                 else {
[08:28:09.897]                   if (TRUE) {
[08:28:09.897]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.897]                     {
[08:28:09.897]                       inherits <- base::inherits
[08:28:09.897]                       invokeRestart <- base::invokeRestart
[08:28:09.897]                       is.null <- base::is.null
[08:28:09.897]                       muffled <- FALSE
[08:28:09.897]                       if (inherits(cond, "message")) {
[08:28:09.897]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.897]                         if (muffled) 
[08:28:09.897]                           invokeRestart("muffleMessage")
[08:28:09.897]                       }
[08:28:09.897]                       else if (inherits(cond, "warning")) {
[08:28:09.897]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.897]                         if (muffled) 
[08:28:09.897]                           invokeRestart("muffleWarning")
[08:28:09.897]                       }
[08:28:09.897]                       else if (inherits(cond, "condition")) {
[08:28:09.897]                         if (!is.null(pattern)) {
[08:28:09.897]                           computeRestarts <- base::computeRestarts
[08:28:09.897]                           grepl <- base::grepl
[08:28:09.897]                           restarts <- computeRestarts(cond)
[08:28:09.897]                           for (restart in restarts) {
[08:28:09.897]                             name <- restart$name
[08:28:09.897]                             if (is.null(name)) 
[08:28:09.897]                               next
[08:28:09.897]                             if (!grepl(pattern, name)) 
[08:28:09.897]                               next
[08:28:09.897]                             invokeRestart(restart)
[08:28:09.897]                             muffled <- TRUE
[08:28:09.897]                             break
[08:28:09.897]                           }
[08:28:09.897]                         }
[08:28:09.897]                       }
[08:28:09.897]                       invisible(muffled)
[08:28:09.897]                     }
[08:28:09.897]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.897]                   }
[08:28:09.897]                 }
[08:28:09.897]             }
[08:28:09.897]         }))
[08:28:09.897]     }, error = function(ex) {
[08:28:09.897]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.897]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.897]                 ...future.rng), started = ...future.startTime, 
[08:28:09.897]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.897]             version = "1.8"), class = "FutureResult")
[08:28:09.897]     }, finally = {
[08:28:09.897]         if (!identical(...future.workdir, getwd())) 
[08:28:09.897]             setwd(...future.workdir)
[08:28:09.897]         {
[08:28:09.897]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.897]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.897]             }
[08:28:09.897]             base::options(...future.oldOptions)
[08:28:09.897]             if (.Platform$OS.type == "windows") {
[08:28:09.897]                 old_names <- names(...future.oldEnvVars)
[08:28:09.897]                 envs <- base::Sys.getenv()
[08:28:09.897]                 names <- names(envs)
[08:28:09.897]                 common <- intersect(names, old_names)
[08:28:09.897]                 added <- setdiff(names, old_names)
[08:28:09.897]                 removed <- setdiff(old_names, names)
[08:28:09.897]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.897]                   envs[common]]
[08:28:09.897]                 NAMES <- toupper(changed)
[08:28:09.897]                 args <- list()
[08:28:09.897]                 for (kk in seq_along(NAMES)) {
[08:28:09.897]                   name <- changed[[kk]]
[08:28:09.897]                   NAME <- NAMES[[kk]]
[08:28:09.897]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.897]                     next
[08:28:09.897]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.897]                 }
[08:28:09.897]                 NAMES <- toupper(added)
[08:28:09.897]                 for (kk in seq_along(NAMES)) {
[08:28:09.897]                   name <- added[[kk]]
[08:28:09.897]                   NAME <- NAMES[[kk]]
[08:28:09.897]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.897]                     next
[08:28:09.897]                   args[[name]] <- ""
[08:28:09.897]                 }
[08:28:09.897]                 NAMES <- toupper(removed)
[08:28:09.897]                 for (kk in seq_along(NAMES)) {
[08:28:09.897]                   name <- removed[[kk]]
[08:28:09.897]                   NAME <- NAMES[[kk]]
[08:28:09.897]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.897]                     next
[08:28:09.897]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.897]                 }
[08:28:09.897]                 if (length(args) > 0) 
[08:28:09.897]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.897]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.897]             }
[08:28:09.897]             else {
[08:28:09.897]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.897]             }
[08:28:09.897]             {
[08:28:09.897]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.897]                   0L) {
[08:28:09.897]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.897]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.897]                   base::options(opts)
[08:28:09.897]                 }
[08:28:09.897]                 {
[08:28:09.897]                   {
[08:28:09.897]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.897]                     NULL
[08:28:09.897]                   }
[08:28:09.897]                   options(future.plan = NULL)
[08:28:09.897]                   if (is.na(NA_character_)) 
[08:28:09.897]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.897]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.897]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.897]                     .init = FALSE)
[08:28:09.897]                 }
[08:28:09.897]             }
[08:28:09.897]         }
[08:28:09.897]     })
[08:28:09.897]     if (TRUE) {
[08:28:09.897]         base::sink(type = "output", split = FALSE)
[08:28:09.897]         if (TRUE) {
[08:28:09.897]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.897]         }
[08:28:09.897]         else {
[08:28:09.897]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.897]         }
[08:28:09.897]         base::close(...future.stdout)
[08:28:09.897]         ...future.stdout <- NULL
[08:28:09.897]     }
[08:28:09.897]     ...future.result$conditions <- ...future.conditions
[08:28:09.897]     ...future.result$finished <- base::Sys.time()
[08:28:09.897]     ...future.result
[08:28:09.897] }
[08:28:09.900] assign_globals() ...
[08:28:09.900] List of 1
[08:28:09.900]  $ x: list()
[08:28:09.900]  - attr(*, "where")=List of 1
[08:28:09.900]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.900]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.900]  - attr(*, "resolved")= logi TRUE
[08:28:09.900]  - attr(*, "total_size")= num 31
[08:28:09.900]  - attr(*, "already-done")= logi TRUE
[08:28:09.903] - copied ‘x’ to environment
[08:28:09.903] assign_globals() ... done
[08:28:09.903] requestCore(): workers = 2
[08:28:09.905] MulticoreFuture started
[08:28:09.905] - Launch lazy future ... done
[08:28:09.905] run() for ‘MulticoreFuture’ ... done
[08:28:09.906] plan(): Setting new future strategy stack:
[08:28:09.906] result() for MulticoreFuture ...
[08:28:09.906] List of future strategies:
[08:28:09.906] 1. sequential:
[08:28:09.906]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.906]    - tweaked: FALSE
[08:28:09.906]    - call: NULL
[08:28:09.907] plan(): nbrOfWorkers() = 1
[08:28:09.909] plan(): Setting new future strategy stack:
[08:28:09.909] List of future strategies:
[08:28:09.909] 1. multicore:
[08:28:09.909]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:09.909]    - tweaked: FALSE
[08:28:09.909]    - call: plan(strategy)
[08:28:09.912] plan(): nbrOfWorkers() = 2
[08:28:09.913] result() for MulticoreFuture ...
[08:28:09.913] result() for MulticoreFuture ... done
[08:28:09.913] result() for MulticoreFuture ... done
[08:28:09.913] result() for MulticoreFuture ...
[08:28:09.913] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.914] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.914] Searching for globals...
[08:28:09.917] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.917] Searching for globals ... DONE
[08:28:09.917] Resolving globals: TRUE
[08:28:09.917] Resolving any globals that are futures ...
[08:28:09.918] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:09.918] Resolving any globals that are futures ... DONE
[08:28:09.918] Resolving futures part of globals (recursively) ...
[08:28:09.918] resolve() on list ...
[08:28:09.919]  recursive: 99
[08:28:09.919]  length: 1
[08:28:09.919]  elements: ‘x’
[08:28:09.919]  length: 0 (resolved future 1)
[08:28:09.919] resolve() on list ... DONE
[08:28:09.921] - globals: [1] ‘x’
[08:28:09.922] Resolving futures part of globals (recursively) ... DONE
[08:28:09.922] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.922] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.923] - globals: [1] ‘x’
[08:28:09.923] 
[08:28:09.923] getGlobalsAndPackages() ... DONE
[08:28:09.923] run() for ‘Future’ ...
[08:28:09.923] - state: ‘created’
[08:28:09.924] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:09.926] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:09.926] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:09.926]   - Field: ‘label’
[08:28:09.926]   - Field: ‘local’
[08:28:09.926]   - Field: ‘owner’
[08:28:09.926]   - Field: ‘envir’
[08:28:09.926]   - Field: ‘workers’
[08:28:09.926]   - Field: ‘packages’
[08:28:09.927]   - Field: ‘gc’
[08:28:09.927]   - Field: ‘job’
[08:28:09.927]   - Field: ‘conditions’
[08:28:09.927]   - Field: ‘expr’
[08:28:09.927]   - Field: ‘uuid’
[08:28:09.927]   - Field: ‘seed’
[08:28:09.927]   - Field: ‘version’
[08:28:09.927]   - Field: ‘result’
[08:28:09.927]   - Field: ‘asynchronous’
[08:28:09.928]   - Field: ‘calls’
[08:28:09.928]   - Field: ‘globals’
[08:28:09.928]   - Field: ‘stdout’
[08:28:09.928]   - Field: ‘earlySignal’
[08:28:09.928]   - Field: ‘lazy’
[08:28:09.928]   - Field: ‘state’
[08:28:09.928] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:09.928] - Launch lazy future ...
[08:28:09.929] Packages needed by the future expression (n = 0): <none>
[08:28:09.929] Packages needed by future strategies (n = 0): <none>
[08:28:09.929] {
[08:28:09.929]     {
[08:28:09.929]         {
[08:28:09.929]             ...future.startTime <- base::Sys.time()
[08:28:09.929]             {
[08:28:09.929]                 {
[08:28:09.929]                   {
[08:28:09.929]                     {
[08:28:09.929]                       base::local({
[08:28:09.929]                         has_future <- base::requireNamespace("future", 
[08:28:09.929]                           quietly = TRUE)
[08:28:09.929]                         if (has_future) {
[08:28:09.929]                           ns <- base::getNamespace("future")
[08:28:09.929]                           version <- ns[[".package"]][["version"]]
[08:28:09.929]                           if (is.null(version)) 
[08:28:09.929]                             version <- utils::packageVersion("future")
[08:28:09.929]                         }
[08:28:09.929]                         else {
[08:28:09.929]                           version <- NULL
[08:28:09.929]                         }
[08:28:09.929]                         if (!has_future || version < "1.8.0") {
[08:28:09.929]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.929]                             "", base::R.version$version.string), 
[08:28:09.929]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.929]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.929]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.929]                               "release", "version")], collapse = " "), 
[08:28:09.929]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.929]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.929]                             info)
[08:28:09.929]                           info <- base::paste(info, collapse = "; ")
[08:28:09.929]                           if (!has_future) {
[08:28:09.929]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.929]                               info)
[08:28:09.929]                           }
[08:28:09.929]                           else {
[08:28:09.929]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.929]                               info, version)
[08:28:09.929]                           }
[08:28:09.929]                           base::stop(msg)
[08:28:09.929]                         }
[08:28:09.929]                       })
[08:28:09.929]                     }
[08:28:09.929]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.929]                     base::options(mc.cores = 1L)
[08:28:09.929]                   }
[08:28:09.929]                   ...future.strategy.old <- future::plan("list")
[08:28:09.929]                   options(future.plan = NULL)
[08:28:09.929]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.929]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.929]                 }
[08:28:09.929]                 ...future.workdir <- getwd()
[08:28:09.929]             }
[08:28:09.929]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.929]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.929]         }
[08:28:09.929]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.929]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.929]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.929]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.929]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.929]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.929]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.929]             base::names(...future.oldOptions))
[08:28:09.929]     }
[08:28:09.929]     if (FALSE) {
[08:28:09.929]     }
[08:28:09.929]     else {
[08:28:09.929]         if (TRUE) {
[08:28:09.929]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.929]                 open = "w")
[08:28:09.929]         }
[08:28:09.929]         else {
[08:28:09.929]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.929]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.929]         }
[08:28:09.929]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.929]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.929]             base::sink(type = "output", split = FALSE)
[08:28:09.929]             base::close(...future.stdout)
[08:28:09.929]         }, add = TRUE)
[08:28:09.929]     }
[08:28:09.929]     ...future.frame <- base::sys.nframe()
[08:28:09.929]     ...future.conditions <- base::list()
[08:28:09.929]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.929]     if (FALSE) {
[08:28:09.929]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.929]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.929]     }
[08:28:09.929]     ...future.result <- base::tryCatch({
[08:28:09.929]         base::withCallingHandlers({
[08:28:09.929]             ...future.value <- base::withVisible(base::local({
[08:28:09.929]                 withCallingHandlers({
[08:28:09.929]                   {
[08:28:09.929]                     x$a <- 1
[08:28:09.929]                     x
[08:28:09.929]                   }
[08:28:09.929]                 }, immediateCondition = function(cond) {
[08:28:09.929]                   save_rds <- function (object, pathname, ...) 
[08:28:09.929]                   {
[08:28:09.929]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:09.929]                     if (file_test("-f", pathname_tmp)) {
[08:28:09.929]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.929]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:09.929]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.929]                         fi_tmp[["mtime"]])
[08:28:09.929]                     }
[08:28:09.929]                     tryCatch({
[08:28:09.929]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:09.929]                     }, error = function(ex) {
[08:28:09.929]                       msg <- conditionMessage(ex)
[08:28:09.929]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.929]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:09.929]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.929]                         fi_tmp[["mtime"]], msg)
[08:28:09.929]                       ex$message <- msg
[08:28:09.929]                       stop(ex)
[08:28:09.929]                     })
[08:28:09.929]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:09.929]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:09.929]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:09.929]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.929]                       fi <- file.info(pathname)
[08:28:09.929]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:09.929]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.929]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:09.929]                         fi[["size"]], fi[["mtime"]])
[08:28:09.929]                       stop(msg)
[08:28:09.929]                     }
[08:28:09.929]                     invisible(pathname)
[08:28:09.929]                   }
[08:28:09.929]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:09.929]                     rootPath = tempdir()) 
[08:28:09.929]                   {
[08:28:09.929]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:09.929]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:09.929]                       tmpdir = path, fileext = ".rds")
[08:28:09.929]                     save_rds(obj, file)
[08:28:09.929]                   }
[08:28:09.929]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:09.929]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.929]                   {
[08:28:09.929]                     inherits <- base::inherits
[08:28:09.929]                     invokeRestart <- base::invokeRestart
[08:28:09.929]                     is.null <- base::is.null
[08:28:09.929]                     muffled <- FALSE
[08:28:09.929]                     if (inherits(cond, "message")) {
[08:28:09.929]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.929]                       if (muffled) 
[08:28:09.929]                         invokeRestart("muffleMessage")
[08:28:09.929]                     }
[08:28:09.929]                     else if (inherits(cond, "warning")) {
[08:28:09.929]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.929]                       if (muffled) 
[08:28:09.929]                         invokeRestart("muffleWarning")
[08:28:09.929]                     }
[08:28:09.929]                     else if (inherits(cond, "condition")) {
[08:28:09.929]                       if (!is.null(pattern)) {
[08:28:09.929]                         computeRestarts <- base::computeRestarts
[08:28:09.929]                         grepl <- base::grepl
[08:28:09.929]                         restarts <- computeRestarts(cond)
[08:28:09.929]                         for (restart in restarts) {
[08:28:09.929]                           name <- restart$name
[08:28:09.929]                           if (is.null(name)) 
[08:28:09.929]                             next
[08:28:09.929]                           if (!grepl(pattern, name)) 
[08:28:09.929]                             next
[08:28:09.929]                           invokeRestart(restart)
[08:28:09.929]                           muffled <- TRUE
[08:28:09.929]                           break
[08:28:09.929]                         }
[08:28:09.929]                       }
[08:28:09.929]                     }
[08:28:09.929]                     invisible(muffled)
[08:28:09.929]                   }
[08:28:09.929]                   muffleCondition(cond)
[08:28:09.929]                 })
[08:28:09.929]             }))
[08:28:09.929]             future::FutureResult(value = ...future.value$value, 
[08:28:09.929]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.929]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.929]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.929]                     ...future.globalenv.names))
[08:28:09.929]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.929]         }, condition = base::local({
[08:28:09.929]             c <- base::c
[08:28:09.929]             inherits <- base::inherits
[08:28:09.929]             invokeRestart <- base::invokeRestart
[08:28:09.929]             length <- base::length
[08:28:09.929]             list <- base::list
[08:28:09.929]             seq.int <- base::seq.int
[08:28:09.929]             signalCondition <- base::signalCondition
[08:28:09.929]             sys.calls <- base::sys.calls
[08:28:09.929]             `[[` <- base::`[[`
[08:28:09.929]             `+` <- base::`+`
[08:28:09.929]             `<<-` <- base::`<<-`
[08:28:09.929]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.929]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.929]                   3L)]
[08:28:09.929]             }
[08:28:09.929]             function(cond) {
[08:28:09.929]                 is_error <- inherits(cond, "error")
[08:28:09.929]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.929]                   NULL)
[08:28:09.929]                 if (is_error) {
[08:28:09.929]                   sessionInformation <- function() {
[08:28:09.929]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.929]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.929]                       search = base::search(), system = base::Sys.info())
[08:28:09.929]                   }
[08:28:09.929]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.929]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.929]                     cond$call), session = sessionInformation(), 
[08:28:09.929]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.929]                   signalCondition(cond)
[08:28:09.929]                 }
[08:28:09.929]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.929]                 "immediateCondition"))) {
[08:28:09.929]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.929]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.929]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.929]                   if (TRUE && !signal) {
[08:28:09.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.929]                     {
[08:28:09.929]                       inherits <- base::inherits
[08:28:09.929]                       invokeRestart <- base::invokeRestart
[08:28:09.929]                       is.null <- base::is.null
[08:28:09.929]                       muffled <- FALSE
[08:28:09.929]                       if (inherits(cond, "message")) {
[08:28:09.929]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.929]                         if (muffled) 
[08:28:09.929]                           invokeRestart("muffleMessage")
[08:28:09.929]                       }
[08:28:09.929]                       else if (inherits(cond, "warning")) {
[08:28:09.929]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.929]                         if (muffled) 
[08:28:09.929]                           invokeRestart("muffleWarning")
[08:28:09.929]                       }
[08:28:09.929]                       else if (inherits(cond, "condition")) {
[08:28:09.929]                         if (!is.null(pattern)) {
[08:28:09.929]                           computeRestarts <- base::computeRestarts
[08:28:09.929]                           grepl <- base::grepl
[08:28:09.929]                           restarts <- computeRestarts(cond)
[08:28:09.929]                           for (restart in restarts) {
[08:28:09.929]                             name <- restart$name
[08:28:09.929]                             if (is.null(name)) 
[08:28:09.929]                               next
[08:28:09.929]                             if (!grepl(pattern, name)) 
[08:28:09.929]                               next
[08:28:09.929]                             invokeRestart(restart)
[08:28:09.929]                             muffled <- TRUE
[08:28:09.929]                             break
[08:28:09.929]                           }
[08:28:09.929]                         }
[08:28:09.929]                       }
[08:28:09.929]                       invisible(muffled)
[08:28:09.929]                     }
[08:28:09.929]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.929]                   }
[08:28:09.929]                 }
[08:28:09.929]                 else {
[08:28:09.929]                   if (TRUE) {
[08:28:09.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.929]                     {
[08:28:09.929]                       inherits <- base::inherits
[08:28:09.929]                       invokeRestart <- base::invokeRestart
[08:28:09.929]                       is.null <- base::is.null
[08:28:09.929]                       muffled <- FALSE
[08:28:09.929]                       if (inherits(cond, "message")) {
[08:28:09.929]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.929]                         if (muffled) 
[08:28:09.929]                           invokeRestart("muffleMessage")
[08:28:09.929]                       }
[08:28:09.929]                       else if (inherits(cond, "warning")) {
[08:28:09.929]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.929]                         if (muffled) 
[08:28:09.929]                           invokeRestart("muffleWarning")
[08:28:09.929]                       }
[08:28:09.929]                       else if (inherits(cond, "condition")) {
[08:28:09.929]                         if (!is.null(pattern)) {
[08:28:09.929]                           computeRestarts <- base::computeRestarts
[08:28:09.929]                           grepl <- base::grepl
[08:28:09.929]                           restarts <- computeRestarts(cond)
[08:28:09.929]                           for (restart in restarts) {
[08:28:09.929]                             name <- restart$name
[08:28:09.929]                             if (is.null(name)) 
[08:28:09.929]                               next
[08:28:09.929]                             if (!grepl(pattern, name)) 
[08:28:09.929]                               next
[08:28:09.929]                             invokeRestart(restart)
[08:28:09.929]                             muffled <- TRUE
[08:28:09.929]                             break
[08:28:09.929]                           }
[08:28:09.929]                         }
[08:28:09.929]                       }
[08:28:09.929]                       invisible(muffled)
[08:28:09.929]                     }
[08:28:09.929]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.929]                   }
[08:28:09.929]                 }
[08:28:09.929]             }
[08:28:09.929]         }))
[08:28:09.929]     }, error = function(ex) {
[08:28:09.929]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.929]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.929]                 ...future.rng), started = ...future.startTime, 
[08:28:09.929]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.929]             version = "1.8"), class = "FutureResult")
[08:28:09.929]     }, finally = {
[08:28:09.929]         if (!identical(...future.workdir, getwd())) 
[08:28:09.929]             setwd(...future.workdir)
[08:28:09.929]         {
[08:28:09.929]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.929]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.929]             }
[08:28:09.929]             base::options(...future.oldOptions)
[08:28:09.929]             if (.Platform$OS.type == "windows") {
[08:28:09.929]                 old_names <- names(...future.oldEnvVars)
[08:28:09.929]                 envs <- base::Sys.getenv()
[08:28:09.929]                 names <- names(envs)
[08:28:09.929]                 common <- intersect(names, old_names)
[08:28:09.929]                 added <- setdiff(names, old_names)
[08:28:09.929]                 removed <- setdiff(old_names, names)
[08:28:09.929]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.929]                   envs[common]]
[08:28:09.929]                 NAMES <- toupper(changed)
[08:28:09.929]                 args <- list()
[08:28:09.929]                 for (kk in seq_along(NAMES)) {
[08:28:09.929]                   name <- changed[[kk]]
[08:28:09.929]                   NAME <- NAMES[[kk]]
[08:28:09.929]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.929]                     next
[08:28:09.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.929]                 }
[08:28:09.929]                 NAMES <- toupper(added)
[08:28:09.929]                 for (kk in seq_along(NAMES)) {
[08:28:09.929]                   name <- added[[kk]]
[08:28:09.929]                   NAME <- NAMES[[kk]]
[08:28:09.929]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.929]                     next
[08:28:09.929]                   args[[name]] <- ""
[08:28:09.929]                 }
[08:28:09.929]                 NAMES <- toupper(removed)
[08:28:09.929]                 for (kk in seq_along(NAMES)) {
[08:28:09.929]                   name <- removed[[kk]]
[08:28:09.929]                   NAME <- NAMES[[kk]]
[08:28:09.929]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.929]                     next
[08:28:09.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.929]                 }
[08:28:09.929]                 if (length(args) > 0) 
[08:28:09.929]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.929]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.929]             }
[08:28:09.929]             else {
[08:28:09.929]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.929]             }
[08:28:09.929]             {
[08:28:09.929]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.929]                   0L) {
[08:28:09.929]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.929]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.929]                   base::options(opts)
[08:28:09.929]                 }
[08:28:09.929]                 {
[08:28:09.929]                   {
[08:28:09.929]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.929]                     NULL
[08:28:09.929]                   }
[08:28:09.929]                   options(future.plan = NULL)
[08:28:09.929]                   if (is.na(NA_character_)) 
[08:28:09.929]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.929]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.929]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.929]                     .init = FALSE)
[08:28:09.929]                 }
[08:28:09.929]             }
[08:28:09.929]         }
[08:28:09.929]     })
[08:28:09.929]     if (TRUE) {
[08:28:09.929]         base::sink(type = "output", split = FALSE)
[08:28:09.929]         if (TRUE) {
[08:28:09.929]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.929]         }
[08:28:09.929]         else {
[08:28:09.929]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.929]         }
[08:28:09.929]         base::close(...future.stdout)
[08:28:09.929]         ...future.stdout <- NULL
[08:28:09.929]     }
[08:28:09.929]     ...future.result$conditions <- ...future.conditions
[08:28:09.929]     ...future.result$finished <- base::Sys.time()
[08:28:09.929]     ...future.result
[08:28:09.929] }
[08:28:09.932] assign_globals() ...
[08:28:09.932] List of 1
[08:28:09.932]  $ x: list()
[08:28:09.932]  - attr(*, "where")=List of 1
[08:28:09.932]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.932]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.932]  - attr(*, "resolved")= logi TRUE
[08:28:09.932]  - attr(*, "total_size")= num 31
[08:28:09.932]  - attr(*, "already-done")= logi TRUE
[08:28:09.935] - copied ‘x’ to environment
[08:28:09.935] assign_globals() ... done
[08:28:09.935] requestCore(): workers = 2
[08:28:09.937] MulticoreFuture started
[08:28:09.937] - Launch lazy future ... done
[08:28:09.938] run() for ‘MulticoreFuture’ ... done
[08:28:09.938] plan(): Setting new future strategy stack:
[08:28:09.938] result() for MulticoreFuture ...
[08:28:09.938] List of future strategies:
[08:28:09.938] 1. sequential:
[08:28:09.938]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.938]    - tweaked: FALSE
[08:28:09.938]    - call: NULL
[08:28:09.939] plan(): nbrOfWorkers() = 1
[08:28:09.941] plan(): Setting new future strategy stack:
[08:28:09.941] List of future strategies:
[08:28:09.941] 1. multicore:
[08:28:09.941]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:09.941]    - tweaked: FALSE
[08:28:09.941]    - call: plan(strategy)
[08:28:09.945] plan(): nbrOfWorkers() = 2
[08:28:09.946] result() for MulticoreFuture ...
[08:28:09.946] result() for MulticoreFuture ... done
[08:28:09.946] result() for MulticoreFuture ... done
[08:28:09.947] result() for MulticoreFuture ...
[08:28:09.947] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.948] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.948] Searching for globals...
[08:28:09.951] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:28:09.951] Searching for globals ... DONE
[08:28:09.951] Resolving globals: TRUE
[08:28:09.951] Resolving any globals that are futures ...
[08:28:09.952] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:28:09.952] Resolving any globals that are futures ... DONE
[08:28:09.952] 
[08:28:09.952] 
[08:28:09.952] getGlobalsAndPackages() ... DONE
[08:28:09.953] run() for ‘Future’ ...
[08:28:09.953] - state: ‘created’
[08:28:09.953] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:09.955] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:09.955] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:09.955]   - Field: ‘label’
[08:28:09.956]   - Field: ‘local’
[08:28:09.956]   - Field: ‘owner’
[08:28:09.956]   - Field: ‘envir’
[08:28:09.956]   - Field: ‘workers’
[08:28:09.956]   - Field: ‘packages’
[08:28:09.956]   - Field: ‘gc’
[08:28:09.956]   - Field: ‘job’
[08:28:09.956]   - Field: ‘conditions’
[08:28:09.956]   - Field: ‘expr’
[08:28:09.957]   - Field: ‘uuid’
[08:28:09.957]   - Field: ‘seed’
[08:28:09.957]   - Field: ‘version’
[08:28:09.957]   - Field: ‘result’
[08:28:09.957]   - Field: ‘asynchronous’
[08:28:09.957]   - Field: ‘calls’
[08:28:09.957]   - Field: ‘globals’
[08:28:09.957]   - Field: ‘stdout’
[08:28:09.957]   - Field: ‘earlySignal’
[08:28:09.957]   - Field: ‘lazy’
[08:28:09.958]   - Field: ‘state’
[08:28:09.958] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:09.958] - Launch lazy future ...
[08:28:09.958] Packages needed by the future expression (n = 0): <none>
[08:28:09.958] Packages needed by future strategies (n = 0): <none>
[08:28:09.959] {
[08:28:09.959]     {
[08:28:09.959]         {
[08:28:09.959]             ...future.startTime <- base::Sys.time()
[08:28:09.959]             {
[08:28:09.959]                 {
[08:28:09.959]                   {
[08:28:09.959]                     {
[08:28:09.959]                       base::local({
[08:28:09.959]                         has_future <- base::requireNamespace("future", 
[08:28:09.959]                           quietly = TRUE)
[08:28:09.959]                         if (has_future) {
[08:28:09.959]                           ns <- base::getNamespace("future")
[08:28:09.959]                           version <- ns[[".package"]][["version"]]
[08:28:09.959]                           if (is.null(version)) 
[08:28:09.959]                             version <- utils::packageVersion("future")
[08:28:09.959]                         }
[08:28:09.959]                         else {
[08:28:09.959]                           version <- NULL
[08:28:09.959]                         }
[08:28:09.959]                         if (!has_future || version < "1.8.0") {
[08:28:09.959]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.959]                             "", base::R.version$version.string), 
[08:28:09.959]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.959]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.959]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.959]                               "release", "version")], collapse = " "), 
[08:28:09.959]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.959]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.959]                             info)
[08:28:09.959]                           info <- base::paste(info, collapse = "; ")
[08:28:09.959]                           if (!has_future) {
[08:28:09.959]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.959]                               info)
[08:28:09.959]                           }
[08:28:09.959]                           else {
[08:28:09.959]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.959]                               info, version)
[08:28:09.959]                           }
[08:28:09.959]                           base::stop(msg)
[08:28:09.959]                         }
[08:28:09.959]                       })
[08:28:09.959]                     }
[08:28:09.959]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.959]                     base::options(mc.cores = 1L)
[08:28:09.959]                   }
[08:28:09.959]                   ...future.strategy.old <- future::plan("list")
[08:28:09.959]                   options(future.plan = NULL)
[08:28:09.959]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.959]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.959]                 }
[08:28:09.959]                 ...future.workdir <- getwd()
[08:28:09.959]             }
[08:28:09.959]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.959]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.959]         }
[08:28:09.959]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.959]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.959]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.959]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.959]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.959]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.959]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.959]             base::names(...future.oldOptions))
[08:28:09.959]     }
[08:28:09.959]     if (FALSE) {
[08:28:09.959]     }
[08:28:09.959]     else {
[08:28:09.959]         if (TRUE) {
[08:28:09.959]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.959]                 open = "w")
[08:28:09.959]         }
[08:28:09.959]         else {
[08:28:09.959]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.959]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.959]         }
[08:28:09.959]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.959]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.959]             base::sink(type = "output", split = FALSE)
[08:28:09.959]             base::close(...future.stdout)
[08:28:09.959]         }, add = TRUE)
[08:28:09.959]     }
[08:28:09.959]     ...future.frame <- base::sys.nframe()
[08:28:09.959]     ...future.conditions <- base::list()
[08:28:09.959]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.959]     if (FALSE) {
[08:28:09.959]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.959]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.959]     }
[08:28:09.959]     ...future.result <- base::tryCatch({
[08:28:09.959]         base::withCallingHandlers({
[08:28:09.959]             ...future.value <- base::withVisible(base::local({
[08:28:09.959]                 withCallingHandlers({
[08:28:09.959]                   {
[08:28:09.959]                     x <- list(b = 2)
[08:28:09.959]                     x$a <- 1
[08:28:09.959]                     x
[08:28:09.959]                   }
[08:28:09.959]                 }, immediateCondition = function(cond) {
[08:28:09.959]                   save_rds <- function (object, pathname, ...) 
[08:28:09.959]                   {
[08:28:09.959]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:09.959]                     if (file_test("-f", pathname_tmp)) {
[08:28:09.959]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.959]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:09.959]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.959]                         fi_tmp[["mtime"]])
[08:28:09.959]                     }
[08:28:09.959]                     tryCatch({
[08:28:09.959]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:09.959]                     }, error = function(ex) {
[08:28:09.959]                       msg <- conditionMessage(ex)
[08:28:09.959]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.959]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:09.959]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.959]                         fi_tmp[["mtime"]], msg)
[08:28:09.959]                       ex$message <- msg
[08:28:09.959]                       stop(ex)
[08:28:09.959]                     })
[08:28:09.959]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:09.959]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:09.959]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:09.959]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.959]                       fi <- file.info(pathname)
[08:28:09.959]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:09.959]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.959]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:09.959]                         fi[["size"]], fi[["mtime"]])
[08:28:09.959]                       stop(msg)
[08:28:09.959]                     }
[08:28:09.959]                     invisible(pathname)
[08:28:09.959]                   }
[08:28:09.959]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:09.959]                     rootPath = tempdir()) 
[08:28:09.959]                   {
[08:28:09.959]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:09.959]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:09.959]                       tmpdir = path, fileext = ".rds")
[08:28:09.959]                     save_rds(obj, file)
[08:28:09.959]                   }
[08:28:09.959]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:09.959]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.959]                   {
[08:28:09.959]                     inherits <- base::inherits
[08:28:09.959]                     invokeRestart <- base::invokeRestart
[08:28:09.959]                     is.null <- base::is.null
[08:28:09.959]                     muffled <- FALSE
[08:28:09.959]                     if (inherits(cond, "message")) {
[08:28:09.959]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.959]                       if (muffled) 
[08:28:09.959]                         invokeRestart("muffleMessage")
[08:28:09.959]                     }
[08:28:09.959]                     else if (inherits(cond, "warning")) {
[08:28:09.959]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.959]                       if (muffled) 
[08:28:09.959]                         invokeRestart("muffleWarning")
[08:28:09.959]                     }
[08:28:09.959]                     else if (inherits(cond, "condition")) {
[08:28:09.959]                       if (!is.null(pattern)) {
[08:28:09.959]                         computeRestarts <- base::computeRestarts
[08:28:09.959]                         grepl <- base::grepl
[08:28:09.959]                         restarts <- computeRestarts(cond)
[08:28:09.959]                         for (restart in restarts) {
[08:28:09.959]                           name <- restart$name
[08:28:09.959]                           if (is.null(name)) 
[08:28:09.959]                             next
[08:28:09.959]                           if (!grepl(pattern, name)) 
[08:28:09.959]                             next
[08:28:09.959]                           invokeRestart(restart)
[08:28:09.959]                           muffled <- TRUE
[08:28:09.959]                           break
[08:28:09.959]                         }
[08:28:09.959]                       }
[08:28:09.959]                     }
[08:28:09.959]                     invisible(muffled)
[08:28:09.959]                   }
[08:28:09.959]                   muffleCondition(cond)
[08:28:09.959]                 })
[08:28:09.959]             }))
[08:28:09.959]             future::FutureResult(value = ...future.value$value, 
[08:28:09.959]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.959]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.959]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.959]                     ...future.globalenv.names))
[08:28:09.959]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.959]         }, condition = base::local({
[08:28:09.959]             c <- base::c
[08:28:09.959]             inherits <- base::inherits
[08:28:09.959]             invokeRestart <- base::invokeRestart
[08:28:09.959]             length <- base::length
[08:28:09.959]             list <- base::list
[08:28:09.959]             seq.int <- base::seq.int
[08:28:09.959]             signalCondition <- base::signalCondition
[08:28:09.959]             sys.calls <- base::sys.calls
[08:28:09.959]             `[[` <- base::`[[`
[08:28:09.959]             `+` <- base::`+`
[08:28:09.959]             `<<-` <- base::`<<-`
[08:28:09.959]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.959]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.959]                   3L)]
[08:28:09.959]             }
[08:28:09.959]             function(cond) {
[08:28:09.959]                 is_error <- inherits(cond, "error")
[08:28:09.959]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.959]                   NULL)
[08:28:09.959]                 if (is_error) {
[08:28:09.959]                   sessionInformation <- function() {
[08:28:09.959]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.959]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.959]                       search = base::search(), system = base::Sys.info())
[08:28:09.959]                   }
[08:28:09.959]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.959]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.959]                     cond$call), session = sessionInformation(), 
[08:28:09.959]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.959]                   signalCondition(cond)
[08:28:09.959]                 }
[08:28:09.959]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.959]                 "immediateCondition"))) {
[08:28:09.959]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.959]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.959]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.959]                   if (TRUE && !signal) {
[08:28:09.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.959]                     {
[08:28:09.959]                       inherits <- base::inherits
[08:28:09.959]                       invokeRestart <- base::invokeRestart
[08:28:09.959]                       is.null <- base::is.null
[08:28:09.959]                       muffled <- FALSE
[08:28:09.959]                       if (inherits(cond, "message")) {
[08:28:09.959]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.959]                         if (muffled) 
[08:28:09.959]                           invokeRestart("muffleMessage")
[08:28:09.959]                       }
[08:28:09.959]                       else if (inherits(cond, "warning")) {
[08:28:09.959]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.959]                         if (muffled) 
[08:28:09.959]                           invokeRestart("muffleWarning")
[08:28:09.959]                       }
[08:28:09.959]                       else if (inherits(cond, "condition")) {
[08:28:09.959]                         if (!is.null(pattern)) {
[08:28:09.959]                           computeRestarts <- base::computeRestarts
[08:28:09.959]                           grepl <- base::grepl
[08:28:09.959]                           restarts <- computeRestarts(cond)
[08:28:09.959]                           for (restart in restarts) {
[08:28:09.959]                             name <- restart$name
[08:28:09.959]                             if (is.null(name)) 
[08:28:09.959]                               next
[08:28:09.959]                             if (!grepl(pattern, name)) 
[08:28:09.959]                               next
[08:28:09.959]                             invokeRestart(restart)
[08:28:09.959]                             muffled <- TRUE
[08:28:09.959]                             break
[08:28:09.959]                           }
[08:28:09.959]                         }
[08:28:09.959]                       }
[08:28:09.959]                       invisible(muffled)
[08:28:09.959]                     }
[08:28:09.959]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.959]                   }
[08:28:09.959]                 }
[08:28:09.959]                 else {
[08:28:09.959]                   if (TRUE) {
[08:28:09.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.959]                     {
[08:28:09.959]                       inherits <- base::inherits
[08:28:09.959]                       invokeRestart <- base::invokeRestart
[08:28:09.959]                       is.null <- base::is.null
[08:28:09.959]                       muffled <- FALSE
[08:28:09.959]                       if (inherits(cond, "message")) {
[08:28:09.959]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.959]                         if (muffled) 
[08:28:09.959]                           invokeRestart("muffleMessage")
[08:28:09.959]                       }
[08:28:09.959]                       else if (inherits(cond, "warning")) {
[08:28:09.959]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.959]                         if (muffled) 
[08:28:09.959]                           invokeRestart("muffleWarning")
[08:28:09.959]                       }
[08:28:09.959]                       else if (inherits(cond, "condition")) {
[08:28:09.959]                         if (!is.null(pattern)) {
[08:28:09.959]                           computeRestarts <- base::computeRestarts
[08:28:09.959]                           grepl <- base::grepl
[08:28:09.959]                           restarts <- computeRestarts(cond)
[08:28:09.959]                           for (restart in restarts) {
[08:28:09.959]                             name <- restart$name
[08:28:09.959]                             if (is.null(name)) 
[08:28:09.959]                               next
[08:28:09.959]                             if (!grepl(pattern, name)) 
[08:28:09.959]                               next
[08:28:09.959]                             invokeRestart(restart)
[08:28:09.959]                             muffled <- TRUE
[08:28:09.959]                             break
[08:28:09.959]                           }
[08:28:09.959]                         }
[08:28:09.959]                       }
[08:28:09.959]                       invisible(muffled)
[08:28:09.959]                     }
[08:28:09.959]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.959]                   }
[08:28:09.959]                 }
[08:28:09.959]             }
[08:28:09.959]         }))
[08:28:09.959]     }, error = function(ex) {
[08:28:09.959]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.959]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.959]                 ...future.rng), started = ...future.startTime, 
[08:28:09.959]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.959]             version = "1.8"), class = "FutureResult")
[08:28:09.959]     }, finally = {
[08:28:09.959]         if (!identical(...future.workdir, getwd())) 
[08:28:09.959]             setwd(...future.workdir)
[08:28:09.959]         {
[08:28:09.959]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.959]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.959]             }
[08:28:09.959]             base::options(...future.oldOptions)
[08:28:09.959]             if (.Platform$OS.type == "windows") {
[08:28:09.959]                 old_names <- names(...future.oldEnvVars)
[08:28:09.959]                 envs <- base::Sys.getenv()
[08:28:09.959]                 names <- names(envs)
[08:28:09.959]                 common <- intersect(names, old_names)
[08:28:09.959]                 added <- setdiff(names, old_names)
[08:28:09.959]                 removed <- setdiff(old_names, names)
[08:28:09.959]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.959]                   envs[common]]
[08:28:09.959]                 NAMES <- toupper(changed)
[08:28:09.959]                 args <- list()
[08:28:09.959]                 for (kk in seq_along(NAMES)) {
[08:28:09.959]                   name <- changed[[kk]]
[08:28:09.959]                   NAME <- NAMES[[kk]]
[08:28:09.959]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.959]                     next
[08:28:09.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.959]                 }
[08:28:09.959]                 NAMES <- toupper(added)
[08:28:09.959]                 for (kk in seq_along(NAMES)) {
[08:28:09.959]                   name <- added[[kk]]
[08:28:09.959]                   NAME <- NAMES[[kk]]
[08:28:09.959]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.959]                     next
[08:28:09.959]                   args[[name]] <- ""
[08:28:09.959]                 }
[08:28:09.959]                 NAMES <- toupper(removed)
[08:28:09.959]                 for (kk in seq_along(NAMES)) {
[08:28:09.959]                   name <- removed[[kk]]
[08:28:09.959]                   NAME <- NAMES[[kk]]
[08:28:09.959]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.959]                     next
[08:28:09.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.959]                 }
[08:28:09.959]                 if (length(args) > 0) 
[08:28:09.959]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.959]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.959]             }
[08:28:09.959]             else {
[08:28:09.959]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.959]             }
[08:28:09.959]             {
[08:28:09.959]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.959]                   0L) {
[08:28:09.959]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.959]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.959]                   base::options(opts)
[08:28:09.959]                 }
[08:28:09.959]                 {
[08:28:09.959]                   {
[08:28:09.959]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.959]                     NULL
[08:28:09.959]                   }
[08:28:09.959]                   options(future.plan = NULL)
[08:28:09.959]                   if (is.na(NA_character_)) 
[08:28:09.959]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.959]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.959]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.959]                     .init = FALSE)
[08:28:09.959]                 }
[08:28:09.959]             }
[08:28:09.959]         }
[08:28:09.959]     })
[08:28:09.959]     if (TRUE) {
[08:28:09.959]         base::sink(type = "output", split = FALSE)
[08:28:09.959]         if (TRUE) {
[08:28:09.959]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.959]         }
[08:28:09.959]         else {
[08:28:09.959]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.959]         }
[08:28:09.959]         base::close(...future.stdout)
[08:28:09.959]         ...future.stdout <- NULL
[08:28:09.959]     }
[08:28:09.959]     ...future.result$conditions <- ...future.conditions
[08:28:09.959]     ...future.result$finished <- base::Sys.time()
[08:28:09.959]     ...future.result
[08:28:09.959] }
[08:28:09.962] requestCore(): workers = 2
[08:28:09.963] MulticoreFuture started
[08:28:09.964] - Launch lazy future ... done
[08:28:09.964] run() for ‘MulticoreFuture’ ... done
[08:28:09.964] plan(): Setting new future strategy stack:
[08:28:09.965] result() for MulticoreFuture ...
[08:28:09.964] List of future strategies:
[08:28:09.964] 1. sequential:
[08:28:09.964]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.964]    - tweaked: FALSE
[08:28:09.964]    - call: NULL
[08:28:09.965] plan(): nbrOfWorkers() = 1
[08:28:09.967] plan(): Setting new future strategy stack:
[08:28:09.967] List of future strategies:
[08:28:09.967] 1. multicore:
[08:28:09.967]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:09.967]    - tweaked: FALSE
[08:28:09.967]    - call: plan(strategy)
[08:28:09.970] plan(): nbrOfWorkers() = 2
[08:28:09.971] result() for MulticoreFuture ...
[08:28:09.971] result() for MulticoreFuture ... done
[08:28:09.972] result() for MulticoreFuture ... done
[08:28:09.972] result() for MulticoreFuture ...
[08:28:09.972] result() for MulticoreFuture ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:09.972] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:09.973] Searching for globals...
[08:28:09.978] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:09.978] Searching for globals ... DONE
[08:28:09.978] Resolving globals: TRUE
[08:28:09.978] Resolving any globals that are futures ...
[08:28:09.979] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:09.979] Resolving any globals that are futures ... DONE
[08:28:09.979] Resolving futures part of globals (recursively) ...
[08:28:09.980] resolve() on list ...
[08:28:09.980]  recursive: 99
[08:28:09.980]  length: 1
[08:28:09.980]  elements: ‘x’
[08:28:09.980]  length: 0 (resolved future 1)
[08:28:09.980] resolve() on list ... DONE
[08:28:09.980] - globals: [1] ‘x’
[08:28:09.980] Resolving futures part of globals (recursively) ... DONE
[08:28:09.981] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:09.981] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:09.981] - globals: [1] ‘x’
[08:28:09.981] 
[08:28:09.981] getGlobalsAndPackages() ... DONE
[08:28:09.982] run() for ‘Future’ ...
[08:28:09.982] - state: ‘created’
[08:28:09.982] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:09.984] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:09.984] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:09.984]   - Field: ‘label’
[08:28:09.984]   - Field: ‘local’
[08:28:09.985]   - Field: ‘owner’
[08:28:09.985]   - Field: ‘envir’
[08:28:09.985]   - Field: ‘workers’
[08:28:09.985]   - Field: ‘packages’
[08:28:09.985]   - Field: ‘gc’
[08:28:09.985]   - Field: ‘job’
[08:28:09.985]   - Field: ‘conditions’
[08:28:09.985]   - Field: ‘expr’
[08:28:09.985]   - Field: ‘uuid’
[08:28:09.985]   - Field: ‘seed’
[08:28:09.986]   - Field: ‘version’
[08:28:09.986]   - Field: ‘result’
[08:28:09.986]   - Field: ‘asynchronous’
[08:28:09.986]   - Field: ‘calls’
[08:28:09.986]   - Field: ‘globals’
[08:28:09.986]   - Field: ‘stdout’
[08:28:09.986]   - Field: ‘earlySignal’
[08:28:09.986]   - Field: ‘lazy’
[08:28:09.986]   - Field: ‘state’
[08:28:09.987] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:09.987] - Launch lazy future ...
[08:28:09.987] Packages needed by the future expression (n = 0): <none>
[08:28:09.987] Packages needed by future strategies (n = 0): <none>
[08:28:09.988] {
[08:28:09.988]     {
[08:28:09.988]         {
[08:28:09.988]             ...future.startTime <- base::Sys.time()
[08:28:09.988]             {
[08:28:09.988]                 {
[08:28:09.988]                   {
[08:28:09.988]                     {
[08:28:09.988]                       base::local({
[08:28:09.988]                         has_future <- base::requireNamespace("future", 
[08:28:09.988]                           quietly = TRUE)
[08:28:09.988]                         if (has_future) {
[08:28:09.988]                           ns <- base::getNamespace("future")
[08:28:09.988]                           version <- ns[[".package"]][["version"]]
[08:28:09.988]                           if (is.null(version)) 
[08:28:09.988]                             version <- utils::packageVersion("future")
[08:28:09.988]                         }
[08:28:09.988]                         else {
[08:28:09.988]                           version <- NULL
[08:28:09.988]                         }
[08:28:09.988]                         if (!has_future || version < "1.8.0") {
[08:28:09.988]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.988]                             "", base::R.version$version.string), 
[08:28:09.988]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.988]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.988]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.988]                               "release", "version")], collapse = " "), 
[08:28:09.988]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.988]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.988]                             info)
[08:28:09.988]                           info <- base::paste(info, collapse = "; ")
[08:28:09.988]                           if (!has_future) {
[08:28:09.988]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.988]                               info)
[08:28:09.988]                           }
[08:28:09.988]                           else {
[08:28:09.988]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.988]                               info, version)
[08:28:09.988]                           }
[08:28:09.988]                           base::stop(msg)
[08:28:09.988]                         }
[08:28:09.988]                       })
[08:28:09.988]                     }
[08:28:09.988]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.988]                     base::options(mc.cores = 1L)
[08:28:09.988]                   }
[08:28:09.988]                   ...future.strategy.old <- future::plan("list")
[08:28:09.988]                   options(future.plan = NULL)
[08:28:09.988]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.988]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.988]                 }
[08:28:09.988]                 ...future.workdir <- getwd()
[08:28:09.988]             }
[08:28:09.988]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.988]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.988]         }
[08:28:09.988]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:09.988]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.988]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:09.988]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:09.988]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.988]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.988]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.988]             base::names(...future.oldOptions))
[08:28:09.988]     }
[08:28:09.988]     if (FALSE) {
[08:28:09.988]     }
[08:28:09.988]     else {
[08:28:09.988]         if (TRUE) {
[08:28:09.988]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.988]                 open = "w")
[08:28:09.988]         }
[08:28:09.988]         else {
[08:28:09.988]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.988]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.988]         }
[08:28:09.988]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.988]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.988]             base::sink(type = "output", split = FALSE)
[08:28:09.988]             base::close(...future.stdout)
[08:28:09.988]         }, add = TRUE)
[08:28:09.988]     }
[08:28:09.988]     ...future.frame <- base::sys.nframe()
[08:28:09.988]     ...future.conditions <- base::list()
[08:28:09.988]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.988]     if (FALSE) {
[08:28:09.988]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.988]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.988]     }
[08:28:09.988]     ...future.result <- base::tryCatch({
[08:28:09.988]         base::withCallingHandlers({
[08:28:09.988]             ...future.value <- base::withVisible(base::local({
[08:28:09.988]                 withCallingHandlers({
[08:28:09.988]                   {
[08:28:09.988]                     x[["a"]] <- 1
[08:28:09.988]                     x
[08:28:09.988]                   }
[08:28:09.988]                 }, immediateCondition = function(cond) {
[08:28:09.988]                   save_rds <- function (object, pathname, ...) 
[08:28:09.988]                   {
[08:28:09.988]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:09.988]                     if (file_test("-f", pathname_tmp)) {
[08:28:09.988]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.988]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:09.988]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.988]                         fi_tmp[["mtime"]])
[08:28:09.988]                     }
[08:28:09.988]                     tryCatch({
[08:28:09.988]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:09.988]                     }, error = function(ex) {
[08:28:09.988]                       msg <- conditionMessage(ex)
[08:28:09.988]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.988]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:09.988]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.988]                         fi_tmp[["mtime"]], msg)
[08:28:09.988]                       ex$message <- msg
[08:28:09.988]                       stop(ex)
[08:28:09.988]                     })
[08:28:09.988]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:09.988]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:09.988]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:09.988]                       fi_tmp <- file.info(pathname_tmp)
[08:28:09.988]                       fi <- file.info(pathname)
[08:28:09.988]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:09.988]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:09.988]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:09.988]                         fi[["size"]], fi[["mtime"]])
[08:28:09.988]                       stop(msg)
[08:28:09.988]                     }
[08:28:09.988]                     invisible(pathname)
[08:28:09.988]                   }
[08:28:09.988]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:09.988]                     rootPath = tempdir()) 
[08:28:09.988]                   {
[08:28:09.988]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:09.988]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:09.988]                       tmpdir = path, fileext = ".rds")
[08:28:09.988]                     save_rds(obj, file)
[08:28:09.988]                   }
[08:28:09.988]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:09.988]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.988]                   {
[08:28:09.988]                     inherits <- base::inherits
[08:28:09.988]                     invokeRestart <- base::invokeRestart
[08:28:09.988]                     is.null <- base::is.null
[08:28:09.988]                     muffled <- FALSE
[08:28:09.988]                     if (inherits(cond, "message")) {
[08:28:09.988]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.988]                       if (muffled) 
[08:28:09.988]                         invokeRestart("muffleMessage")
[08:28:09.988]                     }
[08:28:09.988]                     else if (inherits(cond, "warning")) {
[08:28:09.988]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.988]                       if (muffled) 
[08:28:09.988]                         invokeRestart("muffleWarning")
[08:28:09.988]                     }
[08:28:09.988]                     else if (inherits(cond, "condition")) {
[08:28:09.988]                       if (!is.null(pattern)) {
[08:28:09.988]                         computeRestarts <- base::computeRestarts
[08:28:09.988]                         grepl <- base::grepl
[08:28:09.988]                         restarts <- computeRestarts(cond)
[08:28:09.988]                         for (restart in restarts) {
[08:28:09.988]                           name <- restart$name
[08:28:09.988]                           if (is.null(name)) 
[08:28:09.988]                             next
[08:28:09.988]                           if (!grepl(pattern, name)) 
[08:28:09.988]                             next
[08:28:09.988]                           invokeRestart(restart)
[08:28:09.988]                           muffled <- TRUE
[08:28:09.988]                           break
[08:28:09.988]                         }
[08:28:09.988]                       }
[08:28:09.988]                     }
[08:28:09.988]                     invisible(muffled)
[08:28:09.988]                   }
[08:28:09.988]                   muffleCondition(cond)
[08:28:09.988]                 })
[08:28:09.988]             }))
[08:28:09.988]             future::FutureResult(value = ...future.value$value, 
[08:28:09.988]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.988]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.988]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.988]                     ...future.globalenv.names))
[08:28:09.988]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.988]         }, condition = base::local({
[08:28:09.988]             c <- base::c
[08:28:09.988]             inherits <- base::inherits
[08:28:09.988]             invokeRestart <- base::invokeRestart
[08:28:09.988]             length <- base::length
[08:28:09.988]             list <- base::list
[08:28:09.988]             seq.int <- base::seq.int
[08:28:09.988]             signalCondition <- base::signalCondition
[08:28:09.988]             sys.calls <- base::sys.calls
[08:28:09.988]             `[[` <- base::`[[`
[08:28:09.988]             `+` <- base::`+`
[08:28:09.988]             `<<-` <- base::`<<-`
[08:28:09.988]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.988]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.988]                   3L)]
[08:28:09.988]             }
[08:28:09.988]             function(cond) {
[08:28:09.988]                 is_error <- inherits(cond, "error")
[08:28:09.988]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.988]                   NULL)
[08:28:09.988]                 if (is_error) {
[08:28:09.988]                   sessionInformation <- function() {
[08:28:09.988]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.988]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.988]                       search = base::search(), system = base::Sys.info())
[08:28:09.988]                   }
[08:28:09.988]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.988]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.988]                     cond$call), session = sessionInformation(), 
[08:28:09.988]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.988]                   signalCondition(cond)
[08:28:09.988]                 }
[08:28:09.988]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.988]                 "immediateCondition"))) {
[08:28:09.988]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.988]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.988]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.988]                   if (TRUE && !signal) {
[08:28:09.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.988]                     {
[08:28:09.988]                       inherits <- base::inherits
[08:28:09.988]                       invokeRestart <- base::invokeRestart
[08:28:09.988]                       is.null <- base::is.null
[08:28:09.988]                       muffled <- FALSE
[08:28:09.988]                       if (inherits(cond, "message")) {
[08:28:09.988]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.988]                         if (muffled) 
[08:28:09.988]                           invokeRestart("muffleMessage")
[08:28:09.988]                       }
[08:28:09.988]                       else if (inherits(cond, "warning")) {
[08:28:09.988]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.988]                         if (muffled) 
[08:28:09.988]                           invokeRestart("muffleWarning")
[08:28:09.988]                       }
[08:28:09.988]                       else if (inherits(cond, "condition")) {
[08:28:09.988]                         if (!is.null(pattern)) {
[08:28:09.988]                           computeRestarts <- base::computeRestarts
[08:28:09.988]                           grepl <- base::grepl
[08:28:09.988]                           restarts <- computeRestarts(cond)
[08:28:09.988]                           for (restart in restarts) {
[08:28:09.988]                             name <- restart$name
[08:28:09.988]                             if (is.null(name)) 
[08:28:09.988]                               next
[08:28:09.988]                             if (!grepl(pattern, name)) 
[08:28:09.988]                               next
[08:28:09.988]                             invokeRestart(restart)
[08:28:09.988]                             muffled <- TRUE
[08:28:09.988]                             break
[08:28:09.988]                           }
[08:28:09.988]                         }
[08:28:09.988]                       }
[08:28:09.988]                       invisible(muffled)
[08:28:09.988]                     }
[08:28:09.988]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.988]                   }
[08:28:09.988]                 }
[08:28:09.988]                 else {
[08:28:09.988]                   if (TRUE) {
[08:28:09.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.988]                     {
[08:28:09.988]                       inherits <- base::inherits
[08:28:09.988]                       invokeRestart <- base::invokeRestart
[08:28:09.988]                       is.null <- base::is.null
[08:28:09.988]                       muffled <- FALSE
[08:28:09.988]                       if (inherits(cond, "message")) {
[08:28:09.988]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.988]                         if (muffled) 
[08:28:09.988]                           invokeRestart("muffleMessage")
[08:28:09.988]                       }
[08:28:09.988]                       else if (inherits(cond, "warning")) {
[08:28:09.988]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.988]                         if (muffled) 
[08:28:09.988]                           invokeRestart("muffleWarning")
[08:28:09.988]                       }
[08:28:09.988]                       else if (inherits(cond, "condition")) {
[08:28:09.988]                         if (!is.null(pattern)) {
[08:28:09.988]                           computeRestarts <- base::computeRestarts
[08:28:09.988]                           grepl <- base::grepl
[08:28:09.988]                           restarts <- computeRestarts(cond)
[08:28:09.988]                           for (restart in restarts) {
[08:28:09.988]                             name <- restart$name
[08:28:09.988]                             if (is.null(name)) 
[08:28:09.988]                               next
[08:28:09.988]                             if (!grepl(pattern, name)) 
[08:28:09.988]                               next
[08:28:09.988]                             invokeRestart(restart)
[08:28:09.988]                             muffled <- TRUE
[08:28:09.988]                             break
[08:28:09.988]                           }
[08:28:09.988]                         }
[08:28:09.988]                       }
[08:28:09.988]                       invisible(muffled)
[08:28:09.988]                     }
[08:28:09.988]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.988]                   }
[08:28:09.988]                 }
[08:28:09.988]             }
[08:28:09.988]         }))
[08:28:09.988]     }, error = function(ex) {
[08:28:09.988]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.988]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.988]                 ...future.rng), started = ...future.startTime, 
[08:28:09.988]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.988]             version = "1.8"), class = "FutureResult")
[08:28:09.988]     }, finally = {
[08:28:09.988]         if (!identical(...future.workdir, getwd())) 
[08:28:09.988]             setwd(...future.workdir)
[08:28:09.988]         {
[08:28:09.988]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.988]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.988]             }
[08:28:09.988]             base::options(...future.oldOptions)
[08:28:09.988]             if (.Platform$OS.type == "windows") {
[08:28:09.988]                 old_names <- names(...future.oldEnvVars)
[08:28:09.988]                 envs <- base::Sys.getenv()
[08:28:09.988]                 names <- names(envs)
[08:28:09.988]                 common <- intersect(names, old_names)
[08:28:09.988]                 added <- setdiff(names, old_names)
[08:28:09.988]                 removed <- setdiff(old_names, names)
[08:28:09.988]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.988]                   envs[common]]
[08:28:09.988]                 NAMES <- toupper(changed)
[08:28:09.988]                 args <- list()
[08:28:09.988]                 for (kk in seq_along(NAMES)) {
[08:28:09.988]                   name <- changed[[kk]]
[08:28:09.988]                   NAME <- NAMES[[kk]]
[08:28:09.988]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.988]                     next
[08:28:09.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.988]                 }
[08:28:09.988]                 NAMES <- toupper(added)
[08:28:09.988]                 for (kk in seq_along(NAMES)) {
[08:28:09.988]                   name <- added[[kk]]
[08:28:09.988]                   NAME <- NAMES[[kk]]
[08:28:09.988]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.988]                     next
[08:28:09.988]                   args[[name]] <- ""
[08:28:09.988]                 }
[08:28:09.988]                 NAMES <- toupper(removed)
[08:28:09.988]                 for (kk in seq_along(NAMES)) {
[08:28:09.988]                   name <- removed[[kk]]
[08:28:09.988]                   NAME <- NAMES[[kk]]
[08:28:09.988]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.988]                     next
[08:28:09.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.988]                 }
[08:28:09.988]                 if (length(args) > 0) 
[08:28:09.988]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.988]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.988]             }
[08:28:09.988]             else {
[08:28:09.988]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.988]             }
[08:28:09.988]             {
[08:28:09.988]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.988]                   0L) {
[08:28:09.988]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.988]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.988]                   base::options(opts)
[08:28:09.988]                 }
[08:28:09.988]                 {
[08:28:09.988]                   {
[08:28:09.988]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.988]                     NULL
[08:28:09.988]                   }
[08:28:09.988]                   options(future.plan = NULL)
[08:28:09.988]                   if (is.na(NA_character_)) 
[08:28:09.988]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.988]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.988]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.988]                     .init = FALSE)
[08:28:09.988]                 }
[08:28:09.988]             }
[08:28:09.988]         }
[08:28:09.988]     })
[08:28:09.988]     if (TRUE) {
[08:28:09.988]         base::sink(type = "output", split = FALSE)
[08:28:09.988]         if (TRUE) {
[08:28:09.988]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.988]         }
[08:28:09.988]         else {
[08:28:09.988]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.988]         }
[08:28:09.988]         base::close(...future.stdout)
[08:28:09.988]         ...future.stdout <- NULL
[08:28:09.988]     }
[08:28:09.988]     ...future.result$conditions <- ...future.conditions
[08:28:09.988]     ...future.result$finished <- base::Sys.time()
[08:28:09.988]     ...future.result
[08:28:09.988] }
[08:28:09.990] assign_globals() ...
[08:28:09.990] List of 1
[08:28:09.990]  $ x: list()
[08:28:09.990]  - attr(*, "where")=List of 1
[08:28:09.990]   ..$ x:<environment: R_EmptyEnv> 
[08:28:09.990]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:09.990]  - attr(*, "resolved")= logi TRUE
[08:28:09.990]  - attr(*, "total_size")= num 31
[08:28:09.990]  - attr(*, "already-done")= logi TRUE
[08:28:09.993] - copied ‘x’ to environment
[08:28:09.993] assign_globals() ... done
[08:28:09.993] requestCore(): workers = 2
[08:28:09.995] MulticoreFuture started
[08:28:09.996] - Launch lazy future ... done
[08:28:09.996] run() for ‘MulticoreFuture’ ... done
[08:28:09.996] plan(): Setting new future strategy stack:
[08:28:09.996] result() for MulticoreFuture ...
[08:28:09.996] List of future strategies:
[08:28:09.996] 1. sequential:
[08:28:09.996]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.996]    - tweaked: FALSE
[08:28:09.996]    - call: NULL
[08:28:09.997] plan(): nbrOfWorkers() = 1
[08:28:09.999] plan(): Setting new future strategy stack:
[08:28:09.999] List of future strategies:
[08:28:09.999] 1. multicore:
[08:28:09.999]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:09.999]    - tweaked: FALSE
[08:28:09.999]    - call: plan(strategy)
[08:28:10.002] plan(): nbrOfWorkers() = 2
[08:28:10.003] result() for MulticoreFuture ...
[08:28:10.004] result() for MulticoreFuture ... done
[08:28:10.004] result() for MulticoreFuture ... done
[08:28:10.004] result() for MulticoreFuture ...
[08:28:10.004] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.004] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.005] Searching for globals...
[08:28:10.007] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:10.008] Searching for globals ... DONE
[08:28:10.008] Resolving globals: TRUE
[08:28:10.008] Resolving any globals that are futures ...
[08:28:10.008] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:10.008] Resolving any globals that are futures ... DONE
[08:28:10.009] Resolving futures part of globals (recursively) ...
[08:28:10.009] resolve() on list ...
[08:28:10.009]  recursive: 99
[08:28:10.009]  length: 1
[08:28:10.009]  elements: ‘x’
[08:28:10.009]  length: 0 (resolved future 1)
[08:28:10.010] resolve() on list ... DONE
[08:28:10.010] - globals: [1] ‘x’
[08:28:10.010] Resolving futures part of globals (recursively) ... DONE
[08:28:10.010] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:10.010] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:10.011] - globals: [1] ‘x’
[08:28:10.011] 
[08:28:10.011] getGlobalsAndPackages() ... DONE
[08:28:10.011] run() for ‘Future’ ...
[08:28:10.011] - state: ‘created’
[08:28:10.011] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.014] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.014] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:10.014]   - Field: ‘label’
[08:28:10.014]   - Field: ‘local’
[08:28:10.014]   - Field: ‘owner’
[08:28:10.014]   - Field: ‘envir’
[08:28:10.014]   - Field: ‘workers’
[08:28:10.014]   - Field: ‘packages’
[08:28:10.015]   - Field: ‘gc’
[08:28:10.015]   - Field: ‘job’
[08:28:10.015]   - Field: ‘conditions’
[08:28:10.015]   - Field: ‘expr’
[08:28:10.015]   - Field: ‘uuid’
[08:28:10.015]   - Field: ‘seed’
[08:28:10.015]   - Field: ‘version’
[08:28:10.015]   - Field: ‘result’
[08:28:10.015]   - Field: ‘asynchronous’
[08:28:10.015]   - Field: ‘calls’
[08:28:10.016]   - Field: ‘globals’
[08:28:10.016]   - Field: ‘stdout’
[08:28:10.016]   - Field: ‘earlySignal’
[08:28:10.016]   - Field: ‘lazy’
[08:28:10.016]   - Field: ‘state’
[08:28:10.016] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:10.016] - Launch lazy future ...
[08:28:10.017] Packages needed by the future expression (n = 0): <none>
[08:28:10.017] Packages needed by future strategies (n = 0): <none>
[08:28:10.017] {
[08:28:10.017]     {
[08:28:10.017]         {
[08:28:10.017]             ...future.startTime <- base::Sys.time()
[08:28:10.017]             {
[08:28:10.017]                 {
[08:28:10.017]                   {
[08:28:10.017]                     {
[08:28:10.017]                       base::local({
[08:28:10.017]                         has_future <- base::requireNamespace("future", 
[08:28:10.017]                           quietly = TRUE)
[08:28:10.017]                         if (has_future) {
[08:28:10.017]                           ns <- base::getNamespace("future")
[08:28:10.017]                           version <- ns[[".package"]][["version"]]
[08:28:10.017]                           if (is.null(version)) 
[08:28:10.017]                             version <- utils::packageVersion("future")
[08:28:10.017]                         }
[08:28:10.017]                         else {
[08:28:10.017]                           version <- NULL
[08:28:10.017]                         }
[08:28:10.017]                         if (!has_future || version < "1.8.0") {
[08:28:10.017]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.017]                             "", base::R.version$version.string), 
[08:28:10.017]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.017]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.017]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.017]                               "release", "version")], collapse = " "), 
[08:28:10.017]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.017]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.017]                             info)
[08:28:10.017]                           info <- base::paste(info, collapse = "; ")
[08:28:10.017]                           if (!has_future) {
[08:28:10.017]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.017]                               info)
[08:28:10.017]                           }
[08:28:10.017]                           else {
[08:28:10.017]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.017]                               info, version)
[08:28:10.017]                           }
[08:28:10.017]                           base::stop(msg)
[08:28:10.017]                         }
[08:28:10.017]                       })
[08:28:10.017]                     }
[08:28:10.017]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.017]                     base::options(mc.cores = 1L)
[08:28:10.017]                   }
[08:28:10.017]                   ...future.strategy.old <- future::plan("list")
[08:28:10.017]                   options(future.plan = NULL)
[08:28:10.017]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.017]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.017]                 }
[08:28:10.017]                 ...future.workdir <- getwd()
[08:28:10.017]             }
[08:28:10.017]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.017]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.017]         }
[08:28:10.017]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.017]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.017]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.017]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.017]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.017]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.017]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.017]             base::names(...future.oldOptions))
[08:28:10.017]     }
[08:28:10.017]     if (FALSE) {
[08:28:10.017]     }
[08:28:10.017]     else {
[08:28:10.017]         if (TRUE) {
[08:28:10.017]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.017]                 open = "w")
[08:28:10.017]         }
[08:28:10.017]         else {
[08:28:10.017]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.017]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.017]         }
[08:28:10.017]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.017]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.017]             base::sink(type = "output", split = FALSE)
[08:28:10.017]             base::close(...future.stdout)
[08:28:10.017]         }, add = TRUE)
[08:28:10.017]     }
[08:28:10.017]     ...future.frame <- base::sys.nframe()
[08:28:10.017]     ...future.conditions <- base::list()
[08:28:10.017]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.017]     if (FALSE) {
[08:28:10.017]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.017]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.017]     }
[08:28:10.017]     ...future.result <- base::tryCatch({
[08:28:10.017]         base::withCallingHandlers({
[08:28:10.017]             ...future.value <- base::withVisible(base::local({
[08:28:10.017]                 withCallingHandlers({
[08:28:10.017]                   {
[08:28:10.017]                     x[["a"]] <- 1
[08:28:10.017]                     x
[08:28:10.017]                   }
[08:28:10.017]                 }, immediateCondition = function(cond) {
[08:28:10.017]                   save_rds <- function (object, pathname, ...) 
[08:28:10.017]                   {
[08:28:10.017]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:10.017]                     if (file_test("-f", pathname_tmp)) {
[08:28:10.017]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.017]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:10.017]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.017]                         fi_tmp[["mtime"]])
[08:28:10.017]                     }
[08:28:10.017]                     tryCatch({
[08:28:10.017]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:10.017]                     }, error = function(ex) {
[08:28:10.017]                       msg <- conditionMessage(ex)
[08:28:10.017]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.017]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:10.017]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.017]                         fi_tmp[["mtime"]], msg)
[08:28:10.017]                       ex$message <- msg
[08:28:10.017]                       stop(ex)
[08:28:10.017]                     })
[08:28:10.017]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:10.017]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:10.017]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:10.017]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.017]                       fi <- file.info(pathname)
[08:28:10.017]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:10.017]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.017]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:10.017]                         fi[["size"]], fi[["mtime"]])
[08:28:10.017]                       stop(msg)
[08:28:10.017]                     }
[08:28:10.017]                     invisible(pathname)
[08:28:10.017]                   }
[08:28:10.017]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:10.017]                     rootPath = tempdir()) 
[08:28:10.017]                   {
[08:28:10.017]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:10.017]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:10.017]                       tmpdir = path, fileext = ".rds")
[08:28:10.017]                     save_rds(obj, file)
[08:28:10.017]                   }
[08:28:10.017]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:10.017]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.017]                   {
[08:28:10.017]                     inherits <- base::inherits
[08:28:10.017]                     invokeRestart <- base::invokeRestart
[08:28:10.017]                     is.null <- base::is.null
[08:28:10.017]                     muffled <- FALSE
[08:28:10.017]                     if (inherits(cond, "message")) {
[08:28:10.017]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.017]                       if (muffled) 
[08:28:10.017]                         invokeRestart("muffleMessage")
[08:28:10.017]                     }
[08:28:10.017]                     else if (inherits(cond, "warning")) {
[08:28:10.017]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.017]                       if (muffled) 
[08:28:10.017]                         invokeRestart("muffleWarning")
[08:28:10.017]                     }
[08:28:10.017]                     else if (inherits(cond, "condition")) {
[08:28:10.017]                       if (!is.null(pattern)) {
[08:28:10.017]                         computeRestarts <- base::computeRestarts
[08:28:10.017]                         grepl <- base::grepl
[08:28:10.017]                         restarts <- computeRestarts(cond)
[08:28:10.017]                         for (restart in restarts) {
[08:28:10.017]                           name <- restart$name
[08:28:10.017]                           if (is.null(name)) 
[08:28:10.017]                             next
[08:28:10.017]                           if (!grepl(pattern, name)) 
[08:28:10.017]                             next
[08:28:10.017]                           invokeRestart(restart)
[08:28:10.017]                           muffled <- TRUE
[08:28:10.017]                           break
[08:28:10.017]                         }
[08:28:10.017]                       }
[08:28:10.017]                     }
[08:28:10.017]                     invisible(muffled)
[08:28:10.017]                   }
[08:28:10.017]                   muffleCondition(cond)
[08:28:10.017]                 })
[08:28:10.017]             }))
[08:28:10.017]             future::FutureResult(value = ...future.value$value, 
[08:28:10.017]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.017]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.017]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.017]                     ...future.globalenv.names))
[08:28:10.017]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.017]         }, condition = base::local({
[08:28:10.017]             c <- base::c
[08:28:10.017]             inherits <- base::inherits
[08:28:10.017]             invokeRestart <- base::invokeRestart
[08:28:10.017]             length <- base::length
[08:28:10.017]             list <- base::list
[08:28:10.017]             seq.int <- base::seq.int
[08:28:10.017]             signalCondition <- base::signalCondition
[08:28:10.017]             sys.calls <- base::sys.calls
[08:28:10.017]             `[[` <- base::`[[`
[08:28:10.017]             `+` <- base::`+`
[08:28:10.017]             `<<-` <- base::`<<-`
[08:28:10.017]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.017]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.017]                   3L)]
[08:28:10.017]             }
[08:28:10.017]             function(cond) {
[08:28:10.017]                 is_error <- inherits(cond, "error")
[08:28:10.017]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.017]                   NULL)
[08:28:10.017]                 if (is_error) {
[08:28:10.017]                   sessionInformation <- function() {
[08:28:10.017]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.017]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.017]                       search = base::search(), system = base::Sys.info())
[08:28:10.017]                   }
[08:28:10.017]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.017]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.017]                     cond$call), session = sessionInformation(), 
[08:28:10.017]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.017]                   signalCondition(cond)
[08:28:10.017]                 }
[08:28:10.017]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.017]                 "immediateCondition"))) {
[08:28:10.017]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.017]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.017]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.017]                   if (TRUE && !signal) {
[08:28:10.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.017]                     {
[08:28:10.017]                       inherits <- base::inherits
[08:28:10.017]                       invokeRestart <- base::invokeRestart
[08:28:10.017]                       is.null <- base::is.null
[08:28:10.017]                       muffled <- FALSE
[08:28:10.017]                       if (inherits(cond, "message")) {
[08:28:10.017]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.017]                         if (muffled) 
[08:28:10.017]                           invokeRestart("muffleMessage")
[08:28:10.017]                       }
[08:28:10.017]                       else if (inherits(cond, "warning")) {
[08:28:10.017]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.017]                         if (muffled) 
[08:28:10.017]                           invokeRestart("muffleWarning")
[08:28:10.017]                       }
[08:28:10.017]                       else if (inherits(cond, "condition")) {
[08:28:10.017]                         if (!is.null(pattern)) {
[08:28:10.017]                           computeRestarts <- base::computeRestarts
[08:28:10.017]                           grepl <- base::grepl
[08:28:10.017]                           restarts <- computeRestarts(cond)
[08:28:10.017]                           for (restart in restarts) {
[08:28:10.017]                             name <- restart$name
[08:28:10.017]                             if (is.null(name)) 
[08:28:10.017]                               next
[08:28:10.017]                             if (!grepl(pattern, name)) 
[08:28:10.017]                               next
[08:28:10.017]                             invokeRestart(restart)
[08:28:10.017]                             muffled <- TRUE
[08:28:10.017]                             break
[08:28:10.017]                           }
[08:28:10.017]                         }
[08:28:10.017]                       }
[08:28:10.017]                       invisible(muffled)
[08:28:10.017]                     }
[08:28:10.017]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.017]                   }
[08:28:10.017]                 }
[08:28:10.017]                 else {
[08:28:10.017]                   if (TRUE) {
[08:28:10.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.017]                     {
[08:28:10.017]                       inherits <- base::inherits
[08:28:10.017]                       invokeRestart <- base::invokeRestart
[08:28:10.017]                       is.null <- base::is.null
[08:28:10.017]                       muffled <- FALSE
[08:28:10.017]                       if (inherits(cond, "message")) {
[08:28:10.017]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.017]                         if (muffled) 
[08:28:10.017]                           invokeRestart("muffleMessage")
[08:28:10.017]                       }
[08:28:10.017]                       else if (inherits(cond, "warning")) {
[08:28:10.017]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.017]                         if (muffled) 
[08:28:10.017]                           invokeRestart("muffleWarning")
[08:28:10.017]                       }
[08:28:10.017]                       else if (inherits(cond, "condition")) {
[08:28:10.017]                         if (!is.null(pattern)) {
[08:28:10.017]                           computeRestarts <- base::computeRestarts
[08:28:10.017]                           grepl <- base::grepl
[08:28:10.017]                           restarts <- computeRestarts(cond)
[08:28:10.017]                           for (restart in restarts) {
[08:28:10.017]                             name <- restart$name
[08:28:10.017]                             if (is.null(name)) 
[08:28:10.017]                               next
[08:28:10.017]                             if (!grepl(pattern, name)) 
[08:28:10.017]                               next
[08:28:10.017]                             invokeRestart(restart)
[08:28:10.017]                             muffled <- TRUE
[08:28:10.017]                             break
[08:28:10.017]                           }
[08:28:10.017]                         }
[08:28:10.017]                       }
[08:28:10.017]                       invisible(muffled)
[08:28:10.017]                     }
[08:28:10.017]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.017]                   }
[08:28:10.017]                 }
[08:28:10.017]             }
[08:28:10.017]         }))
[08:28:10.017]     }, error = function(ex) {
[08:28:10.017]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.017]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.017]                 ...future.rng), started = ...future.startTime, 
[08:28:10.017]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.017]             version = "1.8"), class = "FutureResult")
[08:28:10.017]     }, finally = {
[08:28:10.017]         if (!identical(...future.workdir, getwd())) 
[08:28:10.017]             setwd(...future.workdir)
[08:28:10.017]         {
[08:28:10.017]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.017]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.017]             }
[08:28:10.017]             base::options(...future.oldOptions)
[08:28:10.017]             if (.Platform$OS.type == "windows") {
[08:28:10.017]                 old_names <- names(...future.oldEnvVars)
[08:28:10.017]                 envs <- base::Sys.getenv()
[08:28:10.017]                 names <- names(envs)
[08:28:10.017]                 common <- intersect(names, old_names)
[08:28:10.017]                 added <- setdiff(names, old_names)
[08:28:10.017]                 removed <- setdiff(old_names, names)
[08:28:10.017]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.017]                   envs[common]]
[08:28:10.017]                 NAMES <- toupper(changed)
[08:28:10.017]                 args <- list()
[08:28:10.017]                 for (kk in seq_along(NAMES)) {
[08:28:10.017]                   name <- changed[[kk]]
[08:28:10.017]                   NAME <- NAMES[[kk]]
[08:28:10.017]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.017]                     next
[08:28:10.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.017]                 }
[08:28:10.017]                 NAMES <- toupper(added)
[08:28:10.017]                 for (kk in seq_along(NAMES)) {
[08:28:10.017]                   name <- added[[kk]]
[08:28:10.017]                   NAME <- NAMES[[kk]]
[08:28:10.017]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.017]                     next
[08:28:10.017]                   args[[name]] <- ""
[08:28:10.017]                 }
[08:28:10.017]                 NAMES <- toupper(removed)
[08:28:10.017]                 for (kk in seq_along(NAMES)) {
[08:28:10.017]                   name <- removed[[kk]]
[08:28:10.017]                   NAME <- NAMES[[kk]]
[08:28:10.017]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.017]                     next
[08:28:10.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.017]                 }
[08:28:10.017]                 if (length(args) > 0) 
[08:28:10.017]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.017]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.017]             }
[08:28:10.017]             else {
[08:28:10.017]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.017]             }
[08:28:10.017]             {
[08:28:10.017]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.017]                   0L) {
[08:28:10.017]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.017]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.017]                   base::options(opts)
[08:28:10.017]                 }
[08:28:10.017]                 {
[08:28:10.017]                   {
[08:28:10.017]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.017]                     NULL
[08:28:10.017]                   }
[08:28:10.017]                   options(future.plan = NULL)
[08:28:10.017]                   if (is.na(NA_character_)) 
[08:28:10.017]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.017]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.017]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.017]                     .init = FALSE)
[08:28:10.017]                 }
[08:28:10.017]             }
[08:28:10.017]         }
[08:28:10.017]     })
[08:28:10.017]     if (TRUE) {
[08:28:10.017]         base::sink(type = "output", split = FALSE)
[08:28:10.017]         if (TRUE) {
[08:28:10.017]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.017]         }
[08:28:10.017]         else {
[08:28:10.017]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.017]         }
[08:28:10.017]         base::close(...future.stdout)
[08:28:10.017]         ...future.stdout <- NULL
[08:28:10.017]     }
[08:28:10.017]     ...future.result$conditions <- ...future.conditions
[08:28:10.017]     ...future.result$finished <- base::Sys.time()
[08:28:10.017]     ...future.result
[08:28:10.017] }
[08:28:10.020] assign_globals() ...
[08:28:10.022] List of 1
[08:28:10.022]  $ x: list()
[08:28:10.022]  - attr(*, "where")=List of 1
[08:28:10.022]   ..$ x:<environment: R_EmptyEnv> 
[08:28:10.022]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:10.022]  - attr(*, "resolved")= logi TRUE
[08:28:10.022]  - attr(*, "total_size")= num 31
[08:28:10.022]  - attr(*, "already-done")= logi TRUE
[08:28:10.026] - copied ‘x’ to environment
[08:28:10.026] assign_globals() ... done
[08:28:10.026] requestCore(): workers = 2
[08:28:10.028] MulticoreFuture started
[08:28:10.029] - Launch lazy future ... done
[08:28:10.029] run() for ‘MulticoreFuture’ ... done
[08:28:10.029] plan(): Setting new future strategy stack:
[08:28:10.029] result() for MulticoreFuture ...
[08:28:10.029] List of future strategies:
[08:28:10.029] 1. sequential:
[08:28:10.029]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:10.029]    - tweaked: FALSE
[08:28:10.029]    - call: NULL
[08:28:10.030] plan(): nbrOfWorkers() = 1
[08:28:10.032] plan(): Setting new future strategy stack:
[08:28:10.032] List of future strategies:
[08:28:10.032] 1. multicore:
[08:28:10.032]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:10.032]    - tweaked: FALSE
[08:28:10.032]    - call: plan(strategy)
[08:28:10.035] plan(): nbrOfWorkers() = 2
[08:28:10.036] result() for MulticoreFuture ...
[08:28:10.036] result() for MulticoreFuture ... done
[08:28:10.037] result() for MulticoreFuture ... done
[08:28:10.037] result() for MulticoreFuture ...
[08:28:10.037] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.038] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.038] Searching for globals...
[08:28:10.041] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:10.041] Searching for globals ... DONE
[08:28:10.041] Resolving globals: TRUE
[08:28:10.041] Resolving any globals that are futures ...
[08:28:10.041] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:10.041] Resolving any globals that are futures ... DONE
[08:28:10.042] Resolving futures part of globals (recursively) ...
[08:28:10.042] resolve() on list ...
[08:28:10.042]  recursive: 99
[08:28:10.042]  length: 1
[08:28:10.042]  elements: ‘x’
[08:28:10.043]  length: 0 (resolved future 1)
[08:28:10.043] resolve() on list ... DONE
[08:28:10.043] - globals: [1] ‘x’
[08:28:10.043] Resolving futures part of globals (recursively) ... DONE
[08:28:10.043] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:10.044] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:10.044] - globals: [1] ‘x’
[08:28:10.044] 
[08:28:10.044] getGlobalsAndPackages() ... DONE
[08:28:10.044] run() for ‘Future’ ...
[08:28:10.044] - state: ‘created’
[08:28:10.045] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.047] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.047] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:10.047]   - Field: ‘label’
[08:28:10.047]   - Field: ‘local’
[08:28:10.047]   - Field: ‘owner’
[08:28:10.047]   - Field: ‘envir’
[08:28:10.047]   - Field: ‘workers’
[08:28:10.047]   - Field: ‘packages’
[08:28:10.048]   - Field: ‘gc’
[08:28:10.048]   - Field: ‘job’
[08:28:10.048]   - Field: ‘conditions’
[08:28:10.048]   - Field: ‘expr’
[08:28:10.048]   - Field: ‘uuid’
[08:28:10.048]   - Field: ‘seed’
[08:28:10.048]   - Field: ‘version’
[08:28:10.048]   - Field: ‘result’
[08:28:10.048]   - Field: ‘asynchronous’
[08:28:10.049]   - Field: ‘calls’
[08:28:10.049]   - Field: ‘globals’
[08:28:10.049]   - Field: ‘stdout’
[08:28:10.049]   - Field: ‘earlySignal’
[08:28:10.049]   - Field: ‘lazy’
[08:28:10.049]   - Field: ‘state’
[08:28:10.049] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:10.049] - Launch lazy future ...
[08:28:10.050] Packages needed by the future expression (n = 0): <none>
[08:28:10.050] Packages needed by future strategies (n = 0): <none>
[08:28:10.050] {
[08:28:10.050]     {
[08:28:10.050]         {
[08:28:10.050]             ...future.startTime <- base::Sys.time()
[08:28:10.050]             {
[08:28:10.050]                 {
[08:28:10.050]                   {
[08:28:10.050]                     {
[08:28:10.050]                       base::local({
[08:28:10.050]                         has_future <- base::requireNamespace("future", 
[08:28:10.050]                           quietly = TRUE)
[08:28:10.050]                         if (has_future) {
[08:28:10.050]                           ns <- base::getNamespace("future")
[08:28:10.050]                           version <- ns[[".package"]][["version"]]
[08:28:10.050]                           if (is.null(version)) 
[08:28:10.050]                             version <- utils::packageVersion("future")
[08:28:10.050]                         }
[08:28:10.050]                         else {
[08:28:10.050]                           version <- NULL
[08:28:10.050]                         }
[08:28:10.050]                         if (!has_future || version < "1.8.0") {
[08:28:10.050]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.050]                             "", base::R.version$version.string), 
[08:28:10.050]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.050]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.050]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.050]                               "release", "version")], collapse = " "), 
[08:28:10.050]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.050]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.050]                             info)
[08:28:10.050]                           info <- base::paste(info, collapse = "; ")
[08:28:10.050]                           if (!has_future) {
[08:28:10.050]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.050]                               info)
[08:28:10.050]                           }
[08:28:10.050]                           else {
[08:28:10.050]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.050]                               info, version)
[08:28:10.050]                           }
[08:28:10.050]                           base::stop(msg)
[08:28:10.050]                         }
[08:28:10.050]                       })
[08:28:10.050]                     }
[08:28:10.050]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.050]                     base::options(mc.cores = 1L)
[08:28:10.050]                   }
[08:28:10.050]                   ...future.strategy.old <- future::plan("list")
[08:28:10.050]                   options(future.plan = NULL)
[08:28:10.050]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.050]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.050]                 }
[08:28:10.050]                 ...future.workdir <- getwd()
[08:28:10.050]             }
[08:28:10.050]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.050]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.050]         }
[08:28:10.050]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.050]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.050]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.050]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.050]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.050]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.050]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.050]             base::names(...future.oldOptions))
[08:28:10.050]     }
[08:28:10.050]     if (FALSE) {
[08:28:10.050]     }
[08:28:10.050]     else {
[08:28:10.050]         if (TRUE) {
[08:28:10.050]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.050]                 open = "w")
[08:28:10.050]         }
[08:28:10.050]         else {
[08:28:10.050]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.050]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.050]         }
[08:28:10.050]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.050]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.050]             base::sink(type = "output", split = FALSE)
[08:28:10.050]             base::close(...future.stdout)
[08:28:10.050]         }, add = TRUE)
[08:28:10.050]     }
[08:28:10.050]     ...future.frame <- base::sys.nframe()
[08:28:10.050]     ...future.conditions <- base::list()
[08:28:10.050]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.050]     if (FALSE) {
[08:28:10.050]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.050]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.050]     }
[08:28:10.050]     ...future.result <- base::tryCatch({
[08:28:10.050]         base::withCallingHandlers({
[08:28:10.050]             ...future.value <- base::withVisible(base::local({
[08:28:10.050]                 withCallingHandlers({
[08:28:10.050]                   {
[08:28:10.050]                     x[["a"]] <- 1
[08:28:10.050]                     x
[08:28:10.050]                   }
[08:28:10.050]                 }, immediateCondition = function(cond) {
[08:28:10.050]                   save_rds <- function (object, pathname, ...) 
[08:28:10.050]                   {
[08:28:10.050]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:10.050]                     if (file_test("-f", pathname_tmp)) {
[08:28:10.050]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.050]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:10.050]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.050]                         fi_tmp[["mtime"]])
[08:28:10.050]                     }
[08:28:10.050]                     tryCatch({
[08:28:10.050]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:10.050]                     }, error = function(ex) {
[08:28:10.050]                       msg <- conditionMessage(ex)
[08:28:10.050]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.050]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:10.050]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.050]                         fi_tmp[["mtime"]], msg)
[08:28:10.050]                       ex$message <- msg
[08:28:10.050]                       stop(ex)
[08:28:10.050]                     })
[08:28:10.050]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:10.050]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:10.050]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:10.050]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.050]                       fi <- file.info(pathname)
[08:28:10.050]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:10.050]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.050]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:10.050]                         fi[["size"]], fi[["mtime"]])
[08:28:10.050]                       stop(msg)
[08:28:10.050]                     }
[08:28:10.050]                     invisible(pathname)
[08:28:10.050]                   }
[08:28:10.050]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:10.050]                     rootPath = tempdir()) 
[08:28:10.050]                   {
[08:28:10.050]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:10.050]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:10.050]                       tmpdir = path, fileext = ".rds")
[08:28:10.050]                     save_rds(obj, file)
[08:28:10.050]                   }
[08:28:10.050]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:10.050]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.050]                   {
[08:28:10.050]                     inherits <- base::inherits
[08:28:10.050]                     invokeRestart <- base::invokeRestart
[08:28:10.050]                     is.null <- base::is.null
[08:28:10.050]                     muffled <- FALSE
[08:28:10.050]                     if (inherits(cond, "message")) {
[08:28:10.050]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.050]                       if (muffled) 
[08:28:10.050]                         invokeRestart("muffleMessage")
[08:28:10.050]                     }
[08:28:10.050]                     else if (inherits(cond, "warning")) {
[08:28:10.050]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.050]                       if (muffled) 
[08:28:10.050]                         invokeRestart("muffleWarning")
[08:28:10.050]                     }
[08:28:10.050]                     else if (inherits(cond, "condition")) {
[08:28:10.050]                       if (!is.null(pattern)) {
[08:28:10.050]                         computeRestarts <- base::computeRestarts
[08:28:10.050]                         grepl <- base::grepl
[08:28:10.050]                         restarts <- computeRestarts(cond)
[08:28:10.050]                         for (restart in restarts) {
[08:28:10.050]                           name <- restart$name
[08:28:10.050]                           if (is.null(name)) 
[08:28:10.050]                             next
[08:28:10.050]                           if (!grepl(pattern, name)) 
[08:28:10.050]                             next
[08:28:10.050]                           invokeRestart(restart)
[08:28:10.050]                           muffled <- TRUE
[08:28:10.050]                           break
[08:28:10.050]                         }
[08:28:10.050]                       }
[08:28:10.050]                     }
[08:28:10.050]                     invisible(muffled)
[08:28:10.050]                   }
[08:28:10.050]                   muffleCondition(cond)
[08:28:10.050]                 })
[08:28:10.050]             }))
[08:28:10.050]             future::FutureResult(value = ...future.value$value, 
[08:28:10.050]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.050]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.050]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.050]                     ...future.globalenv.names))
[08:28:10.050]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.050]         }, condition = base::local({
[08:28:10.050]             c <- base::c
[08:28:10.050]             inherits <- base::inherits
[08:28:10.050]             invokeRestart <- base::invokeRestart
[08:28:10.050]             length <- base::length
[08:28:10.050]             list <- base::list
[08:28:10.050]             seq.int <- base::seq.int
[08:28:10.050]             signalCondition <- base::signalCondition
[08:28:10.050]             sys.calls <- base::sys.calls
[08:28:10.050]             `[[` <- base::`[[`
[08:28:10.050]             `+` <- base::`+`
[08:28:10.050]             `<<-` <- base::`<<-`
[08:28:10.050]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.050]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.050]                   3L)]
[08:28:10.050]             }
[08:28:10.050]             function(cond) {
[08:28:10.050]                 is_error <- inherits(cond, "error")
[08:28:10.050]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.050]                   NULL)
[08:28:10.050]                 if (is_error) {
[08:28:10.050]                   sessionInformation <- function() {
[08:28:10.050]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.050]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.050]                       search = base::search(), system = base::Sys.info())
[08:28:10.050]                   }
[08:28:10.050]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.050]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.050]                     cond$call), session = sessionInformation(), 
[08:28:10.050]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.050]                   signalCondition(cond)
[08:28:10.050]                 }
[08:28:10.050]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.050]                 "immediateCondition"))) {
[08:28:10.050]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.050]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.050]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.050]                   if (TRUE && !signal) {
[08:28:10.050]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.050]                     {
[08:28:10.050]                       inherits <- base::inherits
[08:28:10.050]                       invokeRestart <- base::invokeRestart
[08:28:10.050]                       is.null <- base::is.null
[08:28:10.050]                       muffled <- FALSE
[08:28:10.050]                       if (inherits(cond, "message")) {
[08:28:10.050]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.050]                         if (muffled) 
[08:28:10.050]                           invokeRestart("muffleMessage")
[08:28:10.050]                       }
[08:28:10.050]                       else if (inherits(cond, "warning")) {
[08:28:10.050]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.050]                         if (muffled) 
[08:28:10.050]                           invokeRestart("muffleWarning")
[08:28:10.050]                       }
[08:28:10.050]                       else if (inherits(cond, "condition")) {
[08:28:10.050]                         if (!is.null(pattern)) {
[08:28:10.050]                           computeRestarts <- base::computeRestarts
[08:28:10.050]                           grepl <- base::grepl
[08:28:10.050]                           restarts <- computeRestarts(cond)
[08:28:10.050]                           for (restart in restarts) {
[08:28:10.050]                             name <- restart$name
[08:28:10.050]                             if (is.null(name)) 
[08:28:10.050]                               next
[08:28:10.050]                             if (!grepl(pattern, name)) 
[08:28:10.050]                               next
[08:28:10.050]                             invokeRestart(restart)
[08:28:10.050]                             muffled <- TRUE
[08:28:10.050]                             break
[08:28:10.050]                           }
[08:28:10.050]                         }
[08:28:10.050]                       }
[08:28:10.050]                       invisible(muffled)
[08:28:10.050]                     }
[08:28:10.050]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.050]                   }
[08:28:10.050]                 }
[08:28:10.050]                 else {
[08:28:10.050]                   if (TRUE) {
[08:28:10.050]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.050]                     {
[08:28:10.050]                       inherits <- base::inherits
[08:28:10.050]                       invokeRestart <- base::invokeRestart
[08:28:10.050]                       is.null <- base::is.null
[08:28:10.050]                       muffled <- FALSE
[08:28:10.050]                       if (inherits(cond, "message")) {
[08:28:10.050]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.050]                         if (muffled) 
[08:28:10.050]                           invokeRestart("muffleMessage")
[08:28:10.050]                       }
[08:28:10.050]                       else if (inherits(cond, "warning")) {
[08:28:10.050]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.050]                         if (muffled) 
[08:28:10.050]                           invokeRestart("muffleWarning")
[08:28:10.050]                       }
[08:28:10.050]                       else if (inherits(cond, "condition")) {
[08:28:10.050]                         if (!is.null(pattern)) {
[08:28:10.050]                           computeRestarts <- base::computeRestarts
[08:28:10.050]                           grepl <- base::grepl
[08:28:10.050]                           restarts <- computeRestarts(cond)
[08:28:10.050]                           for (restart in restarts) {
[08:28:10.050]                             name <- restart$name
[08:28:10.050]                             if (is.null(name)) 
[08:28:10.050]                               next
[08:28:10.050]                             if (!grepl(pattern, name)) 
[08:28:10.050]                               next
[08:28:10.050]                             invokeRestart(restart)
[08:28:10.050]                             muffled <- TRUE
[08:28:10.050]                             break
[08:28:10.050]                           }
[08:28:10.050]                         }
[08:28:10.050]                       }
[08:28:10.050]                       invisible(muffled)
[08:28:10.050]                     }
[08:28:10.050]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.050]                   }
[08:28:10.050]                 }
[08:28:10.050]             }
[08:28:10.050]         }))
[08:28:10.050]     }, error = function(ex) {
[08:28:10.050]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.050]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.050]                 ...future.rng), started = ...future.startTime, 
[08:28:10.050]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.050]             version = "1.8"), class = "FutureResult")
[08:28:10.050]     }, finally = {
[08:28:10.050]         if (!identical(...future.workdir, getwd())) 
[08:28:10.050]             setwd(...future.workdir)
[08:28:10.050]         {
[08:28:10.050]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.050]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.050]             }
[08:28:10.050]             base::options(...future.oldOptions)
[08:28:10.050]             if (.Platform$OS.type == "windows") {
[08:28:10.050]                 old_names <- names(...future.oldEnvVars)
[08:28:10.050]                 envs <- base::Sys.getenv()
[08:28:10.050]                 names <- names(envs)
[08:28:10.050]                 common <- intersect(names, old_names)
[08:28:10.050]                 added <- setdiff(names, old_names)
[08:28:10.050]                 removed <- setdiff(old_names, names)
[08:28:10.050]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.050]                   envs[common]]
[08:28:10.050]                 NAMES <- toupper(changed)
[08:28:10.050]                 args <- list()
[08:28:10.050]                 for (kk in seq_along(NAMES)) {
[08:28:10.050]                   name <- changed[[kk]]
[08:28:10.050]                   NAME <- NAMES[[kk]]
[08:28:10.050]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.050]                     next
[08:28:10.050]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.050]                 }
[08:28:10.050]                 NAMES <- toupper(added)
[08:28:10.050]                 for (kk in seq_along(NAMES)) {
[08:28:10.050]                   name <- added[[kk]]
[08:28:10.050]                   NAME <- NAMES[[kk]]
[08:28:10.050]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.050]                     next
[08:28:10.050]                   args[[name]] <- ""
[08:28:10.050]                 }
[08:28:10.050]                 NAMES <- toupper(removed)
[08:28:10.050]                 for (kk in seq_along(NAMES)) {
[08:28:10.050]                   name <- removed[[kk]]
[08:28:10.050]                   NAME <- NAMES[[kk]]
[08:28:10.050]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.050]                     next
[08:28:10.050]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.050]                 }
[08:28:10.050]                 if (length(args) > 0) 
[08:28:10.050]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.050]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.050]             }
[08:28:10.050]             else {
[08:28:10.050]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.050]             }
[08:28:10.050]             {
[08:28:10.050]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.050]                   0L) {
[08:28:10.050]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.050]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.050]                   base::options(opts)
[08:28:10.050]                 }
[08:28:10.050]                 {
[08:28:10.050]                   {
[08:28:10.050]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.050]                     NULL
[08:28:10.050]                   }
[08:28:10.050]                   options(future.plan = NULL)
[08:28:10.050]                   if (is.na(NA_character_)) 
[08:28:10.050]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.050]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.050]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.050]                     .init = FALSE)
[08:28:10.050]                 }
[08:28:10.050]             }
[08:28:10.050]         }
[08:28:10.050]     })
[08:28:10.050]     if (TRUE) {
[08:28:10.050]         base::sink(type = "output", split = FALSE)
[08:28:10.050]         if (TRUE) {
[08:28:10.050]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.050]         }
[08:28:10.050]         else {
[08:28:10.050]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.050]         }
[08:28:10.050]         base::close(...future.stdout)
[08:28:10.050]         ...future.stdout <- NULL
[08:28:10.050]     }
[08:28:10.050]     ...future.result$conditions <- ...future.conditions
[08:28:10.050]     ...future.result$finished <- base::Sys.time()
[08:28:10.050]     ...future.result
[08:28:10.050] }
[08:28:10.053] assign_globals() ...
[08:28:10.053] List of 1
[08:28:10.053]  $ x: list()
[08:28:10.053]  - attr(*, "where")=List of 1
[08:28:10.053]   ..$ x:<environment: R_EmptyEnv> 
[08:28:10.053]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:10.053]  - attr(*, "resolved")= logi TRUE
[08:28:10.053]  - attr(*, "total_size")= num 31
[08:28:10.053]  - attr(*, "already-done")= logi TRUE
[08:28:10.056] - copied ‘x’ to environment
[08:28:10.056] assign_globals() ... done
[08:28:10.056] requestCore(): workers = 2
[08:28:10.058] MulticoreFuture started
[08:28:10.059] - Launch lazy future ... done
[08:28:10.059] run() for ‘MulticoreFuture’ ... done
[08:28:10.059] plan(): Setting new future strategy stack:
[08:28:10.060] result() for MulticoreFuture ...
[08:28:10.060] List of future strategies:
[08:28:10.060] 1. sequential:
[08:28:10.060]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:10.060]    - tweaked: FALSE
[08:28:10.060]    - call: NULL
[08:28:10.061] plan(): nbrOfWorkers() = 1
[08:28:10.063] plan(): Setting new future strategy stack:
[08:28:10.063] List of future strategies:
[08:28:10.063] 1. multicore:
[08:28:10.063]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:10.063]    - tweaked: FALSE
[08:28:10.063]    - call: plan(strategy)
[08:28:10.066] plan(): nbrOfWorkers() = 2
[08:28:10.067] result() for MulticoreFuture ...
[08:28:10.067] result() for MulticoreFuture ... done
[08:28:10.067] result() for MulticoreFuture ... done
[08:28:10.067] result() for MulticoreFuture ...
[08:28:10.068] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.068] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.068] Searching for globals...
[08:28:10.071] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:10.071] Searching for globals ... DONE
[08:28:10.072] Resolving globals: TRUE
[08:28:10.072] Resolving any globals that are futures ...
[08:28:10.072] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:10.072] Resolving any globals that are futures ... DONE
[08:28:10.072] Resolving futures part of globals (recursively) ...
[08:28:10.075] resolve() on list ...
[08:28:10.075]  recursive: 99
[08:28:10.075]  length: 1
[08:28:10.076]  elements: ‘x’
[08:28:10.076]  length: 0 (resolved future 1)
[08:28:10.076] resolve() on list ... DONE
[08:28:10.076] - globals: [1] ‘x’
[08:28:10.076] Resolving futures part of globals (recursively) ... DONE
[08:28:10.076] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:10.077] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:10.077] - globals: [1] ‘x’
[08:28:10.077] 
[08:28:10.077] getGlobalsAndPackages() ... DONE
[08:28:10.078] run() for ‘Future’ ...
[08:28:10.078] - state: ‘created’
[08:28:10.078] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.080] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.080] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:10.080]   - Field: ‘label’
[08:28:10.080]   - Field: ‘local’
[08:28:10.081]   - Field: ‘owner’
[08:28:10.081]   - Field: ‘envir’
[08:28:10.081]   - Field: ‘workers’
[08:28:10.081]   - Field: ‘packages’
[08:28:10.081]   - Field: ‘gc’
[08:28:10.081]   - Field: ‘job’
[08:28:10.081]   - Field: ‘conditions’
[08:28:10.081]   - Field: ‘expr’
[08:28:10.081]   - Field: ‘uuid’
[08:28:10.082]   - Field: ‘seed’
[08:28:10.082]   - Field: ‘version’
[08:28:10.082]   - Field: ‘result’
[08:28:10.082]   - Field: ‘asynchronous’
[08:28:10.082]   - Field: ‘calls’
[08:28:10.082]   - Field: ‘globals’
[08:28:10.082]   - Field: ‘stdout’
[08:28:10.082]   - Field: ‘earlySignal’
[08:28:10.082]   - Field: ‘lazy’
[08:28:10.083]   - Field: ‘state’
[08:28:10.083] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:10.083] - Launch lazy future ...
[08:28:10.083] Packages needed by the future expression (n = 0): <none>
[08:28:10.083] Packages needed by future strategies (n = 0): <none>
[08:28:10.084] {
[08:28:10.084]     {
[08:28:10.084]         {
[08:28:10.084]             ...future.startTime <- base::Sys.time()
[08:28:10.084]             {
[08:28:10.084]                 {
[08:28:10.084]                   {
[08:28:10.084]                     {
[08:28:10.084]                       base::local({
[08:28:10.084]                         has_future <- base::requireNamespace("future", 
[08:28:10.084]                           quietly = TRUE)
[08:28:10.084]                         if (has_future) {
[08:28:10.084]                           ns <- base::getNamespace("future")
[08:28:10.084]                           version <- ns[[".package"]][["version"]]
[08:28:10.084]                           if (is.null(version)) 
[08:28:10.084]                             version <- utils::packageVersion("future")
[08:28:10.084]                         }
[08:28:10.084]                         else {
[08:28:10.084]                           version <- NULL
[08:28:10.084]                         }
[08:28:10.084]                         if (!has_future || version < "1.8.0") {
[08:28:10.084]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.084]                             "", base::R.version$version.string), 
[08:28:10.084]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.084]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.084]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.084]                               "release", "version")], collapse = " "), 
[08:28:10.084]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.084]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.084]                             info)
[08:28:10.084]                           info <- base::paste(info, collapse = "; ")
[08:28:10.084]                           if (!has_future) {
[08:28:10.084]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.084]                               info)
[08:28:10.084]                           }
[08:28:10.084]                           else {
[08:28:10.084]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.084]                               info, version)
[08:28:10.084]                           }
[08:28:10.084]                           base::stop(msg)
[08:28:10.084]                         }
[08:28:10.084]                       })
[08:28:10.084]                     }
[08:28:10.084]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.084]                     base::options(mc.cores = 1L)
[08:28:10.084]                   }
[08:28:10.084]                   ...future.strategy.old <- future::plan("list")
[08:28:10.084]                   options(future.plan = NULL)
[08:28:10.084]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.084]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.084]                 }
[08:28:10.084]                 ...future.workdir <- getwd()
[08:28:10.084]             }
[08:28:10.084]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.084]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.084]         }
[08:28:10.084]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.084]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.084]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.084]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.084]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.084]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.084]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.084]             base::names(...future.oldOptions))
[08:28:10.084]     }
[08:28:10.084]     if (FALSE) {
[08:28:10.084]     }
[08:28:10.084]     else {
[08:28:10.084]         if (TRUE) {
[08:28:10.084]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.084]                 open = "w")
[08:28:10.084]         }
[08:28:10.084]         else {
[08:28:10.084]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.084]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.084]         }
[08:28:10.084]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.084]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.084]             base::sink(type = "output", split = FALSE)
[08:28:10.084]             base::close(...future.stdout)
[08:28:10.084]         }, add = TRUE)
[08:28:10.084]     }
[08:28:10.084]     ...future.frame <- base::sys.nframe()
[08:28:10.084]     ...future.conditions <- base::list()
[08:28:10.084]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.084]     if (FALSE) {
[08:28:10.084]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.084]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.084]     }
[08:28:10.084]     ...future.result <- base::tryCatch({
[08:28:10.084]         base::withCallingHandlers({
[08:28:10.084]             ...future.value <- base::withVisible(base::local({
[08:28:10.084]                 withCallingHandlers({
[08:28:10.084]                   {
[08:28:10.084]                     x["a"] <- list(1)
[08:28:10.084]                     x
[08:28:10.084]                   }
[08:28:10.084]                 }, immediateCondition = function(cond) {
[08:28:10.084]                   save_rds <- function (object, pathname, ...) 
[08:28:10.084]                   {
[08:28:10.084]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:10.084]                     if (file_test("-f", pathname_tmp)) {
[08:28:10.084]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.084]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:10.084]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.084]                         fi_tmp[["mtime"]])
[08:28:10.084]                     }
[08:28:10.084]                     tryCatch({
[08:28:10.084]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:10.084]                     }, error = function(ex) {
[08:28:10.084]                       msg <- conditionMessage(ex)
[08:28:10.084]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.084]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:10.084]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.084]                         fi_tmp[["mtime"]], msg)
[08:28:10.084]                       ex$message <- msg
[08:28:10.084]                       stop(ex)
[08:28:10.084]                     })
[08:28:10.084]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:10.084]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:10.084]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:10.084]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.084]                       fi <- file.info(pathname)
[08:28:10.084]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:10.084]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.084]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:10.084]                         fi[["size"]], fi[["mtime"]])
[08:28:10.084]                       stop(msg)
[08:28:10.084]                     }
[08:28:10.084]                     invisible(pathname)
[08:28:10.084]                   }
[08:28:10.084]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:10.084]                     rootPath = tempdir()) 
[08:28:10.084]                   {
[08:28:10.084]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:10.084]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:10.084]                       tmpdir = path, fileext = ".rds")
[08:28:10.084]                     save_rds(obj, file)
[08:28:10.084]                   }
[08:28:10.084]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:10.084]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.084]                   {
[08:28:10.084]                     inherits <- base::inherits
[08:28:10.084]                     invokeRestart <- base::invokeRestart
[08:28:10.084]                     is.null <- base::is.null
[08:28:10.084]                     muffled <- FALSE
[08:28:10.084]                     if (inherits(cond, "message")) {
[08:28:10.084]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.084]                       if (muffled) 
[08:28:10.084]                         invokeRestart("muffleMessage")
[08:28:10.084]                     }
[08:28:10.084]                     else if (inherits(cond, "warning")) {
[08:28:10.084]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.084]                       if (muffled) 
[08:28:10.084]                         invokeRestart("muffleWarning")
[08:28:10.084]                     }
[08:28:10.084]                     else if (inherits(cond, "condition")) {
[08:28:10.084]                       if (!is.null(pattern)) {
[08:28:10.084]                         computeRestarts <- base::computeRestarts
[08:28:10.084]                         grepl <- base::grepl
[08:28:10.084]                         restarts <- computeRestarts(cond)
[08:28:10.084]                         for (restart in restarts) {
[08:28:10.084]                           name <- restart$name
[08:28:10.084]                           if (is.null(name)) 
[08:28:10.084]                             next
[08:28:10.084]                           if (!grepl(pattern, name)) 
[08:28:10.084]                             next
[08:28:10.084]                           invokeRestart(restart)
[08:28:10.084]                           muffled <- TRUE
[08:28:10.084]                           break
[08:28:10.084]                         }
[08:28:10.084]                       }
[08:28:10.084]                     }
[08:28:10.084]                     invisible(muffled)
[08:28:10.084]                   }
[08:28:10.084]                   muffleCondition(cond)
[08:28:10.084]                 })
[08:28:10.084]             }))
[08:28:10.084]             future::FutureResult(value = ...future.value$value, 
[08:28:10.084]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.084]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.084]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.084]                     ...future.globalenv.names))
[08:28:10.084]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.084]         }, condition = base::local({
[08:28:10.084]             c <- base::c
[08:28:10.084]             inherits <- base::inherits
[08:28:10.084]             invokeRestart <- base::invokeRestart
[08:28:10.084]             length <- base::length
[08:28:10.084]             list <- base::list
[08:28:10.084]             seq.int <- base::seq.int
[08:28:10.084]             signalCondition <- base::signalCondition
[08:28:10.084]             sys.calls <- base::sys.calls
[08:28:10.084]             `[[` <- base::`[[`
[08:28:10.084]             `+` <- base::`+`
[08:28:10.084]             `<<-` <- base::`<<-`
[08:28:10.084]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.084]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.084]                   3L)]
[08:28:10.084]             }
[08:28:10.084]             function(cond) {
[08:28:10.084]                 is_error <- inherits(cond, "error")
[08:28:10.084]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.084]                   NULL)
[08:28:10.084]                 if (is_error) {
[08:28:10.084]                   sessionInformation <- function() {
[08:28:10.084]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.084]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.084]                       search = base::search(), system = base::Sys.info())
[08:28:10.084]                   }
[08:28:10.084]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.084]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.084]                     cond$call), session = sessionInformation(), 
[08:28:10.084]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.084]                   signalCondition(cond)
[08:28:10.084]                 }
[08:28:10.084]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.084]                 "immediateCondition"))) {
[08:28:10.084]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.084]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.084]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.084]                   if (TRUE && !signal) {
[08:28:10.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.084]                     {
[08:28:10.084]                       inherits <- base::inherits
[08:28:10.084]                       invokeRestart <- base::invokeRestart
[08:28:10.084]                       is.null <- base::is.null
[08:28:10.084]                       muffled <- FALSE
[08:28:10.084]                       if (inherits(cond, "message")) {
[08:28:10.084]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.084]                         if (muffled) 
[08:28:10.084]                           invokeRestart("muffleMessage")
[08:28:10.084]                       }
[08:28:10.084]                       else if (inherits(cond, "warning")) {
[08:28:10.084]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.084]                         if (muffled) 
[08:28:10.084]                           invokeRestart("muffleWarning")
[08:28:10.084]                       }
[08:28:10.084]                       else if (inherits(cond, "condition")) {
[08:28:10.084]                         if (!is.null(pattern)) {
[08:28:10.084]                           computeRestarts <- base::computeRestarts
[08:28:10.084]                           grepl <- base::grepl
[08:28:10.084]                           restarts <- computeRestarts(cond)
[08:28:10.084]                           for (restart in restarts) {
[08:28:10.084]                             name <- restart$name
[08:28:10.084]                             if (is.null(name)) 
[08:28:10.084]                               next
[08:28:10.084]                             if (!grepl(pattern, name)) 
[08:28:10.084]                               next
[08:28:10.084]                             invokeRestart(restart)
[08:28:10.084]                             muffled <- TRUE
[08:28:10.084]                             break
[08:28:10.084]                           }
[08:28:10.084]                         }
[08:28:10.084]                       }
[08:28:10.084]                       invisible(muffled)
[08:28:10.084]                     }
[08:28:10.084]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.084]                   }
[08:28:10.084]                 }
[08:28:10.084]                 else {
[08:28:10.084]                   if (TRUE) {
[08:28:10.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.084]                     {
[08:28:10.084]                       inherits <- base::inherits
[08:28:10.084]                       invokeRestart <- base::invokeRestart
[08:28:10.084]                       is.null <- base::is.null
[08:28:10.084]                       muffled <- FALSE
[08:28:10.084]                       if (inherits(cond, "message")) {
[08:28:10.084]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.084]                         if (muffled) 
[08:28:10.084]                           invokeRestart("muffleMessage")
[08:28:10.084]                       }
[08:28:10.084]                       else if (inherits(cond, "warning")) {
[08:28:10.084]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.084]                         if (muffled) 
[08:28:10.084]                           invokeRestart("muffleWarning")
[08:28:10.084]                       }
[08:28:10.084]                       else if (inherits(cond, "condition")) {
[08:28:10.084]                         if (!is.null(pattern)) {
[08:28:10.084]                           computeRestarts <- base::computeRestarts
[08:28:10.084]                           grepl <- base::grepl
[08:28:10.084]                           restarts <- computeRestarts(cond)
[08:28:10.084]                           for (restart in restarts) {
[08:28:10.084]                             name <- restart$name
[08:28:10.084]                             if (is.null(name)) 
[08:28:10.084]                               next
[08:28:10.084]                             if (!grepl(pattern, name)) 
[08:28:10.084]                               next
[08:28:10.084]                             invokeRestart(restart)
[08:28:10.084]                             muffled <- TRUE
[08:28:10.084]                             break
[08:28:10.084]                           }
[08:28:10.084]                         }
[08:28:10.084]                       }
[08:28:10.084]                       invisible(muffled)
[08:28:10.084]                     }
[08:28:10.084]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.084]                   }
[08:28:10.084]                 }
[08:28:10.084]             }
[08:28:10.084]         }))
[08:28:10.084]     }, error = function(ex) {
[08:28:10.084]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.084]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.084]                 ...future.rng), started = ...future.startTime, 
[08:28:10.084]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.084]             version = "1.8"), class = "FutureResult")
[08:28:10.084]     }, finally = {
[08:28:10.084]         if (!identical(...future.workdir, getwd())) 
[08:28:10.084]             setwd(...future.workdir)
[08:28:10.084]         {
[08:28:10.084]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.084]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.084]             }
[08:28:10.084]             base::options(...future.oldOptions)
[08:28:10.084]             if (.Platform$OS.type == "windows") {
[08:28:10.084]                 old_names <- names(...future.oldEnvVars)
[08:28:10.084]                 envs <- base::Sys.getenv()
[08:28:10.084]                 names <- names(envs)
[08:28:10.084]                 common <- intersect(names, old_names)
[08:28:10.084]                 added <- setdiff(names, old_names)
[08:28:10.084]                 removed <- setdiff(old_names, names)
[08:28:10.084]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.084]                   envs[common]]
[08:28:10.084]                 NAMES <- toupper(changed)
[08:28:10.084]                 args <- list()
[08:28:10.084]                 for (kk in seq_along(NAMES)) {
[08:28:10.084]                   name <- changed[[kk]]
[08:28:10.084]                   NAME <- NAMES[[kk]]
[08:28:10.084]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.084]                     next
[08:28:10.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.084]                 }
[08:28:10.084]                 NAMES <- toupper(added)
[08:28:10.084]                 for (kk in seq_along(NAMES)) {
[08:28:10.084]                   name <- added[[kk]]
[08:28:10.084]                   NAME <- NAMES[[kk]]
[08:28:10.084]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.084]                     next
[08:28:10.084]                   args[[name]] <- ""
[08:28:10.084]                 }
[08:28:10.084]                 NAMES <- toupper(removed)
[08:28:10.084]                 for (kk in seq_along(NAMES)) {
[08:28:10.084]                   name <- removed[[kk]]
[08:28:10.084]                   NAME <- NAMES[[kk]]
[08:28:10.084]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.084]                     next
[08:28:10.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.084]                 }
[08:28:10.084]                 if (length(args) > 0) 
[08:28:10.084]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.084]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.084]             }
[08:28:10.084]             else {
[08:28:10.084]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.084]             }
[08:28:10.084]             {
[08:28:10.084]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.084]                   0L) {
[08:28:10.084]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.084]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.084]                   base::options(opts)
[08:28:10.084]                 }
[08:28:10.084]                 {
[08:28:10.084]                   {
[08:28:10.084]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.084]                     NULL
[08:28:10.084]                   }
[08:28:10.084]                   options(future.plan = NULL)
[08:28:10.084]                   if (is.na(NA_character_)) 
[08:28:10.084]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.084]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.084]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.084]                     .init = FALSE)
[08:28:10.084]                 }
[08:28:10.084]             }
[08:28:10.084]         }
[08:28:10.084]     })
[08:28:10.084]     if (TRUE) {
[08:28:10.084]         base::sink(type = "output", split = FALSE)
[08:28:10.084]         if (TRUE) {
[08:28:10.084]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.084]         }
[08:28:10.084]         else {
[08:28:10.084]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.084]         }
[08:28:10.084]         base::close(...future.stdout)
[08:28:10.084]         ...future.stdout <- NULL
[08:28:10.084]     }
[08:28:10.084]     ...future.result$conditions <- ...future.conditions
[08:28:10.084]     ...future.result$finished <- base::Sys.time()
[08:28:10.084]     ...future.result
[08:28:10.084] }
[08:28:10.086] assign_globals() ...
[08:28:10.086] List of 1
[08:28:10.086]  $ x: list()
[08:28:10.086]  - attr(*, "where")=List of 1
[08:28:10.086]   ..$ x:<environment: R_EmptyEnv> 
[08:28:10.086]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:10.086]  - attr(*, "resolved")= logi TRUE
[08:28:10.086]  - attr(*, "total_size")= num 31
[08:28:10.086]  - attr(*, "already-done")= logi TRUE
[08:28:10.089] - copied ‘x’ to environment
[08:28:10.089] assign_globals() ... done
[08:28:10.090] requestCore(): workers = 2
[08:28:10.091] MulticoreFuture started
[08:28:10.092] - Launch lazy future ... done
[08:28:10.092] run() for ‘MulticoreFuture’ ... done
[08:28:10.092] result() for MulticoreFuture ...
[08:28:10.092] plan(): Setting new future strategy stack:
[08:28:10.093] List of future strategies:
[08:28:10.093] 1. sequential:
[08:28:10.093]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:10.093]    - tweaked: FALSE
[08:28:10.093]    - call: NULL
[08:28:10.094] plan(): nbrOfWorkers() = 1
[08:28:10.096] plan(): Setting new future strategy stack:
[08:28:10.096] List of future strategies:
[08:28:10.096] 1. multicore:
[08:28:10.096]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:10.096]    - tweaked: FALSE
[08:28:10.096]    - call: plan(strategy)
[08:28:10.099] plan(): nbrOfWorkers() = 2
[08:28:10.100] result() for MulticoreFuture ...
[08:28:10.100] result() for MulticoreFuture ... done
[08:28:10.100] result() for MulticoreFuture ... done
[08:28:10.100] result() for MulticoreFuture ...
[08:28:10.101] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.101] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.101] Searching for globals...
[08:28:10.104] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:10.104] Searching for globals ... DONE
[08:28:10.105] Resolving globals: TRUE
[08:28:10.105] Resolving any globals that are futures ...
[08:28:10.105] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:10.105] Resolving any globals that are futures ... DONE
[08:28:10.105] Resolving futures part of globals (recursively) ...
[08:28:10.106] resolve() on list ...
[08:28:10.106]  recursive: 99
[08:28:10.106]  length: 1
[08:28:10.106]  elements: ‘x’
[08:28:10.106]  length: 0 (resolved future 1)
[08:28:10.106] resolve() on list ... DONE
[08:28:10.106] - globals: [1] ‘x’
[08:28:10.107] Resolving futures part of globals (recursively) ... DONE
[08:28:10.107] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:10.107] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:10.107] - globals: [1] ‘x’
[08:28:10.107] 
[08:28:10.108] getGlobalsAndPackages() ... DONE
[08:28:10.108] run() for ‘Future’ ...
[08:28:10.108] - state: ‘created’
[08:28:10.108] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.110] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.111] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:10.111]   - Field: ‘label’
[08:28:10.111]   - Field: ‘local’
[08:28:10.111]   - Field: ‘owner’
[08:28:10.111]   - Field: ‘envir’
[08:28:10.111]   - Field: ‘workers’
[08:28:10.111]   - Field: ‘packages’
[08:28:10.111]   - Field: ‘gc’
[08:28:10.111]   - Field: ‘job’
[08:28:10.112]   - Field: ‘conditions’
[08:28:10.112]   - Field: ‘expr’
[08:28:10.112]   - Field: ‘uuid’
[08:28:10.112]   - Field: ‘seed’
[08:28:10.112]   - Field: ‘version’
[08:28:10.112]   - Field: ‘result’
[08:28:10.112]   - Field: ‘asynchronous’
[08:28:10.112]   - Field: ‘calls’
[08:28:10.112]   - Field: ‘globals’
[08:28:10.112]   - Field: ‘stdout’
[08:28:10.113]   - Field: ‘earlySignal’
[08:28:10.113]   - Field: ‘lazy’
[08:28:10.113]   - Field: ‘state’
[08:28:10.113] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:10.113] - Launch lazy future ...
[08:28:10.113] Packages needed by the future expression (n = 0): <none>
[08:28:10.113] Packages needed by future strategies (n = 0): <none>
[08:28:10.114] {
[08:28:10.114]     {
[08:28:10.114]         {
[08:28:10.114]             ...future.startTime <- base::Sys.time()
[08:28:10.114]             {
[08:28:10.114]                 {
[08:28:10.114]                   {
[08:28:10.114]                     {
[08:28:10.114]                       base::local({
[08:28:10.114]                         has_future <- base::requireNamespace("future", 
[08:28:10.114]                           quietly = TRUE)
[08:28:10.114]                         if (has_future) {
[08:28:10.114]                           ns <- base::getNamespace("future")
[08:28:10.114]                           version <- ns[[".package"]][["version"]]
[08:28:10.114]                           if (is.null(version)) 
[08:28:10.114]                             version <- utils::packageVersion("future")
[08:28:10.114]                         }
[08:28:10.114]                         else {
[08:28:10.114]                           version <- NULL
[08:28:10.114]                         }
[08:28:10.114]                         if (!has_future || version < "1.8.0") {
[08:28:10.114]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.114]                             "", base::R.version$version.string), 
[08:28:10.114]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.114]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.114]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.114]                               "release", "version")], collapse = " "), 
[08:28:10.114]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.114]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.114]                             info)
[08:28:10.114]                           info <- base::paste(info, collapse = "; ")
[08:28:10.114]                           if (!has_future) {
[08:28:10.114]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.114]                               info)
[08:28:10.114]                           }
[08:28:10.114]                           else {
[08:28:10.114]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.114]                               info, version)
[08:28:10.114]                           }
[08:28:10.114]                           base::stop(msg)
[08:28:10.114]                         }
[08:28:10.114]                       })
[08:28:10.114]                     }
[08:28:10.114]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.114]                     base::options(mc.cores = 1L)
[08:28:10.114]                   }
[08:28:10.114]                   ...future.strategy.old <- future::plan("list")
[08:28:10.114]                   options(future.plan = NULL)
[08:28:10.114]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.114]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.114]                 }
[08:28:10.114]                 ...future.workdir <- getwd()
[08:28:10.114]             }
[08:28:10.114]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.114]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.114]         }
[08:28:10.114]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.114]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.114]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.114]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.114]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.114]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.114]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.114]             base::names(...future.oldOptions))
[08:28:10.114]     }
[08:28:10.114]     if (FALSE) {
[08:28:10.114]     }
[08:28:10.114]     else {
[08:28:10.114]         if (TRUE) {
[08:28:10.114]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.114]                 open = "w")
[08:28:10.114]         }
[08:28:10.114]         else {
[08:28:10.114]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.114]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.114]         }
[08:28:10.114]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.114]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.114]             base::sink(type = "output", split = FALSE)
[08:28:10.114]             base::close(...future.stdout)
[08:28:10.114]         }, add = TRUE)
[08:28:10.114]     }
[08:28:10.114]     ...future.frame <- base::sys.nframe()
[08:28:10.114]     ...future.conditions <- base::list()
[08:28:10.114]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.114]     if (FALSE) {
[08:28:10.114]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.114]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.114]     }
[08:28:10.114]     ...future.result <- base::tryCatch({
[08:28:10.114]         base::withCallingHandlers({
[08:28:10.114]             ...future.value <- base::withVisible(base::local({
[08:28:10.114]                 withCallingHandlers({
[08:28:10.114]                   {
[08:28:10.114]                     x["a"] <- list(1)
[08:28:10.114]                     x
[08:28:10.114]                   }
[08:28:10.114]                 }, immediateCondition = function(cond) {
[08:28:10.114]                   save_rds <- function (object, pathname, ...) 
[08:28:10.114]                   {
[08:28:10.114]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:10.114]                     if (file_test("-f", pathname_tmp)) {
[08:28:10.114]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.114]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:10.114]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.114]                         fi_tmp[["mtime"]])
[08:28:10.114]                     }
[08:28:10.114]                     tryCatch({
[08:28:10.114]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:10.114]                     }, error = function(ex) {
[08:28:10.114]                       msg <- conditionMessage(ex)
[08:28:10.114]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.114]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:10.114]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.114]                         fi_tmp[["mtime"]], msg)
[08:28:10.114]                       ex$message <- msg
[08:28:10.114]                       stop(ex)
[08:28:10.114]                     })
[08:28:10.114]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:10.114]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:10.114]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:10.114]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.114]                       fi <- file.info(pathname)
[08:28:10.114]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:10.114]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.114]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:10.114]                         fi[["size"]], fi[["mtime"]])
[08:28:10.114]                       stop(msg)
[08:28:10.114]                     }
[08:28:10.114]                     invisible(pathname)
[08:28:10.114]                   }
[08:28:10.114]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:10.114]                     rootPath = tempdir()) 
[08:28:10.114]                   {
[08:28:10.114]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:10.114]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:10.114]                       tmpdir = path, fileext = ".rds")
[08:28:10.114]                     save_rds(obj, file)
[08:28:10.114]                   }
[08:28:10.114]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:10.114]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.114]                   {
[08:28:10.114]                     inherits <- base::inherits
[08:28:10.114]                     invokeRestart <- base::invokeRestart
[08:28:10.114]                     is.null <- base::is.null
[08:28:10.114]                     muffled <- FALSE
[08:28:10.114]                     if (inherits(cond, "message")) {
[08:28:10.114]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.114]                       if (muffled) 
[08:28:10.114]                         invokeRestart("muffleMessage")
[08:28:10.114]                     }
[08:28:10.114]                     else if (inherits(cond, "warning")) {
[08:28:10.114]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.114]                       if (muffled) 
[08:28:10.114]                         invokeRestart("muffleWarning")
[08:28:10.114]                     }
[08:28:10.114]                     else if (inherits(cond, "condition")) {
[08:28:10.114]                       if (!is.null(pattern)) {
[08:28:10.114]                         computeRestarts <- base::computeRestarts
[08:28:10.114]                         grepl <- base::grepl
[08:28:10.114]                         restarts <- computeRestarts(cond)
[08:28:10.114]                         for (restart in restarts) {
[08:28:10.114]                           name <- restart$name
[08:28:10.114]                           if (is.null(name)) 
[08:28:10.114]                             next
[08:28:10.114]                           if (!grepl(pattern, name)) 
[08:28:10.114]                             next
[08:28:10.114]                           invokeRestart(restart)
[08:28:10.114]                           muffled <- TRUE
[08:28:10.114]                           break
[08:28:10.114]                         }
[08:28:10.114]                       }
[08:28:10.114]                     }
[08:28:10.114]                     invisible(muffled)
[08:28:10.114]                   }
[08:28:10.114]                   muffleCondition(cond)
[08:28:10.114]                 })
[08:28:10.114]             }))
[08:28:10.114]             future::FutureResult(value = ...future.value$value, 
[08:28:10.114]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.114]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.114]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.114]                     ...future.globalenv.names))
[08:28:10.114]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.114]         }, condition = base::local({
[08:28:10.114]             c <- base::c
[08:28:10.114]             inherits <- base::inherits
[08:28:10.114]             invokeRestart <- base::invokeRestart
[08:28:10.114]             length <- base::length
[08:28:10.114]             list <- base::list
[08:28:10.114]             seq.int <- base::seq.int
[08:28:10.114]             signalCondition <- base::signalCondition
[08:28:10.114]             sys.calls <- base::sys.calls
[08:28:10.114]             `[[` <- base::`[[`
[08:28:10.114]             `+` <- base::`+`
[08:28:10.114]             `<<-` <- base::`<<-`
[08:28:10.114]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.114]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.114]                   3L)]
[08:28:10.114]             }
[08:28:10.114]             function(cond) {
[08:28:10.114]                 is_error <- inherits(cond, "error")
[08:28:10.114]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.114]                   NULL)
[08:28:10.114]                 if (is_error) {
[08:28:10.114]                   sessionInformation <- function() {
[08:28:10.114]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.114]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.114]                       search = base::search(), system = base::Sys.info())
[08:28:10.114]                   }
[08:28:10.114]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.114]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.114]                     cond$call), session = sessionInformation(), 
[08:28:10.114]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.114]                   signalCondition(cond)
[08:28:10.114]                 }
[08:28:10.114]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.114]                 "immediateCondition"))) {
[08:28:10.114]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.114]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.114]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.114]                   if (TRUE && !signal) {
[08:28:10.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.114]                     {
[08:28:10.114]                       inherits <- base::inherits
[08:28:10.114]                       invokeRestart <- base::invokeRestart
[08:28:10.114]                       is.null <- base::is.null
[08:28:10.114]                       muffled <- FALSE
[08:28:10.114]                       if (inherits(cond, "message")) {
[08:28:10.114]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.114]                         if (muffled) 
[08:28:10.114]                           invokeRestart("muffleMessage")
[08:28:10.114]                       }
[08:28:10.114]                       else if (inherits(cond, "warning")) {
[08:28:10.114]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.114]                         if (muffled) 
[08:28:10.114]                           invokeRestart("muffleWarning")
[08:28:10.114]                       }
[08:28:10.114]                       else if (inherits(cond, "condition")) {
[08:28:10.114]                         if (!is.null(pattern)) {
[08:28:10.114]                           computeRestarts <- base::computeRestarts
[08:28:10.114]                           grepl <- base::grepl
[08:28:10.114]                           restarts <- computeRestarts(cond)
[08:28:10.114]                           for (restart in restarts) {
[08:28:10.114]                             name <- restart$name
[08:28:10.114]                             if (is.null(name)) 
[08:28:10.114]                               next
[08:28:10.114]                             if (!grepl(pattern, name)) 
[08:28:10.114]                               next
[08:28:10.114]                             invokeRestart(restart)
[08:28:10.114]                             muffled <- TRUE
[08:28:10.114]                             break
[08:28:10.114]                           }
[08:28:10.114]                         }
[08:28:10.114]                       }
[08:28:10.114]                       invisible(muffled)
[08:28:10.114]                     }
[08:28:10.114]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.114]                   }
[08:28:10.114]                 }
[08:28:10.114]                 else {
[08:28:10.114]                   if (TRUE) {
[08:28:10.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.114]                     {
[08:28:10.114]                       inherits <- base::inherits
[08:28:10.114]                       invokeRestart <- base::invokeRestart
[08:28:10.114]                       is.null <- base::is.null
[08:28:10.114]                       muffled <- FALSE
[08:28:10.114]                       if (inherits(cond, "message")) {
[08:28:10.114]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.114]                         if (muffled) 
[08:28:10.114]                           invokeRestart("muffleMessage")
[08:28:10.114]                       }
[08:28:10.114]                       else if (inherits(cond, "warning")) {
[08:28:10.114]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.114]                         if (muffled) 
[08:28:10.114]                           invokeRestart("muffleWarning")
[08:28:10.114]                       }
[08:28:10.114]                       else if (inherits(cond, "condition")) {
[08:28:10.114]                         if (!is.null(pattern)) {
[08:28:10.114]                           computeRestarts <- base::computeRestarts
[08:28:10.114]                           grepl <- base::grepl
[08:28:10.114]                           restarts <- computeRestarts(cond)
[08:28:10.114]                           for (restart in restarts) {
[08:28:10.114]                             name <- restart$name
[08:28:10.114]                             if (is.null(name)) 
[08:28:10.114]                               next
[08:28:10.114]                             if (!grepl(pattern, name)) 
[08:28:10.114]                               next
[08:28:10.114]                             invokeRestart(restart)
[08:28:10.114]                             muffled <- TRUE
[08:28:10.114]                             break
[08:28:10.114]                           }
[08:28:10.114]                         }
[08:28:10.114]                       }
[08:28:10.114]                       invisible(muffled)
[08:28:10.114]                     }
[08:28:10.114]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.114]                   }
[08:28:10.114]                 }
[08:28:10.114]             }
[08:28:10.114]         }))
[08:28:10.114]     }, error = function(ex) {
[08:28:10.114]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.114]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.114]                 ...future.rng), started = ...future.startTime, 
[08:28:10.114]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.114]             version = "1.8"), class = "FutureResult")
[08:28:10.114]     }, finally = {
[08:28:10.114]         if (!identical(...future.workdir, getwd())) 
[08:28:10.114]             setwd(...future.workdir)
[08:28:10.114]         {
[08:28:10.114]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.114]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.114]             }
[08:28:10.114]             base::options(...future.oldOptions)
[08:28:10.114]             if (.Platform$OS.type == "windows") {
[08:28:10.114]                 old_names <- names(...future.oldEnvVars)
[08:28:10.114]                 envs <- base::Sys.getenv()
[08:28:10.114]                 names <- names(envs)
[08:28:10.114]                 common <- intersect(names, old_names)
[08:28:10.114]                 added <- setdiff(names, old_names)
[08:28:10.114]                 removed <- setdiff(old_names, names)
[08:28:10.114]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.114]                   envs[common]]
[08:28:10.114]                 NAMES <- toupper(changed)
[08:28:10.114]                 args <- list()
[08:28:10.114]                 for (kk in seq_along(NAMES)) {
[08:28:10.114]                   name <- changed[[kk]]
[08:28:10.114]                   NAME <- NAMES[[kk]]
[08:28:10.114]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.114]                     next
[08:28:10.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.114]                 }
[08:28:10.114]                 NAMES <- toupper(added)
[08:28:10.114]                 for (kk in seq_along(NAMES)) {
[08:28:10.114]                   name <- added[[kk]]
[08:28:10.114]                   NAME <- NAMES[[kk]]
[08:28:10.114]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.114]                     next
[08:28:10.114]                   args[[name]] <- ""
[08:28:10.114]                 }
[08:28:10.114]                 NAMES <- toupper(removed)
[08:28:10.114]                 for (kk in seq_along(NAMES)) {
[08:28:10.114]                   name <- removed[[kk]]
[08:28:10.114]                   NAME <- NAMES[[kk]]
[08:28:10.114]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.114]                     next
[08:28:10.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.114]                 }
[08:28:10.114]                 if (length(args) > 0) 
[08:28:10.114]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.114]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.114]             }
[08:28:10.114]             else {
[08:28:10.114]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.114]             }
[08:28:10.114]             {
[08:28:10.114]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.114]                   0L) {
[08:28:10.114]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.114]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.114]                   base::options(opts)
[08:28:10.114]                 }
[08:28:10.114]                 {
[08:28:10.114]                   {
[08:28:10.114]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.114]                     NULL
[08:28:10.114]                   }
[08:28:10.114]                   options(future.plan = NULL)
[08:28:10.114]                   if (is.na(NA_character_)) 
[08:28:10.114]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.114]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.114]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.114]                     .init = FALSE)
[08:28:10.114]                 }
[08:28:10.114]             }
[08:28:10.114]         }
[08:28:10.114]     })
[08:28:10.114]     if (TRUE) {
[08:28:10.114]         base::sink(type = "output", split = FALSE)
[08:28:10.114]         if (TRUE) {
[08:28:10.114]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.114]         }
[08:28:10.114]         else {
[08:28:10.114]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.114]         }
[08:28:10.114]         base::close(...future.stdout)
[08:28:10.114]         ...future.stdout <- NULL
[08:28:10.114]     }
[08:28:10.114]     ...future.result$conditions <- ...future.conditions
[08:28:10.114]     ...future.result$finished <- base::Sys.time()
[08:28:10.114]     ...future.result
[08:28:10.114] }
[08:28:10.117] assign_globals() ...
[08:28:10.117] List of 1
[08:28:10.117]  $ x: list()
[08:28:10.117]  - attr(*, "where")=List of 1
[08:28:10.117]   ..$ x:<environment: R_EmptyEnv> 
[08:28:10.117]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:10.117]  - attr(*, "resolved")= logi TRUE
[08:28:10.117]  - attr(*, "total_size")= num 31
[08:28:10.117]  - attr(*, "already-done")= logi TRUE
[08:28:10.122] - copied ‘x’ to environment
[08:28:10.123] assign_globals() ... done
[08:28:10.123] requestCore(): workers = 2
[08:28:10.125] MulticoreFuture started
[08:28:10.125] - Launch lazy future ... done
[08:28:10.125] run() for ‘MulticoreFuture’ ... done
[08:28:10.126] result() for MulticoreFuture ...
[08:28:10.126] plan(): Setting new future strategy stack:
[08:28:10.126] List of future strategies:
[08:28:10.126] 1. sequential:
[08:28:10.126]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:10.126]    - tweaked: FALSE
[08:28:10.126]    - call: NULL
[08:28:10.127] plan(): nbrOfWorkers() = 1
[08:28:10.129] plan(): Setting new future strategy stack:
[08:28:10.129] List of future strategies:
[08:28:10.129] 1. multicore:
[08:28:10.129]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:10.129]    - tweaked: FALSE
[08:28:10.129]    - call: plan(strategy)
[08:28:10.133] plan(): nbrOfWorkers() = 2
[08:28:10.133] result() for MulticoreFuture ...
[08:28:10.134] result() for MulticoreFuture ... done
[08:28:10.134] result() for MulticoreFuture ... done
[08:28:10.134] result() for MulticoreFuture ...
[08:28:10.134] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.135] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.135] Searching for globals...
[08:28:10.138] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:10.138] Searching for globals ... DONE
[08:28:10.138] Resolving globals: TRUE
[08:28:10.139] Resolving any globals that are futures ...
[08:28:10.139] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:10.139] Resolving any globals that are futures ... DONE
[08:28:10.139] Resolving futures part of globals (recursively) ...
[08:28:10.140] resolve() on list ...
[08:28:10.140]  recursive: 99
[08:28:10.140]  length: 1
[08:28:10.140]  elements: ‘x’
[08:28:10.140]  length: 0 (resolved future 1)
[08:28:10.140] resolve() on list ... DONE
[08:28:10.140] - globals: [1] ‘x’
[08:28:10.140] Resolving futures part of globals (recursively) ... DONE
[08:28:10.141] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:10.141] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:10.141] - globals: [1] ‘x’
[08:28:10.141] 
[08:28:10.142] getGlobalsAndPackages() ... DONE
[08:28:10.142] run() for ‘Future’ ...
[08:28:10.142] - state: ‘created’
[08:28:10.142] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.144] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.144] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:10.144]   - Field: ‘label’
[08:28:10.145]   - Field: ‘local’
[08:28:10.145]   - Field: ‘owner’
[08:28:10.145]   - Field: ‘envir’
[08:28:10.145]   - Field: ‘workers’
[08:28:10.145]   - Field: ‘packages’
[08:28:10.145]   - Field: ‘gc’
[08:28:10.145]   - Field: ‘job’
[08:28:10.145]   - Field: ‘conditions’
[08:28:10.145]   - Field: ‘expr’
[08:28:10.146]   - Field: ‘uuid’
[08:28:10.146]   - Field: ‘seed’
[08:28:10.146]   - Field: ‘version’
[08:28:10.146]   - Field: ‘result’
[08:28:10.146]   - Field: ‘asynchronous’
[08:28:10.146]   - Field: ‘calls’
[08:28:10.146]   - Field: ‘globals’
[08:28:10.146]   - Field: ‘stdout’
[08:28:10.146]   - Field: ‘earlySignal’
[08:28:10.146]   - Field: ‘lazy’
[08:28:10.147]   - Field: ‘state’
[08:28:10.147] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:10.147] - Launch lazy future ...
[08:28:10.147] Packages needed by the future expression (n = 0): <none>
[08:28:10.147] Packages needed by future strategies (n = 0): <none>
[08:28:10.148] {
[08:28:10.148]     {
[08:28:10.148]         {
[08:28:10.148]             ...future.startTime <- base::Sys.time()
[08:28:10.148]             {
[08:28:10.148]                 {
[08:28:10.148]                   {
[08:28:10.148]                     {
[08:28:10.148]                       base::local({
[08:28:10.148]                         has_future <- base::requireNamespace("future", 
[08:28:10.148]                           quietly = TRUE)
[08:28:10.148]                         if (has_future) {
[08:28:10.148]                           ns <- base::getNamespace("future")
[08:28:10.148]                           version <- ns[[".package"]][["version"]]
[08:28:10.148]                           if (is.null(version)) 
[08:28:10.148]                             version <- utils::packageVersion("future")
[08:28:10.148]                         }
[08:28:10.148]                         else {
[08:28:10.148]                           version <- NULL
[08:28:10.148]                         }
[08:28:10.148]                         if (!has_future || version < "1.8.0") {
[08:28:10.148]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.148]                             "", base::R.version$version.string), 
[08:28:10.148]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.148]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.148]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.148]                               "release", "version")], collapse = " "), 
[08:28:10.148]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.148]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.148]                             info)
[08:28:10.148]                           info <- base::paste(info, collapse = "; ")
[08:28:10.148]                           if (!has_future) {
[08:28:10.148]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.148]                               info)
[08:28:10.148]                           }
[08:28:10.148]                           else {
[08:28:10.148]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.148]                               info, version)
[08:28:10.148]                           }
[08:28:10.148]                           base::stop(msg)
[08:28:10.148]                         }
[08:28:10.148]                       })
[08:28:10.148]                     }
[08:28:10.148]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.148]                     base::options(mc.cores = 1L)
[08:28:10.148]                   }
[08:28:10.148]                   ...future.strategy.old <- future::plan("list")
[08:28:10.148]                   options(future.plan = NULL)
[08:28:10.148]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.148]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.148]                 }
[08:28:10.148]                 ...future.workdir <- getwd()
[08:28:10.148]             }
[08:28:10.148]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.148]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.148]         }
[08:28:10.148]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.148]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.148]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.148]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.148]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.148]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.148]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.148]             base::names(...future.oldOptions))
[08:28:10.148]     }
[08:28:10.148]     if (FALSE) {
[08:28:10.148]     }
[08:28:10.148]     else {
[08:28:10.148]         if (TRUE) {
[08:28:10.148]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.148]                 open = "w")
[08:28:10.148]         }
[08:28:10.148]         else {
[08:28:10.148]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.148]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.148]         }
[08:28:10.148]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.148]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.148]             base::sink(type = "output", split = FALSE)
[08:28:10.148]             base::close(...future.stdout)
[08:28:10.148]         }, add = TRUE)
[08:28:10.148]     }
[08:28:10.148]     ...future.frame <- base::sys.nframe()
[08:28:10.148]     ...future.conditions <- base::list()
[08:28:10.148]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.148]     if (FALSE) {
[08:28:10.148]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.148]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.148]     }
[08:28:10.148]     ...future.result <- base::tryCatch({
[08:28:10.148]         base::withCallingHandlers({
[08:28:10.148]             ...future.value <- base::withVisible(base::local({
[08:28:10.148]                 withCallingHandlers({
[08:28:10.148]                   {
[08:28:10.148]                     x["a"] <- list(1)
[08:28:10.148]                     x
[08:28:10.148]                   }
[08:28:10.148]                 }, immediateCondition = function(cond) {
[08:28:10.148]                   save_rds <- function (object, pathname, ...) 
[08:28:10.148]                   {
[08:28:10.148]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:10.148]                     if (file_test("-f", pathname_tmp)) {
[08:28:10.148]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.148]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:10.148]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.148]                         fi_tmp[["mtime"]])
[08:28:10.148]                     }
[08:28:10.148]                     tryCatch({
[08:28:10.148]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:10.148]                     }, error = function(ex) {
[08:28:10.148]                       msg <- conditionMessage(ex)
[08:28:10.148]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.148]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:10.148]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.148]                         fi_tmp[["mtime"]], msg)
[08:28:10.148]                       ex$message <- msg
[08:28:10.148]                       stop(ex)
[08:28:10.148]                     })
[08:28:10.148]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:10.148]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:10.148]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:10.148]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.148]                       fi <- file.info(pathname)
[08:28:10.148]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:10.148]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.148]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:10.148]                         fi[["size"]], fi[["mtime"]])
[08:28:10.148]                       stop(msg)
[08:28:10.148]                     }
[08:28:10.148]                     invisible(pathname)
[08:28:10.148]                   }
[08:28:10.148]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:10.148]                     rootPath = tempdir()) 
[08:28:10.148]                   {
[08:28:10.148]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:10.148]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:10.148]                       tmpdir = path, fileext = ".rds")
[08:28:10.148]                     save_rds(obj, file)
[08:28:10.148]                   }
[08:28:10.148]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:10.148]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.148]                   {
[08:28:10.148]                     inherits <- base::inherits
[08:28:10.148]                     invokeRestart <- base::invokeRestart
[08:28:10.148]                     is.null <- base::is.null
[08:28:10.148]                     muffled <- FALSE
[08:28:10.148]                     if (inherits(cond, "message")) {
[08:28:10.148]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.148]                       if (muffled) 
[08:28:10.148]                         invokeRestart("muffleMessage")
[08:28:10.148]                     }
[08:28:10.148]                     else if (inherits(cond, "warning")) {
[08:28:10.148]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.148]                       if (muffled) 
[08:28:10.148]                         invokeRestart("muffleWarning")
[08:28:10.148]                     }
[08:28:10.148]                     else if (inherits(cond, "condition")) {
[08:28:10.148]                       if (!is.null(pattern)) {
[08:28:10.148]                         computeRestarts <- base::computeRestarts
[08:28:10.148]                         grepl <- base::grepl
[08:28:10.148]                         restarts <- computeRestarts(cond)
[08:28:10.148]                         for (restart in restarts) {
[08:28:10.148]                           name <- restart$name
[08:28:10.148]                           if (is.null(name)) 
[08:28:10.148]                             next
[08:28:10.148]                           if (!grepl(pattern, name)) 
[08:28:10.148]                             next
[08:28:10.148]                           invokeRestart(restart)
[08:28:10.148]                           muffled <- TRUE
[08:28:10.148]                           break
[08:28:10.148]                         }
[08:28:10.148]                       }
[08:28:10.148]                     }
[08:28:10.148]                     invisible(muffled)
[08:28:10.148]                   }
[08:28:10.148]                   muffleCondition(cond)
[08:28:10.148]                 })
[08:28:10.148]             }))
[08:28:10.148]             future::FutureResult(value = ...future.value$value, 
[08:28:10.148]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.148]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.148]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.148]                     ...future.globalenv.names))
[08:28:10.148]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.148]         }, condition = base::local({
[08:28:10.148]             c <- base::c
[08:28:10.148]             inherits <- base::inherits
[08:28:10.148]             invokeRestart <- base::invokeRestart
[08:28:10.148]             length <- base::length
[08:28:10.148]             list <- base::list
[08:28:10.148]             seq.int <- base::seq.int
[08:28:10.148]             signalCondition <- base::signalCondition
[08:28:10.148]             sys.calls <- base::sys.calls
[08:28:10.148]             `[[` <- base::`[[`
[08:28:10.148]             `+` <- base::`+`
[08:28:10.148]             `<<-` <- base::`<<-`
[08:28:10.148]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.148]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.148]                   3L)]
[08:28:10.148]             }
[08:28:10.148]             function(cond) {
[08:28:10.148]                 is_error <- inherits(cond, "error")
[08:28:10.148]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.148]                   NULL)
[08:28:10.148]                 if (is_error) {
[08:28:10.148]                   sessionInformation <- function() {
[08:28:10.148]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.148]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.148]                       search = base::search(), system = base::Sys.info())
[08:28:10.148]                   }
[08:28:10.148]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.148]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.148]                     cond$call), session = sessionInformation(), 
[08:28:10.148]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.148]                   signalCondition(cond)
[08:28:10.148]                 }
[08:28:10.148]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.148]                 "immediateCondition"))) {
[08:28:10.148]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.148]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.148]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.148]                   if (TRUE && !signal) {
[08:28:10.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.148]                     {
[08:28:10.148]                       inherits <- base::inherits
[08:28:10.148]                       invokeRestart <- base::invokeRestart
[08:28:10.148]                       is.null <- base::is.null
[08:28:10.148]                       muffled <- FALSE
[08:28:10.148]                       if (inherits(cond, "message")) {
[08:28:10.148]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.148]                         if (muffled) 
[08:28:10.148]                           invokeRestart("muffleMessage")
[08:28:10.148]                       }
[08:28:10.148]                       else if (inherits(cond, "warning")) {
[08:28:10.148]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.148]                         if (muffled) 
[08:28:10.148]                           invokeRestart("muffleWarning")
[08:28:10.148]                       }
[08:28:10.148]                       else if (inherits(cond, "condition")) {
[08:28:10.148]                         if (!is.null(pattern)) {
[08:28:10.148]                           computeRestarts <- base::computeRestarts
[08:28:10.148]                           grepl <- base::grepl
[08:28:10.148]                           restarts <- computeRestarts(cond)
[08:28:10.148]                           for (restart in restarts) {
[08:28:10.148]                             name <- restart$name
[08:28:10.148]                             if (is.null(name)) 
[08:28:10.148]                               next
[08:28:10.148]                             if (!grepl(pattern, name)) 
[08:28:10.148]                               next
[08:28:10.148]                             invokeRestart(restart)
[08:28:10.148]                             muffled <- TRUE
[08:28:10.148]                             break
[08:28:10.148]                           }
[08:28:10.148]                         }
[08:28:10.148]                       }
[08:28:10.148]                       invisible(muffled)
[08:28:10.148]                     }
[08:28:10.148]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.148]                   }
[08:28:10.148]                 }
[08:28:10.148]                 else {
[08:28:10.148]                   if (TRUE) {
[08:28:10.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.148]                     {
[08:28:10.148]                       inherits <- base::inherits
[08:28:10.148]                       invokeRestart <- base::invokeRestart
[08:28:10.148]                       is.null <- base::is.null
[08:28:10.148]                       muffled <- FALSE
[08:28:10.148]                       if (inherits(cond, "message")) {
[08:28:10.148]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.148]                         if (muffled) 
[08:28:10.148]                           invokeRestart("muffleMessage")
[08:28:10.148]                       }
[08:28:10.148]                       else if (inherits(cond, "warning")) {
[08:28:10.148]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.148]                         if (muffled) 
[08:28:10.148]                           invokeRestart("muffleWarning")
[08:28:10.148]                       }
[08:28:10.148]                       else if (inherits(cond, "condition")) {
[08:28:10.148]                         if (!is.null(pattern)) {
[08:28:10.148]                           computeRestarts <- base::computeRestarts
[08:28:10.148]                           grepl <- base::grepl
[08:28:10.148]                           restarts <- computeRestarts(cond)
[08:28:10.148]                           for (restart in restarts) {
[08:28:10.148]                             name <- restart$name
[08:28:10.148]                             if (is.null(name)) 
[08:28:10.148]                               next
[08:28:10.148]                             if (!grepl(pattern, name)) 
[08:28:10.148]                               next
[08:28:10.148]                             invokeRestart(restart)
[08:28:10.148]                             muffled <- TRUE
[08:28:10.148]                             break
[08:28:10.148]                           }
[08:28:10.148]                         }
[08:28:10.148]                       }
[08:28:10.148]                       invisible(muffled)
[08:28:10.148]                     }
[08:28:10.148]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.148]                   }
[08:28:10.148]                 }
[08:28:10.148]             }
[08:28:10.148]         }))
[08:28:10.148]     }, error = function(ex) {
[08:28:10.148]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.148]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.148]                 ...future.rng), started = ...future.startTime, 
[08:28:10.148]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.148]             version = "1.8"), class = "FutureResult")
[08:28:10.148]     }, finally = {
[08:28:10.148]         if (!identical(...future.workdir, getwd())) 
[08:28:10.148]             setwd(...future.workdir)
[08:28:10.148]         {
[08:28:10.148]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.148]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.148]             }
[08:28:10.148]             base::options(...future.oldOptions)
[08:28:10.148]             if (.Platform$OS.type == "windows") {
[08:28:10.148]                 old_names <- names(...future.oldEnvVars)
[08:28:10.148]                 envs <- base::Sys.getenv()
[08:28:10.148]                 names <- names(envs)
[08:28:10.148]                 common <- intersect(names, old_names)
[08:28:10.148]                 added <- setdiff(names, old_names)
[08:28:10.148]                 removed <- setdiff(old_names, names)
[08:28:10.148]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.148]                   envs[common]]
[08:28:10.148]                 NAMES <- toupper(changed)
[08:28:10.148]                 args <- list()
[08:28:10.148]                 for (kk in seq_along(NAMES)) {
[08:28:10.148]                   name <- changed[[kk]]
[08:28:10.148]                   NAME <- NAMES[[kk]]
[08:28:10.148]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.148]                     next
[08:28:10.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.148]                 }
[08:28:10.148]                 NAMES <- toupper(added)
[08:28:10.148]                 for (kk in seq_along(NAMES)) {
[08:28:10.148]                   name <- added[[kk]]
[08:28:10.148]                   NAME <- NAMES[[kk]]
[08:28:10.148]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.148]                     next
[08:28:10.148]                   args[[name]] <- ""
[08:28:10.148]                 }
[08:28:10.148]                 NAMES <- toupper(removed)
[08:28:10.148]                 for (kk in seq_along(NAMES)) {
[08:28:10.148]                   name <- removed[[kk]]
[08:28:10.148]                   NAME <- NAMES[[kk]]
[08:28:10.148]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.148]                     next
[08:28:10.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.148]                 }
[08:28:10.148]                 if (length(args) > 0) 
[08:28:10.148]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.148]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.148]             }
[08:28:10.148]             else {
[08:28:10.148]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.148]             }
[08:28:10.148]             {
[08:28:10.148]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.148]                   0L) {
[08:28:10.148]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.148]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.148]                   base::options(opts)
[08:28:10.148]                 }
[08:28:10.148]                 {
[08:28:10.148]                   {
[08:28:10.148]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.148]                     NULL
[08:28:10.148]                   }
[08:28:10.148]                   options(future.plan = NULL)
[08:28:10.148]                   if (is.na(NA_character_)) 
[08:28:10.148]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.148]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.148]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.148]                     .init = FALSE)
[08:28:10.148]                 }
[08:28:10.148]             }
[08:28:10.148]         }
[08:28:10.148]     })
[08:28:10.148]     if (TRUE) {
[08:28:10.148]         base::sink(type = "output", split = FALSE)
[08:28:10.148]         if (TRUE) {
[08:28:10.148]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.148]         }
[08:28:10.148]         else {
[08:28:10.148]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.148]         }
[08:28:10.148]         base::close(...future.stdout)
[08:28:10.148]         ...future.stdout <- NULL
[08:28:10.148]     }
[08:28:10.148]     ...future.result$conditions <- ...future.conditions
[08:28:10.148]     ...future.result$finished <- base::Sys.time()
[08:28:10.148]     ...future.result
[08:28:10.148] }
[08:28:10.151] assign_globals() ...
[08:28:10.151] List of 1
[08:28:10.151]  $ x: list()
[08:28:10.151]  - attr(*, "where")=List of 1
[08:28:10.151]   ..$ x:<environment: R_EmptyEnv> 
[08:28:10.151]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:10.151]  - attr(*, "resolved")= logi TRUE
[08:28:10.151]  - attr(*, "total_size")= num 31
[08:28:10.151]  - attr(*, "already-done")= logi TRUE
[08:28:10.154] - copied ‘x’ to environment
[08:28:10.154] assign_globals() ... done
[08:28:10.154] requestCore(): workers = 2
[08:28:10.156] MulticoreFuture started
[08:28:10.156] - Launch lazy future ... done
[08:28:10.156] run() for ‘MulticoreFuture’ ... done
[08:28:10.157] result() for MulticoreFuture ...
[08:28:10.157] plan(): Setting new future strategy stack:
[08:28:10.157] List of future strategies:
[08:28:10.157] 1. sequential:
[08:28:10.157]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:10.157]    - tweaked: FALSE
[08:28:10.157]    - call: NULL
[08:28:10.158] plan(): nbrOfWorkers() = 1
[08:28:10.160] plan(): Setting new future strategy stack:
[08:28:10.161] List of future strategies:
[08:28:10.161] 1. multicore:
[08:28:10.161]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:10.161]    - tweaked: FALSE
[08:28:10.161]    - call: plan(strategy)
[08:28:10.164] plan(): nbrOfWorkers() = 2
[08:28:10.164] result() for MulticoreFuture ...
[08:28:10.165] result() for MulticoreFuture ... done
[08:28:10.165] result() for MulticoreFuture ... done
[08:28:10.165] result() for MulticoreFuture ...
[08:28:10.165] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.166] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.166] Searching for globals...
[08:28:10.169] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:28:10.169] Searching for globals ... DONE
[08:28:10.169] Resolving globals: TRUE
[08:28:10.169] Resolving any globals that are futures ...
[08:28:10.169] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:28:10.170] Resolving any globals that are futures ... DONE
[08:28:10.170] Resolving futures part of globals (recursively) ...
[08:28:10.170] resolve() on list ...
[08:28:10.171]  recursive: 99
[08:28:10.171]  length: 2
[08:28:10.171]  elements: ‘x’, ‘name’
[08:28:10.171]  length: 1 (resolved future 1)
[08:28:10.171]  length: 0 (resolved future 2)
[08:28:10.174] resolve() on list ... DONE
[08:28:10.174] - globals: [2] ‘x’, ‘name’
[08:28:10.174] Resolving futures part of globals (recursively) ... DONE
[08:28:10.174] The total size of the 2 globals is 71 bytes (71 bytes)
[08:28:10.175] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 71 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (40 bytes of class ‘character’) and ‘x’ (31 bytes of class ‘list’)
[08:28:10.175] - globals: [2] ‘x’, ‘name’
[08:28:10.175] 
[08:28:10.175] getGlobalsAndPackages() ... DONE
[08:28:10.176] run() for ‘Future’ ...
[08:28:10.176] - state: ‘created’
[08:28:10.176] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.178] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.178] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:10.178]   - Field: ‘label’
[08:28:10.178]   - Field: ‘local’
[08:28:10.178]   - Field: ‘owner’
[08:28:10.179]   - Field: ‘envir’
[08:28:10.179]   - Field: ‘workers’
[08:28:10.179]   - Field: ‘packages’
[08:28:10.179]   - Field: ‘gc’
[08:28:10.179]   - Field: ‘job’
[08:28:10.179]   - Field: ‘conditions’
[08:28:10.179]   - Field: ‘expr’
[08:28:10.179]   - Field: ‘uuid’
[08:28:10.179]   - Field: ‘seed’
[08:28:10.180]   - Field: ‘version’
[08:28:10.180]   - Field: ‘result’
[08:28:10.180]   - Field: ‘asynchronous’
[08:28:10.180]   - Field: ‘calls’
[08:28:10.180]   - Field: ‘globals’
[08:28:10.180]   - Field: ‘stdout’
[08:28:10.180]   - Field: ‘earlySignal’
[08:28:10.180]   - Field: ‘lazy’
[08:28:10.180]   - Field: ‘state’
[08:28:10.181] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:10.181] - Launch lazy future ...
[08:28:10.181] Packages needed by the future expression (n = 0): <none>
[08:28:10.181] Packages needed by future strategies (n = 0): <none>
[08:28:10.182] {
[08:28:10.182]     {
[08:28:10.182]         {
[08:28:10.182]             ...future.startTime <- base::Sys.time()
[08:28:10.182]             {
[08:28:10.182]                 {
[08:28:10.182]                   {
[08:28:10.182]                     {
[08:28:10.182]                       base::local({
[08:28:10.182]                         has_future <- base::requireNamespace("future", 
[08:28:10.182]                           quietly = TRUE)
[08:28:10.182]                         if (has_future) {
[08:28:10.182]                           ns <- base::getNamespace("future")
[08:28:10.182]                           version <- ns[[".package"]][["version"]]
[08:28:10.182]                           if (is.null(version)) 
[08:28:10.182]                             version <- utils::packageVersion("future")
[08:28:10.182]                         }
[08:28:10.182]                         else {
[08:28:10.182]                           version <- NULL
[08:28:10.182]                         }
[08:28:10.182]                         if (!has_future || version < "1.8.0") {
[08:28:10.182]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.182]                             "", base::R.version$version.string), 
[08:28:10.182]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.182]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.182]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.182]                               "release", "version")], collapse = " "), 
[08:28:10.182]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.182]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.182]                             info)
[08:28:10.182]                           info <- base::paste(info, collapse = "; ")
[08:28:10.182]                           if (!has_future) {
[08:28:10.182]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.182]                               info)
[08:28:10.182]                           }
[08:28:10.182]                           else {
[08:28:10.182]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.182]                               info, version)
[08:28:10.182]                           }
[08:28:10.182]                           base::stop(msg)
[08:28:10.182]                         }
[08:28:10.182]                       })
[08:28:10.182]                     }
[08:28:10.182]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.182]                     base::options(mc.cores = 1L)
[08:28:10.182]                   }
[08:28:10.182]                   ...future.strategy.old <- future::plan("list")
[08:28:10.182]                   options(future.plan = NULL)
[08:28:10.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.182]                 }
[08:28:10.182]                 ...future.workdir <- getwd()
[08:28:10.182]             }
[08:28:10.182]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.182]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.182]         }
[08:28:10.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.182]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.182]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.182]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.182]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.182]             base::names(...future.oldOptions))
[08:28:10.182]     }
[08:28:10.182]     if (FALSE) {
[08:28:10.182]     }
[08:28:10.182]     else {
[08:28:10.182]         if (TRUE) {
[08:28:10.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.182]                 open = "w")
[08:28:10.182]         }
[08:28:10.182]         else {
[08:28:10.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.182]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.182]         }
[08:28:10.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.182]             base::sink(type = "output", split = FALSE)
[08:28:10.182]             base::close(...future.stdout)
[08:28:10.182]         }, add = TRUE)
[08:28:10.182]     }
[08:28:10.182]     ...future.frame <- base::sys.nframe()
[08:28:10.182]     ...future.conditions <- base::list()
[08:28:10.182]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.182]     if (FALSE) {
[08:28:10.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.182]     }
[08:28:10.182]     ...future.result <- base::tryCatch({
[08:28:10.182]         base::withCallingHandlers({
[08:28:10.182]             ...future.value <- base::withVisible(base::local({
[08:28:10.182]                 withCallingHandlers({
[08:28:10.182]                   {
[08:28:10.182]                     x[name] <- list(1)
[08:28:10.182]                     x
[08:28:10.182]                   }
[08:28:10.182]                 }, immediateCondition = function(cond) {
[08:28:10.182]                   save_rds <- function (object, pathname, ...) 
[08:28:10.182]                   {
[08:28:10.182]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:10.182]                     if (file_test("-f", pathname_tmp)) {
[08:28:10.182]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.182]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:10.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.182]                         fi_tmp[["mtime"]])
[08:28:10.182]                     }
[08:28:10.182]                     tryCatch({
[08:28:10.182]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:10.182]                     }, error = function(ex) {
[08:28:10.182]                       msg <- conditionMessage(ex)
[08:28:10.182]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.182]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:10.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.182]                         fi_tmp[["mtime"]], msg)
[08:28:10.182]                       ex$message <- msg
[08:28:10.182]                       stop(ex)
[08:28:10.182]                     })
[08:28:10.182]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:10.182]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:10.182]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:10.182]                       fi_tmp <- file.info(pathname_tmp)
[08:28:10.182]                       fi <- file.info(pathname)
[08:28:10.182]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:10.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:10.182]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:10.182]                         fi[["size"]], fi[["mtime"]])
[08:28:10.182]                       stop(msg)
[08:28:10.182]                     }
[08:28:10.182]                     invisible(pathname)
[08:28:10.182]                   }
[08:28:10.182]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:10.182]                     rootPath = tempdir()) 
[08:28:10.182]                   {
[08:28:10.182]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:10.182]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:10.182]                       tmpdir = path, fileext = ".rds")
[08:28:10.182]                     save_rds(obj, file)
[08:28:10.182]                   }
[08:28:10.182]                   saveImmediateCondition(cond, path = "/tmp/RtmpD0Bkq5/.future/immediateConditions")
[08:28:10.182]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.182]                   {
[08:28:10.182]                     inherits <- base::inherits
[08:28:10.182]                     invokeRestart <- base::invokeRestart
[08:28:10.182]                     is.null <- base::is.null
[08:28:10.182]                     muffled <- FALSE
[08:28:10.182]                     if (inherits(cond, "message")) {
[08:28:10.182]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.182]                       if (muffled) 
[08:28:10.182]                         invokeRestart("muffleMessage")
[08:28:10.182]                     }
[08:28:10.182]                     else if (inherits(cond, "warning")) {
[08:28:10.182]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.182]                       if (muffled) 
[08:28:10.182]                         invokeRestart("muffleWarning")
[08:28:10.182]                     }
[08:28:10.182]                     else if (inherits(cond, "condition")) {
[08:28:10.182]                       if (!is.null(pattern)) {
[08:28:10.182]                         computeRestarts <- base::computeRestarts
[08:28:10.182]                         grepl <- base::grepl
[08:28:10.182]                         restarts <- computeRestarts(cond)
[08:28:10.182]                         for (restart in restarts) {
[08:28:10.182]                           name <- restart$name
[08:28:10.182]                           if (is.null(name)) 
[08:28:10.182]                             next
[08:28:10.182]                           if (!grepl(pattern, name)) 
[08:28:10.182]                             next
[08:28:10.182]                           invokeRestart(restart)
[08:28:10.182]                           muffled <- TRUE
[08:28:10.182]                           break
[08:28:10.182]                         }
[08:28:10.182]                       }
[08:28:10.182]                     }
[08:28:10.182]                     invisible(muffled)
[08:28:10.182]                   }
[08:28:10.182]                   muffleCondition(cond)
[08:28:10.182]                 })
[08:28:10.182]             }))
[08:28:10.182]             future::FutureResult(value = ...future.value$value, 
[08:28:10.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.182]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.182]                     ...future.globalenv.names))
[08:28:10.182]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.182]         }, condition = base::local({
[08:28:10.182]             c <- base::c
[08:28:10.182]             inherits <- base::inherits
[08:28:10.182]             invokeRestart <- base::invokeRestart
[08:28:10.182]             length <- base::length
[08:28:10.182]             list <- base::list
[08:28:10.182]             seq.int <- base::seq.int
[08:28:10.182]             signalCondition <- base::signalCondition
[08:28:10.182]             sys.calls <- base::sys.calls
[08:28:10.182]             `[[` <- base::`[[`
[08:28:10.182]             `+` <- base::`+`
[08:28:10.182]             `<<-` <- base::`<<-`
[08:28:10.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.182]                   3L)]
[08:28:10.182]             }
[08:28:10.182]             function(cond) {
[08:28:10.182]                 is_error <- inherits(cond, "error")
[08:28:10.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.182]                   NULL)
[08:28:10.182]                 if (is_error) {
[08:28:10.182]                   sessionInformation <- function() {
[08:28:10.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.182]                       search = base::search(), system = base::Sys.info())
[08:28:10.182]                   }
[08:28:10.182]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.182]                     cond$call), session = sessionInformation(), 
[08:28:10.182]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.182]                   signalCondition(cond)
[08:28:10.182]                 }
[08:28:10.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.182]                 "immediateCondition"))) {
[08:28:10.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.182]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.182]                   if (TRUE && !signal) {
[08:28:10.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.182]                     {
[08:28:10.182]                       inherits <- base::inherits
[08:28:10.182]                       invokeRestart <- base::invokeRestart
[08:28:10.182]                       is.null <- base::is.null
[08:28:10.182]                       muffled <- FALSE
[08:28:10.182]                       if (inherits(cond, "message")) {
[08:28:10.182]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.182]                         if (muffled) 
[08:28:10.182]                           invokeRestart("muffleMessage")
[08:28:10.182]                       }
[08:28:10.182]                       else if (inherits(cond, "warning")) {
[08:28:10.182]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.182]                         if (muffled) 
[08:28:10.182]                           invokeRestart("muffleWarning")
[08:28:10.182]                       }
[08:28:10.182]                       else if (inherits(cond, "condition")) {
[08:28:10.182]                         if (!is.null(pattern)) {
[08:28:10.182]                           computeRestarts <- base::computeRestarts
[08:28:10.182]                           grepl <- base::grepl
[08:28:10.182]                           restarts <- computeRestarts(cond)
[08:28:10.182]                           for (restart in restarts) {
[08:28:10.182]                             name <- restart$name
[08:28:10.182]                             if (is.null(name)) 
[08:28:10.182]                               next
[08:28:10.182]                             if (!grepl(pattern, name)) 
[08:28:10.182]                               next
[08:28:10.182]                             invokeRestart(restart)
[08:28:10.182]                             muffled <- TRUE
[08:28:10.182]                             break
[08:28:10.182]                           }
[08:28:10.182]                         }
[08:28:10.182]                       }
[08:28:10.182]                       invisible(muffled)
[08:28:10.182]                     }
[08:28:10.182]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.182]                   }
[08:28:10.182]                 }
[08:28:10.182]                 else {
[08:28:10.182]                   if (TRUE) {
[08:28:10.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.182]                     {
[08:28:10.182]                       inherits <- base::inherits
[08:28:10.182]                       invokeRestart <- base::invokeRestart
[08:28:10.182]                       is.null <- base::is.null
[08:28:10.182]                       muffled <- FALSE
[08:28:10.182]                       if (inherits(cond, "message")) {
[08:28:10.182]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.182]                         if (muffled) 
[08:28:10.182]                           invokeRestart("muffleMessage")
[08:28:10.182]                       }
[08:28:10.182]                       else if (inherits(cond, "warning")) {
[08:28:10.182]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.182]                         if (muffled) 
[08:28:10.182]                           invokeRestart("muffleWarning")
[08:28:10.182]                       }
[08:28:10.182]                       else if (inherits(cond, "condition")) {
[08:28:10.182]                         if (!is.null(pattern)) {
[08:28:10.182]                           computeRestarts <- base::computeRestarts
[08:28:10.182]                           grepl <- base::grepl
[08:28:10.182]                           restarts <- computeRestarts(cond)
[08:28:10.182]                           for (restart in restarts) {
[08:28:10.182]                             name <- restart$name
[08:28:10.182]                             if (is.null(name)) 
[08:28:10.182]                               next
[08:28:10.182]                             if (!grepl(pattern, name)) 
[08:28:10.182]                               next
[08:28:10.182]                             invokeRestart(restart)
[08:28:10.182]                             muffled <- TRUE
[08:28:10.182]                             break
[08:28:10.182]                           }
[08:28:10.182]                         }
[08:28:10.182]                       }
[08:28:10.182]                       invisible(muffled)
[08:28:10.182]                     }
[08:28:10.182]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.182]                   }
[08:28:10.182]                 }
[08:28:10.182]             }
[08:28:10.182]         }))
[08:28:10.182]     }, error = function(ex) {
[08:28:10.182]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.182]                 ...future.rng), started = ...future.startTime, 
[08:28:10.182]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.182]             version = "1.8"), class = "FutureResult")
[08:28:10.182]     }, finally = {
[08:28:10.182]         if (!identical(...future.workdir, getwd())) 
[08:28:10.182]             setwd(...future.workdir)
[08:28:10.182]         {
[08:28:10.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.182]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.182]             }
[08:28:10.182]             base::options(...future.oldOptions)
[08:28:10.182]             if (.Platform$OS.type == "windows") {
[08:28:10.182]                 old_names <- names(...future.oldEnvVars)
[08:28:10.182]                 envs <- base::Sys.getenv()
[08:28:10.182]                 names <- names(envs)
[08:28:10.182]                 common <- intersect(names, old_names)
[08:28:10.182]                 added <- setdiff(names, old_names)
[08:28:10.182]                 removed <- setdiff(old_names, names)
[08:28:10.182]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.182]                   envs[common]]
[08:28:10.182]                 NAMES <- toupper(changed)
[08:28:10.182]                 args <- list()
[08:28:10.182]                 for (kk in seq_along(NAMES)) {
[08:28:10.182]                   name <- changed[[kk]]
[08:28:10.182]                   NAME <- NAMES[[kk]]
[08:28:10.182]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.182]                     next
[08:28:10.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.182]                 }
[08:28:10.182]                 NAMES <- toupper(added)
[08:28:10.182]                 for (kk in seq_along(NAMES)) {
[08:28:10.182]                   name <- added[[kk]]
[08:28:10.182]                   NAME <- NAMES[[kk]]
[08:28:10.182]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.182]                     next
[08:28:10.182]                   args[[name]] <- ""
[08:28:10.182]                 }
[08:28:10.182]                 NAMES <- toupper(removed)
[08:28:10.182]                 for (kk in seq_along(NAMES)) {
[08:28:10.182]                   name <- removed[[kk]]
[08:28:10.182]                   NAME <- NAMES[[kk]]
[08:28:10.182]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.182]                     next
[08:28:10.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.182]                 }
[08:28:10.182]                 if (length(args) > 0) 
[08:28:10.182]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.182]             }
[08:28:10.182]             else {
[08:28:10.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.182]             }
[08:28:10.182]             {
[08:28:10.182]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.182]                   0L) {
[08:28:10.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.182]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.182]                   base::options(opts)
[08:28:10.182]                 }
[08:28:10.182]                 {
[08:28:10.182]                   {
[08:28:10.182]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.182]                     NULL
[08:28:10.182]                   }
[08:28:10.182]                   options(future.plan = NULL)
[08:28:10.182]                   if (is.na(NA_character_)) 
[08:28:10.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.182]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.182]                     .init = FALSE)
[08:28:10.182]                 }
[08:28:10.182]             }
[08:28:10.182]         }
[08:28:10.182]     })
[08:28:10.182]     if (TRUE) {
[08:28:10.182]         base::sink(type = "output", split = FALSE)
[08:28:10.182]         if (TRUE) {
[08:28:10.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.182]         }
[08:28:10.182]         else {
[08:28:10.182]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.182]         }
[08:28:10.182]         base::close(...future.stdout)
[08:28:10.182]         ...future.stdout <- NULL
[08:28:10.182]     }
[08:28:10.182]     ...future.result$conditions <- ...future.conditions
[08:28:10.182]     ...future.result$finished <- base::Sys.time()
[08:28:10.182]     ...future.result
[08:28:10.182] }
[08:28:10.184] assign_globals() ...
[08:28:10.184] List of 2
[08:28:10.184]  $ x   : list()
[08:28:10.184]  $ name: chr "a"
[08:28:10.184]  - attr(*, "where")=List of 2
[08:28:10.184]   ..$ x   :<environment: R_EmptyEnv> 
[08:28:10.184]   ..$ name:<environment: R_EmptyEnv> 
[08:28:10.184]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:10.184]  - attr(*, "resolved")= logi TRUE
[08:28:10.184]  - attr(*, "total_size")= num 71
[08:28:10.184]  - attr(*, "already-done")= logi TRUE
[08:28:10.188] - copied ‘x’ to environment
[08:28:10.188] - copied ‘name’ to environment
[08:28:10.188] assign_globals() ... done
[08:28:10.188] requestCore(): workers = 2
[08:28:10.190] MulticoreFuture started
[08:28:10.190] - Launch lazy future ... done
[08:28:10.191] run() for ‘MulticoreFuture’ ... done
[08:28:10.191] result() for MulticoreFuture ...
[08:28:10.191] plan(): Setting new future strategy stack:
[08:28:10.191] List of future strategies:
[08:28:10.191] 1. sequential:
[08:28:10.191]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:10.191]    - tweaked: FALSE
[08:28:10.191]    - call: NULL
[08:28:10.192] plan(): nbrOfWorkers() = 1
[08:28:10.194] plan(): Setting new future strategy stack:
[08:28:10.195] List of future strategies:
[08:28:10.195] 1. multicore:
[08:28:10.195]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:10.195]    - tweaked: FALSE
[08:28:10.195]    - call: plan(strategy)
[08:28:10.198] plan(): nbrOfWorkers() = 2
[08:28:10.199] result() for MulticoreFuture ...
[08:28:10.199] result() for MulticoreFuture ... done
[08:28:10.199] result() for MulticoreFuture ... done
[08:28:10.199] result() for MulticoreFuture ...
[08:28:10.199] result() for MulticoreFuture ... done
$a
[1] 1

- plan('multisession') ...
[08:28:10.200] plan(): Setting new future strategy stack:
[08:28:10.200] List of future strategies:
[08:28:10.200] 1. multisession:
[08:28:10.200]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:28:10.200]    - tweaked: FALSE
[08:28:10.200]    - call: plan(strategy)
[08:28:10.200] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:10.201] multisession:
[08:28:10.201] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:28:10.201] - tweaked: FALSE
[08:28:10.201] - call: plan(strategy)
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.205] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.206] Not searching for globals
[08:28:10.206] - globals: [0] <none>
[08:28:10.206] getGlobalsAndPackages() ... DONE
[08:28:10.694] Packages needed by the future expression (n = 0): <none>
[08:28:10.694] Packages needed by future strategies (n = 0): <none>
[08:28:10.694] {
[08:28:10.694]     {
[08:28:10.694]         {
[08:28:10.694]             ...future.startTime <- base::Sys.time()
[08:28:10.694]             {
[08:28:10.694]                 {
[08:28:10.694]                   {
[08:28:10.694]                     {
[08:28:10.694]                       base::local({
[08:28:10.694]                         has_future <- base::requireNamespace("future", 
[08:28:10.694]                           quietly = TRUE)
[08:28:10.694]                         if (has_future) {
[08:28:10.694]                           ns <- base::getNamespace("future")
[08:28:10.694]                           version <- ns[[".package"]][["version"]]
[08:28:10.694]                           if (is.null(version)) 
[08:28:10.694]                             version <- utils::packageVersion("future")
[08:28:10.694]                         }
[08:28:10.694]                         else {
[08:28:10.694]                           version <- NULL
[08:28:10.694]                         }
[08:28:10.694]                         if (!has_future || version < "1.8.0") {
[08:28:10.694]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.694]                             "", base::R.version$version.string), 
[08:28:10.694]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.694]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.694]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.694]                               "release", "version")], collapse = " "), 
[08:28:10.694]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.694]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.694]                             info)
[08:28:10.694]                           info <- base::paste(info, collapse = "; ")
[08:28:10.694]                           if (!has_future) {
[08:28:10.694]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.694]                               info)
[08:28:10.694]                           }
[08:28:10.694]                           else {
[08:28:10.694]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.694]                               info, version)
[08:28:10.694]                           }
[08:28:10.694]                           base::stop(msg)
[08:28:10.694]                         }
[08:28:10.694]                       })
[08:28:10.694]                     }
[08:28:10.694]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.694]                     base::options(mc.cores = 1L)
[08:28:10.694]                   }
[08:28:10.694]                   ...future.strategy.old <- future::plan("list")
[08:28:10.694]                   options(future.plan = NULL)
[08:28:10.694]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.694]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.694]                 }
[08:28:10.694]                 ...future.workdir <- getwd()
[08:28:10.694]             }
[08:28:10.694]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.694]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.694]         }
[08:28:10.694]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.694]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.694]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.694]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.694]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.694]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.694]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.694]             base::names(...future.oldOptions))
[08:28:10.694]     }
[08:28:10.694]     if (FALSE) {
[08:28:10.694]     }
[08:28:10.694]     else {
[08:28:10.694]         if (TRUE) {
[08:28:10.694]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.694]                 open = "w")
[08:28:10.694]         }
[08:28:10.694]         else {
[08:28:10.694]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.694]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.694]         }
[08:28:10.694]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.694]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.694]             base::sink(type = "output", split = FALSE)
[08:28:10.694]             base::close(...future.stdout)
[08:28:10.694]         }, add = TRUE)
[08:28:10.694]     }
[08:28:10.694]     ...future.frame <- base::sys.nframe()
[08:28:10.694]     ...future.conditions <- base::list()
[08:28:10.694]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.694]     if (FALSE) {
[08:28:10.694]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.694]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.694]     }
[08:28:10.694]     ...future.result <- base::tryCatch({
[08:28:10.694]         base::withCallingHandlers({
[08:28:10.694]             ...future.value <- base::withVisible(base::local({
[08:28:10.694]                 ...future.makeSendCondition <- base::local({
[08:28:10.694]                   sendCondition <- NULL
[08:28:10.694]                   function(frame = 1L) {
[08:28:10.694]                     if (is.function(sendCondition)) 
[08:28:10.694]                       return(sendCondition)
[08:28:10.694]                     ns <- getNamespace("parallel")
[08:28:10.694]                     if (exists("sendData", mode = "function", 
[08:28:10.694]                       envir = ns)) {
[08:28:10.694]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:10.694]                         envir = ns)
[08:28:10.694]                       envir <- sys.frame(frame)
[08:28:10.694]                       master <- NULL
[08:28:10.694]                       while (!identical(envir, .GlobalEnv) && 
[08:28:10.694]                         !identical(envir, emptyenv())) {
[08:28:10.694]                         if (exists("master", mode = "list", envir = envir, 
[08:28:10.694]                           inherits = FALSE)) {
[08:28:10.694]                           master <- get("master", mode = "list", 
[08:28:10.694]                             envir = envir, inherits = FALSE)
[08:28:10.694]                           if (inherits(master, c("SOCKnode", 
[08:28:10.694]                             "SOCK0node"))) {
[08:28:10.694]                             sendCondition <<- function(cond) {
[08:28:10.694]                               data <- list(type = "VALUE", value = cond, 
[08:28:10.694]                                 success = TRUE)
[08:28:10.694]                               parallel_sendData(master, data)
[08:28:10.694]                             }
[08:28:10.694]                             return(sendCondition)
[08:28:10.694]                           }
[08:28:10.694]                         }
[08:28:10.694]                         frame <- frame + 1L
[08:28:10.694]                         envir <- sys.frame(frame)
[08:28:10.694]                       }
[08:28:10.694]                     }
[08:28:10.694]                     sendCondition <<- function(cond) NULL
[08:28:10.694]                   }
[08:28:10.694]                 })
[08:28:10.694]                 withCallingHandlers({
[08:28:10.694]                   NA
[08:28:10.694]                 }, immediateCondition = function(cond) {
[08:28:10.694]                   sendCondition <- ...future.makeSendCondition()
[08:28:10.694]                   sendCondition(cond)
[08:28:10.694]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.694]                   {
[08:28:10.694]                     inherits <- base::inherits
[08:28:10.694]                     invokeRestart <- base::invokeRestart
[08:28:10.694]                     is.null <- base::is.null
[08:28:10.694]                     muffled <- FALSE
[08:28:10.694]                     if (inherits(cond, "message")) {
[08:28:10.694]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.694]                       if (muffled) 
[08:28:10.694]                         invokeRestart("muffleMessage")
[08:28:10.694]                     }
[08:28:10.694]                     else if (inherits(cond, "warning")) {
[08:28:10.694]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.694]                       if (muffled) 
[08:28:10.694]                         invokeRestart("muffleWarning")
[08:28:10.694]                     }
[08:28:10.694]                     else if (inherits(cond, "condition")) {
[08:28:10.694]                       if (!is.null(pattern)) {
[08:28:10.694]                         computeRestarts <- base::computeRestarts
[08:28:10.694]                         grepl <- base::grepl
[08:28:10.694]                         restarts <- computeRestarts(cond)
[08:28:10.694]                         for (restart in restarts) {
[08:28:10.694]                           name <- restart$name
[08:28:10.694]                           if (is.null(name)) 
[08:28:10.694]                             next
[08:28:10.694]                           if (!grepl(pattern, name)) 
[08:28:10.694]                             next
[08:28:10.694]                           invokeRestart(restart)
[08:28:10.694]                           muffled <- TRUE
[08:28:10.694]                           break
[08:28:10.694]                         }
[08:28:10.694]                       }
[08:28:10.694]                     }
[08:28:10.694]                     invisible(muffled)
[08:28:10.694]                   }
[08:28:10.694]                   muffleCondition(cond)
[08:28:10.694]                 })
[08:28:10.694]             }))
[08:28:10.694]             future::FutureResult(value = ...future.value$value, 
[08:28:10.694]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.694]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.694]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.694]                     ...future.globalenv.names))
[08:28:10.694]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.694]         }, condition = base::local({
[08:28:10.694]             c <- base::c
[08:28:10.694]             inherits <- base::inherits
[08:28:10.694]             invokeRestart <- base::invokeRestart
[08:28:10.694]             length <- base::length
[08:28:10.694]             list <- base::list
[08:28:10.694]             seq.int <- base::seq.int
[08:28:10.694]             signalCondition <- base::signalCondition
[08:28:10.694]             sys.calls <- base::sys.calls
[08:28:10.694]             `[[` <- base::`[[`
[08:28:10.694]             `+` <- base::`+`
[08:28:10.694]             `<<-` <- base::`<<-`
[08:28:10.694]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.694]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.694]                   3L)]
[08:28:10.694]             }
[08:28:10.694]             function(cond) {
[08:28:10.694]                 is_error <- inherits(cond, "error")
[08:28:10.694]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.694]                   NULL)
[08:28:10.694]                 if (is_error) {
[08:28:10.694]                   sessionInformation <- function() {
[08:28:10.694]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.694]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.694]                       search = base::search(), system = base::Sys.info())
[08:28:10.694]                   }
[08:28:10.694]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.694]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.694]                     cond$call), session = sessionInformation(), 
[08:28:10.694]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.694]                   signalCondition(cond)
[08:28:10.694]                 }
[08:28:10.694]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.694]                 "immediateCondition"))) {
[08:28:10.694]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.694]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.694]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.694]                   if (TRUE && !signal) {
[08:28:10.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.694]                     {
[08:28:10.694]                       inherits <- base::inherits
[08:28:10.694]                       invokeRestart <- base::invokeRestart
[08:28:10.694]                       is.null <- base::is.null
[08:28:10.694]                       muffled <- FALSE
[08:28:10.694]                       if (inherits(cond, "message")) {
[08:28:10.694]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.694]                         if (muffled) 
[08:28:10.694]                           invokeRestart("muffleMessage")
[08:28:10.694]                       }
[08:28:10.694]                       else if (inherits(cond, "warning")) {
[08:28:10.694]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.694]                         if (muffled) 
[08:28:10.694]                           invokeRestart("muffleWarning")
[08:28:10.694]                       }
[08:28:10.694]                       else if (inherits(cond, "condition")) {
[08:28:10.694]                         if (!is.null(pattern)) {
[08:28:10.694]                           computeRestarts <- base::computeRestarts
[08:28:10.694]                           grepl <- base::grepl
[08:28:10.694]                           restarts <- computeRestarts(cond)
[08:28:10.694]                           for (restart in restarts) {
[08:28:10.694]                             name <- restart$name
[08:28:10.694]                             if (is.null(name)) 
[08:28:10.694]                               next
[08:28:10.694]                             if (!grepl(pattern, name)) 
[08:28:10.694]                               next
[08:28:10.694]                             invokeRestart(restart)
[08:28:10.694]                             muffled <- TRUE
[08:28:10.694]                             break
[08:28:10.694]                           }
[08:28:10.694]                         }
[08:28:10.694]                       }
[08:28:10.694]                       invisible(muffled)
[08:28:10.694]                     }
[08:28:10.694]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.694]                   }
[08:28:10.694]                 }
[08:28:10.694]                 else {
[08:28:10.694]                   if (TRUE) {
[08:28:10.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.694]                     {
[08:28:10.694]                       inherits <- base::inherits
[08:28:10.694]                       invokeRestart <- base::invokeRestart
[08:28:10.694]                       is.null <- base::is.null
[08:28:10.694]                       muffled <- FALSE
[08:28:10.694]                       if (inherits(cond, "message")) {
[08:28:10.694]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.694]                         if (muffled) 
[08:28:10.694]                           invokeRestart("muffleMessage")
[08:28:10.694]                       }
[08:28:10.694]                       else if (inherits(cond, "warning")) {
[08:28:10.694]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.694]                         if (muffled) 
[08:28:10.694]                           invokeRestart("muffleWarning")
[08:28:10.694]                       }
[08:28:10.694]                       else if (inherits(cond, "condition")) {
[08:28:10.694]                         if (!is.null(pattern)) {
[08:28:10.694]                           computeRestarts <- base::computeRestarts
[08:28:10.694]                           grepl <- base::grepl
[08:28:10.694]                           restarts <- computeRestarts(cond)
[08:28:10.694]                           for (restart in restarts) {
[08:28:10.694]                             name <- restart$name
[08:28:10.694]                             if (is.null(name)) 
[08:28:10.694]                               next
[08:28:10.694]                             if (!grepl(pattern, name)) 
[08:28:10.694]                               next
[08:28:10.694]                             invokeRestart(restart)
[08:28:10.694]                             muffled <- TRUE
[08:28:10.694]                             break
[08:28:10.694]                           }
[08:28:10.694]                         }
[08:28:10.694]                       }
[08:28:10.694]                       invisible(muffled)
[08:28:10.694]                     }
[08:28:10.694]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.694]                   }
[08:28:10.694]                 }
[08:28:10.694]             }
[08:28:10.694]         }))
[08:28:10.694]     }, error = function(ex) {
[08:28:10.694]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.694]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.694]                 ...future.rng), started = ...future.startTime, 
[08:28:10.694]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.694]             version = "1.8"), class = "FutureResult")
[08:28:10.694]     }, finally = {
[08:28:10.694]         if (!identical(...future.workdir, getwd())) 
[08:28:10.694]             setwd(...future.workdir)
[08:28:10.694]         {
[08:28:10.694]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.694]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.694]             }
[08:28:10.694]             base::options(...future.oldOptions)
[08:28:10.694]             if (.Platform$OS.type == "windows") {
[08:28:10.694]                 old_names <- names(...future.oldEnvVars)
[08:28:10.694]                 envs <- base::Sys.getenv()
[08:28:10.694]                 names <- names(envs)
[08:28:10.694]                 common <- intersect(names, old_names)
[08:28:10.694]                 added <- setdiff(names, old_names)
[08:28:10.694]                 removed <- setdiff(old_names, names)
[08:28:10.694]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.694]                   envs[common]]
[08:28:10.694]                 NAMES <- toupper(changed)
[08:28:10.694]                 args <- list()
[08:28:10.694]                 for (kk in seq_along(NAMES)) {
[08:28:10.694]                   name <- changed[[kk]]
[08:28:10.694]                   NAME <- NAMES[[kk]]
[08:28:10.694]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.694]                     next
[08:28:10.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.694]                 }
[08:28:10.694]                 NAMES <- toupper(added)
[08:28:10.694]                 for (kk in seq_along(NAMES)) {
[08:28:10.694]                   name <- added[[kk]]
[08:28:10.694]                   NAME <- NAMES[[kk]]
[08:28:10.694]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.694]                     next
[08:28:10.694]                   args[[name]] <- ""
[08:28:10.694]                 }
[08:28:10.694]                 NAMES <- toupper(removed)
[08:28:10.694]                 for (kk in seq_along(NAMES)) {
[08:28:10.694]                   name <- removed[[kk]]
[08:28:10.694]                   NAME <- NAMES[[kk]]
[08:28:10.694]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.694]                     next
[08:28:10.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.694]                 }
[08:28:10.694]                 if (length(args) > 0) 
[08:28:10.694]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.694]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.694]             }
[08:28:10.694]             else {
[08:28:10.694]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.694]             }
[08:28:10.694]             {
[08:28:10.694]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.694]                   0L) {
[08:28:10.694]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.694]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.694]                   base::options(opts)
[08:28:10.694]                 }
[08:28:10.694]                 {
[08:28:10.694]                   {
[08:28:10.694]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.694]                     NULL
[08:28:10.694]                   }
[08:28:10.694]                   options(future.plan = NULL)
[08:28:10.694]                   if (is.na(NA_character_)) 
[08:28:10.694]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.694]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.694]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.694]                     .init = FALSE)
[08:28:10.694]                 }
[08:28:10.694]             }
[08:28:10.694]         }
[08:28:10.694]     })
[08:28:10.694]     if (TRUE) {
[08:28:10.694]         base::sink(type = "output", split = FALSE)
[08:28:10.694]         if (TRUE) {
[08:28:10.694]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.694]         }
[08:28:10.694]         else {
[08:28:10.694]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.694]         }
[08:28:10.694]         base::close(...future.stdout)
[08:28:10.694]         ...future.stdout <- NULL
[08:28:10.694]     }
[08:28:10.694]     ...future.result$conditions <- ...future.conditions
[08:28:10.694]     ...future.result$finished <- base::Sys.time()
[08:28:10.694]     ...future.result
[08:28:10.694] }
[08:28:10.747] MultisessionFuture started
[08:28:10.748] result() for ClusterFuture ...
[08:28:10.748] receiveMessageFromWorker() for ClusterFuture ...
[08:28:10.748] - Validating connection of MultisessionFuture
[08:28:10.779] - received message: FutureResult
[08:28:10.779] - Received FutureResult
[08:28:10.780] - Erased future from FutureRegistry
[08:28:10.780] result() for ClusterFuture ...
[08:28:10.780] - result already collected: FutureResult
[08:28:10.780] result() for ClusterFuture ... done
[08:28:10.780] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:10.780] result() for ClusterFuture ... done
[08:28:10.780] result() for ClusterFuture ...
[08:28:10.780] - result already collected: FutureResult
[08:28:10.780] result() for ClusterFuture ... done
[08:28:10.780] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:10.782] plan(): nbrOfWorkers() = 2
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.782] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.782] Searching for globals...
[08:28:10.784] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:10.784] Searching for globals ... DONE
[08:28:10.785] Resolving globals: TRUE
[08:28:10.785] Resolving any globals that are futures ...
[08:28:10.785] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:10.785] Resolving any globals that are futures ... DONE
[08:28:10.785] Resolving futures part of globals (recursively) ...
[08:28:10.785] resolve() on list ...
[08:28:10.785]  recursive: 99
[08:28:10.786]  length: 1
[08:28:10.786]  elements: ‘x’
[08:28:10.786]  length: 0 (resolved future 1)
[08:28:10.786] resolve() on list ... DONE
[08:28:10.786] - globals: [1] ‘x’
[08:28:10.786] Resolving futures part of globals (recursively) ... DONE
[08:28:10.786] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:10.786] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:10.787] - globals: [1] ‘x’
[08:28:10.787] 
[08:28:10.787] getGlobalsAndPackages() ... DONE
[08:28:10.787] run() for ‘Future’ ...
[08:28:10.787] - state: ‘created’
[08:28:10.787] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.801] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.801] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:10.801]   - Field: ‘node’
[08:28:10.801]   - Field: ‘label’
[08:28:10.801]   - Field: ‘local’
[08:28:10.801]   - Field: ‘owner’
[08:28:10.802]   - Field: ‘envir’
[08:28:10.802]   - Field: ‘workers’
[08:28:10.802]   - Field: ‘packages’
[08:28:10.802]   - Field: ‘gc’
[08:28:10.802]   - Field: ‘conditions’
[08:28:10.802]   - Field: ‘persistent’
[08:28:10.802]   - Field: ‘expr’
[08:28:10.802]   - Field: ‘uuid’
[08:28:10.802]   - Field: ‘seed’
[08:28:10.802]   - Field: ‘version’
[08:28:10.802]   - Field: ‘result’
[08:28:10.803]   - Field: ‘asynchronous’
[08:28:10.803]   - Field: ‘calls’
[08:28:10.803]   - Field: ‘globals’
[08:28:10.803]   - Field: ‘stdout’
[08:28:10.803]   - Field: ‘earlySignal’
[08:28:10.803]   - Field: ‘lazy’
[08:28:10.803]   - Field: ‘state’
[08:28:10.803] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:10.803] - Launch lazy future ...
[08:28:10.803] Packages needed by the future expression (n = 0): <none>
[08:28:10.804] Packages needed by future strategies (n = 0): <none>
[08:28:10.804] {
[08:28:10.804]     {
[08:28:10.804]         {
[08:28:10.804]             ...future.startTime <- base::Sys.time()
[08:28:10.804]             {
[08:28:10.804]                 {
[08:28:10.804]                   {
[08:28:10.804]                     {
[08:28:10.804]                       base::local({
[08:28:10.804]                         has_future <- base::requireNamespace("future", 
[08:28:10.804]                           quietly = TRUE)
[08:28:10.804]                         if (has_future) {
[08:28:10.804]                           ns <- base::getNamespace("future")
[08:28:10.804]                           version <- ns[[".package"]][["version"]]
[08:28:10.804]                           if (is.null(version)) 
[08:28:10.804]                             version <- utils::packageVersion("future")
[08:28:10.804]                         }
[08:28:10.804]                         else {
[08:28:10.804]                           version <- NULL
[08:28:10.804]                         }
[08:28:10.804]                         if (!has_future || version < "1.8.0") {
[08:28:10.804]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.804]                             "", base::R.version$version.string), 
[08:28:10.804]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.804]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.804]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.804]                               "release", "version")], collapse = " "), 
[08:28:10.804]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.804]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.804]                             info)
[08:28:10.804]                           info <- base::paste(info, collapse = "; ")
[08:28:10.804]                           if (!has_future) {
[08:28:10.804]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.804]                               info)
[08:28:10.804]                           }
[08:28:10.804]                           else {
[08:28:10.804]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.804]                               info, version)
[08:28:10.804]                           }
[08:28:10.804]                           base::stop(msg)
[08:28:10.804]                         }
[08:28:10.804]                       })
[08:28:10.804]                     }
[08:28:10.804]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.804]                     base::options(mc.cores = 1L)
[08:28:10.804]                   }
[08:28:10.804]                   ...future.strategy.old <- future::plan("list")
[08:28:10.804]                   options(future.plan = NULL)
[08:28:10.804]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.804]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.804]                 }
[08:28:10.804]                 ...future.workdir <- getwd()
[08:28:10.804]             }
[08:28:10.804]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.804]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.804]         }
[08:28:10.804]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.804]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.804]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.804]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.804]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.804]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.804]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.804]             base::names(...future.oldOptions))
[08:28:10.804]     }
[08:28:10.804]     if (FALSE) {
[08:28:10.804]     }
[08:28:10.804]     else {
[08:28:10.804]         if (TRUE) {
[08:28:10.804]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.804]                 open = "w")
[08:28:10.804]         }
[08:28:10.804]         else {
[08:28:10.804]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.804]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.804]         }
[08:28:10.804]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.804]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.804]             base::sink(type = "output", split = FALSE)
[08:28:10.804]             base::close(...future.stdout)
[08:28:10.804]         }, add = TRUE)
[08:28:10.804]     }
[08:28:10.804]     ...future.frame <- base::sys.nframe()
[08:28:10.804]     ...future.conditions <- base::list()
[08:28:10.804]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.804]     if (FALSE) {
[08:28:10.804]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.804]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.804]     }
[08:28:10.804]     ...future.result <- base::tryCatch({
[08:28:10.804]         base::withCallingHandlers({
[08:28:10.804]             ...future.value <- base::withVisible(base::local({
[08:28:10.804]                 ...future.makeSendCondition <- base::local({
[08:28:10.804]                   sendCondition <- NULL
[08:28:10.804]                   function(frame = 1L) {
[08:28:10.804]                     if (is.function(sendCondition)) 
[08:28:10.804]                       return(sendCondition)
[08:28:10.804]                     ns <- getNamespace("parallel")
[08:28:10.804]                     if (exists("sendData", mode = "function", 
[08:28:10.804]                       envir = ns)) {
[08:28:10.804]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:10.804]                         envir = ns)
[08:28:10.804]                       envir <- sys.frame(frame)
[08:28:10.804]                       master <- NULL
[08:28:10.804]                       while (!identical(envir, .GlobalEnv) && 
[08:28:10.804]                         !identical(envir, emptyenv())) {
[08:28:10.804]                         if (exists("master", mode = "list", envir = envir, 
[08:28:10.804]                           inherits = FALSE)) {
[08:28:10.804]                           master <- get("master", mode = "list", 
[08:28:10.804]                             envir = envir, inherits = FALSE)
[08:28:10.804]                           if (inherits(master, c("SOCKnode", 
[08:28:10.804]                             "SOCK0node"))) {
[08:28:10.804]                             sendCondition <<- function(cond) {
[08:28:10.804]                               data <- list(type = "VALUE", value = cond, 
[08:28:10.804]                                 success = TRUE)
[08:28:10.804]                               parallel_sendData(master, data)
[08:28:10.804]                             }
[08:28:10.804]                             return(sendCondition)
[08:28:10.804]                           }
[08:28:10.804]                         }
[08:28:10.804]                         frame <- frame + 1L
[08:28:10.804]                         envir <- sys.frame(frame)
[08:28:10.804]                       }
[08:28:10.804]                     }
[08:28:10.804]                     sendCondition <<- function(cond) NULL
[08:28:10.804]                   }
[08:28:10.804]                 })
[08:28:10.804]                 withCallingHandlers({
[08:28:10.804]                   {
[08:28:10.804]                     x$a <- 1
[08:28:10.804]                     x
[08:28:10.804]                   }
[08:28:10.804]                 }, immediateCondition = function(cond) {
[08:28:10.804]                   sendCondition <- ...future.makeSendCondition()
[08:28:10.804]                   sendCondition(cond)
[08:28:10.804]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.804]                   {
[08:28:10.804]                     inherits <- base::inherits
[08:28:10.804]                     invokeRestart <- base::invokeRestart
[08:28:10.804]                     is.null <- base::is.null
[08:28:10.804]                     muffled <- FALSE
[08:28:10.804]                     if (inherits(cond, "message")) {
[08:28:10.804]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.804]                       if (muffled) 
[08:28:10.804]                         invokeRestart("muffleMessage")
[08:28:10.804]                     }
[08:28:10.804]                     else if (inherits(cond, "warning")) {
[08:28:10.804]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.804]                       if (muffled) 
[08:28:10.804]                         invokeRestart("muffleWarning")
[08:28:10.804]                     }
[08:28:10.804]                     else if (inherits(cond, "condition")) {
[08:28:10.804]                       if (!is.null(pattern)) {
[08:28:10.804]                         computeRestarts <- base::computeRestarts
[08:28:10.804]                         grepl <- base::grepl
[08:28:10.804]                         restarts <- computeRestarts(cond)
[08:28:10.804]                         for (restart in restarts) {
[08:28:10.804]                           name <- restart$name
[08:28:10.804]                           if (is.null(name)) 
[08:28:10.804]                             next
[08:28:10.804]                           if (!grepl(pattern, name)) 
[08:28:10.804]                             next
[08:28:10.804]                           invokeRestart(restart)
[08:28:10.804]                           muffled <- TRUE
[08:28:10.804]                           break
[08:28:10.804]                         }
[08:28:10.804]                       }
[08:28:10.804]                     }
[08:28:10.804]                     invisible(muffled)
[08:28:10.804]                   }
[08:28:10.804]                   muffleCondition(cond)
[08:28:10.804]                 })
[08:28:10.804]             }))
[08:28:10.804]             future::FutureResult(value = ...future.value$value, 
[08:28:10.804]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.804]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.804]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.804]                     ...future.globalenv.names))
[08:28:10.804]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.804]         }, condition = base::local({
[08:28:10.804]             c <- base::c
[08:28:10.804]             inherits <- base::inherits
[08:28:10.804]             invokeRestart <- base::invokeRestart
[08:28:10.804]             length <- base::length
[08:28:10.804]             list <- base::list
[08:28:10.804]             seq.int <- base::seq.int
[08:28:10.804]             signalCondition <- base::signalCondition
[08:28:10.804]             sys.calls <- base::sys.calls
[08:28:10.804]             `[[` <- base::`[[`
[08:28:10.804]             `+` <- base::`+`
[08:28:10.804]             `<<-` <- base::`<<-`
[08:28:10.804]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.804]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.804]                   3L)]
[08:28:10.804]             }
[08:28:10.804]             function(cond) {
[08:28:10.804]                 is_error <- inherits(cond, "error")
[08:28:10.804]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.804]                   NULL)
[08:28:10.804]                 if (is_error) {
[08:28:10.804]                   sessionInformation <- function() {
[08:28:10.804]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.804]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.804]                       search = base::search(), system = base::Sys.info())
[08:28:10.804]                   }
[08:28:10.804]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.804]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.804]                     cond$call), session = sessionInformation(), 
[08:28:10.804]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.804]                   signalCondition(cond)
[08:28:10.804]                 }
[08:28:10.804]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.804]                 "immediateCondition"))) {
[08:28:10.804]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.804]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.804]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.804]                   if (TRUE && !signal) {
[08:28:10.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.804]                     {
[08:28:10.804]                       inherits <- base::inherits
[08:28:10.804]                       invokeRestart <- base::invokeRestart
[08:28:10.804]                       is.null <- base::is.null
[08:28:10.804]                       muffled <- FALSE
[08:28:10.804]                       if (inherits(cond, "message")) {
[08:28:10.804]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.804]                         if (muffled) 
[08:28:10.804]                           invokeRestart("muffleMessage")
[08:28:10.804]                       }
[08:28:10.804]                       else if (inherits(cond, "warning")) {
[08:28:10.804]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.804]                         if (muffled) 
[08:28:10.804]                           invokeRestart("muffleWarning")
[08:28:10.804]                       }
[08:28:10.804]                       else if (inherits(cond, "condition")) {
[08:28:10.804]                         if (!is.null(pattern)) {
[08:28:10.804]                           computeRestarts <- base::computeRestarts
[08:28:10.804]                           grepl <- base::grepl
[08:28:10.804]                           restarts <- computeRestarts(cond)
[08:28:10.804]                           for (restart in restarts) {
[08:28:10.804]                             name <- restart$name
[08:28:10.804]                             if (is.null(name)) 
[08:28:10.804]                               next
[08:28:10.804]                             if (!grepl(pattern, name)) 
[08:28:10.804]                               next
[08:28:10.804]                             invokeRestart(restart)
[08:28:10.804]                             muffled <- TRUE
[08:28:10.804]                             break
[08:28:10.804]                           }
[08:28:10.804]                         }
[08:28:10.804]                       }
[08:28:10.804]                       invisible(muffled)
[08:28:10.804]                     }
[08:28:10.804]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.804]                   }
[08:28:10.804]                 }
[08:28:10.804]                 else {
[08:28:10.804]                   if (TRUE) {
[08:28:10.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.804]                     {
[08:28:10.804]                       inherits <- base::inherits
[08:28:10.804]                       invokeRestart <- base::invokeRestart
[08:28:10.804]                       is.null <- base::is.null
[08:28:10.804]                       muffled <- FALSE
[08:28:10.804]                       if (inherits(cond, "message")) {
[08:28:10.804]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.804]                         if (muffled) 
[08:28:10.804]                           invokeRestart("muffleMessage")
[08:28:10.804]                       }
[08:28:10.804]                       else if (inherits(cond, "warning")) {
[08:28:10.804]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.804]                         if (muffled) 
[08:28:10.804]                           invokeRestart("muffleWarning")
[08:28:10.804]                       }
[08:28:10.804]                       else if (inherits(cond, "condition")) {
[08:28:10.804]                         if (!is.null(pattern)) {
[08:28:10.804]                           computeRestarts <- base::computeRestarts
[08:28:10.804]                           grepl <- base::grepl
[08:28:10.804]                           restarts <- computeRestarts(cond)
[08:28:10.804]                           for (restart in restarts) {
[08:28:10.804]                             name <- restart$name
[08:28:10.804]                             if (is.null(name)) 
[08:28:10.804]                               next
[08:28:10.804]                             if (!grepl(pattern, name)) 
[08:28:10.804]                               next
[08:28:10.804]                             invokeRestart(restart)
[08:28:10.804]                             muffled <- TRUE
[08:28:10.804]                             break
[08:28:10.804]                           }
[08:28:10.804]                         }
[08:28:10.804]                       }
[08:28:10.804]                       invisible(muffled)
[08:28:10.804]                     }
[08:28:10.804]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.804]                   }
[08:28:10.804]                 }
[08:28:10.804]             }
[08:28:10.804]         }))
[08:28:10.804]     }, error = function(ex) {
[08:28:10.804]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.804]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.804]                 ...future.rng), started = ...future.startTime, 
[08:28:10.804]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.804]             version = "1.8"), class = "FutureResult")
[08:28:10.804]     }, finally = {
[08:28:10.804]         if (!identical(...future.workdir, getwd())) 
[08:28:10.804]             setwd(...future.workdir)
[08:28:10.804]         {
[08:28:10.804]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.804]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.804]             }
[08:28:10.804]             base::options(...future.oldOptions)
[08:28:10.804]             if (.Platform$OS.type == "windows") {
[08:28:10.804]                 old_names <- names(...future.oldEnvVars)
[08:28:10.804]                 envs <- base::Sys.getenv()
[08:28:10.804]                 names <- names(envs)
[08:28:10.804]                 common <- intersect(names, old_names)
[08:28:10.804]                 added <- setdiff(names, old_names)
[08:28:10.804]                 removed <- setdiff(old_names, names)
[08:28:10.804]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.804]                   envs[common]]
[08:28:10.804]                 NAMES <- toupper(changed)
[08:28:10.804]                 args <- list()
[08:28:10.804]                 for (kk in seq_along(NAMES)) {
[08:28:10.804]                   name <- changed[[kk]]
[08:28:10.804]                   NAME <- NAMES[[kk]]
[08:28:10.804]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.804]                     next
[08:28:10.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.804]                 }
[08:28:10.804]                 NAMES <- toupper(added)
[08:28:10.804]                 for (kk in seq_along(NAMES)) {
[08:28:10.804]                   name <- added[[kk]]
[08:28:10.804]                   NAME <- NAMES[[kk]]
[08:28:10.804]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.804]                     next
[08:28:10.804]                   args[[name]] <- ""
[08:28:10.804]                 }
[08:28:10.804]                 NAMES <- toupper(removed)
[08:28:10.804]                 for (kk in seq_along(NAMES)) {
[08:28:10.804]                   name <- removed[[kk]]
[08:28:10.804]                   NAME <- NAMES[[kk]]
[08:28:10.804]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.804]                     next
[08:28:10.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.804]                 }
[08:28:10.804]                 if (length(args) > 0) 
[08:28:10.804]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.804]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.804]             }
[08:28:10.804]             else {
[08:28:10.804]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.804]             }
[08:28:10.804]             {
[08:28:10.804]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.804]                   0L) {
[08:28:10.804]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.804]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.804]                   base::options(opts)
[08:28:10.804]                 }
[08:28:10.804]                 {
[08:28:10.804]                   {
[08:28:10.804]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.804]                     NULL
[08:28:10.804]                   }
[08:28:10.804]                   options(future.plan = NULL)
[08:28:10.804]                   if (is.na(NA_character_)) 
[08:28:10.804]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.804]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.804]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.804]                     .init = FALSE)
[08:28:10.804]                 }
[08:28:10.804]             }
[08:28:10.804]         }
[08:28:10.804]     })
[08:28:10.804]     if (TRUE) {
[08:28:10.804]         base::sink(type = "output", split = FALSE)
[08:28:10.804]         if (TRUE) {
[08:28:10.804]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.804]         }
[08:28:10.804]         else {
[08:28:10.804]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.804]         }
[08:28:10.804]         base::close(...future.stdout)
[08:28:10.804]         ...future.stdout <- NULL
[08:28:10.804]     }
[08:28:10.804]     ...future.result$conditions <- ...future.conditions
[08:28:10.804]     ...future.result$finished <- base::Sys.time()
[08:28:10.804]     ...future.result
[08:28:10.804] }
[08:28:10.807] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:10.807] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:10.807] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:10.807] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:10.808] MultisessionFuture started
[08:28:10.808] - Launch lazy future ... done
[08:28:10.808] run() for ‘MultisessionFuture’ ... done
[08:28:10.808] result() for ClusterFuture ...
[08:28:10.808] receiveMessageFromWorker() for ClusterFuture ...
[08:28:10.809] - Validating connection of MultisessionFuture
[08:28:10.850] - received message: FutureResult
[08:28:10.850] - Received FutureResult
[08:28:10.851] - Erased future from FutureRegistry
[08:28:10.851] result() for ClusterFuture ...
[08:28:10.851] - result already collected: FutureResult
[08:28:10.851] result() for ClusterFuture ... done
[08:28:10.851] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:10.851] result() for ClusterFuture ... done
[08:28:10.851] result() for ClusterFuture ...
[08:28:10.851] - result already collected: FutureResult
[08:28:10.851] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.852] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.852] Searching for globals...
[08:28:10.854] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:10.854] Searching for globals ... DONE
[08:28:10.854] Resolving globals: TRUE
[08:28:10.854] Resolving any globals that are futures ...
[08:28:10.854] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:10.854] Resolving any globals that are futures ... DONE
[08:28:10.855] Resolving futures part of globals (recursively) ...
[08:28:10.855] resolve() on list ...
[08:28:10.855]  recursive: 99
[08:28:10.855]  length: 1
[08:28:10.855]  elements: ‘x’
[08:28:10.856]  length: 0 (resolved future 1)
[08:28:10.856] resolve() on list ... DONE
[08:28:10.856] - globals: [1] ‘x’
[08:28:10.856] Resolving futures part of globals (recursively) ... DONE
[08:28:10.856] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:10.857] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:10.857] - globals: [1] ‘x’
[08:28:10.857] 
[08:28:10.857] getGlobalsAndPackages() ... DONE
[08:28:10.857] run() for ‘Future’ ...
[08:28:10.857] - state: ‘created’
[08:28:10.858] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.872] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.872] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:10.872]   - Field: ‘node’
[08:28:10.872]   - Field: ‘label’
[08:28:10.873]   - Field: ‘local’
[08:28:10.873]   - Field: ‘owner’
[08:28:10.873]   - Field: ‘envir’
[08:28:10.873]   - Field: ‘workers’
[08:28:10.873]   - Field: ‘packages’
[08:28:10.873]   - Field: ‘gc’
[08:28:10.873]   - Field: ‘conditions’
[08:28:10.873]   - Field: ‘persistent’
[08:28:10.873]   - Field: ‘expr’
[08:28:10.873]   - Field: ‘uuid’
[08:28:10.873]   - Field: ‘seed’
[08:28:10.874]   - Field: ‘version’
[08:28:10.874]   - Field: ‘result’
[08:28:10.874]   - Field: ‘asynchronous’
[08:28:10.874]   - Field: ‘calls’
[08:28:10.874]   - Field: ‘globals’
[08:28:10.874]   - Field: ‘stdout’
[08:28:10.874]   - Field: ‘earlySignal’
[08:28:10.874]   - Field: ‘lazy’
[08:28:10.874]   - Field: ‘state’
[08:28:10.875] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:10.875] - Launch lazy future ...
[08:28:10.875] Packages needed by the future expression (n = 0): <none>
[08:28:10.875] Packages needed by future strategies (n = 0): <none>
[08:28:10.876] {
[08:28:10.876]     {
[08:28:10.876]         {
[08:28:10.876]             ...future.startTime <- base::Sys.time()
[08:28:10.876]             {
[08:28:10.876]                 {
[08:28:10.876]                   {
[08:28:10.876]                     {
[08:28:10.876]                       base::local({
[08:28:10.876]                         has_future <- base::requireNamespace("future", 
[08:28:10.876]                           quietly = TRUE)
[08:28:10.876]                         if (has_future) {
[08:28:10.876]                           ns <- base::getNamespace("future")
[08:28:10.876]                           version <- ns[[".package"]][["version"]]
[08:28:10.876]                           if (is.null(version)) 
[08:28:10.876]                             version <- utils::packageVersion("future")
[08:28:10.876]                         }
[08:28:10.876]                         else {
[08:28:10.876]                           version <- NULL
[08:28:10.876]                         }
[08:28:10.876]                         if (!has_future || version < "1.8.0") {
[08:28:10.876]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.876]                             "", base::R.version$version.string), 
[08:28:10.876]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.876]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.876]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.876]                               "release", "version")], collapse = " "), 
[08:28:10.876]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.876]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.876]                             info)
[08:28:10.876]                           info <- base::paste(info, collapse = "; ")
[08:28:10.876]                           if (!has_future) {
[08:28:10.876]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.876]                               info)
[08:28:10.876]                           }
[08:28:10.876]                           else {
[08:28:10.876]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.876]                               info, version)
[08:28:10.876]                           }
[08:28:10.876]                           base::stop(msg)
[08:28:10.876]                         }
[08:28:10.876]                       })
[08:28:10.876]                     }
[08:28:10.876]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.876]                     base::options(mc.cores = 1L)
[08:28:10.876]                   }
[08:28:10.876]                   ...future.strategy.old <- future::plan("list")
[08:28:10.876]                   options(future.plan = NULL)
[08:28:10.876]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.876]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.876]                 }
[08:28:10.876]                 ...future.workdir <- getwd()
[08:28:10.876]             }
[08:28:10.876]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.876]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.876]         }
[08:28:10.876]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.876]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.876]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.876]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.876]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.876]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.876]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.876]             base::names(...future.oldOptions))
[08:28:10.876]     }
[08:28:10.876]     if (FALSE) {
[08:28:10.876]     }
[08:28:10.876]     else {
[08:28:10.876]         if (TRUE) {
[08:28:10.876]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.876]                 open = "w")
[08:28:10.876]         }
[08:28:10.876]         else {
[08:28:10.876]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.876]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.876]         }
[08:28:10.876]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.876]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.876]             base::sink(type = "output", split = FALSE)
[08:28:10.876]             base::close(...future.stdout)
[08:28:10.876]         }, add = TRUE)
[08:28:10.876]     }
[08:28:10.876]     ...future.frame <- base::sys.nframe()
[08:28:10.876]     ...future.conditions <- base::list()
[08:28:10.876]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.876]     if (FALSE) {
[08:28:10.876]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.876]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.876]     }
[08:28:10.876]     ...future.result <- base::tryCatch({
[08:28:10.876]         base::withCallingHandlers({
[08:28:10.876]             ...future.value <- base::withVisible(base::local({
[08:28:10.876]                 ...future.makeSendCondition <- base::local({
[08:28:10.876]                   sendCondition <- NULL
[08:28:10.876]                   function(frame = 1L) {
[08:28:10.876]                     if (is.function(sendCondition)) 
[08:28:10.876]                       return(sendCondition)
[08:28:10.876]                     ns <- getNamespace("parallel")
[08:28:10.876]                     if (exists("sendData", mode = "function", 
[08:28:10.876]                       envir = ns)) {
[08:28:10.876]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:10.876]                         envir = ns)
[08:28:10.876]                       envir <- sys.frame(frame)
[08:28:10.876]                       master <- NULL
[08:28:10.876]                       while (!identical(envir, .GlobalEnv) && 
[08:28:10.876]                         !identical(envir, emptyenv())) {
[08:28:10.876]                         if (exists("master", mode = "list", envir = envir, 
[08:28:10.876]                           inherits = FALSE)) {
[08:28:10.876]                           master <- get("master", mode = "list", 
[08:28:10.876]                             envir = envir, inherits = FALSE)
[08:28:10.876]                           if (inherits(master, c("SOCKnode", 
[08:28:10.876]                             "SOCK0node"))) {
[08:28:10.876]                             sendCondition <<- function(cond) {
[08:28:10.876]                               data <- list(type = "VALUE", value = cond, 
[08:28:10.876]                                 success = TRUE)
[08:28:10.876]                               parallel_sendData(master, data)
[08:28:10.876]                             }
[08:28:10.876]                             return(sendCondition)
[08:28:10.876]                           }
[08:28:10.876]                         }
[08:28:10.876]                         frame <- frame + 1L
[08:28:10.876]                         envir <- sys.frame(frame)
[08:28:10.876]                       }
[08:28:10.876]                     }
[08:28:10.876]                     sendCondition <<- function(cond) NULL
[08:28:10.876]                   }
[08:28:10.876]                 })
[08:28:10.876]                 withCallingHandlers({
[08:28:10.876]                   {
[08:28:10.876]                     x$a <- 1
[08:28:10.876]                     x
[08:28:10.876]                   }
[08:28:10.876]                 }, immediateCondition = function(cond) {
[08:28:10.876]                   sendCondition <- ...future.makeSendCondition()
[08:28:10.876]                   sendCondition(cond)
[08:28:10.876]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.876]                   {
[08:28:10.876]                     inherits <- base::inherits
[08:28:10.876]                     invokeRestart <- base::invokeRestart
[08:28:10.876]                     is.null <- base::is.null
[08:28:10.876]                     muffled <- FALSE
[08:28:10.876]                     if (inherits(cond, "message")) {
[08:28:10.876]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.876]                       if (muffled) 
[08:28:10.876]                         invokeRestart("muffleMessage")
[08:28:10.876]                     }
[08:28:10.876]                     else if (inherits(cond, "warning")) {
[08:28:10.876]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.876]                       if (muffled) 
[08:28:10.876]                         invokeRestart("muffleWarning")
[08:28:10.876]                     }
[08:28:10.876]                     else if (inherits(cond, "condition")) {
[08:28:10.876]                       if (!is.null(pattern)) {
[08:28:10.876]                         computeRestarts <- base::computeRestarts
[08:28:10.876]                         grepl <- base::grepl
[08:28:10.876]                         restarts <- computeRestarts(cond)
[08:28:10.876]                         for (restart in restarts) {
[08:28:10.876]                           name <- restart$name
[08:28:10.876]                           if (is.null(name)) 
[08:28:10.876]                             next
[08:28:10.876]                           if (!grepl(pattern, name)) 
[08:28:10.876]                             next
[08:28:10.876]                           invokeRestart(restart)
[08:28:10.876]                           muffled <- TRUE
[08:28:10.876]                           break
[08:28:10.876]                         }
[08:28:10.876]                       }
[08:28:10.876]                     }
[08:28:10.876]                     invisible(muffled)
[08:28:10.876]                   }
[08:28:10.876]                   muffleCondition(cond)
[08:28:10.876]                 })
[08:28:10.876]             }))
[08:28:10.876]             future::FutureResult(value = ...future.value$value, 
[08:28:10.876]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.876]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.876]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.876]                     ...future.globalenv.names))
[08:28:10.876]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.876]         }, condition = base::local({
[08:28:10.876]             c <- base::c
[08:28:10.876]             inherits <- base::inherits
[08:28:10.876]             invokeRestart <- base::invokeRestart
[08:28:10.876]             length <- base::length
[08:28:10.876]             list <- base::list
[08:28:10.876]             seq.int <- base::seq.int
[08:28:10.876]             signalCondition <- base::signalCondition
[08:28:10.876]             sys.calls <- base::sys.calls
[08:28:10.876]             `[[` <- base::`[[`
[08:28:10.876]             `+` <- base::`+`
[08:28:10.876]             `<<-` <- base::`<<-`
[08:28:10.876]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.876]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.876]                   3L)]
[08:28:10.876]             }
[08:28:10.876]             function(cond) {
[08:28:10.876]                 is_error <- inherits(cond, "error")
[08:28:10.876]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.876]                   NULL)
[08:28:10.876]                 if (is_error) {
[08:28:10.876]                   sessionInformation <- function() {
[08:28:10.876]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.876]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.876]                       search = base::search(), system = base::Sys.info())
[08:28:10.876]                   }
[08:28:10.876]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.876]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.876]                     cond$call), session = sessionInformation(), 
[08:28:10.876]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.876]                   signalCondition(cond)
[08:28:10.876]                 }
[08:28:10.876]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.876]                 "immediateCondition"))) {
[08:28:10.876]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.876]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.876]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.876]                   if (TRUE && !signal) {
[08:28:10.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.876]                     {
[08:28:10.876]                       inherits <- base::inherits
[08:28:10.876]                       invokeRestart <- base::invokeRestart
[08:28:10.876]                       is.null <- base::is.null
[08:28:10.876]                       muffled <- FALSE
[08:28:10.876]                       if (inherits(cond, "message")) {
[08:28:10.876]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.876]                         if (muffled) 
[08:28:10.876]                           invokeRestart("muffleMessage")
[08:28:10.876]                       }
[08:28:10.876]                       else if (inherits(cond, "warning")) {
[08:28:10.876]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.876]                         if (muffled) 
[08:28:10.876]                           invokeRestart("muffleWarning")
[08:28:10.876]                       }
[08:28:10.876]                       else if (inherits(cond, "condition")) {
[08:28:10.876]                         if (!is.null(pattern)) {
[08:28:10.876]                           computeRestarts <- base::computeRestarts
[08:28:10.876]                           grepl <- base::grepl
[08:28:10.876]                           restarts <- computeRestarts(cond)
[08:28:10.876]                           for (restart in restarts) {
[08:28:10.876]                             name <- restart$name
[08:28:10.876]                             if (is.null(name)) 
[08:28:10.876]                               next
[08:28:10.876]                             if (!grepl(pattern, name)) 
[08:28:10.876]                               next
[08:28:10.876]                             invokeRestart(restart)
[08:28:10.876]                             muffled <- TRUE
[08:28:10.876]                             break
[08:28:10.876]                           }
[08:28:10.876]                         }
[08:28:10.876]                       }
[08:28:10.876]                       invisible(muffled)
[08:28:10.876]                     }
[08:28:10.876]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.876]                   }
[08:28:10.876]                 }
[08:28:10.876]                 else {
[08:28:10.876]                   if (TRUE) {
[08:28:10.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.876]                     {
[08:28:10.876]                       inherits <- base::inherits
[08:28:10.876]                       invokeRestart <- base::invokeRestart
[08:28:10.876]                       is.null <- base::is.null
[08:28:10.876]                       muffled <- FALSE
[08:28:10.876]                       if (inherits(cond, "message")) {
[08:28:10.876]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.876]                         if (muffled) 
[08:28:10.876]                           invokeRestart("muffleMessage")
[08:28:10.876]                       }
[08:28:10.876]                       else if (inherits(cond, "warning")) {
[08:28:10.876]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.876]                         if (muffled) 
[08:28:10.876]                           invokeRestart("muffleWarning")
[08:28:10.876]                       }
[08:28:10.876]                       else if (inherits(cond, "condition")) {
[08:28:10.876]                         if (!is.null(pattern)) {
[08:28:10.876]                           computeRestarts <- base::computeRestarts
[08:28:10.876]                           grepl <- base::grepl
[08:28:10.876]                           restarts <- computeRestarts(cond)
[08:28:10.876]                           for (restart in restarts) {
[08:28:10.876]                             name <- restart$name
[08:28:10.876]                             if (is.null(name)) 
[08:28:10.876]                               next
[08:28:10.876]                             if (!grepl(pattern, name)) 
[08:28:10.876]                               next
[08:28:10.876]                             invokeRestart(restart)
[08:28:10.876]                             muffled <- TRUE
[08:28:10.876]                             break
[08:28:10.876]                           }
[08:28:10.876]                         }
[08:28:10.876]                       }
[08:28:10.876]                       invisible(muffled)
[08:28:10.876]                     }
[08:28:10.876]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.876]                   }
[08:28:10.876]                 }
[08:28:10.876]             }
[08:28:10.876]         }))
[08:28:10.876]     }, error = function(ex) {
[08:28:10.876]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.876]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.876]                 ...future.rng), started = ...future.startTime, 
[08:28:10.876]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.876]             version = "1.8"), class = "FutureResult")
[08:28:10.876]     }, finally = {
[08:28:10.876]         if (!identical(...future.workdir, getwd())) 
[08:28:10.876]             setwd(...future.workdir)
[08:28:10.876]         {
[08:28:10.876]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.876]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.876]             }
[08:28:10.876]             base::options(...future.oldOptions)
[08:28:10.876]             if (.Platform$OS.type == "windows") {
[08:28:10.876]                 old_names <- names(...future.oldEnvVars)
[08:28:10.876]                 envs <- base::Sys.getenv()
[08:28:10.876]                 names <- names(envs)
[08:28:10.876]                 common <- intersect(names, old_names)
[08:28:10.876]                 added <- setdiff(names, old_names)
[08:28:10.876]                 removed <- setdiff(old_names, names)
[08:28:10.876]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.876]                   envs[common]]
[08:28:10.876]                 NAMES <- toupper(changed)
[08:28:10.876]                 args <- list()
[08:28:10.876]                 for (kk in seq_along(NAMES)) {
[08:28:10.876]                   name <- changed[[kk]]
[08:28:10.876]                   NAME <- NAMES[[kk]]
[08:28:10.876]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.876]                     next
[08:28:10.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.876]                 }
[08:28:10.876]                 NAMES <- toupper(added)
[08:28:10.876]                 for (kk in seq_along(NAMES)) {
[08:28:10.876]                   name <- added[[kk]]
[08:28:10.876]                   NAME <- NAMES[[kk]]
[08:28:10.876]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.876]                     next
[08:28:10.876]                   args[[name]] <- ""
[08:28:10.876]                 }
[08:28:10.876]                 NAMES <- toupper(removed)
[08:28:10.876]                 for (kk in seq_along(NAMES)) {
[08:28:10.876]                   name <- removed[[kk]]
[08:28:10.876]                   NAME <- NAMES[[kk]]
[08:28:10.876]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.876]                     next
[08:28:10.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.876]                 }
[08:28:10.876]                 if (length(args) > 0) 
[08:28:10.876]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.876]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.876]             }
[08:28:10.876]             else {
[08:28:10.876]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.876]             }
[08:28:10.876]             {
[08:28:10.876]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.876]                   0L) {
[08:28:10.876]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.876]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.876]                   base::options(opts)
[08:28:10.876]                 }
[08:28:10.876]                 {
[08:28:10.876]                   {
[08:28:10.876]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.876]                     NULL
[08:28:10.876]                   }
[08:28:10.876]                   options(future.plan = NULL)
[08:28:10.876]                   if (is.na(NA_character_)) 
[08:28:10.876]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.876]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.876]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.876]                     .init = FALSE)
[08:28:10.876]                 }
[08:28:10.876]             }
[08:28:10.876]         }
[08:28:10.876]     })
[08:28:10.876]     if (TRUE) {
[08:28:10.876]         base::sink(type = "output", split = FALSE)
[08:28:10.876]         if (TRUE) {
[08:28:10.876]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.876]         }
[08:28:10.876]         else {
[08:28:10.876]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.876]         }
[08:28:10.876]         base::close(...future.stdout)
[08:28:10.876]         ...future.stdout <- NULL
[08:28:10.876]     }
[08:28:10.876]     ...future.result$conditions <- ...future.conditions
[08:28:10.876]     ...future.result$finished <- base::Sys.time()
[08:28:10.876]     ...future.result
[08:28:10.876] }
[08:28:10.882] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:10.882] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:10.883] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:10.883] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:10.883] MultisessionFuture started
[08:28:10.883] - Launch lazy future ... done
[08:28:10.884] run() for ‘MultisessionFuture’ ... done
[08:28:10.884] result() for ClusterFuture ...
[08:28:10.884] receiveMessageFromWorker() for ClusterFuture ...
[08:28:10.884] - Validating connection of MultisessionFuture
[08:28:10.925] - received message: FutureResult
[08:28:10.925] - Received FutureResult
[08:28:10.926] - Erased future from FutureRegistry
[08:28:10.926] result() for ClusterFuture ...
[08:28:10.926] - result already collected: FutureResult
[08:28:10.926] result() for ClusterFuture ... done
[08:28:10.926] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:10.926] result() for ClusterFuture ... done
[08:28:10.926] result() for ClusterFuture ...
[08:28:10.926] - result already collected: FutureResult
[08:28:10.926] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:10.927] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:10.927] Searching for globals...
[08:28:10.930] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:10.930] Searching for globals ... DONE
[08:28:10.930] Resolving globals: TRUE
[08:28:10.930] Resolving any globals that are futures ...
[08:28:10.930] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:10.930] Resolving any globals that are futures ... DONE
[08:28:10.931] Resolving futures part of globals (recursively) ...
[08:28:10.931] resolve() on list ...
[08:28:10.931]  recursive: 99
[08:28:10.931]  length: 1
[08:28:10.931]  elements: ‘x’
[08:28:10.932]  length: 0 (resolved future 1)
[08:28:10.932] resolve() on list ... DONE
[08:28:10.932] - globals: [1] ‘x’
[08:28:10.932] Resolving futures part of globals (recursively) ... DONE
[08:28:10.932] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:10.932] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:10.933] - globals: [1] ‘x’
[08:28:10.933] 
[08:28:10.933] getGlobalsAndPackages() ... DONE
[08:28:10.933] run() for ‘Future’ ...
[08:28:10.933] - state: ‘created’
[08:28:10.933] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:10.948] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:10.948] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:10.948]   - Field: ‘node’
[08:28:10.949]   - Field: ‘label’
[08:28:10.949]   - Field: ‘local’
[08:28:10.949]   - Field: ‘owner’
[08:28:10.949]   - Field: ‘envir’
[08:28:10.949]   - Field: ‘workers’
[08:28:10.949]   - Field: ‘packages’
[08:28:10.949]   - Field: ‘gc’
[08:28:10.949]   - Field: ‘conditions’
[08:28:10.949]   - Field: ‘persistent’
[08:28:10.949]   - Field: ‘expr’
[08:28:10.949]   - Field: ‘uuid’
[08:28:10.950]   - Field: ‘seed’
[08:28:10.950]   - Field: ‘version’
[08:28:10.950]   - Field: ‘result’
[08:28:10.950]   - Field: ‘asynchronous’
[08:28:10.950]   - Field: ‘calls’
[08:28:10.950]   - Field: ‘globals’
[08:28:10.950]   - Field: ‘stdout’
[08:28:10.950]   - Field: ‘earlySignal’
[08:28:10.950]   - Field: ‘lazy’
[08:28:10.951]   - Field: ‘state’
[08:28:10.951] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:10.951] - Launch lazy future ...
[08:28:10.951] Packages needed by the future expression (n = 0): <none>
[08:28:10.951] Packages needed by future strategies (n = 0): <none>
[08:28:10.952] {
[08:28:10.952]     {
[08:28:10.952]         {
[08:28:10.952]             ...future.startTime <- base::Sys.time()
[08:28:10.952]             {
[08:28:10.952]                 {
[08:28:10.952]                   {
[08:28:10.952]                     {
[08:28:10.952]                       base::local({
[08:28:10.952]                         has_future <- base::requireNamespace("future", 
[08:28:10.952]                           quietly = TRUE)
[08:28:10.952]                         if (has_future) {
[08:28:10.952]                           ns <- base::getNamespace("future")
[08:28:10.952]                           version <- ns[[".package"]][["version"]]
[08:28:10.952]                           if (is.null(version)) 
[08:28:10.952]                             version <- utils::packageVersion("future")
[08:28:10.952]                         }
[08:28:10.952]                         else {
[08:28:10.952]                           version <- NULL
[08:28:10.952]                         }
[08:28:10.952]                         if (!has_future || version < "1.8.0") {
[08:28:10.952]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:10.952]                             "", base::R.version$version.string), 
[08:28:10.952]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:10.952]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:10.952]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:10.952]                               "release", "version")], collapse = " "), 
[08:28:10.952]                             hostname = base::Sys.info()[["nodename"]])
[08:28:10.952]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:10.952]                             info)
[08:28:10.952]                           info <- base::paste(info, collapse = "; ")
[08:28:10.952]                           if (!has_future) {
[08:28:10.952]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:10.952]                               info)
[08:28:10.952]                           }
[08:28:10.952]                           else {
[08:28:10.952]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:10.952]                               info, version)
[08:28:10.952]                           }
[08:28:10.952]                           base::stop(msg)
[08:28:10.952]                         }
[08:28:10.952]                       })
[08:28:10.952]                     }
[08:28:10.952]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:10.952]                     base::options(mc.cores = 1L)
[08:28:10.952]                   }
[08:28:10.952]                   ...future.strategy.old <- future::plan("list")
[08:28:10.952]                   options(future.plan = NULL)
[08:28:10.952]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.952]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:10.952]                 }
[08:28:10.952]                 ...future.workdir <- getwd()
[08:28:10.952]             }
[08:28:10.952]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:10.952]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:10.952]         }
[08:28:10.952]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:10.952]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:10.952]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:10.952]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:10.952]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:10.952]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:10.952]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:10.952]             base::names(...future.oldOptions))
[08:28:10.952]     }
[08:28:10.952]     if (FALSE) {
[08:28:10.952]     }
[08:28:10.952]     else {
[08:28:10.952]         if (TRUE) {
[08:28:10.952]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:10.952]                 open = "w")
[08:28:10.952]         }
[08:28:10.952]         else {
[08:28:10.952]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:10.952]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:10.952]         }
[08:28:10.952]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:10.952]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:10.952]             base::sink(type = "output", split = FALSE)
[08:28:10.952]             base::close(...future.stdout)
[08:28:10.952]         }, add = TRUE)
[08:28:10.952]     }
[08:28:10.952]     ...future.frame <- base::sys.nframe()
[08:28:10.952]     ...future.conditions <- base::list()
[08:28:10.952]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:10.952]     if (FALSE) {
[08:28:10.952]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:10.952]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:10.952]     }
[08:28:10.952]     ...future.result <- base::tryCatch({
[08:28:10.952]         base::withCallingHandlers({
[08:28:10.952]             ...future.value <- base::withVisible(base::local({
[08:28:10.952]                 ...future.makeSendCondition <- base::local({
[08:28:10.952]                   sendCondition <- NULL
[08:28:10.952]                   function(frame = 1L) {
[08:28:10.952]                     if (is.function(sendCondition)) 
[08:28:10.952]                       return(sendCondition)
[08:28:10.952]                     ns <- getNamespace("parallel")
[08:28:10.952]                     if (exists("sendData", mode = "function", 
[08:28:10.952]                       envir = ns)) {
[08:28:10.952]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:10.952]                         envir = ns)
[08:28:10.952]                       envir <- sys.frame(frame)
[08:28:10.952]                       master <- NULL
[08:28:10.952]                       while (!identical(envir, .GlobalEnv) && 
[08:28:10.952]                         !identical(envir, emptyenv())) {
[08:28:10.952]                         if (exists("master", mode = "list", envir = envir, 
[08:28:10.952]                           inherits = FALSE)) {
[08:28:10.952]                           master <- get("master", mode = "list", 
[08:28:10.952]                             envir = envir, inherits = FALSE)
[08:28:10.952]                           if (inherits(master, c("SOCKnode", 
[08:28:10.952]                             "SOCK0node"))) {
[08:28:10.952]                             sendCondition <<- function(cond) {
[08:28:10.952]                               data <- list(type = "VALUE", value = cond, 
[08:28:10.952]                                 success = TRUE)
[08:28:10.952]                               parallel_sendData(master, data)
[08:28:10.952]                             }
[08:28:10.952]                             return(sendCondition)
[08:28:10.952]                           }
[08:28:10.952]                         }
[08:28:10.952]                         frame <- frame + 1L
[08:28:10.952]                         envir <- sys.frame(frame)
[08:28:10.952]                       }
[08:28:10.952]                     }
[08:28:10.952]                     sendCondition <<- function(cond) NULL
[08:28:10.952]                   }
[08:28:10.952]                 })
[08:28:10.952]                 withCallingHandlers({
[08:28:10.952]                   {
[08:28:10.952]                     x$a <- 1
[08:28:10.952]                     x
[08:28:10.952]                   }
[08:28:10.952]                 }, immediateCondition = function(cond) {
[08:28:10.952]                   sendCondition <- ...future.makeSendCondition()
[08:28:10.952]                   sendCondition(cond)
[08:28:10.952]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.952]                   {
[08:28:10.952]                     inherits <- base::inherits
[08:28:10.952]                     invokeRestart <- base::invokeRestart
[08:28:10.952]                     is.null <- base::is.null
[08:28:10.952]                     muffled <- FALSE
[08:28:10.952]                     if (inherits(cond, "message")) {
[08:28:10.952]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:10.952]                       if (muffled) 
[08:28:10.952]                         invokeRestart("muffleMessage")
[08:28:10.952]                     }
[08:28:10.952]                     else if (inherits(cond, "warning")) {
[08:28:10.952]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:10.952]                       if (muffled) 
[08:28:10.952]                         invokeRestart("muffleWarning")
[08:28:10.952]                     }
[08:28:10.952]                     else if (inherits(cond, "condition")) {
[08:28:10.952]                       if (!is.null(pattern)) {
[08:28:10.952]                         computeRestarts <- base::computeRestarts
[08:28:10.952]                         grepl <- base::grepl
[08:28:10.952]                         restarts <- computeRestarts(cond)
[08:28:10.952]                         for (restart in restarts) {
[08:28:10.952]                           name <- restart$name
[08:28:10.952]                           if (is.null(name)) 
[08:28:10.952]                             next
[08:28:10.952]                           if (!grepl(pattern, name)) 
[08:28:10.952]                             next
[08:28:10.952]                           invokeRestart(restart)
[08:28:10.952]                           muffled <- TRUE
[08:28:10.952]                           break
[08:28:10.952]                         }
[08:28:10.952]                       }
[08:28:10.952]                     }
[08:28:10.952]                     invisible(muffled)
[08:28:10.952]                   }
[08:28:10.952]                   muffleCondition(cond)
[08:28:10.952]                 })
[08:28:10.952]             }))
[08:28:10.952]             future::FutureResult(value = ...future.value$value, 
[08:28:10.952]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.952]                   ...future.rng), globalenv = if (FALSE) 
[08:28:10.952]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:10.952]                     ...future.globalenv.names))
[08:28:10.952]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:10.952]         }, condition = base::local({
[08:28:10.952]             c <- base::c
[08:28:10.952]             inherits <- base::inherits
[08:28:10.952]             invokeRestart <- base::invokeRestart
[08:28:10.952]             length <- base::length
[08:28:10.952]             list <- base::list
[08:28:10.952]             seq.int <- base::seq.int
[08:28:10.952]             signalCondition <- base::signalCondition
[08:28:10.952]             sys.calls <- base::sys.calls
[08:28:10.952]             `[[` <- base::`[[`
[08:28:10.952]             `+` <- base::`+`
[08:28:10.952]             `<<-` <- base::`<<-`
[08:28:10.952]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:10.952]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:10.952]                   3L)]
[08:28:10.952]             }
[08:28:10.952]             function(cond) {
[08:28:10.952]                 is_error <- inherits(cond, "error")
[08:28:10.952]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:10.952]                   NULL)
[08:28:10.952]                 if (is_error) {
[08:28:10.952]                   sessionInformation <- function() {
[08:28:10.952]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:10.952]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:10.952]                       search = base::search(), system = base::Sys.info())
[08:28:10.952]                   }
[08:28:10.952]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.952]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:10.952]                     cond$call), session = sessionInformation(), 
[08:28:10.952]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:10.952]                   signalCondition(cond)
[08:28:10.952]                 }
[08:28:10.952]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:10.952]                 "immediateCondition"))) {
[08:28:10.952]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:10.952]                   ...future.conditions[[length(...future.conditions) + 
[08:28:10.952]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:10.952]                   if (TRUE && !signal) {
[08:28:10.952]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.952]                     {
[08:28:10.952]                       inherits <- base::inherits
[08:28:10.952]                       invokeRestart <- base::invokeRestart
[08:28:10.952]                       is.null <- base::is.null
[08:28:10.952]                       muffled <- FALSE
[08:28:10.952]                       if (inherits(cond, "message")) {
[08:28:10.952]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.952]                         if (muffled) 
[08:28:10.952]                           invokeRestart("muffleMessage")
[08:28:10.952]                       }
[08:28:10.952]                       else if (inherits(cond, "warning")) {
[08:28:10.952]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.952]                         if (muffled) 
[08:28:10.952]                           invokeRestart("muffleWarning")
[08:28:10.952]                       }
[08:28:10.952]                       else if (inherits(cond, "condition")) {
[08:28:10.952]                         if (!is.null(pattern)) {
[08:28:10.952]                           computeRestarts <- base::computeRestarts
[08:28:10.952]                           grepl <- base::grepl
[08:28:10.952]                           restarts <- computeRestarts(cond)
[08:28:10.952]                           for (restart in restarts) {
[08:28:10.952]                             name <- restart$name
[08:28:10.952]                             if (is.null(name)) 
[08:28:10.952]                               next
[08:28:10.952]                             if (!grepl(pattern, name)) 
[08:28:10.952]                               next
[08:28:10.952]                             invokeRestart(restart)
[08:28:10.952]                             muffled <- TRUE
[08:28:10.952]                             break
[08:28:10.952]                           }
[08:28:10.952]                         }
[08:28:10.952]                       }
[08:28:10.952]                       invisible(muffled)
[08:28:10.952]                     }
[08:28:10.952]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.952]                   }
[08:28:10.952]                 }
[08:28:10.952]                 else {
[08:28:10.952]                   if (TRUE) {
[08:28:10.952]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:10.952]                     {
[08:28:10.952]                       inherits <- base::inherits
[08:28:10.952]                       invokeRestart <- base::invokeRestart
[08:28:10.952]                       is.null <- base::is.null
[08:28:10.952]                       muffled <- FALSE
[08:28:10.952]                       if (inherits(cond, "message")) {
[08:28:10.952]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:10.952]                         if (muffled) 
[08:28:10.952]                           invokeRestart("muffleMessage")
[08:28:10.952]                       }
[08:28:10.952]                       else if (inherits(cond, "warning")) {
[08:28:10.952]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:10.952]                         if (muffled) 
[08:28:10.952]                           invokeRestart("muffleWarning")
[08:28:10.952]                       }
[08:28:10.952]                       else if (inherits(cond, "condition")) {
[08:28:10.952]                         if (!is.null(pattern)) {
[08:28:10.952]                           computeRestarts <- base::computeRestarts
[08:28:10.952]                           grepl <- base::grepl
[08:28:10.952]                           restarts <- computeRestarts(cond)
[08:28:10.952]                           for (restart in restarts) {
[08:28:10.952]                             name <- restart$name
[08:28:10.952]                             if (is.null(name)) 
[08:28:10.952]                               next
[08:28:10.952]                             if (!grepl(pattern, name)) 
[08:28:10.952]                               next
[08:28:10.952]                             invokeRestart(restart)
[08:28:10.952]                             muffled <- TRUE
[08:28:10.952]                             break
[08:28:10.952]                           }
[08:28:10.952]                         }
[08:28:10.952]                       }
[08:28:10.952]                       invisible(muffled)
[08:28:10.952]                     }
[08:28:10.952]                     muffleCondition(cond, pattern = "^muffle")
[08:28:10.952]                   }
[08:28:10.952]                 }
[08:28:10.952]             }
[08:28:10.952]         }))
[08:28:10.952]     }, error = function(ex) {
[08:28:10.952]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:10.952]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:10.952]                 ...future.rng), started = ...future.startTime, 
[08:28:10.952]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:10.952]             version = "1.8"), class = "FutureResult")
[08:28:10.952]     }, finally = {
[08:28:10.952]         if (!identical(...future.workdir, getwd())) 
[08:28:10.952]             setwd(...future.workdir)
[08:28:10.952]         {
[08:28:10.952]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:10.952]                 ...future.oldOptions$nwarnings <- NULL
[08:28:10.952]             }
[08:28:10.952]             base::options(...future.oldOptions)
[08:28:10.952]             if (.Platform$OS.type == "windows") {
[08:28:10.952]                 old_names <- names(...future.oldEnvVars)
[08:28:10.952]                 envs <- base::Sys.getenv()
[08:28:10.952]                 names <- names(envs)
[08:28:10.952]                 common <- intersect(names, old_names)
[08:28:10.952]                 added <- setdiff(names, old_names)
[08:28:10.952]                 removed <- setdiff(old_names, names)
[08:28:10.952]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:10.952]                   envs[common]]
[08:28:10.952]                 NAMES <- toupper(changed)
[08:28:10.952]                 args <- list()
[08:28:10.952]                 for (kk in seq_along(NAMES)) {
[08:28:10.952]                   name <- changed[[kk]]
[08:28:10.952]                   NAME <- NAMES[[kk]]
[08:28:10.952]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.952]                     next
[08:28:10.952]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.952]                 }
[08:28:10.952]                 NAMES <- toupper(added)
[08:28:10.952]                 for (kk in seq_along(NAMES)) {
[08:28:10.952]                   name <- added[[kk]]
[08:28:10.952]                   NAME <- NAMES[[kk]]
[08:28:10.952]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.952]                     next
[08:28:10.952]                   args[[name]] <- ""
[08:28:10.952]                 }
[08:28:10.952]                 NAMES <- toupper(removed)
[08:28:10.952]                 for (kk in seq_along(NAMES)) {
[08:28:10.952]                   name <- removed[[kk]]
[08:28:10.952]                   NAME <- NAMES[[kk]]
[08:28:10.952]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:10.952]                     next
[08:28:10.952]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:10.952]                 }
[08:28:10.952]                 if (length(args) > 0) 
[08:28:10.952]                   base::do.call(base::Sys.setenv, args = args)
[08:28:10.952]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:10.952]             }
[08:28:10.952]             else {
[08:28:10.952]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:10.952]             }
[08:28:10.952]             {
[08:28:10.952]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:10.952]                   0L) {
[08:28:10.952]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:10.952]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:10.952]                   base::options(opts)
[08:28:10.952]                 }
[08:28:10.952]                 {
[08:28:10.952]                   {
[08:28:10.952]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:10.952]                     NULL
[08:28:10.952]                   }
[08:28:10.952]                   options(future.plan = NULL)
[08:28:10.952]                   if (is.na(NA_character_)) 
[08:28:10.952]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:10.952]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:10.952]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:10.952]                     .init = FALSE)
[08:28:10.952]                 }
[08:28:10.952]             }
[08:28:10.952]         }
[08:28:10.952]     })
[08:28:10.952]     if (TRUE) {
[08:28:10.952]         base::sink(type = "output", split = FALSE)
[08:28:10.952]         if (TRUE) {
[08:28:10.952]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:10.952]         }
[08:28:10.952]         else {
[08:28:10.952]             ...future.result["stdout"] <- base::list(NULL)
[08:28:10.952]         }
[08:28:10.952]         base::close(...future.stdout)
[08:28:10.952]         ...future.stdout <- NULL
[08:28:10.952]     }
[08:28:10.952]     ...future.result$conditions <- ...future.conditions
[08:28:10.952]     ...future.result$finished <- base::Sys.time()
[08:28:10.952]     ...future.result
[08:28:10.952] }
[08:28:10.955] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:10.955] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:10.955] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:10.955] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:10.956] MultisessionFuture started
[08:28:10.956] - Launch lazy future ... done
[08:28:10.956] run() for ‘MultisessionFuture’ ... done
[08:28:10.957] result() for ClusterFuture ...
[08:28:10.957] receiveMessageFromWorker() for ClusterFuture ...
[08:28:10.957] - Validating connection of MultisessionFuture
[08:28:10.998] - received message: FutureResult
[08:28:10.998] - Received FutureResult
[08:28:10.999] - Erased future from FutureRegistry
[08:28:10.999] result() for ClusterFuture ...
[08:28:10.999] - result already collected: FutureResult
[08:28:10.999] result() for ClusterFuture ... done
[08:28:10.999] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:10.999] result() for ClusterFuture ... done
[08:28:10.999] result() for ClusterFuture ...
[08:28:10.999] - result already collected: FutureResult
[08:28:10.999] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.000] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.000] Searching for globals...
[08:28:11.003] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:11.003] Searching for globals ... DONE
[08:28:11.003] Resolving globals: TRUE
[08:28:11.003] Resolving any globals that are futures ...
[08:28:11.003] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:28:11.003] Resolving any globals that are futures ... DONE
[08:28:11.004] Resolving futures part of globals (recursively) ...
[08:28:11.004] resolve() on list ...
[08:28:11.004]  recursive: 99
[08:28:11.004]  length: 1
[08:28:11.004]  elements: ‘x’
[08:28:11.005]  length: 0 (resolved future 1)
[08:28:11.005] resolve() on list ... DONE
[08:28:11.005] - globals: [1] ‘x’
[08:28:11.005] Resolving futures part of globals (recursively) ... DONE
[08:28:11.005] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:11.006] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:11.006] - globals: [1] ‘x’
[08:28:11.006] 
[08:28:11.006] getGlobalsAndPackages() ... DONE
[08:28:11.006] run() for ‘Future’ ...
[08:28:11.006] - state: ‘created’
[08:28:11.007] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.021] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.021] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.022]   - Field: ‘node’
[08:28:11.022]   - Field: ‘label’
[08:28:11.022]   - Field: ‘local’
[08:28:11.022]   - Field: ‘owner’
[08:28:11.022]   - Field: ‘envir’
[08:28:11.022]   - Field: ‘workers’
[08:28:11.022]   - Field: ‘packages’
[08:28:11.022]   - Field: ‘gc’
[08:28:11.022]   - Field: ‘conditions’
[08:28:11.022]   - Field: ‘persistent’
[08:28:11.023]   - Field: ‘expr’
[08:28:11.023]   - Field: ‘uuid’
[08:28:11.023]   - Field: ‘seed’
[08:28:11.023]   - Field: ‘version’
[08:28:11.023]   - Field: ‘result’
[08:28:11.023]   - Field: ‘asynchronous’
[08:28:11.023]   - Field: ‘calls’
[08:28:11.023]   - Field: ‘globals’
[08:28:11.023]   - Field: ‘stdout’
[08:28:11.023]   - Field: ‘earlySignal’
[08:28:11.024]   - Field: ‘lazy’
[08:28:11.024]   - Field: ‘state’
[08:28:11.024] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.024] - Launch lazy future ...
[08:28:11.024] Packages needed by the future expression (n = 0): <none>
[08:28:11.024] Packages needed by future strategies (n = 0): <none>
[08:28:11.025] {
[08:28:11.025]     {
[08:28:11.025]         {
[08:28:11.025]             ...future.startTime <- base::Sys.time()
[08:28:11.025]             {
[08:28:11.025]                 {
[08:28:11.025]                   {
[08:28:11.025]                     {
[08:28:11.025]                       base::local({
[08:28:11.025]                         has_future <- base::requireNamespace("future", 
[08:28:11.025]                           quietly = TRUE)
[08:28:11.025]                         if (has_future) {
[08:28:11.025]                           ns <- base::getNamespace("future")
[08:28:11.025]                           version <- ns[[".package"]][["version"]]
[08:28:11.025]                           if (is.null(version)) 
[08:28:11.025]                             version <- utils::packageVersion("future")
[08:28:11.025]                         }
[08:28:11.025]                         else {
[08:28:11.025]                           version <- NULL
[08:28:11.025]                         }
[08:28:11.025]                         if (!has_future || version < "1.8.0") {
[08:28:11.025]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.025]                             "", base::R.version$version.string), 
[08:28:11.025]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.025]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.025]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.025]                               "release", "version")], collapse = " "), 
[08:28:11.025]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.025]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.025]                             info)
[08:28:11.025]                           info <- base::paste(info, collapse = "; ")
[08:28:11.025]                           if (!has_future) {
[08:28:11.025]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.025]                               info)
[08:28:11.025]                           }
[08:28:11.025]                           else {
[08:28:11.025]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.025]                               info, version)
[08:28:11.025]                           }
[08:28:11.025]                           base::stop(msg)
[08:28:11.025]                         }
[08:28:11.025]                       })
[08:28:11.025]                     }
[08:28:11.025]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.025]                     base::options(mc.cores = 1L)
[08:28:11.025]                   }
[08:28:11.025]                   ...future.strategy.old <- future::plan("list")
[08:28:11.025]                   options(future.plan = NULL)
[08:28:11.025]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.025]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.025]                 }
[08:28:11.025]                 ...future.workdir <- getwd()
[08:28:11.025]             }
[08:28:11.025]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.025]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.025]         }
[08:28:11.025]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.025]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.025]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.025]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.025]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.025]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.025]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.025]             base::names(...future.oldOptions))
[08:28:11.025]     }
[08:28:11.025]     if (FALSE) {
[08:28:11.025]     }
[08:28:11.025]     else {
[08:28:11.025]         if (TRUE) {
[08:28:11.025]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.025]                 open = "w")
[08:28:11.025]         }
[08:28:11.025]         else {
[08:28:11.025]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.025]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.025]         }
[08:28:11.025]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.025]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.025]             base::sink(type = "output", split = FALSE)
[08:28:11.025]             base::close(...future.stdout)
[08:28:11.025]         }, add = TRUE)
[08:28:11.025]     }
[08:28:11.025]     ...future.frame <- base::sys.nframe()
[08:28:11.025]     ...future.conditions <- base::list()
[08:28:11.025]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.025]     if (FALSE) {
[08:28:11.025]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.025]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.025]     }
[08:28:11.025]     ...future.result <- base::tryCatch({
[08:28:11.025]         base::withCallingHandlers({
[08:28:11.025]             ...future.value <- base::withVisible(base::local({
[08:28:11.025]                 ...future.makeSendCondition <- base::local({
[08:28:11.025]                   sendCondition <- NULL
[08:28:11.025]                   function(frame = 1L) {
[08:28:11.025]                     if (is.function(sendCondition)) 
[08:28:11.025]                       return(sendCondition)
[08:28:11.025]                     ns <- getNamespace("parallel")
[08:28:11.025]                     if (exists("sendData", mode = "function", 
[08:28:11.025]                       envir = ns)) {
[08:28:11.025]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.025]                         envir = ns)
[08:28:11.025]                       envir <- sys.frame(frame)
[08:28:11.025]                       master <- NULL
[08:28:11.025]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.025]                         !identical(envir, emptyenv())) {
[08:28:11.025]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.025]                           inherits = FALSE)) {
[08:28:11.025]                           master <- get("master", mode = "list", 
[08:28:11.025]                             envir = envir, inherits = FALSE)
[08:28:11.025]                           if (inherits(master, c("SOCKnode", 
[08:28:11.025]                             "SOCK0node"))) {
[08:28:11.025]                             sendCondition <<- function(cond) {
[08:28:11.025]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.025]                                 success = TRUE)
[08:28:11.025]                               parallel_sendData(master, data)
[08:28:11.025]                             }
[08:28:11.025]                             return(sendCondition)
[08:28:11.025]                           }
[08:28:11.025]                         }
[08:28:11.025]                         frame <- frame + 1L
[08:28:11.025]                         envir <- sys.frame(frame)
[08:28:11.025]                       }
[08:28:11.025]                     }
[08:28:11.025]                     sendCondition <<- function(cond) NULL
[08:28:11.025]                   }
[08:28:11.025]                 })
[08:28:11.025]                 withCallingHandlers({
[08:28:11.025]                   {
[08:28:11.025]                     x$a <- 1
[08:28:11.025]                     x
[08:28:11.025]                   }
[08:28:11.025]                 }, immediateCondition = function(cond) {
[08:28:11.025]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.025]                   sendCondition(cond)
[08:28:11.025]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.025]                   {
[08:28:11.025]                     inherits <- base::inherits
[08:28:11.025]                     invokeRestart <- base::invokeRestart
[08:28:11.025]                     is.null <- base::is.null
[08:28:11.025]                     muffled <- FALSE
[08:28:11.025]                     if (inherits(cond, "message")) {
[08:28:11.025]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.025]                       if (muffled) 
[08:28:11.025]                         invokeRestart("muffleMessage")
[08:28:11.025]                     }
[08:28:11.025]                     else if (inherits(cond, "warning")) {
[08:28:11.025]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.025]                       if (muffled) 
[08:28:11.025]                         invokeRestart("muffleWarning")
[08:28:11.025]                     }
[08:28:11.025]                     else if (inherits(cond, "condition")) {
[08:28:11.025]                       if (!is.null(pattern)) {
[08:28:11.025]                         computeRestarts <- base::computeRestarts
[08:28:11.025]                         grepl <- base::grepl
[08:28:11.025]                         restarts <- computeRestarts(cond)
[08:28:11.025]                         for (restart in restarts) {
[08:28:11.025]                           name <- restart$name
[08:28:11.025]                           if (is.null(name)) 
[08:28:11.025]                             next
[08:28:11.025]                           if (!grepl(pattern, name)) 
[08:28:11.025]                             next
[08:28:11.025]                           invokeRestart(restart)
[08:28:11.025]                           muffled <- TRUE
[08:28:11.025]                           break
[08:28:11.025]                         }
[08:28:11.025]                       }
[08:28:11.025]                     }
[08:28:11.025]                     invisible(muffled)
[08:28:11.025]                   }
[08:28:11.025]                   muffleCondition(cond)
[08:28:11.025]                 })
[08:28:11.025]             }))
[08:28:11.025]             future::FutureResult(value = ...future.value$value, 
[08:28:11.025]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.025]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.025]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.025]                     ...future.globalenv.names))
[08:28:11.025]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.025]         }, condition = base::local({
[08:28:11.025]             c <- base::c
[08:28:11.025]             inherits <- base::inherits
[08:28:11.025]             invokeRestart <- base::invokeRestart
[08:28:11.025]             length <- base::length
[08:28:11.025]             list <- base::list
[08:28:11.025]             seq.int <- base::seq.int
[08:28:11.025]             signalCondition <- base::signalCondition
[08:28:11.025]             sys.calls <- base::sys.calls
[08:28:11.025]             `[[` <- base::`[[`
[08:28:11.025]             `+` <- base::`+`
[08:28:11.025]             `<<-` <- base::`<<-`
[08:28:11.025]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.025]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.025]                   3L)]
[08:28:11.025]             }
[08:28:11.025]             function(cond) {
[08:28:11.025]                 is_error <- inherits(cond, "error")
[08:28:11.025]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.025]                   NULL)
[08:28:11.025]                 if (is_error) {
[08:28:11.025]                   sessionInformation <- function() {
[08:28:11.025]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.025]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.025]                       search = base::search(), system = base::Sys.info())
[08:28:11.025]                   }
[08:28:11.025]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.025]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.025]                     cond$call), session = sessionInformation(), 
[08:28:11.025]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.025]                   signalCondition(cond)
[08:28:11.025]                 }
[08:28:11.025]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.025]                 "immediateCondition"))) {
[08:28:11.025]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.025]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.025]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.025]                   if (TRUE && !signal) {
[08:28:11.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.025]                     {
[08:28:11.025]                       inherits <- base::inherits
[08:28:11.025]                       invokeRestart <- base::invokeRestart
[08:28:11.025]                       is.null <- base::is.null
[08:28:11.025]                       muffled <- FALSE
[08:28:11.025]                       if (inherits(cond, "message")) {
[08:28:11.025]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.025]                         if (muffled) 
[08:28:11.025]                           invokeRestart("muffleMessage")
[08:28:11.025]                       }
[08:28:11.025]                       else if (inherits(cond, "warning")) {
[08:28:11.025]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.025]                         if (muffled) 
[08:28:11.025]                           invokeRestart("muffleWarning")
[08:28:11.025]                       }
[08:28:11.025]                       else if (inherits(cond, "condition")) {
[08:28:11.025]                         if (!is.null(pattern)) {
[08:28:11.025]                           computeRestarts <- base::computeRestarts
[08:28:11.025]                           grepl <- base::grepl
[08:28:11.025]                           restarts <- computeRestarts(cond)
[08:28:11.025]                           for (restart in restarts) {
[08:28:11.025]                             name <- restart$name
[08:28:11.025]                             if (is.null(name)) 
[08:28:11.025]                               next
[08:28:11.025]                             if (!grepl(pattern, name)) 
[08:28:11.025]                               next
[08:28:11.025]                             invokeRestart(restart)
[08:28:11.025]                             muffled <- TRUE
[08:28:11.025]                             break
[08:28:11.025]                           }
[08:28:11.025]                         }
[08:28:11.025]                       }
[08:28:11.025]                       invisible(muffled)
[08:28:11.025]                     }
[08:28:11.025]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.025]                   }
[08:28:11.025]                 }
[08:28:11.025]                 else {
[08:28:11.025]                   if (TRUE) {
[08:28:11.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.025]                     {
[08:28:11.025]                       inherits <- base::inherits
[08:28:11.025]                       invokeRestart <- base::invokeRestart
[08:28:11.025]                       is.null <- base::is.null
[08:28:11.025]                       muffled <- FALSE
[08:28:11.025]                       if (inherits(cond, "message")) {
[08:28:11.025]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.025]                         if (muffled) 
[08:28:11.025]                           invokeRestart("muffleMessage")
[08:28:11.025]                       }
[08:28:11.025]                       else if (inherits(cond, "warning")) {
[08:28:11.025]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.025]                         if (muffled) 
[08:28:11.025]                           invokeRestart("muffleWarning")
[08:28:11.025]                       }
[08:28:11.025]                       else if (inherits(cond, "condition")) {
[08:28:11.025]                         if (!is.null(pattern)) {
[08:28:11.025]                           computeRestarts <- base::computeRestarts
[08:28:11.025]                           grepl <- base::grepl
[08:28:11.025]                           restarts <- computeRestarts(cond)
[08:28:11.025]                           for (restart in restarts) {
[08:28:11.025]                             name <- restart$name
[08:28:11.025]                             if (is.null(name)) 
[08:28:11.025]                               next
[08:28:11.025]                             if (!grepl(pattern, name)) 
[08:28:11.025]                               next
[08:28:11.025]                             invokeRestart(restart)
[08:28:11.025]                             muffled <- TRUE
[08:28:11.025]                             break
[08:28:11.025]                           }
[08:28:11.025]                         }
[08:28:11.025]                       }
[08:28:11.025]                       invisible(muffled)
[08:28:11.025]                     }
[08:28:11.025]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.025]                   }
[08:28:11.025]                 }
[08:28:11.025]             }
[08:28:11.025]         }))
[08:28:11.025]     }, error = function(ex) {
[08:28:11.025]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.025]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.025]                 ...future.rng), started = ...future.startTime, 
[08:28:11.025]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.025]             version = "1.8"), class = "FutureResult")
[08:28:11.025]     }, finally = {
[08:28:11.025]         if (!identical(...future.workdir, getwd())) 
[08:28:11.025]             setwd(...future.workdir)
[08:28:11.025]         {
[08:28:11.025]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.025]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.025]             }
[08:28:11.025]             base::options(...future.oldOptions)
[08:28:11.025]             if (.Platform$OS.type == "windows") {
[08:28:11.025]                 old_names <- names(...future.oldEnvVars)
[08:28:11.025]                 envs <- base::Sys.getenv()
[08:28:11.025]                 names <- names(envs)
[08:28:11.025]                 common <- intersect(names, old_names)
[08:28:11.025]                 added <- setdiff(names, old_names)
[08:28:11.025]                 removed <- setdiff(old_names, names)
[08:28:11.025]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.025]                   envs[common]]
[08:28:11.025]                 NAMES <- toupper(changed)
[08:28:11.025]                 args <- list()
[08:28:11.025]                 for (kk in seq_along(NAMES)) {
[08:28:11.025]                   name <- changed[[kk]]
[08:28:11.025]                   NAME <- NAMES[[kk]]
[08:28:11.025]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.025]                     next
[08:28:11.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.025]                 }
[08:28:11.025]                 NAMES <- toupper(added)
[08:28:11.025]                 for (kk in seq_along(NAMES)) {
[08:28:11.025]                   name <- added[[kk]]
[08:28:11.025]                   NAME <- NAMES[[kk]]
[08:28:11.025]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.025]                     next
[08:28:11.025]                   args[[name]] <- ""
[08:28:11.025]                 }
[08:28:11.025]                 NAMES <- toupper(removed)
[08:28:11.025]                 for (kk in seq_along(NAMES)) {
[08:28:11.025]                   name <- removed[[kk]]
[08:28:11.025]                   NAME <- NAMES[[kk]]
[08:28:11.025]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.025]                     next
[08:28:11.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.025]                 }
[08:28:11.025]                 if (length(args) > 0) 
[08:28:11.025]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.025]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.025]             }
[08:28:11.025]             else {
[08:28:11.025]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.025]             }
[08:28:11.025]             {
[08:28:11.025]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.025]                   0L) {
[08:28:11.025]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.025]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.025]                   base::options(opts)
[08:28:11.025]                 }
[08:28:11.025]                 {
[08:28:11.025]                   {
[08:28:11.025]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.025]                     NULL
[08:28:11.025]                   }
[08:28:11.025]                   options(future.plan = NULL)
[08:28:11.025]                   if (is.na(NA_character_)) 
[08:28:11.025]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.025]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.025]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.025]                     .init = FALSE)
[08:28:11.025]                 }
[08:28:11.025]             }
[08:28:11.025]         }
[08:28:11.025]     })
[08:28:11.025]     if (TRUE) {
[08:28:11.025]         base::sink(type = "output", split = FALSE)
[08:28:11.025]         if (TRUE) {
[08:28:11.025]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.025]         }
[08:28:11.025]         else {
[08:28:11.025]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.025]         }
[08:28:11.025]         base::close(...future.stdout)
[08:28:11.025]         ...future.stdout <- NULL
[08:28:11.025]     }
[08:28:11.025]     ...future.result$conditions <- ...future.conditions
[08:28:11.025]     ...future.result$finished <- base::Sys.time()
[08:28:11.025]     ...future.result
[08:28:11.025] }
[08:28:11.028] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:11.028] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:11.029] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:11.029] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:11.029] MultisessionFuture started
[08:28:11.029] - Launch lazy future ... done
[08:28:11.030] run() for ‘MultisessionFuture’ ... done
[08:28:11.030] result() for ClusterFuture ...
[08:28:11.030] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.030] - Validating connection of MultisessionFuture
[08:28:11.071] - received message: FutureResult
[08:28:11.071] - Received FutureResult
[08:28:11.072] - Erased future from FutureRegistry
[08:28:11.072] result() for ClusterFuture ...
[08:28:11.072] - result already collected: FutureResult
[08:28:11.072] result() for ClusterFuture ... done
[08:28:11.072] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.072] result() for ClusterFuture ... done
[08:28:11.072] result() for ClusterFuture ...
[08:28:11.072] - result already collected: FutureResult
[08:28:11.072] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.073] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.073] Searching for globals...
[08:28:11.079] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:28:11.079] Searching for globals ... DONE
[08:28:11.079] Resolving globals: TRUE
[08:28:11.079] Resolving any globals that are futures ...
[08:28:11.079] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:28:11.079] Resolving any globals that are futures ... DONE
[08:28:11.080] 
[08:28:11.080] 
[08:28:11.080] getGlobalsAndPackages() ... DONE
[08:28:11.080] run() for ‘Future’ ...
[08:28:11.080] - state: ‘created’
[08:28:11.080] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.094] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.094] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.094]   - Field: ‘node’
[08:28:11.094]   - Field: ‘label’
[08:28:11.094]   - Field: ‘local’
[08:28:11.094]   - Field: ‘owner’
[08:28:11.095]   - Field: ‘envir’
[08:28:11.095]   - Field: ‘workers’
[08:28:11.095]   - Field: ‘packages’
[08:28:11.095]   - Field: ‘gc’
[08:28:11.095]   - Field: ‘conditions’
[08:28:11.095]   - Field: ‘persistent’
[08:28:11.095]   - Field: ‘expr’
[08:28:11.095]   - Field: ‘uuid’
[08:28:11.095]   - Field: ‘seed’
[08:28:11.095]   - Field: ‘version’
[08:28:11.095]   - Field: ‘result’
[08:28:11.095]   - Field: ‘asynchronous’
[08:28:11.096]   - Field: ‘calls’
[08:28:11.096]   - Field: ‘globals’
[08:28:11.096]   - Field: ‘stdout’
[08:28:11.096]   - Field: ‘earlySignal’
[08:28:11.096]   - Field: ‘lazy’
[08:28:11.096]   - Field: ‘state’
[08:28:11.096] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.096] - Launch lazy future ...
[08:28:11.096] Packages needed by the future expression (n = 0): <none>
[08:28:11.096] Packages needed by future strategies (n = 0): <none>
[08:28:11.097] {
[08:28:11.097]     {
[08:28:11.097]         {
[08:28:11.097]             ...future.startTime <- base::Sys.time()
[08:28:11.097]             {
[08:28:11.097]                 {
[08:28:11.097]                   {
[08:28:11.097]                     {
[08:28:11.097]                       base::local({
[08:28:11.097]                         has_future <- base::requireNamespace("future", 
[08:28:11.097]                           quietly = TRUE)
[08:28:11.097]                         if (has_future) {
[08:28:11.097]                           ns <- base::getNamespace("future")
[08:28:11.097]                           version <- ns[[".package"]][["version"]]
[08:28:11.097]                           if (is.null(version)) 
[08:28:11.097]                             version <- utils::packageVersion("future")
[08:28:11.097]                         }
[08:28:11.097]                         else {
[08:28:11.097]                           version <- NULL
[08:28:11.097]                         }
[08:28:11.097]                         if (!has_future || version < "1.8.0") {
[08:28:11.097]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.097]                             "", base::R.version$version.string), 
[08:28:11.097]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.097]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.097]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.097]                               "release", "version")], collapse = " "), 
[08:28:11.097]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.097]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.097]                             info)
[08:28:11.097]                           info <- base::paste(info, collapse = "; ")
[08:28:11.097]                           if (!has_future) {
[08:28:11.097]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.097]                               info)
[08:28:11.097]                           }
[08:28:11.097]                           else {
[08:28:11.097]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.097]                               info, version)
[08:28:11.097]                           }
[08:28:11.097]                           base::stop(msg)
[08:28:11.097]                         }
[08:28:11.097]                       })
[08:28:11.097]                     }
[08:28:11.097]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.097]                     base::options(mc.cores = 1L)
[08:28:11.097]                   }
[08:28:11.097]                   ...future.strategy.old <- future::plan("list")
[08:28:11.097]                   options(future.plan = NULL)
[08:28:11.097]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.097]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.097]                 }
[08:28:11.097]                 ...future.workdir <- getwd()
[08:28:11.097]             }
[08:28:11.097]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.097]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.097]         }
[08:28:11.097]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.097]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.097]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.097]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.097]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.097]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.097]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.097]             base::names(...future.oldOptions))
[08:28:11.097]     }
[08:28:11.097]     if (FALSE) {
[08:28:11.097]     }
[08:28:11.097]     else {
[08:28:11.097]         if (TRUE) {
[08:28:11.097]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.097]                 open = "w")
[08:28:11.097]         }
[08:28:11.097]         else {
[08:28:11.097]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.097]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.097]         }
[08:28:11.097]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.097]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.097]             base::sink(type = "output", split = FALSE)
[08:28:11.097]             base::close(...future.stdout)
[08:28:11.097]         }, add = TRUE)
[08:28:11.097]     }
[08:28:11.097]     ...future.frame <- base::sys.nframe()
[08:28:11.097]     ...future.conditions <- base::list()
[08:28:11.097]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.097]     if (FALSE) {
[08:28:11.097]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.097]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.097]     }
[08:28:11.097]     ...future.result <- base::tryCatch({
[08:28:11.097]         base::withCallingHandlers({
[08:28:11.097]             ...future.value <- base::withVisible(base::local({
[08:28:11.097]                 ...future.makeSendCondition <- base::local({
[08:28:11.097]                   sendCondition <- NULL
[08:28:11.097]                   function(frame = 1L) {
[08:28:11.097]                     if (is.function(sendCondition)) 
[08:28:11.097]                       return(sendCondition)
[08:28:11.097]                     ns <- getNamespace("parallel")
[08:28:11.097]                     if (exists("sendData", mode = "function", 
[08:28:11.097]                       envir = ns)) {
[08:28:11.097]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.097]                         envir = ns)
[08:28:11.097]                       envir <- sys.frame(frame)
[08:28:11.097]                       master <- NULL
[08:28:11.097]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.097]                         !identical(envir, emptyenv())) {
[08:28:11.097]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.097]                           inherits = FALSE)) {
[08:28:11.097]                           master <- get("master", mode = "list", 
[08:28:11.097]                             envir = envir, inherits = FALSE)
[08:28:11.097]                           if (inherits(master, c("SOCKnode", 
[08:28:11.097]                             "SOCK0node"))) {
[08:28:11.097]                             sendCondition <<- function(cond) {
[08:28:11.097]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.097]                                 success = TRUE)
[08:28:11.097]                               parallel_sendData(master, data)
[08:28:11.097]                             }
[08:28:11.097]                             return(sendCondition)
[08:28:11.097]                           }
[08:28:11.097]                         }
[08:28:11.097]                         frame <- frame + 1L
[08:28:11.097]                         envir <- sys.frame(frame)
[08:28:11.097]                       }
[08:28:11.097]                     }
[08:28:11.097]                     sendCondition <<- function(cond) NULL
[08:28:11.097]                   }
[08:28:11.097]                 })
[08:28:11.097]                 withCallingHandlers({
[08:28:11.097]                   {
[08:28:11.097]                     x <- list(b = 2)
[08:28:11.097]                     x$a <- 1
[08:28:11.097]                     x
[08:28:11.097]                   }
[08:28:11.097]                 }, immediateCondition = function(cond) {
[08:28:11.097]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.097]                   sendCondition(cond)
[08:28:11.097]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.097]                   {
[08:28:11.097]                     inherits <- base::inherits
[08:28:11.097]                     invokeRestart <- base::invokeRestart
[08:28:11.097]                     is.null <- base::is.null
[08:28:11.097]                     muffled <- FALSE
[08:28:11.097]                     if (inherits(cond, "message")) {
[08:28:11.097]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.097]                       if (muffled) 
[08:28:11.097]                         invokeRestart("muffleMessage")
[08:28:11.097]                     }
[08:28:11.097]                     else if (inherits(cond, "warning")) {
[08:28:11.097]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.097]                       if (muffled) 
[08:28:11.097]                         invokeRestart("muffleWarning")
[08:28:11.097]                     }
[08:28:11.097]                     else if (inherits(cond, "condition")) {
[08:28:11.097]                       if (!is.null(pattern)) {
[08:28:11.097]                         computeRestarts <- base::computeRestarts
[08:28:11.097]                         grepl <- base::grepl
[08:28:11.097]                         restarts <- computeRestarts(cond)
[08:28:11.097]                         for (restart in restarts) {
[08:28:11.097]                           name <- restart$name
[08:28:11.097]                           if (is.null(name)) 
[08:28:11.097]                             next
[08:28:11.097]                           if (!grepl(pattern, name)) 
[08:28:11.097]                             next
[08:28:11.097]                           invokeRestart(restart)
[08:28:11.097]                           muffled <- TRUE
[08:28:11.097]                           break
[08:28:11.097]                         }
[08:28:11.097]                       }
[08:28:11.097]                     }
[08:28:11.097]                     invisible(muffled)
[08:28:11.097]                   }
[08:28:11.097]                   muffleCondition(cond)
[08:28:11.097]                 })
[08:28:11.097]             }))
[08:28:11.097]             future::FutureResult(value = ...future.value$value, 
[08:28:11.097]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.097]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.097]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.097]                     ...future.globalenv.names))
[08:28:11.097]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.097]         }, condition = base::local({
[08:28:11.097]             c <- base::c
[08:28:11.097]             inherits <- base::inherits
[08:28:11.097]             invokeRestart <- base::invokeRestart
[08:28:11.097]             length <- base::length
[08:28:11.097]             list <- base::list
[08:28:11.097]             seq.int <- base::seq.int
[08:28:11.097]             signalCondition <- base::signalCondition
[08:28:11.097]             sys.calls <- base::sys.calls
[08:28:11.097]             `[[` <- base::`[[`
[08:28:11.097]             `+` <- base::`+`
[08:28:11.097]             `<<-` <- base::`<<-`
[08:28:11.097]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.097]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.097]                   3L)]
[08:28:11.097]             }
[08:28:11.097]             function(cond) {
[08:28:11.097]                 is_error <- inherits(cond, "error")
[08:28:11.097]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.097]                   NULL)
[08:28:11.097]                 if (is_error) {
[08:28:11.097]                   sessionInformation <- function() {
[08:28:11.097]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.097]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.097]                       search = base::search(), system = base::Sys.info())
[08:28:11.097]                   }
[08:28:11.097]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.097]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.097]                     cond$call), session = sessionInformation(), 
[08:28:11.097]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.097]                   signalCondition(cond)
[08:28:11.097]                 }
[08:28:11.097]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.097]                 "immediateCondition"))) {
[08:28:11.097]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.097]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.097]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.097]                   if (TRUE && !signal) {
[08:28:11.097]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.097]                     {
[08:28:11.097]                       inherits <- base::inherits
[08:28:11.097]                       invokeRestart <- base::invokeRestart
[08:28:11.097]                       is.null <- base::is.null
[08:28:11.097]                       muffled <- FALSE
[08:28:11.097]                       if (inherits(cond, "message")) {
[08:28:11.097]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.097]                         if (muffled) 
[08:28:11.097]                           invokeRestart("muffleMessage")
[08:28:11.097]                       }
[08:28:11.097]                       else if (inherits(cond, "warning")) {
[08:28:11.097]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.097]                         if (muffled) 
[08:28:11.097]                           invokeRestart("muffleWarning")
[08:28:11.097]                       }
[08:28:11.097]                       else if (inherits(cond, "condition")) {
[08:28:11.097]                         if (!is.null(pattern)) {
[08:28:11.097]                           computeRestarts <- base::computeRestarts
[08:28:11.097]                           grepl <- base::grepl
[08:28:11.097]                           restarts <- computeRestarts(cond)
[08:28:11.097]                           for (restart in restarts) {
[08:28:11.097]                             name <- restart$name
[08:28:11.097]                             if (is.null(name)) 
[08:28:11.097]                               next
[08:28:11.097]                             if (!grepl(pattern, name)) 
[08:28:11.097]                               next
[08:28:11.097]                             invokeRestart(restart)
[08:28:11.097]                             muffled <- TRUE
[08:28:11.097]                             break
[08:28:11.097]                           }
[08:28:11.097]                         }
[08:28:11.097]                       }
[08:28:11.097]                       invisible(muffled)
[08:28:11.097]                     }
[08:28:11.097]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.097]                   }
[08:28:11.097]                 }
[08:28:11.097]                 else {
[08:28:11.097]                   if (TRUE) {
[08:28:11.097]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.097]                     {
[08:28:11.097]                       inherits <- base::inherits
[08:28:11.097]                       invokeRestart <- base::invokeRestart
[08:28:11.097]                       is.null <- base::is.null
[08:28:11.097]                       muffled <- FALSE
[08:28:11.097]                       if (inherits(cond, "message")) {
[08:28:11.097]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.097]                         if (muffled) 
[08:28:11.097]                           invokeRestart("muffleMessage")
[08:28:11.097]                       }
[08:28:11.097]                       else if (inherits(cond, "warning")) {
[08:28:11.097]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.097]                         if (muffled) 
[08:28:11.097]                           invokeRestart("muffleWarning")
[08:28:11.097]                       }
[08:28:11.097]                       else if (inherits(cond, "condition")) {
[08:28:11.097]                         if (!is.null(pattern)) {
[08:28:11.097]                           computeRestarts <- base::computeRestarts
[08:28:11.097]                           grepl <- base::grepl
[08:28:11.097]                           restarts <- computeRestarts(cond)
[08:28:11.097]                           for (restart in restarts) {
[08:28:11.097]                             name <- restart$name
[08:28:11.097]                             if (is.null(name)) 
[08:28:11.097]                               next
[08:28:11.097]                             if (!grepl(pattern, name)) 
[08:28:11.097]                               next
[08:28:11.097]                             invokeRestart(restart)
[08:28:11.097]                             muffled <- TRUE
[08:28:11.097]                             break
[08:28:11.097]                           }
[08:28:11.097]                         }
[08:28:11.097]                       }
[08:28:11.097]                       invisible(muffled)
[08:28:11.097]                     }
[08:28:11.097]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.097]                   }
[08:28:11.097]                 }
[08:28:11.097]             }
[08:28:11.097]         }))
[08:28:11.097]     }, error = function(ex) {
[08:28:11.097]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.097]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.097]                 ...future.rng), started = ...future.startTime, 
[08:28:11.097]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.097]             version = "1.8"), class = "FutureResult")
[08:28:11.097]     }, finally = {
[08:28:11.097]         if (!identical(...future.workdir, getwd())) 
[08:28:11.097]             setwd(...future.workdir)
[08:28:11.097]         {
[08:28:11.097]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.097]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.097]             }
[08:28:11.097]             base::options(...future.oldOptions)
[08:28:11.097]             if (.Platform$OS.type == "windows") {
[08:28:11.097]                 old_names <- names(...future.oldEnvVars)
[08:28:11.097]                 envs <- base::Sys.getenv()
[08:28:11.097]                 names <- names(envs)
[08:28:11.097]                 common <- intersect(names, old_names)
[08:28:11.097]                 added <- setdiff(names, old_names)
[08:28:11.097]                 removed <- setdiff(old_names, names)
[08:28:11.097]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.097]                   envs[common]]
[08:28:11.097]                 NAMES <- toupper(changed)
[08:28:11.097]                 args <- list()
[08:28:11.097]                 for (kk in seq_along(NAMES)) {
[08:28:11.097]                   name <- changed[[kk]]
[08:28:11.097]                   NAME <- NAMES[[kk]]
[08:28:11.097]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.097]                     next
[08:28:11.097]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.097]                 }
[08:28:11.097]                 NAMES <- toupper(added)
[08:28:11.097]                 for (kk in seq_along(NAMES)) {
[08:28:11.097]                   name <- added[[kk]]
[08:28:11.097]                   NAME <- NAMES[[kk]]
[08:28:11.097]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.097]                     next
[08:28:11.097]                   args[[name]] <- ""
[08:28:11.097]                 }
[08:28:11.097]                 NAMES <- toupper(removed)
[08:28:11.097]                 for (kk in seq_along(NAMES)) {
[08:28:11.097]                   name <- removed[[kk]]
[08:28:11.097]                   NAME <- NAMES[[kk]]
[08:28:11.097]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.097]                     next
[08:28:11.097]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.097]                 }
[08:28:11.097]                 if (length(args) > 0) 
[08:28:11.097]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.097]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.097]             }
[08:28:11.097]             else {
[08:28:11.097]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.097]             }
[08:28:11.097]             {
[08:28:11.097]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.097]                   0L) {
[08:28:11.097]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.097]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.097]                   base::options(opts)
[08:28:11.097]                 }
[08:28:11.097]                 {
[08:28:11.097]                   {
[08:28:11.097]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.097]                     NULL
[08:28:11.097]                   }
[08:28:11.097]                   options(future.plan = NULL)
[08:28:11.097]                   if (is.na(NA_character_)) 
[08:28:11.097]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.097]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.097]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.097]                     .init = FALSE)
[08:28:11.097]                 }
[08:28:11.097]             }
[08:28:11.097]         }
[08:28:11.097]     })
[08:28:11.097]     if (TRUE) {
[08:28:11.097]         base::sink(type = "output", split = FALSE)
[08:28:11.097]         if (TRUE) {
[08:28:11.097]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.097]         }
[08:28:11.097]         else {
[08:28:11.097]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.097]         }
[08:28:11.097]         base::close(...future.stdout)
[08:28:11.097]         ...future.stdout <- NULL
[08:28:11.097]     }
[08:28:11.097]     ...future.result$conditions <- ...future.conditions
[08:28:11.097]     ...future.result$finished <- base::Sys.time()
[08:28:11.097]     ...future.result
[08:28:11.097] }
[08:28:11.100] MultisessionFuture started
[08:28:11.100] - Launch lazy future ... done
[08:28:11.100] run() for ‘MultisessionFuture’ ... done
[08:28:11.100] result() for ClusterFuture ...
[08:28:11.100] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.100] - Validating connection of MultisessionFuture
[08:28:11.142] - received message: FutureResult
[08:28:11.142] - Received FutureResult
[08:28:11.142] - Erased future from FutureRegistry
[08:28:11.142] result() for ClusterFuture ...
[08:28:11.142] - result already collected: FutureResult
[08:28:11.143] result() for ClusterFuture ... done
[08:28:11.143] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.143] result() for ClusterFuture ... done
[08:28:11.143] result() for ClusterFuture ...
[08:28:11.143] - result already collected: FutureResult
[08:28:11.143] result() for ClusterFuture ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.143] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.143] Searching for globals...
[08:28:11.145] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:11.145] Searching for globals ... DONE
[08:28:11.146] Resolving globals: TRUE
[08:28:11.146] Resolving any globals that are futures ...
[08:28:11.146] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:11.146] Resolving any globals that are futures ... DONE
[08:28:11.146] Resolving futures part of globals (recursively) ...
[08:28:11.146] resolve() on list ...
[08:28:11.146]  recursive: 99
[08:28:11.147]  length: 1
[08:28:11.147]  elements: ‘x’
[08:28:11.147]  length: 0 (resolved future 1)
[08:28:11.147] resolve() on list ... DONE
[08:28:11.147] - globals: [1] ‘x’
[08:28:11.147] Resolving futures part of globals (recursively) ... DONE
[08:28:11.147] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:11.147] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:11.148] - globals: [1] ‘x’
[08:28:11.148] 
[08:28:11.148] getGlobalsAndPackages() ... DONE
[08:28:11.148] run() for ‘Future’ ...
[08:28:11.148] - state: ‘created’
[08:28:11.148] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.162] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.162] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.162]   - Field: ‘node’
[08:28:11.162]   - Field: ‘label’
[08:28:11.162]   - Field: ‘local’
[08:28:11.162]   - Field: ‘owner’
[08:28:11.163]   - Field: ‘envir’
[08:28:11.163]   - Field: ‘workers’
[08:28:11.163]   - Field: ‘packages’
[08:28:11.163]   - Field: ‘gc’
[08:28:11.163]   - Field: ‘conditions’
[08:28:11.163]   - Field: ‘persistent’
[08:28:11.163]   - Field: ‘expr’
[08:28:11.163]   - Field: ‘uuid’
[08:28:11.163]   - Field: ‘seed’
[08:28:11.163]   - Field: ‘version’
[08:28:11.163]   - Field: ‘result’
[08:28:11.163]   - Field: ‘asynchronous’
[08:28:11.164]   - Field: ‘calls’
[08:28:11.164]   - Field: ‘globals’
[08:28:11.164]   - Field: ‘stdout’
[08:28:11.164]   - Field: ‘earlySignal’
[08:28:11.164]   - Field: ‘lazy’
[08:28:11.164]   - Field: ‘state’
[08:28:11.164] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.164] - Launch lazy future ...
[08:28:11.164] Packages needed by the future expression (n = 0): <none>
[08:28:11.165] Packages needed by future strategies (n = 0): <none>
[08:28:11.165] {
[08:28:11.165]     {
[08:28:11.165]         {
[08:28:11.165]             ...future.startTime <- base::Sys.time()
[08:28:11.165]             {
[08:28:11.165]                 {
[08:28:11.165]                   {
[08:28:11.165]                     {
[08:28:11.165]                       base::local({
[08:28:11.165]                         has_future <- base::requireNamespace("future", 
[08:28:11.165]                           quietly = TRUE)
[08:28:11.165]                         if (has_future) {
[08:28:11.165]                           ns <- base::getNamespace("future")
[08:28:11.165]                           version <- ns[[".package"]][["version"]]
[08:28:11.165]                           if (is.null(version)) 
[08:28:11.165]                             version <- utils::packageVersion("future")
[08:28:11.165]                         }
[08:28:11.165]                         else {
[08:28:11.165]                           version <- NULL
[08:28:11.165]                         }
[08:28:11.165]                         if (!has_future || version < "1.8.0") {
[08:28:11.165]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.165]                             "", base::R.version$version.string), 
[08:28:11.165]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.165]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.165]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.165]                               "release", "version")], collapse = " "), 
[08:28:11.165]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.165]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.165]                             info)
[08:28:11.165]                           info <- base::paste(info, collapse = "; ")
[08:28:11.165]                           if (!has_future) {
[08:28:11.165]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.165]                               info)
[08:28:11.165]                           }
[08:28:11.165]                           else {
[08:28:11.165]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.165]                               info, version)
[08:28:11.165]                           }
[08:28:11.165]                           base::stop(msg)
[08:28:11.165]                         }
[08:28:11.165]                       })
[08:28:11.165]                     }
[08:28:11.165]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.165]                     base::options(mc.cores = 1L)
[08:28:11.165]                   }
[08:28:11.165]                   ...future.strategy.old <- future::plan("list")
[08:28:11.165]                   options(future.plan = NULL)
[08:28:11.165]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.165]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.165]                 }
[08:28:11.165]                 ...future.workdir <- getwd()
[08:28:11.165]             }
[08:28:11.165]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.165]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.165]         }
[08:28:11.165]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.165]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.165]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.165]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.165]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.165]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.165]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.165]             base::names(...future.oldOptions))
[08:28:11.165]     }
[08:28:11.165]     if (FALSE) {
[08:28:11.165]     }
[08:28:11.165]     else {
[08:28:11.165]         if (TRUE) {
[08:28:11.165]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.165]                 open = "w")
[08:28:11.165]         }
[08:28:11.165]         else {
[08:28:11.165]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.165]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.165]         }
[08:28:11.165]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.165]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.165]             base::sink(type = "output", split = FALSE)
[08:28:11.165]             base::close(...future.stdout)
[08:28:11.165]         }, add = TRUE)
[08:28:11.165]     }
[08:28:11.165]     ...future.frame <- base::sys.nframe()
[08:28:11.165]     ...future.conditions <- base::list()
[08:28:11.165]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.165]     if (FALSE) {
[08:28:11.165]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.165]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.165]     }
[08:28:11.165]     ...future.result <- base::tryCatch({
[08:28:11.165]         base::withCallingHandlers({
[08:28:11.165]             ...future.value <- base::withVisible(base::local({
[08:28:11.165]                 ...future.makeSendCondition <- base::local({
[08:28:11.165]                   sendCondition <- NULL
[08:28:11.165]                   function(frame = 1L) {
[08:28:11.165]                     if (is.function(sendCondition)) 
[08:28:11.165]                       return(sendCondition)
[08:28:11.165]                     ns <- getNamespace("parallel")
[08:28:11.165]                     if (exists("sendData", mode = "function", 
[08:28:11.165]                       envir = ns)) {
[08:28:11.165]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.165]                         envir = ns)
[08:28:11.165]                       envir <- sys.frame(frame)
[08:28:11.165]                       master <- NULL
[08:28:11.165]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.165]                         !identical(envir, emptyenv())) {
[08:28:11.165]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.165]                           inherits = FALSE)) {
[08:28:11.165]                           master <- get("master", mode = "list", 
[08:28:11.165]                             envir = envir, inherits = FALSE)
[08:28:11.165]                           if (inherits(master, c("SOCKnode", 
[08:28:11.165]                             "SOCK0node"))) {
[08:28:11.165]                             sendCondition <<- function(cond) {
[08:28:11.165]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.165]                                 success = TRUE)
[08:28:11.165]                               parallel_sendData(master, data)
[08:28:11.165]                             }
[08:28:11.165]                             return(sendCondition)
[08:28:11.165]                           }
[08:28:11.165]                         }
[08:28:11.165]                         frame <- frame + 1L
[08:28:11.165]                         envir <- sys.frame(frame)
[08:28:11.165]                       }
[08:28:11.165]                     }
[08:28:11.165]                     sendCondition <<- function(cond) NULL
[08:28:11.165]                   }
[08:28:11.165]                 })
[08:28:11.165]                 withCallingHandlers({
[08:28:11.165]                   {
[08:28:11.165]                     x[["a"]] <- 1
[08:28:11.165]                     x
[08:28:11.165]                   }
[08:28:11.165]                 }, immediateCondition = function(cond) {
[08:28:11.165]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.165]                   sendCondition(cond)
[08:28:11.165]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.165]                   {
[08:28:11.165]                     inherits <- base::inherits
[08:28:11.165]                     invokeRestart <- base::invokeRestart
[08:28:11.165]                     is.null <- base::is.null
[08:28:11.165]                     muffled <- FALSE
[08:28:11.165]                     if (inherits(cond, "message")) {
[08:28:11.165]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.165]                       if (muffled) 
[08:28:11.165]                         invokeRestart("muffleMessage")
[08:28:11.165]                     }
[08:28:11.165]                     else if (inherits(cond, "warning")) {
[08:28:11.165]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.165]                       if (muffled) 
[08:28:11.165]                         invokeRestart("muffleWarning")
[08:28:11.165]                     }
[08:28:11.165]                     else if (inherits(cond, "condition")) {
[08:28:11.165]                       if (!is.null(pattern)) {
[08:28:11.165]                         computeRestarts <- base::computeRestarts
[08:28:11.165]                         grepl <- base::grepl
[08:28:11.165]                         restarts <- computeRestarts(cond)
[08:28:11.165]                         for (restart in restarts) {
[08:28:11.165]                           name <- restart$name
[08:28:11.165]                           if (is.null(name)) 
[08:28:11.165]                             next
[08:28:11.165]                           if (!grepl(pattern, name)) 
[08:28:11.165]                             next
[08:28:11.165]                           invokeRestart(restart)
[08:28:11.165]                           muffled <- TRUE
[08:28:11.165]                           break
[08:28:11.165]                         }
[08:28:11.165]                       }
[08:28:11.165]                     }
[08:28:11.165]                     invisible(muffled)
[08:28:11.165]                   }
[08:28:11.165]                   muffleCondition(cond)
[08:28:11.165]                 })
[08:28:11.165]             }))
[08:28:11.165]             future::FutureResult(value = ...future.value$value, 
[08:28:11.165]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.165]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.165]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.165]                     ...future.globalenv.names))
[08:28:11.165]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.165]         }, condition = base::local({
[08:28:11.165]             c <- base::c
[08:28:11.165]             inherits <- base::inherits
[08:28:11.165]             invokeRestart <- base::invokeRestart
[08:28:11.165]             length <- base::length
[08:28:11.165]             list <- base::list
[08:28:11.165]             seq.int <- base::seq.int
[08:28:11.165]             signalCondition <- base::signalCondition
[08:28:11.165]             sys.calls <- base::sys.calls
[08:28:11.165]             `[[` <- base::`[[`
[08:28:11.165]             `+` <- base::`+`
[08:28:11.165]             `<<-` <- base::`<<-`
[08:28:11.165]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.165]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.165]                   3L)]
[08:28:11.165]             }
[08:28:11.165]             function(cond) {
[08:28:11.165]                 is_error <- inherits(cond, "error")
[08:28:11.165]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.165]                   NULL)
[08:28:11.165]                 if (is_error) {
[08:28:11.165]                   sessionInformation <- function() {
[08:28:11.165]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.165]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.165]                       search = base::search(), system = base::Sys.info())
[08:28:11.165]                   }
[08:28:11.165]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.165]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.165]                     cond$call), session = sessionInformation(), 
[08:28:11.165]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.165]                   signalCondition(cond)
[08:28:11.165]                 }
[08:28:11.165]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.165]                 "immediateCondition"))) {
[08:28:11.165]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.165]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.165]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.165]                   if (TRUE && !signal) {
[08:28:11.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.165]                     {
[08:28:11.165]                       inherits <- base::inherits
[08:28:11.165]                       invokeRestart <- base::invokeRestart
[08:28:11.165]                       is.null <- base::is.null
[08:28:11.165]                       muffled <- FALSE
[08:28:11.165]                       if (inherits(cond, "message")) {
[08:28:11.165]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.165]                         if (muffled) 
[08:28:11.165]                           invokeRestart("muffleMessage")
[08:28:11.165]                       }
[08:28:11.165]                       else if (inherits(cond, "warning")) {
[08:28:11.165]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.165]                         if (muffled) 
[08:28:11.165]                           invokeRestart("muffleWarning")
[08:28:11.165]                       }
[08:28:11.165]                       else if (inherits(cond, "condition")) {
[08:28:11.165]                         if (!is.null(pattern)) {
[08:28:11.165]                           computeRestarts <- base::computeRestarts
[08:28:11.165]                           grepl <- base::grepl
[08:28:11.165]                           restarts <- computeRestarts(cond)
[08:28:11.165]                           for (restart in restarts) {
[08:28:11.165]                             name <- restart$name
[08:28:11.165]                             if (is.null(name)) 
[08:28:11.165]                               next
[08:28:11.165]                             if (!grepl(pattern, name)) 
[08:28:11.165]                               next
[08:28:11.165]                             invokeRestart(restart)
[08:28:11.165]                             muffled <- TRUE
[08:28:11.165]                             break
[08:28:11.165]                           }
[08:28:11.165]                         }
[08:28:11.165]                       }
[08:28:11.165]                       invisible(muffled)
[08:28:11.165]                     }
[08:28:11.165]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.165]                   }
[08:28:11.165]                 }
[08:28:11.165]                 else {
[08:28:11.165]                   if (TRUE) {
[08:28:11.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.165]                     {
[08:28:11.165]                       inherits <- base::inherits
[08:28:11.165]                       invokeRestart <- base::invokeRestart
[08:28:11.165]                       is.null <- base::is.null
[08:28:11.165]                       muffled <- FALSE
[08:28:11.165]                       if (inherits(cond, "message")) {
[08:28:11.165]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.165]                         if (muffled) 
[08:28:11.165]                           invokeRestart("muffleMessage")
[08:28:11.165]                       }
[08:28:11.165]                       else if (inherits(cond, "warning")) {
[08:28:11.165]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.165]                         if (muffled) 
[08:28:11.165]                           invokeRestart("muffleWarning")
[08:28:11.165]                       }
[08:28:11.165]                       else if (inherits(cond, "condition")) {
[08:28:11.165]                         if (!is.null(pattern)) {
[08:28:11.165]                           computeRestarts <- base::computeRestarts
[08:28:11.165]                           grepl <- base::grepl
[08:28:11.165]                           restarts <- computeRestarts(cond)
[08:28:11.165]                           for (restart in restarts) {
[08:28:11.165]                             name <- restart$name
[08:28:11.165]                             if (is.null(name)) 
[08:28:11.165]                               next
[08:28:11.165]                             if (!grepl(pattern, name)) 
[08:28:11.165]                               next
[08:28:11.165]                             invokeRestart(restart)
[08:28:11.165]                             muffled <- TRUE
[08:28:11.165]                             break
[08:28:11.165]                           }
[08:28:11.165]                         }
[08:28:11.165]                       }
[08:28:11.165]                       invisible(muffled)
[08:28:11.165]                     }
[08:28:11.165]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.165]                   }
[08:28:11.165]                 }
[08:28:11.165]             }
[08:28:11.165]         }))
[08:28:11.165]     }, error = function(ex) {
[08:28:11.165]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.165]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.165]                 ...future.rng), started = ...future.startTime, 
[08:28:11.165]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.165]             version = "1.8"), class = "FutureResult")
[08:28:11.165]     }, finally = {
[08:28:11.165]         if (!identical(...future.workdir, getwd())) 
[08:28:11.165]             setwd(...future.workdir)
[08:28:11.165]         {
[08:28:11.165]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.165]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.165]             }
[08:28:11.165]             base::options(...future.oldOptions)
[08:28:11.165]             if (.Platform$OS.type == "windows") {
[08:28:11.165]                 old_names <- names(...future.oldEnvVars)
[08:28:11.165]                 envs <- base::Sys.getenv()
[08:28:11.165]                 names <- names(envs)
[08:28:11.165]                 common <- intersect(names, old_names)
[08:28:11.165]                 added <- setdiff(names, old_names)
[08:28:11.165]                 removed <- setdiff(old_names, names)
[08:28:11.165]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.165]                   envs[common]]
[08:28:11.165]                 NAMES <- toupper(changed)
[08:28:11.165]                 args <- list()
[08:28:11.165]                 for (kk in seq_along(NAMES)) {
[08:28:11.165]                   name <- changed[[kk]]
[08:28:11.165]                   NAME <- NAMES[[kk]]
[08:28:11.165]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.165]                     next
[08:28:11.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.165]                 }
[08:28:11.165]                 NAMES <- toupper(added)
[08:28:11.165]                 for (kk in seq_along(NAMES)) {
[08:28:11.165]                   name <- added[[kk]]
[08:28:11.165]                   NAME <- NAMES[[kk]]
[08:28:11.165]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.165]                     next
[08:28:11.165]                   args[[name]] <- ""
[08:28:11.165]                 }
[08:28:11.165]                 NAMES <- toupper(removed)
[08:28:11.165]                 for (kk in seq_along(NAMES)) {
[08:28:11.165]                   name <- removed[[kk]]
[08:28:11.165]                   NAME <- NAMES[[kk]]
[08:28:11.165]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.165]                     next
[08:28:11.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.165]                 }
[08:28:11.165]                 if (length(args) > 0) 
[08:28:11.165]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.165]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.165]             }
[08:28:11.165]             else {
[08:28:11.165]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.165]             }
[08:28:11.165]             {
[08:28:11.165]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.165]                   0L) {
[08:28:11.165]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.165]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.165]                   base::options(opts)
[08:28:11.165]                 }
[08:28:11.165]                 {
[08:28:11.165]                   {
[08:28:11.165]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.165]                     NULL
[08:28:11.165]                   }
[08:28:11.165]                   options(future.plan = NULL)
[08:28:11.165]                   if (is.na(NA_character_)) 
[08:28:11.165]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.165]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.165]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.165]                     .init = FALSE)
[08:28:11.165]                 }
[08:28:11.165]             }
[08:28:11.165]         }
[08:28:11.165]     })
[08:28:11.165]     if (TRUE) {
[08:28:11.165]         base::sink(type = "output", split = FALSE)
[08:28:11.165]         if (TRUE) {
[08:28:11.165]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.165]         }
[08:28:11.165]         else {
[08:28:11.165]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.165]         }
[08:28:11.165]         base::close(...future.stdout)
[08:28:11.165]         ...future.stdout <- NULL
[08:28:11.165]     }
[08:28:11.165]     ...future.result$conditions <- ...future.conditions
[08:28:11.165]     ...future.result$finished <- base::Sys.time()
[08:28:11.165]     ...future.result
[08:28:11.165] }
[08:28:11.168] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:11.168] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:11.168] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:11.168] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:11.169] MultisessionFuture started
[08:28:11.169] - Launch lazy future ... done
[08:28:11.169] run() for ‘MultisessionFuture’ ... done
[08:28:11.169] result() for ClusterFuture ...
[08:28:11.169] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.169] - Validating connection of MultisessionFuture
[08:28:11.211] - received message: FutureResult
[08:28:11.211] - Received FutureResult
[08:28:11.211] - Erased future from FutureRegistry
[08:28:11.211] result() for ClusterFuture ...
[08:28:11.211] - result already collected: FutureResult
[08:28:11.212] result() for ClusterFuture ... done
[08:28:11.212] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.212] result() for ClusterFuture ... done
[08:28:11.212] result() for ClusterFuture ...
[08:28:11.212] - result already collected: FutureResult
[08:28:11.212] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.212] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.213] Searching for globals...
[08:28:11.214] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:11.215] Searching for globals ... DONE
[08:28:11.215] Resolving globals: TRUE
[08:28:11.215] Resolving any globals that are futures ...
[08:28:11.215] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:11.215] Resolving any globals that are futures ... DONE
[08:28:11.215] Resolving futures part of globals (recursively) ...
[08:28:11.216] resolve() on list ...
[08:28:11.216]  recursive: 99
[08:28:11.216]  length: 1
[08:28:11.216]  elements: ‘x’
[08:28:11.216]  length: 0 (resolved future 1)
[08:28:11.216] resolve() on list ... DONE
[08:28:11.216] - globals: [1] ‘x’
[08:28:11.216] Resolving futures part of globals (recursively) ... DONE
[08:28:11.216] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:11.217] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:11.217] - globals: [1] ‘x’
[08:28:11.217] 
[08:28:11.217] getGlobalsAndPackages() ... DONE
[08:28:11.217] run() for ‘Future’ ...
[08:28:11.217] - state: ‘created’
[08:28:11.217] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.231] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.232] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.232]   - Field: ‘node’
[08:28:11.232]   - Field: ‘label’
[08:28:11.232]   - Field: ‘local’
[08:28:11.232]   - Field: ‘owner’
[08:28:11.232]   - Field: ‘envir’
[08:28:11.232]   - Field: ‘workers’
[08:28:11.232]   - Field: ‘packages’
[08:28:11.232]   - Field: ‘gc’
[08:28:11.232]   - Field: ‘conditions’
[08:28:11.232]   - Field: ‘persistent’
[08:28:11.233]   - Field: ‘expr’
[08:28:11.233]   - Field: ‘uuid’
[08:28:11.233]   - Field: ‘seed’
[08:28:11.233]   - Field: ‘version’
[08:28:11.233]   - Field: ‘result’
[08:28:11.233]   - Field: ‘asynchronous’
[08:28:11.233]   - Field: ‘calls’
[08:28:11.233]   - Field: ‘globals’
[08:28:11.233]   - Field: ‘stdout’
[08:28:11.233]   - Field: ‘earlySignal’
[08:28:11.233]   - Field: ‘lazy’
[08:28:11.233]   - Field: ‘state’
[08:28:11.234] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.234] - Launch lazy future ...
[08:28:11.234] Packages needed by the future expression (n = 0): <none>
[08:28:11.234] Packages needed by future strategies (n = 0): <none>
[08:28:11.234] {
[08:28:11.234]     {
[08:28:11.234]         {
[08:28:11.234]             ...future.startTime <- base::Sys.time()
[08:28:11.234]             {
[08:28:11.234]                 {
[08:28:11.234]                   {
[08:28:11.234]                     {
[08:28:11.234]                       base::local({
[08:28:11.234]                         has_future <- base::requireNamespace("future", 
[08:28:11.234]                           quietly = TRUE)
[08:28:11.234]                         if (has_future) {
[08:28:11.234]                           ns <- base::getNamespace("future")
[08:28:11.234]                           version <- ns[[".package"]][["version"]]
[08:28:11.234]                           if (is.null(version)) 
[08:28:11.234]                             version <- utils::packageVersion("future")
[08:28:11.234]                         }
[08:28:11.234]                         else {
[08:28:11.234]                           version <- NULL
[08:28:11.234]                         }
[08:28:11.234]                         if (!has_future || version < "1.8.0") {
[08:28:11.234]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.234]                             "", base::R.version$version.string), 
[08:28:11.234]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.234]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.234]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.234]                               "release", "version")], collapse = " "), 
[08:28:11.234]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.234]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.234]                             info)
[08:28:11.234]                           info <- base::paste(info, collapse = "; ")
[08:28:11.234]                           if (!has_future) {
[08:28:11.234]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.234]                               info)
[08:28:11.234]                           }
[08:28:11.234]                           else {
[08:28:11.234]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.234]                               info, version)
[08:28:11.234]                           }
[08:28:11.234]                           base::stop(msg)
[08:28:11.234]                         }
[08:28:11.234]                       })
[08:28:11.234]                     }
[08:28:11.234]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.234]                     base::options(mc.cores = 1L)
[08:28:11.234]                   }
[08:28:11.234]                   ...future.strategy.old <- future::plan("list")
[08:28:11.234]                   options(future.plan = NULL)
[08:28:11.234]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.234]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.234]                 }
[08:28:11.234]                 ...future.workdir <- getwd()
[08:28:11.234]             }
[08:28:11.234]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.234]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.234]         }
[08:28:11.234]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.234]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.234]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.234]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.234]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.234]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.234]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.234]             base::names(...future.oldOptions))
[08:28:11.234]     }
[08:28:11.234]     if (FALSE) {
[08:28:11.234]     }
[08:28:11.234]     else {
[08:28:11.234]         if (TRUE) {
[08:28:11.234]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.234]                 open = "w")
[08:28:11.234]         }
[08:28:11.234]         else {
[08:28:11.234]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.234]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.234]         }
[08:28:11.234]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.234]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.234]             base::sink(type = "output", split = FALSE)
[08:28:11.234]             base::close(...future.stdout)
[08:28:11.234]         }, add = TRUE)
[08:28:11.234]     }
[08:28:11.234]     ...future.frame <- base::sys.nframe()
[08:28:11.234]     ...future.conditions <- base::list()
[08:28:11.234]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.234]     if (FALSE) {
[08:28:11.234]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.234]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.234]     }
[08:28:11.234]     ...future.result <- base::tryCatch({
[08:28:11.234]         base::withCallingHandlers({
[08:28:11.234]             ...future.value <- base::withVisible(base::local({
[08:28:11.234]                 ...future.makeSendCondition <- base::local({
[08:28:11.234]                   sendCondition <- NULL
[08:28:11.234]                   function(frame = 1L) {
[08:28:11.234]                     if (is.function(sendCondition)) 
[08:28:11.234]                       return(sendCondition)
[08:28:11.234]                     ns <- getNamespace("parallel")
[08:28:11.234]                     if (exists("sendData", mode = "function", 
[08:28:11.234]                       envir = ns)) {
[08:28:11.234]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.234]                         envir = ns)
[08:28:11.234]                       envir <- sys.frame(frame)
[08:28:11.234]                       master <- NULL
[08:28:11.234]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.234]                         !identical(envir, emptyenv())) {
[08:28:11.234]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.234]                           inherits = FALSE)) {
[08:28:11.234]                           master <- get("master", mode = "list", 
[08:28:11.234]                             envir = envir, inherits = FALSE)
[08:28:11.234]                           if (inherits(master, c("SOCKnode", 
[08:28:11.234]                             "SOCK0node"))) {
[08:28:11.234]                             sendCondition <<- function(cond) {
[08:28:11.234]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.234]                                 success = TRUE)
[08:28:11.234]                               parallel_sendData(master, data)
[08:28:11.234]                             }
[08:28:11.234]                             return(sendCondition)
[08:28:11.234]                           }
[08:28:11.234]                         }
[08:28:11.234]                         frame <- frame + 1L
[08:28:11.234]                         envir <- sys.frame(frame)
[08:28:11.234]                       }
[08:28:11.234]                     }
[08:28:11.234]                     sendCondition <<- function(cond) NULL
[08:28:11.234]                   }
[08:28:11.234]                 })
[08:28:11.234]                 withCallingHandlers({
[08:28:11.234]                   {
[08:28:11.234]                     x[["a"]] <- 1
[08:28:11.234]                     x
[08:28:11.234]                   }
[08:28:11.234]                 }, immediateCondition = function(cond) {
[08:28:11.234]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.234]                   sendCondition(cond)
[08:28:11.234]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.234]                   {
[08:28:11.234]                     inherits <- base::inherits
[08:28:11.234]                     invokeRestart <- base::invokeRestart
[08:28:11.234]                     is.null <- base::is.null
[08:28:11.234]                     muffled <- FALSE
[08:28:11.234]                     if (inherits(cond, "message")) {
[08:28:11.234]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.234]                       if (muffled) 
[08:28:11.234]                         invokeRestart("muffleMessage")
[08:28:11.234]                     }
[08:28:11.234]                     else if (inherits(cond, "warning")) {
[08:28:11.234]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.234]                       if (muffled) 
[08:28:11.234]                         invokeRestart("muffleWarning")
[08:28:11.234]                     }
[08:28:11.234]                     else if (inherits(cond, "condition")) {
[08:28:11.234]                       if (!is.null(pattern)) {
[08:28:11.234]                         computeRestarts <- base::computeRestarts
[08:28:11.234]                         grepl <- base::grepl
[08:28:11.234]                         restarts <- computeRestarts(cond)
[08:28:11.234]                         for (restart in restarts) {
[08:28:11.234]                           name <- restart$name
[08:28:11.234]                           if (is.null(name)) 
[08:28:11.234]                             next
[08:28:11.234]                           if (!grepl(pattern, name)) 
[08:28:11.234]                             next
[08:28:11.234]                           invokeRestart(restart)
[08:28:11.234]                           muffled <- TRUE
[08:28:11.234]                           break
[08:28:11.234]                         }
[08:28:11.234]                       }
[08:28:11.234]                     }
[08:28:11.234]                     invisible(muffled)
[08:28:11.234]                   }
[08:28:11.234]                   muffleCondition(cond)
[08:28:11.234]                 })
[08:28:11.234]             }))
[08:28:11.234]             future::FutureResult(value = ...future.value$value, 
[08:28:11.234]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.234]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.234]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.234]                     ...future.globalenv.names))
[08:28:11.234]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.234]         }, condition = base::local({
[08:28:11.234]             c <- base::c
[08:28:11.234]             inherits <- base::inherits
[08:28:11.234]             invokeRestart <- base::invokeRestart
[08:28:11.234]             length <- base::length
[08:28:11.234]             list <- base::list
[08:28:11.234]             seq.int <- base::seq.int
[08:28:11.234]             signalCondition <- base::signalCondition
[08:28:11.234]             sys.calls <- base::sys.calls
[08:28:11.234]             `[[` <- base::`[[`
[08:28:11.234]             `+` <- base::`+`
[08:28:11.234]             `<<-` <- base::`<<-`
[08:28:11.234]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.234]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.234]                   3L)]
[08:28:11.234]             }
[08:28:11.234]             function(cond) {
[08:28:11.234]                 is_error <- inherits(cond, "error")
[08:28:11.234]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.234]                   NULL)
[08:28:11.234]                 if (is_error) {
[08:28:11.234]                   sessionInformation <- function() {
[08:28:11.234]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.234]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.234]                       search = base::search(), system = base::Sys.info())
[08:28:11.234]                   }
[08:28:11.234]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.234]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.234]                     cond$call), session = sessionInformation(), 
[08:28:11.234]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.234]                   signalCondition(cond)
[08:28:11.234]                 }
[08:28:11.234]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.234]                 "immediateCondition"))) {
[08:28:11.234]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.234]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.234]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.234]                   if (TRUE && !signal) {
[08:28:11.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.234]                     {
[08:28:11.234]                       inherits <- base::inherits
[08:28:11.234]                       invokeRestart <- base::invokeRestart
[08:28:11.234]                       is.null <- base::is.null
[08:28:11.234]                       muffled <- FALSE
[08:28:11.234]                       if (inherits(cond, "message")) {
[08:28:11.234]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.234]                         if (muffled) 
[08:28:11.234]                           invokeRestart("muffleMessage")
[08:28:11.234]                       }
[08:28:11.234]                       else if (inherits(cond, "warning")) {
[08:28:11.234]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.234]                         if (muffled) 
[08:28:11.234]                           invokeRestart("muffleWarning")
[08:28:11.234]                       }
[08:28:11.234]                       else if (inherits(cond, "condition")) {
[08:28:11.234]                         if (!is.null(pattern)) {
[08:28:11.234]                           computeRestarts <- base::computeRestarts
[08:28:11.234]                           grepl <- base::grepl
[08:28:11.234]                           restarts <- computeRestarts(cond)
[08:28:11.234]                           for (restart in restarts) {
[08:28:11.234]                             name <- restart$name
[08:28:11.234]                             if (is.null(name)) 
[08:28:11.234]                               next
[08:28:11.234]                             if (!grepl(pattern, name)) 
[08:28:11.234]                               next
[08:28:11.234]                             invokeRestart(restart)
[08:28:11.234]                             muffled <- TRUE
[08:28:11.234]                             break
[08:28:11.234]                           }
[08:28:11.234]                         }
[08:28:11.234]                       }
[08:28:11.234]                       invisible(muffled)
[08:28:11.234]                     }
[08:28:11.234]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.234]                   }
[08:28:11.234]                 }
[08:28:11.234]                 else {
[08:28:11.234]                   if (TRUE) {
[08:28:11.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.234]                     {
[08:28:11.234]                       inherits <- base::inherits
[08:28:11.234]                       invokeRestart <- base::invokeRestart
[08:28:11.234]                       is.null <- base::is.null
[08:28:11.234]                       muffled <- FALSE
[08:28:11.234]                       if (inherits(cond, "message")) {
[08:28:11.234]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.234]                         if (muffled) 
[08:28:11.234]                           invokeRestart("muffleMessage")
[08:28:11.234]                       }
[08:28:11.234]                       else if (inherits(cond, "warning")) {
[08:28:11.234]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.234]                         if (muffled) 
[08:28:11.234]                           invokeRestart("muffleWarning")
[08:28:11.234]                       }
[08:28:11.234]                       else if (inherits(cond, "condition")) {
[08:28:11.234]                         if (!is.null(pattern)) {
[08:28:11.234]                           computeRestarts <- base::computeRestarts
[08:28:11.234]                           grepl <- base::grepl
[08:28:11.234]                           restarts <- computeRestarts(cond)
[08:28:11.234]                           for (restart in restarts) {
[08:28:11.234]                             name <- restart$name
[08:28:11.234]                             if (is.null(name)) 
[08:28:11.234]                               next
[08:28:11.234]                             if (!grepl(pattern, name)) 
[08:28:11.234]                               next
[08:28:11.234]                             invokeRestart(restart)
[08:28:11.234]                             muffled <- TRUE
[08:28:11.234]                             break
[08:28:11.234]                           }
[08:28:11.234]                         }
[08:28:11.234]                       }
[08:28:11.234]                       invisible(muffled)
[08:28:11.234]                     }
[08:28:11.234]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.234]                   }
[08:28:11.234]                 }
[08:28:11.234]             }
[08:28:11.234]         }))
[08:28:11.234]     }, error = function(ex) {
[08:28:11.234]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.234]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.234]                 ...future.rng), started = ...future.startTime, 
[08:28:11.234]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.234]             version = "1.8"), class = "FutureResult")
[08:28:11.234]     }, finally = {
[08:28:11.234]         if (!identical(...future.workdir, getwd())) 
[08:28:11.234]             setwd(...future.workdir)
[08:28:11.234]         {
[08:28:11.234]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.234]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.234]             }
[08:28:11.234]             base::options(...future.oldOptions)
[08:28:11.234]             if (.Platform$OS.type == "windows") {
[08:28:11.234]                 old_names <- names(...future.oldEnvVars)
[08:28:11.234]                 envs <- base::Sys.getenv()
[08:28:11.234]                 names <- names(envs)
[08:28:11.234]                 common <- intersect(names, old_names)
[08:28:11.234]                 added <- setdiff(names, old_names)
[08:28:11.234]                 removed <- setdiff(old_names, names)
[08:28:11.234]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.234]                   envs[common]]
[08:28:11.234]                 NAMES <- toupper(changed)
[08:28:11.234]                 args <- list()
[08:28:11.234]                 for (kk in seq_along(NAMES)) {
[08:28:11.234]                   name <- changed[[kk]]
[08:28:11.234]                   NAME <- NAMES[[kk]]
[08:28:11.234]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.234]                     next
[08:28:11.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.234]                 }
[08:28:11.234]                 NAMES <- toupper(added)
[08:28:11.234]                 for (kk in seq_along(NAMES)) {
[08:28:11.234]                   name <- added[[kk]]
[08:28:11.234]                   NAME <- NAMES[[kk]]
[08:28:11.234]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.234]                     next
[08:28:11.234]                   args[[name]] <- ""
[08:28:11.234]                 }
[08:28:11.234]                 NAMES <- toupper(removed)
[08:28:11.234]                 for (kk in seq_along(NAMES)) {
[08:28:11.234]                   name <- removed[[kk]]
[08:28:11.234]                   NAME <- NAMES[[kk]]
[08:28:11.234]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.234]                     next
[08:28:11.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.234]                 }
[08:28:11.234]                 if (length(args) > 0) 
[08:28:11.234]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.234]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.234]             }
[08:28:11.234]             else {
[08:28:11.234]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.234]             }
[08:28:11.234]             {
[08:28:11.234]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.234]                   0L) {
[08:28:11.234]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.234]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.234]                   base::options(opts)
[08:28:11.234]                 }
[08:28:11.234]                 {
[08:28:11.234]                   {
[08:28:11.234]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.234]                     NULL
[08:28:11.234]                   }
[08:28:11.234]                   options(future.plan = NULL)
[08:28:11.234]                   if (is.na(NA_character_)) 
[08:28:11.234]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.234]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.234]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.234]                     .init = FALSE)
[08:28:11.234]                 }
[08:28:11.234]             }
[08:28:11.234]         }
[08:28:11.234]     })
[08:28:11.234]     if (TRUE) {
[08:28:11.234]         base::sink(type = "output", split = FALSE)
[08:28:11.234]         if (TRUE) {
[08:28:11.234]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.234]         }
[08:28:11.234]         else {
[08:28:11.234]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.234]         }
[08:28:11.234]         base::close(...future.stdout)
[08:28:11.234]         ...future.stdout <- NULL
[08:28:11.234]     }
[08:28:11.234]     ...future.result$conditions <- ...future.conditions
[08:28:11.234]     ...future.result$finished <- base::Sys.time()
[08:28:11.234]     ...future.result
[08:28:11.234] }
[08:28:11.237] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:11.237] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:11.238] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:11.238] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:11.238] MultisessionFuture started
[08:28:11.238] - Launch lazy future ... done
[08:28:11.239] run() for ‘MultisessionFuture’ ... done
[08:28:11.239] result() for ClusterFuture ...
[08:28:11.239] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.239] - Validating connection of MultisessionFuture
[08:28:11.280] - received message: FutureResult
[08:28:11.280] - Received FutureResult
[08:28:11.280] - Erased future from FutureRegistry
[08:28:11.281] result() for ClusterFuture ...
[08:28:11.281] - result already collected: FutureResult
[08:28:11.281] result() for ClusterFuture ... done
[08:28:11.281] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.281] result() for ClusterFuture ... done
[08:28:11.281] result() for ClusterFuture ...
[08:28:11.281] - result already collected: FutureResult
[08:28:11.281] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.282] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.282] Searching for globals...
[08:28:11.284] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:11.284] Searching for globals ... DONE
[08:28:11.284] Resolving globals: TRUE
[08:28:11.284] Resolving any globals that are futures ...
[08:28:11.284] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:28:11.284] Resolving any globals that are futures ... DONE
[08:28:11.285] Resolving futures part of globals (recursively) ...
[08:28:11.285] resolve() on list ...
[08:28:11.285]  recursive: 99
[08:28:11.285]  length: 1
[08:28:11.285]  elements: ‘x’
[08:28:11.285]  length: 0 (resolved future 1)
[08:28:11.285] resolve() on list ... DONE
[08:28:11.285] - globals: [1] ‘x’
[08:28:11.286] Resolving futures part of globals (recursively) ... DONE
[08:28:11.286] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:11.286] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:11.286] - globals: [1] ‘x’
[08:28:11.286] 
[08:28:11.286] getGlobalsAndPackages() ... DONE
[08:28:11.287] run() for ‘Future’ ...
[08:28:11.287] - state: ‘created’
[08:28:11.287] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.301] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.301] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.301]   - Field: ‘node’
[08:28:11.301]   - Field: ‘label’
[08:28:11.301]   - Field: ‘local’
[08:28:11.301]   - Field: ‘owner’
[08:28:11.301]   - Field: ‘envir’
[08:28:11.302]   - Field: ‘workers’
[08:28:11.302]   - Field: ‘packages’
[08:28:11.302]   - Field: ‘gc’
[08:28:11.302]   - Field: ‘conditions’
[08:28:11.302]   - Field: ‘persistent’
[08:28:11.302]   - Field: ‘expr’
[08:28:11.302]   - Field: ‘uuid’
[08:28:11.302]   - Field: ‘seed’
[08:28:11.302]   - Field: ‘version’
[08:28:11.302]   - Field: ‘result’
[08:28:11.302]   - Field: ‘asynchronous’
[08:28:11.302]   - Field: ‘calls’
[08:28:11.303]   - Field: ‘globals’
[08:28:11.303]   - Field: ‘stdout’
[08:28:11.303]   - Field: ‘earlySignal’
[08:28:11.303]   - Field: ‘lazy’
[08:28:11.303]   - Field: ‘state’
[08:28:11.303] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.303] - Launch lazy future ...
[08:28:11.303] Packages needed by the future expression (n = 0): <none>
[08:28:11.303] Packages needed by future strategies (n = 0): <none>
[08:28:11.304] {
[08:28:11.304]     {
[08:28:11.304]         {
[08:28:11.304]             ...future.startTime <- base::Sys.time()
[08:28:11.304]             {
[08:28:11.304]                 {
[08:28:11.304]                   {
[08:28:11.304]                     {
[08:28:11.304]                       base::local({
[08:28:11.304]                         has_future <- base::requireNamespace("future", 
[08:28:11.304]                           quietly = TRUE)
[08:28:11.304]                         if (has_future) {
[08:28:11.304]                           ns <- base::getNamespace("future")
[08:28:11.304]                           version <- ns[[".package"]][["version"]]
[08:28:11.304]                           if (is.null(version)) 
[08:28:11.304]                             version <- utils::packageVersion("future")
[08:28:11.304]                         }
[08:28:11.304]                         else {
[08:28:11.304]                           version <- NULL
[08:28:11.304]                         }
[08:28:11.304]                         if (!has_future || version < "1.8.0") {
[08:28:11.304]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.304]                             "", base::R.version$version.string), 
[08:28:11.304]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.304]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.304]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.304]                               "release", "version")], collapse = " "), 
[08:28:11.304]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.304]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.304]                             info)
[08:28:11.304]                           info <- base::paste(info, collapse = "; ")
[08:28:11.304]                           if (!has_future) {
[08:28:11.304]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.304]                               info)
[08:28:11.304]                           }
[08:28:11.304]                           else {
[08:28:11.304]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.304]                               info, version)
[08:28:11.304]                           }
[08:28:11.304]                           base::stop(msg)
[08:28:11.304]                         }
[08:28:11.304]                       })
[08:28:11.304]                     }
[08:28:11.304]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.304]                     base::options(mc.cores = 1L)
[08:28:11.304]                   }
[08:28:11.304]                   ...future.strategy.old <- future::plan("list")
[08:28:11.304]                   options(future.plan = NULL)
[08:28:11.304]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.304]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.304]                 }
[08:28:11.304]                 ...future.workdir <- getwd()
[08:28:11.304]             }
[08:28:11.304]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.304]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.304]         }
[08:28:11.304]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.304]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.304]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.304]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.304]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.304]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.304]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.304]             base::names(...future.oldOptions))
[08:28:11.304]     }
[08:28:11.304]     if (FALSE) {
[08:28:11.304]     }
[08:28:11.304]     else {
[08:28:11.304]         if (TRUE) {
[08:28:11.304]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.304]                 open = "w")
[08:28:11.304]         }
[08:28:11.304]         else {
[08:28:11.304]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.304]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.304]         }
[08:28:11.304]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.304]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.304]             base::sink(type = "output", split = FALSE)
[08:28:11.304]             base::close(...future.stdout)
[08:28:11.304]         }, add = TRUE)
[08:28:11.304]     }
[08:28:11.304]     ...future.frame <- base::sys.nframe()
[08:28:11.304]     ...future.conditions <- base::list()
[08:28:11.304]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.304]     if (FALSE) {
[08:28:11.304]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.304]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.304]     }
[08:28:11.304]     ...future.result <- base::tryCatch({
[08:28:11.304]         base::withCallingHandlers({
[08:28:11.304]             ...future.value <- base::withVisible(base::local({
[08:28:11.304]                 ...future.makeSendCondition <- base::local({
[08:28:11.304]                   sendCondition <- NULL
[08:28:11.304]                   function(frame = 1L) {
[08:28:11.304]                     if (is.function(sendCondition)) 
[08:28:11.304]                       return(sendCondition)
[08:28:11.304]                     ns <- getNamespace("parallel")
[08:28:11.304]                     if (exists("sendData", mode = "function", 
[08:28:11.304]                       envir = ns)) {
[08:28:11.304]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.304]                         envir = ns)
[08:28:11.304]                       envir <- sys.frame(frame)
[08:28:11.304]                       master <- NULL
[08:28:11.304]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.304]                         !identical(envir, emptyenv())) {
[08:28:11.304]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.304]                           inherits = FALSE)) {
[08:28:11.304]                           master <- get("master", mode = "list", 
[08:28:11.304]                             envir = envir, inherits = FALSE)
[08:28:11.304]                           if (inherits(master, c("SOCKnode", 
[08:28:11.304]                             "SOCK0node"))) {
[08:28:11.304]                             sendCondition <<- function(cond) {
[08:28:11.304]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.304]                                 success = TRUE)
[08:28:11.304]                               parallel_sendData(master, data)
[08:28:11.304]                             }
[08:28:11.304]                             return(sendCondition)
[08:28:11.304]                           }
[08:28:11.304]                         }
[08:28:11.304]                         frame <- frame + 1L
[08:28:11.304]                         envir <- sys.frame(frame)
[08:28:11.304]                       }
[08:28:11.304]                     }
[08:28:11.304]                     sendCondition <<- function(cond) NULL
[08:28:11.304]                   }
[08:28:11.304]                 })
[08:28:11.304]                 withCallingHandlers({
[08:28:11.304]                   {
[08:28:11.304]                     x[["a"]] <- 1
[08:28:11.304]                     x
[08:28:11.304]                   }
[08:28:11.304]                 }, immediateCondition = function(cond) {
[08:28:11.304]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.304]                   sendCondition(cond)
[08:28:11.304]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.304]                   {
[08:28:11.304]                     inherits <- base::inherits
[08:28:11.304]                     invokeRestart <- base::invokeRestart
[08:28:11.304]                     is.null <- base::is.null
[08:28:11.304]                     muffled <- FALSE
[08:28:11.304]                     if (inherits(cond, "message")) {
[08:28:11.304]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.304]                       if (muffled) 
[08:28:11.304]                         invokeRestart("muffleMessage")
[08:28:11.304]                     }
[08:28:11.304]                     else if (inherits(cond, "warning")) {
[08:28:11.304]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.304]                       if (muffled) 
[08:28:11.304]                         invokeRestart("muffleWarning")
[08:28:11.304]                     }
[08:28:11.304]                     else if (inherits(cond, "condition")) {
[08:28:11.304]                       if (!is.null(pattern)) {
[08:28:11.304]                         computeRestarts <- base::computeRestarts
[08:28:11.304]                         grepl <- base::grepl
[08:28:11.304]                         restarts <- computeRestarts(cond)
[08:28:11.304]                         for (restart in restarts) {
[08:28:11.304]                           name <- restart$name
[08:28:11.304]                           if (is.null(name)) 
[08:28:11.304]                             next
[08:28:11.304]                           if (!grepl(pattern, name)) 
[08:28:11.304]                             next
[08:28:11.304]                           invokeRestart(restart)
[08:28:11.304]                           muffled <- TRUE
[08:28:11.304]                           break
[08:28:11.304]                         }
[08:28:11.304]                       }
[08:28:11.304]                     }
[08:28:11.304]                     invisible(muffled)
[08:28:11.304]                   }
[08:28:11.304]                   muffleCondition(cond)
[08:28:11.304]                 })
[08:28:11.304]             }))
[08:28:11.304]             future::FutureResult(value = ...future.value$value, 
[08:28:11.304]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.304]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.304]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.304]                     ...future.globalenv.names))
[08:28:11.304]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.304]         }, condition = base::local({
[08:28:11.304]             c <- base::c
[08:28:11.304]             inherits <- base::inherits
[08:28:11.304]             invokeRestart <- base::invokeRestart
[08:28:11.304]             length <- base::length
[08:28:11.304]             list <- base::list
[08:28:11.304]             seq.int <- base::seq.int
[08:28:11.304]             signalCondition <- base::signalCondition
[08:28:11.304]             sys.calls <- base::sys.calls
[08:28:11.304]             `[[` <- base::`[[`
[08:28:11.304]             `+` <- base::`+`
[08:28:11.304]             `<<-` <- base::`<<-`
[08:28:11.304]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.304]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.304]                   3L)]
[08:28:11.304]             }
[08:28:11.304]             function(cond) {
[08:28:11.304]                 is_error <- inherits(cond, "error")
[08:28:11.304]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.304]                   NULL)
[08:28:11.304]                 if (is_error) {
[08:28:11.304]                   sessionInformation <- function() {
[08:28:11.304]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.304]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.304]                       search = base::search(), system = base::Sys.info())
[08:28:11.304]                   }
[08:28:11.304]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.304]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.304]                     cond$call), session = sessionInformation(), 
[08:28:11.304]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.304]                   signalCondition(cond)
[08:28:11.304]                 }
[08:28:11.304]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.304]                 "immediateCondition"))) {
[08:28:11.304]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.304]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.304]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.304]                   if (TRUE && !signal) {
[08:28:11.304]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.304]                     {
[08:28:11.304]                       inherits <- base::inherits
[08:28:11.304]                       invokeRestart <- base::invokeRestart
[08:28:11.304]                       is.null <- base::is.null
[08:28:11.304]                       muffled <- FALSE
[08:28:11.304]                       if (inherits(cond, "message")) {
[08:28:11.304]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.304]                         if (muffled) 
[08:28:11.304]                           invokeRestart("muffleMessage")
[08:28:11.304]                       }
[08:28:11.304]                       else if (inherits(cond, "warning")) {
[08:28:11.304]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.304]                         if (muffled) 
[08:28:11.304]                           invokeRestart("muffleWarning")
[08:28:11.304]                       }
[08:28:11.304]                       else if (inherits(cond, "condition")) {
[08:28:11.304]                         if (!is.null(pattern)) {
[08:28:11.304]                           computeRestarts <- base::computeRestarts
[08:28:11.304]                           grepl <- base::grepl
[08:28:11.304]                           restarts <- computeRestarts(cond)
[08:28:11.304]                           for (restart in restarts) {
[08:28:11.304]                             name <- restart$name
[08:28:11.304]                             if (is.null(name)) 
[08:28:11.304]                               next
[08:28:11.304]                             if (!grepl(pattern, name)) 
[08:28:11.304]                               next
[08:28:11.304]                             invokeRestart(restart)
[08:28:11.304]                             muffled <- TRUE
[08:28:11.304]                             break
[08:28:11.304]                           }
[08:28:11.304]                         }
[08:28:11.304]                       }
[08:28:11.304]                       invisible(muffled)
[08:28:11.304]                     }
[08:28:11.304]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.304]                   }
[08:28:11.304]                 }
[08:28:11.304]                 else {
[08:28:11.304]                   if (TRUE) {
[08:28:11.304]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.304]                     {
[08:28:11.304]                       inherits <- base::inherits
[08:28:11.304]                       invokeRestart <- base::invokeRestart
[08:28:11.304]                       is.null <- base::is.null
[08:28:11.304]                       muffled <- FALSE
[08:28:11.304]                       if (inherits(cond, "message")) {
[08:28:11.304]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.304]                         if (muffled) 
[08:28:11.304]                           invokeRestart("muffleMessage")
[08:28:11.304]                       }
[08:28:11.304]                       else if (inherits(cond, "warning")) {
[08:28:11.304]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.304]                         if (muffled) 
[08:28:11.304]                           invokeRestart("muffleWarning")
[08:28:11.304]                       }
[08:28:11.304]                       else if (inherits(cond, "condition")) {
[08:28:11.304]                         if (!is.null(pattern)) {
[08:28:11.304]                           computeRestarts <- base::computeRestarts
[08:28:11.304]                           grepl <- base::grepl
[08:28:11.304]                           restarts <- computeRestarts(cond)
[08:28:11.304]                           for (restart in restarts) {
[08:28:11.304]                             name <- restart$name
[08:28:11.304]                             if (is.null(name)) 
[08:28:11.304]                               next
[08:28:11.304]                             if (!grepl(pattern, name)) 
[08:28:11.304]                               next
[08:28:11.304]                             invokeRestart(restart)
[08:28:11.304]                             muffled <- TRUE
[08:28:11.304]                             break
[08:28:11.304]                           }
[08:28:11.304]                         }
[08:28:11.304]                       }
[08:28:11.304]                       invisible(muffled)
[08:28:11.304]                     }
[08:28:11.304]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.304]                   }
[08:28:11.304]                 }
[08:28:11.304]             }
[08:28:11.304]         }))
[08:28:11.304]     }, error = function(ex) {
[08:28:11.304]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.304]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.304]                 ...future.rng), started = ...future.startTime, 
[08:28:11.304]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.304]             version = "1.8"), class = "FutureResult")
[08:28:11.304]     }, finally = {
[08:28:11.304]         if (!identical(...future.workdir, getwd())) 
[08:28:11.304]             setwd(...future.workdir)
[08:28:11.304]         {
[08:28:11.304]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.304]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.304]             }
[08:28:11.304]             base::options(...future.oldOptions)
[08:28:11.304]             if (.Platform$OS.type == "windows") {
[08:28:11.304]                 old_names <- names(...future.oldEnvVars)
[08:28:11.304]                 envs <- base::Sys.getenv()
[08:28:11.304]                 names <- names(envs)
[08:28:11.304]                 common <- intersect(names, old_names)
[08:28:11.304]                 added <- setdiff(names, old_names)
[08:28:11.304]                 removed <- setdiff(old_names, names)
[08:28:11.304]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.304]                   envs[common]]
[08:28:11.304]                 NAMES <- toupper(changed)
[08:28:11.304]                 args <- list()
[08:28:11.304]                 for (kk in seq_along(NAMES)) {
[08:28:11.304]                   name <- changed[[kk]]
[08:28:11.304]                   NAME <- NAMES[[kk]]
[08:28:11.304]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.304]                     next
[08:28:11.304]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.304]                 }
[08:28:11.304]                 NAMES <- toupper(added)
[08:28:11.304]                 for (kk in seq_along(NAMES)) {
[08:28:11.304]                   name <- added[[kk]]
[08:28:11.304]                   NAME <- NAMES[[kk]]
[08:28:11.304]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.304]                     next
[08:28:11.304]                   args[[name]] <- ""
[08:28:11.304]                 }
[08:28:11.304]                 NAMES <- toupper(removed)
[08:28:11.304]                 for (kk in seq_along(NAMES)) {
[08:28:11.304]                   name <- removed[[kk]]
[08:28:11.304]                   NAME <- NAMES[[kk]]
[08:28:11.304]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.304]                     next
[08:28:11.304]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.304]                 }
[08:28:11.304]                 if (length(args) > 0) 
[08:28:11.304]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.304]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.304]             }
[08:28:11.304]             else {
[08:28:11.304]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.304]             }
[08:28:11.304]             {
[08:28:11.304]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.304]                   0L) {
[08:28:11.304]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.304]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.304]                   base::options(opts)
[08:28:11.304]                 }
[08:28:11.304]                 {
[08:28:11.304]                   {
[08:28:11.304]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.304]                     NULL
[08:28:11.304]                   }
[08:28:11.304]                   options(future.plan = NULL)
[08:28:11.304]                   if (is.na(NA_character_)) 
[08:28:11.304]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.304]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.304]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.304]                     .init = FALSE)
[08:28:11.304]                 }
[08:28:11.304]             }
[08:28:11.304]         }
[08:28:11.304]     })
[08:28:11.304]     if (TRUE) {
[08:28:11.304]         base::sink(type = "output", split = FALSE)
[08:28:11.304]         if (TRUE) {
[08:28:11.304]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.304]         }
[08:28:11.304]         else {
[08:28:11.304]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.304]         }
[08:28:11.304]         base::close(...future.stdout)
[08:28:11.304]         ...future.stdout <- NULL
[08:28:11.304]     }
[08:28:11.304]     ...future.result$conditions <- ...future.conditions
[08:28:11.304]     ...future.result$finished <- base::Sys.time()
[08:28:11.304]     ...future.result
[08:28:11.304] }
[08:28:11.307] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:11.307] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:11.307] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:11.307] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:11.308] MultisessionFuture started
[08:28:11.308] - Launch lazy future ... done
[08:28:11.308] run() for ‘MultisessionFuture’ ... done
[08:28:11.308] result() for ClusterFuture ...
[08:28:11.308] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.308] - Validating connection of MultisessionFuture
[08:28:11.350] - received message: FutureResult
[08:28:11.350] - Received FutureResult
[08:28:11.350] - Erased future from FutureRegistry
[08:28:11.351] result() for ClusterFuture ...
[08:28:11.351] - result already collected: FutureResult
[08:28:11.351] result() for ClusterFuture ... done
[08:28:11.351] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.351] result() for ClusterFuture ... done
[08:28:11.351] result() for ClusterFuture ...
[08:28:11.351] - result already collected: FutureResult
[08:28:11.351] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.351] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.352] Searching for globals...
[08:28:11.354] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:11.354] Searching for globals ... DONE
[08:28:11.354] Resolving globals: TRUE
[08:28:11.354] Resolving any globals that are futures ...
[08:28:11.354] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:11.354] Resolving any globals that are futures ... DONE
[08:28:11.355] Resolving futures part of globals (recursively) ...
[08:28:11.355] resolve() on list ...
[08:28:11.355]  recursive: 99
[08:28:11.355]  length: 1
[08:28:11.355]  elements: ‘x’
[08:28:11.355]  length: 0 (resolved future 1)
[08:28:11.355] resolve() on list ... DONE
[08:28:11.355] - globals: [1] ‘x’
[08:28:11.356] Resolving futures part of globals (recursively) ... DONE
[08:28:11.356] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:11.356] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:11.356] - globals: [1] ‘x’
[08:28:11.356] 
[08:28:11.356] getGlobalsAndPackages() ... DONE
[08:28:11.357] run() for ‘Future’ ...
[08:28:11.357] - state: ‘created’
[08:28:11.357] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.371] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.371] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.371]   - Field: ‘node’
[08:28:11.371]   - Field: ‘label’
[08:28:11.371]   - Field: ‘local’
[08:28:11.371]   - Field: ‘owner’
[08:28:11.371]   - Field: ‘envir’
[08:28:11.371]   - Field: ‘workers’
[08:28:11.371]   - Field: ‘packages’
[08:28:11.371]   - Field: ‘gc’
[08:28:11.372]   - Field: ‘conditions’
[08:28:11.372]   - Field: ‘persistent’
[08:28:11.372]   - Field: ‘expr’
[08:28:11.372]   - Field: ‘uuid’
[08:28:11.372]   - Field: ‘seed’
[08:28:11.372]   - Field: ‘version’
[08:28:11.372]   - Field: ‘result’
[08:28:11.372]   - Field: ‘asynchronous’
[08:28:11.372]   - Field: ‘calls’
[08:28:11.372]   - Field: ‘globals’
[08:28:11.372]   - Field: ‘stdout’
[08:28:11.372]   - Field: ‘earlySignal’
[08:28:11.373]   - Field: ‘lazy’
[08:28:11.373]   - Field: ‘state’
[08:28:11.373] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.373] - Launch lazy future ...
[08:28:11.373] Packages needed by the future expression (n = 0): <none>
[08:28:11.373] Packages needed by future strategies (n = 0): <none>
[08:28:11.374] {
[08:28:11.374]     {
[08:28:11.374]         {
[08:28:11.374]             ...future.startTime <- base::Sys.time()
[08:28:11.374]             {
[08:28:11.374]                 {
[08:28:11.374]                   {
[08:28:11.374]                     {
[08:28:11.374]                       base::local({
[08:28:11.374]                         has_future <- base::requireNamespace("future", 
[08:28:11.374]                           quietly = TRUE)
[08:28:11.374]                         if (has_future) {
[08:28:11.374]                           ns <- base::getNamespace("future")
[08:28:11.374]                           version <- ns[[".package"]][["version"]]
[08:28:11.374]                           if (is.null(version)) 
[08:28:11.374]                             version <- utils::packageVersion("future")
[08:28:11.374]                         }
[08:28:11.374]                         else {
[08:28:11.374]                           version <- NULL
[08:28:11.374]                         }
[08:28:11.374]                         if (!has_future || version < "1.8.0") {
[08:28:11.374]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.374]                             "", base::R.version$version.string), 
[08:28:11.374]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.374]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.374]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.374]                               "release", "version")], collapse = " "), 
[08:28:11.374]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.374]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.374]                             info)
[08:28:11.374]                           info <- base::paste(info, collapse = "; ")
[08:28:11.374]                           if (!has_future) {
[08:28:11.374]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.374]                               info)
[08:28:11.374]                           }
[08:28:11.374]                           else {
[08:28:11.374]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.374]                               info, version)
[08:28:11.374]                           }
[08:28:11.374]                           base::stop(msg)
[08:28:11.374]                         }
[08:28:11.374]                       })
[08:28:11.374]                     }
[08:28:11.374]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.374]                     base::options(mc.cores = 1L)
[08:28:11.374]                   }
[08:28:11.374]                   ...future.strategy.old <- future::plan("list")
[08:28:11.374]                   options(future.plan = NULL)
[08:28:11.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.374]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.374]                 }
[08:28:11.374]                 ...future.workdir <- getwd()
[08:28:11.374]             }
[08:28:11.374]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.374]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.374]         }
[08:28:11.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.374]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.374]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.374]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.374]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.374]             base::names(...future.oldOptions))
[08:28:11.374]     }
[08:28:11.374]     if (FALSE) {
[08:28:11.374]     }
[08:28:11.374]     else {
[08:28:11.374]         if (TRUE) {
[08:28:11.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.374]                 open = "w")
[08:28:11.374]         }
[08:28:11.374]         else {
[08:28:11.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.374]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.374]         }
[08:28:11.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.374]             base::sink(type = "output", split = FALSE)
[08:28:11.374]             base::close(...future.stdout)
[08:28:11.374]         }, add = TRUE)
[08:28:11.374]     }
[08:28:11.374]     ...future.frame <- base::sys.nframe()
[08:28:11.374]     ...future.conditions <- base::list()
[08:28:11.374]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.374]     if (FALSE) {
[08:28:11.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.374]     }
[08:28:11.374]     ...future.result <- base::tryCatch({
[08:28:11.374]         base::withCallingHandlers({
[08:28:11.374]             ...future.value <- base::withVisible(base::local({
[08:28:11.374]                 ...future.makeSendCondition <- base::local({
[08:28:11.374]                   sendCondition <- NULL
[08:28:11.374]                   function(frame = 1L) {
[08:28:11.374]                     if (is.function(sendCondition)) 
[08:28:11.374]                       return(sendCondition)
[08:28:11.374]                     ns <- getNamespace("parallel")
[08:28:11.374]                     if (exists("sendData", mode = "function", 
[08:28:11.374]                       envir = ns)) {
[08:28:11.374]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.374]                         envir = ns)
[08:28:11.374]                       envir <- sys.frame(frame)
[08:28:11.374]                       master <- NULL
[08:28:11.374]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.374]                         !identical(envir, emptyenv())) {
[08:28:11.374]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.374]                           inherits = FALSE)) {
[08:28:11.374]                           master <- get("master", mode = "list", 
[08:28:11.374]                             envir = envir, inherits = FALSE)
[08:28:11.374]                           if (inherits(master, c("SOCKnode", 
[08:28:11.374]                             "SOCK0node"))) {
[08:28:11.374]                             sendCondition <<- function(cond) {
[08:28:11.374]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.374]                                 success = TRUE)
[08:28:11.374]                               parallel_sendData(master, data)
[08:28:11.374]                             }
[08:28:11.374]                             return(sendCondition)
[08:28:11.374]                           }
[08:28:11.374]                         }
[08:28:11.374]                         frame <- frame + 1L
[08:28:11.374]                         envir <- sys.frame(frame)
[08:28:11.374]                       }
[08:28:11.374]                     }
[08:28:11.374]                     sendCondition <<- function(cond) NULL
[08:28:11.374]                   }
[08:28:11.374]                 })
[08:28:11.374]                 withCallingHandlers({
[08:28:11.374]                   {
[08:28:11.374]                     x["a"] <- list(1)
[08:28:11.374]                     x
[08:28:11.374]                   }
[08:28:11.374]                 }, immediateCondition = function(cond) {
[08:28:11.374]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.374]                   sendCondition(cond)
[08:28:11.374]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.374]                   {
[08:28:11.374]                     inherits <- base::inherits
[08:28:11.374]                     invokeRestart <- base::invokeRestart
[08:28:11.374]                     is.null <- base::is.null
[08:28:11.374]                     muffled <- FALSE
[08:28:11.374]                     if (inherits(cond, "message")) {
[08:28:11.374]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.374]                       if (muffled) 
[08:28:11.374]                         invokeRestart("muffleMessage")
[08:28:11.374]                     }
[08:28:11.374]                     else if (inherits(cond, "warning")) {
[08:28:11.374]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.374]                       if (muffled) 
[08:28:11.374]                         invokeRestart("muffleWarning")
[08:28:11.374]                     }
[08:28:11.374]                     else if (inherits(cond, "condition")) {
[08:28:11.374]                       if (!is.null(pattern)) {
[08:28:11.374]                         computeRestarts <- base::computeRestarts
[08:28:11.374]                         grepl <- base::grepl
[08:28:11.374]                         restarts <- computeRestarts(cond)
[08:28:11.374]                         for (restart in restarts) {
[08:28:11.374]                           name <- restart$name
[08:28:11.374]                           if (is.null(name)) 
[08:28:11.374]                             next
[08:28:11.374]                           if (!grepl(pattern, name)) 
[08:28:11.374]                             next
[08:28:11.374]                           invokeRestart(restart)
[08:28:11.374]                           muffled <- TRUE
[08:28:11.374]                           break
[08:28:11.374]                         }
[08:28:11.374]                       }
[08:28:11.374]                     }
[08:28:11.374]                     invisible(muffled)
[08:28:11.374]                   }
[08:28:11.374]                   muffleCondition(cond)
[08:28:11.374]                 })
[08:28:11.374]             }))
[08:28:11.374]             future::FutureResult(value = ...future.value$value, 
[08:28:11.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.374]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.374]                     ...future.globalenv.names))
[08:28:11.374]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.374]         }, condition = base::local({
[08:28:11.374]             c <- base::c
[08:28:11.374]             inherits <- base::inherits
[08:28:11.374]             invokeRestart <- base::invokeRestart
[08:28:11.374]             length <- base::length
[08:28:11.374]             list <- base::list
[08:28:11.374]             seq.int <- base::seq.int
[08:28:11.374]             signalCondition <- base::signalCondition
[08:28:11.374]             sys.calls <- base::sys.calls
[08:28:11.374]             `[[` <- base::`[[`
[08:28:11.374]             `+` <- base::`+`
[08:28:11.374]             `<<-` <- base::`<<-`
[08:28:11.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.374]                   3L)]
[08:28:11.374]             }
[08:28:11.374]             function(cond) {
[08:28:11.374]                 is_error <- inherits(cond, "error")
[08:28:11.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.374]                   NULL)
[08:28:11.374]                 if (is_error) {
[08:28:11.374]                   sessionInformation <- function() {
[08:28:11.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.374]                       search = base::search(), system = base::Sys.info())
[08:28:11.374]                   }
[08:28:11.374]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.374]                     cond$call), session = sessionInformation(), 
[08:28:11.374]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.374]                   signalCondition(cond)
[08:28:11.374]                 }
[08:28:11.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.374]                 "immediateCondition"))) {
[08:28:11.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.374]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.374]                   if (TRUE && !signal) {
[08:28:11.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.374]                     {
[08:28:11.374]                       inherits <- base::inherits
[08:28:11.374]                       invokeRestart <- base::invokeRestart
[08:28:11.374]                       is.null <- base::is.null
[08:28:11.374]                       muffled <- FALSE
[08:28:11.374]                       if (inherits(cond, "message")) {
[08:28:11.374]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.374]                         if (muffled) 
[08:28:11.374]                           invokeRestart("muffleMessage")
[08:28:11.374]                       }
[08:28:11.374]                       else if (inherits(cond, "warning")) {
[08:28:11.374]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.374]                         if (muffled) 
[08:28:11.374]                           invokeRestart("muffleWarning")
[08:28:11.374]                       }
[08:28:11.374]                       else if (inherits(cond, "condition")) {
[08:28:11.374]                         if (!is.null(pattern)) {
[08:28:11.374]                           computeRestarts <- base::computeRestarts
[08:28:11.374]                           grepl <- base::grepl
[08:28:11.374]                           restarts <- computeRestarts(cond)
[08:28:11.374]                           for (restart in restarts) {
[08:28:11.374]                             name <- restart$name
[08:28:11.374]                             if (is.null(name)) 
[08:28:11.374]                               next
[08:28:11.374]                             if (!grepl(pattern, name)) 
[08:28:11.374]                               next
[08:28:11.374]                             invokeRestart(restart)
[08:28:11.374]                             muffled <- TRUE
[08:28:11.374]                             break
[08:28:11.374]                           }
[08:28:11.374]                         }
[08:28:11.374]                       }
[08:28:11.374]                       invisible(muffled)
[08:28:11.374]                     }
[08:28:11.374]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.374]                   }
[08:28:11.374]                 }
[08:28:11.374]                 else {
[08:28:11.374]                   if (TRUE) {
[08:28:11.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.374]                     {
[08:28:11.374]                       inherits <- base::inherits
[08:28:11.374]                       invokeRestart <- base::invokeRestart
[08:28:11.374]                       is.null <- base::is.null
[08:28:11.374]                       muffled <- FALSE
[08:28:11.374]                       if (inherits(cond, "message")) {
[08:28:11.374]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.374]                         if (muffled) 
[08:28:11.374]                           invokeRestart("muffleMessage")
[08:28:11.374]                       }
[08:28:11.374]                       else if (inherits(cond, "warning")) {
[08:28:11.374]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.374]                         if (muffled) 
[08:28:11.374]                           invokeRestart("muffleWarning")
[08:28:11.374]                       }
[08:28:11.374]                       else if (inherits(cond, "condition")) {
[08:28:11.374]                         if (!is.null(pattern)) {
[08:28:11.374]                           computeRestarts <- base::computeRestarts
[08:28:11.374]                           grepl <- base::grepl
[08:28:11.374]                           restarts <- computeRestarts(cond)
[08:28:11.374]                           for (restart in restarts) {
[08:28:11.374]                             name <- restart$name
[08:28:11.374]                             if (is.null(name)) 
[08:28:11.374]                               next
[08:28:11.374]                             if (!grepl(pattern, name)) 
[08:28:11.374]                               next
[08:28:11.374]                             invokeRestart(restart)
[08:28:11.374]                             muffled <- TRUE
[08:28:11.374]                             break
[08:28:11.374]                           }
[08:28:11.374]                         }
[08:28:11.374]                       }
[08:28:11.374]                       invisible(muffled)
[08:28:11.374]                     }
[08:28:11.374]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.374]                   }
[08:28:11.374]                 }
[08:28:11.374]             }
[08:28:11.374]         }))
[08:28:11.374]     }, error = function(ex) {
[08:28:11.374]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.374]                 ...future.rng), started = ...future.startTime, 
[08:28:11.374]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.374]             version = "1.8"), class = "FutureResult")
[08:28:11.374]     }, finally = {
[08:28:11.374]         if (!identical(...future.workdir, getwd())) 
[08:28:11.374]             setwd(...future.workdir)
[08:28:11.374]         {
[08:28:11.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.374]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.374]             }
[08:28:11.374]             base::options(...future.oldOptions)
[08:28:11.374]             if (.Platform$OS.type == "windows") {
[08:28:11.374]                 old_names <- names(...future.oldEnvVars)
[08:28:11.374]                 envs <- base::Sys.getenv()
[08:28:11.374]                 names <- names(envs)
[08:28:11.374]                 common <- intersect(names, old_names)
[08:28:11.374]                 added <- setdiff(names, old_names)
[08:28:11.374]                 removed <- setdiff(old_names, names)
[08:28:11.374]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.374]                   envs[common]]
[08:28:11.374]                 NAMES <- toupper(changed)
[08:28:11.374]                 args <- list()
[08:28:11.374]                 for (kk in seq_along(NAMES)) {
[08:28:11.374]                   name <- changed[[kk]]
[08:28:11.374]                   NAME <- NAMES[[kk]]
[08:28:11.374]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.374]                     next
[08:28:11.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.374]                 }
[08:28:11.374]                 NAMES <- toupper(added)
[08:28:11.374]                 for (kk in seq_along(NAMES)) {
[08:28:11.374]                   name <- added[[kk]]
[08:28:11.374]                   NAME <- NAMES[[kk]]
[08:28:11.374]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.374]                     next
[08:28:11.374]                   args[[name]] <- ""
[08:28:11.374]                 }
[08:28:11.374]                 NAMES <- toupper(removed)
[08:28:11.374]                 for (kk in seq_along(NAMES)) {
[08:28:11.374]                   name <- removed[[kk]]
[08:28:11.374]                   NAME <- NAMES[[kk]]
[08:28:11.374]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.374]                     next
[08:28:11.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.374]                 }
[08:28:11.374]                 if (length(args) > 0) 
[08:28:11.374]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.374]             }
[08:28:11.374]             else {
[08:28:11.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.374]             }
[08:28:11.374]             {
[08:28:11.374]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.374]                   0L) {
[08:28:11.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.374]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.374]                   base::options(opts)
[08:28:11.374]                 }
[08:28:11.374]                 {
[08:28:11.374]                   {
[08:28:11.374]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.374]                     NULL
[08:28:11.374]                   }
[08:28:11.374]                   options(future.plan = NULL)
[08:28:11.374]                   if (is.na(NA_character_)) 
[08:28:11.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.374]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.374]                     .init = FALSE)
[08:28:11.374]                 }
[08:28:11.374]             }
[08:28:11.374]         }
[08:28:11.374]     })
[08:28:11.374]     if (TRUE) {
[08:28:11.374]         base::sink(type = "output", split = FALSE)
[08:28:11.374]         if (TRUE) {
[08:28:11.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.374]         }
[08:28:11.374]         else {
[08:28:11.374]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.374]         }
[08:28:11.374]         base::close(...future.stdout)
[08:28:11.374]         ...future.stdout <- NULL
[08:28:11.374]     }
[08:28:11.374]     ...future.result$conditions <- ...future.conditions
[08:28:11.374]     ...future.result$finished <- base::Sys.time()
[08:28:11.374]     ...future.result
[08:28:11.374] }
[08:28:11.376] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:11.376] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:11.377] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:11.377] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:11.377] MultisessionFuture started
[08:28:11.378] - Launch lazy future ... done
[08:28:11.378] run() for ‘MultisessionFuture’ ... done
[08:28:11.378] result() for ClusterFuture ...
[08:28:11.378] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.378] - Validating connection of MultisessionFuture
[08:28:11.420] - received message: FutureResult
[08:28:11.420] - Received FutureResult
[08:28:11.420] - Erased future from FutureRegistry
[08:28:11.421] result() for ClusterFuture ...
[08:28:11.421] - result already collected: FutureResult
[08:28:11.421] result() for ClusterFuture ... done
[08:28:11.421] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.421] result() for ClusterFuture ... done
[08:28:11.421] result() for ClusterFuture ...
[08:28:11.421] - result already collected: FutureResult
[08:28:11.421] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.421] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.422] Searching for globals...
[08:28:11.424] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:11.424] Searching for globals ... DONE
[08:28:11.424] Resolving globals: TRUE
[08:28:11.424] Resolving any globals that are futures ...
[08:28:11.424] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:11.429] Resolving any globals that are futures ... DONE
[08:28:11.429] Resolving futures part of globals (recursively) ...
[08:28:11.430] resolve() on list ...
[08:28:11.430]  recursive: 99
[08:28:11.430]  length: 1
[08:28:11.430]  elements: ‘x’
[08:28:11.430]  length: 0 (resolved future 1)
[08:28:11.430] resolve() on list ... DONE
[08:28:11.430] - globals: [1] ‘x’
[08:28:11.430] Resolving futures part of globals (recursively) ... DONE
[08:28:11.430] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:11.431] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:11.431] - globals: [1] ‘x’
[08:28:11.431] 
[08:28:11.431] getGlobalsAndPackages() ... DONE
[08:28:11.431] run() for ‘Future’ ...
[08:28:11.431] - state: ‘created’
[08:28:11.432] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.445] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.445] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.445]   - Field: ‘node’
[08:28:11.446]   - Field: ‘label’
[08:28:11.446]   - Field: ‘local’
[08:28:11.446]   - Field: ‘owner’
[08:28:11.446]   - Field: ‘envir’
[08:28:11.446]   - Field: ‘workers’
[08:28:11.446]   - Field: ‘packages’
[08:28:11.446]   - Field: ‘gc’
[08:28:11.446]   - Field: ‘conditions’
[08:28:11.446]   - Field: ‘persistent’
[08:28:11.446]   - Field: ‘expr’
[08:28:11.446]   - Field: ‘uuid’
[08:28:11.446]   - Field: ‘seed’
[08:28:11.447]   - Field: ‘version’
[08:28:11.447]   - Field: ‘result’
[08:28:11.447]   - Field: ‘asynchronous’
[08:28:11.447]   - Field: ‘calls’
[08:28:11.447]   - Field: ‘globals’
[08:28:11.447]   - Field: ‘stdout’
[08:28:11.447]   - Field: ‘earlySignal’
[08:28:11.447]   - Field: ‘lazy’
[08:28:11.447]   - Field: ‘state’
[08:28:11.447] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.447] - Launch lazy future ...
[08:28:11.448] Packages needed by the future expression (n = 0): <none>
[08:28:11.448] Packages needed by future strategies (n = 0): <none>
[08:28:11.448] {
[08:28:11.448]     {
[08:28:11.448]         {
[08:28:11.448]             ...future.startTime <- base::Sys.time()
[08:28:11.448]             {
[08:28:11.448]                 {
[08:28:11.448]                   {
[08:28:11.448]                     {
[08:28:11.448]                       base::local({
[08:28:11.448]                         has_future <- base::requireNamespace("future", 
[08:28:11.448]                           quietly = TRUE)
[08:28:11.448]                         if (has_future) {
[08:28:11.448]                           ns <- base::getNamespace("future")
[08:28:11.448]                           version <- ns[[".package"]][["version"]]
[08:28:11.448]                           if (is.null(version)) 
[08:28:11.448]                             version <- utils::packageVersion("future")
[08:28:11.448]                         }
[08:28:11.448]                         else {
[08:28:11.448]                           version <- NULL
[08:28:11.448]                         }
[08:28:11.448]                         if (!has_future || version < "1.8.0") {
[08:28:11.448]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.448]                             "", base::R.version$version.string), 
[08:28:11.448]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.448]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.448]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.448]                               "release", "version")], collapse = " "), 
[08:28:11.448]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.448]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.448]                             info)
[08:28:11.448]                           info <- base::paste(info, collapse = "; ")
[08:28:11.448]                           if (!has_future) {
[08:28:11.448]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.448]                               info)
[08:28:11.448]                           }
[08:28:11.448]                           else {
[08:28:11.448]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.448]                               info, version)
[08:28:11.448]                           }
[08:28:11.448]                           base::stop(msg)
[08:28:11.448]                         }
[08:28:11.448]                       })
[08:28:11.448]                     }
[08:28:11.448]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.448]                     base::options(mc.cores = 1L)
[08:28:11.448]                   }
[08:28:11.448]                   ...future.strategy.old <- future::plan("list")
[08:28:11.448]                   options(future.plan = NULL)
[08:28:11.448]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.448]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.448]                 }
[08:28:11.448]                 ...future.workdir <- getwd()
[08:28:11.448]             }
[08:28:11.448]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.448]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.448]         }
[08:28:11.448]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.448]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.448]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.448]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.448]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.448]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.448]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.448]             base::names(...future.oldOptions))
[08:28:11.448]     }
[08:28:11.448]     if (FALSE) {
[08:28:11.448]     }
[08:28:11.448]     else {
[08:28:11.448]         if (TRUE) {
[08:28:11.448]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.448]                 open = "w")
[08:28:11.448]         }
[08:28:11.448]         else {
[08:28:11.448]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.448]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.448]         }
[08:28:11.448]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.448]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.448]             base::sink(type = "output", split = FALSE)
[08:28:11.448]             base::close(...future.stdout)
[08:28:11.448]         }, add = TRUE)
[08:28:11.448]     }
[08:28:11.448]     ...future.frame <- base::sys.nframe()
[08:28:11.448]     ...future.conditions <- base::list()
[08:28:11.448]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.448]     if (FALSE) {
[08:28:11.448]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.448]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.448]     }
[08:28:11.448]     ...future.result <- base::tryCatch({
[08:28:11.448]         base::withCallingHandlers({
[08:28:11.448]             ...future.value <- base::withVisible(base::local({
[08:28:11.448]                 ...future.makeSendCondition <- base::local({
[08:28:11.448]                   sendCondition <- NULL
[08:28:11.448]                   function(frame = 1L) {
[08:28:11.448]                     if (is.function(sendCondition)) 
[08:28:11.448]                       return(sendCondition)
[08:28:11.448]                     ns <- getNamespace("parallel")
[08:28:11.448]                     if (exists("sendData", mode = "function", 
[08:28:11.448]                       envir = ns)) {
[08:28:11.448]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.448]                         envir = ns)
[08:28:11.448]                       envir <- sys.frame(frame)
[08:28:11.448]                       master <- NULL
[08:28:11.448]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.448]                         !identical(envir, emptyenv())) {
[08:28:11.448]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.448]                           inherits = FALSE)) {
[08:28:11.448]                           master <- get("master", mode = "list", 
[08:28:11.448]                             envir = envir, inherits = FALSE)
[08:28:11.448]                           if (inherits(master, c("SOCKnode", 
[08:28:11.448]                             "SOCK0node"))) {
[08:28:11.448]                             sendCondition <<- function(cond) {
[08:28:11.448]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.448]                                 success = TRUE)
[08:28:11.448]                               parallel_sendData(master, data)
[08:28:11.448]                             }
[08:28:11.448]                             return(sendCondition)
[08:28:11.448]                           }
[08:28:11.448]                         }
[08:28:11.448]                         frame <- frame + 1L
[08:28:11.448]                         envir <- sys.frame(frame)
[08:28:11.448]                       }
[08:28:11.448]                     }
[08:28:11.448]                     sendCondition <<- function(cond) NULL
[08:28:11.448]                   }
[08:28:11.448]                 })
[08:28:11.448]                 withCallingHandlers({
[08:28:11.448]                   {
[08:28:11.448]                     x["a"] <- list(1)
[08:28:11.448]                     x
[08:28:11.448]                   }
[08:28:11.448]                 }, immediateCondition = function(cond) {
[08:28:11.448]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.448]                   sendCondition(cond)
[08:28:11.448]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.448]                   {
[08:28:11.448]                     inherits <- base::inherits
[08:28:11.448]                     invokeRestart <- base::invokeRestart
[08:28:11.448]                     is.null <- base::is.null
[08:28:11.448]                     muffled <- FALSE
[08:28:11.448]                     if (inherits(cond, "message")) {
[08:28:11.448]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.448]                       if (muffled) 
[08:28:11.448]                         invokeRestart("muffleMessage")
[08:28:11.448]                     }
[08:28:11.448]                     else if (inherits(cond, "warning")) {
[08:28:11.448]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.448]                       if (muffled) 
[08:28:11.448]                         invokeRestart("muffleWarning")
[08:28:11.448]                     }
[08:28:11.448]                     else if (inherits(cond, "condition")) {
[08:28:11.448]                       if (!is.null(pattern)) {
[08:28:11.448]                         computeRestarts <- base::computeRestarts
[08:28:11.448]                         grepl <- base::grepl
[08:28:11.448]                         restarts <- computeRestarts(cond)
[08:28:11.448]                         for (restart in restarts) {
[08:28:11.448]                           name <- restart$name
[08:28:11.448]                           if (is.null(name)) 
[08:28:11.448]                             next
[08:28:11.448]                           if (!grepl(pattern, name)) 
[08:28:11.448]                             next
[08:28:11.448]                           invokeRestart(restart)
[08:28:11.448]                           muffled <- TRUE
[08:28:11.448]                           break
[08:28:11.448]                         }
[08:28:11.448]                       }
[08:28:11.448]                     }
[08:28:11.448]                     invisible(muffled)
[08:28:11.448]                   }
[08:28:11.448]                   muffleCondition(cond)
[08:28:11.448]                 })
[08:28:11.448]             }))
[08:28:11.448]             future::FutureResult(value = ...future.value$value, 
[08:28:11.448]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.448]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.448]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.448]                     ...future.globalenv.names))
[08:28:11.448]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.448]         }, condition = base::local({
[08:28:11.448]             c <- base::c
[08:28:11.448]             inherits <- base::inherits
[08:28:11.448]             invokeRestart <- base::invokeRestart
[08:28:11.448]             length <- base::length
[08:28:11.448]             list <- base::list
[08:28:11.448]             seq.int <- base::seq.int
[08:28:11.448]             signalCondition <- base::signalCondition
[08:28:11.448]             sys.calls <- base::sys.calls
[08:28:11.448]             `[[` <- base::`[[`
[08:28:11.448]             `+` <- base::`+`
[08:28:11.448]             `<<-` <- base::`<<-`
[08:28:11.448]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.448]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.448]                   3L)]
[08:28:11.448]             }
[08:28:11.448]             function(cond) {
[08:28:11.448]                 is_error <- inherits(cond, "error")
[08:28:11.448]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.448]                   NULL)
[08:28:11.448]                 if (is_error) {
[08:28:11.448]                   sessionInformation <- function() {
[08:28:11.448]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.448]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.448]                       search = base::search(), system = base::Sys.info())
[08:28:11.448]                   }
[08:28:11.448]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.448]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.448]                     cond$call), session = sessionInformation(), 
[08:28:11.448]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.448]                   signalCondition(cond)
[08:28:11.448]                 }
[08:28:11.448]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.448]                 "immediateCondition"))) {
[08:28:11.448]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.448]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.448]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.448]                   if (TRUE && !signal) {
[08:28:11.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.448]                     {
[08:28:11.448]                       inherits <- base::inherits
[08:28:11.448]                       invokeRestart <- base::invokeRestart
[08:28:11.448]                       is.null <- base::is.null
[08:28:11.448]                       muffled <- FALSE
[08:28:11.448]                       if (inherits(cond, "message")) {
[08:28:11.448]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.448]                         if (muffled) 
[08:28:11.448]                           invokeRestart("muffleMessage")
[08:28:11.448]                       }
[08:28:11.448]                       else if (inherits(cond, "warning")) {
[08:28:11.448]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.448]                         if (muffled) 
[08:28:11.448]                           invokeRestart("muffleWarning")
[08:28:11.448]                       }
[08:28:11.448]                       else if (inherits(cond, "condition")) {
[08:28:11.448]                         if (!is.null(pattern)) {
[08:28:11.448]                           computeRestarts <- base::computeRestarts
[08:28:11.448]                           grepl <- base::grepl
[08:28:11.448]                           restarts <- computeRestarts(cond)
[08:28:11.448]                           for (restart in restarts) {
[08:28:11.448]                             name <- restart$name
[08:28:11.448]                             if (is.null(name)) 
[08:28:11.448]                               next
[08:28:11.448]                             if (!grepl(pattern, name)) 
[08:28:11.448]                               next
[08:28:11.448]                             invokeRestart(restart)
[08:28:11.448]                             muffled <- TRUE
[08:28:11.448]                             break
[08:28:11.448]                           }
[08:28:11.448]                         }
[08:28:11.448]                       }
[08:28:11.448]                       invisible(muffled)
[08:28:11.448]                     }
[08:28:11.448]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.448]                   }
[08:28:11.448]                 }
[08:28:11.448]                 else {
[08:28:11.448]                   if (TRUE) {
[08:28:11.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.448]                     {
[08:28:11.448]                       inherits <- base::inherits
[08:28:11.448]                       invokeRestart <- base::invokeRestart
[08:28:11.448]                       is.null <- base::is.null
[08:28:11.448]                       muffled <- FALSE
[08:28:11.448]                       if (inherits(cond, "message")) {
[08:28:11.448]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.448]                         if (muffled) 
[08:28:11.448]                           invokeRestart("muffleMessage")
[08:28:11.448]                       }
[08:28:11.448]                       else if (inherits(cond, "warning")) {
[08:28:11.448]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.448]                         if (muffled) 
[08:28:11.448]                           invokeRestart("muffleWarning")
[08:28:11.448]                       }
[08:28:11.448]                       else if (inherits(cond, "condition")) {
[08:28:11.448]                         if (!is.null(pattern)) {
[08:28:11.448]                           computeRestarts <- base::computeRestarts
[08:28:11.448]                           grepl <- base::grepl
[08:28:11.448]                           restarts <- computeRestarts(cond)
[08:28:11.448]                           for (restart in restarts) {
[08:28:11.448]                             name <- restart$name
[08:28:11.448]                             if (is.null(name)) 
[08:28:11.448]                               next
[08:28:11.448]                             if (!grepl(pattern, name)) 
[08:28:11.448]                               next
[08:28:11.448]                             invokeRestart(restart)
[08:28:11.448]                             muffled <- TRUE
[08:28:11.448]                             break
[08:28:11.448]                           }
[08:28:11.448]                         }
[08:28:11.448]                       }
[08:28:11.448]                       invisible(muffled)
[08:28:11.448]                     }
[08:28:11.448]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.448]                   }
[08:28:11.448]                 }
[08:28:11.448]             }
[08:28:11.448]         }))
[08:28:11.448]     }, error = function(ex) {
[08:28:11.448]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.448]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.448]                 ...future.rng), started = ...future.startTime, 
[08:28:11.448]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.448]             version = "1.8"), class = "FutureResult")
[08:28:11.448]     }, finally = {
[08:28:11.448]         if (!identical(...future.workdir, getwd())) 
[08:28:11.448]             setwd(...future.workdir)
[08:28:11.448]         {
[08:28:11.448]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.448]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.448]             }
[08:28:11.448]             base::options(...future.oldOptions)
[08:28:11.448]             if (.Platform$OS.type == "windows") {
[08:28:11.448]                 old_names <- names(...future.oldEnvVars)
[08:28:11.448]                 envs <- base::Sys.getenv()
[08:28:11.448]                 names <- names(envs)
[08:28:11.448]                 common <- intersect(names, old_names)
[08:28:11.448]                 added <- setdiff(names, old_names)
[08:28:11.448]                 removed <- setdiff(old_names, names)
[08:28:11.448]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.448]                   envs[common]]
[08:28:11.448]                 NAMES <- toupper(changed)
[08:28:11.448]                 args <- list()
[08:28:11.448]                 for (kk in seq_along(NAMES)) {
[08:28:11.448]                   name <- changed[[kk]]
[08:28:11.448]                   NAME <- NAMES[[kk]]
[08:28:11.448]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.448]                     next
[08:28:11.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.448]                 }
[08:28:11.448]                 NAMES <- toupper(added)
[08:28:11.448]                 for (kk in seq_along(NAMES)) {
[08:28:11.448]                   name <- added[[kk]]
[08:28:11.448]                   NAME <- NAMES[[kk]]
[08:28:11.448]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.448]                     next
[08:28:11.448]                   args[[name]] <- ""
[08:28:11.448]                 }
[08:28:11.448]                 NAMES <- toupper(removed)
[08:28:11.448]                 for (kk in seq_along(NAMES)) {
[08:28:11.448]                   name <- removed[[kk]]
[08:28:11.448]                   NAME <- NAMES[[kk]]
[08:28:11.448]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.448]                     next
[08:28:11.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.448]                 }
[08:28:11.448]                 if (length(args) > 0) 
[08:28:11.448]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.448]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.448]             }
[08:28:11.448]             else {
[08:28:11.448]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.448]             }
[08:28:11.448]             {
[08:28:11.448]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.448]                   0L) {
[08:28:11.448]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.448]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.448]                   base::options(opts)
[08:28:11.448]                 }
[08:28:11.448]                 {
[08:28:11.448]                   {
[08:28:11.448]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.448]                     NULL
[08:28:11.448]                   }
[08:28:11.448]                   options(future.plan = NULL)
[08:28:11.448]                   if (is.na(NA_character_)) 
[08:28:11.448]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.448]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.448]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.448]                     .init = FALSE)
[08:28:11.448]                 }
[08:28:11.448]             }
[08:28:11.448]         }
[08:28:11.448]     })
[08:28:11.448]     if (TRUE) {
[08:28:11.448]         base::sink(type = "output", split = FALSE)
[08:28:11.448]         if (TRUE) {
[08:28:11.448]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.448]         }
[08:28:11.448]         else {
[08:28:11.448]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.448]         }
[08:28:11.448]         base::close(...future.stdout)
[08:28:11.448]         ...future.stdout <- NULL
[08:28:11.448]     }
[08:28:11.448]     ...future.result$conditions <- ...future.conditions
[08:28:11.448]     ...future.result$finished <- base::Sys.time()
[08:28:11.448]     ...future.result
[08:28:11.448] }
[08:28:11.451] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:11.451] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:11.452] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:11.452] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:11.452] MultisessionFuture started
[08:28:11.452] - Launch lazy future ... done
[08:28:11.452] run() for ‘MultisessionFuture’ ... done
[08:28:11.452] result() for ClusterFuture ...
[08:28:11.453] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.453] - Validating connection of MultisessionFuture
[08:28:11.494] - received message: FutureResult
[08:28:11.494] - Received FutureResult
[08:28:11.495] - Erased future from FutureRegistry
[08:28:11.495] result() for ClusterFuture ...
[08:28:11.495] - result already collected: FutureResult
[08:28:11.495] result() for ClusterFuture ... done
[08:28:11.495] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.495] result() for ClusterFuture ... done
[08:28:11.495] result() for ClusterFuture ...
[08:28:11.495] - result already collected: FutureResult
[08:28:11.495] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.496] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.496] Searching for globals...
[08:28:11.498] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:11.498] Searching for globals ... DONE
[08:28:11.498] Resolving globals: TRUE
[08:28:11.498] Resolving any globals that are futures ...
[08:28:11.499] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:28:11.499] Resolving any globals that are futures ... DONE
[08:28:11.499] Resolving futures part of globals (recursively) ...
[08:28:11.499] resolve() on list ...
[08:28:11.499]  recursive: 99
[08:28:11.499]  length: 1
[08:28:11.500]  elements: ‘x’
[08:28:11.500]  length: 0 (resolved future 1)
[08:28:11.500] resolve() on list ... DONE
[08:28:11.500] - globals: [1] ‘x’
[08:28:11.500] Resolving futures part of globals (recursively) ... DONE
[08:28:11.500] The total size of the 1 globals is 31 bytes (31 bytes)
[08:28:11.500] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[08:28:11.501] - globals: [1] ‘x’
[08:28:11.501] 
[08:28:11.501] getGlobalsAndPackages() ... DONE
[08:28:11.501] run() for ‘Future’ ...
[08:28:11.501] - state: ‘created’
[08:28:11.501] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.515] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.515] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.515]   - Field: ‘node’
[08:28:11.515]   - Field: ‘label’
[08:28:11.515]   - Field: ‘local’
[08:28:11.515]   - Field: ‘owner’
[08:28:11.516]   - Field: ‘envir’
[08:28:11.516]   - Field: ‘workers’
[08:28:11.516]   - Field: ‘packages’
[08:28:11.516]   - Field: ‘gc’
[08:28:11.516]   - Field: ‘conditions’
[08:28:11.516]   - Field: ‘persistent’
[08:28:11.516]   - Field: ‘expr’
[08:28:11.516]   - Field: ‘uuid’
[08:28:11.516]   - Field: ‘seed’
[08:28:11.516]   - Field: ‘version’
[08:28:11.516]   - Field: ‘result’
[08:28:11.516]   - Field: ‘asynchronous’
[08:28:11.517]   - Field: ‘calls’
[08:28:11.517]   - Field: ‘globals’
[08:28:11.517]   - Field: ‘stdout’
[08:28:11.517]   - Field: ‘earlySignal’
[08:28:11.517]   - Field: ‘lazy’
[08:28:11.517]   - Field: ‘state’
[08:28:11.517] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.517] - Launch lazy future ...
[08:28:11.517] Packages needed by the future expression (n = 0): <none>
[08:28:11.518] Packages needed by future strategies (n = 0): <none>
[08:28:11.518] {
[08:28:11.518]     {
[08:28:11.518]         {
[08:28:11.518]             ...future.startTime <- base::Sys.time()
[08:28:11.518]             {
[08:28:11.518]                 {
[08:28:11.518]                   {
[08:28:11.518]                     {
[08:28:11.518]                       base::local({
[08:28:11.518]                         has_future <- base::requireNamespace("future", 
[08:28:11.518]                           quietly = TRUE)
[08:28:11.518]                         if (has_future) {
[08:28:11.518]                           ns <- base::getNamespace("future")
[08:28:11.518]                           version <- ns[[".package"]][["version"]]
[08:28:11.518]                           if (is.null(version)) 
[08:28:11.518]                             version <- utils::packageVersion("future")
[08:28:11.518]                         }
[08:28:11.518]                         else {
[08:28:11.518]                           version <- NULL
[08:28:11.518]                         }
[08:28:11.518]                         if (!has_future || version < "1.8.0") {
[08:28:11.518]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.518]                             "", base::R.version$version.string), 
[08:28:11.518]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.518]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.518]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.518]                               "release", "version")], collapse = " "), 
[08:28:11.518]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.518]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.518]                             info)
[08:28:11.518]                           info <- base::paste(info, collapse = "; ")
[08:28:11.518]                           if (!has_future) {
[08:28:11.518]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.518]                               info)
[08:28:11.518]                           }
[08:28:11.518]                           else {
[08:28:11.518]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.518]                               info, version)
[08:28:11.518]                           }
[08:28:11.518]                           base::stop(msg)
[08:28:11.518]                         }
[08:28:11.518]                       })
[08:28:11.518]                     }
[08:28:11.518]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.518]                     base::options(mc.cores = 1L)
[08:28:11.518]                   }
[08:28:11.518]                   ...future.strategy.old <- future::plan("list")
[08:28:11.518]                   options(future.plan = NULL)
[08:28:11.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.518]                 }
[08:28:11.518]                 ...future.workdir <- getwd()
[08:28:11.518]             }
[08:28:11.518]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.518]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.518]         }
[08:28:11.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.518]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.518]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.518]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.518]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.518]             base::names(...future.oldOptions))
[08:28:11.518]     }
[08:28:11.518]     if (FALSE) {
[08:28:11.518]     }
[08:28:11.518]     else {
[08:28:11.518]         if (TRUE) {
[08:28:11.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.518]                 open = "w")
[08:28:11.518]         }
[08:28:11.518]         else {
[08:28:11.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.518]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.518]         }
[08:28:11.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.518]             base::sink(type = "output", split = FALSE)
[08:28:11.518]             base::close(...future.stdout)
[08:28:11.518]         }, add = TRUE)
[08:28:11.518]     }
[08:28:11.518]     ...future.frame <- base::sys.nframe()
[08:28:11.518]     ...future.conditions <- base::list()
[08:28:11.518]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.518]     if (FALSE) {
[08:28:11.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.518]     }
[08:28:11.518]     ...future.result <- base::tryCatch({
[08:28:11.518]         base::withCallingHandlers({
[08:28:11.518]             ...future.value <- base::withVisible(base::local({
[08:28:11.518]                 ...future.makeSendCondition <- base::local({
[08:28:11.518]                   sendCondition <- NULL
[08:28:11.518]                   function(frame = 1L) {
[08:28:11.518]                     if (is.function(sendCondition)) 
[08:28:11.518]                       return(sendCondition)
[08:28:11.518]                     ns <- getNamespace("parallel")
[08:28:11.518]                     if (exists("sendData", mode = "function", 
[08:28:11.518]                       envir = ns)) {
[08:28:11.518]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.518]                         envir = ns)
[08:28:11.518]                       envir <- sys.frame(frame)
[08:28:11.518]                       master <- NULL
[08:28:11.518]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.518]                         !identical(envir, emptyenv())) {
[08:28:11.518]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.518]                           inherits = FALSE)) {
[08:28:11.518]                           master <- get("master", mode = "list", 
[08:28:11.518]                             envir = envir, inherits = FALSE)
[08:28:11.518]                           if (inherits(master, c("SOCKnode", 
[08:28:11.518]                             "SOCK0node"))) {
[08:28:11.518]                             sendCondition <<- function(cond) {
[08:28:11.518]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.518]                                 success = TRUE)
[08:28:11.518]                               parallel_sendData(master, data)
[08:28:11.518]                             }
[08:28:11.518]                             return(sendCondition)
[08:28:11.518]                           }
[08:28:11.518]                         }
[08:28:11.518]                         frame <- frame + 1L
[08:28:11.518]                         envir <- sys.frame(frame)
[08:28:11.518]                       }
[08:28:11.518]                     }
[08:28:11.518]                     sendCondition <<- function(cond) NULL
[08:28:11.518]                   }
[08:28:11.518]                 })
[08:28:11.518]                 withCallingHandlers({
[08:28:11.518]                   {
[08:28:11.518]                     x["a"] <- list(1)
[08:28:11.518]                     x
[08:28:11.518]                   }
[08:28:11.518]                 }, immediateCondition = function(cond) {
[08:28:11.518]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.518]                   sendCondition(cond)
[08:28:11.518]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.518]                   {
[08:28:11.518]                     inherits <- base::inherits
[08:28:11.518]                     invokeRestart <- base::invokeRestart
[08:28:11.518]                     is.null <- base::is.null
[08:28:11.518]                     muffled <- FALSE
[08:28:11.518]                     if (inherits(cond, "message")) {
[08:28:11.518]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.518]                       if (muffled) 
[08:28:11.518]                         invokeRestart("muffleMessage")
[08:28:11.518]                     }
[08:28:11.518]                     else if (inherits(cond, "warning")) {
[08:28:11.518]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.518]                       if (muffled) 
[08:28:11.518]                         invokeRestart("muffleWarning")
[08:28:11.518]                     }
[08:28:11.518]                     else if (inherits(cond, "condition")) {
[08:28:11.518]                       if (!is.null(pattern)) {
[08:28:11.518]                         computeRestarts <- base::computeRestarts
[08:28:11.518]                         grepl <- base::grepl
[08:28:11.518]                         restarts <- computeRestarts(cond)
[08:28:11.518]                         for (restart in restarts) {
[08:28:11.518]                           name <- restart$name
[08:28:11.518]                           if (is.null(name)) 
[08:28:11.518]                             next
[08:28:11.518]                           if (!grepl(pattern, name)) 
[08:28:11.518]                             next
[08:28:11.518]                           invokeRestart(restart)
[08:28:11.518]                           muffled <- TRUE
[08:28:11.518]                           break
[08:28:11.518]                         }
[08:28:11.518]                       }
[08:28:11.518]                     }
[08:28:11.518]                     invisible(muffled)
[08:28:11.518]                   }
[08:28:11.518]                   muffleCondition(cond)
[08:28:11.518]                 })
[08:28:11.518]             }))
[08:28:11.518]             future::FutureResult(value = ...future.value$value, 
[08:28:11.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.518]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.518]                     ...future.globalenv.names))
[08:28:11.518]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.518]         }, condition = base::local({
[08:28:11.518]             c <- base::c
[08:28:11.518]             inherits <- base::inherits
[08:28:11.518]             invokeRestart <- base::invokeRestart
[08:28:11.518]             length <- base::length
[08:28:11.518]             list <- base::list
[08:28:11.518]             seq.int <- base::seq.int
[08:28:11.518]             signalCondition <- base::signalCondition
[08:28:11.518]             sys.calls <- base::sys.calls
[08:28:11.518]             `[[` <- base::`[[`
[08:28:11.518]             `+` <- base::`+`
[08:28:11.518]             `<<-` <- base::`<<-`
[08:28:11.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.518]                   3L)]
[08:28:11.518]             }
[08:28:11.518]             function(cond) {
[08:28:11.518]                 is_error <- inherits(cond, "error")
[08:28:11.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.518]                   NULL)
[08:28:11.518]                 if (is_error) {
[08:28:11.518]                   sessionInformation <- function() {
[08:28:11.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.518]                       search = base::search(), system = base::Sys.info())
[08:28:11.518]                   }
[08:28:11.518]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.518]                     cond$call), session = sessionInformation(), 
[08:28:11.518]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.518]                   signalCondition(cond)
[08:28:11.518]                 }
[08:28:11.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.518]                 "immediateCondition"))) {
[08:28:11.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.518]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.518]                   if (TRUE && !signal) {
[08:28:11.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.518]                     {
[08:28:11.518]                       inherits <- base::inherits
[08:28:11.518]                       invokeRestart <- base::invokeRestart
[08:28:11.518]                       is.null <- base::is.null
[08:28:11.518]                       muffled <- FALSE
[08:28:11.518]                       if (inherits(cond, "message")) {
[08:28:11.518]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.518]                         if (muffled) 
[08:28:11.518]                           invokeRestart("muffleMessage")
[08:28:11.518]                       }
[08:28:11.518]                       else if (inherits(cond, "warning")) {
[08:28:11.518]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.518]                         if (muffled) 
[08:28:11.518]                           invokeRestart("muffleWarning")
[08:28:11.518]                       }
[08:28:11.518]                       else if (inherits(cond, "condition")) {
[08:28:11.518]                         if (!is.null(pattern)) {
[08:28:11.518]                           computeRestarts <- base::computeRestarts
[08:28:11.518]                           grepl <- base::grepl
[08:28:11.518]                           restarts <- computeRestarts(cond)
[08:28:11.518]                           for (restart in restarts) {
[08:28:11.518]                             name <- restart$name
[08:28:11.518]                             if (is.null(name)) 
[08:28:11.518]                               next
[08:28:11.518]                             if (!grepl(pattern, name)) 
[08:28:11.518]                               next
[08:28:11.518]                             invokeRestart(restart)
[08:28:11.518]                             muffled <- TRUE
[08:28:11.518]                             break
[08:28:11.518]                           }
[08:28:11.518]                         }
[08:28:11.518]                       }
[08:28:11.518]                       invisible(muffled)
[08:28:11.518]                     }
[08:28:11.518]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.518]                   }
[08:28:11.518]                 }
[08:28:11.518]                 else {
[08:28:11.518]                   if (TRUE) {
[08:28:11.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.518]                     {
[08:28:11.518]                       inherits <- base::inherits
[08:28:11.518]                       invokeRestart <- base::invokeRestart
[08:28:11.518]                       is.null <- base::is.null
[08:28:11.518]                       muffled <- FALSE
[08:28:11.518]                       if (inherits(cond, "message")) {
[08:28:11.518]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.518]                         if (muffled) 
[08:28:11.518]                           invokeRestart("muffleMessage")
[08:28:11.518]                       }
[08:28:11.518]                       else if (inherits(cond, "warning")) {
[08:28:11.518]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.518]                         if (muffled) 
[08:28:11.518]                           invokeRestart("muffleWarning")
[08:28:11.518]                       }
[08:28:11.518]                       else if (inherits(cond, "condition")) {
[08:28:11.518]                         if (!is.null(pattern)) {
[08:28:11.518]                           computeRestarts <- base::computeRestarts
[08:28:11.518]                           grepl <- base::grepl
[08:28:11.518]                           restarts <- computeRestarts(cond)
[08:28:11.518]                           for (restart in restarts) {
[08:28:11.518]                             name <- restart$name
[08:28:11.518]                             if (is.null(name)) 
[08:28:11.518]                               next
[08:28:11.518]                             if (!grepl(pattern, name)) 
[08:28:11.518]                               next
[08:28:11.518]                             invokeRestart(restart)
[08:28:11.518]                             muffled <- TRUE
[08:28:11.518]                             break
[08:28:11.518]                           }
[08:28:11.518]                         }
[08:28:11.518]                       }
[08:28:11.518]                       invisible(muffled)
[08:28:11.518]                     }
[08:28:11.518]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.518]                   }
[08:28:11.518]                 }
[08:28:11.518]             }
[08:28:11.518]         }))
[08:28:11.518]     }, error = function(ex) {
[08:28:11.518]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.518]                 ...future.rng), started = ...future.startTime, 
[08:28:11.518]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.518]             version = "1.8"), class = "FutureResult")
[08:28:11.518]     }, finally = {
[08:28:11.518]         if (!identical(...future.workdir, getwd())) 
[08:28:11.518]             setwd(...future.workdir)
[08:28:11.518]         {
[08:28:11.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.518]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.518]             }
[08:28:11.518]             base::options(...future.oldOptions)
[08:28:11.518]             if (.Platform$OS.type == "windows") {
[08:28:11.518]                 old_names <- names(...future.oldEnvVars)
[08:28:11.518]                 envs <- base::Sys.getenv()
[08:28:11.518]                 names <- names(envs)
[08:28:11.518]                 common <- intersect(names, old_names)
[08:28:11.518]                 added <- setdiff(names, old_names)
[08:28:11.518]                 removed <- setdiff(old_names, names)
[08:28:11.518]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.518]                   envs[common]]
[08:28:11.518]                 NAMES <- toupper(changed)
[08:28:11.518]                 args <- list()
[08:28:11.518]                 for (kk in seq_along(NAMES)) {
[08:28:11.518]                   name <- changed[[kk]]
[08:28:11.518]                   NAME <- NAMES[[kk]]
[08:28:11.518]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.518]                     next
[08:28:11.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.518]                 }
[08:28:11.518]                 NAMES <- toupper(added)
[08:28:11.518]                 for (kk in seq_along(NAMES)) {
[08:28:11.518]                   name <- added[[kk]]
[08:28:11.518]                   NAME <- NAMES[[kk]]
[08:28:11.518]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.518]                     next
[08:28:11.518]                   args[[name]] <- ""
[08:28:11.518]                 }
[08:28:11.518]                 NAMES <- toupper(removed)
[08:28:11.518]                 for (kk in seq_along(NAMES)) {
[08:28:11.518]                   name <- removed[[kk]]
[08:28:11.518]                   NAME <- NAMES[[kk]]
[08:28:11.518]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.518]                     next
[08:28:11.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.518]                 }
[08:28:11.518]                 if (length(args) > 0) 
[08:28:11.518]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.518]             }
[08:28:11.518]             else {
[08:28:11.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.518]             }
[08:28:11.518]             {
[08:28:11.518]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.518]                   0L) {
[08:28:11.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.518]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.518]                   base::options(opts)
[08:28:11.518]                 }
[08:28:11.518]                 {
[08:28:11.518]                   {
[08:28:11.518]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.518]                     NULL
[08:28:11.518]                   }
[08:28:11.518]                   options(future.plan = NULL)
[08:28:11.518]                   if (is.na(NA_character_)) 
[08:28:11.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.518]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.518]                     .init = FALSE)
[08:28:11.518]                 }
[08:28:11.518]             }
[08:28:11.518]         }
[08:28:11.518]     })
[08:28:11.518]     if (TRUE) {
[08:28:11.518]         base::sink(type = "output", split = FALSE)
[08:28:11.518]         if (TRUE) {
[08:28:11.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.518]         }
[08:28:11.518]         else {
[08:28:11.518]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.518]         }
[08:28:11.518]         base::close(...future.stdout)
[08:28:11.518]         ...future.stdout <- NULL
[08:28:11.518]     }
[08:28:11.518]     ...future.result$conditions <- ...future.conditions
[08:28:11.518]     ...future.result$finished <- base::Sys.time()
[08:28:11.518]     ...future.result
[08:28:11.518] }
[08:28:11.521] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[08:28:11.521] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:11.521] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:11.522] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[08:28:11.522] MultisessionFuture started
[08:28:11.522] - Launch lazy future ... done
[08:28:11.522] run() for ‘MultisessionFuture’ ... done
[08:28:11.522] result() for ClusterFuture ...
[08:28:11.523] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.523] - Validating connection of MultisessionFuture
[08:28:11.564] - received message: FutureResult
[08:28:11.565] - Received FutureResult
[08:28:11.565] - Erased future from FutureRegistry
[08:28:11.565] result() for ClusterFuture ...
[08:28:11.565] - result already collected: FutureResult
[08:28:11.565] result() for ClusterFuture ... done
[08:28:11.565] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.565] result() for ClusterFuture ... done
[08:28:11.565] result() for ClusterFuture ...
[08:28:11.565] - result already collected: FutureResult
[08:28:11.565] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:11.566] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:28:11.566] Searching for globals...
[08:28:11.568] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:28:11.568] Searching for globals ... DONE
[08:28:11.569] Resolving globals: TRUE
[08:28:11.569] Resolving any globals that are futures ...
[08:28:11.569] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:28:11.569] Resolving any globals that are futures ... DONE
[08:28:11.569] Resolving futures part of globals (recursively) ...
[08:28:11.569] resolve() on list ...
[08:28:11.570]  recursive: 99
[08:28:11.570]  length: 2
[08:28:11.570]  elements: ‘x’, ‘name’
[08:28:11.570]  length: 1 (resolved future 1)
[08:28:11.570]  length: 0 (resolved future 2)
[08:28:11.570] resolve() on list ... DONE
[08:28:11.570] - globals: [2] ‘x’, ‘name’
[08:28:11.570] Resolving futures part of globals (recursively) ... DONE
[08:28:11.570] The total size of the 2 globals is 71 bytes (71 bytes)
[08:28:11.571] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 71 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (40 bytes of class ‘character’) and ‘x’ (31 bytes of class ‘list’)
[08:28:11.571] - globals: [2] ‘x’, ‘name’
[08:28:11.571] 
[08:28:11.571] getGlobalsAndPackages() ... DONE
[08:28:11.571] run() for ‘Future’ ...
[08:28:11.571] - state: ‘created’
[08:28:11.572] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:11.586] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:11.586] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:11.586]   - Field: ‘node’
[08:28:11.586]   - Field: ‘label’
[08:28:11.586]   - Field: ‘local’
[08:28:11.587]   - Field: ‘owner’
[08:28:11.587]   - Field: ‘envir’
[08:28:11.587]   - Field: ‘workers’
[08:28:11.587]   - Field: ‘packages’
[08:28:11.587]   - Field: ‘gc’
[08:28:11.587]   - Field: ‘conditions’
[08:28:11.587]   - Field: ‘persistent’
[08:28:11.587]   - Field: ‘expr’
[08:28:11.587]   - Field: ‘uuid’
[08:28:11.587]   - Field: ‘seed’
[08:28:11.587]   - Field: ‘version’
[08:28:11.587]   - Field: ‘result’
[08:28:11.588]   - Field: ‘asynchronous’
[08:28:11.588]   - Field: ‘calls’
[08:28:11.588]   - Field: ‘globals’
[08:28:11.588]   - Field: ‘stdout’
[08:28:11.588]   - Field: ‘earlySignal’
[08:28:11.588]   - Field: ‘lazy’
[08:28:11.588]   - Field: ‘state’
[08:28:11.588] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:11.588] - Launch lazy future ...
[08:28:11.589] Packages needed by the future expression (n = 0): <none>
[08:28:11.589] Packages needed by future strategies (n = 0): <none>
[08:28:11.589] {
[08:28:11.589]     {
[08:28:11.589]         {
[08:28:11.589]             ...future.startTime <- base::Sys.time()
[08:28:11.589]             {
[08:28:11.589]                 {
[08:28:11.589]                   {
[08:28:11.589]                     {
[08:28:11.589]                       base::local({
[08:28:11.589]                         has_future <- base::requireNamespace("future", 
[08:28:11.589]                           quietly = TRUE)
[08:28:11.589]                         if (has_future) {
[08:28:11.589]                           ns <- base::getNamespace("future")
[08:28:11.589]                           version <- ns[[".package"]][["version"]]
[08:28:11.589]                           if (is.null(version)) 
[08:28:11.589]                             version <- utils::packageVersion("future")
[08:28:11.589]                         }
[08:28:11.589]                         else {
[08:28:11.589]                           version <- NULL
[08:28:11.589]                         }
[08:28:11.589]                         if (!has_future || version < "1.8.0") {
[08:28:11.589]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:11.589]                             "", base::R.version$version.string), 
[08:28:11.589]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:11.589]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:11.589]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:11.589]                               "release", "version")], collapse = " "), 
[08:28:11.589]                             hostname = base::Sys.info()[["nodename"]])
[08:28:11.589]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:11.589]                             info)
[08:28:11.589]                           info <- base::paste(info, collapse = "; ")
[08:28:11.589]                           if (!has_future) {
[08:28:11.589]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:11.589]                               info)
[08:28:11.589]                           }
[08:28:11.589]                           else {
[08:28:11.589]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:11.589]                               info, version)
[08:28:11.589]                           }
[08:28:11.589]                           base::stop(msg)
[08:28:11.589]                         }
[08:28:11.589]                       })
[08:28:11.589]                     }
[08:28:11.589]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:11.589]                     base::options(mc.cores = 1L)
[08:28:11.589]                   }
[08:28:11.589]                   ...future.strategy.old <- future::plan("list")
[08:28:11.589]                   options(future.plan = NULL)
[08:28:11.589]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.589]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:11.589]                 }
[08:28:11.589]                 ...future.workdir <- getwd()
[08:28:11.589]             }
[08:28:11.589]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:11.589]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:11.589]         }
[08:28:11.589]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[08:28:11.589]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:11.589]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[08:28:11.589]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:11.589]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:11.589]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:11.589]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:11.589]             base::names(...future.oldOptions))
[08:28:11.589]     }
[08:28:11.589]     if (FALSE) {
[08:28:11.589]     }
[08:28:11.589]     else {
[08:28:11.589]         if (TRUE) {
[08:28:11.589]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:11.589]                 open = "w")
[08:28:11.589]         }
[08:28:11.589]         else {
[08:28:11.589]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:11.589]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:11.589]         }
[08:28:11.589]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:11.589]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:11.589]             base::sink(type = "output", split = FALSE)
[08:28:11.589]             base::close(...future.stdout)
[08:28:11.589]         }, add = TRUE)
[08:28:11.589]     }
[08:28:11.589]     ...future.frame <- base::sys.nframe()
[08:28:11.589]     ...future.conditions <- base::list()
[08:28:11.589]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:11.589]     if (FALSE) {
[08:28:11.589]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:11.589]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:11.589]     }
[08:28:11.589]     ...future.result <- base::tryCatch({
[08:28:11.589]         base::withCallingHandlers({
[08:28:11.589]             ...future.value <- base::withVisible(base::local({
[08:28:11.589]                 ...future.makeSendCondition <- base::local({
[08:28:11.589]                   sendCondition <- NULL
[08:28:11.589]                   function(frame = 1L) {
[08:28:11.589]                     if (is.function(sendCondition)) 
[08:28:11.589]                       return(sendCondition)
[08:28:11.589]                     ns <- getNamespace("parallel")
[08:28:11.589]                     if (exists("sendData", mode = "function", 
[08:28:11.589]                       envir = ns)) {
[08:28:11.589]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:11.589]                         envir = ns)
[08:28:11.589]                       envir <- sys.frame(frame)
[08:28:11.589]                       master <- NULL
[08:28:11.589]                       while (!identical(envir, .GlobalEnv) && 
[08:28:11.589]                         !identical(envir, emptyenv())) {
[08:28:11.589]                         if (exists("master", mode = "list", envir = envir, 
[08:28:11.589]                           inherits = FALSE)) {
[08:28:11.589]                           master <- get("master", mode = "list", 
[08:28:11.589]                             envir = envir, inherits = FALSE)
[08:28:11.589]                           if (inherits(master, c("SOCKnode", 
[08:28:11.589]                             "SOCK0node"))) {
[08:28:11.589]                             sendCondition <<- function(cond) {
[08:28:11.589]                               data <- list(type = "VALUE", value = cond, 
[08:28:11.589]                                 success = TRUE)
[08:28:11.589]                               parallel_sendData(master, data)
[08:28:11.589]                             }
[08:28:11.589]                             return(sendCondition)
[08:28:11.589]                           }
[08:28:11.589]                         }
[08:28:11.589]                         frame <- frame + 1L
[08:28:11.589]                         envir <- sys.frame(frame)
[08:28:11.589]                       }
[08:28:11.589]                     }
[08:28:11.589]                     sendCondition <<- function(cond) NULL
[08:28:11.589]                   }
[08:28:11.589]                 })
[08:28:11.589]                 withCallingHandlers({
[08:28:11.589]                   {
[08:28:11.589]                     x[name] <- list(1)
[08:28:11.589]                     x
[08:28:11.589]                   }
[08:28:11.589]                 }, immediateCondition = function(cond) {
[08:28:11.589]                   sendCondition <- ...future.makeSendCondition()
[08:28:11.589]                   sendCondition(cond)
[08:28:11.589]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.589]                   {
[08:28:11.589]                     inherits <- base::inherits
[08:28:11.589]                     invokeRestart <- base::invokeRestart
[08:28:11.589]                     is.null <- base::is.null
[08:28:11.589]                     muffled <- FALSE
[08:28:11.589]                     if (inherits(cond, "message")) {
[08:28:11.589]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:11.589]                       if (muffled) 
[08:28:11.589]                         invokeRestart("muffleMessage")
[08:28:11.589]                     }
[08:28:11.589]                     else if (inherits(cond, "warning")) {
[08:28:11.589]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:11.589]                       if (muffled) 
[08:28:11.589]                         invokeRestart("muffleWarning")
[08:28:11.589]                     }
[08:28:11.589]                     else if (inherits(cond, "condition")) {
[08:28:11.589]                       if (!is.null(pattern)) {
[08:28:11.589]                         computeRestarts <- base::computeRestarts
[08:28:11.589]                         grepl <- base::grepl
[08:28:11.589]                         restarts <- computeRestarts(cond)
[08:28:11.589]                         for (restart in restarts) {
[08:28:11.589]                           name <- restart$name
[08:28:11.589]                           if (is.null(name)) 
[08:28:11.589]                             next
[08:28:11.589]                           if (!grepl(pattern, name)) 
[08:28:11.589]                             next
[08:28:11.589]                           invokeRestart(restart)
[08:28:11.589]                           muffled <- TRUE
[08:28:11.589]                           break
[08:28:11.589]                         }
[08:28:11.589]                       }
[08:28:11.589]                     }
[08:28:11.589]                     invisible(muffled)
[08:28:11.589]                   }
[08:28:11.589]                   muffleCondition(cond)
[08:28:11.589]                 })
[08:28:11.589]             }))
[08:28:11.589]             future::FutureResult(value = ...future.value$value, 
[08:28:11.589]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.589]                   ...future.rng), globalenv = if (FALSE) 
[08:28:11.589]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:11.589]                     ...future.globalenv.names))
[08:28:11.589]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:11.589]         }, condition = base::local({
[08:28:11.589]             c <- base::c
[08:28:11.589]             inherits <- base::inherits
[08:28:11.589]             invokeRestart <- base::invokeRestart
[08:28:11.589]             length <- base::length
[08:28:11.589]             list <- base::list
[08:28:11.589]             seq.int <- base::seq.int
[08:28:11.589]             signalCondition <- base::signalCondition
[08:28:11.589]             sys.calls <- base::sys.calls
[08:28:11.589]             `[[` <- base::`[[`
[08:28:11.589]             `+` <- base::`+`
[08:28:11.589]             `<<-` <- base::`<<-`
[08:28:11.589]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:11.589]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:11.589]                   3L)]
[08:28:11.589]             }
[08:28:11.589]             function(cond) {
[08:28:11.589]                 is_error <- inherits(cond, "error")
[08:28:11.589]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:11.589]                   NULL)
[08:28:11.589]                 if (is_error) {
[08:28:11.589]                   sessionInformation <- function() {
[08:28:11.589]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:11.589]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:11.589]                       search = base::search(), system = base::Sys.info())
[08:28:11.589]                   }
[08:28:11.589]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.589]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:11.589]                     cond$call), session = sessionInformation(), 
[08:28:11.589]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:11.589]                   signalCondition(cond)
[08:28:11.589]                 }
[08:28:11.589]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:11.589]                 "immediateCondition"))) {
[08:28:11.589]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:11.589]                   ...future.conditions[[length(...future.conditions) + 
[08:28:11.589]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:11.589]                   if (TRUE && !signal) {
[08:28:11.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.589]                     {
[08:28:11.589]                       inherits <- base::inherits
[08:28:11.589]                       invokeRestart <- base::invokeRestart
[08:28:11.589]                       is.null <- base::is.null
[08:28:11.589]                       muffled <- FALSE
[08:28:11.589]                       if (inherits(cond, "message")) {
[08:28:11.589]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.589]                         if (muffled) 
[08:28:11.589]                           invokeRestart("muffleMessage")
[08:28:11.589]                       }
[08:28:11.589]                       else if (inherits(cond, "warning")) {
[08:28:11.589]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.589]                         if (muffled) 
[08:28:11.589]                           invokeRestart("muffleWarning")
[08:28:11.589]                       }
[08:28:11.589]                       else if (inherits(cond, "condition")) {
[08:28:11.589]                         if (!is.null(pattern)) {
[08:28:11.589]                           computeRestarts <- base::computeRestarts
[08:28:11.589]                           grepl <- base::grepl
[08:28:11.589]                           restarts <- computeRestarts(cond)
[08:28:11.589]                           for (restart in restarts) {
[08:28:11.589]                             name <- restart$name
[08:28:11.589]                             if (is.null(name)) 
[08:28:11.589]                               next
[08:28:11.589]                             if (!grepl(pattern, name)) 
[08:28:11.589]                               next
[08:28:11.589]                             invokeRestart(restart)
[08:28:11.589]                             muffled <- TRUE
[08:28:11.589]                             break
[08:28:11.589]                           }
[08:28:11.589]                         }
[08:28:11.589]                       }
[08:28:11.589]                       invisible(muffled)
[08:28:11.589]                     }
[08:28:11.589]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.589]                   }
[08:28:11.589]                 }
[08:28:11.589]                 else {
[08:28:11.589]                   if (TRUE) {
[08:28:11.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:11.589]                     {
[08:28:11.589]                       inherits <- base::inherits
[08:28:11.589]                       invokeRestart <- base::invokeRestart
[08:28:11.589]                       is.null <- base::is.null
[08:28:11.589]                       muffled <- FALSE
[08:28:11.589]                       if (inherits(cond, "message")) {
[08:28:11.589]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:11.589]                         if (muffled) 
[08:28:11.589]                           invokeRestart("muffleMessage")
[08:28:11.589]                       }
[08:28:11.589]                       else if (inherits(cond, "warning")) {
[08:28:11.589]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:11.589]                         if (muffled) 
[08:28:11.589]                           invokeRestart("muffleWarning")
[08:28:11.589]                       }
[08:28:11.589]                       else if (inherits(cond, "condition")) {
[08:28:11.589]                         if (!is.null(pattern)) {
[08:28:11.589]                           computeRestarts <- base::computeRestarts
[08:28:11.589]                           grepl <- base::grepl
[08:28:11.589]                           restarts <- computeRestarts(cond)
[08:28:11.589]                           for (restart in restarts) {
[08:28:11.589]                             name <- restart$name
[08:28:11.589]                             if (is.null(name)) 
[08:28:11.589]                               next
[08:28:11.589]                             if (!grepl(pattern, name)) 
[08:28:11.589]                               next
[08:28:11.589]                             invokeRestart(restart)
[08:28:11.589]                             muffled <- TRUE
[08:28:11.589]                             break
[08:28:11.589]                           }
[08:28:11.589]                         }
[08:28:11.589]                       }
[08:28:11.589]                       invisible(muffled)
[08:28:11.589]                     }
[08:28:11.589]                     muffleCondition(cond, pattern = "^muffle")
[08:28:11.589]                   }
[08:28:11.589]                 }
[08:28:11.589]             }
[08:28:11.589]         }))
[08:28:11.589]     }, error = function(ex) {
[08:28:11.589]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:11.589]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:11.589]                 ...future.rng), started = ...future.startTime, 
[08:28:11.589]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:11.589]             version = "1.8"), class = "FutureResult")
[08:28:11.589]     }, finally = {
[08:28:11.589]         if (!identical(...future.workdir, getwd())) 
[08:28:11.589]             setwd(...future.workdir)
[08:28:11.589]         {
[08:28:11.589]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:11.589]                 ...future.oldOptions$nwarnings <- NULL
[08:28:11.589]             }
[08:28:11.589]             base::options(...future.oldOptions)
[08:28:11.589]             if (.Platform$OS.type == "windows") {
[08:28:11.589]                 old_names <- names(...future.oldEnvVars)
[08:28:11.589]                 envs <- base::Sys.getenv()
[08:28:11.589]                 names <- names(envs)
[08:28:11.589]                 common <- intersect(names, old_names)
[08:28:11.589]                 added <- setdiff(names, old_names)
[08:28:11.589]                 removed <- setdiff(old_names, names)
[08:28:11.589]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:11.589]                   envs[common]]
[08:28:11.589]                 NAMES <- toupper(changed)
[08:28:11.589]                 args <- list()
[08:28:11.589]                 for (kk in seq_along(NAMES)) {
[08:28:11.589]                   name <- changed[[kk]]
[08:28:11.589]                   NAME <- NAMES[[kk]]
[08:28:11.589]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.589]                     next
[08:28:11.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.589]                 }
[08:28:11.589]                 NAMES <- toupper(added)
[08:28:11.589]                 for (kk in seq_along(NAMES)) {
[08:28:11.589]                   name <- added[[kk]]
[08:28:11.589]                   NAME <- NAMES[[kk]]
[08:28:11.589]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.589]                     next
[08:28:11.589]                   args[[name]] <- ""
[08:28:11.589]                 }
[08:28:11.589]                 NAMES <- toupper(removed)
[08:28:11.589]                 for (kk in seq_along(NAMES)) {
[08:28:11.589]                   name <- removed[[kk]]
[08:28:11.589]                   NAME <- NAMES[[kk]]
[08:28:11.589]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:11.589]                     next
[08:28:11.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:11.589]                 }
[08:28:11.589]                 if (length(args) > 0) 
[08:28:11.589]                   base::do.call(base::Sys.setenv, args = args)
[08:28:11.589]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:11.589]             }
[08:28:11.589]             else {
[08:28:11.589]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:11.589]             }
[08:28:11.589]             {
[08:28:11.589]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:11.589]                   0L) {
[08:28:11.589]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:11.589]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:11.589]                   base::options(opts)
[08:28:11.589]                 }
[08:28:11.589]                 {
[08:28:11.589]                   {
[08:28:11.589]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:11.589]                     NULL
[08:28:11.589]                   }
[08:28:11.589]                   options(future.plan = NULL)
[08:28:11.589]                   if (is.na(NA_character_)) 
[08:28:11.589]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:11.589]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:11.589]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:11.589]                     .init = FALSE)
[08:28:11.589]                 }
[08:28:11.589]             }
[08:28:11.589]         }
[08:28:11.589]     })
[08:28:11.589]     if (TRUE) {
[08:28:11.589]         base::sink(type = "output", split = FALSE)
[08:28:11.589]         if (TRUE) {
[08:28:11.589]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:11.589]         }
[08:28:11.589]         else {
[08:28:11.589]             ...future.result["stdout"] <- base::list(NULL)
[08:28:11.589]         }
[08:28:11.589]         base::close(...future.stdout)
[08:28:11.589]         ...future.stdout <- NULL
[08:28:11.589]     }
[08:28:11.589]     ...future.result$conditions <- ...future.conditions
[08:28:11.589]     ...future.result$finished <- base::Sys.time()
[08:28:11.589]     ...future.result
[08:28:11.589] }
[08:28:11.592] Exporting 2 global objects (383 bytes) to cluster node #1 ...
[08:28:11.592] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[08:28:11.592] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[08:28:11.593] Exporting ‘name’ (40 bytes) to cluster node #1 ...
[08:28:11.593] Exporting ‘name’ (40 bytes) to cluster node #1 ... DONE
[08:28:11.593] Exporting 2 global objects (383 bytes) to cluster node #1 ... DONE
[08:28:11.594] MultisessionFuture started
[08:28:11.594] - Launch lazy future ... done
[08:28:11.594] run() for ‘MultisessionFuture’ ... done
[08:28:11.594] result() for ClusterFuture ...
[08:28:11.594] receiveMessageFromWorker() for ClusterFuture ...
[08:28:11.594] - Validating connection of MultisessionFuture
[08:28:11.636] - received message: FutureResult
[08:28:11.636] - Received FutureResult
[08:28:11.636] - Erased future from FutureRegistry
[08:28:11.637] result() for ClusterFuture ...
[08:28:11.637] - result already collected: FutureResult
[08:28:11.637] result() for ClusterFuture ... done
[08:28:11.637] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:11.637] result() for ClusterFuture ... done
[08:28:11.637] result() for ClusterFuture ...
[08:28:11.637] - result already collected: FutureResult
[08:28:11.637] result() for ClusterFuture ... done
$a
[1] 1

Testing with 2 cores ... DONE
> 
> message("*** Globals - subassignments w/ x$a <- value ... DONE")
*** Globals - subassignments w/ x$a <- value ... DONE
> 
> message("*** Globals - subassignments ... DONE")
*** Globals - subassignments ... DONE
> 
> source("incl/end.R")
[08:28:11.638] plan(): Setting new future strategy stack:
[08:28:11.638] List of future strategies:
[08:28:11.638] 1. FutureStrategy:
[08:28:11.638]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:11.638]    - tweaked: FALSE
[08:28:11.638]    - call: future::plan(oplan)
[08:28:11.639] plan(): nbrOfWorkers() = 1
> 
