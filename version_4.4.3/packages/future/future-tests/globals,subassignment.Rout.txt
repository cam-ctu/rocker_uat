
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:47.232] plan(): Setting new future strategy stack:
[11:01:47.233] List of future strategies:
[11:01:47.233] 1. sequential:
[11:01:47.233]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.233]    - tweaked: FALSE
[11:01:47.233]    - call: future::plan("sequential")
[11:01:47.246] plan(): nbrOfWorkers() = 1
> 
> oopts <- c(oopts, options(
+   future.globals.resolve = TRUE,
+   future.globals.onMissing = "error"
+ ))
> 
> message("*** Globals - subassignments ...")
*** Globals - subassignments ...
> 
> message("*** Globals - subassignments w/ x$a <- value ...")
*** Globals - subassignments w/ x$a <- value ...
> 
> ## Truth:
> x <- x0 <- list()
> y0 <- list(a = 1)
> str(list(x = x, y0 = y0))
List of 2
 $ x : list()
 $ y0:List of 1
  ..$ a: num 1
> 
> y <- local({
+   x$a <- 1
+   x
+ })
> stopifnot(identical(y, y0))
> 
> y <- local({
+   x[["a"]] <- 1
+   x
+ })
> stopifnot(identical(y, y0))
> 
> y <- local({
+   x["a"] <- list(1)
+   x
+ })
> stopifnot(identical(y, y0))
> 
> stopifnot(identical(x, list()))
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("availableCores(): ", availableCores())
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy)
+ 
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x$a <- 1
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x$a <- 1
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x$a <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Same with forced lazy evaluation
+     x <- list()
+     y %<-% {
+       x$a <- 1
+       x
+     } %lazy% TRUE
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## 'x' is _not_ a global variable here
+     x <- list()
+     y %<-% {
+       x <- list(b = 2)
+       x$a <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, list(b = 2, a = 1)))
+ 
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x[["a"]] <- 1
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x[["a"]] <- 1
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x[["a"]] <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+     
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x["a"] <- list(1)
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x["a"] <- list(1)
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x["a"] <- list(1)
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     name <- "a"
+     y %<-% {
+       x[name] <- list(1)
+       x
+     }
+     rm(list = c("x", "name"))
+     print(y)
+     stopifnot(identical(y, y0))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
availableCores(): 1
- plan('sequential') ...
[11:01:47.314] plan(): Setting new future strategy stack:
[11:01:47.314] List of future strategies:
[11:01:47.314] 1. sequential:
[11:01:47.314]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.314]    - tweaked: FALSE
[11:01:47.314]    - call: plan(strategy)
[11:01:47.325] plan(): nbrOfWorkers() = 1
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.326] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.326] Searching for globals...
[11:01:47.332] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.333] Searching for globals ... DONE
[11:01:47.333] Resolving globals: TRUE
[11:01:47.333] Resolving any globals that are futures ...
[11:01:47.333] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.333] Resolving any globals that are futures ... DONE
[11:01:47.334] Resolving futures part of globals (recursively) ...
[11:01:47.334] resolve() on list ...
[11:01:47.334]  recursive: 99
[11:01:47.334]  length: 1
[11:01:47.335]  elements: ‘x’
[11:01:47.335]  length: 0 (resolved future 1)
[11:01:47.335] resolve() on list ... DONE
[11:01:47.335] - globals: [1] ‘x’
[11:01:47.335] Resolving futures part of globals (recursively) ... DONE
[11:01:47.335] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.336] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.336] - globals: [1] ‘x’
[11:01:47.336] 
[11:01:47.336] getGlobalsAndPackages() ... DONE
[11:01:47.337] run() for ‘Future’ ...
[11:01:47.337] - state: ‘created’
[11:01:47.337] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.337] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.337] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.337]   - Field: ‘label’
[11:01:47.337]   - Field: ‘local’
[11:01:47.338]   - Field: ‘owner’
[11:01:47.338]   - Field: ‘envir’
[11:01:47.338]   - Field: ‘packages’
[11:01:47.338]   - Field: ‘gc’
[11:01:47.338]   - Field: ‘conditions’
[11:01:47.338]   - Field: ‘expr’
[11:01:47.338]   - Field: ‘uuid’
[11:01:47.338]   - Field: ‘seed’
[11:01:47.338]   - Field: ‘version’
[11:01:47.338]   - Field: ‘result’
[11:01:47.338]   - Field: ‘asynchronous’
[11:01:47.338]   - Field: ‘calls’
[11:01:47.339]   - Field: ‘globals’
[11:01:47.339]   - Field: ‘stdout’
[11:01:47.339]   - Field: ‘earlySignal’
[11:01:47.339]   - Field: ‘lazy’
[11:01:47.339]   - Field: ‘state’
[11:01:47.339] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.340] - Launch lazy future ...
[11:01:47.341] Packages needed by the future expression (n = 0): <none>
[11:01:47.341] Packages needed by future strategies (n = 0): <none>
[11:01:47.342] {
[11:01:47.342]     {
[11:01:47.342]         {
[11:01:47.342]             ...future.startTime <- base::Sys.time()
[11:01:47.342]             {
[11:01:47.342]                 {
[11:01:47.342]                   {
[11:01:47.342]                     base::local({
[11:01:47.342]                       has_future <- base::requireNamespace("future", 
[11:01:47.342]                         quietly = TRUE)
[11:01:47.342]                       if (has_future) {
[11:01:47.342]                         ns <- base::getNamespace("future")
[11:01:47.342]                         version <- ns[[".package"]][["version"]]
[11:01:47.342]                         if (is.null(version)) 
[11:01:47.342]                           version <- utils::packageVersion("future")
[11:01:47.342]                       }
[11:01:47.342]                       else {
[11:01:47.342]                         version <- NULL
[11:01:47.342]                       }
[11:01:47.342]                       if (!has_future || version < "1.8.0") {
[11:01:47.342]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.342]                           "", base::R.version$version.string), 
[11:01:47.342]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.342]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.342]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.342]                             "release", "version")], collapse = " "), 
[11:01:47.342]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.342]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.342]                           info)
[11:01:47.342]                         info <- base::paste(info, collapse = "; ")
[11:01:47.342]                         if (!has_future) {
[11:01:47.342]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.342]                             info)
[11:01:47.342]                         }
[11:01:47.342]                         else {
[11:01:47.342]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.342]                             info, version)
[11:01:47.342]                         }
[11:01:47.342]                         base::stop(msg)
[11:01:47.342]                       }
[11:01:47.342]                     })
[11:01:47.342]                   }
[11:01:47.342]                   ...future.strategy.old <- future::plan("list")
[11:01:47.342]                   options(future.plan = NULL)
[11:01:47.342]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.342]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.342]                 }
[11:01:47.342]                 ...future.workdir <- getwd()
[11:01:47.342]             }
[11:01:47.342]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.342]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.342]         }
[11:01:47.342]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.342]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.342]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.342]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.342]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.342]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.342]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.342]             base::names(...future.oldOptions))
[11:01:47.342]     }
[11:01:47.342]     if (FALSE) {
[11:01:47.342]     }
[11:01:47.342]     else {
[11:01:47.342]         if (TRUE) {
[11:01:47.342]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.342]                 open = "w")
[11:01:47.342]         }
[11:01:47.342]         else {
[11:01:47.342]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.342]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.342]         }
[11:01:47.342]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.342]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.342]             base::sink(type = "output", split = FALSE)
[11:01:47.342]             base::close(...future.stdout)
[11:01:47.342]         }, add = TRUE)
[11:01:47.342]     }
[11:01:47.342]     ...future.frame <- base::sys.nframe()
[11:01:47.342]     ...future.conditions <- base::list()
[11:01:47.342]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.342]     if (FALSE) {
[11:01:47.342]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.342]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.342]     }
[11:01:47.342]     ...future.result <- base::tryCatch({
[11:01:47.342]         base::withCallingHandlers({
[11:01:47.342]             ...future.value <- base::withVisible(base::local({
[11:01:47.342]                 x$a <- 1
[11:01:47.342]                 x
[11:01:47.342]             }))
[11:01:47.342]             future::FutureResult(value = ...future.value$value, 
[11:01:47.342]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.342]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.342]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.342]                     ...future.globalenv.names))
[11:01:47.342]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.342]         }, condition = base::local({
[11:01:47.342]             c <- base::c
[11:01:47.342]             inherits <- base::inherits
[11:01:47.342]             invokeRestart <- base::invokeRestart
[11:01:47.342]             length <- base::length
[11:01:47.342]             list <- base::list
[11:01:47.342]             seq.int <- base::seq.int
[11:01:47.342]             signalCondition <- base::signalCondition
[11:01:47.342]             sys.calls <- base::sys.calls
[11:01:47.342]             `[[` <- base::`[[`
[11:01:47.342]             `+` <- base::`+`
[11:01:47.342]             `<<-` <- base::`<<-`
[11:01:47.342]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.342]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.342]                   3L)]
[11:01:47.342]             }
[11:01:47.342]             function(cond) {
[11:01:47.342]                 is_error <- inherits(cond, "error")
[11:01:47.342]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.342]                   NULL)
[11:01:47.342]                 if (is_error) {
[11:01:47.342]                   sessionInformation <- function() {
[11:01:47.342]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.342]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.342]                       search = base::search(), system = base::Sys.info())
[11:01:47.342]                   }
[11:01:47.342]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.342]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.342]                     cond$call), session = sessionInformation(), 
[11:01:47.342]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.342]                   signalCondition(cond)
[11:01:47.342]                 }
[11:01:47.342]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.342]                 "immediateCondition"))) {
[11:01:47.342]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.342]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.342]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.342]                   if (TRUE && !signal) {
[11:01:47.342]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.342]                     {
[11:01:47.342]                       inherits <- base::inherits
[11:01:47.342]                       invokeRestart <- base::invokeRestart
[11:01:47.342]                       is.null <- base::is.null
[11:01:47.342]                       muffled <- FALSE
[11:01:47.342]                       if (inherits(cond, "message")) {
[11:01:47.342]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.342]                         if (muffled) 
[11:01:47.342]                           invokeRestart("muffleMessage")
[11:01:47.342]                       }
[11:01:47.342]                       else if (inherits(cond, "warning")) {
[11:01:47.342]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.342]                         if (muffled) 
[11:01:47.342]                           invokeRestart("muffleWarning")
[11:01:47.342]                       }
[11:01:47.342]                       else if (inherits(cond, "condition")) {
[11:01:47.342]                         if (!is.null(pattern)) {
[11:01:47.342]                           computeRestarts <- base::computeRestarts
[11:01:47.342]                           grepl <- base::grepl
[11:01:47.342]                           restarts <- computeRestarts(cond)
[11:01:47.342]                           for (restart in restarts) {
[11:01:47.342]                             name <- restart$name
[11:01:47.342]                             if (is.null(name)) 
[11:01:47.342]                               next
[11:01:47.342]                             if (!grepl(pattern, name)) 
[11:01:47.342]                               next
[11:01:47.342]                             invokeRestart(restart)
[11:01:47.342]                             muffled <- TRUE
[11:01:47.342]                             break
[11:01:47.342]                           }
[11:01:47.342]                         }
[11:01:47.342]                       }
[11:01:47.342]                       invisible(muffled)
[11:01:47.342]                     }
[11:01:47.342]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.342]                   }
[11:01:47.342]                 }
[11:01:47.342]                 else {
[11:01:47.342]                   if (TRUE) {
[11:01:47.342]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.342]                     {
[11:01:47.342]                       inherits <- base::inherits
[11:01:47.342]                       invokeRestart <- base::invokeRestart
[11:01:47.342]                       is.null <- base::is.null
[11:01:47.342]                       muffled <- FALSE
[11:01:47.342]                       if (inherits(cond, "message")) {
[11:01:47.342]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.342]                         if (muffled) 
[11:01:47.342]                           invokeRestart("muffleMessage")
[11:01:47.342]                       }
[11:01:47.342]                       else if (inherits(cond, "warning")) {
[11:01:47.342]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.342]                         if (muffled) 
[11:01:47.342]                           invokeRestart("muffleWarning")
[11:01:47.342]                       }
[11:01:47.342]                       else if (inherits(cond, "condition")) {
[11:01:47.342]                         if (!is.null(pattern)) {
[11:01:47.342]                           computeRestarts <- base::computeRestarts
[11:01:47.342]                           grepl <- base::grepl
[11:01:47.342]                           restarts <- computeRestarts(cond)
[11:01:47.342]                           for (restart in restarts) {
[11:01:47.342]                             name <- restart$name
[11:01:47.342]                             if (is.null(name)) 
[11:01:47.342]                               next
[11:01:47.342]                             if (!grepl(pattern, name)) 
[11:01:47.342]                               next
[11:01:47.342]                             invokeRestart(restart)
[11:01:47.342]                             muffled <- TRUE
[11:01:47.342]                             break
[11:01:47.342]                           }
[11:01:47.342]                         }
[11:01:47.342]                       }
[11:01:47.342]                       invisible(muffled)
[11:01:47.342]                     }
[11:01:47.342]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.342]                   }
[11:01:47.342]                 }
[11:01:47.342]             }
[11:01:47.342]         }))
[11:01:47.342]     }, error = function(ex) {
[11:01:47.342]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.342]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.342]                 ...future.rng), started = ...future.startTime, 
[11:01:47.342]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.342]             version = "1.8"), class = "FutureResult")
[11:01:47.342]     }, finally = {
[11:01:47.342]         if (!identical(...future.workdir, getwd())) 
[11:01:47.342]             setwd(...future.workdir)
[11:01:47.342]         {
[11:01:47.342]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.342]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.342]             }
[11:01:47.342]             base::options(...future.oldOptions)
[11:01:47.342]             if (.Platform$OS.type == "windows") {
[11:01:47.342]                 old_names <- names(...future.oldEnvVars)
[11:01:47.342]                 envs <- base::Sys.getenv()
[11:01:47.342]                 names <- names(envs)
[11:01:47.342]                 common <- intersect(names, old_names)
[11:01:47.342]                 added <- setdiff(names, old_names)
[11:01:47.342]                 removed <- setdiff(old_names, names)
[11:01:47.342]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.342]                   envs[common]]
[11:01:47.342]                 NAMES <- toupper(changed)
[11:01:47.342]                 args <- list()
[11:01:47.342]                 for (kk in seq_along(NAMES)) {
[11:01:47.342]                   name <- changed[[kk]]
[11:01:47.342]                   NAME <- NAMES[[kk]]
[11:01:47.342]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.342]                     next
[11:01:47.342]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.342]                 }
[11:01:47.342]                 NAMES <- toupper(added)
[11:01:47.342]                 for (kk in seq_along(NAMES)) {
[11:01:47.342]                   name <- added[[kk]]
[11:01:47.342]                   NAME <- NAMES[[kk]]
[11:01:47.342]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.342]                     next
[11:01:47.342]                   args[[name]] <- ""
[11:01:47.342]                 }
[11:01:47.342]                 NAMES <- toupper(removed)
[11:01:47.342]                 for (kk in seq_along(NAMES)) {
[11:01:47.342]                   name <- removed[[kk]]
[11:01:47.342]                   NAME <- NAMES[[kk]]
[11:01:47.342]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.342]                     next
[11:01:47.342]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.342]                 }
[11:01:47.342]                 if (length(args) > 0) 
[11:01:47.342]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.342]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.342]             }
[11:01:47.342]             else {
[11:01:47.342]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.342]             }
[11:01:47.342]             {
[11:01:47.342]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.342]                   0L) {
[11:01:47.342]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.342]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.342]                   base::options(opts)
[11:01:47.342]                 }
[11:01:47.342]                 {
[11:01:47.342]                   {
[11:01:47.342]                     NULL
[11:01:47.342]                     RNGkind("Mersenne-Twister")
[11:01:47.342]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.342]                       inherits = FALSE)
[11:01:47.342]                   }
[11:01:47.342]                   options(future.plan = NULL)
[11:01:47.342]                   if (is.na(NA_character_)) 
[11:01:47.342]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.342]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.342]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.342]                     .init = FALSE)
[11:01:47.342]                 }
[11:01:47.342]             }
[11:01:47.342]         }
[11:01:47.342]     })
[11:01:47.342]     if (TRUE) {
[11:01:47.342]         base::sink(type = "output", split = FALSE)
[11:01:47.342]         if (TRUE) {
[11:01:47.342]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.342]         }
[11:01:47.342]         else {
[11:01:47.342]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.342]         }
[11:01:47.342]         base::close(...future.stdout)
[11:01:47.342]         ...future.stdout <- NULL
[11:01:47.342]     }
[11:01:47.342]     ...future.result$conditions <- ...future.conditions
[11:01:47.342]     ...future.result$finished <- base::Sys.time()
[11:01:47.342]     ...future.result
[11:01:47.342] }
[11:01:47.344] assign_globals() ...
[11:01:47.344] List of 1
[11:01:47.344]  $ x: list()
[11:01:47.344]  - attr(*, "where")=List of 1
[11:01:47.344]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.344]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.344]  - attr(*, "resolved")= logi TRUE
[11:01:47.344]  - attr(*, "total_size")= num 31
[11:01:47.344]  - attr(*, "already-done")= logi TRUE
[11:01:47.346] - copied ‘x’ to environment
[11:01:47.346] assign_globals() ... done
[11:01:47.347] plan(): Setting new future strategy stack:
[11:01:47.347] List of future strategies:
[11:01:47.347] 1. sequential:
[11:01:47.347]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.347]    - tweaked: FALSE
[11:01:47.347]    - call: NULL
[11:01:47.347] plan(): nbrOfWorkers() = 1
[11:01:47.348] plan(): Setting new future strategy stack:
[11:01:47.348] List of future strategies:
[11:01:47.348] 1. sequential:
[11:01:47.348]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.348]    - tweaked: FALSE
[11:01:47.348]    - call: plan(strategy)
[11:01:47.349] plan(): nbrOfWorkers() = 1
[11:01:47.349] SequentialFuture started (and completed)
[11:01:47.349] - Launch lazy future ... done
[11:01:47.349] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.350] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.350] Searching for globals...
[11:01:47.352] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.352] Searching for globals ... DONE
[11:01:47.352] Resolving globals: TRUE
[11:01:47.352] Resolving any globals that are futures ...
[11:01:47.352] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.352] Resolving any globals that are futures ... DONE
[11:01:47.352] Resolving futures part of globals (recursively) ...
[11:01:47.353] resolve() on list ...
[11:01:47.353]  recursive: 99
[11:01:47.353]  length: 1
[11:01:47.353]  elements: ‘x’
[11:01:47.353]  length: 0 (resolved future 1)
[11:01:47.353] resolve() on list ... DONE
[11:01:47.353] - globals: [1] ‘x’
[11:01:47.353] Resolving futures part of globals (recursively) ... DONE
[11:01:47.353] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.354] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.354] - globals: [1] ‘x’
[11:01:47.354] 
[11:01:47.354] getGlobalsAndPackages() ... DONE
[11:01:47.354] run() for ‘Future’ ...
[11:01:47.354] - state: ‘created’
[11:01:47.354] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.355] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.355] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.355]   - Field: ‘label’
[11:01:47.355]   - Field: ‘local’
[11:01:47.355]   - Field: ‘owner’
[11:01:47.355]   - Field: ‘envir’
[11:01:47.355]   - Field: ‘packages’
[11:01:47.355]   - Field: ‘gc’
[11:01:47.355]   - Field: ‘conditions’
[11:01:47.355]   - Field: ‘expr’
[11:01:47.356]   - Field: ‘uuid’
[11:01:47.356]   - Field: ‘seed’
[11:01:47.356]   - Field: ‘version’
[11:01:47.356]   - Field: ‘result’
[11:01:47.356]   - Field: ‘asynchronous’
[11:01:47.356]   - Field: ‘calls’
[11:01:47.356]   - Field: ‘globals’
[11:01:47.356]   - Field: ‘stdout’
[11:01:47.356]   - Field: ‘earlySignal’
[11:01:47.356]   - Field: ‘lazy’
[11:01:47.356]   - Field: ‘state’
[11:01:47.356] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.356] - Launch lazy future ...
[11:01:47.357] Packages needed by the future expression (n = 0): <none>
[11:01:47.357] Packages needed by future strategies (n = 0): <none>
[11:01:47.357] {
[11:01:47.357]     {
[11:01:47.357]         {
[11:01:47.357]             ...future.startTime <- base::Sys.time()
[11:01:47.357]             {
[11:01:47.357]                 {
[11:01:47.357]                   {
[11:01:47.357]                     base::local({
[11:01:47.357]                       has_future <- base::requireNamespace("future", 
[11:01:47.357]                         quietly = TRUE)
[11:01:47.357]                       if (has_future) {
[11:01:47.357]                         ns <- base::getNamespace("future")
[11:01:47.357]                         version <- ns[[".package"]][["version"]]
[11:01:47.357]                         if (is.null(version)) 
[11:01:47.357]                           version <- utils::packageVersion("future")
[11:01:47.357]                       }
[11:01:47.357]                       else {
[11:01:47.357]                         version <- NULL
[11:01:47.357]                       }
[11:01:47.357]                       if (!has_future || version < "1.8.0") {
[11:01:47.357]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.357]                           "", base::R.version$version.string), 
[11:01:47.357]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.357]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.357]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.357]                             "release", "version")], collapse = " "), 
[11:01:47.357]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.357]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.357]                           info)
[11:01:47.357]                         info <- base::paste(info, collapse = "; ")
[11:01:47.357]                         if (!has_future) {
[11:01:47.357]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.357]                             info)
[11:01:47.357]                         }
[11:01:47.357]                         else {
[11:01:47.357]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.357]                             info, version)
[11:01:47.357]                         }
[11:01:47.357]                         base::stop(msg)
[11:01:47.357]                       }
[11:01:47.357]                     })
[11:01:47.357]                   }
[11:01:47.357]                   ...future.strategy.old <- future::plan("list")
[11:01:47.357]                   options(future.plan = NULL)
[11:01:47.357]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.357]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.357]                 }
[11:01:47.357]                 ...future.workdir <- getwd()
[11:01:47.357]             }
[11:01:47.357]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.357]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.357]         }
[11:01:47.357]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.357]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.357]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.357]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.357]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.357]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.357]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.357]             base::names(...future.oldOptions))
[11:01:47.357]     }
[11:01:47.357]     if (FALSE) {
[11:01:47.357]     }
[11:01:47.357]     else {
[11:01:47.357]         if (TRUE) {
[11:01:47.357]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.357]                 open = "w")
[11:01:47.357]         }
[11:01:47.357]         else {
[11:01:47.357]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.357]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.357]         }
[11:01:47.357]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.357]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.357]             base::sink(type = "output", split = FALSE)
[11:01:47.357]             base::close(...future.stdout)
[11:01:47.357]         }, add = TRUE)
[11:01:47.357]     }
[11:01:47.357]     ...future.frame <- base::sys.nframe()
[11:01:47.357]     ...future.conditions <- base::list()
[11:01:47.357]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.357]     if (FALSE) {
[11:01:47.357]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.357]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.357]     }
[11:01:47.357]     ...future.result <- base::tryCatch({
[11:01:47.357]         base::withCallingHandlers({
[11:01:47.357]             ...future.value <- base::withVisible(base::local({
[11:01:47.357]                 x$a <- 1
[11:01:47.357]                 x
[11:01:47.357]             }))
[11:01:47.357]             future::FutureResult(value = ...future.value$value, 
[11:01:47.357]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.357]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.357]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.357]                     ...future.globalenv.names))
[11:01:47.357]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.357]         }, condition = base::local({
[11:01:47.357]             c <- base::c
[11:01:47.357]             inherits <- base::inherits
[11:01:47.357]             invokeRestart <- base::invokeRestart
[11:01:47.357]             length <- base::length
[11:01:47.357]             list <- base::list
[11:01:47.357]             seq.int <- base::seq.int
[11:01:47.357]             signalCondition <- base::signalCondition
[11:01:47.357]             sys.calls <- base::sys.calls
[11:01:47.357]             `[[` <- base::`[[`
[11:01:47.357]             `+` <- base::`+`
[11:01:47.357]             `<<-` <- base::`<<-`
[11:01:47.357]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.357]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.357]                   3L)]
[11:01:47.357]             }
[11:01:47.357]             function(cond) {
[11:01:47.357]                 is_error <- inherits(cond, "error")
[11:01:47.357]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.357]                   NULL)
[11:01:47.357]                 if (is_error) {
[11:01:47.357]                   sessionInformation <- function() {
[11:01:47.357]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.357]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.357]                       search = base::search(), system = base::Sys.info())
[11:01:47.357]                   }
[11:01:47.357]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.357]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.357]                     cond$call), session = sessionInformation(), 
[11:01:47.357]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.357]                   signalCondition(cond)
[11:01:47.357]                 }
[11:01:47.357]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.357]                 "immediateCondition"))) {
[11:01:47.357]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.357]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.357]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.357]                   if (TRUE && !signal) {
[11:01:47.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.357]                     {
[11:01:47.357]                       inherits <- base::inherits
[11:01:47.357]                       invokeRestart <- base::invokeRestart
[11:01:47.357]                       is.null <- base::is.null
[11:01:47.357]                       muffled <- FALSE
[11:01:47.357]                       if (inherits(cond, "message")) {
[11:01:47.357]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.357]                         if (muffled) 
[11:01:47.357]                           invokeRestart("muffleMessage")
[11:01:47.357]                       }
[11:01:47.357]                       else if (inherits(cond, "warning")) {
[11:01:47.357]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.357]                         if (muffled) 
[11:01:47.357]                           invokeRestart("muffleWarning")
[11:01:47.357]                       }
[11:01:47.357]                       else if (inherits(cond, "condition")) {
[11:01:47.357]                         if (!is.null(pattern)) {
[11:01:47.357]                           computeRestarts <- base::computeRestarts
[11:01:47.357]                           grepl <- base::grepl
[11:01:47.357]                           restarts <- computeRestarts(cond)
[11:01:47.357]                           for (restart in restarts) {
[11:01:47.357]                             name <- restart$name
[11:01:47.357]                             if (is.null(name)) 
[11:01:47.357]                               next
[11:01:47.357]                             if (!grepl(pattern, name)) 
[11:01:47.357]                               next
[11:01:47.357]                             invokeRestart(restart)
[11:01:47.357]                             muffled <- TRUE
[11:01:47.357]                             break
[11:01:47.357]                           }
[11:01:47.357]                         }
[11:01:47.357]                       }
[11:01:47.357]                       invisible(muffled)
[11:01:47.357]                     }
[11:01:47.357]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.357]                   }
[11:01:47.357]                 }
[11:01:47.357]                 else {
[11:01:47.357]                   if (TRUE) {
[11:01:47.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.357]                     {
[11:01:47.357]                       inherits <- base::inherits
[11:01:47.357]                       invokeRestart <- base::invokeRestart
[11:01:47.357]                       is.null <- base::is.null
[11:01:47.357]                       muffled <- FALSE
[11:01:47.357]                       if (inherits(cond, "message")) {
[11:01:47.357]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.357]                         if (muffled) 
[11:01:47.357]                           invokeRestart("muffleMessage")
[11:01:47.357]                       }
[11:01:47.357]                       else if (inherits(cond, "warning")) {
[11:01:47.357]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.357]                         if (muffled) 
[11:01:47.357]                           invokeRestart("muffleWarning")
[11:01:47.357]                       }
[11:01:47.357]                       else if (inherits(cond, "condition")) {
[11:01:47.357]                         if (!is.null(pattern)) {
[11:01:47.357]                           computeRestarts <- base::computeRestarts
[11:01:47.357]                           grepl <- base::grepl
[11:01:47.357]                           restarts <- computeRestarts(cond)
[11:01:47.357]                           for (restart in restarts) {
[11:01:47.357]                             name <- restart$name
[11:01:47.357]                             if (is.null(name)) 
[11:01:47.357]                               next
[11:01:47.357]                             if (!grepl(pattern, name)) 
[11:01:47.357]                               next
[11:01:47.357]                             invokeRestart(restart)
[11:01:47.357]                             muffled <- TRUE
[11:01:47.357]                             break
[11:01:47.357]                           }
[11:01:47.357]                         }
[11:01:47.357]                       }
[11:01:47.357]                       invisible(muffled)
[11:01:47.357]                     }
[11:01:47.357]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.357]                   }
[11:01:47.357]                 }
[11:01:47.357]             }
[11:01:47.357]         }))
[11:01:47.357]     }, error = function(ex) {
[11:01:47.357]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.357]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.357]                 ...future.rng), started = ...future.startTime, 
[11:01:47.357]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.357]             version = "1.8"), class = "FutureResult")
[11:01:47.357]     }, finally = {
[11:01:47.357]         if (!identical(...future.workdir, getwd())) 
[11:01:47.357]             setwd(...future.workdir)
[11:01:47.357]         {
[11:01:47.357]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.357]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.357]             }
[11:01:47.357]             base::options(...future.oldOptions)
[11:01:47.357]             if (.Platform$OS.type == "windows") {
[11:01:47.357]                 old_names <- names(...future.oldEnvVars)
[11:01:47.357]                 envs <- base::Sys.getenv()
[11:01:47.357]                 names <- names(envs)
[11:01:47.357]                 common <- intersect(names, old_names)
[11:01:47.357]                 added <- setdiff(names, old_names)
[11:01:47.357]                 removed <- setdiff(old_names, names)
[11:01:47.357]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.357]                   envs[common]]
[11:01:47.357]                 NAMES <- toupper(changed)
[11:01:47.357]                 args <- list()
[11:01:47.357]                 for (kk in seq_along(NAMES)) {
[11:01:47.357]                   name <- changed[[kk]]
[11:01:47.357]                   NAME <- NAMES[[kk]]
[11:01:47.357]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.357]                     next
[11:01:47.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.357]                 }
[11:01:47.357]                 NAMES <- toupper(added)
[11:01:47.357]                 for (kk in seq_along(NAMES)) {
[11:01:47.357]                   name <- added[[kk]]
[11:01:47.357]                   NAME <- NAMES[[kk]]
[11:01:47.357]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.357]                     next
[11:01:47.357]                   args[[name]] <- ""
[11:01:47.357]                 }
[11:01:47.357]                 NAMES <- toupper(removed)
[11:01:47.357]                 for (kk in seq_along(NAMES)) {
[11:01:47.357]                   name <- removed[[kk]]
[11:01:47.357]                   NAME <- NAMES[[kk]]
[11:01:47.357]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.357]                     next
[11:01:47.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.357]                 }
[11:01:47.357]                 if (length(args) > 0) 
[11:01:47.357]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.357]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.357]             }
[11:01:47.357]             else {
[11:01:47.357]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.357]             }
[11:01:47.357]             {
[11:01:47.357]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.357]                   0L) {
[11:01:47.357]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.357]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.357]                   base::options(opts)
[11:01:47.357]                 }
[11:01:47.357]                 {
[11:01:47.357]                   {
[11:01:47.357]                     NULL
[11:01:47.357]                     RNGkind("Mersenne-Twister")
[11:01:47.357]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.357]                       inherits = FALSE)
[11:01:47.357]                   }
[11:01:47.357]                   options(future.plan = NULL)
[11:01:47.357]                   if (is.na(NA_character_)) 
[11:01:47.357]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.357]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.357]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.357]                     .init = FALSE)
[11:01:47.357]                 }
[11:01:47.357]             }
[11:01:47.357]         }
[11:01:47.357]     })
[11:01:47.357]     if (TRUE) {
[11:01:47.357]         base::sink(type = "output", split = FALSE)
[11:01:47.357]         if (TRUE) {
[11:01:47.357]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.357]         }
[11:01:47.357]         else {
[11:01:47.357]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.357]         }
[11:01:47.357]         base::close(...future.stdout)
[11:01:47.357]         ...future.stdout <- NULL
[11:01:47.357]     }
[11:01:47.357]     ...future.result$conditions <- ...future.conditions
[11:01:47.357]     ...future.result$finished <- base::Sys.time()
[11:01:47.357]     ...future.result
[11:01:47.357] }
[11:01:47.359] assign_globals() ...
[11:01:47.359] List of 1
[11:01:47.359]  $ x: list()
[11:01:47.359]  - attr(*, "where")=List of 1
[11:01:47.359]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.359]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.359]  - attr(*, "resolved")= logi TRUE
[11:01:47.359]  - attr(*, "total_size")= num 31
[11:01:47.359]  - attr(*, "already-done")= logi TRUE
[11:01:47.361] - copied ‘x’ to environment
[11:01:47.361] assign_globals() ... done
[11:01:47.361] plan(): Setting new future strategy stack:
[11:01:47.361] List of future strategies:
[11:01:47.361] 1. sequential:
[11:01:47.361]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.361]    - tweaked: FALSE
[11:01:47.361]    - call: NULL
[11:01:47.362] plan(): nbrOfWorkers() = 1
[11:01:47.362] plan(): Setting new future strategy stack:
[11:01:47.362] List of future strategies:
[11:01:47.362] 1. sequential:
[11:01:47.362]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.362]    - tweaked: FALSE
[11:01:47.362]    - call: plan(strategy)
[11:01:47.363] plan(): nbrOfWorkers() = 1
[11:01:47.363] SequentialFuture started (and completed)
[11:01:47.363] - Launch lazy future ... done
[11:01:47.363] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.364] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.364] Searching for globals...
[11:01:47.366] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.366] Searching for globals ... DONE
[11:01:47.366] Resolving globals: TRUE
[11:01:47.366] Resolving any globals that are futures ...
[11:01:47.366] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.367] Resolving any globals that are futures ... DONE
[11:01:47.367] Resolving futures part of globals (recursively) ...
[11:01:47.367] resolve() on list ...
[11:01:47.367]  recursive: 99
[11:01:47.367]  length: 1
[11:01:47.367]  elements: ‘x’
[11:01:47.367]  length: 0 (resolved future 1)
[11:01:47.368] resolve() on list ... DONE
[11:01:47.368] - globals: [1] ‘x’
[11:01:47.368] Resolving futures part of globals (recursively) ... DONE
[11:01:47.368] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.368] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.369] - globals: [1] ‘x’
[11:01:47.369] 
[11:01:47.369] getGlobalsAndPackages() ... DONE
[11:01:47.370] run() for ‘Future’ ...
[11:01:47.370] - state: ‘created’
[11:01:47.370] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.370] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.370] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.370]   - Field: ‘label’
[11:01:47.370]   - Field: ‘local’
[11:01:47.371]   - Field: ‘owner’
[11:01:47.371]   - Field: ‘envir’
[11:01:47.371]   - Field: ‘packages’
[11:01:47.371]   - Field: ‘gc’
[11:01:47.371]   - Field: ‘conditions’
[11:01:47.371]   - Field: ‘expr’
[11:01:47.371]   - Field: ‘uuid’
[11:01:47.371]   - Field: ‘seed’
[11:01:47.371]   - Field: ‘version’
[11:01:47.371]   - Field: ‘result’
[11:01:47.371]   - Field: ‘asynchronous’
[11:01:47.371]   - Field: ‘calls’
[11:01:47.371]   - Field: ‘globals’
[11:01:47.372]   - Field: ‘stdout’
[11:01:47.372]   - Field: ‘earlySignal’
[11:01:47.372]   - Field: ‘lazy’
[11:01:47.372]   - Field: ‘state’
[11:01:47.372] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.372] - Launch lazy future ...
[11:01:47.372] Packages needed by the future expression (n = 0): <none>
[11:01:47.372] Packages needed by future strategies (n = 0): <none>
[11:01:47.373] {
[11:01:47.373]     {
[11:01:47.373]         {
[11:01:47.373]             ...future.startTime <- base::Sys.time()
[11:01:47.373]             {
[11:01:47.373]                 {
[11:01:47.373]                   {
[11:01:47.373]                     base::local({
[11:01:47.373]                       has_future <- base::requireNamespace("future", 
[11:01:47.373]                         quietly = TRUE)
[11:01:47.373]                       if (has_future) {
[11:01:47.373]                         ns <- base::getNamespace("future")
[11:01:47.373]                         version <- ns[[".package"]][["version"]]
[11:01:47.373]                         if (is.null(version)) 
[11:01:47.373]                           version <- utils::packageVersion("future")
[11:01:47.373]                       }
[11:01:47.373]                       else {
[11:01:47.373]                         version <- NULL
[11:01:47.373]                       }
[11:01:47.373]                       if (!has_future || version < "1.8.0") {
[11:01:47.373]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.373]                           "", base::R.version$version.string), 
[11:01:47.373]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.373]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.373]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.373]                             "release", "version")], collapse = " "), 
[11:01:47.373]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.373]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.373]                           info)
[11:01:47.373]                         info <- base::paste(info, collapse = "; ")
[11:01:47.373]                         if (!has_future) {
[11:01:47.373]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.373]                             info)
[11:01:47.373]                         }
[11:01:47.373]                         else {
[11:01:47.373]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.373]                             info, version)
[11:01:47.373]                         }
[11:01:47.373]                         base::stop(msg)
[11:01:47.373]                       }
[11:01:47.373]                     })
[11:01:47.373]                   }
[11:01:47.373]                   ...future.strategy.old <- future::plan("list")
[11:01:47.373]                   options(future.plan = NULL)
[11:01:47.373]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.373]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.373]                 }
[11:01:47.373]                 ...future.workdir <- getwd()
[11:01:47.373]             }
[11:01:47.373]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.373]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.373]         }
[11:01:47.373]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.373]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.373]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.373]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.373]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.373]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.373]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.373]             base::names(...future.oldOptions))
[11:01:47.373]     }
[11:01:47.373]     if (FALSE) {
[11:01:47.373]     }
[11:01:47.373]     else {
[11:01:47.373]         if (TRUE) {
[11:01:47.373]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.373]                 open = "w")
[11:01:47.373]         }
[11:01:47.373]         else {
[11:01:47.373]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.373]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.373]         }
[11:01:47.373]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.373]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.373]             base::sink(type = "output", split = FALSE)
[11:01:47.373]             base::close(...future.stdout)
[11:01:47.373]         }, add = TRUE)
[11:01:47.373]     }
[11:01:47.373]     ...future.frame <- base::sys.nframe()
[11:01:47.373]     ...future.conditions <- base::list()
[11:01:47.373]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.373]     if (FALSE) {
[11:01:47.373]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.373]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.373]     }
[11:01:47.373]     ...future.result <- base::tryCatch({
[11:01:47.373]         base::withCallingHandlers({
[11:01:47.373]             ...future.value <- base::withVisible(base::local({
[11:01:47.373]                 x$a <- 1
[11:01:47.373]                 x
[11:01:47.373]             }))
[11:01:47.373]             future::FutureResult(value = ...future.value$value, 
[11:01:47.373]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.373]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.373]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.373]                     ...future.globalenv.names))
[11:01:47.373]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.373]         }, condition = base::local({
[11:01:47.373]             c <- base::c
[11:01:47.373]             inherits <- base::inherits
[11:01:47.373]             invokeRestart <- base::invokeRestart
[11:01:47.373]             length <- base::length
[11:01:47.373]             list <- base::list
[11:01:47.373]             seq.int <- base::seq.int
[11:01:47.373]             signalCondition <- base::signalCondition
[11:01:47.373]             sys.calls <- base::sys.calls
[11:01:47.373]             `[[` <- base::`[[`
[11:01:47.373]             `+` <- base::`+`
[11:01:47.373]             `<<-` <- base::`<<-`
[11:01:47.373]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.373]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.373]                   3L)]
[11:01:47.373]             }
[11:01:47.373]             function(cond) {
[11:01:47.373]                 is_error <- inherits(cond, "error")
[11:01:47.373]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.373]                   NULL)
[11:01:47.373]                 if (is_error) {
[11:01:47.373]                   sessionInformation <- function() {
[11:01:47.373]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.373]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.373]                       search = base::search(), system = base::Sys.info())
[11:01:47.373]                   }
[11:01:47.373]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.373]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.373]                     cond$call), session = sessionInformation(), 
[11:01:47.373]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.373]                   signalCondition(cond)
[11:01:47.373]                 }
[11:01:47.373]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.373]                 "immediateCondition"))) {
[11:01:47.373]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.373]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.373]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.373]                   if (TRUE && !signal) {
[11:01:47.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.373]                     {
[11:01:47.373]                       inherits <- base::inherits
[11:01:47.373]                       invokeRestart <- base::invokeRestart
[11:01:47.373]                       is.null <- base::is.null
[11:01:47.373]                       muffled <- FALSE
[11:01:47.373]                       if (inherits(cond, "message")) {
[11:01:47.373]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.373]                         if (muffled) 
[11:01:47.373]                           invokeRestart("muffleMessage")
[11:01:47.373]                       }
[11:01:47.373]                       else if (inherits(cond, "warning")) {
[11:01:47.373]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.373]                         if (muffled) 
[11:01:47.373]                           invokeRestart("muffleWarning")
[11:01:47.373]                       }
[11:01:47.373]                       else if (inherits(cond, "condition")) {
[11:01:47.373]                         if (!is.null(pattern)) {
[11:01:47.373]                           computeRestarts <- base::computeRestarts
[11:01:47.373]                           grepl <- base::grepl
[11:01:47.373]                           restarts <- computeRestarts(cond)
[11:01:47.373]                           for (restart in restarts) {
[11:01:47.373]                             name <- restart$name
[11:01:47.373]                             if (is.null(name)) 
[11:01:47.373]                               next
[11:01:47.373]                             if (!grepl(pattern, name)) 
[11:01:47.373]                               next
[11:01:47.373]                             invokeRestart(restart)
[11:01:47.373]                             muffled <- TRUE
[11:01:47.373]                             break
[11:01:47.373]                           }
[11:01:47.373]                         }
[11:01:47.373]                       }
[11:01:47.373]                       invisible(muffled)
[11:01:47.373]                     }
[11:01:47.373]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.373]                   }
[11:01:47.373]                 }
[11:01:47.373]                 else {
[11:01:47.373]                   if (TRUE) {
[11:01:47.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.373]                     {
[11:01:47.373]                       inherits <- base::inherits
[11:01:47.373]                       invokeRestart <- base::invokeRestart
[11:01:47.373]                       is.null <- base::is.null
[11:01:47.373]                       muffled <- FALSE
[11:01:47.373]                       if (inherits(cond, "message")) {
[11:01:47.373]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.373]                         if (muffled) 
[11:01:47.373]                           invokeRestart("muffleMessage")
[11:01:47.373]                       }
[11:01:47.373]                       else if (inherits(cond, "warning")) {
[11:01:47.373]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.373]                         if (muffled) 
[11:01:47.373]                           invokeRestart("muffleWarning")
[11:01:47.373]                       }
[11:01:47.373]                       else if (inherits(cond, "condition")) {
[11:01:47.373]                         if (!is.null(pattern)) {
[11:01:47.373]                           computeRestarts <- base::computeRestarts
[11:01:47.373]                           grepl <- base::grepl
[11:01:47.373]                           restarts <- computeRestarts(cond)
[11:01:47.373]                           for (restart in restarts) {
[11:01:47.373]                             name <- restart$name
[11:01:47.373]                             if (is.null(name)) 
[11:01:47.373]                               next
[11:01:47.373]                             if (!grepl(pattern, name)) 
[11:01:47.373]                               next
[11:01:47.373]                             invokeRestart(restart)
[11:01:47.373]                             muffled <- TRUE
[11:01:47.373]                             break
[11:01:47.373]                           }
[11:01:47.373]                         }
[11:01:47.373]                       }
[11:01:47.373]                       invisible(muffled)
[11:01:47.373]                     }
[11:01:47.373]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.373]                   }
[11:01:47.373]                 }
[11:01:47.373]             }
[11:01:47.373]         }))
[11:01:47.373]     }, error = function(ex) {
[11:01:47.373]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.373]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.373]                 ...future.rng), started = ...future.startTime, 
[11:01:47.373]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.373]             version = "1.8"), class = "FutureResult")
[11:01:47.373]     }, finally = {
[11:01:47.373]         if (!identical(...future.workdir, getwd())) 
[11:01:47.373]             setwd(...future.workdir)
[11:01:47.373]         {
[11:01:47.373]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.373]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.373]             }
[11:01:47.373]             base::options(...future.oldOptions)
[11:01:47.373]             if (.Platform$OS.type == "windows") {
[11:01:47.373]                 old_names <- names(...future.oldEnvVars)
[11:01:47.373]                 envs <- base::Sys.getenv()
[11:01:47.373]                 names <- names(envs)
[11:01:47.373]                 common <- intersect(names, old_names)
[11:01:47.373]                 added <- setdiff(names, old_names)
[11:01:47.373]                 removed <- setdiff(old_names, names)
[11:01:47.373]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.373]                   envs[common]]
[11:01:47.373]                 NAMES <- toupper(changed)
[11:01:47.373]                 args <- list()
[11:01:47.373]                 for (kk in seq_along(NAMES)) {
[11:01:47.373]                   name <- changed[[kk]]
[11:01:47.373]                   NAME <- NAMES[[kk]]
[11:01:47.373]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.373]                     next
[11:01:47.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.373]                 }
[11:01:47.373]                 NAMES <- toupper(added)
[11:01:47.373]                 for (kk in seq_along(NAMES)) {
[11:01:47.373]                   name <- added[[kk]]
[11:01:47.373]                   NAME <- NAMES[[kk]]
[11:01:47.373]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.373]                     next
[11:01:47.373]                   args[[name]] <- ""
[11:01:47.373]                 }
[11:01:47.373]                 NAMES <- toupper(removed)
[11:01:47.373]                 for (kk in seq_along(NAMES)) {
[11:01:47.373]                   name <- removed[[kk]]
[11:01:47.373]                   NAME <- NAMES[[kk]]
[11:01:47.373]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.373]                     next
[11:01:47.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.373]                 }
[11:01:47.373]                 if (length(args) > 0) 
[11:01:47.373]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.373]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.373]             }
[11:01:47.373]             else {
[11:01:47.373]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.373]             }
[11:01:47.373]             {
[11:01:47.373]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.373]                   0L) {
[11:01:47.373]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.373]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.373]                   base::options(opts)
[11:01:47.373]                 }
[11:01:47.373]                 {
[11:01:47.373]                   {
[11:01:47.373]                     NULL
[11:01:47.373]                     RNGkind("Mersenne-Twister")
[11:01:47.373]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.373]                       inherits = FALSE)
[11:01:47.373]                   }
[11:01:47.373]                   options(future.plan = NULL)
[11:01:47.373]                   if (is.na(NA_character_)) 
[11:01:47.373]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.373]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.373]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.373]                     .init = FALSE)
[11:01:47.373]                 }
[11:01:47.373]             }
[11:01:47.373]         }
[11:01:47.373]     })
[11:01:47.373]     if (TRUE) {
[11:01:47.373]         base::sink(type = "output", split = FALSE)
[11:01:47.373]         if (TRUE) {
[11:01:47.373]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.373]         }
[11:01:47.373]         else {
[11:01:47.373]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.373]         }
[11:01:47.373]         base::close(...future.stdout)
[11:01:47.373]         ...future.stdout <- NULL
[11:01:47.373]     }
[11:01:47.373]     ...future.result$conditions <- ...future.conditions
[11:01:47.373]     ...future.result$finished <- base::Sys.time()
[11:01:47.373]     ...future.result
[11:01:47.373] }
[11:01:47.374] assign_globals() ...
[11:01:47.374] List of 1
[11:01:47.374]  $ x: list()
[11:01:47.374]  - attr(*, "where")=List of 1
[11:01:47.374]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.374]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.374]  - attr(*, "resolved")= logi TRUE
[11:01:47.374]  - attr(*, "total_size")= num 31
[11:01:47.374]  - attr(*, "already-done")= logi TRUE
[11:01:47.376] - copied ‘x’ to environment
[11:01:47.377] assign_globals() ... done
[11:01:47.377] plan(): Setting new future strategy stack:
[11:01:47.377] List of future strategies:
[11:01:47.377] 1. sequential:
[11:01:47.377]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.377]    - tweaked: FALSE
[11:01:47.377]    - call: NULL
[11:01:47.377] plan(): nbrOfWorkers() = 1
[11:01:47.378] plan(): Setting new future strategy stack:
[11:01:47.378] List of future strategies:
[11:01:47.378] 1. sequential:
[11:01:47.378]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.378]    - tweaked: FALSE
[11:01:47.378]    - call: plan(strategy)
[11:01:47.378] plan(): nbrOfWorkers() = 1
[11:01:47.379] SequentialFuture started (and completed)
[11:01:47.379] - Launch lazy future ... done
[11:01:47.379] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.379] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.379] Searching for globals...
[11:01:47.381] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.381] Searching for globals ... DONE
[11:01:47.381] Resolving globals: TRUE
[11:01:47.381] Resolving any globals that are futures ...
[11:01:47.381] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.382] Resolving any globals that are futures ... DONE
[11:01:47.382] Resolving futures part of globals (recursively) ...
[11:01:47.382] resolve() on list ...
[11:01:47.382]  recursive: 99
[11:01:47.382]  length: 1
[11:01:47.382]  elements: ‘x’
[11:01:47.382]  length: 0 (resolved future 1)
[11:01:47.382] resolve() on list ... DONE
[11:01:47.383] - globals: [1] ‘x’
[11:01:47.383] Resolving futures part of globals (recursively) ... DONE
[11:01:47.383] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.383] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.383] - globals: [1] ‘x’
[11:01:47.383] 
[11:01:47.383] getGlobalsAndPackages() ... DONE
[11:01:47.384] run() for ‘Future’ ...
[11:01:47.384] - state: ‘created’
[11:01:47.384] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.384] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.384] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.384]   - Field: ‘label’
[11:01:47.384]   - Field: ‘local’
[11:01:47.384]   - Field: ‘owner’
[11:01:47.384]   - Field: ‘envir’
[11:01:47.385]   - Field: ‘packages’
[11:01:47.385]   - Field: ‘gc’
[11:01:47.385]   - Field: ‘conditions’
[11:01:47.385]   - Field: ‘expr’
[11:01:47.385]   - Field: ‘uuid’
[11:01:47.385]   - Field: ‘seed’
[11:01:47.385]   - Field: ‘version’
[11:01:47.385]   - Field: ‘result’
[11:01:47.385]   - Field: ‘asynchronous’
[11:01:47.385]   - Field: ‘calls’
[11:01:47.385]   - Field: ‘globals’
[11:01:47.385]   - Field: ‘stdout’
[11:01:47.385]   - Field: ‘earlySignal’
[11:01:47.386]   - Field: ‘lazy’
[11:01:47.386]   - Field: ‘state’
[11:01:47.386] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.386] - Launch lazy future ...
[11:01:47.386] Packages needed by the future expression (n = 0): <none>
[11:01:47.386] Packages needed by future strategies (n = 0): <none>
[11:01:47.386] {
[11:01:47.386]     {
[11:01:47.386]         {
[11:01:47.386]             ...future.startTime <- base::Sys.time()
[11:01:47.386]             {
[11:01:47.386]                 {
[11:01:47.386]                   {
[11:01:47.386]                     base::local({
[11:01:47.386]                       has_future <- base::requireNamespace("future", 
[11:01:47.386]                         quietly = TRUE)
[11:01:47.386]                       if (has_future) {
[11:01:47.386]                         ns <- base::getNamespace("future")
[11:01:47.386]                         version <- ns[[".package"]][["version"]]
[11:01:47.386]                         if (is.null(version)) 
[11:01:47.386]                           version <- utils::packageVersion("future")
[11:01:47.386]                       }
[11:01:47.386]                       else {
[11:01:47.386]                         version <- NULL
[11:01:47.386]                       }
[11:01:47.386]                       if (!has_future || version < "1.8.0") {
[11:01:47.386]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.386]                           "", base::R.version$version.string), 
[11:01:47.386]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.386]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.386]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.386]                             "release", "version")], collapse = " "), 
[11:01:47.386]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.386]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.386]                           info)
[11:01:47.386]                         info <- base::paste(info, collapse = "; ")
[11:01:47.386]                         if (!has_future) {
[11:01:47.386]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.386]                             info)
[11:01:47.386]                         }
[11:01:47.386]                         else {
[11:01:47.386]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.386]                             info, version)
[11:01:47.386]                         }
[11:01:47.386]                         base::stop(msg)
[11:01:47.386]                       }
[11:01:47.386]                     })
[11:01:47.386]                   }
[11:01:47.386]                   ...future.strategy.old <- future::plan("list")
[11:01:47.386]                   options(future.plan = NULL)
[11:01:47.386]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.386]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.386]                 }
[11:01:47.386]                 ...future.workdir <- getwd()
[11:01:47.386]             }
[11:01:47.386]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.386]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.386]         }
[11:01:47.386]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.386]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.386]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.386]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.386]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.386]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.386]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.386]             base::names(...future.oldOptions))
[11:01:47.386]     }
[11:01:47.386]     if (FALSE) {
[11:01:47.386]     }
[11:01:47.386]     else {
[11:01:47.386]         if (TRUE) {
[11:01:47.386]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.386]                 open = "w")
[11:01:47.386]         }
[11:01:47.386]         else {
[11:01:47.386]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.386]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.386]         }
[11:01:47.386]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.386]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.386]             base::sink(type = "output", split = FALSE)
[11:01:47.386]             base::close(...future.stdout)
[11:01:47.386]         }, add = TRUE)
[11:01:47.386]     }
[11:01:47.386]     ...future.frame <- base::sys.nframe()
[11:01:47.386]     ...future.conditions <- base::list()
[11:01:47.386]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.386]     if (FALSE) {
[11:01:47.386]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.386]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.386]     }
[11:01:47.386]     ...future.result <- base::tryCatch({
[11:01:47.386]         base::withCallingHandlers({
[11:01:47.386]             ...future.value <- base::withVisible(base::local({
[11:01:47.386]                 x$a <- 1
[11:01:47.386]                 x
[11:01:47.386]             }))
[11:01:47.386]             future::FutureResult(value = ...future.value$value, 
[11:01:47.386]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.386]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.386]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.386]                     ...future.globalenv.names))
[11:01:47.386]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.386]         }, condition = base::local({
[11:01:47.386]             c <- base::c
[11:01:47.386]             inherits <- base::inherits
[11:01:47.386]             invokeRestart <- base::invokeRestart
[11:01:47.386]             length <- base::length
[11:01:47.386]             list <- base::list
[11:01:47.386]             seq.int <- base::seq.int
[11:01:47.386]             signalCondition <- base::signalCondition
[11:01:47.386]             sys.calls <- base::sys.calls
[11:01:47.386]             `[[` <- base::`[[`
[11:01:47.386]             `+` <- base::`+`
[11:01:47.386]             `<<-` <- base::`<<-`
[11:01:47.386]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.386]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.386]                   3L)]
[11:01:47.386]             }
[11:01:47.386]             function(cond) {
[11:01:47.386]                 is_error <- inherits(cond, "error")
[11:01:47.386]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.386]                   NULL)
[11:01:47.386]                 if (is_error) {
[11:01:47.386]                   sessionInformation <- function() {
[11:01:47.386]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.386]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.386]                       search = base::search(), system = base::Sys.info())
[11:01:47.386]                   }
[11:01:47.386]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.386]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.386]                     cond$call), session = sessionInformation(), 
[11:01:47.386]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.386]                   signalCondition(cond)
[11:01:47.386]                 }
[11:01:47.386]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.386]                 "immediateCondition"))) {
[11:01:47.386]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.386]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.386]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.386]                   if (TRUE && !signal) {
[11:01:47.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.386]                     {
[11:01:47.386]                       inherits <- base::inherits
[11:01:47.386]                       invokeRestart <- base::invokeRestart
[11:01:47.386]                       is.null <- base::is.null
[11:01:47.386]                       muffled <- FALSE
[11:01:47.386]                       if (inherits(cond, "message")) {
[11:01:47.386]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.386]                         if (muffled) 
[11:01:47.386]                           invokeRestart("muffleMessage")
[11:01:47.386]                       }
[11:01:47.386]                       else if (inherits(cond, "warning")) {
[11:01:47.386]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.386]                         if (muffled) 
[11:01:47.386]                           invokeRestart("muffleWarning")
[11:01:47.386]                       }
[11:01:47.386]                       else if (inherits(cond, "condition")) {
[11:01:47.386]                         if (!is.null(pattern)) {
[11:01:47.386]                           computeRestarts <- base::computeRestarts
[11:01:47.386]                           grepl <- base::grepl
[11:01:47.386]                           restarts <- computeRestarts(cond)
[11:01:47.386]                           for (restart in restarts) {
[11:01:47.386]                             name <- restart$name
[11:01:47.386]                             if (is.null(name)) 
[11:01:47.386]                               next
[11:01:47.386]                             if (!grepl(pattern, name)) 
[11:01:47.386]                               next
[11:01:47.386]                             invokeRestart(restart)
[11:01:47.386]                             muffled <- TRUE
[11:01:47.386]                             break
[11:01:47.386]                           }
[11:01:47.386]                         }
[11:01:47.386]                       }
[11:01:47.386]                       invisible(muffled)
[11:01:47.386]                     }
[11:01:47.386]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.386]                   }
[11:01:47.386]                 }
[11:01:47.386]                 else {
[11:01:47.386]                   if (TRUE) {
[11:01:47.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.386]                     {
[11:01:47.386]                       inherits <- base::inherits
[11:01:47.386]                       invokeRestart <- base::invokeRestart
[11:01:47.386]                       is.null <- base::is.null
[11:01:47.386]                       muffled <- FALSE
[11:01:47.386]                       if (inherits(cond, "message")) {
[11:01:47.386]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.386]                         if (muffled) 
[11:01:47.386]                           invokeRestart("muffleMessage")
[11:01:47.386]                       }
[11:01:47.386]                       else if (inherits(cond, "warning")) {
[11:01:47.386]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.386]                         if (muffled) 
[11:01:47.386]                           invokeRestart("muffleWarning")
[11:01:47.386]                       }
[11:01:47.386]                       else if (inherits(cond, "condition")) {
[11:01:47.386]                         if (!is.null(pattern)) {
[11:01:47.386]                           computeRestarts <- base::computeRestarts
[11:01:47.386]                           grepl <- base::grepl
[11:01:47.386]                           restarts <- computeRestarts(cond)
[11:01:47.386]                           for (restart in restarts) {
[11:01:47.386]                             name <- restart$name
[11:01:47.386]                             if (is.null(name)) 
[11:01:47.386]                               next
[11:01:47.386]                             if (!grepl(pattern, name)) 
[11:01:47.386]                               next
[11:01:47.386]                             invokeRestart(restart)
[11:01:47.386]                             muffled <- TRUE
[11:01:47.386]                             break
[11:01:47.386]                           }
[11:01:47.386]                         }
[11:01:47.386]                       }
[11:01:47.386]                       invisible(muffled)
[11:01:47.386]                     }
[11:01:47.386]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.386]                   }
[11:01:47.386]                 }
[11:01:47.386]             }
[11:01:47.386]         }))
[11:01:47.386]     }, error = function(ex) {
[11:01:47.386]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.386]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.386]                 ...future.rng), started = ...future.startTime, 
[11:01:47.386]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.386]             version = "1.8"), class = "FutureResult")
[11:01:47.386]     }, finally = {
[11:01:47.386]         if (!identical(...future.workdir, getwd())) 
[11:01:47.386]             setwd(...future.workdir)
[11:01:47.386]         {
[11:01:47.386]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.386]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.386]             }
[11:01:47.386]             base::options(...future.oldOptions)
[11:01:47.386]             if (.Platform$OS.type == "windows") {
[11:01:47.386]                 old_names <- names(...future.oldEnvVars)
[11:01:47.386]                 envs <- base::Sys.getenv()
[11:01:47.386]                 names <- names(envs)
[11:01:47.386]                 common <- intersect(names, old_names)
[11:01:47.386]                 added <- setdiff(names, old_names)
[11:01:47.386]                 removed <- setdiff(old_names, names)
[11:01:47.386]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.386]                   envs[common]]
[11:01:47.386]                 NAMES <- toupper(changed)
[11:01:47.386]                 args <- list()
[11:01:47.386]                 for (kk in seq_along(NAMES)) {
[11:01:47.386]                   name <- changed[[kk]]
[11:01:47.386]                   NAME <- NAMES[[kk]]
[11:01:47.386]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.386]                     next
[11:01:47.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.386]                 }
[11:01:47.386]                 NAMES <- toupper(added)
[11:01:47.386]                 for (kk in seq_along(NAMES)) {
[11:01:47.386]                   name <- added[[kk]]
[11:01:47.386]                   NAME <- NAMES[[kk]]
[11:01:47.386]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.386]                     next
[11:01:47.386]                   args[[name]] <- ""
[11:01:47.386]                 }
[11:01:47.386]                 NAMES <- toupper(removed)
[11:01:47.386]                 for (kk in seq_along(NAMES)) {
[11:01:47.386]                   name <- removed[[kk]]
[11:01:47.386]                   NAME <- NAMES[[kk]]
[11:01:47.386]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.386]                     next
[11:01:47.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.386]                 }
[11:01:47.386]                 if (length(args) > 0) 
[11:01:47.386]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.386]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.386]             }
[11:01:47.386]             else {
[11:01:47.386]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.386]             }
[11:01:47.386]             {
[11:01:47.386]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.386]                   0L) {
[11:01:47.386]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.386]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.386]                   base::options(opts)
[11:01:47.386]                 }
[11:01:47.386]                 {
[11:01:47.386]                   {
[11:01:47.386]                     NULL
[11:01:47.386]                     RNGkind("Mersenne-Twister")
[11:01:47.386]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.386]                       inherits = FALSE)
[11:01:47.386]                   }
[11:01:47.386]                   options(future.plan = NULL)
[11:01:47.386]                   if (is.na(NA_character_)) 
[11:01:47.386]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.386]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.386]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.386]                     .init = FALSE)
[11:01:47.386]                 }
[11:01:47.386]             }
[11:01:47.386]         }
[11:01:47.386]     })
[11:01:47.386]     if (TRUE) {
[11:01:47.386]         base::sink(type = "output", split = FALSE)
[11:01:47.386]         if (TRUE) {
[11:01:47.386]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.386]         }
[11:01:47.386]         else {
[11:01:47.386]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.386]         }
[11:01:47.386]         base::close(...future.stdout)
[11:01:47.386]         ...future.stdout <- NULL
[11:01:47.386]     }
[11:01:47.386]     ...future.result$conditions <- ...future.conditions
[11:01:47.386]     ...future.result$finished <- base::Sys.time()
[11:01:47.386]     ...future.result
[11:01:47.386] }
[11:01:47.388] assign_globals() ...
[11:01:47.388] List of 1
[11:01:47.388]  $ x: list()
[11:01:47.388]  - attr(*, "where")=List of 1
[11:01:47.388]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.388]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.388]  - attr(*, "resolved")= logi TRUE
[11:01:47.388]  - attr(*, "total_size")= num 31
[11:01:47.388]  - attr(*, "already-done")= logi TRUE
[11:01:47.390] - copied ‘x’ to environment
[11:01:47.390] assign_globals() ... done
[11:01:47.391] plan(): Setting new future strategy stack:
[11:01:47.391] List of future strategies:
[11:01:47.391] 1. sequential:
[11:01:47.391]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.391]    - tweaked: FALSE
[11:01:47.391]    - call: NULL
[11:01:47.391] plan(): nbrOfWorkers() = 1
[11:01:47.392] plan(): Setting new future strategy stack:
[11:01:47.392] List of future strategies:
[11:01:47.392] 1. sequential:
[11:01:47.392]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.392]    - tweaked: FALSE
[11:01:47.392]    - call: plan(strategy)
[11:01:47.392] plan(): nbrOfWorkers() = 1
[11:01:47.392] SequentialFuture started (and completed)
[11:01:47.392] - Launch lazy future ... done
[11:01:47.393] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.393] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.393] Searching for globals...
[11:01:47.396] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[11:01:47.396] Searching for globals ... DONE
[11:01:47.396] Resolving globals: TRUE
[11:01:47.396] Resolving any globals that are futures ...
[11:01:47.397] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[11:01:47.397] Resolving any globals that are futures ... DONE
[11:01:47.397] 
[11:01:47.397] 
[11:01:47.397] getGlobalsAndPackages() ... DONE
[11:01:47.397] run() for ‘Future’ ...
[11:01:47.397] - state: ‘created’
[11:01:47.398] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.398] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.398] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.398]   - Field: ‘label’
[11:01:47.398]   - Field: ‘local’
[11:01:47.398]   - Field: ‘owner’
[11:01:47.398]   - Field: ‘envir’
[11:01:47.398]   - Field: ‘packages’
[11:01:47.398]   - Field: ‘gc’
[11:01:47.398]   - Field: ‘conditions’
[11:01:47.399]   - Field: ‘expr’
[11:01:47.399]   - Field: ‘uuid’
[11:01:47.399]   - Field: ‘seed’
[11:01:47.399]   - Field: ‘version’
[11:01:47.399]   - Field: ‘result’
[11:01:47.399]   - Field: ‘asynchronous’
[11:01:47.399]   - Field: ‘calls’
[11:01:47.399]   - Field: ‘globals’
[11:01:47.399]   - Field: ‘stdout’
[11:01:47.399]   - Field: ‘earlySignal’
[11:01:47.399]   - Field: ‘lazy’
[11:01:47.399]   - Field: ‘state’
[11:01:47.399] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.400] - Launch lazy future ...
[11:01:47.400] Packages needed by the future expression (n = 0): <none>
[11:01:47.400] Packages needed by future strategies (n = 0): <none>
[11:01:47.400] {
[11:01:47.400]     {
[11:01:47.400]         {
[11:01:47.400]             ...future.startTime <- base::Sys.time()
[11:01:47.400]             {
[11:01:47.400]                 {
[11:01:47.400]                   {
[11:01:47.400]                     base::local({
[11:01:47.400]                       has_future <- base::requireNamespace("future", 
[11:01:47.400]                         quietly = TRUE)
[11:01:47.400]                       if (has_future) {
[11:01:47.400]                         ns <- base::getNamespace("future")
[11:01:47.400]                         version <- ns[[".package"]][["version"]]
[11:01:47.400]                         if (is.null(version)) 
[11:01:47.400]                           version <- utils::packageVersion("future")
[11:01:47.400]                       }
[11:01:47.400]                       else {
[11:01:47.400]                         version <- NULL
[11:01:47.400]                       }
[11:01:47.400]                       if (!has_future || version < "1.8.0") {
[11:01:47.400]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.400]                           "", base::R.version$version.string), 
[11:01:47.400]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.400]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.400]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.400]                             "release", "version")], collapse = " "), 
[11:01:47.400]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.400]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.400]                           info)
[11:01:47.400]                         info <- base::paste(info, collapse = "; ")
[11:01:47.400]                         if (!has_future) {
[11:01:47.400]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.400]                             info)
[11:01:47.400]                         }
[11:01:47.400]                         else {
[11:01:47.400]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.400]                             info, version)
[11:01:47.400]                         }
[11:01:47.400]                         base::stop(msg)
[11:01:47.400]                       }
[11:01:47.400]                     })
[11:01:47.400]                   }
[11:01:47.400]                   ...future.strategy.old <- future::plan("list")
[11:01:47.400]                   options(future.plan = NULL)
[11:01:47.400]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.400]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.400]                 }
[11:01:47.400]                 ...future.workdir <- getwd()
[11:01:47.400]             }
[11:01:47.400]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.400]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.400]         }
[11:01:47.400]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.400]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.400]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.400]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.400]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.400]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.400]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.400]             base::names(...future.oldOptions))
[11:01:47.400]     }
[11:01:47.400]     if (FALSE) {
[11:01:47.400]     }
[11:01:47.400]     else {
[11:01:47.400]         if (TRUE) {
[11:01:47.400]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.400]                 open = "w")
[11:01:47.400]         }
[11:01:47.400]         else {
[11:01:47.400]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.400]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.400]         }
[11:01:47.400]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.400]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.400]             base::sink(type = "output", split = FALSE)
[11:01:47.400]             base::close(...future.stdout)
[11:01:47.400]         }, add = TRUE)
[11:01:47.400]     }
[11:01:47.400]     ...future.frame <- base::sys.nframe()
[11:01:47.400]     ...future.conditions <- base::list()
[11:01:47.400]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.400]     if (FALSE) {
[11:01:47.400]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.400]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.400]     }
[11:01:47.400]     ...future.result <- base::tryCatch({
[11:01:47.400]         base::withCallingHandlers({
[11:01:47.400]             ...future.value <- base::withVisible(base::local({
[11:01:47.400]                 x <- list(b = 2)
[11:01:47.400]                 x$a <- 1
[11:01:47.400]                 x
[11:01:47.400]             }))
[11:01:47.400]             future::FutureResult(value = ...future.value$value, 
[11:01:47.400]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.400]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.400]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.400]                     ...future.globalenv.names))
[11:01:47.400]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.400]         }, condition = base::local({
[11:01:47.400]             c <- base::c
[11:01:47.400]             inherits <- base::inherits
[11:01:47.400]             invokeRestart <- base::invokeRestart
[11:01:47.400]             length <- base::length
[11:01:47.400]             list <- base::list
[11:01:47.400]             seq.int <- base::seq.int
[11:01:47.400]             signalCondition <- base::signalCondition
[11:01:47.400]             sys.calls <- base::sys.calls
[11:01:47.400]             `[[` <- base::`[[`
[11:01:47.400]             `+` <- base::`+`
[11:01:47.400]             `<<-` <- base::`<<-`
[11:01:47.400]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.400]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.400]                   3L)]
[11:01:47.400]             }
[11:01:47.400]             function(cond) {
[11:01:47.400]                 is_error <- inherits(cond, "error")
[11:01:47.400]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.400]                   NULL)
[11:01:47.400]                 if (is_error) {
[11:01:47.400]                   sessionInformation <- function() {
[11:01:47.400]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.400]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.400]                       search = base::search(), system = base::Sys.info())
[11:01:47.400]                   }
[11:01:47.400]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.400]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.400]                     cond$call), session = sessionInformation(), 
[11:01:47.400]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.400]                   signalCondition(cond)
[11:01:47.400]                 }
[11:01:47.400]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.400]                 "immediateCondition"))) {
[11:01:47.400]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.400]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.400]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.400]                   if (TRUE && !signal) {
[11:01:47.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.400]                     {
[11:01:47.400]                       inherits <- base::inherits
[11:01:47.400]                       invokeRestart <- base::invokeRestart
[11:01:47.400]                       is.null <- base::is.null
[11:01:47.400]                       muffled <- FALSE
[11:01:47.400]                       if (inherits(cond, "message")) {
[11:01:47.400]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.400]                         if (muffled) 
[11:01:47.400]                           invokeRestart("muffleMessage")
[11:01:47.400]                       }
[11:01:47.400]                       else if (inherits(cond, "warning")) {
[11:01:47.400]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.400]                         if (muffled) 
[11:01:47.400]                           invokeRestart("muffleWarning")
[11:01:47.400]                       }
[11:01:47.400]                       else if (inherits(cond, "condition")) {
[11:01:47.400]                         if (!is.null(pattern)) {
[11:01:47.400]                           computeRestarts <- base::computeRestarts
[11:01:47.400]                           grepl <- base::grepl
[11:01:47.400]                           restarts <- computeRestarts(cond)
[11:01:47.400]                           for (restart in restarts) {
[11:01:47.400]                             name <- restart$name
[11:01:47.400]                             if (is.null(name)) 
[11:01:47.400]                               next
[11:01:47.400]                             if (!grepl(pattern, name)) 
[11:01:47.400]                               next
[11:01:47.400]                             invokeRestart(restart)
[11:01:47.400]                             muffled <- TRUE
[11:01:47.400]                             break
[11:01:47.400]                           }
[11:01:47.400]                         }
[11:01:47.400]                       }
[11:01:47.400]                       invisible(muffled)
[11:01:47.400]                     }
[11:01:47.400]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.400]                   }
[11:01:47.400]                 }
[11:01:47.400]                 else {
[11:01:47.400]                   if (TRUE) {
[11:01:47.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.400]                     {
[11:01:47.400]                       inherits <- base::inherits
[11:01:47.400]                       invokeRestart <- base::invokeRestart
[11:01:47.400]                       is.null <- base::is.null
[11:01:47.400]                       muffled <- FALSE
[11:01:47.400]                       if (inherits(cond, "message")) {
[11:01:47.400]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.400]                         if (muffled) 
[11:01:47.400]                           invokeRestart("muffleMessage")
[11:01:47.400]                       }
[11:01:47.400]                       else if (inherits(cond, "warning")) {
[11:01:47.400]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.400]                         if (muffled) 
[11:01:47.400]                           invokeRestart("muffleWarning")
[11:01:47.400]                       }
[11:01:47.400]                       else if (inherits(cond, "condition")) {
[11:01:47.400]                         if (!is.null(pattern)) {
[11:01:47.400]                           computeRestarts <- base::computeRestarts
[11:01:47.400]                           grepl <- base::grepl
[11:01:47.400]                           restarts <- computeRestarts(cond)
[11:01:47.400]                           for (restart in restarts) {
[11:01:47.400]                             name <- restart$name
[11:01:47.400]                             if (is.null(name)) 
[11:01:47.400]                               next
[11:01:47.400]                             if (!grepl(pattern, name)) 
[11:01:47.400]                               next
[11:01:47.400]                             invokeRestart(restart)
[11:01:47.400]                             muffled <- TRUE
[11:01:47.400]                             break
[11:01:47.400]                           }
[11:01:47.400]                         }
[11:01:47.400]                       }
[11:01:47.400]                       invisible(muffled)
[11:01:47.400]                     }
[11:01:47.400]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.400]                   }
[11:01:47.400]                 }
[11:01:47.400]             }
[11:01:47.400]         }))
[11:01:47.400]     }, error = function(ex) {
[11:01:47.400]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.400]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.400]                 ...future.rng), started = ...future.startTime, 
[11:01:47.400]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.400]             version = "1.8"), class = "FutureResult")
[11:01:47.400]     }, finally = {
[11:01:47.400]         if (!identical(...future.workdir, getwd())) 
[11:01:47.400]             setwd(...future.workdir)
[11:01:47.400]         {
[11:01:47.400]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.400]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.400]             }
[11:01:47.400]             base::options(...future.oldOptions)
[11:01:47.400]             if (.Platform$OS.type == "windows") {
[11:01:47.400]                 old_names <- names(...future.oldEnvVars)
[11:01:47.400]                 envs <- base::Sys.getenv()
[11:01:47.400]                 names <- names(envs)
[11:01:47.400]                 common <- intersect(names, old_names)
[11:01:47.400]                 added <- setdiff(names, old_names)
[11:01:47.400]                 removed <- setdiff(old_names, names)
[11:01:47.400]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.400]                   envs[common]]
[11:01:47.400]                 NAMES <- toupper(changed)
[11:01:47.400]                 args <- list()
[11:01:47.400]                 for (kk in seq_along(NAMES)) {
[11:01:47.400]                   name <- changed[[kk]]
[11:01:47.400]                   NAME <- NAMES[[kk]]
[11:01:47.400]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.400]                     next
[11:01:47.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.400]                 }
[11:01:47.400]                 NAMES <- toupper(added)
[11:01:47.400]                 for (kk in seq_along(NAMES)) {
[11:01:47.400]                   name <- added[[kk]]
[11:01:47.400]                   NAME <- NAMES[[kk]]
[11:01:47.400]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.400]                     next
[11:01:47.400]                   args[[name]] <- ""
[11:01:47.400]                 }
[11:01:47.400]                 NAMES <- toupper(removed)
[11:01:47.400]                 for (kk in seq_along(NAMES)) {
[11:01:47.400]                   name <- removed[[kk]]
[11:01:47.400]                   NAME <- NAMES[[kk]]
[11:01:47.400]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.400]                     next
[11:01:47.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.400]                 }
[11:01:47.400]                 if (length(args) > 0) 
[11:01:47.400]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.400]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.400]             }
[11:01:47.400]             else {
[11:01:47.400]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.400]             }
[11:01:47.400]             {
[11:01:47.400]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.400]                   0L) {
[11:01:47.400]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.400]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.400]                   base::options(opts)
[11:01:47.400]                 }
[11:01:47.400]                 {
[11:01:47.400]                   {
[11:01:47.400]                     NULL
[11:01:47.400]                     RNGkind("Mersenne-Twister")
[11:01:47.400]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.400]                       inherits = FALSE)
[11:01:47.400]                   }
[11:01:47.400]                   options(future.plan = NULL)
[11:01:47.400]                   if (is.na(NA_character_)) 
[11:01:47.400]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.400]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.400]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.400]                     .init = FALSE)
[11:01:47.400]                 }
[11:01:47.400]             }
[11:01:47.400]         }
[11:01:47.400]     })
[11:01:47.400]     if (TRUE) {
[11:01:47.400]         base::sink(type = "output", split = FALSE)
[11:01:47.400]         if (TRUE) {
[11:01:47.400]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.400]         }
[11:01:47.400]         else {
[11:01:47.400]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.400]         }
[11:01:47.400]         base::close(...future.stdout)
[11:01:47.400]         ...future.stdout <- NULL
[11:01:47.400]     }
[11:01:47.400]     ...future.result$conditions <- ...future.conditions
[11:01:47.400]     ...future.result$finished <- base::Sys.time()
[11:01:47.400]     ...future.result
[11:01:47.400] }
[11:01:47.402] plan(): Setting new future strategy stack:
[11:01:47.402] List of future strategies:
[11:01:47.402] 1. sequential:
[11:01:47.402]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.402]    - tweaked: FALSE
[11:01:47.402]    - call: NULL
[11:01:47.402] plan(): nbrOfWorkers() = 1
[11:01:47.403] plan(): Setting new future strategy stack:
[11:01:47.403] List of future strategies:
[11:01:47.403] 1. sequential:
[11:01:47.403]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.403]    - tweaked: FALSE
[11:01:47.403]    - call: plan(strategy)
[11:01:47.404] plan(): nbrOfWorkers() = 1
[11:01:47.404] SequentialFuture started (and completed)
[11:01:47.404] - Launch lazy future ... done
[11:01:47.404] run() for ‘SequentialFuture’ ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.404] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.404] Searching for globals...
[11:01:47.406] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.406] Searching for globals ... DONE
[11:01:47.406] Resolving globals: TRUE
[11:01:47.406] Resolving any globals that are futures ...
[11:01:47.406] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.407] Resolving any globals that are futures ... DONE
[11:01:47.407] Resolving futures part of globals (recursively) ...
[11:01:47.407] resolve() on list ...
[11:01:47.407]  recursive: 99
[11:01:47.407]  length: 1
[11:01:47.407]  elements: ‘x’
[11:01:47.407]  length: 0 (resolved future 1)
[11:01:47.408] resolve() on list ... DONE
[11:01:47.408] - globals: [1] ‘x’
[11:01:47.408] Resolving futures part of globals (recursively) ... DONE
[11:01:47.408] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.408] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.408] - globals: [1] ‘x’
[11:01:47.408] 
[11:01:47.408] getGlobalsAndPackages() ... DONE
[11:01:47.409] run() for ‘Future’ ...
[11:01:47.409] - state: ‘created’
[11:01:47.409] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.409] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.409] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.409]   - Field: ‘label’
[11:01:47.409]   - Field: ‘local’
[11:01:47.409]   - Field: ‘owner’
[11:01:47.409]   - Field: ‘envir’
[11:01:47.410]   - Field: ‘packages’
[11:01:47.410]   - Field: ‘gc’
[11:01:47.410]   - Field: ‘conditions’
[11:01:47.410]   - Field: ‘expr’
[11:01:47.410]   - Field: ‘uuid’
[11:01:47.410]   - Field: ‘seed’
[11:01:47.410]   - Field: ‘version’
[11:01:47.410]   - Field: ‘result’
[11:01:47.410]   - Field: ‘asynchronous’
[11:01:47.410]   - Field: ‘calls’
[11:01:47.410]   - Field: ‘globals’
[11:01:47.410]   - Field: ‘stdout’
[11:01:47.410]   - Field: ‘earlySignal’
[11:01:47.411]   - Field: ‘lazy’
[11:01:47.411]   - Field: ‘state’
[11:01:47.411] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.411] - Launch lazy future ...
[11:01:47.411] Packages needed by the future expression (n = 0): <none>
[11:01:47.411] Packages needed by future strategies (n = 0): <none>
[11:01:47.411] {
[11:01:47.411]     {
[11:01:47.411]         {
[11:01:47.411]             ...future.startTime <- base::Sys.time()
[11:01:47.411]             {
[11:01:47.411]                 {
[11:01:47.411]                   {
[11:01:47.411]                     base::local({
[11:01:47.411]                       has_future <- base::requireNamespace("future", 
[11:01:47.411]                         quietly = TRUE)
[11:01:47.411]                       if (has_future) {
[11:01:47.411]                         ns <- base::getNamespace("future")
[11:01:47.411]                         version <- ns[[".package"]][["version"]]
[11:01:47.411]                         if (is.null(version)) 
[11:01:47.411]                           version <- utils::packageVersion("future")
[11:01:47.411]                       }
[11:01:47.411]                       else {
[11:01:47.411]                         version <- NULL
[11:01:47.411]                       }
[11:01:47.411]                       if (!has_future || version < "1.8.0") {
[11:01:47.411]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.411]                           "", base::R.version$version.string), 
[11:01:47.411]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.411]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.411]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.411]                             "release", "version")], collapse = " "), 
[11:01:47.411]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.411]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.411]                           info)
[11:01:47.411]                         info <- base::paste(info, collapse = "; ")
[11:01:47.411]                         if (!has_future) {
[11:01:47.411]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.411]                             info)
[11:01:47.411]                         }
[11:01:47.411]                         else {
[11:01:47.411]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.411]                             info, version)
[11:01:47.411]                         }
[11:01:47.411]                         base::stop(msg)
[11:01:47.411]                       }
[11:01:47.411]                     })
[11:01:47.411]                   }
[11:01:47.411]                   ...future.strategy.old <- future::plan("list")
[11:01:47.411]                   options(future.plan = NULL)
[11:01:47.411]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.411]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.411]                 }
[11:01:47.411]                 ...future.workdir <- getwd()
[11:01:47.411]             }
[11:01:47.411]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.411]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.411]         }
[11:01:47.411]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.411]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.411]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.411]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.411]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.411]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.411]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.411]             base::names(...future.oldOptions))
[11:01:47.411]     }
[11:01:47.411]     if (FALSE) {
[11:01:47.411]     }
[11:01:47.411]     else {
[11:01:47.411]         if (TRUE) {
[11:01:47.411]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.411]                 open = "w")
[11:01:47.411]         }
[11:01:47.411]         else {
[11:01:47.411]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.411]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.411]         }
[11:01:47.411]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.411]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.411]             base::sink(type = "output", split = FALSE)
[11:01:47.411]             base::close(...future.stdout)
[11:01:47.411]         }, add = TRUE)
[11:01:47.411]     }
[11:01:47.411]     ...future.frame <- base::sys.nframe()
[11:01:47.411]     ...future.conditions <- base::list()
[11:01:47.411]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.411]     if (FALSE) {
[11:01:47.411]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.411]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.411]     }
[11:01:47.411]     ...future.result <- base::tryCatch({
[11:01:47.411]         base::withCallingHandlers({
[11:01:47.411]             ...future.value <- base::withVisible(base::local({
[11:01:47.411]                 x[["a"]] <- 1
[11:01:47.411]                 x
[11:01:47.411]             }))
[11:01:47.411]             future::FutureResult(value = ...future.value$value, 
[11:01:47.411]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.411]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.411]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.411]                     ...future.globalenv.names))
[11:01:47.411]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.411]         }, condition = base::local({
[11:01:47.411]             c <- base::c
[11:01:47.411]             inherits <- base::inherits
[11:01:47.411]             invokeRestart <- base::invokeRestart
[11:01:47.411]             length <- base::length
[11:01:47.411]             list <- base::list
[11:01:47.411]             seq.int <- base::seq.int
[11:01:47.411]             signalCondition <- base::signalCondition
[11:01:47.411]             sys.calls <- base::sys.calls
[11:01:47.411]             `[[` <- base::`[[`
[11:01:47.411]             `+` <- base::`+`
[11:01:47.411]             `<<-` <- base::`<<-`
[11:01:47.411]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.411]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.411]                   3L)]
[11:01:47.411]             }
[11:01:47.411]             function(cond) {
[11:01:47.411]                 is_error <- inherits(cond, "error")
[11:01:47.411]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.411]                   NULL)
[11:01:47.411]                 if (is_error) {
[11:01:47.411]                   sessionInformation <- function() {
[11:01:47.411]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.411]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.411]                       search = base::search(), system = base::Sys.info())
[11:01:47.411]                   }
[11:01:47.411]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.411]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.411]                     cond$call), session = sessionInformation(), 
[11:01:47.411]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.411]                   signalCondition(cond)
[11:01:47.411]                 }
[11:01:47.411]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.411]                 "immediateCondition"))) {
[11:01:47.411]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.411]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.411]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.411]                   if (TRUE && !signal) {
[11:01:47.411]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.411]                     {
[11:01:47.411]                       inherits <- base::inherits
[11:01:47.411]                       invokeRestart <- base::invokeRestart
[11:01:47.411]                       is.null <- base::is.null
[11:01:47.411]                       muffled <- FALSE
[11:01:47.411]                       if (inherits(cond, "message")) {
[11:01:47.411]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.411]                         if (muffled) 
[11:01:47.411]                           invokeRestart("muffleMessage")
[11:01:47.411]                       }
[11:01:47.411]                       else if (inherits(cond, "warning")) {
[11:01:47.411]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.411]                         if (muffled) 
[11:01:47.411]                           invokeRestart("muffleWarning")
[11:01:47.411]                       }
[11:01:47.411]                       else if (inherits(cond, "condition")) {
[11:01:47.411]                         if (!is.null(pattern)) {
[11:01:47.411]                           computeRestarts <- base::computeRestarts
[11:01:47.411]                           grepl <- base::grepl
[11:01:47.411]                           restarts <- computeRestarts(cond)
[11:01:47.411]                           for (restart in restarts) {
[11:01:47.411]                             name <- restart$name
[11:01:47.411]                             if (is.null(name)) 
[11:01:47.411]                               next
[11:01:47.411]                             if (!grepl(pattern, name)) 
[11:01:47.411]                               next
[11:01:47.411]                             invokeRestart(restart)
[11:01:47.411]                             muffled <- TRUE
[11:01:47.411]                             break
[11:01:47.411]                           }
[11:01:47.411]                         }
[11:01:47.411]                       }
[11:01:47.411]                       invisible(muffled)
[11:01:47.411]                     }
[11:01:47.411]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.411]                   }
[11:01:47.411]                 }
[11:01:47.411]                 else {
[11:01:47.411]                   if (TRUE) {
[11:01:47.411]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.411]                     {
[11:01:47.411]                       inherits <- base::inherits
[11:01:47.411]                       invokeRestart <- base::invokeRestart
[11:01:47.411]                       is.null <- base::is.null
[11:01:47.411]                       muffled <- FALSE
[11:01:47.411]                       if (inherits(cond, "message")) {
[11:01:47.411]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.411]                         if (muffled) 
[11:01:47.411]                           invokeRestart("muffleMessage")
[11:01:47.411]                       }
[11:01:47.411]                       else if (inherits(cond, "warning")) {
[11:01:47.411]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.411]                         if (muffled) 
[11:01:47.411]                           invokeRestart("muffleWarning")
[11:01:47.411]                       }
[11:01:47.411]                       else if (inherits(cond, "condition")) {
[11:01:47.411]                         if (!is.null(pattern)) {
[11:01:47.411]                           computeRestarts <- base::computeRestarts
[11:01:47.411]                           grepl <- base::grepl
[11:01:47.411]                           restarts <- computeRestarts(cond)
[11:01:47.411]                           for (restart in restarts) {
[11:01:47.411]                             name <- restart$name
[11:01:47.411]                             if (is.null(name)) 
[11:01:47.411]                               next
[11:01:47.411]                             if (!grepl(pattern, name)) 
[11:01:47.411]                               next
[11:01:47.411]                             invokeRestart(restart)
[11:01:47.411]                             muffled <- TRUE
[11:01:47.411]                             break
[11:01:47.411]                           }
[11:01:47.411]                         }
[11:01:47.411]                       }
[11:01:47.411]                       invisible(muffled)
[11:01:47.411]                     }
[11:01:47.411]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.411]                   }
[11:01:47.411]                 }
[11:01:47.411]             }
[11:01:47.411]         }))
[11:01:47.411]     }, error = function(ex) {
[11:01:47.411]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.411]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.411]                 ...future.rng), started = ...future.startTime, 
[11:01:47.411]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.411]             version = "1.8"), class = "FutureResult")
[11:01:47.411]     }, finally = {
[11:01:47.411]         if (!identical(...future.workdir, getwd())) 
[11:01:47.411]             setwd(...future.workdir)
[11:01:47.411]         {
[11:01:47.411]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.411]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.411]             }
[11:01:47.411]             base::options(...future.oldOptions)
[11:01:47.411]             if (.Platform$OS.type == "windows") {
[11:01:47.411]                 old_names <- names(...future.oldEnvVars)
[11:01:47.411]                 envs <- base::Sys.getenv()
[11:01:47.411]                 names <- names(envs)
[11:01:47.411]                 common <- intersect(names, old_names)
[11:01:47.411]                 added <- setdiff(names, old_names)
[11:01:47.411]                 removed <- setdiff(old_names, names)
[11:01:47.411]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.411]                   envs[common]]
[11:01:47.411]                 NAMES <- toupper(changed)
[11:01:47.411]                 args <- list()
[11:01:47.411]                 for (kk in seq_along(NAMES)) {
[11:01:47.411]                   name <- changed[[kk]]
[11:01:47.411]                   NAME <- NAMES[[kk]]
[11:01:47.411]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.411]                     next
[11:01:47.411]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.411]                 }
[11:01:47.411]                 NAMES <- toupper(added)
[11:01:47.411]                 for (kk in seq_along(NAMES)) {
[11:01:47.411]                   name <- added[[kk]]
[11:01:47.411]                   NAME <- NAMES[[kk]]
[11:01:47.411]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.411]                     next
[11:01:47.411]                   args[[name]] <- ""
[11:01:47.411]                 }
[11:01:47.411]                 NAMES <- toupper(removed)
[11:01:47.411]                 for (kk in seq_along(NAMES)) {
[11:01:47.411]                   name <- removed[[kk]]
[11:01:47.411]                   NAME <- NAMES[[kk]]
[11:01:47.411]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.411]                     next
[11:01:47.411]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.411]                 }
[11:01:47.411]                 if (length(args) > 0) 
[11:01:47.411]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.411]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.411]             }
[11:01:47.411]             else {
[11:01:47.411]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.411]             }
[11:01:47.411]             {
[11:01:47.411]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.411]                   0L) {
[11:01:47.411]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.411]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.411]                   base::options(opts)
[11:01:47.411]                 }
[11:01:47.411]                 {
[11:01:47.411]                   {
[11:01:47.411]                     NULL
[11:01:47.411]                     RNGkind("Mersenne-Twister")
[11:01:47.411]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.411]                       inherits = FALSE)
[11:01:47.411]                   }
[11:01:47.411]                   options(future.plan = NULL)
[11:01:47.411]                   if (is.na(NA_character_)) 
[11:01:47.411]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.411]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.411]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.411]                     .init = FALSE)
[11:01:47.411]                 }
[11:01:47.411]             }
[11:01:47.411]         }
[11:01:47.411]     })
[11:01:47.411]     if (TRUE) {
[11:01:47.411]         base::sink(type = "output", split = FALSE)
[11:01:47.411]         if (TRUE) {
[11:01:47.411]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.411]         }
[11:01:47.411]         else {
[11:01:47.411]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.411]         }
[11:01:47.411]         base::close(...future.stdout)
[11:01:47.411]         ...future.stdout <- NULL
[11:01:47.411]     }
[11:01:47.411]     ...future.result$conditions <- ...future.conditions
[11:01:47.411]     ...future.result$finished <- base::Sys.time()
[11:01:47.411]     ...future.result
[11:01:47.411] }
[11:01:47.413] assign_globals() ...
[11:01:47.413] List of 1
[11:01:47.413]  $ x: list()
[11:01:47.413]  - attr(*, "where")=List of 1
[11:01:47.413]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.413]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.413]  - attr(*, "resolved")= logi TRUE
[11:01:47.413]  - attr(*, "total_size")= num 31
[11:01:47.413]  - attr(*, "already-done")= logi TRUE
[11:01:47.415] - copied ‘x’ to environment
[11:01:47.415] assign_globals() ... done
[11:01:47.416] plan(): Setting new future strategy stack:
[11:01:47.416] List of future strategies:
[11:01:47.416] 1. sequential:
[11:01:47.416]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.416]    - tweaked: FALSE
[11:01:47.416]    - call: NULL
[11:01:47.416] plan(): nbrOfWorkers() = 1
[11:01:47.417] plan(): Setting new future strategy stack:
[11:01:47.417] List of future strategies:
[11:01:47.417] 1. sequential:
[11:01:47.417]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.417]    - tweaked: FALSE
[11:01:47.417]    - call: plan(strategy)
[11:01:47.417] plan(): nbrOfWorkers() = 1
[11:01:47.417] SequentialFuture started (and completed)
[11:01:47.417] - Launch lazy future ... done
[11:01:47.418] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.418] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.418] Searching for globals...
[11:01:47.421] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.421] Searching for globals ... DONE
[11:01:47.421] Resolving globals: TRUE
[11:01:47.421] Resolving any globals that are futures ...
[11:01:47.421] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.421] Resolving any globals that are futures ... DONE
[11:01:47.421] Resolving futures part of globals (recursively) ...
[11:01:47.422] resolve() on list ...
[11:01:47.422]  recursive: 99
[11:01:47.422]  length: 1
[11:01:47.422]  elements: ‘x’
[11:01:47.422]  length: 0 (resolved future 1)
[11:01:47.422] resolve() on list ... DONE
[11:01:47.422] - globals: [1] ‘x’
[11:01:47.422] Resolving futures part of globals (recursively) ... DONE
[11:01:47.422] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.423] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.423] - globals: [1] ‘x’
[11:01:47.423] 
[11:01:47.423] getGlobalsAndPackages() ... DONE
[11:01:47.423] run() for ‘Future’ ...
[11:01:47.423] - state: ‘created’
[11:01:47.423] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.423] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.424] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.424]   - Field: ‘label’
[11:01:47.424]   - Field: ‘local’
[11:01:47.424]   - Field: ‘owner’
[11:01:47.424]   - Field: ‘envir’
[11:01:47.424]   - Field: ‘packages’
[11:01:47.424]   - Field: ‘gc’
[11:01:47.424]   - Field: ‘conditions’
[11:01:47.424]   - Field: ‘expr’
[11:01:47.424]   - Field: ‘uuid’
[11:01:47.424]   - Field: ‘seed’
[11:01:47.424]   - Field: ‘version’
[11:01:47.425]   - Field: ‘result’
[11:01:47.425]   - Field: ‘asynchronous’
[11:01:47.425]   - Field: ‘calls’
[11:01:47.425]   - Field: ‘globals’
[11:01:47.425]   - Field: ‘stdout’
[11:01:47.425]   - Field: ‘earlySignal’
[11:01:47.425]   - Field: ‘lazy’
[11:01:47.425]   - Field: ‘state’
[11:01:47.425] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.425] - Launch lazy future ...
[11:01:47.425] Packages needed by the future expression (n = 0): <none>
[11:01:47.425] Packages needed by future strategies (n = 0): <none>
[11:01:47.426] {
[11:01:47.426]     {
[11:01:47.426]         {
[11:01:47.426]             ...future.startTime <- base::Sys.time()
[11:01:47.426]             {
[11:01:47.426]                 {
[11:01:47.426]                   {
[11:01:47.426]                     base::local({
[11:01:47.426]                       has_future <- base::requireNamespace("future", 
[11:01:47.426]                         quietly = TRUE)
[11:01:47.426]                       if (has_future) {
[11:01:47.426]                         ns <- base::getNamespace("future")
[11:01:47.426]                         version <- ns[[".package"]][["version"]]
[11:01:47.426]                         if (is.null(version)) 
[11:01:47.426]                           version <- utils::packageVersion("future")
[11:01:47.426]                       }
[11:01:47.426]                       else {
[11:01:47.426]                         version <- NULL
[11:01:47.426]                       }
[11:01:47.426]                       if (!has_future || version < "1.8.0") {
[11:01:47.426]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.426]                           "", base::R.version$version.string), 
[11:01:47.426]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.426]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.426]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.426]                             "release", "version")], collapse = " "), 
[11:01:47.426]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.426]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.426]                           info)
[11:01:47.426]                         info <- base::paste(info, collapse = "; ")
[11:01:47.426]                         if (!has_future) {
[11:01:47.426]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.426]                             info)
[11:01:47.426]                         }
[11:01:47.426]                         else {
[11:01:47.426]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.426]                             info, version)
[11:01:47.426]                         }
[11:01:47.426]                         base::stop(msg)
[11:01:47.426]                       }
[11:01:47.426]                     })
[11:01:47.426]                   }
[11:01:47.426]                   ...future.strategy.old <- future::plan("list")
[11:01:47.426]                   options(future.plan = NULL)
[11:01:47.426]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.426]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.426]                 }
[11:01:47.426]                 ...future.workdir <- getwd()
[11:01:47.426]             }
[11:01:47.426]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.426]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.426]         }
[11:01:47.426]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.426]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.426]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.426]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.426]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.426]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.426]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.426]             base::names(...future.oldOptions))
[11:01:47.426]     }
[11:01:47.426]     if (FALSE) {
[11:01:47.426]     }
[11:01:47.426]     else {
[11:01:47.426]         if (TRUE) {
[11:01:47.426]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.426]                 open = "w")
[11:01:47.426]         }
[11:01:47.426]         else {
[11:01:47.426]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.426]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.426]         }
[11:01:47.426]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.426]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.426]             base::sink(type = "output", split = FALSE)
[11:01:47.426]             base::close(...future.stdout)
[11:01:47.426]         }, add = TRUE)
[11:01:47.426]     }
[11:01:47.426]     ...future.frame <- base::sys.nframe()
[11:01:47.426]     ...future.conditions <- base::list()
[11:01:47.426]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.426]     if (FALSE) {
[11:01:47.426]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.426]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.426]     }
[11:01:47.426]     ...future.result <- base::tryCatch({
[11:01:47.426]         base::withCallingHandlers({
[11:01:47.426]             ...future.value <- base::withVisible(base::local({
[11:01:47.426]                 x[["a"]] <- 1
[11:01:47.426]                 x
[11:01:47.426]             }))
[11:01:47.426]             future::FutureResult(value = ...future.value$value, 
[11:01:47.426]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.426]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.426]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.426]                     ...future.globalenv.names))
[11:01:47.426]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.426]         }, condition = base::local({
[11:01:47.426]             c <- base::c
[11:01:47.426]             inherits <- base::inherits
[11:01:47.426]             invokeRestart <- base::invokeRestart
[11:01:47.426]             length <- base::length
[11:01:47.426]             list <- base::list
[11:01:47.426]             seq.int <- base::seq.int
[11:01:47.426]             signalCondition <- base::signalCondition
[11:01:47.426]             sys.calls <- base::sys.calls
[11:01:47.426]             `[[` <- base::`[[`
[11:01:47.426]             `+` <- base::`+`
[11:01:47.426]             `<<-` <- base::`<<-`
[11:01:47.426]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.426]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.426]                   3L)]
[11:01:47.426]             }
[11:01:47.426]             function(cond) {
[11:01:47.426]                 is_error <- inherits(cond, "error")
[11:01:47.426]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.426]                   NULL)
[11:01:47.426]                 if (is_error) {
[11:01:47.426]                   sessionInformation <- function() {
[11:01:47.426]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.426]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.426]                       search = base::search(), system = base::Sys.info())
[11:01:47.426]                   }
[11:01:47.426]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.426]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.426]                     cond$call), session = sessionInformation(), 
[11:01:47.426]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.426]                   signalCondition(cond)
[11:01:47.426]                 }
[11:01:47.426]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.426]                 "immediateCondition"))) {
[11:01:47.426]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.426]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.426]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.426]                   if (TRUE && !signal) {
[11:01:47.426]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.426]                     {
[11:01:47.426]                       inherits <- base::inherits
[11:01:47.426]                       invokeRestart <- base::invokeRestart
[11:01:47.426]                       is.null <- base::is.null
[11:01:47.426]                       muffled <- FALSE
[11:01:47.426]                       if (inherits(cond, "message")) {
[11:01:47.426]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.426]                         if (muffled) 
[11:01:47.426]                           invokeRestart("muffleMessage")
[11:01:47.426]                       }
[11:01:47.426]                       else if (inherits(cond, "warning")) {
[11:01:47.426]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.426]                         if (muffled) 
[11:01:47.426]                           invokeRestart("muffleWarning")
[11:01:47.426]                       }
[11:01:47.426]                       else if (inherits(cond, "condition")) {
[11:01:47.426]                         if (!is.null(pattern)) {
[11:01:47.426]                           computeRestarts <- base::computeRestarts
[11:01:47.426]                           grepl <- base::grepl
[11:01:47.426]                           restarts <- computeRestarts(cond)
[11:01:47.426]                           for (restart in restarts) {
[11:01:47.426]                             name <- restart$name
[11:01:47.426]                             if (is.null(name)) 
[11:01:47.426]                               next
[11:01:47.426]                             if (!grepl(pattern, name)) 
[11:01:47.426]                               next
[11:01:47.426]                             invokeRestart(restart)
[11:01:47.426]                             muffled <- TRUE
[11:01:47.426]                             break
[11:01:47.426]                           }
[11:01:47.426]                         }
[11:01:47.426]                       }
[11:01:47.426]                       invisible(muffled)
[11:01:47.426]                     }
[11:01:47.426]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.426]                   }
[11:01:47.426]                 }
[11:01:47.426]                 else {
[11:01:47.426]                   if (TRUE) {
[11:01:47.426]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.426]                     {
[11:01:47.426]                       inherits <- base::inherits
[11:01:47.426]                       invokeRestart <- base::invokeRestart
[11:01:47.426]                       is.null <- base::is.null
[11:01:47.426]                       muffled <- FALSE
[11:01:47.426]                       if (inherits(cond, "message")) {
[11:01:47.426]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.426]                         if (muffled) 
[11:01:47.426]                           invokeRestart("muffleMessage")
[11:01:47.426]                       }
[11:01:47.426]                       else if (inherits(cond, "warning")) {
[11:01:47.426]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.426]                         if (muffled) 
[11:01:47.426]                           invokeRestart("muffleWarning")
[11:01:47.426]                       }
[11:01:47.426]                       else if (inherits(cond, "condition")) {
[11:01:47.426]                         if (!is.null(pattern)) {
[11:01:47.426]                           computeRestarts <- base::computeRestarts
[11:01:47.426]                           grepl <- base::grepl
[11:01:47.426]                           restarts <- computeRestarts(cond)
[11:01:47.426]                           for (restart in restarts) {
[11:01:47.426]                             name <- restart$name
[11:01:47.426]                             if (is.null(name)) 
[11:01:47.426]                               next
[11:01:47.426]                             if (!grepl(pattern, name)) 
[11:01:47.426]                               next
[11:01:47.426]                             invokeRestart(restart)
[11:01:47.426]                             muffled <- TRUE
[11:01:47.426]                             break
[11:01:47.426]                           }
[11:01:47.426]                         }
[11:01:47.426]                       }
[11:01:47.426]                       invisible(muffled)
[11:01:47.426]                     }
[11:01:47.426]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.426]                   }
[11:01:47.426]                 }
[11:01:47.426]             }
[11:01:47.426]         }))
[11:01:47.426]     }, error = function(ex) {
[11:01:47.426]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.426]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.426]                 ...future.rng), started = ...future.startTime, 
[11:01:47.426]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.426]             version = "1.8"), class = "FutureResult")
[11:01:47.426]     }, finally = {
[11:01:47.426]         if (!identical(...future.workdir, getwd())) 
[11:01:47.426]             setwd(...future.workdir)
[11:01:47.426]         {
[11:01:47.426]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.426]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.426]             }
[11:01:47.426]             base::options(...future.oldOptions)
[11:01:47.426]             if (.Platform$OS.type == "windows") {
[11:01:47.426]                 old_names <- names(...future.oldEnvVars)
[11:01:47.426]                 envs <- base::Sys.getenv()
[11:01:47.426]                 names <- names(envs)
[11:01:47.426]                 common <- intersect(names, old_names)
[11:01:47.426]                 added <- setdiff(names, old_names)
[11:01:47.426]                 removed <- setdiff(old_names, names)
[11:01:47.426]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.426]                   envs[common]]
[11:01:47.426]                 NAMES <- toupper(changed)
[11:01:47.426]                 args <- list()
[11:01:47.426]                 for (kk in seq_along(NAMES)) {
[11:01:47.426]                   name <- changed[[kk]]
[11:01:47.426]                   NAME <- NAMES[[kk]]
[11:01:47.426]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.426]                     next
[11:01:47.426]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.426]                 }
[11:01:47.426]                 NAMES <- toupper(added)
[11:01:47.426]                 for (kk in seq_along(NAMES)) {
[11:01:47.426]                   name <- added[[kk]]
[11:01:47.426]                   NAME <- NAMES[[kk]]
[11:01:47.426]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.426]                     next
[11:01:47.426]                   args[[name]] <- ""
[11:01:47.426]                 }
[11:01:47.426]                 NAMES <- toupper(removed)
[11:01:47.426]                 for (kk in seq_along(NAMES)) {
[11:01:47.426]                   name <- removed[[kk]]
[11:01:47.426]                   NAME <- NAMES[[kk]]
[11:01:47.426]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.426]                     next
[11:01:47.426]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.426]                 }
[11:01:47.426]                 if (length(args) > 0) 
[11:01:47.426]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.426]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.426]             }
[11:01:47.426]             else {
[11:01:47.426]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.426]             }
[11:01:47.426]             {
[11:01:47.426]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.426]                   0L) {
[11:01:47.426]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.426]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.426]                   base::options(opts)
[11:01:47.426]                 }
[11:01:47.426]                 {
[11:01:47.426]                   {
[11:01:47.426]                     NULL
[11:01:47.426]                     RNGkind("Mersenne-Twister")
[11:01:47.426]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.426]                       inherits = FALSE)
[11:01:47.426]                   }
[11:01:47.426]                   options(future.plan = NULL)
[11:01:47.426]                   if (is.na(NA_character_)) 
[11:01:47.426]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.426]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.426]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.426]                     .init = FALSE)
[11:01:47.426]                 }
[11:01:47.426]             }
[11:01:47.426]         }
[11:01:47.426]     })
[11:01:47.426]     if (TRUE) {
[11:01:47.426]         base::sink(type = "output", split = FALSE)
[11:01:47.426]         if (TRUE) {
[11:01:47.426]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.426]         }
[11:01:47.426]         else {
[11:01:47.426]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.426]         }
[11:01:47.426]         base::close(...future.stdout)
[11:01:47.426]         ...future.stdout <- NULL
[11:01:47.426]     }
[11:01:47.426]     ...future.result$conditions <- ...future.conditions
[11:01:47.426]     ...future.result$finished <- base::Sys.time()
[11:01:47.426]     ...future.result
[11:01:47.426] }
[11:01:47.427] assign_globals() ...
[11:01:47.427] List of 1
[11:01:47.427]  $ x: list()
[11:01:47.427]  - attr(*, "where")=List of 1
[11:01:47.427]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.427]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.427]  - attr(*, "resolved")= logi TRUE
[11:01:47.427]  - attr(*, "total_size")= num 31
[11:01:47.427]  - attr(*, "already-done")= logi TRUE
[11:01:47.430] - copied ‘x’ to environment
[11:01:47.430] assign_globals() ... done
[11:01:47.430] plan(): Setting new future strategy stack:
[11:01:47.430] List of future strategies:
[11:01:47.430] 1. sequential:
[11:01:47.430]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.430]    - tweaked: FALSE
[11:01:47.430]    - call: NULL
[11:01:47.430] plan(): nbrOfWorkers() = 1
[11:01:47.431] plan(): Setting new future strategy stack:
[11:01:47.431] List of future strategies:
[11:01:47.431] 1. sequential:
[11:01:47.431]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.431]    - tweaked: FALSE
[11:01:47.431]    - call: plan(strategy)
[11:01:47.432] plan(): nbrOfWorkers() = 1
[11:01:47.432] SequentialFuture started (and completed)
[11:01:47.432] - Launch lazy future ... done
[11:01:47.432] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.432] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.432] Searching for globals...
[11:01:47.434] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.434] Searching for globals ... DONE
[11:01:47.434] Resolving globals: TRUE
[11:01:47.434] Resolving any globals that are futures ...
[11:01:47.434] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.435] Resolving any globals that are futures ... DONE
[11:01:47.435] Resolving futures part of globals (recursively) ...
[11:01:47.435] resolve() on list ...
[11:01:47.435]  recursive: 99
[11:01:47.435]  length: 1
[11:01:47.435]  elements: ‘x’
[11:01:47.435]  length: 0 (resolved future 1)
[11:01:47.435] resolve() on list ... DONE
[11:01:47.436] - globals: [1] ‘x’
[11:01:47.436] Resolving futures part of globals (recursively) ... DONE
[11:01:47.436] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.436] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.436] - globals: [1] ‘x’
[11:01:47.436] 
[11:01:47.436] getGlobalsAndPackages() ... DONE
[11:01:47.437] run() for ‘Future’ ...
[11:01:47.437] - state: ‘created’
[11:01:47.437] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.437] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.437] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.437]   - Field: ‘label’
[11:01:47.437]   - Field: ‘local’
[11:01:47.437]   - Field: ‘owner’
[11:01:47.437]   - Field: ‘envir’
[11:01:47.438]   - Field: ‘packages’
[11:01:47.438]   - Field: ‘gc’
[11:01:47.438]   - Field: ‘conditions’
[11:01:47.438]   - Field: ‘expr’
[11:01:47.438]   - Field: ‘uuid’
[11:01:47.438]   - Field: ‘seed’
[11:01:47.438]   - Field: ‘version’
[11:01:47.438]   - Field: ‘result’
[11:01:47.438]   - Field: ‘asynchronous’
[11:01:47.438]   - Field: ‘calls’
[11:01:47.438]   - Field: ‘globals’
[11:01:47.438]   - Field: ‘stdout’
[11:01:47.438]   - Field: ‘earlySignal’
[11:01:47.439]   - Field: ‘lazy’
[11:01:47.439]   - Field: ‘state’
[11:01:47.439] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.439] - Launch lazy future ...
[11:01:47.439] Packages needed by the future expression (n = 0): <none>
[11:01:47.439] Packages needed by future strategies (n = 0): <none>
[11:01:47.439] {
[11:01:47.439]     {
[11:01:47.439]         {
[11:01:47.439]             ...future.startTime <- base::Sys.time()
[11:01:47.439]             {
[11:01:47.439]                 {
[11:01:47.439]                   {
[11:01:47.439]                     base::local({
[11:01:47.439]                       has_future <- base::requireNamespace("future", 
[11:01:47.439]                         quietly = TRUE)
[11:01:47.439]                       if (has_future) {
[11:01:47.439]                         ns <- base::getNamespace("future")
[11:01:47.439]                         version <- ns[[".package"]][["version"]]
[11:01:47.439]                         if (is.null(version)) 
[11:01:47.439]                           version <- utils::packageVersion("future")
[11:01:47.439]                       }
[11:01:47.439]                       else {
[11:01:47.439]                         version <- NULL
[11:01:47.439]                       }
[11:01:47.439]                       if (!has_future || version < "1.8.0") {
[11:01:47.439]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.439]                           "", base::R.version$version.string), 
[11:01:47.439]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.439]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.439]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.439]                             "release", "version")], collapse = " "), 
[11:01:47.439]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.439]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.439]                           info)
[11:01:47.439]                         info <- base::paste(info, collapse = "; ")
[11:01:47.439]                         if (!has_future) {
[11:01:47.439]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.439]                             info)
[11:01:47.439]                         }
[11:01:47.439]                         else {
[11:01:47.439]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.439]                             info, version)
[11:01:47.439]                         }
[11:01:47.439]                         base::stop(msg)
[11:01:47.439]                       }
[11:01:47.439]                     })
[11:01:47.439]                   }
[11:01:47.439]                   ...future.strategy.old <- future::plan("list")
[11:01:47.439]                   options(future.plan = NULL)
[11:01:47.439]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.439]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.439]                 }
[11:01:47.439]                 ...future.workdir <- getwd()
[11:01:47.439]             }
[11:01:47.439]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.439]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.439]         }
[11:01:47.439]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.439]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.439]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.439]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.439]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.439]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.439]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.439]             base::names(...future.oldOptions))
[11:01:47.439]     }
[11:01:47.439]     if (FALSE) {
[11:01:47.439]     }
[11:01:47.439]     else {
[11:01:47.439]         if (TRUE) {
[11:01:47.439]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.439]                 open = "w")
[11:01:47.439]         }
[11:01:47.439]         else {
[11:01:47.439]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.439]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.439]         }
[11:01:47.439]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.439]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.439]             base::sink(type = "output", split = FALSE)
[11:01:47.439]             base::close(...future.stdout)
[11:01:47.439]         }, add = TRUE)
[11:01:47.439]     }
[11:01:47.439]     ...future.frame <- base::sys.nframe()
[11:01:47.439]     ...future.conditions <- base::list()
[11:01:47.439]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.439]     if (FALSE) {
[11:01:47.439]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.439]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.439]     }
[11:01:47.439]     ...future.result <- base::tryCatch({
[11:01:47.439]         base::withCallingHandlers({
[11:01:47.439]             ...future.value <- base::withVisible(base::local({
[11:01:47.439]                 x[["a"]] <- 1
[11:01:47.439]                 x
[11:01:47.439]             }))
[11:01:47.439]             future::FutureResult(value = ...future.value$value, 
[11:01:47.439]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.439]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.439]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.439]                     ...future.globalenv.names))
[11:01:47.439]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.439]         }, condition = base::local({
[11:01:47.439]             c <- base::c
[11:01:47.439]             inherits <- base::inherits
[11:01:47.439]             invokeRestart <- base::invokeRestart
[11:01:47.439]             length <- base::length
[11:01:47.439]             list <- base::list
[11:01:47.439]             seq.int <- base::seq.int
[11:01:47.439]             signalCondition <- base::signalCondition
[11:01:47.439]             sys.calls <- base::sys.calls
[11:01:47.439]             `[[` <- base::`[[`
[11:01:47.439]             `+` <- base::`+`
[11:01:47.439]             `<<-` <- base::`<<-`
[11:01:47.439]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.439]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.439]                   3L)]
[11:01:47.439]             }
[11:01:47.439]             function(cond) {
[11:01:47.439]                 is_error <- inherits(cond, "error")
[11:01:47.439]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.439]                   NULL)
[11:01:47.439]                 if (is_error) {
[11:01:47.439]                   sessionInformation <- function() {
[11:01:47.439]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.439]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.439]                       search = base::search(), system = base::Sys.info())
[11:01:47.439]                   }
[11:01:47.439]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.439]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.439]                     cond$call), session = sessionInformation(), 
[11:01:47.439]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.439]                   signalCondition(cond)
[11:01:47.439]                 }
[11:01:47.439]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.439]                 "immediateCondition"))) {
[11:01:47.439]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.439]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.439]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.439]                   if (TRUE && !signal) {
[11:01:47.439]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.439]                     {
[11:01:47.439]                       inherits <- base::inherits
[11:01:47.439]                       invokeRestart <- base::invokeRestart
[11:01:47.439]                       is.null <- base::is.null
[11:01:47.439]                       muffled <- FALSE
[11:01:47.439]                       if (inherits(cond, "message")) {
[11:01:47.439]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.439]                         if (muffled) 
[11:01:47.439]                           invokeRestart("muffleMessage")
[11:01:47.439]                       }
[11:01:47.439]                       else if (inherits(cond, "warning")) {
[11:01:47.439]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.439]                         if (muffled) 
[11:01:47.439]                           invokeRestart("muffleWarning")
[11:01:47.439]                       }
[11:01:47.439]                       else if (inherits(cond, "condition")) {
[11:01:47.439]                         if (!is.null(pattern)) {
[11:01:47.439]                           computeRestarts <- base::computeRestarts
[11:01:47.439]                           grepl <- base::grepl
[11:01:47.439]                           restarts <- computeRestarts(cond)
[11:01:47.439]                           for (restart in restarts) {
[11:01:47.439]                             name <- restart$name
[11:01:47.439]                             if (is.null(name)) 
[11:01:47.439]                               next
[11:01:47.439]                             if (!grepl(pattern, name)) 
[11:01:47.439]                               next
[11:01:47.439]                             invokeRestart(restart)
[11:01:47.439]                             muffled <- TRUE
[11:01:47.439]                             break
[11:01:47.439]                           }
[11:01:47.439]                         }
[11:01:47.439]                       }
[11:01:47.439]                       invisible(muffled)
[11:01:47.439]                     }
[11:01:47.439]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.439]                   }
[11:01:47.439]                 }
[11:01:47.439]                 else {
[11:01:47.439]                   if (TRUE) {
[11:01:47.439]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.439]                     {
[11:01:47.439]                       inherits <- base::inherits
[11:01:47.439]                       invokeRestart <- base::invokeRestart
[11:01:47.439]                       is.null <- base::is.null
[11:01:47.439]                       muffled <- FALSE
[11:01:47.439]                       if (inherits(cond, "message")) {
[11:01:47.439]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.439]                         if (muffled) 
[11:01:47.439]                           invokeRestart("muffleMessage")
[11:01:47.439]                       }
[11:01:47.439]                       else if (inherits(cond, "warning")) {
[11:01:47.439]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.439]                         if (muffled) 
[11:01:47.439]                           invokeRestart("muffleWarning")
[11:01:47.439]                       }
[11:01:47.439]                       else if (inherits(cond, "condition")) {
[11:01:47.439]                         if (!is.null(pattern)) {
[11:01:47.439]                           computeRestarts <- base::computeRestarts
[11:01:47.439]                           grepl <- base::grepl
[11:01:47.439]                           restarts <- computeRestarts(cond)
[11:01:47.439]                           for (restart in restarts) {
[11:01:47.439]                             name <- restart$name
[11:01:47.439]                             if (is.null(name)) 
[11:01:47.439]                               next
[11:01:47.439]                             if (!grepl(pattern, name)) 
[11:01:47.439]                               next
[11:01:47.439]                             invokeRestart(restart)
[11:01:47.439]                             muffled <- TRUE
[11:01:47.439]                             break
[11:01:47.439]                           }
[11:01:47.439]                         }
[11:01:47.439]                       }
[11:01:47.439]                       invisible(muffled)
[11:01:47.439]                     }
[11:01:47.439]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.439]                   }
[11:01:47.439]                 }
[11:01:47.439]             }
[11:01:47.439]         }))
[11:01:47.439]     }, error = function(ex) {
[11:01:47.439]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.439]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.439]                 ...future.rng), started = ...future.startTime, 
[11:01:47.439]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.439]             version = "1.8"), class = "FutureResult")
[11:01:47.439]     }, finally = {
[11:01:47.439]         if (!identical(...future.workdir, getwd())) 
[11:01:47.439]             setwd(...future.workdir)
[11:01:47.439]         {
[11:01:47.439]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.439]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.439]             }
[11:01:47.439]             base::options(...future.oldOptions)
[11:01:47.439]             if (.Platform$OS.type == "windows") {
[11:01:47.439]                 old_names <- names(...future.oldEnvVars)
[11:01:47.439]                 envs <- base::Sys.getenv()
[11:01:47.439]                 names <- names(envs)
[11:01:47.439]                 common <- intersect(names, old_names)
[11:01:47.439]                 added <- setdiff(names, old_names)
[11:01:47.439]                 removed <- setdiff(old_names, names)
[11:01:47.439]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.439]                   envs[common]]
[11:01:47.439]                 NAMES <- toupper(changed)
[11:01:47.439]                 args <- list()
[11:01:47.439]                 for (kk in seq_along(NAMES)) {
[11:01:47.439]                   name <- changed[[kk]]
[11:01:47.439]                   NAME <- NAMES[[kk]]
[11:01:47.439]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.439]                     next
[11:01:47.439]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.439]                 }
[11:01:47.439]                 NAMES <- toupper(added)
[11:01:47.439]                 for (kk in seq_along(NAMES)) {
[11:01:47.439]                   name <- added[[kk]]
[11:01:47.439]                   NAME <- NAMES[[kk]]
[11:01:47.439]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.439]                     next
[11:01:47.439]                   args[[name]] <- ""
[11:01:47.439]                 }
[11:01:47.439]                 NAMES <- toupper(removed)
[11:01:47.439]                 for (kk in seq_along(NAMES)) {
[11:01:47.439]                   name <- removed[[kk]]
[11:01:47.439]                   NAME <- NAMES[[kk]]
[11:01:47.439]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.439]                     next
[11:01:47.439]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.439]                 }
[11:01:47.439]                 if (length(args) > 0) 
[11:01:47.439]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.439]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.439]             }
[11:01:47.439]             else {
[11:01:47.439]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.439]             }
[11:01:47.439]             {
[11:01:47.439]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.439]                   0L) {
[11:01:47.439]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.439]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.439]                   base::options(opts)
[11:01:47.439]                 }
[11:01:47.439]                 {
[11:01:47.439]                   {
[11:01:47.439]                     NULL
[11:01:47.439]                     RNGkind("Mersenne-Twister")
[11:01:47.439]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.439]                       inherits = FALSE)
[11:01:47.439]                   }
[11:01:47.439]                   options(future.plan = NULL)
[11:01:47.439]                   if (is.na(NA_character_)) 
[11:01:47.439]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.439]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.439]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.439]                     .init = FALSE)
[11:01:47.439]                 }
[11:01:47.439]             }
[11:01:47.439]         }
[11:01:47.439]     })
[11:01:47.439]     if (TRUE) {
[11:01:47.439]         base::sink(type = "output", split = FALSE)
[11:01:47.439]         if (TRUE) {
[11:01:47.439]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.439]         }
[11:01:47.439]         else {
[11:01:47.439]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.439]         }
[11:01:47.439]         base::close(...future.stdout)
[11:01:47.439]         ...future.stdout <- NULL
[11:01:47.439]     }
[11:01:47.439]     ...future.result$conditions <- ...future.conditions
[11:01:47.439]     ...future.result$finished <- base::Sys.time()
[11:01:47.439]     ...future.result
[11:01:47.439] }
[11:01:47.441] assign_globals() ...
[11:01:47.441] List of 1
[11:01:47.441]  $ x: list()
[11:01:47.441]  - attr(*, "where")=List of 1
[11:01:47.441]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.441]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.441]  - attr(*, "resolved")= logi TRUE
[11:01:47.441]  - attr(*, "total_size")= num 31
[11:01:47.441]  - attr(*, "already-done")= logi TRUE
[11:01:47.443] - copied ‘x’ to environment
[11:01:47.443] assign_globals() ... done
[11:01:47.444] plan(): Setting new future strategy stack:
[11:01:47.444] List of future strategies:
[11:01:47.444] 1. sequential:
[11:01:47.444]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.444]    - tweaked: FALSE
[11:01:47.444]    - call: NULL
[11:01:47.444] plan(): nbrOfWorkers() = 1
[11:01:47.446] plan(): Setting new future strategy stack:
[11:01:47.446] List of future strategies:
[11:01:47.446] 1. sequential:
[11:01:47.446]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.446]    - tweaked: FALSE
[11:01:47.446]    - call: plan(strategy)
[11:01:47.446] plan(): nbrOfWorkers() = 1
[11:01:47.446] SequentialFuture started (and completed)
[11:01:47.446] - Launch lazy future ... done
[11:01:47.446] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.447] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.447] Searching for globals...
[11:01:47.449] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.449] Searching for globals ... DONE
[11:01:47.449] Resolving globals: TRUE
[11:01:47.449] Resolving any globals that are futures ...
[11:01:47.449] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.449] Resolving any globals that are futures ... DONE
[11:01:47.450] Resolving futures part of globals (recursively) ...
[11:01:47.450] resolve() on list ...
[11:01:47.450]  recursive: 99
[11:01:47.450]  length: 1
[11:01:47.450]  elements: ‘x’
[11:01:47.450]  length: 0 (resolved future 1)
[11:01:47.450] resolve() on list ... DONE
[11:01:47.450] - globals: [1] ‘x’
[11:01:47.450] Resolving futures part of globals (recursively) ... DONE
[11:01:47.450] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.451] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.451] - globals: [1] ‘x’
[11:01:47.451] 
[11:01:47.451] getGlobalsAndPackages() ... DONE
[11:01:47.451] run() for ‘Future’ ...
[11:01:47.451] - state: ‘created’
[11:01:47.451] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.452] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.452] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.452]   - Field: ‘label’
[11:01:47.452]   - Field: ‘local’
[11:01:47.452]   - Field: ‘owner’
[11:01:47.452]   - Field: ‘envir’
[11:01:47.452]   - Field: ‘packages’
[11:01:47.452]   - Field: ‘gc’
[11:01:47.452]   - Field: ‘conditions’
[11:01:47.452]   - Field: ‘expr’
[11:01:47.453]   - Field: ‘uuid’
[11:01:47.453]   - Field: ‘seed’
[11:01:47.453]   - Field: ‘version’
[11:01:47.453]   - Field: ‘result’
[11:01:47.453]   - Field: ‘asynchronous’
[11:01:47.453]   - Field: ‘calls’
[11:01:47.453]   - Field: ‘globals’
[11:01:47.453]   - Field: ‘stdout’
[11:01:47.453]   - Field: ‘earlySignal’
[11:01:47.453]   - Field: ‘lazy’
[11:01:47.453]   - Field: ‘state’
[11:01:47.453] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.453] - Launch lazy future ...
[11:01:47.454] Packages needed by the future expression (n = 0): <none>
[11:01:47.454] Packages needed by future strategies (n = 0): <none>
[11:01:47.454] {
[11:01:47.454]     {
[11:01:47.454]         {
[11:01:47.454]             ...future.startTime <- base::Sys.time()
[11:01:47.454]             {
[11:01:47.454]                 {
[11:01:47.454]                   {
[11:01:47.454]                     base::local({
[11:01:47.454]                       has_future <- base::requireNamespace("future", 
[11:01:47.454]                         quietly = TRUE)
[11:01:47.454]                       if (has_future) {
[11:01:47.454]                         ns <- base::getNamespace("future")
[11:01:47.454]                         version <- ns[[".package"]][["version"]]
[11:01:47.454]                         if (is.null(version)) 
[11:01:47.454]                           version <- utils::packageVersion("future")
[11:01:47.454]                       }
[11:01:47.454]                       else {
[11:01:47.454]                         version <- NULL
[11:01:47.454]                       }
[11:01:47.454]                       if (!has_future || version < "1.8.0") {
[11:01:47.454]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.454]                           "", base::R.version$version.string), 
[11:01:47.454]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.454]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.454]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.454]                             "release", "version")], collapse = " "), 
[11:01:47.454]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.454]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.454]                           info)
[11:01:47.454]                         info <- base::paste(info, collapse = "; ")
[11:01:47.454]                         if (!has_future) {
[11:01:47.454]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.454]                             info)
[11:01:47.454]                         }
[11:01:47.454]                         else {
[11:01:47.454]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.454]                             info, version)
[11:01:47.454]                         }
[11:01:47.454]                         base::stop(msg)
[11:01:47.454]                       }
[11:01:47.454]                     })
[11:01:47.454]                   }
[11:01:47.454]                   ...future.strategy.old <- future::plan("list")
[11:01:47.454]                   options(future.plan = NULL)
[11:01:47.454]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.454]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.454]                 }
[11:01:47.454]                 ...future.workdir <- getwd()
[11:01:47.454]             }
[11:01:47.454]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.454]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.454]         }
[11:01:47.454]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.454]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.454]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.454]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.454]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.454]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.454]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.454]             base::names(...future.oldOptions))
[11:01:47.454]     }
[11:01:47.454]     if (FALSE) {
[11:01:47.454]     }
[11:01:47.454]     else {
[11:01:47.454]         if (TRUE) {
[11:01:47.454]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.454]                 open = "w")
[11:01:47.454]         }
[11:01:47.454]         else {
[11:01:47.454]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.454]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.454]         }
[11:01:47.454]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.454]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.454]             base::sink(type = "output", split = FALSE)
[11:01:47.454]             base::close(...future.stdout)
[11:01:47.454]         }, add = TRUE)
[11:01:47.454]     }
[11:01:47.454]     ...future.frame <- base::sys.nframe()
[11:01:47.454]     ...future.conditions <- base::list()
[11:01:47.454]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.454]     if (FALSE) {
[11:01:47.454]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.454]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.454]     }
[11:01:47.454]     ...future.result <- base::tryCatch({
[11:01:47.454]         base::withCallingHandlers({
[11:01:47.454]             ...future.value <- base::withVisible(base::local({
[11:01:47.454]                 x["a"] <- list(1)
[11:01:47.454]                 x
[11:01:47.454]             }))
[11:01:47.454]             future::FutureResult(value = ...future.value$value, 
[11:01:47.454]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.454]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.454]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.454]                     ...future.globalenv.names))
[11:01:47.454]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.454]         }, condition = base::local({
[11:01:47.454]             c <- base::c
[11:01:47.454]             inherits <- base::inherits
[11:01:47.454]             invokeRestart <- base::invokeRestart
[11:01:47.454]             length <- base::length
[11:01:47.454]             list <- base::list
[11:01:47.454]             seq.int <- base::seq.int
[11:01:47.454]             signalCondition <- base::signalCondition
[11:01:47.454]             sys.calls <- base::sys.calls
[11:01:47.454]             `[[` <- base::`[[`
[11:01:47.454]             `+` <- base::`+`
[11:01:47.454]             `<<-` <- base::`<<-`
[11:01:47.454]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.454]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.454]                   3L)]
[11:01:47.454]             }
[11:01:47.454]             function(cond) {
[11:01:47.454]                 is_error <- inherits(cond, "error")
[11:01:47.454]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.454]                   NULL)
[11:01:47.454]                 if (is_error) {
[11:01:47.454]                   sessionInformation <- function() {
[11:01:47.454]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.454]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.454]                       search = base::search(), system = base::Sys.info())
[11:01:47.454]                   }
[11:01:47.454]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.454]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.454]                     cond$call), session = sessionInformation(), 
[11:01:47.454]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.454]                   signalCondition(cond)
[11:01:47.454]                 }
[11:01:47.454]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.454]                 "immediateCondition"))) {
[11:01:47.454]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.454]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.454]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.454]                   if (TRUE && !signal) {
[11:01:47.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.454]                     {
[11:01:47.454]                       inherits <- base::inherits
[11:01:47.454]                       invokeRestart <- base::invokeRestart
[11:01:47.454]                       is.null <- base::is.null
[11:01:47.454]                       muffled <- FALSE
[11:01:47.454]                       if (inherits(cond, "message")) {
[11:01:47.454]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.454]                         if (muffled) 
[11:01:47.454]                           invokeRestart("muffleMessage")
[11:01:47.454]                       }
[11:01:47.454]                       else if (inherits(cond, "warning")) {
[11:01:47.454]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.454]                         if (muffled) 
[11:01:47.454]                           invokeRestart("muffleWarning")
[11:01:47.454]                       }
[11:01:47.454]                       else if (inherits(cond, "condition")) {
[11:01:47.454]                         if (!is.null(pattern)) {
[11:01:47.454]                           computeRestarts <- base::computeRestarts
[11:01:47.454]                           grepl <- base::grepl
[11:01:47.454]                           restarts <- computeRestarts(cond)
[11:01:47.454]                           for (restart in restarts) {
[11:01:47.454]                             name <- restart$name
[11:01:47.454]                             if (is.null(name)) 
[11:01:47.454]                               next
[11:01:47.454]                             if (!grepl(pattern, name)) 
[11:01:47.454]                               next
[11:01:47.454]                             invokeRestart(restart)
[11:01:47.454]                             muffled <- TRUE
[11:01:47.454]                             break
[11:01:47.454]                           }
[11:01:47.454]                         }
[11:01:47.454]                       }
[11:01:47.454]                       invisible(muffled)
[11:01:47.454]                     }
[11:01:47.454]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.454]                   }
[11:01:47.454]                 }
[11:01:47.454]                 else {
[11:01:47.454]                   if (TRUE) {
[11:01:47.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.454]                     {
[11:01:47.454]                       inherits <- base::inherits
[11:01:47.454]                       invokeRestart <- base::invokeRestart
[11:01:47.454]                       is.null <- base::is.null
[11:01:47.454]                       muffled <- FALSE
[11:01:47.454]                       if (inherits(cond, "message")) {
[11:01:47.454]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.454]                         if (muffled) 
[11:01:47.454]                           invokeRestart("muffleMessage")
[11:01:47.454]                       }
[11:01:47.454]                       else if (inherits(cond, "warning")) {
[11:01:47.454]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.454]                         if (muffled) 
[11:01:47.454]                           invokeRestart("muffleWarning")
[11:01:47.454]                       }
[11:01:47.454]                       else if (inherits(cond, "condition")) {
[11:01:47.454]                         if (!is.null(pattern)) {
[11:01:47.454]                           computeRestarts <- base::computeRestarts
[11:01:47.454]                           grepl <- base::grepl
[11:01:47.454]                           restarts <- computeRestarts(cond)
[11:01:47.454]                           for (restart in restarts) {
[11:01:47.454]                             name <- restart$name
[11:01:47.454]                             if (is.null(name)) 
[11:01:47.454]                               next
[11:01:47.454]                             if (!grepl(pattern, name)) 
[11:01:47.454]                               next
[11:01:47.454]                             invokeRestart(restart)
[11:01:47.454]                             muffled <- TRUE
[11:01:47.454]                             break
[11:01:47.454]                           }
[11:01:47.454]                         }
[11:01:47.454]                       }
[11:01:47.454]                       invisible(muffled)
[11:01:47.454]                     }
[11:01:47.454]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.454]                   }
[11:01:47.454]                 }
[11:01:47.454]             }
[11:01:47.454]         }))
[11:01:47.454]     }, error = function(ex) {
[11:01:47.454]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.454]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.454]                 ...future.rng), started = ...future.startTime, 
[11:01:47.454]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.454]             version = "1.8"), class = "FutureResult")
[11:01:47.454]     }, finally = {
[11:01:47.454]         if (!identical(...future.workdir, getwd())) 
[11:01:47.454]             setwd(...future.workdir)
[11:01:47.454]         {
[11:01:47.454]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.454]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.454]             }
[11:01:47.454]             base::options(...future.oldOptions)
[11:01:47.454]             if (.Platform$OS.type == "windows") {
[11:01:47.454]                 old_names <- names(...future.oldEnvVars)
[11:01:47.454]                 envs <- base::Sys.getenv()
[11:01:47.454]                 names <- names(envs)
[11:01:47.454]                 common <- intersect(names, old_names)
[11:01:47.454]                 added <- setdiff(names, old_names)
[11:01:47.454]                 removed <- setdiff(old_names, names)
[11:01:47.454]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.454]                   envs[common]]
[11:01:47.454]                 NAMES <- toupper(changed)
[11:01:47.454]                 args <- list()
[11:01:47.454]                 for (kk in seq_along(NAMES)) {
[11:01:47.454]                   name <- changed[[kk]]
[11:01:47.454]                   NAME <- NAMES[[kk]]
[11:01:47.454]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.454]                     next
[11:01:47.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.454]                 }
[11:01:47.454]                 NAMES <- toupper(added)
[11:01:47.454]                 for (kk in seq_along(NAMES)) {
[11:01:47.454]                   name <- added[[kk]]
[11:01:47.454]                   NAME <- NAMES[[kk]]
[11:01:47.454]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.454]                     next
[11:01:47.454]                   args[[name]] <- ""
[11:01:47.454]                 }
[11:01:47.454]                 NAMES <- toupper(removed)
[11:01:47.454]                 for (kk in seq_along(NAMES)) {
[11:01:47.454]                   name <- removed[[kk]]
[11:01:47.454]                   NAME <- NAMES[[kk]]
[11:01:47.454]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.454]                     next
[11:01:47.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.454]                 }
[11:01:47.454]                 if (length(args) > 0) 
[11:01:47.454]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.454]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.454]             }
[11:01:47.454]             else {
[11:01:47.454]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.454]             }
[11:01:47.454]             {
[11:01:47.454]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.454]                   0L) {
[11:01:47.454]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.454]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.454]                   base::options(opts)
[11:01:47.454]                 }
[11:01:47.454]                 {
[11:01:47.454]                   {
[11:01:47.454]                     NULL
[11:01:47.454]                     RNGkind("Mersenne-Twister")
[11:01:47.454]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.454]                       inherits = FALSE)
[11:01:47.454]                   }
[11:01:47.454]                   options(future.plan = NULL)
[11:01:47.454]                   if (is.na(NA_character_)) 
[11:01:47.454]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.454]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.454]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.454]                     .init = FALSE)
[11:01:47.454]                 }
[11:01:47.454]             }
[11:01:47.454]         }
[11:01:47.454]     })
[11:01:47.454]     if (TRUE) {
[11:01:47.454]         base::sink(type = "output", split = FALSE)
[11:01:47.454]         if (TRUE) {
[11:01:47.454]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.454]         }
[11:01:47.454]         else {
[11:01:47.454]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.454]         }
[11:01:47.454]         base::close(...future.stdout)
[11:01:47.454]         ...future.stdout <- NULL
[11:01:47.454]     }
[11:01:47.454]     ...future.result$conditions <- ...future.conditions
[11:01:47.454]     ...future.result$finished <- base::Sys.time()
[11:01:47.454]     ...future.result
[11:01:47.454] }
[11:01:47.456] assign_globals() ...
[11:01:47.456] List of 1
[11:01:47.456]  $ x: list()
[11:01:47.456]  - attr(*, "where")=List of 1
[11:01:47.456]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.456]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.456]  - attr(*, "resolved")= logi TRUE
[11:01:47.456]  - attr(*, "total_size")= num 31
[11:01:47.456]  - attr(*, "already-done")= logi TRUE
[11:01:47.458] - copied ‘x’ to environment
[11:01:47.458] assign_globals() ... done
[11:01:47.458] plan(): Setting new future strategy stack:
[11:01:47.458] List of future strategies:
[11:01:47.458] 1. sequential:
[11:01:47.458]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.458]    - tweaked: FALSE
[11:01:47.458]    - call: NULL
[11:01:47.459] plan(): nbrOfWorkers() = 1
[11:01:47.459] plan(): Setting new future strategy stack:
[11:01:47.459] List of future strategies:
[11:01:47.459] 1. sequential:
[11:01:47.459]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.459]    - tweaked: FALSE
[11:01:47.459]    - call: plan(strategy)
[11:01:47.460] plan(): nbrOfWorkers() = 1
[11:01:47.460] SequentialFuture started (and completed)
[11:01:47.460] - Launch lazy future ... done
[11:01:47.460] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.460] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.461] Searching for globals...
[11:01:47.462] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.463] Searching for globals ... DONE
[11:01:47.463] Resolving globals: TRUE
[11:01:47.463] Resolving any globals that are futures ...
[11:01:47.463] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.463] Resolving any globals that are futures ... DONE
[11:01:47.463] Resolving futures part of globals (recursively) ...
[11:01:47.463] resolve() on list ...
[11:01:47.464]  recursive: 99
[11:01:47.464]  length: 1
[11:01:47.464]  elements: ‘x’
[11:01:47.464]  length: 0 (resolved future 1)
[11:01:47.464] resolve() on list ... DONE
[11:01:47.464] - globals: [1] ‘x’
[11:01:47.464] Resolving futures part of globals (recursively) ... DONE
[11:01:47.464] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.464] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.465] - globals: [1] ‘x’
[11:01:47.465] 
[11:01:47.465] getGlobalsAndPackages() ... DONE
[11:01:47.465] run() for ‘Future’ ...
[11:01:47.465] - state: ‘created’
[11:01:47.465] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.465] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.465] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.466]   - Field: ‘label’
[11:01:47.466]   - Field: ‘local’
[11:01:47.466]   - Field: ‘owner’
[11:01:47.466]   - Field: ‘envir’
[11:01:47.466]   - Field: ‘packages’
[11:01:47.466]   - Field: ‘gc’
[11:01:47.466]   - Field: ‘conditions’
[11:01:47.466]   - Field: ‘expr’
[11:01:47.466]   - Field: ‘uuid’
[11:01:47.466]   - Field: ‘seed’
[11:01:47.466]   - Field: ‘version’
[11:01:47.466]   - Field: ‘result’
[11:01:47.466]   - Field: ‘asynchronous’
[11:01:47.467]   - Field: ‘calls’
[11:01:47.467]   - Field: ‘globals’
[11:01:47.467]   - Field: ‘stdout’
[11:01:47.467]   - Field: ‘earlySignal’
[11:01:47.467]   - Field: ‘lazy’
[11:01:47.467]   - Field: ‘state’
[11:01:47.467] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.467] - Launch lazy future ...
[11:01:47.467] Packages needed by the future expression (n = 0): <none>
[11:01:47.468] Packages needed by future strategies (n = 0): <none>
[11:01:47.469] {
[11:01:47.469]     {
[11:01:47.469]         {
[11:01:47.469]             ...future.startTime <- base::Sys.time()
[11:01:47.469]             {
[11:01:47.469]                 {
[11:01:47.469]                   {
[11:01:47.469]                     base::local({
[11:01:47.469]                       has_future <- base::requireNamespace("future", 
[11:01:47.469]                         quietly = TRUE)
[11:01:47.469]                       if (has_future) {
[11:01:47.469]                         ns <- base::getNamespace("future")
[11:01:47.469]                         version <- ns[[".package"]][["version"]]
[11:01:47.469]                         if (is.null(version)) 
[11:01:47.469]                           version <- utils::packageVersion("future")
[11:01:47.469]                       }
[11:01:47.469]                       else {
[11:01:47.469]                         version <- NULL
[11:01:47.469]                       }
[11:01:47.469]                       if (!has_future || version < "1.8.0") {
[11:01:47.469]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.469]                           "", base::R.version$version.string), 
[11:01:47.469]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.469]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.469]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.469]                             "release", "version")], collapse = " "), 
[11:01:47.469]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.469]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.469]                           info)
[11:01:47.469]                         info <- base::paste(info, collapse = "; ")
[11:01:47.469]                         if (!has_future) {
[11:01:47.469]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.469]                             info)
[11:01:47.469]                         }
[11:01:47.469]                         else {
[11:01:47.469]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.469]                             info, version)
[11:01:47.469]                         }
[11:01:47.469]                         base::stop(msg)
[11:01:47.469]                       }
[11:01:47.469]                     })
[11:01:47.469]                   }
[11:01:47.469]                   ...future.strategy.old <- future::plan("list")
[11:01:47.469]                   options(future.plan = NULL)
[11:01:47.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.469]                 }
[11:01:47.469]                 ...future.workdir <- getwd()
[11:01:47.469]             }
[11:01:47.469]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.469]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.469]         }
[11:01:47.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.469]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.469]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.469]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.469]             base::names(...future.oldOptions))
[11:01:47.469]     }
[11:01:47.469]     if (FALSE) {
[11:01:47.469]     }
[11:01:47.469]     else {
[11:01:47.469]         if (TRUE) {
[11:01:47.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.469]                 open = "w")
[11:01:47.469]         }
[11:01:47.469]         else {
[11:01:47.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.469]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.469]         }
[11:01:47.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.469]             base::sink(type = "output", split = FALSE)
[11:01:47.469]             base::close(...future.stdout)
[11:01:47.469]         }, add = TRUE)
[11:01:47.469]     }
[11:01:47.469]     ...future.frame <- base::sys.nframe()
[11:01:47.469]     ...future.conditions <- base::list()
[11:01:47.469]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.469]     if (FALSE) {
[11:01:47.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.469]     }
[11:01:47.469]     ...future.result <- base::tryCatch({
[11:01:47.469]         base::withCallingHandlers({
[11:01:47.469]             ...future.value <- base::withVisible(base::local({
[11:01:47.469]                 x["a"] <- list(1)
[11:01:47.469]                 x
[11:01:47.469]             }))
[11:01:47.469]             future::FutureResult(value = ...future.value$value, 
[11:01:47.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.469]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.469]                     ...future.globalenv.names))
[11:01:47.469]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.469]         }, condition = base::local({
[11:01:47.469]             c <- base::c
[11:01:47.469]             inherits <- base::inherits
[11:01:47.469]             invokeRestart <- base::invokeRestart
[11:01:47.469]             length <- base::length
[11:01:47.469]             list <- base::list
[11:01:47.469]             seq.int <- base::seq.int
[11:01:47.469]             signalCondition <- base::signalCondition
[11:01:47.469]             sys.calls <- base::sys.calls
[11:01:47.469]             `[[` <- base::`[[`
[11:01:47.469]             `+` <- base::`+`
[11:01:47.469]             `<<-` <- base::`<<-`
[11:01:47.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.469]                   3L)]
[11:01:47.469]             }
[11:01:47.469]             function(cond) {
[11:01:47.469]                 is_error <- inherits(cond, "error")
[11:01:47.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.469]                   NULL)
[11:01:47.469]                 if (is_error) {
[11:01:47.469]                   sessionInformation <- function() {
[11:01:47.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.469]                       search = base::search(), system = base::Sys.info())
[11:01:47.469]                   }
[11:01:47.469]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.469]                     cond$call), session = sessionInformation(), 
[11:01:47.469]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.469]                   signalCondition(cond)
[11:01:47.469]                 }
[11:01:47.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.469]                 "immediateCondition"))) {
[11:01:47.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.469]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.469]                   if (TRUE && !signal) {
[11:01:47.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.469]                     {
[11:01:47.469]                       inherits <- base::inherits
[11:01:47.469]                       invokeRestart <- base::invokeRestart
[11:01:47.469]                       is.null <- base::is.null
[11:01:47.469]                       muffled <- FALSE
[11:01:47.469]                       if (inherits(cond, "message")) {
[11:01:47.469]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.469]                         if (muffled) 
[11:01:47.469]                           invokeRestart("muffleMessage")
[11:01:47.469]                       }
[11:01:47.469]                       else if (inherits(cond, "warning")) {
[11:01:47.469]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.469]                         if (muffled) 
[11:01:47.469]                           invokeRestart("muffleWarning")
[11:01:47.469]                       }
[11:01:47.469]                       else if (inherits(cond, "condition")) {
[11:01:47.469]                         if (!is.null(pattern)) {
[11:01:47.469]                           computeRestarts <- base::computeRestarts
[11:01:47.469]                           grepl <- base::grepl
[11:01:47.469]                           restarts <- computeRestarts(cond)
[11:01:47.469]                           for (restart in restarts) {
[11:01:47.469]                             name <- restart$name
[11:01:47.469]                             if (is.null(name)) 
[11:01:47.469]                               next
[11:01:47.469]                             if (!grepl(pattern, name)) 
[11:01:47.469]                               next
[11:01:47.469]                             invokeRestart(restart)
[11:01:47.469]                             muffled <- TRUE
[11:01:47.469]                             break
[11:01:47.469]                           }
[11:01:47.469]                         }
[11:01:47.469]                       }
[11:01:47.469]                       invisible(muffled)
[11:01:47.469]                     }
[11:01:47.469]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.469]                   }
[11:01:47.469]                 }
[11:01:47.469]                 else {
[11:01:47.469]                   if (TRUE) {
[11:01:47.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.469]                     {
[11:01:47.469]                       inherits <- base::inherits
[11:01:47.469]                       invokeRestart <- base::invokeRestart
[11:01:47.469]                       is.null <- base::is.null
[11:01:47.469]                       muffled <- FALSE
[11:01:47.469]                       if (inherits(cond, "message")) {
[11:01:47.469]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.469]                         if (muffled) 
[11:01:47.469]                           invokeRestart("muffleMessage")
[11:01:47.469]                       }
[11:01:47.469]                       else if (inherits(cond, "warning")) {
[11:01:47.469]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.469]                         if (muffled) 
[11:01:47.469]                           invokeRestart("muffleWarning")
[11:01:47.469]                       }
[11:01:47.469]                       else if (inherits(cond, "condition")) {
[11:01:47.469]                         if (!is.null(pattern)) {
[11:01:47.469]                           computeRestarts <- base::computeRestarts
[11:01:47.469]                           grepl <- base::grepl
[11:01:47.469]                           restarts <- computeRestarts(cond)
[11:01:47.469]                           for (restart in restarts) {
[11:01:47.469]                             name <- restart$name
[11:01:47.469]                             if (is.null(name)) 
[11:01:47.469]                               next
[11:01:47.469]                             if (!grepl(pattern, name)) 
[11:01:47.469]                               next
[11:01:47.469]                             invokeRestart(restart)
[11:01:47.469]                             muffled <- TRUE
[11:01:47.469]                             break
[11:01:47.469]                           }
[11:01:47.469]                         }
[11:01:47.469]                       }
[11:01:47.469]                       invisible(muffled)
[11:01:47.469]                     }
[11:01:47.469]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.469]                   }
[11:01:47.469]                 }
[11:01:47.469]             }
[11:01:47.469]         }))
[11:01:47.469]     }, error = function(ex) {
[11:01:47.469]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.469]                 ...future.rng), started = ...future.startTime, 
[11:01:47.469]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.469]             version = "1.8"), class = "FutureResult")
[11:01:47.469]     }, finally = {
[11:01:47.469]         if (!identical(...future.workdir, getwd())) 
[11:01:47.469]             setwd(...future.workdir)
[11:01:47.469]         {
[11:01:47.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.469]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.469]             }
[11:01:47.469]             base::options(...future.oldOptions)
[11:01:47.469]             if (.Platform$OS.type == "windows") {
[11:01:47.469]                 old_names <- names(...future.oldEnvVars)
[11:01:47.469]                 envs <- base::Sys.getenv()
[11:01:47.469]                 names <- names(envs)
[11:01:47.469]                 common <- intersect(names, old_names)
[11:01:47.469]                 added <- setdiff(names, old_names)
[11:01:47.469]                 removed <- setdiff(old_names, names)
[11:01:47.469]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.469]                   envs[common]]
[11:01:47.469]                 NAMES <- toupper(changed)
[11:01:47.469]                 args <- list()
[11:01:47.469]                 for (kk in seq_along(NAMES)) {
[11:01:47.469]                   name <- changed[[kk]]
[11:01:47.469]                   NAME <- NAMES[[kk]]
[11:01:47.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.469]                     next
[11:01:47.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.469]                 }
[11:01:47.469]                 NAMES <- toupper(added)
[11:01:47.469]                 for (kk in seq_along(NAMES)) {
[11:01:47.469]                   name <- added[[kk]]
[11:01:47.469]                   NAME <- NAMES[[kk]]
[11:01:47.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.469]                     next
[11:01:47.469]                   args[[name]] <- ""
[11:01:47.469]                 }
[11:01:47.469]                 NAMES <- toupper(removed)
[11:01:47.469]                 for (kk in seq_along(NAMES)) {
[11:01:47.469]                   name <- removed[[kk]]
[11:01:47.469]                   NAME <- NAMES[[kk]]
[11:01:47.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.469]                     next
[11:01:47.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.469]                 }
[11:01:47.469]                 if (length(args) > 0) 
[11:01:47.469]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.469]             }
[11:01:47.469]             else {
[11:01:47.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.469]             }
[11:01:47.469]             {
[11:01:47.469]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.469]                   0L) {
[11:01:47.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.469]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.469]                   base::options(opts)
[11:01:47.469]                 }
[11:01:47.469]                 {
[11:01:47.469]                   {
[11:01:47.469]                     NULL
[11:01:47.469]                     RNGkind("Mersenne-Twister")
[11:01:47.469]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.469]                       inherits = FALSE)
[11:01:47.469]                   }
[11:01:47.469]                   options(future.plan = NULL)
[11:01:47.469]                   if (is.na(NA_character_)) 
[11:01:47.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.469]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.469]                     .init = FALSE)
[11:01:47.469]                 }
[11:01:47.469]             }
[11:01:47.469]         }
[11:01:47.469]     })
[11:01:47.469]     if (TRUE) {
[11:01:47.469]         base::sink(type = "output", split = FALSE)
[11:01:47.469]         if (TRUE) {
[11:01:47.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.469]         }
[11:01:47.469]         else {
[11:01:47.469]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.469]         }
[11:01:47.469]         base::close(...future.stdout)
[11:01:47.469]         ...future.stdout <- NULL
[11:01:47.469]     }
[11:01:47.469]     ...future.result$conditions <- ...future.conditions
[11:01:47.469]     ...future.result$finished <- base::Sys.time()
[11:01:47.469]     ...future.result
[11:01:47.469] }
[11:01:47.470] assign_globals() ...
[11:01:47.470] List of 1
[11:01:47.470]  $ x: list()
[11:01:47.470]  - attr(*, "where")=List of 1
[11:01:47.470]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.470]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.470]  - attr(*, "resolved")= logi TRUE
[11:01:47.470]  - attr(*, "total_size")= num 31
[11:01:47.470]  - attr(*, "already-done")= logi TRUE
[11:01:47.473] - copied ‘x’ to environment
[11:01:47.473] assign_globals() ... done
[11:01:47.473] plan(): Setting new future strategy stack:
[11:01:47.473] List of future strategies:
[11:01:47.473] 1. sequential:
[11:01:47.473]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.473]    - tweaked: FALSE
[11:01:47.473]    - call: NULL
[11:01:47.473] plan(): nbrOfWorkers() = 1
[11:01:47.474] plan(): Setting new future strategy stack:
[11:01:47.474] List of future strategies:
[11:01:47.474] 1. sequential:
[11:01:47.474]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.474]    - tweaked: FALSE
[11:01:47.474]    - call: plan(strategy)
[11:01:47.475] plan(): nbrOfWorkers() = 1
[11:01:47.475] SequentialFuture started (and completed)
[11:01:47.475] - Launch lazy future ... done
[11:01:47.475] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.475] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.475] Searching for globals...
[11:01:47.477] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.477] Searching for globals ... DONE
[11:01:47.477] Resolving globals: TRUE
[11:01:47.478] Resolving any globals that are futures ...
[11:01:47.478] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.478] Resolving any globals that are futures ... DONE
[11:01:47.478] Resolving futures part of globals (recursively) ...
[11:01:47.478] resolve() on list ...
[11:01:47.478]  recursive: 99
[11:01:47.478]  length: 1
[11:01:47.478]  elements: ‘x’
[11:01:47.479]  length: 0 (resolved future 1)
[11:01:47.479] resolve() on list ... DONE
[11:01:47.479] - globals: [1] ‘x’
[11:01:47.479] Resolving futures part of globals (recursively) ... DONE
[11:01:47.479] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.479] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.479] - globals: [1] ‘x’
[11:01:47.479] 
[11:01:47.480] getGlobalsAndPackages() ... DONE
[11:01:47.480] run() for ‘Future’ ...
[11:01:47.480] - state: ‘created’
[11:01:47.480] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.480] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.480] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.480]   - Field: ‘label’
[11:01:47.480]   - Field: ‘local’
[11:01:47.481]   - Field: ‘owner’
[11:01:47.481]   - Field: ‘envir’
[11:01:47.481]   - Field: ‘packages’
[11:01:47.481]   - Field: ‘gc’
[11:01:47.481]   - Field: ‘conditions’
[11:01:47.481]   - Field: ‘expr’
[11:01:47.481]   - Field: ‘uuid’
[11:01:47.481]   - Field: ‘seed’
[11:01:47.481]   - Field: ‘version’
[11:01:47.481]   - Field: ‘result’
[11:01:47.481]   - Field: ‘asynchronous’
[11:01:47.481]   - Field: ‘calls’
[11:01:47.482]   - Field: ‘globals’
[11:01:47.482]   - Field: ‘stdout’
[11:01:47.482]   - Field: ‘earlySignal’
[11:01:47.482]   - Field: ‘lazy’
[11:01:47.482]   - Field: ‘state’
[11:01:47.482] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.482] - Launch lazy future ...
[11:01:47.482] Packages needed by the future expression (n = 0): <none>
[11:01:47.482] Packages needed by future strategies (n = 0): <none>
[11:01:47.483] {
[11:01:47.483]     {
[11:01:47.483]         {
[11:01:47.483]             ...future.startTime <- base::Sys.time()
[11:01:47.483]             {
[11:01:47.483]                 {
[11:01:47.483]                   {
[11:01:47.483]                     base::local({
[11:01:47.483]                       has_future <- base::requireNamespace("future", 
[11:01:47.483]                         quietly = TRUE)
[11:01:47.483]                       if (has_future) {
[11:01:47.483]                         ns <- base::getNamespace("future")
[11:01:47.483]                         version <- ns[[".package"]][["version"]]
[11:01:47.483]                         if (is.null(version)) 
[11:01:47.483]                           version <- utils::packageVersion("future")
[11:01:47.483]                       }
[11:01:47.483]                       else {
[11:01:47.483]                         version <- NULL
[11:01:47.483]                       }
[11:01:47.483]                       if (!has_future || version < "1.8.0") {
[11:01:47.483]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.483]                           "", base::R.version$version.string), 
[11:01:47.483]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.483]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.483]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.483]                             "release", "version")], collapse = " "), 
[11:01:47.483]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.483]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.483]                           info)
[11:01:47.483]                         info <- base::paste(info, collapse = "; ")
[11:01:47.483]                         if (!has_future) {
[11:01:47.483]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.483]                             info)
[11:01:47.483]                         }
[11:01:47.483]                         else {
[11:01:47.483]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.483]                             info, version)
[11:01:47.483]                         }
[11:01:47.483]                         base::stop(msg)
[11:01:47.483]                       }
[11:01:47.483]                     })
[11:01:47.483]                   }
[11:01:47.483]                   ...future.strategy.old <- future::plan("list")
[11:01:47.483]                   options(future.plan = NULL)
[11:01:47.483]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.483]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.483]                 }
[11:01:47.483]                 ...future.workdir <- getwd()
[11:01:47.483]             }
[11:01:47.483]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.483]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.483]         }
[11:01:47.483]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.483]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.483]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.483]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.483]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.483]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.483]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.483]             base::names(...future.oldOptions))
[11:01:47.483]     }
[11:01:47.483]     if (FALSE) {
[11:01:47.483]     }
[11:01:47.483]     else {
[11:01:47.483]         if (TRUE) {
[11:01:47.483]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.483]                 open = "w")
[11:01:47.483]         }
[11:01:47.483]         else {
[11:01:47.483]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.483]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.483]         }
[11:01:47.483]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.483]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.483]             base::sink(type = "output", split = FALSE)
[11:01:47.483]             base::close(...future.stdout)
[11:01:47.483]         }, add = TRUE)
[11:01:47.483]     }
[11:01:47.483]     ...future.frame <- base::sys.nframe()
[11:01:47.483]     ...future.conditions <- base::list()
[11:01:47.483]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.483]     if (FALSE) {
[11:01:47.483]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.483]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.483]     }
[11:01:47.483]     ...future.result <- base::tryCatch({
[11:01:47.483]         base::withCallingHandlers({
[11:01:47.483]             ...future.value <- base::withVisible(base::local({
[11:01:47.483]                 x["a"] <- list(1)
[11:01:47.483]                 x
[11:01:47.483]             }))
[11:01:47.483]             future::FutureResult(value = ...future.value$value, 
[11:01:47.483]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.483]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.483]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.483]                     ...future.globalenv.names))
[11:01:47.483]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.483]         }, condition = base::local({
[11:01:47.483]             c <- base::c
[11:01:47.483]             inherits <- base::inherits
[11:01:47.483]             invokeRestart <- base::invokeRestart
[11:01:47.483]             length <- base::length
[11:01:47.483]             list <- base::list
[11:01:47.483]             seq.int <- base::seq.int
[11:01:47.483]             signalCondition <- base::signalCondition
[11:01:47.483]             sys.calls <- base::sys.calls
[11:01:47.483]             `[[` <- base::`[[`
[11:01:47.483]             `+` <- base::`+`
[11:01:47.483]             `<<-` <- base::`<<-`
[11:01:47.483]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.483]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.483]                   3L)]
[11:01:47.483]             }
[11:01:47.483]             function(cond) {
[11:01:47.483]                 is_error <- inherits(cond, "error")
[11:01:47.483]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.483]                   NULL)
[11:01:47.483]                 if (is_error) {
[11:01:47.483]                   sessionInformation <- function() {
[11:01:47.483]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.483]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.483]                       search = base::search(), system = base::Sys.info())
[11:01:47.483]                   }
[11:01:47.483]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.483]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.483]                     cond$call), session = sessionInformation(), 
[11:01:47.483]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.483]                   signalCondition(cond)
[11:01:47.483]                 }
[11:01:47.483]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.483]                 "immediateCondition"))) {
[11:01:47.483]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.483]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.483]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.483]                   if (TRUE && !signal) {
[11:01:47.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.483]                     {
[11:01:47.483]                       inherits <- base::inherits
[11:01:47.483]                       invokeRestart <- base::invokeRestart
[11:01:47.483]                       is.null <- base::is.null
[11:01:47.483]                       muffled <- FALSE
[11:01:47.483]                       if (inherits(cond, "message")) {
[11:01:47.483]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.483]                         if (muffled) 
[11:01:47.483]                           invokeRestart("muffleMessage")
[11:01:47.483]                       }
[11:01:47.483]                       else if (inherits(cond, "warning")) {
[11:01:47.483]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.483]                         if (muffled) 
[11:01:47.483]                           invokeRestart("muffleWarning")
[11:01:47.483]                       }
[11:01:47.483]                       else if (inherits(cond, "condition")) {
[11:01:47.483]                         if (!is.null(pattern)) {
[11:01:47.483]                           computeRestarts <- base::computeRestarts
[11:01:47.483]                           grepl <- base::grepl
[11:01:47.483]                           restarts <- computeRestarts(cond)
[11:01:47.483]                           for (restart in restarts) {
[11:01:47.483]                             name <- restart$name
[11:01:47.483]                             if (is.null(name)) 
[11:01:47.483]                               next
[11:01:47.483]                             if (!grepl(pattern, name)) 
[11:01:47.483]                               next
[11:01:47.483]                             invokeRestart(restart)
[11:01:47.483]                             muffled <- TRUE
[11:01:47.483]                             break
[11:01:47.483]                           }
[11:01:47.483]                         }
[11:01:47.483]                       }
[11:01:47.483]                       invisible(muffled)
[11:01:47.483]                     }
[11:01:47.483]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.483]                   }
[11:01:47.483]                 }
[11:01:47.483]                 else {
[11:01:47.483]                   if (TRUE) {
[11:01:47.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.483]                     {
[11:01:47.483]                       inherits <- base::inherits
[11:01:47.483]                       invokeRestart <- base::invokeRestart
[11:01:47.483]                       is.null <- base::is.null
[11:01:47.483]                       muffled <- FALSE
[11:01:47.483]                       if (inherits(cond, "message")) {
[11:01:47.483]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.483]                         if (muffled) 
[11:01:47.483]                           invokeRestart("muffleMessage")
[11:01:47.483]                       }
[11:01:47.483]                       else if (inherits(cond, "warning")) {
[11:01:47.483]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.483]                         if (muffled) 
[11:01:47.483]                           invokeRestart("muffleWarning")
[11:01:47.483]                       }
[11:01:47.483]                       else if (inherits(cond, "condition")) {
[11:01:47.483]                         if (!is.null(pattern)) {
[11:01:47.483]                           computeRestarts <- base::computeRestarts
[11:01:47.483]                           grepl <- base::grepl
[11:01:47.483]                           restarts <- computeRestarts(cond)
[11:01:47.483]                           for (restart in restarts) {
[11:01:47.483]                             name <- restart$name
[11:01:47.483]                             if (is.null(name)) 
[11:01:47.483]                               next
[11:01:47.483]                             if (!grepl(pattern, name)) 
[11:01:47.483]                               next
[11:01:47.483]                             invokeRestart(restart)
[11:01:47.483]                             muffled <- TRUE
[11:01:47.483]                             break
[11:01:47.483]                           }
[11:01:47.483]                         }
[11:01:47.483]                       }
[11:01:47.483]                       invisible(muffled)
[11:01:47.483]                     }
[11:01:47.483]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.483]                   }
[11:01:47.483]                 }
[11:01:47.483]             }
[11:01:47.483]         }))
[11:01:47.483]     }, error = function(ex) {
[11:01:47.483]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.483]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.483]                 ...future.rng), started = ...future.startTime, 
[11:01:47.483]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.483]             version = "1.8"), class = "FutureResult")
[11:01:47.483]     }, finally = {
[11:01:47.483]         if (!identical(...future.workdir, getwd())) 
[11:01:47.483]             setwd(...future.workdir)
[11:01:47.483]         {
[11:01:47.483]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.483]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.483]             }
[11:01:47.483]             base::options(...future.oldOptions)
[11:01:47.483]             if (.Platform$OS.type == "windows") {
[11:01:47.483]                 old_names <- names(...future.oldEnvVars)
[11:01:47.483]                 envs <- base::Sys.getenv()
[11:01:47.483]                 names <- names(envs)
[11:01:47.483]                 common <- intersect(names, old_names)
[11:01:47.483]                 added <- setdiff(names, old_names)
[11:01:47.483]                 removed <- setdiff(old_names, names)
[11:01:47.483]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.483]                   envs[common]]
[11:01:47.483]                 NAMES <- toupper(changed)
[11:01:47.483]                 args <- list()
[11:01:47.483]                 for (kk in seq_along(NAMES)) {
[11:01:47.483]                   name <- changed[[kk]]
[11:01:47.483]                   NAME <- NAMES[[kk]]
[11:01:47.483]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.483]                     next
[11:01:47.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.483]                 }
[11:01:47.483]                 NAMES <- toupper(added)
[11:01:47.483]                 for (kk in seq_along(NAMES)) {
[11:01:47.483]                   name <- added[[kk]]
[11:01:47.483]                   NAME <- NAMES[[kk]]
[11:01:47.483]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.483]                     next
[11:01:47.483]                   args[[name]] <- ""
[11:01:47.483]                 }
[11:01:47.483]                 NAMES <- toupper(removed)
[11:01:47.483]                 for (kk in seq_along(NAMES)) {
[11:01:47.483]                   name <- removed[[kk]]
[11:01:47.483]                   NAME <- NAMES[[kk]]
[11:01:47.483]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.483]                     next
[11:01:47.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.483]                 }
[11:01:47.483]                 if (length(args) > 0) 
[11:01:47.483]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.483]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.483]             }
[11:01:47.483]             else {
[11:01:47.483]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.483]             }
[11:01:47.483]             {
[11:01:47.483]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.483]                   0L) {
[11:01:47.483]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.483]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.483]                   base::options(opts)
[11:01:47.483]                 }
[11:01:47.483]                 {
[11:01:47.483]                   {
[11:01:47.483]                     NULL
[11:01:47.483]                     RNGkind("Mersenne-Twister")
[11:01:47.483]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.483]                       inherits = FALSE)
[11:01:47.483]                   }
[11:01:47.483]                   options(future.plan = NULL)
[11:01:47.483]                   if (is.na(NA_character_)) 
[11:01:47.483]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.483]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.483]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.483]                     .init = FALSE)
[11:01:47.483]                 }
[11:01:47.483]             }
[11:01:47.483]         }
[11:01:47.483]     })
[11:01:47.483]     if (TRUE) {
[11:01:47.483]         base::sink(type = "output", split = FALSE)
[11:01:47.483]         if (TRUE) {
[11:01:47.483]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.483]         }
[11:01:47.483]         else {
[11:01:47.483]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.483]         }
[11:01:47.483]         base::close(...future.stdout)
[11:01:47.483]         ...future.stdout <- NULL
[11:01:47.483]     }
[11:01:47.483]     ...future.result$conditions <- ...future.conditions
[11:01:47.483]     ...future.result$finished <- base::Sys.time()
[11:01:47.483]     ...future.result
[11:01:47.483] }
[11:01:47.484] assign_globals() ...
[11:01:47.484] List of 1
[11:01:47.484]  $ x: list()
[11:01:47.484]  - attr(*, "where")=List of 1
[11:01:47.484]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.484]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.484]  - attr(*, "resolved")= logi TRUE
[11:01:47.484]  - attr(*, "total_size")= num 31
[11:01:47.484]  - attr(*, "already-done")= logi TRUE
[11:01:47.487] - copied ‘x’ to environment
[11:01:47.487] assign_globals() ... done
[11:01:47.487] plan(): Setting new future strategy stack:
[11:01:47.487] List of future strategies:
[11:01:47.487] 1. sequential:
[11:01:47.487]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.487]    - tweaked: FALSE
[11:01:47.487]    - call: NULL
[11:01:47.487] plan(): nbrOfWorkers() = 1
[11:01:47.488] plan(): Setting new future strategy stack:
[11:01:47.488] List of future strategies:
[11:01:47.488] 1. sequential:
[11:01:47.488]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.488]    - tweaked: FALSE
[11:01:47.488]    - call: plan(strategy)
[11:01:47.488] plan(): nbrOfWorkers() = 1
[11:01:47.489] SequentialFuture started (and completed)
[11:01:47.489] - Launch lazy future ... done
[11:01:47.489] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.489] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.489] Searching for globals...
[11:01:47.491] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[11:01:47.491] Searching for globals ... DONE
[11:01:47.492] Resolving globals: TRUE
[11:01:47.492] Resolving any globals that are futures ...
[11:01:47.492] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[11:01:47.492] Resolving any globals that are futures ... DONE
[11:01:47.492] Resolving futures part of globals (recursively) ...
[11:01:47.492] resolve() on list ...
[11:01:47.493]  recursive: 99
[11:01:47.493]  length: 2
[11:01:47.493]  elements: ‘x’, ‘name’
[11:01:47.494]  length: 1 (resolved future 1)
[11:01:47.494]  length: 0 (resolved future 2)
[11:01:47.494] resolve() on list ... DONE
[11:01:47.494] - globals: [2] ‘x’, ‘name’
[11:01:47.494] Resolving futures part of globals (recursively) ... DONE
[11:01:47.494] The total size of the 2 globals is 71 bytes (71 bytes)
[11:01:47.494] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 71 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (40 bytes of class ‘character’) and ‘x’ (31 bytes of class ‘list’)
[11:01:47.495] - globals: [2] ‘x’, ‘name’
[11:01:47.495] 
[11:01:47.495] getGlobalsAndPackages() ... DONE
[11:01:47.495] run() for ‘Future’ ...
[11:01:47.495] - state: ‘created’
[11:01:47.495] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:47.495] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:47.495] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:47.496]   - Field: ‘label’
[11:01:47.496]   - Field: ‘local’
[11:01:47.496]   - Field: ‘owner’
[11:01:47.496]   - Field: ‘envir’
[11:01:47.496]   - Field: ‘packages’
[11:01:47.496]   - Field: ‘gc’
[11:01:47.496]   - Field: ‘conditions’
[11:01:47.496]   - Field: ‘expr’
[11:01:47.496]   - Field: ‘uuid’
[11:01:47.496]   - Field: ‘seed’
[11:01:47.496]   - Field: ‘version’
[11:01:47.496]   - Field: ‘result’
[11:01:47.497]   - Field: ‘asynchronous’
[11:01:47.497]   - Field: ‘calls’
[11:01:47.497]   - Field: ‘globals’
[11:01:47.497]   - Field: ‘stdout’
[11:01:47.497]   - Field: ‘earlySignal’
[11:01:47.497]   - Field: ‘lazy’
[11:01:47.497]   - Field: ‘state’
[11:01:47.497] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:47.497] - Launch lazy future ...
[11:01:47.497] Packages needed by the future expression (n = 0): <none>
[11:01:47.498] Packages needed by future strategies (n = 0): <none>
[11:01:47.498] {
[11:01:47.498]     {
[11:01:47.498]         {
[11:01:47.498]             ...future.startTime <- base::Sys.time()
[11:01:47.498]             {
[11:01:47.498]                 {
[11:01:47.498]                   {
[11:01:47.498]                     base::local({
[11:01:47.498]                       has_future <- base::requireNamespace("future", 
[11:01:47.498]                         quietly = TRUE)
[11:01:47.498]                       if (has_future) {
[11:01:47.498]                         ns <- base::getNamespace("future")
[11:01:47.498]                         version <- ns[[".package"]][["version"]]
[11:01:47.498]                         if (is.null(version)) 
[11:01:47.498]                           version <- utils::packageVersion("future")
[11:01:47.498]                       }
[11:01:47.498]                       else {
[11:01:47.498]                         version <- NULL
[11:01:47.498]                       }
[11:01:47.498]                       if (!has_future || version < "1.8.0") {
[11:01:47.498]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.498]                           "", base::R.version$version.string), 
[11:01:47.498]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:47.498]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.498]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.498]                             "release", "version")], collapse = " "), 
[11:01:47.498]                           hostname = base::Sys.info()[["nodename"]])
[11:01:47.498]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.498]                           info)
[11:01:47.498]                         info <- base::paste(info, collapse = "; ")
[11:01:47.498]                         if (!has_future) {
[11:01:47.498]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.498]                             info)
[11:01:47.498]                         }
[11:01:47.498]                         else {
[11:01:47.498]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.498]                             info, version)
[11:01:47.498]                         }
[11:01:47.498]                         base::stop(msg)
[11:01:47.498]                       }
[11:01:47.498]                     })
[11:01:47.498]                   }
[11:01:47.498]                   ...future.strategy.old <- future::plan("list")
[11:01:47.498]                   options(future.plan = NULL)
[11:01:47.498]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.498]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.498]                 }
[11:01:47.498]                 ...future.workdir <- getwd()
[11:01:47.498]             }
[11:01:47.498]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.498]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.498]         }
[11:01:47.498]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.498]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.498]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.498]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.498]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.498]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.498]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.498]             base::names(...future.oldOptions))
[11:01:47.498]     }
[11:01:47.498]     if (FALSE) {
[11:01:47.498]     }
[11:01:47.498]     else {
[11:01:47.498]         if (TRUE) {
[11:01:47.498]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.498]                 open = "w")
[11:01:47.498]         }
[11:01:47.498]         else {
[11:01:47.498]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.498]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.498]         }
[11:01:47.498]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.498]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.498]             base::sink(type = "output", split = FALSE)
[11:01:47.498]             base::close(...future.stdout)
[11:01:47.498]         }, add = TRUE)
[11:01:47.498]     }
[11:01:47.498]     ...future.frame <- base::sys.nframe()
[11:01:47.498]     ...future.conditions <- base::list()
[11:01:47.498]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.498]     if (FALSE) {
[11:01:47.498]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.498]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.498]     }
[11:01:47.498]     ...future.result <- base::tryCatch({
[11:01:47.498]         base::withCallingHandlers({
[11:01:47.498]             ...future.value <- base::withVisible(base::local({
[11:01:47.498]                 x[name] <- list(1)
[11:01:47.498]                 x
[11:01:47.498]             }))
[11:01:47.498]             future::FutureResult(value = ...future.value$value, 
[11:01:47.498]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.498]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.498]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.498]                     ...future.globalenv.names))
[11:01:47.498]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.498]         }, condition = base::local({
[11:01:47.498]             c <- base::c
[11:01:47.498]             inherits <- base::inherits
[11:01:47.498]             invokeRestart <- base::invokeRestart
[11:01:47.498]             length <- base::length
[11:01:47.498]             list <- base::list
[11:01:47.498]             seq.int <- base::seq.int
[11:01:47.498]             signalCondition <- base::signalCondition
[11:01:47.498]             sys.calls <- base::sys.calls
[11:01:47.498]             `[[` <- base::`[[`
[11:01:47.498]             `+` <- base::`+`
[11:01:47.498]             `<<-` <- base::`<<-`
[11:01:47.498]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.498]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.498]                   3L)]
[11:01:47.498]             }
[11:01:47.498]             function(cond) {
[11:01:47.498]                 is_error <- inherits(cond, "error")
[11:01:47.498]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.498]                   NULL)
[11:01:47.498]                 if (is_error) {
[11:01:47.498]                   sessionInformation <- function() {
[11:01:47.498]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.498]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.498]                       search = base::search(), system = base::Sys.info())
[11:01:47.498]                   }
[11:01:47.498]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.498]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.498]                     cond$call), session = sessionInformation(), 
[11:01:47.498]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.498]                   signalCondition(cond)
[11:01:47.498]                 }
[11:01:47.498]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.498]                 "immediateCondition"))) {
[11:01:47.498]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.498]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.498]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.498]                   if (TRUE && !signal) {
[11:01:47.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.498]                     {
[11:01:47.498]                       inherits <- base::inherits
[11:01:47.498]                       invokeRestart <- base::invokeRestart
[11:01:47.498]                       is.null <- base::is.null
[11:01:47.498]                       muffled <- FALSE
[11:01:47.498]                       if (inherits(cond, "message")) {
[11:01:47.498]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.498]                         if (muffled) 
[11:01:47.498]                           invokeRestart("muffleMessage")
[11:01:47.498]                       }
[11:01:47.498]                       else if (inherits(cond, "warning")) {
[11:01:47.498]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.498]                         if (muffled) 
[11:01:47.498]                           invokeRestart("muffleWarning")
[11:01:47.498]                       }
[11:01:47.498]                       else if (inherits(cond, "condition")) {
[11:01:47.498]                         if (!is.null(pattern)) {
[11:01:47.498]                           computeRestarts <- base::computeRestarts
[11:01:47.498]                           grepl <- base::grepl
[11:01:47.498]                           restarts <- computeRestarts(cond)
[11:01:47.498]                           for (restart in restarts) {
[11:01:47.498]                             name <- restart$name
[11:01:47.498]                             if (is.null(name)) 
[11:01:47.498]                               next
[11:01:47.498]                             if (!grepl(pattern, name)) 
[11:01:47.498]                               next
[11:01:47.498]                             invokeRestart(restart)
[11:01:47.498]                             muffled <- TRUE
[11:01:47.498]                             break
[11:01:47.498]                           }
[11:01:47.498]                         }
[11:01:47.498]                       }
[11:01:47.498]                       invisible(muffled)
[11:01:47.498]                     }
[11:01:47.498]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.498]                   }
[11:01:47.498]                 }
[11:01:47.498]                 else {
[11:01:47.498]                   if (TRUE) {
[11:01:47.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.498]                     {
[11:01:47.498]                       inherits <- base::inherits
[11:01:47.498]                       invokeRestart <- base::invokeRestart
[11:01:47.498]                       is.null <- base::is.null
[11:01:47.498]                       muffled <- FALSE
[11:01:47.498]                       if (inherits(cond, "message")) {
[11:01:47.498]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.498]                         if (muffled) 
[11:01:47.498]                           invokeRestart("muffleMessage")
[11:01:47.498]                       }
[11:01:47.498]                       else if (inherits(cond, "warning")) {
[11:01:47.498]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.498]                         if (muffled) 
[11:01:47.498]                           invokeRestart("muffleWarning")
[11:01:47.498]                       }
[11:01:47.498]                       else if (inherits(cond, "condition")) {
[11:01:47.498]                         if (!is.null(pattern)) {
[11:01:47.498]                           computeRestarts <- base::computeRestarts
[11:01:47.498]                           grepl <- base::grepl
[11:01:47.498]                           restarts <- computeRestarts(cond)
[11:01:47.498]                           for (restart in restarts) {
[11:01:47.498]                             name <- restart$name
[11:01:47.498]                             if (is.null(name)) 
[11:01:47.498]                               next
[11:01:47.498]                             if (!grepl(pattern, name)) 
[11:01:47.498]                               next
[11:01:47.498]                             invokeRestart(restart)
[11:01:47.498]                             muffled <- TRUE
[11:01:47.498]                             break
[11:01:47.498]                           }
[11:01:47.498]                         }
[11:01:47.498]                       }
[11:01:47.498]                       invisible(muffled)
[11:01:47.498]                     }
[11:01:47.498]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.498]                   }
[11:01:47.498]                 }
[11:01:47.498]             }
[11:01:47.498]         }))
[11:01:47.498]     }, error = function(ex) {
[11:01:47.498]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.498]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.498]                 ...future.rng), started = ...future.startTime, 
[11:01:47.498]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.498]             version = "1.8"), class = "FutureResult")
[11:01:47.498]     }, finally = {
[11:01:47.498]         if (!identical(...future.workdir, getwd())) 
[11:01:47.498]             setwd(...future.workdir)
[11:01:47.498]         {
[11:01:47.498]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.498]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.498]             }
[11:01:47.498]             base::options(...future.oldOptions)
[11:01:47.498]             if (.Platform$OS.type == "windows") {
[11:01:47.498]                 old_names <- names(...future.oldEnvVars)
[11:01:47.498]                 envs <- base::Sys.getenv()
[11:01:47.498]                 names <- names(envs)
[11:01:47.498]                 common <- intersect(names, old_names)
[11:01:47.498]                 added <- setdiff(names, old_names)
[11:01:47.498]                 removed <- setdiff(old_names, names)
[11:01:47.498]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.498]                   envs[common]]
[11:01:47.498]                 NAMES <- toupper(changed)
[11:01:47.498]                 args <- list()
[11:01:47.498]                 for (kk in seq_along(NAMES)) {
[11:01:47.498]                   name <- changed[[kk]]
[11:01:47.498]                   NAME <- NAMES[[kk]]
[11:01:47.498]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.498]                     next
[11:01:47.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.498]                 }
[11:01:47.498]                 NAMES <- toupper(added)
[11:01:47.498]                 for (kk in seq_along(NAMES)) {
[11:01:47.498]                   name <- added[[kk]]
[11:01:47.498]                   NAME <- NAMES[[kk]]
[11:01:47.498]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.498]                     next
[11:01:47.498]                   args[[name]] <- ""
[11:01:47.498]                 }
[11:01:47.498]                 NAMES <- toupper(removed)
[11:01:47.498]                 for (kk in seq_along(NAMES)) {
[11:01:47.498]                   name <- removed[[kk]]
[11:01:47.498]                   NAME <- NAMES[[kk]]
[11:01:47.498]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.498]                     next
[11:01:47.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.498]                 }
[11:01:47.498]                 if (length(args) > 0) 
[11:01:47.498]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.498]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.498]             }
[11:01:47.498]             else {
[11:01:47.498]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.498]             }
[11:01:47.498]             {
[11:01:47.498]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.498]                   0L) {
[11:01:47.498]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.498]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.498]                   base::options(opts)
[11:01:47.498]                 }
[11:01:47.498]                 {
[11:01:47.498]                   {
[11:01:47.498]                     NULL
[11:01:47.498]                     RNGkind("Mersenne-Twister")
[11:01:47.498]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:47.498]                       inherits = FALSE)
[11:01:47.498]                   }
[11:01:47.498]                   options(future.plan = NULL)
[11:01:47.498]                   if (is.na(NA_character_)) 
[11:01:47.498]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.498]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.498]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.498]                     .init = FALSE)
[11:01:47.498]                 }
[11:01:47.498]             }
[11:01:47.498]         }
[11:01:47.498]     })
[11:01:47.498]     if (TRUE) {
[11:01:47.498]         base::sink(type = "output", split = FALSE)
[11:01:47.498]         if (TRUE) {
[11:01:47.498]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.498]         }
[11:01:47.498]         else {
[11:01:47.498]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.498]         }
[11:01:47.498]         base::close(...future.stdout)
[11:01:47.498]         ...future.stdout <- NULL
[11:01:47.498]     }
[11:01:47.498]     ...future.result$conditions <- ...future.conditions
[11:01:47.498]     ...future.result$finished <- base::Sys.time()
[11:01:47.498]     ...future.result
[11:01:47.498] }
[11:01:47.500] assign_globals() ...
[11:01:47.500] List of 2
[11:01:47.500]  $ x   : list()
[11:01:47.500]  $ name: chr "a"
[11:01:47.500]  - attr(*, "where")=List of 2
[11:01:47.500]   ..$ x   :<environment: R_EmptyEnv> 
[11:01:47.500]   ..$ name:<environment: R_EmptyEnv> 
[11:01:47.500]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.500]  - attr(*, "resolved")= logi TRUE
[11:01:47.500]  - attr(*, "total_size")= num 71
[11:01:47.500]  - attr(*, "already-done")= logi TRUE
[11:01:47.503] - copied ‘x’ to environment
[11:01:47.503] - copied ‘name’ to environment
[11:01:47.503] assign_globals() ... done
[11:01:47.503] plan(): Setting new future strategy stack:
[11:01:47.503] List of future strategies:
[11:01:47.503] 1. sequential:
[11:01:47.503]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.503]    - tweaked: FALSE
[11:01:47.503]    - call: NULL
[11:01:47.503] plan(): nbrOfWorkers() = 1
[11:01:47.504] plan(): Setting new future strategy stack:
[11:01:47.504] List of future strategies:
[11:01:47.504] 1. sequential:
[11:01:47.504]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.504]    - tweaked: FALSE
[11:01:47.504]    - call: plan(strategy)
[11:01:47.505] plan(): nbrOfWorkers() = 1
[11:01:47.505] SequentialFuture started (and completed)
[11:01:47.505] - Launch lazy future ... done
[11:01:47.505] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- plan('multicore') ...
[11:01:47.511] plan(): Setting new future strategy stack:
[11:01:47.511] List of future strategies:
[11:01:47.511] 1. multicore:
[11:01:47.511]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.511]    - tweaked: FALSE
[11:01:47.511]    - call: plan(strategy)
[11:01:47.513] plan(): nbrOfWorkers() = 2
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.513] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.513] Searching for globals...
[11:01:47.515] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.515] Searching for globals ... DONE
[11:01:47.515] Resolving globals: TRUE
[11:01:47.515] Resolving any globals that are futures ...
[11:01:47.515] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.516] Resolving any globals that are futures ... DONE
[11:01:47.516] Resolving futures part of globals (recursively) ...
[11:01:47.516] resolve() on list ...
[11:01:47.516]  recursive: 99
[11:01:47.516]  length: 1
[11:01:47.516]  elements: ‘x’
[11:01:47.516]  length: 0 (resolved future 1)
[11:01:47.517] resolve() on list ... DONE
[11:01:47.517] - globals: [1] ‘x’
[11:01:47.518] Resolving futures part of globals (recursively) ... DONE
[11:01:47.518] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.518] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.518] - globals: [1] ‘x’
[11:01:47.519] 
[11:01:47.519] getGlobalsAndPackages() ... DONE
[11:01:47.519] run() for ‘Future’ ...
[11:01:47.519] - state: ‘created’
[11:01:47.519] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.521] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.521] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.521]   - Field: ‘label’
[11:01:47.521]   - Field: ‘local’
[11:01:47.521]   - Field: ‘owner’
[11:01:47.521]   - Field: ‘envir’
[11:01:47.521]   - Field: ‘workers’
[11:01:47.521]   - Field: ‘packages’
[11:01:47.521]   - Field: ‘gc’
[11:01:47.521]   - Field: ‘job’
[11:01:47.522]   - Field: ‘conditions’
[11:01:47.522]   - Field: ‘expr’
[11:01:47.522]   - Field: ‘uuid’
[11:01:47.522]   - Field: ‘seed’
[11:01:47.522]   - Field: ‘version’
[11:01:47.522]   - Field: ‘result’
[11:01:47.522]   - Field: ‘asynchronous’
[11:01:47.522]   - Field: ‘calls’
[11:01:47.522]   - Field: ‘globals’
[11:01:47.522]   - Field: ‘stdout’
[11:01:47.522]   - Field: ‘earlySignal’
[11:01:47.522]   - Field: ‘lazy’
[11:01:47.522]   - Field: ‘state’
[11:01:47.523] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.523] - Launch lazy future ...
[11:01:47.523] Packages needed by the future expression (n = 0): <none>
[11:01:47.524] Packages needed by future strategies (n = 0): <none>
[11:01:47.524] {
[11:01:47.524]     {
[11:01:47.524]         {
[11:01:47.524]             ...future.startTime <- base::Sys.time()
[11:01:47.524]             {
[11:01:47.524]                 {
[11:01:47.524]                   {
[11:01:47.524]                     {
[11:01:47.524]                       base::local({
[11:01:47.524]                         has_future <- base::requireNamespace("future", 
[11:01:47.524]                           quietly = TRUE)
[11:01:47.524]                         if (has_future) {
[11:01:47.524]                           ns <- base::getNamespace("future")
[11:01:47.524]                           version <- ns[[".package"]][["version"]]
[11:01:47.524]                           if (is.null(version)) 
[11:01:47.524]                             version <- utils::packageVersion("future")
[11:01:47.524]                         }
[11:01:47.524]                         else {
[11:01:47.524]                           version <- NULL
[11:01:47.524]                         }
[11:01:47.524]                         if (!has_future || version < "1.8.0") {
[11:01:47.524]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.524]                             "", base::R.version$version.string), 
[11:01:47.524]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.524]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.524]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.524]                               "release", "version")], collapse = " "), 
[11:01:47.524]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.524]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.524]                             info)
[11:01:47.524]                           info <- base::paste(info, collapse = "; ")
[11:01:47.524]                           if (!has_future) {
[11:01:47.524]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.524]                               info)
[11:01:47.524]                           }
[11:01:47.524]                           else {
[11:01:47.524]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.524]                               info, version)
[11:01:47.524]                           }
[11:01:47.524]                           base::stop(msg)
[11:01:47.524]                         }
[11:01:47.524]                       })
[11:01:47.524]                     }
[11:01:47.524]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.524]                     base::options(mc.cores = 1L)
[11:01:47.524]                   }
[11:01:47.524]                   ...future.strategy.old <- future::plan("list")
[11:01:47.524]                   options(future.plan = NULL)
[11:01:47.524]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.524]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.524]                 }
[11:01:47.524]                 ...future.workdir <- getwd()
[11:01:47.524]             }
[11:01:47.524]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.524]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.524]         }
[11:01:47.524]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.524]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.524]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.524]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.524]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.524]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.524]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.524]             base::names(...future.oldOptions))
[11:01:47.524]     }
[11:01:47.524]     if (FALSE) {
[11:01:47.524]     }
[11:01:47.524]     else {
[11:01:47.524]         if (TRUE) {
[11:01:47.524]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.524]                 open = "w")
[11:01:47.524]         }
[11:01:47.524]         else {
[11:01:47.524]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.524]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.524]         }
[11:01:47.524]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.524]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.524]             base::sink(type = "output", split = FALSE)
[11:01:47.524]             base::close(...future.stdout)
[11:01:47.524]         }, add = TRUE)
[11:01:47.524]     }
[11:01:47.524]     ...future.frame <- base::sys.nframe()
[11:01:47.524]     ...future.conditions <- base::list()
[11:01:47.524]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.524]     if (FALSE) {
[11:01:47.524]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.524]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.524]     }
[11:01:47.524]     ...future.result <- base::tryCatch({
[11:01:47.524]         base::withCallingHandlers({
[11:01:47.524]             ...future.value <- base::withVisible(base::local({
[11:01:47.524]                 withCallingHandlers({
[11:01:47.524]                   {
[11:01:47.524]                     x$a <- 1
[11:01:47.524]                     x
[11:01:47.524]                   }
[11:01:47.524]                 }, immediateCondition = function(cond) {
[11:01:47.524]                   save_rds <- function (object, pathname, ...) 
[11:01:47.524]                   {
[11:01:47.524]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.524]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.524]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.524]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.524]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.524]                         fi_tmp[["mtime"]])
[11:01:47.524]                     }
[11:01:47.524]                     tryCatch({
[11:01:47.524]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.524]                     }, error = function(ex) {
[11:01:47.524]                       msg <- conditionMessage(ex)
[11:01:47.524]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.524]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.524]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.524]                         fi_tmp[["mtime"]], msg)
[11:01:47.524]                       ex$message <- msg
[11:01:47.524]                       stop(ex)
[11:01:47.524]                     })
[11:01:47.524]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.524]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.524]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.524]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.524]                       fi <- file.info(pathname)
[11:01:47.524]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.524]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.524]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.524]                         fi[["size"]], fi[["mtime"]])
[11:01:47.524]                       stop(msg)
[11:01:47.524]                     }
[11:01:47.524]                     invisible(pathname)
[11:01:47.524]                   }
[11:01:47.524]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.524]                     rootPath = tempdir()) 
[11:01:47.524]                   {
[11:01:47.524]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.524]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.524]                       tmpdir = path, fileext = ".rds")
[11:01:47.524]                     save_rds(obj, file)
[11:01:47.524]                   }
[11:01:47.524]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.524]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.524]                   {
[11:01:47.524]                     inherits <- base::inherits
[11:01:47.524]                     invokeRestart <- base::invokeRestart
[11:01:47.524]                     is.null <- base::is.null
[11:01:47.524]                     muffled <- FALSE
[11:01:47.524]                     if (inherits(cond, "message")) {
[11:01:47.524]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.524]                       if (muffled) 
[11:01:47.524]                         invokeRestart("muffleMessage")
[11:01:47.524]                     }
[11:01:47.524]                     else if (inherits(cond, "warning")) {
[11:01:47.524]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.524]                       if (muffled) 
[11:01:47.524]                         invokeRestart("muffleWarning")
[11:01:47.524]                     }
[11:01:47.524]                     else if (inherits(cond, "condition")) {
[11:01:47.524]                       if (!is.null(pattern)) {
[11:01:47.524]                         computeRestarts <- base::computeRestarts
[11:01:47.524]                         grepl <- base::grepl
[11:01:47.524]                         restarts <- computeRestarts(cond)
[11:01:47.524]                         for (restart in restarts) {
[11:01:47.524]                           name <- restart$name
[11:01:47.524]                           if (is.null(name)) 
[11:01:47.524]                             next
[11:01:47.524]                           if (!grepl(pattern, name)) 
[11:01:47.524]                             next
[11:01:47.524]                           invokeRestart(restart)
[11:01:47.524]                           muffled <- TRUE
[11:01:47.524]                           break
[11:01:47.524]                         }
[11:01:47.524]                       }
[11:01:47.524]                     }
[11:01:47.524]                     invisible(muffled)
[11:01:47.524]                   }
[11:01:47.524]                   muffleCondition(cond)
[11:01:47.524]                 })
[11:01:47.524]             }))
[11:01:47.524]             future::FutureResult(value = ...future.value$value, 
[11:01:47.524]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.524]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.524]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.524]                     ...future.globalenv.names))
[11:01:47.524]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.524]         }, condition = base::local({
[11:01:47.524]             c <- base::c
[11:01:47.524]             inherits <- base::inherits
[11:01:47.524]             invokeRestart <- base::invokeRestart
[11:01:47.524]             length <- base::length
[11:01:47.524]             list <- base::list
[11:01:47.524]             seq.int <- base::seq.int
[11:01:47.524]             signalCondition <- base::signalCondition
[11:01:47.524]             sys.calls <- base::sys.calls
[11:01:47.524]             `[[` <- base::`[[`
[11:01:47.524]             `+` <- base::`+`
[11:01:47.524]             `<<-` <- base::`<<-`
[11:01:47.524]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.524]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.524]                   3L)]
[11:01:47.524]             }
[11:01:47.524]             function(cond) {
[11:01:47.524]                 is_error <- inherits(cond, "error")
[11:01:47.524]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.524]                   NULL)
[11:01:47.524]                 if (is_error) {
[11:01:47.524]                   sessionInformation <- function() {
[11:01:47.524]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.524]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.524]                       search = base::search(), system = base::Sys.info())
[11:01:47.524]                   }
[11:01:47.524]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.524]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.524]                     cond$call), session = sessionInformation(), 
[11:01:47.524]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.524]                   signalCondition(cond)
[11:01:47.524]                 }
[11:01:47.524]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.524]                 "immediateCondition"))) {
[11:01:47.524]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.524]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.524]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.524]                   if (TRUE && !signal) {
[11:01:47.524]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.524]                     {
[11:01:47.524]                       inherits <- base::inherits
[11:01:47.524]                       invokeRestart <- base::invokeRestart
[11:01:47.524]                       is.null <- base::is.null
[11:01:47.524]                       muffled <- FALSE
[11:01:47.524]                       if (inherits(cond, "message")) {
[11:01:47.524]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.524]                         if (muffled) 
[11:01:47.524]                           invokeRestart("muffleMessage")
[11:01:47.524]                       }
[11:01:47.524]                       else if (inherits(cond, "warning")) {
[11:01:47.524]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.524]                         if (muffled) 
[11:01:47.524]                           invokeRestart("muffleWarning")
[11:01:47.524]                       }
[11:01:47.524]                       else if (inherits(cond, "condition")) {
[11:01:47.524]                         if (!is.null(pattern)) {
[11:01:47.524]                           computeRestarts <- base::computeRestarts
[11:01:47.524]                           grepl <- base::grepl
[11:01:47.524]                           restarts <- computeRestarts(cond)
[11:01:47.524]                           for (restart in restarts) {
[11:01:47.524]                             name <- restart$name
[11:01:47.524]                             if (is.null(name)) 
[11:01:47.524]                               next
[11:01:47.524]                             if (!grepl(pattern, name)) 
[11:01:47.524]                               next
[11:01:47.524]                             invokeRestart(restart)
[11:01:47.524]                             muffled <- TRUE
[11:01:47.524]                             break
[11:01:47.524]                           }
[11:01:47.524]                         }
[11:01:47.524]                       }
[11:01:47.524]                       invisible(muffled)
[11:01:47.524]                     }
[11:01:47.524]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.524]                   }
[11:01:47.524]                 }
[11:01:47.524]                 else {
[11:01:47.524]                   if (TRUE) {
[11:01:47.524]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.524]                     {
[11:01:47.524]                       inherits <- base::inherits
[11:01:47.524]                       invokeRestart <- base::invokeRestart
[11:01:47.524]                       is.null <- base::is.null
[11:01:47.524]                       muffled <- FALSE
[11:01:47.524]                       if (inherits(cond, "message")) {
[11:01:47.524]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.524]                         if (muffled) 
[11:01:47.524]                           invokeRestart("muffleMessage")
[11:01:47.524]                       }
[11:01:47.524]                       else if (inherits(cond, "warning")) {
[11:01:47.524]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.524]                         if (muffled) 
[11:01:47.524]                           invokeRestart("muffleWarning")
[11:01:47.524]                       }
[11:01:47.524]                       else if (inherits(cond, "condition")) {
[11:01:47.524]                         if (!is.null(pattern)) {
[11:01:47.524]                           computeRestarts <- base::computeRestarts
[11:01:47.524]                           grepl <- base::grepl
[11:01:47.524]                           restarts <- computeRestarts(cond)
[11:01:47.524]                           for (restart in restarts) {
[11:01:47.524]                             name <- restart$name
[11:01:47.524]                             if (is.null(name)) 
[11:01:47.524]                               next
[11:01:47.524]                             if (!grepl(pattern, name)) 
[11:01:47.524]                               next
[11:01:47.524]                             invokeRestart(restart)
[11:01:47.524]                             muffled <- TRUE
[11:01:47.524]                             break
[11:01:47.524]                           }
[11:01:47.524]                         }
[11:01:47.524]                       }
[11:01:47.524]                       invisible(muffled)
[11:01:47.524]                     }
[11:01:47.524]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.524]                   }
[11:01:47.524]                 }
[11:01:47.524]             }
[11:01:47.524]         }))
[11:01:47.524]     }, error = function(ex) {
[11:01:47.524]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.524]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.524]                 ...future.rng), started = ...future.startTime, 
[11:01:47.524]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.524]             version = "1.8"), class = "FutureResult")
[11:01:47.524]     }, finally = {
[11:01:47.524]         if (!identical(...future.workdir, getwd())) 
[11:01:47.524]             setwd(...future.workdir)
[11:01:47.524]         {
[11:01:47.524]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.524]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.524]             }
[11:01:47.524]             base::options(...future.oldOptions)
[11:01:47.524]             if (.Platform$OS.type == "windows") {
[11:01:47.524]                 old_names <- names(...future.oldEnvVars)
[11:01:47.524]                 envs <- base::Sys.getenv()
[11:01:47.524]                 names <- names(envs)
[11:01:47.524]                 common <- intersect(names, old_names)
[11:01:47.524]                 added <- setdiff(names, old_names)
[11:01:47.524]                 removed <- setdiff(old_names, names)
[11:01:47.524]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.524]                   envs[common]]
[11:01:47.524]                 NAMES <- toupper(changed)
[11:01:47.524]                 args <- list()
[11:01:47.524]                 for (kk in seq_along(NAMES)) {
[11:01:47.524]                   name <- changed[[kk]]
[11:01:47.524]                   NAME <- NAMES[[kk]]
[11:01:47.524]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.524]                     next
[11:01:47.524]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.524]                 }
[11:01:47.524]                 NAMES <- toupper(added)
[11:01:47.524]                 for (kk in seq_along(NAMES)) {
[11:01:47.524]                   name <- added[[kk]]
[11:01:47.524]                   NAME <- NAMES[[kk]]
[11:01:47.524]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.524]                     next
[11:01:47.524]                   args[[name]] <- ""
[11:01:47.524]                 }
[11:01:47.524]                 NAMES <- toupper(removed)
[11:01:47.524]                 for (kk in seq_along(NAMES)) {
[11:01:47.524]                   name <- removed[[kk]]
[11:01:47.524]                   NAME <- NAMES[[kk]]
[11:01:47.524]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.524]                     next
[11:01:47.524]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.524]                 }
[11:01:47.524]                 if (length(args) > 0) 
[11:01:47.524]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.524]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.524]             }
[11:01:47.524]             else {
[11:01:47.524]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.524]             }
[11:01:47.524]             {
[11:01:47.524]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.524]                   0L) {
[11:01:47.524]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.524]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.524]                   base::options(opts)
[11:01:47.524]                 }
[11:01:47.524]                 {
[11:01:47.524]                   {
[11:01:47.524]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.524]                     NULL
[11:01:47.524]                   }
[11:01:47.524]                   options(future.plan = NULL)
[11:01:47.524]                   if (is.na(NA_character_)) 
[11:01:47.524]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.524]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.524]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.524]                     .init = FALSE)
[11:01:47.524]                 }
[11:01:47.524]             }
[11:01:47.524]         }
[11:01:47.524]     })
[11:01:47.524]     if (TRUE) {
[11:01:47.524]         base::sink(type = "output", split = FALSE)
[11:01:47.524]         if (TRUE) {
[11:01:47.524]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.524]         }
[11:01:47.524]         else {
[11:01:47.524]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.524]         }
[11:01:47.524]         base::close(...future.stdout)
[11:01:47.524]         ...future.stdout <- NULL
[11:01:47.524]     }
[11:01:47.524]     ...future.result$conditions <- ...future.conditions
[11:01:47.524]     ...future.result$finished <- base::Sys.time()
[11:01:47.524]     ...future.result
[11:01:47.524] }
[11:01:47.526] assign_globals() ...
[11:01:47.526] List of 1
[11:01:47.526]  $ x: list()
[11:01:47.526]  - attr(*, "where")=List of 1
[11:01:47.526]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.526]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.526]  - attr(*, "resolved")= logi TRUE
[11:01:47.526]  - attr(*, "total_size")= num 31
[11:01:47.526]  - attr(*, "already-done")= logi TRUE
[11:01:47.528] - copied ‘x’ to environment
[11:01:47.529] assign_globals() ... done
[11:01:47.529] requestCore(): workers = 2
[11:01:47.531] MulticoreFuture started
[11:01:47.532] - Launch lazy future ... done
[11:01:47.532] plan(): Setting new future strategy stack:
[11:01:47.532] run() for ‘MulticoreFuture’ ... done
[11:01:47.532] List of future strategies:
[11:01:47.532] 1. sequential:
[11:01:47.532]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.532]    - tweaked: FALSE
[11:01:47.532]    - call: NULL
[11:01:47.533] result() for MulticoreFuture ...
[11:01:47.533] plan(): nbrOfWorkers() = 1
[11:01:47.535] plan(): Setting new future strategy stack:
[11:01:47.535] List of future strategies:
[11:01:47.535] 1. multicore:
[11:01:47.535]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.535]    - tweaked: FALSE
[11:01:47.535]    - call: plan(strategy)
[11:01:47.538] plan(): nbrOfWorkers() = 2
[11:01:47.543] result() for MulticoreFuture ...
[11:01:47.543] result() for MulticoreFuture ... done
[11:01:47.543] result() for MulticoreFuture ... done
[11:01:47.543] result() for MulticoreFuture ...
[11:01:47.543] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.544] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.544] Searching for globals...
[11:01:47.546] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.547] Searching for globals ... DONE
[11:01:47.547] Resolving globals: TRUE
[11:01:47.547] Resolving any globals that are futures ...
[11:01:47.547] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.547] Resolving any globals that are futures ... DONE
[11:01:47.548] Resolving futures part of globals (recursively) ...
[11:01:47.548] resolve() on list ...
[11:01:47.548]  recursive: 99
[11:01:47.548]  length: 1
[11:01:47.548]  elements: ‘x’
[11:01:47.548]  length: 0 (resolved future 1)
[11:01:47.548] resolve() on list ... DONE
[11:01:47.549] - globals: [1] ‘x’
[11:01:47.549] Resolving futures part of globals (recursively) ... DONE
[11:01:47.549] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.549] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.549] - globals: [1] ‘x’
[11:01:47.550] 
[11:01:47.550] getGlobalsAndPackages() ... DONE
[11:01:47.550] run() for ‘Future’ ...
[11:01:47.550] - state: ‘created’
[11:01:47.550] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.552] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.552] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.553]   - Field: ‘label’
[11:01:47.553]   - Field: ‘local’
[11:01:47.553]   - Field: ‘owner’
[11:01:47.553]   - Field: ‘envir’
[11:01:47.553]   - Field: ‘workers’
[11:01:47.553]   - Field: ‘packages’
[11:01:47.553]   - Field: ‘gc’
[11:01:47.553]   - Field: ‘job’
[11:01:47.553]   - Field: ‘conditions’
[11:01:47.553]   - Field: ‘expr’
[11:01:47.554]   - Field: ‘uuid’
[11:01:47.554]   - Field: ‘seed’
[11:01:47.554]   - Field: ‘version’
[11:01:47.554]   - Field: ‘result’
[11:01:47.554]   - Field: ‘asynchronous’
[11:01:47.554]   - Field: ‘calls’
[11:01:47.554]   - Field: ‘globals’
[11:01:47.554]   - Field: ‘stdout’
[11:01:47.554]   - Field: ‘earlySignal’
[11:01:47.554]   - Field: ‘lazy’
[11:01:47.555]   - Field: ‘state’
[11:01:47.555] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.555] - Launch lazy future ...
[11:01:47.555] Packages needed by the future expression (n = 0): <none>
[11:01:47.555] Packages needed by future strategies (n = 0): <none>
[11:01:47.556] {
[11:01:47.556]     {
[11:01:47.556]         {
[11:01:47.556]             ...future.startTime <- base::Sys.time()
[11:01:47.556]             {
[11:01:47.556]                 {
[11:01:47.556]                   {
[11:01:47.556]                     {
[11:01:47.556]                       base::local({
[11:01:47.556]                         has_future <- base::requireNamespace("future", 
[11:01:47.556]                           quietly = TRUE)
[11:01:47.556]                         if (has_future) {
[11:01:47.556]                           ns <- base::getNamespace("future")
[11:01:47.556]                           version <- ns[[".package"]][["version"]]
[11:01:47.556]                           if (is.null(version)) 
[11:01:47.556]                             version <- utils::packageVersion("future")
[11:01:47.556]                         }
[11:01:47.556]                         else {
[11:01:47.556]                           version <- NULL
[11:01:47.556]                         }
[11:01:47.556]                         if (!has_future || version < "1.8.0") {
[11:01:47.556]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.556]                             "", base::R.version$version.string), 
[11:01:47.556]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.556]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.556]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.556]                               "release", "version")], collapse = " "), 
[11:01:47.556]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.556]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.556]                             info)
[11:01:47.556]                           info <- base::paste(info, collapse = "; ")
[11:01:47.556]                           if (!has_future) {
[11:01:47.556]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.556]                               info)
[11:01:47.556]                           }
[11:01:47.556]                           else {
[11:01:47.556]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.556]                               info, version)
[11:01:47.556]                           }
[11:01:47.556]                           base::stop(msg)
[11:01:47.556]                         }
[11:01:47.556]                       })
[11:01:47.556]                     }
[11:01:47.556]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.556]                     base::options(mc.cores = 1L)
[11:01:47.556]                   }
[11:01:47.556]                   ...future.strategy.old <- future::plan("list")
[11:01:47.556]                   options(future.plan = NULL)
[11:01:47.556]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.556]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.556]                 }
[11:01:47.556]                 ...future.workdir <- getwd()
[11:01:47.556]             }
[11:01:47.556]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.556]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.556]         }
[11:01:47.556]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.556]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.556]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.556]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.556]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.556]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.556]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.556]             base::names(...future.oldOptions))
[11:01:47.556]     }
[11:01:47.556]     if (FALSE) {
[11:01:47.556]     }
[11:01:47.556]     else {
[11:01:47.556]         if (TRUE) {
[11:01:47.556]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.556]                 open = "w")
[11:01:47.556]         }
[11:01:47.556]         else {
[11:01:47.556]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.556]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.556]         }
[11:01:47.556]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.556]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.556]             base::sink(type = "output", split = FALSE)
[11:01:47.556]             base::close(...future.stdout)
[11:01:47.556]         }, add = TRUE)
[11:01:47.556]     }
[11:01:47.556]     ...future.frame <- base::sys.nframe()
[11:01:47.556]     ...future.conditions <- base::list()
[11:01:47.556]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.556]     if (FALSE) {
[11:01:47.556]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.556]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.556]     }
[11:01:47.556]     ...future.result <- base::tryCatch({
[11:01:47.556]         base::withCallingHandlers({
[11:01:47.556]             ...future.value <- base::withVisible(base::local({
[11:01:47.556]                 withCallingHandlers({
[11:01:47.556]                   {
[11:01:47.556]                     x$a <- 1
[11:01:47.556]                     x
[11:01:47.556]                   }
[11:01:47.556]                 }, immediateCondition = function(cond) {
[11:01:47.556]                   save_rds <- function (object, pathname, ...) 
[11:01:47.556]                   {
[11:01:47.556]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.556]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.556]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.556]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.556]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.556]                         fi_tmp[["mtime"]])
[11:01:47.556]                     }
[11:01:47.556]                     tryCatch({
[11:01:47.556]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.556]                     }, error = function(ex) {
[11:01:47.556]                       msg <- conditionMessage(ex)
[11:01:47.556]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.556]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.556]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.556]                         fi_tmp[["mtime"]], msg)
[11:01:47.556]                       ex$message <- msg
[11:01:47.556]                       stop(ex)
[11:01:47.556]                     })
[11:01:47.556]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.556]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.556]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.556]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.556]                       fi <- file.info(pathname)
[11:01:47.556]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.556]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.556]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.556]                         fi[["size"]], fi[["mtime"]])
[11:01:47.556]                       stop(msg)
[11:01:47.556]                     }
[11:01:47.556]                     invisible(pathname)
[11:01:47.556]                   }
[11:01:47.556]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.556]                     rootPath = tempdir()) 
[11:01:47.556]                   {
[11:01:47.556]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.556]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.556]                       tmpdir = path, fileext = ".rds")
[11:01:47.556]                     save_rds(obj, file)
[11:01:47.556]                   }
[11:01:47.556]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.556]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.556]                   {
[11:01:47.556]                     inherits <- base::inherits
[11:01:47.556]                     invokeRestart <- base::invokeRestart
[11:01:47.556]                     is.null <- base::is.null
[11:01:47.556]                     muffled <- FALSE
[11:01:47.556]                     if (inherits(cond, "message")) {
[11:01:47.556]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.556]                       if (muffled) 
[11:01:47.556]                         invokeRestart("muffleMessage")
[11:01:47.556]                     }
[11:01:47.556]                     else if (inherits(cond, "warning")) {
[11:01:47.556]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.556]                       if (muffled) 
[11:01:47.556]                         invokeRestart("muffleWarning")
[11:01:47.556]                     }
[11:01:47.556]                     else if (inherits(cond, "condition")) {
[11:01:47.556]                       if (!is.null(pattern)) {
[11:01:47.556]                         computeRestarts <- base::computeRestarts
[11:01:47.556]                         grepl <- base::grepl
[11:01:47.556]                         restarts <- computeRestarts(cond)
[11:01:47.556]                         for (restart in restarts) {
[11:01:47.556]                           name <- restart$name
[11:01:47.556]                           if (is.null(name)) 
[11:01:47.556]                             next
[11:01:47.556]                           if (!grepl(pattern, name)) 
[11:01:47.556]                             next
[11:01:47.556]                           invokeRestart(restart)
[11:01:47.556]                           muffled <- TRUE
[11:01:47.556]                           break
[11:01:47.556]                         }
[11:01:47.556]                       }
[11:01:47.556]                     }
[11:01:47.556]                     invisible(muffled)
[11:01:47.556]                   }
[11:01:47.556]                   muffleCondition(cond)
[11:01:47.556]                 })
[11:01:47.556]             }))
[11:01:47.556]             future::FutureResult(value = ...future.value$value, 
[11:01:47.556]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.556]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.556]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.556]                     ...future.globalenv.names))
[11:01:47.556]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.556]         }, condition = base::local({
[11:01:47.556]             c <- base::c
[11:01:47.556]             inherits <- base::inherits
[11:01:47.556]             invokeRestart <- base::invokeRestart
[11:01:47.556]             length <- base::length
[11:01:47.556]             list <- base::list
[11:01:47.556]             seq.int <- base::seq.int
[11:01:47.556]             signalCondition <- base::signalCondition
[11:01:47.556]             sys.calls <- base::sys.calls
[11:01:47.556]             `[[` <- base::`[[`
[11:01:47.556]             `+` <- base::`+`
[11:01:47.556]             `<<-` <- base::`<<-`
[11:01:47.556]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.556]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.556]                   3L)]
[11:01:47.556]             }
[11:01:47.556]             function(cond) {
[11:01:47.556]                 is_error <- inherits(cond, "error")
[11:01:47.556]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.556]                   NULL)
[11:01:47.556]                 if (is_error) {
[11:01:47.556]                   sessionInformation <- function() {
[11:01:47.556]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.556]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.556]                       search = base::search(), system = base::Sys.info())
[11:01:47.556]                   }
[11:01:47.556]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.556]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.556]                     cond$call), session = sessionInformation(), 
[11:01:47.556]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.556]                   signalCondition(cond)
[11:01:47.556]                 }
[11:01:47.556]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.556]                 "immediateCondition"))) {
[11:01:47.556]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.556]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.556]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.556]                   if (TRUE && !signal) {
[11:01:47.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.556]                     {
[11:01:47.556]                       inherits <- base::inherits
[11:01:47.556]                       invokeRestart <- base::invokeRestart
[11:01:47.556]                       is.null <- base::is.null
[11:01:47.556]                       muffled <- FALSE
[11:01:47.556]                       if (inherits(cond, "message")) {
[11:01:47.556]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.556]                         if (muffled) 
[11:01:47.556]                           invokeRestart("muffleMessage")
[11:01:47.556]                       }
[11:01:47.556]                       else if (inherits(cond, "warning")) {
[11:01:47.556]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.556]                         if (muffled) 
[11:01:47.556]                           invokeRestart("muffleWarning")
[11:01:47.556]                       }
[11:01:47.556]                       else if (inherits(cond, "condition")) {
[11:01:47.556]                         if (!is.null(pattern)) {
[11:01:47.556]                           computeRestarts <- base::computeRestarts
[11:01:47.556]                           grepl <- base::grepl
[11:01:47.556]                           restarts <- computeRestarts(cond)
[11:01:47.556]                           for (restart in restarts) {
[11:01:47.556]                             name <- restart$name
[11:01:47.556]                             if (is.null(name)) 
[11:01:47.556]                               next
[11:01:47.556]                             if (!grepl(pattern, name)) 
[11:01:47.556]                               next
[11:01:47.556]                             invokeRestart(restart)
[11:01:47.556]                             muffled <- TRUE
[11:01:47.556]                             break
[11:01:47.556]                           }
[11:01:47.556]                         }
[11:01:47.556]                       }
[11:01:47.556]                       invisible(muffled)
[11:01:47.556]                     }
[11:01:47.556]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.556]                   }
[11:01:47.556]                 }
[11:01:47.556]                 else {
[11:01:47.556]                   if (TRUE) {
[11:01:47.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.556]                     {
[11:01:47.556]                       inherits <- base::inherits
[11:01:47.556]                       invokeRestart <- base::invokeRestart
[11:01:47.556]                       is.null <- base::is.null
[11:01:47.556]                       muffled <- FALSE
[11:01:47.556]                       if (inherits(cond, "message")) {
[11:01:47.556]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.556]                         if (muffled) 
[11:01:47.556]                           invokeRestart("muffleMessage")
[11:01:47.556]                       }
[11:01:47.556]                       else if (inherits(cond, "warning")) {
[11:01:47.556]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.556]                         if (muffled) 
[11:01:47.556]                           invokeRestart("muffleWarning")
[11:01:47.556]                       }
[11:01:47.556]                       else if (inherits(cond, "condition")) {
[11:01:47.556]                         if (!is.null(pattern)) {
[11:01:47.556]                           computeRestarts <- base::computeRestarts
[11:01:47.556]                           grepl <- base::grepl
[11:01:47.556]                           restarts <- computeRestarts(cond)
[11:01:47.556]                           for (restart in restarts) {
[11:01:47.556]                             name <- restart$name
[11:01:47.556]                             if (is.null(name)) 
[11:01:47.556]                               next
[11:01:47.556]                             if (!grepl(pattern, name)) 
[11:01:47.556]                               next
[11:01:47.556]                             invokeRestart(restart)
[11:01:47.556]                             muffled <- TRUE
[11:01:47.556]                             break
[11:01:47.556]                           }
[11:01:47.556]                         }
[11:01:47.556]                       }
[11:01:47.556]                       invisible(muffled)
[11:01:47.556]                     }
[11:01:47.556]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.556]                   }
[11:01:47.556]                 }
[11:01:47.556]             }
[11:01:47.556]         }))
[11:01:47.556]     }, error = function(ex) {
[11:01:47.556]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.556]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.556]                 ...future.rng), started = ...future.startTime, 
[11:01:47.556]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.556]             version = "1.8"), class = "FutureResult")
[11:01:47.556]     }, finally = {
[11:01:47.556]         if (!identical(...future.workdir, getwd())) 
[11:01:47.556]             setwd(...future.workdir)
[11:01:47.556]         {
[11:01:47.556]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.556]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.556]             }
[11:01:47.556]             base::options(...future.oldOptions)
[11:01:47.556]             if (.Platform$OS.type == "windows") {
[11:01:47.556]                 old_names <- names(...future.oldEnvVars)
[11:01:47.556]                 envs <- base::Sys.getenv()
[11:01:47.556]                 names <- names(envs)
[11:01:47.556]                 common <- intersect(names, old_names)
[11:01:47.556]                 added <- setdiff(names, old_names)
[11:01:47.556]                 removed <- setdiff(old_names, names)
[11:01:47.556]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.556]                   envs[common]]
[11:01:47.556]                 NAMES <- toupper(changed)
[11:01:47.556]                 args <- list()
[11:01:47.556]                 for (kk in seq_along(NAMES)) {
[11:01:47.556]                   name <- changed[[kk]]
[11:01:47.556]                   NAME <- NAMES[[kk]]
[11:01:47.556]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.556]                     next
[11:01:47.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.556]                 }
[11:01:47.556]                 NAMES <- toupper(added)
[11:01:47.556]                 for (kk in seq_along(NAMES)) {
[11:01:47.556]                   name <- added[[kk]]
[11:01:47.556]                   NAME <- NAMES[[kk]]
[11:01:47.556]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.556]                     next
[11:01:47.556]                   args[[name]] <- ""
[11:01:47.556]                 }
[11:01:47.556]                 NAMES <- toupper(removed)
[11:01:47.556]                 for (kk in seq_along(NAMES)) {
[11:01:47.556]                   name <- removed[[kk]]
[11:01:47.556]                   NAME <- NAMES[[kk]]
[11:01:47.556]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.556]                     next
[11:01:47.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.556]                 }
[11:01:47.556]                 if (length(args) > 0) 
[11:01:47.556]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.556]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.556]             }
[11:01:47.556]             else {
[11:01:47.556]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.556]             }
[11:01:47.556]             {
[11:01:47.556]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.556]                   0L) {
[11:01:47.556]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.556]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.556]                   base::options(opts)
[11:01:47.556]                 }
[11:01:47.556]                 {
[11:01:47.556]                   {
[11:01:47.556]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.556]                     NULL
[11:01:47.556]                   }
[11:01:47.556]                   options(future.plan = NULL)
[11:01:47.556]                   if (is.na(NA_character_)) 
[11:01:47.556]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.556]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.556]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.556]                     .init = FALSE)
[11:01:47.556]                 }
[11:01:47.556]             }
[11:01:47.556]         }
[11:01:47.556]     })
[11:01:47.556]     if (TRUE) {
[11:01:47.556]         base::sink(type = "output", split = FALSE)
[11:01:47.556]         if (TRUE) {
[11:01:47.556]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.556]         }
[11:01:47.556]         else {
[11:01:47.556]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.556]         }
[11:01:47.556]         base::close(...future.stdout)
[11:01:47.556]         ...future.stdout <- NULL
[11:01:47.556]     }
[11:01:47.556]     ...future.result$conditions <- ...future.conditions
[11:01:47.556]     ...future.result$finished <- base::Sys.time()
[11:01:47.556]     ...future.result
[11:01:47.556] }
[11:01:47.558] assign_globals() ...
[11:01:47.558] List of 1
[11:01:47.558]  $ x: list()
[11:01:47.558]  - attr(*, "where")=List of 1
[11:01:47.558]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.558]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.558]  - attr(*, "resolved")= logi TRUE
[11:01:47.558]  - attr(*, "total_size")= num 31
[11:01:47.558]  - attr(*, "already-done")= logi TRUE
[11:01:47.564] - copied ‘x’ to environment
[11:01:47.564] assign_globals() ... done
[11:01:47.564] requestCore(): workers = 2
[11:01:47.566] MulticoreFuture started
[11:01:47.566] - Launch lazy future ... done
[11:01:47.566] run() for ‘MulticoreFuture’ ... done
[11:01:47.566] result() for MulticoreFuture ...
[11:01:47.567] plan(): Setting new future strategy stack:
[11:01:47.567] List of future strategies:
[11:01:47.567] 1. sequential:
[11:01:47.567]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.567]    - tweaked: FALSE
[11:01:47.567]    - call: NULL
[11:01:47.568] plan(): nbrOfWorkers() = 1
[11:01:47.570] plan(): Setting new future strategy stack:
[11:01:47.570] List of future strategies:
[11:01:47.570] 1. multicore:
[11:01:47.570]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.570]    - tweaked: FALSE
[11:01:47.570]    - call: plan(strategy)
[11:01:47.573] plan(): nbrOfWorkers() = 2
[11:01:47.574] result() for MulticoreFuture ...
[11:01:47.574] result() for MulticoreFuture ... done
[11:01:47.574] result() for MulticoreFuture ... done
[11:01:47.574] result() for MulticoreFuture ...
[11:01:47.575] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.575] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.576] Searching for globals...
[11:01:47.578] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.578] Searching for globals ... DONE
[11:01:47.578] Resolving globals: TRUE
[11:01:47.578] Resolving any globals that are futures ...
[11:01:47.579] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.579] Resolving any globals that are futures ... DONE
[11:01:47.579] Resolving futures part of globals (recursively) ...
[11:01:47.580] resolve() on list ...
[11:01:47.580]  recursive: 99
[11:01:47.580]  length: 1
[11:01:47.580]  elements: ‘x’
[11:01:47.580]  length: 0 (resolved future 1)
[11:01:47.580] resolve() on list ... DONE
[11:01:47.580] - globals: [1] ‘x’
[11:01:47.580] Resolving futures part of globals (recursively) ... DONE
[11:01:47.581] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.581] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.581] - globals: [1] ‘x’
[11:01:47.581] 
[11:01:47.581] getGlobalsAndPackages() ... DONE
[11:01:47.582] run() for ‘Future’ ...
[11:01:47.582] - state: ‘created’
[11:01:47.582] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.584] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.584] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.584]   - Field: ‘label’
[11:01:47.584]   - Field: ‘local’
[11:01:47.584]   - Field: ‘owner’
[11:01:47.584]   - Field: ‘envir’
[11:01:47.585]   - Field: ‘workers’
[11:01:47.585]   - Field: ‘packages’
[11:01:47.585]   - Field: ‘gc’
[11:01:47.585]   - Field: ‘job’
[11:01:47.585]   - Field: ‘conditions’
[11:01:47.585]   - Field: ‘expr’
[11:01:47.585]   - Field: ‘uuid’
[11:01:47.585]   - Field: ‘seed’
[11:01:47.585]   - Field: ‘version’
[11:01:47.585]   - Field: ‘result’
[11:01:47.586]   - Field: ‘asynchronous’
[11:01:47.586]   - Field: ‘calls’
[11:01:47.586]   - Field: ‘globals’
[11:01:47.586]   - Field: ‘stdout’
[11:01:47.586]   - Field: ‘earlySignal’
[11:01:47.586]   - Field: ‘lazy’
[11:01:47.586]   - Field: ‘state’
[11:01:47.586] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.586] - Launch lazy future ...
[11:01:47.587] Packages needed by the future expression (n = 0): <none>
[11:01:47.587] Packages needed by future strategies (n = 0): <none>
[11:01:47.587] {
[11:01:47.587]     {
[11:01:47.587]         {
[11:01:47.587]             ...future.startTime <- base::Sys.time()
[11:01:47.587]             {
[11:01:47.587]                 {
[11:01:47.587]                   {
[11:01:47.587]                     {
[11:01:47.587]                       base::local({
[11:01:47.587]                         has_future <- base::requireNamespace("future", 
[11:01:47.587]                           quietly = TRUE)
[11:01:47.587]                         if (has_future) {
[11:01:47.587]                           ns <- base::getNamespace("future")
[11:01:47.587]                           version <- ns[[".package"]][["version"]]
[11:01:47.587]                           if (is.null(version)) 
[11:01:47.587]                             version <- utils::packageVersion("future")
[11:01:47.587]                         }
[11:01:47.587]                         else {
[11:01:47.587]                           version <- NULL
[11:01:47.587]                         }
[11:01:47.587]                         if (!has_future || version < "1.8.0") {
[11:01:47.587]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.587]                             "", base::R.version$version.string), 
[11:01:47.587]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.587]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.587]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.587]                               "release", "version")], collapse = " "), 
[11:01:47.587]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.587]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.587]                             info)
[11:01:47.587]                           info <- base::paste(info, collapse = "; ")
[11:01:47.587]                           if (!has_future) {
[11:01:47.587]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.587]                               info)
[11:01:47.587]                           }
[11:01:47.587]                           else {
[11:01:47.587]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.587]                               info, version)
[11:01:47.587]                           }
[11:01:47.587]                           base::stop(msg)
[11:01:47.587]                         }
[11:01:47.587]                       })
[11:01:47.587]                     }
[11:01:47.587]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.587]                     base::options(mc.cores = 1L)
[11:01:47.587]                   }
[11:01:47.587]                   ...future.strategy.old <- future::plan("list")
[11:01:47.587]                   options(future.plan = NULL)
[11:01:47.587]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.587]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.587]                 }
[11:01:47.587]                 ...future.workdir <- getwd()
[11:01:47.587]             }
[11:01:47.587]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.587]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.587]         }
[11:01:47.587]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.587]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.587]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.587]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.587]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.587]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.587]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.587]             base::names(...future.oldOptions))
[11:01:47.587]     }
[11:01:47.587]     if (FALSE) {
[11:01:47.587]     }
[11:01:47.587]     else {
[11:01:47.587]         if (TRUE) {
[11:01:47.587]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.587]                 open = "w")
[11:01:47.587]         }
[11:01:47.587]         else {
[11:01:47.587]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.587]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.587]         }
[11:01:47.587]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.587]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.587]             base::sink(type = "output", split = FALSE)
[11:01:47.587]             base::close(...future.stdout)
[11:01:47.587]         }, add = TRUE)
[11:01:47.587]     }
[11:01:47.587]     ...future.frame <- base::sys.nframe()
[11:01:47.587]     ...future.conditions <- base::list()
[11:01:47.587]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.587]     if (FALSE) {
[11:01:47.587]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.587]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.587]     }
[11:01:47.587]     ...future.result <- base::tryCatch({
[11:01:47.587]         base::withCallingHandlers({
[11:01:47.587]             ...future.value <- base::withVisible(base::local({
[11:01:47.587]                 withCallingHandlers({
[11:01:47.587]                   {
[11:01:47.587]                     x$a <- 1
[11:01:47.587]                     x
[11:01:47.587]                   }
[11:01:47.587]                 }, immediateCondition = function(cond) {
[11:01:47.587]                   save_rds <- function (object, pathname, ...) 
[11:01:47.587]                   {
[11:01:47.587]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.587]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.587]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.587]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.587]                         fi_tmp[["mtime"]])
[11:01:47.587]                     }
[11:01:47.587]                     tryCatch({
[11:01:47.587]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.587]                     }, error = function(ex) {
[11:01:47.587]                       msg <- conditionMessage(ex)
[11:01:47.587]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.587]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.587]                         fi_tmp[["mtime"]], msg)
[11:01:47.587]                       ex$message <- msg
[11:01:47.587]                       stop(ex)
[11:01:47.587]                     })
[11:01:47.587]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.587]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.587]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.587]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.587]                       fi <- file.info(pathname)
[11:01:47.587]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.587]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.587]                         fi[["size"]], fi[["mtime"]])
[11:01:47.587]                       stop(msg)
[11:01:47.587]                     }
[11:01:47.587]                     invisible(pathname)
[11:01:47.587]                   }
[11:01:47.587]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.587]                     rootPath = tempdir()) 
[11:01:47.587]                   {
[11:01:47.587]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.587]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.587]                       tmpdir = path, fileext = ".rds")
[11:01:47.587]                     save_rds(obj, file)
[11:01:47.587]                   }
[11:01:47.587]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.587]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.587]                   {
[11:01:47.587]                     inherits <- base::inherits
[11:01:47.587]                     invokeRestart <- base::invokeRestart
[11:01:47.587]                     is.null <- base::is.null
[11:01:47.587]                     muffled <- FALSE
[11:01:47.587]                     if (inherits(cond, "message")) {
[11:01:47.587]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.587]                       if (muffled) 
[11:01:47.587]                         invokeRestart("muffleMessage")
[11:01:47.587]                     }
[11:01:47.587]                     else if (inherits(cond, "warning")) {
[11:01:47.587]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.587]                       if (muffled) 
[11:01:47.587]                         invokeRestart("muffleWarning")
[11:01:47.587]                     }
[11:01:47.587]                     else if (inherits(cond, "condition")) {
[11:01:47.587]                       if (!is.null(pattern)) {
[11:01:47.587]                         computeRestarts <- base::computeRestarts
[11:01:47.587]                         grepl <- base::grepl
[11:01:47.587]                         restarts <- computeRestarts(cond)
[11:01:47.587]                         for (restart in restarts) {
[11:01:47.587]                           name <- restart$name
[11:01:47.587]                           if (is.null(name)) 
[11:01:47.587]                             next
[11:01:47.587]                           if (!grepl(pattern, name)) 
[11:01:47.587]                             next
[11:01:47.587]                           invokeRestart(restart)
[11:01:47.587]                           muffled <- TRUE
[11:01:47.587]                           break
[11:01:47.587]                         }
[11:01:47.587]                       }
[11:01:47.587]                     }
[11:01:47.587]                     invisible(muffled)
[11:01:47.587]                   }
[11:01:47.587]                   muffleCondition(cond)
[11:01:47.587]                 })
[11:01:47.587]             }))
[11:01:47.587]             future::FutureResult(value = ...future.value$value, 
[11:01:47.587]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.587]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.587]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.587]                     ...future.globalenv.names))
[11:01:47.587]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.587]         }, condition = base::local({
[11:01:47.587]             c <- base::c
[11:01:47.587]             inherits <- base::inherits
[11:01:47.587]             invokeRestart <- base::invokeRestart
[11:01:47.587]             length <- base::length
[11:01:47.587]             list <- base::list
[11:01:47.587]             seq.int <- base::seq.int
[11:01:47.587]             signalCondition <- base::signalCondition
[11:01:47.587]             sys.calls <- base::sys.calls
[11:01:47.587]             `[[` <- base::`[[`
[11:01:47.587]             `+` <- base::`+`
[11:01:47.587]             `<<-` <- base::`<<-`
[11:01:47.587]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.587]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.587]                   3L)]
[11:01:47.587]             }
[11:01:47.587]             function(cond) {
[11:01:47.587]                 is_error <- inherits(cond, "error")
[11:01:47.587]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.587]                   NULL)
[11:01:47.587]                 if (is_error) {
[11:01:47.587]                   sessionInformation <- function() {
[11:01:47.587]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.587]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.587]                       search = base::search(), system = base::Sys.info())
[11:01:47.587]                   }
[11:01:47.587]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.587]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.587]                     cond$call), session = sessionInformation(), 
[11:01:47.587]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.587]                   signalCondition(cond)
[11:01:47.587]                 }
[11:01:47.587]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.587]                 "immediateCondition"))) {
[11:01:47.587]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.587]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.587]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.587]                   if (TRUE && !signal) {
[11:01:47.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.587]                     {
[11:01:47.587]                       inherits <- base::inherits
[11:01:47.587]                       invokeRestart <- base::invokeRestart
[11:01:47.587]                       is.null <- base::is.null
[11:01:47.587]                       muffled <- FALSE
[11:01:47.587]                       if (inherits(cond, "message")) {
[11:01:47.587]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.587]                         if (muffled) 
[11:01:47.587]                           invokeRestart("muffleMessage")
[11:01:47.587]                       }
[11:01:47.587]                       else if (inherits(cond, "warning")) {
[11:01:47.587]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.587]                         if (muffled) 
[11:01:47.587]                           invokeRestart("muffleWarning")
[11:01:47.587]                       }
[11:01:47.587]                       else if (inherits(cond, "condition")) {
[11:01:47.587]                         if (!is.null(pattern)) {
[11:01:47.587]                           computeRestarts <- base::computeRestarts
[11:01:47.587]                           grepl <- base::grepl
[11:01:47.587]                           restarts <- computeRestarts(cond)
[11:01:47.587]                           for (restart in restarts) {
[11:01:47.587]                             name <- restart$name
[11:01:47.587]                             if (is.null(name)) 
[11:01:47.587]                               next
[11:01:47.587]                             if (!grepl(pattern, name)) 
[11:01:47.587]                               next
[11:01:47.587]                             invokeRestart(restart)
[11:01:47.587]                             muffled <- TRUE
[11:01:47.587]                             break
[11:01:47.587]                           }
[11:01:47.587]                         }
[11:01:47.587]                       }
[11:01:47.587]                       invisible(muffled)
[11:01:47.587]                     }
[11:01:47.587]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.587]                   }
[11:01:47.587]                 }
[11:01:47.587]                 else {
[11:01:47.587]                   if (TRUE) {
[11:01:47.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.587]                     {
[11:01:47.587]                       inherits <- base::inherits
[11:01:47.587]                       invokeRestart <- base::invokeRestart
[11:01:47.587]                       is.null <- base::is.null
[11:01:47.587]                       muffled <- FALSE
[11:01:47.587]                       if (inherits(cond, "message")) {
[11:01:47.587]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.587]                         if (muffled) 
[11:01:47.587]                           invokeRestart("muffleMessage")
[11:01:47.587]                       }
[11:01:47.587]                       else if (inherits(cond, "warning")) {
[11:01:47.587]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.587]                         if (muffled) 
[11:01:47.587]                           invokeRestart("muffleWarning")
[11:01:47.587]                       }
[11:01:47.587]                       else if (inherits(cond, "condition")) {
[11:01:47.587]                         if (!is.null(pattern)) {
[11:01:47.587]                           computeRestarts <- base::computeRestarts
[11:01:47.587]                           grepl <- base::grepl
[11:01:47.587]                           restarts <- computeRestarts(cond)
[11:01:47.587]                           for (restart in restarts) {
[11:01:47.587]                             name <- restart$name
[11:01:47.587]                             if (is.null(name)) 
[11:01:47.587]                               next
[11:01:47.587]                             if (!grepl(pattern, name)) 
[11:01:47.587]                               next
[11:01:47.587]                             invokeRestart(restart)
[11:01:47.587]                             muffled <- TRUE
[11:01:47.587]                             break
[11:01:47.587]                           }
[11:01:47.587]                         }
[11:01:47.587]                       }
[11:01:47.587]                       invisible(muffled)
[11:01:47.587]                     }
[11:01:47.587]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.587]                   }
[11:01:47.587]                 }
[11:01:47.587]             }
[11:01:47.587]         }))
[11:01:47.587]     }, error = function(ex) {
[11:01:47.587]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.587]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.587]                 ...future.rng), started = ...future.startTime, 
[11:01:47.587]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.587]             version = "1.8"), class = "FutureResult")
[11:01:47.587]     }, finally = {
[11:01:47.587]         if (!identical(...future.workdir, getwd())) 
[11:01:47.587]             setwd(...future.workdir)
[11:01:47.587]         {
[11:01:47.587]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.587]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.587]             }
[11:01:47.587]             base::options(...future.oldOptions)
[11:01:47.587]             if (.Platform$OS.type == "windows") {
[11:01:47.587]                 old_names <- names(...future.oldEnvVars)
[11:01:47.587]                 envs <- base::Sys.getenv()
[11:01:47.587]                 names <- names(envs)
[11:01:47.587]                 common <- intersect(names, old_names)
[11:01:47.587]                 added <- setdiff(names, old_names)
[11:01:47.587]                 removed <- setdiff(old_names, names)
[11:01:47.587]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.587]                   envs[common]]
[11:01:47.587]                 NAMES <- toupper(changed)
[11:01:47.587]                 args <- list()
[11:01:47.587]                 for (kk in seq_along(NAMES)) {
[11:01:47.587]                   name <- changed[[kk]]
[11:01:47.587]                   NAME <- NAMES[[kk]]
[11:01:47.587]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.587]                     next
[11:01:47.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.587]                 }
[11:01:47.587]                 NAMES <- toupper(added)
[11:01:47.587]                 for (kk in seq_along(NAMES)) {
[11:01:47.587]                   name <- added[[kk]]
[11:01:47.587]                   NAME <- NAMES[[kk]]
[11:01:47.587]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.587]                     next
[11:01:47.587]                   args[[name]] <- ""
[11:01:47.587]                 }
[11:01:47.587]                 NAMES <- toupper(removed)
[11:01:47.587]                 for (kk in seq_along(NAMES)) {
[11:01:47.587]                   name <- removed[[kk]]
[11:01:47.587]                   NAME <- NAMES[[kk]]
[11:01:47.587]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.587]                     next
[11:01:47.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.587]                 }
[11:01:47.587]                 if (length(args) > 0) 
[11:01:47.587]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.587]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.587]             }
[11:01:47.587]             else {
[11:01:47.587]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.587]             }
[11:01:47.587]             {
[11:01:47.587]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.587]                   0L) {
[11:01:47.587]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.587]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.587]                   base::options(opts)
[11:01:47.587]                 }
[11:01:47.587]                 {
[11:01:47.587]                   {
[11:01:47.587]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.587]                     NULL
[11:01:47.587]                   }
[11:01:47.587]                   options(future.plan = NULL)
[11:01:47.587]                   if (is.na(NA_character_)) 
[11:01:47.587]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.587]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.587]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.587]                     .init = FALSE)
[11:01:47.587]                 }
[11:01:47.587]             }
[11:01:47.587]         }
[11:01:47.587]     })
[11:01:47.587]     if (TRUE) {
[11:01:47.587]         base::sink(type = "output", split = FALSE)
[11:01:47.587]         if (TRUE) {
[11:01:47.587]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.587]         }
[11:01:47.587]         else {
[11:01:47.587]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.587]         }
[11:01:47.587]         base::close(...future.stdout)
[11:01:47.587]         ...future.stdout <- NULL
[11:01:47.587]     }
[11:01:47.587]     ...future.result$conditions <- ...future.conditions
[11:01:47.587]     ...future.result$finished <- base::Sys.time()
[11:01:47.587]     ...future.result
[11:01:47.587] }
[11:01:47.590] assign_globals() ...
[11:01:47.590] List of 1
[11:01:47.590]  $ x: list()
[11:01:47.590]  - attr(*, "where")=List of 1
[11:01:47.590]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.590]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.590]  - attr(*, "resolved")= logi TRUE
[11:01:47.590]  - attr(*, "total_size")= num 31
[11:01:47.590]  - attr(*, "already-done")= logi TRUE
[11:01:47.593] - copied ‘x’ to environment
[11:01:47.593] assign_globals() ... done
[11:01:47.593] requestCore(): workers = 2
[11:01:47.595] MulticoreFuture started
[11:01:47.595] - Launch lazy future ... done
[11:01:47.595] run() for ‘MulticoreFuture’ ... done
[11:01:47.596] result() for MulticoreFuture ...
[11:01:47.596] plan(): Setting new future strategy stack:
[11:01:47.596] List of future strategies:
[11:01:47.596] 1. sequential:
[11:01:47.596]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.596]    - tweaked: FALSE
[11:01:47.596]    - call: NULL
[11:01:47.597] plan(): nbrOfWorkers() = 1
[11:01:47.599] plan(): Setting new future strategy stack:
[11:01:47.599] List of future strategies:
[11:01:47.599] 1. multicore:
[11:01:47.599]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.599]    - tweaked: FALSE
[11:01:47.599]    - call: plan(strategy)
[11:01:47.602] plan(): nbrOfWorkers() = 2
[11:01:47.603] result() for MulticoreFuture ...
[11:01:47.603] result() for MulticoreFuture ... done
[11:01:47.603] result() for MulticoreFuture ... done
[11:01:47.603] result() for MulticoreFuture ...
[11:01:47.603] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.604] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.604] Searching for globals...
[11:01:47.607] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.607] Searching for globals ... DONE
[11:01:47.607] Resolving globals: TRUE
[11:01:47.607] Resolving any globals that are futures ...
[11:01:47.607] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:47.608] Resolving any globals that are futures ... DONE
[11:01:47.608] Resolving futures part of globals (recursively) ...
[11:01:47.608] resolve() on list ...
[11:01:47.608]  recursive: 99
[11:01:47.609]  length: 1
[11:01:47.609]  elements: ‘x’
[11:01:47.609]  length: 0 (resolved future 1)
[11:01:47.609] resolve() on list ... DONE
[11:01:47.611] - globals: [1] ‘x’
[11:01:47.611] Resolving futures part of globals (recursively) ... DONE
[11:01:47.611] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.612] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.612] - globals: [1] ‘x’
[11:01:47.612] 
[11:01:47.612] getGlobalsAndPackages() ... DONE
[11:01:47.613] run() for ‘Future’ ...
[11:01:47.613] - state: ‘created’
[11:01:47.613] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.615] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.615] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.615]   - Field: ‘label’
[11:01:47.615]   - Field: ‘local’
[11:01:47.616]   - Field: ‘owner’
[11:01:47.616]   - Field: ‘envir’
[11:01:47.616]   - Field: ‘workers’
[11:01:47.616]   - Field: ‘packages’
[11:01:47.616]   - Field: ‘gc’
[11:01:47.616]   - Field: ‘job’
[11:01:47.616]   - Field: ‘conditions’
[11:01:47.616]   - Field: ‘expr’
[11:01:47.616]   - Field: ‘uuid’
[11:01:47.617]   - Field: ‘seed’
[11:01:47.617]   - Field: ‘version’
[11:01:47.617]   - Field: ‘result’
[11:01:47.617]   - Field: ‘asynchronous’
[11:01:47.617]   - Field: ‘calls’
[11:01:47.617]   - Field: ‘globals’
[11:01:47.617]   - Field: ‘stdout’
[11:01:47.617]   - Field: ‘earlySignal’
[11:01:47.617]   - Field: ‘lazy’
[11:01:47.617]   - Field: ‘state’
[11:01:47.618] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.618] - Launch lazy future ...
[11:01:47.618] Packages needed by the future expression (n = 0): <none>
[11:01:47.618] Packages needed by future strategies (n = 0): <none>
[11:01:47.619] {
[11:01:47.619]     {
[11:01:47.619]         {
[11:01:47.619]             ...future.startTime <- base::Sys.time()
[11:01:47.619]             {
[11:01:47.619]                 {
[11:01:47.619]                   {
[11:01:47.619]                     {
[11:01:47.619]                       base::local({
[11:01:47.619]                         has_future <- base::requireNamespace("future", 
[11:01:47.619]                           quietly = TRUE)
[11:01:47.619]                         if (has_future) {
[11:01:47.619]                           ns <- base::getNamespace("future")
[11:01:47.619]                           version <- ns[[".package"]][["version"]]
[11:01:47.619]                           if (is.null(version)) 
[11:01:47.619]                             version <- utils::packageVersion("future")
[11:01:47.619]                         }
[11:01:47.619]                         else {
[11:01:47.619]                           version <- NULL
[11:01:47.619]                         }
[11:01:47.619]                         if (!has_future || version < "1.8.0") {
[11:01:47.619]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.619]                             "", base::R.version$version.string), 
[11:01:47.619]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.619]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.619]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.619]                               "release", "version")], collapse = " "), 
[11:01:47.619]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.619]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.619]                             info)
[11:01:47.619]                           info <- base::paste(info, collapse = "; ")
[11:01:47.619]                           if (!has_future) {
[11:01:47.619]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.619]                               info)
[11:01:47.619]                           }
[11:01:47.619]                           else {
[11:01:47.619]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.619]                               info, version)
[11:01:47.619]                           }
[11:01:47.619]                           base::stop(msg)
[11:01:47.619]                         }
[11:01:47.619]                       })
[11:01:47.619]                     }
[11:01:47.619]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.619]                     base::options(mc.cores = 1L)
[11:01:47.619]                   }
[11:01:47.619]                   ...future.strategy.old <- future::plan("list")
[11:01:47.619]                   options(future.plan = NULL)
[11:01:47.619]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.619]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.619]                 }
[11:01:47.619]                 ...future.workdir <- getwd()
[11:01:47.619]             }
[11:01:47.619]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.619]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.619]         }
[11:01:47.619]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.619]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.619]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.619]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.619]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.619]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.619]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.619]             base::names(...future.oldOptions))
[11:01:47.619]     }
[11:01:47.619]     if (FALSE) {
[11:01:47.619]     }
[11:01:47.619]     else {
[11:01:47.619]         if (TRUE) {
[11:01:47.619]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.619]                 open = "w")
[11:01:47.619]         }
[11:01:47.619]         else {
[11:01:47.619]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.619]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.619]         }
[11:01:47.619]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.619]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.619]             base::sink(type = "output", split = FALSE)
[11:01:47.619]             base::close(...future.stdout)
[11:01:47.619]         }, add = TRUE)
[11:01:47.619]     }
[11:01:47.619]     ...future.frame <- base::sys.nframe()
[11:01:47.619]     ...future.conditions <- base::list()
[11:01:47.619]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.619]     if (FALSE) {
[11:01:47.619]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.619]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.619]     }
[11:01:47.619]     ...future.result <- base::tryCatch({
[11:01:47.619]         base::withCallingHandlers({
[11:01:47.619]             ...future.value <- base::withVisible(base::local({
[11:01:47.619]                 withCallingHandlers({
[11:01:47.619]                   {
[11:01:47.619]                     x$a <- 1
[11:01:47.619]                     x
[11:01:47.619]                   }
[11:01:47.619]                 }, immediateCondition = function(cond) {
[11:01:47.619]                   save_rds <- function (object, pathname, ...) 
[11:01:47.619]                   {
[11:01:47.619]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.619]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.619]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.619]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.619]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.619]                         fi_tmp[["mtime"]])
[11:01:47.619]                     }
[11:01:47.619]                     tryCatch({
[11:01:47.619]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.619]                     }, error = function(ex) {
[11:01:47.619]                       msg <- conditionMessage(ex)
[11:01:47.619]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.619]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.619]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.619]                         fi_tmp[["mtime"]], msg)
[11:01:47.619]                       ex$message <- msg
[11:01:47.619]                       stop(ex)
[11:01:47.619]                     })
[11:01:47.619]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.619]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.619]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.619]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.619]                       fi <- file.info(pathname)
[11:01:47.619]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.619]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.619]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.619]                         fi[["size"]], fi[["mtime"]])
[11:01:47.619]                       stop(msg)
[11:01:47.619]                     }
[11:01:47.619]                     invisible(pathname)
[11:01:47.619]                   }
[11:01:47.619]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.619]                     rootPath = tempdir()) 
[11:01:47.619]                   {
[11:01:47.619]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.619]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.619]                       tmpdir = path, fileext = ".rds")
[11:01:47.619]                     save_rds(obj, file)
[11:01:47.619]                   }
[11:01:47.619]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.619]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.619]                   {
[11:01:47.619]                     inherits <- base::inherits
[11:01:47.619]                     invokeRestart <- base::invokeRestart
[11:01:47.619]                     is.null <- base::is.null
[11:01:47.619]                     muffled <- FALSE
[11:01:47.619]                     if (inherits(cond, "message")) {
[11:01:47.619]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.619]                       if (muffled) 
[11:01:47.619]                         invokeRestart("muffleMessage")
[11:01:47.619]                     }
[11:01:47.619]                     else if (inherits(cond, "warning")) {
[11:01:47.619]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.619]                       if (muffled) 
[11:01:47.619]                         invokeRestart("muffleWarning")
[11:01:47.619]                     }
[11:01:47.619]                     else if (inherits(cond, "condition")) {
[11:01:47.619]                       if (!is.null(pattern)) {
[11:01:47.619]                         computeRestarts <- base::computeRestarts
[11:01:47.619]                         grepl <- base::grepl
[11:01:47.619]                         restarts <- computeRestarts(cond)
[11:01:47.619]                         for (restart in restarts) {
[11:01:47.619]                           name <- restart$name
[11:01:47.619]                           if (is.null(name)) 
[11:01:47.619]                             next
[11:01:47.619]                           if (!grepl(pattern, name)) 
[11:01:47.619]                             next
[11:01:47.619]                           invokeRestart(restart)
[11:01:47.619]                           muffled <- TRUE
[11:01:47.619]                           break
[11:01:47.619]                         }
[11:01:47.619]                       }
[11:01:47.619]                     }
[11:01:47.619]                     invisible(muffled)
[11:01:47.619]                   }
[11:01:47.619]                   muffleCondition(cond)
[11:01:47.619]                 })
[11:01:47.619]             }))
[11:01:47.619]             future::FutureResult(value = ...future.value$value, 
[11:01:47.619]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.619]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.619]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.619]                     ...future.globalenv.names))
[11:01:47.619]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.619]         }, condition = base::local({
[11:01:47.619]             c <- base::c
[11:01:47.619]             inherits <- base::inherits
[11:01:47.619]             invokeRestart <- base::invokeRestart
[11:01:47.619]             length <- base::length
[11:01:47.619]             list <- base::list
[11:01:47.619]             seq.int <- base::seq.int
[11:01:47.619]             signalCondition <- base::signalCondition
[11:01:47.619]             sys.calls <- base::sys.calls
[11:01:47.619]             `[[` <- base::`[[`
[11:01:47.619]             `+` <- base::`+`
[11:01:47.619]             `<<-` <- base::`<<-`
[11:01:47.619]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.619]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.619]                   3L)]
[11:01:47.619]             }
[11:01:47.619]             function(cond) {
[11:01:47.619]                 is_error <- inherits(cond, "error")
[11:01:47.619]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.619]                   NULL)
[11:01:47.619]                 if (is_error) {
[11:01:47.619]                   sessionInformation <- function() {
[11:01:47.619]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.619]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.619]                       search = base::search(), system = base::Sys.info())
[11:01:47.619]                   }
[11:01:47.619]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.619]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.619]                     cond$call), session = sessionInformation(), 
[11:01:47.619]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.619]                   signalCondition(cond)
[11:01:47.619]                 }
[11:01:47.619]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.619]                 "immediateCondition"))) {
[11:01:47.619]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.619]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.619]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.619]                   if (TRUE && !signal) {
[11:01:47.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.619]                     {
[11:01:47.619]                       inherits <- base::inherits
[11:01:47.619]                       invokeRestart <- base::invokeRestart
[11:01:47.619]                       is.null <- base::is.null
[11:01:47.619]                       muffled <- FALSE
[11:01:47.619]                       if (inherits(cond, "message")) {
[11:01:47.619]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.619]                         if (muffled) 
[11:01:47.619]                           invokeRestart("muffleMessage")
[11:01:47.619]                       }
[11:01:47.619]                       else if (inherits(cond, "warning")) {
[11:01:47.619]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.619]                         if (muffled) 
[11:01:47.619]                           invokeRestart("muffleWarning")
[11:01:47.619]                       }
[11:01:47.619]                       else if (inherits(cond, "condition")) {
[11:01:47.619]                         if (!is.null(pattern)) {
[11:01:47.619]                           computeRestarts <- base::computeRestarts
[11:01:47.619]                           grepl <- base::grepl
[11:01:47.619]                           restarts <- computeRestarts(cond)
[11:01:47.619]                           for (restart in restarts) {
[11:01:47.619]                             name <- restart$name
[11:01:47.619]                             if (is.null(name)) 
[11:01:47.619]                               next
[11:01:47.619]                             if (!grepl(pattern, name)) 
[11:01:47.619]                               next
[11:01:47.619]                             invokeRestart(restart)
[11:01:47.619]                             muffled <- TRUE
[11:01:47.619]                             break
[11:01:47.619]                           }
[11:01:47.619]                         }
[11:01:47.619]                       }
[11:01:47.619]                       invisible(muffled)
[11:01:47.619]                     }
[11:01:47.619]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.619]                   }
[11:01:47.619]                 }
[11:01:47.619]                 else {
[11:01:47.619]                   if (TRUE) {
[11:01:47.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.619]                     {
[11:01:47.619]                       inherits <- base::inherits
[11:01:47.619]                       invokeRestart <- base::invokeRestart
[11:01:47.619]                       is.null <- base::is.null
[11:01:47.619]                       muffled <- FALSE
[11:01:47.619]                       if (inherits(cond, "message")) {
[11:01:47.619]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.619]                         if (muffled) 
[11:01:47.619]                           invokeRestart("muffleMessage")
[11:01:47.619]                       }
[11:01:47.619]                       else if (inherits(cond, "warning")) {
[11:01:47.619]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.619]                         if (muffled) 
[11:01:47.619]                           invokeRestart("muffleWarning")
[11:01:47.619]                       }
[11:01:47.619]                       else if (inherits(cond, "condition")) {
[11:01:47.619]                         if (!is.null(pattern)) {
[11:01:47.619]                           computeRestarts <- base::computeRestarts
[11:01:47.619]                           grepl <- base::grepl
[11:01:47.619]                           restarts <- computeRestarts(cond)
[11:01:47.619]                           for (restart in restarts) {
[11:01:47.619]                             name <- restart$name
[11:01:47.619]                             if (is.null(name)) 
[11:01:47.619]                               next
[11:01:47.619]                             if (!grepl(pattern, name)) 
[11:01:47.619]                               next
[11:01:47.619]                             invokeRestart(restart)
[11:01:47.619]                             muffled <- TRUE
[11:01:47.619]                             break
[11:01:47.619]                           }
[11:01:47.619]                         }
[11:01:47.619]                       }
[11:01:47.619]                       invisible(muffled)
[11:01:47.619]                     }
[11:01:47.619]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.619]                   }
[11:01:47.619]                 }
[11:01:47.619]             }
[11:01:47.619]         }))
[11:01:47.619]     }, error = function(ex) {
[11:01:47.619]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.619]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.619]                 ...future.rng), started = ...future.startTime, 
[11:01:47.619]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.619]             version = "1.8"), class = "FutureResult")
[11:01:47.619]     }, finally = {
[11:01:47.619]         if (!identical(...future.workdir, getwd())) 
[11:01:47.619]             setwd(...future.workdir)
[11:01:47.619]         {
[11:01:47.619]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.619]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.619]             }
[11:01:47.619]             base::options(...future.oldOptions)
[11:01:47.619]             if (.Platform$OS.type == "windows") {
[11:01:47.619]                 old_names <- names(...future.oldEnvVars)
[11:01:47.619]                 envs <- base::Sys.getenv()
[11:01:47.619]                 names <- names(envs)
[11:01:47.619]                 common <- intersect(names, old_names)
[11:01:47.619]                 added <- setdiff(names, old_names)
[11:01:47.619]                 removed <- setdiff(old_names, names)
[11:01:47.619]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.619]                   envs[common]]
[11:01:47.619]                 NAMES <- toupper(changed)
[11:01:47.619]                 args <- list()
[11:01:47.619]                 for (kk in seq_along(NAMES)) {
[11:01:47.619]                   name <- changed[[kk]]
[11:01:47.619]                   NAME <- NAMES[[kk]]
[11:01:47.619]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.619]                     next
[11:01:47.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.619]                 }
[11:01:47.619]                 NAMES <- toupper(added)
[11:01:47.619]                 for (kk in seq_along(NAMES)) {
[11:01:47.619]                   name <- added[[kk]]
[11:01:47.619]                   NAME <- NAMES[[kk]]
[11:01:47.619]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.619]                     next
[11:01:47.619]                   args[[name]] <- ""
[11:01:47.619]                 }
[11:01:47.619]                 NAMES <- toupper(removed)
[11:01:47.619]                 for (kk in seq_along(NAMES)) {
[11:01:47.619]                   name <- removed[[kk]]
[11:01:47.619]                   NAME <- NAMES[[kk]]
[11:01:47.619]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.619]                     next
[11:01:47.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.619]                 }
[11:01:47.619]                 if (length(args) > 0) 
[11:01:47.619]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.619]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.619]             }
[11:01:47.619]             else {
[11:01:47.619]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.619]             }
[11:01:47.619]             {
[11:01:47.619]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.619]                   0L) {
[11:01:47.619]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.619]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.619]                   base::options(opts)
[11:01:47.619]                 }
[11:01:47.619]                 {
[11:01:47.619]                   {
[11:01:47.619]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.619]                     NULL
[11:01:47.619]                   }
[11:01:47.619]                   options(future.plan = NULL)
[11:01:47.619]                   if (is.na(NA_character_)) 
[11:01:47.619]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.619]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.619]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.619]                     .init = FALSE)
[11:01:47.619]                 }
[11:01:47.619]             }
[11:01:47.619]         }
[11:01:47.619]     })
[11:01:47.619]     if (TRUE) {
[11:01:47.619]         base::sink(type = "output", split = FALSE)
[11:01:47.619]         if (TRUE) {
[11:01:47.619]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.619]         }
[11:01:47.619]         else {
[11:01:47.619]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.619]         }
[11:01:47.619]         base::close(...future.stdout)
[11:01:47.619]         ...future.stdout <- NULL
[11:01:47.619]     }
[11:01:47.619]     ...future.result$conditions <- ...future.conditions
[11:01:47.619]     ...future.result$finished <- base::Sys.time()
[11:01:47.619]     ...future.result
[11:01:47.619] }
[11:01:47.621] assign_globals() ...
[11:01:47.621] List of 1
[11:01:47.621]  $ x: list()
[11:01:47.621]  - attr(*, "where")=List of 1
[11:01:47.621]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.621]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.621]  - attr(*, "resolved")= logi TRUE
[11:01:47.621]  - attr(*, "total_size")= num 31
[11:01:47.621]  - attr(*, "already-done")= logi TRUE
[11:01:47.624] - copied ‘x’ to environment
[11:01:47.624] assign_globals() ... done
[11:01:47.624] requestCore(): workers = 2
[11:01:47.626] MulticoreFuture started
[11:01:47.626] - Launch lazy future ... done
[11:01:47.626] run() for ‘MulticoreFuture’ ... done
[11:01:47.627] result() for MulticoreFuture ...
[11:01:47.627] plan(): Setting new future strategy stack:
[11:01:47.627] List of future strategies:
[11:01:47.627] 1. sequential:
[11:01:47.627]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.627]    - tweaked: FALSE
[11:01:47.627]    - call: NULL
[11:01:47.628] plan(): nbrOfWorkers() = 1
[11:01:47.630] plan(): Setting new future strategy stack:
[11:01:47.630] List of future strategies:
[11:01:47.630] 1. multicore:
[11:01:47.630]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.630]    - tweaked: FALSE
[11:01:47.630]    - call: plan(strategy)
[11:01:47.633] plan(): nbrOfWorkers() = 2
[11:01:47.634] result() for MulticoreFuture ...
[11:01:47.634] result() for MulticoreFuture ... done
[11:01:47.634] result() for MulticoreFuture ... done
[11:01:47.635] result() for MulticoreFuture ...
[11:01:47.635] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.635] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.636] Searching for globals...
[11:01:47.639] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[11:01:47.639] Searching for globals ... DONE
[11:01:47.639] Resolving globals: TRUE
[11:01:47.639] Resolving any globals that are futures ...
[11:01:47.639] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[11:01:47.640] Resolving any globals that are futures ... DONE
[11:01:47.640] 
[11:01:47.640] 
[11:01:47.640] getGlobalsAndPackages() ... DONE
[11:01:47.641] run() for ‘Future’ ...
[11:01:47.641] - state: ‘created’
[11:01:47.641] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.643] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.643] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.643]   - Field: ‘label’
[11:01:47.643]   - Field: ‘local’
[11:01:47.643]   - Field: ‘owner’
[11:01:47.644]   - Field: ‘envir’
[11:01:47.644]   - Field: ‘workers’
[11:01:47.644]   - Field: ‘packages’
[11:01:47.644]   - Field: ‘gc’
[11:01:47.644]   - Field: ‘job’
[11:01:47.644]   - Field: ‘conditions’
[11:01:47.644]   - Field: ‘expr’
[11:01:47.644]   - Field: ‘uuid’
[11:01:47.644]   - Field: ‘seed’
[11:01:47.644]   - Field: ‘version’
[11:01:47.645]   - Field: ‘result’
[11:01:47.645]   - Field: ‘asynchronous’
[11:01:47.645]   - Field: ‘calls’
[11:01:47.645]   - Field: ‘globals’
[11:01:47.645]   - Field: ‘stdout’
[11:01:47.645]   - Field: ‘earlySignal’
[11:01:47.645]   - Field: ‘lazy’
[11:01:47.645]   - Field: ‘state’
[11:01:47.645] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.646] - Launch lazy future ...
[11:01:47.646] Packages needed by the future expression (n = 0): <none>
[11:01:47.646] Packages needed by future strategies (n = 0): <none>
[11:01:47.647] {
[11:01:47.647]     {
[11:01:47.647]         {
[11:01:47.647]             ...future.startTime <- base::Sys.time()
[11:01:47.647]             {
[11:01:47.647]                 {
[11:01:47.647]                   {
[11:01:47.647]                     {
[11:01:47.647]                       base::local({
[11:01:47.647]                         has_future <- base::requireNamespace("future", 
[11:01:47.647]                           quietly = TRUE)
[11:01:47.647]                         if (has_future) {
[11:01:47.647]                           ns <- base::getNamespace("future")
[11:01:47.647]                           version <- ns[[".package"]][["version"]]
[11:01:47.647]                           if (is.null(version)) 
[11:01:47.647]                             version <- utils::packageVersion("future")
[11:01:47.647]                         }
[11:01:47.647]                         else {
[11:01:47.647]                           version <- NULL
[11:01:47.647]                         }
[11:01:47.647]                         if (!has_future || version < "1.8.0") {
[11:01:47.647]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.647]                             "", base::R.version$version.string), 
[11:01:47.647]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.647]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.647]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.647]                               "release", "version")], collapse = " "), 
[11:01:47.647]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.647]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.647]                             info)
[11:01:47.647]                           info <- base::paste(info, collapse = "; ")
[11:01:47.647]                           if (!has_future) {
[11:01:47.647]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.647]                               info)
[11:01:47.647]                           }
[11:01:47.647]                           else {
[11:01:47.647]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.647]                               info, version)
[11:01:47.647]                           }
[11:01:47.647]                           base::stop(msg)
[11:01:47.647]                         }
[11:01:47.647]                       })
[11:01:47.647]                     }
[11:01:47.647]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.647]                     base::options(mc.cores = 1L)
[11:01:47.647]                   }
[11:01:47.647]                   ...future.strategy.old <- future::plan("list")
[11:01:47.647]                   options(future.plan = NULL)
[11:01:47.647]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.647]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.647]                 }
[11:01:47.647]                 ...future.workdir <- getwd()
[11:01:47.647]             }
[11:01:47.647]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.647]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.647]         }
[11:01:47.647]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.647]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.647]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.647]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.647]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.647]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.647]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.647]             base::names(...future.oldOptions))
[11:01:47.647]     }
[11:01:47.647]     if (FALSE) {
[11:01:47.647]     }
[11:01:47.647]     else {
[11:01:47.647]         if (TRUE) {
[11:01:47.647]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.647]                 open = "w")
[11:01:47.647]         }
[11:01:47.647]         else {
[11:01:47.647]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.647]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.647]         }
[11:01:47.647]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.647]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.647]             base::sink(type = "output", split = FALSE)
[11:01:47.647]             base::close(...future.stdout)
[11:01:47.647]         }, add = TRUE)
[11:01:47.647]     }
[11:01:47.647]     ...future.frame <- base::sys.nframe()
[11:01:47.647]     ...future.conditions <- base::list()
[11:01:47.647]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.647]     if (FALSE) {
[11:01:47.647]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.647]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.647]     }
[11:01:47.647]     ...future.result <- base::tryCatch({
[11:01:47.647]         base::withCallingHandlers({
[11:01:47.647]             ...future.value <- base::withVisible(base::local({
[11:01:47.647]                 withCallingHandlers({
[11:01:47.647]                   {
[11:01:47.647]                     x <- list(b = 2)
[11:01:47.647]                     x$a <- 1
[11:01:47.647]                     x
[11:01:47.647]                   }
[11:01:47.647]                 }, immediateCondition = function(cond) {
[11:01:47.647]                   save_rds <- function (object, pathname, ...) 
[11:01:47.647]                   {
[11:01:47.647]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.647]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.647]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.647]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.647]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.647]                         fi_tmp[["mtime"]])
[11:01:47.647]                     }
[11:01:47.647]                     tryCatch({
[11:01:47.647]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.647]                     }, error = function(ex) {
[11:01:47.647]                       msg <- conditionMessage(ex)
[11:01:47.647]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.647]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.647]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.647]                         fi_tmp[["mtime"]], msg)
[11:01:47.647]                       ex$message <- msg
[11:01:47.647]                       stop(ex)
[11:01:47.647]                     })
[11:01:47.647]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.647]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.647]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.647]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.647]                       fi <- file.info(pathname)
[11:01:47.647]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.647]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.647]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.647]                         fi[["size"]], fi[["mtime"]])
[11:01:47.647]                       stop(msg)
[11:01:47.647]                     }
[11:01:47.647]                     invisible(pathname)
[11:01:47.647]                   }
[11:01:47.647]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.647]                     rootPath = tempdir()) 
[11:01:47.647]                   {
[11:01:47.647]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.647]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.647]                       tmpdir = path, fileext = ".rds")
[11:01:47.647]                     save_rds(obj, file)
[11:01:47.647]                   }
[11:01:47.647]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.647]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.647]                   {
[11:01:47.647]                     inherits <- base::inherits
[11:01:47.647]                     invokeRestart <- base::invokeRestart
[11:01:47.647]                     is.null <- base::is.null
[11:01:47.647]                     muffled <- FALSE
[11:01:47.647]                     if (inherits(cond, "message")) {
[11:01:47.647]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.647]                       if (muffled) 
[11:01:47.647]                         invokeRestart("muffleMessage")
[11:01:47.647]                     }
[11:01:47.647]                     else if (inherits(cond, "warning")) {
[11:01:47.647]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.647]                       if (muffled) 
[11:01:47.647]                         invokeRestart("muffleWarning")
[11:01:47.647]                     }
[11:01:47.647]                     else if (inherits(cond, "condition")) {
[11:01:47.647]                       if (!is.null(pattern)) {
[11:01:47.647]                         computeRestarts <- base::computeRestarts
[11:01:47.647]                         grepl <- base::grepl
[11:01:47.647]                         restarts <- computeRestarts(cond)
[11:01:47.647]                         for (restart in restarts) {
[11:01:47.647]                           name <- restart$name
[11:01:47.647]                           if (is.null(name)) 
[11:01:47.647]                             next
[11:01:47.647]                           if (!grepl(pattern, name)) 
[11:01:47.647]                             next
[11:01:47.647]                           invokeRestart(restart)
[11:01:47.647]                           muffled <- TRUE
[11:01:47.647]                           break
[11:01:47.647]                         }
[11:01:47.647]                       }
[11:01:47.647]                     }
[11:01:47.647]                     invisible(muffled)
[11:01:47.647]                   }
[11:01:47.647]                   muffleCondition(cond)
[11:01:47.647]                 })
[11:01:47.647]             }))
[11:01:47.647]             future::FutureResult(value = ...future.value$value, 
[11:01:47.647]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.647]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.647]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.647]                     ...future.globalenv.names))
[11:01:47.647]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.647]         }, condition = base::local({
[11:01:47.647]             c <- base::c
[11:01:47.647]             inherits <- base::inherits
[11:01:47.647]             invokeRestart <- base::invokeRestart
[11:01:47.647]             length <- base::length
[11:01:47.647]             list <- base::list
[11:01:47.647]             seq.int <- base::seq.int
[11:01:47.647]             signalCondition <- base::signalCondition
[11:01:47.647]             sys.calls <- base::sys.calls
[11:01:47.647]             `[[` <- base::`[[`
[11:01:47.647]             `+` <- base::`+`
[11:01:47.647]             `<<-` <- base::`<<-`
[11:01:47.647]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.647]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.647]                   3L)]
[11:01:47.647]             }
[11:01:47.647]             function(cond) {
[11:01:47.647]                 is_error <- inherits(cond, "error")
[11:01:47.647]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.647]                   NULL)
[11:01:47.647]                 if (is_error) {
[11:01:47.647]                   sessionInformation <- function() {
[11:01:47.647]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.647]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.647]                       search = base::search(), system = base::Sys.info())
[11:01:47.647]                   }
[11:01:47.647]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.647]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.647]                     cond$call), session = sessionInformation(), 
[11:01:47.647]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.647]                   signalCondition(cond)
[11:01:47.647]                 }
[11:01:47.647]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.647]                 "immediateCondition"))) {
[11:01:47.647]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.647]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.647]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.647]                   if (TRUE && !signal) {
[11:01:47.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.647]                     {
[11:01:47.647]                       inherits <- base::inherits
[11:01:47.647]                       invokeRestart <- base::invokeRestart
[11:01:47.647]                       is.null <- base::is.null
[11:01:47.647]                       muffled <- FALSE
[11:01:47.647]                       if (inherits(cond, "message")) {
[11:01:47.647]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.647]                         if (muffled) 
[11:01:47.647]                           invokeRestart("muffleMessage")
[11:01:47.647]                       }
[11:01:47.647]                       else if (inherits(cond, "warning")) {
[11:01:47.647]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.647]                         if (muffled) 
[11:01:47.647]                           invokeRestart("muffleWarning")
[11:01:47.647]                       }
[11:01:47.647]                       else if (inherits(cond, "condition")) {
[11:01:47.647]                         if (!is.null(pattern)) {
[11:01:47.647]                           computeRestarts <- base::computeRestarts
[11:01:47.647]                           grepl <- base::grepl
[11:01:47.647]                           restarts <- computeRestarts(cond)
[11:01:47.647]                           for (restart in restarts) {
[11:01:47.647]                             name <- restart$name
[11:01:47.647]                             if (is.null(name)) 
[11:01:47.647]                               next
[11:01:47.647]                             if (!grepl(pattern, name)) 
[11:01:47.647]                               next
[11:01:47.647]                             invokeRestart(restart)
[11:01:47.647]                             muffled <- TRUE
[11:01:47.647]                             break
[11:01:47.647]                           }
[11:01:47.647]                         }
[11:01:47.647]                       }
[11:01:47.647]                       invisible(muffled)
[11:01:47.647]                     }
[11:01:47.647]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.647]                   }
[11:01:47.647]                 }
[11:01:47.647]                 else {
[11:01:47.647]                   if (TRUE) {
[11:01:47.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.647]                     {
[11:01:47.647]                       inherits <- base::inherits
[11:01:47.647]                       invokeRestart <- base::invokeRestart
[11:01:47.647]                       is.null <- base::is.null
[11:01:47.647]                       muffled <- FALSE
[11:01:47.647]                       if (inherits(cond, "message")) {
[11:01:47.647]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.647]                         if (muffled) 
[11:01:47.647]                           invokeRestart("muffleMessage")
[11:01:47.647]                       }
[11:01:47.647]                       else if (inherits(cond, "warning")) {
[11:01:47.647]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.647]                         if (muffled) 
[11:01:47.647]                           invokeRestart("muffleWarning")
[11:01:47.647]                       }
[11:01:47.647]                       else if (inherits(cond, "condition")) {
[11:01:47.647]                         if (!is.null(pattern)) {
[11:01:47.647]                           computeRestarts <- base::computeRestarts
[11:01:47.647]                           grepl <- base::grepl
[11:01:47.647]                           restarts <- computeRestarts(cond)
[11:01:47.647]                           for (restart in restarts) {
[11:01:47.647]                             name <- restart$name
[11:01:47.647]                             if (is.null(name)) 
[11:01:47.647]                               next
[11:01:47.647]                             if (!grepl(pattern, name)) 
[11:01:47.647]                               next
[11:01:47.647]                             invokeRestart(restart)
[11:01:47.647]                             muffled <- TRUE
[11:01:47.647]                             break
[11:01:47.647]                           }
[11:01:47.647]                         }
[11:01:47.647]                       }
[11:01:47.647]                       invisible(muffled)
[11:01:47.647]                     }
[11:01:47.647]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.647]                   }
[11:01:47.647]                 }
[11:01:47.647]             }
[11:01:47.647]         }))
[11:01:47.647]     }, error = function(ex) {
[11:01:47.647]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.647]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.647]                 ...future.rng), started = ...future.startTime, 
[11:01:47.647]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.647]             version = "1.8"), class = "FutureResult")
[11:01:47.647]     }, finally = {
[11:01:47.647]         if (!identical(...future.workdir, getwd())) 
[11:01:47.647]             setwd(...future.workdir)
[11:01:47.647]         {
[11:01:47.647]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.647]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.647]             }
[11:01:47.647]             base::options(...future.oldOptions)
[11:01:47.647]             if (.Platform$OS.type == "windows") {
[11:01:47.647]                 old_names <- names(...future.oldEnvVars)
[11:01:47.647]                 envs <- base::Sys.getenv()
[11:01:47.647]                 names <- names(envs)
[11:01:47.647]                 common <- intersect(names, old_names)
[11:01:47.647]                 added <- setdiff(names, old_names)
[11:01:47.647]                 removed <- setdiff(old_names, names)
[11:01:47.647]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.647]                   envs[common]]
[11:01:47.647]                 NAMES <- toupper(changed)
[11:01:47.647]                 args <- list()
[11:01:47.647]                 for (kk in seq_along(NAMES)) {
[11:01:47.647]                   name <- changed[[kk]]
[11:01:47.647]                   NAME <- NAMES[[kk]]
[11:01:47.647]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.647]                     next
[11:01:47.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.647]                 }
[11:01:47.647]                 NAMES <- toupper(added)
[11:01:47.647]                 for (kk in seq_along(NAMES)) {
[11:01:47.647]                   name <- added[[kk]]
[11:01:47.647]                   NAME <- NAMES[[kk]]
[11:01:47.647]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.647]                     next
[11:01:47.647]                   args[[name]] <- ""
[11:01:47.647]                 }
[11:01:47.647]                 NAMES <- toupper(removed)
[11:01:47.647]                 for (kk in seq_along(NAMES)) {
[11:01:47.647]                   name <- removed[[kk]]
[11:01:47.647]                   NAME <- NAMES[[kk]]
[11:01:47.647]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.647]                     next
[11:01:47.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.647]                 }
[11:01:47.647]                 if (length(args) > 0) 
[11:01:47.647]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.647]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.647]             }
[11:01:47.647]             else {
[11:01:47.647]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.647]             }
[11:01:47.647]             {
[11:01:47.647]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.647]                   0L) {
[11:01:47.647]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.647]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.647]                   base::options(opts)
[11:01:47.647]                 }
[11:01:47.647]                 {
[11:01:47.647]                   {
[11:01:47.647]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.647]                     NULL
[11:01:47.647]                   }
[11:01:47.647]                   options(future.plan = NULL)
[11:01:47.647]                   if (is.na(NA_character_)) 
[11:01:47.647]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.647]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.647]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.647]                     .init = FALSE)
[11:01:47.647]                 }
[11:01:47.647]             }
[11:01:47.647]         }
[11:01:47.647]     })
[11:01:47.647]     if (TRUE) {
[11:01:47.647]         base::sink(type = "output", split = FALSE)
[11:01:47.647]         if (TRUE) {
[11:01:47.647]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.647]         }
[11:01:47.647]         else {
[11:01:47.647]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.647]         }
[11:01:47.647]         base::close(...future.stdout)
[11:01:47.647]         ...future.stdout <- NULL
[11:01:47.647]     }
[11:01:47.647]     ...future.result$conditions <- ...future.conditions
[11:01:47.647]     ...future.result$finished <- base::Sys.time()
[11:01:47.647]     ...future.result
[11:01:47.647] }
[11:01:47.649] requestCore(): workers = 2
[11:01:47.651] MulticoreFuture started
[11:01:47.651] - Launch lazy future ... done
[11:01:47.651] run() for ‘MulticoreFuture’ ... done
[11:01:47.652] plan(): Setting new future strategy stack:
[11:01:47.652] result() for MulticoreFuture ...
[11:01:47.652] List of future strategies:
[11:01:47.652] 1. sequential:
[11:01:47.652]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.652]    - tweaked: FALSE
[11:01:47.652]    - call: NULL
[11:01:47.653] plan(): nbrOfWorkers() = 1
[11:01:47.655] plan(): Setting new future strategy stack:
[11:01:47.655] List of future strategies:
[11:01:47.655] 1. multicore:
[11:01:47.655]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.655]    - tweaked: FALSE
[11:01:47.655]    - call: plan(strategy)
[11:01:47.658] plan(): nbrOfWorkers() = 2
[11:01:47.659] result() for MulticoreFuture ...
[11:01:47.659] result() for MulticoreFuture ... done
[11:01:47.659] result() for MulticoreFuture ... done
[11:01:47.659] result() for MulticoreFuture ...
[11:01:47.659] result() for MulticoreFuture ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.659] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.660] Searching for globals...
[11:01:47.665] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.665] Searching for globals ... DONE
[11:01:47.665] Resolving globals: TRUE
[11:01:47.665] Resolving any globals that are futures ...
[11:01:47.665] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.666] Resolving any globals that are futures ... DONE
[11:01:47.666] Resolving futures part of globals (recursively) ...
[11:01:47.666] resolve() on list ...
[11:01:47.667]  recursive: 99
[11:01:47.667]  length: 1
[11:01:47.667]  elements: ‘x’
[11:01:47.667]  length: 0 (resolved future 1)
[11:01:47.667] resolve() on list ... DONE
[11:01:47.667] - globals: [1] ‘x’
[11:01:47.667] Resolving futures part of globals (recursively) ... DONE
[11:01:47.667] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.668] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.668] - globals: [1] ‘x’
[11:01:47.668] 
[11:01:47.668] getGlobalsAndPackages() ... DONE
[11:01:47.668] run() for ‘Future’ ...
[11:01:47.669] - state: ‘created’
[11:01:47.669] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.671] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.671] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.671]   - Field: ‘label’
[11:01:47.671]   - Field: ‘local’
[11:01:47.671]   - Field: ‘owner’
[11:01:47.671]   - Field: ‘envir’
[11:01:47.672]   - Field: ‘workers’
[11:01:47.672]   - Field: ‘packages’
[11:01:47.672]   - Field: ‘gc’
[11:01:47.672]   - Field: ‘job’
[11:01:47.672]   - Field: ‘conditions’
[11:01:47.672]   - Field: ‘expr’
[11:01:47.672]   - Field: ‘uuid’
[11:01:47.672]   - Field: ‘seed’
[11:01:47.672]   - Field: ‘version’
[11:01:47.672]   - Field: ‘result’
[11:01:47.673]   - Field: ‘asynchronous’
[11:01:47.673]   - Field: ‘calls’
[11:01:47.673]   - Field: ‘globals’
[11:01:47.673]   - Field: ‘stdout’
[11:01:47.673]   - Field: ‘earlySignal’
[11:01:47.673]   - Field: ‘lazy’
[11:01:47.673]   - Field: ‘state’
[11:01:47.673] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.673] - Launch lazy future ...
[11:01:47.674] Packages needed by the future expression (n = 0): <none>
[11:01:47.674] Packages needed by future strategies (n = 0): <none>
[11:01:47.674] {
[11:01:47.674]     {
[11:01:47.674]         {
[11:01:47.674]             ...future.startTime <- base::Sys.time()
[11:01:47.674]             {
[11:01:47.674]                 {
[11:01:47.674]                   {
[11:01:47.674]                     {
[11:01:47.674]                       base::local({
[11:01:47.674]                         has_future <- base::requireNamespace("future", 
[11:01:47.674]                           quietly = TRUE)
[11:01:47.674]                         if (has_future) {
[11:01:47.674]                           ns <- base::getNamespace("future")
[11:01:47.674]                           version <- ns[[".package"]][["version"]]
[11:01:47.674]                           if (is.null(version)) 
[11:01:47.674]                             version <- utils::packageVersion("future")
[11:01:47.674]                         }
[11:01:47.674]                         else {
[11:01:47.674]                           version <- NULL
[11:01:47.674]                         }
[11:01:47.674]                         if (!has_future || version < "1.8.0") {
[11:01:47.674]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.674]                             "", base::R.version$version.string), 
[11:01:47.674]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.674]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.674]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.674]                               "release", "version")], collapse = " "), 
[11:01:47.674]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.674]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.674]                             info)
[11:01:47.674]                           info <- base::paste(info, collapse = "; ")
[11:01:47.674]                           if (!has_future) {
[11:01:47.674]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.674]                               info)
[11:01:47.674]                           }
[11:01:47.674]                           else {
[11:01:47.674]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.674]                               info, version)
[11:01:47.674]                           }
[11:01:47.674]                           base::stop(msg)
[11:01:47.674]                         }
[11:01:47.674]                       })
[11:01:47.674]                     }
[11:01:47.674]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.674]                     base::options(mc.cores = 1L)
[11:01:47.674]                   }
[11:01:47.674]                   ...future.strategy.old <- future::plan("list")
[11:01:47.674]                   options(future.plan = NULL)
[11:01:47.674]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.674]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.674]                 }
[11:01:47.674]                 ...future.workdir <- getwd()
[11:01:47.674]             }
[11:01:47.674]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.674]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.674]         }
[11:01:47.674]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.674]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.674]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.674]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.674]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.674]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.674]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.674]             base::names(...future.oldOptions))
[11:01:47.674]     }
[11:01:47.674]     if (FALSE) {
[11:01:47.674]     }
[11:01:47.674]     else {
[11:01:47.674]         if (TRUE) {
[11:01:47.674]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.674]                 open = "w")
[11:01:47.674]         }
[11:01:47.674]         else {
[11:01:47.674]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.674]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.674]         }
[11:01:47.674]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.674]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.674]             base::sink(type = "output", split = FALSE)
[11:01:47.674]             base::close(...future.stdout)
[11:01:47.674]         }, add = TRUE)
[11:01:47.674]     }
[11:01:47.674]     ...future.frame <- base::sys.nframe()
[11:01:47.674]     ...future.conditions <- base::list()
[11:01:47.674]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.674]     if (FALSE) {
[11:01:47.674]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.674]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.674]     }
[11:01:47.674]     ...future.result <- base::tryCatch({
[11:01:47.674]         base::withCallingHandlers({
[11:01:47.674]             ...future.value <- base::withVisible(base::local({
[11:01:47.674]                 withCallingHandlers({
[11:01:47.674]                   {
[11:01:47.674]                     x[["a"]] <- 1
[11:01:47.674]                     x
[11:01:47.674]                   }
[11:01:47.674]                 }, immediateCondition = function(cond) {
[11:01:47.674]                   save_rds <- function (object, pathname, ...) 
[11:01:47.674]                   {
[11:01:47.674]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.674]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.674]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.674]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.674]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.674]                         fi_tmp[["mtime"]])
[11:01:47.674]                     }
[11:01:47.674]                     tryCatch({
[11:01:47.674]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.674]                     }, error = function(ex) {
[11:01:47.674]                       msg <- conditionMessage(ex)
[11:01:47.674]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.674]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.674]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.674]                         fi_tmp[["mtime"]], msg)
[11:01:47.674]                       ex$message <- msg
[11:01:47.674]                       stop(ex)
[11:01:47.674]                     })
[11:01:47.674]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.674]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.674]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.674]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.674]                       fi <- file.info(pathname)
[11:01:47.674]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.674]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.674]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.674]                         fi[["size"]], fi[["mtime"]])
[11:01:47.674]                       stop(msg)
[11:01:47.674]                     }
[11:01:47.674]                     invisible(pathname)
[11:01:47.674]                   }
[11:01:47.674]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.674]                     rootPath = tempdir()) 
[11:01:47.674]                   {
[11:01:47.674]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.674]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.674]                       tmpdir = path, fileext = ".rds")
[11:01:47.674]                     save_rds(obj, file)
[11:01:47.674]                   }
[11:01:47.674]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.674]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.674]                   {
[11:01:47.674]                     inherits <- base::inherits
[11:01:47.674]                     invokeRestart <- base::invokeRestart
[11:01:47.674]                     is.null <- base::is.null
[11:01:47.674]                     muffled <- FALSE
[11:01:47.674]                     if (inherits(cond, "message")) {
[11:01:47.674]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.674]                       if (muffled) 
[11:01:47.674]                         invokeRestart("muffleMessage")
[11:01:47.674]                     }
[11:01:47.674]                     else if (inherits(cond, "warning")) {
[11:01:47.674]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.674]                       if (muffled) 
[11:01:47.674]                         invokeRestart("muffleWarning")
[11:01:47.674]                     }
[11:01:47.674]                     else if (inherits(cond, "condition")) {
[11:01:47.674]                       if (!is.null(pattern)) {
[11:01:47.674]                         computeRestarts <- base::computeRestarts
[11:01:47.674]                         grepl <- base::grepl
[11:01:47.674]                         restarts <- computeRestarts(cond)
[11:01:47.674]                         for (restart in restarts) {
[11:01:47.674]                           name <- restart$name
[11:01:47.674]                           if (is.null(name)) 
[11:01:47.674]                             next
[11:01:47.674]                           if (!grepl(pattern, name)) 
[11:01:47.674]                             next
[11:01:47.674]                           invokeRestart(restart)
[11:01:47.674]                           muffled <- TRUE
[11:01:47.674]                           break
[11:01:47.674]                         }
[11:01:47.674]                       }
[11:01:47.674]                     }
[11:01:47.674]                     invisible(muffled)
[11:01:47.674]                   }
[11:01:47.674]                   muffleCondition(cond)
[11:01:47.674]                 })
[11:01:47.674]             }))
[11:01:47.674]             future::FutureResult(value = ...future.value$value, 
[11:01:47.674]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.674]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.674]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.674]                     ...future.globalenv.names))
[11:01:47.674]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.674]         }, condition = base::local({
[11:01:47.674]             c <- base::c
[11:01:47.674]             inherits <- base::inherits
[11:01:47.674]             invokeRestart <- base::invokeRestart
[11:01:47.674]             length <- base::length
[11:01:47.674]             list <- base::list
[11:01:47.674]             seq.int <- base::seq.int
[11:01:47.674]             signalCondition <- base::signalCondition
[11:01:47.674]             sys.calls <- base::sys.calls
[11:01:47.674]             `[[` <- base::`[[`
[11:01:47.674]             `+` <- base::`+`
[11:01:47.674]             `<<-` <- base::`<<-`
[11:01:47.674]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.674]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.674]                   3L)]
[11:01:47.674]             }
[11:01:47.674]             function(cond) {
[11:01:47.674]                 is_error <- inherits(cond, "error")
[11:01:47.674]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.674]                   NULL)
[11:01:47.674]                 if (is_error) {
[11:01:47.674]                   sessionInformation <- function() {
[11:01:47.674]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.674]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.674]                       search = base::search(), system = base::Sys.info())
[11:01:47.674]                   }
[11:01:47.674]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.674]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.674]                     cond$call), session = sessionInformation(), 
[11:01:47.674]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.674]                   signalCondition(cond)
[11:01:47.674]                 }
[11:01:47.674]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.674]                 "immediateCondition"))) {
[11:01:47.674]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.674]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.674]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.674]                   if (TRUE && !signal) {
[11:01:47.674]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.674]                     {
[11:01:47.674]                       inherits <- base::inherits
[11:01:47.674]                       invokeRestart <- base::invokeRestart
[11:01:47.674]                       is.null <- base::is.null
[11:01:47.674]                       muffled <- FALSE
[11:01:47.674]                       if (inherits(cond, "message")) {
[11:01:47.674]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.674]                         if (muffled) 
[11:01:47.674]                           invokeRestart("muffleMessage")
[11:01:47.674]                       }
[11:01:47.674]                       else if (inherits(cond, "warning")) {
[11:01:47.674]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.674]                         if (muffled) 
[11:01:47.674]                           invokeRestart("muffleWarning")
[11:01:47.674]                       }
[11:01:47.674]                       else if (inherits(cond, "condition")) {
[11:01:47.674]                         if (!is.null(pattern)) {
[11:01:47.674]                           computeRestarts <- base::computeRestarts
[11:01:47.674]                           grepl <- base::grepl
[11:01:47.674]                           restarts <- computeRestarts(cond)
[11:01:47.674]                           for (restart in restarts) {
[11:01:47.674]                             name <- restart$name
[11:01:47.674]                             if (is.null(name)) 
[11:01:47.674]                               next
[11:01:47.674]                             if (!grepl(pattern, name)) 
[11:01:47.674]                               next
[11:01:47.674]                             invokeRestart(restart)
[11:01:47.674]                             muffled <- TRUE
[11:01:47.674]                             break
[11:01:47.674]                           }
[11:01:47.674]                         }
[11:01:47.674]                       }
[11:01:47.674]                       invisible(muffled)
[11:01:47.674]                     }
[11:01:47.674]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.674]                   }
[11:01:47.674]                 }
[11:01:47.674]                 else {
[11:01:47.674]                   if (TRUE) {
[11:01:47.674]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.674]                     {
[11:01:47.674]                       inherits <- base::inherits
[11:01:47.674]                       invokeRestart <- base::invokeRestart
[11:01:47.674]                       is.null <- base::is.null
[11:01:47.674]                       muffled <- FALSE
[11:01:47.674]                       if (inherits(cond, "message")) {
[11:01:47.674]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.674]                         if (muffled) 
[11:01:47.674]                           invokeRestart("muffleMessage")
[11:01:47.674]                       }
[11:01:47.674]                       else if (inherits(cond, "warning")) {
[11:01:47.674]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.674]                         if (muffled) 
[11:01:47.674]                           invokeRestart("muffleWarning")
[11:01:47.674]                       }
[11:01:47.674]                       else if (inherits(cond, "condition")) {
[11:01:47.674]                         if (!is.null(pattern)) {
[11:01:47.674]                           computeRestarts <- base::computeRestarts
[11:01:47.674]                           grepl <- base::grepl
[11:01:47.674]                           restarts <- computeRestarts(cond)
[11:01:47.674]                           for (restart in restarts) {
[11:01:47.674]                             name <- restart$name
[11:01:47.674]                             if (is.null(name)) 
[11:01:47.674]                               next
[11:01:47.674]                             if (!grepl(pattern, name)) 
[11:01:47.674]                               next
[11:01:47.674]                             invokeRestart(restart)
[11:01:47.674]                             muffled <- TRUE
[11:01:47.674]                             break
[11:01:47.674]                           }
[11:01:47.674]                         }
[11:01:47.674]                       }
[11:01:47.674]                       invisible(muffled)
[11:01:47.674]                     }
[11:01:47.674]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.674]                   }
[11:01:47.674]                 }
[11:01:47.674]             }
[11:01:47.674]         }))
[11:01:47.674]     }, error = function(ex) {
[11:01:47.674]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.674]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.674]                 ...future.rng), started = ...future.startTime, 
[11:01:47.674]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.674]             version = "1.8"), class = "FutureResult")
[11:01:47.674]     }, finally = {
[11:01:47.674]         if (!identical(...future.workdir, getwd())) 
[11:01:47.674]             setwd(...future.workdir)
[11:01:47.674]         {
[11:01:47.674]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.674]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.674]             }
[11:01:47.674]             base::options(...future.oldOptions)
[11:01:47.674]             if (.Platform$OS.type == "windows") {
[11:01:47.674]                 old_names <- names(...future.oldEnvVars)
[11:01:47.674]                 envs <- base::Sys.getenv()
[11:01:47.674]                 names <- names(envs)
[11:01:47.674]                 common <- intersect(names, old_names)
[11:01:47.674]                 added <- setdiff(names, old_names)
[11:01:47.674]                 removed <- setdiff(old_names, names)
[11:01:47.674]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.674]                   envs[common]]
[11:01:47.674]                 NAMES <- toupper(changed)
[11:01:47.674]                 args <- list()
[11:01:47.674]                 for (kk in seq_along(NAMES)) {
[11:01:47.674]                   name <- changed[[kk]]
[11:01:47.674]                   NAME <- NAMES[[kk]]
[11:01:47.674]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.674]                     next
[11:01:47.674]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.674]                 }
[11:01:47.674]                 NAMES <- toupper(added)
[11:01:47.674]                 for (kk in seq_along(NAMES)) {
[11:01:47.674]                   name <- added[[kk]]
[11:01:47.674]                   NAME <- NAMES[[kk]]
[11:01:47.674]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.674]                     next
[11:01:47.674]                   args[[name]] <- ""
[11:01:47.674]                 }
[11:01:47.674]                 NAMES <- toupper(removed)
[11:01:47.674]                 for (kk in seq_along(NAMES)) {
[11:01:47.674]                   name <- removed[[kk]]
[11:01:47.674]                   NAME <- NAMES[[kk]]
[11:01:47.674]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.674]                     next
[11:01:47.674]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.674]                 }
[11:01:47.674]                 if (length(args) > 0) 
[11:01:47.674]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.674]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.674]             }
[11:01:47.674]             else {
[11:01:47.674]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.674]             }
[11:01:47.674]             {
[11:01:47.674]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.674]                   0L) {
[11:01:47.674]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.674]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.674]                   base::options(opts)
[11:01:47.674]                 }
[11:01:47.674]                 {
[11:01:47.674]                   {
[11:01:47.674]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.674]                     NULL
[11:01:47.674]                   }
[11:01:47.674]                   options(future.plan = NULL)
[11:01:47.674]                   if (is.na(NA_character_)) 
[11:01:47.674]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.674]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.674]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.674]                     .init = FALSE)
[11:01:47.674]                 }
[11:01:47.674]             }
[11:01:47.674]         }
[11:01:47.674]     })
[11:01:47.674]     if (TRUE) {
[11:01:47.674]         base::sink(type = "output", split = FALSE)
[11:01:47.674]         if (TRUE) {
[11:01:47.674]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.674]         }
[11:01:47.674]         else {
[11:01:47.674]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.674]         }
[11:01:47.674]         base::close(...future.stdout)
[11:01:47.674]         ...future.stdout <- NULL
[11:01:47.674]     }
[11:01:47.674]     ...future.result$conditions <- ...future.conditions
[11:01:47.674]     ...future.result$finished <- base::Sys.time()
[11:01:47.674]     ...future.result
[11:01:47.674] }
[11:01:47.677] assign_globals() ...
[11:01:47.677] List of 1
[11:01:47.677]  $ x: list()
[11:01:47.677]  - attr(*, "where")=List of 1
[11:01:47.677]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.677]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.677]  - attr(*, "resolved")= logi TRUE
[11:01:47.677]  - attr(*, "total_size")= num 31
[11:01:47.677]  - attr(*, "already-done")= logi TRUE
[11:01:47.680] - copied ‘x’ to environment
[11:01:47.680] assign_globals() ... done
[11:01:47.680] requestCore(): workers = 2
[11:01:47.682] MulticoreFuture started
[11:01:47.682] - Launch lazy future ... done
[11:01:47.682] run() for ‘MulticoreFuture’ ... done
[11:01:47.682] result() for MulticoreFuture ...
[11:01:47.683] plan(): Setting new future strategy stack:
[11:01:47.683] List of future strategies:
[11:01:47.683] 1. sequential:
[11:01:47.683]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.683]    - tweaked: FALSE
[11:01:47.683]    - call: NULL
[11:01:47.684] plan(): nbrOfWorkers() = 1
[11:01:47.685] plan(): Setting new future strategy stack:
[11:01:47.686] List of future strategies:
[11:01:47.686] 1. multicore:
[11:01:47.686]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.686]    - tweaked: FALSE
[11:01:47.686]    - call: plan(strategy)
[11:01:47.689] plan(): nbrOfWorkers() = 2
[11:01:47.690] result() for MulticoreFuture ...
[11:01:47.690] result() for MulticoreFuture ... done
[11:01:47.690] result() for MulticoreFuture ... done
[11:01:47.690] result() for MulticoreFuture ...
[11:01:47.690] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.691] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.691] Searching for globals...
[11:01:47.693] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.693] Searching for globals ... DONE
[11:01:47.694] Resolving globals: TRUE
[11:01:47.694] Resolving any globals that are futures ...
[11:01:47.694] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.694] Resolving any globals that are futures ... DONE
[11:01:47.694] Resolving futures part of globals (recursively) ...
[11:01:47.695] resolve() on list ...
[11:01:47.695]  recursive: 99
[11:01:47.695]  length: 1
[11:01:47.695]  elements: ‘x’
[11:01:47.695]  length: 0 (resolved future 1)
[11:01:47.695] resolve() on list ... DONE
[11:01:47.695] - globals: [1] ‘x’
[11:01:47.696] Resolving futures part of globals (recursively) ... DONE
[11:01:47.696] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.696] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.696] - globals: [1] ‘x’
[11:01:47.696] 
[11:01:47.697] getGlobalsAndPackages() ... DONE
[11:01:47.697] run() for ‘Future’ ...
[11:01:47.697] - state: ‘created’
[11:01:47.697] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.699] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.699] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.699]   - Field: ‘label’
[11:01:47.700]   - Field: ‘local’
[11:01:47.700]   - Field: ‘owner’
[11:01:47.700]   - Field: ‘envir’
[11:01:47.700]   - Field: ‘workers’
[11:01:47.700]   - Field: ‘packages’
[11:01:47.700]   - Field: ‘gc’
[11:01:47.700]   - Field: ‘job’
[11:01:47.700]   - Field: ‘conditions’
[11:01:47.700]   - Field: ‘expr’
[11:01:47.700]   - Field: ‘uuid’
[11:01:47.701]   - Field: ‘seed’
[11:01:47.701]   - Field: ‘version’
[11:01:47.701]   - Field: ‘result’
[11:01:47.701]   - Field: ‘asynchronous’
[11:01:47.701]   - Field: ‘calls’
[11:01:47.701]   - Field: ‘globals’
[11:01:47.701]   - Field: ‘stdout’
[11:01:47.701]   - Field: ‘earlySignal’
[11:01:47.701]   - Field: ‘lazy’
[11:01:47.701]   - Field: ‘state’
[11:01:47.702] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.702] - Launch lazy future ...
[11:01:47.702] Packages needed by the future expression (n = 0): <none>
[11:01:47.702] Packages needed by future strategies (n = 0): <none>
[11:01:47.703] {
[11:01:47.703]     {
[11:01:47.703]         {
[11:01:47.703]             ...future.startTime <- base::Sys.time()
[11:01:47.703]             {
[11:01:47.703]                 {
[11:01:47.703]                   {
[11:01:47.703]                     {
[11:01:47.703]                       base::local({
[11:01:47.703]                         has_future <- base::requireNamespace("future", 
[11:01:47.703]                           quietly = TRUE)
[11:01:47.703]                         if (has_future) {
[11:01:47.703]                           ns <- base::getNamespace("future")
[11:01:47.703]                           version <- ns[[".package"]][["version"]]
[11:01:47.703]                           if (is.null(version)) 
[11:01:47.703]                             version <- utils::packageVersion("future")
[11:01:47.703]                         }
[11:01:47.703]                         else {
[11:01:47.703]                           version <- NULL
[11:01:47.703]                         }
[11:01:47.703]                         if (!has_future || version < "1.8.0") {
[11:01:47.703]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.703]                             "", base::R.version$version.string), 
[11:01:47.703]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.703]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.703]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.703]                               "release", "version")], collapse = " "), 
[11:01:47.703]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.703]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.703]                             info)
[11:01:47.703]                           info <- base::paste(info, collapse = "; ")
[11:01:47.703]                           if (!has_future) {
[11:01:47.703]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.703]                               info)
[11:01:47.703]                           }
[11:01:47.703]                           else {
[11:01:47.703]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.703]                               info, version)
[11:01:47.703]                           }
[11:01:47.703]                           base::stop(msg)
[11:01:47.703]                         }
[11:01:47.703]                       })
[11:01:47.703]                     }
[11:01:47.703]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.703]                     base::options(mc.cores = 1L)
[11:01:47.703]                   }
[11:01:47.703]                   ...future.strategy.old <- future::plan("list")
[11:01:47.703]                   options(future.plan = NULL)
[11:01:47.703]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.703]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.703]                 }
[11:01:47.703]                 ...future.workdir <- getwd()
[11:01:47.703]             }
[11:01:47.703]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.703]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.703]         }
[11:01:47.703]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.703]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.703]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.703]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.703]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.703]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.703]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.703]             base::names(...future.oldOptions))
[11:01:47.703]     }
[11:01:47.703]     if (FALSE) {
[11:01:47.703]     }
[11:01:47.703]     else {
[11:01:47.703]         if (TRUE) {
[11:01:47.703]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.703]                 open = "w")
[11:01:47.703]         }
[11:01:47.703]         else {
[11:01:47.703]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.703]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.703]         }
[11:01:47.703]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.703]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.703]             base::sink(type = "output", split = FALSE)
[11:01:47.703]             base::close(...future.stdout)
[11:01:47.703]         }, add = TRUE)
[11:01:47.703]     }
[11:01:47.703]     ...future.frame <- base::sys.nframe()
[11:01:47.703]     ...future.conditions <- base::list()
[11:01:47.703]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.703]     if (FALSE) {
[11:01:47.703]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.703]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.703]     }
[11:01:47.703]     ...future.result <- base::tryCatch({
[11:01:47.703]         base::withCallingHandlers({
[11:01:47.703]             ...future.value <- base::withVisible(base::local({
[11:01:47.703]                 withCallingHandlers({
[11:01:47.703]                   {
[11:01:47.703]                     x[["a"]] <- 1
[11:01:47.703]                     x
[11:01:47.703]                   }
[11:01:47.703]                 }, immediateCondition = function(cond) {
[11:01:47.703]                   save_rds <- function (object, pathname, ...) 
[11:01:47.703]                   {
[11:01:47.703]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.703]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.703]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.703]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.703]                         fi_tmp[["mtime"]])
[11:01:47.703]                     }
[11:01:47.703]                     tryCatch({
[11:01:47.703]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.703]                     }, error = function(ex) {
[11:01:47.703]                       msg <- conditionMessage(ex)
[11:01:47.703]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.703]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.703]                         fi_tmp[["mtime"]], msg)
[11:01:47.703]                       ex$message <- msg
[11:01:47.703]                       stop(ex)
[11:01:47.703]                     })
[11:01:47.703]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.703]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.703]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.703]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.703]                       fi <- file.info(pathname)
[11:01:47.703]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.703]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.703]                         fi[["size"]], fi[["mtime"]])
[11:01:47.703]                       stop(msg)
[11:01:47.703]                     }
[11:01:47.703]                     invisible(pathname)
[11:01:47.703]                   }
[11:01:47.703]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.703]                     rootPath = tempdir()) 
[11:01:47.703]                   {
[11:01:47.703]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.703]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.703]                       tmpdir = path, fileext = ".rds")
[11:01:47.703]                     save_rds(obj, file)
[11:01:47.703]                   }
[11:01:47.703]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.703]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.703]                   {
[11:01:47.703]                     inherits <- base::inherits
[11:01:47.703]                     invokeRestart <- base::invokeRestart
[11:01:47.703]                     is.null <- base::is.null
[11:01:47.703]                     muffled <- FALSE
[11:01:47.703]                     if (inherits(cond, "message")) {
[11:01:47.703]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.703]                       if (muffled) 
[11:01:47.703]                         invokeRestart("muffleMessage")
[11:01:47.703]                     }
[11:01:47.703]                     else if (inherits(cond, "warning")) {
[11:01:47.703]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.703]                       if (muffled) 
[11:01:47.703]                         invokeRestart("muffleWarning")
[11:01:47.703]                     }
[11:01:47.703]                     else if (inherits(cond, "condition")) {
[11:01:47.703]                       if (!is.null(pattern)) {
[11:01:47.703]                         computeRestarts <- base::computeRestarts
[11:01:47.703]                         grepl <- base::grepl
[11:01:47.703]                         restarts <- computeRestarts(cond)
[11:01:47.703]                         for (restart in restarts) {
[11:01:47.703]                           name <- restart$name
[11:01:47.703]                           if (is.null(name)) 
[11:01:47.703]                             next
[11:01:47.703]                           if (!grepl(pattern, name)) 
[11:01:47.703]                             next
[11:01:47.703]                           invokeRestart(restart)
[11:01:47.703]                           muffled <- TRUE
[11:01:47.703]                           break
[11:01:47.703]                         }
[11:01:47.703]                       }
[11:01:47.703]                     }
[11:01:47.703]                     invisible(muffled)
[11:01:47.703]                   }
[11:01:47.703]                   muffleCondition(cond)
[11:01:47.703]                 })
[11:01:47.703]             }))
[11:01:47.703]             future::FutureResult(value = ...future.value$value, 
[11:01:47.703]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.703]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.703]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.703]                     ...future.globalenv.names))
[11:01:47.703]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.703]         }, condition = base::local({
[11:01:47.703]             c <- base::c
[11:01:47.703]             inherits <- base::inherits
[11:01:47.703]             invokeRestart <- base::invokeRestart
[11:01:47.703]             length <- base::length
[11:01:47.703]             list <- base::list
[11:01:47.703]             seq.int <- base::seq.int
[11:01:47.703]             signalCondition <- base::signalCondition
[11:01:47.703]             sys.calls <- base::sys.calls
[11:01:47.703]             `[[` <- base::`[[`
[11:01:47.703]             `+` <- base::`+`
[11:01:47.703]             `<<-` <- base::`<<-`
[11:01:47.703]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.703]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.703]                   3L)]
[11:01:47.703]             }
[11:01:47.703]             function(cond) {
[11:01:47.703]                 is_error <- inherits(cond, "error")
[11:01:47.703]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.703]                   NULL)
[11:01:47.703]                 if (is_error) {
[11:01:47.703]                   sessionInformation <- function() {
[11:01:47.703]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.703]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.703]                       search = base::search(), system = base::Sys.info())
[11:01:47.703]                   }
[11:01:47.703]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.703]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.703]                     cond$call), session = sessionInformation(), 
[11:01:47.703]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.703]                   signalCondition(cond)
[11:01:47.703]                 }
[11:01:47.703]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.703]                 "immediateCondition"))) {
[11:01:47.703]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.703]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.703]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.703]                   if (TRUE && !signal) {
[11:01:47.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.703]                     {
[11:01:47.703]                       inherits <- base::inherits
[11:01:47.703]                       invokeRestart <- base::invokeRestart
[11:01:47.703]                       is.null <- base::is.null
[11:01:47.703]                       muffled <- FALSE
[11:01:47.703]                       if (inherits(cond, "message")) {
[11:01:47.703]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.703]                         if (muffled) 
[11:01:47.703]                           invokeRestart("muffleMessage")
[11:01:47.703]                       }
[11:01:47.703]                       else if (inherits(cond, "warning")) {
[11:01:47.703]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.703]                         if (muffled) 
[11:01:47.703]                           invokeRestart("muffleWarning")
[11:01:47.703]                       }
[11:01:47.703]                       else if (inherits(cond, "condition")) {
[11:01:47.703]                         if (!is.null(pattern)) {
[11:01:47.703]                           computeRestarts <- base::computeRestarts
[11:01:47.703]                           grepl <- base::grepl
[11:01:47.703]                           restarts <- computeRestarts(cond)
[11:01:47.703]                           for (restart in restarts) {
[11:01:47.703]                             name <- restart$name
[11:01:47.703]                             if (is.null(name)) 
[11:01:47.703]                               next
[11:01:47.703]                             if (!grepl(pattern, name)) 
[11:01:47.703]                               next
[11:01:47.703]                             invokeRestart(restart)
[11:01:47.703]                             muffled <- TRUE
[11:01:47.703]                             break
[11:01:47.703]                           }
[11:01:47.703]                         }
[11:01:47.703]                       }
[11:01:47.703]                       invisible(muffled)
[11:01:47.703]                     }
[11:01:47.703]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.703]                   }
[11:01:47.703]                 }
[11:01:47.703]                 else {
[11:01:47.703]                   if (TRUE) {
[11:01:47.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.703]                     {
[11:01:47.703]                       inherits <- base::inherits
[11:01:47.703]                       invokeRestart <- base::invokeRestart
[11:01:47.703]                       is.null <- base::is.null
[11:01:47.703]                       muffled <- FALSE
[11:01:47.703]                       if (inherits(cond, "message")) {
[11:01:47.703]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.703]                         if (muffled) 
[11:01:47.703]                           invokeRestart("muffleMessage")
[11:01:47.703]                       }
[11:01:47.703]                       else if (inherits(cond, "warning")) {
[11:01:47.703]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.703]                         if (muffled) 
[11:01:47.703]                           invokeRestart("muffleWarning")
[11:01:47.703]                       }
[11:01:47.703]                       else if (inherits(cond, "condition")) {
[11:01:47.703]                         if (!is.null(pattern)) {
[11:01:47.703]                           computeRestarts <- base::computeRestarts
[11:01:47.703]                           grepl <- base::grepl
[11:01:47.703]                           restarts <- computeRestarts(cond)
[11:01:47.703]                           for (restart in restarts) {
[11:01:47.703]                             name <- restart$name
[11:01:47.703]                             if (is.null(name)) 
[11:01:47.703]                               next
[11:01:47.703]                             if (!grepl(pattern, name)) 
[11:01:47.703]                               next
[11:01:47.703]                             invokeRestart(restart)
[11:01:47.703]                             muffled <- TRUE
[11:01:47.703]                             break
[11:01:47.703]                           }
[11:01:47.703]                         }
[11:01:47.703]                       }
[11:01:47.703]                       invisible(muffled)
[11:01:47.703]                     }
[11:01:47.703]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.703]                   }
[11:01:47.703]                 }
[11:01:47.703]             }
[11:01:47.703]         }))
[11:01:47.703]     }, error = function(ex) {
[11:01:47.703]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.703]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.703]                 ...future.rng), started = ...future.startTime, 
[11:01:47.703]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.703]             version = "1.8"), class = "FutureResult")
[11:01:47.703]     }, finally = {
[11:01:47.703]         if (!identical(...future.workdir, getwd())) 
[11:01:47.703]             setwd(...future.workdir)
[11:01:47.703]         {
[11:01:47.703]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.703]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.703]             }
[11:01:47.703]             base::options(...future.oldOptions)
[11:01:47.703]             if (.Platform$OS.type == "windows") {
[11:01:47.703]                 old_names <- names(...future.oldEnvVars)
[11:01:47.703]                 envs <- base::Sys.getenv()
[11:01:47.703]                 names <- names(envs)
[11:01:47.703]                 common <- intersect(names, old_names)
[11:01:47.703]                 added <- setdiff(names, old_names)
[11:01:47.703]                 removed <- setdiff(old_names, names)
[11:01:47.703]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.703]                   envs[common]]
[11:01:47.703]                 NAMES <- toupper(changed)
[11:01:47.703]                 args <- list()
[11:01:47.703]                 for (kk in seq_along(NAMES)) {
[11:01:47.703]                   name <- changed[[kk]]
[11:01:47.703]                   NAME <- NAMES[[kk]]
[11:01:47.703]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.703]                     next
[11:01:47.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.703]                 }
[11:01:47.703]                 NAMES <- toupper(added)
[11:01:47.703]                 for (kk in seq_along(NAMES)) {
[11:01:47.703]                   name <- added[[kk]]
[11:01:47.703]                   NAME <- NAMES[[kk]]
[11:01:47.703]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.703]                     next
[11:01:47.703]                   args[[name]] <- ""
[11:01:47.703]                 }
[11:01:47.703]                 NAMES <- toupper(removed)
[11:01:47.703]                 for (kk in seq_along(NAMES)) {
[11:01:47.703]                   name <- removed[[kk]]
[11:01:47.703]                   NAME <- NAMES[[kk]]
[11:01:47.703]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.703]                     next
[11:01:47.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.703]                 }
[11:01:47.703]                 if (length(args) > 0) 
[11:01:47.703]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.703]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.703]             }
[11:01:47.703]             else {
[11:01:47.703]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.703]             }
[11:01:47.703]             {
[11:01:47.703]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.703]                   0L) {
[11:01:47.703]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.703]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.703]                   base::options(opts)
[11:01:47.703]                 }
[11:01:47.703]                 {
[11:01:47.703]                   {
[11:01:47.703]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.703]                     NULL
[11:01:47.703]                   }
[11:01:47.703]                   options(future.plan = NULL)
[11:01:47.703]                   if (is.na(NA_character_)) 
[11:01:47.703]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.703]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.703]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.703]                     .init = FALSE)
[11:01:47.703]                 }
[11:01:47.703]             }
[11:01:47.703]         }
[11:01:47.703]     })
[11:01:47.703]     if (TRUE) {
[11:01:47.703]         base::sink(type = "output", split = FALSE)
[11:01:47.703]         if (TRUE) {
[11:01:47.703]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.703]         }
[11:01:47.703]         else {
[11:01:47.703]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.703]         }
[11:01:47.703]         base::close(...future.stdout)
[11:01:47.703]         ...future.stdout <- NULL
[11:01:47.703]     }
[11:01:47.703]     ...future.result$conditions <- ...future.conditions
[11:01:47.703]     ...future.result$finished <- base::Sys.time()
[11:01:47.703]     ...future.result
[11:01:47.703] }
[11:01:47.705] assign_globals() ...
[11:01:47.707] List of 1
[11:01:47.707]  $ x: list()
[11:01:47.707]  - attr(*, "where")=List of 1
[11:01:47.707]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.707]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.707]  - attr(*, "resolved")= logi TRUE
[11:01:47.707]  - attr(*, "total_size")= num 31
[11:01:47.707]  - attr(*, "already-done")= logi TRUE
[11:01:47.710] - copied ‘x’ to environment
[11:01:47.710] assign_globals() ... done
[11:01:47.711] requestCore(): workers = 2
[11:01:47.712] MulticoreFuture started
[11:01:47.713] - Launch lazy future ... done
[11:01:47.713] run() for ‘MulticoreFuture’ ... done
[11:01:47.713] result() for MulticoreFuture ...
[11:01:47.713] plan(): Setting new future strategy stack:
[11:01:47.714] List of future strategies:
[11:01:47.714] 1. sequential:
[11:01:47.714]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.714]    - tweaked: FALSE
[11:01:47.714]    - call: NULL
[11:01:47.715] plan(): nbrOfWorkers() = 1
[11:01:47.716] plan(): Setting new future strategy stack:
[11:01:47.717] List of future strategies:
[11:01:47.717] 1. multicore:
[11:01:47.717]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.717]    - tweaked: FALSE
[11:01:47.717]    - call: plan(strategy)
[11:01:47.720] plan(): nbrOfWorkers() = 2
[11:01:47.720] result() for MulticoreFuture ...
[11:01:47.721] result() for MulticoreFuture ... done
[11:01:47.721] result() for MulticoreFuture ... done
[11:01:47.721] result() for MulticoreFuture ...
[11:01:47.721] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.722] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.722] Searching for globals...
[11:01:47.724] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.725] Searching for globals ... DONE
[11:01:47.725] Resolving globals: TRUE
[11:01:47.725] Resolving any globals that are futures ...
[11:01:47.725] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:47.725] Resolving any globals that are futures ... DONE
[11:01:47.725] Resolving futures part of globals (recursively) ...
[11:01:47.726] resolve() on list ...
[11:01:47.726]  recursive: 99
[11:01:47.726]  length: 1
[11:01:47.726]  elements: ‘x’
[11:01:47.726]  length: 0 (resolved future 1)
[11:01:47.726] resolve() on list ... DONE
[11:01:47.726] - globals: [1] ‘x’
[11:01:47.727] Resolving futures part of globals (recursively) ... DONE
[11:01:47.727] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.727] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.727] - globals: [1] ‘x’
[11:01:47.727] 
[11:01:47.728] getGlobalsAndPackages() ... DONE
[11:01:47.728] run() for ‘Future’ ...
[11:01:47.728] - state: ‘created’
[11:01:47.728] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.730] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.730] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.730]   - Field: ‘label’
[11:01:47.730]   - Field: ‘local’
[11:01:47.731]   - Field: ‘owner’
[11:01:47.731]   - Field: ‘envir’
[11:01:47.731]   - Field: ‘workers’
[11:01:47.731]   - Field: ‘packages’
[11:01:47.731]   - Field: ‘gc’
[11:01:47.731]   - Field: ‘job’
[11:01:47.731]   - Field: ‘conditions’
[11:01:47.731]   - Field: ‘expr’
[11:01:47.731]   - Field: ‘uuid’
[11:01:47.732]   - Field: ‘seed’
[11:01:47.732]   - Field: ‘version’
[11:01:47.732]   - Field: ‘result’
[11:01:47.732]   - Field: ‘asynchronous’
[11:01:47.732]   - Field: ‘calls’
[11:01:47.732]   - Field: ‘globals’
[11:01:47.732]   - Field: ‘stdout’
[11:01:47.732]   - Field: ‘earlySignal’
[11:01:47.732]   - Field: ‘lazy’
[11:01:47.732]   - Field: ‘state’
[11:01:47.733] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.733] - Launch lazy future ...
[11:01:47.733] Packages needed by the future expression (n = 0): <none>
[11:01:47.733] Packages needed by future strategies (n = 0): <none>
[11:01:47.734] {
[11:01:47.734]     {
[11:01:47.734]         {
[11:01:47.734]             ...future.startTime <- base::Sys.time()
[11:01:47.734]             {
[11:01:47.734]                 {
[11:01:47.734]                   {
[11:01:47.734]                     {
[11:01:47.734]                       base::local({
[11:01:47.734]                         has_future <- base::requireNamespace("future", 
[11:01:47.734]                           quietly = TRUE)
[11:01:47.734]                         if (has_future) {
[11:01:47.734]                           ns <- base::getNamespace("future")
[11:01:47.734]                           version <- ns[[".package"]][["version"]]
[11:01:47.734]                           if (is.null(version)) 
[11:01:47.734]                             version <- utils::packageVersion("future")
[11:01:47.734]                         }
[11:01:47.734]                         else {
[11:01:47.734]                           version <- NULL
[11:01:47.734]                         }
[11:01:47.734]                         if (!has_future || version < "1.8.0") {
[11:01:47.734]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.734]                             "", base::R.version$version.string), 
[11:01:47.734]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.734]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.734]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.734]                               "release", "version")], collapse = " "), 
[11:01:47.734]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.734]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.734]                             info)
[11:01:47.734]                           info <- base::paste(info, collapse = "; ")
[11:01:47.734]                           if (!has_future) {
[11:01:47.734]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.734]                               info)
[11:01:47.734]                           }
[11:01:47.734]                           else {
[11:01:47.734]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.734]                               info, version)
[11:01:47.734]                           }
[11:01:47.734]                           base::stop(msg)
[11:01:47.734]                         }
[11:01:47.734]                       })
[11:01:47.734]                     }
[11:01:47.734]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.734]                     base::options(mc.cores = 1L)
[11:01:47.734]                   }
[11:01:47.734]                   ...future.strategy.old <- future::plan("list")
[11:01:47.734]                   options(future.plan = NULL)
[11:01:47.734]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.734]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.734]                 }
[11:01:47.734]                 ...future.workdir <- getwd()
[11:01:47.734]             }
[11:01:47.734]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.734]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.734]         }
[11:01:47.734]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.734]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.734]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.734]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.734]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.734]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.734]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.734]             base::names(...future.oldOptions))
[11:01:47.734]     }
[11:01:47.734]     if (FALSE) {
[11:01:47.734]     }
[11:01:47.734]     else {
[11:01:47.734]         if (TRUE) {
[11:01:47.734]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.734]                 open = "w")
[11:01:47.734]         }
[11:01:47.734]         else {
[11:01:47.734]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.734]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.734]         }
[11:01:47.734]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.734]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.734]             base::sink(type = "output", split = FALSE)
[11:01:47.734]             base::close(...future.stdout)
[11:01:47.734]         }, add = TRUE)
[11:01:47.734]     }
[11:01:47.734]     ...future.frame <- base::sys.nframe()
[11:01:47.734]     ...future.conditions <- base::list()
[11:01:47.734]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.734]     if (FALSE) {
[11:01:47.734]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.734]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.734]     }
[11:01:47.734]     ...future.result <- base::tryCatch({
[11:01:47.734]         base::withCallingHandlers({
[11:01:47.734]             ...future.value <- base::withVisible(base::local({
[11:01:47.734]                 withCallingHandlers({
[11:01:47.734]                   {
[11:01:47.734]                     x[["a"]] <- 1
[11:01:47.734]                     x
[11:01:47.734]                   }
[11:01:47.734]                 }, immediateCondition = function(cond) {
[11:01:47.734]                   save_rds <- function (object, pathname, ...) 
[11:01:47.734]                   {
[11:01:47.734]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.734]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.734]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.734]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.734]                         fi_tmp[["mtime"]])
[11:01:47.734]                     }
[11:01:47.734]                     tryCatch({
[11:01:47.734]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.734]                     }, error = function(ex) {
[11:01:47.734]                       msg <- conditionMessage(ex)
[11:01:47.734]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.734]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.734]                         fi_tmp[["mtime"]], msg)
[11:01:47.734]                       ex$message <- msg
[11:01:47.734]                       stop(ex)
[11:01:47.734]                     })
[11:01:47.734]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.734]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.734]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.734]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.734]                       fi <- file.info(pathname)
[11:01:47.734]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.734]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.734]                         fi[["size"]], fi[["mtime"]])
[11:01:47.734]                       stop(msg)
[11:01:47.734]                     }
[11:01:47.734]                     invisible(pathname)
[11:01:47.734]                   }
[11:01:47.734]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.734]                     rootPath = tempdir()) 
[11:01:47.734]                   {
[11:01:47.734]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.734]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.734]                       tmpdir = path, fileext = ".rds")
[11:01:47.734]                     save_rds(obj, file)
[11:01:47.734]                   }
[11:01:47.734]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.734]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.734]                   {
[11:01:47.734]                     inherits <- base::inherits
[11:01:47.734]                     invokeRestart <- base::invokeRestart
[11:01:47.734]                     is.null <- base::is.null
[11:01:47.734]                     muffled <- FALSE
[11:01:47.734]                     if (inherits(cond, "message")) {
[11:01:47.734]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.734]                       if (muffled) 
[11:01:47.734]                         invokeRestart("muffleMessage")
[11:01:47.734]                     }
[11:01:47.734]                     else if (inherits(cond, "warning")) {
[11:01:47.734]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.734]                       if (muffled) 
[11:01:47.734]                         invokeRestart("muffleWarning")
[11:01:47.734]                     }
[11:01:47.734]                     else if (inherits(cond, "condition")) {
[11:01:47.734]                       if (!is.null(pattern)) {
[11:01:47.734]                         computeRestarts <- base::computeRestarts
[11:01:47.734]                         grepl <- base::grepl
[11:01:47.734]                         restarts <- computeRestarts(cond)
[11:01:47.734]                         for (restart in restarts) {
[11:01:47.734]                           name <- restart$name
[11:01:47.734]                           if (is.null(name)) 
[11:01:47.734]                             next
[11:01:47.734]                           if (!grepl(pattern, name)) 
[11:01:47.734]                             next
[11:01:47.734]                           invokeRestart(restart)
[11:01:47.734]                           muffled <- TRUE
[11:01:47.734]                           break
[11:01:47.734]                         }
[11:01:47.734]                       }
[11:01:47.734]                     }
[11:01:47.734]                     invisible(muffled)
[11:01:47.734]                   }
[11:01:47.734]                   muffleCondition(cond)
[11:01:47.734]                 })
[11:01:47.734]             }))
[11:01:47.734]             future::FutureResult(value = ...future.value$value, 
[11:01:47.734]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.734]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.734]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.734]                     ...future.globalenv.names))
[11:01:47.734]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.734]         }, condition = base::local({
[11:01:47.734]             c <- base::c
[11:01:47.734]             inherits <- base::inherits
[11:01:47.734]             invokeRestart <- base::invokeRestart
[11:01:47.734]             length <- base::length
[11:01:47.734]             list <- base::list
[11:01:47.734]             seq.int <- base::seq.int
[11:01:47.734]             signalCondition <- base::signalCondition
[11:01:47.734]             sys.calls <- base::sys.calls
[11:01:47.734]             `[[` <- base::`[[`
[11:01:47.734]             `+` <- base::`+`
[11:01:47.734]             `<<-` <- base::`<<-`
[11:01:47.734]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.734]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.734]                   3L)]
[11:01:47.734]             }
[11:01:47.734]             function(cond) {
[11:01:47.734]                 is_error <- inherits(cond, "error")
[11:01:47.734]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.734]                   NULL)
[11:01:47.734]                 if (is_error) {
[11:01:47.734]                   sessionInformation <- function() {
[11:01:47.734]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.734]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.734]                       search = base::search(), system = base::Sys.info())
[11:01:47.734]                   }
[11:01:47.734]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.734]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.734]                     cond$call), session = sessionInformation(), 
[11:01:47.734]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.734]                   signalCondition(cond)
[11:01:47.734]                 }
[11:01:47.734]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.734]                 "immediateCondition"))) {
[11:01:47.734]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.734]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.734]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.734]                   if (TRUE && !signal) {
[11:01:47.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.734]                     {
[11:01:47.734]                       inherits <- base::inherits
[11:01:47.734]                       invokeRestart <- base::invokeRestart
[11:01:47.734]                       is.null <- base::is.null
[11:01:47.734]                       muffled <- FALSE
[11:01:47.734]                       if (inherits(cond, "message")) {
[11:01:47.734]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.734]                         if (muffled) 
[11:01:47.734]                           invokeRestart("muffleMessage")
[11:01:47.734]                       }
[11:01:47.734]                       else if (inherits(cond, "warning")) {
[11:01:47.734]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.734]                         if (muffled) 
[11:01:47.734]                           invokeRestart("muffleWarning")
[11:01:47.734]                       }
[11:01:47.734]                       else if (inherits(cond, "condition")) {
[11:01:47.734]                         if (!is.null(pattern)) {
[11:01:47.734]                           computeRestarts <- base::computeRestarts
[11:01:47.734]                           grepl <- base::grepl
[11:01:47.734]                           restarts <- computeRestarts(cond)
[11:01:47.734]                           for (restart in restarts) {
[11:01:47.734]                             name <- restart$name
[11:01:47.734]                             if (is.null(name)) 
[11:01:47.734]                               next
[11:01:47.734]                             if (!grepl(pattern, name)) 
[11:01:47.734]                               next
[11:01:47.734]                             invokeRestart(restart)
[11:01:47.734]                             muffled <- TRUE
[11:01:47.734]                             break
[11:01:47.734]                           }
[11:01:47.734]                         }
[11:01:47.734]                       }
[11:01:47.734]                       invisible(muffled)
[11:01:47.734]                     }
[11:01:47.734]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.734]                   }
[11:01:47.734]                 }
[11:01:47.734]                 else {
[11:01:47.734]                   if (TRUE) {
[11:01:47.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.734]                     {
[11:01:47.734]                       inherits <- base::inherits
[11:01:47.734]                       invokeRestart <- base::invokeRestart
[11:01:47.734]                       is.null <- base::is.null
[11:01:47.734]                       muffled <- FALSE
[11:01:47.734]                       if (inherits(cond, "message")) {
[11:01:47.734]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.734]                         if (muffled) 
[11:01:47.734]                           invokeRestart("muffleMessage")
[11:01:47.734]                       }
[11:01:47.734]                       else if (inherits(cond, "warning")) {
[11:01:47.734]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.734]                         if (muffled) 
[11:01:47.734]                           invokeRestart("muffleWarning")
[11:01:47.734]                       }
[11:01:47.734]                       else if (inherits(cond, "condition")) {
[11:01:47.734]                         if (!is.null(pattern)) {
[11:01:47.734]                           computeRestarts <- base::computeRestarts
[11:01:47.734]                           grepl <- base::grepl
[11:01:47.734]                           restarts <- computeRestarts(cond)
[11:01:47.734]                           for (restart in restarts) {
[11:01:47.734]                             name <- restart$name
[11:01:47.734]                             if (is.null(name)) 
[11:01:47.734]                               next
[11:01:47.734]                             if (!grepl(pattern, name)) 
[11:01:47.734]                               next
[11:01:47.734]                             invokeRestart(restart)
[11:01:47.734]                             muffled <- TRUE
[11:01:47.734]                             break
[11:01:47.734]                           }
[11:01:47.734]                         }
[11:01:47.734]                       }
[11:01:47.734]                       invisible(muffled)
[11:01:47.734]                     }
[11:01:47.734]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.734]                   }
[11:01:47.734]                 }
[11:01:47.734]             }
[11:01:47.734]         }))
[11:01:47.734]     }, error = function(ex) {
[11:01:47.734]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.734]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.734]                 ...future.rng), started = ...future.startTime, 
[11:01:47.734]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.734]             version = "1.8"), class = "FutureResult")
[11:01:47.734]     }, finally = {
[11:01:47.734]         if (!identical(...future.workdir, getwd())) 
[11:01:47.734]             setwd(...future.workdir)
[11:01:47.734]         {
[11:01:47.734]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.734]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.734]             }
[11:01:47.734]             base::options(...future.oldOptions)
[11:01:47.734]             if (.Platform$OS.type == "windows") {
[11:01:47.734]                 old_names <- names(...future.oldEnvVars)
[11:01:47.734]                 envs <- base::Sys.getenv()
[11:01:47.734]                 names <- names(envs)
[11:01:47.734]                 common <- intersect(names, old_names)
[11:01:47.734]                 added <- setdiff(names, old_names)
[11:01:47.734]                 removed <- setdiff(old_names, names)
[11:01:47.734]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.734]                   envs[common]]
[11:01:47.734]                 NAMES <- toupper(changed)
[11:01:47.734]                 args <- list()
[11:01:47.734]                 for (kk in seq_along(NAMES)) {
[11:01:47.734]                   name <- changed[[kk]]
[11:01:47.734]                   NAME <- NAMES[[kk]]
[11:01:47.734]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.734]                     next
[11:01:47.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.734]                 }
[11:01:47.734]                 NAMES <- toupper(added)
[11:01:47.734]                 for (kk in seq_along(NAMES)) {
[11:01:47.734]                   name <- added[[kk]]
[11:01:47.734]                   NAME <- NAMES[[kk]]
[11:01:47.734]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.734]                     next
[11:01:47.734]                   args[[name]] <- ""
[11:01:47.734]                 }
[11:01:47.734]                 NAMES <- toupper(removed)
[11:01:47.734]                 for (kk in seq_along(NAMES)) {
[11:01:47.734]                   name <- removed[[kk]]
[11:01:47.734]                   NAME <- NAMES[[kk]]
[11:01:47.734]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.734]                     next
[11:01:47.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.734]                 }
[11:01:47.734]                 if (length(args) > 0) 
[11:01:47.734]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.734]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.734]             }
[11:01:47.734]             else {
[11:01:47.734]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.734]             }
[11:01:47.734]             {
[11:01:47.734]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.734]                   0L) {
[11:01:47.734]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.734]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.734]                   base::options(opts)
[11:01:47.734]                 }
[11:01:47.734]                 {
[11:01:47.734]                   {
[11:01:47.734]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.734]                     NULL
[11:01:47.734]                   }
[11:01:47.734]                   options(future.plan = NULL)
[11:01:47.734]                   if (is.na(NA_character_)) 
[11:01:47.734]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.734]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.734]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.734]                     .init = FALSE)
[11:01:47.734]                 }
[11:01:47.734]             }
[11:01:47.734]         }
[11:01:47.734]     })
[11:01:47.734]     if (TRUE) {
[11:01:47.734]         base::sink(type = "output", split = FALSE)
[11:01:47.734]         if (TRUE) {
[11:01:47.734]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.734]         }
[11:01:47.734]         else {
[11:01:47.734]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.734]         }
[11:01:47.734]         base::close(...future.stdout)
[11:01:47.734]         ...future.stdout <- NULL
[11:01:47.734]     }
[11:01:47.734]     ...future.result$conditions <- ...future.conditions
[11:01:47.734]     ...future.result$finished <- base::Sys.time()
[11:01:47.734]     ...future.result
[11:01:47.734] }
[11:01:47.736] assign_globals() ...
[11:01:47.736] List of 1
[11:01:47.736]  $ x: list()
[11:01:47.736]  - attr(*, "where")=List of 1
[11:01:47.736]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.736]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.736]  - attr(*, "resolved")= logi TRUE
[11:01:47.736]  - attr(*, "total_size")= num 31
[11:01:47.736]  - attr(*, "already-done")= logi TRUE
[11:01:47.739] - copied ‘x’ to environment
[11:01:47.739] assign_globals() ... done
[11:01:47.739] requestCore(): workers = 2
[11:01:47.741] MulticoreFuture started
[11:01:47.741] - Launch lazy future ... done
[11:01:47.742] run() for ‘MulticoreFuture’ ... done
[11:01:47.742] result() for MulticoreFuture ...
[11:01:47.742] plan(): Setting new future strategy stack:
[11:01:47.742] List of future strategies:
[11:01:47.742] 1. sequential:
[11:01:47.742]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.742]    - tweaked: FALSE
[11:01:47.742]    - call: NULL
[11:01:47.743] plan(): nbrOfWorkers() = 1
[11:01:47.745] plan(): Setting new future strategy stack:
[11:01:47.745] List of future strategies:
[11:01:47.745] 1. multicore:
[11:01:47.745]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.745]    - tweaked: FALSE
[11:01:47.745]    - call: plan(strategy)
[11:01:47.748] plan(): nbrOfWorkers() = 2
[11:01:47.749] result() for MulticoreFuture ...
[11:01:47.749] result() for MulticoreFuture ... done
[11:01:47.749] result() for MulticoreFuture ... done
[11:01:47.750] result() for MulticoreFuture ...
[11:01:47.750] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.750] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.751] Searching for globals...
[11:01:47.753] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.753] Searching for globals ... DONE
[11:01:47.754] Resolving globals: TRUE
[11:01:47.754] Resolving any globals that are futures ...
[11:01:47.754] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.754] Resolving any globals that are futures ... DONE
[11:01:47.754] Resolving futures part of globals (recursively) ...
[11:01:47.757] resolve() on list ...
[11:01:47.757]  recursive: 99
[11:01:47.757]  length: 1
[11:01:47.757]  elements: ‘x’
[11:01:47.757]  length: 0 (resolved future 1)
[11:01:47.757] resolve() on list ... DONE
[11:01:47.758] - globals: [1] ‘x’
[11:01:47.758] Resolving futures part of globals (recursively) ... DONE
[11:01:47.758] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.758] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.759] - globals: [1] ‘x’
[11:01:47.759] 
[11:01:47.759] getGlobalsAndPackages() ... DONE
[11:01:47.759] run() for ‘Future’ ...
[11:01:47.759] - state: ‘created’
[11:01:47.759] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.761] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.762] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.762]   - Field: ‘label’
[11:01:47.762]   - Field: ‘local’
[11:01:47.762]   - Field: ‘owner’
[11:01:47.762]   - Field: ‘envir’
[11:01:47.762]   - Field: ‘workers’
[11:01:47.762]   - Field: ‘packages’
[11:01:47.762]   - Field: ‘gc’
[11:01:47.762]   - Field: ‘job’
[11:01:47.763]   - Field: ‘conditions’
[11:01:47.763]   - Field: ‘expr’
[11:01:47.763]   - Field: ‘uuid’
[11:01:47.763]   - Field: ‘seed’
[11:01:47.763]   - Field: ‘version’
[11:01:47.763]   - Field: ‘result’
[11:01:47.763]   - Field: ‘asynchronous’
[11:01:47.763]   - Field: ‘calls’
[11:01:47.763]   - Field: ‘globals’
[11:01:47.763]   - Field: ‘stdout’
[11:01:47.764]   - Field: ‘earlySignal’
[11:01:47.764]   - Field: ‘lazy’
[11:01:47.764]   - Field: ‘state’
[11:01:47.764] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.764] - Launch lazy future ...
[11:01:47.764] Packages needed by the future expression (n = 0): <none>
[11:01:47.764] Packages needed by future strategies (n = 0): <none>
[11:01:47.765] {
[11:01:47.765]     {
[11:01:47.765]         {
[11:01:47.765]             ...future.startTime <- base::Sys.time()
[11:01:47.765]             {
[11:01:47.765]                 {
[11:01:47.765]                   {
[11:01:47.765]                     {
[11:01:47.765]                       base::local({
[11:01:47.765]                         has_future <- base::requireNamespace("future", 
[11:01:47.765]                           quietly = TRUE)
[11:01:47.765]                         if (has_future) {
[11:01:47.765]                           ns <- base::getNamespace("future")
[11:01:47.765]                           version <- ns[[".package"]][["version"]]
[11:01:47.765]                           if (is.null(version)) 
[11:01:47.765]                             version <- utils::packageVersion("future")
[11:01:47.765]                         }
[11:01:47.765]                         else {
[11:01:47.765]                           version <- NULL
[11:01:47.765]                         }
[11:01:47.765]                         if (!has_future || version < "1.8.0") {
[11:01:47.765]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.765]                             "", base::R.version$version.string), 
[11:01:47.765]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.765]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.765]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.765]                               "release", "version")], collapse = " "), 
[11:01:47.765]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.765]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.765]                             info)
[11:01:47.765]                           info <- base::paste(info, collapse = "; ")
[11:01:47.765]                           if (!has_future) {
[11:01:47.765]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.765]                               info)
[11:01:47.765]                           }
[11:01:47.765]                           else {
[11:01:47.765]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.765]                               info, version)
[11:01:47.765]                           }
[11:01:47.765]                           base::stop(msg)
[11:01:47.765]                         }
[11:01:47.765]                       })
[11:01:47.765]                     }
[11:01:47.765]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.765]                     base::options(mc.cores = 1L)
[11:01:47.765]                   }
[11:01:47.765]                   ...future.strategy.old <- future::plan("list")
[11:01:47.765]                   options(future.plan = NULL)
[11:01:47.765]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.765]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.765]                 }
[11:01:47.765]                 ...future.workdir <- getwd()
[11:01:47.765]             }
[11:01:47.765]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.765]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.765]         }
[11:01:47.765]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.765]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.765]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.765]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.765]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.765]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.765]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.765]             base::names(...future.oldOptions))
[11:01:47.765]     }
[11:01:47.765]     if (FALSE) {
[11:01:47.765]     }
[11:01:47.765]     else {
[11:01:47.765]         if (TRUE) {
[11:01:47.765]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.765]                 open = "w")
[11:01:47.765]         }
[11:01:47.765]         else {
[11:01:47.765]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.765]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.765]         }
[11:01:47.765]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.765]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.765]             base::sink(type = "output", split = FALSE)
[11:01:47.765]             base::close(...future.stdout)
[11:01:47.765]         }, add = TRUE)
[11:01:47.765]     }
[11:01:47.765]     ...future.frame <- base::sys.nframe()
[11:01:47.765]     ...future.conditions <- base::list()
[11:01:47.765]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.765]     if (FALSE) {
[11:01:47.765]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.765]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.765]     }
[11:01:47.765]     ...future.result <- base::tryCatch({
[11:01:47.765]         base::withCallingHandlers({
[11:01:47.765]             ...future.value <- base::withVisible(base::local({
[11:01:47.765]                 withCallingHandlers({
[11:01:47.765]                   {
[11:01:47.765]                     x["a"] <- list(1)
[11:01:47.765]                     x
[11:01:47.765]                   }
[11:01:47.765]                 }, immediateCondition = function(cond) {
[11:01:47.765]                   save_rds <- function (object, pathname, ...) 
[11:01:47.765]                   {
[11:01:47.765]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.765]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.765]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.765]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.765]                         fi_tmp[["mtime"]])
[11:01:47.765]                     }
[11:01:47.765]                     tryCatch({
[11:01:47.765]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.765]                     }, error = function(ex) {
[11:01:47.765]                       msg <- conditionMessage(ex)
[11:01:47.765]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.765]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.765]                         fi_tmp[["mtime"]], msg)
[11:01:47.765]                       ex$message <- msg
[11:01:47.765]                       stop(ex)
[11:01:47.765]                     })
[11:01:47.765]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.765]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.765]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.765]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.765]                       fi <- file.info(pathname)
[11:01:47.765]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.765]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.765]                         fi[["size"]], fi[["mtime"]])
[11:01:47.765]                       stop(msg)
[11:01:47.765]                     }
[11:01:47.765]                     invisible(pathname)
[11:01:47.765]                   }
[11:01:47.765]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.765]                     rootPath = tempdir()) 
[11:01:47.765]                   {
[11:01:47.765]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.765]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.765]                       tmpdir = path, fileext = ".rds")
[11:01:47.765]                     save_rds(obj, file)
[11:01:47.765]                   }
[11:01:47.765]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.765]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.765]                   {
[11:01:47.765]                     inherits <- base::inherits
[11:01:47.765]                     invokeRestart <- base::invokeRestart
[11:01:47.765]                     is.null <- base::is.null
[11:01:47.765]                     muffled <- FALSE
[11:01:47.765]                     if (inherits(cond, "message")) {
[11:01:47.765]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.765]                       if (muffled) 
[11:01:47.765]                         invokeRestart("muffleMessage")
[11:01:47.765]                     }
[11:01:47.765]                     else if (inherits(cond, "warning")) {
[11:01:47.765]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.765]                       if (muffled) 
[11:01:47.765]                         invokeRestart("muffleWarning")
[11:01:47.765]                     }
[11:01:47.765]                     else if (inherits(cond, "condition")) {
[11:01:47.765]                       if (!is.null(pattern)) {
[11:01:47.765]                         computeRestarts <- base::computeRestarts
[11:01:47.765]                         grepl <- base::grepl
[11:01:47.765]                         restarts <- computeRestarts(cond)
[11:01:47.765]                         for (restart in restarts) {
[11:01:47.765]                           name <- restart$name
[11:01:47.765]                           if (is.null(name)) 
[11:01:47.765]                             next
[11:01:47.765]                           if (!grepl(pattern, name)) 
[11:01:47.765]                             next
[11:01:47.765]                           invokeRestart(restart)
[11:01:47.765]                           muffled <- TRUE
[11:01:47.765]                           break
[11:01:47.765]                         }
[11:01:47.765]                       }
[11:01:47.765]                     }
[11:01:47.765]                     invisible(muffled)
[11:01:47.765]                   }
[11:01:47.765]                   muffleCondition(cond)
[11:01:47.765]                 })
[11:01:47.765]             }))
[11:01:47.765]             future::FutureResult(value = ...future.value$value, 
[11:01:47.765]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.765]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.765]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.765]                     ...future.globalenv.names))
[11:01:47.765]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.765]         }, condition = base::local({
[11:01:47.765]             c <- base::c
[11:01:47.765]             inherits <- base::inherits
[11:01:47.765]             invokeRestart <- base::invokeRestart
[11:01:47.765]             length <- base::length
[11:01:47.765]             list <- base::list
[11:01:47.765]             seq.int <- base::seq.int
[11:01:47.765]             signalCondition <- base::signalCondition
[11:01:47.765]             sys.calls <- base::sys.calls
[11:01:47.765]             `[[` <- base::`[[`
[11:01:47.765]             `+` <- base::`+`
[11:01:47.765]             `<<-` <- base::`<<-`
[11:01:47.765]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.765]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.765]                   3L)]
[11:01:47.765]             }
[11:01:47.765]             function(cond) {
[11:01:47.765]                 is_error <- inherits(cond, "error")
[11:01:47.765]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.765]                   NULL)
[11:01:47.765]                 if (is_error) {
[11:01:47.765]                   sessionInformation <- function() {
[11:01:47.765]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.765]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.765]                       search = base::search(), system = base::Sys.info())
[11:01:47.765]                   }
[11:01:47.765]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.765]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.765]                     cond$call), session = sessionInformation(), 
[11:01:47.765]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.765]                   signalCondition(cond)
[11:01:47.765]                 }
[11:01:47.765]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.765]                 "immediateCondition"))) {
[11:01:47.765]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.765]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.765]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.765]                   if (TRUE && !signal) {
[11:01:47.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.765]                     {
[11:01:47.765]                       inherits <- base::inherits
[11:01:47.765]                       invokeRestart <- base::invokeRestart
[11:01:47.765]                       is.null <- base::is.null
[11:01:47.765]                       muffled <- FALSE
[11:01:47.765]                       if (inherits(cond, "message")) {
[11:01:47.765]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.765]                         if (muffled) 
[11:01:47.765]                           invokeRestart("muffleMessage")
[11:01:47.765]                       }
[11:01:47.765]                       else if (inherits(cond, "warning")) {
[11:01:47.765]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.765]                         if (muffled) 
[11:01:47.765]                           invokeRestart("muffleWarning")
[11:01:47.765]                       }
[11:01:47.765]                       else if (inherits(cond, "condition")) {
[11:01:47.765]                         if (!is.null(pattern)) {
[11:01:47.765]                           computeRestarts <- base::computeRestarts
[11:01:47.765]                           grepl <- base::grepl
[11:01:47.765]                           restarts <- computeRestarts(cond)
[11:01:47.765]                           for (restart in restarts) {
[11:01:47.765]                             name <- restart$name
[11:01:47.765]                             if (is.null(name)) 
[11:01:47.765]                               next
[11:01:47.765]                             if (!grepl(pattern, name)) 
[11:01:47.765]                               next
[11:01:47.765]                             invokeRestart(restart)
[11:01:47.765]                             muffled <- TRUE
[11:01:47.765]                             break
[11:01:47.765]                           }
[11:01:47.765]                         }
[11:01:47.765]                       }
[11:01:47.765]                       invisible(muffled)
[11:01:47.765]                     }
[11:01:47.765]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.765]                   }
[11:01:47.765]                 }
[11:01:47.765]                 else {
[11:01:47.765]                   if (TRUE) {
[11:01:47.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.765]                     {
[11:01:47.765]                       inherits <- base::inherits
[11:01:47.765]                       invokeRestart <- base::invokeRestart
[11:01:47.765]                       is.null <- base::is.null
[11:01:47.765]                       muffled <- FALSE
[11:01:47.765]                       if (inherits(cond, "message")) {
[11:01:47.765]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.765]                         if (muffled) 
[11:01:47.765]                           invokeRestart("muffleMessage")
[11:01:47.765]                       }
[11:01:47.765]                       else if (inherits(cond, "warning")) {
[11:01:47.765]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.765]                         if (muffled) 
[11:01:47.765]                           invokeRestart("muffleWarning")
[11:01:47.765]                       }
[11:01:47.765]                       else if (inherits(cond, "condition")) {
[11:01:47.765]                         if (!is.null(pattern)) {
[11:01:47.765]                           computeRestarts <- base::computeRestarts
[11:01:47.765]                           grepl <- base::grepl
[11:01:47.765]                           restarts <- computeRestarts(cond)
[11:01:47.765]                           for (restart in restarts) {
[11:01:47.765]                             name <- restart$name
[11:01:47.765]                             if (is.null(name)) 
[11:01:47.765]                               next
[11:01:47.765]                             if (!grepl(pattern, name)) 
[11:01:47.765]                               next
[11:01:47.765]                             invokeRestart(restart)
[11:01:47.765]                             muffled <- TRUE
[11:01:47.765]                             break
[11:01:47.765]                           }
[11:01:47.765]                         }
[11:01:47.765]                       }
[11:01:47.765]                       invisible(muffled)
[11:01:47.765]                     }
[11:01:47.765]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.765]                   }
[11:01:47.765]                 }
[11:01:47.765]             }
[11:01:47.765]         }))
[11:01:47.765]     }, error = function(ex) {
[11:01:47.765]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.765]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.765]                 ...future.rng), started = ...future.startTime, 
[11:01:47.765]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.765]             version = "1.8"), class = "FutureResult")
[11:01:47.765]     }, finally = {
[11:01:47.765]         if (!identical(...future.workdir, getwd())) 
[11:01:47.765]             setwd(...future.workdir)
[11:01:47.765]         {
[11:01:47.765]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.765]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.765]             }
[11:01:47.765]             base::options(...future.oldOptions)
[11:01:47.765]             if (.Platform$OS.type == "windows") {
[11:01:47.765]                 old_names <- names(...future.oldEnvVars)
[11:01:47.765]                 envs <- base::Sys.getenv()
[11:01:47.765]                 names <- names(envs)
[11:01:47.765]                 common <- intersect(names, old_names)
[11:01:47.765]                 added <- setdiff(names, old_names)
[11:01:47.765]                 removed <- setdiff(old_names, names)
[11:01:47.765]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.765]                   envs[common]]
[11:01:47.765]                 NAMES <- toupper(changed)
[11:01:47.765]                 args <- list()
[11:01:47.765]                 for (kk in seq_along(NAMES)) {
[11:01:47.765]                   name <- changed[[kk]]
[11:01:47.765]                   NAME <- NAMES[[kk]]
[11:01:47.765]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.765]                     next
[11:01:47.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.765]                 }
[11:01:47.765]                 NAMES <- toupper(added)
[11:01:47.765]                 for (kk in seq_along(NAMES)) {
[11:01:47.765]                   name <- added[[kk]]
[11:01:47.765]                   NAME <- NAMES[[kk]]
[11:01:47.765]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.765]                     next
[11:01:47.765]                   args[[name]] <- ""
[11:01:47.765]                 }
[11:01:47.765]                 NAMES <- toupper(removed)
[11:01:47.765]                 for (kk in seq_along(NAMES)) {
[11:01:47.765]                   name <- removed[[kk]]
[11:01:47.765]                   NAME <- NAMES[[kk]]
[11:01:47.765]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.765]                     next
[11:01:47.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.765]                 }
[11:01:47.765]                 if (length(args) > 0) 
[11:01:47.765]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.765]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.765]             }
[11:01:47.765]             else {
[11:01:47.765]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.765]             }
[11:01:47.765]             {
[11:01:47.765]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.765]                   0L) {
[11:01:47.765]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.765]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.765]                   base::options(opts)
[11:01:47.765]                 }
[11:01:47.765]                 {
[11:01:47.765]                   {
[11:01:47.765]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.765]                     NULL
[11:01:47.765]                   }
[11:01:47.765]                   options(future.plan = NULL)
[11:01:47.765]                   if (is.na(NA_character_)) 
[11:01:47.765]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.765]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.765]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.765]                     .init = FALSE)
[11:01:47.765]                 }
[11:01:47.765]             }
[11:01:47.765]         }
[11:01:47.765]     })
[11:01:47.765]     if (TRUE) {
[11:01:47.765]         base::sink(type = "output", split = FALSE)
[11:01:47.765]         if (TRUE) {
[11:01:47.765]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.765]         }
[11:01:47.765]         else {
[11:01:47.765]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.765]         }
[11:01:47.765]         base::close(...future.stdout)
[11:01:47.765]         ...future.stdout <- NULL
[11:01:47.765]     }
[11:01:47.765]     ...future.result$conditions <- ...future.conditions
[11:01:47.765]     ...future.result$finished <- base::Sys.time()
[11:01:47.765]     ...future.result
[11:01:47.765] }
[11:01:47.767] assign_globals() ...
[11:01:47.768] List of 1
[11:01:47.768]  $ x: list()
[11:01:47.768]  - attr(*, "where")=List of 1
[11:01:47.768]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.768]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.768]  - attr(*, "resolved")= logi TRUE
[11:01:47.768]  - attr(*, "total_size")= num 31
[11:01:47.768]  - attr(*, "already-done")= logi TRUE
[11:01:47.770] - copied ‘x’ to environment
[11:01:47.770] assign_globals() ... done
[11:01:47.771] requestCore(): workers = 2
[11:01:47.772] MulticoreFuture started
[11:01:47.772] - Launch lazy future ... done
[11:01:47.773] run() for ‘MulticoreFuture’ ... done
[11:01:47.773] result() for MulticoreFuture ...
[11:01:47.773] plan(): Setting new future strategy stack:
[11:01:47.773] List of future strategies:
[11:01:47.773] 1. sequential:
[11:01:47.773]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.773]    - tweaked: FALSE
[11:01:47.773]    - call: NULL
[11:01:47.774] plan(): nbrOfWorkers() = 1
[11:01:47.776] plan(): Setting new future strategy stack:
[11:01:47.776] List of future strategies:
[11:01:47.776] 1. multicore:
[11:01:47.776]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.776]    - tweaked: FALSE
[11:01:47.776]    - call: plan(strategy)
[11:01:47.779] plan(): nbrOfWorkers() = 2
[11:01:47.780] result() for MulticoreFuture ...
[11:01:47.780] result() for MulticoreFuture ... done
[11:01:47.781] result() for MulticoreFuture ... done
[11:01:47.781] result() for MulticoreFuture ...
[11:01:47.781] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.781] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.782] Searching for globals...
[11:01:47.784] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.784] Searching for globals ... DONE
[11:01:47.785] Resolving globals: TRUE
[11:01:47.785] Resolving any globals that are futures ...
[11:01:47.785] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.785] Resolving any globals that are futures ... DONE
[11:01:47.785] Resolving futures part of globals (recursively) ...
[11:01:47.786] resolve() on list ...
[11:01:47.786]  recursive: 99
[11:01:47.786]  length: 1
[11:01:47.786]  elements: ‘x’
[11:01:47.786]  length: 0 (resolved future 1)
[11:01:47.786] resolve() on list ... DONE
[11:01:47.786] - globals: [1] ‘x’
[11:01:47.786] Resolving futures part of globals (recursively) ... DONE
[11:01:47.787] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.787] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.787] - globals: [1] ‘x’
[11:01:47.787] 
[11:01:47.787] getGlobalsAndPackages() ... DONE
[11:01:47.788] run() for ‘Future’ ...
[11:01:47.788] - state: ‘created’
[11:01:47.788] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.790] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.790] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.790]   - Field: ‘label’
[11:01:47.790]   - Field: ‘local’
[11:01:47.791]   - Field: ‘owner’
[11:01:47.791]   - Field: ‘envir’
[11:01:47.791]   - Field: ‘workers’
[11:01:47.791]   - Field: ‘packages’
[11:01:47.791]   - Field: ‘gc’
[11:01:47.791]   - Field: ‘job’
[11:01:47.791]   - Field: ‘conditions’
[11:01:47.791]   - Field: ‘expr’
[11:01:47.791]   - Field: ‘uuid’
[11:01:47.791]   - Field: ‘seed’
[11:01:47.792]   - Field: ‘version’
[11:01:47.792]   - Field: ‘result’
[11:01:47.792]   - Field: ‘asynchronous’
[11:01:47.792]   - Field: ‘calls’
[11:01:47.792]   - Field: ‘globals’
[11:01:47.792]   - Field: ‘stdout’
[11:01:47.792]   - Field: ‘earlySignal’
[11:01:47.792]   - Field: ‘lazy’
[11:01:47.792]   - Field: ‘state’
[11:01:47.792] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.793] - Launch lazy future ...
[11:01:47.793] Packages needed by the future expression (n = 0): <none>
[11:01:47.793] Packages needed by future strategies (n = 0): <none>
[11:01:47.794] {
[11:01:47.794]     {
[11:01:47.794]         {
[11:01:47.794]             ...future.startTime <- base::Sys.time()
[11:01:47.794]             {
[11:01:47.794]                 {
[11:01:47.794]                   {
[11:01:47.794]                     {
[11:01:47.794]                       base::local({
[11:01:47.794]                         has_future <- base::requireNamespace("future", 
[11:01:47.794]                           quietly = TRUE)
[11:01:47.794]                         if (has_future) {
[11:01:47.794]                           ns <- base::getNamespace("future")
[11:01:47.794]                           version <- ns[[".package"]][["version"]]
[11:01:47.794]                           if (is.null(version)) 
[11:01:47.794]                             version <- utils::packageVersion("future")
[11:01:47.794]                         }
[11:01:47.794]                         else {
[11:01:47.794]                           version <- NULL
[11:01:47.794]                         }
[11:01:47.794]                         if (!has_future || version < "1.8.0") {
[11:01:47.794]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.794]                             "", base::R.version$version.string), 
[11:01:47.794]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.794]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.794]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.794]                               "release", "version")], collapse = " "), 
[11:01:47.794]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.794]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.794]                             info)
[11:01:47.794]                           info <- base::paste(info, collapse = "; ")
[11:01:47.794]                           if (!has_future) {
[11:01:47.794]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.794]                               info)
[11:01:47.794]                           }
[11:01:47.794]                           else {
[11:01:47.794]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.794]                               info, version)
[11:01:47.794]                           }
[11:01:47.794]                           base::stop(msg)
[11:01:47.794]                         }
[11:01:47.794]                       })
[11:01:47.794]                     }
[11:01:47.794]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.794]                     base::options(mc.cores = 1L)
[11:01:47.794]                   }
[11:01:47.794]                   ...future.strategy.old <- future::plan("list")
[11:01:47.794]                   options(future.plan = NULL)
[11:01:47.794]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.794]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.794]                 }
[11:01:47.794]                 ...future.workdir <- getwd()
[11:01:47.794]             }
[11:01:47.794]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.794]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.794]         }
[11:01:47.794]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.794]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.794]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.794]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.794]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.794]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.794]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.794]             base::names(...future.oldOptions))
[11:01:47.794]     }
[11:01:47.794]     if (FALSE) {
[11:01:47.794]     }
[11:01:47.794]     else {
[11:01:47.794]         if (TRUE) {
[11:01:47.794]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.794]                 open = "w")
[11:01:47.794]         }
[11:01:47.794]         else {
[11:01:47.794]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.794]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.794]         }
[11:01:47.794]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.794]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.794]             base::sink(type = "output", split = FALSE)
[11:01:47.794]             base::close(...future.stdout)
[11:01:47.794]         }, add = TRUE)
[11:01:47.794]     }
[11:01:47.794]     ...future.frame <- base::sys.nframe()
[11:01:47.794]     ...future.conditions <- base::list()
[11:01:47.794]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.794]     if (FALSE) {
[11:01:47.794]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.794]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.794]     }
[11:01:47.794]     ...future.result <- base::tryCatch({
[11:01:47.794]         base::withCallingHandlers({
[11:01:47.794]             ...future.value <- base::withVisible(base::local({
[11:01:47.794]                 withCallingHandlers({
[11:01:47.794]                   {
[11:01:47.794]                     x["a"] <- list(1)
[11:01:47.794]                     x
[11:01:47.794]                   }
[11:01:47.794]                 }, immediateCondition = function(cond) {
[11:01:47.794]                   save_rds <- function (object, pathname, ...) 
[11:01:47.794]                   {
[11:01:47.794]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.794]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.794]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.794]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.794]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.794]                         fi_tmp[["mtime"]])
[11:01:47.794]                     }
[11:01:47.794]                     tryCatch({
[11:01:47.794]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.794]                     }, error = function(ex) {
[11:01:47.794]                       msg <- conditionMessage(ex)
[11:01:47.794]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.794]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.794]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.794]                         fi_tmp[["mtime"]], msg)
[11:01:47.794]                       ex$message <- msg
[11:01:47.794]                       stop(ex)
[11:01:47.794]                     })
[11:01:47.794]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.794]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.794]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.794]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.794]                       fi <- file.info(pathname)
[11:01:47.794]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.794]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.794]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.794]                         fi[["size"]], fi[["mtime"]])
[11:01:47.794]                       stop(msg)
[11:01:47.794]                     }
[11:01:47.794]                     invisible(pathname)
[11:01:47.794]                   }
[11:01:47.794]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.794]                     rootPath = tempdir()) 
[11:01:47.794]                   {
[11:01:47.794]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.794]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.794]                       tmpdir = path, fileext = ".rds")
[11:01:47.794]                     save_rds(obj, file)
[11:01:47.794]                   }
[11:01:47.794]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.794]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.794]                   {
[11:01:47.794]                     inherits <- base::inherits
[11:01:47.794]                     invokeRestart <- base::invokeRestart
[11:01:47.794]                     is.null <- base::is.null
[11:01:47.794]                     muffled <- FALSE
[11:01:47.794]                     if (inherits(cond, "message")) {
[11:01:47.794]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.794]                       if (muffled) 
[11:01:47.794]                         invokeRestart("muffleMessage")
[11:01:47.794]                     }
[11:01:47.794]                     else if (inherits(cond, "warning")) {
[11:01:47.794]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.794]                       if (muffled) 
[11:01:47.794]                         invokeRestart("muffleWarning")
[11:01:47.794]                     }
[11:01:47.794]                     else if (inherits(cond, "condition")) {
[11:01:47.794]                       if (!is.null(pattern)) {
[11:01:47.794]                         computeRestarts <- base::computeRestarts
[11:01:47.794]                         grepl <- base::grepl
[11:01:47.794]                         restarts <- computeRestarts(cond)
[11:01:47.794]                         for (restart in restarts) {
[11:01:47.794]                           name <- restart$name
[11:01:47.794]                           if (is.null(name)) 
[11:01:47.794]                             next
[11:01:47.794]                           if (!grepl(pattern, name)) 
[11:01:47.794]                             next
[11:01:47.794]                           invokeRestart(restart)
[11:01:47.794]                           muffled <- TRUE
[11:01:47.794]                           break
[11:01:47.794]                         }
[11:01:47.794]                       }
[11:01:47.794]                     }
[11:01:47.794]                     invisible(muffled)
[11:01:47.794]                   }
[11:01:47.794]                   muffleCondition(cond)
[11:01:47.794]                 })
[11:01:47.794]             }))
[11:01:47.794]             future::FutureResult(value = ...future.value$value, 
[11:01:47.794]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.794]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.794]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.794]                     ...future.globalenv.names))
[11:01:47.794]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.794]         }, condition = base::local({
[11:01:47.794]             c <- base::c
[11:01:47.794]             inherits <- base::inherits
[11:01:47.794]             invokeRestart <- base::invokeRestart
[11:01:47.794]             length <- base::length
[11:01:47.794]             list <- base::list
[11:01:47.794]             seq.int <- base::seq.int
[11:01:47.794]             signalCondition <- base::signalCondition
[11:01:47.794]             sys.calls <- base::sys.calls
[11:01:47.794]             `[[` <- base::`[[`
[11:01:47.794]             `+` <- base::`+`
[11:01:47.794]             `<<-` <- base::`<<-`
[11:01:47.794]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.794]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.794]                   3L)]
[11:01:47.794]             }
[11:01:47.794]             function(cond) {
[11:01:47.794]                 is_error <- inherits(cond, "error")
[11:01:47.794]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.794]                   NULL)
[11:01:47.794]                 if (is_error) {
[11:01:47.794]                   sessionInformation <- function() {
[11:01:47.794]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.794]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.794]                       search = base::search(), system = base::Sys.info())
[11:01:47.794]                   }
[11:01:47.794]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.794]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.794]                     cond$call), session = sessionInformation(), 
[11:01:47.794]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.794]                   signalCondition(cond)
[11:01:47.794]                 }
[11:01:47.794]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.794]                 "immediateCondition"))) {
[11:01:47.794]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.794]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.794]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.794]                   if (TRUE && !signal) {
[11:01:47.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.794]                     {
[11:01:47.794]                       inherits <- base::inherits
[11:01:47.794]                       invokeRestart <- base::invokeRestart
[11:01:47.794]                       is.null <- base::is.null
[11:01:47.794]                       muffled <- FALSE
[11:01:47.794]                       if (inherits(cond, "message")) {
[11:01:47.794]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.794]                         if (muffled) 
[11:01:47.794]                           invokeRestart("muffleMessage")
[11:01:47.794]                       }
[11:01:47.794]                       else if (inherits(cond, "warning")) {
[11:01:47.794]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.794]                         if (muffled) 
[11:01:47.794]                           invokeRestart("muffleWarning")
[11:01:47.794]                       }
[11:01:47.794]                       else if (inherits(cond, "condition")) {
[11:01:47.794]                         if (!is.null(pattern)) {
[11:01:47.794]                           computeRestarts <- base::computeRestarts
[11:01:47.794]                           grepl <- base::grepl
[11:01:47.794]                           restarts <- computeRestarts(cond)
[11:01:47.794]                           for (restart in restarts) {
[11:01:47.794]                             name <- restart$name
[11:01:47.794]                             if (is.null(name)) 
[11:01:47.794]                               next
[11:01:47.794]                             if (!grepl(pattern, name)) 
[11:01:47.794]                               next
[11:01:47.794]                             invokeRestart(restart)
[11:01:47.794]                             muffled <- TRUE
[11:01:47.794]                             break
[11:01:47.794]                           }
[11:01:47.794]                         }
[11:01:47.794]                       }
[11:01:47.794]                       invisible(muffled)
[11:01:47.794]                     }
[11:01:47.794]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.794]                   }
[11:01:47.794]                 }
[11:01:47.794]                 else {
[11:01:47.794]                   if (TRUE) {
[11:01:47.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.794]                     {
[11:01:47.794]                       inherits <- base::inherits
[11:01:47.794]                       invokeRestart <- base::invokeRestart
[11:01:47.794]                       is.null <- base::is.null
[11:01:47.794]                       muffled <- FALSE
[11:01:47.794]                       if (inherits(cond, "message")) {
[11:01:47.794]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.794]                         if (muffled) 
[11:01:47.794]                           invokeRestart("muffleMessage")
[11:01:47.794]                       }
[11:01:47.794]                       else if (inherits(cond, "warning")) {
[11:01:47.794]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.794]                         if (muffled) 
[11:01:47.794]                           invokeRestart("muffleWarning")
[11:01:47.794]                       }
[11:01:47.794]                       else if (inherits(cond, "condition")) {
[11:01:47.794]                         if (!is.null(pattern)) {
[11:01:47.794]                           computeRestarts <- base::computeRestarts
[11:01:47.794]                           grepl <- base::grepl
[11:01:47.794]                           restarts <- computeRestarts(cond)
[11:01:47.794]                           for (restart in restarts) {
[11:01:47.794]                             name <- restart$name
[11:01:47.794]                             if (is.null(name)) 
[11:01:47.794]                               next
[11:01:47.794]                             if (!grepl(pattern, name)) 
[11:01:47.794]                               next
[11:01:47.794]                             invokeRestart(restart)
[11:01:47.794]                             muffled <- TRUE
[11:01:47.794]                             break
[11:01:47.794]                           }
[11:01:47.794]                         }
[11:01:47.794]                       }
[11:01:47.794]                       invisible(muffled)
[11:01:47.794]                     }
[11:01:47.794]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.794]                   }
[11:01:47.794]                 }
[11:01:47.794]             }
[11:01:47.794]         }))
[11:01:47.794]     }, error = function(ex) {
[11:01:47.794]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.794]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.794]                 ...future.rng), started = ...future.startTime, 
[11:01:47.794]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.794]             version = "1.8"), class = "FutureResult")
[11:01:47.794]     }, finally = {
[11:01:47.794]         if (!identical(...future.workdir, getwd())) 
[11:01:47.794]             setwd(...future.workdir)
[11:01:47.794]         {
[11:01:47.794]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.794]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.794]             }
[11:01:47.794]             base::options(...future.oldOptions)
[11:01:47.794]             if (.Platform$OS.type == "windows") {
[11:01:47.794]                 old_names <- names(...future.oldEnvVars)
[11:01:47.794]                 envs <- base::Sys.getenv()
[11:01:47.794]                 names <- names(envs)
[11:01:47.794]                 common <- intersect(names, old_names)
[11:01:47.794]                 added <- setdiff(names, old_names)
[11:01:47.794]                 removed <- setdiff(old_names, names)
[11:01:47.794]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.794]                   envs[common]]
[11:01:47.794]                 NAMES <- toupper(changed)
[11:01:47.794]                 args <- list()
[11:01:47.794]                 for (kk in seq_along(NAMES)) {
[11:01:47.794]                   name <- changed[[kk]]
[11:01:47.794]                   NAME <- NAMES[[kk]]
[11:01:47.794]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.794]                     next
[11:01:47.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.794]                 }
[11:01:47.794]                 NAMES <- toupper(added)
[11:01:47.794]                 for (kk in seq_along(NAMES)) {
[11:01:47.794]                   name <- added[[kk]]
[11:01:47.794]                   NAME <- NAMES[[kk]]
[11:01:47.794]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.794]                     next
[11:01:47.794]                   args[[name]] <- ""
[11:01:47.794]                 }
[11:01:47.794]                 NAMES <- toupper(removed)
[11:01:47.794]                 for (kk in seq_along(NAMES)) {
[11:01:47.794]                   name <- removed[[kk]]
[11:01:47.794]                   NAME <- NAMES[[kk]]
[11:01:47.794]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.794]                     next
[11:01:47.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.794]                 }
[11:01:47.794]                 if (length(args) > 0) 
[11:01:47.794]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.794]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.794]             }
[11:01:47.794]             else {
[11:01:47.794]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.794]             }
[11:01:47.794]             {
[11:01:47.794]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.794]                   0L) {
[11:01:47.794]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.794]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.794]                   base::options(opts)
[11:01:47.794]                 }
[11:01:47.794]                 {
[11:01:47.794]                   {
[11:01:47.794]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.794]                     NULL
[11:01:47.794]                   }
[11:01:47.794]                   options(future.plan = NULL)
[11:01:47.794]                   if (is.na(NA_character_)) 
[11:01:47.794]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.794]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.794]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.794]                     .init = FALSE)
[11:01:47.794]                 }
[11:01:47.794]             }
[11:01:47.794]         }
[11:01:47.794]     })
[11:01:47.794]     if (TRUE) {
[11:01:47.794]         base::sink(type = "output", split = FALSE)
[11:01:47.794]         if (TRUE) {
[11:01:47.794]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.794]         }
[11:01:47.794]         else {
[11:01:47.794]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.794]         }
[11:01:47.794]         base::close(...future.stdout)
[11:01:47.794]         ...future.stdout <- NULL
[11:01:47.794]     }
[11:01:47.794]     ...future.result$conditions <- ...future.conditions
[11:01:47.794]     ...future.result$finished <- base::Sys.time()
[11:01:47.794]     ...future.result
[11:01:47.794] }
[11:01:47.796] assign_globals() ...
[11:01:47.796] List of 1
[11:01:47.796]  $ x: list()
[11:01:47.796]  - attr(*, "where")=List of 1
[11:01:47.796]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.796]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.796]  - attr(*, "resolved")= logi TRUE
[11:01:47.796]  - attr(*, "total_size")= num 31
[11:01:47.796]  - attr(*, "already-done")= logi TRUE
[11:01:47.801] - copied ‘x’ to environment
[11:01:47.801] assign_globals() ... done
[11:01:47.802] requestCore(): workers = 2
[11:01:47.803] MulticoreFuture started
[11:01:47.804] - Launch lazy future ... done
[11:01:47.804] run() for ‘MulticoreFuture’ ... done
[11:01:47.804] result() for MulticoreFuture ...
[11:01:47.804] plan(): Setting new future strategy stack:
[11:01:47.804] List of future strategies:
[11:01:47.804] 1. sequential:
[11:01:47.804]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.804]    - tweaked: FALSE
[11:01:47.804]    - call: NULL
[11:01:47.806] plan(): nbrOfWorkers() = 1
[11:01:47.808] plan(): Setting new future strategy stack:
[11:01:47.808] List of future strategies:
[11:01:47.808] 1. multicore:
[11:01:47.808]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.808]    - tweaked: FALSE
[11:01:47.808]    - call: plan(strategy)
[11:01:47.811] plan(): nbrOfWorkers() = 2
[11:01:47.811] result() for MulticoreFuture ...
[11:01:47.812] result() for MulticoreFuture ... done
[11:01:47.812] result() for MulticoreFuture ... done
[11:01:47.812] result() for MulticoreFuture ...
[11:01:47.812] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.813] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.813] Searching for globals...
[11:01:47.816] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.816] Searching for globals ... DONE
[11:01:47.816] Resolving globals: TRUE
[11:01:47.816] Resolving any globals that are futures ...
[11:01:47.816] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:47.817] Resolving any globals that are futures ... DONE
[11:01:47.817] Resolving futures part of globals (recursively) ...
[11:01:47.817] resolve() on list ...
[11:01:47.817]  recursive: 99
[11:01:47.818]  length: 1
[11:01:47.818]  elements: ‘x’
[11:01:47.818]  length: 0 (resolved future 1)
[11:01:47.818] resolve() on list ... DONE
[11:01:47.818] - globals: [1] ‘x’
[11:01:47.818] Resolving futures part of globals (recursively) ... DONE
[11:01:47.818] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:47.819] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:47.819] - globals: [1] ‘x’
[11:01:47.819] 
[11:01:47.819] getGlobalsAndPackages() ... DONE
[11:01:47.819] run() for ‘Future’ ...
[11:01:47.820] - state: ‘created’
[11:01:47.820] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.822] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.822] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.822]   - Field: ‘label’
[11:01:47.822]   - Field: ‘local’
[11:01:47.822]   - Field: ‘owner’
[11:01:47.822]   - Field: ‘envir’
[11:01:47.822]   - Field: ‘workers’
[11:01:47.822]   - Field: ‘packages’
[11:01:47.823]   - Field: ‘gc’
[11:01:47.823]   - Field: ‘job’
[11:01:47.823]   - Field: ‘conditions’
[11:01:47.823]   - Field: ‘expr’
[11:01:47.823]   - Field: ‘uuid’
[11:01:47.823]   - Field: ‘seed’
[11:01:47.823]   - Field: ‘version’
[11:01:47.823]   - Field: ‘result’
[11:01:47.823]   - Field: ‘asynchronous’
[11:01:47.823]   - Field: ‘calls’
[11:01:47.824]   - Field: ‘globals’
[11:01:47.824]   - Field: ‘stdout’
[11:01:47.824]   - Field: ‘earlySignal’
[11:01:47.824]   - Field: ‘lazy’
[11:01:47.824]   - Field: ‘state’
[11:01:47.824] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.824] - Launch lazy future ...
[11:01:47.824] Packages needed by the future expression (n = 0): <none>
[11:01:47.825] Packages needed by future strategies (n = 0): <none>
[11:01:47.825] {
[11:01:47.825]     {
[11:01:47.825]         {
[11:01:47.825]             ...future.startTime <- base::Sys.time()
[11:01:47.825]             {
[11:01:47.825]                 {
[11:01:47.825]                   {
[11:01:47.825]                     {
[11:01:47.825]                       base::local({
[11:01:47.825]                         has_future <- base::requireNamespace("future", 
[11:01:47.825]                           quietly = TRUE)
[11:01:47.825]                         if (has_future) {
[11:01:47.825]                           ns <- base::getNamespace("future")
[11:01:47.825]                           version <- ns[[".package"]][["version"]]
[11:01:47.825]                           if (is.null(version)) 
[11:01:47.825]                             version <- utils::packageVersion("future")
[11:01:47.825]                         }
[11:01:47.825]                         else {
[11:01:47.825]                           version <- NULL
[11:01:47.825]                         }
[11:01:47.825]                         if (!has_future || version < "1.8.0") {
[11:01:47.825]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.825]                             "", base::R.version$version.string), 
[11:01:47.825]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.825]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.825]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.825]                               "release", "version")], collapse = " "), 
[11:01:47.825]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.825]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.825]                             info)
[11:01:47.825]                           info <- base::paste(info, collapse = "; ")
[11:01:47.825]                           if (!has_future) {
[11:01:47.825]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.825]                               info)
[11:01:47.825]                           }
[11:01:47.825]                           else {
[11:01:47.825]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.825]                               info, version)
[11:01:47.825]                           }
[11:01:47.825]                           base::stop(msg)
[11:01:47.825]                         }
[11:01:47.825]                       })
[11:01:47.825]                     }
[11:01:47.825]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.825]                     base::options(mc.cores = 1L)
[11:01:47.825]                   }
[11:01:47.825]                   ...future.strategy.old <- future::plan("list")
[11:01:47.825]                   options(future.plan = NULL)
[11:01:47.825]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.825]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.825]                 }
[11:01:47.825]                 ...future.workdir <- getwd()
[11:01:47.825]             }
[11:01:47.825]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.825]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.825]         }
[11:01:47.825]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.825]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.825]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.825]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.825]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.825]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.825]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.825]             base::names(...future.oldOptions))
[11:01:47.825]     }
[11:01:47.825]     if (FALSE) {
[11:01:47.825]     }
[11:01:47.825]     else {
[11:01:47.825]         if (TRUE) {
[11:01:47.825]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.825]                 open = "w")
[11:01:47.825]         }
[11:01:47.825]         else {
[11:01:47.825]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.825]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.825]         }
[11:01:47.825]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.825]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.825]             base::sink(type = "output", split = FALSE)
[11:01:47.825]             base::close(...future.stdout)
[11:01:47.825]         }, add = TRUE)
[11:01:47.825]     }
[11:01:47.825]     ...future.frame <- base::sys.nframe()
[11:01:47.825]     ...future.conditions <- base::list()
[11:01:47.825]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.825]     if (FALSE) {
[11:01:47.825]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.825]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.825]     }
[11:01:47.825]     ...future.result <- base::tryCatch({
[11:01:47.825]         base::withCallingHandlers({
[11:01:47.825]             ...future.value <- base::withVisible(base::local({
[11:01:47.825]                 withCallingHandlers({
[11:01:47.825]                   {
[11:01:47.825]                     x["a"] <- list(1)
[11:01:47.825]                     x
[11:01:47.825]                   }
[11:01:47.825]                 }, immediateCondition = function(cond) {
[11:01:47.825]                   save_rds <- function (object, pathname, ...) 
[11:01:47.825]                   {
[11:01:47.825]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.825]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.825]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.825]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.825]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.825]                         fi_tmp[["mtime"]])
[11:01:47.825]                     }
[11:01:47.825]                     tryCatch({
[11:01:47.825]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.825]                     }, error = function(ex) {
[11:01:47.825]                       msg <- conditionMessage(ex)
[11:01:47.825]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.825]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.825]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.825]                         fi_tmp[["mtime"]], msg)
[11:01:47.825]                       ex$message <- msg
[11:01:47.825]                       stop(ex)
[11:01:47.825]                     })
[11:01:47.825]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.825]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.825]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.825]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.825]                       fi <- file.info(pathname)
[11:01:47.825]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.825]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.825]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.825]                         fi[["size"]], fi[["mtime"]])
[11:01:47.825]                       stop(msg)
[11:01:47.825]                     }
[11:01:47.825]                     invisible(pathname)
[11:01:47.825]                   }
[11:01:47.825]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.825]                     rootPath = tempdir()) 
[11:01:47.825]                   {
[11:01:47.825]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.825]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.825]                       tmpdir = path, fileext = ".rds")
[11:01:47.825]                     save_rds(obj, file)
[11:01:47.825]                   }
[11:01:47.825]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.825]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.825]                   {
[11:01:47.825]                     inherits <- base::inherits
[11:01:47.825]                     invokeRestart <- base::invokeRestart
[11:01:47.825]                     is.null <- base::is.null
[11:01:47.825]                     muffled <- FALSE
[11:01:47.825]                     if (inherits(cond, "message")) {
[11:01:47.825]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.825]                       if (muffled) 
[11:01:47.825]                         invokeRestart("muffleMessage")
[11:01:47.825]                     }
[11:01:47.825]                     else if (inherits(cond, "warning")) {
[11:01:47.825]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.825]                       if (muffled) 
[11:01:47.825]                         invokeRestart("muffleWarning")
[11:01:47.825]                     }
[11:01:47.825]                     else if (inherits(cond, "condition")) {
[11:01:47.825]                       if (!is.null(pattern)) {
[11:01:47.825]                         computeRestarts <- base::computeRestarts
[11:01:47.825]                         grepl <- base::grepl
[11:01:47.825]                         restarts <- computeRestarts(cond)
[11:01:47.825]                         for (restart in restarts) {
[11:01:47.825]                           name <- restart$name
[11:01:47.825]                           if (is.null(name)) 
[11:01:47.825]                             next
[11:01:47.825]                           if (!grepl(pattern, name)) 
[11:01:47.825]                             next
[11:01:47.825]                           invokeRestart(restart)
[11:01:47.825]                           muffled <- TRUE
[11:01:47.825]                           break
[11:01:47.825]                         }
[11:01:47.825]                       }
[11:01:47.825]                     }
[11:01:47.825]                     invisible(muffled)
[11:01:47.825]                   }
[11:01:47.825]                   muffleCondition(cond)
[11:01:47.825]                 })
[11:01:47.825]             }))
[11:01:47.825]             future::FutureResult(value = ...future.value$value, 
[11:01:47.825]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.825]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.825]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.825]                     ...future.globalenv.names))
[11:01:47.825]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.825]         }, condition = base::local({
[11:01:47.825]             c <- base::c
[11:01:47.825]             inherits <- base::inherits
[11:01:47.825]             invokeRestart <- base::invokeRestart
[11:01:47.825]             length <- base::length
[11:01:47.825]             list <- base::list
[11:01:47.825]             seq.int <- base::seq.int
[11:01:47.825]             signalCondition <- base::signalCondition
[11:01:47.825]             sys.calls <- base::sys.calls
[11:01:47.825]             `[[` <- base::`[[`
[11:01:47.825]             `+` <- base::`+`
[11:01:47.825]             `<<-` <- base::`<<-`
[11:01:47.825]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.825]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.825]                   3L)]
[11:01:47.825]             }
[11:01:47.825]             function(cond) {
[11:01:47.825]                 is_error <- inherits(cond, "error")
[11:01:47.825]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.825]                   NULL)
[11:01:47.825]                 if (is_error) {
[11:01:47.825]                   sessionInformation <- function() {
[11:01:47.825]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.825]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.825]                       search = base::search(), system = base::Sys.info())
[11:01:47.825]                   }
[11:01:47.825]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.825]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.825]                     cond$call), session = sessionInformation(), 
[11:01:47.825]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.825]                   signalCondition(cond)
[11:01:47.825]                 }
[11:01:47.825]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.825]                 "immediateCondition"))) {
[11:01:47.825]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.825]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.825]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.825]                   if (TRUE && !signal) {
[11:01:47.825]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.825]                     {
[11:01:47.825]                       inherits <- base::inherits
[11:01:47.825]                       invokeRestart <- base::invokeRestart
[11:01:47.825]                       is.null <- base::is.null
[11:01:47.825]                       muffled <- FALSE
[11:01:47.825]                       if (inherits(cond, "message")) {
[11:01:47.825]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.825]                         if (muffled) 
[11:01:47.825]                           invokeRestart("muffleMessage")
[11:01:47.825]                       }
[11:01:47.825]                       else if (inherits(cond, "warning")) {
[11:01:47.825]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.825]                         if (muffled) 
[11:01:47.825]                           invokeRestart("muffleWarning")
[11:01:47.825]                       }
[11:01:47.825]                       else if (inherits(cond, "condition")) {
[11:01:47.825]                         if (!is.null(pattern)) {
[11:01:47.825]                           computeRestarts <- base::computeRestarts
[11:01:47.825]                           grepl <- base::grepl
[11:01:47.825]                           restarts <- computeRestarts(cond)
[11:01:47.825]                           for (restart in restarts) {
[11:01:47.825]                             name <- restart$name
[11:01:47.825]                             if (is.null(name)) 
[11:01:47.825]                               next
[11:01:47.825]                             if (!grepl(pattern, name)) 
[11:01:47.825]                               next
[11:01:47.825]                             invokeRestart(restart)
[11:01:47.825]                             muffled <- TRUE
[11:01:47.825]                             break
[11:01:47.825]                           }
[11:01:47.825]                         }
[11:01:47.825]                       }
[11:01:47.825]                       invisible(muffled)
[11:01:47.825]                     }
[11:01:47.825]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.825]                   }
[11:01:47.825]                 }
[11:01:47.825]                 else {
[11:01:47.825]                   if (TRUE) {
[11:01:47.825]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.825]                     {
[11:01:47.825]                       inherits <- base::inherits
[11:01:47.825]                       invokeRestart <- base::invokeRestart
[11:01:47.825]                       is.null <- base::is.null
[11:01:47.825]                       muffled <- FALSE
[11:01:47.825]                       if (inherits(cond, "message")) {
[11:01:47.825]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.825]                         if (muffled) 
[11:01:47.825]                           invokeRestart("muffleMessage")
[11:01:47.825]                       }
[11:01:47.825]                       else if (inherits(cond, "warning")) {
[11:01:47.825]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.825]                         if (muffled) 
[11:01:47.825]                           invokeRestart("muffleWarning")
[11:01:47.825]                       }
[11:01:47.825]                       else if (inherits(cond, "condition")) {
[11:01:47.825]                         if (!is.null(pattern)) {
[11:01:47.825]                           computeRestarts <- base::computeRestarts
[11:01:47.825]                           grepl <- base::grepl
[11:01:47.825]                           restarts <- computeRestarts(cond)
[11:01:47.825]                           for (restart in restarts) {
[11:01:47.825]                             name <- restart$name
[11:01:47.825]                             if (is.null(name)) 
[11:01:47.825]                               next
[11:01:47.825]                             if (!grepl(pattern, name)) 
[11:01:47.825]                               next
[11:01:47.825]                             invokeRestart(restart)
[11:01:47.825]                             muffled <- TRUE
[11:01:47.825]                             break
[11:01:47.825]                           }
[11:01:47.825]                         }
[11:01:47.825]                       }
[11:01:47.825]                       invisible(muffled)
[11:01:47.825]                     }
[11:01:47.825]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.825]                   }
[11:01:47.825]                 }
[11:01:47.825]             }
[11:01:47.825]         }))
[11:01:47.825]     }, error = function(ex) {
[11:01:47.825]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.825]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.825]                 ...future.rng), started = ...future.startTime, 
[11:01:47.825]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.825]             version = "1.8"), class = "FutureResult")
[11:01:47.825]     }, finally = {
[11:01:47.825]         if (!identical(...future.workdir, getwd())) 
[11:01:47.825]             setwd(...future.workdir)
[11:01:47.825]         {
[11:01:47.825]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.825]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.825]             }
[11:01:47.825]             base::options(...future.oldOptions)
[11:01:47.825]             if (.Platform$OS.type == "windows") {
[11:01:47.825]                 old_names <- names(...future.oldEnvVars)
[11:01:47.825]                 envs <- base::Sys.getenv()
[11:01:47.825]                 names <- names(envs)
[11:01:47.825]                 common <- intersect(names, old_names)
[11:01:47.825]                 added <- setdiff(names, old_names)
[11:01:47.825]                 removed <- setdiff(old_names, names)
[11:01:47.825]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.825]                   envs[common]]
[11:01:47.825]                 NAMES <- toupper(changed)
[11:01:47.825]                 args <- list()
[11:01:47.825]                 for (kk in seq_along(NAMES)) {
[11:01:47.825]                   name <- changed[[kk]]
[11:01:47.825]                   NAME <- NAMES[[kk]]
[11:01:47.825]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.825]                     next
[11:01:47.825]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.825]                 }
[11:01:47.825]                 NAMES <- toupper(added)
[11:01:47.825]                 for (kk in seq_along(NAMES)) {
[11:01:47.825]                   name <- added[[kk]]
[11:01:47.825]                   NAME <- NAMES[[kk]]
[11:01:47.825]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.825]                     next
[11:01:47.825]                   args[[name]] <- ""
[11:01:47.825]                 }
[11:01:47.825]                 NAMES <- toupper(removed)
[11:01:47.825]                 for (kk in seq_along(NAMES)) {
[11:01:47.825]                   name <- removed[[kk]]
[11:01:47.825]                   NAME <- NAMES[[kk]]
[11:01:47.825]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.825]                     next
[11:01:47.825]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.825]                 }
[11:01:47.825]                 if (length(args) > 0) 
[11:01:47.825]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.825]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.825]             }
[11:01:47.825]             else {
[11:01:47.825]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.825]             }
[11:01:47.825]             {
[11:01:47.825]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.825]                   0L) {
[11:01:47.825]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.825]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.825]                   base::options(opts)
[11:01:47.825]                 }
[11:01:47.825]                 {
[11:01:47.825]                   {
[11:01:47.825]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.825]                     NULL
[11:01:47.825]                   }
[11:01:47.825]                   options(future.plan = NULL)
[11:01:47.825]                   if (is.na(NA_character_)) 
[11:01:47.825]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.825]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.825]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.825]                     .init = FALSE)
[11:01:47.825]                 }
[11:01:47.825]             }
[11:01:47.825]         }
[11:01:47.825]     })
[11:01:47.825]     if (TRUE) {
[11:01:47.825]         base::sink(type = "output", split = FALSE)
[11:01:47.825]         if (TRUE) {
[11:01:47.825]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.825]         }
[11:01:47.825]         else {
[11:01:47.825]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.825]         }
[11:01:47.825]         base::close(...future.stdout)
[11:01:47.825]         ...future.stdout <- NULL
[11:01:47.825]     }
[11:01:47.825]     ...future.result$conditions <- ...future.conditions
[11:01:47.825]     ...future.result$finished <- base::Sys.time()
[11:01:47.825]     ...future.result
[11:01:47.825] }
[11:01:47.828] assign_globals() ...
[11:01:47.828] List of 1
[11:01:47.828]  $ x: list()
[11:01:47.828]  - attr(*, "where")=List of 1
[11:01:47.828]   ..$ x:<environment: R_EmptyEnv> 
[11:01:47.828]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.828]  - attr(*, "resolved")= logi TRUE
[11:01:47.828]  - attr(*, "total_size")= num 31
[11:01:47.828]  - attr(*, "already-done")= logi TRUE
[11:01:47.831] - copied ‘x’ to environment
[11:01:47.831] assign_globals() ... done
[11:01:47.831] requestCore(): workers = 2
[11:01:47.833] MulticoreFuture started
[11:01:47.833] - Launch lazy future ... done
[11:01:47.833] run() for ‘MulticoreFuture’ ... done
[11:01:47.834] result() for MulticoreFuture ...
[11:01:47.834] plan(): Setting new future strategy stack:
[11:01:47.834] List of future strategies:
[11:01:47.834] 1. sequential:
[11:01:47.834]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.834]    - tweaked: FALSE
[11:01:47.834]    - call: NULL
[11:01:47.835] plan(): nbrOfWorkers() = 1
[11:01:47.837] plan(): Setting new future strategy stack:
[11:01:47.837] List of future strategies:
[11:01:47.837] 1. multicore:
[11:01:47.837]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.837]    - tweaked: FALSE
[11:01:47.837]    - call: plan(strategy)
[11:01:47.840] plan(): nbrOfWorkers() = 2
[11:01:47.841] result() for MulticoreFuture ...
[11:01:47.841] result() for MulticoreFuture ... done
[11:01:47.841] result() for MulticoreFuture ... done
[11:01:47.841] result() for MulticoreFuture ...
[11:01:47.841] result() for MulticoreFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.842] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.842] Searching for globals...
[11:01:47.845] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[11:01:47.845] Searching for globals ... DONE
[11:01:47.845] Resolving globals: TRUE
[11:01:47.845] Resolving any globals that are futures ...
[11:01:47.845] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[11:01:47.845] Resolving any globals that are futures ... DONE
[11:01:47.846] Resolving futures part of globals (recursively) ...
[11:01:47.846] resolve() on list ...
[11:01:47.846]  recursive: 99
[11:01:47.847]  length: 2
[11:01:47.847]  elements: ‘x’, ‘name’
[11:01:47.847]  length: 1 (resolved future 1)
[11:01:47.849]  length: 0 (resolved future 2)
[11:01:47.849] resolve() on list ... DONE
[11:01:47.849] - globals: [2] ‘x’, ‘name’
[11:01:47.849] Resolving futures part of globals (recursively) ... DONE
[11:01:47.850] The total size of the 2 globals is 71 bytes (71 bytes)
[11:01:47.850] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 71 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (40 bytes of class ‘character’) and ‘x’ (31 bytes of class ‘list’)
[11:01:47.850] - globals: [2] ‘x’, ‘name’
[11:01:47.850] 
[11:01:47.851] getGlobalsAndPackages() ... DONE
[11:01:47.851] run() for ‘Future’ ...
[11:01:47.851] - state: ‘created’
[11:01:47.851] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:47.853] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:47.853] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:47.853]   - Field: ‘label’
[11:01:47.853]   - Field: ‘local’
[11:01:47.854]   - Field: ‘owner’
[11:01:47.854]   - Field: ‘envir’
[11:01:47.854]   - Field: ‘workers’
[11:01:47.854]   - Field: ‘packages’
[11:01:47.854]   - Field: ‘gc’
[11:01:47.854]   - Field: ‘job’
[11:01:47.854]   - Field: ‘conditions’
[11:01:47.854]   - Field: ‘expr’
[11:01:47.854]   - Field: ‘uuid’
[11:01:47.855]   - Field: ‘seed’
[11:01:47.855]   - Field: ‘version’
[11:01:47.855]   - Field: ‘result’
[11:01:47.855]   - Field: ‘asynchronous’
[11:01:47.855]   - Field: ‘calls’
[11:01:47.855]   - Field: ‘globals’
[11:01:47.855]   - Field: ‘stdout’
[11:01:47.855]   - Field: ‘earlySignal’
[11:01:47.855]   - Field: ‘lazy’
[11:01:47.855]   - Field: ‘state’
[11:01:47.856] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:47.856] - Launch lazy future ...
[11:01:47.856] Packages needed by the future expression (n = 0): <none>
[11:01:47.856] Packages needed by future strategies (n = 0): <none>
[11:01:47.857] {
[11:01:47.857]     {
[11:01:47.857]         {
[11:01:47.857]             ...future.startTime <- base::Sys.time()
[11:01:47.857]             {
[11:01:47.857]                 {
[11:01:47.857]                   {
[11:01:47.857]                     {
[11:01:47.857]                       base::local({
[11:01:47.857]                         has_future <- base::requireNamespace("future", 
[11:01:47.857]                           quietly = TRUE)
[11:01:47.857]                         if (has_future) {
[11:01:47.857]                           ns <- base::getNamespace("future")
[11:01:47.857]                           version <- ns[[".package"]][["version"]]
[11:01:47.857]                           if (is.null(version)) 
[11:01:47.857]                             version <- utils::packageVersion("future")
[11:01:47.857]                         }
[11:01:47.857]                         else {
[11:01:47.857]                           version <- NULL
[11:01:47.857]                         }
[11:01:47.857]                         if (!has_future || version < "1.8.0") {
[11:01:47.857]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:47.857]                             "", base::R.version$version.string), 
[11:01:47.857]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:47.857]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:47.857]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:47.857]                               "release", "version")], collapse = " "), 
[11:01:47.857]                             hostname = base::Sys.info()[["nodename"]])
[11:01:47.857]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:47.857]                             info)
[11:01:47.857]                           info <- base::paste(info, collapse = "; ")
[11:01:47.857]                           if (!has_future) {
[11:01:47.857]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:47.857]                               info)
[11:01:47.857]                           }
[11:01:47.857]                           else {
[11:01:47.857]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:47.857]                               info, version)
[11:01:47.857]                           }
[11:01:47.857]                           base::stop(msg)
[11:01:47.857]                         }
[11:01:47.857]                       })
[11:01:47.857]                     }
[11:01:47.857]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:47.857]                     base::options(mc.cores = 1L)
[11:01:47.857]                   }
[11:01:47.857]                   ...future.strategy.old <- future::plan("list")
[11:01:47.857]                   options(future.plan = NULL)
[11:01:47.857]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.857]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:47.857]                 }
[11:01:47.857]                 ...future.workdir <- getwd()
[11:01:47.857]             }
[11:01:47.857]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:47.857]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:47.857]         }
[11:01:47.857]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:47.857]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:47.857]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:47.857]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:47.857]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:47.857]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:47.857]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:47.857]             base::names(...future.oldOptions))
[11:01:47.857]     }
[11:01:47.857]     if (FALSE) {
[11:01:47.857]     }
[11:01:47.857]     else {
[11:01:47.857]         if (TRUE) {
[11:01:47.857]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:47.857]                 open = "w")
[11:01:47.857]         }
[11:01:47.857]         else {
[11:01:47.857]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:47.857]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:47.857]         }
[11:01:47.857]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:47.857]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:47.857]             base::sink(type = "output", split = FALSE)
[11:01:47.857]             base::close(...future.stdout)
[11:01:47.857]         }, add = TRUE)
[11:01:47.857]     }
[11:01:47.857]     ...future.frame <- base::sys.nframe()
[11:01:47.857]     ...future.conditions <- base::list()
[11:01:47.857]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:47.857]     if (FALSE) {
[11:01:47.857]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:47.857]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:47.857]     }
[11:01:47.857]     ...future.result <- base::tryCatch({
[11:01:47.857]         base::withCallingHandlers({
[11:01:47.857]             ...future.value <- base::withVisible(base::local({
[11:01:47.857]                 withCallingHandlers({
[11:01:47.857]                   {
[11:01:47.857]                     x[name] <- list(1)
[11:01:47.857]                     x
[11:01:47.857]                   }
[11:01:47.857]                 }, immediateCondition = function(cond) {
[11:01:47.857]                   save_rds <- function (object, pathname, ...) 
[11:01:47.857]                   {
[11:01:47.857]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:47.857]                     if (file_test("-f", pathname_tmp)) {
[11:01:47.857]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.857]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:47.857]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.857]                         fi_tmp[["mtime"]])
[11:01:47.857]                     }
[11:01:47.857]                     tryCatch({
[11:01:47.857]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:47.857]                     }, error = function(ex) {
[11:01:47.857]                       msg <- conditionMessage(ex)
[11:01:47.857]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.857]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:47.857]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.857]                         fi_tmp[["mtime"]], msg)
[11:01:47.857]                       ex$message <- msg
[11:01:47.857]                       stop(ex)
[11:01:47.857]                     })
[11:01:47.857]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:47.857]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:47.857]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:47.857]                       fi_tmp <- file.info(pathname_tmp)
[11:01:47.857]                       fi <- file.info(pathname)
[11:01:47.857]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:47.857]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:47.857]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:47.857]                         fi[["size"]], fi[["mtime"]])
[11:01:47.857]                       stop(msg)
[11:01:47.857]                     }
[11:01:47.857]                     invisible(pathname)
[11:01:47.857]                   }
[11:01:47.857]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:47.857]                     rootPath = tempdir()) 
[11:01:47.857]                   {
[11:01:47.857]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:47.857]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:47.857]                       tmpdir = path, fileext = ".rds")
[11:01:47.857]                     save_rds(obj, file)
[11:01:47.857]                   }
[11:01:47.857]                   saveImmediateCondition(cond, path = "/tmp/Rtmpoad3gh/.future/immediateConditions")
[11:01:47.857]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.857]                   {
[11:01:47.857]                     inherits <- base::inherits
[11:01:47.857]                     invokeRestart <- base::invokeRestart
[11:01:47.857]                     is.null <- base::is.null
[11:01:47.857]                     muffled <- FALSE
[11:01:47.857]                     if (inherits(cond, "message")) {
[11:01:47.857]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:47.857]                       if (muffled) 
[11:01:47.857]                         invokeRestart("muffleMessage")
[11:01:47.857]                     }
[11:01:47.857]                     else if (inherits(cond, "warning")) {
[11:01:47.857]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:47.857]                       if (muffled) 
[11:01:47.857]                         invokeRestart("muffleWarning")
[11:01:47.857]                     }
[11:01:47.857]                     else if (inherits(cond, "condition")) {
[11:01:47.857]                       if (!is.null(pattern)) {
[11:01:47.857]                         computeRestarts <- base::computeRestarts
[11:01:47.857]                         grepl <- base::grepl
[11:01:47.857]                         restarts <- computeRestarts(cond)
[11:01:47.857]                         for (restart in restarts) {
[11:01:47.857]                           name <- restart$name
[11:01:47.857]                           if (is.null(name)) 
[11:01:47.857]                             next
[11:01:47.857]                           if (!grepl(pattern, name)) 
[11:01:47.857]                             next
[11:01:47.857]                           invokeRestart(restart)
[11:01:47.857]                           muffled <- TRUE
[11:01:47.857]                           break
[11:01:47.857]                         }
[11:01:47.857]                       }
[11:01:47.857]                     }
[11:01:47.857]                     invisible(muffled)
[11:01:47.857]                   }
[11:01:47.857]                   muffleCondition(cond)
[11:01:47.857]                 })
[11:01:47.857]             }))
[11:01:47.857]             future::FutureResult(value = ...future.value$value, 
[11:01:47.857]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.857]                   ...future.rng), globalenv = if (FALSE) 
[11:01:47.857]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:47.857]                     ...future.globalenv.names))
[11:01:47.857]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:47.857]         }, condition = base::local({
[11:01:47.857]             c <- base::c
[11:01:47.857]             inherits <- base::inherits
[11:01:47.857]             invokeRestart <- base::invokeRestart
[11:01:47.857]             length <- base::length
[11:01:47.857]             list <- base::list
[11:01:47.857]             seq.int <- base::seq.int
[11:01:47.857]             signalCondition <- base::signalCondition
[11:01:47.857]             sys.calls <- base::sys.calls
[11:01:47.857]             `[[` <- base::`[[`
[11:01:47.857]             `+` <- base::`+`
[11:01:47.857]             `<<-` <- base::`<<-`
[11:01:47.857]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:47.857]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:47.857]                   3L)]
[11:01:47.857]             }
[11:01:47.857]             function(cond) {
[11:01:47.857]                 is_error <- inherits(cond, "error")
[11:01:47.857]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:47.857]                   NULL)
[11:01:47.857]                 if (is_error) {
[11:01:47.857]                   sessionInformation <- function() {
[11:01:47.857]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:47.857]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:47.857]                       search = base::search(), system = base::Sys.info())
[11:01:47.857]                   }
[11:01:47.857]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.857]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:47.857]                     cond$call), session = sessionInformation(), 
[11:01:47.857]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:47.857]                   signalCondition(cond)
[11:01:47.857]                 }
[11:01:47.857]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:47.857]                 "immediateCondition"))) {
[11:01:47.857]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:47.857]                   ...future.conditions[[length(...future.conditions) + 
[11:01:47.857]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:47.857]                   if (TRUE && !signal) {
[11:01:47.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.857]                     {
[11:01:47.857]                       inherits <- base::inherits
[11:01:47.857]                       invokeRestart <- base::invokeRestart
[11:01:47.857]                       is.null <- base::is.null
[11:01:47.857]                       muffled <- FALSE
[11:01:47.857]                       if (inherits(cond, "message")) {
[11:01:47.857]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.857]                         if (muffled) 
[11:01:47.857]                           invokeRestart("muffleMessage")
[11:01:47.857]                       }
[11:01:47.857]                       else if (inherits(cond, "warning")) {
[11:01:47.857]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.857]                         if (muffled) 
[11:01:47.857]                           invokeRestart("muffleWarning")
[11:01:47.857]                       }
[11:01:47.857]                       else if (inherits(cond, "condition")) {
[11:01:47.857]                         if (!is.null(pattern)) {
[11:01:47.857]                           computeRestarts <- base::computeRestarts
[11:01:47.857]                           grepl <- base::grepl
[11:01:47.857]                           restarts <- computeRestarts(cond)
[11:01:47.857]                           for (restart in restarts) {
[11:01:47.857]                             name <- restart$name
[11:01:47.857]                             if (is.null(name)) 
[11:01:47.857]                               next
[11:01:47.857]                             if (!grepl(pattern, name)) 
[11:01:47.857]                               next
[11:01:47.857]                             invokeRestart(restart)
[11:01:47.857]                             muffled <- TRUE
[11:01:47.857]                             break
[11:01:47.857]                           }
[11:01:47.857]                         }
[11:01:47.857]                       }
[11:01:47.857]                       invisible(muffled)
[11:01:47.857]                     }
[11:01:47.857]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.857]                   }
[11:01:47.857]                 }
[11:01:47.857]                 else {
[11:01:47.857]                   if (TRUE) {
[11:01:47.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:47.857]                     {
[11:01:47.857]                       inherits <- base::inherits
[11:01:47.857]                       invokeRestart <- base::invokeRestart
[11:01:47.857]                       is.null <- base::is.null
[11:01:47.857]                       muffled <- FALSE
[11:01:47.857]                       if (inherits(cond, "message")) {
[11:01:47.857]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:47.857]                         if (muffled) 
[11:01:47.857]                           invokeRestart("muffleMessage")
[11:01:47.857]                       }
[11:01:47.857]                       else if (inherits(cond, "warning")) {
[11:01:47.857]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:47.857]                         if (muffled) 
[11:01:47.857]                           invokeRestart("muffleWarning")
[11:01:47.857]                       }
[11:01:47.857]                       else if (inherits(cond, "condition")) {
[11:01:47.857]                         if (!is.null(pattern)) {
[11:01:47.857]                           computeRestarts <- base::computeRestarts
[11:01:47.857]                           grepl <- base::grepl
[11:01:47.857]                           restarts <- computeRestarts(cond)
[11:01:47.857]                           for (restart in restarts) {
[11:01:47.857]                             name <- restart$name
[11:01:47.857]                             if (is.null(name)) 
[11:01:47.857]                               next
[11:01:47.857]                             if (!grepl(pattern, name)) 
[11:01:47.857]                               next
[11:01:47.857]                             invokeRestart(restart)
[11:01:47.857]                             muffled <- TRUE
[11:01:47.857]                             break
[11:01:47.857]                           }
[11:01:47.857]                         }
[11:01:47.857]                       }
[11:01:47.857]                       invisible(muffled)
[11:01:47.857]                     }
[11:01:47.857]                     muffleCondition(cond, pattern = "^muffle")
[11:01:47.857]                   }
[11:01:47.857]                 }
[11:01:47.857]             }
[11:01:47.857]         }))
[11:01:47.857]     }, error = function(ex) {
[11:01:47.857]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:47.857]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:47.857]                 ...future.rng), started = ...future.startTime, 
[11:01:47.857]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:47.857]             version = "1.8"), class = "FutureResult")
[11:01:47.857]     }, finally = {
[11:01:47.857]         if (!identical(...future.workdir, getwd())) 
[11:01:47.857]             setwd(...future.workdir)
[11:01:47.857]         {
[11:01:47.857]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:47.857]                 ...future.oldOptions$nwarnings <- NULL
[11:01:47.857]             }
[11:01:47.857]             base::options(...future.oldOptions)
[11:01:47.857]             if (.Platform$OS.type == "windows") {
[11:01:47.857]                 old_names <- names(...future.oldEnvVars)
[11:01:47.857]                 envs <- base::Sys.getenv()
[11:01:47.857]                 names <- names(envs)
[11:01:47.857]                 common <- intersect(names, old_names)
[11:01:47.857]                 added <- setdiff(names, old_names)
[11:01:47.857]                 removed <- setdiff(old_names, names)
[11:01:47.857]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:47.857]                   envs[common]]
[11:01:47.857]                 NAMES <- toupper(changed)
[11:01:47.857]                 args <- list()
[11:01:47.857]                 for (kk in seq_along(NAMES)) {
[11:01:47.857]                   name <- changed[[kk]]
[11:01:47.857]                   NAME <- NAMES[[kk]]
[11:01:47.857]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.857]                     next
[11:01:47.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.857]                 }
[11:01:47.857]                 NAMES <- toupper(added)
[11:01:47.857]                 for (kk in seq_along(NAMES)) {
[11:01:47.857]                   name <- added[[kk]]
[11:01:47.857]                   NAME <- NAMES[[kk]]
[11:01:47.857]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.857]                     next
[11:01:47.857]                   args[[name]] <- ""
[11:01:47.857]                 }
[11:01:47.857]                 NAMES <- toupper(removed)
[11:01:47.857]                 for (kk in seq_along(NAMES)) {
[11:01:47.857]                   name <- removed[[kk]]
[11:01:47.857]                   NAME <- NAMES[[kk]]
[11:01:47.857]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:47.857]                     next
[11:01:47.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:47.857]                 }
[11:01:47.857]                 if (length(args) > 0) 
[11:01:47.857]                   base::do.call(base::Sys.setenv, args = args)
[11:01:47.857]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:47.857]             }
[11:01:47.857]             else {
[11:01:47.857]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:47.857]             }
[11:01:47.857]             {
[11:01:47.857]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:47.857]                   0L) {
[11:01:47.857]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:47.857]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:47.857]                   base::options(opts)
[11:01:47.857]                 }
[11:01:47.857]                 {
[11:01:47.857]                   {
[11:01:47.857]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:47.857]                     NULL
[11:01:47.857]                   }
[11:01:47.857]                   options(future.plan = NULL)
[11:01:47.857]                   if (is.na(NA_character_)) 
[11:01:47.857]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:47.857]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:47.857]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:47.857]                     .init = FALSE)
[11:01:47.857]                 }
[11:01:47.857]             }
[11:01:47.857]         }
[11:01:47.857]     })
[11:01:47.857]     if (TRUE) {
[11:01:47.857]         base::sink(type = "output", split = FALSE)
[11:01:47.857]         if (TRUE) {
[11:01:47.857]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:47.857]         }
[11:01:47.857]         else {
[11:01:47.857]             ...future.result["stdout"] <- base::list(NULL)
[11:01:47.857]         }
[11:01:47.857]         base::close(...future.stdout)
[11:01:47.857]         ...future.stdout <- NULL
[11:01:47.857]     }
[11:01:47.857]     ...future.result$conditions <- ...future.conditions
[11:01:47.857]     ...future.result$finished <- base::Sys.time()
[11:01:47.857]     ...future.result
[11:01:47.857] }
[11:01:47.859] assign_globals() ...
[11:01:47.859] List of 2
[11:01:47.859]  $ x   : list()
[11:01:47.859]  $ name: chr "a"
[11:01:47.859]  - attr(*, "where")=List of 2
[11:01:47.859]   ..$ x   :<environment: R_EmptyEnv> 
[11:01:47.859]   ..$ name:<environment: R_EmptyEnv> 
[11:01:47.859]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:47.859]  - attr(*, "resolved")= logi TRUE
[11:01:47.859]  - attr(*, "total_size")= num 71
[11:01:47.859]  - attr(*, "already-done")= logi TRUE
[11:01:47.862] - copied ‘x’ to environment
[11:01:47.863] - copied ‘name’ to environment
[11:01:47.863] assign_globals() ... done
[11:01:47.863] requestCore(): workers = 2
[11:01:47.864] MulticoreFuture started
[11:01:47.865] - Launch lazy future ... done
[11:01:47.865] run() for ‘MulticoreFuture’ ... done
[11:01:47.865] result() for MulticoreFuture ...
[11:01:47.866] plan(): Setting new future strategy stack:
[11:01:47.866] List of future strategies:
[11:01:47.866] 1. sequential:
[11:01:47.866]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:47.866]    - tweaked: FALSE
[11:01:47.866]    - call: NULL
[11:01:47.867] plan(): nbrOfWorkers() = 1
[11:01:47.869] plan(): Setting new future strategy stack:
[11:01:47.869] List of future strategies:
[11:01:47.869] 1. multicore:
[11:01:47.869]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:47.869]    - tweaked: FALSE
[11:01:47.869]    - call: plan(strategy)
[11:01:47.872] plan(): nbrOfWorkers() = 2
[11:01:47.873] result() for MulticoreFuture ...
[11:01:47.873] result() for MulticoreFuture ... done
[11:01:47.873] result() for MulticoreFuture ... done
[11:01:47.873] result() for MulticoreFuture ...
[11:01:47.873] result() for MulticoreFuture ... done
$a
[1] 1

- plan('multisession') ...
[11:01:47.874] plan(): Setting new future strategy stack:
[11:01:47.874] List of future strategies:
[11:01:47.874] 1. multisession:
[11:01:47.874]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:47.874]    - tweaked: FALSE
[11:01:47.874]    - call: plan(strategy)
[11:01:47.874] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:01:47.875] multisession:
[11:01:47.875] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:47.875] - tweaked: FALSE
[11:01:47.875] - call: plan(strategy)
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:47.879] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:47.879] Not searching for globals
[11:01:47.880] - globals: [0] <none>
[11:01:47.880] getGlobalsAndPackages() ... DONE
[11:01:48.353] Packages needed by the future expression (n = 0): <none>
[11:01:48.353] Packages needed by future strategies (n = 0): <none>
[11:01:48.354] {
[11:01:48.354]     {
[11:01:48.354]         {
[11:01:48.354]             ...future.startTime <- base::Sys.time()
[11:01:48.354]             {
[11:01:48.354]                 {
[11:01:48.354]                   {
[11:01:48.354]                     {
[11:01:48.354]                       base::local({
[11:01:48.354]                         has_future <- base::requireNamespace("future", 
[11:01:48.354]                           quietly = TRUE)
[11:01:48.354]                         if (has_future) {
[11:01:48.354]                           ns <- base::getNamespace("future")
[11:01:48.354]                           version <- ns[[".package"]][["version"]]
[11:01:48.354]                           if (is.null(version)) 
[11:01:48.354]                             version <- utils::packageVersion("future")
[11:01:48.354]                         }
[11:01:48.354]                         else {
[11:01:48.354]                           version <- NULL
[11:01:48.354]                         }
[11:01:48.354]                         if (!has_future || version < "1.8.0") {
[11:01:48.354]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.354]                             "", base::R.version$version.string), 
[11:01:48.354]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.354]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.354]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.354]                               "release", "version")], collapse = " "), 
[11:01:48.354]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.354]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.354]                             info)
[11:01:48.354]                           info <- base::paste(info, collapse = "; ")
[11:01:48.354]                           if (!has_future) {
[11:01:48.354]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.354]                               info)
[11:01:48.354]                           }
[11:01:48.354]                           else {
[11:01:48.354]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.354]                               info, version)
[11:01:48.354]                           }
[11:01:48.354]                           base::stop(msg)
[11:01:48.354]                         }
[11:01:48.354]                       })
[11:01:48.354]                     }
[11:01:48.354]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.354]                     base::options(mc.cores = 1L)
[11:01:48.354]                   }
[11:01:48.354]                   ...future.strategy.old <- future::plan("list")
[11:01:48.354]                   options(future.plan = NULL)
[11:01:48.354]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.354]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.354]                 }
[11:01:48.354]                 ...future.workdir <- getwd()
[11:01:48.354]             }
[11:01:48.354]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.354]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.354]         }
[11:01:48.354]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.354]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.354]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.354]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.354]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.354]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.354]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.354]             base::names(...future.oldOptions))
[11:01:48.354]     }
[11:01:48.354]     if (FALSE) {
[11:01:48.354]     }
[11:01:48.354]     else {
[11:01:48.354]         if (TRUE) {
[11:01:48.354]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.354]                 open = "w")
[11:01:48.354]         }
[11:01:48.354]         else {
[11:01:48.354]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.354]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.354]         }
[11:01:48.354]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.354]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.354]             base::sink(type = "output", split = FALSE)
[11:01:48.354]             base::close(...future.stdout)
[11:01:48.354]         }, add = TRUE)
[11:01:48.354]     }
[11:01:48.354]     ...future.frame <- base::sys.nframe()
[11:01:48.354]     ...future.conditions <- base::list()
[11:01:48.354]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.354]     if (FALSE) {
[11:01:48.354]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.354]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.354]     }
[11:01:48.354]     ...future.result <- base::tryCatch({
[11:01:48.354]         base::withCallingHandlers({
[11:01:48.354]             ...future.value <- base::withVisible(base::local({
[11:01:48.354]                 ...future.makeSendCondition <- base::local({
[11:01:48.354]                   sendCondition <- NULL
[11:01:48.354]                   function(frame = 1L) {
[11:01:48.354]                     if (is.function(sendCondition)) 
[11:01:48.354]                       return(sendCondition)
[11:01:48.354]                     ns <- getNamespace("parallel")
[11:01:48.354]                     if (exists("sendData", mode = "function", 
[11:01:48.354]                       envir = ns)) {
[11:01:48.354]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.354]                         envir = ns)
[11:01:48.354]                       envir <- sys.frame(frame)
[11:01:48.354]                       master <- NULL
[11:01:48.354]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.354]                         !identical(envir, emptyenv())) {
[11:01:48.354]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.354]                           inherits = FALSE)) {
[11:01:48.354]                           master <- get("master", mode = "list", 
[11:01:48.354]                             envir = envir, inherits = FALSE)
[11:01:48.354]                           if (inherits(master, c("SOCKnode", 
[11:01:48.354]                             "SOCK0node"))) {
[11:01:48.354]                             sendCondition <<- function(cond) {
[11:01:48.354]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.354]                                 success = TRUE)
[11:01:48.354]                               parallel_sendData(master, data)
[11:01:48.354]                             }
[11:01:48.354]                             return(sendCondition)
[11:01:48.354]                           }
[11:01:48.354]                         }
[11:01:48.354]                         frame <- frame + 1L
[11:01:48.354]                         envir <- sys.frame(frame)
[11:01:48.354]                       }
[11:01:48.354]                     }
[11:01:48.354]                     sendCondition <<- function(cond) NULL
[11:01:48.354]                   }
[11:01:48.354]                 })
[11:01:48.354]                 withCallingHandlers({
[11:01:48.354]                   NA
[11:01:48.354]                 }, immediateCondition = function(cond) {
[11:01:48.354]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.354]                   sendCondition(cond)
[11:01:48.354]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.354]                   {
[11:01:48.354]                     inherits <- base::inherits
[11:01:48.354]                     invokeRestart <- base::invokeRestart
[11:01:48.354]                     is.null <- base::is.null
[11:01:48.354]                     muffled <- FALSE
[11:01:48.354]                     if (inherits(cond, "message")) {
[11:01:48.354]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.354]                       if (muffled) 
[11:01:48.354]                         invokeRestart("muffleMessage")
[11:01:48.354]                     }
[11:01:48.354]                     else if (inherits(cond, "warning")) {
[11:01:48.354]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.354]                       if (muffled) 
[11:01:48.354]                         invokeRestart("muffleWarning")
[11:01:48.354]                     }
[11:01:48.354]                     else if (inherits(cond, "condition")) {
[11:01:48.354]                       if (!is.null(pattern)) {
[11:01:48.354]                         computeRestarts <- base::computeRestarts
[11:01:48.354]                         grepl <- base::grepl
[11:01:48.354]                         restarts <- computeRestarts(cond)
[11:01:48.354]                         for (restart in restarts) {
[11:01:48.354]                           name <- restart$name
[11:01:48.354]                           if (is.null(name)) 
[11:01:48.354]                             next
[11:01:48.354]                           if (!grepl(pattern, name)) 
[11:01:48.354]                             next
[11:01:48.354]                           invokeRestart(restart)
[11:01:48.354]                           muffled <- TRUE
[11:01:48.354]                           break
[11:01:48.354]                         }
[11:01:48.354]                       }
[11:01:48.354]                     }
[11:01:48.354]                     invisible(muffled)
[11:01:48.354]                   }
[11:01:48.354]                   muffleCondition(cond)
[11:01:48.354]                 })
[11:01:48.354]             }))
[11:01:48.354]             future::FutureResult(value = ...future.value$value, 
[11:01:48.354]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.354]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.354]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.354]                     ...future.globalenv.names))
[11:01:48.354]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.354]         }, condition = base::local({
[11:01:48.354]             c <- base::c
[11:01:48.354]             inherits <- base::inherits
[11:01:48.354]             invokeRestart <- base::invokeRestart
[11:01:48.354]             length <- base::length
[11:01:48.354]             list <- base::list
[11:01:48.354]             seq.int <- base::seq.int
[11:01:48.354]             signalCondition <- base::signalCondition
[11:01:48.354]             sys.calls <- base::sys.calls
[11:01:48.354]             `[[` <- base::`[[`
[11:01:48.354]             `+` <- base::`+`
[11:01:48.354]             `<<-` <- base::`<<-`
[11:01:48.354]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.354]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.354]                   3L)]
[11:01:48.354]             }
[11:01:48.354]             function(cond) {
[11:01:48.354]                 is_error <- inherits(cond, "error")
[11:01:48.354]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.354]                   NULL)
[11:01:48.354]                 if (is_error) {
[11:01:48.354]                   sessionInformation <- function() {
[11:01:48.354]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.354]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.354]                       search = base::search(), system = base::Sys.info())
[11:01:48.354]                   }
[11:01:48.354]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.354]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.354]                     cond$call), session = sessionInformation(), 
[11:01:48.354]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.354]                   signalCondition(cond)
[11:01:48.354]                 }
[11:01:48.354]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.354]                 "immediateCondition"))) {
[11:01:48.354]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.354]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.354]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.354]                   if (TRUE && !signal) {
[11:01:48.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.354]                     {
[11:01:48.354]                       inherits <- base::inherits
[11:01:48.354]                       invokeRestart <- base::invokeRestart
[11:01:48.354]                       is.null <- base::is.null
[11:01:48.354]                       muffled <- FALSE
[11:01:48.354]                       if (inherits(cond, "message")) {
[11:01:48.354]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.354]                         if (muffled) 
[11:01:48.354]                           invokeRestart("muffleMessage")
[11:01:48.354]                       }
[11:01:48.354]                       else if (inherits(cond, "warning")) {
[11:01:48.354]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.354]                         if (muffled) 
[11:01:48.354]                           invokeRestart("muffleWarning")
[11:01:48.354]                       }
[11:01:48.354]                       else if (inherits(cond, "condition")) {
[11:01:48.354]                         if (!is.null(pattern)) {
[11:01:48.354]                           computeRestarts <- base::computeRestarts
[11:01:48.354]                           grepl <- base::grepl
[11:01:48.354]                           restarts <- computeRestarts(cond)
[11:01:48.354]                           for (restart in restarts) {
[11:01:48.354]                             name <- restart$name
[11:01:48.354]                             if (is.null(name)) 
[11:01:48.354]                               next
[11:01:48.354]                             if (!grepl(pattern, name)) 
[11:01:48.354]                               next
[11:01:48.354]                             invokeRestart(restart)
[11:01:48.354]                             muffled <- TRUE
[11:01:48.354]                             break
[11:01:48.354]                           }
[11:01:48.354]                         }
[11:01:48.354]                       }
[11:01:48.354]                       invisible(muffled)
[11:01:48.354]                     }
[11:01:48.354]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.354]                   }
[11:01:48.354]                 }
[11:01:48.354]                 else {
[11:01:48.354]                   if (TRUE) {
[11:01:48.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.354]                     {
[11:01:48.354]                       inherits <- base::inherits
[11:01:48.354]                       invokeRestart <- base::invokeRestart
[11:01:48.354]                       is.null <- base::is.null
[11:01:48.354]                       muffled <- FALSE
[11:01:48.354]                       if (inherits(cond, "message")) {
[11:01:48.354]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.354]                         if (muffled) 
[11:01:48.354]                           invokeRestart("muffleMessage")
[11:01:48.354]                       }
[11:01:48.354]                       else if (inherits(cond, "warning")) {
[11:01:48.354]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.354]                         if (muffled) 
[11:01:48.354]                           invokeRestart("muffleWarning")
[11:01:48.354]                       }
[11:01:48.354]                       else if (inherits(cond, "condition")) {
[11:01:48.354]                         if (!is.null(pattern)) {
[11:01:48.354]                           computeRestarts <- base::computeRestarts
[11:01:48.354]                           grepl <- base::grepl
[11:01:48.354]                           restarts <- computeRestarts(cond)
[11:01:48.354]                           for (restart in restarts) {
[11:01:48.354]                             name <- restart$name
[11:01:48.354]                             if (is.null(name)) 
[11:01:48.354]                               next
[11:01:48.354]                             if (!grepl(pattern, name)) 
[11:01:48.354]                               next
[11:01:48.354]                             invokeRestart(restart)
[11:01:48.354]                             muffled <- TRUE
[11:01:48.354]                             break
[11:01:48.354]                           }
[11:01:48.354]                         }
[11:01:48.354]                       }
[11:01:48.354]                       invisible(muffled)
[11:01:48.354]                     }
[11:01:48.354]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.354]                   }
[11:01:48.354]                 }
[11:01:48.354]             }
[11:01:48.354]         }))
[11:01:48.354]     }, error = function(ex) {
[11:01:48.354]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.354]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.354]                 ...future.rng), started = ...future.startTime, 
[11:01:48.354]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.354]             version = "1.8"), class = "FutureResult")
[11:01:48.354]     }, finally = {
[11:01:48.354]         if (!identical(...future.workdir, getwd())) 
[11:01:48.354]             setwd(...future.workdir)
[11:01:48.354]         {
[11:01:48.354]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.354]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.354]             }
[11:01:48.354]             base::options(...future.oldOptions)
[11:01:48.354]             if (.Platform$OS.type == "windows") {
[11:01:48.354]                 old_names <- names(...future.oldEnvVars)
[11:01:48.354]                 envs <- base::Sys.getenv()
[11:01:48.354]                 names <- names(envs)
[11:01:48.354]                 common <- intersect(names, old_names)
[11:01:48.354]                 added <- setdiff(names, old_names)
[11:01:48.354]                 removed <- setdiff(old_names, names)
[11:01:48.354]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.354]                   envs[common]]
[11:01:48.354]                 NAMES <- toupper(changed)
[11:01:48.354]                 args <- list()
[11:01:48.354]                 for (kk in seq_along(NAMES)) {
[11:01:48.354]                   name <- changed[[kk]]
[11:01:48.354]                   NAME <- NAMES[[kk]]
[11:01:48.354]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.354]                     next
[11:01:48.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.354]                 }
[11:01:48.354]                 NAMES <- toupper(added)
[11:01:48.354]                 for (kk in seq_along(NAMES)) {
[11:01:48.354]                   name <- added[[kk]]
[11:01:48.354]                   NAME <- NAMES[[kk]]
[11:01:48.354]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.354]                     next
[11:01:48.354]                   args[[name]] <- ""
[11:01:48.354]                 }
[11:01:48.354]                 NAMES <- toupper(removed)
[11:01:48.354]                 for (kk in seq_along(NAMES)) {
[11:01:48.354]                   name <- removed[[kk]]
[11:01:48.354]                   NAME <- NAMES[[kk]]
[11:01:48.354]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.354]                     next
[11:01:48.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.354]                 }
[11:01:48.354]                 if (length(args) > 0) 
[11:01:48.354]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.354]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.354]             }
[11:01:48.354]             else {
[11:01:48.354]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.354]             }
[11:01:48.354]             {
[11:01:48.354]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.354]                   0L) {
[11:01:48.354]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.354]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.354]                   base::options(opts)
[11:01:48.354]                 }
[11:01:48.354]                 {
[11:01:48.354]                   {
[11:01:48.354]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.354]                     NULL
[11:01:48.354]                   }
[11:01:48.354]                   options(future.plan = NULL)
[11:01:48.354]                   if (is.na(NA_character_)) 
[11:01:48.354]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.354]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.354]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.354]                     .init = FALSE)
[11:01:48.354]                 }
[11:01:48.354]             }
[11:01:48.354]         }
[11:01:48.354]     })
[11:01:48.354]     if (TRUE) {
[11:01:48.354]         base::sink(type = "output", split = FALSE)
[11:01:48.354]         if (TRUE) {
[11:01:48.354]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.354]         }
[11:01:48.354]         else {
[11:01:48.354]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.354]         }
[11:01:48.354]         base::close(...future.stdout)
[11:01:48.354]         ...future.stdout <- NULL
[11:01:48.354]     }
[11:01:48.354]     ...future.result$conditions <- ...future.conditions
[11:01:48.354]     ...future.result$finished <- base::Sys.time()
[11:01:48.354]     ...future.result
[11:01:48.354] }
[11:01:48.405] MultisessionFuture started
[11:01:48.405] result() for ClusterFuture ...
[11:01:48.406] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.406] - Validating connection of MultisessionFuture
[11:01:48.435] - received message: FutureResult
[11:01:48.435] - Received FutureResult
[11:01:48.436] - Erased future from FutureRegistry
[11:01:48.436] result() for ClusterFuture ...
[11:01:48.436] - result already collected: FutureResult
[11:01:48.436] result() for ClusterFuture ... done
[11:01:48.436] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.436] result() for ClusterFuture ... done
[11:01:48.436] result() for ClusterFuture ...
[11:01:48.436] - result already collected: FutureResult
[11:01:48.436] result() for ClusterFuture ... done
[11:01:48.436] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:01:48.438] plan(): nbrOfWorkers() = 2
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.438] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.438] Searching for globals...
[11:01:48.440] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:48.440] Searching for globals ... DONE
[11:01:48.440] Resolving globals: TRUE
[11:01:48.440] Resolving any globals that are futures ...
[11:01:48.441] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:48.441] Resolving any globals that are futures ... DONE
[11:01:48.441] Resolving futures part of globals (recursively) ...
[11:01:48.441] resolve() on list ...
[11:01:48.441]  recursive: 99
[11:01:48.441]  length: 1
[11:01:48.441]  elements: ‘x’
[11:01:48.442]  length: 0 (resolved future 1)
[11:01:48.442] resolve() on list ... DONE
[11:01:48.442] - globals: [1] ‘x’
[11:01:48.442] Resolving futures part of globals (recursively) ... DONE
[11:01:48.442] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:48.442] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:48.442] - globals: [1] ‘x’
[11:01:48.443] 
[11:01:48.443] getGlobalsAndPackages() ... DONE
[11:01:48.443] run() for ‘Future’ ...
[11:01:48.443] - state: ‘created’
[11:01:48.443] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:48.457] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:48.457] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:48.457]   - Field: ‘node’
[11:01:48.457]   - Field: ‘label’
[11:01:48.457]   - Field: ‘local’
[11:01:48.457]   - Field: ‘owner’
[11:01:48.457]   - Field: ‘envir’
[11:01:48.457]   - Field: ‘workers’
[11:01:48.458]   - Field: ‘packages’
[11:01:48.458]   - Field: ‘gc’
[11:01:48.458]   - Field: ‘conditions’
[11:01:48.458]   - Field: ‘persistent’
[11:01:48.458]   - Field: ‘expr’
[11:01:48.458]   - Field: ‘uuid’
[11:01:48.458]   - Field: ‘seed’
[11:01:48.458]   - Field: ‘version’
[11:01:48.458]   - Field: ‘result’
[11:01:48.458]   - Field: ‘asynchronous’
[11:01:48.458]   - Field: ‘calls’
[11:01:48.458]   - Field: ‘globals’
[11:01:48.459]   - Field: ‘stdout’
[11:01:48.459]   - Field: ‘earlySignal’
[11:01:48.459]   - Field: ‘lazy’
[11:01:48.459]   - Field: ‘state’
[11:01:48.459] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:48.459] - Launch lazy future ...
[11:01:48.459] Packages needed by the future expression (n = 0): <none>
[11:01:48.459] Packages needed by future strategies (n = 0): <none>
[11:01:48.460] {
[11:01:48.460]     {
[11:01:48.460]         {
[11:01:48.460]             ...future.startTime <- base::Sys.time()
[11:01:48.460]             {
[11:01:48.460]                 {
[11:01:48.460]                   {
[11:01:48.460]                     {
[11:01:48.460]                       base::local({
[11:01:48.460]                         has_future <- base::requireNamespace("future", 
[11:01:48.460]                           quietly = TRUE)
[11:01:48.460]                         if (has_future) {
[11:01:48.460]                           ns <- base::getNamespace("future")
[11:01:48.460]                           version <- ns[[".package"]][["version"]]
[11:01:48.460]                           if (is.null(version)) 
[11:01:48.460]                             version <- utils::packageVersion("future")
[11:01:48.460]                         }
[11:01:48.460]                         else {
[11:01:48.460]                           version <- NULL
[11:01:48.460]                         }
[11:01:48.460]                         if (!has_future || version < "1.8.0") {
[11:01:48.460]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.460]                             "", base::R.version$version.string), 
[11:01:48.460]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.460]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.460]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.460]                               "release", "version")], collapse = " "), 
[11:01:48.460]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.460]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.460]                             info)
[11:01:48.460]                           info <- base::paste(info, collapse = "; ")
[11:01:48.460]                           if (!has_future) {
[11:01:48.460]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.460]                               info)
[11:01:48.460]                           }
[11:01:48.460]                           else {
[11:01:48.460]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.460]                               info, version)
[11:01:48.460]                           }
[11:01:48.460]                           base::stop(msg)
[11:01:48.460]                         }
[11:01:48.460]                       })
[11:01:48.460]                     }
[11:01:48.460]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.460]                     base::options(mc.cores = 1L)
[11:01:48.460]                   }
[11:01:48.460]                   ...future.strategy.old <- future::plan("list")
[11:01:48.460]                   options(future.plan = NULL)
[11:01:48.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.460]                 }
[11:01:48.460]                 ...future.workdir <- getwd()
[11:01:48.460]             }
[11:01:48.460]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.460]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.460]         }
[11:01:48.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.460]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.460]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.460]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.460]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.460]             base::names(...future.oldOptions))
[11:01:48.460]     }
[11:01:48.460]     if (FALSE) {
[11:01:48.460]     }
[11:01:48.460]     else {
[11:01:48.460]         if (TRUE) {
[11:01:48.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.460]                 open = "w")
[11:01:48.460]         }
[11:01:48.460]         else {
[11:01:48.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.460]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.460]         }
[11:01:48.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.460]             base::sink(type = "output", split = FALSE)
[11:01:48.460]             base::close(...future.stdout)
[11:01:48.460]         }, add = TRUE)
[11:01:48.460]     }
[11:01:48.460]     ...future.frame <- base::sys.nframe()
[11:01:48.460]     ...future.conditions <- base::list()
[11:01:48.460]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.460]     if (FALSE) {
[11:01:48.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.460]     }
[11:01:48.460]     ...future.result <- base::tryCatch({
[11:01:48.460]         base::withCallingHandlers({
[11:01:48.460]             ...future.value <- base::withVisible(base::local({
[11:01:48.460]                 ...future.makeSendCondition <- base::local({
[11:01:48.460]                   sendCondition <- NULL
[11:01:48.460]                   function(frame = 1L) {
[11:01:48.460]                     if (is.function(sendCondition)) 
[11:01:48.460]                       return(sendCondition)
[11:01:48.460]                     ns <- getNamespace("parallel")
[11:01:48.460]                     if (exists("sendData", mode = "function", 
[11:01:48.460]                       envir = ns)) {
[11:01:48.460]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.460]                         envir = ns)
[11:01:48.460]                       envir <- sys.frame(frame)
[11:01:48.460]                       master <- NULL
[11:01:48.460]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.460]                         !identical(envir, emptyenv())) {
[11:01:48.460]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.460]                           inherits = FALSE)) {
[11:01:48.460]                           master <- get("master", mode = "list", 
[11:01:48.460]                             envir = envir, inherits = FALSE)
[11:01:48.460]                           if (inherits(master, c("SOCKnode", 
[11:01:48.460]                             "SOCK0node"))) {
[11:01:48.460]                             sendCondition <<- function(cond) {
[11:01:48.460]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.460]                                 success = TRUE)
[11:01:48.460]                               parallel_sendData(master, data)
[11:01:48.460]                             }
[11:01:48.460]                             return(sendCondition)
[11:01:48.460]                           }
[11:01:48.460]                         }
[11:01:48.460]                         frame <- frame + 1L
[11:01:48.460]                         envir <- sys.frame(frame)
[11:01:48.460]                       }
[11:01:48.460]                     }
[11:01:48.460]                     sendCondition <<- function(cond) NULL
[11:01:48.460]                   }
[11:01:48.460]                 })
[11:01:48.460]                 withCallingHandlers({
[11:01:48.460]                   {
[11:01:48.460]                     x$a <- 1
[11:01:48.460]                     x
[11:01:48.460]                   }
[11:01:48.460]                 }, immediateCondition = function(cond) {
[11:01:48.460]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.460]                   sendCondition(cond)
[11:01:48.460]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.460]                   {
[11:01:48.460]                     inherits <- base::inherits
[11:01:48.460]                     invokeRestart <- base::invokeRestart
[11:01:48.460]                     is.null <- base::is.null
[11:01:48.460]                     muffled <- FALSE
[11:01:48.460]                     if (inherits(cond, "message")) {
[11:01:48.460]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.460]                       if (muffled) 
[11:01:48.460]                         invokeRestart("muffleMessage")
[11:01:48.460]                     }
[11:01:48.460]                     else if (inherits(cond, "warning")) {
[11:01:48.460]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.460]                       if (muffled) 
[11:01:48.460]                         invokeRestart("muffleWarning")
[11:01:48.460]                     }
[11:01:48.460]                     else if (inherits(cond, "condition")) {
[11:01:48.460]                       if (!is.null(pattern)) {
[11:01:48.460]                         computeRestarts <- base::computeRestarts
[11:01:48.460]                         grepl <- base::grepl
[11:01:48.460]                         restarts <- computeRestarts(cond)
[11:01:48.460]                         for (restart in restarts) {
[11:01:48.460]                           name <- restart$name
[11:01:48.460]                           if (is.null(name)) 
[11:01:48.460]                             next
[11:01:48.460]                           if (!grepl(pattern, name)) 
[11:01:48.460]                             next
[11:01:48.460]                           invokeRestart(restart)
[11:01:48.460]                           muffled <- TRUE
[11:01:48.460]                           break
[11:01:48.460]                         }
[11:01:48.460]                       }
[11:01:48.460]                     }
[11:01:48.460]                     invisible(muffled)
[11:01:48.460]                   }
[11:01:48.460]                   muffleCondition(cond)
[11:01:48.460]                 })
[11:01:48.460]             }))
[11:01:48.460]             future::FutureResult(value = ...future.value$value, 
[11:01:48.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.460]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.460]                     ...future.globalenv.names))
[11:01:48.460]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.460]         }, condition = base::local({
[11:01:48.460]             c <- base::c
[11:01:48.460]             inherits <- base::inherits
[11:01:48.460]             invokeRestart <- base::invokeRestart
[11:01:48.460]             length <- base::length
[11:01:48.460]             list <- base::list
[11:01:48.460]             seq.int <- base::seq.int
[11:01:48.460]             signalCondition <- base::signalCondition
[11:01:48.460]             sys.calls <- base::sys.calls
[11:01:48.460]             `[[` <- base::`[[`
[11:01:48.460]             `+` <- base::`+`
[11:01:48.460]             `<<-` <- base::`<<-`
[11:01:48.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.460]                   3L)]
[11:01:48.460]             }
[11:01:48.460]             function(cond) {
[11:01:48.460]                 is_error <- inherits(cond, "error")
[11:01:48.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.460]                   NULL)
[11:01:48.460]                 if (is_error) {
[11:01:48.460]                   sessionInformation <- function() {
[11:01:48.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.460]                       search = base::search(), system = base::Sys.info())
[11:01:48.460]                   }
[11:01:48.460]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.460]                     cond$call), session = sessionInformation(), 
[11:01:48.460]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.460]                   signalCondition(cond)
[11:01:48.460]                 }
[11:01:48.460]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.460]                 "immediateCondition"))) {
[11:01:48.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.460]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.460]                   if (TRUE && !signal) {
[11:01:48.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.460]                     {
[11:01:48.460]                       inherits <- base::inherits
[11:01:48.460]                       invokeRestart <- base::invokeRestart
[11:01:48.460]                       is.null <- base::is.null
[11:01:48.460]                       muffled <- FALSE
[11:01:48.460]                       if (inherits(cond, "message")) {
[11:01:48.460]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.460]                         if (muffled) 
[11:01:48.460]                           invokeRestart("muffleMessage")
[11:01:48.460]                       }
[11:01:48.460]                       else if (inherits(cond, "warning")) {
[11:01:48.460]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.460]                         if (muffled) 
[11:01:48.460]                           invokeRestart("muffleWarning")
[11:01:48.460]                       }
[11:01:48.460]                       else if (inherits(cond, "condition")) {
[11:01:48.460]                         if (!is.null(pattern)) {
[11:01:48.460]                           computeRestarts <- base::computeRestarts
[11:01:48.460]                           grepl <- base::grepl
[11:01:48.460]                           restarts <- computeRestarts(cond)
[11:01:48.460]                           for (restart in restarts) {
[11:01:48.460]                             name <- restart$name
[11:01:48.460]                             if (is.null(name)) 
[11:01:48.460]                               next
[11:01:48.460]                             if (!grepl(pattern, name)) 
[11:01:48.460]                               next
[11:01:48.460]                             invokeRestart(restart)
[11:01:48.460]                             muffled <- TRUE
[11:01:48.460]                             break
[11:01:48.460]                           }
[11:01:48.460]                         }
[11:01:48.460]                       }
[11:01:48.460]                       invisible(muffled)
[11:01:48.460]                     }
[11:01:48.460]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.460]                   }
[11:01:48.460]                 }
[11:01:48.460]                 else {
[11:01:48.460]                   if (TRUE) {
[11:01:48.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.460]                     {
[11:01:48.460]                       inherits <- base::inherits
[11:01:48.460]                       invokeRestart <- base::invokeRestart
[11:01:48.460]                       is.null <- base::is.null
[11:01:48.460]                       muffled <- FALSE
[11:01:48.460]                       if (inherits(cond, "message")) {
[11:01:48.460]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.460]                         if (muffled) 
[11:01:48.460]                           invokeRestart("muffleMessage")
[11:01:48.460]                       }
[11:01:48.460]                       else if (inherits(cond, "warning")) {
[11:01:48.460]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.460]                         if (muffled) 
[11:01:48.460]                           invokeRestart("muffleWarning")
[11:01:48.460]                       }
[11:01:48.460]                       else if (inherits(cond, "condition")) {
[11:01:48.460]                         if (!is.null(pattern)) {
[11:01:48.460]                           computeRestarts <- base::computeRestarts
[11:01:48.460]                           grepl <- base::grepl
[11:01:48.460]                           restarts <- computeRestarts(cond)
[11:01:48.460]                           for (restart in restarts) {
[11:01:48.460]                             name <- restart$name
[11:01:48.460]                             if (is.null(name)) 
[11:01:48.460]                               next
[11:01:48.460]                             if (!grepl(pattern, name)) 
[11:01:48.460]                               next
[11:01:48.460]                             invokeRestart(restart)
[11:01:48.460]                             muffled <- TRUE
[11:01:48.460]                             break
[11:01:48.460]                           }
[11:01:48.460]                         }
[11:01:48.460]                       }
[11:01:48.460]                       invisible(muffled)
[11:01:48.460]                     }
[11:01:48.460]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.460]                   }
[11:01:48.460]                 }
[11:01:48.460]             }
[11:01:48.460]         }))
[11:01:48.460]     }, error = function(ex) {
[11:01:48.460]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.460]                 ...future.rng), started = ...future.startTime, 
[11:01:48.460]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.460]             version = "1.8"), class = "FutureResult")
[11:01:48.460]     }, finally = {
[11:01:48.460]         if (!identical(...future.workdir, getwd())) 
[11:01:48.460]             setwd(...future.workdir)
[11:01:48.460]         {
[11:01:48.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.460]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.460]             }
[11:01:48.460]             base::options(...future.oldOptions)
[11:01:48.460]             if (.Platform$OS.type == "windows") {
[11:01:48.460]                 old_names <- names(...future.oldEnvVars)
[11:01:48.460]                 envs <- base::Sys.getenv()
[11:01:48.460]                 names <- names(envs)
[11:01:48.460]                 common <- intersect(names, old_names)
[11:01:48.460]                 added <- setdiff(names, old_names)
[11:01:48.460]                 removed <- setdiff(old_names, names)
[11:01:48.460]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.460]                   envs[common]]
[11:01:48.460]                 NAMES <- toupper(changed)
[11:01:48.460]                 args <- list()
[11:01:48.460]                 for (kk in seq_along(NAMES)) {
[11:01:48.460]                   name <- changed[[kk]]
[11:01:48.460]                   NAME <- NAMES[[kk]]
[11:01:48.460]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.460]                     next
[11:01:48.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.460]                 }
[11:01:48.460]                 NAMES <- toupper(added)
[11:01:48.460]                 for (kk in seq_along(NAMES)) {
[11:01:48.460]                   name <- added[[kk]]
[11:01:48.460]                   NAME <- NAMES[[kk]]
[11:01:48.460]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.460]                     next
[11:01:48.460]                   args[[name]] <- ""
[11:01:48.460]                 }
[11:01:48.460]                 NAMES <- toupper(removed)
[11:01:48.460]                 for (kk in seq_along(NAMES)) {
[11:01:48.460]                   name <- removed[[kk]]
[11:01:48.460]                   NAME <- NAMES[[kk]]
[11:01:48.460]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.460]                     next
[11:01:48.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.460]                 }
[11:01:48.460]                 if (length(args) > 0) 
[11:01:48.460]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.460]             }
[11:01:48.460]             else {
[11:01:48.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.460]             }
[11:01:48.460]             {
[11:01:48.460]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.460]                   0L) {
[11:01:48.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.460]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.460]                   base::options(opts)
[11:01:48.460]                 }
[11:01:48.460]                 {
[11:01:48.460]                   {
[11:01:48.460]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.460]                     NULL
[11:01:48.460]                   }
[11:01:48.460]                   options(future.plan = NULL)
[11:01:48.460]                   if (is.na(NA_character_)) 
[11:01:48.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.460]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.460]                     .init = FALSE)
[11:01:48.460]                 }
[11:01:48.460]             }
[11:01:48.460]         }
[11:01:48.460]     })
[11:01:48.460]     if (TRUE) {
[11:01:48.460]         base::sink(type = "output", split = FALSE)
[11:01:48.460]         if (TRUE) {
[11:01:48.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.460]         }
[11:01:48.460]         else {
[11:01:48.460]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.460]         }
[11:01:48.460]         base::close(...future.stdout)
[11:01:48.460]         ...future.stdout <- NULL
[11:01:48.460]     }
[11:01:48.460]     ...future.result$conditions <- ...future.conditions
[11:01:48.460]     ...future.result$finished <- base::Sys.time()
[11:01:48.460]     ...future.result
[11:01:48.460] }
[11:01:48.462] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:48.463] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:48.463] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:48.463] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:48.464] MultisessionFuture started
[11:01:48.464] - Launch lazy future ... done
[11:01:48.464] run() for ‘MultisessionFuture’ ... done
[11:01:48.464] result() for ClusterFuture ...
[11:01:48.464] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.464] - Validating connection of MultisessionFuture
[11:01:48.505] - received message: FutureResult
[11:01:48.505] - Received FutureResult
[11:01:48.506] - Erased future from FutureRegistry
[11:01:48.506] result() for ClusterFuture ...
[11:01:48.506] - result already collected: FutureResult
[11:01:48.506] result() for ClusterFuture ... done
[11:01:48.506] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.506] result() for ClusterFuture ... done
[11:01:48.506] result() for ClusterFuture ...
[11:01:48.506] - result already collected: FutureResult
[11:01:48.507] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.507] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.507] Searching for globals...
[11:01:48.509] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:48.509] Searching for globals ... DONE
[11:01:48.510] Resolving globals: TRUE
[11:01:48.510] Resolving any globals that are futures ...
[11:01:48.510] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:48.510] Resolving any globals that are futures ... DONE
[11:01:48.510] Resolving futures part of globals (recursively) ...
[11:01:48.511] resolve() on list ...
[11:01:48.511]  recursive: 99
[11:01:48.511]  length: 1
[11:01:48.511]  elements: ‘x’
[11:01:48.511]  length: 0 (resolved future 1)
[11:01:48.511] resolve() on list ... DONE
[11:01:48.511] - globals: [1] ‘x’
[11:01:48.511] Resolving futures part of globals (recursively) ... DONE
[11:01:48.511] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:48.512] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:48.512] - globals: [1] ‘x’
[11:01:48.512] 
[11:01:48.512] getGlobalsAndPackages() ... DONE
[11:01:48.512] run() for ‘Future’ ...
[11:01:48.513] - state: ‘created’
[11:01:48.513] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:48.527] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:48.527] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:48.527]   - Field: ‘node’
[11:01:48.527]   - Field: ‘label’
[11:01:48.527]   - Field: ‘local’
[11:01:48.528]   - Field: ‘owner’
[11:01:48.528]   - Field: ‘envir’
[11:01:48.528]   - Field: ‘workers’
[11:01:48.528]   - Field: ‘packages’
[11:01:48.528]   - Field: ‘gc’
[11:01:48.528]   - Field: ‘conditions’
[11:01:48.528]   - Field: ‘persistent’
[11:01:48.528]   - Field: ‘expr’
[11:01:48.528]   - Field: ‘uuid’
[11:01:48.528]   - Field: ‘seed’
[11:01:48.529]   - Field: ‘version’
[11:01:48.529]   - Field: ‘result’
[11:01:48.529]   - Field: ‘asynchronous’
[11:01:48.529]   - Field: ‘calls’
[11:01:48.529]   - Field: ‘globals’
[11:01:48.529]   - Field: ‘stdout’
[11:01:48.529]   - Field: ‘earlySignal’
[11:01:48.529]   - Field: ‘lazy’
[11:01:48.529]   - Field: ‘state’
[11:01:48.530] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:48.530] - Launch lazy future ...
[11:01:48.530] Packages needed by the future expression (n = 0): <none>
[11:01:48.530] Packages needed by future strategies (n = 0): <none>
[11:01:48.531] {
[11:01:48.531]     {
[11:01:48.531]         {
[11:01:48.531]             ...future.startTime <- base::Sys.time()
[11:01:48.531]             {
[11:01:48.531]                 {
[11:01:48.531]                   {
[11:01:48.531]                     {
[11:01:48.531]                       base::local({
[11:01:48.531]                         has_future <- base::requireNamespace("future", 
[11:01:48.531]                           quietly = TRUE)
[11:01:48.531]                         if (has_future) {
[11:01:48.531]                           ns <- base::getNamespace("future")
[11:01:48.531]                           version <- ns[[".package"]][["version"]]
[11:01:48.531]                           if (is.null(version)) 
[11:01:48.531]                             version <- utils::packageVersion("future")
[11:01:48.531]                         }
[11:01:48.531]                         else {
[11:01:48.531]                           version <- NULL
[11:01:48.531]                         }
[11:01:48.531]                         if (!has_future || version < "1.8.0") {
[11:01:48.531]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.531]                             "", base::R.version$version.string), 
[11:01:48.531]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.531]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.531]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.531]                               "release", "version")], collapse = " "), 
[11:01:48.531]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.531]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.531]                             info)
[11:01:48.531]                           info <- base::paste(info, collapse = "; ")
[11:01:48.531]                           if (!has_future) {
[11:01:48.531]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.531]                               info)
[11:01:48.531]                           }
[11:01:48.531]                           else {
[11:01:48.531]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.531]                               info, version)
[11:01:48.531]                           }
[11:01:48.531]                           base::stop(msg)
[11:01:48.531]                         }
[11:01:48.531]                       })
[11:01:48.531]                     }
[11:01:48.531]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.531]                     base::options(mc.cores = 1L)
[11:01:48.531]                   }
[11:01:48.531]                   ...future.strategy.old <- future::plan("list")
[11:01:48.531]                   options(future.plan = NULL)
[11:01:48.531]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.531]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.531]                 }
[11:01:48.531]                 ...future.workdir <- getwd()
[11:01:48.531]             }
[11:01:48.531]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.531]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.531]         }
[11:01:48.531]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.531]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.531]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.531]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.531]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.531]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.531]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.531]             base::names(...future.oldOptions))
[11:01:48.531]     }
[11:01:48.531]     if (FALSE) {
[11:01:48.531]     }
[11:01:48.531]     else {
[11:01:48.531]         if (TRUE) {
[11:01:48.531]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.531]                 open = "w")
[11:01:48.531]         }
[11:01:48.531]         else {
[11:01:48.531]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.531]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.531]         }
[11:01:48.531]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.531]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.531]             base::sink(type = "output", split = FALSE)
[11:01:48.531]             base::close(...future.stdout)
[11:01:48.531]         }, add = TRUE)
[11:01:48.531]     }
[11:01:48.531]     ...future.frame <- base::sys.nframe()
[11:01:48.531]     ...future.conditions <- base::list()
[11:01:48.531]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.531]     if (FALSE) {
[11:01:48.531]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.531]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.531]     }
[11:01:48.531]     ...future.result <- base::tryCatch({
[11:01:48.531]         base::withCallingHandlers({
[11:01:48.531]             ...future.value <- base::withVisible(base::local({
[11:01:48.531]                 ...future.makeSendCondition <- base::local({
[11:01:48.531]                   sendCondition <- NULL
[11:01:48.531]                   function(frame = 1L) {
[11:01:48.531]                     if (is.function(sendCondition)) 
[11:01:48.531]                       return(sendCondition)
[11:01:48.531]                     ns <- getNamespace("parallel")
[11:01:48.531]                     if (exists("sendData", mode = "function", 
[11:01:48.531]                       envir = ns)) {
[11:01:48.531]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.531]                         envir = ns)
[11:01:48.531]                       envir <- sys.frame(frame)
[11:01:48.531]                       master <- NULL
[11:01:48.531]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.531]                         !identical(envir, emptyenv())) {
[11:01:48.531]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.531]                           inherits = FALSE)) {
[11:01:48.531]                           master <- get("master", mode = "list", 
[11:01:48.531]                             envir = envir, inherits = FALSE)
[11:01:48.531]                           if (inherits(master, c("SOCKnode", 
[11:01:48.531]                             "SOCK0node"))) {
[11:01:48.531]                             sendCondition <<- function(cond) {
[11:01:48.531]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.531]                                 success = TRUE)
[11:01:48.531]                               parallel_sendData(master, data)
[11:01:48.531]                             }
[11:01:48.531]                             return(sendCondition)
[11:01:48.531]                           }
[11:01:48.531]                         }
[11:01:48.531]                         frame <- frame + 1L
[11:01:48.531]                         envir <- sys.frame(frame)
[11:01:48.531]                       }
[11:01:48.531]                     }
[11:01:48.531]                     sendCondition <<- function(cond) NULL
[11:01:48.531]                   }
[11:01:48.531]                 })
[11:01:48.531]                 withCallingHandlers({
[11:01:48.531]                   {
[11:01:48.531]                     x$a <- 1
[11:01:48.531]                     x
[11:01:48.531]                   }
[11:01:48.531]                 }, immediateCondition = function(cond) {
[11:01:48.531]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.531]                   sendCondition(cond)
[11:01:48.531]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.531]                   {
[11:01:48.531]                     inherits <- base::inherits
[11:01:48.531]                     invokeRestart <- base::invokeRestart
[11:01:48.531]                     is.null <- base::is.null
[11:01:48.531]                     muffled <- FALSE
[11:01:48.531]                     if (inherits(cond, "message")) {
[11:01:48.531]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.531]                       if (muffled) 
[11:01:48.531]                         invokeRestart("muffleMessage")
[11:01:48.531]                     }
[11:01:48.531]                     else if (inherits(cond, "warning")) {
[11:01:48.531]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.531]                       if (muffled) 
[11:01:48.531]                         invokeRestart("muffleWarning")
[11:01:48.531]                     }
[11:01:48.531]                     else if (inherits(cond, "condition")) {
[11:01:48.531]                       if (!is.null(pattern)) {
[11:01:48.531]                         computeRestarts <- base::computeRestarts
[11:01:48.531]                         grepl <- base::grepl
[11:01:48.531]                         restarts <- computeRestarts(cond)
[11:01:48.531]                         for (restart in restarts) {
[11:01:48.531]                           name <- restart$name
[11:01:48.531]                           if (is.null(name)) 
[11:01:48.531]                             next
[11:01:48.531]                           if (!grepl(pattern, name)) 
[11:01:48.531]                             next
[11:01:48.531]                           invokeRestart(restart)
[11:01:48.531]                           muffled <- TRUE
[11:01:48.531]                           break
[11:01:48.531]                         }
[11:01:48.531]                       }
[11:01:48.531]                     }
[11:01:48.531]                     invisible(muffled)
[11:01:48.531]                   }
[11:01:48.531]                   muffleCondition(cond)
[11:01:48.531]                 })
[11:01:48.531]             }))
[11:01:48.531]             future::FutureResult(value = ...future.value$value, 
[11:01:48.531]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.531]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.531]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.531]                     ...future.globalenv.names))
[11:01:48.531]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.531]         }, condition = base::local({
[11:01:48.531]             c <- base::c
[11:01:48.531]             inherits <- base::inherits
[11:01:48.531]             invokeRestart <- base::invokeRestart
[11:01:48.531]             length <- base::length
[11:01:48.531]             list <- base::list
[11:01:48.531]             seq.int <- base::seq.int
[11:01:48.531]             signalCondition <- base::signalCondition
[11:01:48.531]             sys.calls <- base::sys.calls
[11:01:48.531]             `[[` <- base::`[[`
[11:01:48.531]             `+` <- base::`+`
[11:01:48.531]             `<<-` <- base::`<<-`
[11:01:48.531]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.531]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.531]                   3L)]
[11:01:48.531]             }
[11:01:48.531]             function(cond) {
[11:01:48.531]                 is_error <- inherits(cond, "error")
[11:01:48.531]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.531]                   NULL)
[11:01:48.531]                 if (is_error) {
[11:01:48.531]                   sessionInformation <- function() {
[11:01:48.531]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.531]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.531]                       search = base::search(), system = base::Sys.info())
[11:01:48.531]                   }
[11:01:48.531]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.531]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.531]                     cond$call), session = sessionInformation(), 
[11:01:48.531]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.531]                   signalCondition(cond)
[11:01:48.531]                 }
[11:01:48.531]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.531]                 "immediateCondition"))) {
[11:01:48.531]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.531]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.531]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.531]                   if (TRUE && !signal) {
[11:01:48.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.531]                     {
[11:01:48.531]                       inherits <- base::inherits
[11:01:48.531]                       invokeRestart <- base::invokeRestart
[11:01:48.531]                       is.null <- base::is.null
[11:01:48.531]                       muffled <- FALSE
[11:01:48.531]                       if (inherits(cond, "message")) {
[11:01:48.531]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.531]                         if (muffled) 
[11:01:48.531]                           invokeRestart("muffleMessage")
[11:01:48.531]                       }
[11:01:48.531]                       else if (inherits(cond, "warning")) {
[11:01:48.531]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.531]                         if (muffled) 
[11:01:48.531]                           invokeRestart("muffleWarning")
[11:01:48.531]                       }
[11:01:48.531]                       else if (inherits(cond, "condition")) {
[11:01:48.531]                         if (!is.null(pattern)) {
[11:01:48.531]                           computeRestarts <- base::computeRestarts
[11:01:48.531]                           grepl <- base::grepl
[11:01:48.531]                           restarts <- computeRestarts(cond)
[11:01:48.531]                           for (restart in restarts) {
[11:01:48.531]                             name <- restart$name
[11:01:48.531]                             if (is.null(name)) 
[11:01:48.531]                               next
[11:01:48.531]                             if (!grepl(pattern, name)) 
[11:01:48.531]                               next
[11:01:48.531]                             invokeRestart(restart)
[11:01:48.531]                             muffled <- TRUE
[11:01:48.531]                             break
[11:01:48.531]                           }
[11:01:48.531]                         }
[11:01:48.531]                       }
[11:01:48.531]                       invisible(muffled)
[11:01:48.531]                     }
[11:01:48.531]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.531]                   }
[11:01:48.531]                 }
[11:01:48.531]                 else {
[11:01:48.531]                   if (TRUE) {
[11:01:48.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.531]                     {
[11:01:48.531]                       inherits <- base::inherits
[11:01:48.531]                       invokeRestart <- base::invokeRestart
[11:01:48.531]                       is.null <- base::is.null
[11:01:48.531]                       muffled <- FALSE
[11:01:48.531]                       if (inherits(cond, "message")) {
[11:01:48.531]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.531]                         if (muffled) 
[11:01:48.531]                           invokeRestart("muffleMessage")
[11:01:48.531]                       }
[11:01:48.531]                       else if (inherits(cond, "warning")) {
[11:01:48.531]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.531]                         if (muffled) 
[11:01:48.531]                           invokeRestart("muffleWarning")
[11:01:48.531]                       }
[11:01:48.531]                       else if (inherits(cond, "condition")) {
[11:01:48.531]                         if (!is.null(pattern)) {
[11:01:48.531]                           computeRestarts <- base::computeRestarts
[11:01:48.531]                           grepl <- base::grepl
[11:01:48.531]                           restarts <- computeRestarts(cond)
[11:01:48.531]                           for (restart in restarts) {
[11:01:48.531]                             name <- restart$name
[11:01:48.531]                             if (is.null(name)) 
[11:01:48.531]                               next
[11:01:48.531]                             if (!grepl(pattern, name)) 
[11:01:48.531]                               next
[11:01:48.531]                             invokeRestart(restart)
[11:01:48.531]                             muffled <- TRUE
[11:01:48.531]                             break
[11:01:48.531]                           }
[11:01:48.531]                         }
[11:01:48.531]                       }
[11:01:48.531]                       invisible(muffled)
[11:01:48.531]                     }
[11:01:48.531]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.531]                   }
[11:01:48.531]                 }
[11:01:48.531]             }
[11:01:48.531]         }))
[11:01:48.531]     }, error = function(ex) {
[11:01:48.531]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.531]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.531]                 ...future.rng), started = ...future.startTime, 
[11:01:48.531]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.531]             version = "1.8"), class = "FutureResult")
[11:01:48.531]     }, finally = {
[11:01:48.531]         if (!identical(...future.workdir, getwd())) 
[11:01:48.531]             setwd(...future.workdir)
[11:01:48.531]         {
[11:01:48.531]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.531]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.531]             }
[11:01:48.531]             base::options(...future.oldOptions)
[11:01:48.531]             if (.Platform$OS.type == "windows") {
[11:01:48.531]                 old_names <- names(...future.oldEnvVars)
[11:01:48.531]                 envs <- base::Sys.getenv()
[11:01:48.531]                 names <- names(envs)
[11:01:48.531]                 common <- intersect(names, old_names)
[11:01:48.531]                 added <- setdiff(names, old_names)
[11:01:48.531]                 removed <- setdiff(old_names, names)
[11:01:48.531]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.531]                   envs[common]]
[11:01:48.531]                 NAMES <- toupper(changed)
[11:01:48.531]                 args <- list()
[11:01:48.531]                 for (kk in seq_along(NAMES)) {
[11:01:48.531]                   name <- changed[[kk]]
[11:01:48.531]                   NAME <- NAMES[[kk]]
[11:01:48.531]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.531]                     next
[11:01:48.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.531]                 }
[11:01:48.531]                 NAMES <- toupper(added)
[11:01:48.531]                 for (kk in seq_along(NAMES)) {
[11:01:48.531]                   name <- added[[kk]]
[11:01:48.531]                   NAME <- NAMES[[kk]]
[11:01:48.531]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.531]                     next
[11:01:48.531]                   args[[name]] <- ""
[11:01:48.531]                 }
[11:01:48.531]                 NAMES <- toupper(removed)
[11:01:48.531]                 for (kk in seq_along(NAMES)) {
[11:01:48.531]                   name <- removed[[kk]]
[11:01:48.531]                   NAME <- NAMES[[kk]]
[11:01:48.531]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.531]                     next
[11:01:48.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.531]                 }
[11:01:48.531]                 if (length(args) > 0) 
[11:01:48.531]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.531]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.531]             }
[11:01:48.531]             else {
[11:01:48.531]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.531]             }
[11:01:48.531]             {
[11:01:48.531]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.531]                   0L) {
[11:01:48.531]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.531]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.531]                   base::options(opts)
[11:01:48.531]                 }
[11:01:48.531]                 {
[11:01:48.531]                   {
[11:01:48.531]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.531]                     NULL
[11:01:48.531]                   }
[11:01:48.531]                   options(future.plan = NULL)
[11:01:48.531]                   if (is.na(NA_character_)) 
[11:01:48.531]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.531]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.531]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.531]                     .init = FALSE)
[11:01:48.531]                 }
[11:01:48.531]             }
[11:01:48.531]         }
[11:01:48.531]     })
[11:01:48.531]     if (TRUE) {
[11:01:48.531]         base::sink(type = "output", split = FALSE)
[11:01:48.531]         if (TRUE) {
[11:01:48.531]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.531]         }
[11:01:48.531]         else {
[11:01:48.531]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.531]         }
[11:01:48.531]         base::close(...future.stdout)
[11:01:48.531]         ...future.stdout <- NULL
[11:01:48.531]     }
[11:01:48.531]     ...future.result$conditions <- ...future.conditions
[11:01:48.531]     ...future.result$finished <- base::Sys.time()
[11:01:48.531]     ...future.result
[11:01:48.531] }
[11:01:48.536] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:48.537] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:48.537] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:48.537] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:48.538] MultisessionFuture started
[11:01:48.538] - Launch lazy future ... done
[11:01:48.538] run() for ‘MultisessionFuture’ ... done
[11:01:48.538] result() for ClusterFuture ...
[11:01:48.538] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.538] - Validating connection of MultisessionFuture
[11:01:48.580] - received message: FutureResult
[11:01:48.580] - Received FutureResult
[11:01:48.580] - Erased future from FutureRegistry
[11:01:48.580] result() for ClusterFuture ...
[11:01:48.580] - result already collected: FutureResult
[11:01:48.580] result() for ClusterFuture ... done
[11:01:48.581] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.581] result() for ClusterFuture ... done
[11:01:48.581] result() for ClusterFuture ...
[11:01:48.581] - result already collected: FutureResult
[11:01:48.581] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.582] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.582] Searching for globals...
[11:01:48.584] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:48.584] Searching for globals ... DONE
[11:01:48.584] Resolving globals: TRUE
[11:01:48.585] Resolving any globals that are futures ...
[11:01:48.585] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:48.585] Resolving any globals that are futures ... DONE
[11:01:48.585] Resolving futures part of globals (recursively) ...
[11:01:48.585] resolve() on list ...
[11:01:48.586]  recursive: 99
[11:01:48.586]  length: 1
[11:01:48.586]  elements: ‘x’
[11:01:48.586]  length: 0 (resolved future 1)
[11:01:48.586] resolve() on list ... DONE
[11:01:48.586] - globals: [1] ‘x’
[11:01:48.586] Resolving futures part of globals (recursively) ... DONE
[11:01:48.586] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:48.587] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:48.587] - globals: [1] ‘x’
[11:01:48.587] 
[11:01:48.587] getGlobalsAndPackages() ... DONE
[11:01:48.587] run() for ‘Future’ ...
[11:01:48.588] - state: ‘created’
[11:01:48.588] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:48.602] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:48.602] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:48.602]   - Field: ‘node’
[11:01:48.603]   - Field: ‘label’
[11:01:48.603]   - Field: ‘local’
[11:01:48.603]   - Field: ‘owner’
[11:01:48.603]   - Field: ‘envir’
[11:01:48.603]   - Field: ‘workers’
[11:01:48.603]   - Field: ‘packages’
[11:01:48.603]   - Field: ‘gc’
[11:01:48.603]   - Field: ‘conditions’
[11:01:48.603]   - Field: ‘persistent’
[11:01:48.603]   - Field: ‘expr’
[11:01:48.603]   - Field: ‘uuid’
[11:01:48.604]   - Field: ‘seed’
[11:01:48.604]   - Field: ‘version’
[11:01:48.604]   - Field: ‘result’
[11:01:48.604]   - Field: ‘asynchronous’
[11:01:48.604]   - Field: ‘calls’
[11:01:48.604]   - Field: ‘globals’
[11:01:48.604]   - Field: ‘stdout’
[11:01:48.604]   - Field: ‘earlySignal’
[11:01:48.604]   - Field: ‘lazy’
[11:01:48.605]   - Field: ‘state’
[11:01:48.605] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:48.605] - Launch lazy future ...
[11:01:48.605] Packages needed by the future expression (n = 0): <none>
[11:01:48.605] Packages needed by future strategies (n = 0): <none>
[11:01:48.606] {
[11:01:48.606]     {
[11:01:48.606]         {
[11:01:48.606]             ...future.startTime <- base::Sys.time()
[11:01:48.606]             {
[11:01:48.606]                 {
[11:01:48.606]                   {
[11:01:48.606]                     {
[11:01:48.606]                       base::local({
[11:01:48.606]                         has_future <- base::requireNamespace("future", 
[11:01:48.606]                           quietly = TRUE)
[11:01:48.606]                         if (has_future) {
[11:01:48.606]                           ns <- base::getNamespace("future")
[11:01:48.606]                           version <- ns[[".package"]][["version"]]
[11:01:48.606]                           if (is.null(version)) 
[11:01:48.606]                             version <- utils::packageVersion("future")
[11:01:48.606]                         }
[11:01:48.606]                         else {
[11:01:48.606]                           version <- NULL
[11:01:48.606]                         }
[11:01:48.606]                         if (!has_future || version < "1.8.0") {
[11:01:48.606]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.606]                             "", base::R.version$version.string), 
[11:01:48.606]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.606]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.606]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.606]                               "release", "version")], collapse = " "), 
[11:01:48.606]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.606]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.606]                             info)
[11:01:48.606]                           info <- base::paste(info, collapse = "; ")
[11:01:48.606]                           if (!has_future) {
[11:01:48.606]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.606]                               info)
[11:01:48.606]                           }
[11:01:48.606]                           else {
[11:01:48.606]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.606]                               info, version)
[11:01:48.606]                           }
[11:01:48.606]                           base::stop(msg)
[11:01:48.606]                         }
[11:01:48.606]                       })
[11:01:48.606]                     }
[11:01:48.606]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.606]                     base::options(mc.cores = 1L)
[11:01:48.606]                   }
[11:01:48.606]                   ...future.strategy.old <- future::plan("list")
[11:01:48.606]                   options(future.plan = NULL)
[11:01:48.606]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.606]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.606]                 }
[11:01:48.606]                 ...future.workdir <- getwd()
[11:01:48.606]             }
[11:01:48.606]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.606]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.606]         }
[11:01:48.606]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.606]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.606]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.606]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.606]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.606]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.606]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.606]             base::names(...future.oldOptions))
[11:01:48.606]     }
[11:01:48.606]     if (FALSE) {
[11:01:48.606]     }
[11:01:48.606]     else {
[11:01:48.606]         if (TRUE) {
[11:01:48.606]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.606]                 open = "w")
[11:01:48.606]         }
[11:01:48.606]         else {
[11:01:48.606]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.606]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.606]         }
[11:01:48.606]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.606]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.606]             base::sink(type = "output", split = FALSE)
[11:01:48.606]             base::close(...future.stdout)
[11:01:48.606]         }, add = TRUE)
[11:01:48.606]     }
[11:01:48.606]     ...future.frame <- base::sys.nframe()
[11:01:48.606]     ...future.conditions <- base::list()
[11:01:48.606]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.606]     if (FALSE) {
[11:01:48.606]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.606]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.606]     }
[11:01:48.606]     ...future.result <- base::tryCatch({
[11:01:48.606]         base::withCallingHandlers({
[11:01:48.606]             ...future.value <- base::withVisible(base::local({
[11:01:48.606]                 ...future.makeSendCondition <- base::local({
[11:01:48.606]                   sendCondition <- NULL
[11:01:48.606]                   function(frame = 1L) {
[11:01:48.606]                     if (is.function(sendCondition)) 
[11:01:48.606]                       return(sendCondition)
[11:01:48.606]                     ns <- getNamespace("parallel")
[11:01:48.606]                     if (exists("sendData", mode = "function", 
[11:01:48.606]                       envir = ns)) {
[11:01:48.606]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.606]                         envir = ns)
[11:01:48.606]                       envir <- sys.frame(frame)
[11:01:48.606]                       master <- NULL
[11:01:48.606]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.606]                         !identical(envir, emptyenv())) {
[11:01:48.606]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.606]                           inherits = FALSE)) {
[11:01:48.606]                           master <- get("master", mode = "list", 
[11:01:48.606]                             envir = envir, inherits = FALSE)
[11:01:48.606]                           if (inherits(master, c("SOCKnode", 
[11:01:48.606]                             "SOCK0node"))) {
[11:01:48.606]                             sendCondition <<- function(cond) {
[11:01:48.606]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.606]                                 success = TRUE)
[11:01:48.606]                               parallel_sendData(master, data)
[11:01:48.606]                             }
[11:01:48.606]                             return(sendCondition)
[11:01:48.606]                           }
[11:01:48.606]                         }
[11:01:48.606]                         frame <- frame + 1L
[11:01:48.606]                         envir <- sys.frame(frame)
[11:01:48.606]                       }
[11:01:48.606]                     }
[11:01:48.606]                     sendCondition <<- function(cond) NULL
[11:01:48.606]                   }
[11:01:48.606]                 })
[11:01:48.606]                 withCallingHandlers({
[11:01:48.606]                   {
[11:01:48.606]                     x$a <- 1
[11:01:48.606]                     x
[11:01:48.606]                   }
[11:01:48.606]                 }, immediateCondition = function(cond) {
[11:01:48.606]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.606]                   sendCondition(cond)
[11:01:48.606]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.606]                   {
[11:01:48.606]                     inherits <- base::inherits
[11:01:48.606]                     invokeRestart <- base::invokeRestart
[11:01:48.606]                     is.null <- base::is.null
[11:01:48.606]                     muffled <- FALSE
[11:01:48.606]                     if (inherits(cond, "message")) {
[11:01:48.606]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.606]                       if (muffled) 
[11:01:48.606]                         invokeRestart("muffleMessage")
[11:01:48.606]                     }
[11:01:48.606]                     else if (inherits(cond, "warning")) {
[11:01:48.606]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.606]                       if (muffled) 
[11:01:48.606]                         invokeRestart("muffleWarning")
[11:01:48.606]                     }
[11:01:48.606]                     else if (inherits(cond, "condition")) {
[11:01:48.606]                       if (!is.null(pattern)) {
[11:01:48.606]                         computeRestarts <- base::computeRestarts
[11:01:48.606]                         grepl <- base::grepl
[11:01:48.606]                         restarts <- computeRestarts(cond)
[11:01:48.606]                         for (restart in restarts) {
[11:01:48.606]                           name <- restart$name
[11:01:48.606]                           if (is.null(name)) 
[11:01:48.606]                             next
[11:01:48.606]                           if (!grepl(pattern, name)) 
[11:01:48.606]                             next
[11:01:48.606]                           invokeRestart(restart)
[11:01:48.606]                           muffled <- TRUE
[11:01:48.606]                           break
[11:01:48.606]                         }
[11:01:48.606]                       }
[11:01:48.606]                     }
[11:01:48.606]                     invisible(muffled)
[11:01:48.606]                   }
[11:01:48.606]                   muffleCondition(cond)
[11:01:48.606]                 })
[11:01:48.606]             }))
[11:01:48.606]             future::FutureResult(value = ...future.value$value, 
[11:01:48.606]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.606]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.606]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.606]                     ...future.globalenv.names))
[11:01:48.606]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.606]         }, condition = base::local({
[11:01:48.606]             c <- base::c
[11:01:48.606]             inherits <- base::inherits
[11:01:48.606]             invokeRestart <- base::invokeRestart
[11:01:48.606]             length <- base::length
[11:01:48.606]             list <- base::list
[11:01:48.606]             seq.int <- base::seq.int
[11:01:48.606]             signalCondition <- base::signalCondition
[11:01:48.606]             sys.calls <- base::sys.calls
[11:01:48.606]             `[[` <- base::`[[`
[11:01:48.606]             `+` <- base::`+`
[11:01:48.606]             `<<-` <- base::`<<-`
[11:01:48.606]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.606]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.606]                   3L)]
[11:01:48.606]             }
[11:01:48.606]             function(cond) {
[11:01:48.606]                 is_error <- inherits(cond, "error")
[11:01:48.606]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.606]                   NULL)
[11:01:48.606]                 if (is_error) {
[11:01:48.606]                   sessionInformation <- function() {
[11:01:48.606]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.606]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.606]                       search = base::search(), system = base::Sys.info())
[11:01:48.606]                   }
[11:01:48.606]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.606]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.606]                     cond$call), session = sessionInformation(), 
[11:01:48.606]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.606]                   signalCondition(cond)
[11:01:48.606]                 }
[11:01:48.606]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.606]                 "immediateCondition"))) {
[11:01:48.606]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.606]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.606]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.606]                   if (TRUE && !signal) {
[11:01:48.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.606]                     {
[11:01:48.606]                       inherits <- base::inherits
[11:01:48.606]                       invokeRestart <- base::invokeRestart
[11:01:48.606]                       is.null <- base::is.null
[11:01:48.606]                       muffled <- FALSE
[11:01:48.606]                       if (inherits(cond, "message")) {
[11:01:48.606]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.606]                         if (muffled) 
[11:01:48.606]                           invokeRestart("muffleMessage")
[11:01:48.606]                       }
[11:01:48.606]                       else if (inherits(cond, "warning")) {
[11:01:48.606]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.606]                         if (muffled) 
[11:01:48.606]                           invokeRestart("muffleWarning")
[11:01:48.606]                       }
[11:01:48.606]                       else if (inherits(cond, "condition")) {
[11:01:48.606]                         if (!is.null(pattern)) {
[11:01:48.606]                           computeRestarts <- base::computeRestarts
[11:01:48.606]                           grepl <- base::grepl
[11:01:48.606]                           restarts <- computeRestarts(cond)
[11:01:48.606]                           for (restart in restarts) {
[11:01:48.606]                             name <- restart$name
[11:01:48.606]                             if (is.null(name)) 
[11:01:48.606]                               next
[11:01:48.606]                             if (!grepl(pattern, name)) 
[11:01:48.606]                               next
[11:01:48.606]                             invokeRestart(restart)
[11:01:48.606]                             muffled <- TRUE
[11:01:48.606]                             break
[11:01:48.606]                           }
[11:01:48.606]                         }
[11:01:48.606]                       }
[11:01:48.606]                       invisible(muffled)
[11:01:48.606]                     }
[11:01:48.606]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.606]                   }
[11:01:48.606]                 }
[11:01:48.606]                 else {
[11:01:48.606]                   if (TRUE) {
[11:01:48.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.606]                     {
[11:01:48.606]                       inherits <- base::inherits
[11:01:48.606]                       invokeRestart <- base::invokeRestart
[11:01:48.606]                       is.null <- base::is.null
[11:01:48.606]                       muffled <- FALSE
[11:01:48.606]                       if (inherits(cond, "message")) {
[11:01:48.606]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.606]                         if (muffled) 
[11:01:48.606]                           invokeRestart("muffleMessage")
[11:01:48.606]                       }
[11:01:48.606]                       else if (inherits(cond, "warning")) {
[11:01:48.606]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.606]                         if (muffled) 
[11:01:48.606]                           invokeRestart("muffleWarning")
[11:01:48.606]                       }
[11:01:48.606]                       else if (inherits(cond, "condition")) {
[11:01:48.606]                         if (!is.null(pattern)) {
[11:01:48.606]                           computeRestarts <- base::computeRestarts
[11:01:48.606]                           grepl <- base::grepl
[11:01:48.606]                           restarts <- computeRestarts(cond)
[11:01:48.606]                           for (restart in restarts) {
[11:01:48.606]                             name <- restart$name
[11:01:48.606]                             if (is.null(name)) 
[11:01:48.606]                               next
[11:01:48.606]                             if (!grepl(pattern, name)) 
[11:01:48.606]                               next
[11:01:48.606]                             invokeRestart(restart)
[11:01:48.606]                             muffled <- TRUE
[11:01:48.606]                             break
[11:01:48.606]                           }
[11:01:48.606]                         }
[11:01:48.606]                       }
[11:01:48.606]                       invisible(muffled)
[11:01:48.606]                     }
[11:01:48.606]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.606]                   }
[11:01:48.606]                 }
[11:01:48.606]             }
[11:01:48.606]         }))
[11:01:48.606]     }, error = function(ex) {
[11:01:48.606]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.606]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.606]                 ...future.rng), started = ...future.startTime, 
[11:01:48.606]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.606]             version = "1.8"), class = "FutureResult")
[11:01:48.606]     }, finally = {
[11:01:48.606]         if (!identical(...future.workdir, getwd())) 
[11:01:48.606]             setwd(...future.workdir)
[11:01:48.606]         {
[11:01:48.606]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.606]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.606]             }
[11:01:48.606]             base::options(...future.oldOptions)
[11:01:48.606]             if (.Platform$OS.type == "windows") {
[11:01:48.606]                 old_names <- names(...future.oldEnvVars)
[11:01:48.606]                 envs <- base::Sys.getenv()
[11:01:48.606]                 names <- names(envs)
[11:01:48.606]                 common <- intersect(names, old_names)
[11:01:48.606]                 added <- setdiff(names, old_names)
[11:01:48.606]                 removed <- setdiff(old_names, names)
[11:01:48.606]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.606]                   envs[common]]
[11:01:48.606]                 NAMES <- toupper(changed)
[11:01:48.606]                 args <- list()
[11:01:48.606]                 for (kk in seq_along(NAMES)) {
[11:01:48.606]                   name <- changed[[kk]]
[11:01:48.606]                   NAME <- NAMES[[kk]]
[11:01:48.606]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.606]                     next
[11:01:48.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.606]                 }
[11:01:48.606]                 NAMES <- toupper(added)
[11:01:48.606]                 for (kk in seq_along(NAMES)) {
[11:01:48.606]                   name <- added[[kk]]
[11:01:48.606]                   NAME <- NAMES[[kk]]
[11:01:48.606]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.606]                     next
[11:01:48.606]                   args[[name]] <- ""
[11:01:48.606]                 }
[11:01:48.606]                 NAMES <- toupper(removed)
[11:01:48.606]                 for (kk in seq_along(NAMES)) {
[11:01:48.606]                   name <- removed[[kk]]
[11:01:48.606]                   NAME <- NAMES[[kk]]
[11:01:48.606]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.606]                     next
[11:01:48.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.606]                 }
[11:01:48.606]                 if (length(args) > 0) 
[11:01:48.606]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.606]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.606]             }
[11:01:48.606]             else {
[11:01:48.606]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.606]             }
[11:01:48.606]             {
[11:01:48.606]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.606]                   0L) {
[11:01:48.606]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.606]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.606]                   base::options(opts)
[11:01:48.606]                 }
[11:01:48.606]                 {
[11:01:48.606]                   {
[11:01:48.606]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.606]                     NULL
[11:01:48.606]                   }
[11:01:48.606]                   options(future.plan = NULL)
[11:01:48.606]                   if (is.na(NA_character_)) 
[11:01:48.606]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.606]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.606]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.606]                     .init = FALSE)
[11:01:48.606]                 }
[11:01:48.606]             }
[11:01:48.606]         }
[11:01:48.606]     })
[11:01:48.606]     if (TRUE) {
[11:01:48.606]         base::sink(type = "output", split = FALSE)
[11:01:48.606]         if (TRUE) {
[11:01:48.606]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.606]         }
[11:01:48.606]         else {
[11:01:48.606]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.606]         }
[11:01:48.606]         base::close(...future.stdout)
[11:01:48.606]         ...future.stdout <- NULL
[11:01:48.606]     }
[11:01:48.606]     ...future.result$conditions <- ...future.conditions
[11:01:48.606]     ...future.result$finished <- base::Sys.time()
[11:01:48.606]     ...future.result
[11:01:48.606] }
[11:01:48.609] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:48.609] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:48.609] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:48.609] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:48.610] MultisessionFuture started
[11:01:48.610] - Launch lazy future ... done
[11:01:48.610] run() for ‘MultisessionFuture’ ... done
[11:01:48.610] result() for ClusterFuture ...
[11:01:48.610] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.611] - Validating connection of MultisessionFuture
[11:01:48.652] - received message: FutureResult
[11:01:48.652] - Received FutureResult
[11:01:48.652] - Erased future from FutureRegistry
[11:01:48.652] result() for ClusterFuture ...
[11:01:48.652] - result already collected: FutureResult
[11:01:48.653] result() for ClusterFuture ... done
[11:01:48.653] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.653] result() for ClusterFuture ... done
[11:01:48.653] result() for ClusterFuture ...
[11:01:48.653] - result already collected: FutureResult
[11:01:48.653] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.654] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.654] Searching for globals...
[11:01:48.656] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:48.656] Searching for globals ... DONE
[11:01:48.656] Resolving globals: TRUE
[11:01:48.657] Resolving any globals that are futures ...
[11:01:48.657] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[11:01:48.657] Resolving any globals that are futures ... DONE
[11:01:48.657] Resolving futures part of globals (recursively) ...
[11:01:48.657] resolve() on list ...
[11:01:48.658]  recursive: 99
[11:01:48.658]  length: 1
[11:01:48.658]  elements: ‘x’
[11:01:48.658]  length: 0 (resolved future 1)
[11:01:48.658] resolve() on list ... DONE
[11:01:48.658] - globals: [1] ‘x’
[11:01:48.658] Resolving futures part of globals (recursively) ... DONE
[11:01:48.658] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:48.659] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:48.659] - globals: [1] ‘x’
[11:01:48.659] 
[11:01:48.659] getGlobalsAndPackages() ... DONE
[11:01:48.659] run() for ‘Future’ ...
[11:01:48.660] - state: ‘created’
[11:01:48.660] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:48.674] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:48.674] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:48.674]   - Field: ‘node’
[11:01:48.674]   - Field: ‘label’
[11:01:48.674]   - Field: ‘local’
[11:01:48.675]   - Field: ‘owner’
[11:01:48.675]   - Field: ‘envir’
[11:01:48.675]   - Field: ‘workers’
[11:01:48.675]   - Field: ‘packages’
[11:01:48.675]   - Field: ‘gc’
[11:01:48.675]   - Field: ‘conditions’
[11:01:48.675]   - Field: ‘persistent’
[11:01:48.675]   - Field: ‘expr’
[11:01:48.675]   - Field: ‘uuid’
[11:01:48.675]   - Field: ‘seed’
[11:01:48.675]   - Field: ‘version’
[11:01:48.676]   - Field: ‘result’
[11:01:48.676]   - Field: ‘asynchronous’
[11:01:48.676]   - Field: ‘calls’
[11:01:48.676]   - Field: ‘globals’
[11:01:48.676]   - Field: ‘stdout’
[11:01:48.676]   - Field: ‘earlySignal’
[11:01:48.676]   - Field: ‘lazy’
[11:01:48.676]   - Field: ‘state’
[11:01:48.676] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:48.677] - Launch lazy future ...
[11:01:48.677] Packages needed by the future expression (n = 0): <none>
[11:01:48.677] Packages needed by future strategies (n = 0): <none>
[11:01:48.677] {
[11:01:48.677]     {
[11:01:48.677]         {
[11:01:48.677]             ...future.startTime <- base::Sys.time()
[11:01:48.677]             {
[11:01:48.677]                 {
[11:01:48.677]                   {
[11:01:48.677]                     {
[11:01:48.677]                       base::local({
[11:01:48.677]                         has_future <- base::requireNamespace("future", 
[11:01:48.677]                           quietly = TRUE)
[11:01:48.677]                         if (has_future) {
[11:01:48.677]                           ns <- base::getNamespace("future")
[11:01:48.677]                           version <- ns[[".package"]][["version"]]
[11:01:48.677]                           if (is.null(version)) 
[11:01:48.677]                             version <- utils::packageVersion("future")
[11:01:48.677]                         }
[11:01:48.677]                         else {
[11:01:48.677]                           version <- NULL
[11:01:48.677]                         }
[11:01:48.677]                         if (!has_future || version < "1.8.0") {
[11:01:48.677]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.677]                             "", base::R.version$version.string), 
[11:01:48.677]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.677]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.677]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.677]                               "release", "version")], collapse = " "), 
[11:01:48.677]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.677]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.677]                             info)
[11:01:48.677]                           info <- base::paste(info, collapse = "; ")
[11:01:48.677]                           if (!has_future) {
[11:01:48.677]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.677]                               info)
[11:01:48.677]                           }
[11:01:48.677]                           else {
[11:01:48.677]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.677]                               info, version)
[11:01:48.677]                           }
[11:01:48.677]                           base::stop(msg)
[11:01:48.677]                         }
[11:01:48.677]                       })
[11:01:48.677]                     }
[11:01:48.677]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.677]                     base::options(mc.cores = 1L)
[11:01:48.677]                   }
[11:01:48.677]                   ...future.strategy.old <- future::plan("list")
[11:01:48.677]                   options(future.plan = NULL)
[11:01:48.677]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.677]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.677]                 }
[11:01:48.677]                 ...future.workdir <- getwd()
[11:01:48.677]             }
[11:01:48.677]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.677]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.677]         }
[11:01:48.677]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.677]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.677]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.677]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.677]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.677]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.677]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.677]             base::names(...future.oldOptions))
[11:01:48.677]     }
[11:01:48.677]     if (FALSE) {
[11:01:48.677]     }
[11:01:48.677]     else {
[11:01:48.677]         if (TRUE) {
[11:01:48.677]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.677]                 open = "w")
[11:01:48.677]         }
[11:01:48.677]         else {
[11:01:48.677]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.677]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.677]         }
[11:01:48.677]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.677]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.677]             base::sink(type = "output", split = FALSE)
[11:01:48.677]             base::close(...future.stdout)
[11:01:48.677]         }, add = TRUE)
[11:01:48.677]     }
[11:01:48.677]     ...future.frame <- base::sys.nframe()
[11:01:48.677]     ...future.conditions <- base::list()
[11:01:48.677]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.677]     if (FALSE) {
[11:01:48.677]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.677]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.677]     }
[11:01:48.677]     ...future.result <- base::tryCatch({
[11:01:48.677]         base::withCallingHandlers({
[11:01:48.677]             ...future.value <- base::withVisible(base::local({
[11:01:48.677]                 ...future.makeSendCondition <- base::local({
[11:01:48.677]                   sendCondition <- NULL
[11:01:48.677]                   function(frame = 1L) {
[11:01:48.677]                     if (is.function(sendCondition)) 
[11:01:48.677]                       return(sendCondition)
[11:01:48.677]                     ns <- getNamespace("parallel")
[11:01:48.677]                     if (exists("sendData", mode = "function", 
[11:01:48.677]                       envir = ns)) {
[11:01:48.677]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.677]                         envir = ns)
[11:01:48.677]                       envir <- sys.frame(frame)
[11:01:48.677]                       master <- NULL
[11:01:48.677]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.677]                         !identical(envir, emptyenv())) {
[11:01:48.677]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.677]                           inherits = FALSE)) {
[11:01:48.677]                           master <- get("master", mode = "list", 
[11:01:48.677]                             envir = envir, inherits = FALSE)
[11:01:48.677]                           if (inherits(master, c("SOCKnode", 
[11:01:48.677]                             "SOCK0node"))) {
[11:01:48.677]                             sendCondition <<- function(cond) {
[11:01:48.677]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.677]                                 success = TRUE)
[11:01:48.677]                               parallel_sendData(master, data)
[11:01:48.677]                             }
[11:01:48.677]                             return(sendCondition)
[11:01:48.677]                           }
[11:01:48.677]                         }
[11:01:48.677]                         frame <- frame + 1L
[11:01:48.677]                         envir <- sys.frame(frame)
[11:01:48.677]                       }
[11:01:48.677]                     }
[11:01:48.677]                     sendCondition <<- function(cond) NULL
[11:01:48.677]                   }
[11:01:48.677]                 })
[11:01:48.677]                 withCallingHandlers({
[11:01:48.677]                   {
[11:01:48.677]                     x$a <- 1
[11:01:48.677]                     x
[11:01:48.677]                   }
[11:01:48.677]                 }, immediateCondition = function(cond) {
[11:01:48.677]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.677]                   sendCondition(cond)
[11:01:48.677]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.677]                   {
[11:01:48.677]                     inherits <- base::inherits
[11:01:48.677]                     invokeRestart <- base::invokeRestart
[11:01:48.677]                     is.null <- base::is.null
[11:01:48.677]                     muffled <- FALSE
[11:01:48.677]                     if (inherits(cond, "message")) {
[11:01:48.677]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.677]                       if (muffled) 
[11:01:48.677]                         invokeRestart("muffleMessage")
[11:01:48.677]                     }
[11:01:48.677]                     else if (inherits(cond, "warning")) {
[11:01:48.677]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.677]                       if (muffled) 
[11:01:48.677]                         invokeRestart("muffleWarning")
[11:01:48.677]                     }
[11:01:48.677]                     else if (inherits(cond, "condition")) {
[11:01:48.677]                       if (!is.null(pattern)) {
[11:01:48.677]                         computeRestarts <- base::computeRestarts
[11:01:48.677]                         grepl <- base::grepl
[11:01:48.677]                         restarts <- computeRestarts(cond)
[11:01:48.677]                         for (restart in restarts) {
[11:01:48.677]                           name <- restart$name
[11:01:48.677]                           if (is.null(name)) 
[11:01:48.677]                             next
[11:01:48.677]                           if (!grepl(pattern, name)) 
[11:01:48.677]                             next
[11:01:48.677]                           invokeRestart(restart)
[11:01:48.677]                           muffled <- TRUE
[11:01:48.677]                           break
[11:01:48.677]                         }
[11:01:48.677]                       }
[11:01:48.677]                     }
[11:01:48.677]                     invisible(muffled)
[11:01:48.677]                   }
[11:01:48.677]                   muffleCondition(cond)
[11:01:48.677]                 })
[11:01:48.677]             }))
[11:01:48.677]             future::FutureResult(value = ...future.value$value, 
[11:01:48.677]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.677]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.677]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.677]                     ...future.globalenv.names))
[11:01:48.677]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.677]         }, condition = base::local({
[11:01:48.677]             c <- base::c
[11:01:48.677]             inherits <- base::inherits
[11:01:48.677]             invokeRestart <- base::invokeRestart
[11:01:48.677]             length <- base::length
[11:01:48.677]             list <- base::list
[11:01:48.677]             seq.int <- base::seq.int
[11:01:48.677]             signalCondition <- base::signalCondition
[11:01:48.677]             sys.calls <- base::sys.calls
[11:01:48.677]             `[[` <- base::`[[`
[11:01:48.677]             `+` <- base::`+`
[11:01:48.677]             `<<-` <- base::`<<-`
[11:01:48.677]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.677]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.677]                   3L)]
[11:01:48.677]             }
[11:01:48.677]             function(cond) {
[11:01:48.677]                 is_error <- inherits(cond, "error")
[11:01:48.677]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.677]                   NULL)
[11:01:48.677]                 if (is_error) {
[11:01:48.677]                   sessionInformation <- function() {
[11:01:48.677]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.677]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.677]                       search = base::search(), system = base::Sys.info())
[11:01:48.677]                   }
[11:01:48.677]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.677]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.677]                     cond$call), session = sessionInformation(), 
[11:01:48.677]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.677]                   signalCondition(cond)
[11:01:48.677]                 }
[11:01:48.677]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.677]                 "immediateCondition"))) {
[11:01:48.677]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.677]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.677]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.677]                   if (TRUE && !signal) {
[11:01:48.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.677]                     {
[11:01:48.677]                       inherits <- base::inherits
[11:01:48.677]                       invokeRestart <- base::invokeRestart
[11:01:48.677]                       is.null <- base::is.null
[11:01:48.677]                       muffled <- FALSE
[11:01:48.677]                       if (inherits(cond, "message")) {
[11:01:48.677]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.677]                         if (muffled) 
[11:01:48.677]                           invokeRestart("muffleMessage")
[11:01:48.677]                       }
[11:01:48.677]                       else if (inherits(cond, "warning")) {
[11:01:48.677]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.677]                         if (muffled) 
[11:01:48.677]                           invokeRestart("muffleWarning")
[11:01:48.677]                       }
[11:01:48.677]                       else if (inherits(cond, "condition")) {
[11:01:48.677]                         if (!is.null(pattern)) {
[11:01:48.677]                           computeRestarts <- base::computeRestarts
[11:01:48.677]                           grepl <- base::grepl
[11:01:48.677]                           restarts <- computeRestarts(cond)
[11:01:48.677]                           for (restart in restarts) {
[11:01:48.677]                             name <- restart$name
[11:01:48.677]                             if (is.null(name)) 
[11:01:48.677]                               next
[11:01:48.677]                             if (!grepl(pattern, name)) 
[11:01:48.677]                               next
[11:01:48.677]                             invokeRestart(restart)
[11:01:48.677]                             muffled <- TRUE
[11:01:48.677]                             break
[11:01:48.677]                           }
[11:01:48.677]                         }
[11:01:48.677]                       }
[11:01:48.677]                       invisible(muffled)
[11:01:48.677]                     }
[11:01:48.677]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.677]                   }
[11:01:48.677]                 }
[11:01:48.677]                 else {
[11:01:48.677]                   if (TRUE) {
[11:01:48.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.677]                     {
[11:01:48.677]                       inherits <- base::inherits
[11:01:48.677]                       invokeRestart <- base::invokeRestart
[11:01:48.677]                       is.null <- base::is.null
[11:01:48.677]                       muffled <- FALSE
[11:01:48.677]                       if (inherits(cond, "message")) {
[11:01:48.677]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.677]                         if (muffled) 
[11:01:48.677]                           invokeRestart("muffleMessage")
[11:01:48.677]                       }
[11:01:48.677]                       else if (inherits(cond, "warning")) {
[11:01:48.677]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.677]                         if (muffled) 
[11:01:48.677]                           invokeRestart("muffleWarning")
[11:01:48.677]                       }
[11:01:48.677]                       else if (inherits(cond, "condition")) {
[11:01:48.677]                         if (!is.null(pattern)) {
[11:01:48.677]                           computeRestarts <- base::computeRestarts
[11:01:48.677]                           grepl <- base::grepl
[11:01:48.677]                           restarts <- computeRestarts(cond)
[11:01:48.677]                           for (restart in restarts) {
[11:01:48.677]                             name <- restart$name
[11:01:48.677]                             if (is.null(name)) 
[11:01:48.677]                               next
[11:01:48.677]                             if (!grepl(pattern, name)) 
[11:01:48.677]                               next
[11:01:48.677]                             invokeRestart(restart)
[11:01:48.677]                             muffled <- TRUE
[11:01:48.677]                             break
[11:01:48.677]                           }
[11:01:48.677]                         }
[11:01:48.677]                       }
[11:01:48.677]                       invisible(muffled)
[11:01:48.677]                     }
[11:01:48.677]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.677]                   }
[11:01:48.677]                 }
[11:01:48.677]             }
[11:01:48.677]         }))
[11:01:48.677]     }, error = function(ex) {
[11:01:48.677]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.677]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.677]                 ...future.rng), started = ...future.startTime, 
[11:01:48.677]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.677]             version = "1.8"), class = "FutureResult")
[11:01:48.677]     }, finally = {
[11:01:48.677]         if (!identical(...future.workdir, getwd())) 
[11:01:48.677]             setwd(...future.workdir)
[11:01:48.677]         {
[11:01:48.677]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.677]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.677]             }
[11:01:48.677]             base::options(...future.oldOptions)
[11:01:48.677]             if (.Platform$OS.type == "windows") {
[11:01:48.677]                 old_names <- names(...future.oldEnvVars)
[11:01:48.677]                 envs <- base::Sys.getenv()
[11:01:48.677]                 names <- names(envs)
[11:01:48.677]                 common <- intersect(names, old_names)
[11:01:48.677]                 added <- setdiff(names, old_names)
[11:01:48.677]                 removed <- setdiff(old_names, names)
[11:01:48.677]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.677]                   envs[common]]
[11:01:48.677]                 NAMES <- toupper(changed)
[11:01:48.677]                 args <- list()
[11:01:48.677]                 for (kk in seq_along(NAMES)) {
[11:01:48.677]                   name <- changed[[kk]]
[11:01:48.677]                   NAME <- NAMES[[kk]]
[11:01:48.677]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.677]                     next
[11:01:48.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.677]                 }
[11:01:48.677]                 NAMES <- toupper(added)
[11:01:48.677]                 for (kk in seq_along(NAMES)) {
[11:01:48.677]                   name <- added[[kk]]
[11:01:48.677]                   NAME <- NAMES[[kk]]
[11:01:48.677]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.677]                     next
[11:01:48.677]                   args[[name]] <- ""
[11:01:48.677]                 }
[11:01:48.677]                 NAMES <- toupper(removed)
[11:01:48.677]                 for (kk in seq_along(NAMES)) {
[11:01:48.677]                   name <- removed[[kk]]
[11:01:48.677]                   NAME <- NAMES[[kk]]
[11:01:48.677]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.677]                     next
[11:01:48.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.677]                 }
[11:01:48.677]                 if (length(args) > 0) 
[11:01:48.677]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.677]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.677]             }
[11:01:48.677]             else {
[11:01:48.677]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.677]             }
[11:01:48.677]             {
[11:01:48.677]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.677]                   0L) {
[11:01:48.677]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.677]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.677]                   base::options(opts)
[11:01:48.677]                 }
[11:01:48.677]                 {
[11:01:48.677]                   {
[11:01:48.677]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.677]                     NULL
[11:01:48.677]                   }
[11:01:48.677]                   options(future.plan = NULL)
[11:01:48.677]                   if (is.na(NA_character_)) 
[11:01:48.677]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.677]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.677]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.677]                     .init = FALSE)
[11:01:48.677]                 }
[11:01:48.677]             }
[11:01:48.677]         }
[11:01:48.677]     })
[11:01:48.677]     if (TRUE) {
[11:01:48.677]         base::sink(type = "output", split = FALSE)
[11:01:48.677]         if (TRUE) {
[11:01:48.677]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.677]         }
[11:01:48.677]         else {
[11:01:48.677]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.677]         }
[11:01:48.677]         base::close(...future.stdout)
[11:01:48.677]         ...future.stdout <- NULL
[11:01:48.677]     }
[11:01:48.677]     ...future.result$conditions <- ...future.conditions
[11:01:48.677]     ...future.result$finished <- base::Sys.time()
[11:01:48.677]     ...future.result
[11:01:48.677] }
[11:01:48.680] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:48.680] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:48.681] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:48.681] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:48.682] MultisessionFuture started
[11:01:48.682] - Launch lazy future ... done
[11:01:48.682] run() for ‘MultisessionFuture’ ... done
[11:01:48.682] result() for ClusterFuture ...
[11:01:48.682] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.682] - Validating connection of MultisessionFuture
[11:01:48.723] - received message: FutureResult
[11:01:48.723] - Received FutureResult
[11:01:48.723] - Erased future from FutureRegistry
[11:01:48.723] result() for ClusterFuture ...
[11:01:48.723] - result already collected: FutureResult
[11:01:48.723] result() for ClusterFuture ... done
[11:01:48.724] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.724] result() for ClusterFuture ... done
[11:01:48.724] result() for ClusterFuture ...
[11:01:48.724] - result already collected: FutureResult
[11:01:48.724] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.724] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.725] Searching for globals...
[11:01:48.729] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[11:01:48.730] Searching for globals ... DONE
[11:01:48.730] Resolving globals: TRUE
[11:01:48.730] Resolving any globals that are futures ...
[11:01:48.730] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[11:01:48.730] Resolving any globals that are futures ... DONE
[11:01:48.730] 
[11:01:48.730] 
[11:01:48.731] getGlobalsAndPackages() ... DONE
[11:01:48.731] run() for ‘Future’ ...
[11:01:48.731] - state: ‘created’
[11:01:48.731] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:48.745] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:48.745] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:48.745]   - Field: ‘node’
[11:01:48.745]   - Field: ‘label’
[11:01:48.745]   - Field: ‘local’
[11:01:48.745]   - Field: ‘owner’
[11:01:48.745]   - Field: ‘envir’
[11:01:48.745]   - Field: ‘workers’
[11:01:48.745]   - Field: ‘packages’
[11:01:48.745]   - Field: ‘gc’
[11:01:48.745]   - Field: ‘conditions’
[11:01:48.745]   - Field: ‘persistent’
[11:01:48.746]   - Field: ‘expr’
[11:01:48.746]   - Field: ‘uuid’
[11:01:48.746]   - Field: ‘seed’
[11:01:48.746]   - Field: ‘version’
[11:01:48.746]   - Field: ‘result’
[11:01:48.746]   - Field: ‘asynchronous’
[11:01:48.746]   - Field: ‘calls’
[11:01:48.746]   - Field: ‘globals’
[11:01:48.746]   - Field: ‘stdout’
[11:01:48.746]   - Field: ‘earlySignal’
[11:01:48.746]   - Field: ‘lazy’
[11:01:48.746]   - Field: ‘state’
[11:01:48.747] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:48.747] - Launch lazy future ...
[11:01:48.747] Packages needed by the future expression (n = 0): <none>
[11:01:48.747] Packages needed by future strategies (n = 0): <none>
[11:01:48.747] {
[11:01:48.747]     {
[11:01:48.747]         {
[11:01:48.747]             ...future.startTime <- base::Sys.time()
[11:01:48.747]             {
[11:01:48.747]                 {
[11:01:48.747]                   {
[11:01:48.747]                     {
[11:01:48.747]                       base::local({
[11:01:48.747]                         has_future <- base::requireNamespace("future", 
[11:01:48.747]                           quietly = TRUE)
[11:01:48.747]                         if (has_future) {
[11:01:48.747]                           ns <- base::getNamespace("future")
[11:01:48.747]                           version <- ns[[".package"]][["version"]]
[11:01:48.747]                           if (is.null(version)) 
[11:01:48.747]                             version <- utils::packageVersion("future")
[11:01:48.747]                         }
[11:01:48.747]                         else {
[11:01:48.747]                           version <- NULL
[11:01:48.747]                         }
[11:01:48.747]                         if (!has_future || version < "1.8.0") {
[11:01:48.747]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.747]                             "", base::R.version$version.string), 
[11:01:48.747]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.747]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.747]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.747]                               "release", "version")], collapse = " "), 
[11:01:48.747]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.747]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.747]                             info)
[11:01:48.747]                           info <- base::paste(info, collapse = "; ")
[11:01:48.747]                           if (!has_future) {
[11:01:48.747]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.747]                               info)
[11:01:48.747]                           }
[11:01:48.747]                           else {
[11:01:48.747]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.747]                               info, version)
[11:01:48.747]                           }
[11:01:48.747]                           base::stop(msg)
[11:01:48.747]                         }
[11:01:48.747]                       })
[11:01:48.747]                     }
[11:01:48.747]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.747]                     base::options(mc.cores = 1L)
[11:01:48.747]                   }
[11:01:48.747]                   ...future.strategy.old <- future::plan("list")
[11:01:48.747]                   options(future.plan = NULL)
[11:01:48.747]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.747]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.747]                 }
[11:01:48.747]                 ...future.workdir <- getwd()
[11:01:48.747]             }
[11:01:48.747]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.747]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.747]         }
[11:01:48.747]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.747]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.747]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.747]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.747]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.747]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.747]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.747]             base::names(...future.oldOptions))
[11:01:48.747]     }
[11:01:48.747]     if (FALSE) {
[11:01:48.747]     }
[11:01:48.747]     else {
[11:01:48.747]         if (TRUE) {
[11:01:48.747]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.747]                 open = "w")
[11:01:48.747]         }
[11:01:48.747]         else {
[11:01:48.747]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.747]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.747]         }
[11:01:48.747]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.747]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.747]             base::sink(type = "output", split = FALSE)
[11:01:48.747]             base::close(...future.stdout)
[11:01:48.747]         }, add = TRUE)
[11:01:48.747]     }
[11:01:48.747]     ...future.frame <- base::sys.nframe()
[11:01:48.747]     ...future.conditions <- base::list()
[11:01:48.747]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.747]     if (FALSE) {
[11:01:48.747]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.747]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.747]     }
[11:01:48.747]     ...future.result <- base::tryCatch({
[11:01:48.747]         base::withCallingHandlers({
[11:01:48.747]             ...future.value <- base::withVisible(base::local({
[11:01:48.747]                 ...future.makeSendCondition <- base::local({
[11:01:48.747]                   sendCondition <- NULL
[11:01:48.747]                   function(frame = 1L) {
[11:01:48.747]                     if (is.function(sendCondition)) 
[11:01:48.747]                       return(sendCondition)
[11:01:48.747]                     ns <- getNamespace("parallel")
[11:01:48.747]                     if (exists("sendData", mode = "function", 
[11:01:48.747]                       envir = ns)) {
[11:01:48.747]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.747]                         envir = ns)
[11:01:48.747]                       envir <- sys.frame(frame)
[11:01:48.747]                       master <- NULL
[11:01:48.747]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.747]                         !identical(envir, emptyenv())) {
[11:01:48.747]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.747]                           inherits = FALSE)) {
[11:01:48.747]                           master <- get("master", mode = "list", 
[11:01:48.747]                             envir = envir, inherits = FALSE)
[11:01:48.747]                           if (inherits(master, c("SOCKnode", 
[11:01:48.747]                             "SOCK0node"))) {
[11:01:48.747]                             sendCondition <<- function(cond) {
[11:01:48.747]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.747]                                 success = TRUE)
[11:01:48.747]                               parallel_sendData(master, data)
[11:01:48.747]                             }
[11:01:48.747]                             return(sendCondition)
[11:01:48.747]                           }
[11:01:48.747]                         }
[11:01:48.747]                         frame <- frame + 1L
[11:01:48.747]                         envir <- sys.frame(frame)
[11:01:48.747]                       }
[11:01:48.747]                     }
[11:01:48.747]                     sendCondition <<- function(cond) NULL
[11:01:48.747]                   }
[11:01:48.747]                 })
[11:01:48.747]                 withCallingHandlers({
[11:01:48.747]                   {
[11:01:48.747]                     x <- list(b = 2)
[11:01:48.747]                     x$a <- 1
[11:01:48.747]                     x
[11:01:48.747]                   }
[11:01:48.747]                 }, immediateCondition = function(cond) {
[11:01:48.747]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.747]                   sendCondition(cond)
[11:01:48.747]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.747]                   {
[11:01:48.747]                     inherits <- base::inherits
[11:01:48.747]                     invokeRestart <- base::invokeRestart
[11:01:48.747]                     is.null <- base::is.null
[11:01:48.747]                     muffled <- FALSE
[11:01:48.747]                     if (inherits(cond, "message")) {
[11:01:48.747]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.747]                       if (muffled) 
[11:01:48.747]                         invokeRestart("muffleMessage")
[11:01:48.747]                     }
[11:01:48.747]                     else if (inherits(cond, "warning")) {
[11:01:48.747]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.747]                       if (muffled) 
[11:01:48.747]                         invokeRestart("muffleWarning")
[11:01:48.747]                     }
[11:01:48.747]                     else if (inherits(cond, "condition")) {
[11:01:48.747]                       if (!is.null(pattern)) {
[11:01:48.747]                         computeRestarts <- base::computeRestarts
[11:01:48.747]                         grepl <- base::grepl
[11:01:48.747]                         restarts <- computeRestarts(cond)
[11:01:48.747]                         for (restart in restarts) {
[11:01:48.747]                           name <- restart$name
[11:01:48.747]                           if (is.null(name)) 
[11:01:48.747]                             next
[11:01:48.747]                           if (!grepl(pattern, name)) 
[11:01:48.747]                             next
[11:01:48.747]                           invokeRestart(restart)
[11:01:48.747]                           muffled <- TRUE
[11:01:48.747]                           break
[11:01:48.747]                         }
[11:01:48.747]                       }
[11:01:48.747]                     }
[11:01:48.747]                     invisible(muffled)
[11:01:48.747]                   }
[11:01:48.747]                   muffleCondition(cond)
[11:01:48.747]                 })
[11:01:48.747]             }))
[11:01:48.747]             future::FutureResult(value = ...future.value$value, 
[11:01:48.747]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.747]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.747]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.747]                     ...future.globalenv.names))
[11:01:48.747]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.747]         }, condition = base::local({
[11:01:48.747]             c <- base::c
[11:01:48.747]             inherits <- base::inherits
[11:01:48.747]             invokeRestart <- base::invokeRestart
[11:01:48.747]             length <- base::length
[11:01:48.747]             list <- base::list
[11:01:48.747]             seq.int <- base::seq.int
[11:01:48.747]             signalCondition <- base::signalCondition
[11:01:48.747]             sys.calls <- base::sys.calls
[11:01:48.747]             `[[` <- base::`[[`
[11:01:48.747]             `+` <- base::`+`
[11:01:48.747]             `<<-` <- base::`<<-`
[11:01:48.747]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.747]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.747]                   3L)]
[11:01:48.747]             }
[11:01:48.747]             function(cond) {
[11:01:48.747]                 is_error <- inherits(cond, "error")
[11:01:48.747]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.747]                   NULL)
[11:01:48.747]                 if (is_error) {
[11:01:48.747]                   sessionInformation <- function() {
[11:01:48.747]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.747]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.747]                       search = base::search(), system = base::Sys.info())
[11:01:48.747]                   }
[11:01:48.747]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.747]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.747]                     cond$call), session = sessionInformation(), 
[11:01:48.747]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.747]                   signalCondition(cond)
[11:01:48.747]                 }
[11:01:48.747]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.747]                 "immediateCondition"))) {
[11:01:48.747]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.747]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.747]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.747]                   if (TRUE && !signal) {
[11:01:48.747]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.747]                     {
[11:01:48.747]                       inherits <- base::inherits
[11:01:48.747]                       invokeRestart <- base::invokeRestart
[11:01:48.747]                       is.null <- base::is.null
[11:01:48.747]                       muffled <- FALSE
[11:01:48.747]                       if (inherits(cond, "message")) {
[11:01:48.747]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.747]                         if (muffled) 
[11:01:48.747]                           invokeRestart("muffleMessage")
[11:01:48.747]                       }
[11:01:48.747]                       else if (inherits(cond, "warning")) {
[11:01:48.747]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.747]                         if (muffled) 
[11:01:48.747]                           invokeRestart("muffleWarning")
[11:01:48.747]                       }
[11:01:48.747]                       else if (inherits(cond, "condition")) {
[11:01:48.747]                         if (!is.null(pattern)) {
[11:01:48.747]                           computeRestarts <- base::computeRestarts
[11:01:48.747]                           grepl <- base::grepl
[11:01:48.747]                           restarts <- computeRestarts(cond)
[11:01:48.747]                           for (restart in restarts) {
[11:01:48.747]                             name <- restart$name
[11:01:48.747]                             if (is.null(name)) 
[11:01:48.747]                               next
[11:01:48.747]                             if (!grepl(pattern, name)) 
[11:01:48.747]                               next
[11:01:48.747]                             invokeRestart(restart)
[11:01:48.747]                             muffled <- TRUE
[11:01:48.747]                             break
[11:01:48.747]                           }
[11:01:48.747]                         }
[11:01:48.747]                       }
[11:01:48.747]                       invisible(muffled)
[11:01:48.747]                     }
[11:01:48.747]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.747]                   }
[11:01:48.747]                 }
[11:01:48.747]                 else {
[11:01:48.747]                   if (TRUE) {
[11:01:48.747]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.747]                     {
[11:01:48.747]                       inherits <- base::inherits
[11:01:48.747]                       invokeRestart <- base::invokeRestart
[11:01:48.747]                       is.null <- base::is.null
[11:01:48.747]                       muffled <- FALSE
[11:01:48.747]                       if (inherits(cond, "message")) {
[11:01:48.747]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.747]                         if (muffled) 
[11:01:48.747]                           invokeRestart("muffleMessage")
[11:01:48.747]                       }
[11:01:48.747]                       else if (inherits(cond, "warning")) {
[11:01:48.747]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.747]                         if (muffled) 
[11:01:48.747]                           invokeRestart("muffleWarning")
[11:01:48.747]                       }
[11:01:48.747]                       else if (inherits(cond, "condition")) {
[11:01:48.747]                         if (!is.null(pattern)) {
[11:01:48.747]                           computeRestarts <- base::computeRestarts
[11:01:48.747]                           grepl <- base::grepl
[11:01:48.747]                           restarts <- computeRestarts(cond)
[11:01:48.747]                           for (restart in restarts) {
[11:01:48.747]                             name <- restart$name
[11:01:48.747]                             if (is.null(name)) 
[11:01:48.747]                               next
[11:01:48.747]                             if (!grepl(pattern, name)) 
[11:01:48.747]                               next
[11:01:48.747]                             invokeRestart(restart)
[11:01:48.747]                             muffled <- TRUE
[11:01:48.747]                             break
[11:01:48.747]                           }
[11:01:48.747]                         }
[11:01:48.747]                       }
[11:01:48.747]                       invisible(muffled)
[11:01:48.747]                     }
[11:01:48.747]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.747]                   }
[11:01:48.747]                 }
[11:01:48.747]             }
[11:01:48.747]         }))
[11:01:48.747]     }, error = function(ex) {
[11:01:48.747]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.747]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.747]                 ...future.rng), started = ...future.startTime, 
[11:01:48.747]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.747]             version = "1.8"), class = "FutureResult")
[11:01:48.747]     }, finally = {
[11:01:48.747]         if (!identical(...future.workdir, getwd())) 
[11:01:48.747]             setwd(...future.workdir)
[11:01:48.747]         {
[11:01:48.747]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.747]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.747]             }
[11:01:48.747]             base::options(...future.oldOptions)
[11:01:48.747]             if (.Platform$OS.type == "windows") {
[11:01:48.747]                 old_names <- names(...future.oldEnvVars)
[11:01:48.747]                 envs <- base::Sys.getenv()
[11:01:48.747]                 names <- names(envs)
[11:01:48.747]                 common <- intersect(names, old_names)
[11:01:48.747]                 added <- setdiff(names, old_names)
[11:01:48.747]                 removed <- setdiff(old_names, names)
[11:01:48.747]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.747]                   envs[common]]
[11:01:48.747]                 NAMES <- toupper(changed)
[11:01:48.747]                 args <- list()
[11:01:48.747]                 for (kk in seq_along(NAMES)) {
[11:01:48.747]                   name <- changed[[kk]]
[11:01:48.747]                   NAME <- NAMES[[kk]]
[11:01:48.747]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.747]                     next
[11:01:48.747]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.747]                 }
[11:01:48.747]                 NAMES <- toupper(added)
[11:01:48.747]                 for (kk in seq_along(NAMES)) {
[11:01:48.747]                   name <- added[[kk]]
[11:01:48.747]                   NAME <- NAMES[[kk]]
[11:01:48.747]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.747]                     next
[11:01:48.747]                   args[[name]] <- ""
[11:01:48.747]                 }
[11:01:48.747]                 NAMES <- toupper(removed)
[11:01:48.747]                 for (kk in seq_along(NAMES)) {
[11:01:48.747]                   name <- removed[[kk]]
[11:01:48.747]                   NAME <- NAMES[[kk]]
[11:01:48.747]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.747]                     next
[11:01:48.747]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.747]                 }
[11:01:48.747]                 if (length(args) > 0) 
[11:01:48.747]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.747]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.747]             }
[11:01:48.747]             else {
[11:01:48.747]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.747]             }
[11:01:48.747]             {
[11:01:48.747]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.747]                   0L) {
[11:01:48.747]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.747]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.747]                   base::options(opts)
[11:01:48.747]                 }
[11:01:48.747]                 {
[11:01:48.747]                   {
[11:01:48.747]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.747]                     NULL
[11:01:48.747]                   }
[11:01:48.747]                   options(future.plan = NULL)
[11:01:48.747]                   if (is.na(NA_character_)) 
[11:01:48.747]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.747]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.747]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.747]                     .init = FALSE)
[11:01:48.747]                 }
[11:01:48.747]             }
[11:01:48.747]         }
[11:01:48.747]     })
[11:01:48.747]     if (TRUE) {
[11:01:48.747]         base::sink(type = "output", split = FALSE)
[11:01:48.747]         if (TRUE) {
[11:01:48.747]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.747]         }
[11:01:48.747]         else {
[11:01:48.747]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.747]         }
[11:01:48.747]         base::close(...future.stdout)
[11:01:48.747]         ...future.stdout <- NULL
[11:01:48.747]     }
[11:01:48.747]     ...future.result$conditions <- ...future.conditions
[11:01:48.747]     ...future.result$finished <- base::Sys.time()
[11:01:48.747]     ...future.result
[11:01:48.747] }
[11:01:48.750] MultisessionFuture started
[11:01:48.750] - Launch lazy future ... done
[11:01:48.750] run() for ‘MultisessionFuture’ ... done
[11:01:48.751] result() for ClusterFuture ...
[11:01:48.751] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.751] - Validating connection of MultisessionFuture
[11:01:48.792] - received message: FutureResult
[11:01:48.792] - Received FutureResult
[11:01:48.792] - Erased future from FutureRegistry
[11:01:48.792] result() for ClusterFuture ...
[11:01:48.792] - result already collected: FutureResult
[11:01:48.792] result() for ClusterFuture ... done
[11:01:48.793] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.793] result() for ClusterFuture ... done
[11:01:48.793] result() for ClusterFuture ...
[11:01:48.793] - result already collected: FutureResult
[11:01:48.793] result() for ClusterFuture ... done
$b
[1] 2

$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.793] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.793] Searching for globals...
[11:01:48.795] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:48.795] Searching for globals ... DONE
[11:01:48.795] Resolving globals: TRUE
[11:01:48.796] Resolving any globals that are futures ...
[11:01:48.796] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:48.796] Resolving any globals that are futures ... DONE
[11:01:48.796] Resolving futures part of globals (recursively) ...
[11:01:48.796] resolve() on list ...
[11:01:48.796]  recursive: 99
[11:01:48.796]  length: 1
[11:01:48.797]  elements: ‘x’
[11:01:48.797]  length: 0 (resolved future 1)
[11:01:48.797] resolve() on list ... DONE
[11:01:48.797] - globals: [1] ‘x’
[11:01:48.797] Resolving futures part of globals (recursively) ... DONE
[11:01:48.797] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:48.797] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:48.797] - globals: [1] ‘x’
[11:01:48.798] 
[11:01:48.798] getGlobalsAndPackages() ... DONE
[11:01:48.798] run() for ‘Future’ ...
[11:01:48.798] - state: ‘created’
[11:01:48.798] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:48.812] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:48.812] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:48.812]   - Field: ‘node’
[11:01:48.812]   - Field: ‘label’
[11:01:48.812]   - Field: ‘local’
[11:01:48.812]   - Field: ‘owner’
[11:01:48.813]   - Field: ‘envir’
[11:01:48.813]   - Field: ‘workers’
[11:01:48.813]   - Field: ‘packages’
[11:01:48.813]   - Field: ‘gc’
[11:01:48.813]   - Field: ‘conditions’
[11:01:48.813]   - Field: ‘persistent’
[11:01:48.813]   - Field: ‘expr’
[11:01:48.813]   - Field: ‘uuid’
[11:01:48.813]   - Field: ‘seed’
[11:01:48.813]   - Field: ‘version’
[11:01:48.813]   - Field: ‘result’
[11:01:48.814]   - Field: ‘asynchronous’
[11:01:48.814]   - Field: ‘calls’
[11:01:48.814]   - Field: ‘globals’
[11:01:48.814]   - Field: ‘stdout’
[11:01:48.814]   - Field: ‘earlySignal’
[11:01:48.814]   - Field: ‘lazy’
[11:01:48.814]   - Field: ‘state’
[11:01:48.814] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:48.814] - Launch lazy future ...
[11:01:48.814] Packages needed by the future expression (n = 0): <none>
[11:01:48.815] Packages needed by future strategies (n = 0): <none>
[11:01:48.815] {
[11:01:48.815]     {
[11:01:48.815]         {
[11:01:48.815]             ...future.startTime <- base::Sys.time()
[11:01:48.815]             {
[11:01:48.815]                 {
[11:01:48.815]                   {
[11:01:48.815]                     {
[11:01:48.815]                       base::local({
[11:01:48.815]                         has_future <- base::requireNamespace("future", 
[11:01:48.815]                           quietly = TRUE)
[11:01:48.815]                         if (has_future) {
[11:01:48.815]                           ns <- base::getNamespace("future")
[11:01:48.815]                           version <- ns[[".package"]][["version"]]
[11:01:48.815]                           if (is.null(version)) 
[11:01:48.815]                             version <- utils::packageVersion("future")
[11:01:48.815]                         }
[11:01:48.815]                         else {
[11:01:48.815]                           version <- NULL
[11:01:48.815]                         }
[11:01:48.815]                         if (!has_future || version < "1.8.0") {
[11:01:48.815]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.815]                             "", base::R.version$version.string), 
[11:01:48.815]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.815]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.815]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.815]                               "release", "version")], collapse = " "), 
[11:01:48.815]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.815]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.815]                             info)
[11:01:48.815]                           info <- base::paste(info, collapse = "; ")
[11:01:48.815]                           if (!has_future) {
[11:01:48.815]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.815]                               info)
[11:01:48.815]                           }
[11:01:48.815]                           else {
[11:01:48.815]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.815]                               info, version)
[11:01:48.815]                           }
[11:01:48.815]                           base::stop(msg)
[11:01:48.815]                         }
[11:01:48.815]                       })
[11:01:48.815]                     }
[11:01:48.815]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.815]                     base::options(mc.cores = 1L)
[11:01:48.815]                   }
[11:01:48.815]                   ...future.strategy.old <- future::plan("list")
[11:01:48.815]                   options(future.plan = NULL)
[11:01:48.815]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.815]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.815]                 }
[11:01:48.815]                 ...future.workdir <- getwd()
[11:01:48.815]             }
[11:01:48.815]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.815]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.815]         }
[11:01:48.815]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.815]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.815]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.815]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.815]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.815]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.815]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.815]             base::names(...future.oldOptions))
[11:01:48.815]     }
[11:01:48.815]     if (FALSE) {
[11:01:48.815]     }
[11:01:48.815]     else {
[11:01:48.815]         if (TRUE) {
[11:01:48.815]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.815]                 open = "w")
[11:01:48.815]         }
[11:01:48.815]         else {
[11:01:48.815]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.815]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.815]         }
[11:01:48.815]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.815]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.815]             base::sink(type = "output", split = FALSE)
[11:01:48.815]             base::close(...future.stdout)
[11:01:48.815]         }, add = TRUE)
[11:01:48.815]     }
[11:01:48.815]     ...future.frame <- base::sys.nframe()
[11:01:48.815]     ...future.conditions <- base::list()
[11:01:48.815]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.815]     if (FALSE) {
[11:01:48.815]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.815]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.815]     }
[11:01:48.815]     ...future.result <- base::tryCatch({
[11:01:48.815]         base::withCallingHandlers({
[11:01:48.815]             ...future.value <- base::withVisible(base::local({
[11:01:48.815]                 ...future.makeSendCondition <- base::local({
[11:01:48.815]                   sendCondition <- NULL
[11:01:48.815]                   function(frame = 1L) {
[11:01:48.815]                     if (is.function(sendCondition)) 
[11:01:48.815]                       return(sendCondition)
[11:01:48.815]                     ns <- getNamespace("parallel")
[11:01:48.815]                     if (exists("sendData", mode = "function", 
[11:01:48.815]                       envir = ns)) {
[11:01:48.815]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.815]                         envir = ns)
[11:01:48.815]                       envir <- sys.frame(frame)
[11:01:48.815]                       master <- NULL
[11:01:48.815]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.815]                         !identical(envir, emptyenv())) {
[11:01:48.815]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.815]                           inherits = FALSE)) {
[11:01:48.815]                           master <- get("master", mode = "list", 
[11:01:48.815]                             envir = envir, inherits = FALSE)
[11:01:48.815]                           if (inherits(master, c("SOCKnode", 
[11:01:48.815]                             "SOCK0node"))) {
[11:01:48.815]                             sendCondition <<- function(cond) {
[11:01:48.815]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.815]                                 success = TRUE)
[11:01:48.815]                               parallel_sendData(master, data)
[11:01:48.815]                             }
[11:01:48.815]                             return(sendCondition)
[11:01:48.815]                           }
[11:01:48.815]                         }
[11:01:48.815]                         frame <- frame + 1L
[11:01:48.815]                         envir <- sys.frame(frame)
[11:01:48.815]                       }
[11:01:48.815]                     }
[11:01:48.815]                     sendCondition <<- function(cond) NULL
[11:01:48.815]                   }
[11:01:48.815]                 })
[11:01:48.815]                 withCallingHandlers({
[11:01:48.815]                   {
[11:01:48.815]                     x[["a"]] <- 1
[11:01:48.815]                     x
[11:01:48.815]                   }
[11:01:48.815]                 }, immediateCondition = function(cond) {
[11:01:48.815]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.815]                   sendCondition(cond)
[11:01:48.815]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.815]                   {
[11:01:48.815]                     inherits <- base::inherits
[11:01:48.815]                     invokeRestart <- base::invokeRestart
[11:01:48.815]                     is.null <- base::is.null
[11:01:48.815]                     muffled <- FALSE
[11:01:48.815]                     if (inherits(cond, "message")) {
[11:01:48.815]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.815]                       if (muffled) 
[11:01:48.815]                         invokeRestart("muffleMessage")
[11:01:48.815]                     }
[11:01:48.815]                     else if (inherits(cond, "warning")) {
[11:01:48.815]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.815]                       if (muffled) 
[11:01:48.815]                         invokeRestart("muffleWarning")
[11:01:48.815]                     }
[11:01:48.815]                     else if (inherits(cond, "condition")) {
[11:01:48.815]                       if (!is.null(pattern)) {
[11:01:48.815]                         computeRestarts <- base::computeRestarts
[11:01:48.815]                         grepl <- base::grepl
[11:01:48.815]                         restarts <- computeRestarts(cond)
[11:01:48.815]                         for (restart in restarts) {
[11:01:48.815]                           name <- restart$name
[11:01:48.815]                           if (is.null(name)) 
[11:01:48.815]                             next
[11:01:48.815]                           if (!grepl(pattern, name)) 
[11:01:48.815]                             next
[11:01:48.815]                           invokeRestart(restart)
[11:01:48.815]                           muffled <- TRUE
[11:01:48.815]                           break
[11:01:48.815]                         }
[11:01:48.815]                       }
[11:01:48.815]                     }
[11:01:48.815]                     invisible(muffled)
[11:01:48.815]                   }
[11:01:48.815]                   muffleCondition(cond)
[11:01:48.815]                 })
[11:01:48.815]             }))
[11:01:48.815]             future::FutureResult(value = ...future.value$value, 
[11:01:48.815]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.815]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.815]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.815]                     ...future.globalenv.names))
[11:01:48.815]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.815]         }, condition = base::local({
[11:01:48.815]             c <- base::c
[11:01:48.815]             inherits <- base::inherits
[11:01:48.815]             invokeRestart <- base::invokeRestart
[11:01:48.815]             length <- base::length
[11:01:48.815]             list <- base::list
[11:01:48.815]             seq.int <- base::seq.int
[11:01:48.815]             signalCondition <- base::signalCondition
[11:01:48.815]             sys.calls <- base::sys.calls
[11:01:48.815]             `[[` <- base::`[[`
[11:01:48.815]             `+` <- base::`+`
[11:01:48.815]             `<<-` <- base::`<<-`
[11:01:48.815]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.815]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.815]                   3L)]
[11:01:48.815]             }
[11:01:48.815]             function(cond) {
[11:01:48.815]                 is_error <- inherits(cond, "error")
[11:01:48.815]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.815]                   NULL)
[11:01:48.815]                 if (is_error) {
[11:01:48.815]                   sessionInformation <- function() {
[11:01:48.815]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.815]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.815]                       search = base::search(), system = base::Sys.info())
[11:01:48.815]                   }
[11:01:48.815]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.815]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.815]                     cond$call), session = sessionInformation(), 
[11:01:48.815]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.815]                   signalCondition(cond)
[11:01:48.815]                 }
[11:01:48.815]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.815]                 "immediateCondition"))) {
[11:01:48.815]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.815]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.815]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.815]                   if (TRUE && !signal) {
[11:01:48.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.815]                     {
[11:01:48.815]                       inherits <- base::inherits
[11:01:48.815]                       invokeRestart <- base::invokeRestart
[11:01:48.815]                       is.null <- base::is.null
[11:01:48.815]                       muffled <- FALSE
[11:01:48.815]                       if (inherits(cond, "message")) {
[11:01:48.815]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.815]                         if (muffled) 
[11:01:48.815]                           invokeRestart("muffleMessage")
[11:01:48.815]                       }
[11:01:48.815]                       else if (inherits(cond, "warning")) {
[11:01:48.815]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.815]                         if (muffled) 
[11:01:48.815]                           invokeRestart("muffleWarning")
[11:01:48.815]                       }
[11:01:48.815]                       else if (inherits(cond, "condition")) {
[11:01:48.815]                         if (!is.null(pattern)) {
[11:01:48.815]                           computeRestarts <- base::computeRestarts
[11:01:48.815]                           grepl <- base::grepl
[11:01:48.815]                           restarts <- computeRestarts(cond)
[11:01:48.815]                           for (restart in restarts) {
[11:01:48.815]                             name <- restart$name
[11:01:48.815]                             if (is.null(name)) 
[11:01:48.815]                               next
[11:01:48.815]                             if (!grepl(pattern, name)) 
[11:01:48.815]                               next
[11:01:48.815]                             invokeRestart(restart)
[11:01:48.815]                             muffled <- TRUE
[11:01:48.815]                             break
[11:01:48.815]                           }
[11:01:48.815]                         }
[11:01:48.815]                       }
[11:01:48.815]                       invisible(muffled)
[11:01:48.815]                     }
[11:01:48.815]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.815]                   }
[11:01:48.815]                 }
[11:01:48.815]                 else {
[11:01:48.815]                   if (TRUE) {
[11:01:48.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.815]                     {
[11:01:48.815]                       inherits <- base::inherits
[11:01:48.815]                       invokeRestart <- base::invokeRestart
[11:01:48.815]                       is.null <- base::is.null
[11:01:48.815]                       muffled <- FALSE
[11:01:48.815]                       if (inherits(cond, "message")) {
[11:01:48.815]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.815]                         if (muffled) 
[11:01:48.815]                           invokeRestart("muffleMessage")
[11:01:48.815]                       }
[11:01:48.815]                       else if (inherits(cond, "warning")) {
[11:01:48.815]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.815]                         if (muffled) 
[11:01:48.815]                           invokeRestart("muffleWarning")
[11:01:48.815]                       }
[11:01:48.815]                       else if (inherits(cond, "condition")) {
[11:01:48.815]                         if (!is.null(pattern)) {
[11:01:48.815]                           computeRestarts <- base::computeRestarts
[11:01:48.815]                           grepl <- base::grepl
[11:01:48.815]                           restarts <- computeRestarts(cond)
[11:01:48.815]                           for (restart in restarts) {
[11:01:48.815]                             name <- restart$name
[11:01:48.815]                             if (is.null(name)) 
[11:01:48.815]                               next
[11:01:48.815]                             if (!grepl(pattern, name)) 
[11:01:48.815]                               next
[11:01:48.815]                             invokeRestart(restart)
[11:01:48.815]                             muffled <- TRUE
[11:01:48.815]                             break
[11:01:48.815]                           }
[11:01:48.815]                         }
[11:01:48.815]                       }
[11:01:48.815]                       invisible(muffled)
[11:01:48.815]                     }
[11:01:48.815]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.815]                   }
[11:01:48.815]                 }
[11:01:48.815]             }
[11:01:48.815]         }))
[11:01:48.815]     }, error = function(ex) {
[11:01:48.815]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.815]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.815]                 ...future.rng), started = ...future.startTime, 
[11:01:48.815]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.815]             version = "1.8"), class = "FutureResult")
[11:01:48.815]     }, finally = {
[11:01:48.815]         if (!identical(...future.workdir, getwd())) 
[11:01:48.815]             setwd(...future.workdir)
[11:01:48.815]         {
[11:01:48.815]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.815]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.815]             }
[11:01:48.815]             base::options(...future.oldOptions)
[11:01:48.815]             if (.Platform$OS.type == "windows") {
[11:01:48.815]                 old_names <- names(...future.oldEnvVars)
[11:01:48.815]                 envs <- base::Sys.getenv()
[11:01:48.815]                 names <- names(envs)
[11:01:48.815]                 common <- intersect(names, old_names)
[11:01:48.815]                 added <- setdiff(names, old_names)
[11:01:48.815]                 removed <- setdiff(old_names, names)
[11:01:48.815]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.815]                   envs[common]]
[11:01:48.815]                 NAMES <- toupper(changed)
[11:01:48.815]                 args <- list()
[11:01:48.815]                 for (kk in seq_along(NAMES)) {
[11:01:48.815]                   name <- changed[[kk]]
[11:01:48.815]                   NAME <- NAMES[[kk]]
[11:01:48.815]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.815]                     next
[11:01:48.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.815]                 }
[11:01:48.815]                 NAMES <- toupper(added)
[11:01:48.815]                 for (kk in seq_along(NAMES)) {
[11:01:48.815]                   name <- added[[kk]]
[11:01:48.815]                   NAME <- NAMES[[kk]]
[11:01:48.815]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.815]                     next
[11:01:48.815]                   args[[name]] <- ""
[11:01:48.815]                 }
[11:01:48.815]                 NAMES <- toupper(removed)
[11:01:48.815]                 for (kk in seq_along(NAMES)) {
[11:01:48.815]                   name <- removed[[kk]]
[11:01:48.815]                   NAME <- NAMES[[kk]]
[11:01:48.815]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.815]                     next
[11:01:48.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.815]                 }
[11:01:48.815]                 if (length(args) > 0) 
[11:01:48.815]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.815]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.815]             }
[11:01:48.815]             else {
[11:01:48.815]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.815]             }
[11:01:48.815]             {
[11:01:48.815]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.815]                   0L) {
[11:01:48.815]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.815]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.815]                   base::options(opts)
[11:01:48.815]                 }
[11:01:48.815]                 {
[11:01:48.815]                   {
[11:01:48.815]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.815]                     NULL
[11:01:48.815]                   }
[11:01:48.815]                   options(future.plan = NULL)
[11:01:48.815]                   if (is.na(NA_character_)) 
[11:01:48.815]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.815]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.815]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.815]                     .init = FALSE)
[11:01:48.815]                 }
[11:01:48.815]             }
[11:01:48.815]         }
[11:01:48.815]     })
[11:01:48.815]     if (TRUE) {
[11:01:48.815]         base::sink(type = "output", split = FALSE)
[11:01:48.815]         if (TRUE) {
[11:01:48.815]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.815]         }
[11:01:48.815]         else {
[11:01:48.815]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.815]         }
[11:01:48.815]         base::close(...future.stdout)
[11:01:48.815]         ...future.stdout <- NULL
[11:01:48.815]     }
[11:01:48.815]     ...future.result$conditions <- ...future.conditions
[11:01:48.815]     ...future.result$finished <- base::Sys.time()
[11:01:48.815]     ...future.result
[11:01:48.815] }
[11:01:48.817] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:48.818] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:48.818] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:48.818] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:48.818] MultisessionFuture started
[11:01:48.819] - Launch lazy future ... done
[11:01:48.819] run() for ‘MultisessionFuture’ ... done
[11:01:48.819] result() for ClusterFuture ...
[11:01:48.819] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.819] - Validating connection of MultisessionFuture
[11:01:48.860] - received message: FutureResult
[11:01:48.860] - Received FutureResult
[11:01:48.860] - Erased future from FutureRegistry
[11:01:48.860] result() for ClusterFuture ...
[11:01:48.860] - result already collected: FutureResult
[11:01:48.860] result() for ClusterFuture ... done
[11:01:48.861] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.861] result() for ClusterFuture ... done
[11:01:48.861] result() for ClusterFuture ...
[11:01:48.861] - result already collected: FutureResult
[11:01:48.861] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.861] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.861] Searching for globals...
[11:01:48.863] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:48.863] Searching for globals ... DONE
[11:01:48.863] Resolving globals: TRUE
[11:01:48.863] Resolving any globals that are futures ...
[11:01:48.863] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:48.864] Resolving any globals that are futures ... DONE
[11:01:48.864] Resolving futures part of globals (recursively) ...
[11:01:48.864] resolve() on list ...
[11:01:48.864]  recursive: 99
[11:01:48.864]  length: 1
[11:01:48.864]  elements: ‘x’
[11:01:48.865]  length: 0 (resolved future 1)
[11:01:48.865] resolve() on list ... DONE
[11:01:48.865] - globals: [1] ‘x’
[11:01:48.865] Resolving futures part of globals (recursively) ... DONE
[11:01:48.865] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:48.865] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:48.865] - globals: [1] ‘x’
[11:01:48.865] 
[11:01:48.866] getGlobalsAndPackages() ... DONE
[11:01:48.866] run() for ‘Future’ ...
[11:01:48.866] - state: ‘created’
[11:01:48.866] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:48.879] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:48.879] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:48.880]   - Field: ‘node’
[11:01:48.880]   - Field: ‘label’
[11:01:48.880]   - Field: ‘local’
[11:01:48.880]   - Field: ‘owner’
[11:01:48.880]   - Field: ‘envir’
[11:01:48.880]   - Field: ‘workers’
[11:01:48.880]   - Field: ‘packages’
[11:01:48.880]   - Field: ‘gc’
[11:01:48.880]   - Field: ‘conditions’
[11:01:48.880]   - Field: ‘persistent’
[11:01:48.880]   - Field: ‘expr’
[11:01:48.880]   - Field: ‘uuid’
[11:01:48.881]   - Field: ‘seed’
[11:01:48.881]   - Field: ‘version’
[11:01:48.881]   - Field: ‘result’
[11:01:48.881]   - Field: ‘asynchronous’
[11:01:48.881]   - Field: ‘calls’
[11:01:48.881]   - Field: ‘globals’
[11:01:48.881]   - Field: ‘stdout’
[11:01:48.881]   - Field: ‘earlySignal’
[11:01:48.881]   - Field: ‘lazy’
[11:01:48.881]   - Field: ‘state’
[11:01:48.881] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:48.881] - Launch lazy future ...
[11:01:48.882] Packages needed by the future expression (n = 0): <none>
[11:01:48.882] Packages needed by future strategies (n = 0): <none>
[11:01:48.882] {
[11:01:48.882]     {
[11:01:48.882]         {
[11:01:48.882]             ...future.startTime <- base::Sys.time()
[11:01:48.882]             {
[11:01:48.882]                 {
[11:01:48.882]                   {
[11:01:48.882]                     {
[11:01:48.882]                       base::local({
[11:01:48.882]                         has_future <- base::requireNamespace("future", 
[11:01:48.882]                           quietly = TRUE)
[11:01:48.882]                         if (has_future) {
[11:01:48.882]                           ns <- base::getNamespace("future")
[11:01:48.882]                           version <- ns[[".package"]][["version"]]
[11:01:48.882]                           if (is.null(version)) 
[11:01:48.882]                             version <- utils::packageVersion("future")
[11:01:48.882]                         }
[11:01:48.882]                         else {
[11:01:48.882]                           version <- NULL
[11:01:48.882]                         }
[11:01:48.882]                         if (!has_future || version < "1.8.0") {
[11:01:48.882]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.882]                             "", base::R.version$version.string), 
[11:01:48.882]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.882]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.882]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.882]                               "release", "version")], collapse = " "), 
[11:01:48.882]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.882]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.882]                             info)
[11:01:48.882]                           info <- base::paste(info, collapse = "; ")
[11:01:48.882]                           if (!has_future) {
[11:01:48.882]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.882]                               info)
[11:01:48.882]                           }
[11:01:48.882]                           else {
[11:01:48.882]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.882]                               info, version)
[11:01:48.882]                           }
[11:01:48.882]                           base::stop(msg)
[11:01:48.882]                         }
[11:01:48.882]                       })
[11:01:48.882]                     }
[11:01:48.882]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.882]                     base::options(mc.cores = 1L)
[11:01:48.882]                   }
[11:01:48.882]                   ...future.strategy.old <- future::plan("list")
[11:01:48.882]                   options(future.plan = NULL)
[11:01:48.882]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.882]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.882]                 }
[11:01:48.882]                 ...future.workdir <- getwd()
[11:01:48.882]             }
[11:01:48.882]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.882]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.882]         }
[11:01:48.882]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.882]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.882]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.882]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.882]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.882]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.882]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.882]             base::names(...future.oldOptions))
[11:01:48.882]     }
[11:01:48.882]     if (FALSE) {
[11:01:48.882]     }
[11:01:48.882]     else {
[11:01:48.882]         if (TRUE) {
[11:01:48.882]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.882]                 open = "w")
[11:01:48.882]         }
[11:01:48.882]         else {
[11:01:48.882]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.882]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.882]         }
[11:01:48.882]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.882]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.882]             base::sink(type = "output", split = FALSE)
[11:01:48.882]             base::close(...future.stdout)
[11:01:48.882]         }, add = TRUE)
[11:01:48.882]     }
[11:01:48.882]     ...future.frame <- base::sys.nframe()
[11:01:48.882]     ...future.conditions <- base::list()
[11:01:48.882]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.882]     if (FALSE) {
[11:01:48.882]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.882]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.882]     }
[11:01:48.882]     ...future.result <- base::tryCatch({
[11:01:48.882]         base::withCallingHandlers({
[11:01:48.882]             ...future.value <- base::withVisible(base::local({
[11:01:48.882]                 ...future.makeSendCondition <- base::local({
[11:01:48.882]                   sendCondition <- NULL
[11:01:48.882]                   function(frame = 1L) {
[11:01:48.882]                     if (is.function(sendCondition)) 
[11:01:48.882]                       return(sendCondition)
[11:01:48.882]                     ns <- getNamespace("parallel")
[11:01:48.882]                     if (exists("sendData", mode = "function", 
[11:01:48.882]                       envir = ns)) {
[11:01:48.882]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.882]                         envir = ns)
[11:01:48.882]                       envir <- sys.frame(frame)
[11:01:48.882]                       master <- NULL
[11:01:48.882]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.882]                         !identical(envir, emptyenv())) {
[11:01:48.882]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.882]                           inherits = FALSE)) {
[11:01:48.882]                           master <- get("master", mode = "list", 
[11:01:48.882]                             envir = envir, inherits = FALSE)
[11:01:48.882]                           if (inherits(master, c("SOCKnode", 
[11:01:48.882]                             "SOCK0node"))) {
[11:01:48.882]                             sendCondition <<- function(cond) {
[11:01:48.882]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.882]                                 success = TRUE)
[11:01:48.882]                               parallel_sendData(master, data)
[11:01:48.882]                             }
[11:01:48.882]                             return(sendCondition)
[11:01:48.882]                           }
[11:01:48.882]                         }
[11:01:48.882]                         frame <- frame + 1L
[11:01:48.882]                         envir <- sys.frame(frame)
[11:01:48.882]                       }
[11:01:48.882]                     }
[11:01:48.882]                     sendCondition <<- function(cond) NULL
[11:01:48.882]                   }
[11:01:48.882]                 })
[11:01:48.882]                 withCallingHandlers({
[11:01:48.882]                   {
[11:01:48.882]                     x[["a"]] <- 1
[11:01:48.882]                     x
[11:01:48.882]                   }
[11:01:48.882]                 }, immediateCondition = function(cond) {
[11:01:48.882]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.882]                   sendCondition(cond)
[11:01:48.882]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.882]                   {
[11:01:48.882]                     inherits <- base::inherits
[11:01:48.882]                     invokeRestart <- base::invokeRestart
[11:01:48.882]                     is.null <- base::is.null
[11:01:48.882]                     muffled <- FALSE
[11:01:48.882]                     if (inherits(cond, "message")) {
[11:01:48.882]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.882]                       if (muffled) 
[11:01:48.882]                         invokeRestart("muffleMessage")
[11:01:48.882]                     }
[11:01:48.882]                     else if (inherits(cond, "warning")) {
[11:01:48.882]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.882]                       if (muffled) 
[11:01:48.882]                         invokeRestart("muffleWarning")
[11:01:48.882]                     }
[11:01:48.882]                     else if (inherits(cond, "condition")) {
[11:01:48.882]                       if (!is.null(pattern)) {
[11:01:48.882]                         computeRestarts <- base::computeRestarts
[11:01:48.882]                         grepl <- base::grepl
[11:01:48.882]                         restarts <- computeRestarts(cond)
[11:01:48.882]                         for (restart in restarts) {
[11:01:48.882]                           name <- restart$name
[11:01:48.882]                           if (is.null(name)) 
[11:01:48.882]                             next
[11:01:48.882]                           if (!grepl(pattern, name)) 
[11:01:48.882]                             next
[11:01:48.882]                           invokeRestart(restart)
[11:01:48.882]                           muffled <- TRUE
[11:01:48.882]                           break
[11:01:48.882]                         }
[11:01:48.882]                       }
[11:01:48.882]                     }
[11:01:48.882]                     invisible(muffled)
[11:01:48.882]                   }
[11:01:48.882]                   muffleCondition(cond)
[11:01:48.882]                 })
[11:01:48.882]             }))
[11:01:48.882]             future::FutureResult(value = ...future.value$value, 
[11:01:48.882]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.882]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.882]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.882]                     ...future.globalenv.names))
[11:01:48.882]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.882]         }, condition = base::local({
[11:01:48.882]             c <- base::c
[11:01:48.882]             inherits <- base::inherits
[11:01:48.882]             invokeRestart <- base::invokeRestart
[11:01:48.882]             length <- base::length
[11:01:48.882]             list <- base::list
[11:01:48.882]             seq.int <- base::seq.int
[11:01:48.882]             signalCondition <- base::signalCondition
[11:01:48.882]             sys.calls <- base::sys.calls
[11:01:48.882]             `[[` <- base::`[[`
[11:01:48.882]             `+` <- base::`+`
[11:01:48.882]             `<<-` <- base::`<<-`
[11:01:48.882]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.882]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.882]                   3L)]
[11:01:48.882]             }
[11:01:48.882]             function(cond) {
[11:01:48.882]                 is_error <- inherits(cond, "error")
[11:01:48.882]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.882]                   NULL)
[11:01:48.882]                 if (is_error) {
[11:01:48.882]                   sessionInformation <- function() {
[11:01:48.882]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.882]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.882]                       search = base::search(), system = base::Sys.info())
[11:01:48.882]                   }
[11:01:48.882]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.882]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.882]                     cond$call), session = sessionInformation(), 
[11:01:48.882]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.882]                   signalCondition(cond)
[11:01:48.882]                 }
[11:01:48.882]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.882]                 "immediateCondition"))) {
[11:01:48.882]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.882]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.882]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.882]                   if (TRUE && !signal) {
[11:01:48.882]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.882]                     {
[11:01:48.882]                       inherits <- base::inherits
[11:01:48.882]                       invokeRestart <- base::invokeRestart
[11:01:48.882]                       is.null <- base::is.null
[11:01:48.882]                       muffled <- FALSE
[11:01:48.882]                       if (inherits(cond, "message")) {
[11:01:48.882]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.882]                         if (muffled) 
[11:01:48.882]                           invokeRestart("muffleMessage")
[11:01:48.882]                       }
[11:01:48.882]                       else if (inherits(cond, "warning")) {
[11:01:48.882]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.882]                         if (muffled) 
[11:01:48.882]                           invokeRestart("muffleWarning")
[11:01:48.882]                       }
[11:01:48.882]                       else if (inherits(cond, "condition")) {
[11:01:48.882]                         if (!is.null(pattern)) {
[11:01:48.882]                           computeRestarts <- base::computeRestarts
[11:01:48.882]                           grepl <- base::grepl
[11:01:48.882]                           restarts <- computeRestarts(cond)
[11:01:48.882]                           for (restart in restarts) {
[11:01:48.882]                             name <- restart$name
[11:01:48.882]                             if (is.null(name)) 
[11:01:48.882]                               next
[11:01:48.882]                             if (!grepl(pattern, name)) 
[11:01:48.882]                               next
[11:01:48.882]                             invokeRestart(restart)
[11:01:48.882]                             muffled <- TRUE
[11:01:48.882]                             break
[11:01:48.882]                           }
[11:01:48.882]                         }
[11:01:48.882]                       }
[11:01:48.882]                       invisible(muffled)
[11:01:48.882]                     }
[11:01:48.882]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.882]                   }
[11:01:48.882]                 }
[11:01:48.882]                 else {
[11:01:48.882]                   if (TRUE) {
[11:01:48.882]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.882]                     {
[11:01:48.882]                       inherits <- base::inherits
[11:01:48.882]                       invokeRestart <- base::invokeRestart
[11:01:48.882]                       is.null <- base::is.null
[11:01:48.882]                       muffled <- FALSE
[11:01:48.882]                       if (inherits(cond, "message")) {
[11:01:48.882]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.882]                         if (muffled) 
[11:01:48.882]                           invokeRestart("muffleMessage")
[11:01:48.882]                       }
[11:01:48.882]                       else if (inherits(cond, "warning")) {
[11:01:48.882]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.882]                         if (muffled) 
[11:01:48.882]                           invokeRestart("muffleWarning")
[11:01:48.882]                       }
[11:01:48.882]                       else if (inherits(cond, "condition")) {
[11:01:48.882]                         if (!is.null(pattern)) {
[11:01:48.882]                           computeRestarts <- base::computeRestarts
[11:01:48.882]                           grepl <- base::grepl
[11:01:48.882]                           restarts <- computeRestarts(cond)
[11:01:48.882]                           for (restart in restarts) {
[11:01:48.882]                             name <- restart$name
[11:01:48.882]                             if (is.null(name)) 
[11:01:48.882]                               next
[11:01:48.882]                             if (!grepl(pattern, name)) 
[11:01:48.882]                               next
[11:01:48.882]                             invokeRestart(restart)
[11:01:48.882]                             muffled <- TRUE
[11:01:48.882]                             break
[11:01:48.882]                           }
[11:01:48.882]                         }
[11:01:48.882]                       }
[11:01:48.882]                       invisible(muffled)
[11:01:48.882]                     }
[11:01:48.882]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.882]                   }
[11:01:48.882]                 }
[11:01:48.882]             }
[11:01:48.882]         }))
[11:01:48.882]     }, error = function(ex) {
[11:01:48.882]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.882]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.882]                 ...future.rng), started = ...future.startTime, 
[11:01:48.882]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.882]             version = "1.8"), class = "FutureResult")
[11:01:48.882]     }, finally = {
[11:01:48.882]         if (!identical(...future.workdir, getwd())) 
[11:01:48.882]             setwd(...future.workdir)
[11:01:48.882]         {
[11:01:48.882]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.882]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.882]             }
[11:01:48.882]             base::options(...future.oldOptions)
[11:01:48.882]             if (.Platform$OS.type == "windows") {
[11:01:48.882]                 old_names <- names(...future.oldEnvVars)
[11:01:48.882]                 envs <- base::Sys.getenv()
[11:01:48.882]                 names <- names(envs)
[11:01:48.882]                 common <- intersect(names, old_names)
[11:01:48.882]                 added <- setdiff(names, old_names)
[11:01:48.882]                 removed <- setdiff(old_names, names)
[11:01:48.882]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.882]                   envs[common]]
[11:01:48.882]                 NAMES <- toupper(changed)
[11:01:48.882]                 args <- list()
[11:01:48.882]                 for (kk in seq_along(NAMES)) {
[11:01:48.882]                   name <- changed[[kk]]
[11:01:48.882]                   NAME <- NAMES[[kk]]
[11:01:48.882]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.882]                     next
[11:01:48.882]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.882]                 }
[11:01:48.882]                 NAMES <- toupper(added)
[11:01:48.882]                 for (kk in seq_along(NAMES)) {
[11:01:48.882]                   name <- added[[kk]]
[11:01:48.882]                   NAME <- NAMES[[kk]]
[11:01:48.882]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.882]                     next
[11:01:48.882]                   args[[name]] <- ""
[11:01:48.882]                 }
[11:01:48.882]                 NAMES <- toupper(removed)
[11:01:48.882]                 for (kk in seq_along(NAMES)) {
[11:01:48.882]                   name <- removed[[kk]]
[11:01:48.882]                   NAME <- NAMES[[kk]]
[11:01:48.882]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.882]                     next
[11:01:48.882]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.882]                 }
[11:01:48.882]                 if (length(args) > 0) 
[11:01:48.882]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.882]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.882]             }
[11:01:48.882]             else {
[11:01:48.882]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.882]             }
[11:01:48.882]             {
[11:01:48.882]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.882]                   0L) {
[11:01:48.882]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.882]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.882]                   base::options(opts)
[11:01:48.882]                 }
[11:01:48.882]                 {
[11:01:48.882]                   {
[11:01:48.882]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.882]                     NULL
[11:01:48.882]                   }
[11:01:48.882]                   options(future.plan = NULL)
[11:01:48.882]                   if (is.na(NA_character_)) 
[11:01:48.882]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.882]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.882]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.882]                     .init = FALSE)
[11:01:48.882]                 }
[11:01:48.882]             }
[11:01:48.882]         }
[11:01:48.882]     })
[11:01:48.882]     if (TRUE) {
[11:01:48.882]         base::sink(type = "output", split = FALSE)
[11:01:48.882]         if (TRUE) {
[11:01:48.882]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.882]         }
[11:01:48.882]         else {
[11:01:48.882]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.882]         }
[11:01:48.882]         base::close(...future.stdout)
[11:01:48.882]         ...future.stdout <- NULL
[11:01:48.882]     }
[11:01:48.882]     ...future.result$conditions <- ...future.conditions
[11:01:48.882]     ...future.result$finished <- base::Sys.time()
[11:01:48.882]     ...future.result
[11:01:48.882] }
[11:01:48.885] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:48.885] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:48.885] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:48.885] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:48.886] MultisessionFuture started
[11:01:48.886] - Launch lazy future ... done
[11:01:48.886] run() for ‘MultisessionFuture’ ... done
[11:01:48.886] result() for ClusterFuture ...
[11:01:48.886] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.886] - Validating connection of MultisessionFuture
[11:01:48.928] - received message: FutureResult
[11:01:48.928] - Received FutureResult
[11:01:48.928] - Erased future from FutureRegistry
[11:01:48.928] result() for ClusterFuture ...
[11:01:48.928] - result already collected: FutureResult
[11:01:48.928] result() for ClusterFuture ... done
[11:01:48.928] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.928] result() for ClusterFuture ... done
[11:01:48.928] result() for ClusterFuture ...
[11:01:48.929] - result already collected: FutureResult
[11:01:48.929] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.929] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.929] Searching for globals...
[11:01:48.931] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:48.931] Searching for globals ... DONE
[11:01:48.931] Resolving globals: TRUE
[11:01:48.931] Resolving any globals that are futures ...
[11:01:48.931] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[11:01:48.931] Resolving any globals that are futures ... DONE
[11:01:48.932] Resolving futures part of globals (recursively) ...
[11:01:48.932] resolve() on list ...
[11:01:48.932]  recursive: 99
[11:01:48.932]  length: 1
[11:01:48.932]  elements: ‘x’
[11:01:48.932]  length: 0 (resolved future 1)
[11:01:48.932] resolve() on list ... DONE
[11:01:48.932] - globals: [1] ‘x’
[11:01:48.933] Resolving futures part of globals (recursively) ... DONE
[11:01:48.933] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:48.933] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:48.933] - globals: [1] ‘x’
[11:01:48.933] 
[11:01:48.933] getGlobalsAndPackages() ... DONE
[11:01:48.934] run() for ‘Future’ ...
[11:01:48.934] - state: ‘created’
[11:01:48.934] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:48.947] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:48.947] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:48.947]   - Field: ‘node’
[11:01:48.947]   - Field: ‘label’
[11:01:48.947]   - Field: ‘local’
[11:01:48.948]   - Field: ‘owner’
[11:01:48.948]   - Field: ‘envir’
[11:01:48.948]   - Field: ‘workers’
[11:01:48.948]   - Field: ‘packages’
[11:01:48.948]   - Field: ‘gc’
[11:01:48.948]   - Field: ‘conditions’
[11:01:48.948]   - Field: ‘persistent’
[11:01:48.948]   - Field: ‘expr’
[11:01:48.948]   - Field: ‘uuid’
[11:01:48.948]   - Field: ‘seed’
[11:01:48.948]   - Field: ‘version’
[11:01:48.948]   - Field: ‘result’
[11:01:48.949]   - Field: ‘asynchronous’
[11:01:48.949]   - Field: ‘calls’
[11:01:48.949]   - Field: ‘globals’
[11:01:48.949]   - Field: ‘stdout’
[11:01:48.949]   - Field: ‘earlySignal’
[11:01:48.949]   - Field: ‘lazy’
[11:01:48.949]   - Field: ‘state’
[11:01:48.949] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:48.949] - Launch lazy future ...
[11:01:48.949] Packages needed by the future expression (n = 0): <none>
[11:01:48.950] Packages needed by future strategies (n = 0): <none>
[11:01:48.950] {
[11:01:48.950]     {
[11:01:48.950]         {
[11:01:48.950]             ...future.startTime <- base::Sys.time()
[11:01:48.950]             {
[11:01:48.950]                 {
[11:01:48.950]                   {
[11:01:48.950]                     {
[11:01:48.950]                       base::local({
[11:01:48.950]                         has_future <- base::requireNamespace("future", 
[11:01:48.950]                           quietly = TRUE)
[11:01:48.950]                         if (has_future) {
[11:01:48.950]                           ns <- base::getNamespace("future")
[11:01:48.950]                           version <- ns[[".package"]][["version"]]
[11:01:48.950]                           if (is.null(version)) 
[11:01:48.950]                             version <- utils::packageVersion("future")
[11:01:48.950]                         }
[11:01:48.950]                         else {
[11:01:48.950]                           version <- NULL
[11:01:48.950]                         }
[11:01:48.950]                         if (!has_future || version < "1.8.0") {
[11:01:48.950]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:48.950]                             "", base::R.version$version.string), 
[11:01:48.950]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:48.950]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:48.950]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:48.950]                               "release", "version")], collapse = " "), 
[11:01:48.950]                             hostname = base::Sys.info()[["nodename"]])
[11:01:48.950]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:48.950]                             info)
[11:01:48.950]                           info <- base::paste(info, collapse = "; ")
[11:01:48.950]                           if (!has_future) {
[11:01:48.950]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:48.950]                               info)
[11:01:48.950]                           }
[11:01:48.950]                           else {
[11:01:48.950]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:48.950]                               info, version)
[11:01:48.950]                           }
[11:01:48.950]                           base::stop(msg)
[11:01:48.950]                         }
[11:01:48.950]                       })
[11:01:48.950]                     }
[11:01:48.950]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:48.950]                     base::options(mc.cores = 1L)
[11:01:48.950]                   }
[11:01:48.950]                   ...future.strategy.old <- future::plan("list")
[11:01:48.950]                   options(future.plan = NULL)
[11:01:48.950]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.950]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:48.950]                 }
[11:01:48.950]                 ...future.workdir <- getwd()
[11:01:48.950]             }
[11:01:48.950]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:48.950]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:48.950]         }
[11:01:48.950]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:48.950]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:48.950]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:48.950]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:48.950]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:48.950]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:48.950]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:48.950]             base::names(...future.oldOptions))
[11:01:48.950]     }
[11:01:48.950]     if (FALSE) {
[11:01:48.950]     }
[11:01:48.950]     else {
[11:01:48.950]         if (TRUE) {
[11:01:48.950]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:48.950]                 open = "w")
[11:01:48.950]         }
[11:01:48.950]         else {
[11:01:48.950]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:48.950]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:48.950]         }
[11:01:48.950]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:48.950]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:48.950]             base::sink(type = "output", split = FALSE)
[11:01:48.950]             base::close(...future.stdout)
[11:01:48.950]         }, add = TRUE)
[11:01:48.950]     }
[11:01:48.950]     ...future.frame <- base::sys.nframe()
[11:01:48.950]     ...future.conditions <- base::list()
[11:01:48.950]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:48.950]     if (FALSE) {
[11:01:48.950]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:48.950]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:48.950]     }
[11:01:48.950]     ...future.result <- base::tryCatch({
[11:01:48.950]         base::withCallingHandlers({
[11:01:48.950]             ...future.value <- base::withVisible(base::local({
[11:01:48.950]                 ...future.makeSendCondition <- base::local({
[11:01:48.950]                   sendCondition <- NULL
[11:01:48.950]                   function(frame = 1L) {
[11:01:48.950]                     if (is.function(sendCondition)) 
[11:01:48.950]                       return(sendCondition)
[11:01:48.950]                     ns <- getNamespace("parallel")
[11:01:48.950]                     if (exists("sendData", mode = "function", 
[11:01:48.950]                       envir = ns)) {
[11:01:48.950]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:48.950]                         envir = ns)
[11:01:48.950]                       envir <- sys.frame(frame)
[11:01:48.950]                       master <- NULL
[11:01:48.950]                       while (!identical(envir, .GlobalEnv) && 
[11:01:48.950]                         !identical(envir, emptyenv())) {
[11:01:48.950]                         if (exists("master", mode = "list", envir = envir, 
[11:01:48.950]                           inherits = FALSE)) {
[11:01:48.950]                           master <- get("master", mode = "list", 
[11:01:48.950]                             envir = envir, inherits = FALSE)
[11:01:48.950]                           if (inherits(master, c("SOCKnode", 
[11:01:48.950]                             "SOCK0node"))) {
[11:01:48.950]                             sendCondition <<- function(cond) {
[11:01:48.950]                               data <- list(type = "VALUE", value = cond, 
[11:01:48.950]                                 success = TRUE)
[11:01:48.950]                               parallel_sendData(master, data)
[11:01:48.950]                             }
[11:01:48.950]                             return(sendCondition)
[11:01:48.950]                           }
[11:01:48.950]                         }
[11:01:48.950]                         frame <- frame + 1L
[11:01:48.950]                         envir <- sys.frame(frame)
[11:01:48.950]                       }
[11:01:48.950]                     }
[11:01:48.950]                     sendCondition <<- function(cond) NULL
[11:01:48.950]                   }
[11:01:48.950]                 })
[11:01:48.950]                 withCallingHandlers({
[11:01:48.950]                   {
[11:01:48.950]                     x[["a"]] <- 1
[11:01:48.950]                     x
[11:01:48.950]                   }
[11:01:48.950]                 }, immediateCondition = function(cond) {
[11:01:48.950]                   sendCondition <- ...future.makeSendCondition()
[11:01:48.950]                   sendCondition(cond)
[11:01:48.950]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.950]                   {
[11:01:48.950]                     inherits <- base::inherits
[11:01:48.950]                     invokeRestart <- base::invokeRestart
[11:01:48.950]                     is.null <- base::is.null
[11:01:48.950]                     muffled <- FALSE
[11:01:48.950]                     if (inherits(cond, "message")) {
[11:01:48.950]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:48.950]                       if (muffled) 
[11:01:48.950]                         invokeRestart("muffleMessage")
[11:01:48.950]                     }
[11:01:48.950]                     else if (inherits(cond, "warning")) {
[11:01:48.950]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:48.950]                       if (muffled) 
[11:01:48.950]                         invokeRestart("muffleWarning")
[11:01:48.950]                     }
[11:01:48.950]                     else if (inherits(cond, "condition")) {
[11:01:48.950]                       if (!is.null(pattern)) {
[11:01:48.950]                         computeRestarts <- base::computeRestarts
[11:01:48.950]                         grepl <- base::grepl
[11:01:48.950]                         restarts <- computeRestarts(cond)
[11:01:48.950]                         for (restart in restarts) {
[11:01:48.950]                           name <- restart$name
[11:01:48.950]                           if (is.null(name)) 
[11:01:48.950]                             next
[11:01:48.950]                           if (!grepl(pattern, name)) 
[11:01:48.950]                             next
[11:01:48.950]                           invokeRestart(restart)
[11:01:48.950]                           muffled <- TRUE
[11:01:48.950]                           break
[11:01:48.950]                         }
[11:01:48.950]                       }
[11:01:48.950]                     }
[11:01:48.950]                     invisible(muffled)
[11:01:48.950]                   }
[11:01:48.950]                   muffleCondition(cond)
[11:01:48.950]                 })
[11:01:48.950]             }))
[11:01:48.950]             future::FutureResult(value = ...future.value$value, 
[11:01:48.950]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.950]                   ...future.rng), globalenv = if (FALSE) 
[11:01:48.950]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:48.950]                     ...future.globalenv.names))
[11:01:48.950]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:48.950]         }, condition = base::local({
[11:01:48.950]             c <- base::c
[11:01:48.950]             inherits <- base::inherits
[11:01:48.950]             invokeRestart <- base::invokeRestart
[11:01:48.950]             length <- base::length
[11:01:48.950]             list <- base::list
[11:01:48.950]             seq.int <- base::seq.int
[11:01:48.950]             signalCondition <- base::signalCondition
[11:01:48.950]             sys.calls <- base::sys.calls
[11:01:48.950]             `[[` <- base::`[[`
[11:01:48.950]             `+` <- base::`+`
[11:01:48.950]             `<<-` <- base::`<<-`
[11:01:48.950]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:48.950]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:48.950]                   3L)]
[11:01:48.950]             }
[11:01:48.950]             function(cond) {
[11:01:48.950]                 is_error <- inherits(cond, "error")
[11:01:48.950]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:48.950]                   NULL)
[11:01:48.950]                 if (is_error) {
[11:01:48.950]                   sessionInformation <- function() {
[11:01:48.950]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:48.950]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:48.950]                       search = base::search(), system = base::Sys.info())
[11:01:48.950]                   }
[11:01:48.950]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.950]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:48.950]                     cond$call), session = sessionInformation(), 
[11:01:48.950]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:48.950]                   signalCondition(cond)
[11:01:48.950]                 }
[11:01:48.950]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:48.950]                 "immediateCondition"))) {
[11:01:48.950]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:48.950]                   ...future.conditions[[length(...future.conditions) + 
[11:01:48.950]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:48.950]                   if (TRUE && !signal) {
[11:01:48.950]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.950]                     {
[11:01:48.950]                       inherits <- base::inherits
[11:01:48.950]                       invokeRestart <- base::invokeRestart
[11:01:48.950]                       is.null <- base::is.null
[11:01:48.950]                       muffled <- FALSE
[11:01:48.950]                       if (inherits(cond, "message")) {
[11:01:48.950]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.950]                         if (muffled) 
[11:01:48.950]                           invokeRestart("muffleMessage")
[11:01:48.950]                       }
[11:01:48.950]                       else if (inherits(cond, "warning")) {
[11:01:48.950]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.950]                         if (muffled) 
[11:01:48.950]                           invokeRestart("muffleWarning")
[11:01:48.950]                       }
[11:01:48.950]                       else if (inherits(cond, "condition")) {
[11:01:48.950]                         if (!is.null(pattern)) {
[11:01:48.950]                           computeRestarts <- base::computeRestarts
[11:01:48.950]                           grepl <- base::grepl
[11:01:48.950]                           restarts <- computeRestarts(cond)
[11:01:48.950]                           for (restart in restarts) {
[11:01:48.950]                             name <- restart$name
[11:01:48.950]                             if (is.null(name)) 
[11:01:48.950]                               next
[11:01:48.950]                             if (!grepl(pattern, name)) 
[11:01:48.950]                               next
[11:01:48.950]                             invokeRestart(restart)
[11:01:48.950]                             muffled <- TRUE
[11:01:48.950]                             break
[11:01:48.950]                           }
[11:01:48.950]                         }
[11:01:48.950]                       }
[11:01:48.950]                       invisible(muffled)
[11:01:48.950]                     }
[11:01:48.950]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.950]                   }
[11:01:48.950]                 }
[11:01:48.950]                 else {
[11:01:48.950]                   if (TRUE) {
[11:01:48.950]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:48.950]                     {
[11:01:48.950]                       inherits <- base::inherits
[11:01:48.950]                       invokeRestart <- base::invokeRestart
[11:01:48.950]                       is.null <- base::is.null
[11:01:48.950]                       muffled <- FALSE
[11:01:48.950]                       if (inherits(cond, "message")) {
[11:01:48.950]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:48.950]                         if (muffled) 
[11:01:48.950]                           invokeRestart("muffleMessage")
[11:01:48.950]                       }
[11:01:48.950]                       else if (inherits(cond, "warning")) {
[11:01:48.950]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:48.950]                         if (muffled) 
[11:01:48.950]                           invokeRestart("muffleWarning")
[11:01:48.950]                       }
[11:01:48.950]                       else if (inherits(cond, "condition")) {
[11:01:48.950]                         if (!is.null(pattern)) {
[11:01:48.950]                           computeRestarts <- base::computeRestarts
[11:01:48.950]                           grepl <- base::grepl
[11:01:48.950]                           restarts <- computeRestarts(cond)
[11:01:48.950]                           for (restart in restarts) {
[11:01:48.950]                             name <- restart$name
[11:01:48.950]                             if (is.null(name)) 
[11:01:48.950]                               next
[11:01:48.950]                             if (!grepl(pattern, name)) 
[11:01:48.950]                               next
[11:01:48.950]                             invokeRestart(restart)
[11:01:48.950]                             muffled <- TRUE
[11:01:48.950]                             break
[11:01:48.950]                           }
[11:01:48.950]                         }
[11:01:48.950]                       }
[11:01:48.950]                       invisible(muffled)
[11:01:48.950]                     }
[11:01:48.950]                     muffleCondition(cond, pattern = "^muffle")
[11:01:48.950]                   }
[11:01:48.950]                 }
[11:01:48.950]             }
[11:01:48.950]         }))
[11:01:48.950]     }, error = function(ex) {
[11:01:48.950]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:48.950]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:48.950]                 ...future.rng), started = ...future.startTime, 
[11:01:48.950]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:48.950]             version = "1.8"), class = "FutureResult")
[11:01:48.950]     }, finally = {
[11:01:48.950]         if (!identical(...future.workdir, getwd())) 
[11:01:48.950]             setwd(...future.workdir)
[11:01:48.950]         {
[11:01:48.950]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:48.950]                 ...future.oldOptions$nwarnings <- NULL
[11:01:48.950]             }
[11:01:48.950]             base::options(...future.oldOptions)
[11:01:48.950]             if (.Platform$OS.type == "windows") {
[11:01:48.950]                 old_names <- names(...future.oldEnvVars)
[11:01:48.950]                 envs <- base::Sys.getenv()
[11:01:48.950]                 names <- names(envs)
[11:01:48.950]                 common <- intersect(names, old_names)
[11:01:48.950]                 added <- setdiff(names, old_names)
[11:01:48.950]                 removed <- setdiff(old_names, names)
[11:01:48.950]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:48.950]                   envs[common]]
[11:01:48.950]                 NAMES <- toupper(changed)
[11:01:48.950]                 args <- list()
[11:01:48.950]                 for (kk in seq_along(NAMES)) {
[11:01:48.950]                   name <- changed[[kk]]
[11:01:48.950]                   NAME <- NAMES[[kk]]
[11:01:48.950]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.950]                     next
[11:01:48.950]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.950]                 }
[11:01:48.950]                 NAMES <- toupper(added)
[11:01:48.950]                 for (kk in seq_along(NAMES)) {
[11:01:48.950]                   name <- added[[kk]]
[11:01:48.950]                   NAME <- NAMES[[kk]]
[11:01:48.950]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.950]                     next
[11:01:48.950]                   args[[name]] <- ""
[11:01:48.950]                 }
[11:01:48.950]                 NAMES <- toupper(removed)
[11:01:48.950]                 for (kk in seq_along(NAMES)) {
[11:01:48.950]                   name <- removed[[kk]]
[11:01:48.950]                   NAME <- NAMES[[kk]]
[11:01:48.950]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:48.950]                     next
[11:01:48.950]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:48.950]                 }
[11:01:48.950]                 if (length(args) > 0) 
[11:01:48.950]                   base::do.call(base::Sys.setenv, args = args)
[11:01:48.950]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:48.950]             }
[11:01:48.950]             else {
[11:01:48.950]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:48.950]             }
[11:01:48.950]             {
[11:01:48.950]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:48.950]                   0L) {
[11:01:48.950]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:48.950]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:48.950]                   base::options(opts)
[11:01:48.950]                 }
[11:01:48.950]                 {
[11:01:48.950]                   {
[11:01:48.950]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:48.950]                     NULL
[11:01:48.950]                   }
[11:01:48.950]                   options(future.plan = NULL)
[11:01:48.950]                   if (is.na(NA_character_)) 
[11:01:48.950]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:48.950]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:48.950]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:48.950]                     .init = FALSE)
[11:01:48.950]                 }
[11:01:48.950]             }
[11:01:48.950]         }
[11:01:48.950]     })
[11:01:48.950]     if (TRUE) {
[11:01:48.950]         base::sink(type = "output", split = FALSE)
[11:01:48.950]         if (TRUE) {
[11:01:48.950]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:48.950]         }
[11:01:48.950]         else {
[11:01:48.950]             ...future.result["stdout"] <- base::list(NULL)
[11:01:48.950]         }
[11:01:48.950]         base::close(...future.stdout)
[11:01:48.950]         ...future.stdout <- NULL
[11:01:48.950]     }
[11:01:48.950]     ...future.result$conditions <- ...future.conditions
[11:01:48.950]     ...future.result$finished <- base::Sys.time()
[11:01:48.950]     ...future.result
[11:01:48.950] }
[11:01:48.952] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:48.953] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:48.953] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:48.953] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:48.954] MultisessionFuture started
[11:01:48.954] - Launch lazy future ... done
[11:01:48.954] run() for ‘MultisessionFuture’ ... done
[11:01:48.954] result() for ClusterFuture ...
[11:01:48.954] receiveMessageFromWorker() for ClusterFuture ...
[11:01:48.954] - Validating connection of MultisessionFuture
[11:01:48.995] - received message: FutureResult
[11:01:48.995] - Received FutureResult
[11:01:48.995] - Erased future from FutureRegistry
[11:01:48.995] result() for ClusterFuture ...
[11:01:48.995] - result already collected: FutureResult
[11:01:48.996] result() for ClusterFuture ... done
[11:01:48.996] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:48.996] result() for ClusterFuture ... done
[11:01:48.996] result() for ClusterFuture ...
[11:01:48.996] - result already collected: FutureResult
[11:01:48.996] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:48.996] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:48.996] Searching for globals...
[11:01:48.998] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:48.998] Searching for globals ... DONE
[11:01:48.999] Resolving globals: TRUE
[11:01:48.999] Resolving any globals that are futures ...
[11:01:48.999] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:48.999] Resolving any globals that are futures ... DONE
[11:01:48.999] Resolving futures part of globals (recursively) ...
[11:01:48.999] resolve() on list ...
[11:01:48.999]  recursive: 99
[11:01:49.000]  length: 1
[11:01:49.000]  elements: ‘x’
[11:01:49.000]  length: 0 (resolved future 1)
[11:01:49.000] resolve() on list ... DONE
[11:01:49.000] - globals: [1] ‘x’
[11:01:49.000] Resolving futures part of globals (recursively) ... DONE
[11:01:49.000] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:49.000] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:49.001] - globals: [1] ‘x’
[11:01:49.001] 
[11:01:49.001] getGlobalsAndPackages() ... DONE
[11:01:49.001] run() for ‘Future’ ...
[11:01:49.001] - state: ‘created’
[11:01:49.001] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:49.014] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:49.015] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:49.015]   - Field: ‘node’
[11:01:49.015]   - Field: ‘label’
[11:01:49.015]   - Field: ‘local’
[11:01:49.015]   - Field: ‘owner’
[11:01:49.015]   - Field: ‘envir’
[11:01:49.015]   - Field: ‘workers’
[11:01:49.015]   - Field: ‘packages’
[11:01:49.015]   - Field: ‘gc’
[11:01:49.015]   - Field: ‘conditions’
[11:01:49.015]   - Field: ‘persistent’
[11:01:49.016]   - Field: ‘expr’
[11:01:49.016]   - Field: ‘uuid’
[11:01:49.016]   - Field: ‘seed’
[11:01:49.016]   - Field: ‘version’
[11:01:49.016]   - Field: ‘result’
[11:01:49.016]   - Field: ‘asynchronous’
[11:01:49.016]   - Field: ‘calls’
[11:01:49.016]   - Field: ‘globals’
[11:01:49.016]   - Field: ‘stdout’
[11:01:49.016]   - Field: ‘earlySignal’
[11:01:49.016]   - Field: ‘lazy’
[11:01:49.016]   - Field: ‘state’
[11:01:49.017] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:49.017] - Launch lazy future ...
[11:01:49.017] Packages needed by the future expression (n = 0): <none>
[11:01:49.017] Packages needed by future strategies (n = 0): <none>
[11:01:49.017] {
[11:01:49.017]     {
[11:01:49.017]         {
[11:01:49.017]             ...future.startTime <- base::Sys.time()
[11:01:49.017]             {
[11:01:49.017]                 {
[11:01:49.017]                   {
[11:01:49.017]                     {
[11:01:49.017]                       base::local({
[11:01:49.017]                         has_future <- base::requireNamespace("future", 
[11:01:49.017]                           quietly = TRUE)
[11:01:49.017]                         if (has_future) {
[11:01:49.017]                           ns <- base::getNamespace("future")
[11:01:49.017]                           version <- ns[[".package"]][["version"]]
[11:01:49.017]                           if (is.null(version)) 
[11:01:49.017]                             version <- utils::packageVersion("future")
[11:01:49.017]                         }
[11:01:49.017]                         else {
[11:01:49.017]                           version <- NULL
[11:01:49.017]                         }
[11:01:49.017]                         if (!has_future || version < "1.8.0") {
[11:01:49.017]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:49.017]                             "", base::R.version$version.string), 
[11:01:49.017]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:49.017]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:49.017]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:49.017]                               "release", "version")], collapse = " "), 
[11:01:49.017]                             hostname = base::Sys.info()[["nodename"]])
[11:01:49.017]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:49.017]                             info)
[11:01:49.017]                           info <- base::paste(info, collapse = "; ")
[11:01:49.017]                           if (!has_future) {
[11:01:49.017]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:49.017]                               info)
[11:01:49.017]                           }
[11:01:49.017]                           else {
[11:01:49.017]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:49.017]                               info, version)
[11:01:49.017]                           }
[11:01:49.017]                           base::stop(msg)
[11:01:49.017]                         }
[11:01:49.017]                       })
[11:01:49.017]                     }
[11:01:49.017]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:49.017]                     base::options(mc.cores = 1L)
[11:01:49.017]                   }
[11:01:49.017]                   ...future.strategy.old <- future::plan("list")
[11:01:49.017]                   options(future.plan = NULL)
[11:01:49.017]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:49.017]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:49.017]                 }
[11:01:49.017]                 ...future.workdir <- getwd()
[11:01:49.017]             }
[11:01:49.017]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:49.017]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:49.017]         }
[11:01:49.017]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:49.017]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:49.017]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:49.017]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:49.017]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:49.017]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:49.017]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:49.017]             base::names(...future.oldOptions))
[11:01:49.017]     }
[11:01:49.017]     if (FALSE) {
[11:01:49.017]     }
[11:01:49.017]     else {
[11:01:49.017]         if (TRUE) {
[11:01:49.017]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:49.017]                 open = "w")
[11:01:49.017]         }
[11:01:49.017]         else {
[11:01:49.017]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:49.017]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:49.017]         }
[11:01:49.017]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:49.017]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:49.017]             base::sink(type = "output", split = FALSE)
[11:01:49.017]             base::close(...future.stdout)
[11:01:49.017]         }, add = TRUE)
[11:01:49.017]     }
[11:01:49.017]     ...future.frame <- base::sys.nframe()
[11:01:49.017]     ...future.conditions <- base::list()
[11:01:49.017]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:49.017]     if (FALSE) {
[11:01:49.017]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:49.017]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:49.017]     }
[11:01:49.017]     ...future.result <- base::tryCatch({
[11:01:49.017]         base::withCallingHandlers({
[11:01:49.017]             ...future.value <- base::withVisible(base::local({
[11:01:49.017]                 ...future.makeSendCondition <- base::local({
[11:01:49.017]                   sendCondition <- NULL
[11:01:49.017]                   function(frame = 1L) {
[11:01:49.017]                     if (is.function(sendCondition)) 
[11:01:49.017]                       return(sendCondition)
[11:01:49.017]                     ns <- getNamespace("parallel")
[11:01:49.017]                     if (exists("sendData", mode = "function", 
[11:01:49.017]                       envir = ns)) {
[11:01:49.017]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:49.017]                         envir = ns)
[11:01:49.017]                       envir <- sys.frame(frame)
[11:01:49.017]                       master <- NULL
[11:01:49.017]                       while (!identical(envir, .GlobalEnv) && 
[11:01:49.017]                         !identical(envir, emptyenv())) {
[11:01:49.017]                         if (exists("master", mode = "list", envir = envir, 
[11:01:49.017]                           inherits = FALSE)) {
[11:01:49.017]                           master <- get("master", mode = "list", 
[11:01:49.017]                             envir = envir, inherits = FALSE)
[11:01:49.017]                           if (inherits(master, c("SOCKnode", 
[11:01:49.017]                             "SOCK0node"))) {
[11:01:49.017]                             sendCondition <<- function(cond) {
[11:01:49.017]                               data <- list(type = "VALUE", value = cond, 
[11:01:49.017]                                 success = TRUE)
[11:01:49.017]                               parallel_sendData(master, data)
[11:01:49.017]                             }
[11:01:49.017]                             return(sendCondition)
[11:01:49.017]                           }
[11:01:49.017]                         }
[11:01:49.017]                         frame <- frame + 1L
[11:01:49.017]                         envir <- sys.frame(frame)
[11:01:49.017]                       }
[11:01:49.017]                     }
[11:01:49.017]                     sendCondition <<- function(cond) NULL
[11:01:49.017]                   }
[11:01:49.017]                 })
[11:01:49.017]                 withCallingHandlers({
[11:01:49.017]                   {
[11:01:49.017]                     x["a"] <- list(1)
[11:01:49.017]                     x
[11:01:49.017]                   }
[11:01:49.017]                 }, immediateCondition = function(cond) {
[11:01:49.017]                   sendCondition <- ...future.makeSendCondition()
[11:01:49.017]                   sendCondition(cond)
[11:01:49.017]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.017]                   {
[11:01:49.017]                     inherits <- base::inherits
[11:01:49.017]                     invokeRestart <- base::invokeRestart
[11:01:49.017]                     is.null <- base::is.null
[11:01:49.017]                     muffled <- FALSE
[11:01:49.017]                     if (inherits(cond, "message")) {
[11:01:49.017]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:49.017]                       if (muffled) 
[11:01:49.017]                         invokeRestart("muffleMessage")
[11:01:49.017]                     }
[11:01:49.017]                     else if (inherits(cond, "warning")) {
[11:01:49.017]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:49.017]                       if (muffled) 
[11:01:49.017]                         invokeRestart("muffleWarning")
[11:01:49.017]                     }
[11:01:49.017]                     else if (inherits(cond, "condition")) {
[11:01:49.017]                       if (!is.null(pattern)) {
[11:01:49.017]                         computeRestarts <- base::computeRestarts
[11:01:49.017]                         grepl <- base::grepl
[11:01:49.017]                         restarts <- computeRestarts(cond)
[11:01:49.017]                         for (restart in restarts) {
[11:01:49.017]                           name <- restart$name
[11:01:49.017]                           if (is.null(name)) 
[11:01:49.017]                             next
[11:01:49.017]                           if (!grepl(pattern, name)) 
[11:01:49.017]                             next
[11:01:49.017]                           invokeRestart(restart)
[11:01:49.017]                           muffled <- TRUE
[11:01:49.017]                           break
[11:01:49.017]                         }
[11:01:49.017]                       }
[11:01:49.017]                     }
[11:01:49.017]                     invisible(muffled)
[11:01:49.017]                   }
[11:01:49.017]                   muffleCondition(cond)
[11:01:49.017]                 })
[11:01:49.017]             }))
[11:01:49.017]             future::FutureResult(value = ...future.value$value, 
[11:01:49.017]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:49.017]                   ...future.rng), globalenv = if (FALSE) 
[11:01:49.017]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:49.017]                     ...future.globalenv.names))
[11:01:49.017]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:49.017]         }, condition = base::local({
[11:01:49.017]             c <- base::c
[11:01:49.017]             inherits <- base::inherits
[11:01:49.017]             invokeRestart <- base::invokeRestart
[11:01:49.017]             length <- base::length
[11:01:49.017]             list <- base::list
[11:01:49.017]             seq.int <- base::seq.int
[11:01:49.017]             signalCondition <- base::signalCondition
[11:01:49.017]             sys.calls <- base::sys.calls
[11:01:49.017]             `[[` <- base::`[[`
[11:01:49.017]             `+` <- base::`+`
[11:01:49.017]             `<<-` <- base::`<<-`
[11:01:49.017]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:49.017]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:49.017]                   3L)]
[11:01:49.017]             }
[11:01:49.017]             function(cond) {
[11:01:49.017]                 is_error <- inherits(cond, "error")
[11:01:49.017]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:49.017]                   NULL)
[11:01:49.017]                 if (is_error) {
[11:01:49.017]                   sessionInformation <- function() {
[11:01:49.017]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:49.017]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:49.017]                       search = base::search(), system = base::Sys.info())
[11:01:49.017]                   }
[11:01:49.017]                   ...future.conditions[[length(...future.conditions) + 
[11:01:49.017]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:49.017]                     cond$call), session = sessionInformation(), 
[11:01:49.017]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:49.017]                   signalCondition(cond)
[11:01:49.017]                 }
[11:01:49.017]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:49.017]                 "immediateCondition"))) {
[11:01:49.017]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:49.017]                   ...future.conditions[[length(...future.conditions) + 
[11:01:49.017]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:49.017]                   if (TRUE && !signal) {
[11:01:49.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.017]                     {
[11:01:49.017]                       inherits <- base::inherits
[11:01:49.017]                       invokeRestart <- base::invokeRestart
[11:01:49.017]                       is.null <- base::is.null
[11:01:49.017]                       muffled <- FALSE
[11:01:49.017]                       if (inherits(cond, "message")) {
[11:01:49.017]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:49.017]                         if (muffled) 
[11:01:49.017]                           invokeRestart("muffleMessage")
[11:01:49.017]                       }
[11:01:49.017]                       else if (inherits(cond, "warning")) {
[11:01:49.017]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:49.017]                         if (muffled) 
[11:01:49.017]                           invokeRestart("muffleWarning")
[11:01:49.017]                       }
[11:01:49.017]                       else if (inherits(cond, "condition")) {
[11:01:49.017]                         if (!is.null(pattern)) {
[11:01:49.017]                           computeRestarts <- base::computeRestarts
[11:01:49.017]                           grepl <- base::grepl
[11:01:49.017]                           restarts <- computeRestarts(cond)
[11:01:49.017]                           for (restart in restarts) {
[11:01:49.017]                             name <- restart$name
[11:01:49.017]                             if (is.null(name)) 
[11:01:49.017]                               next
[11:01:49.017]                             if (!grepl(pattern, name)) 
[11:01:49.017]                               next
[11:01:49.017]                             invokeRestart(restart)
[11:01:49.017]                             muffled <- TRUE
[11:01:49.017]                             break
[11:01:49.017]                           }
[11:01:49.017]                         }
[11:01:49.017]                       }
[11:01:49.017]                       invisible(muffled)
[11:01:49.017]                     }
[11:01:49.017]                     muffleCondition(cond, pattern = "^muffle")
[11:01:49.017]                   }
[11:01:49.017]                 }
[11:01:49.017]                 else {
[11:01:49.017]                   if (TRUE) {
[11:01:49.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.017]                     {
[11:01:49.017]                       inherits <- base::inherits
[11:01:49.017]                       invokeRestart <- base::invokeRestart
[11:01:49.017]                       is.null <- base::is.null
[11:01:49.017]                       muffled <- FALSE
[11:01:49.017]                       if (inherits(cond, "message")) {
[11:01:49.017]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:49.017]                         if (muffled) 
[11:01:49.017]                           invokeRestart("muffleMessage")
[11:01:49.017]                       }
[11:01:49.017]                       else if (inherits(cond, "warning")) {
[11:01:49.017]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:49.017]                         if (muffled) 
[11:01:49.017]                           invokeRestart("muffleWarning")
[11:01:49.017]                       }
[11:01:49.017]                       else if (inherits(cond, "condition")) {
[11:01:49.017]                         if (!is.null(pattern)) {
[11:01:49.017]                           computeRestarts <- base::computeRestarts
[11:01:49.017]                           grepl <- base::grepl
[11:01:49.017]                           restarts <- computeRestarts(cond)
[11:01:49.017]                           for (restart in restarts) {
[11:01:49.017]                             name <- restart$name
[11:01:49.017]                             if (is.null(name)) 
[11:01:49.017]                               next
[11:01:49.017]                             if (!grepl(pattern, name)) 
[11:01:49.017]                               next
[11:01:49.017]                             invokeRestart(restart)
[11:01:49.017]                             muffled <- TRUE
[11:01:49.017]                             break
[11:01:49.017]                           }
[11:01:49.017]                         }
[11:01:49.017]                       }
[11:01:49.017]                       invisible(muffled)
[11:01:49.017]                     }
[11:01:49.017]                     muffleCondition(cond, pattern = "^muffle")
[11:01:49.017]                   }
[11:01:49.017]                 }
[11:01:49.017]             }
[11:01:49.017]         }))
[11:01:49.017]     }, error = function(ex) {
[11:01:49.017]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:49.017]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:49.017]                 ...future.rng), started = ...future.startTime, 
[11:01:49.017]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:49.017]             version = "1.8"), class = "FutureResult")
[11:01:49.017]     }, finally = {
[11:01:49.017]         if (!identical(...future.workdir, getwd())) 
[11:01:49.017]             setwd(...future.workdir)
[11:01:49.017]         {
[11:01:49.017]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:49.017]                 ...future.oldOptions$nwarnings <- NULL
[11:01:49.017]             }
[11:01:49.017]             base::options(...future.oldOptions)
[11:01:49.017]             if (.Platform$OS.type == "windows") {
[11:01:49.017]                 old_names <- names(...future.oldEnvVars)
[11:01:49.017]                 envs <- base::Sys.getenv()
[11:01:49.017]                 names <- names(envs)
[11:01:49.017]                 common <- intersect(names, old_names)
[11:01:49.017]                 added <- setdiff(names, old_names)
[11:01:49.017]                 removed <- setdiff(old_names, names)
[11:01:49.017]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:49.017]                   envs[common]]
[11:01:49.017]                 NAMES <- toupper(changed)
[11:01:49.017]                 args <- list()
[11:01:49.017]                 for (kk in seq_along(NAMES)) {
[11:01:49.017]                   name <- changed[[kk]]
[11:01:49.017]                   NAME <- NAMES[[kk]]
[11:01:49.017]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.017]                     next
[11:01:49.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:49.017]                 }
[11:01:49.017]                 NAMES <- toupper(added)
[11:01:49.017]                 for (kk in seq_along(NAMES)) {
[11:01:49.017]                   name <- added[[kk]]
[11:01:49.017]                   NAME <- NAMES[[kk]]
[11:01:49.017]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.017]                     next
[11:01:49.017]                   args[[name]] <- ""
[11:01:49.017]                 }
[11:01:49.017]                 NAMES <- toupper(removed)
[11:01:49.017]                 for (kk in seq_along(NAMES)) {
[11:01:49.017]                   name <- removed[[kk]]
[11:01:49.017]                   NAME <- NAMES[[kk]]
[11:01:49.017]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.017]                     next
[11:01:49.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:49.017]                 }
[11:01:49.017]                 if (length(args) > 0) 
[11:01:49.017]                   base::do.call(base::Sys.setenv, args = args)
[11:01:49.017]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:49.017]             }
[11:01:49.017]             else {
[11:01:49.017]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:49.017]             }
[11:01:49.017]             {
[11:01:49.017]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:49.017]                   0L) {
[11:01:49.017]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:49.017]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:49.017]                   base::options(opts)
[11:01:49.017]                 }
[11:01:49.017]                 {
[11:01:49.017]                   {
[11:01:49.017]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:49.017]                     NULL
[11:01:49.017]                   }
[11:01:49.017]                   options(future.plan = NULL)
[11:01:49.017]                   if (is.na(NA_character_)) 
[11:01:49.017]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:49.017]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:49.017]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:49.017]                     .init = FALSE)
[11:01:49.017]                 }
[11:01:49.017]             }
[11:01:49.017]         }
[11:01:49.017]     })
[11:01:49.017]     if (TRUE) {
[11:01:49.017]         base::sink(type = "output", split = FALSE)
[11:01:49.017]         if (TRUE) {
[11:01:49.017]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:49.017]         }
[11:01:49.017]         else {
[11:01:49.017]             ...future.result["stdout"] <- base::list(NULL)
[11:01:49.017]         }
[11:01:49.017]         base::close(...future.stdout)
[11:01:49.017]         ...future.stdout <- NULL
[11:01:49.017]     }
[11:01:49.017]     ...future.result$conditions <- ...future.conditions
[11:01:49.017]     ...future.result$finished <- base::Sys.time()
[11:01:49.017]     ...future.result
[11:01:49.017] }
[11:01:49.020] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:49.020] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:49.020] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:49.021] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:49.021] MultisessionFuture started
[11:01:49.021] - Launch lazy future ... done
[11:01:49.021] run() for ‘MultisessionFuture’ ... done
[11:01:49.021] result() for ClusterFuture ...
[11:01:49.021] receiveMessageFromWorker() for ClusterFuture ...
[11:01:49.022] - Validating connection of MultisessionFuture
[11:01:49.063] - received message: FutureResult
[11:01:49.063] - Received FutureResult
[11:01:49.063] - Erased future from FutureRegistry
[11:01:49.063] result() for ClusterFuture ...
[11:01:49.064] - result already collected: FutureResult
[11:01:49.064] result() for ClusterFuture ... done
[11:01:49.064] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:49.064] result() for ClusterFuture ... done
[11:01:49.064] result() for ClusterFuture ...
[11:01:49.064] - result already collected: FutureResult
[11:01:49.064] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:49.064] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:49.065] Searching for globals...
[11:01:49.066] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:49.067] Searching for globals ... DONE
[11:01:49.067] Resolving globals: TRUE
[11:01:49.067] Resolving any globals that are futures ...
[11:01:49.067] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:49.071] Resolving any globals that are futures ... DONE
[11:01:49.071] Resolving futures part of globals (recursively) ...
[11:01:49.072] resolve() on list ...
[11:01:49.072]  recursive: 99
[11:01:49.072]  length: 1
[11:01:49.072]  elements: ‘x’
[11:01:49.072]  length: 0 (resolved future 1)
[11:01:49.072] resolve() on list ... DONE
[11:01:49.072] - globals: [1] ‘x’
[11:01:49.072] Resolving futures part of globals (recursively) ... DONE
[11:01:49.072] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:49.073] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:49.073] - globals: [1] ‘x’
[11:01:49.073] 
[11:01:49.073] getGlobalsAndPackages() ... DONE
[11:01:49.073] run() for ‘Future’ ...
[11:01:49.073] - state: ‘created’
[11:01:49.073] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:49.087] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:49.087] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:49.088]   - Field: ‘node’
[11:01:49.088]   - Field: ‘label’
[11:01:49.088]   - Field: ‘local’
[11:01:49.088]   - Field: ‘owner’
[11:01:49.088]   - Field: ‘envir’
[11:01:49.088]   - Field: ‘workers’
[11:01:49.088]   - Field: ‘packages’
[11:01:49.088]   - Field: ‘gc’
[11:01:49.088]   - Field: ‘conditions’
[11:01:49.088]   - Field: ‘persistent’
[11:01:49.088]   - Field: ‘expr’
[11:01:49.089]   - Field: ‘uuid’
[11:01:49.089]   - Field: ‘seed’
[11:01:49.089]   - Field: ‘version’
[11:01:49.089]   - Field: ‘result’
[11:01:49.089]   - Field: ‘asynchronous’
[11:01:49.089]   - Field: ‘calls’
[11:01:49.089]   - Field: ‘globals’
[11:01:49.089]   - Field: ‘stdout’
[11:01:49.089]   - Field: ‘earlySignal’
[11:01:49.089]   - Field: ‘lazy’
[11:01:49.089]   - Field: ‘state’
[11:01:49.089] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:49.090] - Launch lazy future ...
[11:01:49.090] Packages needed by the future expression (n = 0): <none>
[11:01:49.090] Packages needed by future strategies (n = 0): <none>
[11:01:49.090] {
[11:01:49.090]     {
[11:01:49.090]         {
[11:01:49.090]             ...future.startTime <- base::Sys.time()
[11:01:49.090]             {
[11:01:49.090]                 {
[11:01:49.090]                   {
[11:01:49.090]                     {
[11:01:49.090]                       base::local({
[11:01:49.090]                         has_future <- base::requireNamespace("future", 
[11:01:49.090]                           quietly = TRUE)
[11:01:49.090]                         if (has_future) {
[11:01:49.090]                           ns <- base::getNamespace("future")
[11:01:49.090]                           version <- ns[[".package"]][["version"]]
[11:01:49.090]                           if (is.null(version)) 
[11:01:49.090]                             version <- utils::packageVersion("future")
[11:01:49.090]                         }
[11:01:49.090]                         else {
[11:01:49.090]                           version <- NULL
[11:01:49.090]                         }
[11:01:49.090]                         if (!has_future || version < "1.8.0") {
[11:01:49.090]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:49.090]                             "", base::R.version$version.string), 
[11:01:49.090]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:49.090]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:49.090]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:49.090]                               "release", "version")], collapse = " "), 
[11:01:49.090]                             hostname = base::Sys.info()[["nodename"]])
[11:01:49.090]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:49.090]                             info)
[11:01:49.090]                           info <- base::paste(info, collapse = "; ")
[11:01:49.090]                           if (!has_future) {
[11:01:49.090]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:49.090]                               info)
[11:01:49.090]                           }
[11:01:49.090]                           else {
[11:01:49.090]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:49.090]                               info, version)
[11:01:49.090]                           }
[11:01:49.090]                           base::stop(msg)
[11:01:49.090]                         }
[11:01:49.090]                       })
[11:01:49.090]                     }
[11:01:49.090]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:49.090]                     base::options(mc.cores = 1L)
[11:01:49.090]                   }
[11:01:49.090]                   ...future.strategy.old <- future::plan("list")
[11:01:49.090]                   options(future.plan = NULL)
[11:01:49.090]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:49.090]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:49.090]                 }
[11:01:49.090]                 ...future.workdir <- getwd()
[11:01:49.090]             }
[11:01:49.090]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:49.090]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:49.090]         }
[11:01:49.090]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:49.090]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:49.090]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:49.090]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:49.090]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:49.090]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:49.090]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:49.090]             base::names(...future.oldOptions))
[11:01:49.090]     }
[11:01:49.090]     if (FALSE) {
[11:01:49.090]     }
[11:01:49.090]     else {
[11:01:49.090]         if (TRUE) {
[11:01:49.090]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:49.090]                 open = "w")
[11:01:49.090]         }
[11:01:49.090]         else {
[11:01:49.090]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:49.090]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:49.090]         }
[11:01:49.090]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:49.090]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:49.090]             base::sink(type = "output", split = FALSE)
[11:01:49.090]             base::close(...future.stdout)
[11:01:49.090]         }, add = TRUE)
[11:01:49.090]     }
[11:01:49.090]     ...future.frame <- base::sys.nframe()
[11:01:49.090]     ...future.conditions <- base::list()
[11:01:49.090]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:49.090]     if (FALSE) {
[11:01:49.090]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:49.090]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:49.090]     }
[11:01:49.090]     ...future.result <- base::tryCatch({
[11:01:49.090]         base::withCallingHandlers({
[11:01:49.090]             ...future.value <- base::withVisible(base::local({
[11:01:49.090]                 ...future.makeSendCondition <- base::local({
[11:01:49.090]                   sendCondition <- NULL
[11:01:49.090]                   function(frame = 1L) {
[11:01:49.090]                     if (is.function(sendCondition)) 
[11:01:49.090]                       return(sendCondition)
[11:01:49.090]                     ns <- getNamespace("parallel")
[11:01:49.090]                     if (exists("sendData", mode = "function", 
[11:01:49.090]                       envir = ns)) {
[11:01:49.090]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:49.090]                         envir = ns)
[11:01:49.090]                       envir <- sys.frame(frame)
[11:01:49.090]                       master <- NULL
[11:01:49.090]                       while (!identical(envir, .GlobalEnv) && 
[11:01:49.090]                         !identical(envir, emptyenv())) {
[11:01:49.090]                         if (exists("master", mode = "list", envir = envir, 
[11:01:49.090]                           inherits = FALSE)) {
[11:01:49.090]                           master <- get("master", mode = "list", 
[11:01:49.090]                             envir = envir, inherits = FALSE)
[11:01:49.090]                           if (inherits(master, c("SOCKnode", 
[11:01:49.090]                             "SOCK0node"))) {
[11:01:49.090]                             sendCondition <<- function(cond) {
[11:01:49.090]                               data <- list(type = "VALUE", value = cond, 
[11:01:49.090]                                 success = TRUE)
[11:01:49.090]                               parallel_sendData(master, data)
[11:01:49.090]                             }
[11:01:49.090]                             return(sendCondition)
[11:01:49.090]                           }
[11:01:49.090]                         }
[11:01:49.090]                         frame <- frame + 1L
[11:01:49.090]                         envir <- sys.frame(frame)
[11:01:49.090]                       }
[11:01:49.090]                     }
[11:01:49.090]                     sendCondition <<- function(cond) NULL
[11:01:49.090]                   }
[11:01:49.090]                 })
[11:01:49.090]                 withCallingHandlers({
[11:01:49.090]                   {
[11:01:49.090]                     x["a"] <- list(1)
[11:01:49.090]                     x
[11:01:49.090]                   }
[11:01:49.090]                 }, immediateCondition = function(cond) {
[11:01:49.090]                   sendCondition <- ...future.makeSendCondition()
[11:01:49.090]                   sendCondition(cond)
[11:01:49.090]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.090]                   {
[11:01:49.090]                     inherits <- base::inherits
[11:01:49.090]                     invokeRestart <- base::invokeRestart
[11:01:49.090]                     is.null <- base::is.null
[11:01:49.090]                     muffled <- FALSE
[11:01:49.090]                     if (inherits(cond, "message")) {
[11:01:49.090]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:49.090]                       if (muffled) 
[11:01:49.090]                         invokeRestart("muffleMessage")
[11:01:49.090]                     }
[11:01:49.090]                     else if (inherits(cond, "warning")) {
[11:01:49.090]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:49.090]                       if (muffled) 
[11:01:49.090]                         invokeRestart("muffleWarning")
[11:01:49.090]                     }
[11:01:49.090]                     else if (inherits(cond, "condition")) {
[11:01:49.090]                       if (!is.null(pattern)) {
[11:01:49.090]                         computeRestarts <- base::computeRestarts
[11:01:49.090]                         grepl <- base::grepl
[11:01:49.090]                         restarts <- computeRestarts(cond)
[11:01:49.090]                         for (restart in restarts) {
[11:01:49.090]                           name <- restart$name
[11:01:49.090]                           if (is.null(name)) 
[11:01:49.090]                             next
[11:01:49.090]                           if (!grepl(pattern, name)) 
[11:01:49.090]                             next
[11:01:49.090]                           invokeRestart(restart)
[11:01:49.090]                           muffled <- TRUE
[11:01:49.090]                           break
[11:01:49.090]                         }
[11:01:49.090]                       }
[11:01:49.090]                     }
[11:01:49.090]                     invisible(muffled)
[11:01:49.090]                   }
[11:01:49.090]                   muffleCondition(cond)
[11:01:49.090]                 })
[11:01:49.090]             }))
[11:01:49.090]             future::FutureResult(value = ...future.value$value, 
[11:01:49.090]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:49.090]                   ...future.rng), globalenv = if (FALSE) 
[11:01:49.090]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:49.090]                     ...future.globalenv.names))
[11:01:49.090]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:49.090]         }, condition = base::local({
[11:01:49.090]             c <- base::c
[11:01:49.090]             inherits <- base::inherits
[11:01:49.090]             invokeRestart <- base::invokeRestart
[11:01:49.090]             length <- base::length
[11:01:49.090]             list <- base::list
[11:01:49.090]             seq.int <- base::seq.int
[11:01:49.090]             signalCondition <- base::signalCondition
[11:01:49.090]             sys.calls <- base::sys.calls
[11:01:49.090]             `[[` <- base::`[[`
[11:01:49.090]             `+` <- base::`+`
[11:01:49.090]             `<<-` <- base::`<<-`
[11:01:49.090]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:49.090]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:49.090]                   3L)]
[11:01:49.090]             }
[11:01:49.090]             function(cond) {
[11:01:49.090]                 is_error <- inherits(cond, "error")
[11:01:49.090]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:49.090]                   NULL)
[11:01:49.090]                 if (is_error) {
[11:01:49.090]                   sessionInformation <- function() {
[11:01:49.090]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:49.090]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:49.090]                       search = base::search(), system = base::Sys.info())
[11:01:49.090]                   }
[11:01:49.090]                   ...future.conditions[[length(...future.conditions) + 
[11:01:49.090]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:49.090]                     cond$call), session = sessionInformation(), 
[11:01:49.090]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:49.090]                   signalCondition(cond)
[11:01:49.090]                 }
[11:01:49.090]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:49.090]                 "immediateCondition"))) {
[11:01:49.090]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:49.090]                   ...future.conditions[[length(...future.conditions) + 
[11:01:49.090]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:49.090]                   if (TRUE && !signal) {
[11:01:49.090]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.090]                     {
[11:01:49.090]                       inherits <- base::inherits
[11:01:49.090]                       invokeRestart <- base::invokeRestart
[11:01:49.090]                       is.null <- base::is.null
[11:01:49.090]                       muffled <- FALSE
[11:01:49.090]                       if (inherits(cond, "message")) {
[11:01:49.090]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:49.090]                         if (muffled) 
[11:01:49.090]                           invokeRestart("muffleMessage")
[11:01:49.090]                       }
[11:01:49.090]                       else if (inherits(cond, "warning")) {
[11:01:49.090]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:49.090]                         if (muffled) 
[11:01:49.090]                           invokeRestart("muffleWarning")
[11:01:49.090]                       }
[11:01:49.090]                       else if (inherits(cond, "condition")) {
[11:01:49.090]                         if (!is.null(pattern)) {
[11:01:49.090]                           computeRestarts <- base::computeRestarts
[11:01:49.090]                           grepl <- base::grepl
[11:01:49.090]                           restarts <- computeRestarts(cond)
[11:01:49.090]                           for (restart in restarts) {
[11:01:49.090]                             name <- restart$name
[11:01:49.090]                             if (is.null(name)) 
[11:01:49.090]                               next
[11:01:49.090]                             if (!grepl(pattern, name)) 
[11:01:49.090]                               next
[11:01:49.090]                             invokeRestart(restart)
[11:01:49.090]                             muffled <- TRUE
[11:01:49.090]                             break
[11:01:49.090]                           }
[11:01:49.090]                         }
[11:01:49.090]                       }
[11:01:49.090]                       invisible(muffled)
[11:01:49.090]                     }
[11:01:49.090]                     muffleCondition(cond, pattern = "^muffle")
[11:01:49.090]                   }
[11:01:49.090]                 }
[11:01:49.090]                 else {
[11:01:49.090]                   if (TRUE) {
[11:01:49.090]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.090]                     {
[11:01:49.090]                       inherits <- base::inherits
[11:01:49.090]                       invokeRestart <- base::invokeRestart
[11:01:49.090]                       is.null <- base::is.null
[11:01:49.090]                       muffled <- FALSE
[11:01:49.090]                       if (inherits(cond, "message")) {
[11:01:49.090]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:49.090]                         if (muffled) 
[11:01:49.090]                           invokeRestart("muffleMessage")
[11:01:49.090]                       }
[11:01:49.090]                       else if (inherits(cond, "warning")) {
[11:01:49.090]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:49.090]                         if (muffled) 
[11:01:49.090]                           invokeRestart("muffleWarning")
[11:01:49.090]                       }
[11:01:49.090]                       else if (inherits(cond, "condition")) {
[11:01:49.090]                         if (!is.null(pattern)) {
[11:01:49.090]                           computeRestarts <- base::computeRestarts
[11:01:49.090]                           grepl <- base::grepl
[11:01:49.090]                           restarts <- computeRestarts(cond)
[11:01:49.090]                           for (restart in restarts) {
[11:01:49.090]                             name <- restart$name
[11:01:49.090]                             if (is.null(name)) 
[11:01:49.090]                               next
[11:01:49.090]                             if (!grepl(pattern, name)) 
[11:01:49.090]                               next
[11:01:49.090]                             invokeRestart(restart)
[11:01:49.090]                             muffled <- TRUE
[11:01:49.090]                             break
[11:01:49.090]                           }
[11:01:49.090]                         }
[11:01:49.090]                       }
[11:01:49.090]                       invisible(muffled)
[11:01:49.090]                     }
[11:01:49.090]                     muffleCondition(cond, pattern = "^muffle")
[11:01:49.090]                   }
[11:01:49.090]                 }
[11:01:49.090]             }
[11:01:49.090]         }))
[11:01:49.090]     }, error = function(ex) {
[11:01:49.090]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:49.090]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:49.090]                 ...future.rng), started = ...future.startTime, 
[11:01:49.090]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:49.090]             version = "1.8"), class = "FutureResult")
[11:01:49.090]     }, finally = {
[11:01:49.090]         if (!identical(...future.workdir, getwd())) 
[11:01:49.090]             setwd(...future.workdir)
[11:01:49.090]         {
[11:01:49.090]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:49.090]                 ...future.oldOptions$nwarnings <- NULL
[11:01:49.090]             }
[11:01:49.090]             base::options(...future.oldOptions)
[11:01:49.090]             if (.Platform$OS.type == "windows") {
[11:01:49.090]                 old_names <- names(...future.oldEnvVars)
[11:01:49.090]                 envs <- base::Sys.getenv()
[11:01:49.090]                 names <- names(envs)
[11:01:49.090]                 common <- intersect(names, old_names)
[11:01:49.090]                 added <- setdiff(names, old_names)
[11:01:49.090]                 removed <- setdiff(old_names, names)
[11:01:49.090]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:49.090]                   envs[common]]
[11:01:49.090]                 NAMES <- toupper(changed)
[11:01:49.090]                 args <- list()
[11:01:49.090]                 for (kk in seq_along(NAMES)) {
[11:01:49.090]                   name <- changed[[kk]]
[11:01:49.090]                   NAME <- NAMES[[kk]]
[11:01:49.090]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.090]                     next
[11:01:49.090]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:49.090]                 }
[11:01:49.090]                 NAMES <- toupper(added)
[11:01:49.090]                 for (kk in seq_along(NAMES)) {
[11:01:49.090]                   name <- added[[kk]]
[11:01:49.090]                   NAME <- NAMES[[kk]]
[11:01:49.090]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.090]                     next
[11:01:49.090]                   args[[name]] <- ""
[11:01:49.090]                 }
[11:01:49.090]                 NAMES <- toupper(removed)
[11:01:49.090]                 for (kk in seq_along(NAMES)) {
[11:01:49.090]                   name <- removed[[kk]]
[11:01:49.090]                   NAME <- NAMES[[kk]]
[11:01:49.090]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.090]                     next
[11:01:49.090]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:49.090]                 }
[11:01:49.090]                 if (length(args) > 0) 
[11:01:49.090]                   base::do.call(base::Sys.setenv, args = args)
[11:01:49.090]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:49.090]             }
[11:01:49.090]             else {
[11:01:49.090]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:49.090]             }
[11:01:49.090]             {
[11:01:49.090]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:49.090]                   0L) {
[11:01:49.090]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:49.090]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:49.090]                   base::options(opts)
[11:01:49.090]                 }
[11:01:49.090]                 {
[11:01:49.090]                   {
[11:01:49.090]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:49.090]                     NULL
[11:01:49.090]                   }
[11:01:49.090]                   options(future.plan = NULL)
[11:01:49.090]                   if (is.na(NA_character_)) 
[11:01:49.090]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:49.090]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:49.090]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:49.090]                     .init = FALSE)
[11:01:49.090]                 }
[11:01:49.090]             }
[11:01:49.090]         }
[11:01:49.090]     })
[11:01:49.090]     if (TRUE) {
[11:01:49.090]         base::sink(type = "output", split = FALSE)
[11:01:49.090]         if (TRUE) {
[11:01:49.090]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:49.090]         }
[11:01:49.090]         else {
[11:01:49.090]             ...future.result["stdout"] <- base::list(NULL)
[11:01:49.090]         }
[11:01:49.090]         base::close(...future.stdout)
[11:01:49.090]         ...future.stdout <- NULL
[11:01:49.090]     }
[11:01:49.090]     ...future.result$conditions <- ...future.conditions
[11:01:49.090]     ...future.result$finished <- base::Sys.time()
[11:01:49.090]     ...future.result
[11:01:49.090] }
[11:01:49.093] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:49.093] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:49.093] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:49.094] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:49.094] MultisessionFuture started
[11:01:49.094] - Launch lazy future ... done
[11:01:49.094] run() for ‘MultisessionFuture’ ... done
[11:01:49.094] result() for ClusterFuture ...
[11:01:49.094] receiveMessageFromWorker() for ClusterFuture ...
[11:01:49.095] - Validating connection of MultisessionFuture
[11:01:49.136] - received message: FutureResult
[11:01:49.136] - Received FutureResult
[11:01:49.136] - Erased future from FutureRegistry
[11:01:49.137] result() for ClusterFuture ...
[11:01:49.137] - result already collected: FutureResult
[11:01:49.137] result() for ClusterFuture ... done
[11:01:49.137] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:49.137] result() for ClusterFuture ... done
[11:01:49.137] result() for ClusterFuture ...
[11:01:49.137] - result already collected: FutureResult
[11:01:49.137] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:49.138] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:49.138] Searching for globals...
[11:01:49.140] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:49.140] Searching for globals ... DONE
[11:01:49.140] Resolving globals: TRUE
[11:01:49.140] Resolving any globals that are futures ...
[11:01:49.140] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[11:01:49.140] Resolving any globals that are futures ... DONE
[11:01:49.140] Resolving futures part of globals (recursively) ...
[11:01:49.141] resolve() on list ...
[11:01:49.141]  recursive: 99
[11:01:49.141]  length: 1
[11:01:49.141]  elements: ‘x’
[11:01:49.141]  length: 0 (resolved future 1)
[11:01:49.141] resolve() on list ... DONE
[11:01:49.141] - globals: [1] ‘x’
[11:01:49.141] Resolving futures part of globals (recursively) ... DONE
[11:01:49.141] The total size of the 1 globals is 31 bytes (31 bytes)
[11:01:49.142] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 31 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (31 bytes of class ‘list’)
[11:01:49.142] - globals: [1] ‘x’
[11:01:49.142] 
[11:01:49.142] getGlobalsAndPackages() ... DONE
[11:01:49.142] run() for ‘Future’ ...
[11:01:49.142] - state: ‘created’
[11:01:49.142] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:49.156] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:49.156] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:49.156]   - Field: ‘node’
[11:01:49.156]   - Field: ‘label’
[11:01:49.156]   - Field: ‘local’
[11:01:49.156]   - Field: ‘owner’
[11:01:49.157]   - Field: ‘envir’
[11:01:49.157]   - Field: ‘workers’
[11:01:49.157]   - Field: ‘packages’
[11:01:49.157]   - Field: ‘gc’
[11:01:49.157]   - Field: ‘conditions’
[11:01:49.157]   - Field: ‘persistent’
[11:01:49.157]   - Field: ‘expr’
[11:01:49.157]   - Field: ‘uuid’
[11:01:49.157]   - Field: ‘seed’
[11:01:49.157]   - Field: ‘version’
[11:01:49.157]   - Field: ‘result’
[11:01:49.157]   - Field: ‘asynchronous’
[11:01:49.158]   - Field: ‘calls’
[11:01:49.158]   - Field: ‘globals’
[11:01:49.158]   - Field: ‘stdout’
[11:01:49.158]   - Field: ‘earlySignal’
[11:01:49.158]   - Field: ‘lazy’
[11:01:49.158]   - Field: ‘state’
[11:01:49.158] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:49.158] - Launch lazy future ...
[11:01:49.158] Packages needed by the future expression (n = 0): <none>
[11:01:49.159] Packages needed by future strategies (n = 0): <none>
[11:01:49.159] {
[11:01:49.159]     {
[11:01:49.159]         {
[11:01:49.159]             ...future.startTime <- base::Sys.time()
[11:01:49.159]             {
[11:01:49.159]                 {
[11:01:49.159]                   {
[11:01:49.159]                     {
[11:01:49.159]                       base::local({
[11:01:49.159]                         has_future <- base::requireNamespace("future", 
[11:01:49.159]                           quietly = TRUE)
[11:01:49.159]                         if (has_future) {
[11:01:49.159]                           ns <- base::getNamespace("future")
[11:01:49.159]                           version <- ns[[".package"]][["version"]]
[11:01:49.159]                           if (is.null(version)) 
[11:01:49.159]                             version <- utils::packageVersion("future")
[11:01:49.159]                         }
[11:01:49.159]                         else {
[11:01:49.159]                           version <- NULL
[11:01:49.159]                         }
[11:01:49.159]                         if (!has_future || version < "1.8.0") {
[11:01:49.159]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:49.159]                             "", base::R.version$version.string), 
[11:01:49.159]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:49.159]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:49.159]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:49.159]                               "release", "version")], collapse = " "), 
[11:01:49.159]                             hostname = base::Sys.info()[["nodename"]])
[11:01:49.159]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:49.159]                             info)
[11:01:49.159]                           info <- base::paste(info, collapse = "; ")
[11:01:49.159]                           if (!has_future) {
[11:01:49.159]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:49.159]                               info)
[11:01:49.159]                           }
[11:01:49.159]                           else {
[11:01:49.159]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:49.159]                               info, version)
[11:01:49.159]                           }
[11:01:49.159]                           base::stop(msg)
[11:01:49.159]                         }
[11:01:49.159]                       })
[11:01:49.159]                     }
[11:01:49.159]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:49.159]                     base::options(mc.cores = 1L)
[11:01:49.159]                   }
[11:01:49.159]                   ...future.strategy.old <- future::plan("list")
[11:01:49.159]                   options(future.plan = NULL)
[11:01:49.159]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:49.159]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:49.159]                 }
[11:01:49.159]                 ...future.workdir <- getwd()
[11:01:49.159]             }
[11:01:49.159]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:49.159]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:49.159]         }
[11:01:49.159]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:49.159]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:49.159]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:49.159]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:49.159]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:49.159]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:49.159]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:49.159]             base::names(...future.oldOptions))
[11:01:49.159]     }
[11:01:49.159]     if (FALSE) {
[11:01:49.159]     }
[11:01:49.159]     else {
[11:01:49.159]         if (TRUE) {
[11:01:49.159]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:49.159]                 open = "w")
[11:01:49.159]         }
[11:01:49.159]         else {
[11:01:49.159]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:49.159]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:49.159]         }
[11:01:49.159]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:49.159]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:49.159]             base::sink(type = "output", split = FALSE)
[11:01:49.159]             base::close(...future.stdout)
[11:01:49.159]         }, add = TRUE)
[11:01:49.159]     }
[11:01:49.159]     ...future.frame <- base::sys.nframe()
[11:01:49.159]     ...future.conditions <- base::list()
[11:01:49.159]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:49.159]     if (FALSE) {
[11:01:49.159]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:49.159]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:49.159]     }
[11:01:49.159]     ...future.result <- base::tryCatch({
[11:01:49.159]         base::withCallingHandlers({
[11:01:49.159]             ...future.value <- base::withVisible(base::local({
[11:01:49.159]                 ...future.makeSendCondition <- base::local({
[11:01:49.159]                   sendCondition <- NULL
[11:01:49.159]                   function(frame = 1L) {
[11:01:49.159]                     if (is.function(sendCondition)) 
[11:01:49.159]                       return(sendCondition)
[11:01:49.159]                     ns <- getNamespace("parallel")
[11:01:49.159]                     if (exists("sendData", mode = "function", 
[11:01:49.159]                       envir = ns)) {
[11:01:49.159]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:49.159]                         envir = ns)
[11:01:49.159]                       envir <- sys.frame(frame)
[11:01:49.159]                       master <- NULL
[11:01:49.159]                       while (!identical(envir, .GlobalEnv) && 
[11:01:49.159]                         !identical(envir, emptyenv())) {
[11:01:49.159]                         if (exists("master", mode = "list", envir = envir, 
[11:01:49.159]                           inherits = FALSE)) {
[11:01:49.159]                           master <- get("master", mode = "list", 
[11:01:49.159]                             envir = envir, inherits = FALSE)
[11:01:49.159]                           if (inherits(master, c("SOCKnode", 
[11:01:49.159]                             "SOCK0node"))) {
[11:01:49.159]                             sendCondition <<- function(cond) {
[11:01:49.159]                               data <- list(type = "VALUE", value = cond, 
[11:01:49.159]                                 success = TRUE)
[11:01:49.159]                               parallel_sendData(master, data)
[11:01:49.159]                             }
[11:01:49.159]                             return(sendCondition)
[11:01:49.159]                           }
[11:01:49.159]                         }
[11:01:49.159]                         frame <- frame + 1L
[11:01:49.159]                         envir <- sys.frame(frame)
[11:01:49.159]                       }
[11:01:49.159]                     }
[11:01:49.159]                     sendCondition <<- function(cond) NULL
[11:01:49.159]                   }
[11:01:49.159]                 })
[11:01:49.159]                 withCallingHandlers({
[11:01:49.159]                   {
[11:01:49.159]                     x["a"] <- list(1)
[11:01:49.159]                     x
[11:01:49.159]                   }
[11:01:49.159]                 }, immediateCondition = function(cond) {
[11:01:49.159]                   sendCondition <- ...future.makeSendCondition()
[11:01:49.159]                   sendCondition(cond)
[11:01:49.159]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.159]                   {
[11:01:49.159]                     inherits <- base::inherits
[11:01:49.159]                     invokeRestart <- base::invokeRestart
[11:01:49.159]                     is.null <- base::is.null
[11:01:49.159]                     muffled <- FALSE
[11:01:49.159]                     if (inherits(cond, "message")) {
[11:01:49.159]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:49.159]                       if (muffled) 
[11:01:49.159]                         invokeRestart("muffleMessage")
[11:01:49.159]                     }
[11:01:49.159]                     else if (inherits(cond, "warning")) {
[11:01:49.159]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:49.159]                       if (muffled) 
[11:01:49.159]                         invokeRestart("muffleWarning")
[11:01:49.159]                     }
[11:01:49.159]                     else if (inherits(cond, "condition")) {
[11:01:49.159]                       if (!is.null(pattern)) {
[11:01:49.159]                         computeRestarts <- base::computeRestarts
[11:01:49.159]                         grepl <- base::grepl
[11:01:49.159]                         restarts <- computeRestarts(cond)
[11:01:49.159]                         for (restart in restarts) {
[11:01:49.159]                           name <- restart$name
[11:01:49.159]                           if (is.null(name)) 
[11:01:49.159]                             next
[11:01:49.159]                           if (!grepl(pattern, name)) 
[11:01:49.159]                             next
[11:01:49.159]                           invokeRestart(restart)
[11:01:49.159]                           muffled <- TRUE
[11:01:49.159]                           break
[11:01:49.159]                         }
[11:01:49.159]                       }
[11:01:49.159]                     }
[11:01:49.159]                     invisible(muffled)
[11:01:49.159]                   }
[11:01:49.159]                   muffleCondition(cond)
[11:01:49.159]                 })
[11:01:49.159]             }))
[11:01:49.159]             future::FutureResult(value = ...future.value$value, 
[11:01:49.159]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:49.159]                   ...future.rng), globalenv = if (FALSE) 
[11:01:49.159]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:49.159]                     ...future.globalenv.names))
[11:01:49.159]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:49.159]         }, condition = base::local({
[11:01:49.159]             c <- base::c
[11:01:49.159]             inherits <- base::inherits
[11:01:49.159]             invokeRestart <- base::invokeRestart
[11:01:49.159]             length <- base::length
[11:01:49.159]             list <- base::list
[11:01:49.159]             seq.int <- base::seq.int
[11:01:49.159]             signalCondition <- base::signalCondition
[11:01:49.159]             sys.calls <- base::sys.calls
[11:01:49.159]             `[[` <- base::`[[`
[11:01:49.159]             `+` <- base::`+`
[11:01:49.159]             `<<-` <- base::`<<-`
[11:01:49.159]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:49.159]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:49.159]                   3L)]
[11:01:49.159]             }
[11:01:49.159]             function(cond) {
[11:01:49.159]                 is_error <- inherits(cond, "error")
[11:01:49.159]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:49.159]                   NULL)
[11:01:49.159]                 if (is_error) {
[11:01:49.159]                   sessionInformation <- function() {
[11:01:49.159]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:49.159]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:49.159]                       search = base::search(), system = base::Sys.info())
[11:01:49.159]                   }
[11:01:49.159]                   ...future.conditions[[length(...future.conditions) + 
[11:01:49.159]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:49.159]                     cond$call), session = sessionInformation(), 
[11:01:49.159]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:49.159]                   signalCondition(cond)
[11:01:49.159]                 }
[11:01:49.159]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:49.159]                 "immediateCondition"))) {
[11:01:49.159]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:49.159]                   ...future.conditions[[length(...future.conditions) + 
[11:01:49.159]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:49.159]                   if (TRUE && !signal) {
[11:01:49.159]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.159]                     {
[11:01:49.159]                       inherits <- base::inherits
[11:01:49.159]                       invokeRestart <- base::invokeRestart
[11:01:49.159]                       is.null <- base::is.null
[11:01:49.159]                       muffled <- FALSE
[11:01:49.159]                       if (inherits(cond, "message")) {
[11:01:49.159]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:49.159]                         if (muffled) 
[11:01:49.159]                           invokeRestart("muffleMessage")
[11:01:49.159]                       }
[11:01:49.159]                       else if (inherits(cond, "warning")) {
[11:01:49.159]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:49.159]                         if (muffled) 
[11:01:49.159]                           invokeRestart("muffleWarning")
[11:01:49.159]                       }
[11:01:49.159]                       else if (inherits(cond, "condition")) {
[11:01:49.159]                         if (!is.null(pattern)) {
[11:01:49.159]                           computeRestarts <- base::computeRestarts
[11:01:49.159]                           grepl <- base::grepl
[11:01:49.159]                           restarts <- computeRestarts(cond)
[11:01:49.159]                           for (restart in restarts) {
[11:01:49.159]                             name <- restart$name
[11:01:49.159]                             if (is.null(name)) 
[11:01:49.159]                               next
[11:01:49.159]                             if (!grepl(pattern, name)) 
[11:01:49.159]                               next
[11:01:49.159]                             invokeRestart(restart)
[11:01:49.159]                             muffled <- TRUE
[11:01:49.159]                             break
[11:01:49.159]                           }
[11:01:49.159]                         }
[11:01:49.159]                       }
[11:01:49.159]                       invisible(muffled)
[11:01:49.159]                     }
[11:01:49.159]                     muffleCondition(cond, pattern = "^muffle")
[11:01:49.159]                   }
[11:01:49.159]                 }
[11:01:49.159]                 else {
[11:01:49.159]                   if (TRUE) {
[11:01:49.159]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.159]                     {
[11:01:49.159]                       inherits <- base::inherits
[11:01:49.159]                       invokeRestart <- base::invokeRestart
[11:01:49.159]                       is.null <- base::is.null
[11:01:49.159]                       muffled <- FALSE
[11:01:49.159]                       if (inherits(cond, "message")) {
[11:01:49.159]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:49.159]                         if (muffled) 
[11:01:49.159]                           invokeRestart("muffleMessage")
[11:01:49.159]                       }
[11:01:49.159]                       else if (inherits(cond, "warning")) {
[11:01:49.159]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:49.159]                         if (muffled) 
[11:01:49.159]                           invokeRestart("muffleWarning")
[11:01:49.159]                       }
[11:01:49.159]                       else if (inherits(cond, "condition")) {
[11:01:49.159]                         if (!is.null(pattern)) {
[11:01:49.159]                           computeRestarts <- base::computeRestarts
[11:01:49.159]                           grepl <- base::grepl
[11:01:49.159]                           restarts <- computeRestarts(cond)
[11:01:49.159]                           for (restart in restarts) {
[11:01:49.159]                             name <- restart$name
[11:01:49.159]                             if (is.null(name)) 
[11:01:49.159]                               next
[11:01:49.159]                             if (!grepl(pattern, name)) 
[11:01:49.159]                               next
[11:01:49.159]                             invokeRestart(restart)
[11:01:49.159]                             muffled <- TRUE
[11:01:49.159]                             break
[11:01:49.159]                           }
[11:01:49.159]                         }
[11:01:49.159]                       }
[11:01:49.159]                       invisible(muffled)
[11:01:49.159]                     }
[11:01:49.159]                     muffleCondition(cond, pattern = "^muffle")
[11:01:49.159]                   }
[11:01:49.159]                 }
[11:01:49.159]             }
[11:01:49.159]         }))
[11:01:49.159]     }, error = function(ex) {
[11:01:49.159]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:49.159]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:49.159]                 ...future.rng), started = ...future.startTime, 
[11:01:49.159]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:49.159]             version = "1.8"), class = "FutureResult")
[11:01:49.159]     }, finally = {
[11:01:49.159]         if (!identical(...future.workdir, getwd())) 
[11:01:49.159]             setwd(...future.workdir)
[11:01:49.159]         {
[11:01:49.159]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:49.159]                 ...future.oldOptions$nwarnings <- NULL
[11:01:49.159]             }
[11:01:49.159]             base::options(...future.oldOptions)
[11:01:49.159]             if (.Platform$OS.type == "windows") {
[11:01:49.159]                 old_names <- names(...future.oldEnvVars)
[11:01:49.159]                 envs <- base::Sys.getenv()
[11:01:49.159]                 names <- names(envs)
[11:01:49.159]                 common <- intersect(names, old_names)
[11:01:49.159]                 added <- setdiff(names, old_names)
[11:01:49.159]                 removed <- setdiff(old_names, names)
[11:01:49.159]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:49.159]                   envs[common]]
[11:01:49.159]                 NAMES <- toupper(changed)
[11:01:49.159]                 args <- list()
[11:01:49.159]                 for (kk in seq_along(NAMES)) {
[11:01:49.159]                   name <- changed[[kk]]
[11:01:49.159]                   NAME <- NAMES[[kk]]
[11:01:49.159]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.159]                     next
[11:01:49.159]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:49.159]                 }
[11:01:49.159]                 NAMES <- toupper(added)
[11:01:49.159]                 for (kk in seq_along(NAMES)) {
[11:01:49.159]                   name <- added[[kk]]
[11:01:49.159]                   NAME <- NAMES[[kk]]
[11:01:49.159]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.159]                     next
[11:01:49.159]                   args[[name]] <- ""
[11:01:49.159]                 }
[11:01:49.159]                 NAMES <- toupper(removed)
[11:01:49.159]                 for (kk in seq_along(NAMES)) {
[11:01:49.159]                   name <- removed[[kk]]
[11:01:49.159]                   NAME <- NAMES[[kk]]
[11:01:49.159]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.159]                     next
[11:01:49.159]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:49.159]                 }
[11:01:49.159]                 if (length(args) > 0) 
[11:01:49.159]                   base::do.call(base::Sys.setenv, args = args)
[11:01:49.159]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:49.159]             }
[11:01:49.159]             else {
[11:01:49.159]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:49.159]             }
[11:01:49.159]             {
[11:01:49.159]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:49.159]                   0L) {
[11:01:49.159]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:49.159]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:49.159]                   base::options(opts)
[11:01:49.159]                 }
[11:01:49.159]                 {
[11:01:49.159]                   {
[11:01:49.159]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:49.159]                     NULL
[11:01:49.159]                   }
[11:01:49.159]                   options(future.plan = NULL)
[11:01:49.159]                   if (is.na(NA_character_)) 
[11:01:49.159]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:49.159]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:49.159]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:49.159]                     .init = FALSE)
[11:01:49.159]                 }
[11:01:49.159]             }
[11:01:49.159]         }
[11:01:49.159]     })
[11:01:49.159]     if (TRUE) {
[11:01:49.159]         base::sink(type = "output", split = FALSE)
[11:01:49.159]         if (TRUE) {
[11:01:49.159]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:49.159]         }
[11:01:49.159]         else {
[11:01:49.159]             ...future.result["stdout"] <- base::list(NULL)
[11:01:49.159]         }
[11:01:49.159]         base::close(...future.stdout)
[11:01:49.159]         ...future.stdout <- NULL
[11:01:49.159]     }
[11:01:49.159]     ...future.result$conditions <- ...future.conditions
[11:01:49.159]     ...future.result$finished <- base::Sys.time()
[11:01:49.159]     ...future.result
[11:01:49.159] }
[11:01:49.161] Exporting 1 global objects (338 bytes) to cluster node #1 ...
[11:01:49.162] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:49.162] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:49.162] Exporting 1 global objects (338 bytes) to cluster node #1 ... DONE
[11:01:49.163] MultisessionFuture started
[11:01:49.163] - Launch lazy future ... done
[11:01:49.163] run() for ‘MultisessionFuture’ ... done
[11:01:49.163] result() for ClusterFuture ...
[11:01:49.163] receiveMessageFromWorker() for ClusterFuture ...
[11:01:49.163] - Validating connection of MultisessionFuture
[11:01:49.204] - received message: FutureResult
[11:01:49.204] - Received FutureResult
[11:01:49.204] - Erased future from FutureRegistry
[11:01:49.204] result() for ClusterFuture ...
[11:01:49.204] - result already collected: FutureResult
[11:01:49.204] result() for ClusterFuture ... done
[11:01:49.205] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:49.205] result() for ClusterFuture ... done
[11:01:49.205] result() for ClusterFuture ...
[11:01:49.205] - result already collected: FutureResult
[11:01:49.205] result() for ClusterFuture ... done
$a
[1] 1

Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:49.205] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[11:01:49.205] Searching for globals...
[11:01:49.207] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[11:01:49.208] Searching for globals ... DONE
[11:01:49.208] Resolving globals: TRUE
[11:01:49.208] Resolving any globals that are futures ...
[11:01:49.208] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[11:01:49.208] Resolving any globals that are futures ... DONE
[11:01:49.208] Resolving futures part of globals (recursively) ...
[11:01:49.209] resolve() on list ...
[11:01:49.209]  recursive: 99
[11:01:49.209]  length: 2
[11:01:49.209]  elements: ‘x’, ‘name’
[11:01:49.209]  length: 1 (resolved future 1)
[11:01:49.209]  length: 0 (resolved future 2)
[11:01:49.209] resolve() on list ... DONE
[11:01:49.209] - globals: [2] ‘x’, ‘name’
[11:01:49.209] Resolving futures part of globals (recursively) ... DONE
[11:01:49.209] The total size of the 2 globals is 71 bytes (71 bytes)
[11:01:49.210] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 71 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (40 bytes of class ‘character’) and ‘x’ (31 bytes of class ‘list’)
[11:01:49.210] - globals: [2] ‘x’, ‘name’
[11:01:49.210] 
[11:01:49.210] getGlobalsAndPackages() ... DONE
[11:01:49.210] run() for ‘Future’ ...
[11:01:49.210] - state: ‘created’
[11:01:49.211] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:49.224] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:49.224] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:49.224]   - Field: ‘node’
[11:01:49.224]   - Field: ‘label’
[11:01:49.224]   - Field: ‘local’
[11:01:49.225]   - Field: ‘owner’
[11:01:49.225]   - Field: ‘envir’
[11:01:49.225]   - Field: ‘workers’
[11:01:49.225]   - Field: ‘packages’
[11:01:49.225]   - Field: ‘gc’
[11:01:49.225]   - Field: ‘conditions’
[11:01:49.225]   - Field: ‘persistent’
[11:01:49.225]   - Field: ‘expr’
[11:01:49.225]   - Field: ‘uuid’
[11:01:49.225]   - Field: ‘seed’
[11:01:49.225]   - Field: ‘version’
[11:01:49.225]   - Field: ‘result’
[11:01:49.226]   - Field: ‘asynchronous’
[11:01:49.226]   - Field: ‘calls’
[11:01:49.226]   - Field: ‘globals’
[11:01:49.226]   - Field: ‘stdout’
[11:01:49.226]   - Field: ‘earlySignal’
[11:01:49.226]   - Field: ‘lazy’
[11:01:49.226]   - Field: ‘state’
[11:01:49.226] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:49.226] - Launch lazy future ...
[11:01:49.226] Packages needed by the future expression (n = 0): <none>
[11:01:49.227] Packages needed by future strategies (n = 0): <none>
[11:01:49.227] {
[11:01:49.227]     {
[11:01:49.227]         {
[11:01:49.227]             ...future.startTime <- base::Sys.time()
[11:01:49.227]             {
[11:01:49.227]                 {
[11:01:49.227]                   {
[11:01:49.227]                     {
[11:01:49.227]                       base::local({
[11:01:49.227]                         has_future <- base::requireNamespace("future", 
[11:01:49.227]                           quietly = TRUE)
[11:01:49.227]                         if (has_future) {
[11:01:49.227]                           ns <- base::getNamespace("future")
[11:01:49.227]                           version <- ns[[".package"]][["version"]]
[11:01:49.227]                           if (is.null(version)) 
[11:01:49.227]                             version <- utils::packageVersion("future")
[11:01:49.227]                         }
[11:01:49.227]                         else {
[11:01:49.227]                           version <- NULL
[11:01:49.227]                         }
[11:01:49.227]                         if (!has_future || version < "1.8.0") {
[11:01:49.227]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:49.227]                             "", base::R.version$version.string), 
[11:01:49.227]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:49.227]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:49.227]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:49.227]                               "release", "version")], collapse = " "), 
[11:01:49.227]                             hostname = base::Sys.info()[["nodename"]])
[11:01:49.227]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:49.227]                             info)
[11:01:49.227]                           info <- base::paste(info, collapse = "; ")
[11:01:49.227]                           if (!has_future) {
[11:01:49.227]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:49.227]                               info)
[11:01:49.227]                           }
[11:01:49.227]                           else {
[11:01:49.227]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:49.227]                               info, version)
[11:01:49.227]                           }
[11:01:49.227]                           base::stop(msg)
[11:01:49.227]                         }
[11:01:49.227]                       })
[11:01:49.227]                     }
[11:01:49.227]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:49.227]                     base::options(mc.cores = 1L)
[11:01:49.227]                   }
[11:01:49.227]                   ...future.strategy.old <- future::plan("list")
[11:01:49.227]                   options(future.plan = NULL)
[11:01:49.227]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:49.227]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:49.227]                 }
[11:01:49.227]                 ...future.workdir <- getwd()
[11:01:49.227]             }
[11:01:49.227]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:49.227]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:49.227]         }
[11:01:49.227]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[11:01:49.227]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:49.227]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[11:01:49.227]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:49.227]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:49.227]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:49.227]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:49.227]             base::names(...future.oldOptions))
[11:01:49.227]     }
[11:01:49.227]     if (FALSE) {
[11:01:49.227]     }
[11:01:49.227]     else {
[11:01:49.227]         if (TRUE) {
[11:01:49.227]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:49.227]                 open = "w")
[11:01:49.227]         }
[11:01:49.227]         else {
[11:01:49.227]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:49.227]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:49.227]         }
[11:01:49.227]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:49.227]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:49.227]             base::sink(type = "output", split = FALSE)
[11:01:49.227]             base::close(...future.stdout)
[11:01:49.227]         }, add = TRUE)
[11:01:49.227]     }
[11:01:49.227]     ...future.frame <- base::sys.nframe()
[11:01:49.227]     ...future.conditions <- base::list()
[11:01:49.227]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:49.227]     if (FALSE) {
[11:01:49.227]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:49.227]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:49.227]     }
[11:01:49.227]     ...future.result <- base::tryCatch({
[11:01:49.227]         base::withCallingHandlers({
[11:01:49.227]             ...future.value <- base::withVisible(base::local({
[11:01:49.227]                 ...future.makeSendCondition <- base::local({
[11:01:49.227]                   sendCondition <- NULL
[11:01:49.227]                   function(frame = 1L) {
[11:01:49.227]                     if (is.function(sendCondition)) 
[11:01:49.227]                       return(sendCondition)
[11:01:49.227]                     ns <- getNamespace("parallel")
[11:01:49.227]                     if (exists("sendData", mode = "function", 
[11:01:49.227]                       envir = ns)) {
[11:01:49.227]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:49.227]                         envir = ns)
[11:01:49.227]                       envir <- sys.frame(frame)
[11:01:49.227]                       master <- NULL
[11:01:49.227]                       while (!identical(envir, .GlobalEnv) && 
[11:01:49.227]                         !identical(envir, emptyenv())) {
[11:01:49.227]                         if (exists("master", mode = "list", envir = envir, 
[11:01:49.227]                           inherits = FALSE)) {
[11:01:49.227]                           master <- get("master", mode = "list", 
[11:01:49.227]                             envir = envir, inherits = FALSE)
[11:01:49.227]                           if (inherits(master, c("SOCKnode", 
[11:01:49.227]                             "SOCK0node"))) {
[11:01:49.227]                             sendCondition <<- function(cond) {
[11:01:49.227]                               data <- list(type = "VALUE", value = cond, 
[11:01:49.227]                                 success = TRUE)
[11:01:49.227]                               parallel_sendData(master, data)
[11:01:49.227]                             }
[11:01:49.227]                             return(sendCondition)
[11:01:49.227]                           }
[11:01:49.227]                         }
[11:01:49.227]                         frame <- frame + 1L
[11:01:49.227]                         envir <- sys.frame(frame)
[11:01:49.227]                       }
[11:01:49.227]                     }
[11:01:49.227]                     sendCondition <<- function(cond) NULL
[11:01:49.227]                   }
[11:01:49.227]                 })
[11:01:49.227]                 withCallingHandlers({
[11:01:49.227]                   {
[11:01:49.227]                     x[name] <- list(1)
[11:01:49.227]                     x
[11:01:49.227]                   }
[11:01:49.227]                 }, immediateCondition = function(cond) {
[11:01:49.227]                   sendCondition <- ...future.makeSendCondition()
[11:01:49.227]                   sendCondition(cond)
[11:01:49.227]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.227]                   {
[11:01:49.227]                     inherits <- base::inherits
[11:01:49.227]                     invokeRestart <- base::invokeRestart
[11:01:49.227]                     is.null <- base::is.null
[11:01:49.227]                     muffled <- FALSE
[11:01:49.227]                     if (inherits(cond, "message")) {
[11:01:49.227]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:49.227]                       if (muffled) 
[11:01:49.227]                         invokeRestart("muffleMessage")
[11:01:49.227]                     }
[11:01:49.227]                     else if (inherits(cond, "warning")) {
[11:01:49.227]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:49.227]                       if (muffled) 
[11:01:49.227]                         invokeRestart("muffleWarning")
[11:01:49.227]                     }
[11:01:49.227]                     else if (inherits(cond, "condition")) {
[11:01:49.227]                       if (!is.null(pattern)) {
[11:01:49.227]                         computeRestarts <- base::computeRestarts
[11:01:49.227]                         grepl <- base::grepl
[11:01:49.227]                         restarts <- computeRestarts(cond)
[11:01:49.227]                         for (restart in restarts) {
[11:01:49.227]                           name <- restart$name
[11:01:49.227]                           if (is.null(name)) 
[11:01:49.227]                             next
[11:01:49.227]                           if (!grepl(pattern, name)) 
[11:01:49.227]                             next
[11:01:49.227]                           invokeRestart(restart)
[11:01:49.227]                           muffled <- TRUE
[11:01:49.227]                           break
[11:01:49.227]                         }
[11:01:49.227]                       }
[11:01:49.227]                     }
[11:01:49.227]                     invisible(muffled)
[11:01:49.227]                   }
[11:01:49.227]                   muffleCondition(cond)
[11:01:49.227]                 })
[11:01:49.227]             }))
[11:01:49.227]             future::FutureResult(value = ...future.value$value, 
[11:01:49.227]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:49.227]                   ...future.rng), globalenv = if (FALSE) 
[11:01:49.227]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:49.227]                     ...future.globalenv.names))
[11:01:49.227]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:49.227]         }, condition = base::local({
[11:01:49.227]             c <- base::c
[11:01:49.227]             inherits <- base::inherits
[11:01:49.227]             invokeRestart <- base::invokeRestart
[11:01:49.227]             length <- base::length
[11:01:49.227]             list <- base::list
[11:01:49.227]             seq.int <- base::seq.int
[11:01:49.227]             signalCondition <- base::signalCondition
[11:01:49.227]             sys.calls <- base::sys.calls
[11:01:49.227]             `[[` <- base::`[[`
[11:01:49.227]             `+` <- base::`+`
[11:01:49.227]             `<<-` <- base::`<<-`
[11:01:49.227]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:49.227]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:49.227]                   3L)]
[11:01:49.227]             }
[11:01:49.227]             function(cond) {
[11:01:49.227]                 is_error <- inherits(cond, "error")
[11:01:49.227]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:49.227]                   NULL)
[11:01:49.227]                 if (is_error) {
[11:01:49.227]                   sessionInformation <- function() {
[11:01:49.227]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:49.227]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:49.227]                       search = base::search(), system = base::Sys.info())
[11:01:49.227]                   }
[11:01:49.227]                   ...future.conditions[[length(...future.conditions) + 
[11:01:49.227]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:49.227]                     cond$call), session = sessionInformation(), 
[11:01:49.227]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:49.227]                   signalCondition(cond)
[11:01:49.227]                 }
[11:01:49.227]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:49.227]                 "immediateCondition"))) {
[11:01:49.227]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:49.227]                   ...future.conditions[[length(...future.conditions) + 
[11:01:49.227]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:49.227]                   if (TRUE && !signal) {
[11:01:49.227]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.227]                     {
[11:01:49.227]                       inherits <- base::inherits
[11:01:49.227]                       invokeRestart <- base::invokeRestart
[11:01:49.227]                       is.null <- base::is.null
[11:01:49.227]                       muffled <- FALSE
[11:01:49.227]                       if (inherits(cond, "message")) {
[11:01:49.227]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:49.227]                         if (muffled) 
[11:01:49.227]                           invokeRestart("muffleMessage")
[11:01:49.227]                       }
[11:01:49.227]                       else if (inherits(cond, "warning")) {
[11:01:49.227]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:49.227]                         if (muffled) 
[11:01:49.227]                           invokeRestart("muffleWarning")
[11:01:49.227]                       }
[11:01:49.227]                       else if (inherits(cond, "condition")) {
[11:01:49.227]                         if (!is.null(pattern)) {
[11:01:49.227]                           computeRestarts <- base::computeRestarts
[11:01:49.227]                           grepl <- base::grepl
[11:01:49.227]                           restarts <- computeRestarts(cond)
[11:01:49.227]                           for (restart in restarts) {
[11:01:49.227]                             name <- restart$name
[11:01:49.227]                             if (is.null(name)) 
[11:01:49.227]                               next
[11:01:49.227]                             if (!grepl(pattern, name)) 
[11:01:49.227]                               next
[11:01:49.227]                             invokeRestart(restart)
[11:01:49.227]                             muffled <- TRUE
[11:01:49.227]                             break
[11:01:49.227]                           }
[11:01:49.227]                         }
[11:01:49.227]                       }
[11:01:49.227]                       invisible(muffled)
[11:01:49.227]                     }
[11:01:49.227]                     muffleCondition(cond, pattern = "^muffle")
[11:01:49.227]                   }
[11:01:49.227]                 }
[11:01:49.227]                 else {
[11:01:49.227]                   if (TRUE) {
[11:01:49.227]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:49.227]                     {
[11:01:49.227]                       inherits <- base::inherits
[11:01:49.227]                       invokeRestart <- base::invokeRestart
[11:01:49.227]                       is.null <- base::is.null
[11:01:49.227]                       muffled <- FALSE
[11:01:49.227]                       if (inherits(cond, "message")) {
[11:01:49.227]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:49.227]                         if (muffled) 
[11:01:49.227]                           invokeRestart("muffleMessage")
[11:01:49.227]                       }
[11:01:49.227]                       else if (inherits(cond, "warning")) {
[11:01:49.227]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:49.227]                         if (muffled) 
[11:01:49.227]                           invokeRestart("muffleWarning")
[11:01:49.227]                       }
[11:01:49.227]                       else if (inherits(cond, "condition")) {
[11:01:49.227]                         if (!is.null(pattern)) {
[11:01:49.227]                           computeRestarts <- base::computeRestarts
[11:01:49.227]                           grepl <- base::grepl
[11:01:49.227]                           restarts <- computeRestarts(cond)
[11:01:49.227]                           for (restart in restarts) {
[11:01:49.227]                             name <- restart$name
[11:01:49.227]                             if (is.null(name)) 
[11:01:49.227]                               next
[11:01:49.227]                             if (!grepl(pattern, name)) 
[11:01:49.227]                               next
[11:01:49.227]                             invokeRestart(restart)
[11:01:49.227]                             muffled <- TRUE
[11:01:49.227]                             break
[11:01:49.227]                           }
[11:01:49.227]                         }
[11:01:49.227]                       }
[11:01:49.227]                       invisible(muffled)
[11:01:49.227]                     }
[11:01:49.227]                     muffleCondition(cond, pattern = "^muffle")
[11:01:49.227]                   }
[11:01:49.227]                 }
[11:01:49.227]             }
[11:01:49.227]         }))
[11:01:49.227]     }, error = function(ex) {
[11:01:49.227]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:49.227]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:49.227]                 ...future.rng), started = ...future.startTime, 
[11:01:49.227]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:49.227]             version = "1.8"), class = "FutureResult")
[11:01:49.227]     }, finally = {
[11:01:49.227]         if (!identical(...future.workdir, getwd())) 
[11:01:49.227]             setwd(...future.workdir)
[11:01:49.227]         {
[11:01:49.227]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:49.227]                 ...future.oldOptions$nwarnings <- NULL
[11:01:49.227]             }
[11:01:49.227]             base::options(...future.oldOptions)
[11:01:49.227]             if (.Platform$OS.type == "windows") {
[11:01:49.227]                 old_names <- names(...future.oldEnvVars)
[11:01:49.227]                 envs <- base::Sys.getenv()
[11:01:49.227]                 names <- names(envs)
[11:01:49.227]                 common <- intersect(names, old_names)
[11:01:49.227]                 added <- setdiff(names, old_names)
[11:01:49.227]                 removed <- setdiff(old_names, names)
[11:01:49.227]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:49.227]                   envs[common]]
[11:01:49.227]                 NAMES <- toupper(changed)
[11:01:49.227]                 args <- list()
[11:01:49.227]                 for (kk in seq_along(NAMES)) {
[11:01:49.227]                   name <- changed[[kk]]
[11:01:49.227]                   NAME <- NAMES[[kk]]
[11:01:49.227]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.227]                     next
[11:01:49.227]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:49.227]                 }
[11:01:49.227]                 NAMES <- toupper(added)
[11:01:49.227]                 for (kk in seq_along(NAMES)) {
[11:01:49.227]                   name <- added[[kk]]
[11:01:49.227]                   NAME <- NAMES[[kk]]
[11:01:49.227]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.227]                     next
[11:01:49.227]                   args[[name]] <- ""
[11:01:49.227]                 }
[11:01:49.227]                 NAMES <- toupper(removed)
[11:01:49.227]                 for (kk in seq_along(NAMES)) {
[11:01:49.227]                   name <- removed[[kk]]
[11:01:49.227]                   NAME <- NAMES[[kk]]
[11:01:49.227]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:49.227]                     next
[11:01:49.227]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:49.227]                 }
[11:01:49.227]                 if (length(args) > 0) 
[11:01:49.227]                   base::do.call(base::Sys.setenv, args = args)
[11:01:49.227]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:49.227]             }
[11:01:49.227]             else {
[11:01:49.227]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:49.227]             }
[11:01:49.227]             {
[11:01:49.227]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:49.227]                   0L) {
[11:01:49.227]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:49.227]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:49.227]                   base::options(opts)
[11:01:49.227]                 }
[11:01:49.227]                 {
[11:01:49.227]                   {
[11:01:49.227]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:49.227]                     NULL
[11:01:49.227]                   }
[11:01:49.227]                   options(future.plan = NULL)
[11:01:49.227]                   if (is.na(NA_character_)) 
[11:01:49.227]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:49.227]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:49.227]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:49.227]                     .init = FALSE)
[11:01:49.227]                 }
[11:01:49.227]             }
[11:01:49.227]         }
[11:01:49.227]     })
[11:01:49.227]     if (TRUE) {
[11:01:49.227]         base::sink(type = "output", split = FALSE)
[11:01:49.227]         if (TRUE) {
[11:01:49.227]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:49.227]         }
[11:01:49.227]         else {
[11:01:49.227]             ...future.result["stdout"] <- base::list(NULL)
[11:01:49.227]         }
[11:01:49.227]         base::close(...future.stdout)
[11:01:49.227]         ...future.stdout <- NULL
[11:01:49.227]     }
[11:01:49.227]     ...future.result$conditions <- ...future.conditions
[11:01:49.227]     ...future.result$finished <- base::Sys.time()
[11:01:49.227]     ...future.result
[11:01:49.227] }
[11:01:49.229] Exporting 2 global objects (383 bytes) to cluster node #1 ...
[11:01:49.230] Exporting ‘x’ (31 bytes) to cluster node #1 ...
[11:01:49.230] Exporting ‘x’ (31 bytes) to cluster node #1 ... DONE
[11:01:49.230] Exporting ‘name’ (40 bytes) to cluster node #1 ...
[11:01:49.230] Exporting ‘name’ (40 bytes) to cluster node #1 ... DONE
[11:01:49.231] Exporting 2 global objects (383 bytes) to cluster node #1 ... DONE
[11:01:49.231] MultisessionFuture started
[11:01:49.231] - Launch lazy future ... done
[11:01:49.231] run() for ‘MultisessionFuture’ ... done
[11:01:49.231] result() for ClusterFuture ...
[11:01:49.232] receiveMessageFromWorker() for ClusterFuture ...
[11:01:49.232] - Validating connection of MultisessionFuture
[11:01:49.273] - received message: FutureResult
[11:01:49.273] - Received FutureResult
[11:01:49.273] - Erased future from FutureRegistry
[11:01:49.273] result() for ClusterFuture ...
[11:01:49.273] - result already collected: FutureResult
[11:01:49.273] result() for ClusterFuture ... done
[11:01:49.273] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:49.274] result() for ClusterFuture ... done
[11:01:49.274] result() for ClusterFuture ...
[11:01:49.274] - result already collected: FutureResult
[11:01:49.274] result() for ClusterFuture ... done
$a
[1] 1

Testing with 2 cores ... DONE
> 
> message("*** Globals - subassignments w/ x$a <- value ... DONE")
*** Globals - subassignments w/ x$a <- value ... DONE
> 
> message("*** Globals - subassignments ... DONE")
*** Globals - subassignments ... DONE
> 
> source("incl/end.R")
[11:01:49.275] plan(): Setting new future strategy stack:
[11:01:49.275] List of future strategies:
[11:01:49.275] 1. FutureStrategy:
[11:01:49.275]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:49.275]    - tweaked: FALSE
[11:01:49.275]    - call: future::plan(oplan)
[11:01:49.275] plan(): nbrOfWorkers() = 1
> 
