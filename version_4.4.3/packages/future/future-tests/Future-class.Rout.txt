
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:27:36.388] plan(): Setting new future strategy stack:
[08:27:36.388] List of future strategies:
[08:27:36.388] 1. sequential:
[08:27:36.388]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:36.388]    - tweaked: FALSE
[08:27:36.388]    - call: future::plan("sequential")
[08:27:36.402] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[08:27:36.418] getGlobalsAndPackages() ...
[08:27:36.418] 
[08:27:36.419] - globals: [0] <none>
[08:27:36.419] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ebea613b-9830-9994-0823-211ca6d0ccc4
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[08:27:36.420] run() for ‘Future’ ...
[08:27:36.420] - state: ‘created’
[08:27:36.420] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[08:27:36.423] plan(): Setting new future strategy stack:
[08:27:36.423] List of future strategies:
[08:27:36.423] 1. future:
[08:27:36.423]    - args: function (..., workers = "<NULL>")
[08:27:36.423]    - tweaked: FALSE
[08:27:36.423]    - call: plan(foo)
[08:27:36.434] plan(): nbrOfWorkers() = Inf
> f <- Future()
[08:27:36.434] getGlobalsAndPackages() ...
[08:27:36.435] 
[08:27:36.435] - globals: [0] <none>
[08:27:36.435] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[08:27:36.435] Packages needed by the future expression (n = 0): <none>
[08:27:36.435] Packages needed by future strategies (n = 0): <none>
[08:27:36.436] {
[08:27:36.436]     {
[08:27:36.436]         {
[08:27:36.436]             ...future.startTime <- base::Sys.time()
[08:27:36.436]             {
[08:27:36.436]                 {
[08:27:36.436]                   {
[08:27:36.436]                     base::local({
[08:27:36.436]                       has_future <- base::requireNamespace("future", 
[08:27:36.436]                         quietly = TRUE)
[08:27:36.436]                       if (has_future) {
[08:27:36.436]                         ns <- base::getNamespace("future")
[08:27:36.436]                         version <- ns[[".package"]][["version"]]
[08:27:36.436]                         if (is.null(version)) 
[08:27:36.436]                           version <- utils::packageVersion("future")
[08:27:36.436]                       }
[08:27:36.436]                       else {
[08:27:36.436]                         version <- NULL
[08:27:36.436]                       }
[08:27:36.436]                       if (!has_future || version < "1.8.0") {
[08:27:36.436]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:36.436]                           "", base::R.version$version.string), 
[08:27:36.436]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:36.436]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:36.436]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:36.436]                             "release", "version")], collapse = " "), 
[08:27:36.436]                           hostname = base::Sys.info()[["nodename"]])
[08:27:36.436]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:36.436]                           info)
[08:27:36.436]                         info <- base::paste(info, collapse = "; ")
[08:27:36.436]                         if (!has_future) {
[08:27:36.436]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:36.436]                             info)
[08:27:36.436]                         }
[08:27:36.436]                         else {
[08:27:36.436]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:36.436]                             info, version)
[08:27:36.436]                         }
[08:27:36.436]                         base::stop(msg)
[08:27:36.436]                       }
[08:27:36.436]                     })
[08:27:36.436]                   }
[08:27:36.436]                   ...future.strategy.old <- future::plan("list")
[08:27:36.436]                   options(future.plan = NULL)
[08:27:36.436]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.436]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:36.436]                 }
[08:27:36.436]                 ...future.workdir <- getwd()
[08:27:36.436]             }
[08:27:36.436]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:36.436]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:36.436]         }
[08:27:36.436]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:36.436]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:36.436]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:36.436]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:36.436]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:36.436]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:36.436]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:36.436]             base::names(...future.oldOptions))
[08:27:36.436]     }
[08:27:36.436]     if (FALSE) {
[08:27:36.436]     }
[08:27:36.436]     else {
[08:27:36.436]         if (TRUE) {
[08:27:36.436]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:36.436]                 open = "w")
[08:27:36.436]         }
[08:27:36.436]         else {
[08:27:36.436]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:36.436]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:36.436]         }
[08:27:36.436]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:36.436]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:36.436]             base::sink(type = "output", split = FALSE)
[08:27:36.436]             base::close(...future.stdout)
[08:27:36.436]         }, add = TRUE)
[08:27:36.436]     }
[08:27:36.436]     ...future.frame <- base::sys.nframe()
[08:27:36.436]     ...future.conditions <- base::list()
[08:27:36.436]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:36.436]     if (FALSE) {
[08:27:36.436]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:36.436]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:36.436]     }
[08:27:36.436]     ...future.result <- base::tryCatch({
[08:27:36.436]         base::withCallingHandlers({
[08:27:36.436]             ...future.value <- base::withVisible(base::local(NULL))
[08:27:36.436]             future::FutureResult(value = ...future.value$value, 
[08:27:36.436]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.436]                   ...future.rng), globalenv = if (FALSE) 
[08:27:36.436]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:36.436]                     ...future.globalenv.names))
[08:27:36.436]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:36.436]         }, condition = base::local({
[08:27:36.436]             c <- base::c
[08:27:36.436]             inherits <- base::inherits
[08:27:36.436]             invokeRestart <- base::invokeRestart
[08:27:36.436]             length <- base::length
[08:27:36.436]             list <- base::list
[08:27:36.436]             seq.int <- base::seq.int
[08:27:36.436]             signalCondition <- base::signalCondition
[08:27:36.436]             sys.calls <- base::sys.calls
[08:27:36.436]             `[[` <- base::`[[`
[08:27:36.436]             `+` <- base::`+`
[08:27:36.436]             `<<-` <- base::`<<-`
[08:27:36.436]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:36.436]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:36.436]                   3L)]
[08:27:36.436]             }
[08:27:36.436]             function(cond) {
[08:27:36.436]                 is_error <- inherits(cond, "error")
[08:27:36.436]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:36.436]                   NULL)
[08:27:36.436]                 if (is_error) {
[08:27:36.436]                   sessionInformation <- function() {
[08:27:36.436]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:36.436]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:36.436]                       search = base::search(), system = base::Sys.info())
[08:27:36.436]                   }
[08:27:36.436]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.436]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:36.436]                     cond$call), session = sessionInformation(), 
[08:27:36.436]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:36.436]                   signalCondition(cond)
[08:27:36.436]                 }
[08:27:36.436]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[08:27:36.436]                   signal <- FALSE && inherits(cond, character(0))
[08:27:36.436]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.436]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:36.436]                   if (FALSE && !signal) {
[08:27:36.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.436]                     {
[08:27:36.436]                       inherits <- base::inherits
[08:27:36.436]                       invokeRestart <- base::invokeRestart
[08:27:36.436]                       is.null <- base::is.null
[08:27:36.436]                       muffled <- FALSE
[08:27:36.436]                       if (inherits(cond, "message")) {
[08:27:36.436]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.436]                         if (muffled) 
[08:27:36.436]                           invokeRestart("muffleMessage")
[08:27:36.436]                       }
[08:27:36.436]                       else if (inherits(cond, "warning")) {
[08:27:36.436]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.436]                         if (muffled) 
[08:27:36.436]                           invokeRestart("muffleWarning")
[08:27:36.436]                       }
[08:27:36.436]                       else if (inherits(cond, "condition")) {
[08:27:36.436]                         if (!is.null(pattern)) {
[08:27:36.436]                           computeRestarts <- base::computeRestarts
[08:27:36.436]                           grepl <- base::grepl
[08:27:36.436]                           restarts <- computeRestarts(cond)
[08:27:36.436]                           for (restart in restarts) {
[08:27:36.436]                             name <- restart$name
[08:27:36.436]                             if (is.null(name)) 
[08:27:36.436]                               next
[08:27:36.436]                             if (!grepl(pattern, name)) 
[08:27:36.436]                               next
[08:27:36.436]                             invokeRestart(restart)
[08:27:36.436]                             muffled <- TRUE
[08:27:36.436]                             break
[08:27:36.436]                           }
[08:27:36.436]                         }
[08:27:36.436]                       }
[08:27:36.436]                       invisible(muffled)
[08:27:36.436]                     }
[08:27:36.436]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.436]                   }
[08:27:36.436]                 }
[08:27:36.436]                 else {
[08:27:36.436]                   if (TRUE) {
[08:27:36.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.436]                     {
[08:27:36.436]                       inherits <- base::inherits
[08:27:36.436]                       invokeRestart <- base::invokeRestart
[08:27:36.436]                       is.null <- base::is.null
[08:27:36.436]                       muffled <- FALSE
[08:27:36.436]                       if (inherits(cond, "message")) {
[08:27:36.436]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.436]                         if (muffled) 
[08:27:36.436]                           invokeRestart("muffleMessage")
[08:27:36.436]                       }
[08:27:36.436]                       else if (inherits(cond, "warning")) {
[08:27:36.436]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.436]                         if (muffled) 
[08:27:36.436]                           invokeRestart("muffleWarning")
[08:27:36.436]                       }
[08:27:36.436]                       else if (inherits(cond, "condition")) {
[08:27:36.436]                         if (!is.null(pattern)) {
[08:27:36.436]                           computeRestarts <- base::computeRestarts
[08:27:36.436]                           grepl <- base::grepl
[08:27:36.436]                           restarts <- computeRestarts(cond)
[08:27:36.436]                           for (restart in restarts) {
[08:27:36.436]                             name <- restart$name
[08:27:36.436]                             if (is.null(name)) 
[08:27:36.436]                               next
[08:27:36.436]                             if (!grepl(pattern, name)) 
[08:27:36.436]                               next
[08:27:36.436]                             invokeRestart(restart)
[08:27:36.436]                             muffled <- TRUE
[08:27:36.436]                             break
[08:27:36.436]                           }
[08:27:36.436]                         }
[08:27:36.436]                       }
[08:27:36.436]                       invisible(muffled)
[08:27:36.436]                     }
[08:27:36.436]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.436]                   }
[08:27:36.436]                 }
[08:27:36.436]             }
[08:27:36.436]         }))
[08:27:36.436]     }, error = function(ex) {
[08:27:36.436]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:36.436]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.436]                 ...future.rng), started = ...future.startTime, 
[08:27:36.436]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:36.436]             version = "1.8"), class = "FutureResult")
[08:27:36.436]     }, finally = {
[08:27:36.436]         if (!identical(...future.workdir, getwd())) 
[08:27:36.436]             setwd(...future.workdir)
[08:27:36.436]         {
[08:27:36.436]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:36.436]                 ...future.oldOptions$nwarnings <- NULL
[08:27:36.436]             }
[08:27:36.436]             base::options(...future.oldOptions)
[08:27:36.436]             if (.Platform$OS.type == "windows") {
[08:27:36.436]                 old_names <- names(...future.oldEnvVars)
[08:27:36.436]                 envs <- base::Sys.getenv()
[08:27:36.436]                 names <- names(envs)
[08:27:36.436]                 common <- intersect(names, old_names)
[08:27:36.436]                 added <- setdiff(names, old_names)
[08:27:36.436]                 removed <- setdiff(old_names, names)
[08:27:36.436]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:36.436]                   envs[common]]
[08:27:36.436]                 NAMES <- toupper(changed)
[08:27:36.436]                 args <- list()
[08:27:36.436]                 for (kk in seq_along(NAMES)) {
[08:27:36.436]                   name <- changed[[kk]]
[08:27:36.436]                   NAME <- NAMES[[kk]]
[08:27:36.436]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.436]                     next
[08:27:36.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.436]                 }
[08:27:36.436]                 NAMES <- toupper(added)
[08:27:36.436]                 for (kk in seq_along(NAMES)) {
[08:27:36.436]                   name <- added[[kk]]
[08:27:36.436]                   NAME <- NAMES[[kk]]
[08:27:36.436]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.436]                     next
[08:27:36.436]                   args[[name]] <- ""
[08:27:36.436]                 }
[08:27:36.436]                 NAMES <- toupper(removed)
[08:27:36.436]                 for (kk in seq_along(NAMES)) {
[08:27:36.436]                   name <- removed[[kk]]
[08:27:36.436]                   NAME <- NAMES[[kk]]
[08:27:36.436]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.436]                     next
[08:27:36.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.436]                 }
[08:27:36.436]                 if (length(args) > 0) 
[08:27:36.436]                   base::do.call(base::Sys.setenv, args = args)
[08:27:36.436]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:36.436]             }
[08:27:36.436]             else {
[08:27:36.436]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:36.436]             }
[08:27:36.436]             {
[08:27:36.436]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:36.436]                   0L) {
[08:27:36.436]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:36.436]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:36.436]                   base::options(opts)
[08:27:36.436]                 }
[08:27:36.436]                 {
[08:27:36.436]                   NULL
[08:27:36.436]                   options(future.plan = NULL)
[08:27:36.436]                   if (is.na(NA_character_)) 
[08:27:36.436]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.436]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:36.436]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:36.436]                     .init = FALSE)
[08:27:36.436]                 }
[08:27:36.436]             }
[08:27:36.436]         }
[08:27:36.436]     })
[08:27:36.436]     if (TRUE) {
[08:27:36.436]         base::sink(type = "output", split = FALSE)
[08:27:36.436]         if (TRUE) {
[08:27:36.436]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:36.436]         }
[08:27:36.436]         else {
[08:27:36.436]             ...future.result["stdout"] <- base::list(NULL)
[08:27:36.436]         }
[08:27:36.436]         base::close(...future.stdout)
[08:27:36.436]         ...future.stdout <- NULL
[08:27:36.436]     }
[08:27:36.436]     ...future.result$conditions <- ...future.conditions
[08:27:36.436]     ...future.result$finished <- base::Sys.time()
[08:27:36.436]     ...future.result
[08:27:36.436] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = I(1L)),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = I(1L))
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+   
+   ## To avoid 'multisession' from leaving stray workers behind
+   ClusterRegistry(action = "stop")
+ }
[08:27:36.449] getGlobalsAndPackages() ...
[08:27:36.449] Searching for globals...
[08:27:36.451] - globals found: [1] ‘{’
[08:27:36.452] Searching for globals ... DONE
[08:27:36.452] Resolving globals: FALSE
[08:27:36.452] 
[08:27:36.452] 
[08:27:36.452] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ebea613b-9830-9994-0823-211ca6d0ccc4
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:36.453] Packages needed by the future expression (n = 0): <none>
[08:27:36.453] Packages needed by future strategies (n = 0): <none>
[08:27:36.454] {
[08:27:36.454]     {
[08:27:36.454]         {
[08:27:36.454]             ...future.startTime <- base::Sys.time()
[08:27:36.454]             {
[08:27:36.454]                 {
[08:27:36.454]                   {
[08:27:36.454]                     base::local({
[08:27:36.454]                       has_future <- base::requireNamespace("future", 
[08:27:36.454]                         quietly = TRUE)
[08:27:36.454]                       if (has_future) {
[08:27:36.454]                         ns <- base::getNamespace("future")
[08:27:36.454]                         version <- ns[[".package"]][["version"]]
[08:27:36.454]                         if (is.null(version)) 
[08:27:36.454]                           version <- utils::packageVersion("future")
[08:27:36.454]                       }
[08:27:36.454]                       else {
[08:27:36.454]                         version <- NULL
[08:27:36.454]                       }
[08:27:36.454]                       if (!has_future || version < "1.8.0") {
[08:27:36.454]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:36.454]                           "", base::R.version$version.string), 
[08:27:36.454]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:36.454]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:36.454]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:36.454]                             "release", "version")], collapse = " "), 
[08:27:36.454]                           hostname = base::Sys.info()[["nodename"]])
[08:27:36.454]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:36.454]                           info)
[08:27:36.454]                         info <- base::paste(info, collapse = "; ")
[08:27:36.454]                         if (!has_future) {
[08:27:36.454]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:36.454]                             info)
[08:27:36.454]                         }
[08:27:36.454]                         else {
[08:27:36.454]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:36.454]                             info, version)
[08:27:36.454]                         }
[08:27:36.454]                         base::stop(msg)
[08:27:36.454]                       }
[08:27:36.454]                     })
[08:27:36.454]                   }
[08:27:36.454]                   ...future.strategy.old <- future::plan("list")
[08:27:36.454]                   options(future.plan = NULL)
[08:27:36.454]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.454]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:36.454]                 }
[08:27:36.454]                 ...future.workdir <- getwd()
[08:27:36.454]             }
[08:27:36.454]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:36.454]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:36.454]         }
[08:27:36.454]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:36.454]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:36.454]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:36.454]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:36.454]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:36.454]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:36.454]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:36.454]             base::names(...future.oldOptions))
[08:27:36.454]     }
[08:27:36.454]     if (FALSE) {
[08:27:36.454]     }
[08:27:36.454]     else {
[08:27:36.454]         if (TRUE) {
[08:27:36.454]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:36.454]                 open = "w")
[08:27:36.454]         }
[08:27:36.454]         else {
[08:27:36.454]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:36.454]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:36.454]         }
[08:27:36.454]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:36.454]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:36.454]             base::sink(type = "output", split = FALSE)
[08:27:36.454]             base::close(...future.stdout)
[08:27:36.454]         }, add = TRUE)
[08:27:36.454]     }
[08:27:36.454]     ...future.frame <- base::sys.nframe()
[08:27:36.454]     ...future.conditions <- base::list()
[08:27:36.454]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:36.454]     if (FALSE) {
[08:27:36.454]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:36.454]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:36.454]     }
[08:27:36.454]     ...future.result <- base::tryCatch({
[08:27:36.454]         base::withCallingHandlers({
[08:27:36.454]             ...future.value <- base::withVisible(base::local({
[08:27:36.454]                 42L
[08:27:36.454]             }))
[08:27:36.454]             future::FutureResult(value = ...future.value$value, 
[08:27:36.454]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.454]                   ...future.rng), globalenv = if (FALSE) 
[08:27:36.454]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:36.454]                     ...future.globalenv.names))
[08:27:36.454]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:36.454]         }, condition = base::local({
[08:27:36.454]             c <- base::c
[08:27:36.454]             inherits <- base::inherits
[08:27:36.454]             invokeRestart <- base::invokeRestart
[08:27:36.454]             length <- base::length
[08:27:36.454]             list <- base::list
[08:27:36.454]             seq.int <- base::seq.int
[08:27:36.454]             signalCondition <- base::signalCondition
[08:27:36.454]             sys.calls <- base::sys.calls
[08:27:36.454]             `[[` <- base::`[[`
[08:27:36.454]             `+` <- base::`+`
[08:27:36.454]             `<<-` <- base::`<<-`
[08:27:36.454]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:36.454]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:36.454]                   3L)]
[08:27:36.454]             }
[08:27:36.454]             function(cond) {
[08:27:36.454]                 is_error <- inherits(cond, "error")
[08:27:36.454]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:36.454]                   NULL)
[08:27:36.454]                 if (is_error) {
[08:27:36.454]                   sessionInformation <- function() {
[08:27:36.454]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:36.454]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:36.454]                       search = base::search(), system = base::Sys.info())
[08:27:36.454]                   }
[08:27:36.454]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.454]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:36.454]                     cond$call), session = sessionInformation(), 
[08:27:36.454]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:36.454]                   signalCondition(cond)
[08:27:36.454]                 }
[08:27:36.454]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:36.454]                 "immediateCondition"))) {
[08:27:36.454]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:36.454]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.454]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:36.454]                   if (TRUE && !signal) {
[08:27:36.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.454]                     {
[08:27:36.454]                       inherits <- base::inherits
[08:27:36.454]                       invokeRestart <- base::invokeRestart
[08:27:36.454]                       is.null <- base::is.null
[08:27:36.454]                       muffled <- FALSE
[08:27:36.454]                       if (inherits(cond, "message")) {
[08:27:36.454]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.454]                         if (muffled) 
[08:27:36.454]                           invokeRestart("muffleMessage")
[08:27:36.454]                       }
[08:27:36.454]                       else if (inherits(cond, "warning")) {
[08:27:36.454]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.454]                         if (muffled) 
[08:27:36.454]                           invokeRestart("muffleWarning")
[08:27:36.454]                       }
[08:27:36.454]                       else if (inherits(cond, "condition")) {
[08:27:36.454]                         if (!is.null(pattern)) {
[08:27:36.454]                           computeRestarts <- base::computeRestarts
[08:27:36.454]                           grepl <- base::grepl
[08:27:36.454]                           restarts <- computeRestarts(cond)
[08:27:36.454]                           for (restart in restarts) {
[08:27:36.454]                             name <- restart$name
[08:27:36.454]                             if (is.null(name)) 
[08:27:36.454]                               next
[08:27:36.454]                             if (!grepl(pattern, name)) 
[08:27:36.454]                               next
[08:27:36.454]                             invokeRestart(restart)
[08:27:36.454]                             muffled <- TRUE
[08:27:36.454]                             break
[08:27:36.454]                           }
[08:27:36.454]                         }
[08:27:36.454]                       }
[08:27:36.454]                       invisible(muffled)
[08:27:36.454]                     }
[08:27:36.454]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.454]                   }
[08:27:36.454]                 }
[08:27:36.454]                 else {
[08:27:36.454]                   if (TRUE) {
[08:27:36.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.454]                     {
[08:27:36.454]                       inherits <- base::inherits
[08:27:36.454]                       invokeRestart <- base::invokeRestart
[08:27:36.454]                       is.null <- base::is.null
[08:27:36.454]                       muffled <- FALSE
[08:27:36.454]                       if (inherits(cond, "message")) {
[08:27:36.454]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.454]                         if (muffled) 
[08:27:36.454]                           invokeRestart("muffleMessage")
[08:27:36.454]                       }
[08:27:36.454]                       else if (inherits(cond, "warning")) {
[08:27:36.454]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.454]                         if (muffled) 
[08:27:36.454]                           invokeRestart("muffleWarning")
[08:27:36.454]                       }
[08:27:36.454]                       else if (inherits(cond, "condition")) {
[08:27:36.454]                         if (!is.null(pattern)) {
[08:27:36.454]                           computeRestarts <- base::computeRestarts
[08:27:36.454]                           grepl <- base::grepl
[08:27:36.454]                           restarts <- computeRestarts(cond)
[08:27:36.454]                           for (restart in restarts) {
[08:27:36.454]                             name <- restart$name
[08:27:36.454]                             if (is.null(name)) 
[08:27:36.454]                               next
[08:27:36.454]                             if (!grepl(pattern, name)) 
[08:27:36.454]                               next
[08:27:36.454]                             invokeRestart(restart)
[08:27:36.454]                             muffled <- TRUE
[08:27:36.454]                             break
[08:27:36.454]                           }
[08:27:36.454]                         }
[08:27:36.454]                       }
[08:27:36.454]                       invisible(muffled)
[08:27:36.454]                     }
[08:27:36.454]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.454]                   }
[08:27:36.454]                 }
[08:27:36.454]             }
[08:27:36.454]         }))
[08:27:36.454]     }, error = function(ex) {
[08:27:36.454]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:36.454]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.454]                 ...future.rng), started = ...future.startTime, 
[08:27:36.454]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:36.454]             version = "1.8"), class = "FutureResult")
[08:27:36.454]     }, finally = {
[08:27:36.454]         if (!identical(...future.workdir, getwd())) 
[08:27:36.454]             setwd(...future.workdir)
[08:27:36.454]         {
[08:27:36.454]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:36.454]                 ...future.oldOptions$nwarnings <- NULL
[08:27:36.454]             }
[08:27:36.454]             base::options(...future.oldOptions)
[08:27:36.454]             if (.Platform$OS.type == "windows") {
[08:27:36.454]                 old_names <- names(...future.oldEnvVars)
[08:27:36.454]                 envs <- base::Sys.getenv()
[08:27:36.454]                 names <- names(envs)
[08:27:36.454]                 common <- intersect(names, old_names)
[08:27:36.454]                 added <- setdiff(names, old_names)
[08:27:36.454]                 removed <- setdiff(old_names, names)
[08:27:36.454]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:36.454]                   envs[common]]
[08:27:36.454]                 NAMES <- toupper(changed)
[08:27:36.454]                 args <- list()
[08:27:36.454]                 for (kk in seq_along(NAMES)) {
[08:27:36.454]                   name <- changed[[kk]]
[08:27:36.454]                   NAME <- NAMES[[kk]]
[08:27:36.454]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.454]                     next
[08:27:36.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.454]                 }
[08:27:36.454]                 NAMES <- toupper(added)
[08:27:36.454]                 for (kk in seq_along(NAMES)) {
[08:27:36.454]                   name <- added[[kk]]
[08:27:36.454]                   NAME <- NAMES[[kk]]
[08:27:36.454]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.454]                     next
[08:27:36.454]                   args[[name]] <- ""
[08:27:36.454]                 }
[08:27:36.454]                 NAMES <- toupper(removed)
[08:27:36.454]                 for (kk in seq_along(NAMES)) {
[08:27:36.454]                   name <- removed[[kk]]
[08:27:36.454]                   NAME <- NAMES[[kk]]
[08:27:36.454]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.454]                     next
[08:27:36.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.454]                 }
[08:27:36.454]                 if (length(args) > 0) 
[08:27:36.454]                   base::do.call(base::Sys.setenv, args = args)
[08:27:36.454]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:36.454]             }
[08:27:36.454]             else {
[08:27:36.454]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:36.454]             }
[08:27:36.454]             {
[08:27:36.454]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:36.454]                   0L) {
[08:27:36.454]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:36.454]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:36.454]                   base::options(opts)
[08:27:36.454]                 }
[08:27:36.454]                 {
[08:27:36.454]                   {
[08:27:36.454]                     NULL
[08:27:36.454]                     RNGkind("Mersenne-Twister")
[08:27:36.454]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:36.454]                       inherits = FALSE)
[08:27:36.454]                   }
[08:27:36.454]                   options(future.plan = NULL)
[08:27:36.454]                   if (is.na(NA_character_)) 
[08:27:36.454]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.454]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:36.454]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:36.454]                     .init = FALSE)
[08:27:36.454]                 }
[08:27:36.454]             }
[08:27:36.454]         }
[08:27:36.454]     })
[08:27:36.454]     if (TRUE) {
[08:27:36.454]         base::sink(type = "output", split = FALSE)
[08:27:36.454]         if (TRUE) {
[08:27:36.454]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:36.454]         }
[08:27:36.454]         else {
[08:27:36.454]             ...future.result["stdout"] <- base::list(NULL)
[08:27:36.454]         }
[08:27:36.454]         base::close(...future.stdout)
[08:27:36.454]         ...future.stdout <- NULL
[08:27:36.454]     }
[08:27:36.454]     ...future.result$conditions <- ...future.conditions
[08:27:36.454]     ...future.result$finished <- base::Sys.time()
[08:27:36.454]     ...future.result
[08:27:36.454] }
[08:27:36.456] plan(): Setting new future strategy stack:
[08:27:36.456] List of future strategies:
[08:27:36.456] 1. sequential:
[08:27:36.456]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:36.456]    - tweaked: FALSE
[08:27:36.456]    - call: NULL
[08:27:36.456] plan(): nbrOfWorkers() = 1
[08:27:36.457] plan(): Setting new future strategy stack:
[08:27:36.457] List of future strategies:
[08:27:36.457] 1. future:
[08:27:36.457]    - args: function (..., workers = "<NULL>")
[08:27:36.457]    - tweaked: FALSE
[08:27:36.457]    - call: plan(foo)
[08:27:36.458] plan(): nbrOfWorkers() = Inf
[08:27:36.458] SequentialFuture started (and completed)
[1] 42
[08:27:36.459] getGlobalsAndPackages() ...
[08:27:36.459] Searching for globals...
[08:27:36.459] - globals found: [1] ‘{’
[08:27:36.459] Searching for globals ... DONE
[08:27:36.460] Resolving globals: FALSE
[08:27:36.460] 
[08:27:36.460] 
[08:27:36.460] getGlobalsAndPackages() ... DONE
[08:27:36.460] Packages needed by the future expression (n = 0): <none>
[08:27:36.460] Packages needed by future strategies (n = 0): <none>
[08:27:36.461] {
[08:27:36.461]     {
[08:27:36.461]         {
[08:27:36.461]             ...future.startTime <- base::Sys.time()
[08:27:36.461]             {
[08:27:36.461]                 {
[08:27:36.461]                   {
[08:27:36.461]                     base::local({
[08:27:36.461]                       has_future <- base::requireNamespace("future", 
[08:27:36.461]                         quietly = TRUE)
[08:27:36.461]                       if (has_future) {
[08:27:36.461]                         ns <- base::getNamespace("future")
[08:27:36.461]                         version <- ns[[".package"]][["version"]]
[08:27:36.461]                         if (is.null(version)) 
[08:27:36.461]                           version <- utils::packageVersion("future")
[08:27:36.461]                       }
[08:27:36.461]                       else {
[08:27:36.461]                         version <- NULL
[08:27:36.461]                       }
[08:27:36.461]                       if (!has_future || version < "1.8.0") {
[08:27:36.461]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:36.461]                           "", base::R.version$version.string), 
[08:27:36.461]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:36.461]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:36.461]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:36.461]                             "release", "version")], collapse = " "), 
[08:27:36.461]                           hostname = base::Sys.info()[["nodename"]])
[08:27:36.461]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:36.461]                           info)
[08:27:36.461]                         info <- base::paste(info, collapse = "; ")
[08:27:36.461]                         if (!has_future) {
[08:27:36.461]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:36.461]                             info)
[08:27:36.461]                         }
[08:27:36.461]                         else {
[08:27:36.461]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:36.461]                             info, version)
[08:27:36.461]                         }
[08:27:36.461]                         base::stop(msg)
[08:27:36.461]                       }
[08:27:36.461]                     })
[08:27:36.461]                   }
[08:27:36.461]                   ...future.strategy.old <- future::plan("list")
[08:27:36.461]                   options(future.plan = NULL)
[08:27:36.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:36.461]                 }
[08:27:36.461]                 ...future.workdir <- getwd()
[08:27:36.461]             }
[08:27:36.461]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:36.461]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:36.461]         }
[08:27:36.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:36.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:36.461]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:36.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:36.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:36.461]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:36.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:36.461]             base::names(...future.oldOptions))
[08:27:36.461]     }
[08:27:36.461]     if (FALSE) {
[08:27:36.461]     }
[08:27:36.461]     else {
[08:27:36.461]         if (TRUE) {
[08:27:36.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:36.461]                 open = "w")
[08:27:36.461]         }
[08:27:36.461]         else {
[08:27:36.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:36.461]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:36.461]         }
[08:27:36.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:36.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:36.461]             base::sink(type = "output", split = FALSE)
[08:27:36.461]             base::close(...future.stdout)
[08:27:36.461]         }, add = TRUE)
[08:27:36.461]     }
[08:27:36.461]     ...future.frame <- base::sys.nframe()
[08:27:36.461]     ...future.conditions <- base::list()
[08:27:36.461]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:36.461]     if (FALSE) {
[08:27:36.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:36.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:36.461]     }
[08:27:36.461]     ...future.result <- base::tryCatch({
[08:27:36.461]         base::withCallingHandlers({
[08:27:36.461]             ...future.value <- base::withVisible(base::local({
[08:27:36.461]                 42L
[08:27:36.461]             }))
[08:27:36.461]             future::FutureResult(value = ...future.value$value, 
[08:27:36.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.461]                   ...future.rng), globalenv = if (FALSE) 
[08:27:36.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:36.461]                     ...future.globalenv.names))
[08:27:36.461]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:36.461]         }, condition = base::local({
[08:27:36.461]             c <- base::c
[08:27:36.461]             inherits <- base::inherits
[08:27:36.461]             invokeRestart <- base::invokeRestart
[08:27:36.461]             length <- base::length
[08:27:36.461]             list <- base::list
[08:27:36.461]             seq.int <- base::seq.int
[08:27:36.461]             signalCondition <- base::signalCondition
[08:27:36.461]             sys.calls <- base::sys.calls
[08:27:36.461]             `[[` <- base::`[[`
[08:27:36.461]             `+` <- base::`+`
[08:27:36.461]             `<<-` <- base::`<<-`
[08:27:36.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:36.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:36.461]                   3L)]
[08:27:36.461]             }
[08:27:36.461]             function(cond) {
[08:27:36.461]                 is_error <- inherits(cond, "error")
[08:27:36.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:36.461]                   NULL)
[08:27:36.461]                 if (is_error) {
[08:27:36.461]                   sessionInformation <- function() {
[08:27:36.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:36.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:36.461]                       search = base::search(), system = base::Sys.info())
[08:27:36.461]                   }
[08:27:36.461]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:36.461]                     cond$call), session = sessionInformation(), 
[08:27:36.461]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:36.461]                   signalCondition(cond)
[08:27:36.461]                 }
[08:27:36.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:36.461]                 "immediateCondition"))) {
[08:27:36.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:36.461]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:36.461]                   if (TRUE && !signal) {
[08:27:36.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.461]                     {
[08:27:36.461]                       inherits <- base::inherits
[08:27:36.461]                       invokeRestart <- base::invokeRestart
[08:27:36.461]                       is.null <- base::is.null
[08:27:36.461]                       muffled <- FALSE
[08:27:36.461]                       if (inherits(cond, "message")) {
[08:27:36.461]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.461]                         if (muffled) 
[08:27:36.461]                           invokeRestart("muffleMessage")
[08:27:36.461]                       }
[08:27:36.461]                       else if (inherits(cond, "warning")) {
[08:27:36.461]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.461]                         if (muffled) 
[08:27:36.461]                           invokeRestart("muffleWarning")
[08:27:36.461]                       }
[08:27:36.461]                       else if (inherits(cond, "condition")) {
[08:27:36.461]                         if (!is.null(pattern)) {
[08:27:36.461]                           computeRestarts <- base::computeRestarts
[08:27:36.461]                           grepl <- base::grepl
[08:27:36.461]                           restarts <- computeRestarts(cond)
[08:27:36.461]                           for (restart in restarts) {
[08:27:36.461]                             name <- restart$name
[08:27:36.461]                             if (is.null(name)) 
[08:27:36.461]                               next
[08:27:36.461]                             if (!grepl(pattern, name)) 
[08:27:36.461]                               next
[08:27:36.461]                             invokeRestart(restart)
[08:27:36.461]                             muffled <- TRUE
[08:27:36.461]                             break
[08:27:36.461]                           }
[08:27:36.461]                         }
[08:27:36.461]                       }
[08:27:36.461]                       invisible(muffled)
[08:27:36.461]                     }
[08:27:36.461]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.461]                   }
[08:27:36.461]                 }
[08:27:36.461]                 else {
[08:27:36.461]                   if (TRUE) {
[08:27:36.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.461]                     {
[08:27:36.461]                       inherits <- base::inherits
[08:27:36.461]                       invokeRestart <- base::invokeRestart
[08:27:36.461]                       is.null <- base::is.null
[08:27:36.461]                       muffled <- FALSE
[08:27:36.461]                       if (inherits(cond, "message")) {
[08:27:36.461]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.461]                         if (muffled) 
[08:27:36.461]                           invokeRestart("muffleMessage")
[08:27:36.461]                       }
[08:27:36.461]                       else if (inherits(cond, "warning")) {
[08:27:36.461]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.461]                         if (muffled) 
[08:27:36.461]                           invokeRestart("muffleWarning")
[08:27:36.461]                       }
[08:27:36.461]                       else if (inherits(cond, "condition")) {
[08:27:36.461]                         if (!is.null(pattern)) {
[08:27:36.461]                           computeRestarts <- base::computeRestarts
[08:27:36.461]                           grepl <- base::grepl
[08:27:36.461]                           restarts <- computeRestarts(cond)
[08:27:36.461]                           for (restart in restarts) {
[08:27:36.461]                             name <- restart$name
[08:27:36.461]                             if (is.null(name)) 
[08:27:36.461]                               next
[08:27:36.461]                             if (!grepl(pattern, name)) 
[08:27:36.461]                               next
[08:27:36.461]                             invokeRestart(restart)
[08:27:36.461]                             muffled <- TRUE
[08:27:36.461]                             break
[08:27:36.461]                           }
[08:27:36.461]                         }
[08:27:36.461]                       }
[08:27:36.461]                       invisible(muffled)
[08:27:36.461]                     }
[08:27:36.461]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.461]                   }
[08:27:36.461]                 }
[08:27:36.461]             }
[08:27:36.461]         }))
[08:27:36.461]     }, error = function(ex) {
[08:27:36.461]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:36.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.461]                 ...future.rng), started = ...future.startTime, 
[08:27:36.461]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:36.461]             version = "1.8"), class = "FutureResult")
[08:27:36.461]     }, finally = {
[08:27:36.461]         if (!identical(...future.workdir, getwd())) 
[08:27:36.461]             setwd(...future.workdir)
[08:27:36.461]         {
[08:27:36.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:36.461]                 ...future.oldOptions$nwarnings <- NULL
[08:27:36.461]             }
[08:27:36.461]             base::options(...future.oldOptions)
[08:27:36.461]             if (.Platform$OS.type == "windows") {
[08:27:36.461]                 old_names <- names(...future.oldEnvVars)
[08:27:36.461]                 envs <- base::Sys.getenv()
[08:27:36.461]                 names <- names(envs)
[08:27:36.461]                 common <- intersect(names, old_names)
[08:27:36.461]                 added <- setdiff(names, old_names)
[08:27:36.461]                 removed <- setdiff(old_names, names)
[08:27:36.461]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:36.461]                   envs[common]]
[08:27:36.461]                 NAMES <- toupper(changed)
[08:27:36.461]                 args <- list()
[08:27:36.461]                 for (kk in seq_along(NAMES)) {
[08:27:36.461]                   name <- changed[[kk]]
[08:27:36.461]                   NAME <- NAMES[[kk]]
[08:27:36.461]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.461]                     next
[08:27:36.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.461]                 }
[08:27:36.461]                 NAMES <- toupper(added)
[08:27:36.461]                 for (kk in seq_along(NAMES)) {
[08:27:36.461]                   name <- added[[kk]]
[08:27:36.461]                   NAME <- NAMES[[kk]]
[08:27:36.461]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.461]                     next
[08:27:36.461]                   args[[name]] <- ""
[08:27:36.461]                 }
[08:27:36.461]                 NAMES <- toupper(removed)
[08:27:36.461]                 for (kk in seq_along(NAMES)) {
[08:27:36.461]                   name <- removed[[kk]]
[08:27:36.461]                   NAME <- NAMES[[kk]]
[08:27:36.461]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.461]                     next
[08:27:36.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.461]                 }
[08:27:36.461]                 if (length(args) > 0) 
[08:27:36.461]                   base::do.call(base::Sys.setenv, args = args)
[08:27:36.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:36.461]             }
[08:27:36.461]             else {
[08:27:36.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:36.461]             }
[08:27:36.461]             {
[08:27:36.461]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:36.461]                   0L) {
[08:27:36.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:36.461]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:36.461]                   base::options(opts)
[08:27:36.461]                 }
[08:27:36.461]                 {
[08:27:36.461]                   {
[08:27:36.461]                     NULL
[08:27:36.461]                     RNGkind("Mersenne-Twister")
[08:27:36.461]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:36.461]                       inherits = FALSE)
[08:27:36.461]                   }
[08:27:36.461]                   options(future.plan = NULL)
[08:27:36.461]                   if (is.na(NA_character_)) 
[08:27:36.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:36.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:36.461]                     .init = FALSE)
[08:27:36.461]                 }
[08:27:36.461]             }
[08:27:36.461]         }
[08:27:36.461]     })
[08:27:36.461]     if (TRUE) {
[08:27:36.461]         base::sink(type = "output", split = FALSE)
[08:27:36.461]         if (TRUE) {
[08:27:36.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:36.461]         }
[08:27:36.461]         else {
[08:27:36.461]             ...future.result["stdout"] <- base::list(NULL)
[08:27:36.461]         }
[08:27:36.461]         base::close(...future.stdout)
[08:27:36.461]         ...future.stdout <- NULL
[08:27:36.461]     }
[08:27:36.461]     ...future.result$conditions <- ...future.conditions
[08:27:36.461]     ...future.result$finished <- base::Sys.time()
[08:27:36.461]     ...future.result
[08:27:36.461] }
[08:27:36.463] plan(): Setting new future strategy stack:
[08:27:36.463] List of future strategies:
[08:27:36.463] 1. sequential:
[08:27:36.463]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:36.463]    - tweaked: FALSE
[08:27:36.463]    - call: NULL
[08:27:36.463] plan(): nbrOfWorkers() = 1
[08:27:36.464] plan(): Setting new future strategy stack:
[08:27:36.464] List of future strategies:
[08:27:36.464] 1. future:
[08:27:36.464]    - args: function (..., workers = "<NULL>")
[08:27:36.464]    - tweaked: FALSE
[08:27:36.464]    - call: plan(foo)
[08:27:36.464] plan(): nbrOfWorkers() = Inf
[08:27:36.464] SequentialFuture started (and completed)
[1] 42
[08:27:36.466] getGlobalsAndPackages() ...
[08:27:36.466] 
[08:27:36.467] - globals: [0] <none>
[08:27:36.467] getGlobalsAndPackages() ... DONE
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x557b19714a58
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ebea613b-9830-9994-0823-211ca6d0ccc4
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:36.881] Packages needed by the future expression (n = 0): <none>
[08:27:36.881] Packages needed by future strategies (n = 0): <none>
[08:27:36.881] {
[08:27:36.881]     {
[08:27:36.881]         {
[08:27:36.881]             ...future.startTime <- base::Sys.time()
[08:27:36.881]             {
[08:27:36.881]                 {
[08:27:36.881]                   {
[08:27:36.881]                     {
[08:27:36.881]                       base::local({
[08:27:36.881]                         has_future <- base::requireNamespace("future", 
[08:27:36.881]                           quietly = TRUE)
[08:27:36.881]                         if (has_future) {
[08:27:36.881]                           ns <- base::getNamespace("future")
[08:27:36.881]                           version <- ns[[".package"]][["version"]]
[08:27:36.881]                           if (is.null(version)) 
[08:27:36.881]                             version <- utils::packageVersion("future")
[08:27:36.881]                         }
[08:27:36.881]                         else {
[08:27:36.881]                           version <- NULL
[08:27:36.881]                         }
[08:27:36.881]                         if (!has_future || version < "1.8.0") {
[08:27:36.881]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:36.881]                             "", base::R.version$version.string), 
[08:27:36.881]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:36.881]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:36.881]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:36.881]                               "release", "version")], collapse = " "), 
[08:27:36.881]                             hostname = base::Sys.info()[["nodename"]])
[08:27:36.881]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:36.881]                             info)
[08:27:36.881]                           info <- base::paste(info, collapse = "; ")
[08:27:36.881]                           if (!has_future) {
[08:27:36.881]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:36.881]                               info)
[08:27:36.881]                           }
[08:27:36.881]                           else {
[08:27:36.881]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:36.881]                               info, version)
[08:27:36.881]                           }
[08:27:36.881]                           base::stop(msg)
[08:27:36.881]                         }
[08:27:36.881]                       })
[08:27:36.881]                     }
[08:27:36.881]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:36.881]                     base::options(mc.cores = 1L)
[08:27:36.881]                   }
[08:27:36.881]                   ...future.strategy.old <- future::plan("list")
[08:27:36.881]                   options(future.plan = NULL)
[08:27:36.881]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.881]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:36.881]                 }
[08:27:36.881]                 ...future.workdir <- getwd()
[08:27:36.881]             }
[08:27:36.881]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:36.881]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:36.881]         }
[08:27:36.881]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:36.881]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:36.881]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:36.881]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:36.881]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:36.881]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:36.881]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:36.881]             base::names(...future.oldOptions))
[08:27:36.881]     }
[08:27:36.881]     if (FALSE) {
[08:27:36.881]     }
[08:27:36.881]     else {
[08:27:36.881]         if (TRUE) {
[08:27:36.881]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:36.881]                 open = "w")
[08:27:36.881]         }
[08:27:36.881]         else {
[08:27:36.881]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:36.881]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:36.881]         }
[08:27:36.881]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:36.881]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:36.881]             base::sink(type = "output", split = FALSE)
[08:27:36.881]             base::close(...future.stdout)
[08:27:36.881]         }, add = TRUE)
[08:27:36.881]     }
[08:27:36.881]     ...future.frame <- base::sys.nframe()
[08:27:36.881]     ...future.conditions <- base::list()
[08:27:36.881]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:36.881]     if (FALSE) {
[08:27:36.881]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:36.881]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:36.881]     }
[08:27:36.881]     ...future.result <- base::tryCatch({
[08:27:36.881]         base::withCallingHandlers({
[08:27:36.881]             ...future.value <- base::withVisible(base::local({
[08:27:36.881]                 ...future.makeSendCondition <- base::local({
[08:27:36.881]                   sendCondition <- NULL
[08:27:36.881]                   function(frame = 1L) {
[08:27:36.881]                     if (is.function(sendCondition)) 
[08:27:36.881]                       return(sendCondition)
[08:27:36.881]                     ns <- getNamespace("parallel")
[08:27:36.881]                     if (exists("sendData", mode = "function", 
[08:27:36.881]                       envir = ns)) {
[08:27:36.881]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:36.881]                         envir = ns)
[08:27:36.881]                       envir <- sys.frame(frame)
[08:27:36.881]                       master <- NULL
[08:27:36.881]                       while (!identical(envir, .GlobalEnv) && 
[08:27:36.881]                         !identical(envir, emptyenv())) {
[08:27:36.881]                         if (exists("master", mode = "list", envir = envir, 
[08:27:36.881]                           inherits = FALSE)) {
[08:27:36.881]                           master <- get("master", mode = "list", 
[08:27:36.881]                             envir = envir, inherits = FALSE)
[08:27:36.881]                           if (inherits(master, c("SOCKnode", 
[08:27:36.881]                             "SOCK0node"))) {
[08:27:36.881]                             sendCondition <<- function(cond) {
[08:27:36.881]                               data <- list(type = "VALUE", value = cond, 
[08:27:36.881]                                 success = TRUE)
[08:27:36.881]                               parallel_sendData(master, data)
[08:27:36.881]                             }
[08:27:36.881]                             return(sendCondition)
[08:27:36.881]                           }
[08:27:36.881]                         }
[08:27:36.881]                         frame <- frame + 1L
[08:27:36.881]                         envir <- sys.frame(frame)
[08:27:36.881]                       }
[08:27:36.881]                     }
[08:27:36.881]                     sendCondition <<- function(cond) NULL
[08:27:36.881]                   }
[08:27:36.881]                 })
[08:27:36.881]                 withCallingHandlers({
[08:27:36.881]                   {
[08:27:36.881]                     42L
[08:27:36.881]                   }
[08:27:36.881]                 }, immediateCondition = function(cond) {
[08:27:36.881]                   sendCondition <- ...future.makeSendCondition()
[08:27:36.881]                   sendCondition(cond)
[08:27:36.881]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.881]                   {
[08:27:36.881]                     inherits <- base::inherits
[08:27:36.881]                     invokeRestart <- base::invokeRestart
[08:27:36.881]                     is.null <- base::is.null
[08:27:36.881]                     muffled <- FALSE
[08:27:36.881]                     if (inherits(cond, "message")) {
[08:27:36.881]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:36.881]                       if (muffled) 
[08:27:36.881]                         invokeRestart("muffleMessage")
[08:27:36.881]                     }
[08:27:36.881]                     else if (inherits(cond, "warning")) {
[08:27:36.881]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:36.881]                       if (muffled) 
[08:27:36.881]                         invokeRestart("muffleWarning")
[08:27:36.881]                     }
[08:27:36.881]                     else if (inherits(cond, "condition")) {
[08:27:36.881]                       if (!is.null(pattern)) {
[08:27:36.881]                         computeRestarts <- base::computeRestarts
[08:27:36.881]                         grepl <- base::grepl
[08:27:36.881]                         restarts <- computeRestarts(cond)
[08:27:36.881]                         for (restart in restarts) {
[08:27:36.881]                           name <- restart$name
[08:27:36.881]                           if (is.null(name)) 
[08:27:36.881]                             next
[08:27:36.881]                           if (!grepl(pattern, name)) 
[08:27:36.881]                             next
[08:27:36.881]                           invokeRestart(restart)
[08:27:36.881]                           muffled <- TRUE
[08:27:36.881]                           break
[08:27:36.881]                         }
[08:27:36.881]                       }
[08:27:36.881]                     }
[08:27:36.881]                     invisible(muffled)
[08:27:36.881]                   }
[08:27:36.881]                   muffleCondition(cond)
[08:27:36.881]                 })
[08:27:36.881]             }))
[08:27:36.881]             future::FutureResult(value = ...future.value$value, 
[08:27:36.881]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.881]                   ...future.rng), globalenv = if (FALSE) 
[08:27:36.881]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:36.881]                     ...future.globalenv.names))
[08:27:36.881]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:36.881]         }, condition = base::local({
[08:27:36.881]             c <- base::c
[08:27:36.881]             inherits <- base::inherits
[08:27:36.881]             invokeRestart <- base::invokeRestart
[08:27:36.881]             length <- base::length
[08:27:36.881]             list <- base::list
[08:27:36.881]             seq.int <- base::seq.int
[08:27:36.881]             signalCondition <- base::signalCondition
[08:27:36.881]             sys.calls <- base::sys.calls
[08:27:36.881]             `[[` <- base::`[[`
[08:27:36.881]             `+` <- base::`+`
[08:27:36.881]             `<<-` <- base::`<<-`
[08:27:36.881]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:36.881]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:36.881]                   3L)]
[08:27:36.881]             }
[08:27:36.881]             function(cond) {
[08:27:36.881]                 is_error <- inherits(cond, "error")
[08:27:36.881]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:36.881]                   NULL)
[08:27:36.881]                 if (is_error) {
[08:27:36.881]                   sessionInformation <- function() {
[08:27:36.881]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:36.881]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:36.881]                       search = base::search(), system = base::Sys.info())
[08:27:36.881]                   }
[08:27:36.881]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.881]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:36.881]                     cond$call), session = sessionInformation(), 
[08:27:36.881]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:36.881]                   signalCondition(cond)
[08:27:36.881]                 }
[08:27:36.881]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:36.881]                 "immediateCondition"))) {
[08:27:36.881]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:36.881]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.881]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:36.881]                   if (TRUE && !signal) {
[08:27:36.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.881]                     {
[08:27:36.881]                       inherits <- base::inherits
[08:27:36.881]                       invokeRestart <- base::invokeRestart
[08:27:36.881]                       is.null <- base::is.null
[08:27:36.881]                       muffled <- FALSE
[08:27:36.881]                       if (inherits(cond, "message")) {
[08:27:36.881]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.881]                         if (muffled) 
[08:27:36.881]                           invokeRestart("muffleMessage")
[08:27:36.881]                       }
[08:27:36.881]                       else if (inherits(cond, "warning")) {
[08:27:36.881]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.881]                         if (muffled) 
[08:27:36.881]                           invokeRestart("muffleWarning")
[08:27:36.881]                       }
[08:27:36.881]                       else if (inherits(cond, "condition")) {
[08:27:36.881]                         if (!is.null(pattern)) {
[08:27:36.881]                           computeRestarts <- base::computeRestarts
[08:27:36.881]                           grepl <- base::grepl
[08:27:36.881]                           restarts <- computeRestarts(cond)
[08:27:36.881]                           for (restart in restarts) {
[08:27:36.881]                             name <- restart$name
[08:27:36.881]                             if (is.null(name)) 
[08:27:36.881]                               next
[08:27:36.881]                             if (!grepl(pattern, name)) 
[08:27:36.881]                               next
[08:27:36.881]                             invokeRestart(restart)
[08:27:36.881]                             muffled <- TRUE
[08:27:36.881]                             break
[08:27:36.881]                           }
[08:27:36.881]                         }
[08:27:36.881]                       }
[08:27:36.881]                       invisible(muffled)
[08:27:36.881]                     }
[08:27:36.881]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.881]                   }
[08:27:36.881]                 }
[08:27:36.881]                 else {
[08:27:36.881]                   if (TRUE) {
[08:27:36.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.881]                     {
[08:27:36.881]                       inherits <- base::inherits
[08:27:36.881]                       invokeRestart <- base::invokeRestart
[08:27:36.881]                       is.null <- base::is.null
[08:27:36.881]                       muffled <- FALSE
[08:27:36.881]                       if (inherits(cond, "message")) {
[08:27:36.881]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.881]                         if (muffled) 
[08:27:36.881]                           invokeRestart("muffleMessage")
[08:27:36.881]                       }
[08:27:36.881]                       else if (inherits(cond, "warning")) {
[08:27:36.881]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.881]                         if (muffled) 
[08:27:36.881]                           invokeRestart("muffleWarning")
[08:27:36.881]                       }
[08:27:36.881]                       else if (inherits(cond, "condition")) {
[08:27:36.881]                         if (!is.null(pattern)) {
[08:27:36.881]                           computeRestarts <- base::computeRestarts
[08:27:36.881]                           grepl <- base::grepl
[08:27:36.881]                           restarts <- computeRestarts(cond)
[08:27:36.881]                           for (restart in restarts) {
[08:27:36.881]                             name <- restart$name
[08:27:36.881]                             if (is.null(name)) 
[08:27:36.881]                               next
[08:27:36.881]                             if (!grepl(pattern, name)) 
[08:27:36.881]                               next
[08:27:36.881]                             invokeRestart(restart)
[08:27:36.881]                             muffled <- TRUE
[08:27:36.881]                             break
[08:27:36.881]                           }
[08:27:36.881]                         }
[08:27:36.881]                       }
[08:27:36.881]                       invisible(muffled)
[08:27:36.881]                     }
[08:27:36.881]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.881]                   }
[08:27:36.881]                 }
[08:27:36.881]             }
[08:27:36.881]         }))
[08:27:36.881]     }, error = function(ex) {
[08:27:36.881]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:36.881]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.881]                 ...future.rng), started = ...future.startTime, 
[08:27:36.881]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:36.881]             version = "1.8"), class = "FutureResult")
[08:27:36.881]     }, finally = {
[08:27:36.881]         if (!identical(...future.workdir, getwd())) 
[08:27:36.881]             setwd(...future.workdir)
[08:27:36.881]         {
[08:27:36.881]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:36.881]                 ...future.oldOptions$nwarnings <- NULL
[08:27:36.881]             }
[08:27:36.881]             base::options(...future.oldOptions)
[08:27:36.881]             if (.Platform$OS.type == "windows") {
[08:27:36.881]                 old_names <- names(...future.oldEnvVars)
[08:27:36.881]                 envs <- base::Sys.getenv()
[08:27:36.881]                 names <- names(envs)
[08:27:36.881]                 common <- intersect(names, old_names)
[08:27:36.881]                 added <- setdiff(names, old_names)
[08:27:36.881]                 removed <- setdiff(old_names, names)
[08:27:36.881]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:36.881]                   envs[common]]
[08:27:36.881]                 NAMES <- toupper(changed)
[08:27:36.881]                 args <- list()
[08:27:36.881]                 for (kk in seq_along(NAMES)) {
[08:27:36.881]                   name <- changed[[kk]]
[08:27:36.881]                   NAME <- NAMES[[kk]]
[08:27:36.881]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.881]                     next
[08:27:36.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.881]                 }
[08:27:36.881]                 NAMES <- toupper(added)
[08:27:36.881]                 for (kk in seq_along(NAMES)) {
[08:27:36.881]                   name <- added[[kk]]
[08:27:36.881]                   NAME <- NAMES[[kk]]
[08:27:36.881]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.881]                     next
[08:27:36.881]                   args[[name]] <- ""
[08:27:36.881]                 }
[08:27:36.881]                 NAMES <- toupper(removed)
[08:27:36.881]                 for (kk in seq_along(NAMES)) {
[08:27:36.881]                   name <- removed[[kk]]
[08:27:36.881]                   NAME <- NAMES[[kk]]
[08:27:36.881]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.881]                     next
[08:27:36.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.881]                 }
[08:27:36.881]                 if (length(args) > 0) 
[08:27:36.881]                   base::do.call(base::Sys.setenv, args = args)
[08:27:36.881]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:36.881]             }
[08:27:36.881]             else {
[08:27:36.881]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:36.881]             }
[08:27:36.881]             {
[08:27:36.881]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:36.881]                   0L) {
[08:27:36.881]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:36.881]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:36.881]                   base::options(opts)
[08:27:36.881]                 }
[08:27:36.881]                 {
[08:27:36.881]                   {
[08:27:36.881]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:36.881]                     NULL
[08:27:36.881]                   }
[08:27:36.881]                   options(future.plan = NULL)
[08:27:36.881]                   if (is.na(NA_character_)) 
[08:27:36.881]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.881]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:36.881]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:36.881]                     .init = FALSE)
[08:27:36.881]                 }
[08:27:36.881]             }
[08:27:36.881]         }
[08:27:36.881]     })
[08:27:36.881]     if (TRUE) {
[08:27:36.881]         base::sink(type = "output", split = FALSE)
[08:27:36.881]         if (TRUE) {
[08:27:36.881]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:36.881]         }
[08:27:36.881]         else {
[08:27:36.881]             ...future.result["stdout"] <- base::list(NULL)
[08:27:36.881]         }
[08:27:36.881]         base::close(...future.stdout)
[08:27:36.881]         ...future.stdout <- NULL
[08:27:36.881]     }
[08:27:36.881]     ...future.result$conditions <- ...future.conditions
[08:27:36.881]     ...future.result$finished <- base::Sys.time()
[08:27:36.881]     ...future.result
[08:27:36.881] }
[08:27:36.936] MultisessionFuture started
[08:27:36.937] result() for ClusterFuture ...
[08:27:36.937] receiveMessageFromWorker() for ClusterFuture ...
[08:27:36.937] - Validating connection of MultisessionFuture
[08:27:36.969] - received message: FutureResult
[08:27:36.969] - Received FutureResult
[08:27:36.971] - Erased future from FutureRegistry
[08:27:36.971] result() for ClusterFuture ...
[08:27:36.971] - result already collected: FutureResult
[08:27:36.972] result() for ClusterFuture ... done
[08:27:36.972] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:36.972] result() for ClusterFuture ... done
[08:27:36.972] result() for ClusterFuture ...
[08:27:36.972] - result already collected: FutureResult
[08:27:36.972] result() for ClusterFuture ... done
[1] 42
[08:27:36.973] getGlobalsAndPackages() ...
[08:27:36.973] 
[08:27:36.973] - globals: [0] <none>
[08:27:36.973] getGlobalsAndPackages() ... DONE
[08:27:36.980] Packages needed by the future expression (n = 0): <none>
[08:27:36.980] Packages needed by future strategies (n = 0): <none>
[08:27:36.980] {
[08:27:36.980]     {
[08:27:36.980]         {
[08:27:36.980]             ...future.startTime <- base::Sys.time()
[08:27:36.980]             {
[08:27:36.980]                 {
[08:27:36.980]                   {
[08:27:36.980]                     {
[08:27:36.980]                       base::local({
[08:27:36.980]                         has_future <- base::requireNamespace("future", 
[08:27:36.980]                           quietly = TRUE)
[08:27:36.980]                         if (has_future) {
[08:27:36.980]                           ns <- base::getNamespace("future")
[08:27:36.980]                           version <- ns[[".package"]][["version"]]
[08:27:36.980]                           if (is.null(version)) 
[08:27:36.980]                             version <- utils::packageVersion("future")
[08:27:36.980]                         }
[08:27:36.980]                         else {
[08:27:36.980]                           version <- NULL
[08:27:36.980]                         }
[08:27:36.980]                         if (!has_future || version < "1.8.0") {
[08:27:36.980]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:36.980]                             "", base::R.version$version.string), 
[08:27:36.980]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:36.980]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:36.980]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:36.980]                               "release", "version")], collapse = " "), 
[08:27:36.980]                             hostname = base::Sys.info()[["nodename"]])
[08:27:36.980]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:36.980]                             info)
[08:27:36.980]                           info <- base::paste(info, collapse = "; ")
[08:27:36.980]                           if (!has_future) {
[08:27:36.980]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:36.980]                               info)
[08:27:36.980]                           }
[08:27:36.980]                           else {
[08:27:36.980]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:36.980]                               info, version)
[08:27:36.980]                           }
[08:27:36.980]                           base::stop(msg)
[08:27:36.980]                         }
[08:27:36.980]                       })
[08:27:36.980]                     }
[08:27:36.980]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:36.980]                     base::options(mc.cores = 1L)
[08:27:36.980]                   }
[08:27:36.980]                   ...future.strategy.old <- future::plan("list")
[08:27:36.980]                   options(future.plan = NULL)
[08:27:36.980]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.980]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:36.980]                 }
[08:27:36.980]                 ...future.workdir <- getwd()
[08:27:36.980]             }
[08:27:36.980]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:36.980]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:36.980]         }
[08:27:36.980]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:36.980]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:36.980]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:36.980]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:36.980]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:36.980]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:36.980]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:36.980]             base::names(...future.oldOptions))
[08:27:36.980]     }
[08:27:36.980]     if (FALSE) {
[08:27:36.980]     }
[08:27:36.980]     else {
[08:27:36.980]         if (TRUE) {
[08:27:36.980]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:36.980]                 open = "w")
[08:27:36.980]         }
[08:27:36.980]         else {
[08:27:36.980]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:36.980]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:36.980]         }
[08:27:36.980]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:36.980]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:36.980]             base::sink(type = "output", split = FALSE)
[08:27:36.980]             base::close(...future.stdout)
[08:27:36.980]         }, add = TRUE)
[08:27:36.980]     }
[08:27:36.980]     ...future.frame <- base::sys.nframe()
[08:27:36.980]     ...future.conditions <- base::list()
[08:27:36.980]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:36.980]     if (FALSE) {
[08:27:36.980]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:36.980]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:36.980]     }
[08:27:36.980]     ...future.result <- base::tryCatch({
[08:27:36.980]         base::withCallingHandlers({
[08:27:36.980]             ...future.value <- base::withVisible(base::local({
[08:27:36.980]                 ...future.makeSendCondition <- base::local({
[08:27:36.980]                   sendCondition <- NULL
[08:27:36.980]                   function(frame = 1L) {
[08:27:36.980]                     if (is.function(sendCondition)) 
[08:27:36.980]                       return(sendCondition)
[08:27:36.980]                     ns <- getNamespace("parallel")
[08:27:36.980]                     if (exists("sendData", mode = "function", 
[08:27:36.980]                       envir = ns)) {
[08:27:36.980]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:36.980]                         envir = ns)
[08:27:36.980]                       envir <- sys.frame(frame)
[08:27:36.980]                       master <- NULL
[08:27:36.980]                       while (!identical(envir, .GlobalEnv) && 
[08:27:36.980]                         !identical(envir, emptyenv())) {
[08:27:36.980]                         if (exists("master", mode = "list", envir = envir, 
[08:27:36.980]                           inherits = FALSE)) {
[08:27:36.980]                           master <- get("master", mode = "list", 
[08:27:36.980]                             envir = envir, inherits = FALSE)
[08:27:36.980]                           if (inherits(master, c("SOCKnode", 
[08:27:36.980]                             "SOCK0node"))) {
[08:27:36.980]                             sendCondition <<- function(cond) {
[08:27:36.980]                               data <- list(type = "VALUE", value = cond, 
[08:27:36.980]                                 success = TRUE)
[08:27:36.980]                               parallel_sendData(master, data)
[08:27:36.980]                             }
[08:27:36.980]                             return(sendCondition)
[08:27:36.980]                           }
[08:27:36.980]                         }
[08:27:36.980]                         frame <- frame + 1L
[08:27:36.980]                         envir <- sys.frame(frame)
[08:27:36.980]                       }
[08:27:36.980]                     }
[08:27:36.980]                     sendCondition <<- function(cond) NULL
[08:27:36.980]                   }
[08:27:36.980]                 })
[08:27:36.980]                 withCallingHandlers({
[08:27:36.980]                   {
[08:27:36.980]                     42L
[08:27:36.980]                   }
[08:27:36.980]                 }, immediateCondition = function(cond) {
[08:27:36.980]                   sendCondition <- ...future.makeSendCondition()
[08:27:36.980]                   sendCondition(cond)
[08:27:36.980]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.980]                   {
[08:27:36.980]                     inherits <- base::inherits
[08:27:36.980]                     invokeRestart <- base::invokeRestart
[08:27:36.980]                     is.null <- base::is.null
[08:27:36.980]                     muffled <- FALSE
[08:27:36.980]                     if (inherits(cond, "message")) {
[08:27:36.980]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:36.980]                       if (muffled) 
[08:27:36.980]                         invokeRestart("muffleMessage")
[08:27:36.980]                     }
[08:27:36.980]                     else if (inherits(cond, "warning")) {
[08:27:36.980]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:36.980]                       if (muffled) 
[08:27:36.980]                         invokeRestart("muffleWarning")
[08:27:36.980]                     }
[08:27:36.980]                     else if (inherits(cond, "condition")) {
[08:27:36.980]                       if (!is.null(pattern)) {
[08:27:36.980]                         computeRestarts <- base::computeRestarts
[08:27:36.980]                         grepl <- base::grepl
[08:27:36.980]                         restarts <- computeRestarts(cond)
[08:27:36.980]                         for (restart in restarts) {
[08:27:36.980]                           name <- restart$name
[08:27:36.980]                           if (is.null(name)) 
[08:27:36.980]                             next
[08:27:36.980]                           if (!grepl(pattern, name)) 
[08:27:36.980]                             next
[08:27:36.980]                           invokeRestart(restart)
[08:27:36.980]                           muffled <- TRUE
[08:27:36.980]                           break
[08:27:36.980]                         }
[08:27:36.980]                       }
[08:27:36.980]                     }
[08:27:36.980]                     invisible(muffled)
[08:27:36.980]                   }
[08:27:36.980]                   muffleCondition(cond)
[08:27:36.980]                 })
[08:27:36.980]             }))
[08:27:36.980]             future::FutureResult(value = ...future.value$value, 
[08:27:36.980]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.980]                   ...future.rng), globalenv = if (FALSE) 
[08:27:36.980]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:36.980]                     ...future.globalenv.names))
[08:27:36.980]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:36.980]         }, condition = base::local({
[08:27:36.980]             c <- base::c
[08:27:36.980]             inherits <- base::inherits
[08:27:36.980]             invokeRestart <- base::invokeRestart
[08:27:36.980]             length <- base::length
[08:27:36.980]             list <- base::list
[08:27:36.980]             seq.int <- base::seq.int
[08:27:36.980]             signalCondition <- base::signalCondition
[08:27:36.980]             sys.calls <- base::sys.calls
[08:27:36.980]             `[[` <- base::`[[`
[08:27:36.980]             `+` <- base::`+`
[08:27:36.980]             `<<-` <- base::`<<-`
[08:27:36.980]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:36.980]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:36.980]                   3L)]
[08:27:36.980]             }
[08:27:36.980]             function(cond) {
[08:27:36.980]                 is_error <- inherits(cond, "error")
[08:27:36.980]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:36.980]                   NULL)
[08:27:36.980]                 if (is_error) {
[08:27:36.980]                   sessionInformation <- function() {
[08:27:36.980]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:36.980]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:36.980]                       search = base::search(), system = base::Sys.info())
[08:27:36.980]                   }
[08:27:36.980]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.980]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:36.980]                     cond$call), session = sessionInformation(), 
[08:27:36.980]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:36.980]                   signalCondition(cond)
[08:27:36.980]                 }
[08:27:36.980]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:36.980]                 "immediateCondition"))) {
[08:27:36.980]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:36.980]                   ...future.conditions[[length(...future.conditions) + 
[08:27:36.980]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:36.980]                   if (TRUE && !signal) {
[08:27:36.980]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.980]                     {
[08:27:36.980]                       inherits <- base::inherits
[08:27:36.980]                       invokeRestart <- base::invokeRestart
[08:27:36.980]                       is.null <- base::is.null
[08:27:36.980]                       muffled <- FALSE
[08:27:36.980]                       if (inherits(cond, "message")) {
[08:27:36.980]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.980]                         if (muffled) 
[08:27:36.980]                           invokeRestart("muffleMessage")
[08:27:36.980]                       }
[08:27:36.980]                       else if (inherits(cond, "warning")) {
[08:27:36.980]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.980]                         if (muffled) 
[08:27:36.980]                           invokeRestart("muffleWarning")
[08:27:36.980]                       }
[08:27:36.980]                       else if (inherits(cond, "condition")) {
[08:27:36.980]                         if (!is.null(pattern)) {
[08:27:36.980]                           computeRestarts <- base::computeRestarts
[08:27:36.980]                           grepl <- base::grepl
[08:27:36.980]                           restarts <- computeRestarts(cond)
[08:27:36.980]                           for (restart in restarts) {
[08:27:36.980]                             name <- restart$name
[08:27:36.980]                             if (is.null(name)) 
[08:27:36.980]                               next
[08:27:36.980]                             if (!grepl(pattern, name)) 
[08:27:36.980]                               next
[08:27:36.980]                             invokeRestart(restart)
[08:27:36.980]                             muffled <- TRUE
[08:27:36.980]                             break
[08:27:36.980]                           }
[08:27:36.980]                         }
[08:27:36.980]                       }
[08:27:36.980]                       invisible(muffled)
[08:27:36.980]                     }
[08:27:36.980]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.980]                   }
[08:27:36.980]                 }
[08:27:36.980]                 else {
[08:27:36.980]                   if (TRUE) {
[08:27:36.980]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:36.980]                     {
[08:27:36.980]                       inherits <- base::inherits
[08:27:36.980]                       invokeRestart <- base::invokeRestart
[08:27:36.980]                       is.null <- base::is.null
[08:27:36.980]                       muffled <- FALSE
[08:27:36.980]                       if (inherits(cond, "message")) {
[08:27:36.980]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:36.980]                         if (muffled) 
[08:27:36.980]                           invokeRestart("muffleMessage")
[08:27:36.980]                       }
[08:27:36.980]                       else if (inherits(cond, "warning")) {
[08:27:36.980]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:36.980]                         if (muffled) 
[08:27:36.980]                           invokeRestart("muffleWarning")
[08:27:36.980]                       }
[08:27:36.980]                       else if (inherits(cond, "condition")) {
[08:27:36.980]                         if (!is.null(pattern)) {
[08:27:36.980]                           computeRestarts <- base::computeRestarts
[08:27:36.980]                           grepl <- base::grepl
[08:27:36.980]                           restarts <- computeRestarts(cond)
[08:27:36.980]                           for (restart in restarts) {
[08:27:36.980]                             name <- restart$name
[08:27:36.980]                             if (is.null(name)) 
[08:27:36.980]                               next
[08:27:36.980]                             if (!grepl(pattern, name)) 
[08:27:36.980]                               next
[08:27:36.980]                             invokeRestart(restart)
[08:27:36.980]                             muffled <- TRUE
[08:27:36.980]                             break
[08:27:36.980]                           }
[08:27:36.980]                         }
[08:27:36.980]                       }
[08:27:36.980]                       invisible(muffled)
[08:27:36.980]                     }
[08:27:36.980]                     muffleCondition(cond, pattern = "^muffle")
[08:27:36.980]                   }
[08:27:36.980]                 }
[08:27:36.980]             }
[08:27:36.980]         }))
[08:27:36.980]     }, error = function(ex) {
[08:27:36.980]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:36.980]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:36.980]                 ...future.rng), started = ...future.startTime, 
[08:27:36.980]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:36.980]             version = "1.8"), class = "FutureResult")
[08:27:36.980]     }, finally = {
[08:27:36.980]         if (!identical(...future.workdir, getwd())) 
[08:27:36.980]             setwd(...future.workdir)
[08:27:36.980]         {
[08:27:36.980]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:36.980]                 ...future.oldOptions$nwarnings <- NULL
[08:27:36.980]             }
[08:27:36.980]             base::options(...future.oldOptions)
[08:27:36.980]             if (.Platform$OS.type == "windows") {
[08:27:36.980]                 old_names <- names(...future.oldEnvVars)
[08:27:36.980]                 envs <- base::Sys.getenv()
[08:27:36.980]                 names <- names(envs)
[08:27:36.980]                 common <- intersect(names, old_names)
[08:27:36.980]                 added <- setdiff(names, old_names)
[08:27:36.980]                 removed <- setdiff(old_names, names)
[08:27:36.980]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:36.980]                   envs[common]]
[08:27:36.980]                 NAMES <- toupper(changed)
[08:27:36.980]                 args <- list()
[08:27:36.980]                 for (kk in seq_along(NAMES)) {
[08:27:36.980]                   name <- changed[[kk]]
[08:27:36.980]                   NAME <- NAMES[[kk]]
[08:27:36.980]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.980]                     next
[08:27:36.980]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.980]                 }
[08:27:36.980]                 NAMES <- toupper(added)
[08:27:36.980]                 for (kk in seq_along(NAMES)) {
[08:27:36.980]                   name <- added[[kk]]
[08:27:36.980]                   NAME <- NAMES[[kk]]
[08:27:36.980]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.980]                     next
[08:27:36.980]                   args[[name]] <- ""
[08:27:36.980]                 }
[08:27:36.980]                 NAMES <- toupper(removed)
[08:27:36.980]                 for (kk in seq_along(NAMES)) {
[08:27:36.980]                   name <- removed[[kk]]
[08:27:36.980]                   NAME <- NAMES[[kk]]
[08:27:36.980]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:36.980]                     next
[08:27:36.980]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:36.980]                 }
[08:27:36.980]                 if (length(args) > 0) 
[08:27:36.980]                   base::do.call(base::Sys.setenv, args = args)
[08:27:36.980]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:36.980]             }
[08:27:36.980]             else {
[08:27:36.980]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:36.980]             }
[08:27:36.980]             {
[08:27:36.980]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:36.980]                   0L) {
[08:27:36.980]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:36.980]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:36.980]                   base::options(opts)
[08:27:36.980]                 }
[08:27:36.980]                 {
[08:27:36.980]                   {
[08:27:36.980]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:36.980]                     NULL
[08:27:36.980]                   }
[08:27:36.980]                   options(future.plan = NULL)
[08:27:36.980]                   if (is.na(NA_character_)) 
[08:27:36.980]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:36.980]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:36.980]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:36.980]                     .init = FALSE)
[08:27:36.980]                 }
[08:27:36.980]             }
[08:27:36.980]         }
[08:27:36.980]     })
[08:27:36.980]     if (TRUE) {
[08:27:36.980]         base::sink(type = "output", split = FALSE)
[08:27:36.980]         if (TRUE) {
[08:27:36.980]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:36.980]         }
[08:27:36.980]         else {
[08:27:36.980]             ...future.result["stdout"] <- base::list(NULL)
[08:27:36.980]         }
[08:27:36.980]         base::close(...future.stdout)
[08:27:36.980]         ...future.stdout <- NULL
[08:27:36.980]     }
[08:27:36.980]     ...future.result$conditions <- ...future.conditions
[08:27:36.980]     ...future.result$finished <- base::Sys.time()
[08:27:36.980]     ...future.result
[08:27:36.980] }
[08:27:36.983] MultisessionFuture started
[08:27:36.983] result() for ClusterFuture ...
[08:27:36.984] receiveMessageFromWorker() for ClusterFuture ...
[08:27:36.984] - Validating connection of MultisessionFuture
[08:27:37.025] - received message: FutureResult
[08:27:37.025] - Received FutureResult
[08:27:37.026] - Erased future from FutureRegistry
[08:27:37.026] result() for ClusterFuture ...
[08:27:37.026] - result already collected: FutureResult
[08:27:37.026] result() for ClusterFuture ... done
[08:27:37.026] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:37.026] result() for ClusterFuture ... done
[08:27:37.026] result() for ClusterFuture ...
[08:27:37.026] - result already collected: FutureResult
[08:27:37.026] result() for ClusterFuture ... done
[1] 42
[08:27:37.027] getGlobalsAndPackages() ...
[08:27:37.027] Searching for globals...
[08:27:37.028] - globals found: [1] ‘{’
[08:27:37.028] Searching for globals ... DONE
[08:27:37.028] Resolving globals: FALSE
[08:27:37.028] 
[08:27:37.028] 
[08:27:37.028] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ebea613b-9830-9994-0823-211ca6d0ccc4
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:37.029] Packages needed by the future expression (n = 0): <none>
[08:27:37.029] Packages needed by future strategies (n = 0): <none>
[08:27:37.030] {
[08:27:37.030]     {
[08:27:37.030]         {
[08:27:37.030]             ...future.startTime <- base::Sys.time()
[08:27:37.030]             {
[08:27:37.030]                 {
[08:27:37.030]                   {
[08:27:37.030]                     base::local({
[08:27:37.030]                       has_future <- base::requireNamespace("future", 
[08:27:37.030]                         quietly = TRUE)
[08:27:37.030]                       if (has_future) {
[08:27:37.030]                         ns <- base::getNamespace("future")
[08:27:37.030]                         version <- ns[[".package"]][["version"]]
[08:27:37.030]                         if (is.null(version)) 
[08:27:37.030]                           version <- utils::packageVersion("future")
[08:27:37.030]                       }
[08:27:37.030]                       else {
[08:27:37.030]                         version <- NULL
[08:27:37.030]                       }
[08:27:37.030]                       if (!has_future || version < "1.8.0") {
[08:27:37.030]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:37.030]                           "", base::R.version$version.string), 
[08:27:37.030]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:37.030]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:37.030]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:37.030]                             "release", "version")], collapse = " "), 
[08:27:37.030]                           hostname = base::Sys.info()[["nodename"]])
[08:27:37.030]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:37.030]                           info)
[08:27:37.030]                         info <- base::paste(info, collapse = "; ")
[08:27:37.030]                         if (!has_future) {
[08:27:37.030]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:37.030]                             info)
[08:27:37.030]                         }
[08:27:37.030]                         else {
[08:27:37.030]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:37.030]                             info, version)
[08:27:37.030]                         }
[08:27:37.030]                         base::stop(msg)
[08:27:37.030]                       }
[08:27:37.030]                     })
[08:27:37.030]                   }
[08:27:37.030]                   ...future.strategy.old <- future::plan("list")
[08:27:37.030]                   options(future.plan = NULL)
[08:27:37.030]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:37.030]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:37.030]                 }
[08:27:37.030]                 ...future.workdir <- getwd()
[08:27:37.030]             }
[08:27:37.030]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:37.030]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:37.030]         }
[08:27:37.030]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:37.030]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:37.030]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:37.030]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:37.030]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:37.030]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:37.030]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:37.030]             base::names(...future.oldOptions))
[08:27:37.030]     }
[08:27:37.030]     if (FALSE) {
[08:27:37.030]     }
[08:27:37.030]     else {
[08:27:37.030]         if (TRUE) {
[08:27:37.030]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:37.030]                 open = "w")
[08:27:37.030]         }
[08:27:37.030]         else {
[08:27:37.030]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:37.030]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:37.030]         }
[08:27:37.030]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:37.030]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:37.030]             base::sink(type = "output", split = FALSE)
[08:27:37.030]             base::close(...future.stdout)
[08:27:37.030]         }, add = TRUE)
[08:27:37.030]     }
[08:27:37.030]     ...future.frame <- base::sys.nframe()
[08:27:37.030]     ...future.conditions <- base::list()
[08:27:37.030]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:37.030]     if (FALSE) {
[08:27:37.030]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:37.030]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:37.030]     }
[08:27:37.030]     ...future.result <- base::tryCatch({
[08:27:37.030]         base::withCallingHandlers({
[08:27:37.030]             ...future.value <- base::withVisible(base::local({
[08:27:37.030]                 42L
[08:27:37.030]             }))
[08:27:37.030]             future::FutureResult(value = ...future.value$value, 
[08:27:37.030]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:37.030]                   ...future.rng), globalenv = if (FALSE) 
[08:27:37.030]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:37.030]                     ...future.globalenv.names))
[08:27:37.030]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:37.030]         }, condition = base::local({
[08:27:37.030]             c <- base::c
[08:27:37.030]             inherits <- base::inherits
[08:27:37.030]             invokeRestart <- base::invokeRestart
[08:27:37.030]             length <- base::length
[08:27:37.030]             list <- base::list
[08:27:37.030]             seq.int <- base::seq.int
[08:27:37.030]             signalCondition <- base::signalCondition
[08:27:37.030]             sys.calls <- base::sys.calls
[08:27:37.030]             `[[` <- base::`[[`
[08:27:37.030]             `+` <- base::`+`
[08:27:37.030]             `<<-` <- base::`<<-`
[08:27:37.030]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:37.030]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:37.030]                   3L)]
[08:27:37.030]             }
[08:27:37.030]             function(cond) {
[08:27:37.030]                 is_error <- inherits(cond, "error")
[08:27:37.030]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:37.030]                   NULL)
[08:27:37.030]                 if (is_error) {
[08:27:37.030]                   sessionInformation <- function() {
[08:27:37.030]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:37.030]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:37.030]                       search = base::search(), system = base::Sys.info())
[08:27:37.030]                   }
[08:27:37.030]                   ...future.conditions[[length(...future.conditions) + 
[08:27:37.030]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:37.030]                     cond$call), session = sessionInformation(), 
[08:27:37.030]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:37.030]                   signalCondition(cond)
[08:27:37.030]                 }
[08:27:37.030]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:37.030]                 "immediateCondition"))) {
[08:27:37.030]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:37.030]                   ...future.conditions[[length(...future.conditions) + 
[08:27:37.030]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:37.030]                   if (TRUE && !signal) {
[08:27:37.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.030]                     {
[08:27:37.030]                       inherits <- base::inherits
[08:27:37.030]                       invokeRestart <- base::invokeRestart
[08:27:37.030]                       is.null <- base::is.null
[08:27:37.030]                       muffled <- FALSE
[08:27:37.030]                       if (inherits(cond, "message")) {
[08:27:37.030]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:37.030]                         if (muffled) 
[08:27:37.030]                           invokeRestart("muffleMessage")
[08:27:37.030]                       }
[08:27:37.030]                       else if (inherits(cond, "warning")) {
[08:27:37.030]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:37.030]                         if (muffled) 
[08:27:37.030]                           invokeRestart("muffleWarning")
[08:27:37.030]                       }
[08:27:37.030]                       else if (inherits(cond, "condition")) {
[08:27:37.030]                         if (!is.null(pattern)) {
[08:27:37.030]                           computeRestarts <- base::computeRestarts
[08:27:37.030]                           grepl <- base::grepl
[08:27:37.030]                           restarts <- computeRestarts(cond)
[08:27:37.030]                           for (restart in restarts) {
[08:27:37.030]                             name <- restart$name
[08:27:37.030]                             if (is.null(name)) 
[08:27:37.030]                               next
[08:27:37.030]                             if (!grepl(pattern, name)) 
[08:27:37.030]                               next
[08:27:37.030]                             invokeRestart(restart)
[08:27:37.030]                             muffled <- TRUE
[08:27:37.030]                             break
[08:27:37.030]                           }
[08:27:37.030]                         }
[08:27:37.030]                       }
[08:27:37.030]                       invisible(muffled)
[08:27:37.030]                     }
[08:27:37.030]                     muffleCondition(cond, pattern = "^muffle")
[08:27:37.030]                   }
[08:27:37.030]                 }
[08:27:37.030]                 else {
[08:27:37.030]                   if (TRUE) {
[08:27:37.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.030]                     {
[08:27:37.030]                       inherits <- base::inherits
[08:27:37.030]                       invokeRestart <- base::invokeRestart
[08:27:37.030]                       is.null <- base::is.null
[08:27:37.030]                       muffled <- FALSE
[08:27:37.030]                       if (inherits(cond, "message")) {
[08:27:37.030]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:37.030]                         if (muffled) 
[08:27:37.030]                           invokeRestart("muffleMessage")
[08:27:37.030]                       }
[08:27:37.030]                       else if (inherits(cond, "warning")) {
[08:27:37.030]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:37.030]                         if (muffled) 
[08:27:37.030]                           invokeRestart("muffleWarning")
[08:27:37.030]                       }
[08:27:37.030]                       else if (inherits(cond, "condition")) {
[08:27:37.030]                         if (!is.null(pattern)) {
[08:27:37.030]                           computeRestarts <- base::computeRestarts
[08:27:37.030]                           grepl <- base::grepl
[08:27:37.030]                           restarts <- computeRestarts(cond)
[08:27:37.030]                           for (restart in restarts) {
[08:27:37.030]                             name <- restart$name
[08:27:37.030]                             if (is.null(name)) 
[08:27:37.030]                               next
[08:27:37.030]                             if (!grepl(pattern, name)) 
[08:27:37.030]                               next
[08:27:37.030]                             invokeRestart(restart)
[08:27:37.030]                             muffled <- TRUE
[08:27:37.030]                             break
[08:27:37.030]                           }
[08:27:37.030]                         }
[08:27:37.030]                       }
[08:27:37.030]                       invisible(muffled)
[08:27:37.030]                     }
[08:27:37.030]                     muffleCondition(cond, pattern = "^muffle")
[08:27:37.030]                   }
[08:27:37.030]                 }
[08:27:37.030]             }
[08:27:37.030]         }))
[08:27:37.030]     }, error = function(ex) {
[08:27:37.030]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:37.030]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:37.030]                 ...future.rng), started = ...future.startTime, 
[08:27:37.030]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:37.030]             version = "1.8"), class = "FutureResult")
[08:27:37.030]     }, finally = {
[08:27:37.030]         if (!identical(...future.workdir, getwd())) 
[08:27:37.030]             setwd(...future.workdir)
[08:27:37.030]         {
[08:27:37.030]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:37.030]                 ...future.oldOptions$nwarnings <- NULL
[08:27:37.030]             }
[08:27:37.030]             base::options(...future.oldOptions)
[08:27:37.030]             if (.Platform$OS.type == "windows") {
[08:27:37.030]                 old_names <- names(...future.oldEnvVars)
[08:27:37.030]                 envs <- base::Sys.getenv()
[08:27:37.030]                 names <- names(envs)
[08:27:37.030]                 common <- intersect(names, old_names)
[08:27:37.030]                 added <- setdiff(names, old_names)
[08:27:37.030]                 removed <- setdiff(old_names, names)
[08:27:37.030]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:37.030]                   envs[common]]
[08:27:37.030]                 NAMES <- toupper(changed)
[08:27:37.030]                 args <- list()
[08:27:37.030]                 for (kk in seq_along(NAMES)) {
[08:27:37.030]                   name <- changed[[kk]]
[08:27:37.030]                   NAME <- NAMES[[kk]]
[08:27:37.030]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.030]                     next
[08:27:37.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:37.030]                 }
[08:27:37.030]                 NAMES <- toupper(added)
[08:27:37.030]                 for (kk in seq_along(NAMES)) {
[08:27:37.030]                   name <- added[[kk]]
[08:27:37.030]                   NAME <- NAMES[[kk]]
[08:27:37.030]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.030]                     next
[08:27:37.030]                   args[[name]] <- ""
[08:27:37.030]                 }
[08:27:37.030]                 NAMES <- toupper(removed)
[08:27:37.030]                 for (kk in seq_along(NAMES)) {
[08:27:37.030]                   name <- removed[[kk]]
[08:27:37.030]                   NAME <- NAMES[[kk]]
[08:27:37.030]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.030]                     next
[08:27:37.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:37.030]                 }
[08:27:37.030]                 if (length(args) > 0) 
[08:27:37.030]                   base::do.call(base::Sys.setenv, args = args)
[08:27:37.030]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:37.030]             }
[08:27:37.030]             else {
[08:27:37.030]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:37.030]             }
[08:27:37.030]             {
[08:27:37.030]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:37.030]                   0L) {
[08:27:37.030]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:37.030]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:37.030]                   base::options(opts)
[08:27:37.030]                 }
[08:27:37.030]                 {
[08:27:37.030]                   {
[08:27:37.030]                     NULL
[08:27:37.030]                     RNGkind("Mersenne-Twister")
[08:27:37.030]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:37.030]                       inherits = FALSE)
[08:27:37.030]                   }
[08:27:37.030]                   options(future.plan = NULL)
[08:27:37.030]                   if (is.na(NA_character_)) 
[08:27:37.030]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:37.030]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:37.030]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:37.030]                     .init = FALSE)
[08:27:37.030]                 }
[08:27:37.030]             }
[08:27:37.030]         }
[08:27:37.030]     })
[08:27:37.030]     if (TRUE) {
[08:27:37.030]         base::sink(type = "output", split = FALSE)
[08:27:37.030]         if (TRUE) {
[08:27:37.030]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:37.030]         }
[08:27:37.030]         else {
[08:27:37.030]             ...future.result["stdout"] <- base::list(NULL)
[08:27:37.030]         }
[08:27:37.030]         base::close(...future.stdout)
[08:27:37.030]         ...future.stdout <- NULL
[08:27:37.030]     }
[08:27:37.030]     ...future.result$conditions <- ...future.conditions
[08:27:37.030]     ...future.result$finished <- base::Sys.time()
[08:27:37.030]     ...future.result
[08:27:37.030] }
[08:27:37.032] plan(): Setting new future strategy stack:
[08:27:37.032] List of future strategies:
[08:27:37.032] 1. sequential:
[08:27:37.032]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:37.032]    - tweaked: FALSE
[08:27:37.032]    - call: NULL
[08:27:37.032] plan(): nbrOfWorkers() = 1
[08:27:37.033] plan(): Setting new future strategy stack:
[08:27:37.033] List of future strategies:
[08:27:37.033] 1. future:
[08:27:37.033]    - args: function (..., workers = "<NULL>")
[08:27:37.033]    - tweaked: FALSE
[08:27:37.033]    - call: plan(foo)
[08:27:37.034] plan(): nbrOfWorkers() = Inf
[08:27:37.034] SequentialFuture started (and completed)
[1] 42
[08:27:37.034] getGlobalsAndPackages() ...
[08:27:37.034] Searching for globals...
[08:27:37.035] - globals found: [1] ‘{’
[08:27:37.035] Searching for globals ... DONE
[08:27:37.035] Resolving globals: FALSE
[08:27:37.035] 
[08:27:37.035] 
[08:27:37.035] getGlobalsAndPackages() ... DONE
[08:27:37.036] Packages needed by the future expression (n = 0): <none>
[08:27:37.036] Packages needed by future strategies (n = 0): <none>
[08:27:37.036] {
[08:27:37.036]     {
[08:27:37.036]         {
[08:27:37.036]             ...future.startTime <- base::Sys.time()
[08:27:37.036]             {
[08:27:37.036]                 {
[08:27:37.036]                   {
[08:27:37.036]                     base::local({
[08:27:37.036]                       has_future <- base::requireNamespace("future", 
[08:27:37.036]                         quietly = TRUE)
[08:27:37.036]                       if (has_future) {
[08:27:37.036]                         ns <- base::getNamespace("future")
[08:27:37.036]                         version <- ns[[".package"]][["version"]]
[08:27:37.036]                         if (is.null(version)) 
[08:27:37.036]                           version <- utils::packageVersion("future")
[08:27:37.036]                       }
[08:27:37.036]                       else {
[08:27:37.036]                         version <- NULL
[08:27:37.036]                       }
[08:27:37.036]                       if (!has_future || version < "1.8.0") {
[08:27:37.036]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:37.036]                           "", base::R.version$version.string), 
[08:27:37.036]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:37.036]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:37.036]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:37.036]                             "release", "version")], collapse = " "), 
[08:27:37.036]                           hostname = base::Sys.info()[["nodename"]])
[08:27:37.036]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:37.036]                           info)
[08:27:37.036]                         info <- base::paste(info, collapse = "; ")
[08:27:37.036]                         if (!has_future) {
[08:27:37.036]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:37.036]                             info)
[08:27:37.036]                         }
[08:27:37.036]                         else {
[08:27:37.036]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:37.036]                             info, version)
[08:27:37.036]                         }
[08:27:37.036]                         base::stop(msg)
[08:27:37.036]                       }
[08:27:37.036]                     })
[08:27:37.036]                   }
[08:27:37.036]                   ...future.strategy.old <- future::plan("list")
[08:27:37.036]                   options(future.plan = NULL)
[08:27:37.036]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:37.036]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:37.036]                 }
[08:27:37.036]                 ...future.workdir <- getwd()
[08:27:37.036]             }
[08:27:37.036]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:37.036]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:37.036]         }
[08:27:37.036]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:37.036]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:37.036]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:37.036]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:37.036]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:37.036]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:37.036]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:37.036]             base::names(...future.oldOptions))
[08:27:37.036]     }
[08:27:37.036]     if (FALSE) {
[08:27:37.036]     }
[08:27:37.036]     else {
[08:27:37.036]         if (TRUE) {
[08:27:37.036]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:37.036]                 open = "w")
[08:27:37.036]         }
[08:27:37.036]         else {
[08:27:37.036]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:37.036]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:37.036]         }
[08:27:37.036]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:37.036]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:37.036]             base::sink(type = "output", split = FALSE)
[08:27:37.036]             base::close(...future.stdout)
[08:27:37.036]         }, add = TRUE)
[08:27:37.036]     }
[08:27:37.036]     ...future.frame <- base::sys.nframe()
[08:27:37.036]     ...future.conditions <- base::list()
[08:27:37.036]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:37.036]     if (FALSE) {
[08:27:37.036]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:37.036]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:37.036]     }
[08:27:37.036]     ...future.result <- base::tryCatch({
[08:27:37.036]         base::withCallingHandlers({
[08:27:37.036]             ...future.value <- base::withVisible(base::local({
[08:27:37.036]                 42L
[08:27:37.036]             }))
[08:27:37.036]             future::FutureResult(value = ...future.value$value, 
[08:27:37.036]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:37.036]                   ...future.rng), globalenv = if (FALSE) 
[08:27:37.036]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:37.036]                     ...future.globalenv.names))
[08:27:37.036]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:37.036]         }, condition = base::local({
[08:27:37.036]             c <- base::c
[08:27:37.036]             inherits <- base::inherits
[08:27:37.036]             invokeRestart <- base::invokeRestart
[08:27:37.036]             length <- base::length
[08:27:37.036]             list <- base::list
[08:27:37.036]             seq.int <- base::seq.int
[08:27:37.036]             signalCondition <- base::signalCondition
[08:27:37.036]             sys.calls <- base::sys.calls
[08:27:37.036]             `[[` <- base::`[[`
[08:27:37.036]             `+` <- base::`+`
[08:27:37.036]             `<<-` <- base::`<<-`
[08:27:37.036]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:37.036]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:37.036]                   3L)]
[08:27:37.036]             }
[08:27:37.036]             function(cond) {
[08:27:37.036]                 is_error <- inherits(cond, "error")
[08:27:37.036]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:37.036]                   NULL)
[08:27:37.036]                 if (is_error) {
[08:27:37.036]                   sessionInformation <- function() {
[08:27:37.036]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:37.036]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:37.036]                       search = base::search(), system = base::Sys.info())
[08:27:37.036]                   }
[08:27:37.036]                   ...future.conditions[[length(...future.conditions) + 
[08:27:37.036]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:37.036]                     cond$call), session = sessionInformation(), 
[08:27:37.036]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:37.036]                   signalCondition(cond)
[08:27:37.036]                 }
[08:27:37.036]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:37.036]                 "immediateCondition"))) {
[08:27:37.036]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:37.036]                   ...future.conditions[[length(...future.conditions) + 
[08:27:37.036]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:37.036]                   if (TRUE && !signal) {
[08:27:37.036]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.036]                     {
[08:27:37.036]                       inherits <- base::inherits
[08:27:37.036]                       invokeRestart <- base::invokeRestart
[08:27:37.036]                       is.null <- base::is.null
[08:27:37.036]                       muffled <- FALSE
[08:27:37.036]                       if (inherits(cond, "message")) {
[08:27:37.036]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:37.036]                         if (muffled) 
[08:27:37.036]                           invokeRestart("muffleMessage")
[08:27:37.036]                       }
[08:27:37.036]                       else if (inherits(cond, "warning")) {
[08:27:37.036]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:37.036]                         if (muffled) 
[08:27:37.036]                           invokeRestart("muffleWarning")
[08:27:37.036]                       }
[08:27:37.036]                       else if (inherits(cond, "condition")) {
[08:27:37.036]                         if (!is.null(pattern)) {
[08:27:37.036]                           computeRestarts <- base::computeRestarts
[08:27:37.036]                           grepl <- base::grepl
[08:27:37.036]                           restarts <- computeRestarts(cond)
[08:27:37.036]                           for (restart in restarts) {
[08:27:37.036]                             name <- restart$name
[08:27:37.036]                             if (is.null(name)) 
[08:27:37.036]                               next
[08:27:37.036]                             if (!grepl(pattern, name)) 
[08:27:37.036]                               next
[08:27:37.036]                             invokeRestart(restart)
[08:27:37.036]                             muffled <- TRUE
[08:27:37.036]                             break
[08:27:37.036]                           }
[08:27:37.036]                         }
[08:27:37.036]                       }
[08:27:37.036]                       invisible(muffled)
[08:27:37.036]                     }
[08:27:37.036]                     muffleCondition(cond, pattern = "^muffle")
[08:27:37.036]                   }
[08:27:37.036]                 }
[08:27:37.036]                 else {
[08:27:37.036]                   if (TRUE) {
[08:27:37.036]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.036]                     {
[08:27:37.036]                       inherits <- base::inherits
[08:27:37.036]                       invokeRestart <- base::invokeRestart
[08:27:37.036]                       is.null <- base::is.null
[08:27:37.036]                       muffled <- FALSE
[08:27:37.036]                       if (inherits(cond, "message")) {
[08:27:37.036]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:37.036]                         if (muffled) 
[08:27:37.036]                           invokeRestart("muffleMessage")
[08:27:37.036]                       }
[08:27:37.036]                       else if (inherits(cond, "warning")) {
[08:27:37.036]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:37.036]                         if (muffled) 
[08:27:37.036]                           invokeRestart("muffleWarning")
[08:27:37.036]                       }
[08:27:37.036]                       else if (inherits(cond, "condition")) {
[08:27:37.036]                         if (!is.null(pattern)) {
[08:27:37.036]                           computeRestarts <- base::computeRestarts
[08:27:37.036]                           grepl <- base::grepl
[08:27:37.036]                           restarts <- computeRestarts(cond)
[08:27:37.036]                           for (restart in restarts) {
[08:27:37.036]                             name <- restart$name
[08:27:37.036]                             if (is.null(name)) 
[08:27:37.036]                               next
[08:27:37.036]                             if (!grepl(pattern, name)) 
[08:27:37.036]                               next
[08:27:37.036]                             invokeRestart(restart)
[08:27:37.036]                             muffled <- TRUE
[08:27:37.036]                             break
[08:27:37.036]                           }
[08:27:37.036]                         }
[08:27:37.036]                       }
[08:27:37.036]                       invisible(muffled)
[08:27:37.036]                     }
[08:27:37.036]                     muffleCondition(cond, pattern = "^muffle")
[08:27:37.036]                   }
[08:27:37.036]                 }
[08:27:37.036]             }
[08:27:37.036]         }))
[08:27:37.036]     }, error = function(ex) {
[08:27:37.036]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:37.036]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:37.036]                 ...future.rng), started = ...future.startTime, 
[08:27:37.036]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:37.036]             version = "1.8"), class = "FutureResult")
[08:27:37.036]     }, finally = {
[08:27:37.036]         if (!identical(...future.workdir, getwd())) 
[08:27:37.036]             setwd(...future.workdir)
[08:27:37.036]         {
[08:27:37.036]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:37.036]                 ...future.oldOptions$nwarnings <- NULL
[08:27:37.036]             }
[08:27:37.036]             base::options(...future.oldOptions)
[08:27:37.036]             if (.Platform$OS.type == "windows") {
[08:27:37.036]                 old_names <- names(...future.oldEnvVars)
[08:27:37.036]                 envs <- base::Sys.getenv()
[08:27:37.036]                 names <- names(envs)
[08:27:37.036]                 common <- intersect(names, old_names)
[08:27:37.036]                 added <- setdiff(names, old_names)
[08:27:37.036]                 removed <- setdiff(old_names, names)
[08:27:37.036]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:37.036]                   envs[common]]
[08:27:37.036]                 NAMES <- toupper(changed)
[08:27:37.036]                 args <- list()
[08:27:37.036]                 for (kk in seq_along(NAMES)) {
[08:27:37.036]                   name <- changed[[kk]]
[08:27:37.036]                   NAME <- NAMES[[kk]]
[08:27:37.036]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.036]                     next
[08:27:37.036]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:37.036]                 }
[08:27:37.036]                 NAMES <- toupper(added)
[08:27:37.036]                 for (kk in seq_along(NAMES)) {
[08:27:37.036]                   name <- added[[kk]]
[08:27:37.036]                   NAME <- NAMES[[kk]]
[08:27:37.036]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.036]                     next
[08:27:37.036]                   args[[name]] <- ""
[08:27:37.036]                 }
[08:27:37.036]                 NAMES <- toupper(removed)
[08:27:37.036]                 for (kk in seq_along(NAMES)) {
[08:27:37.036]                   name <- removed[[kk]]
[08:27:37.036]                   NAME <- NAMES[[kk]]
[08:27:37.036]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.036]                     next
[08:27:37.036]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:37.036]                 }
[08:27:37.036]                 if (length(args) > 0) 
[08:27:37.036]                   base::do.call(base::Sys.setenv, args = args)
[08:27:37.036]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:37.036]             }
[08:27:37.036]             else {
[08:27:37.036]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:37.036]             }
[08:27:37.036]             {
[08:27:37.036]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:37.036]                   0L) {
[08:27:37.036]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:37.036]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:37.036]                   base::options(opts)
[08:27:37.036]                 }
[08:27:37.036]                 {
[08:27:37.036]                   {
[08:27:37.036]                     NULL
[08:27:37.036]                     RNGkind("Mersenne-Twister")
[08:27:37.036]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:37.036]                       inherits = FALSE)
[08:27:37.036]                   }
[08:27:37.036]                   options(future.plan = NULL)
[08:27:37.036]                   if (is.na(NA_character_)) 
[08:27:37.036]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:37.036]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:37.036]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:37.036]                     .init = FALSE)
[08:27:37.036]                 }
[08:27:37.036]             }
[08:27:37.036]         }
[08:27:37.036]     })
[08:27:37.036]     if (TRUE) {
[08:27:37.036]         base::sink(type = "output", split = FALSE)
[08:27:37.036]         if (TRUE) {
[08:27:37.036]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:37.036]         }
[08:27:37.036]         else {
[08:27:37.036]             ...future.result["stdout"] <- base::list(NULL)
[08:27:37.036]         }
[08:27:37.036]         base::close(...future.stdout)
[08:27:37.036]         ...future.stdout <- NULL
[08:27:37.036]     }
[08:27:37.036]     ...future.result$conditions <- ...future.conditions
[08:27:37.036]     ...future.result$finished <- base::Sys.time()
[08:27:37.036]     ...future.result
[08:27:37.036] }
[08:27:37.038] plan(): Setting new future strategy stack:
[08:27:37.038] List of future strategies:
[08:27:37.038] 1. sequential:
[08:27:37.038]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:37.038]    - tweaked: FALSE
[08:27:37.038]    - call: NULL
[08:27:37.039] plan(): nbrOfWorkers() = 1
[08:27:37.040] plan(): Setting new future strategy stack:
[08:27:37.040] List of future strategies:
[08:27:37.040] 1. future:
[08:27:37.040]    - args: function (..., workers = "<NULL>")
[08:27:37.040]    - tweaked: FALSE
[08:27:37.040]    - call: plan(foo)
[08:27:37.040] plan(): nbrOfWorkers() = Inf
[08:27:37.040] SequentialFuture started (and completed)
[1] 42
[08:27:37.041] getGlobalsAndPackages() ...
[08:27:37.041] 
[08:27:37.041] - globals: [0] <none>
[08:27:37.041] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x557b1824e108
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ebea613b-9830-9994-0823-211ca6d0ccc4
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:37.043] Packages needed by the future expression (n = 0): <none>
[08:27:37.043] Packages needed by future strategies (n = 0): <none>
[08:27:37.043] {
[08:27:37.043]     {
[08:27:37.043]         {
[08:27:37.043]             ...future.startTime <- base::Sys.time()
[08:27:37.043]             {
[08:27:37.043]                 {
[08:27:37.043]                   {
[08:27:37.043]                     {
[08:27:37.043]                       base::local({
[08:27:37.043]                         has_future <- base::requireNamespace("future", 
[08:27:37.043]                           quietly = TRUE)
[08:27:37.043]                         if (has_future) {
[08:27:37.043]                           ns <- base::getNamespace("future")
[08:27:37.043]                           version <- ns[[".package"]][["version"]]
[08:27:37.043]                           if (is.null(version)) 
[08:27:37.043]                             version <- utils::packageVersion("future")
[08:27:37.043]                         }
[08:27:37.043]                         else {
[08:27:37.043]                           version <- NULL
[08:27:37.043]                         }
[08:27:37.043]                         if (!has_future || version < "1.8.0") {
[08:27:37.043]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:37.043]                             "", base::R.version$version.string), 
[08:27:37.043]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:37.043]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:37.043]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:37.043]                               "release", "version")], collapse = " "), 
[08:27:37.043]                             hostname = base::Sys.info()[["nodename"]])
[08:27:37.043]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:37.043]                             info)
[08:27:37.043]                           info <- base::paste(info, collapse = "; ")
[08:27:37.043]                           if (!has_future) {
[08:27:37.043]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:37.043]                               info)
[08:27:37.043]                           }
[08:27:37.043]                           else {
[08:27:37.043]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:37.043]                               info, version)
[08:27:37.043]                           }
[08:27:37.043]                           base::stop(msg)
[08:27:37.043]                         }
[08:27:37.043]                       })
[08:27:37.043]                     }
[08:27:37.043]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:37.043]                     base::options(mc.cores = 1L)
[08:27:37.043]                   }
[08:27:37.043]                   ...future.strategy.old <- future::plan("list")
[08:27:37.043]                   options(future.plan = NULL)
[08:27:37.043]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:37.043]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:37.043]                 }
[08:27:37.043]                 ...future.workdir <- getwd()
[08:27:37.043]             }
[08:27:37.043]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:37.043]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:37.043]         }
[08:27:37.043]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:37.043]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:37.043]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:37.043]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:37.043]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:37.043]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:37.043]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:37.043]             base::names(...future.oldOptions))
[08:27:37.043]     }
[08:27:37.043]     if (FALSE) {
[08:27:37.043]     }
[08:27:37.043]     else {
[08:27:37.043]         if (TRUE) {
[08:27:37.043]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:37.043]                 open = "w")
[08:27:37.043]         }
[08:27:37.043]         else {
[08:27:37.043]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:37.043]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:37.043]         }
[08:27:37.043]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:37.043]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:37.043]             base::sink(type = "output", split = FALSE)
[08:27:37.043]             base::close(...future.stdout)
[08:27:37.043]         }, add = TRUE)
[08:27:37.043]     }
[08:27:37.043]     ...future.frame <- base::sys.nframe()
[08:27:37.043]     ...future.conditions <- base::list()
[08:27:37.043]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:37.043]     if (FALSE) {
[08:27:37.043]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:37.043]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:37.043]     }
[08:27:37.043]     ...future.result <- base::tryCatch({
[08:27:37.043]         base::withCallingHandlers({
[08:27:37.043]             ...future.value <- base::withVisible(base::local({
[08:27:37.043]                 withCallingHandlers({
[08:27:37.043]                   {
[08:27:37.043]                     42L
[08:27:37.043]                   }
[08:27:37.043]                 }, immediateCondition = function(cond) {
[08:27:37.043]                   save_rds <- function (object, pathname, ...) 
[08:27:37.043]                   {
[08:27:37.043]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:37.043]                     if (file_test("-f", pathname_tmp)) {
[08:27:37.043]                       fi_tmp <- file.info(pathname_tmp)
[08:27:37.043]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:37.043]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:37.043]                         fi_tmp[["mtime"]])
[08:27:37.043]                     }
[08:27:37.043]                     tryCatch({
[08:27:37.043]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:37.043]                     }, error = function(ex) {
[08:27:37.043]                       msg <- conditionMessage(ex)
[08:27:37.043]                       fi_tmp <- file.info(pathname_tmp)
[08:27:37.043]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:37.043]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:37.043]                         fi_tmp[["mtime"]], msg)
[08:27:37.043]                       ex$message <- msg
[08:27:37.043]                       stop(ex)
[08:27:37.043]                     })
[08:27:37.043]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:37.043]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:37.043]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:37.043]                       fi_tmp <- file.info(pathname_tmp)
[08:27:37.043]                       fi <- file.info(pathname)
[08:27:37.043]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:37.043]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:37.043]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:37.043]                         fi[["size"]], fi[["mtime"]])
[08:27:37.043]                       stop(msg)
[08:27:37.043]                     }
[08:27:37.043]                     invisible(pathname)
[08:27:37.043]                   }
[08:27:37.043]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:37.043]                     rootPath = tempdir()) 
[08:27:37.043]                   {
[08:27:37.043]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:37.043]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:37.043]                       tmpdir = path, fileext = ".rds")
[08:27:37.043]                     save_rds(obj, file)
[08:27:37.043]                   }
[08:27:37.043]                   saveImmediateCondition(cond, path = "/tmp/Rtmpt925uL/.future/immediateConditions")
[08:27:37.043]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.043]                   {
[08:27:37.043]                     inherits <- base::inherits
[08:27:37.043]                     invokeRestart <- base::invokeRestart
[08:27:37.043]                     is.null <- base::is.null
[08:27:37.043]                     muffled <- FALSE
[08:27:37.043]                     if (inherits(cond, "message")) {
[08:27:37.043]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:37.043]                       if (muffled) 
[08:27:37.043]                         invokeRestart("muffleMessage")
[08:27:37.043]                     }
[08:27:37.043]                     else if (inherits(cond, "warning")) {
[08:27:37.043]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:37.043]                       if (muffled) 
[08:27:37.043]                         invokeRestart("muffleWarning")
[08:27:37.043]                     }
[08:27:37.043]                     else if (inherits(cond, "condition")) {
[08:27:37.043]                       if (!is.null(pattern)) {
[08:27:37.043]                         computeRestarts <- base::computeRestarts
[08:27:37.043]                         grepl <- base::grepl
[08:27:37.043]                         restarts <- computeRestarts(cond)
[08:27:37.043]                         for (restart in restarts) {
[08:27:37.043]                           name <- restart$name
[08:27:37.043]                           if (is.null(name)) 
[08:27:37.043]                             next
[08:27:37.043]                           if (!grepl(pattern, name)) 
[08:27:37.043]                             next
[08:27:37.043]                           invokeRestart(restart)
[08:27:37.043]                           muffled <- TRUE
[08:27:37.043]                           break
[08:27:37.043]                         }
[08:27:37.043]                       }
[08:27:37.043]                     }
[08:27:37.043]                     invisible(muffled)
[08:27:37.043]                   }
[08:27:37.043]                   muffleCondition(cond)
[08:27:37.043]                 })
[08:27:37.043]             }))
[08:27:37.043]             future::FutureResult(value = ...future.value$value, 
[08:27:37.043]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:37.043]                   ...future.rng), globalenv = if (FALSE) 
[08:27:37.043]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:37.043]                     ...future.globalenv.names))
[08:27:37.043]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:37.043]         }, condition = base::local({
[08:27:37.043]             c <- base::c
[08:27:37.043]             inherits <- base::inherits
[08:27:37.043]             invokeRestart <- base::invokeRestart
[08:27:37.043]             length <- base::length
[08:27:37.043]             list <- base::list
[08:27:37.043]             seq.int <- base::seq.int
[08:27:37.043]             signalCondition <- base::signalCondition
[08:27:37.043]             sys.calls <- base::sys.calls
[08:27:37.043]             `[[` <- base::`[[`
[08:27:37.043]             `+` <- base::`+`
[08:27:37.043]             `<<-` <- base::`<<-`
[08:27:37.043]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:37.043]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:37.043]                   3L)]
[08:27:37.043]             }
[08:27:37.043]             function(cond) {
[08:27:37.043]                 is_error <- inherits(cond, "error")
[08:27:37.043]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:37.043]                   NULL)
[08:27:37.043]                 if (is_error) {
[08:27:37.043]                   sessionInformation <- function() {
[08:27:37.043]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:37.043]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:37.043]                       search = base::search(), system = base::Sys.info())
[08:27:37.043]                   }
[08:27:37.043]                   ...future.conditions[[length(...future.conditions) + 
[08:27:37.043]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:37.043]                     cond$call), session = sessionInformation(), 
[08:27:37.043]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:37.043]                   signalCondition(cond)
[08:27:37.043]                 }
[08:27:37.043]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:37.043]                 "immediateCondition"))) {
[08:27:37.043]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:37.043]                   ...future.conditions[[length(...future.conditions) + 
[08:27:37.043]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:37.043]                   if (TRUE && !signal) {
[08:27:37.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.043]                     {
[08:27:37.043]                       inherits <- base::inherits
[08:27:37.043]                       invokeRestart <- base::invokeRestart
[08:27:37.043]                       is.null <- base::is.null
[08:27:37.043]                       muffled <- FALSE
[08:27:37.043]                       if (inherits(cond, "message")) {
[08:27:37.043]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:37.043]                         if (muffled) 
[08:27:37.043]                           invokeRestart("muffleMessage")
[08:27:37.043]                       }
[08:27:37.043]                       else if (inherits(cond, "warning")) {
[08:27:37.043]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:37.043]                         if (muffled) 
[08:27:37.043]                           invokeRestart("muffleWarning")
[08:27:37.043]                       }
[08:27:37.043]                       else if (inherits(cond, "condition")) {
[08:27:37.043]                         if (!is.null(pattern)) {
[08:27:37.043]                           computeRestarts <- base::computeRestarts
[08:27:37.043]                           grepl <- base::grepl
[08:27:37.043]                           restarts <- computeRestarts(cond)
[08:27:37.043]                           for (restart in restarts) {
[08:27:37.043]                             name <- restart$name
[08:27:37.043]                             if (is.null(name)) 
[08:27:37.043]                               next
[08:27:37.043]                             if (!grepl(pattern, name)) 
[08:27:37.043]                               next
[08:27:37.043]                             invokeRestart(restart)
[08:27:37.043]                             muffled <- TRUE
[08:27:37.043]                             break
[08:27:37.043]                           }
[08:27:37.043]                         }
[08:27:37.043]                       }
[08:27:37.043]                       invisible(muffled)
[08:27:37.043]                     }
[08:27:37.043]                     muffleCondition(cond, pattern = "^muffle")
[08:27:37.043]                   }
[08:27:37.043]                 }
[08:27:37.043]                 else {
[08:27:37.043]                   if (TRUE) {
[08:27:37.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.043]                     {
[08:27:37.043]                       inherits <- base::inherits
[08:27:37.043]                       invokeRestart <- base::invokeRestart
[08:27:37.043]                       is.null <- base::is.null
[08:27:37.043]                       muffled <- FALSE
[08:27:37.043]                       if (inherits(cond, "message")) {
[08:27:37.043]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:37.043]                         if (muffled) 
[08:27:37.043]                           invokeRestart("muffleMessage")
[08:27:37.043]                       }
[08:27:37.043]                       else if (inherits(cond, "warning")) {
[08:27:37.043]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:37.043]                         if (muffled) 
[08:27:37.043]                           invokeRestart("muffleWarning")
[08:27:37.043]                       }
[08:27:37.043]                       else if (inherits(cond, "condition")) {
[08:27:37.043]                         if (!is.null(pattern)) {
[08:27:37.043]                           computeRestarts <- base::computeRestarts
[08:27:37.043]                           grepl <- base::grepl
[08:27:37.043]                           restarts <- computeRestarts(cond)
[08:27:37.043]                           for (restart in restarts) {
[08:27:37.043]                             name <- restart$name
[08:27:37.043]                             if (is.null(name)) 
[08:27:37.043]                               next
[08:27:37.043]                             if (!grepl(pattern, name)) 
[08:27:37.043]                               next
[08:27:37.043]                             invokeRestart(restart)
[08:27:37.043]                             muffled <- TRUE
[08:27:37.043]                             break
[08:27:37.043]                           }
[08:27:37.043]                         }
[08:27:37.043]                       }
[08:27:37.043]                       invisible(muffled)
[08:27:37.043]                     }
[08:27:37.043]                     muffleCondition(cond, pattern = "^muffle")
[08:27:37.043]                   }
[08:27:37.043]                 }
[08:27:37.043]             }
[08:27:37.043]         }))
[08:27:37.043]     }, error = function(ex) {
[08:27:37.043]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:37.043]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:37.043]                 ...future.rng), started = ...future.startTime, 
[08:27:37.043]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:37.043]             version = "1.8"), class = "FutureResult")
[08:27:37.043]     }, finally = {
[08:27:37.043]         if (!identical(...future.workdir, getwd())) 
[08:27:37.043]             setwd(...future.workdir)
[08:27:37.043]         {
[08:27:37.043]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:37.043]                 ...future.oldOptions$nwarnings <- NULL
[08:27:37.043]             }
[08:27:37.043]             base::options(...future.oldOptions)
[08:27:37.043]             if (.Platform$OS.type == "windows") {
[08:27:37.043]                 old_names <- names(...future.oldEnvVars)
[08:27:37.043]                 envs <- base::Sys.getenv()
[08:27:37.043]                 names <- names(envs)
[08:27:37.043]                 common <- intersect(names, old_names)
[08:27:37.043]                 added <- setdiff(names, old_names)
[08:27:37.043]                 removed <- setdiff(old_names, names)
[08:27:37.043]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:37.043]                   envs[common]]
[08:27:37.043]                 NAMES <- toupper(changed)
[08:27:37.043]                 args <- list()
[08:27:37.043]                 for (kk in seq_along(NAMES)) {
[08:27:37.043]                   name <- changed[[kk]]
[08:27:37.043]                   NAME <- NAMES[[kk]]
[08:27:37.043]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.043]                     next
[08:27:37.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:37.043]                 }
[08:27:37.043]                 NAMES <- toupper(added)
[08:27:37.043]                 for (kk in seq_along(NAMES)) {
[08:27:37.043]                   name <- added[[kk]]
[08:27:37.043]                   NAME <- NAMES[[kk]]
[08:27:37.043]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.043]                     next
[08:27:37.043]                   args[[name]] <- ""
[08:27:37.043]                 }
[08:27:37.043]                 NAMES <- toupper(removed)
[08:27:37.043]                 for (kk in seq_along(NAMES)) {
[08:27:37.043]                   name <- removed[[kk]]
[08:27:37.043]                   NAME <- NAMES[[kk]]
[08:27:37.043]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.043]                     next
[08:27:37.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:37.043]                 }
[08:27:37.043]                 if (length(args) > 0) 
[08:27:37.043]                   base::do.call(base::Sys.setenv, args = args)
[08:27:37.043]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:37.043]             }
[08:27:37.043]             else {
[08:27:37.043]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:37.043]             }
[08:27:37.043]             {
[08:27:37.043]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:37.043]                   0L) {
[08:27:37.043]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:37.043]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:37.043]                   base::options(opts)
[08:27:37.043]                 }
[08:27:37.043]                 {
[08:27:37.043]                   {
[08:27:37.043]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:37.043]                     NULL
[08:27:37.043]                   }
[08:27:37.043]                   options(future.plan = NULL)
[08:27:37.043]                   if (is.na(NA_character_)) 
[08:27:37.043]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:37.043]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:37.043]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:37.043]                     .init = FALSE)
[08:27:37.043]                 }
[08:27:37.043]             }
[08:27:37.043]         }
[08:27:37.043]     })
[08:27:37.043]     if (TRUE) {
[08:27:37.043]         base::sink(type = "output", split = FALSE)
[08:27:37.043]         if (TRUE) {
[08:27:37.043]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:37.043]         }
[08:27:37.043]         else {
[08:27:37.043]             ...future.result["stdout"] <- base::list(NULL)
[08:27:37.043]         }
[08:27:37.043]         base::close(...future.stdout)
[08:27:37.043]         ...future.stdout <- NULL
[08:27:37.043]     }
[08:27:37.043]     ...future.result$conditions <- ...future.conditions
[08:27:37.043]     ...future.result$finished <- base::Sys.time()
[08:27:37.043]     ...future.result
[08:27:37.043] }
[08:27:37.046] requestCore(): workers = 1
[08:27:37.049] MulticoreFuture started
[08:27:37.050] plan(): Setting new future strategy stack:
[08:27:37.050] result() for MulticoreFuture ...
[08:27:37.050] List of future strategies:
[08:27:37.050] 1. sequential:
[08:27:37.050]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:37.050]    - tweaked: FALSE
[08:27:37.050]    - call: NULL
[08:27:37.051] plan(): nbrOfWorkers() = 1
[08:27:37.053] plan(): Setting new future strategy stack:
[08:27:37.053] List of future strategies:
[08:27:37.053] 1. future:
[08:27:37.053]    - args: function (..., workers = "<NULL>")
[08:27:37.053]    - tweaked: FALSE
[08:27:37.053]    - call: plan(foo)
[08:27:37.054] plan(): nbrOfWorkers() = Inf
[08:27:37.055] result() for MulticoreFuture ...
[08:27:37.055] result() for MulticoreFuture ... done
[08:27:37.055] result() for MulticoreFuture ... done
[08:27:37.056] result() for MulticoreFuture ...
[08:27:37.056] result() for MulticoreFuture ... done
[1] 42
[08:27:37.058] getGlobalsAndPackages() ...
[08:27:37.058] 
[08:27:37.058] - globals: [0] <none>
[08:27:37.058] getGlobalsAndPackages() ... DONE
[08:27:37.059] Packages needed by the future expression (n = 0): <none>
[08:27:37.059] Packages needed by future strategies (n = 0): <none>
[08:27:37.059] {
[08:27:37.059]     {
[08:27:37.059]         {
[08:27:37.059]             ...future.startTime <- base::Sys.time()
[08:27:37.059]             {
[08:27:37.059]                 {
[08:27:37.059]                   {
[08:27:37.059]                     {
[08:27:37.059]                       base::local({
[08:27:37.059]                         has_future <- base::requireNamespace("future", 
[08:27:37.059]                           quietly = TRUE)
[08:27:37.059]                         if (has_future) {
[08:27:37.059]                           ns <- base::getNamespace("future")
[08:27:37.059]                           version <- ns[[".package"]][["version"]]
[08:27:37.059]                           if (is.null(version)) 
[08:27:37.059]                             version <- utils::packageVersion("future")
[08:27:37.059]                         }
[08:27:37.059]                         else {
[08:27:37.059]                           version <- NULL
[08:27:37.059]                         }
[08:27:37.059]                         if (!has_future || version < "1.8.0") {
[08:27:37.059]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:37.059]                             "", base::R.version$version.string), 
[08:27:37.059]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:37.059]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:37.059]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:37.059]                               "release", "version")], collapse = " "), 
[08:27:37.059]                             hostname = base::Sys.info()[["nodename"]])
[08:27:37.059]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:37.059]                             info)
[08:27:37.059]                           info <- base::paste(info, collapse = "; ")
[08:27:37.059]                           if (!has_future) {
[08:27:37.059]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:37.059]                               info)
[08:27:37.059]                           }
[08:27:37.059]                           else {
[08:27:37.059]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:37.059]                               info, version)
[08:27:37.059]                           }
[08:27:37.059]                           base::stop(msg)
[08:27:37.059]                         }
[08:27:37.059]                       })
[08:27:37.059]                     }
[08:27:37.059]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:37.059]                     base::options(mc.cores = 1L)
[08:27:37.059]                   }
[08:27:37.059]                   ...future.strategy.old <- future::plan("list")
[08:27:37.059]                   options(future.plan = NULL)
[08:27:37.059]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:37.059]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:37.059]                 }
[08:27:37.059]                 ...future.workdir <- getwd()
[08:27:37.059]             }
[08:27:37.059]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:37.059]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:37.059]         }
[08:27:37.059]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:37.059]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:37.059]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:37.059]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:37.059]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:37.059]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:37.059]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:37.059]             base::names(...future.oldOptions))
[08:27:37.059]     }
[08:27:37.059]     if (FALSE) {
[08:27:37.059]     }
[08:27:37.059]     else {
[08:27:37.059]         if (TRUE) {
[08:27:37.059]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:37.059]                 open = "w")
[08:27:37.059]         }
[08:27:37.059]         else {
[08:27:37.059]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:37.059]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:37.059]         }
[08:27:37.059]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:37.059]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:37.059]             base::sink(type = "output", split = FALSE)
[08:27:37.059]             base::close(...future.stdout)
[08:27:37.059]         }, add = TRUE)
[08:27:37.059]     }
[08:27:37.059]     ...future.frame <- base::sys.nframe()
[08:27:37.059]     ...future.conditions <- base::list()
[08:27:37.059]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:37.059]     if (FALSE) {
[08:27:37.059]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:37.059]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:37.059]     }
[08:27:37.059]     ...future.result <- base::tryCatch({
[08:27:37.059]         base::withCallingHandlers({
[08:27:37.059]             ...future.value <- base::withVisible(base::local({
[08:27:37.059]                 withCallingHandlers({
[08:27:37.059]                   {
[08:27:37.059]                     42L
[08:27:37.059]                   }
[08:27:37.059]                 }, immediateCondition = function(cond) {
[08:27:37.059]                   save_rds <- function (object, pathname, ...) 
[08:27:37.059]                   {
[08:27:37.059]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:37.059]                     if (file_test("-f", pathname_tmp)) {
[08:27:37.059]                       fi_tmp <- file.info(pathname_tmp)
[08:27:37.059]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:37.059]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:37.059]                         fi_tmp[["mtime"]])
[08:27:37.059]                     }
[08:27:37.059]                     tryCatch({
[08:27:37.059]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:37.059]                     }, error = function(ex) {
[08:27:37.059]                       msg <- conditionMessage(ex)
[08:27:37.059]                       fi_tmp <- file.info(pathname_tmp)
[08:27:37.059]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:37.059]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:37.059]                         fi_tmp[["mtime"]], msg)
[08:27:37.059]                       ex$message <- msg
[08:27:37.059]                       stop(ex)
[08:27:37.059]                     })
[08:27:37.059]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:37.059]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:37.059]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:37.059]                       fi_tmp <- file.info(pathname_tmp)
[08:27:37.059]                       fi <- file.info(pathname)
[08:27:37.059]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:37.059]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:37.059]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:37.059]                         fi[["size"]], fi[["mtime"]])
[08:27:37.059]                       stop(msg)
[08:27:37.059]                     }
[08:27:37.059]                     invisible(pathname)
[08:27:37.059]                   }
[08:27:37.059]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:37.059]                     rootPath = tempdir()) 
[08:27:37.059]                   {
[08:27:37.059]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:37.059]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:37.059]                       tmpdir = path, fileext = ".rds")
[08:27:37.059]                     save_rds(obj, file)
[08:27:37.059]                   }
[08:27:37.059]                   saveImmediateCondition(cond, path = "/tmp/Rtmpt925uL/.future/immediateConditions")
[08:27:37.059]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.059]                   {
[08:27:37.059]                     inherits <- base::inherits
[08:27:37.059]                     invokeRestart <- base::invokeRestart
[08:27:37.059]                     is.null <- base::is.null
[08:27:37.059]                     muffled <- FALSE
[08:27:37.059]                     if (inherits(cond, "message")) {
[08:27:37.059]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:37.059]                       if (muffled) 
[08:27:37.059]                         invokeRestart("muffleMessage")
[08:27:37.059]                     }
[08:27:37.059]                     else if (inherits(cond, "warning")) {
[08:27:37.059]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:37.059]                       if (muffled) 
[08:27:37.059]                         invokeRestart("muffleWarning")
[08:27:37.059]                     }
[08:27:37.059]                     else if (inherits(cond, "condition")) {
[08:27:37.059]                       if (!is.null(pattern)) {
[08:27:37.059]                         computeRestarts <- base::computeRestarts
[08:27:37.059]                         grepl <- base::grepl
[08:27:37.059]                         restarts <- computeRestarts(cond)
[08:27:37.059]                         for (restart in restarts) {
[08:27:37.059]                           name <- restart$name
[08:27:37.059]                           if (is.null(name)) 
[08:27:37.059]                             next
[08:27:37.059]                           if (!grepl(pattern, name)) 
[08:27:37.059]                             next
[08:27:37.059]                           invokeRestart(restart)
[08:27:37.059]                           muffled <- TRUE
[08:27:37.059]                           break
[08:27:37.059]                         }
[08:27:37.059]                       }
[08:27:37.059]                     }
[08:27:37.059]                     invisible(muffled)
[08:27:37.059]                   }
[08:27:37.059]                   muffleCondition(cond)
[08:27:37.059]                 })
[08:27:37.059]             }))
[08:27:37.059]             future::FutureResult(value = ...future.value$value, 
[08:27:37.059]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:37.059]                   ...future.rng), globalenv = if (FALSE) 
[08:27:37.059]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:37.059]                     ...future.globalenv.names))
[08:27:37.059]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:37.059]         }, condition = base::local({
[08:27:37.059]             c <- base::c
[08:27:37.059]             inherits <- base::inherits
[08:27:37.059]             invokeRestart <- base::invokeRestart
[08:27:37.059]             length <- base::length
[08:27:37.059]             list <- base::list
[08:27:37.059]             seq.int <- base::seq.int
[08:27:37.059]             signalCondition <- base::signalCondition
[08:27:37.059]             sys.calls <- base::sys.calls
[08:27:37.059]             `[[` <- base::`[[`
[08:27:37.059]             `+` <- base::`+`
[08:27:37.059]             `<<-` <- base::`<<-`
[08:27:37.059]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:37.059]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:37.059]                   3L)]
[08:27:37.059]             }
[08:27:37.059]             function(cond) {
[08:27:37.059]                 is_error <- inherits(cond, "error")
[08:27:37.059]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:37.059]                   NULL)
[08:27:37.059]                 if (is_error) {
[08:27:37.059]                   sessionInformation <- function() {
[08:27:37.059]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:37.059]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:37.059]                       search = base::search(), system = base::Sys.info())
[08:27:37.059]                   }
[08:27:37.059]                   ...future.conditions[[length(...future.conditions) + 
[08:27:37.059]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:37.059]                     cond$call), session = sessionInformation(), 
[08:27:37.059]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:37.059]                   signalCondition(cond)
[08:27:37.059]                 }
[08:27:37.059]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:37.059]                 "immediateCondition"))) {
[08:27:37.059]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:37.059]                   ...future.conditions[[length(...future.conditions) + 
[08:27:37.059]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:37.059]                   if (TRUE && !signal) {
[08:27:37.059]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.059]                     {
[08:27:37.059]                       inherits <- base::inherits
[08:27:37.059]                       invokeRestart <- base::invokeRestart
[08:27:37.059]                       is.null <- base::is.null
[08:27:37.059]                       muffled <- FALSE
[08:27:37.059]                       if (inherits(cond, "message")) {
[08:27:37.059]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:37.059]                         if (muffled) 
[08:27:37.059]                           invokeRestart("muffleMessage")
[08:27:37.059]                       }
[08:27:37.059]                       else if (inherits(cond, "warning")) {
[08:27:37.059]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:37.059]                         if (muffled) 
[08:27:37.059]                           invokeRestart("muffleWarning")
[08:27:37.059]                       }
[08:27:37.059]                       else if (inherits(cond, "condition")) {
[08:27:37.059]                         if (!is.null(pattern)) {
[08:27:37.059]                           computeRestarts <- base::computeRestarts
[08:27:37.059]                           grepl <- base::grepl
[08:27:37.059]                           restarts <- computeRestarts(cond)
[08:27:37.059]                           for (restart in restarts) {
[08:27:37.059]                             name <- restart$name
[08:27:37.059]                             if (is.null(name)) 
[08:27:37.059]                               next
[08:27:37.059]                             if (!grepl(pattern, name)) 
[08:27:37.059]                               next
[08:27:37.059]                             invokeRestart(restart)
[08:27:37.059]                             muffled <- TRUE
[08:27:37.059]                             break
[08:27:37.059]                           }
[08:27:37.059]                         }
[08:27:37.059]                       }
[08:27:37.059]                       invisible(muffled)
[08:27:37.059]                     }
[08:27:37.059]                     muffleCondition(cond, pattern = "^muffle")
[08:27:37.059]                   }
[08:27:37.059]                 }
[08:27:37.059]                 else {
[08:27:37.059]                   if (TRUE) {
[08:27:37.059]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:37.059]                     {
[08:27:37.059]                       inherits <- base::inherits
[08:27:37.059]                       invokeRestart <- base::invokeRestart
[08:27:37.059]                       is.null <- base::is.null
[08:27:37.059]                       muffled <- FALSE
[08:27:37.059]                       if (inherits(cond, "message")) {
[08:27:37.059]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:37.059]                         if (muffled) 
[08:27:37.059]                           invokeRestart("muffleMessage")
[08:27:37.059]                       }
[08:27:37.059]                       else if (inherits(cond, "warning")) {
[08:27:37.059]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:37.059]                         if (muffled) 
[08:27:37.059]                           invokeRestart("muffleWarning")
[08:27:37.059]                       }
[08:27:37.059]                       else if (inherits(cond, "condition")) {
[08:27:37.059]                         if (!is.null(pattern)) {
[08:27:37.059]                           computeRestarts <- base::computeRestarts
[08:27:37.059]                           grepl <- base::grepl
[08:27:37.059]                           restarts <- computeRestarts(cond)
[08:27:37.059]                           for (restart in restarts) {
[08:27:37.059]                             name <- restart$name
[08:27:37.059]                             if (is.null(name)) 
[08:27:37.059]                               next
[08:27:37.059]                             if (!grepl(pattern, name)) 
[08:27:37.059]                               next
[08:27:37.059]                             invokeRestart(restart)
[08:27:37.059]                             muffled <- TRUE
[08:27:37.059]                             break
[08:27:37.059]                           }
[08:27:37.059]                         }
[08:27:37.059]                       }
[08:27:37.059]                       invisible(muffled)
[08:27:37.059]                     }
[08:27:37.059]                     muffleCondition(cond, pattern = "^muffle")
[08:27:37.059]                   }
[08:27:37.059]                 }
[08:27:37.059]             }
[08:27:37.059]         }))
[08:27:37.059]     }, error = function(ex) {
[08:27:37.059]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:37.059]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:37.059]                 ...future.rng), started = ...future.startTime, 
[08:27:37.059]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:37.059]             version = "1.8"), class = "FutureResult")
[08:27:37.059]     }, finally = {
[08:27:37.059]         if (!identical(...future.workdir, getwd())) 
[08:27:37.059]             setwd(...future.workdir)
[08:27:37.059]         {
[08:27:37.059]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:37.059]                 ...future.oldOptions$nwarnings <- NULL
[08:27:37.059]             }
[08:27:37.059]             base::options(...future.oldOptions)
[08:27:37.059]             if (.Platform$OS.type == "windows") {
[08:27:37.059]                 old_names <- names(...future.oldEnvVars)
[08:27:37.059]                 envs <- base::Sys.getenv()
[08:27:37.059]                 names <- names(envs)
[08:27:37.059]                 common <- intersect(names, old_names)
[08:27:37.059]                 added <- setdiff(names, old_names)
[08:27:37.059]                 removed <- setdiff(old_names, names)
[08:27:37.059]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:37.059]                   envs[common]]
[08:27:37.059]                 NAMES <- toupper(changed)
[08:27:37.059]                 args <- list()
[08:27:37.059]                 for (kk in seq_along(NAMES)) {
[08:27:37.059]                   name <- changed[[kk]]
[08:27:37.059]                   NAME <- NAMES[[kk]]
[08:27:37.059]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.059]                     next
[08:27:37.059]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:37.059]                 }
[08:27:37.059]                 NAMES <- toupper(added)
[08:27:37.059]                 for (kk in seq_along(NAMES)) {
[08:27:37.059]                   name <- added[[kk]]
[08:27:37.059]                   NAME <- NAMES[[kk]]
[08:27:37.059]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.059]                     next
[08:27:37.059]                   args[[name]] <- ""
[08:27:37.059]                 }
[08:27:37.059]                 NAMES <- toupper(removed)
[08:27:37.059]                 for (kk in seq_along(NAMES)) {
[08:27:37.059]                   name <- removed[[kk]]
[08:27:37.059]                   NAME <- NAMES[[kk]]
[08:27:37.059]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:37.059]                     next
[08:27:37.059]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:37.059]                 }
[08:27:37.059]                 if (length(args) > 0) 
[08:27:37.059]                   base::do.call(base::Sys.setenv, args = args)
[08:27:37.059]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:37.059]             }
[08:27:37.059]             else {
[08:27:37.059]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:37.059]             }
[08:27:37.059]             {
[08:27:37.059]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:37.059]                   0L) {
[08:27:37.059]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:37.059]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:37.059]                   base::options(opts)
[08:27:37.059]                 }
[08:27:37.059]                 {
[08:27:37.059]                   {
[08:27:37.059]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:37.059]                     NULL
[08:27:37.059]                   }
[08:27:37.059]                   options(future.plan = NULL)
[08:27:37.059]                   if (is.na(NA_character_)) 
[08:27:37.059]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:37.059]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:37.059]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:37.059]                     .init = FALSE)
[08:27:37.059]                 }
[08:27:37.059]             }
[08:27:37.059]         }
[08:27:37.059]     })
[08:27:37.059]     if (TRUE) {
[08:27:37.059]         base::sink(type = "output", split = FALSE)
[08:27:37.059]         if (TRUE) {
[08:27:37.059]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:37.059]         }
[08:27:37.059]         else {
[08:27:37.059]             ...future.result["stdout"] <- base::list(NULL)
[08:27:37.059]         }
[08:27:37.059]         base::close(...future.stdout)
[08:27:37.059]         ...future.stdout <- NULL
[08:27:37.059]     }
[08:27:37.059]     ...future.result$conditions <- ...future.conditions
[08:27:37.059]     ...future.result$finished <- base::Sys.time()
[08:27:37.059]     ...future.result
[08:27:37.059] }
[08:27:37.062] requestCore(): workers = 1
[08:27:37.065] MulticoreFuture started
[08:27:37.065] result() for MulticoreFuture ...
[08:27:37.065] plan(): Setting new future strategy stack:
[08:27:37.065] List of future strategies:
[08:27:37.065] 1. sequential:
[08:27:37.065]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:37.065]    - tweaked: FALSE
[08:27:37.065]    - call: NULL
[08:27:37.066] plan(): nbrOfWorkers() = 1
[08:27:37.068] plan(): Setting new future strategy stack:
[08:27:37.068] List of future strategies:
[08:27:37.068] 1. future:
[08:27:37.068]    - args: function (..., workers = "<NULL>")
[08:27:37.068]    - tweaked: FALSE
[08:27:37.068]    - call: plan(foo)
[08:27:37.069] plan(): nbrOfWorkers() = Inf
[08:27:37.070] result() for MulticoreFuture ...
[08:27:37.070] result() for MulticoreFuture ... done
[08:27:37.070] result() for MulticoreFuture ... done
[08:27:37.070] result() for MulticoreFuture ...
[08:27:37.070] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[08:27:37.072] plan(): Setting new future strategy stack:
[08:27:37.072] List of future strategies:
[08:27:37.072] 1. FutureStrategy:
[08:27:37.072]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:37.072]    - tweaked: FALSE
[08:27:37.072]    - call: future::plan(oplan)
[08:27:37.073] plan(): nbrOfWorkers() = 1
> 
