
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:15.477] plan(): Setting new future strategy stack:
[11:01:15.478] List of future strategies:
[11:01:15.478] 1. sequential:
[11:01:15.478]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:15.478]    - tweaked: FALSE
[11:01:15.478]    - call: future::plan("sequential")
[11:01:15.491] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[11:01:15.506] getGlobalsAndPackages() ...
[11:01:15.506] 
[11:01:15.506] - globals: [0] <none>
[11:01:15.506] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c21e82d2-42d1-fef3-5aa9-135a24ba36a5
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[11:01:15.508] run() for ‘Future’ ...
[11:01:15.508] - state: ‘created’
[11:01:15.508] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[11:01:15.510] plan(): Setting new future strategy stack:
[11:01:15.510] List of future strategies:
[11:01:15.510] 1. future:
[11:01:15.510]    - args: function (..., workers = "<NULL>")
[11:01:15.510]    - tweaked: FALSE
[11:01:15.510]    - call: plan(foo)
[11:01:15.521] plan(): nbrOfWorkers() = Inf
> f <- Future()
[11:01:15.521] getGlobalsAndPackages() ...
[11:01:15.521] 
[11:01:15.521] - globals: [0] <none>
[11:01:15.521] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[11:01:15.522] Packages needed by the future expression (n = 0): <none>
[11:01:15.522] Packages needed by future strategies (n = 0): <none>
[11:01:15.523] {
[11:01:15.523]     {
[11:01:15.523]         {
[11:01:15.523]             ...future.startTime <- base::Sys.time()
[11:01:15.523]             {
[11:01:15.523]                 {
[11:01:15.523]                   {
[11:01:15.523]                     base::local({
[11:01:15.523]                       has_future <- base::requireNamespace("future", 
[11:01:15.523]                         quietly = TRUE)
[11:01:15.523]                       if (has_future) {
[11:01:15.523]                         ns <- base::getNamespace("future")
[11:01:15.523]                         version <- ns[[".package"]][["version"]]
[11:01:15.523]                         if (is.null(version)) 
[11:01:15.523]                           version <- utils::packageVersion("future")
[11:01:15.523]                       }
[11:01:15.523]                       else {
[11:01:15.523]                         version <- NULL
[11:01:15.523]                       }
[11:01:15.523]                       if (!has_future || version < "1.8.0") {
[11:01:15.523]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:15.523]                           "", base::R.version$version.string), 
[11:01:15.523]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:15.523]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:15.523]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:15.523]                             "release", "version")], collapse = " "), 
[11:01:15.523]                           hostname = base::Sys.info()[["nodename"]])
[11:01:15.523]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:15.523]                           info)
[11:01:15.523]                         info <- base::paste(info, collapse = "; ")
[11:01:15.523]                         if (!has_future) {
[11:01:15.523]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:15.523]                             info)
[11:01:15.523]                         }
[11:01:15.523]                         else {
[11:01:15.523]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:15.523]                             info, version)
[11:01:15.523]                         }
[11:01:15.523]                         base::stop(msg)
[11:01:15.523]                       }
[11:01:15.523]                     })
[11:01:15.523]                   }
[11:01:15.523]                   ...future.strategy.old <- future::plan("list")
[11:01:15.523]                   options(future.plan = NULL)
[11:01:15.523]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:15.523]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:15.523]                 }
[11:01:15.523]                 ...future.workdir <- getwd()
[11:01:15.523]             }
[11:01:15.523]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:15.523]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:15.523]         }
[11:01:15.523]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:15.523]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:15.523]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:15.523]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:15.523]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:15.523]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:15.523]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:15.523]             base::names(...future.oldOptions))
[11:01:15.523]     }
[11:01:15.523]     if (FALSE) {
[11:01:15.523]     }
[11:01:15.523]     else {
[11:01:15.523]         if (TRUE) {
[11:01:15.523]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:15.523]                 open = "w")
[11:01:15.523]         }
[11:01:15.523]         else {
[11:01:15.523]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:15.523]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:15.523]         }
[11:01:15.523]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:15.523]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:15.523]             base::sink(type = "output", split = FALSE)
[11:01:15.523]             base::close(...future.stdout)
[11:01:15.523]         }, add = TRUE)
[11:01:15.523]     }
[11:01:15.523]     ...future.frame <- base::sys.nframe()
[11:01:15.523]     ...future.conditions <- base::list()
[11:01:15.523]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:15.523]     if (FALSE) {
[11:01:15.523]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:15.523]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:15.523]     }
[11:01:15.523]     ...future.result <- base::tryCatch({
[11:01:15.523]         base::withCallingHandlers({
[11:01:15.523]             ...future.value <- base::withVisible(base::local(NULL))
[11:01:15.523]             future::FutureResult(value = ...future.value$value, 
[11:01:15.523]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:15.523]                   ...future.rng), globalenv = if (FALSE) 
[11:01:15.523]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:15.523]                     ...future.globalenv.names))
[11:01:15.523]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:15.523]         }, condition = base::local({
[11:01:15.523]             c <- base::c
[11:01:15.523]             inherits <- base::inherits
[11:01:15.523]             invokeRestart <- base::invokeRestart
[11:01:15.523]             length <- base::length
[11:01:15.523]             list <- base::list
[11:01:15.523]             seq.int <- base::seq.int
[11:01:15.523]             signalCondition <- base::signalCondition
[11:01:15.523]             sys.calls <- base::sys.calls
[11:01:15.523]             `[[` <- base::`[[`
[11:01:15.523]             `+` <- base::`+`
[11:01:15.523]             `<<-` <- base::`<<-`
[11:01:15.523]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:15.523]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:15.523]                   3L)]
[11:01:15.523]             }
[11:01:15.523]             function(cond) {
[11:01:15.523]                 is_error <- inherits(cond, "error")
[11:01:15.523]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:15.523]                   NULL)
[11:01:15.523]                 if (is_error) {
[11:01:15.523]                   sessionInformation <- function() {
[11:01:15.523]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:15.523]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:15.523]                       search = base::search(), system = base::Sys.info())
[11:01:15.523]                   }
[11:01:15.523]                   ...future.conditions[[length(...future.conditions) + 
[11:01:15.523]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:15.523]                     cond$call), session = sessionInformation(), 
[11:01:15.523]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:15.523]                   signalCondition(cond)
[11:01:15.523]                 }
[11:01:15.523]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[11:01:15.523]                   signal <- FALSE && inherits(cond, character(0))
[11:01:15.523]                   ...future.conditions[[length(...future.conditions) + 
[11:01:15.523]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:15.523]                   if (FALSE && !signal) {
[11:01:15.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.523]                     {
[11:01:15.523]                       inherits <- base::inherits
[11:01:15.523]                       invokeRestart <- base::invokeRestart
[11:01:15.523]                       is.null <- base::is.null
[11:01:15.523]                       muffled <- FALSE
[11:01:15.523]                       if (inherits(cond, "message")) {
[11:01:15.523]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:15.523]                         if (muffled) 
[11:01:15.523]                           invokeRestart("muffleMessage")
[11:01:15.523]                       }
[11:01:15.523]                       else if (inherits(cond, "warning")) {
[11:01:15.523]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:15.523]                         if (muffled) 
[11:01:15.523]                           invokeRestart("muffleWarning")
[11:01:15.523]                       }
[11:01:15.523]                       else if (inherits(cond, "condition")) {
[11:01:15.523]                         if (!is.null(pattern)) {
[11:01:15.523]                           computeRestarts <- base::computeRestarts
[11:01:15.523]                           grepl <- base::grepl
[11:01:15.523]                           restarts <- computeRestarts(cond)
[11:01:15.523]                           for (restart in restarts) {
[11:01:15.523]                             name <- restart$name
[11:01:15.523]                             if (is.null(name)) 
[11:01:15.523]                               next
[11:01:15.523]                             if (!grepl(pattern, name)) 
[11:01:15.523]                               next
[11:01:15.523]                             invokeRestart(restart)
[11:01:15.523]                             muffled <- TRUE
[11:01:15.523]                             break
[11:01:15.523]                           }
[11:01:15.523]                         }
[11:01:15.523]                       }
[11:01:15.523]                       invisible(muffled)
[11:01:15.523]                     }
[11:01:15.523]                     muffleCondition(cond, pattern = "^muffle")
[11:01:15.523]                   }
[11:01:15.523]                 }
[11:01:15.523]                 else {
[11:01:15.523]                   if (TRUE) {
[11:01:15.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.523]                     {
[11:01:15.523]                       inherits <- base::inherits
[11:01:15.523]                       invokeRestart <- base::invokeRestart
[11:01:15.523]                       is.null <- base::is.null
[11:01:15.523]                       muffled <- FALSE
[11:01:15.523]                       if (inherits(cond, "message")) {
[11:01:15.523]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:15.523]                         if (muffled) 
[11:01:15.523]                           invokeRestart("muffleMessage")
[11:01:15.523]                       }
[11:01:15.523]                       else if (inherits(cond, "warning")) {
[11:01:15.523]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:15.523]                         if (muffled) 
[11:01:15.523]                           invokeRestart("muffleWarning")
[11:01:15.523]                       }
[11:01:15.523]                       else if (inherits(cond, "condition")) {
[11:01:15.523]                         if (!is.null(pattern)) {
[11:01:15.523]                           computeRestarts <- base::computeRestarts
[11:01:15.523]                           grepl <- base::grepl
[11:01:15.523]                           restarts <- computeRestarts(cond)
[11:01:15.523]                           for (restart in restarts) {
[11:01:15.523]                             name <- restart$name
[11:01:15.523]                             if (is.null(name)) 
[11:01:15.523]                               next
[11:01:15.523]                             if (!grepl(pattern, name)) 
[11:01:15.523]                               next
[11:01:15.523]                             invokeRestart(restart)
[11:01:15.523]                             muffled <- TRUE
[11:01:15.523]                             break
[11:01:15.523]                           }
[11:01:15.523]                         }
[11:01:15.523]                       }
[11:01:15.523]                       invisible(muffled)
[11:01:15.523]                     }
[11:01:15.523]                     muffleCondition(cond, pattern = "^muffle")
[11:01:15.523]                   }
[11:01:15.523]                 }
[11:01:15.523]             }
[11:01:15.523]         }))
[11:01:15.523]     }, error = function(ex) {
[11:01:15.523]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:15.523]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:15.523]                 ...future.rng), started = ...future.startTime, 
[11:01:15.523]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:15.523]             version = "1.8"), class = "FutureResult")
[11:01:15.523]     }, finally = {
[11:01:15.523]         if (!identical(...future.workdir, getwd())) 
[11:01:15.523]             setwd(...future.workdir)
[11:01:15.523]         {
[11:01:15.523]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:15.523]                 ...future.oldOptions$nwarnings <- NULL
[11:01:15.523]             }
[11:01:15.523]             base::options(...future.oldOptions)
[11:01:15.523]             if (.Platform$OS.type == "windows") {
[11:01:15.523]                 old_names <- names(...future.oldEnvVars)
[11:01:15.523]                 envs <- base::Sys.getenv()
[11:01:15.523]                 names <- names(envs)
[11:01:15.523]                 common <- intersect(names, old_names)
[11:01:15.523]                 added <- setdiff(names, old_names)
[11:01:15.523]                 removed <- setdiff(old_names, names)
[11:01:15.523]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:15.523]                   envs[common]]
[11:01:15.523]                 NAMES <- toupper(changed)
[11:01:15.523]                 args <- list()
[11:01:15.523]                 for (kk in seq_along(NAMES)) {
[11:01:15.523]                   name <- changed[[kk]]
[11:01:15.523]                   NAME <- NAMES[[kk]]
[11:01:15.523]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.523]                     next
[11:01:15.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:15.523]                 }
[11:01:15.523]                 NAMES <- toupper(added)
[11:01:15.523]                 for (kk in seq_along(NAMES)) {
[11:01:15.523]                   name <- added[[kk]]
[11:01:15.523]                   NAME <- NAMES[[kk]]
[11:01:15.523]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.523]                     next
[11:01:15.523]                   args[[name]] <- ""
[11:01:15.523]                 }
[11:01:15.523]                 NAMES <- toupper(removed)
[11:01:15.523]                 for (kk in seq_along(NAMES)) {
[11:01:15.523]                   name <- removed[[kk]]
[11:01:15.523]                   NAME <- NAMES[[kk]]
[11:01:15.523]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.523]                     next
[11:01:15.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:15.523]                 }
[11:01:15.523]                 if (length(args) > 0) 
[11:01:15.523]                   base::do.call(base::Sys.setenv, args = args)
[11:01:15.523]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:15.523]             }
[11:01:15.523]             else {
[11:01:15.523]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:15.523]             }
[11:01:15.523]             {
[11:01:15.523]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:15.523]                   0L) {
[11:01:15.523]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:15.523]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:15.523]                   base::options(opts)
[11:01:15.523]                 }
[11:01:15.523]                 {
[11:01:15.523]                   NULL
[11:01:15.523]                   options(future.plan = NULL)
[11:01:15.523]                   if (is.na(NA_character_)) 
[11:01:15.523]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:15.523]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:15.523]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:15.523]                     .init = FALSE)
[11:01:15.523]                 }
[11:01:15.523]             }
[11:01:15.523]         }
[11:01:15.523]     })
[11:01:15.523]     if (TRUE) {
[11:01:15.523]         base::sink(type = "output", split = FALSE)
[11:01:15.523]         if (TRUE) {
[11:01:15.523]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:15.523]         }
[11:01:15.523]         else {
[11:01:15.523]             ...future.result["stdout"] <- base::list(NULL)
[11:01:15.523]         }
[11:01:15.523]         base::close(...future.stdout)
[11:01:15.523]         ...future.stdout <- NULL
[11:01:15.523]     }
[11:01:15.523]     ...future.result$conditions <- ...future.conditions
[11:01:15.523]     ...future.result$finished <- base::Sys.time()
[11:01:15.523]     ...future.result
[11:01:15.523] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = I(1L)),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = I(1L))
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+   
+   ## To avoid 'multisession' from leaving stray workers behind
+   ClusterRegistry(action = "stop")
+ }
[11:01:15.534] getGlobalsAndPackages() ...
[11:01:15.534] Searching for globals...
[11:01:15.537] - globals found: [1] ‘{’
[11:01:15.537] Searching for globals ... DONE
[11:01:15.537] Resolving globals: FALSE
[11:01:15.537] 
[11:01:15.537] 
[11:01:15.538] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c21e82d2-42d1-fef3-5aa9-135a24ba36a5
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:15.538] Packages needed by the future expression (n = 0): <none>
[11:01:15.538] Packages needed by future strategies (n = 0): <none>
[11:01:15.539] {
[11:01:15.539]     {
[11:01:15.539]         {
[11:01:15.539]             ...future.startTime <- base::Sys.time()
[11:01:15.539]             {
[11:01:15.539]                 {
[11:01:15.539]                   {
[11:01:15.539]                     base::local({
[11:01:15.539]                       has_future <- base::requireNamespace("future", 
[11:01:15.539]                         quietly = TRUE)
[11:01:15.539]                       if (has_future) {
[11:01:15.539]                         ns <- base::getNamespace("future")
[11:01:15.539]                         version <- ns[[".package"]][["version"]]
[11:01:15.539]                         if (is.null(version)) 
[11:01:15.539]                           version <- utils::packageVersion("future")
[11:01:15.539]                       }
[11:01:15.539]                       else {
[11:01:15.539]                         version <- NULL
[11:01:15.539]                       }
[11:01:15.539]                       if (!has_future || version < "1.8.0") {
[11:01:15.539]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:15.539]                           "", base::R.version$version.string), 
[11:01:15.539]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:15.539]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:15.539]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:15.539]                             "release", "version")], collapse = " "), 
[11:01:15.539]                           hostname = base::Sys.info()[["nodename"]])
[11:01:15.539]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:15.539]                           info)
[11:01:15.539]                         info <- base::paste(info, collapse = "; ")
[11:01:15.539]                         if (!has_future) {
[11:01:15.539]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:15.539]                             info)
[11:01:15.539]                         }
[11:01:15.539]                         else {
[11:01:15.539]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:15.539]                             info, version)
[11:01:15.539]                         }
[11:01:15.539]                         base::stop(msg)
[11:01:15.539]                       }
[11:01:15.539]                     })
[11:01:15.539]                   }
[11:01:15.539]                   ...future.strategy.old <- future::plan("list")
[11:01:15.539]                   options(future.plan = NULL)
[11:01:15.539]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:15.539]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:15.539]                 }
[11:01:15.539]                 ...future.workdir <- getwd()
[11:01:15.539]             }
[11:01:15.539]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:15.539]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:15.539]         }
[11:01:15.539]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:15.539]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:15.539]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:15.539]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:15.539]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:15.539]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:15.539]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:15.539]             base::names(...future.oldOptions))
[11:01:15.539]     }
[11:01:15.539]     if (FALSE) {
[11:01:15.539]     }
[11:01:15.539]     else {
[11:01:15.539]         if (TRUE) {
[11:01:15.539]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:15.539]                 open = "w")
[11:01:15.539]         }
[11:01:15.539]         else {
[11:01:15.539]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:15.539]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:15.539]         }
[11:01:15.539]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:15.539]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:15.539]             base::sink(type = "output", split = FALSE)
[11:01:15.539]             base::close(...future.stdout)
[11:01:15.539]         }, add = TRUE)
[11:01:15.539]     }
[11:01:15.539]     ...future.frame <- base::sys.nframe()
[11:01:15.539]     ...future.conditions <- base::list()
[11:01:15.539]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:15.539]     if (FALSE) {
[11:01:15.539]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:15.539]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:15.539]     }
[11:01:15.539]     ...future.result <- base::tryCatch({
[11:01:15.539]         base::withCallingHandlers({
[11:01:15.539]             ...future.value <- base::withVisible(base::local({
[11:01:15.539]                 42L
[11:01:15.539]             }))
[11:01:15.539]             future::FutureResult(value = ...future.value$value, 
[11:01:15.539]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:15.539]                   ...future.rng), globalenv = if (FALSE) 
[11:01:15.539]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:15.539]                     ...future.globalenv.names))
[11:01:15.539]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:15.539]         }, condition = base::local({
[11:01:15.539]             c <- base::c
[11:01:15.539]             inherits <- base::inherits
[11:01:15.539]             invokeRestart <- base::invokeRestart
[11:01:15.539]             length <- base::length
[11:01:15.539]             list <- base::list
[11:01:15.539]             seq.int <- base::seq.int
[11:01:15.539]             signalCondition <- base::signalCondition
[11:01:15.539]             sys.calls <- base::sys.calls
[11:01:15.539]             `[[` <- base::`[[`
[11:01:15.539]             `+` <- base::`+`
[11:01:15.539]             `<<-` <- base::`<<-`
[11:01:15.539]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:15.539]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:15.539]                   3L)]
[11:01:15.539]             }
[11:01:15.539]             function(cond) {
[11:01:15.539]                 is_error <- inherits(cond, "error")
[11:01:15.539]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:15.539]                   NULL)
[11:01:15.539]                 if (is_error) {
[11:01:15.539]                   sessionInformation <- function() {
[11:01:15.539]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:15.539]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:15.539]                       search = base::search(), system = base::Sys.info())
[11:01:15.539]                   }
[11:01:15.539]                   ...future.conditions[[length(...future.conditions) + 
[11:01:15.539]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:15.539]                     cond$call), session = sessionInformation(), 
[11:01:15.539]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:15.539]                   signalCondition(cond)
[11:01:15.539]                 }
[11:01:15.539]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:15.539]                 "immediateCondition"))) {
[11:01:15.539]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:15.539]                   ...future.conditions[[length(...future.conditions) + 
[11:01:15.539]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:15.539]                   if (TRUE && !signal) {
[11:01:15.539]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.539]                     {
[11:01:15.539]                       inherits <- base::inherits
[11:01:15.539]                       invokeRestart <- base::invokeRestart
[11:01:15.539]                       is.null <- base::is.null
[11:01:15.539]                       muffled <- FALSE
[11:01:15.539]                       if (inherits(cond, "message")) {
[11:01:15.539]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:15.539]                         if (muffled) 
[11:01:15.539]                           invokeRestart("muffleMessage")
[11:01:15.539]                       }
[11:01:15.539]                       else if (inherits(cond, "warning")) {
[11:01:15.539]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:15.539]                         if (muffled) 
[11:01:15.539]                           invokeRestart("muffleWarning")
[11:01:15.539]                       }
[11:01:15.539]                       else if (inherits(cond, "condition")) {
[11:01:15.539]                         if (!is.null(pattern)) {
[11:01:15.539]                           computeRestarts <- base::computeRestarts
[11:01:15.539]                           grepl <- base::grepl
[11:01:15.539]                           restarts <- computeRestarts(cond)
[11:01:15.539]                           for (restart in restarts) {
[11:01:15.539]                             name <- restart$name
[11:01:15.539]                             if (is.null(name)) 
[11:01:15.539]                               next
[11:01:15.539]                             if (!grepl(pattern, name)) 
[11:01:15.539]                               next
[11:01:15.539]                             invokeRestart(restart)
[11:01:15.539]                             muffled <- TRUE
[11:01:15.539]                             break
[11:01:15.539]                           }
[11:01:15.539]                         }
[11:01:15.539]                       }
[11:01:15.539]                       invisible(muffled)
[11:01:15.539]                     }
[11:01:15.539]                     muffleCondition(cond, pattern = "^muffle")
[11:01:15.539]                   }
[11:01:15.539]                 }
[11:01:15.539]                 else {
[11:01:15.539]                   if (TRUE) {
[11:01:15.539]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.539]                     {
[11:01:15.539]                       inherits <- base::inherits
[11:01:15.539]                       invokeRestart <- base::invokeRestart
[11:01:15.539]                       is.null <- base::is.null
[11:01:15.539]                       muffled <- FALSE
[11:01:15.539]                       if (inherits(cond, "message")) {
[11:01:15.539]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:15.539]                         if (muffled) 
[11:01:15.539]                           invokeRestart("muffleMessage")
[11:01:15.539]                       }
[11:01:15.539]                       else if (inherits(cond, "warning")) {
[11:01:15.539]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:15.539]                         if (muffled) 
[11:01:15.539]                           invokeRestart("muffleWarning")
[11:01:15.539]                       }
[11:01:15.539]                       else if (inherits(cond, "condition")) {
[11:01:15.539]                         if (!is.null(pattern)) {
[11:01:15.539]                           computeRestarts <- base::computeRestarts
[11:01:15.539]                           grepl <- base::grepl
[11:01:15.539]                           restarts <- computeRestarts(cond)
[11:01:15.539]                           for (restart in restarts) {
[11:01:15.539]                             name <- restart$name
[11:01:15.539]                             if (is.null(name)) 
[11:01:15.539]                               next
[11:01:15.539]                             if (!grepl(pattern, name)) 
[11:01:15.539]                               next
[11:01:15.539]                             invokeRestart(restart)
[11:01:15.539]                             muffled <- TRUE
[11:01:15.539]                             break
[11:01:15.539]                           }
[11:01:15.539]                         }
[11:01:15.539]                       }
[11:01:15.539]                       invisible(muffled)
[11:01:15.539]                     }
[11:01:15.539]                     muffleCondition(cond, pattern = "^muffle")
[11:01:15.539]                   }
[11:01:15.539]                 }
[11:01:15.539]             }
[11:01:15.539]         }))
[11:01:15.539]     }, error = function(ex) {
[11:01:15.539]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:15.539]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:15.539]                 ...future.rng), started = ...future.startTime, 
[11:01:15.539]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:15.539]             version = "1.8"), class = "FutureResult")
[11:01:15.539]     }, finally = {
[11:01:15.539]         if (!identical(...future.workdir, getwd())) 
[11:01:15.539]             setwd(...future.workdir)
[11:01:15.539]         {
[11:01:15.539]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:15.539]                 ...future.oldOptions$nwarnings <- NULL
[11:01:15.539]             }
[11:01:15.539]             base::options(...future.oldOptions)
[11:01:15.539]             if (.Platform$OS.type == "windows") {
[11:01:15.539]                 old_names <- names(...future.oldEnvVars)
[11:01:15.539]                 envs <- base::Sys.getenv()
[11:01:15.539]                 names <- names(envs)
[11:01:15.539]                 common <- intersect(names, old_names)
[11:01:15.539]                 added <- setdiff(names, old_names)
[11:01:15.539]                 removed <- setdiff(old_names, names)
[11:01:15.539]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:15.539]                   envs[common]]
[11:01:15.539]                 NAMES <- toupper(changed)
[11:01:15.539]                 args <- list()
[11:01:15.539]                 for (kk in seq_along(NAMES)) {
[11:01:15.539]                   name <- changed[[kk]]
[11:01:15.539]                   NAME <- NAMES[[kk]]
[11:01:15.539]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.539]                     next
[11:01:15.539]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:15.539]                 }
[11:01:15.539]                 NAMES <- toupper(added)
[11:01:15.539]                 for (kk in seq_along(NAMES)) {
[11:01:15.539]                   name <- added[[kk]]
[11:01:15.539]                   NAME <- NAMES[[kk]]
[11:01:15.539]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.539]                     next
[11:01:15.539]                   args[[name]] <- ""
[11:01:15.539]                 }
[11:01:15.539]                 NAMES <- toupper(removed)
[11:01:15.539]                 for (kk in seq_along(NAMES)) {
[11:01:15.539]                   name <- removed[[kk]]
[11:01:15.539]                   NAME <- NAMES[[kk]]
[11:01:15.539]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.539]                     next
[11:01:15.539]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:15.539]                 }
[11:01:15.539]                 if (length(args) > 0) 
[11:01:15.539]                   base::do.call(base::Sys.setenv, args = args)
[11:01:15.539]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:15.539]             }
[11:01:15.539]             else {
[11:01:15.539]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:15.539]             }
[11:01:15.539]             {
[11:01:15.539]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:15.539]                   0L) {
[11:01:15.539]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:15.539]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:15.539]                   base::options(opts)
[11:01:15.539]                 }
[11:01:15.539]                 {
[11:01:15.539]                   {
[11:01:15.539]                     NULL
[11:01:15.539]                     RNGkind("Mersenne-Twister")
[11:01:15.539]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:15.539]                       inherits = FALSE)
[11:01:15.539]                   }
[11:01:15.539]                   options(future.plan = NULL)
[11:01:15.539]                   if (is.na(NA_character_)) 
[11:01:15.539]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:15.539]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:15.539]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:15.539]                     .init = FALSE)
[11:01:15.539]                 }
[11:01:15.539]             }
[11:01:15.539]         }
[11:01:15.539]     })
[11:01:15.539]     if (TRUE) {
[11:01:15.539]         base::sink(type = "output", split = FALSE)
[11:01:15.539]         if (TRUE) {
[11:01:15.539]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:15.539]         }
[11:01:15.539]         else {
[11:01:15.539]             ...future.result["stdout"] <- base::list(NULL)
[11:01:15.539]         }
[11:01:15.539]         base::close(...future.stdout)
[11:01:15.539]         ...future.stdout <- NULL
[11:01:15.539]     }
[11:01:15.539]     ...future.result$conditions <- ...future.conditions
[11:01:15.539]     ...future.result$finished <- base::Sys.time()
[11:01:15.539]     ...future.result
[11:01:15.539] }
[11:01:15.541] plan(): Setting new future strategy stack:
[11:01:15.541] List of future strategies:
[11:01:15.541] 1. sequential:
[11:01:15.541]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:15.541]    - tweaked: FALSE
[11:01:15.541]    - call: NULL
[11:01:15.541] plan(): nbrOfWorkers() = 1
[11:01:15.542] plan(): Setting new future strategy stack:
[11:01:15.542] List of future strategies:
[11:01:15.542] 1. future:
[11:01:15.542]    - args: function (..., workers = "<NULL>")
[11:01:15.542]    - tweaked: FALSE
[11:01:15.542]    - call: plan(foo)
[11:01:15.543] plan(): nbrOfWorkers() = Inf
[11:01:15.543] SequentialFuture started (and completed)
[1] 42
[11:01:15.543] getGlobalsAndPackages() ...
[11:01:15.544] Searching for globals...
[11:01:15.544] - globals found: [1] ‘{’
[11:01:15.544] Searching for globals ... DONE
[11:01:15.544] Resolving globals: FALSE
[11:01:15.545] 
[11:01:15.545] 
[11:01:15.545] getGlobalsAndPackages() ... DONE
[11:01:15.545] Packages needed by the future expression (n = 0): <none>
[11:01:15.545] Packages needed by future strategies (n = 0): <none>
[11:01:15.545] {
[11:01:15.545]     {
[11:01:15.545]         {
[11:01:15.545]             ...future.startTime <- base::Sys.time()
[11:01:15.545]             {
[11:01:15.545]                 {
[11:01:15.545]                   {
[11:01:15.545]                     base::local({
[11:01:15.545]                       has_future <- base::requireNamespace("future", 
[11:01:15.545]                         quietly = TRUE)
[11:01:15.545]                       if (has_future) {
[11:01:15.545]                         ns <- base::getNamespace("future")
[11:01:15.545]                         version <- ns[[".package"]][["version"]]
[11:01:15.545]                         if (is.null(version)) 
[11:01:15.545]                           version <- utils::packageVersion("future")
[11:01:15.545]                       }
[11:01:15.545]                       else {
[11:01:15.545]                         version <- NULL
[11:01:15.545]                       }
[11:01:15.545]                       if (!has_future || version < "1.8.0") {
[11:01:15.545]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:15.545]                           "", base::R.version$version.string), 
[11:01:15.545]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:15.545]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:15.545]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:15.545]                             "release", "version")], collapse = " "), 
[11:01:15.545]                           hostname = base::Sys.info()[["nodename"]])
[11:01:15.545]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:15.545]                           info)
[11:01:15.545]                         info <- base::paste(info, collapse = "; ")
[11:01:15.545]                         if (!has_future) {
[11:01:15.545]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:15.545]                             info)
[11:01:15.545]                         }
[11:01:15.545]                         else {
[11:01:15.545]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:15.545]                             info, version)
[11:01:15.545]                         }
[11:01:15.545]                         base::stop(msg)
[11:01:15.545]                       }
[11:01:15.545]                     })
[11:01:15.545]                   }
[11:01:15.545]                   ...future.strategy.old <- future::plan("list")
[11:01:15.545]                   options(future.plan = NULL)
[11:01:15.545]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:15.545]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:15.545]                 }
[11:01:15.545]                 ...future.workdir <- getwd()
[11:01:15.545]             }
[11:01:15.545]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:15.545]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:15.545]         }
[11:01:15.545]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:15.545]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:15.545]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:15.545]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:15.545]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:15.545]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:15.545]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:15.545]             base::names(...future.oldOptions))
[11:01:15.545]     }
[11:01:15.545]     if (FALSE) {
[11:01:15.545]     }
[11:01:15.545]     else {
[11:01:15.545]         if (TRUE) {
[11:01:15.545]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:15.545]                 open = "w")
[11:01:15.545]         }
[11:01:15.545]         else {
[11:01:15.545]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:15.545]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:15.545]         }
[11:01:15.545]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:15.545]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:15.545]             base::sink(type = "output", split = FALSE)
[11:01:15.545]             base::close(...future.stdout)
[11:01:15.545]         }, add = TRUE)
[11:01:15.545]     }
[11:01:15.545]     ...future.frame <- base::sys.nframe()
[11:01:15.545]     ...future.conditions <- base::list()
[11:01:15.545]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:15.545]     if (FALSE) {
[11:01:15.545]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:15.545]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:15.545]     }
[11:01:15.545]     ...future.result <- base::tryCatch({
[11:01:15.545]         base::withCallingHandlers({
[11:01:15.545]             ...future.value <- base::withVisible(base::local({
[11:01:15.545]                 42L
[11:01:15.545]             }))
[11:01:15.545]             future::FutureResult(value = ...future.value$value, 
[11:01:15.545]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:15.545]                   ...future.rng), globalenv = if (FALSE) 
[11:01:15.545]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:15.545]                     ...future.globalenv.names))
[11:01:15.545]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:15.545]         }, condition = base::local({
[11:01:15.545]             c <- base::c
[11:01:15.545]             inherits <- base::inherits
[11:01:15.545]             invokeRestart <- base::invokeRestart
[11:01:15.545]             length <- base::length
[11:01:15.545]             list <- base::list
[11:01:15.545]             seq.int <- base::seq.int
[11:01:15.545]             signalCondition <- base::signalCondition
[11:01:15.545]             sys.calls <- base::sys.calls
[11:01:15.545]             `[[` <- base::`[[`
[11:01:15.545]             `+` <- base::`+`
[11:01:15.545]             `<<-` <- base::`<<-`
[11:01:15.545]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:15.545]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:15.545]                   3L)]
[11:01:15.545]             }
[11:01:15.545]             function(cond) {
[11:01:15.545]                 is_error <- inherits(cond, "error")
[11:01:15.545]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:15.545]                   NULL)
[11:01:15.545]                 if (is_error) {
[11:01:15.545]                   sessionInformation <- function() {
[11:01:15.545]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:15.545]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:15.545]                       search = base::search(), system = base::Sys.info())
[11:01:15.545]                   }
[11:01:15.545]                   ...future.conditions[[length(...future.conditions) + 
[11:01:15.545]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:15.545]                     cond$call), session = sessionInformation(), 
[11:01:15.545]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:15.545]                   signalCondition(cond)
[11:01:15.545]                 }
[11:01:15.545]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:15.545]                 "immediateCondition"))) {
[11:01:15.545]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:15.545]                   ...future.conditions[[length(...future.conditions) + 
[11:01:15.545]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:15.545]                   if (TRUE && !signal) {
[11:01:15.545]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.545]                     {
[11:01:15.545]                       inherits <- base::inherits
[11:01:15.545]                       invokeRestart <- base::invokeRestart
[11:01:15.545]                       is.null <- base::is.null
[11:01:15.545]                       muffled <- FALSE
[11:01:15.545]                       if (inherits(cond, "message")) {
[11:01:15.545]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:15.545]                         if (muffled) 
[11:01:15.545]                           invokeRestart("muffleMessage")
[11:01:15.545]                       }
[11:01:15.545]                       else if (inherits(cond, "warning")) {
[11:01:15.545]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:15.545]                         if (muffled) 
[11:01:15.545]                           invokeRestart("muffleWarning")
[11:01:15.545]                       }
[11:01:15.545]                       else if (inherits(cond, "condition")) {
[11:01:15.545]                         if (!is.null(pattern)) {
[11:01:15.545]                           computeRestarts <- base::computeRestarts
[11:01:15.545]                           grepl <- base::grepl
[11:01:15.545]                           restarts <- computeRestarts(cond)
[11:01:15.545]                           for (restart in restarts) {
[11:01:15.545]                             name <- restart$name
[11:01:15.545]                             if (is.null(name)) 
[11:01:15.545]                               next
[11:01:15.545]                             if (!grepl(pattern, name)) 
[11:01:15.545]                               next
[11:01:15.545]                             invokeRestart(restart)
[11:01:15.545]                             muffled <- TRUE
[11:01:15.545]                             break
[11:01:15.545]                           }
[11:01:15.545]                         }
[11:01:15.545]                       }
[11:01:15.545]                       invisible(muffled)
[11:01:15.545]                     }
[11:01:15.545]                     muffleCondition(cond, pattern = "^muffle")
[11:01:15.545]                   }
[11:01:15.545]                 }
[11:01:15.545]                 else {
[11:01:15.545]                   if (TRUE) {
[11:01:15.545]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.545]                     {
[11:01:15.545]                       inherits <- base::inherits
[11:01:15.545]                       invokeRestart <- base::invokeRestart
[11:01:15.545]                       is.null <- base::is.null
[11:01:15.545]                       muffled <- FALSE
[11:01:15.545]                       if (inherits(cond, "message")) {
[11:01:15.545]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:15.545]                         if (muffled) 
[11:01:15.545]                           invokeRestart("muffleMessage")
[11:01:15.545]                       }
[11:01:15.545]                       else if (inherits(cond, "warning")) {
[11:01:15.545]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:15.545]                         if (muffled) 
[11:01:15.545]                           invokeRestart("muffleWarning")
[11:01:15.545]                       }
[11:01:15.545]                       else if (inherits(cond, "condition")) {
[11:01:15.545]                         if (!is.null(pattern)) {
[11:01:15.545]                           computeRestarts <- base::computeRestarts
[11:01:15.545]                           grepl <- base::grepl
[11:01:15.545]                           restarts <- computeRestarts(cond)
[11:01:15.545]                           for (restart in restarts) {
[11:01:15.545]                             name <- restart$name
[11:01:15.545]                             if (is.null(name)) 
[11:01:15.545]                               next
[11:01:15.545]                             if (!grepl(pattern, name)) 
[11:01:15.545]                               next
[11:01:15.545]                             invokeRestart(restart)
[11:01:15.545]                             muffled <- TRUE
[11:01:15.545]                             break
[11:01:15.545]                           }
[11:01:15.545]                         }
[11:01:15.545]                       }
[11:01:15.545]                       invisible(muffled)
[11:01:15.545]                     }
[11:01:15.545]                     muffleCondition(cond, pattern = "^muffle")
[11:01:15.545]                   }
[11:01:15.545]                 }
[11:01:15.545]             }
[11:01:15.545]         }))
[11:01:15.545]     }, error = function(ex) {
[11:01:15.545]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:15.545]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:15.545]                 ...future.rng), started = ...future.startTime, 
[11:01:15.545]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:15.545]             version = "1.8"), class = "FutureResult")
[11:01:15.545]     }, finally = {
[11:01:15.545]         if (!identical(...future.workdir, getwd())) 
[11:01:15.545]             setwd(...future.workdir)
[11:01:15.545]         {
[11:01:15.545]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:15.545]                 ...future.oldOptions$nwarnings <- NULL
[11:01:15.545]             }
[11:01:15.545]             base::options(...future.oldOptions)
[11:01:15.545]             if (.Platform$OS.type == "windows") {
[11:01:15.545]                 old_names <- names(...future.oldEnvVars)
[11:01:15.545]                 envs <- base::Sys.getenv()
[11:01:15.545]                 names <- names(envs)
[11:01:15.545]                 common <- intersect(names, old_names)
[11:01:15.545]                 added <- setdiff(names, old_names)
[11:01:15.545]                 removed <- setdiff(old_names, names)
[11:01:15.545]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:15.545]                   envs[common]]
[11:01:15.545]                 NAMES <- toupper(changed)
[11:01:15.545]                 args <- list()
[11:01:15.545]                 for (kk in seq_along(NAMES)) {
[11:01:15.545]                   name <- changed[[kk]]
[11:01:15.545]                   NAME <- NAMES[[kk]]
[11:01:15.545]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.545]                     next
[11:01:15.545]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:15.545]                 }
[11:01:15.545]                 NAMES <- toupper(added)
[11:01:15.545]                 for (kk in seq_along(NAMES)) {
[11:01:15.545]                   name <- added[[kk]]
[11:01:15.545]                   NAME <- NAMES[[kk]]
[11:01:15.545]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.545]                     next
[11:01:15.545]                   args[[name]] <- ""
[11:01:15.545]                 }
[11:01:15.545]                 NAMES <- toupper(removed)
[11:01:15.545]                 for (kk in seq_along(NAMES)) {
[11:01:15.545]                   name <- removed[[kk]]
[11:01:15.545]                   NAME <- NAMES[[kk]]
[11:01:15.545]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.545]                     next
[11:01:15.545]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:15.545]                 }
[11:01:15.545]                 if (length(args) > 0) 
[11:01:15.545]                   base::do.call(base::Sys.setenv, args = args)
[11:01:15.545]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:15.545]             }
[11:01:15.545]             else {
[11:01:15.545]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:15.545]             }
[11:01:15.545]             {
[11:01:15.545]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:15.545]                   0L) {
[11:01:15.545]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:15.545]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:15.545]                   base::options(opts)
[11:01:15.545]                 }
[11:01:15.545]                 {
[11:01:15.545]                   {
[11:01:15.545]                     NULL
[11:01:15.545]                     RNGkind("Mersenne-Twister")
[11:01:15.545]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:15.545]                       inherits = FALSE)
[11:01:15.545]                   }
[11:01:15.545]                   options(future.plan = NULL)
[11:01:15.545]                   if (is.na(NA_character_)) 
[11:01:15.545]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:15.545]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:15.545]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:15.545]                     .init = FALSE)
[11:01:15.545]                 }
[11:01:15.545]             }
[11:01:15.545]         }
[11:01:15.545]     })
[11:01:15.545]     if (TRUE) {
[11:01:15.545]         base::sink(type = "output", split = FALSE)
[11:01:15.545]         if (TRUE) {
[11:01:15.545]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:15.545]         }
[11:01:15.545]         else {
[11:01:15.545]             ...future.result["stdout"] <- base::list(NULL)
[11:01:15.545]         }
[11:01:15.545]         base::close(...future.stdout)
[11:01:15.545]         ...future.stdout <- NULL
[11:01:15.545]     }
[11:01:15.545]     ...future.result$conditions <- ...future.conditions
[11:01:15.545]     ...future.result$finished <- base::Sys.time()
[11:01:15.545]     ...future.result
[11:01:15.545] }
[11:01:15.547] plan(): Setting new future strategy stack:
[11:01:15.547] List of future strategies:
[11:01:15.547] 1. sequential:
[11:01:15.547]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:15.547]    - tweaked: FALSE
[11:01:15.547]    - call: NULL
[11:01:15.548] plan(): nbrOfWorkers() = 1
[11:01:15.548] plan(): Setting new future strategy stack:
[11:01:15.549] List of future strategies:
[11:01:15.549] 1. future:
[11:01:15.549]    - args: function (..., workers = "<NULL>")
[11:01:15.549]    - tweaked: FALSE
[11:01:15.549]    - call: plan(foo)
[11:01:15.549] plan(): nbrOfWorkers() = Inf
[11:01:15.549] SequentialFuture started (and completed)
[1] 42
[11:01:15.551] getGlobalsAndPackages() ...
[11:01:15.551] 
[11:01:15.551] - globals: [0] <none>
[11:01:15.551] getGlobalsAndPackages() ... DONE
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x5592706928a8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c21e82d2-42d1-fef3-5aa9-135a24ba36a5
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:15.948] Packages needed by the future expression (n = 0): <none>
[11:01:15.948] Packages needed by future strategies (n = 0): <none>
[11:01:15.948] {
[11:01:15.948]     {
[11:01:15.948]         {
[11:01:15.948]             ...future.startTime <- base::Sys.time()
[11:01:15.948]             {
[11:01:15.948]                 {
[11:01:15.948]                   {
[11:01:15.948]                     {
[11:01:15.948]                       base::local({
[11:01:15.948]                         has_future <- base::requireNamespace("future", 
[11:01:15.948]                           quietly = TRUE)
[11:01:15.948]                         if (has_future) {
[11:01:15.948]                           ns <- base::getNamespace("future")
[11:01:15.948]                           version <- ns[[".package"]][["version"]]
[11:01:15.948]                           if (is.null(version)) 
[11:01:15.948]                             version <- utils::packageVersion("future")
[11:01:15.948]                         }
[11:01:15.948]                         else {
[11:01:15.948]                           version <- NULL
[11:01:15.948]                         }
[11:01:15.948]                         if (!has_future || version < "1.8.0") {
[11:01:15.948]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:15.948]                             "", base::R.version$version.string), 
[11:01:15.948]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:15.948]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:15.948]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:15.948]                               "release", "version")], collapse = " "), 
[11:01:15.948]                             hostname = base::Sys.info()[["nodename"]])
[11:01:15.948]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:15.948]                             info)
[11:01:15.948]                           info <- base::paste(info, collapse = "; ")
[11:01:15.948]                           if (!has_future) {
[11:01:15.948]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:15.948]                               info)
[11:01:15.948]                           }
[11:01:15.948]                           else {
[11:01:15.948]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:15.948]                               info, version)
[11:01:15.948]                           }
[11:01:15.948]                           base::stop(msg)
[11:01:15.948]                         }
[11:01:15.948]                       })
[11:01:15.948]                     }
[11:01:15.948]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:15.948]                     base::options(mc.cores = 1L)
[11:01:15.948]                   }
[11:01:15.948]                   ...future.strategy.old <- future::plan("list")
[11:01:15.948]                   options(future.plan = NULL)
[11:01:15.948]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:15.948]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:15.948]                 }
[11:01:15.948]                 ...future.workdir <- getwd()
[11:01:15.948]             }
[11:01:15.948]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:15.948]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:15.948]         }
[11:01:15.948]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:15.948]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:15.948]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:15.948]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:15.948]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:15.948]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:15.948]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:15.948]             base::names(...future.oldOptions))
[11:01:15.948]     }
[11:01:15.948]     if (FALSE) {
[11:01:15.948]     }
[11:01:15.948]     else {
[11:01:15.948]         if (TRUE) {
[11:01:15.948]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:15.948]                 open = "w")
[11:01:15.948]         }
[11:01:15.948]         else {
[11:01:15.948]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:15.948]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:15.948]         }
[11:01:15.948]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:15.948]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:15.948]             base::sink(type = "output", split = FALSE)
[11:01:15.948]             base::close(...future.stdout)
[11:01:15.948]         }, add = TRUE)
[11:01:15.948]     }
[11:01:15.948]     ...future.frame <- base::sys.nframe()
[11:01:15.948]     ...future.conditions <- base::list()
[11:01:15.948]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:15.948]     if (FALSE) {
[11:01:15.948]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:15.948]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:15.948]     }
[11:01:15.948]     ...future.result <- base::tryCatch({
[11:01:15.948]         base::withCallingHandlers({
[11:01:15.948]             ...future.value <- base::withVisible(base::local({
[11:01:15.948]                 ...future.makeSendCondition <- base::local({
[11:01:15.948]                   sendCondition <- NULL
[11:01:15.948]                   function(frame = 1L) {
[11:01:15.948]                     if (is.function(sendCondition)) 
[11:01:15.948]                       return(sendCondition)
[11:01:15.948]                     ns <- getNamespace("parallel")
[11:01:15.948]                     if (exists("sendData", mode = "function", 
[11:01:15.948]                       envir = ns)) {
[11:01:15.948]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:15.948]                         envir = ns)
[11:01:15.948]                       envir <- sys.frame(frame)
[11:01:15.948]                       master <- NULL
[11:01:15.948]                       while (!identical(envir, .GlobalEnv) && 
[11:01:15.948]                         !identical(envir, emptyenv())) {
[11:01:15.948]                         if (exists("master", mode = "list", envir = envir, 
[11:01:15.948]                           inherits = FALSE)) {
[11:01:15.948]                           master <- get("master", mode = "list", 
[11:01:15.948]                             envir = envir, inherits = FALSE)
[11:01:15.948]                           if (inherits(master, c("SOCKnode", 
[11:01:15.948]                             "SOCK0node"))) {
[11:01:15.948]                             sendCondition <<- function(cond) {
[11:01:15.948]                               data <- list(type = "VALUE", value = cond, 
[11:01:15.948]                                 success = TRUE)
[11:01:15.948]                               parallel_sendData(master, data)
[11:01:15.948]                             }
[11:01:15.948]                             return(sendCondition)
[11:01:15.948]                           }
[11:01:15.948]                         }
[11:01:15.948]                         frame <- frame + 1L
[11:01:15.948]                         envir <- sys.frame(frame)
[11:01:15.948]                       }
[11:01:15.948]                     }
[11:01:15.948]                     sendCondition <<- function(cond) NULL
[11:01:15.948]                   }
[11:01:15.948]                 })
[11:01:15.948]                 withCallingHandlers({
[11:01:15.948]                   {
[11:01:15.948]                     42L
[11:01:15.948]                   }
[11:01:15.948]                 }, immediateCondition = function(cond) {
[11:01:15.948]                   sendCondition <- ...future.makeSendCondition()
[11:01:15.948]                   sendCondition(cond)
[11:01:15.948]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.948]                   {
[11:01:15.948]                     inherits <- base::inherits
[11:01:15.948]                     invokeRestart <- base::invokeRestart
[11:01:15.948]                     is.null <- base::is.null
[11:01:15.948]                     muffled <- FALSE
[11:01:15.948]                     if (inherits(cond, "message")) {
[11:01:15.948]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:15.948]                       if (muffled) 
[11:01:15.948]                         invokeRestart("muffleMessage")
[11:01:15.948]                     }
[11:01:15.948]                     else if (inherits(cond, "warning")) {
[11:01:15.948]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:15.948]                       if (muffled) 
[11:01:15.948]                         invokeRestart("muffleWarning")
[11:01:15.948]                     }
[11:01:15.948]                     else if (inherits(cond, "condition")) {
[11:01:15.948]                       if (!is.null(pattern)) {
[11:01:15.948]                         computeRestarts <- base::computeRestarts
[11:01:15.948]                         grepl <- base::grepl
[11:01:15.948]                         restarts <- computeRestarts(cond)
[11:01:15.948]                         for (restart in restarts) {
[11:01:15.948]                           name <- restart$name
[11:01:15.948]                           if (is.null(name)) 
[11:01:15.948]                             next
[11:01:15.948]                           if (!grepl(pattern, name)) 
[11:01:15.948]                             next
[11:01:15.948]                           invokeRestart(restart)
[11:01:15.948]                           muffled <- TRUE
[11:01:15.948]                           break
[11:01:15.948]                         }
[11:01:15.948]                       }
[11:01:15.948]                     }
[11:01:15.948]                     invisible(muffled)
[11:01:15.948]                   }
[11:01:15.948]                   muffleCondition(cond)
[11:01:15.948]                 })
[11:01:15.948]             }))
[11:01:15.948]             future::FutureResult(value = ...future.value$value, 
[11:01:15.948]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:15.948]                   ...future.rng), globalenv = if (FALSE) 
[11:01:15.948]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:15.948]                     ...future.globalenv.names))
[11:01:15.948]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:15.948]         }, condition = base::local({
[11:01:15.948]             c <- base::c
[11:01:15.948]             inherits <- base::inherits
[11:01:15.948]             invokeRestart <- base::invokeRestart
[11:01:15.948]             length <- base::length
[11:01:15.948]             list <- base::list
[11:01:15.948]             seq.int <- base::seq.int
[11:01:15.948]             signalCondition <- base::signalCondition
[11:01:15.948]             sys.calls <- base::sys.calls
[11:01:15.948]             `[[` <- base::`[[`
[11:01:15.948]             `+` <- base::`+`
[11:01:15.948]             `<<-` <- base::`<<-`
[11:01:15.948]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:15.948]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:15.948]                   3L)]
[11:01:15.948]             }
[11:01:15.948]             function(cond) {
[11:01:15.948]                 is_error <- inherits(cond, "error")
[11:01:15.948]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:15.948]                   NULL)
[11:01:15.948]                 if (is_error) {
[11:01:15.948]                   sessionInformation <- function() {
[11:01:15.948]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:15.948]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:15.948]                       search = base::search(), system = base::Sys.info())
[11:01:15.948]                   }
[11:01:15.948]                   ...future.conditions[[length(...future.conditions) + 
[11:01:15.948]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:15.948]                     cond$call), session = sessionInformation(), 
[11:01:15.948]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:15.948]                   signalCondition(cond)
[11:01:15.948]                 }
[11:01:15.948]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:15.948]                 "immediateCondition"))) {
[11:01:15.948]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:15.948]                   ...future.conditions[[length(...future.conditions) + 
[11:01:15.948]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:15.948]                   if (TRUE && !signal) {
[11:01:15.948]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.948]                     {
[11:01:15.948]                       inherits <- base::inherits
[11:01:15.948]                       invokeRestart <- base::invokeRestart
[11:01:15.948]                       is.null <- base::is.null
[11:01:15.948]                       muffled <- FALSE
[11:01:15.948]                       if (inherits(cond, "message")) {
[11:01:15.948]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:15.948]                         if (muffled) 
[11:01:15.948]                           invokeRestart("muffleMessage")
[11:01:15.948]                       }
[11:01:15.948]                       else if (inherits(cond, "warning")) {
[11:01:15.948]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:15.948]                         if (muffled) 
[11:01:15.948]                           invokeRestart("muffleWarning")
[11:01:15.948]                       }
[11:01:15.948]                       else if (inherits(cond, "condition")) {
[11:01:15.948]                         if (!is.null(pattern)) {
[11:01:15.948]                           computeRestarts <- base::computeRestarts
[11:01:15.948]                           grepl <- base::grepl
[11:01:15.948]                           restarts <- computeRestarts(cond)
[11:01:15.948]                           for (restart in restarts) {
[11:01:15.948]                             name <- restart$name
[11:01:15.948]                             if (is.null(name)) 
[11:01:15.948]                               next
[11:01:15.948]                             if (!grepl(pattern, name)) 
[11:01:15.948]                               next
[11:01:15.948]                             invokeRestart(restart)
[11:01:15.948]                             muffled <- TRUE
[11:01:15.948]                             break
[11:01:15.948]                           }
[11:01:15.948]                         }
[11:01:15.948]                       }
[11:01:15.948]                       invisible(muffled)
[11:01:15.948]                     }
[11:01:15.948]                     muffleCondition(cond, pattern = "^muffle")
[11:01:15.948]                   }
[11:01:15.948]                 }
[11:01:15.948]                 else {
[11:01:15.948]                   if (TRUE) {
[11:01:15.948]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:15.948]                     {
[11:01:15.948]                       inherits <- base::inherits
[11:01:15.948]                       invokeRestart <- base::invokeRestart
[11:01:15.948]                       is.null <- base::is.null
[11:01:15.948]                       muffled <- FALSE
[11:01:15.948]                       if (inherits(cond, "message")) {
[11:01:15.948]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:15.948]                         if (muffled) 
[11:01:15.948]                           invokeRestart("muffleMessage")
[11:01:15.948]                       }
[11:01:15.948]                       else if (inherits(cond, "warning")) {
[11:01:15.948]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:15.948]                         if (muffled) 
[11:01:15.948]                           invokeRestart("muffleWarning")
[11:01:15.948]                       }
[11:01:15.948]                       else if (inherits(cond, "condition")) {
[11:01:15.948]                         if (!is.null(pattern)) {
[11:01:15.948]                           computeRestarts <- base::computeRestarts
[11:01:15.948]                           grepl <- base::grepl
[11:01:15.948]                           restarts <- computeRestarts(cond)
[11:01:15.948]                           for (restart in restarts) {
[11:01:15.948]                             name <- restart$name
[11:01:15.948]                             if (is.null(name)) 
[11:01:15.948]                               next
[11:01:15.948]                             if (!grepl(pattern, name)) 
[11:01:15.948]                               next
[11:01:15.948]                             invokeRestart(restart)
[11:01:15.948]                             muffled <- TRUE
[11:01:15.948]                             break
[11:01:15.948]                           }
[11:01:15.948]                         }
[11:01:15.948]                       }
[11:01:15.948]                       invisible(muffled)
[11:01:15.948]                     }
[11:01:15.948]                     muffleCondition(cond, pattern = "^muffle")
[11:01:15.948]                   }
[11:01:15.948]                 }
[11:01:15.948]             }
[11:01:15.948]         }))
[11:01:15.948]     }, error = function(ex) {
[11:01:15.948]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:15.948]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:15.948]                 ...future.rng), started = ...future.startTime, 
[11:01:15.948]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:15.948]             version = "1.8"), class = "FutureResult")
[11:01:15.948]     }, finally = {
[11:01:15.948]         if (!identical(...future.workdir, getwd())) 
[11:01:15.948]             setwd(...future.workdir)
[11:01:15.948]         {
[11:01:15.948]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:15.948]                 ...future.oldOptions$nwarnings <- NULL
[11:01:15.948]             }
[11:01:15.948]             base::options(...future.oldOptions)
[11:01:15.948]             if (.Platform$OS.type == "windows") {
[11:01:15.948]                 old_names <- names(...future.oldEnvVars)
[11:01:15.948]                 envs <- base::Sys.getenv()
[11:01:15.948]                 names <- names(envs)
[11:01:15.948]                 common <- intersect(names, old_names)
[11:01:15.948]                 added <- setdiff(names, old_names)
[11:01:15.948]                 removed <- setdiff(old_names, names)
[11:01:15.948]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:15.948]                   envs[common]]
[11:01:15.948]                 NAMES <- toupper(changed)
[11:01:15.948]                 args <- list()
[11:01:15.948]                 for (kk in seq_along(NAMES)) {
[11:01:15.948]                   name <- changed[[kk]]
[11:01:15.948]                   NAME <- NAMES[[kk]]
[11:01:15.948]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.948]                     next
[11:01:15.948]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:15.948]                 }
[11:01:15.948]                 NAMES <- toupper(added)
[11:01:15.948]                 for (kk in seq_along(NAMES)) {
[11:01:15.948]                   name <- added[[kk]]
[11:01:15.948]                   NAME <- NAMES[[kk]]
[11:01:15.948]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.948]                     next
[11:01:15.948]                   args[[name]] <- ""
[11:01:15.948]                 }
[11:01:15.948]                 NAMES <- toupper(removed)
[11:01:15.948]                 for (kk in seq_along(NAMES)) {
[11:01:15.948]                   name <- removed[[kk]]
[11:01:15.948]                   NAME <- NAMES[[kk]]
[11:01:15.948]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:15.948]                     next
[11:01:15.948]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:15.948]                 }
[11:01:15.948]                 if (length(args) > 0) 
[11:01:15.948]                   base::do.call(base::Sys.setenv, args = args)
[11:01:15.948]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:15.948]             }
[11:01:15.948]             else {
[11:01:15.948]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:15.948]             }
[11:01:15.948]             {
[11:01:15.948]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:15.948]                   0L) {
[11:01:15.948]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:15.948]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:15.948]                   base::options(opts)
[11:01:15.948]                 }
[11:01:15.948]                 {
[11:01:15.948]                   {
[11:01:15.948]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:15.948]                     NULL
[11:01:15.948]                   }
[11:01:15.948]                   options(future.plan = NULL)
[11:01:15.948]                   if (is.na(NA_character_)) 
[11:01:15.948]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:15.948]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:15.948]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:15.948]                     .init = FALSE)
[11:01:15.948]                 }
[11:01:15.948]             }
[11:01:15.948]         }
[11:01:15.948]     })
[11:01:15.948]     if (TRUE) {
[11:01:15.948]         base::sink(type = "output", split = FALSE)
[11:01:15.948]         if (TRUE) {
[11:01:15.948]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:15.948]         }
[11:01:15.948]         else {
[11:01:15.948]             ...future.result["stdout"] <- base::list(NULL)
[11:01:15.948]         }
[11:01:15.948]         base::close(...future.stdout)
[11:01:15.948]         ...future.stdout <- NULL
[11:01:15.948]     }
[11:01:15.948]     ...future.result$conditions <- ...future.conditions
[11:01:15.948]     ...future.result$finished <- base::Sys.time()
[11:01:15.948]     ...future.result
[11:01:15.948] }
[11:01:15.999] MultisessionFuture started
[11:01:15.999] result() for ClusterFuture ...
[11:01:15.999] receiveMessageFromWorker() for ClusterFuture ...
[11:01:16.000] - Validating connection of MultisessionFuture
[11:01:16.029] - received message: FutureResult
[11:01:16.030] - Received FutureResult
[11:01:16.032] - Erased future from FutureRegistry
[11:01:16.032] result() for ClusterFuture ...
[11:01:16.032] - result already collected: FutureResult
[11:01:16.032] result() for ClusterFuture ... done
[11:01:16.033] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:16.033] result() for ClusterFuture ... done
[11:01:16.033] result() for ClusterFuture ...
[11:01:16.033] - result already collected: FutureResult
[11:01:16.033] result() for ClusterFuture ... done
[1] 42
[11:01:16.034] getGlobalsAndPackages() ...
[11:01:16.034] 
[11:01:16.034] - globals: [0] <none>
[11:01:16.034] getGlobalsAndPackages() ... DONE
[11:01:16.041] Packages needed by the future expression (n = 0): <none>
[11:01:16.041] Packages needed by future strategies (n = 0): <none>
[11:01:16.041] {
[11:01:16.041]     {
[11:01:16.041]         {
[11:01:16.041]             ...future.startTime <- base::Sys.time()
[11:01:16.041]             {
[11:01:16.041]                 {
[11:01:16.041]                   {
[11:01:16.041]                     {
[11:01:16.041]                       base::local({
[11:01:16.041]                         has_future <- base::requireNamespace("future", 
[11:01:16.041]                           quietly = TRUE)
[11:01:16.041]                         if (has_future) {
[11:01:16.041]                           ns <- base::getNamespace("future")
[11:01:16.041]                           version <- ns[[".package"]][["version"]]
[11:01:16.041]                           if (is.null(version)) 
[11:01:16.041]                             version <- utils::packageVersion("future")
[11:01:16.041]                         }
[11:01:16.041]                         else {
[11:01:16.041]                           version <- NULL
[11:01:16.041]                         }
[11:01:16.041]                         if (!has_future || version < "1.8.0") {
[11:01:16.041]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.041]                             "", base::R.version$version.string), 
[11:01:16.041]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.041]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.041]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.041]                               "release", "version")], collapse = " "), 
[11:01:16.041]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.041]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.041]                             info)
[11:01:16.041]                           info <- base::paste(info, collapse = "; ")
[11:01:16.041]                           if (!has_future) {
[11:01:16.041]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.041]                               info)
[11:01:16.041]                           }
[11:01:16.041]                           else {
[11:01:16.041]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.041]                               info, version)
[11:01:16.041]                           }
[11:01:16.041]                           base::stop(msg)
[11:01:16.041]                         }
[11:01:16.041]                       })
[11:01:16.041]                     }
[11:01:16.041]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.041]                     base::options(mc.cores = 1L)
[11:01:16.041]                   }
[11:01:16.041]                   ...future.strategy.old <- future::plan("list")
[11:01:16.041]                   options(future.plan = NULL)
[11:01:16.041]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.041]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.041]                 }
[11:01:16.041]                 ...future.workdir <- getwd()
[11:01:16.041]             }
[11:01:16.041]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.041]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.041]         }
[11:01:16.041]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.041]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.041]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.041]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.041]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.041]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.041]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.041]             base::names(...future.oldOptions))
[11:01:16.041]     }
[11:01:16.041]     if (FALSE) {
[11:01:16.041]     }
[11:01:16.041]     else {
[11:01:16.041]         if (TRUE) {
[11:01:16.041]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.041]                 open = "w")
[11:01:16.041]         }
[11:01:16.041]         else {
[11:01:16.041]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.041]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.041]         }
[11:01:16.041]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.041]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.041]             base::sink(type = "output", split = FALSE)
[11:01:16.041]             base::close(...future.stdout)
[11:01:16.041]         }, add = TRUE)
[11:01:16.041]     }
[11:01:16.041]     ...future.frame <- base::sys.nframe()
[11:01:16.041]     ...future.conditions <- base::list()
[11:01:16.041]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.041]     if (FALSE) {
[11:01:16.041]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.041]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.041]     }
[11:01:16.041]     ...future.result <- base::tryCatch({
[11:01:16.041]         base::withCallingHandlers({
[11:01:16.041]             ...future.value <- base::withVisible(base::local({
[11:01:16.041]                 ...future.makeSendCondition <- base::local({
[11:01:16.041]                   sendCondition <- NULL
[11:01:16.041]                   function(frame = 1L) {
[11:01:16.041]                     if (is.function(sendCondition)) 
[11:01:16.041]                       return(sendCondition)
[11:01:16.041]                     ns <- getNamespace("parallel")
[11:01:16.041]                     if (exists("sendData", mode = "function", 
[11:01:16.041]                       envir = ns)) {
[11:01:16.041]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:16.041]                         envir = ns)
[11:01:16.041]                       envir <- sys.frame(frame)
[11:01:16.041]                       master <- NULL
[11:01:16.041]                       while (!identical(envir, .GlobalEnv) && 
[11:01:16.041]                         !identical(envir, emptyenv())) {
[11:01:16.041]                         if (exists("master", mode = "list", envir = envir, 
[11:01:16.041]                           inherits = FALSE)) {
[11:01:16.041]                           master <- get("master", mode = "list", 
[11:01:16.041]                             envir = envir, inherits = FALSE)
[11:01:16.041]                           if (inherits(master, c("SOCKnode", 
[11:01:16.041]                             "SOCK0node"))) {
[11:01:16.041]                             sendCondition <<- function(cond) {
[11:01:16.041]                               data <- list(type = "VALUE", value = cond, 
[11:01:16.041]                                 success = TRUE)
[11:01:16.041]                               parallel_sendData(master, data)
[11:01:16.041]                             }
[11:01:16.041]                             return(sendCondition)
[11:01:16.041]                           }
[11:01:16.041]                         }
[11:01:16.041]                         frame <- frame + 1L
[11:01:16.041]                         envir <- sys.frame(frame)
[11:01:16.041]                       }
[11:01:16.041]                     }
[11:01:16.041]                     sendCondition <<- function(cond) NULL
[11:01:16.041]                   }
[11:01:16.041]                 })
[11:01:16.041]                 withCallingHandlers({
[11:01:16.041]                   {
[11:01:16.041]                     42L
[11:01:16.041]                   }
[11:01:16.041]                 }, immediateCondition = function(cond) {
[11:01:16.041]                   sendCondition <- ...future.makeSendCondition()
[11:01:16.041]                   sendCondition(cond)
[11:01:16.041]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.041]                   {
[11:01:16.041]                     inherits <- base::inherits
[11:01:16.041]                     invokeRestart <- base::invokeRestart
[11:01:16.041]                     is.null <- base::is.null
[11:01:16.041]                     muffled <- FALSE
[11:01:16.041]                     if (inherits(cond, "message")) {
[11:01:16.041]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.041]                       if (muffled) 
[11:01:16.041]                         invokeRestart("muffleMessage")
[11:01:16.041]                     }
[11:01:16.041]                     else if (inherits(cond, "warning")) {
[11:01:16.041]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.041]                       if (muffled) 
[11:01:16.041]                         invokeRestart("muffleWarning")
[11:01:16.041]                     }
[11:01:16.041]                     else if (inherits(cond, "condition")) {
[11:01:16.041]                       if (!is.null(pattern)) {
[11:01:16.041]                         computeRestarts <- base::computeRestarts
[11:01:16.041]                         grepl <- base::grepl
[11:01:16.041]                         restarts <- computeRestarts(cond)
[11:01:16.041]                         for (restart in restarts) {
[11:01:16.041]                           name <- restart$name
[11:01:16.041]                           if (is.null(name)) 
[11:01:16.041]                             next
[11:01:16.041]                           if (!grepl(pattern, name)) 
[11:01:16.041]                             next
[11:01:16.041]                           invokeRestart(restart)
[11:01:16.041]                           muffled <- TRUE
[11:01:16.041]                           break
[11:01:16.041]                         }
[11:01:16.041]                       }
[11:01:16.041]                     }
[11:01:16.041]                     invisible(muffled)
[11:01:16.041]                   }
[11:01:16.041]                   muffleCondition(cond)
[11:01:16.041]                 })
[11:01:16.041]             }))
[11:01:16.041]             future::FutureResult(value = ...future.value$value, 
[11:01:16.041]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.041]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.041]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.041]                     ...future.globalenv.names))
[11:01:16.041]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.041]         }, condition = base::local({
[11:01:16.041]             c <- base::c
[11:01:16.041]             inherits <- base::inherits
[11:01:16.041]             invokeRestart <- base::invokeRestart
[11:01:16.041]             length <- base::length
[11:01:16.041]             list <- base::list
[11:01:16.041]             seq.int <- base::seq.int
[11:01:16.041]             signalCondition <- base::signalCondition
[11:01:16.041]             sys.calls <- base::sys.calls
[11:01:16.041]             `[[` <- base::`[[`
[11:01:16.041]             `+` <- base::`+`
[11:01:16.041]             `<<-` <- base::`<<-`
[11:01:16.041]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.041]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.041]                   3L)]
[11:01:16.041]             }
[11:01:16.041]             function(cond) {
[11:01:16.041]                 is_error <- inherits(cond, "error")
[11:01:16.041]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.041]                   NULL)
[11:01:16.041]                 if (is_error) {
[11:01:16.041]                   sessionInformation <- function() {
[11:01:16.041]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.041]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.041]                       search = base::search(), system = base::Sys.info())
[11:01:16.041]                   }
[11:01:16.041]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.041]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.041]                     cond$call), session = sessionInformation(), 
[11:01:16.041]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.041]                   signalCondition(cond)
[11:01:16.041]                 }
[11:01:16.041]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.041]                 "immediateCondition"))) {
[11:01:16.041]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.041]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.041]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.041]                   if (TRUE && !signal) {
[11:01:16.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.041]                     {
[11:01:16.041]                       inherits <- base::inherits
[11:01:16.041]                       invokeRestart <- base::invokeRestart
[11:01:16.041]                       is.null <- base::is.null
[11:01:16.041]                       muffled <- FALSE
[11:01:16.041]                       if (inherits(cond, "message")) {
[11:01:16.041]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.041]                         if (muffled) 
[11:01:16.041]                           invokeRestart("muffleMessage")
[11:01:16.041]                       }
[11:01:16.041]                       else if (inherits(cond, "warning")) {
[11:01:16.041]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.041]                         if (muffled) 
[11:01:16.041]                           invokeRestart("muffleWarning")
[11:01:16.041]                       }
[11:01:16.041]                       else if (inherits(cond, "condition")) {
[11:01:16.041]                         if (!is.null(pattern)) {
[11:01:16.041]                           computeRestarts <- base::computeRestarts
[11:01:16.041]                           grepl <- base::grepl
[11:01:16.041]                           restarts <- computeRestarts(cond)
[11:01:16.041]                           for (restart in restarts) {
[11:01:16.041]                             name <- restart$name
[11:01:16.041]                             if (is.null(name)) 
[11:01:16.041]                               next
[11:01:16.041]                             if (!grepl(pattern, name)) 
[11:01:16.041]                               next
[11:01:16.041]                             invokeRestart(restart)
[11:01:16.041]                             muffled <- TRUE
[11:01:16.041]                             break
[11:01:16.041]                           }
[11:01:16.041]                         }
[11:01:16.041]                       }
[11:01:16.041]                       invisible(muffled)
[11:01:16.041]                     }
[11:01:16.041]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.041]                   }
[11:01:16.041]                 }
[11:01:16.041]                 else {
[11:01:16.041]                   if (TRUE) {
[11:01:16.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.041]                     {
[11:01:16.041]                       inherits <- base::inherits
[11:01:16.041]                       invokeRestart <- base::invokeRestart
[11:01:16.041]                       is.null <- base::is.null
[11:01:16.041]                       muffled <- FALSE
[11:01:16.041]                       if (inherits(cond, "message")) {
[11:01:16.041]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.041]                         if (muffled) 
[11:01:16.041]                           invokeRestart("muffleMessage")
[11:01:16.041]                       }
[11:01:16.041]                       else if (inherits(cond, "warning")) {
[11:01:16.041]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.041]                         if (muffled) 
[11:01:16.041]                           invokeRestart("muffleWarning")
[11:01:16.041]                       }
[11:01:16.041]                       else if (inherits(cond, "condition")) {
[11:01:16.041]                         if (!is.null(pattern)) {
[11:01:16.041]                           computeRestarts <- base::computeRestarts
[11:01:16.041]                           grepl <- base::grepl
[11:01:16.041]                           restarts <- computeRestarts(cond)
[11:01:16.041]                           for (restart in restarts) {
[11:01:16.041]                             name <- restart$name
[11:01:16.041]                             if (is.null(name)) 
[11:01:16.041]                               next
[11:01:16.041]                             if (!grepl(pattern, name)) 
[11:01:16.041]                               next
[11:01:16.041]                             invokeRestart(restart)
[11:01:16.041]                             muffled <- TRUE
[11:01:16.041]                             break
[11:01:16.041]                           }
[11:01:16.041]                         }
[11:01:16.041]                       }
[11:01:16.041]                       invisible(muffled)
[11:01:16.041]                     }
[11:01:16.041]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.041]                   }
[11:01:16.041]                 }
[11:01:16.041]             }
[11:01:16.041]         }))
[11:01:16.041]     }, error = function(ex) {
[11:01:16.041]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.041]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.041]                 ...future.rng), started = ...future.startTime, 
[11:01:16.041]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.041]             version = "1.8"), class = "FutureResult")
[11:01:16.041]     }, finally = {
[11:01:16.041]         if (!identical(...future.workdir, getwd())) 
[11:01:16.041]             setwd(...future.workdir)
[11:01:16.041]         {
[11:01:16.041]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.041]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.041]             }
[11:01:16.041]             base::options(...future.oldOptions)
[11:01:16.041]             if (.Platform$OS.type == "windows") {
[11:01:16.041]                 old_names <- names(...future.oldEnvVars)
[11:01:16.041]                 envs <- base::Sys.getenv()
[11:01:16.041]                 names <- names(envs)
[11:01:16.041]                 common <- intersect(names, old_names)
[11:01:16.041]                 added <- setdiff(names, old_names)
[11:01:16.041]                 removed <- setdiff(old_names, names)
[11:01:16.041]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.041]                   envs[common]]
[11:01:16.041]                 NAMES <- toupper(changed)
[11:01:16.041]                 args <- list()
[11:01:16.041]                 for (kk in seq_along(NAMES)) {
[11:01:16.041]                   name <- changed[[kk]]
[11:01:16.041]                   NAME <- NAMES[[kk]]
[11:01:16.041]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.041]                     next
[11:01:16.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.041]                 }
[11:01:16.041]                 NAMES <- toupper(added)
[11:01:16.041]                 for (kk in seq_along(NAMES)) {
[11:01:16.041]                   name <- added[[kk]]
[11:01:16.041]                   NAME <- NAMES[[kk]]
[11:01:16.041]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.041]                     next
[11:01:16.041]                   args[[name]] <- ""
[11:01:16.041]                 }
[11:01:16.041]                 NAMES <- toupper(removed)
[11:01:16.041]                 for (kk in seq_along(NAMES)) {
[11:01:16.041]                   name <- removed[[kk]]
[11:01:16.041]                   NAME <- NAMES[[kk]]
[11:01:16.041]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.041]                     next
[11:01:16.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.041]                 }
[11:01:16.041]                 if (length(args) > 0) 
[11:01:16.041]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.041]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.041]             }
[11:01:16.041]             else {
[11:01:16.041]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.041]             }
[11:01:16.041]             {
[11:01:16.041]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.041]                   0L) {
[11:01:16.041]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.041]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.041]                   base::options(opts)
[11:01:16.041]                 }
[11:01:16.041]                 {
[11:01:16.041]                   {
[11:01:16.041]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.041]                     NULL
[11:01:16.041]                   }
[11:01:16.041]                   options(future.plan = NULL)
[11:01:16.041]                   if (is.na(NA_character_)) 
[11:01:16.041]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.041]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.041]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.041]                     .init = FALSE)
[11:01:16.041]                 }
[11:01:16.041]             }
[11:01:16.041]         }
[11:01:16.041]     })
[11:01:16.041]     if (TRUE) {
[11:01:16.041]         base::sink(type = "output", split = FALSE)
[11:01:16.041]         if (TRUE) {
[11:01:16.041]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.041]         }
[11:01:16.041]         else {
[11:01:16.041]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.041]         }
[11:01:16.041]         base::close(...future.stdout)
[11:01:16.041]         ...future.stdout <- NULL
[11:01:16.041]     }
[11:01:16.041]     ...future.result$conditions <- ...future.conditions
[11:01:16.041]     ...future.result$finished <- base::Sys.time()
[11:01:16.041]     ...future.result
[11:01:16.041] }
[11:01:16.044] MultisessionFuture started
[11:01:16.044] result() for ClusterFuture ...
[11:01:16.044] receiveMessageFromWorker() for ClusterFuture ...
[11:01:16.045] - Validating connection of MultisessionFuture
[11:01:16.086] - received message: FutureResult
[11:01:16.086] - Received FutureResult
[11:01:16.087] - Erased future from FutureRegistry
[11:01:16.087] result() for ClusterFuture ...
[11:01:16.087] - result already collected: FutureResult
[11:01:16.087] result() for ClusterFuture ... done
[11:01:16.087] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:16.087] result() for ClusterFuture ... done
[11:01:16.087] result() for ClusterFuture ...
[11:01:16.087] - result already collected: FutureResult
[11:01:16.087] result() for ClusterFuture ... done
[1] 42
[11:01:16.088] getGlobalsAndPackages() ...
[11:01:16.088] Searching for globals...
[11:01:16.089] - globals found: [1] ‘{’
[11:01:16.089] Searching for globals ... DONE
[11:01:16.089] Resolving globals: FALSE
[11:01:16.089] 
[11:01:16.089] 
[11:01:16.089] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c21e82d2-42d1-fef3-5aa9-135a24ba36a5
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.090] Packages needed by the future expression (n = 0): <none>
[11:01:16.090] Packages needed by future strategies (n = 0): <none>
[11:01:16.091] {
[11:01:16.091]     {
[11:01:16.091]         {
[11:01:16.091]             ...future.startTime <- base::Sys.time()
[11:01:16.091]             {
[11:01:16.091]                 {
[11:01:16.091]                   {
[11:01:16.091]                     base::local({
[11:01:16.091]                       has_future <- base::requireNamespace("future", 
[11:01:16.091]                         quietly = TRUE)
[11:01:16.091]                       if (has_future) {
[11:01:16.091]                         ns <- base::getNamespace("future")
[11:01:16.091]                         version <- ns[[".package"]][["version"]]
[11:01:16.091]                         if (is.null(version)) 
[11:01:16.091]                           version <- utils::packageVersion("future")
[11:01:16.091]                       }
[11:01:16.091]                       else {
[11:01:16.091]                         version <- NULL
[11:01:16.091]                       }
[11:01:16.091]                       if (!has_future || version < "1.8.0") {
[11:01:16.091]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.091]                           "", base::R.version$version.string), 
[11:01:16.091]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:16.091]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.091]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.091]                             "release", "version")], collapse = " "), 
[11:01:16.091]                           hostname = base::Sys.info()[["nodename"]])
[11:01:16.091]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.091]                           info)
[11:01:16.091]                         info <- base::paste(info, collapse = "; ")
[11:01:16.091]                         if (!has_future) {
[11:01:16.091]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.091]                             info)
[11:01:16.091]                         }
[11:01:16.091]                         else {
[11:01:16.091]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.091]                             info, version)
[11:01:16.091]                         }
[11:01:16.091]                         base::stop(msg)
[11:01:16.091]                       }
[11:01:16.091]                     })
[11:01:16.091]                   }
[11:01:16.091]                   ...future.strategy.old <- future::plan("list")
[11:01:16.091]                   options(future.plan = NULL)
[11:01:16.091]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.091]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.091]                 }
[11:01:16.091]                 ...future.workdir <- getwd()
[11:01:16.091]             }
[11:01:16.091]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.091]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.091]         }
[11:01:16.091]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.091]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.091]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.091]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.091]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.091]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.091]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.091]             base::names(...future.oldOptions))
[11:01:16.091]     }
[11:01:16.091]     if (FALSE) {
[11:01:16.091]     }
[11:01:16.091]     else {
[11:01:16.091]         if (TRUE) {
[11:01:16.091]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.091]                 open = "w")
[11:01:16.091]         }
[11:01:16.091]         else {
[11:01:16.091]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.091]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.091]         }
[11:01:16.091]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.091]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.091]             base::sink(type = "output", split = FALSE)
[11:01:16.091]             base::close(...future.stdout)
[11:01:16.091]         }, add = TRUE)
[11:01:16.091]     }
[11:01:16.091]     ...future.frame <- base::sys.nframe()
[11:01:16.091]     ...future.conditions <- base::list()
[11:01:16.091]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.091]     if (FALSE) {
[11:01:16.091]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.091]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.091]     }
[11:01:16.091]     ...future.result <- base::tryCatch({
[11:01:16.091]         base::withCallingHandlers({
[11:01:16.091]             ...future.value <- base::withVisible(base::local({
[11:01:16.091]                 42L
[11:01:16.091]             }))
[11:01:16.091]             future::FutureResult(value = ...future.value$value, 
[11:01:16.091]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.091]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.091]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.091]                     ...future.globalenv.names))
[11:01:16.091]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.091]         }, condition = base::local({
[11:01:16.091]             c <- base::c
[11:01:16.091]             inherits <- base::inherits
[11:01:16.091]             invokeRestart <- base::invokeRestart
[11:01:16.091]             length <- base::length
[11:01:16.091]             list <- base::list
[11:01:16.091]             seq.int <- base::seq.int
[11:01:16.091]             signalCondition <- base::signalCondition
[11:01:16.091]             sys.calls <- base::sys.calls
[11:01:16.091]             `[[` <- base::`[[`
[11:01:16.091]             `+` <- base::`+`
[11:01:16.091]             `<<-` <- base::`<<-`
[11:01:16.091]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.091]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.091]                   3L)]
[11:01:16.091]             }
[11:01:16.091]             function(cond) {
[11:01:16.091]                 is_error <- inherits(cond, "error")
[11:01:16.091]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.091]                   NULL)
[11:01:16.091]                 if (is_error) {
[11:01:16.091]                   sessionInformation <- function() {
[11:01:16.091]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.091]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.091]                       search = base::search(), system = base::Sys.info())
[11:01:16.091]                   }
[11:01:16.091]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.091]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.091]                     cond$call), session = sessionInformation(), 
[11:01:16.091]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.091]                   signalCondition(cond)
[11:01:16.091]                 }
[11:01:16.091]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.091]                 "immediateCondition"))) {
[11:01:16.091]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.091]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.091]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.091]                   if (TRUE && !signal) {
[11:01:16.091]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.091]                     {
[11:01:16.091]                       inherits <- base::inherits
[11:01:16.091]                       invokeRestart <- base::invokeRestart
[11:01:16.091]                       is.null <- base::is.null
[11:01:16.091]                       muffled <- FALSE
[11:01:16.091]                       if (inherits(cond, "message")) {
[11:01:16.091]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.091]                         if (muffled) 
[11:01:16.091]                           invokeRestart("muffleMessage")
[11:01:16.091]                       }
[11:01:16.091]                       else if (inherits(cond, "warning")) {
[11:01:16.091]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.091]                         if (muffled) 
[11:01:16.091]                           invokeRestart("muffleWarning")
[11:01:16.091]                       }
[11:01:16.091]                       else if (inherits(cond, "condition")) {
[11:01:16.091]                         if (!is.null(pattern)) {
[11:01:16.091]                           computeRestarts <- base::computeRestarts
[11:01:16.091]                           grepl <- base::grepl
[11:01:16.091]                           restarts <- computeRestarts(cond)
[11:01:16.091]                           for (restart in restarts) {
[11:01:16.091]                             name <- restart$name
[11:01:16.091]                             if (is.null(name)) 
[11:01:16.091]                               next
[11:01:16.091]                             if (!grepl(pattern, name)) 
[11:01:16.091]                               next
[11:01:16.091]                             invokeRestart(restart)
[11:01:16.091]                             muffled <- TRUE
[11:01:16.091]                             break
[11:01:16.091]                           }
[11:01:16.091]                         }
[11:01:16.091]                       }
[11:01:16.091]                       invisible(muffled)
[11:01:16.091]                     }
[11:01:16.091]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.091]                   }
[11:01:16.091]                 }
[11:01:16.091]                 else {
[11:01:16.091]                   if (TRUE) {
[11:01:16.091]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.091]                     {
[11:01:16.091]                       inherits <- base::inherits
[11:01:16.091]                       invokeRestart <- base::invokeRestart
[11:01:16.091]                       is.null <- base::is.null
[11:01:16.091]                       muffled <- FALSE
[11:01:16.091]                       if (inherits(cond, "message")) {
[11:01:16.091]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.091]                         if (muffled) 
[11:01:16.091]                           invokeRestart("muffleMessage")
[11:01:16.091]                       }
[11:01:16.091]                       else if (inherits(cond, "warning")) {
[11:01:16.091]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.091]                         if (muffled) 
[11:01:16.091]                           invokeRestart("muffleWarning")
[11:01:16.091]                       }
[11:01:16.091]                       else if (inherits(cond, "condition")) {
[11:01:16.091]                         if (!is.null(pattern)) {
[11:01:16.091]                           computeRestarts <- base::computeRestarts
[11:01:16.091]                           grepl <- base::grepl
[11:01:16.091]                           restarts <- computeRestarts(cond)
[11:01:16.091]                           for (restart in restarts) {
[11:01:16.091]                             name <- restart$name
[11:01:16.091]                             if (is.null(name)) 
[11:01:16.091]                               next
[11:01:16.091]                             if (!grepl(pattern, name)) 
[11:01:16.091]                               next
[11:01:16.091]                             invokeRestart(restart)
[11:01:16.091]                             muffled <- TRUE
[11:01:16.091]                             break
[11:01:16.091]                           }
[11:01:16.091]                         }
[11:01:16.091]                       }
[11:01:16.091]                       invisible(muffled)
[11:01:16.091]                     }
[11:01:16.091]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.091]                   }
[11:01:16.091]                 }
[11:01:16.091]             }
[11:01:16.091]         }))
[11:01:16.091]     }, error = function(ex) {
[11:01:16.091]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.091]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.091]                 ...future.rng), started = ...future.startTime, 
[11:01:16.091]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.091]             version = "1.8"), class = "FutureResult")
[11:01:16.091]     }, finally = {
[11:01:16.091]         if (!identical(...future.workdir, getwd())) 
[11:01:16.091]             setwd(...future.workdir)
[11:01:16.091]         {
[11:01:16.091]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.091]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.091]             }
[11:01:16.091]             base::options(...future.oldOptions)
[11:01:16.091]             if (.Platform$OS.type == "windows") {
[11:01:16.091]                 old_names <- names(...future.oldEnvVars)
[11:01:16.091]                 envs <- base::Sys.getenv()
[11:01:16.091]                 names <- names(envs)
[11:01:16.091]                 common <- intersect(names, old_names)
[11:01:16.091]                 added <- setdiff(names, old_names)
[11:01:16.091]                 removed <- setdiff(old_names, names)
[11:01:16.091]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.091]                   envs[common]]
[11:01:16.091]                 NAMES <- toupper(changed)
[11:01:16.091]                 args <- list()
[11:01:16.091]                 for (kk in seq_along(NAMES)) {
[11:01:16.091]                   name <- changed[[kk]]
[11:01:16.091]                   NAME <- NAMES[[kk]]
[11:01:16.091]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.091]                     next
[11:01:16.091]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.091]                 }
[11:01:16.091]                 NAMES <- toupper(added)
[11:01:16.091]                 for (kk in seq_along(NAMES)) {
[11:01:16.091]                   name <- added[[kk]]
[11:01:16.091]                   NAME <- NAMES[[kk]]
[11:01:16.091]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.091]                     next
[11:01:16.091]                   args[[name]] <- ""
[11:01:16.091]                 }
[11:01:16.091]                 NAMES <- toupper(removed)
[11:01:16.091]                 for (kk in seq_along(NAMES)) {
[11:01:16.091]                   name <- removed[[kk]]
[11:01:16.091]                   NAME <- NAMES[[kk]]
[11:01:16.091]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.091]                     next
[11:01:16.091]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.091]                 }
[11:01:16.091]                 if (length(args) > 0) 
[11:01:16.091]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.091]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.091]             }
[11:01:16.091]             else {
[11:01:16.091]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.091]             }
[11:01:16.091]             {
[11:01:16.091]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.091]                   0L) {
[11:01:16.091]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.091]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.091]                   base::options(opts)
[11:01:16.091]                 }
[11:01:16.091]                 {
[11:01:16.091]                   {
[11:01:16.091]                     NULL
[11:01:16.091]                     RNGkind("Mersenne-Twister")
[11:01:16.091]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:16.091]                       inherits = FALSE)
[11:01:16.091]                   }
[11:01:16.091]                   options(future.plan = NULL)
[11:01:16.091]                   if (is.na(NA_character_)) 
[11:01:16.091]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.091]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.091]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.091]                     .init = FALSE)
[11:01:16.091]                 }
[11:01:16.091]             }
[11:01:16.091]         }
[11:01:16.091]     })
[11:01:16.091]     if (TRUE) {
[11:01:16.091]         base::sink(type = "output", split = FALSE)
[11:01:16.091]         if (TRUE) {
[11:01:16.091]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.091]         }
[11:01:16.091]         else {
[11:01:16.091]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.091]         }
[11:01:16.091]         base::close(...future.stdout)
[11:01:16.091]         ...future.stdout <- NULL
[11:01:16.091]     }
[11:01:16.091]     ...future.result$conditions <- ...future.conditions
[11:01:16.091]     ...future.result$finished <- base::Sys.time()
[11:01:16.091]     ...future.result
[11:01:16.091] }
[11:01:16.093] plan(): Setting new future strategy stack:
[11:01:16.093] List of future strategies:
[11:01:16.093] 1. sequential:
[11:01:16.093]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.093]    - tweaked: FALSE
[11:01:16.093]    - call: NULL
[11:01:16.093] plan(): nbrOfWorkers() = 1
[11:01:16.094] plan(): Setting new future strategy stack:
[11:01:16.094] List of future strategies:
[11:01:16.094] 1. future:
[11:01:16.094]    - args: function (..., workers = "<NULL>")
[11:01:16.094]    - tweaked: FALSE
[11:01:16.094]    - call: plan(foo)
[11:01:16.095] plan(): nbrOfWorkers() = Inf
[11:01:16.095] SequentialFuture started (and completed)
[1] 42
[11:01:16.095] getGlobalsAndPackages() ...
[11:01:16.095] Searching for globals...
[11:01:16.096] - globals found: [1] ‘{’
[11:01:16.096] Searching for globals ... DONE
[11:01:16.096] Resolving globals: FALSE
[11:01:16.096] 
[11:01:16.097] 
[11:01:16.097] getGlobalsAndPackages() ... DONE
[11:01:16.097] Packages needed by the future expression (n = 0): <none>
[11:01:16.097] Packages needed by future strategies (n = 0): <none>
[11:01:16.097] {
[11:01:16.097]     {
[11:01:16.097]         {
[11:01:16.097]             ...future.startTime <- base::Sys.time()
[11:01:16.097]             {
[11:01:16.097]                 {
[11:01:16.097]                   {
[11:01:16.097]                     base::local({
[11:01:16.097]                       has_future <- base::requireNamespace("future", 
[11:01:16.097]                         quietly = TRUE)
[11:01:16.097]                       if (has_future) {
[11:01:16.097]                         ns <- base::getNamespace("future")
[11:01:16.097]                         version <- ns[[".package"]][["version"]]
[11:01:16.097]                         if (is.null(version)) 
[11:01:16.097]                           version <- utils::packageVersion("future")
[11:01:16.097]                       }
[11:01:16.097]                       else {
[11:01:16.097]                         version <- NULL
[11:01:16.097]                       }
[11:01:16.097]                       if (!has_future || version < "1.8.0") {
[11:01:16.097]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.097]                           "", base::R.version$version.string), 
[11:01:16.097]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:16.097]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.097]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.097]                             "release", "version")], collapse = " "), 
[11:01:16.097]                           hostname = base::Sys.info()[["nodename"]])
[11:01:16.097]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.097]                           info)
[11:01:16.097]                         info <- base::paste(info, collapse = "; ")
[11:01:16.097]                         if (!has_future) {
[11:01:16.097]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.097]                             info)
[11:01:16.097]                         }
[11:01:16.097]                         else {
[11:01:16.097]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.097]                             info, version)
[11:01:16.097]                         }
[11:01:16.097]                         base::stop(msg)
[11:01:16.097]                       }
[11:01:16.097]                     })
[11:01:16.097]                   }
[11:01:16.097]                   ...future.strategy.old <- future::plan("list")
[11:01:16.097]                   options(future.plan = NULL)
[11:01:16.097]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.097]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.097]                 }
[11:01:16.097]                 ...future.workdir <- getwd()
[11:01:16.097]             }
[11:01:16.097]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.097]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.097]         }
[11:01:16.097]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.097]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.097]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.097]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.097]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.097]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.097]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.097]             base::names(...future.oldOptions))
[11:01:16.097]     }
[11:01:16.097]     if (FALSE) {
[11:01:16.097]     }
[11:01:16.097]     else {
[11:01:16.097]         if (TRUE) {
[11:01:16.097]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.097]                 open = "w")
[11:01:16.097]         }
[11:01:16.097]         else {
[11:01:16.097]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.097]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.097]         }
[11:01:16.097]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.097]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.097]             base::sink(type = "output", split = FALSE)
[11:01:16.097]             base::close(...future.stdout)
[11:01:16.097]         }, add = TRUE)
[11:01:16.097]     }
[11:01:16.097]     ...future.frame <- base::sys.nframe()
[11:01:16.097]     ...future.conditions <- base::list()
[11:01:16.097]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.097]     if (FALSE) {
[11:01:16.097]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.097]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.097]     }
[11:01:16.097]     ...future.result <- base::tryCatch({
[11:01:16.097]         base::withCallingHandlers({
[11:01:16.097]             ...future.value <- base::withVisible(base::local({
[11:01:16.097]                 42L
[11:01:16.097]             }))
[11:01:16.097]             future::FutureResult(value = ...future.value$value, 
[11:01:16.097]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.097]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.097]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.097]                     ...future.globalenv.names))
[11:01:16.097]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.097]         }, condition = base::local({
[11:01:16.097]             c <- base::c
[11:01:16.097]             inherits <- base::inherits
[11:01:16.097]             invokeRestart <- base::invokeRestart
[11:01:16.097]             length <- base::length
[11:01:16.097]             list <- base::list
[11:01:16.097]             seq.int <- base::seq.int
[11:01:16.097]             signalCondition <- base::signalCondition
[11:01:16.097]             sys.calls <- base::sys.calls
[11:01:16.097]             `[[` <- base::`[[`
[11:01:16.097]             `+` <- base::`+`
[11:01:16.097]             `<<-` <- base::`<<-`
[11:01:16.097]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.097]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.097]                   3L)]
[11:01:16.097]             }
[11:01:16.097]             function(cond) {
[11:01:16.097]                 is_error <- inherits(cond, "error")
[11:01:16.097]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.097]                   NULL)
[11:01:16.097]                 if (is_error) {
[11:01:16.097]                   sessionInformation <- function() {
[11:01:16.097]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.097]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.097]                       search = base::search(), system = base::Sys.info())
[11:01:16.097]                   }
[11:01:16.097]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.097]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.097]                     cond$call), session = sessionInformation(), 
[11:01:16.097]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.097]                   signalCondition(cond)
[11:01:16.097]                 }
[11:01:16.097]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.097]                 "immediateCondition"))) {
[11:01:16.097]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.097]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.097]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.097]                   if (TRUE && !signal) {
[11:01:16.097]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.097]                     {
[11:01:16.097]                       inherits <- base::inherits
[11:01:16.097]                       invokeRestart <- base::invokeRestart
[11:01:16.097]                       is.null <- base::is.null
[11:01:16.097]                       muffled <- FALSE
[11:01:16.097]                       if (inherits(cond, "message")) {
[11:01:16.097]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.097]                         if (muffled) 
[11:01:16.097]                           invokeRestart("muffleMessage")
[11:01:16.097]                       }
[11:01:16.097]                       else if (inherits(cond, "warning")) {
[11:01:16.097]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.097]                         if (muffled) 
[11:01:16.097]                           invokeRestart("muffleWarning")
[11:01:16.097]                       }
[11:01:16.097]                       else if (inherits(cond, "condition")) {
[11:01:16.097]                         if (!is.null(pattern)) {
[11:01:16.097]                           computeRestarts <- base::computeRestarts
[11:01:16.097]                           grepl <- base::grepl
[11:01:16.097]                           restarts <- computeRestarts(cond)
[11:01:16.097]                           for (restart in restarts) {
[11:01:16.097]                             name <- restart$name
[11:01:16.097]                             if (is.null(name)) 
[11:01:16.097]                               next
[11:01:16.097]                             if (!grepl(pattern, name)) 
[11:01:16.097]                               next
[11:01:16.097]                             invokeRestart(restart)
[11:01:16.097]                             muffled <- TRUE
[11:01:16.097]                             break
[11:01:16.097]                           }
[11:01:16.097]                         }
[11:01:16.097]                       }
[11:01:16.097]                       invisible(muffled)
[11:01:16.097]                     }
[11:01:16.097]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.097]                   }
[11:01:16.097]                 }
[11:01:16.097]                 else {
[11:01:16.097]                   if (TRUE) {
[11:01:16.097]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.097]                     {
[11:01:16.097]                       inherits <- base::inherits
[11:01:16.097]                       invokeRestart <- base::invokeRestart
[11:01:16.097]                       is.null <- base::is.null
[11:01:16.097]                       muffled <- FALSE
[11:01:16.097]                       if (inherits(cond, "message")) {
[11:01:16.097]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.097]                         if (muffled) 
[11:01:16.097]                           invokeRestart("muffleMessage")
[11:01:16.097]                       }
[11:01:16.097]                       else if (inherits(cond, "warning")) {
[11:01:16.097]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.097]                         if (muffled) 
[11:01:16.097]                           invokeRestart("muffleWarning")
[11:01:16.097]                       }
[11:01:16.097]                       else if (inherits(cond, "condition")) {
[11:01:16.097]                         if (!is.null(pattern)) {
[11:01:16.097]                           computeRestarts <- base::computeRestarts
[11:01:16.097]                           grepl <- base::grepl
[11:01:16.097]                           restarts <- computeRestarts(cond)
[11:01:16.097]                           for (restart in restarts) {
[11:01:16.097]                             name <- restart$name
[11:01:16.097]                             if (is.null(name)) 
[11:01:16.097]                               next
[11:01:16.097]                             if (!grepl(pattern, name)) 
[11:01:16.097]                               next
[11:01:16.097]                             invokeRestart(restart)
[11:01:16.097]                             muffled <- TRUE
[11:01:16.097]                             break
[11:01:16.097]                           }
[11:01:16.097]                         }
[11:01:16.097]                       }
[11:01:16.097]                       invisible(muffled)
[11:01:16.097]                     }
[11:01:16.097]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.097]                   }
[11:01:16.097]                 }
[11:01:16.097]             }
[11:01:16.097]         }))
[11:01:16.097]     }, error = function(ex) {
[11:01:16.097]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.097]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.097]                 ...future.rng), started = ...future.startTime, 
[11:01:16.097]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.097]             version = "1.8"), class = "FutureResult")
[11:01:16.097]     }, finally = {
[11:01:16.097]         if (!identical(...future.workdir, getwd())) 
[11:01:16.097]             setwd(...future.workdir)
[11:01:16.097]         {
[11:01:16.097]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.097]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.097]             }
[11:01:16.097]             base::options(...future.oldOptions)
[11:01:16.097]             if (.Platform$OS.type == "windows") {
[11:01:16.097]                 old_names <- names(...future.oldEnvVars)
[11:01:16.097]                 envs <- base::Sys.getenv()
[11:01:16.097]                 names <- names(envs)
[11:01:16.097]                 common <- intersect(names, old_names)
[11:01:16.097]                 added <- setdiff(names, old_names)
[11:01:16.097]                 removed <- setdiff(old_names, names)
[11:01:16.097]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.097]                   envs[common]]
[11:01:16.097]                 NAMES <- toupper(changed)
[11:01:16.097]                 args <- list()
[11:01:16.097]                 for (kk in seq_along(NAMES)) {
[11:01:16.097]                   name <- changed[[kk]]
[11:01:16.097]                   NAME <- NAMES[[kk]]
[11:01:16.097]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.097]                     next
[11:01:16.097]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.097]                 }
[11:01:16.097]                 NAMES <- toupper(added)
[11:01:16.097]                 for (kk in seq_along(NAMES)) {
[11:01:16.097]                   name <- added[[kk]]
[11:01:16.097]                   NAME <- NAMES[[kk]]
[11:01:16.097]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.097]                     next
[11:01:16.097]                   args[[name]] <- ""
[11:01:16.097]                 }
[11:01:16.097]                 NAMES <- toupper(removed)
[11:01:16.097]                 for (kk in seq_along(NAMES)) {
[11:01:16.097]                   name <- removed[[kk]]
[11:01:16.097]                   NAME <- NAMES[[kk]]
[11:01:16.097]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.097]                     next
[11:01:16.097]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.097]                 }
[11:01:16.097]                 if (length(args) > 0) 
[11:01:16.097]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.097]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.097]             }
[11:01:16.097]             else {
[11:01:16.097]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.097]             }
[11:01:16.097]             {
[11:01:16.097]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.097]                   0L) {
[11:01:16.097]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.097]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.097]                   base::options(opts)
[11:01:16.097]                 }
[11:01:16.097]                 {
[11:01:16.097]                   {
[11:01:16.097]                     NULL
[11:01:16.097]                     RNGkind("Mersenne-Twister")
[11:01:16.097]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:16.097]                       inherits = FALSE)
[11:01:16.097]                   }
[11:01:16.097]                   options(future.plan = NULL)
[11:01:16.097]                   if (is.na(NA_character_)) 
[11:01:16.097]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.097]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.097]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.097]                     .init = FALSE)
[11:01:16.097]                 }
[11:01:16.097]             }
[11:01:16.097]         }
[11:01:16.097]     })
[11:01:16.097]     if (TRUE) {
[11:01:16.097]         base::sink(type = "output", split = FALSE)
[11:01:16.097]         if (TRUE) {
[11:01:16.097]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.097]         }
[11:01:16.097]         else {
[11:01:16.097]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.097]         }
[11:01:16.097]         base::close(...future.stdout)
[11:01:16.097]         ...future.stdout <- NULL
[11:01:16.097]     }
[11:01:16.097]     ...future.result$conditions <- ...future.conditions
[11:01:16.097]     ...future.result$finished <- base::Sys.time()
[11:01:16.097]     ...future.result
[11:01:16.097] }
[11:01:16.099] plan(): Setting new future strategy stack:
[11:01:16.100] List of future strategies:
[11:01:16.100] 1. sequential:
[11:01:16.100]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.100]    - tweaked: FALSE
[11:01:16.100]    - call: NULL
[11:01:16.100] plan(): nbrOfWorkers() = 1
[11:01:16.101] plan(): Setting new future strategy stack:
[11:01:16.101] List of future strategies:
[11:01:16.101] 1. future:
[11:01:16.101]    - args: function (..., workers = "<NULL>")
[11:01:16.101]    - tweaked: FALSE
[11:01:16.101]    - call: plan(foo)
[11:01:16.101] plan(): nbrOfWorkers() = Inf
[11:01:16.101] SequentialFuture started (and completed)
[1] 42
[11:01:16.102] getGlobalsAndPackages() ...
[11:01:16.102] 
[11:01:16.102] - globals: [0] <none>
[11:01:16.102] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55926f1cc108
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c21e82d2-42d1-fef3-5aa9-135a24ba36a5
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.104] Packages needed by the future expression (n = 0): <none>
[11:01:16.104] Packages needed by future strategies (n = 0): <none>
[11:01:16.104] {
[11:01:16.104]     {
[11:01:16.104]         {
[11:01:16.104]             ...future.startTime <- base::Sys.time()
[11:01:16.104]             {
[11:01:16.104]                 {
[11:01:16.104]                   {
[11:01:16.104]                     {
[11:01:16.104]                       base::local({
[11:01:16.104]                         has_future <- base::requireNamespace("future", 
[11:01:16.104]                           quietly = TRUE)
[11:01:16.104]                         if (has_future) {
[11:01:16.104]                           ns <- base::getNamespace("future")
[11:01:16.104]                           version <- ns[[".package"]][["version"]]
[11:01:16.104]                           if (is.null(version)) 
[11:01:16.104]                             version <- utils::packageVersion("future")
[11:01:16.104]                         }
[11:01:16.104]                         else {
[11:01:16.104]                           version <- NULL
[11:01:16.104]                         }
[11:01:16.104]                         if (!has_future || version < "1.8.0") {
[11:01:16.104]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.104]                             "", base::R.version$version.string), 
[11:01:16.104]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.104]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.104]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.104]                               "release", "version")], collapse = " "), 
[11:01:16.104]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.104]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.104]                             info)
[11:01:16.104]                           info <- base::paste(info, collapse = "; ")
[11:01:16.104]                           if (!has_future) {
[11:01:16.104]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.104]                               info)
[11:01:16.104]                           }
[11:01:16.104]                           else {
[11:01:16.104]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.104]                               info, version)
[11:01:16.104]                           }
[11:01:16.104]                           base::stop(msg)
[11:01:16.104]                         }
[11:01:16.104]                       })
[11:01:16.104]                     }
[11:01:16.104]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.104]                     base::options(mc.cores = 1L)
[11:01:16.104]                   }
[11:01:16.104]                   ...future.strategy.old <- future::plan("list")
[11:01:16.104]                   options(future.plan = NULL)
[11:01:16.104]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.104]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.104]                 }
[11:01:16.104]                 ...future.workdir <- getwd()
[11:01:16.104]             }
[11:01:16.104]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.104]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.104]         }
[11:01:16.104]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.104]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.104]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.104]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.104]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.104]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.104]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.104]             base::names(...future.oldOptions))
[11:01:16.104]     }
[11:01:16.104]     if (FALSE) {
[11:01:16.104]     }
[11:01:16.104]     else {
[11:01:16.104]         if (TRUE) {
[11:01:16.104]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.104]                 open = "w")
[11:01:16.104]         }
[11:01:16.104]         else {
[11:01:16.104]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.104]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.104]         }
[11:01:16.104]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.104]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.104]             base::sink(type = "output", split = FALSE)
[11:01:16.104]             base::close(...future.stdout)
[11:01:16.104]         }, add = TRUE)
[11:01:16.104]     }
[11:01:16.104]     ...future.frame <- base::sys.nframe()
[11:01:16.104]     ...future.conditions <- base::list()
[11:01:16.104]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.104]     if (FALSE) {
[11:01:16.104]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.104]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.104]     }
[11:01:16.104]     ...future.result <- base::tryCatch({
[11:01:16.104]         base::withCallingHandlers({
[11:01:16.104]             ...future.value <- base::withVisible(base::local({
[11:01:16.104]                 withCallingHandlers({
[11:01:16.104]                   {
[11:01:16.104]                     42L
[11:01:16.104]                   }
[11:01:16.104]                 }, immediateCondition = function(cond) {
[11:01:16.104]                   save_rds <- function (object, pathname, ...) 
[11:01:16.104]                   {
[11:01:16.104]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:16.104]                     if (file_test("-f", pathname_tmp)) {
[11:01:16.104]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.104]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:16.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.104]                         fi_tmp[["mtime"]])
[11:01:16.104]                     }
[11:01:16.104]                     tryCatch({
[11:01:16.104]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:16.104]                     }, error = function(ex) {
[11:01:16.104]                       msg <- conditionMessage(ex)
[11:01:16.104]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.104]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:16.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.104]                         fi_tmp[["mtime"]], msg)
[11:01:16.104]                       ex$message <- msg
[11:01:16.104]                       stop(ex)
[11:01:16.104]                     })
[11:01:16.104]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:16.104]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:16.104]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:16.104]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.104]                       fi <- file.info(pathname)
[11:01:16.104]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:16.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.104]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:16.104]                         fi[["size"]], fi[["mtime"]])
[11:01:16.104]                       stop(msg)
[11:01:16.104]                     }
[11:01:16.104]                     invisible(pathname)
[11:01:16.104]                   }
[11:01:16.104]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:16.104]                     rootPath = tempdir()) 
[11:01:16.104]                   {
[11:01:16.104]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:16.104]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:16.104]                       tmpdir = path, fileext = ".rds")
[11:01:16.104]                     save_rds(obj, file)
[11:01:16.104]                   }
[11:01:16.104]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe09q2z/.future/immediateConditions")
[11:01:16.104]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.104]                   {
[11:01:16.104]                     inherits <- base::inherits
[11:01:16.104]                     invokeRestart <- base::invokeRestart
[11:01:16.104]                     is.null <- base::is.null
[11:01:16.104]                     muffled <- FALSE
[11:01:16.104]                     if (inherits(cond, "message")) {
[11:01:16.104]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.104]                       if (muffled) 
[11:01:16.104]                         invokeRestart("muffleMessage")
[11:01:16.104]                     }
[11:01:16.104]                     else if (inherits(cond, "warning")) {
[11:01:16.104]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.104]                       if (muffled) 
[11:01:16.104]                         invokeRestart("muffleWarning")
[11:01:16.104]                     }
[11:01:16.104]                     else if (inherits(cond, "condition")) {
[11:01:16.104]                       if (!is.null(pattern)) {
[11:01:16.104]                         computeRestarts <- base::computeRestarts
[11:01:16.104]                         grepl <- base::grepl
[11:01:16.104]                         restarts <- computeRestarts(cond)
[11:01:16.104]                         for (restart in restarts) {
[11:01:16.104]                           name <- restart$name
[11:01:16.104]                           if (is.null(name)) 
[11:01:16.104]                             next
[11:01:16.104]                           if (!grepl(pattern, name)) 
[11:01:16.104]                             next
[11:01:16.104]                           invokeRestart(restart)
[11:01:16.104]                           muffled <- TRUE
[11:01:16.104]                           break
[11:01:16.104]                         }
[11:01:16.104]                       }
[11:01:16.104]                     }
[11:01:16.104]                     invisible(muffled)
[11:01:16.104]                   }
[11:01:16.104]                   muffleCondition(cond)
[11:01:16.104]                 })
[11:01:16.104]             }))
[11:01:16.104]             future::FutureResult(value = ...future.value$value, 
[11:01:16.104]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.104]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.104]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.104]                     ...future.globalenv.names))
[11:01:16.104]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.104]         }, condition = base::local({
[11:01:16.104]             c <- base::c
[11:01:16.104]             inherits <- base::inherits
[11:01:16.104]             invokeRestart <- base::invokeRestart
[11:01:16.104]             length <- base::length
[11:01:16.104]             list <- base::list
[11:01:16.104]             seq.int <- base::seq.int
[11:01:16.104]             signalCondition <- base::signalCondition
[11:01:16.104]             sys.calls <- base::sys.calls
[11:01:16.104]             `[[` <- base::`[[`
[11:01:16.104]             `+` <- base::`+`
[11:01:16.104]             `<<-` <- base::`<<-`
[11:01:16.104]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.104]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.104]                   3L)]
[11:01:16.104]             }
[11:01:16.104]             function(cond) {
[11:01:16.104]                 is_error <- inherits(cond, "error")
[11:01:16.104]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.104]                   NULL)
[11:01:16.104]                 if (is_error) {
[11:01:16.104]                   sessionInformation <- function() {
[11:01:16.104]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.104]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.104]                       search = base::search(), system = base::Sys.info())
[11:01:16.104]                   }
[11:01:16.104]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.104]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.104]                     cond$call), session = sessionInformation(), 
[11:01:16.104]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.104]                   signalCondition(cond)
[11:01:16.104]                 }
[11:01:16.104]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.104]                 "immediateCondition"))) {
[11:01:16.104]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.104]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.104]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.104]                   if (TRUE && !signal) {
[11:01:16.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.104]                     {
[11:01:16.104]                       inherits <- base::inherits
[11:01:16.104]                       invokeRestart <- base::invokeRestart
[11:01:16.104]                       is.null <- base::is.null
[11:01:16.104]                       muffled <- FALSE
[11:01:16.104]                       if (inherits(cond, "message")) {
[11:01:16.104]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.104]                         if (muffled) 
[11:01:16.104]                           invokeRestart("muffleMessage")
[11:01:16.104]                       }
[11:01:16.104]                       else if (inherits(cond, "warning")) {
[11:01:16.104]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.104]                         if (muffled) 
[11:01:16.104]                           invokeRestart("muffleWarning")
[11:01:16.104]                       }
[11:01:16.104]                       else if (inherits(cond, "condition")) {
[11:01:16.104]                         if (!is.null(pattern)) {
[11:01:16.104]                           computeRestarts <- base::computeRestarts
[11:01:16.104]                           grepl <- base::grepl
[11:01:16.104]                           restarts <- computeRestarts(cond)
[11:01:16.104]                           for (restart in restarts) {
[11:01:16.104]                             name <- restart$name
[11:01:16.104]                             if (is.null(name)) 
[11:01:16.104]                               next
[11:01:16.104]                             if (!grepl(pattern, name)) 
[11:01:16.104]                               next
[11:01:16.104]                             invokeRestart(restart)
[11:01:16.104]                             muffled <- TRUE
[11:01:16.104]                             break
[11:01:16.104]                           }
[11:01:16.104]                         }
[11:01:16.104]                       }
[11:01:16.104]                       invisible(muffled)
[11:01:16.104]                     }
[11:01:16.104]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.104]                   }
[11:01:16.104]                 }
[11:01:16.104]                 else {
[11:01:16.104]                   if (TRUE) {
[11:01:16.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.104]                     {
[11:01:16.104]                       inherits <- base::inherits
[11:01:16.104]                       invokeRestart <- base::invokeRestart
[11:01:16.104]                       is.null <- base::is.null
[11:01:16.104]                       muffled <- FALSE
[11:01:16.104]                       if (inherits(cond, "message")) {
[11:01:16.104]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.104]                         if (muffled) 
[11:01:16.104]                           invokeRestart("muffleMessage")
[11:01:16.104]                       }
[11:01:16.104]                       else if (inherits(cond, "warning")) {
[11:01:16.104]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.104]                         if (muffled) 
[11:01:16.104]                           invokeRestart("muffleWarning")
[11:01:16.104]                       }
[11:01:16.104]                       else if (inherits(cond, "condition")) {
[11:01:16.104]                         if (!is.null(pattern)) {
[11:01:16.104]                           computeRestarts <- base::computeRestarts
[11:01:16.104]                           grepl <- base::grepl
[11:01:16.104]                           restarts <- computeRestarts(cond)
[11:01:16.104]                           for (restart in restarts) {
[11:01:16.104]                             name <- restart$name
[11:01:16.104]                             if (is.null(name)) 
[11:01:16.104]                               next
[11:01:16.104]                             if (!grepl(pattern, name)) 
[11:01:16.104]                               next
[11:01:16.104]                             invokeRestart(restart)
[11:01:16.104]                             muffled <- TRUE
[11:01:16.104]                             break
[11:01:16.104]                           }
[11:01:16.104]                         }
[11:01:16.104]                       }
[11:01:16.104]                       invisible(muffled)
[11:01:16.104]                     }
[11:01:16.104]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.104]                   }
[11:01:16.104]                 }
[11:01:16.104]             }
[11:01:16.104]         }))
[11:01:16.104]     }, error = function(ex) {
[11:01:16.104]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.104]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.104]                 ...future.rng), started = ...future.startTime, 
[11:01:16.104]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.104]             version = "1.8"), class = "FutureResult")
[11:01:16.104]     }, finally = {
[11:01:16.104]         if (!identical(...future.workdir, getwd())) 
[11:01:16.104]             setwd(...future.workdir)
[11:01:16.104]         {
[11:01:16.104]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.104]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.104]             }
[11:01:16.104]             base::options(...future.oldOptions)
[11:01:16.104]             if (.Platform$OS.type == "windows") {
[11:01:16.104]                 old_names <- names(...future.oldEnvVars)
[11:01:16.104]                 envs <- base::Sys.getenv()
[11:01:16.104]                 names <- names(envs)
[11:01:16.104]                 common <- intersect(names, old_names)
[11:01:16.104]                 added <- setdiff(names, old_names)
[11:01:16.104]                 removed <- setdiff(old_names, names)
[11:01:16.104]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.104]                   envs[common]]
[11:01:16.104]                 NAMES <- toupper(changed)
[11:01:16.104]                 args <- list()
[11:01:16.104]                 for (kk in seq_along(NAMES)) {
[11:01:16.104]                   name <- changed[[kk]]
[11:01:16.104]                   NAME <- NAMES[[kk]]
[11:01:16.104]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.104]                     next
[11:01:16.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.104]                 }
[11:01:16.104]                 NAMES <- toupper(added)
[11:01:16.104]                 for (kk in seq_along(NAMES)) {
[11:01:16.104]                   name <- added[[kk]]
[11:01:16.104]                   NAME <- NAMES[[kk]]
[11:01:16.104]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.104]                     next
[11:01:16.104]                   args[[name]] <- ""
[11:01:16.104]                 }
[11:01:16.104]                 NAMES <- toupper(removed)
[11:01:16.104]                 for (kk in seq_along(NAMES)) {
[11:01:16.104]                   name <- removed[[kk]]
[11:01:16.104]                   NAME <- NAMES[[kk]]
[11:01:16.104]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.104]                     next
[11:01:16.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.104]                 }
[11:01:16.104]                 if (length(args) > 0) 
[11:01:16.104]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.104]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.104]             }
[11:01:16.104]             else {
[11:01:16.104]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.104]             }
[11:01:16.104]             {
[11:01:16.104]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.104]                   0L) {
[11:01:16.104]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.104]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.104]                   base::options(opts)
[11:01:16.104]                 }
[11:01:16.104]                 {
[11:01:16.104]                   {
[11:01:16.104]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.104]                     NULL
[11:01:16.104]                   }
[11:01:16.104]                   options(future.plan = NULL)
[11:01:16.104]                   if (is.na(NA_character_)) 
[11:01:16.104]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.104]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.104]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.104]                     .init = FALSE)
[11:01:16.104]                 }
[11:01:16.104]             }
[11:01:16.104]         }
[11:01:16.104]     })
[11:01:16.104]     if (TRUE) {
[11:01:16.104]         base::sink(type = "output", split = FALSE)
[11:01:16.104]         if (TRUE) {
[11:01:16.104]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.104]         }
[11:01:16.104]         else {
[11:01:16.104]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.104]         }
[11:01:16.104]         base::close(...future.stdout)
[11:01:16.104]         ...future.stdout <- NULL
[11:01:16.104]     }
[11:01:16.104]     ...future.result$conditions <- ...future.conditions
[11:01:16.104]     ...future.result$finished <- base::Sys.time()
[11:01:16.104]     ...future.result
[11:01:16.104] }
[11:01:16.107] requestCore(): workers = 1
[11:01:16.110] MulticoreFuture started
[11:01:16.110] plan(): Setting new future strategy stack:
[11:01:16.111] result() for MulticoreFuture ...
[11:01:16.111] List of future strategies:
[11:01:16.111] 1. sequential:
[11:01:16.111]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.111]    - tweaked: FALSE
[11:01:16.111]    - call: NULL
[11:01:16.112] plan(): nbrOfWorkers() = 1
[11:01:16.114] plan(): Setting new future strategy stack:
[11:01:16.114] List of future strategies:
[11:01:16.114] 1. future:
[11:01:16.114]    - args: function (..., workers = "<NULL>")
[11:01:16.114]    - tweaked: FALSE
[11:01:16.114]    - call: plan(foo)
[11:01:16.115] plan(): nbrOfWorkers() = Inf
[11:01:16.116] result() for MulticoreFuture ...
[11:01:16.116] result() for MulticoreFuture ... done
[11:01:16.116] result() for MulticoreFuture ... done
[11:01:16.116] result() for MulticoreFuture ...
[11:01:16.116] result() for MulticoreFuture ... done
[1] 42
[11:01:16.118] getGlobalsAndPackages() ...
[11:01:16.118] 
[11:01:16.118] - globals: [0] <none>
[11:01:16.119] getGlobalsAndPackages() ... DONE
[11:01:16.119] Packages needed by the future expression (n = 0): <none>
[11:01:16.119] Packages needed by future strategies (n = 0): <none>
[11:01:16.120] {
[11:01:16.120]     {
[11:01:16.120]         {
[11:01:16.120]             ...future.startTime <- base::Sys.time()
[11:01:16.120]             {
[11:01:16.120]                 {
[11:01:16.120]                   {
[11:01:16.120]                     {
[11:01:16.120]                       base::local({
[11:01:16.120]                         has_future <- base::requireNamespace("future", 
[11:01:16.120]                           quietly = TRUE)
[11:01:16.120]                         if (has_future) {
[11:01:16.120]                           ns <- base::getNamespace("future")
[11:01:16.120]                           version <- ns[[".package"]][["version"]]
[11:01:16.120]                           if (is.null(version)) 
[11:01:16.120]                             version <- utils::packageVersion("future")
[11:01:16.120]                         }
[11:01:16.120]                         else {
[11:01:16.120]                           version <- NULL
[11:01:16.120]                         }
[11:01:16.120]                         if (!has_future || version < "1.8.0") {
[11:01:16.120]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.120]                             "", base::R.version$version.string), 
[11:01:16.120]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.120]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.120]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.120]                               "release", "version")], collapse = " "), 
[11:01:16.120]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.120]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.120]                             info)
[11:01:16.120]                           info <- base::paste(info, collapse = "; ")
[11:01:16.120]                           if (!has_future) {
[11:01:16.120]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.120]                               info)
[11:01:16.120]                           }
[11:01:16.120]                           else {
[11:01:16.120]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.120]                               info, version)
[11:01:16.120]                           }
[11:01:16.120]                           base::stop(msg)
[11:01:16.120]                         }
[11:01:16.120]                       })
[11:01:16.120]                     }
[11:01:16.120]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.120]                     base::options(mc.cores = 1L)
[11:01:16.120]                   }
[11:01:16.120]                   ...future.strategy.old <- future::plan("list")
[11:01:16.120]                   options(future.plan = NULL)
[11:01:16.120]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.120]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.120]                 }
[11:01:16.120]                 ...future.workdir <- getwd()
[11:01:16.120]             }
[11:01:16.120]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.120]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.120]         }
[11:01:16.120]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.120]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.120]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.120]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.120]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.120]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.120]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.120]             base::names(...future.oldOptions))
[11:01:16.120]     }
[11:01:16.120]     if (FALSE) {
[11:01:16.120]     }
[11:01:16.120]     else {
[11:01:16.120]         if (TRUE) {
[11:01:16.120]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.120]                 open = "w")
[11:01:16.120]         }
[11:01:16.120]         else {
[11:01:16.120]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.120]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.120]         }
[11:01:16.120]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.120]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.120]             base::sink(type = "output", split = FALSE)
[11:01:16.120]             base::close(...future.stdout)
[11:01:16.120]         }, add = TRUE)
[11:01:16.120]     }
[11:01:16.120]     ...future.frame <- base::sys.nframe()
[11:01:16.120]     ...future.conditions <- base::list()
[11:01:16.120]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.120]     if (FALSE) {
[11:01:16.120]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.120]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.120]     }
[11:01:16.120]     ...future.result <- base::tryCatch({
[11:01:16.120]         base::withCallingHandlers({
[11:01:16.120]             ...future.value <- base::withVisible(base::local({
[11:01:16.120]                 withCallingHandlers({
[11:01:16.120]                   {
[11:01:16.120]                     42L
[11:01:16.120]                   }
[11:01:16.120]                 }, immediateCondition = function(cond) {
[11:01:16.120]                   save_rds <- function (object, pathname, ...) 
[11:01:16.120]                   {
[11:01:16.120]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:16.120]                     if (file_test("-f", pathname_tmp)) {
[11:01:16.120]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.120]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:16.120]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.120]                         fi_tmp[["mtime"]])
[11:01:16.120]                     }
[11:01:16.120]                     tryCatch({
[11:01:16.120]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:16.120]                     }, error = function(ex) {
[11:01:16.120]                       msg <- conditionMessage(ex)
[11:01:16.120]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.120]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:16.120]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.120]                         fi_tmp[["mtime"]], msg)
[11:01:16.120]                       ex$message <- msg
[11:01:16.120]                       stop(ex)
[11:01:16.120]                     })
[11:01:16.120]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:16.120]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:16.120]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:16.120]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.120]                       fi <- file.info(pathname)
[11:01:16.120]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:16.120]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.120]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:16.120]                         fi[["size"]], fi[["mtime"]])
[11:01:16.120]                       stop(msg)
[11:01:16.120]                     }
[11:01:16.120]                     invisible(pathname)
[11:01:16.120]                   }
[11:01:16.120]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:16.120]                     rootPath = tempdir()) 
[11:01:16.120]                   {
[11:01:16.120]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:16.120]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:16.120]                       tmpdir = path, fileext = ".rds")
[11:01:16.120]                     save_rds(obj, file)
[11:01:16.120]                   }
[11:01:16.120]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe09q2z/.future/immediateConditions")
[11:01:16.120]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.120]                   {
[11:01:16.120]                     inherits <- base::inherits
[11:01:16.120]                     invokeRestart <- base::invokeRestart
[11:01:16.120]                     is.null <- base::is.null
[11:01:16.120]                     muffled <- FALSE
[11:01:16.120]                     if (inherits(cond, "message")) {
[11:01:16.120]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.120]                       if (muffled) 
[11:01:16.120]                         invokeRestart("muffleMessage")
[11:01:16.120]                     }
[11:01:16.120]                     else if (inherits(cond, "warning")) {
[11:01:16.120]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.120]                       if (muffled) 
[11:01:16.120]                         invokeRestart("muffleWarning")
[11:01:16.120]                     }
[11:01:16.120]                     else if (inherits(cond, "condition")) {
[11:01:16.120]                       if (!is.null(pattern)) {
[11:01:16.120]                         computeRestarts <- base::computeRestarts
[11:01:16.120]                         grepl <- base::grepl
[11:01:16.120]                         restarts <- computeRestarts(cond)
[11:01:16.120]                         for (restart in restarts) {
[11:01:16.120]                           name <- restart$name
[11:01:16.120]                           if (is.null(name)) 
[11:01:16.120]                             next
[11:01:16.120]                           if (!grepl(pattern, name)) 
[11:01:16.120]                             next
[11:01:16.120]                           invokeRestart(restart)
[11:01:16.120]                           muffled <- TRUE
[11:01:16.120]                           break
[11:01:16.120]                         }
[11:01:16.120]                       }
[11:01:16.120]                     }
[11:01:16.120]                     invisible(muffled)
[11:01:16.120]                   }
[11:01:16.120]                   muffleCondition(cond)
[11:01:16.120]                 })
[11:01:16.120]             }))
[11:01:16.120]             future::FutureResult(value = ...future.value$value, 
[11:01:16.120]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.120]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.120]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.120]                     ...future.globalenv.names))
[11:01:16.120]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.120]         }, condition = base::local({
[11:01:16.120]             c <- base::c
[11:01:16.120]             inherits <- base::inherits
[11:01:16.120]             invokeRestart <- base::invokeRestart
[11:01:16.120]             length <- base::length
[11:01:16.120]             list <- base::list
[11:01:16.120]             seq.int <- base::seq.int
[11:01:16.120]             signalCondition <- base::signalCondition
[11:01:16.120]             sys.calls <- base::sys.calls
[11:01:16.120]             `[[` <- base::`[[`
[11:01:16.120]             `+` <- base::`+`
[11:01:16.120]             `<<-` <- base::`<<-`
[11:01:16.120]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.120]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.120]                   3L)]
[11:01:16.120]             }
[11:01:16.120]             function(cond) {
[11:01:16.120]                 is_error <- inherits(cond, "error")
[11:01:16.120]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.120]                   NULL)
[11:01:16.120]                 if (is_error) {
[11:01:16.120]                   sessionInformation <- function() {
[11:01:16.120]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.120]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.120]                       search = base::search(), system = base::Sys.info())
[11:01:16.120]                   }
[11:01:16.120]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.120]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.120]                     cond$call), session = sessionInformation(), 
[11:01:16.120]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.120]                   signalCondition(cond)
[11:01:16.120]                 }
[11:01:16.120]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.120]                 "immediateCondition"))) {
[11:01:16.120]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.120]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.120]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.120]                   if (TRUE && !signal) {
[11:01:16.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.120]                     {
[11:01:16.120]                       inherits <- base::inherits
[11:01:16.120]                       invokeRestart <- base::invokeRestart
[11:01:16.120]                       is.null <- base::is.null
[11:01:16.120]                       muffled <- FALSE
[11:01:16.120]                       if (inherits(cond, "message")) {
[11:01:16.120]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.120]                         if (muffled) 
[11:01:16.120]                           invokeRestart("muffleMessage")
[11:01:16.120]                       }
[11:01:16.120]                       else if (inherits(cond, "warning")) {
[11:01:16.120]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.120]                         if (muffled) 
[11:01:16.120]                           invokeRestart("muffleWarning")
[11:01:16.120]                       }
[11:01:16.120]                       else if (inherits(cond, "condition")) {
[11:01:16.120]                         if (!is.null(pattern)) {
[11:01:16.120]                           computeRestarts <- base::computeRestarts
[11:01:16.120]                           grepl <- base::grepl
[11:01:16.120]                           restarts <- computeRestarts(cond)
[11:01:16.120]                           for (restart in restarts) {
[11:01:16.120]                             name <- restart$name
[11:01:16.120]                             if (is.null(name)) 
[11:01:16.120]                               next
[11:01:16.120]                             if (!grepl(pattern, name)) 
[11:01:16.120]                               next
[11:01:16.120]                             invokeRestart(restart)
[11:01:16.120]                             muffled <- TRUE
[11:01:16.120]                             break
[11:01:16.120]                           }
[11:01:16.120]                         }
[11:01:16.120]                       }
[11:01:16.120]                       invisible(muffled)
[11:01:16.120]                     }
[11:01:16.120]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.120]                   }
[11:01:16.120]                 }
[11:01:16.120]                 else {
[11:01:16.120]                   if (TRUE) {
[11:01:16.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.120]                     {
[11:01:16.120]                       inherits <- base::inherits
[11:01:16.120]                       invokeRestart <- base::invokeRestart
[11:01:16.120]                       is.null <- base::is.null
[11:01:16.120]                       muffled <- FALSE
[11:01:16.120]                       if (inherits(cond, "message")) {
[11:01:16.120]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.120]                         if (muffled) 
[11:01:16.120]                           invokeRestart("muffleMessage")
[11:01:16.120]                       }
[11:01:16.120]                       else if (inherits(cond, "warning")) {
[11:01:16.120]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.120]                         if (muffled) 
[11:01:16.120]                           invokeRestart("muffleWarning")
[11:01:16.120]                       }
[11:01:16.120]                       else if (inherits(cond, "condition")) {
[11:01:16.120]                         if (!is.null(pattern)) {
[11:01:16.120]                           computeRestarts <- base::computeRestarts
[11:01:16.120]                           grepl <- base::grepl
[11:01:16.120]                           restarts <- computeRestarts(cond)
[11:01:16.120]                           for (restart in restarts) {
[11:01:16.120]                             name <- restart$name
[11:01:16.120]                             if (is.null(name)) 
[11:01:16.120]                               next
[11:01:16.120]                             if (!grepl(pattern, name)) 
[11:01:16.120]                               next
[11:01:16.120]                             invokeRestart(restart)
[11:01:16.120]                             muffled <- TRUE
[11:01:16.120]                             break
[11:01:16.120]                           }
[11:01:16.120]                         }
[11:01:16.120]                       }
[11:01:16.120]                       invisible(muffled)
[11:01:16.120]                     }
[11:01:16.120]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.120]                   }
[11:01:16.120]                 }
[11:01:16.120]             }
[11:01:16.120]         }))
[11:01:16.120]     }, error = function(ex) {
[11:01:16.120]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.120]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.120]                 ...future.rng), started = ...future.startTime, 
[11:01:16.120]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.120]             version = "1.8"), class = "FutureResult")
[11:01:16.120]     }, finally = {
[11:01:16.120]         if (!identical(...future.workdir, getwd())) 
[11:01:16.120]             setwd(...future.workdir)
[11:01:16.120]         {
[11:01:16.120]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.120]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.120]             }
[11:01:16.120]             base::options(...future.oldOptions)
[11:01:16.120]             if (.Platform$OS.type == "windows") {
[11:01:16.120]                 old_names <- names(...future.oldEnvVars)
[11:01:16.120]                 envs <- base::Sys.getenv()
[11:01:16.120]                 names <- names(envs)
[11:01:16.120]                 common <- intersect(names, old_names)
[11:01:16.120]                 added <- setdiff(names, old_names)
[11:01:16.120]                 removed <- setdiff(old_names, names)
[11:01:16.120]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.120]                   envs[common]]
[11:01:16.120]                 NAMES <- toupper(changed)
[11:01:16.120]                 args <- list()
[11:01:16.120]                 for (kk in seq_along(NAMES)) {
[11:01:16.120]                   name <- changed[[kk]]
[11:01:16.120]                   NAME <- NAMES[[kk]]
[11:01:16.120]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.120]                     next
[11:01:16.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.120]                 }
[11:01:16.120]                 NAMES <- toupper(added)
[11:01:16.120]                 for (kk in seq_along(NAMES)) {
[11:01:16.120]                   name <- added[[kk]]
[11:01:16.120]                   NAME <- NAMES[[kk]]
[11:01:16.120]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.120]                     next
[11:01:16.120]                   args[[name]] <- ""
[11:01:16.120]                 }
[11:01:16.120]                 NAMES <- toupper(removed)
[11:01:16.120]                 for (kk in seq_along(NAMES)) {
[11:01:16.120]                   name <- removed[[kk]]
[11:01:16.120]                   NAME <- NAMES[[kk]]
[11:01:16.120]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.120]                     next
[11:01:16.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.120]                 }
[11:01:16.120]                 if (length(args) > 0) 
[11:01:16.120]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.120]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.120]             }
[11:01:16.120]             else {
[11:01:16.120]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.120]             }
[11:01:16.120]             {
[11:01:16.120]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.120]                   0L) {
[11:01:16.120]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.120]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.120]                   base::options(opts)
[11:01:16.120]                 }
[11:01:16.120]                 {
[11:01:16.120]                   {
[11:01:16.120]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.120]                     NULL
[11:01:16.120]                   }
[11:01:16.120]                   options(future.plan = NULL)
[11:01:16.120]                   if (is.na(NA_character_)) 
[11:01:16.120]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.120]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.120]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.120]                     .init = FALSE)
[11:01:16.120]                 }
[11:01:16.120]             }
[11:01:16.120]         }
[11:01:16.120]     })
[11:01:16.120]     if (TRUE) {
[11:01:16.120]         base::sink(type = "output", split = FALSE)
[11:01:16.120]         if (TRUE) {
[11:01:16.120]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.120]         }
[11:01:16.120]         else {
[11:01:16.120]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.120]         }
[11:01:16.120]         base::close(...future.stdout)
[11:01:16.120]         ...future.stdout <- NULL
[11:01:16.120]     }
[11:01:16.120]     ...future.result$conditions <- ...future.conditions
[11:01:16.120]     ...future.result$finished <- base::Sys.time()
[11:01:16.120]     ...future.result
[11:01:16.120] }
[11:01:16.123] requestCore(): workers = 1
[11:01:16.125] MulticoreFuture started
[11:01:16.125] result() for MulticoreFuture ...
[11:01:16.125] plan(): Setting new future strategy stack:
[11:01:16.126] List of future strategies:
[11:01:16.126] 1. sequential:
[11:01:16.126]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.126]    - tweaked: FALSE
[11:01:16.126]    - call: NULL
[11:01:16.127] plan(): nbrOfWorkers() = 1
[11:01:16.128] plan(): Setting new future strategy stack:
[11:01:16.129] List of future strategies:
[11:01:16.129] 1. future:
[11:01:16.129]    - args: function (..., workers = "<NULL>")
[11:01:16.129]    - tweaked: FALSE
[11:01:16.129]    - call: plan(foo)
[11:01:16.129] plan(): nbrOfWorkers() = Inf
[11:01:16.130] result() for MulticoreFuture ...
[11:01:16.130] result() for MulticoreFuture ... done
[11:01:16.130] result() for MulticoreFuture ... done
[11:01:16.131] result() for MulticoreFuture ...
[11:01:16.131] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[11:01:16.132] plan(): Setting new future strategy stack:
[11:01:16.132] List of future strategies:
[11:01:16.132] 1. FutureStrategy:
[11:01:16.132]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.132]    - tweaked: FALSE
[11:01:16.132]    - call: future::plan(oplan)
[11:01:16.133] plan(): nbrOfWorkers() = 1
> 
