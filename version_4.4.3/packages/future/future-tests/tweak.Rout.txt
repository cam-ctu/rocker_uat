
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[08:29:50.947] plan(): Setting new future strategy stack:
[08:29:50.947] List of future strategies:
[08:29:50.947] 1. sequential:
[08:29:50.947]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:50.947]    - tweaked: FALSE
[08:29:50.947]    - call: future::plan("sequential")
[08:29:50.958] plan(): nbrOfWorkers() = 1
> 
> message("*** Tweaking future strategies ...")
*** Tweaking future strategies ...
> 
> message("*** y <- tweak(future::sequential) ...")
*** y <- tweak(future::sequential) ...
> sequential2 <- future::tweak(future::sequential)
> print(args(sequential2))
function (..., envir = parent.frame()) 
NULL
> stopifnot(identical(sequential2, future::sequential))
> stopifnot(!inherits(sequential2, "tweaked"))
> 
> 
> message("*** y <- tweak(future::sequential, abc = FALSE) ...")
*** y <- tweak(future::sequential, abc = FALSE) ...
> sequential2 <- future::tweak(future::sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> message("*** y <- tweak('sequential', abc = FALSE) ...")
*** y <- tweak('sequential', abc = FALSE) ...
> sequential2 <- future::tweak("sequential", abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> library("future")
[08:29:50.980] Option 'future.startup.script': TRUE
[08:29:50.980] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:29:50.981] Future startup scripts found: <none>
> 
> message("*** y <- tweak(sequential, abc = FALSE) ...")
*** y <- tweak(sequential, abc = FALSE) ...
> sequential2 <- future::tweak(sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> message("*** y <- tweak('sequential', abc = FALSE) ...")
*** y <- tweak('sequential', abc = FALSE) ...
> sequential2 <- future::tweak('sequential', abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> message("*** y <- tweak('sequential', abc = FALSE, abc = 1, def = TRUE) ...")
*** y <- tweak('sequential', abc = FALSE, abc = 1, def = TRUE) ...
> res <- tryCatch({
+   sequential2 <- future::tweak('sequential', abc = FALSE, abc = 1, def = TRUE)
+ }, warning = function(w) {
+   w
+ })
> stopifnot(inherits(res, "warning"))
> sequential2 <- future::tweak('sequential', abc = FALSE, abc = 1, def = TRUE)
Warning: Detected 2 unknown future arguments: ‘abc’, ‘def’
> print(args(sequential2))
function (..., abc = FALSE, def = TRUE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> 
> message("*** y <- tweak(cluster, rscript_startup = quote(...)) ...")
*** y <- tweak(cluster, rscript_startup = quote(...)) ...
> cl <- 42L
> cluster2 <- tweak(cluster, workers = cl, rscript_startup = quote(options(abc = 42L)))
> print(args(cluster2))
function (..., workers = 42L, rscript_startup = quote(options(abc = 42L)), 
    envir = parent.frame()) 
NULL
> stopifnot(!identical(cluster2, future::cluster))
> stopifnot(inherits(cluster2, "tweaked"))
> formals2 <- formals(cluster2)
> stopifnot(identical(formals2$workers, cl))
> stopifnot("rscript_startup" %in% names(formals2))
> rscript_startup <- formals2$rscript_startup
> stopifnot(!is.null(rscript_startup),
+           is.language(rscript_startup), is.call(rscript_startup))
> value <- eval(rscript_startup)
> stopifnot(is.language(value), is.call(value))
> 
> 
> message("*** plan() - tweak without introducting package dependencies ...")
*** plan() - tweak without introducting package dependencies ...
> 
> ## Requires a auxillary package that is available and not already loaded
> if (!covr_testing && requireNamespace("grid")) {
+   local({
+     cl <- makeClusterPSOCK(1L)
+     on.exit(parallel:::stopCluster(cl))
+     ns0 <- unlist(parallel::clusterEvalQ(cl, loadedNamespaces()))
+ 
+     ## When using futures, the 'future' package is loaded on the worker
+     ns0 <- c(ns0, c("tools", "parallelly",
+                     "codetools", "digest", "globals", "listenv", "future"))
+     if (!is.element("grid", ns0)) {
+       ## Assert that a global copy from a package does not trigger
+       ## that package from being loaded on the worker
+       dummy <- grid::depth
+       oplan <- future::plan(future::cluster, workers = cl)
+       on.exit(future::plan(oplan), add = TRUE)
+       ns <- unlist(parallel::clusterEvalQ(cl, loadedNamespaces()))
+       diff <- setdiff(ns, ns0)
+       if ("covr" %in% diff) diff <- setdiff(diff, c("lazyeval", "rex", "covr"))
+       if (length(diff) > 0) {
+         print(loadedNamespaces())
+         stop("plan() with a tweak() causes new packages to be loaded: ", sQuote(paste(diff, collapse = ", ")))
+       }
+     }
+   })
+ }
Loading required namespace: grid
[08:29:51.393] plan(): Setting new future strategy stack:
[08:29:51.394] List of future strategies:
[08:29:51.394] 1. cluster:
[08:29:51.394]    - args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[08:29:51.394]    - tweaked: TRUE
[08:29:51.394]    - call: future::plan(future::cluster, workers = cl)
[08:29:51.407] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:29:51.407] cluster:
[08:29:51.407] - args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[08:29:51.407] - tweaked: TRUE
[08:29:51.407] - call: future::plan(future::cluster, workers = cl)
[08:29:51.409] getGlobalsAndPackages() ...
[08:29:51.410] Not searching for globals
[08:29:51.410] - globals: [0] <none>
[08:29:51.410] getGlobalsAndPackages() ... DONE
[08:29:51.418] Packages needed by the future expression (n = 0): <none>
[08:29:51.418] Packages needed by future strategies (n = 0): <none>
[08:29:51.419] {
[08:29:51.419]     {
[08:29:51.419]         {
[08:29:51.419]             ...future.startTime <- base::Sys.time()
[08:29:51.419]             {
[08:29:51.419]                 {
[08:29:51.419]                   {
[08:29:51.419]                     base::local({
[08:29:51.419]                       has_future <- base::requireNamespace("future", 
[08:29:51.419]                         quietly = TRUE)
[08:29:51.419]                       if (has_future) {
[08:29:51.419]                         ns <- base::getNamespace("future")
[08:29:51.419]                         version <- ns[[".package"]][["version"]]
[08:29:51.419]                         if (is.null(version)) 
[08:29:51.419]                           version <- utils::packageVersion("future")
[08:29:51.419]                       }
[08:29:51.419]                       else {
[08:29:51.419]                         version <- NULL
[08:29:51.419]                       }
[08:29:51.419]                       if (!has_future || version < "1.8.0") {
[08:29:51.419]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:51.419]                           "", base::R.version$version.string), 
[08:29:51.419]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:51.419]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:51.419]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:51.419]                             "release", "version")], collapse = " "), 
[08:29:51.419]                           hostname = base::Sys.info()[["nodename"]])
[08:29:51.419]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:51.419]                           info)
[08:29:51.419]                         info <- base::paste(info, collapse = "; ")
[08:29:51.419]                         if (!has_future) {
[08:29:51.419]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:51.419]                             info)
[08:29:51.419]                         }
[08:29:51.419]                         else {
[08:29:51.419]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:51.419]                             info, version)
[08:29:51.419]                         }
[08:29:51.419]                         base::stop(msg)
[08:29:51.419]                       }
[08:29:51.419]                     })
[08:29:51.419]                   }
[08:29:51.419]                   ...future.strategy.old <- future::plan("list")
[08:29:51.419]                   options(future.plan = NULL)
[08:29:51.419]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.419]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:51.419]                 }
[08:29:51.419]                 ...future.workdir <- getwd()
[08:29:51.419]             }
[08:29:51.419]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:51.419]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:51.419]         }
[08:29:51.419]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:51.419]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:51.419]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:51.419]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:51.419]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:51.419]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:51.419]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:51.419]             base::names(...future.oldOptions))
[08:29:51.419]     }
[08:29:51.419]     if (FALSE) {
[08:29:51.419]     }
[08:29:51.419]     else {
[08:29:51.419]         if (TRUE) {
[08:29:51.419]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:51.419]                 open = "w")
[08:29:51.419]         }
[08:29:51.419]         else {
[08:29:51.419]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:51.419]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:51.419]         }
[08:29:51.419]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:51.419]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:51.419]             base::sink(type = "output", split = FALSE)
[08:29:51.419]             base::close(...future.stdout)
[08:29:51.419]         }, add = TRUE)
[08:29:51.419]     }
[08:29:51.419]     ...future.frame <- base::sys.nframe()
[08:29:51.419]     ...future.conditions <- base::list()
[08:29:51.419]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:51.419]     if (FALSE) {
[08:29:51.419]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:51.419]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:51.419]     }
[08:29:51.419]     ...future.result <- base::tryCatch({
[08:29:51.419]         base::withCallingHandlers({
[08:29:51.419]             ...future.value <- base::withVisible(base::local({
[08:29:51.419]                 ...future.makeSendCondition <- base::local({
[08:29:51.419]                   sendCondition <- NULL
[08:29:51.419]                   function(frame = 1L) {
[08:29:51.419]                     if (is.function(sendCondition)) 
[08:29:51.419]                       return(sendCondition)
[08:29:51.419]                     ns <- getNamespace("parallel")
[08:29:51.419]                     if (exists("sendData", mode = "function", 
[08:29:51.419]                       envir = ns)) {
[08:29:51.419]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:51.419]                         envir = ns)
[08:29:51.419]                       envir <- sys.frame(frame)
[08:29:51.419]                       master <- NULL
[08:29:51.419]                       while (!identical(envir, .GlobalEnv) && 
[08:29:51.419]                         !identical(envir, emptyenv())) {
[08:29:51.419]                         if (exists("master", mode = "list", envir = envir, 
[08:29:51.419]                           inherits = FALSE)) {
[08:29:51.419]                           master <- get("master", mode = "list", 
[08:29:51.419]                             envir = envir, inherits = FALSE)
[08:29:51.419]                           if (inherits(master, c("SOCKnode", 
[08:29:51.419]                             "SOCK0node"))) {
[08:29:51.419]                             sendCondition <<- function(cond) {
[08:29:51.419]                               data <- list(type = "VALUE", value = cond, 
[08:29:51.419]                                 success = TRUE)
[08:29:51.419]                               parallel_sendData(master, data)
[08:29:51.419]                             }
[08:29:51.419]                             return(sendCondition)
[08:29:51.419]                           }
[08:29:51.419]                         }
[08:29:51.419]                         frame <- frame + 1L
[08:29:51.419]                         envir <- sys.frame(frame)
[08:29:51.419]                       }
[08:29:51.419]                     }
[08:29:51.419]                     sendCondition <<- function(cond) NULL
[08:29:51.419]                   }
[08:29:51.419]                 })
[08:29:51.419]                 withCallingHandlers({
[08:29:51.419]                   NA
[08:29:51.419]                 }, immediateCondition = function(cond) {
[08:29:51.419]                   sendCondition <- ...future.makeSendCondition()
[08:29:51.419]                   sendCondition(cond)
[08:29:51.419]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.419]                   {
[08:29:51.419]                     inherits <- base::inherits
[08:29:51.419]                     invokeRestart <- base::invokeRestart
[08:29:51.419]                     is.null <- base::is.null
[08:29:51.419]                     muffled <- FALSE
[08:29:51.419]                     if (inherits(cond, "message")) {
[08:29:51.419]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:51.419]                       if (muffled) 
[08:29:51.419]                         invokeRestart("muffleMessage")
[08:29:51.419]                     }
[08:29:51.419]                     else if (inherits(cond, "warning")) {
[08:29:51.419]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:51.419]                       if (muffled) 
[08:29:51.419]                         invokeRestart("muffleWarning")
[08:29:51.419]                     }
[08:29:51.419]                     else if (inherits(cond, "condition")) {
[08:29:51.419]                       if (!is.null(pattern)) {
[08:29:51.419]                         computeRestarts <- base::computeRestarts
[08:29:51.419]                         grepl <- base::grepl
[08:29:51.419]                         restarts <- computeRestarts(cond)
[08:29:51.419]                         for (restart in restarts) {
[08:29:51.419]                           name <- restart$name
[08:29:51.419]                           if (is.null(name)) 
[08:29:51.419]                             next
[08:29:51.419]                           if (!grepl(pattern, name)) 
[08:29:51.419]                             next
[08:29:51.419]                           invokeRestart(restart)
[08:29:51.419]                           muffled <- TRUE
[08:29:51.419]                           break
[08:29:51.419]                         }
[08:29:51.419]                       }
[08:29:51.419]                     }
[08:29:51.419]                     invisible(muffled)
[08:29:51.419]                   }
[08:29:51.419]                   muffleCondition(cond)
[08:29:51.419]                 })
[08:29:51.419]             }))
[08:29:51.419]             future::FutureResult(value = ...future.value$value, 
[08:29:51.419]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.419]                   ...future.rng), globalenv = if (FALSE) 
[08:29:51.419]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:51.419]                     ...future.globalenv.names))
[08:29:51.419]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:51.419]         }, condition = base::local({
[08:29:51.419]             c <- base::c
[08:29:51.419]             inherits <- base::inherits
[08:29:51.419]             invokeRestart <- base::invokeRestart
[08:29:51.419]             length <- base::length
[08:29:51.419]             list <- base::list
[08:29:51.419]             seq.int <- base::seq.int
[08:29:51.419]             signalCondition <- base::signalCondition
[08:29:51.419]             sys.calls <- base::sys.calls
[08:29:51.419]             `[[` <- base::`[[`
[08:29:51.419]             `+` <- base::`+`
[08:29:51.419]             `<<-` <- base::`<<-`
[08:29:51.419]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:51.419]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:51.419]                   3L)]
[08:29:51.419]             }
[08:29:51.419]             function(cond) {
[08:29:51.419]                 is_error <- inherits(cond, "error")
[08:29:51.419]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:51.419]                   NULL)
[08:29:51.419]                 if (is_error) {
[08:29:51.419]                   sessionInformation <- function() {
[08:29:51.419]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:51.419]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:51.419]                       search = base::search(), system = base::Sys.info())
[08:29:51.419]                   }
[08:29:51.419]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.419]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:51.419]                     cond$call), session = sessionInformation(), 
[08:29:51.419]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:51.419]                   signalCondition(cond)
[08:29:51.419]                 }
[08:29:51.419]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:51.419]                 "immediateCondition"))) {
[08:29:51.419]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:51.419]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.419]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:51.419]                   if (TRUE && !signal) {
[08:29:51.419]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.419]                     {
[08:29:51.419]                       inherits <- base::inherits
[08:29:51.419]                       invokeRestart <- base::invokeRestart
[08:29:51.419]                       is.null <- base::is.null
[08:29:51.419]                       muffled <- FALSE
[08:29:51.419]                       if (inherits(cond, "message")) {
[08:29:51.419]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.419]                         if (muffled) 
[08:29:51.419]                           invokeRestart("muffleMessage")
[08:29:51.419]                       }
[08:29:51.419]                       else if (inherits(cond, "warning")) {
[08:29:51.419]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.419]                         if (muffled) 
[08:29:51.419]                           invokeRestart("muffleWarning")
[08:29:51.419]                       }
[08:29:51.419]                       else if (inherits(cond, "condition")) {
[08:29:51.419]                         if (!is.null(pattern)) {
[08:29:51.419]                           computeRestarts <- base::computeRestarts
[08:29:51.419]                           grepl <- base::grepl
[08:29:51.419]                           restarts <- computeRestarts(cond)
[08:29:51.419]                           for (restart in restarts) {
[08:29:51.419]                             name <- restart$name
[08:29:51.419]                             if (is.null(name)) 
[08:29:51.419]                               next
[08:29:51.419]                             if (!grepl(pattern, name)) 
[08:29:51.419]                               next
[08:29:51.419]                             invokeRestart(restart)
[08:29:51.419]                             muffled <- TRUE
[08:29:51.419]                             break
[08:29:51.419]                           }
[08:29:51.419]                         }
[08:29:51.419]                       }
[08:29:51.419]                       invisible(muffled)
[08:29:51.419]                     }
[08:29:51.419]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.419]                   }
[08:29:51.419]                 }
[08:29:51.419]                 else {
[08:29:51.419]                   if (TRUE) {
[08:29:51.419]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.419]                     {
[08:29:51.419]                       inherits <- base::inherits
[08:29:51.419]                       invokeRestart <- base::invokeRestart
[08:29:51.419]                       is.null <- base::is.null
[08:29:51.419]                       muffled <- FALSE
[08:29:51.419]                       if (inherits(cond, "message")) {
[08:29:51.419]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.419]                         if (muffled) 
[08:29:51.419]                           invokeRestart("muffleMessage")
[08:29:51.419]                       }
[08:29:51.419]                       else if (inherits(cond, "warning")) {
[08:29:51.419]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.419]                         if (muffled) 
[08:29:51.419]                           invokeRestart("muffleWarning")
[08:29:51.419]                       }
[08:29:51.419]                       else if (inherits(cond, "condition")) {
[08:29:51.419]                         if (!is.null(pattern)) {
[08:29:51.419]                           computeRestarts <- base::computeRestarts
[08:29:51.419]                           grepl <- base::grepl
[08:29:51.419]                           restarts <- computeRestarts(cond)
[08:29:51.419]                           for (restart in restarts) {
[08:29:51.419]                             name <- restart$name
[08:29:51.419]                             if (is.null(name)) 
[08:29:51.419]                               next
[08:29:51.419]                             if (!grepl(pattern, name)) 
[08:29:51.419]                               next
[08:29:51.419]                             invokeRestart(restart)
[08:29:51.419]                             muffled <- TRUE
[08:29:51.419]                             break
[08:29:51.419]                           }
[08:29:51.419]                         }
[08:29:51.419]                       }
[08:29:51.419]                       invisible(muffled)
[08:29:51.419]                     }
[08:29:51.419]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.419]                   }
[08:29:51.419]                 }
[08:29:51.419]             }
[08:29:51.419]         }))
[08:29:51.419]     }, error = function(ex) {
[08:29:51.419]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:51.419]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.419]                 ...future.rng), started = ...future.startTime, 
[08:29:51.419]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:51.419]             version = "1.8"), class = "FutureResult")
[08:29:51.419]     }, finally = {
[08:29:51.419]         if (!identical(...future.workdir, getwd())) 
[08:29:51.419]             setwd(...future.workdir)
[08:29:51.419]         {
[08:29:51.419]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:51.419]                 ...future.oldOptions$nwarnings <- NULL
[08:29:51.419]             }
[08:29:51.419]             base::options(...future.oldOptions)
[08:29:51.419]             if (.Platform$OS.type == "windows") {
[08:29:51.419]                 old_names <- names(...future.oldEnvVars)
[08:29:51.419]                 envs <- base::Sys.getenv()
[08:29:51.419]                 names <- names(envs)
[08:29:51.419]                 common <- intersect(names, old_names)
[08:29:51.419]                 added <- setdiff(names, old_names)
[08:29:51.419]                 removed <- setdiff(old_names, names)
[08:29:51.419]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:51.419]                   envs[common]]
[08:29:51.419]                 NAMES <- toupper(changed)
[08:29:51.419]                 args <- list()
[08:29:51.419]                 for (kk in seq_along(NAMES)) {
[08:29:51.419]                   name <- changed[[kk]]
[08:29:51.419]                   NAME <- NAMES[[kk]]
[08:29:51.419]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.419]                     next
[08:29:51.419]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.419]                 }
[08:29:51.419]                 NAMES <- toupper(added)
[08:29:51.419]                 for (kk in seq_along(NAMES)) {
[08:29:51.419]                   name <- added[[kk]]
[08:29:51.419]                   NAME <- NAMES[[kk]]
[08:29:51.419]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.419]                     next
[08:29:51.419]                   args[[name]] <- ""
[08:29:51.419]                 }
[08:29:51.419]                 NAMES <- toupper(removed)
[08:29:51.419]                 for (kk in seq_along(NAMES)) {
[08:29:51.419]                   name <- removed[[kk]]
[08:29:51.419]                   NAME <- NAMES[[kk]]
[08:29:51.419]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.419]                     next
[08:29:51.419]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.419]                 }
[08:29:51.419]                 if (length(args) > 0) 
[08:29:51.419]                   base::do.call(base::Sys.setenv, args = args)
[08:29:51.419]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:51.419]             }
[08:29:51.419]             else {
[08:29:51.419]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:51.419]             }
[08:29:51.419]             {
[08:29:51.419]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:51.419]                   0L) {
[08:29:51.419]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:51.419]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:51.419]                   base::options(opts)
[08:29:51.419]                 }
[08:29:51.419]                 {
[08:29:51.419]                   NULL
[08:29:51.419]                   options(future.plan = NULL)
[08:29:51.419]                   if (is.na(NA_character_)) 
[08:29:51.419]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.419]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:51.419]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:51.419]                     .init = FALSE)
[08:29:51.419]                 }
[08:29:51.419]             }
[08:29:51.419]         }
[08:29:51.419]     })
[08:29:51.419]     if (TRUE) {
[08:29:51.419]         base::sink(type = "output", split = FALSE)
[08:29:51.419]         if (TRUE) {
[08:29:51.419]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:51.419]         }
[08:29:51.419]         else {
[08:29:51.419]             ...future.result["stdout"] <- base::list(NULL)
[08:29:51.419]         }
[08:29:51.419]         base::close(...future.stdout)
[08:29:51.419]         ...future.stdout <- NULL
[08:29:51.419]     }
[08:29:51.419]     ...future.result$conditions <- ...future.conditions
[08:29:51.419]     ...future.result$finished <- base::Sys.time()
[08:29:51.419]     ...future.result
[08:29:51.419] }
[08:29:51.470] ClusterFuture started
[08:29:51.471] result() for ClusterFuture ...
[08:29:51.471] receiveMessageFromWorker() for ClusterFuture ...
[08:29:51.471] - Validating connection of ClusterFuture
[08:29:51.502] - received message: FutureResult
[08:29:51.502] - Received FutureResult
[08:29:51.504] - Erased future from FutureRegistry
[08:29:51.505] result() for ClusterFuture ...
[08:29:51.505] - result already collected: FutureResult
[08:29:51.505] result() for ClusterFuture ... done
[08:29:51.505] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:51.505] result() for ClusterFuture ... done
[08:29:51.505] result() for ClusterFuture ...
[08:29:51.505] - result already collected: FutureResult
[08:29:51.505] result() for ClusterFuture ... done
[08:29:51.506] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:29:51.506] plan(): nbrOfWorkers() = 1
[08:29:51.507] plan(): Setting new future strategy stack:
[08:29:51.507] List of future strategies:
[08:29:51.507] 1. sequential:
[08:29:51.507]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.507]    - tweaked: FALSE
[08:29:51.507]    - call: future::plan("sequential")
[08:29:51.507] plan(): nbrOfWorkers() = 1
> 
> message("*** plan() - tweak without introducting package dependencies ... DONE")
*** plan() - tweak without introducting package dependencies ... DONE
> 
> 
> message("*** y %<-% { expr } %tweak% tweaks ...")
*** y %<-% { expr } %tweak% tweaks ...
> 
> plan(sequential)
[08:29:51.508] plan(): Setting new future strategy stack:
[08:29:51.508] List of future strategies:
[08:29:51.508] 1. sequential:
[08:29:51.508]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.508]    - tweaked: FALSE
[08:29:51.508]    - call: plan(sequential)
[08:29:51.508] plan(): nbrOfWorkers() = 1
> 
> a <- 0
> x %<-% { a <- 1; a }
[08:29:51.510] getGlobalsAndPackages() ...
[08:29:51.510] Searching for globals...
[08:29:51.515] - globals found: [2] ‘{’, ‘<-’
[08:29:51.515] Searching for globals ... DONE
[08:29:51.516] Resolving globals: FALSE
[08:29:51.516] 
[08:29:51.516] 
[08:29:51.517] getGlobalsAndPackages() ... DONE
[08:29:51.517] run() for ‘Future’ ...
[08:29:51.517] - state: ‘created’
[08:29:51.517] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:51.518] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:51.518] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:51.518]   - Field: ‘label’
[08:29:51.518]   - Field: ‘local’
[08:29:51.518]   - Field: ‘owner’
[08:29:51.518]   - Field: ‘envir’
[08:29:51.519]   - Field: ‘packages’
[08:29:51.519]   - Field: ‘gc’
[08:29:51.519]   - Field: ‘conditions’
[08:29:51.519]   - Field: ‘expr’
[08:29:51.519]   - Field: ‘uuid’
[08:29:51.519]   - Field: ‘seed’
[08:29:51.519]   - Field: ‘version’
[08:29:51.519]   - Field: ‘result’
[08:29:51.519]   - Field: ‘asynchronous’
[08:29:51.520]   - Field: ‘calls’
[08:29:51.520]   - Field: ‘globals’
[08:29:51.520]   - Field: ‘stdout’
[08:29:51.520]   - Field: ‘earlySignal’
[08:29:51.520]   - Field: ‘lazy’
[08:29:51.520]   - Field: ‘state’
[08:29:51.520] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:51.520] - Launch lazy future ...
[08:29:51.521] Packages needed by the future expression (n = 0): <none>
[08:29:51.521] Packages needed by future strategies (n = 0): <none>
[08:29:51.521] {
[08:29:51.521]     {
[08:29:51.521]         {
[08:29:51.521]             ...future.startTime <- base::Sys.time()
[08:29:51.521]             {
[08:29:51.521]                 {
[08:29:51.521]                   {
[08:29:51.521]                     base::local({
[08:29:51.521]                       has_future <- base::requireNamespace("future", 
[08:29:51.521]                         quietly = TRUE)
[08:29:51.521]                       if (has_future) {
[08:29:51.521]                         ns <- base::getNamespace("future")
[08:29:51.521]                         version <- ns[[".package"]][["version"]]
[08:29:51.521]                         if (is.null(version)) 
[08:29:51.521]                           version <- utils::packageVersion("future")
[08:29:51.521]                       }
[08:29:51.521]                       else {
[08:29:51.521]                         version <- NULL
[08:29:51.521]                       }
[08:29:51.521]                       if (!has_future || version < "1.8.0") {
[08:29:51.521]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:51.521]                           "", base::R.version$version.string), 
[08:29:51.521]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:51.521]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:51.521]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:51.521]                             "release", "version")], collapse = " "), 
[08:29:51.521]                           hostname = base::Sys.info()[["nodename"]])
[08:29:51.521]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:51.521]                           info)
[08:29:51.521]                         info <- base::paste(info, collapse = "; ")
[08:29:51.521]                         if (!has_future) {
[08:29:51.521]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:51.521]                             info)
[08:29:51.521]                         }
[08:29:51.521]                         else {
[08:29:51.521]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:51.521]                             info, version)
[08:29:51.521]                         }
[08:29:51.521]                         base::stop(msg)
[08:29:51.521]                       }
[08:29:51.521]                     })
[08:29:51.521]                   }
[08:29:51.521]                   ...future.strategy.old <- future::plan("list")
[08:29:51.521]                   options(future.plan = NULL)
[08:29:51.521]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.521]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:51.521]                 }
[08:29:51.521]                 ...future.workdir <- getwd()
[08:29:51.521]             }
[08:29:51.521]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:51.521]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:51.521]         }
[08:29:51.521]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:51.521]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:51.521]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:51.521]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:51.521]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:51.521]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:51.521]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:51.521]             base::names(...future.oldOptions))
[08:29:51.521]     }
[08:29:51.521]     if (FALSE) {
[08:29:51.521]     }
[08:29:51.521]     else {
[08:29:51.521]         if (TRUE) {
[08:29:51.521]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:51.521]                 open = "w")
[08:29:51.521]         }
[08:29:51.521]         else {
[08:29:51.521]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:51.521]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:51.521]         }
[08:29:51.521]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:51.521]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:51.521]             base::sink(type = "output", split = FALSE)
[08:29:51.521]             base::close(...future.stdout)
[08:29:51.521]         }, add = TRUE)
[08:29:51.521]     }
[08:29:51.521]     ...future.frame <- base::sys.nframe()
[08:29:51.521]     ...future.conditions <- base::list()
[08:29:51.521]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:51.521]     if (FALSE) {
[08:29:51.521]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:51.521]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:51.521]     }
[08:29:51.521]     ...future.result <- base::tryCatch({
[08:29:51.521]         base::withCallingHandlers({
[08:29:51.521]             ...future.value <- base::withVisible(base::local({
[08:29:51.521]                 a <- 1
[08:29:51.521]                 a
[08:29:51.521]             }))
[08:29:51.521]             future::FutureResult(value = ...future.value$value, 
[08:29:51.521]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.521]                   ...future.rng), globalenv = if (FALSE) 
[08:29:51.521]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:51.521]                     ...future.globalenv.names))
[08:29:51.521]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:51.521]         }, condition = base::local({
[08:29:51.521]             c <- base::c
[08:29:51.521]             inherits <- base::inherits
[08:29:51.521]             invokeRestart <- base::invokeRestart
[08:29:51.521]             length <- base::length
[08:29:51.521]             list <- base::list
[08:29:51.521]             seq.int <- base::seq.int
[08:29:51.521]             signalCondition <- base::signalCondition
[08:29:51.521]             sys.calls <- base::sys.calls
[08:29:51.521]             `[[` <- base::`[[`
[08:29:51.521]             `+` <- base::`+`
[08:29:51.521]             `<<-` <- base::`<<-`
[08:29:51.521]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:51.521]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:51.521]                   3L)]
[08:29:51.521]             }
[08:29:51.521]             function(cond) {
[08:29:51.521]                 is_error <- inherits(cond, "error")
[08:29:51.521]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:51.521]                   NULL)
[08:29:51.521]                 if (is_error) {
[08:29:51.521]                   sessionInformation <- function() {
[08:29:51.521]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:51.521]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:51.521]                       search = base::search(), system = base::Sys.info())
[08:29:51.521]                   }
[08:29:51.521]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.521]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:51.521]                     cond$call), session = sessionInformation(), 
[08:29:51.521]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:51.521]                   signalCondition(cond)
[08:29:51.521]                 }
[08:29:51.521]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:51.521]                 "immediateCondition"))) {
[08:29:51.521]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:51.521]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.521]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:51.521]                   if (TRUE && !signal) {
[08:29:51.521]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.521]                     {
[08:29:51.521]                       inherits <- base::inherits
[08:29:51.521]                       invokeRestart <- base::invokeRestart
[08:29:51.521]                       is.null <- base::is.null
[08:29:51.521]                       muffled <- FALSE
[08:29:51.521]                       if (inherits(cond, "message")) {
[08:29:51.521]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.521]                         if (muffled) 
[08:29:51.521]                           invokeRestart("muffleMessage")
[08:29:51.521]                       }
[08:29:51.521]                       else if (inherits(cond, "warning")) {
[08:29:51.521]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.521]                         if (muffled) 
[08:29:51.521]                           invokeRestart("muffleWarning")
[08:29:51.521]                       }
[08:29:51.521]                       else if (inherits(cond, "condition")) {
[08:29:51.521]                         if (!is.null(pattern)) {
[08:29:51.521]                           computeRestarts <- base::computeRestarts
[08:29:51.521]                           grepl <- base::grepl
[08:29:51.521]                           restarts <- computeRestarts(cond)
[08:29:51.521]                           for (restart in restarts) {
[08:29:51.521]                             name <- restart$name
[08:29:51.521]                             if (is.null(name)) 
[08:29:51.521]                               next
[08:29:51.521]                             if (!grepl(pattern, name)) 
[08:29:51.521]                               next
[08:29:51.521]                             invokeRestart(restart)
[08:29:51.521]                             muffled <- TRUE
[08:29:51.521]                             break
[08:29:51.521]                           }
[08:29:51.521]                         }
[08:29:51.521]                       }
[08:29:51.521]                       invisible(muffled)
[08:29:51.521]                     }
[08:29:51.521]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.521]                   }
[08:29:51.521]                 }
[08:29:51.521]                 else {
[08:29:51.521]                   if (TRUE) {
[08:29:51.521]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.521]                     {
[08:29:51.521]                       inherits <- base::inherits
[08:29:51.521]                       invokeRestart <- base::invokeRestart
[08:29:51.521]                       is.null <- base::is.null
[08:29:51.521]                       muffled <- FALSE
[08:29:51.521]                       if (inherits(cond, "message")) {
[08:29:51.521]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.521]                         if (muffled) 
[08:29:51.521]                           invokeRestart("muffleMessage")
[08:29:51.521]                       }
[08:29:51.521]                       else if (inherits(cond, "warning")) {
[08:29:51.521]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.521]                         if (muffled) 
[08:29:51.521]                           invokeRestart("muffleWarning")
[08:29:51.521]                       }
[08:29:51.521]                       else if (inherits(cond, "condition")) {
[08:29:51.521]                         if (!is.null(pattern)) {
[08:29:51.521]                           computeRestarts <- base::computeRestarts
[08:29:51.521]                           grepl <- base::grepl
[08:29:51.521]                           restarts <- computeRestarts(cond)
[08:29:51.521]                           for (restart in restarts) {
[08:29:51.521]                             name <- restart$name
[08:29:51.521]                             if (is.null(name)) 
[08:29:51.521]                               next
[08:29:51.521]                             if (!grepl(pattern, name)) 
[08:29:51.521]                               next
[08:29:51.521]                             invokeRestart(restart)
[08:29:51.521]                             muffled <- TRUE
[08:29:51.521]                             break
[08:29:51.521]                           }
[08:29:51.521]                         }
[08:29:51.521]                       }
[08:29:51.521]                       invisible(muffled)
[08:29:51.521]                     }
[08:29:51.521]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.521]                   }
[08:29:51.521]                 }
[08:29:51.521]             }
[08:29:51.521]         }))
[08:29:51.521]     }, error = function(ex) {
[08:29:51.521]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:51.521]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.521]                 ...future.rng), started = ...future.startTime, 
[08:29:51.521]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:51.521]             version = "1.8"), class = "FutureResult")
[08:29:51.521]     }, finally = {
[08:29:51.521]         if (!identical(...future.workdir, getwd())) 
[08:29:51.521]             setwd(...future.workdir)
[08:29:51.521]         {
[08:29:51.521]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:51.521]                 ...future.oldOptions$nwarnings <- NULL
[08:29:51.521]             }
[08:29:51.521]             base::options(...future.oldOptions)
[08:29:51.521]             if (.Platform$OS.type == "windows") {
[08:29:51.521]                 old_names <- names(...future.oldEnvVars)
[08:29:51.521]                 envs <- base::Sys.getenv()
[08:29:51.521]                 names <- names(envs)
[08:29:51.521]                 common <- intersect(names, old_names)
[08:29:51.521]                 added <- setdiff(names, old_names)
[08:29:51.521]                 removed <- setdiff(old_names, names)
[08:29:51.521]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:51.521]                   envs[common]]
[08:29:51.521]                 NAMES <- toupper(changed)
[08:29:51.521]                 args <- list()
[08:29:51.521]                 for (kk in seq_along(NAMES)) {
[08:29:51.521]                   name <- changed[[kk]]
[08:29:51.521]                   NAME <- NAMES[[kk]]
[08:29:51.521]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.521]                     next
[08:29:51.521]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.521]                 }
[08:29:51.521]                 NAMES <- toupper(added)
[08:29:51.521]                 for (kk in seq_along(NAMES)) {
[08:29:51.521]                   name <- added[[kk]]
[08:29:51.521]                   NAME <- NAMES[[kk]]
[08:29:51.521]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.521]                     next
[08:29:51.521]                   args[[name]] <- ""
[08:29:51.521]                 }
[08:29:51.521]                 NAMES <- toupper(removed)
[08:29:51.521]                 for (kk in seq_along(NAMES)) {
[08:29:51.521]                   name <- removed[[kk]]
[08:29:51.521]                   NAME <- NAMES[[kk]]
[08:29:51.521]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.521]                     next
[08:29:51.521]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.521]                 }
[08:29:51.521]                 if (length(args) > 0) 
[08:29:51.521]                   base::do.call(base::Sys.setenv, args = args)
[08:29:51.521]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:51.521]             }
[08:29:51.521]             else {
[08:29:51.521]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:51.521]             }
[08:29:51.521]             {
[08:29:51.521]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:51.521]                   0L) {
[08:29:51.521]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:51.521]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:51.521]                   base::options(opts)
[08:29:51.521]                 }
[08:29:51.521]                 {
[08:29:51.521]                   {
[08:29:51.521]                     NULL
[08:29:51.521]                     RNGkind("Mersenne-Twister")
[08:29:51.521]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:51.521]                       inherits = FALSE)
[08:29:51.521]                   }
[08:29:51.521]                   options(future.plan = NULL)
[08:29:51.521]                   if (is.na(NA_character_)) 
[08:29:51.521]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.521]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:51.521]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:51.521]                     .init = FALSE)
[08:29:51.521]                 }
[08:29:51.521]             }
[08:29:51.521]         }
[08:29:51.521]     })
[08:29:51.521]     if (TRUE) {
[08:29:51.521]         base::sink(type = "output", split = FALSE)
[08:29:51.521]         if (TRUE) {
[08:29:51.521]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:51.521]         }
[08:29:51.521]         else {
[08:29:51.521]             ...future.result["stdout"] <- base::list(NULL)
[08:29:51.521]         }
[08:29:51.521]         base::close(...future.stdout)
[08:29:51.521]         ...future.stdout <- NULL
[08:29:51.521]     }
[08:29:51.521]     ...future.result$conditions <- ...future.conditions
[08:29:51.521]     ...future.result$finished <- base::Sys.time()
[08:29:51.521]     ...future.result
[08:29:51.521] }
[08:29:51.524] plan(): Setting new future strategy stack:
[08:29:51.524] List of future strategies:
[08:29:51.524] 1. sequential:
[08:29:51.524]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.524]    - tweaked: FALSE
[08:29:51.524]    - call: NULL
[08:29:51.524] plan(): nbrOfWorkers() = 1
[08:29:51.526] plan(): Setting new future strategy stack:
[08:29:51.526] List of future strategies:
[08:29:51.526] 1. sequential:
[08:29:51.526]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.526]    - tweaked: FALSE
[08:29:51.526]    - call: plan(sequential)
[08:29:51.526] plan(): nbrOfWorkers() = 1
[08:29:51.527] SequentialFuture started (and completed)
[08:29:51.527] - Launch lazy future ... done
[08:29:51.527] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> 
> plan(sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
[08:29:51.528] plan(): Setting new future strategy stack:
[08:29:51.528] List of future strategies:
[08:29:51.528] 1. sequential:
[08:29:51.528]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:29:51.528]    - tweaked: TRUE
[08:29:51.528]    - call: plan(sequential, abc = FALSE)
[08:29:51.529] plan(): nbrOfWorkers() = 1
> 
> a <- 0
> x %<-% { a <- 1; a }
[08:29:51.529] getGlobalsAndPackages() ...
[08:29:51.529] Searching for globals...
[08:29:51.530] - globals found: [2] ‘{’, ‘<-’
[08:29:51.530] Searching for globals ... DONE
[08:29:51.531] Resolving globals: FALSE
[08:29:51.531] 
[08:29:51.531] 
[08:29:51.531] getGlobalsAndPackages() ... DONE
[08:29:51.531] run() for ‘Future’ ...
[08:29:51.532] - state: ‘created’
[08:29:51.532] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:51.532] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:51.532] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:51.532]   - Field: ‘label’
[08:29:51.532]   - Field: ‘local’
[08:29:51.533]   - Field: ‘owner’
[08:29:51.533]   - Field: ‘envir’
[08:29:51.533]   - Field: ‘packages’
[08:29:51.533]   - Field: ‘gc’
[08:29:51.533]   - Field: ‘conditions’
[08:29:51.533]   - Field: ‘expr’
[08:29:51.533]   - Field: ‘uuid’
[08:29:51.533]   - Field: ‘seed’
[08:29:51.533]   - Field: ‘version’
[08:29:51.534]   - Field: ‘result’
[08:29:51.534]   - Field: ‘asynchronous’
[08:29:51.534]   - Field: ‘calls’
[08:29:51.534]   - Field: ‘abc’
[08:29:51.534]   - Field: ‘globals’
[08:29:51.534]   - Field: ‘stdout’
[08:29:51.534]   - Field: ‘earlySignal’
[08:29:51.534]   - Field: ‘lazy’
[08:29:51.534]   - Field: ‘state’
[08:29:51.534] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:51.535] - Launch lazy future ...
[08:29:51.535] Packages needed by the future expression (n = 0): <none>
[08:29:51.535] Packages needed by future strategies (n = 0): <none>
[08:29:51.535] {
[08:29:51.535]     {
[08:29:51.535]         {
[08:29:51.535]             ...future.startTime <- base::Sys.time()
[08:29:51.535]             {
[08:29:51.535]                 {
[08:29:51.535]                   {
[08:29:51.535]                     base::local({
[08:29:51.535]                       has_future <- base::requireNamespace("future", 
[08:29:51.535]                         quietly = TRUE)
[08:29:51.535]                       if (has_future) {
[08:29:51.535]                         ns <- base::getNamespace("future")
[08:29:51.535]                         version <- ns[[".package"]][["version"]]
[08:29:51.535]                         if (is.null(version)) 
[08:29:51.535]                           version <- utils::packageVersion("future")
[08:29:51.535]                       }
[08:29:51.535]                       else {
[08:29:51.535]                         version <- NULL
[08:29:51.535]                       }
[08:29:51.535]                       if (!has_future || version < "1.8.0") {
[08:29:51.535]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:51.535]                           "", base::R.version$version.string), 
[08:29:51.535]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:51.535]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:51.535]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:51.535]                             "release", "version")], collapse = " "), 
[08:29:51.535]                           hostname = base::Sys.info()[["nodename"]])
[08:29:51.535]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:51.535]                           info)
[08:29:51.535]                         info <- base::paste(info, collapse = "; ")
[08:29:51.535]                         if (!has_future) {
[08:29:51.535]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:51.535]                             info)
[08:29:51.535]                         }
[08:29:51.535]                         else {
[08:29:51.535]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:51.535]                             info, version)
[08:29:51.535]                         }
[08:29:51.535]                         base::stop(msg)
[08:29:51.535]                       }
[08:29:51.535]                     })
[08:29:51.535]                   }
[08:29:51.535]                   ...future.strategy.old <- future::plan("list")
[08:29:51.535]                   options(future.plan = NULL)
[08:29:51.535]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.535]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:51.535]                 }
[08:29:51.535]                 ...future.workdir <- getwd()
[08:29:51.535]             }
[08:29:51.535]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:51.535]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:51.535]         }
[08:29:51.535]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:51.535]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:51.535]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:51.535]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:51.535]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:51.535]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:51.535]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:51.535]             base::names(...future.oldOptions))
[08:29:51.535]     }
[08:29:51.535]     if (FALSE) {
[08:29:51.535]     }
[08:29:51.535]     else {
[08:29:51.535]         if (TRUE) {
[08:29:51.535]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:51.535]                 open = "w")
[08:29:51.535]         }
[08:29:51.535]         else {
[08:29:51.535]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:51.535]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:51.535]         }
[08:29:51.535]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:51.535]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:51.535]             base::sink(type = "output", split = FALSE)
[08:29:51.535]             base::close(...future.stdout)
[08:29:51.535]         }, add = TRUE)
[08:29:51.535]     }
[08:29:51.535]     ...future.frame <- base::sys.nframe()
[08:29:51.535]     ...future.conditions <- base::list()
[08:29:51.535]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:51.535]     if (FALSE) {
[08:29:51.535]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:51.535]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:51.535]     }
[08:29:51.535]     ...future.result <- base::tryCatch({
[08:29:51.535]         base::withCallingHandlers({
[08:29:51.535]             ...future.value <- base::withVisible(base::local({
[08:29:51.535]                 a <- 1
[08:29:51.535]                 a
[08:29:51.535]             }))
[08:29:51.535]             future::FutureResult(value = ...future.value$value, 
[08:29:51.535]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.535]                   ...future.rng), globalenv = if (FALSE) 
[08:29:51.535]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:51.535]                     ...future.globalenv.names))
[08:29:51.535]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:51.535]         }, condition = base::local({
[08:29:51.535]             c <- base::c
[08:29:51.535]             inherits <- base::inherits
[08:29:51.535]             invokeRestart <- base::invokeRestart
[08:29:51.535]             length <- base::length
[08:29:51.535]             list <- base::list
[08:29:51.535]             seq.int <- base::seq.int
[08:29:51.535]             signalCondition <- base::signalCondition
[08:29:51.535]             sys.calls <- base::sys.calls
[08:29:51.535]             `[[` <- base::`[[`
[08:29:51.535]             `+` <- base::`+`
[08:29:51.535]             `<<-` <- base::`<<-`
[08:29:51.535]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:51.535]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:51.535]                   3L)]
[08:29:51.535]             }
[08:29:51.535]             function(cond) {
[08:29:51.535]                 is_error <- inherits(cond, "error")
[08:29:51.535]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:51.535]                   NULL)
[08:29:51.535]                 if (is_error) {
[08:29:51.535]                   sessionInformation <- function() {
[08:29:51.535]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:51.535]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:51.535]                       search = base::search(), system = base::Sys.info())
[08:29:51.535]                   }
[08:29:51.535]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.535]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:51.535]                     cond$call), session = sessionInformation(), 
[08:29:51.535]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:51.535]                   signalCondition(cond)
[08:29:51.535]                 }
[08:29:51.535]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:51.535]                 "immediateCondition"))) {
[08:29:51.535]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:51.535]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.535]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:51.535]                   if (TRUE && !signal) {
[08:29:51.535]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.535]                     {
[08:29:51.535]                       inherits <- base::inherits
[08:29:51.535]                       invokeRestart <- base::invokeRestart
[08:29:51.535]                       is.null <- base::is.null
[08:29:51.535]                       muffled <- FALSE
[08:29:51.535]                       if (inherits(cond, "message")) {
[08:29:51.535]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.535]                         if (muffled) 
[08:29:51.535]                           invokeRestart("muffleMessage")
[08:29:51.535]                       }
[08:29:51.535]                       else if (inherits(cond, "warning")) {
[08:29:51.535]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.535]                         if (muffled) 
[08:29:51.535]                           invokeRestart("muffleWarning")
[08:29:51.535]                       }
[08:29:51.535]                       else if (inherits(cond, "condition")) {
[08:29:51.535]                         if (!is.null(pattern)) {
[08:29:51.535]                           computeRestarts <- base::computeRestarts
[08:29:51.535]                           grepl <- base::grepl
[08:29:51.535]                           restarts <- computeRestarts(cond)
[08:29:51.535]                           for (restart in restarts) {
[08:29:51.535]                             name <- restart$name
[08:29:51.535]                             if (is.null(name)) 
[08:29:51.535]                               next
[08:29:51.535]                             if (!grepl(pattern, name)) 
[08:29:51.535]                               next
[08:29:51.535]                             invokeRestart(restart)
[08:29:51.535]                             muffled <- TRUE
[08:29:51.535]                             break
[08:29:51.535]                           }
[08:29:51.535]                         }
[08:29:51.535]                       }
[08:29:51.535]                       invisible(muffled)
[08:29:51.535]                     }
[08:29:51.535]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.535]                   }
[08:29:51.535]                 }
[08:29:51.535]                 else {
[08:29:51.535]                   if (TRUE) {
[08:29:51.535]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.535]                     {
[08:29:51.535]                       inherits <- base::inherits
[08:29:51.535]                       invokeRestart <- base::invokeRestart
[08:29:51.535]                       is.null <- base::is.null
[08:29:51.535]                       muffled <- FALSE
[08:29:51.535]                       if (inherits(cond, "message")) {
[08:29:51.535]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.535]                         if (muffled) 
[08:29:51.535]                           invokeRestart("muffleMessage")
[08:29:51.535]                       }
[08:29:51.535]                       else if (inherits(cond, "warning")) {
[08:29:51.535]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.535]                         if (muffled) 
[08:29:51.535]                           invokeRestart("muffleWarning")
[08:29:51.535]                       }
[08:29:51.535]                       else if (inherits(cond, "condition")) {
[08:29:51.535]                         if (!is.null(pattern)) {
[08:29:51.535]                           computeRestarts <- base::computeRestarts
[08:29:51.535]                           grepl <- base::grepl
[08:29:51.535]                           restarts <- computeRestarts(cond)
[08:29:51.535]                           for (restart in restarts) {
[08:29:51.535]                             name <- restart$name
[08:29:51.535]                             if (is.null(name)) 
[08:29:51.535]                               next
[08:29:51.535]                             if (!grepl(pattern, name)) 
[08:29:51.535]                               next
[08:29:51.535]                             invokeRestart(restart)
[08:29:51.535]                             muffled <- TRUE
[08:29:51.535]                             break
[08:29:51.535]                           }
[08:29:51.535]                         }
[08:29:51.535]                       }
[08:29:51.535]                       invisible(muffled)
[08:29:51.535]                     }
[08:29:51.535]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.535]                   }
[08:29:51.535]                 }
[08:29:51.535]             }
[08:29:51.535]         }))
[08:29:51.535]     }, error = function(ex) {
[08:29:51.535]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:51.535]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.535]                 ...future.rng), started = ...future.startTime, 
[08:29:51.535]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:51.535]             version = "1.8"), class = "FutureResult")
[08:29:51.535]     }, finally = {
[08:29:51.535]         if (!identical(...future.workdir, getwd())) 
[08:29:51.535]             setwd(...future.workdir)
[08:29:51.535]         {
[08:29:51.535]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:51.535]                 ...future.oldOptions$nwarnings <- NULL
[08:29:51.535]             }
[08:29:51.535]             base::options(...future.oldOptions)
[08:29:51.535]             if (.Platform$OS.type == "windows") {
[08:29:51.535]                 old_names <- names(...future.oldEnvVars)
[08:29:51.535]                 envs <- base::Sys.getenv()
[08:29:51.535]                 names <- names(envs)
[08:29:51.535]                 common <- intersect(names, old_names)
[08:29:51.535]                 added <- setdiff(names, old_names)
[08:29:51.535]                 removed <- setdiff(old_names, names)
[08:29:51.535]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:51.535]                   envs[common]]
[08:29:51.535]                 NAMES <- toupper(changed)
[08:29:51.535]                 args <- list()
[08:29:51.535]                 for (kk in seq_along(NAMES)) {
[08:29:51.535]                   name <- changed[[kk]]
[08:29:51.535]                   NAME <- NAMES[[kk]]
[08:29:51.535]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.535]                     next
[08:29:51.535]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.535]                 }
[08:29:51.535]                 NAMES <- toupper(added)
[08:29:51.535]                 for (kk in seq_along(NAMES)) {
[08:29:51.535]                   name <- added[[kk]]
[08:29:51.535]                   NAME <- NAMES[[kk]]
[08:29:51.535]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.535]                     next
[08:29:51.535]                   args[[name]] <- ""
[08:29:51.535]                 }
[08:29:51.535]                 NAMES <- toupper(removed)
[08:29:51.535]                 for (kk in seq_along(NAMES)) {
[08:29:51.535]                   name <- removed[[kk]]
[08:29:51.535]                   NAME <- NAMES[[kk]]
[08:29:51.535]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.535]                     next
[08:29:51.535]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.535]                 }
[08:29:51.535]                 if (length(args) > 0) 
[08:29:51.535]                   base::do.call(base::Sys.setenv, args = args)
[08:29:51.535]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:51.535]             }
[08:29:51.535]             else {
[08:29:51.535]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:51.535]             }
[08:29:51.535]             {
[08:29:51.535]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:51.535]                   0L) {
[08:29:51.535]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:51.535]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:51.535]                   base::options(opts)
[08:29:51.535]                 }
[08:29:51.535]                 {
[08:29:51.535]                   {
[08:29:51.535]                     NULL
[08:29:51.535]                     RNGkind("Mersenne-Twister")
[08:29:51.535]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:51.535]                       inherits = FALSE)
[08:29:51.535]                   }
[08:29:51.535]                   options(future.plan = NULL)
[08:29:51.535]                   if (is.na(NA_character_)) 
[08:29:51.535]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.535]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:51.535]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:51.535]                     .init = FALSE)
[08:29:51.535]                 }
[08:29:51.535]             }
[08:29:51.535]         }
[08:29:51.535]     })
[08:29:51.535]     if (TRUE) {
[08:29:51.535]         base::sink(type = "output", split = FALSE)
[08:29:51.535]         if (TRUE) {
[08:29:51.535]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:51.535]         }
[08:29:51.535]         else {
[08:29:51.535]             ...future.result["stdout"] <- base::list(NULL)
[08:29:51.535]         }
[08:29:51.535]         base::close(...future.stdout)
[08:29:51.535]         ...future.stdout <- NULL
[08:29:51.535]     }
[08:29:51.535]     ...future.result$conditions <- ...future.conditions
[08:29:51.535]     ...future.result$finished <- base::Sys.time()
[08:29:51.535]     ...future.result
[08:29:51.535] }
[08:29:51.538] plan(): Setting new future strategy stack:
[08:29:51.538] List of future strategies:
[08:29:51.538] 1. sequential:
[08:29:51.538]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.538]    - tweaked: FALSE
[08:29:51.538]    - call: NULL
[08:29:51.538] plan(): nbrOfWorkers() = 1
[08:29:51.539] plan(): Setting new future strategy stack:
[08:29:51.539] List of future strategies:
[08:29:51.539] 1. sequential:
[08:29:51.539]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:29:51.539]    - tweaked: TRUE
[08:29:51.539]    - call: plan(sequential, abc = FALSE)
[08:29:51.540] plan(): nbrOfWorkers() = 1
[08:29:51.540] SequentialFuture started (and completed)
[08:29:51.540] - Launch lazy future ... done
[08:29:51.540] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> x %<-% { a <- 2; a } %tweak% list(abc = TRUE)
[08:29:51.541] plan(): Setting new future strategy stack:
[08:29:51.541] List of future strategies:
[08:29:51.541] 1. sequential:
[08:29:51.541]    - args: function (..., abc = TRUE, envir = parent.frame(), workers = "<NULL>")
[08:29:51.541]    - tweaked: TRUE
[08:29:51.541]    - call: plan(sequential, abc = FALSE)
[08:29:51.541] plan(): nbrOfWorkers() = 1
[08:29:51.542] getGlobalsAndPackages() ...
[08:29:51.542] Searching for globals...
[08:29:51.543] - globals found: [2] ‘{’, ‘<-’
[08:29:51.543] Searching for globals ... DONE
[08:29:51.543] Resolving globals: FALSE
[08:29:51.544] 
[08:29:51.544] 
[08:29:51.544] getGlobalsAndPackages() ... DONE
[08:29:51.544] run() for ‘Future’ ...
[08:29:51.544] - state: ‘created’
[08:29:51.545] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘tweaked’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:51.545] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:51.545] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:51.545]   - Field: ‘label’
[08:29:51.545]   - Field: ‘local’
[08:29:51.545]   - Field: ‘owner’
[08:29:51.545]   - Field: ‘envir’
[08:29:51.546]   - Field: ‘packages’
[08:29:51.546]   - Field: ‘gc’
[08:29:51.546]   - Field: ‘conditions’
[08:29:51.546]   - Field: ‘expr’
[08:29:51.546]   - Field: ‘uuid’
[08:29:51.546]   - Field: ‘seed’
[08:29:51.546]   - Field: ‘version’
[08:29:51.546]   - Field: ‘result’
[08:29:51.546]   - Field: ‘asynchronous’
[08:29:51.547]   - Field: ‘calls’
[08:29:51.547]   - Field: ‘abc’
[08:29:51.547]   - Field: ‘globals’
[08:29:51.547]   - Field: ‘stdout’
[08:29:51.547]   - Field: ‘earlySignal’
[08:29:51.547]   - Field: ‘lazy’
[08:29:51.547]   - Field: ‘state’
[08:29:51.547] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:51.547] - Launch lazy future ...
[08:29:51.548] Packages needed by the future expression (n = 0): <none>
[08:29:51.548] Packages needed by future strategies (n = 0): <none>
[08:29:51.548] {
[08:29:51.548]     {
[08:29:51.548]         {
[08:29:51.548]             ...future.startTime <- base::Sys.time()
[08:29:51.548]             {
[08:29:51.548]                 {
[08:29:51.548]                   {
[08:29:51.548]                     base::local({
[08:29:51.548]                       has_future <- base::requireNamespace("future", 
[08:29:51.548]                         quietly = TRUE)
[08:29:51.548]                       if (has_future) {
[08:29:51.548]                         ns <- base::getNamespace("future")
[08:29:51.548]                         version <- ns[[".package"]][["version"]]
[08:29:51.548]                         if (is.null(version)) 
[08:29:51.548]                           version <- utils::packageVersion("future")
[08:29:51.548]                       }
[08:29:51.548]                       else {
[08:29:51.548]                         version <- NULL
[08:29:51.548]                       }
[08:29:51.548]                       if (!has_future || version < "1.8.0") {
[08:29:51.548]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:51.548]                           "", base::R.version$version.string), 
[08:29:51.548]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:51.548]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:51.548]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:51.548]                             "release", "version")], collapse = " "), 
[08:29:51.548]                           hostname = base::Sys.info()[["nodename"]])
[08:29:51.548]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:51.548]                           info)
[08:29:51.548]                         info <- base::paste(info, collapse = "; ")
[08:29:51.548]                         if (!has_future) {
[08:29:51.548]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:51.548]                             info)
[08:29:51.548]                         }
[08:29:51.548]                         else {
[08:29:51.548]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:51.548]                             info, version)
[08:29:51.548]                         }
[08:29:51.548]                         base::stop(msg)
[08:29:51.548]                       }
[08:29:51.548]                     })
[08:29:51.548]                   }
[08:29:51.548]                   ...future.strategy.old <- future::plan("list")
[08:29:51.548]                   options(future.plan = NULL)
[08:29:51.548]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.548]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:51.548]                 }
[08:29:51.548]                 ...future.workdir <- getwd()
[08:29:51.548]             }
[08:29:51.548]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:51.548]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:51.548]         }
[08:29:51.548]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:51.548]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:51.548]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:51.548]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:51.548]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:51.548]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:51.548]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:51.548]             base::names(...future.oldOptions))
[08:29:51.548]     }
[08:29:51.548]     if (FALSE) {
[08:29:51.548]     }
[08:29:51.548]     else {
[08:29:51.548]         if (TRUE) {
[08:29:51.548]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:51.548]                 open = "w")
[08:29:51.548]         }
[08:29:51.548]         else {
[08:29:51.548]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:51.548]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:51.548]         }
[08:29:51.548]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:51.548]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:51.548]             base::sink(type = "output", split = FALSE)
[08:29:51.548]             base::close(...future.stdout)
[08:29:51.548]         }, add = TRUE)
[08:29:51.548]     }
[08:29:51.548]     ...future.frame <- base::sys.nframe()
[08:29:51.548]     ...future.conditions <- base::list()
[08:29:51.548]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:51.548]     if (FALSE) {
[08:29:51.548]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:51.548]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:51.548]     }
[08:29:51.548]     ...future.result <- base::tryCatch({
[08:29:51.548]         base::withCallingHandlers({
[08:29:51.548]             ...future.value <- base::withVisible(base::local({
[08:29:51.548]                 a <- 2
[08:29:51.548]                 a
[08:29:51.548]             }))
[08:29:51.548]             future::FutureResult(value = ...future.value$value, 
[08:29:51.548]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.548]                   ...future.rng), globalenv = if (FALSE) 
[08:29:51.548]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:51.548]                     ...future.globalenv.names))
[08:29:51.548]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:51.548]         }, condition = base::local({
[08:29:51.548]             c <- base::c
[08:29:51.548]             inherits <- base::inherits
[08:29:51.548]             invokeRestart <- base::invokeRestart
[08:29:51.548]             length <- base::length
[08:29:51.548]             list <- base::list
[08:29:51.548]             seq.int <- base::seq.int
[08:29:51.548]             signalCondition <- base::signalCondition
[08:29:51.548]             sys.calls <- base::sys.calls
[08:29:51.548]             `[[` <- base::`[[`
[08:29:51.548]             `+` <- base::`+`
[08:29:51.548]             `<<-` <- base::`<<-`
[08:29:51.548]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:51.548]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:51.548]                   3L)]
[08:29:51.548]             }
[08:29:51.548]             function(cond) {
[08:29:51.548]                 is_error <- inherits(cond, "error")
[08:29:51.548]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:51.548]                   NULL)
[08:29:51.548]                 if (is_error) {
[08:29:51.548]                   sessionInformation <- function() {
[08:29:51.548]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:51.548]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:51.548]                       search = base::search(), system = base::Sys.info())
[08:29:51.548]                   }
[08:29:51.548]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.548]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:51.548]                     cond$call), session = sessionInformation(), 
[08:29:51.548]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:51.548]                   signalCondition(cond)
[08:29:51.548]                 }
[08:29:51.548]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:51.548]                 "immediateCondition"))) {
[08:29:51.548]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:51.548]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.548]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:51.548]                   if (TRUE && !signal) {
[08:29:51.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.548]                     {
[08:29:51.548]                       inherits <- base::inherits
[08:29:51.548]                       invokeRestart <- base::invokeRestart
[08:29:51.548]                       is.null <- base::is.null
[08:29:51.548]                       muffled <- FALSE
[08:29:51.548]                       if (inherits(cond, "message")) {
[08:29:51.548]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.548]                         if (muffled) 
[08:29:51.548]                           invokeRestart("muffleMessage")
[08:29:51.548]                       }
[08:29:51.548]                       else if (inherits(cond, "warning")) {
[08:29:51.548]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.548]                         if (muffled) 
[08:29:51.548]                           invokeRestart("muffleWarning")
[08:29:51.548]                       }
[08:29:51.548]                       else if (inherits(cond, "condition")) {
[08:29:51.548]                         if (!is.null(pattern)) {
[08:29:51.548]                           computeRestarts <- base::computeRestarts
[08:29:51.548]                           grepl <- base::grepl
[08:29:51.548]                           restarts <- computeRestarts(cond)
[08:29:51.548]                           for (restart in restarts) {
[08:29:51.548]                             name <- restart$name
[08:29:51.548]                             if (is.null(name)) 
[08:29:51.548]                               next
[08:29:51.548]                             if (!grepl(pattern, name)) 
[08:29:51.548]                               next
[08:29:51.548]                             invokeRestart(restart)
[08:29:51.548]                             muffled <- TRUE
[08:29:51.548]                             break
[08:29:51.548]                           }
[08:29:51.548]                         }
[08:29:51.548]                       }
[08:29:51.548]                       invisible(muffled)
[08:29:51.548]                     }
[08:29:51.548]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.548]                   }
[08:29:51.548]                 }
[08:29:51.548]                 else {
[08:29:51.548]                   if (TRUE) {
[08:29:51.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.548]                     {
[08:29:51.548]                       inherits <- base::inherits
[08:29:51.548]                       invokeRestart <- base::invokeRestart
[08:29:51.548]                       is.null <- base::is.null
[08:29:51.548]                       muffled <- FALSE
[08:29:51.548]                       if (inherits(cond, "message")) {
[08:29:51.548]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.548]                         if (muffled) 
[08:29:51.548]                           invokeRestart("muffleMessage")
[08:29:51.548]                       }
[08:29:51.548]                       else if (inherits(cond, "warning")) {
[08:29:51.548]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.548]                         if (muffled) 
[08:29:51.548]                           invokeRestart("muffleWarning")
[08:29:51.548]                       }
[08:29:51.548]                       else if (inherits(cond, "condition")) {
[08:29:51.548]                         if (!is.null(pattern)) {
[08:29:51.548]                           computeRestarts <- base::computeRestarts
[08:29:51.548]                           grepl <- base::grepl
[08:29:51.548]                           restarts <- computeRestarts(cond)
[08:29:51.548]                           for (restart in restarts) {
[08:29:51.548]                             name <- restart$name
[08:29:51.548]                             if (is.null(name)) 
[08:29:51.548]                               next
[08:29:51.548]                             if (!grepl(pattern, name)) 
[08:29:51.548]                               next
[08:29:51.548]                             invokeRestart(restart)
[08:29:51.548]                             muffled <- TRUE
[08:29:51.548]                             break
[08:29:51.548]                           }
[08:29:51.548]                         }
[08:29:51.548]                       }
[08:29:51.548]                       invisible(muffled)
[08:29:51.548]                     }
[08:29:51.548]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.548]                   }
[08:29:51.548]                 }
[08:29:51.548]             }
[08:29:51.548]         }))
[08:29:51.548]     }, error = function(ex) {
[08:29:51.548]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:51.548]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.548]                 ...future.rng), started = ...future.startTime, 
[08:29:51.548]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:51.548]             version = "1.8"), class = "FutureResult")
[08:29:51.548]     }, finally = {
[08:29:51.548]         if (!identical(...future.workdir, getwd())) 
[08:29:51.548]             setwd(...future.workdir)
[08:29:51.548]         {
[08:29:51.548]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:51.548]                 ...future.oldOptions$nwarnings <- NULL
[08:29:51.548]             }
[08:29:51.548]             base::options(...future.oldOptions)
[08:29:51.548]             if (.Platform$OS.type == "windows") {
[08:29:51.548]                 old_names <- names(...future.oldEnvVars)
[08:29:51.548]                 envs <- base::Sys.getenv()
[08:29:51.548]                 names <- names(envs)
[08:29:51.548]                 common <- intersect(names, old_names)
[08:29:51.548]                 added <- setdiff(names, old_names)
[08:29:51.548]                 removed <- setdiff(old_names, names)
[08:29:51.548]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:51.548]                   envs[common]]
[08:29:51.548]                 NAMES <- toupper(changed)
[08:29:51.548]                 args <- list()
[08:29:51.548]                 for (kk in seq_along(NAMES)) {
[08:29:51.548]                   name <- changed[[kk]]
[08:29:51.548]                   NAME <- NAMES[[kk]]
[08:29:51.548]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.548]                     next
[08:29:51.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.548]                 }
[08:29:51.548]                 NAMES <- toupper(added)
[08:29:51.548]                 for (kk in seq_along(NAMES)) {
[08:29:51.548]                   name <- added[[kk]]
[08:29:51.548]                   NAME <- NAMES[[kk]]
[08:29:51.548]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.548]                     next
[08:29:51.548]                   args[[name]] <- ""
[08:29:51.548]                 }
[08:29:51.548]                 NAMES <- toupper(removed)
[08:29:51.548]                 for (kk in seq_along(NAMES)) {
[08:29:51.548]                   name <- removed[[kk]]
[08:29:51.548]                   NAME <- NAMES[[kk]]
[08:29:51.548]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.548]                     next
[08:29:51.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.548]                 }
[08:29:51.548]                 if (length(args) > 0) 
[08:29:51.548]                   base::do.call(base::Sys.setenv, args = args)
[08:29:51.548]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:51.548]             }
[08:29:51.548]             else {
[08:29:51.548]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:51.548]             }
[08:29:51.548]             {
[08:29:51.548]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:51.548]                   0L) {
[08:29:51.548]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:51.548]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:51.548]                   base::options(opts)
[08:29:51.548]                 }
[08:29:51.548]                 {
[08:29:51.548]                   {
[08:29:51.548]                     NULL
[08:29:51.548]                     RNGkind("Mersenne-Twister")
[08:29:51.548]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:51.548]                       inherits = FALSE)
[08:29:51.548]                   }
[08:29:51.548]                   options(future.plan = NULL)
[08:29:51.548]                   if (is.na(NA_character_)) 
[08:29:51.548]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.548]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:51.548]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:51.548]                     .init = FALSE)
[08:29:51.548]                 }
[08:29:51.548]             }
[08:29:51.548]         }
[08:29:51.548]     })
[08:29:51.548]     if (TRUE) {
[08:29:51.548]         base::sink(type = "output", split = FALSE)
[08:29:51.548]         if (TRUE) {
[08:29:51.548]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:51.548]         }
[08:29:51.548]         else {
[08:29:51.548]             ...future.result["stdout"] <- base::list(NULL)
[08:29:51.548]         }
[08:29:51.548]         base::close(...future.stdout)
[08:29:51.548]         ...future.stdout <- NULL
[08:29:51.548]     }
[08:29:51.548]     ...future.result$conditions <- ...future.conditions
[08:29:51.548]     ...future.result$finished <- base::Sys.time()
[08:29:51.548]     ...future.result
[08:29:51.548] }
[08:29:51.554] plan(): Setting new future strategy stack:
[08:29:51.554] List of future strategies:
[08:29:51.554] 1. sequential:
[08:29:51.554]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.554]    - tweaked: FALSE
[08:29:51.554]    - call: NULL
[08:29:51.554] plan(): nbrOfWorkers() = 1
[08:29:51.555] plan(): Setting new future strategy stack:
[08:29:51.555] List of future strategies:
[08:29:51.555] 1. sequential:
[08:29:51.555]    - args: function (..., abc = TRUE, envir = parent.frame(), workers = "<NULL>")
[08:29:51.555]    - tweaked: TRUE
[08:29:51.555]    - call: plan(sequential, abc = FALSE)
[08:29:51.556] plan(): nbrOfWorkers() = 1
[08:29:51.556] SequentialFuture started (and completed)
[08:29:51.556] - Launch lazy future ... done
[08:29:51.556] run() for ‘SequentialFuture’ ... done
[08:29:51.556] plan(): Setting new future strategy stack:
[08:29:51.556] List of future strategies:
[08:29:51.556] 1. sequential:
[08:29:51.556]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:29:51.556]    - tweaked: TRUE
[08:29:51.556]    - call: plan(sequential, abc = FALSE)
[08:29:51.557] plan(): nbrOfWorkers() = 1
> print(x)
[1] 2
> stopifnot(a == 0, x == 2)
> 
> 
> # Preserve nested futures
> plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
Warning: Detected 1 unknown future arguments: ‘abc’
[08:29:51.557] plan(): Setting new future strategy stack:
[08:29:51.557] List of future strategies:
[08:29:51.557] 1. sequential:
[08:29:51.557]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.557]    - tweaked: FALSE
[08:29:51.557]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[08:29:51.557] 2. sequential:
[08:29:51.557]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:29:51.557]    - tweaked: TRUE
[08:29:51.557]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[08:29:51.558] plan(): nbrOfWorkers() = 1
> a <- 0
> 
> x %<-% {
+   stopifnot(identical(names(plan("list")), "B"))
+   a <- 1
+   a
+ }
[08:29:51.558] getGlobalsAndPackages() ...
[08:29:51.558] Searching for globals...
[08:29:51.562] - globals found: [6] ‘{’, ‘stopifnot’, ‘identical’, ‘names’, ‘plan’, ‘<-’
[08:29:51.562] Searching for globals ... DONE
[08:29:51.562] Resolving globals: FALSE
[08:29:51.563] The total size of the 1 globals is 64.15 KiB (65691 bytes)
[08:29:51.564] The total size of the 1 globals exported for future expression (‘{; stopifnot(identical(names(plan("list")), "B")); a <- 1; a; }’) is 64.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘plan’ (64.15 KiB of class ‘function’)
[08:29:51.564] - globals: [1] ‘plan’
[08:29:51.564] 
[08:29:51.564] getGlobalsAndPackages() ... DONE
[08:29:51.564] run() for ‘Future’ ...
[08:29:51.564] - state: ‘created’
[08:29:51.565] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:51.565] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:51.565] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:51.565]   - Field: ‘label’
[08:29:51.565]   - Field: ‘local’
[08:29:51.565]   - Field: ‘owner’
[08:29:51.565]   - Field: ‘envir’
[08:29:51.565]   - Field: ‘packages’
[08:29:51.565]   - Field: ‘gc’
[08:29:51.566]   - Field: ‘conditions’
[08:29:51.566]   - Field: ‘expr’
[08:29:51.566]   - Field: ‘uuid’
[08:29:51.566]   - Field: ‘seed’
[08:29:51.566]   - Field: ‘version’
[08:29:51.566]   - Field: ‘result’
[08:29:51.566]   - Field: ‘asynchronous’
[08:29:51.566]   - Field: ‘calls’
[08:29:51.566]   - Field: ‘globals’
[08:29:51.566]   - Field: ‘stdout’
[08:29:51.566]   - Field: ‘earlySignal’
[08:29:51.566]   - Field: ‘lazy’
[08:29:51.567]   - Field: ‘state’
[08:29:51.567] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:51.567] - Launch lazy future ...
[08:29:51.567] Packages needed by the future expression (n = 0): <none>
[08:29:51.567] Packages needed by future strategies (n = 0): 
[08:29:51.567] {
[08:29:51.567]     {
[08:29:51.567]         {
[08:29:51.567]             ...future.startTime <- base::Sys.time()
[08:29:51.567]             {
[08:29:51.567]                 {
[08:29:51.567]                   {
[08:29:51.567]                     base::local({
[08:29:51.567]                       has_future <- base::requireNamespace("future", 
[08:29:51.567]                         quietly = TRUE)
[08:29:51.567]                       if (has_future) {
[08:29:51.567]                         ns <- base::getNamespace("future")
[08:29:51.567]                         version <- ns[[".package"]][["version"]]
[08:29:51.567]                         if (is.null(version)) 
[08:29:51.567]                           version <- utils::packageVersion("future")
[08:29:51.567]                       }
[08:29:51.567]                       else {
[08:29:51.567]                         version <- NULL
[08:29:51.567]                       }
[08:29:51.567]                       if (!has_future || version < "1.8.0") {
[08:29:51.567]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:51.567]                           "", base::R.version$version.string), 
[08:29:51.567]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:51.567]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:51.567]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:51.567]                             "release", "version")], collapse = " "), 
[08:29:51.567]                           hostname = base::Sys.info()[["nodename"]])
[08:29:51.567]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:51.567]                           info)
[08:29:51.567]                         info <- base::paste(info, collapse = "; ")
[08:29:51.567]                         if (!has_future) {
[08:29:51.567]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:51.567]                             info)
[08:29:51.567]                         }
[08:29:51.567]                         else {
[08:29:51.567]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:51.567]                             info, version)
[08:29:51.567]                         }
[08:29:51.567]                         base::stop(msg)
[08:29:51.567]                       }
[08:29:51.567]                     })
[08:29:51.567]                   }
[08:29:51.567]                   ...future.strategy.old <- future::plan("list")
[08:29:51.567]                   options(future.plan = NULL)
[08:29:51.567]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.567]                   future::plan(list(B = function (..., abc = FALSE, 
[08:29:51.567]                     envir = parent.frame()) 
[08:29:51.567]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[08:29:51.567]                     .init = FALSE)
[08:29:51.567]                 }
[08:29:51.567]                 ...future.workdir <- getwd()
[08:29:51.567]             }
[08:29:51.567]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:51.567]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:51.567]         }
[08:29:51.567]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:51.567]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:51.567]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:51.567]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:51.567]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:51.567]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:51.567]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:51.567]             base::names(...future.oldOptions))
[08:29:51.567]     }
[08:29:51.567]     if (FALSE) {
[08:29:51.567]     }
[08:29:51.567]     else {
[08:29:51.567]         if (TRUE) {
[08:29:51.567]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:51.567]                 open = "w")
[08:29:51.567]         }
[08:29:51.567]         else {
[08:29:51.567]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:51.567]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:51.567]         }
[08:29:51.567]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:51.567]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:51.567]             base::sink(type = "output", split = FALSE)
[08:29:51.567]             base::close(...future.stdout)
[08:29:51.567]         }, add = TRUE)
[08:29:51.567]     }
[08:29:51.567]     ...future.frame <- base::sys.nframe()
[08:29:51.567]     ...future.conditions <- base::list()
[08:29:51.567]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:51.567]     if (FALSE) {
[08:29:51.567]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:51.567]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:51.567]     }
[08:29:51.567]     ...future.result <- base::tryCatch({
[08:29:51.567]         base::withCallingHandlers({
[08:29:51.567]             ...future.value <- base::withVisible(base::local({
[08:29:51.567]                 stopifnot(identical(names(plan("list")), "B"))
[08:29:51.567]                 a <- 1
[08:29:51.567]                 a
[08:29:51.567]             }))
[08:29:51.567]             future::FutureResult(value = ...future.value$value, 
[08:29:51.567]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.567]                   ...future.rng), globalenv = if (FALSE) 
[08:29:51.567]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:51.567]                     ...future.globalenv.names))
[08:29:51.567]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:51.567]         }, condition = base::local({
[08:29:51.567]             c <- base::c
[08:29:51.567]             inherits <- base::inherits
[08:29:51.567]             invokeRestart <- base::invokeRestart
[08:29:51.567]             length <- base::length
[08:29:51.567]             list <- base::list
[08:29:51.567]             seq.int <- base::seq.int
[08:29:51.567]             signalCondition <- base::signalCondition
[08:29:51.567]             sys.calls <- base::sys.calls
[08:29:51.567]             `[[` <- base::`[[`
[08:29:51.567]             `+` <- base::`+`
[08:29:51.567]             `<<-` <- base::`<<-`
[08:29:51.567]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:51.567]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:51.567]                   3L)]
[08:29:51.567]             }
[08:29:51.567]             function(cond) {
[08:29:51.567]                 is_error <- inherits(cond, "error")
[08:29:51.567]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:51.567]                   NULL)
[08:29:51.567]                 if (is_error) {
[08:29:51.567]                   sessionInformation <- function() {
[08:29:51.567]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:51.567]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:51.567]                       search = base::search(), system = base::Sys.info())
[08:29:51.567]                   }
[08:29:51.567]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.567]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:51.567]                     cond$call), session = sessionInformation(), 
[08:29:51.567]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:51.567]                   signalCondition(cond)
[08:29:51.567]                 }
[08:29:51.567]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:51.567]                 "immediateCondition"))) {
[08:29:51.567]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:51.567]                   ...future.conditions[[length(...future.conditions) + 
[08:29:51.567]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:51.567]                   if (TRUE && !signal) {
[08:29:51.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.567]                     {
[08:29:51.567]                       inherits <- base::inherits
[08:29:51.567]                       invokeRestart <- base::invokeRestart
[08:29:51.567]                       is.null <- base::is.null
[08:29:51.567]                       muffled <- FALSE
[08:29:51.567]                       if (inherits(cond, "message")) {
[08:29:51.567]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.567]                         if (muffled) 
[08:29:51.567]                           invokeRestart("muffleMessage")
[08:29:51.567]                       }
[08:29:51.567]                       else if (inherits(cond, "warning")) {
[08:29:51.567]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.567]                         if (muffled) 
[08:29:51.567]                           invokeRestart("muffleWarning")
[08:29:51.567]                       }
[08:29:51.567]                       else if (inherits(cond, "condition")) {
[08:29:51.567]                         if (!is.null(pattern)) {
[08:29:51.567]                           computeRestarts <- base::computeRestarts
[08:29:51.567]                           grepl <- base::grepl
[08:29:51.567]                           restarts <- computeRestarts(cond)
[08:29:51.567]                           for (restart in restarts) {
[08:29:51.567]                             name <- restart$name
[08:29:51.567]                             if (is.null(name)) 
[08:29:51.567]                               next
[08:29:51.567]                             if (!grepl(pattern, name)) 
[08:29:51.567]                               next
[08:29:51.567]                             invokeRestart(restart)
[08:29:51.567]                             muffled <- TRUE
[08:29:51.567]                             break
[08:29:51.567]                           }
[08:29:51.567]                         }
[08:29:51.567]                       }
[08:29:51.567]                       invisible(muffled)
[08:29:51.567]                     }
[08:29:51.567]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.567]                   }
[08:29:51.567]                 }
[08:29:51.567]                 else {
[08:29:51.567]                   if (TRUE) {
[08:29:51.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:51.567]                     {
[08:29:51.567]                       inherits <- base::inherits
[08:29:51.567]                       invokeRestart <- base::invokeRestart
[08:29:51.567]                       is.null <- base::is.null
[08:29:51.567]                       muffled <- FALSE
[08:29:51.567]                       if (inherits(cond, "message")) {
[08:29:51.567]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:51.567]                         if (muffled) 
[08:29:51.567]                           invokeRestart("muffleMessage")
[08:29:51.567]                       }
[08:29:51.567]                       else if (inherits(cond, "warning")) {
[08:29:51.567]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:51.567]                         if (muffled) 
[08:29:51.567]                           invokeRestart("muffleWarning")
[08:29:51.567]                       }
[08:29:51.567]                       else if (inherits(cond, "condition")) {
[08:29:51.567]                         if (!is.null(pattern)) {
[08:29:51.567]                           computeRestarts <- base::computeRestarts
[08:29:51.567]                           grepl <- base::grepl
[08:29:51.567]                           restarts <- computeRestarts(cond)
[08:29:51.567]                           for (restart in restarts) {
[08:29:51.567]                             name <- restart$name
[08:29:51.567]                             if (is.null(name)) 
[08:29:51.567]                               next
[08:29:51.567]                             if (!grepl(pattern, name)) 
[08:29:51.567]                               next
[08:29:51.567]                             invokeRestart(restart)
[08:29:51.567]                             muffled <- TRUE
[08:29:51.567]                             break
[08:29:51.567]                           }
[08:29:51.567]                         }
[08:29:51.567]                       }
[08:29:51.567]                       invisible(muffled)
[08:29:51.567]                     }
[08:29:51.567]                     muffleCondition(cond, pattern = "^muffle")
[08:29:51.567]                   }
[08:29:51.567]                 }
[08:29:51.567]             }
[08:29:51.567]         }))
[08:29:51.567]     }, error = function(ex) {
[08:29:51.567]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:51.567]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:51.567]                 ...future.rng), started = ...future.startTime, 
[08:29:51.567]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:51.567]             version = "1.8"), class = "FutureResult")
[08:29:51.567]     }, finally = {
[08:29:51.567]         if (!identical(...future.workdir, getwd())) 
[08:29:51.567]             setwd(...future.workdir)
[08:29:51.567]         {
[08:29:51.567]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:51.567]                 ...future.oldOptions$nwarnings <- NULL
[08:29:51.567]             }
[08:29:51.567]             base::options(...future.oldOptions)
[08:29:51.567]             if (.Platform$OS.type == "windows") {
[08:29:51.567]                 old_names <- names(...future.oldEnvVars)
[08:29:51.567]                 envs <- base::Sys.getenv()
[08:29:51.567]                 names <- names(envs)
[08:29:51.567]                 common <- intersect(names, old_names)
[08:29:51.567]                 added <- setdiff(names, old_names)
[08:29:51.567]                 removed <- setdiff(old_names, names)
[08:29:51.567]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:51.567]                   envs[common]]
[08:29:51.567]                 NAMES <- toupper(changed)
[08:29:51.567]                 args <- list()
[08:29:51.567]                 for (kk in seq_along(NAMES)) {
[08:29:51.567]                   name <- changed[[kk]]
[08:29:51.567]                   NAME <- NAMES[[kk]]
[08:29:51.567]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.567]                     next
[08:29:51.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.567]                 }
[08:29:51.567]                 NAMES <- toupper(added)
[08:29:51.567]                 for (kk in seq_along(NAMES)) {
[08:29:51.567]                   name <- added[[kk]]
[08:29:51.567]                   NAME <- NAMES[[kk]]
[08:29:51.567]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.567]                     next
[08:29:51.567]                   args[[name]] <- ""
[08:29:51.567]                 }
[08:29:51.567]                 NAMES <- toupper(removed)
[08:29:51.567]                 for (kk in seq_along(NAMES)) {
[08:29:51.567]                   name <- removed[[kk]]
[08:29:51.567]                   NAME <- NAMES[[kk]]
[08:29:51.567]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:51.567]                     next
[08:29:51.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:51.567]                 }
[08:29:51.567]                 if (length(args) > 0) 
[08:29:51.567]                   base::do.call(base::Sys.setenv, args = args)
[08:29:51.567]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:51.567]             }
[08:29:51.567]             else {
[08:29:51.567]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:51.567]             }
[08:29:51.567]             {
[08:29:51.567]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:51.567]                   0L) {
[08:29:51.567]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:51.567]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:51.567]                   base::options(opts)
[08:29:51.567]                 }
[08:29:51.567]                 {
[08:29:51.567]                   {
[08:29:51.567]                     NULL
[08:29:51.567]                     RNGkind("Mersenne-Twister")
[08:29:51.567]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:51.567]                       inherits = FALSE)
[08:29:51.567]                   }
[08:29:51.567]                   options(future.plan = NULL)
[08:29:51.567]                   if (is.na(NA_character_)) 
[08:29:51.567]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:51.567]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:51.567]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:51.567]                     .init = FALSE)
[08:29:51.567]                 }
[08:29:51.567]             }
[08:29:51.567]         }
[08:29:51.567]     })
[08:29:51.567]     if (TRUE) {
[08:29:51.567]         base::sink(type = "output", split = FALSE)
[08:29:51.567]         if (TRUE) {
[08:29:51.567]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:51.567]         }
[08:29:51.567]         else {
[08:29:51.567]             ...future.result["stdout"] <- base::list(NULL)
[08:29:51.567]         }
[08:29:51.567]         base::close(...future.stdout)
[08:29:51.567]         ...future.stdout <- NULL
[08:29:51.567]     }
[08:29:51.567]     ...future.result$conditions <- ...future.conditions
[08:29:51.567]     ...future.result$finished <- base::Sys.time()
[08:29:51.567]     ...future.result
[08:29:51.567] }
[08:29:51.569] assign_globals() ...
[08:29:51.569] List of 1
[08:29:51.569]  $ plan:function (strategy = NULL, ..., substitute = TRUE, .skip = FALSE, .call = TRUE, 
[08:29:51.569]     .cleanup = TRUE, .init = TRUE)  
[08:29:51.569]  - attr(*, "where")=List of 1
[08:29:51.569]   ..$ plan:<environment: R_EmptyEnv> 
[08:29:51.569]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:29:51.569]  - attr(*, "resolved")= logi FALSE
[08:29:51.569]  - attr(*, "total_size")= num 65691
[08:29:51.569]  - attr(*, "already-done")= logi TRUE
[08:29:51.574] - copied ‘plan’ to environment
[08:29:51.574] assign_globals() ... done
[08:29:51.574] plan(): Setting new future strategy stack:
[08:29:51.574] List of future strategies:
[08:29:51.574] 1. sequential:
[08:29:51.574]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:29:51.574]    - tweaked: TRUE
[08:29:51.574]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[08:29:51.574] plan(): nbrOfWorkers() = 1
[08:29:51.575] plan(): Setting new future strategy stack:
[08:29:51.575] List of future strategies:
[08:29:51.575] 1. sequential:
[08:29:51.575]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.575]    - tweaked: FALSE
[08:29:51.575]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[08:29:51.575] 2. sequential:
[08:29:51.575]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:29:51.575]    - tweaked: TRUE
[08:29:51.575]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[08:29:51.576] plan(): nbrOfWorkers() = 1
[08:29:51.576] SequentialFuture started (and completed)
[08:29:51.576] - Launch lazy future ... done
[08:29:51.576] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> 
> message("*** y %<-% { expr } %tweak% tweaks ... DONE")
*** y %<-% { expr } %tweak% tweaks ... DONE
> 
> 
> message("*** tweak() - abc = TRUE ...")
*** tweak() - abc = TRUE ...
> 
> res <- tryCatch(tweak(multisession, gc = TRUE), condition = identity)
> stopifnot(inherits(res, "tweaked"))
> 
> ## Argument 'gc' is unknown
> res <- tryCatch(tweak(sequential, abc = TRUE), condition = identity)
> stopifnot(inherits(res, "warning"))
> 
> res <- tryCatch(tweak(multicore, abc = TRUE), condition = identity)
> stopifnot(inherits(res, "warning"))
> 
> message("*** tweak() - abc = TRUE ... DONE")
*** tweak() - abc = TRUE ... DONE
> 
> 
> message("*** tweak() - odds and ends ...")
*** tweak() - odds and ends ...
> 
> ## BUG: getGlobalsAndPackages(Formula::Formula(~ x)) would produce
> ## "the condition has length > 1" warnings.
> ## https://github.com/HenrikBengtsson/future/issues/395
> length.Formula <- function(x) c(1L, 1L)
> expr <- structure(y ~ x, class = "Formula")
> stopifnot(length(length(expr)) == 2L)
> gp <- future::getGlobalsAndPackages(expr)
[08:29:51.578] getGlobalsAndPackages() ...
[08:29:51.578] Searching for globals...
[08:29:51.580] - globals found: [4] ‘{’, ‘y’, ‘x’, ‘~’
[08:29:51.580] Searching for globals ... DONE
[08:29:51.580] Resolving globals: FALSE
[08:29:51.580] The total size of the 1 globals is 39 bytes (39 bytes)
[08:29:51.581] The total size of the 1 globals exported for future expression (‘y ~ x’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (39 bytes of class ‘numeric’)
[08:29:51.581] - globals: [1] ‘x’
[08:29:51.581] 
[08:29:51.581] getGlobalsAndPackages() ... DONE
> stopifnot(
+   !inherits(gp, "error"),
+   is.list(gp),
+   all(c("expr", "globals", "packages") %in% names(gp))
+ )
> 
> message("*** tweak() - odds and ends ... DONE")
*** tweak() - odds and ends ... DONE
> 
> 
> message("*** tweak() - exceptions ...")
*** tweak() - exceptions ...
> 
> res <- try(tweak("<unknown-future-strategy>"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(base::eval), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, "unnamed-argument"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> ## Arguments that must not be tweaked
> res <- try(tweak(sequential, lazy = TRUE), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, asynchronous = FALSE), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, seed = 42L), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** tweak() - exceptions ... DONE")
*** tweak() - exceptions ... DONE
> 
> 
> message("*** Tweaking future strategies ... DONE")
*** Tweaking future strategies ... DONE
> 
> source("incl/end.R")
[08:29:51.615] plan(): Setting new future strategy stack:
[08:29:51.615] List of future strategies:
[08:29:51.615] 1. FutureStrategy:
[08:29:51.615]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:51.615]    - tweaked: FALSE
[08:29:51.615]    - call: future::plan(oplan)
[08:29:51.616] plan(): nbrOfWorkers() = 1
> 
