
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:00.612] plan(): Setting new future strategy stack:
[11:01:00.613] List of future strategies:
[11:01:00.613] 1. sequential:
[11:01:00.613]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:00.613]    - tweaked: FALSE
[11:01:00.613]    - call: future::plan("sequential")
[11:01:00.626] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** constant() ...")
*** constant() ...
> 
> ## No global variables
> f <- try(constant(42L), silent = FALSE)
[11:01:00.644] getGlobalsAndPackages() ...
[11:01:00.644] 
[11:01:00.645] - globals: [0] <none>
[11:01:00.645] getGlobalsAndPackages() ... DONE
> print(f)
ConstantFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_EmptyEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 35 bytes of class ‘integer’
Early signaling: FALSE
Owner process: 460fb5b9-545b-3e70-2a68-a200d4dbc9bf
Class: ‘ConstantFuture’, ‘Future’, ‘environment’
> stopifnot(inherits(f, "ConstantFuture"))
> 
> print(resolved(f))
[11:01:00.646] resolved() for ‘ConstantFuture’ ...
[11:01:00.646] - state: ‘finished’
[11:01:00.646] - run: TRUE
[11:01:00.647] - result: ‘FutureResult’
[11:01:00.647] resolved() for ‘ConstantFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> plan(constant)
[11:01:00.647] plan(): Setting new future strategy stack:
[11:01:00.647] List of future strategies:
[11:01:00.647] 1. constant:
[11:01:00.647]    - args: function (..., workers = "<NULL>")
[11:01:00.647]    - tweaked: FALSE
[11:01:00.647]    - call: plan(constant)
[11:01:00.658] plan(): nbrOfWorkers() = 1
> ## No global variables
> f <- try(future(42L), silent = FALSE)
[11:01:00.658] getGlobalsAndPackages() ...
[11:01:00.659] Searching for globals...
[11:01:00.660] 
[11:01:00.660] Searching for globals ... DONE
[11:01:00.660] - globals: [0] <none>
[11:01:00.661] getGlobalsAndPackages() ... DONE
[11:01:00.661] run() for ‘Future’ ...
[11:01:00.661] - state: ‘created’
[11:01:00.661] - Future backend: ‘FutureStrategy’, ‘constant’, ‘uniprocess’, ‘future’, ‘function’
[11:01:00.661] getGlobalsAndPackages() ...
[11:01:00.661] 
[11:01:00.662] - globals: [0] <none>
[11:01:00.662] getGlobalsAndPackages() ... DONE
[11:01:00.662] - Future class: ‘ConstantFuture’, ‘Future’, ‘environment’
[11:01:00.662] - Copy elements of temporary ‘ConstantFuture’ to final ‘Future’ object ...
[11:01:00.662]   - Field: ‘label’
[11:01:00.662]   - Field: ‘local’
[11:01:00.662]   - Field: ‘owner’
[11:01:00.662]   - Field: ‘envir’
[11:01:00.662]   - Field: ‘packages’
[11:01:00.662]   - Field: ‘gc’
[11:01:00.663]   - Field: ‘conditions’
[11:01:00.663]   - Field: ‘expr’
[11:01:00.663]   - Field: ‘uuid’
[11:01:00.663]   - Field: ‘seed’
[11:01:00.663]   - Field: ‘version’
[11:01:00.663]   - Field: ‘result’
[11:01:00.663]   - Field: ‘asynchronous’
[11:01:00.663]   - Field: ‘calls’
[11:01:00.663]   - Field: ‘globals’
[11:01:00.663]   - Field: ‘stdout’
[11:01:00.663]   - Field: ‘earlySignal’
[11:01:00.663]   - Field: ‘lazy’
[11:01:00.664]   - Field: ‘state’
[11:01:00.664] - Copy elements of temporary ‘ConstantFuture’ to final ‘Future’ object ... done
[11:01:00.664] - Launch lazy future ...
[11:01:00.664] - Launch lazy future ... done
[11:01:00.664] run() for ‘ConstantFuture’ ... done
> print(f)
ConstantFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 35 bytes of class ‘integer’
Early signaling: FALSE
Owner process: 460fb5b9-545b-3e70-2a68-a200d4dbc9bf
Class: ‘ConstantFuture’, ‘Future’, ‘environment’
> stopifnot(inherits(f, "ConstantFuture"))
> 
> print(resolved(f))
[11:01:00.664] resolved() for ‘ConstantFuture’ ...
[11:01:00.664] - state: ‘finished’
[11:01:00.664] - run: TRUE
[11:01:00.665] - result: ‘FutureResult’
[11:01:00.665] resolved() for ‘ConstantFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** constant() ... DONE")
*** constant() ... DONE
> 
> source("incl/end.R")
[11:01:00.665] plan(): Setting new future strategy stack:
[11:01:00.665] List of future strategies:
[11:01:00.665] 1. FutureStrategy:
[11:01:00.665]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:00.665]    - tweaked: FALSE
[11:01:00.665]    - call: future::plan(oplan)
[11:01:00.666] plan(): nbrOfWorkers() = 1
> 
