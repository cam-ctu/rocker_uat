
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:16.386] plan(): Setting new future strategy stack:
[11:01:16.387] List of future strategies:
[11:01:16.387] 1. sequential:
[11:01:16.387]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.387]    - tweaked: FALSE
[11:01:16.387]    - call: future::plan("sequential")
[11:01:16.399] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[11:01:16.427] plan(): Setting new future strategy stack:
[11:01:16.427] List of future strategies:
[11:01:16.427] 1. sequential:
[11:01:16.427]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.427]    - tweaked: FALSE
[11:01:16.427]    - call: plan(strategy)
[11:01:16.439] plan(): nbrOfWorkers() = 1
[11:01:16.440] getGlobalsAndPackages() ...
[11:01:16.440] Searching for globals...
[11:01:16.442] 
[11:01:16.442] Searching for globals ... DONE
[11:01:16.442] - globals: [0] <none>
[11:01:16.442] getGlobalsAndPackages() ... DONE
[11:01:16.443] Packages needed by the future expression (n = 0): <none>
[11:01:16.443] Packages needed by future strategies (n = 0): <none>
[11:01:16.444] {
[11:01:16.444]     {
[11:01:16.444]         {
[11:01:16.444]             ...future.startTime <- base::Sys.time()
[11:01:16.444]             {
[11:01:16.444]                 {
[11:01:16.444]                   {
[11:01:16.444]                     base::local({
[11:01:16.444]                       has_future <- base::requireNamespace("future", 
[11:01:16.444]                         quietly = TRUE)
[11:01:16.444]                       if (has_future) {
[11:01:16.444]                         ns <- base::getNamespace("future")
[11:01:16.444]                         version <- ns[[".package"]][["version"]]
[11:01:16.444]                         if (is.null(version)) 
[11:01:16.444]                           version <- utils::packageVersion("future")
[11:01:16.444]                       }
[11:01:16.444]                       else {
[11:01:16.444]                         version <- NULL
[11:01:16.444]                       }
[11:01:16.444]                       if (!has_future || version < "1.8.0") {
[11:01:16.444]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.444]                           "", base::R.version$version.string), 
[11:01:16.444]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:16.444]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.444]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.444]                             "release", "version")], collapse = " "), 
[11:01:16.444]                           hostname = base::Sys.info()[["nodename"]])
[11:01:16.444]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.444]                           info)
[11:01:16.444]                         info <- base::paste(info, collapse = "; ")
[11:01:16.444]                         if (!has_future) {
[11:01:16.444]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.444]                             info)
[11:01:16.444]                         }
[11:01:16.444]                         else {
[11:01:16.444]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.444]                             info, version)
[11:01:16.444]                         }
[11:01:16.444]                         base::stop(msg)
[11:01:16.444]                       }
[11:01:16.444]                     })
[11:01:16.444]                   }
[11:01:16.444]                   ...future.strategy.old <- future::plan("list")
[11:01:16.444]                   options(future.plan = NULL)
[11:01:16.444]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.444]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.444]                 }
[11:01:16.444]                 ...future.workdir <- getwd()
[11:01:16.444]             }
[11:01:16.444]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.444]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.444]         }
[11:01:16.444]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.444]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.444]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.444]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.444]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.444]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.444]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.444]             base::names(...future.oldOptions))
[11:01:16.444]     }
[11:01:16.444]     if (FALSE) {
[11:01:16.444]     }
[11:01:16.444]     else {
[11:01:16.444]         if (TRUE) {
[11:01:16.444]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.444]                 open = "w")
[11:01:16.444]         }
[11:01:16.444]         else {
[11:01:16.444]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.444]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.444]         }
[11:01:16.444]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.444]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.444]             base::sink(type = "output", split = FALSE)
[11:01:16.444]             base::close(...future.stdout)
[11:01:16.444]         }, add = TRUE)
[11:01:16.444]     }
[11:01:16.444]     ...future.frame <- base::sys.nframe()
[11:01:16.444]     ...future.conditions <- base::list()
[11:01:16.444]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.444]     if (FALSE) {
[11:01:16.444]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.444]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.444]     }
[11:01:16.444]     ...future.result <- base::tryCatch({
[11:01:16.444]         base::withCallingHandlers({
[11:01:16.444]             ...future.value <- base::withVisible(base::local(42))
[11:01:16.444]             future::FutureResult(value = ...future.value$value, 
[11:01:16.444]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.444]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.444]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.444]                     ...future.globalenv.names))
[11:01:16.444]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.444]         }, condition = base::local({
[11:01:16.444]             c <- base::c
[11:01:16.444]             inherits <- base::inherits
[11:01:16.444]             invokeRestart <- base::invokeRestart
[11:01:16.444]             length <- base::length
[11:01:16.444]             list <- base::list
[11:01:16.444]             seq.int <- base::seq.int
[11:01:16.444]             signalCondition <- base::signalCondition
[11:01:16.444]             sys.calls <- base::sys.calls
[11:01:16.444]             `[[` <- base::`[[`
[11:01:16.444]             `+` <- base::`+`
[11:01:16.444]             `<<-` <- base::`<<-`
[11:01:16.444]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.444]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.444]                   3L)]
[11:01:16.444]             }
[11:01:16.444]             function(cond) {
[11:01:16.444]                 is_error <- inherits(cond, "error")
[11:01:16.444]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.444]                   NULL)
[11:01:16.444]                 if (is_error) {
[11:01:16.444]                   sessionInformation <- function() {
[11:01:16.444]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.444]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.444]                       search = base::search(), system = base::Sys.info())
[11:01:16.444]                   }
[11:01:16.444]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.444]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.444]                     cond$call), session = sessionInformation(), 
[11:01:16.444]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.444]                   signalCondition(cond)
[11:01:16.444]                 }
[11:01:16.444]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.444]                 "immediateCondition"))) {
[11:01:16.444]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.444]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.444]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.444]                   if (TRUE && !signal) {
[11:01:16.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.444]                     {
[11:01:16.444]                       inherits <- base::inherits
[11:01:16.444]                       invokeRestart <- base::invokeRestart
[11:01:16.444]                       is.null <- base::is.null
[11:01:16.444]                       muffled <- FALSE
[11:01:16.444]                       if (inherits(cond, "message")) {
[11:01:16.444]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.444]                         if (muffled) 
[11:01:16.444]                           invokeRestart("muffleMessage")
[11:01:16.444]                       }
[11:01:16.444]                       else if (inherits(cond, "warning")) {
[11:01:16.444]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.444]                         if (muffled) 
[11:01:16.444]                           invokeRestart("muffleWarning")
[11:01:16.444]                       }
[11:01:16.444]                       else if (inherits(cond, "condition")) {
[11:01:16.444]                         if (!is.null(pattern)) {
[11:01:16.444]                           computeRestarts <- base::computeRestarts
[11:01:16.444]                           grepl <- base::grepl
[11:01:16.444]                           restarts <- computeRestarts(cond)
[11:01:16.444]                           for (restart in restarts) {
[11:01:16.444]                             name <- restart$name
[11:01:16.444]                             if (is.null(name)) 
[11:01:16.444]                               next
[11:01:16.444]                             if (!grepl(pattern, name)) 
[11:01:16.444]                               next
[11:01:16.444]                             invokeRestart(restart)
[11:01:16.444]                             muffled <- TRUE
[11:01:16.444]                             break
[11:01:16.444]                           }
[11:01:16.444]                         }
[11:01:16.444]                       }
[11:01:16.444]                       invisible(muffled)
[11:01:16.444]                     }
[11:01:16.444]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.444]                   }
[11:01:16.444]                 }
[11:01:16.444]                 else {
[11:01:16.444]                   if (TRUE) {
[11:01:16.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.444]                     {
[11:01:16.444]                       inherits <- base::inherits
[11:01:16.444]                       invokeRestart <- base::invokeRestart
[11:01:16.444]                       is.null <- base::is.null
[11:01:16.444]                       muffled <- FALSE
[11:01:16.444]                       if (inherits(cond, "message")) {
[11:01:16.444]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.444]                         if (muffled) 
[11:01:16.444]                           invokeRestart("muffleMessage")
[11:01:16.444]                       }
[11:01:16.444]                       else if (inherits(cond, "warning")) {
[11:01:16.444]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.444]                         if (muffled) 
[11:01:16.444]                           invokeRestart("muffleWarning")
[11:01:16.444]                       }
[11:01:16.444]                       else if (inherits(cond, "condition")) {
[11:01:16.444]                         if (!is.null(pattern)) {
[11:01:16.444]                           computeRestarts <- base::computeRestarts
[11:01:16.444]                           grepl <- base::grepl
[11:01:16.444]                           restarts <- computeRestarts(cond)
[11:01:16.444]                           for (restart in restarts) {
[11:01:16.444]                             name <- restart$name
[11:01:16.444]                             if (is.null(name)) 
[11:01:16.444]                               next
[11:01:16.444]                             if (!grepl(pattern, name)) 
[11:01:16.444]                               next
[11:01:16.444]                             invokeRestart(restart)
[11:01:16.444]                             muffled <- TRUE
[11:01:16.444]                             break
[11:01:16.444]                           }
[11:01:16.444]                         }
[11:01:16.444]                       }
[11:01:16.444]                       invisible(muffled)
[11:01:16.444]                     }
[11:01:16.444]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.444]                   }
[11:01:16.444]                 }
[11:01:16.444]             }
[11:01:16.444]         }))
[11:01:16.444]     }, error = function(ex) {
[11:01:16.444]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.444]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.444]                 ...future.rng), started = ...future.startTime, 
[11:01:16.444]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.444]             version = "1.8"), class = "FutureResult")
[11:01:16.444]     }, finally = {
[11:01:16.444]         if (!identical(...future.workdir, getwd())) 
[11:01:16.444]             setwd(...future.workdir)
[11:01:16.444]         {
[11:01:16.444]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.444]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.444]             }
[11:01:16.444]             base::options(...future.oldOptions)
[11:01:16.444]             if (.Platform$OS.type == "windows") {
[11:01:16.444]                 old_names <- names(...future.oldEnvVars)
[11:01:16.444]                 envs <- base::Sys.getenv()
[11:01:16.444]                 names <- names(envs)
[11:01:16.444]                 common <- intersect(names, old_names)
[11:01:16.444]                 added <- setdiff(names, old_names)
[11:01:16.444]                 removed <- setdiff(old_names, names)
[11:01:16.444]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.444]                   envs[common]]
[11:01:16.444]                 NAMES <- toupper(changed)
[11:01:16.444]                 args <- list()
[11:01:16.444]                 for (kk in seq_along(NAMES)) {
[11:01:16.444]                   name <- changed[[kk]]
[11:01:16.444]                   NAME <- NAMES[[kk]]
[11:01:16.444]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.444]                     next
[11:01:16.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.444]                 }
[11:01:16.444]                 NAMES <- toupper(added)
[11:01:16.444]                 for (kk in seq_along(NAMES)) {
[11:01:16.444]                   name <- added[[kk]]
[11:01:16.444]                   NAME <- NAMES[[kk]]
[11:01:16.444]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.444]                     next
[11:01:16.444]                   args[[name]] <- ""
[11:01:16.444]                 }
[11:01:16.444]                 NAMES <- toupper(removed)
[11:01:16.444]                 for (kk in seq_along(NAMES)) {
[11:01:16.444]                   name <- removed[[kk]]
[11:01:16.444]                   NAME <- NAMES[[kk]]
[11:01:16.444]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.444]                     next
[11:01:16.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.444]                 }
[11:01:16.444]                 if (length(args) > 0) 
[11:01:16.444]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.444]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.444]             }
[11:01:16.444]             else {
[11:01:16.444]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.444]             }
[11:01:16.444]             {
[11:01:16.444]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.444]                   0L) {
[11:01:16.444]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.444]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.444]                   base::options(opts)
[11:01:16.444]                 }
[11:01:16.444]                 {
[11:01:16.444]                   {
[11:01:16.444]                     NULL
[11:01:16.444]                     RNGkind("Mersenne-Twister")
[11:01:16.444]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:16.444]                       inherits = FALSE)
[11:01:16.444]                   }
[11:01:16.444]                   options(future.plan = NULL)
[11:01:16.444]                   if (is.na(NA_character_)) 
[11:01:16.444]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.444]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.444]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.444]                     .init = FALSE)
[11:01:16.444]                 }
[11:01:16.444]             }
[11:01:16.444]         }
[11:01:16.444]     })
[11:01:16.444]     if (TRUE) {
[11:01:16.444]         base::sink(type = "output", split = FALSE)
[11:01:16.444]         if (TRUE) {
[11:01:16.444]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.444]         }
[11:01:16.444]         else {
[11:01:16.444]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.444]         }
[11:01:16.444]         base::close(...future.stdout)
[11:01:16.444]         ...future.stdout <- NULL
[11:01:16.444]     }
[11:01:16.444]     ...future.result$conditions <- ...future.conditions
[11:01:16.444]     ...future.result$finished <- base::Sys.time()
[11:01:16.444]     ...future.result
[11:01:16.444] }
[11:01:16.446] plan(): Setting new future strategy stack:
[11:01:16.446] List of future strategies:
[11:01:16.446] 1. sequential:
[11:01:16.446]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.446]    - tweaked: FALSE
[11:01:16.446]    - call: NULL
[11:01:16.446] plan(): nbrOfWorkers() = 1
[11:01:16.447] plan(): Setting new future strategy stack:
[11:01:16.447] List of future strategies:
[11:01:16.447] 1. sequential:
[11:01:16.447]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.447]    - tweaked: FALSE
[11:01:16.447]    - call: plan(strategy)
[11:01:16.448] plan(): nbrOfWorkers() = 1
[11:01:16.448] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.449] getGlobalsAndPackages() ...
[11:01:16.449] Searching for globals...
[11:01:16.450] 
[11:01:16.450] Searching for globals ... DONE
[11:01:16.450] - globals: [0] <none>
[11:01:16.450] getGlobalsAndPackages() ... DONE
[11:01:16.450] run() for ‘Future’ ...
[11:01:16.450] - state: ‘created’
[11:01:16.450] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:16.451] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.451] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:16.451]   - Field: ‘label’
[11:01:16.451]   - Field: ‘local’
[11:01:16.451]   - Field: ‘owner’
[11:01:16.451]   - Field: ‘envir’
[11:01:16.451]   - Field: ‘packages’
[11:01:16.451]   - Field: ‘gc’
[11:01:16.451]   - Field: ‘conditions’
[11:01:16.451]   - Field: ‘expr’
[11:01:16.452]   - Field: ‘uuid’
[11:01:16.452]   - Field: ‘seed’
[11:01:16.452]   - Field: ‘version’
[11:01:16.452]   - Field: ‘result’
[11:01:16.452]   - Field: ‘asynchronous’
[11:01:16.452]   - Field: ‘calls’
[11:01:16.452]   - Field: ‘globals’
[11:01:16.452]   - Field: ‘stdout’
[11:01:16.452]   - Field: ‘earlySignal’
[11:01:16.452]   - Field: ‘lazy’
[11:01:16.452]   - Field: ‘state’
[11:01:16.452] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:16.453] - Launch lazy future ...
[11:01:16.453] Packages needed by the future expression (n = 0): <none>
[11:01:16.453] Packages needed by future strategies (n = 0): <none>
[11:01:16.453] {
[11:01:16.453]     {
[11:01:16.453]         {
[11:01:16.453]             ...future.startTime <- base::Sys.time()
[11:01:16.453]             {
[11:01:16.453]                 {
[11:01:16.453]                   {
[11:01:16.453]                     base::local({
[11:01:16.453]                       has_future <- base::requireNamespace("future", 
[11:01:16.453]                         quietly = TRUE)
[11:01:16.453]                       if (has_future) {
[11:01:16.453]                         ns <- base::getNamespace("future")
[11:01:16.453]                         version <- ns[[".package"]][["version"]]
[11:01:16.453]                         if (is.null(version)) 
[11:01:16.453]                           version <- utils::packageVersion("future")
[11:01:16.453]                       }
[11:01:16.453]                       else {
[11:01:16.453]                         version <- NULL
[11:01:16.453]                       }
[11:01:16.453]                       if (!has_future || version < "1.8.0") {
[11:01:16.453]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.453]                           "", base::R.version$version.string), 
[11:01:16.453]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:16.453]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.453]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.453]                             "release", "version")], collapse = " "), 
[11:01:16.453]                           hostname = base::Sys.info()[["nodename"]])
[11:01:16.453]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.453]                           info)
[11:01:16.453]                         info <- base::paste(info, collapse = "; ")
[11:01:16.453]                         if (!has_future) {
[11:01:16.453]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.453]                             info)
[11:01:16.453]                         }
[11:01:16.453]                         else {
[11:01:16.453]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.453]                             info, version)
[11:01:16.453]                         }
[11:01:16.453]                         base::stop(msg)
[11:01:16.453]                       }
[11:01:16.453]                     })
[11:01:16.453]                   }
[11:01:16.453]                   ...future.strategy.old <- future::plan("list")
[11:01:16.453]                   options(future.plan = NULL)
[11:01:16.453]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.453]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.453]                 }
[11:01:16.453]                 ...future.workdir <- getwd()
[11:01:16.453]             }
[11:01:16.453]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.453]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.453]         }
[11:01:16.453]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.453]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.453]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.453]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.453]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.453]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.453]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.453]             base::names(...future.oldOptions))
[11:01:16.453]     }
[11:01:16.453]     if (FALSE) {
[11:01:16.453]     }
[11:01:16.453]     else {
[11:01:16.453]         if (TRUE) {
[11:01:16.453]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.453]                 open = "w")
[11:01:16.453]         }
[11:01:16.453]         else {
[11:01:16.453]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.453]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.453]         }
[11:01:16.453]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.453]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.453]             base::sink(type = "output", split = FALSE)
[11:01:16.453]             base::close(...future.stdout)
[11:01:16.453]         }, add = TRUE)
[11:01:16.453]     }
[11:01:16.453]     ...future.frame <- base::sys.nframe()
[11:01:16.453]     ...future.conditions <- base::list()
[11:01:16.453]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.453]     if (FALSE) {
[11:01:16.453]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.453]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.453]     }
[11:01:16.453]     ...future.result <- base::tryCatch({
[11:01:16.453]         base::withCallingHandlers({
[11:01:16.453]             ...future.value <- base::withVisible(base::local(42))
[11:01:16.453]             future::FutureResult(value = ...future.value$value, 
[11:01:16.453]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.453]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.453]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.453]                     ...future.globalenv.names))
[11:01:16.453]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.453]         }, condition = base::local({
[11:01:16.453]             c <- base::c
[11:01:16.453]             inherits <- base::inherits
[11:01:16.453]             invokeRestart <- base::invokeRestart
[11:01:16.453]             length <- base::length
[11:01:16.453]             list <- base::list
[11:01:16.453]             seq.int <- base::seq.int
[11:01:16.453]             signalCondition <- base::signalCondition
[11:01:16.453]             sys.calls <- base::sys.calls
[11:01:16.453]             `[[` <- base::`[[`
[11:01:16.453]             `+` <- base::`+`
[11:01:16.453]             `<<-` <- base::`<<-`
[11:01:16.453]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.453]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.453]                   3L)]
[11:01:16.453]             }
[11:01:16.453]             function(cond) {
[11:01:16.453]                 is_error <- inherits(cond, "error")
[11:01:16.453]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.453]                   NULL)
[11:01:16.453]                 if (is_error) {
[11:01:16.453]                   sessionInformation <- function() {
[11:01:16.453]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.453]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.453]                       search = base::search(), system = base::Sys.info())
[11:01:16.453]                   }
[11:01:16.453]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.453]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.453]                     cond$call), session = sessionInformation(), 
[11:01:16.453]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.453]                   signalCondition(cond)
[11:01:16.453]                 }
[11:01:16.453]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.453]                 "immediateCondition"))) {
[11:01:16.453]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.453]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.453]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.453]                   if (TRUE && !signal) {
[11:01:16.453]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.453]                     {
[11:01:16.453]                       inherits <- base::inherits
[11:01:16.453]                       invokeRestart <- base::invokeRestart
[11:01:16.453]                       is.null <- base::is.null
[11:01:16.453]                       muffled <- FALSE
[11:01:16.453]                       if (inherits(cond, "message")) {
[11:01:16.453]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.453]                         if (muffled) 
[11:01:16.453]                           invokeRestart("muffleMessage")
[11:01:16.453]                       }
[11:01:16.453]                       else if (inherits(cond, "warning")) {
[11:01:16.453]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.453]                         if (muffled) 
[11:01:16.453]                           invokeRestart("muffleWarning")
[11:01:16.453]                       }
[11:01:16.453]                       else if (inherits(cond, "condition")) {
[11:01:16.453]                         if (!is.null(pattern)) {
[11:01:16.453]                           computeRestarts <- base::computeRestarts
[11:01:16.453]                           grepl <- base::grepl
[11:01:16.453]                           restarts <- computeRestarts(cond)
[11:01:16.453]                           for (restart in restarts) {
[11:01:16.453]                             name <- restart$name
[11:01:16.453]                             if (is.null(name)) 
[11:01:16.453]                               next
[11:01:16.453]                             if (!grepl(pattern, name)) 
[11:01:16.453]                               next
[11:01:16.453]                             invokeRestart(restart)
[11:01:16.453]                             muffled <- TRUE
[11:01:16.453]                             break
[11:01:16.453]                           }
[11:01:16.453]                         }
[11:01:16.453]                       }
[11:01:16.453]                       invisible(muffled)
[11:01:16.453]                     }
[11:01:16.453]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.453]                   }
[11:01:16.453]                 }
[11:01:16.453]                 else {
[11:01:16.453]                   if (TRUE) {
[11:01:16.453]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.453]                     {
[11:01:16.453]                       inherits <- base::inherits
[11:01:16.453]                       invokeRestart <- base::invokeRestart
[11:01:16.453]                       is.null <- base::is.null
[11:01:16.453]                       muffled <- FALSE
[11:01:16.453]                       if (inherits(cond, "message")) {
[11:01:16.453]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.453]                         if (muffled) 
[11:01:16.453]                           invokeRestart("muffleMessage")
[11:01:16.453]                       }
[11:01:16.453]                       else if (inherits(cond, "warning")) {
[11:01:16.453]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.453]                         if (muffled) 
[11:01:16.453]                           invokeRestart("muffleWarning")
[11:01:16.453]                       }
[11:01:16.453]                       else if (inherits(cond, "condition")) {
[11:01:16.453]                         if (!is.null(pattern)) {
[11:01:16.453]                           computeRestarts <- base::computeRestarts
[11:01:16.453]                           grepl <- base::grepl
[11:01:16.453]                           restarts <- computeRestarts(cond)
[11:01:16.453]                           for (restart in restarts) {
[11:01:16.453]                             name <- restart$name
[11:01:16.453]                             if (is.null(name)) 
[11:01:16.453]                               next
[11:01:16.453]                             if (!grepl(pattern, name)) 
[11:01:16.453]                               next
[11:01:16.453]                             invokeRestart(restart)
[11:01:16.453]                             muffled <- TRUE
[11:01:16.453]                             break
[11:01:16.453]                           }
[11:01:16.453]                         }
[11:01:16.453]                       }
[11:01:16.453]                       invisible(muffled)
[11:01:16.453]                     }
[11:01:16.453]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.453]                   }
[11:01:16.453]                 }
[11:01:16.453]             }
[11:01:16.453]         }))
[11:01:16.453]     }, error = function(ex) {
[11:01:16.453]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.453]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.453]                 ...future.rng), started = ...future.startTime, 
[11:01:16.453]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.453]             version = "1.8"), class = "FutureResult")
[11:01:16.453]     }, finally = {
[11:01:16.453]         if (!identical(...future.workdir, getwd())) 
[11:01:16.453]             setwd(...future.workdir)
[11:01:16.453]         {
[11:01:16.453]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.453]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.453]             }
[11:01:16.453]             base::options(...future.oldOptions)
[11:01:16.453]             if (.Platform$OS.type == "windows") {
[11:01:16.453]                 old_names <- names(...future.oldEnvVars)
[11:01:16.453]                 envs <- base::Sys.getenv()
[11:01:16.453]                 names <- names(envs)
[11:01:16.453]                 common <- intersect(names, old_names)
[11:01:16.453]                 added <- setdiff(names, old_names)
[11:01:16.453]                 removed <- setdiff(old_names, names)
[11:01:16.453]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.453]                   envs[common]]
[11:01:16.453]                 NAMES <- toupper(changed)
[11:01:16.453]                 args <- list()
[11:01:16.453]                 for (kk in seq_along(NAMES)) {
[11:01:16.453]                   name <- changed[[kk]]
[11:01:16.453]                   NAME <- NAMES[[kk]]
[11:01:16.453]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.453]                     next
[11:01:16.453]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.453]                 }
[11:01:16.453]                 NAMES <- toupper(added)
[11:01:16.453]                 for (kk in seq_along(NAMES)) {
[11:01:16.453]                   name <- added[[kk]]
[11:01:16.453]                   NAME <- NAMES[[kk]]
[11:01:16.453]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.453]                     next
[11:01:16.453]                   args[[name]] <- ""
[11:01:16.453]                 }
[11:01:16.453]                 NAMES <- toupper(removed)
[11:01:16.453]                 for (kk in seq_along(NAMES)) {
[11:01:16.453]                   name <- removed[[kk]]
[11:01:16.453]                   NAME <- NAMES[[kk]]
[11:01:16.453]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.453]                     next
[11:01:16.453]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.453]                 }
[11:01:16.453]                 if (length(args) > 0) 
[11:01:16.453]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.453]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.453]             }
[11:01:16.453]             else {
[11:01:16.453]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.453]             }
[11:01:16.453]             {
[11:01:16.453]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.453]                   0L) {
[11:01:16.453]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.453]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.453]                   base::options(opts)
[11:01:16.453]                 }
[11:01:16.453]                 {
[11:01:16.453]                   {
[11:01:16.453]                     NULL
[11:01:16.453]                     RNGkind("Mersenne-Twister")
[11:01:16.453]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:16.453]                       inherits = FALSE)
[11:01:16.453]                   }
[11:01:16.453]                   options(future.plan = NULL)
[11:01:16.453]                   if (is.na(NA_character_)) 
[11:01:16.453]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.453]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.453]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.453]                     .init = FALSE)
[11:01:16.453]                 }
[11:01:16.453]             }
[11:01:16.453]         }
[11:01:16.453]     })
[11:01:16.453]     if (TRUE) {
[11:01:16.453]         base::sink(type = "output", split = FALSE)
[11:01:16.453]         if (TRUE) {
[11:01:16.453]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.453]         }
[11:01:16.453]         else {
[11:01:16.453]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.453]         }
[11:01:16.453]         base::close(...future.stdout)
[11:01:16.453]         ...future.stdout <- NULL
[11:01:16.453]     }
[11:01:16.453]     ...future.result$conditions <- ...future.conditions
[11:01:16.453]     ...future.result$finished <- base::Sys.time()
[11:01:16.453]     ...future.result
[11:01:16.453] }
[11:01:16.455] plan(): Setting new future strategy stack:
[11:01:16.455] List of future strategies:
[11:01:16.455] 1. sequential:
[11:01:16.455]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.455]    - tweaked: FALSE
[11:01:16.455]    - call: NULL
[11:01:16.455] plan(): nbrOfWorkers() = 1
[11:01:16.456] plan(): Setting new future strategy stack:
[11:01:16.456] List of future strategies:
[11:01:16.456] 1. sequential:
[11:01:16.456]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.456]    - tweaked: FALSE
[11:01:16.456]    - call: plan(strategy)
[11:01:16.457] plan(): nbrOfWorkers() = 1
[11:01:16.457] SequentialFuture started (and completed)
[11:01:16.457] - Launch lazy future ... done
[11:01:16.457] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.458] getGlobalsAndPackages() ...
[11:01:16.458] Searching for globals...
[11:01:16.459] - globals found: [1] ‘{’
[11:01:16.459] Searching for globals ... DONE
[11:01:16.460] Resolving globals: FALSE
[11:01:16.460] 
[11:01:16.460] 
[11:01:16.460] getGlobalsAndPackages() ... DONE
[11:01:16.460] run() for ‘Future’ ...
[11:01:16.460] - state: ‘created’
[11:01:16.461] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:16.461] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.461] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:16.461]   - Field: ‘label’
[11:01:16.461]   - Field: ‘local’
[11:01:16.461]   - Field: ‘owner’
[11:01:16.461]   - Field: ‘envir’
[11:01:16.461]   - Field: ‘packages’
[11:01:16.462]   - Field: ‘gc’
[11:01:16.462]   - Field: ‘conditions’
[11:01:16.462]   - Field: ‘expr’
[11:01:16.462]   - Field: ‘uuid’
[11:01:16.462]   - Field: ‘seed’
[11:01:16.462]   - Field: ‘version’
[11:01:16.462]   - Field: ‘result’
[11:01:16.462]   - Field: ‘asynchronous’
[11:01:16.462]   - Field: ‘calls’
[11:01:16.462]   - Field: ‘globals’
[11:01:16.462]   - Field: ‘stdout’
[11:01:16.462]   - Field: ‘earlySignal’
[11:01:16.463]   - Field: ‘lazy’
[11:01:16.463]   - Field: ‘state’
[11:01:16.463] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:16.463] - Launch lazy future ...
[11:01:16.463] Packages needed by the future expression (n = 0): <none>
[11:01:16.463] Packages needed by future strategies (n = 0): <none>
[11:01:16.463] {
[11:01:16.463]     {
[11:01:16.463]         {
[11:01:16.463]             ...future.startTime <- base::Sys.time()
[11:01:16.463]             {
[11:01:16.463]                 {
[11:01:16.463]                   {
[11:01:16.463]                     base::local({
[11:01:16.463]                       has_future <- base::requireNamespace("future", 
[11:01:16.463]                         quietly = TRUE)
[11:01:16.463]                       if (has_future) {
[11:01:16.463]                         ns <- base::getNamespace("future")
[11:01:16.463]                         version <- ns[[".package"]][["version"]]
[11:01:16.463]                         if (is.null(version)) 
[11:01:16.463]                           version <- utils::packageVersion("future")
[11:01:16.463]                       }
[11:01:16.463]                       else {
[11:01:16.463]                         version <- NULL
[11:01:16.463]                       }
[11:01:16.463]                       if (!has_future || version < "1.8.0") {
[11:01:16.463]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.463]                           "", base::R.version$version.string), 
[11:01:16.463]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:16.463]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.463]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.463]                             "release", "version")], collapse = " "), 
[11:01:16.463]                           hostname = base::Sys.info()[["nodename"]])
[11:01:16.463]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.463]                           info)
[11:01:16.463]                         info <- base::paste(info, collapse = "; ")
[11:01:16.463]                         if (!has_future) {
[11:01:16.463]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.463]                             info)
[11:01:16.463]                         }
[11:01:16.463]                         else {
[11:01:16.463]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.463]                             info, version)
[11:01:16.463]                         }
[11:01:16.463]                         base::stop(msg)
[11:01:16.463]                       }
[11:01:16.463]                     })
[11:01:16.463]                   }
[11:01:16.463]                   ...future.strategy.old <- future::plan("list")
[11:01:16.463]                   options(future.plan = NULL)
[11:01:16.463]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.463]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.463]                 }
[11:01:16.463]                 ...future.workdir <- getwd()
[11:01:16.463]             }
[11:01:16.463]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.463]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.463]         }
[11:01:16.463]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.463]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.463]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.463]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.463]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.463]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.463]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.463]             base::names(...future.oldOptions))
[11:01:16.463]     }
[11:01:16.463]     if (FALSE) {
[11:01:16.463]     }
[11:01:16.463]     else {
[11:01:16.463]         if (TRUE) {
[11:01:16.463]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.463]                 open = "w")
[11:01:16.463]         }
[11:01:16.463]         else {
[11:01:16.463]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.463]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.463]         }
[11:01:16.463]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.463]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.463]             base::sink(type = "output", split = FALSE)
[11:01:16.463]             base::close(...future.stdout)
[11:01:16.463]         }, add = TRUE)
[11:01:16.463]     }
[11:01:16.463]     ...future.frame <- base::sys.nframe()
[11:01:16.463]     ...future.conditions <- base::list()
[11:01:16.463]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.463]     if (FALSE) {
[11:01:16.463]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.463]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.463]     }
[11:01:16.463]     ...future.result <- base::tryCatch({
[11:01:16.463]         base::withCallingHandlers({
[11:01:16.463]             ...future.value <- base::withVisible(base::local({
[11:01:16.463]                 42
[11:01:16.463]             }))
[11:01:16.463]             future::FutureResult(value = ...future.value$value, 
[11:01:16.463]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.463]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.463]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.463]                     ...future.globalenv.names))
[11:01:16.463]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.463]         }, condition = base::local({
[11:01:16.463]             c <- base::c
[11:01:16.463]             inherits <- base::inherits
[11:01:16.463]             invokeRestart <- base::invokeRestart
[11:01:16.463]             length <- base::length
[11:01:16.463]             list <- base::list
[11:01:16.463]             seq.int <- base::seq.int
[11:01:16.463]             signalCondition <- base::signalCondition
[11:01:16.463]             sys.calls <- base::sys.calls
[11:01:16.463]             `[[` <- base::`[[`
[11:01:16.463]             `+` <- base::`+`
[11:01:16.463]             `<<-` <- base::`<<-`
[11:01:16.463]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.463]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.463]                   3L)]
[11:01:16.463]             }
[11:01:16.463]             function(cond) {
[11:01:16.463]                 is_error <- inherits(cond, "error")
[11:01:16.463]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.463]                   NULL)
[11:01:16.463]                 if (is_error) {
[11:01:16.463]                   sessionInformation <- function() {
[11:01:16.463]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.463]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.463]                       search = base::search(), system = base::Sys.info())
[11:01:16.463]                   }
[11:01:16.463]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.463]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.463]                     cond$call), session = sessionInformation(), 
[11:01:16.463]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.463]                   signalCondition(cond)
[11:01:16.463]                 }
[11:01:16.463]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.463]                 "immediateCondition"))) {
[11:01:16.463]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.463]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.463]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.463]                   if (TRUE && !signal) {
[11:01:16.463]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.463]                     {
[11:01:16.463]                       inherits <- base::inherits
[11:01:16.463]                       invokeRestart <- base::invokeRestart
[11:01:16.463]                       is.null <- base::is.null
[11:01:16.463]                       muffled <- FALSE
[11:01:16.463]                       if (inherits(cond, "message")) {
[11:01:16.463]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.463]                         if (muffled) 
[11:01:16.463]                           invokeRestart("muffleMessage")
[11:01:16.463]                       }
[11:01:16.463]                       else if (inherits(cond, "warning")) {
[11:01:16.463]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.463]                         if (muffled) 
[11:01:16.463]                           invokeRestart("muffleWarning")
[11:01:16.463]                       }
[11:01:16.463]                       else if (inherits(cond, "condition")) {
[11:01:16.463]                         if (!is.null(pattern)) {
[11:01:16.463]                           computeRestarts <- base::computeRestarts
[11:01:16.463]                           grepl <- base::grepl
[11:01:16.463]                           restarts <- computeRestarts(cond)
[11:01:16.463]                           for (restart in restarts) {
[11:01:16.463]                             name <- restart$name
[11:01:16.463]                             if (is.null(name)) 
[11:01:16.463]                               next
[11:01:16.463]                             if (!grepl(pattern, name)) 
[11:01:16.463]                               next
[11:01:16.463]                             invokeRestart(restart)
[11:01:16.463]                             muffled <- TRUE
[11:01:16.463]                             break
[11:01:16.463]                           }
[11:01:16.463]                         }
[11:01:16.463]                       }
[11:01:16.463]                       invisible(muffled)
[11:01:16.463]                     }
[11:01:16.463]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.463]                   }
[11:01:16.463]                 }
[11:01:16.463]                 else {
[11:01:16.463]                   if (TRUE) {
[11:01:16.463]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.463]                     {
[11:01:16.463]                       inherits <- base::inherits
[11:01:16.463]                       invokeRestart <- base::invokeRestart
[11:01:16.463]                       is.null <- base::is.null
[11:01:16.463]                       muffled <- FALSE
[11:01:16.463]                       if (inherits(cond, "message")) {
[11:01:16.463]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.463]                         if (muffled) 
[11:01:16.463]                           invokeRestart("muffleMessage")
[11:01:16.463]                       }
[11:01:16.463]                       else if (inherits(cond, "warning")) {
[11:01:16.463]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.463]                         if (muffled) 
[11:01:16.463]                           invokeRestart("muffleWarning")
[11:01:16.463]                       }
[11:01:16.463]                       else if (inherits(cond, "condition")) {
[11:01:16.463]                         if (!is.null(pattern)) {
[11:01:16.463]                           computeRestarts <- base::computeRestarts
[11:01:16.463]                           grepl <- base::grepl
[11:01:16.463]                           restarts <- computeRestarts(cond)
[11:01:16.463]                           for (restart in restarts) {
[11:01:16.463]                             name <- restart$name
[11:01:16.463]                             if (is.null(name)) 
[11:01:16.463]                               next
[11:01:16.463]                             if (!grepl(pattern, name)) 
[11:01:16.463]                               next
[11:01:16.463]                             invokeRestart(restart)
[11:01:16.463]                             muffled <- TRUE
[11:01:16.463]                             break
[11:01:16.463]                           }
[11:01:16.463]                         }
[11:01:16.463]                       }
[11:01:16.463]                       invisible(muffled)
[11:01:16.463]                     }
[11:01:16.463]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.463]                   }
[11:01:16.463]                 }
[11:01:16.463]             }
[11:01:16.463]         }))
[11:01:16.463]     }, error = function(ex) {
[11:01:16.463]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.463]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.463]                 ...future.rng), started = ...future.startTime, 
[11:01:16.463]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.463]             version = "1.8"), class = "FutureResult")
[11:01:16.463]     }, finally = {
[11:01:16.463]         if (!identical(...future.workdir, getwd())) 
[11:01:16.463]             setwd(...future.workdir)
[11:01:16.463]         {
[11:01:16.463]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.463]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.463]             }
[11:01:16.463]             base::options(...future.oldOptions)
[11:01:16.463]             if (.Platform$OS.type == "windows") {
[11:01:16.463]                 old_names <- names(...future.oldEnvVars)
[11:01:16.463]                 envs <- base::Sys.getenv()
[11:01:16.463]                 names <- names(envs)
[11:01:16.463]                 common <- intersect(names, old_names)
[11:01:16.463]                 added <- setdiff(names, old_names)
[11:01:16.463]                 removed <- setdiff(old_names, names)
[11:01:16.463]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.463]                   envs[common]]
[11:01:16.463]                 NAMES <- toupper(changed)
[11:01:16.463]                 args <- list()
[11:01:16.463]                 for (kk in seq_along(NAMES)) {
[11:01:16.463]                   name <- changed[[kk]]
[11:01:16.463]                   NAME <- NAMES[[kk]]
[11:01:16.463]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.463]                     next
[11:01:16.463]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.463]                 }
[11:01:16.463]                 NAMES <- toupper(added)
[11:01:16.463]                 for (kk in seq_along(NAMES)) {
[11:01:16.463]                   name <- added[[kk]]
[11:01:16.463]                   NAME <- NAMES[[kk]]
[11:01:16.463]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.463]                     next
[11:01:16.463]                   args[[name]] <- ""
[11:01:16.463]                 }
[11:01:16.463]                 NAMES <- toupper(removed)
[11:01:16.463]                 for (kk in seq_along(NAMES)) {
[11:01:16.463]                   name <- removed[[kk]]
[11:01:16.463]                   NAME <- NAMES[[kk]]
[11:01:16.463]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.463]                     next
[11:01:16.463]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.463]                 }
[11:01:16.463]                 if (length(args) > 0) 
[11:01:16.463]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.463]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.463]             }
[11:01:16.463]             else {
[11:01:16.463]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.463]             }
[11:01:16.463]             {
[11:01:16.463]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.463]                   0L) {
[11:01:16.463]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.463]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.463]                   base::options(opts)
[11:01:16.463]                 }
[11:01:16.463]                 {
[11:01:16.463]                   {
[11:01:16.463]                     NULL
[11:01:16.463]                     RNGkind("Mersenne-Twister")
[11:01:16.463]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:16.463]                       inherits = FALSE)
[11:01:16.463]                   }
[11:01:16.463]                   options(future.plan = NULL)
[11:01:16.463]                   if (is.na(NA_character_)) 
[11:01:16.463]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.463]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.463]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.463]                     .init = FALSE)
[11:01:16.463]                 }
[11:01:16.463]             }
[11:01:16.463]         }
[11:01:16.463]     })
[11:01:16.463]     if (TRUE) {
[11:01:16.463]         base::sink(type = "output", split = FALSE)
[11:01:16.463]         if (TRUE) {
[11:01:16.463]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.463]         }
[11:01:16.463]         else {
[11:01:16.463]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.463]         }
[11:01:16.463]         base::close(...future.stdout)
[11:01:16.463]         ...future.stdout <- NULL
[11:01:16.463]     }
[11:01:16.463]     ...future.result$conditions <- ...future.conditions
[11:01:16.463]     ...future.result$finished <- base::Sys.time()
[11:01:16.463]     ...future.result
[11:01:16.463] }
[11:01:16.465] plan(): Setting new future strategy stack:
[11:01:16.465] List of future strategies:
[11:01:16.465] 1. sequential:
[11:01:16.465]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.465]    - tweaked: FALSE
[11:01:16.465]    - call: NULL
[11:01:16.466] plan(): nbrOfWorkers() = 1
[11:01:16.466] plan(): Setting new future strategy stack:
[11:01:16.467] List of future strategies:
[11:01:16.467] 1. sequential:
[11:01:16.467]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.467]    - tweaked: FALSE
[11:01:16.467]    - call: plan(strategy)
[11:01:16.467] plan(): nbrOfWorkers() = 1
[11:01:16.467] SequentialFuture started (and completed)
[11:01:16.467] - Launch lazy future ... done
[11:01:16.467] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.468] getGlobalsAndPackages() ...
[11:01:16.468] Searching for globals...
[11:01:16.468] 
[11:01:16.468] Searching for globals ... DONE
[11:01:16.469] - globals: [0] <none>
[11:01:16.469] getGlobalsAndPackages() ... DONE
[11:01:16.469] Packages needed by the future expression (n = 0): <none>
[11:01:16.469] Packages needed by future strategies (n = 0): <none>
[11:01:16.469] {
[11:01:16.469]     {
[11:01:16.469]         {
[11:01:16.469]             ...future.startTime <- base::Sys.time()
[11:01:16.469]             {
[11:01:16.469]                 {
[11:01:16.469]                   {
[11:01:16.469]                     base::local({
[11:01:16.469]                       has_future <- base::requireNamespace("future", 
[11:01:16.469]                         quietly = TRUE)
[11:01:16.469]                       if (has_future) {
[11:01:16.469]                         ns <- base::getNamespace("future")
[11:01:16.469]                         version <- ns[[".package"]][["version"]]
[11:01:16.469]                         if (is.null(version)) 
[11:01:16.469]                           version <- utils::packageVersion("future")
[11:01:16.469]                       }
[11:01:16.469]                       else {
[11:01:16.469]                         version <- NULL
[11:01:16.469]                       }
[11:01:16.469]                       if (!has_future || version < "1.8.0") {
[11:01:16.469]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.469]                           "", base::R.version$version.string), 
[11:01:16.469]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:16.469]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.469]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.469]                             "release", "version")], collapse = " "), 
[11:01:16.469]                           hostname = base::Sys.info()[["nodename"]])
[11:01:16.469]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.469]                           info)
[11:01:16.469]                         info <- base::paste(info, collapse = "; ")
[11:01:16.469]                         if (!has_future) {
[11:01:16.469]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.469]                             info)
[11:01:16.469]                         }
[11:01:16.469]                         else {
[11:01:16.469]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.469]                             info, version)
[11:01:16.469]                         }
[11:01:16.469]                         base::stop(msg)
[11:01:16.469]                       }
[11:01:16.469]                     })
[11:01:16.469]                   }
[11:01:16.469]                   ...future.strategy.old <- future::plan("list")
[11:01:16.469]                   options(future.plan = NULL)
[11:01:16.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.469]                 }
[11:01:16.469]                 ...future.workdir <- getwd()
[11:01:16.469]             }
[11:01:16.469]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.469]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.469]         }
[11:01:16.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.469]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.469]             base::names(...future.oldOptions))
[11:01:16.469]     }
[11:01:16.469]     if (FALSE) {
[11:01:16.469]     }
[11:01:16.469]     else {
[11:01:16.469]         if (TRUE) {
[11:01:16.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.469]                 open = "w")
[11:01:16.469]         }
[11:01:16.469]         else {
[11:01:16.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.469]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.469]         }
[11:01:16.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.469]             base::sink(type = "output", split = FALSE)
[11:01:16.469]             base::close(...future.stdout)
[11:01:16.469]         }, add = TRUE)
[11:01:16.469]     }
[11:01:16.469]     ...future.frame <- base::sys.nframe()
[11:01:16.469]     ...future.conditions <- base::list()
[11:01:16.469]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.469]     if (FALSE) {
[11:01:16.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.469]     }
[11:01:16.469]     ...future.result <- base::tryCatch({
[11:01:16.469]         base::withCallingHandlers({
[11:01:16.469]             ...future.value <- base::withVisible(base::local(42))
[11:01:16.469]             future::FutureResult(value = ...future.value$value, 
[11:01:16.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.469]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.469]                     ...future.globalenv.names))
[11:01:16.469]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.469]         }, condition = base::local({
[11:01:16.469]             c <- base::c
[11:01:16.469]             inherits <- base::inherits
[11:01:16.469]             invokeRestart <- base::invokeRestart
[11:01:16.469]             length <- base::length
[11:01:16.469]             list <- base::list
[11:01:16.469]             seq.int <- base::seq.int
[11:01:16.469]             signalCondition <- base::signalCondition
[11:01:16.469]             sys.calls <- base::sys.calls
[11:01:16.469]             `[[` <- base::`[[`
[11:01:16.469]             `+` <- base::`+`
[11:01:16.469]             `<<-` <- base::`<<-`
[11:01:16.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.469]                   3L)]
[11:01:16.469]             }
[11:01:16.469]             function(cond) {
[11:01:16.469]                 is_error <- inherits(cond, "error")
[11:01:16.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.469]                   NULL)
[11:01:16.469]                 if (is_error) {
[11:01:16.469]                   sessionInformation <- function() {
[11:01:16.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.469]                       search = base::search(), system = base::Sys.info())
[11:01:16.469]                   }
[11:01:16.469]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.469]                     cond$call), session = sessionInformation(), 
[11:01:16.469]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.469]                   signalCondition(cond)
[11:01:16.469]                 }
[11:01:16.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.469]                 "immediateCondition"))) {
[11:01:16.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.469]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.469]                   if (TRUE && !signal) {
[11:01:16.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.469]                     {
[11:01:16.469]                       inherits <- base::inherits
[11:01:16.469]                       invokeRestart <- base::invokeRestart
[11:01:16.469]                       is.null <- base::is.null
[11:01:16.469]                       muffled <- FALSE
[11:01:16.469]                       if (inherits(cond, "message")) {
[11:01:16.469]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.469]                         if (muffled) 
[11:01:16.469]                           invokeRestart("muffleMessage")
[11:01:16.469]                       }
[11:01:16.469]                       else if (inherits(cond, "warning")) {
[11:01:16.469]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.469]                         if (muffled) 
[11:01:16.469]                           invokeRestart("muffleWarning")
[11:01:16.469]                       }
[11:01:16.469]                       else if (inherits(cond, "condition")) {
[11:01:16.469]                         if (!is.null(pattern)) {
[11:01:16.469]                           computeRestarts <- base::computeRestarts
[11:01:16.469]                           grepl <- base::grepl
[11:01:16.469]                           restarts <- computeRestarts(cond)
[11:01:16.469]                           for (restart in restarts) {
[11:01:16.469]                             name <- restart$name
[11:01:16.469]                             if (is.null(name)) 
[11:01:16.469]                               next
[11:01:16.469]                             if (!grepl(pattern, name)) 
[11:01:16.469]                               next
[11:01:16.469]                             invokeRestart(restart)
[11:01:16.469]                             muffled <- TRUE
[11:01:16.469]                             break
[11:01:16.469]                           }
[11:01:16.469]                         }
[11:01:16.469]                       }
[11:01:16.469]                       invisible(muffled)
[11:01:16.469]                     }
[11:01:16.469]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.469]                   }
[11:01:16.469]                 }
[11:01:16.469]                 else {
[11:01:16.469]                   if (TRUE) {
[11:01:16.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.469]                     {
[11:01:16.469]                       inherits <- base::inherits
[11:01:16.469]                       invokeRestart <- base::invokeRestart
[11:01:16.469]                       is.null <- base::is.null
[11:01:16.469]                       muffled <- FALSE
[11:01:16.469]                       if (inherits(cond, "message")) {
[11:01:16.469]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.469]                         if (muffled) 
[11:01:16.469]                           invokeRestart("muffleMessage")
[11:01:16.469]                       }
[11:01:16.469]                       else if (inherits(cond, "warning")) {
[11:01:16.469]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.469]                         if (muffled) 
[11:01:16.469]                           invokeRestart("muffleWarning")
[11:01:16.469]                       }
[11:01:16.469]                       else if (inherits(cond, "condition")) {
[11:01:16.469]                         if (!is.null(pattern)) {
[11:01:16.469]                           computeRestarts <- base::computeRestarts
[11:01:16.469]                           grepl <- base::grepl
[11:01:16.469]                           restarts <- computeRestarts(cond)
[11:01:16.469]                           for (restart in restarts) {
[11:01:16.469]                             name <- restart$name
[11:01:16.469]                             if (is.null(name)) 
[11:01:16.469]                               next
[11:01:16.469]                             if (!grepl(pattern, name)) 
[11:01:16.469]                               next
[11:01:16.469]                             invokeRestart(restart)
[11:01:16.469]                             muffled <- TRUE
[11:01:16.469]                             break
[11:01:16.469]                           }
[11:01:16.469]                         }
[11:01:16.469]                       }
[11:01:16.469]                       invisible(muffled)
[11:01:16.469]                     }
[11:01:16.469]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.469]                   }
[11:01:16.469]                 }
[11:01:16.469]             }
[11:01:16.469]         }))
[11:01:16.469]     }, error = function(ex) {
[11:01:16.469]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.469]                 ...future.rng), started = ...future.startTime, 
[11:01:16.469]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.469]             version = "1.8"), class = "FutureResult")
[11:01:16.469]     }, finally = {
[11:01:16.469]         if (!identical(...future.workdir, getwd())) 
[11:01:16.469]             setwd(...future.workdir)
[11:01:16.469]         {
[11:01:16.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.469]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.469]             }
[11:01:16.469]             base::options(...future.oldOptions)
[11:01:16.469]             if (.Platform$OS.type == "windows") {
[11:01:16.469]                 old_names <- names(...future.oldEnvVars)
[11:01:16.469]                 envs <- base::Sys.getenv()
[11:01:16.469]                 names <- names(envs)
[11:01:16.469]                 common <- intersect(names, old_names)
[11:01:16.469]                 added <- setdiff(names, old_names)
[11:01:16.469]                 removed <- setdiff(old_names, names)
[11:01:16.469]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.469]                   envs[common]]
[11:01:16.469]                 NAMES <- toupper(changed)
[11:01:16.469]                 args <- list()
[11:01:16.469]                 for (kk in seq_along(NAMES)) {
[11:01:16.469]                   name <- changed[[kk]]
[11:01:16.469]                   NAME <- NAMES[[kk]]
[11:01:16.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.469]                     next
[11:01:16.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.469]                 }
[11:01:16.469]                 NAMES <- toupper(added)
[11:01:16.469]                 for (kk in seq_along(NAMES)) {
[11:01:16.469]                   name <- added[[kk]]
[11:01:16.469]                   NAME <- NAMES[[kk]]
[11:01:16.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.469]                     next
[11:01:16.469]                   args[[name]] <- ""
[11:01:16.469]                 }
[11:01:16.469]                 NAMES <- toupper(removed)
[11:01:16.469]                 for (kk in seq_along(NAMES)) {
[11:01:16.469]                   name <- removed[[kk]]
[11:01:16.469]                   NAME <- NAMES[[kk]]
[11:01:16.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.469]                     next
[11:01:16.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.469]                 }
[11:01:16.469]                 if (length(args) > 0) 
[11:01:16.469]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.469]             }
[11:01:16.469]             else {
[11:01:16.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.469]             }
[11:01:16.469]             {
[11:01:16.469]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.469]                   0L) {
[11:01:16.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.469]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.469]                   base::options(opts)
[11:01:16.469]                 }
[11:01:16.469]                 {
[11:01:16.469]                   {
[11:01:16.469]                     NULL
[11:01:16.469]                     RNGkind("Mersenne-Twister")
[11:01:16.469]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:16.469]                       inherits = FALSE)
[11:01:16.469]                   }
[11:01:16.469]                   options(future.plan = NULL)
[11:01:16.469]                   if (is.na(NA_character_)) 
[11:01:16.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.469]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.469]                     .init = FALSE)
[11:01:16.469]                 }
[11:01:16.469]             }
[11:01:16.469]         }
[11:01:16.469]     })
[11:01:16.469]     if (TRUE) {
[11:01:16.469]         base::sink(type = "output", split = FALSE)
[11:01:16.469]         if (TRUE) {
[11:01:16.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.469]         }
[11:01:16.469]         else {
[11:01:16.469]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.469]         }
[11:01:16.469]         base::close(...future.stdout)
[11:01:16.469]         ...future.stdout <- NULL
[11:01:16.469]     }
[11:01:16.469]     ...future.result$conditions <- ...future.conditions
[11:01:16.469]     ...future.result$finished <- base::Sys.time()
[11:01:16.469]     ...future.result
[11:01:16.469] }
[11:01:16.471] plan(): Setting new future strategy stack:
[11:01:16.471] List of future strategies:
[11:01:16.471] 1. sequential:
[11:01:16.471]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.471]    - tweaked: FALSE
[11:01:16.471]    - call: NULL
[11:01:16.472] plan(): nbrOfWorkers() = 1
[11:01:16.472] plan(): Setting new future strategy stack:
[11:01:16.472] List of future strategies:
[11:01:16.472] 1. sequential:
[11:01:16.472]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.472]    - tweaked: FALSE
[11:01:16.472]    - call: plan(strategy)
[11:01:16.473] plan(): nbrOfWorkers() = 1
[11:01:16.475] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.476] getGlobalsAndPackages() ...
[11:01:16.476] Searching for globals...
[11:01:16.476] 
[11:01:16.476] Searching for globals ... DONE
[11:01:16.476] - globals: [0] <none>
[11:01:16.476] getGlobalsAndPackages() ... DONE
[11:01:16.476] run() for ‘Future’ ...
[11:01:16.477] - state: ‘created’
[11:01:16.477] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:16.477] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.477] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:16.477]   - Field: ‘label’
[11:01:16.477]   - Field: ‘local’
[11:01:16.477]   - Field: ‘owner’
[11:01:16.477]   - Field: ‘envir’
[11:01:16.477]   - Field: ‘packages’
[11:01:16.478]   - Field: ‘gc’
[11:01:16.478]   - Field: ‘conditions’
[11:01:16.478]   - Field: ‘expr’
[11:01:16.478]   - Field: ‘uuid’
[11:01:16.478]   - Field: ‘seed’
[11:01:16.478]   - Field: ‘version’
[11:01:16.478]   - Field: ‘result’
[11:01:16.478]   - Field: ‘asynchronous’
[11:01:16.478]   - Field: ‘calls’
[11:01:16.478]   - Field: ‘globals’
[11:01:16.478]   - Field: ‘stdout’
[11:01:16.478]   - Field: ‘earlySignal’
[11:01:16.479]   - Field: ‘lazy’
[11:01:16.479]   - Field: ‘state’
[11:01:16.479] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:16.479] - Launch lazy future ...
[11:01:16.479] Packages needed by the future expression (n = 0): <none>
[11:01:16.479] Packages needed by future strategies (n = 0): <none>
[11:01:16.479] {
[11:01:16.479]     {
[11:01:16.479]         {
[11:01:16.479]             ...future.startTime <- base::Sys.time()
[11:01:16.479]             {
[11:01:16.479]                 {
[11:01:16.479]                   {
[11:01:16.479]                     base::local({
[11:01:16.479]                       has_future <- base::requireNamespace("future", 
[11:01:16.479]                         quietly = TRUE)
[11:01:16.479]                       if (has_future) {
[11:01:16.479]                         ns <- base::getNamespace("future")
[11:01:16.479]                         version <- ns[[".package"]][["version"]]
[11:01:16.479]                         if (is.null(version)) 
[11:01:16.479]                           version <- utils::packageVersion("future")
[11:01:16.479]                       }
[11:01:16.479]                       else {
[11:01:16.479]                         version <- NULL
[11:01:16.479]                       }
[11:01:16.479]                       if (!has_future || version < "1.8.0") {
[11:01:16.479]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.479]                           "", base::R.version$version.string), 
[11:01:16.479]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:16.479]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.479]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.479]                             "release", "version")], collapse = " "), 
[11:01:16.479]                           hostname = base::Sys.info()[["nodename"]])
[11:01:16.479]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.479]                           info)
[11:01:16.479]                         info <- base::paste(info, collapse = "; ")
[11:01:16.479]                         if (!has_future) {
[11:01:16.479]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.479]                             info)
[11:01:16.479]                         }
[11:01:16.479]                         else {
[11:01:16.479]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.479]                             info, version)
[11:01:16.479]                         }
[11:01:16.479]                         base::stop(msg)
[11:01:16.479]                       }
[11:01:16.479]                     })
[11:01:16.479]                   }
[11:01:16.479]                   ...future.strategy.old <- future::plan("list")
[11:01:16.479]                   options(future.plan = NULL)
[11:01:16.479]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.479]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.479]                 }
[11:01:16.479]                 ...future.workdir <- getwd()
[11:01:16.479]             }
[11:01:16.479]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.479]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.479]         }
[11:01:16.479]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.479]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.479]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.479]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.479]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.479]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.479]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.479]             base::names(...future.oldOptions))
[11:01:16.479]     }
[11:01:16.479]     if (FALSE) {
[11:01:16.479]     }
[11:01:16.479]     else {
[11:01:16.479]         if (TRUE) {
[11:01:16.479]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.479]                 open = "w")
[11:01:16.479]         }
[11:01:16.479]         else {
[11:01:16.479]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.479]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.479]         }
[11:01:16.479]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.479]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.479]             base::sink(type = "output", split = FALSE)
[11:01:16.479]             base::close(...future.stdout)
[11:01:16.479]         }, add = TRUE)
[11:01:16.479]     }
[11:01:16.479]     ...future.frame <- base::sys.nframe()
[11:01:16.479]     ...future.conditions <- base::list()
[11:01:16.479]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.479]     if (FALSE) {
[11:01:16.479]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.479]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.479]     }
[11:01:16.479]     ...future.result <- base::tryCatch({
[11:01:16.479]         base::withCallingHandlers({
[11:01:16.479]             ...future.value <- base::withVisible(base::local(42))
[11:01:16.479]             future::FutureResult(value = ...future.value$value, 
[11:01:16.479]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.479]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.479]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.479]                     ...future.globalenv.names))
[11:01:16.479]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.479]         }, condition = base::local({
[11:01:16.479]             c <- base::c
[11:01:16.479]             inherits <- base::inherits
[11:01:16.479]             invokeRestart <- base::invokeRestart
[11:01:16.479]             length <- base::length
[11:01:16.479]             list <- base::list
[11:01:16.479]             seq.int <- base::seq.int
[11:01:16.479]             signalCondition <- base::signalCondition
[11:01:16.479]             sys.calls <- base::sys.calls
[11:01:16.479]             `[[` <- base::`[[`
[11:01:16.479]             `+` <- base::`+`
[11:01:16.479]             `<<-` <- base::`<<-`
[11:01:16.479]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.479]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.479]                   3L)]
[11:01:16.479]             }
[11:01:16.479]             function(cond) {
[11:01:16.479]                 is_error <- inherits(cond, "error")
[11:01:16.479]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.479]                   NULL)
[11:01:16.479]                 if (is_error) {
[11:01:16.479]                   sessionInformation <- function() {
[11:01:16.479]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.479]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.479]                       search = base::search(), system = base::Sys.info())
[11:01:16.479]                   }
[11:01:16.479]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.479]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.479]                     cond$call), session = sessionInformation(), 
[11:01:16.479]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.479]                   signalCondition(cond)
[11:01:16.479]                 }
[11:01:16.479]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.479]                 "immediateCondition"))) {
[11:01:16.479]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.479]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.479]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.479]                   if (TRUE && !signal) {
[11:01:16.479]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.479]                     {
[11:01:16.479]                       inherits <- base::inherits
[11:01:16.479]                       invokeRestart <- base::invokeRestart
[11:01:16.479]                       is.null <- base::is.null
[11:01:16.479]                       muffled <- FALSE
[11:01:16.479]                       if (inherits(cond, "message")) {
[11:01:16.479]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.479]                         if (muffled) 
[11:01:16.479]                           invokeRestart("muffleMessage")
[11:01:16.479]                       }
[11:01:16.479]                       else if (inherits(cond, "warning")) {
[11:01:16.479]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.479]                         if (muffled) 
[11:01:16.479]                           invokeRestart("muffleWarning")
[11:01:16.479]                       }
[11:01:16.479]                       else if (inherits(cond, "condition")) {
[11:01:16.479]                         if (!is.null(pattern)) {
[11:01:16.479]                           computeRestarts <- base::computeRestarts
[11:01:16.479]                           grepl <- base::grepl
[11:01:16.479]                           restarts <- computeRestarts(cond)
[11:01:16.479]                           for (restart in restarts) {
[11:01:16.479]                             name <- restart$name
[11:01:16.479]                             if (is.null(name)) 
[11:01:16.479]                               next
[11:01:16.479]                             if (!grepl(pattern, name)) 
[11:01:16.479]                               next
[11:01:16.479]                             invokeRestart(restart)
[11:01:16.479]                             muffled <- TRUE
[11:01:16.479]                             break
[11:01:16.479]                           }
[11:01:16.479]                         }
[11:01:16.479]                       }
[11:01:16.479]                       invisible(muffled)
[11:01:16.479]                     }
[11:01:16.479]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.479]                   }
[11:01:16.479]                 }
[11:01:16.479]                 else {
[11:01:16.479]                   if (TRUE) {
[11:01:16.479]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.479]                     {
[11:01:16.479]                       inherits <- base::inherits
[11:01:16.479]                       invokeRestart <- base::invokeRestart
[11:01:16.479]                       is.null <- base::is.null
[11:01:16.479]                       muffled <- FALSE
[11:01:16.479]                       if (inherits(cond, "message")) {
[11:01:16.479]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.479]                         if (muffled) 
[11:01:16.479]                           invokeRestart("muffleMessage")
[11:01:16.479]                       }
[11:01:16.479]                       else if (inherits(cond, "warning")) {
[11:01:16.479]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.479]                         if (muffled) 
[11:01:16.479]                           invokeRestart("muffleWarning")
[11:01:16.479]                       }
[11:01:16.479]                       else if (inherits(cond, "condition")) {
[11:01:16.479]                         if (!is.null(pattern)) {
[11:01:16.479]                           computeRestarts <- base::computeRestarts
[11:01:16.479]                           grepl <- base::grepl
[11:01:16.479]                           restarts <- computeRestarts(cond)
[11:01:16.479]                           for (restart in restarts) {
[11:01:16.479]                             name <- restart$name
[11:01:16.479]                             if (is.null(name)) 
[11:01:16.479]                               next
[11:01:16.479]                             if (!grepl(pattern, name)) 
[11:01:16.479]                               next
[11:01:16.479]                             invokeRestart(restart)
[11:01:16.479]                             muffled <- TRUE
[11:01:16.479]                             break
[11:01:16.479]                           }
[11:01:16.479]                         }
[11:01:16.479]                       }
[11:01:16.479]                       invisible(muffled)
[11:01:16.479]                     }
[11:01:16.479]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.479]                   }
[11:01:16.479]                 }
[11:01:16.479]             }
[11:01:16.479]         }))
[11:01:16.479]     }, error = function(ex) {
[11:01:16.479]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.479]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.479]                 ...future.rng), started = ...future.startTime, 
[11:01:16.479]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.479]             version = "1.8"), class = "FutureResult")
[11:01:16.479]     }, finally = {
[11:01:16.479]         if (!identical(...future.workdir, getwd())) 
[11:01:16.479]             setwd(...future.workdir)
[11:01:16.479]         {
[11:01:16.479]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.479]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.479]             }
[11:01:16.479]             base::options(...future.oldOptions)
[11:01:16.479]             if (.Platform$OS.type == "windows") {
[11:01:16.479]                 old_names <- names(...future.oldEnvVars)
[11:01:16.479]                 envs <- base::Sys.getenv()
[11:01:16.479]                 names <- names(envs)
[11:01:16.479]                 common <- intersect(names, old_names)
[11:01:16.479]                 added <- setdiff(names, old_names)
[11:01:16.479]                 removed <- setdiff(old_names, names)
[11:01:16.479]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.479]                   envs[common]]
[11:01:16.479]                 NAMES <- toupper(changed)
[11:01:16.479]                 args <- list()
[11:01:16.479]                 for (kk in seq_along(NAMES)) {
[11:01:16.479]                   name <- changed[[kk]]
[11:01:16.479]                   NAME <- NAMES[[kk]]
[11:01:16.479]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.479]                     next
[11:01:16.479]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.479]                 }
[11:01:16.479]                 NAMES <- toupper(added)
[11:01:16.479]                 for (kk in seq_along(NAMES)) {
[11:01:16.479]                   name <- added[[kk]]
[11:01:16.479]                   NAME <- NAMES[[kk]]
[11:01:16.479]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.479]                     next
[11:01:16.479]                   args[[name]] <- ""
[11:01:16.479]                 }
[11:01:16.479]                 NAMES <- toupper(removed)
[11:01:16.479]                 for (kk in seq_along(NAMES)) {
[11:01:16.479]                   name <- removed[[kk]]
[11:01:16.479]                   NAME <- NAMES[[kk]]
[11:01:16.479]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.479]                     next
[11:01:16.479]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.479]                 }
[11:01:16.479]                 if (length(args) > 0) 
[11:01:16.479]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.479]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.479]             }
[11:01:16.479]             else {
[11:01:16.479]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.479]             }
[11:01:16.479]             {
[11:01:16.479]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.479]                   0L) {
[11:01:16.479]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.479]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.479]                   base::options(opts)
[11:01:16.479]                 }
[11:01:16.479]                 {
[11:01:16.479]                   {
[11:01:16.479]                     NULL
[11:01:16.479]                     RNGkind("Mersenne-Twister")
[11:01:16.479]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:16.479]                       inherits = FALSE)
[11:01:16.479]                   }
[11:01:16.479]                   options(future.plan = NULL)
[11:01:16.479]                   if (is.na(NA_character_)) 
[11:01:16.479]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.479]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.479]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.479]                     .init = FALSE)
[11:01:16.479]                 }
[11:01:16.479]             }
[11:01:16.479]         }
[11:01:16.479]     })
[11:01:16.479]     if (TRUE) {
[11:01:16.479]         base::sink(type = "output", split = FALSE)
[11:01:16.479]         if (TRUE) {
[11:01:16.479]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.479]         }
[11:01:16.479]         else {
[11:01:16.479]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.479]         }
[11:01:16.479]         base::close(...future.stdout)
[11:01:16.479]         ...future.stdout <- NULL
[11:01:16.479]     }
[11:01:16.479]     ...future.result$conditions <- ...future.conditions
[11:01:16.479]     ...future.result$finished <- base::Sys.time()
[11:01:16.479]     ...future.result
[11:01:16.479] }
[11:01:16.481] plan(): Setting new future strategy stack:
[11:01:16.481] List of future strategies:
[11:01:16.481] 1. sequential:
[11:01:16.481]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.481]    - tweaked: FALSE
[11:01:16.481]    - call: NULL
[11:01:16.482] plan(): nbrOfWorkers() = 1
[11:01:16.482] plan(): Setting new future strategy stack:
[11:01:16.483] List of future strategies:
[11:01:16.483] 1. sequential:
[11:01:16.483]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.483]    - tweaked: FALSE
[11:01:16.483]    - call: plan(strategy)
[11:01:16.483] plan(): nbrOfWorkers() = 1
[11:01:16.483] SequentialFuture started (and completed)
[11:01:16.483] - Launch lazy future ... done
[11:01:16.483] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.484] getGlobalsAndPackages() ...
[11:01:16.484] Searching for globals...
[11:01:16.485] - globals found: [1] ‘{’
[11:01:16.485] Searching for globals ... DONE
[11:01:16.485] Resolving globals: FALSE
[11:01:16.485] 
[11:01:16.485] 
[11:01:16.485] getGlobalsAndPackages() ... DONE
[11:01:16.485] run() for ‘Future’ ...
[11:01:16.485] - state: ‘created’
[11:01:16.486] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:16.486] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:16.486] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:16.486]   - Field: ‘label’
[11:01:16.486]   - Field: ‘local’
[11:01:16.486]   - Field: ‘owner’
[11:01:16.486]   - Field: ‘envir’
[11:01:16.486]   - Field: ‘packages’
[11:01:16.486]   - Field: ‘gc’
[11:01:16.487]   - Field: ‘conditions’
[11:01:16.487]   - Field: ‘expr’
[11:01:16.487]   - Field: ‘uuid’
[11:01:16.487]   - Field: ‘seed’
[11:01:16.487]   - Field: ‘version’
[11:01:16.487]   - Field: ‘result’
[11:01:16.487]   - Field: ‘asynchronous’
[11:01:16.487]   - Field: ‘calls’
[11:01:16.487]   - Field: ‘globals’
[11:01:16.487]   - Field: ‘stdout’
[11:01:16.487]   - Field: ‘earlySignal’
[11:01:16.487]   - Field: ‘lazy’
[11:01:16.488]   - Field: ‘state’
[11:01:16.488] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:16.488] - Launch lazy future ...
[11:01:16.488] Packages needed by the future expression (n = 0): <none>
[11:01:16.488] Packages needed by future strategies (n = 0): <none>
[11:01:16.488] {
[11:01:16.488]     {
[11:01:16.488]         {
[11:01:16.488]             ...future.startTime <- base::Sys.time()
[11:01:16.488]             {
[11:01:16.488]                 {
[11:01:16.488]                   {
[11:01:16.488]                     base::local({
[11:01:16.488]                       has_future <- base::requireNamespace("future", 
[11:01:16.488]                         quietly = TRUE)
[11:01:16.488]                       if (has_future) {
[11:01:16.488]                         ns <- base::getNamespace("future")
[11:01:16.488]                         version <- ns[[".package"]][["version"]]
[11:01:16.488]                         if (is.null(version)) 
[11:01:16.488]                           version <- utils::packageVersion("future")
[11:01:16.488]                       }
[11:01:16.488]                       else {
[11:01:16.488]                         version <- NULL
[11:01:16.488]                       }
[11:01:16.488]                       if (!has_future || version < "1.8.0") {
[11:01:16.488]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.488]                           "", base::R.version$version.string), 
[11:01:16.488]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:16.488]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.488]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.488]                             "release", "version")], collapse = " "), 
[11:01:16.488]                           hostname = base::Sys.info()[["nodename"]])
[11:01:16.488]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.488]                           info)
[11:01:16.488]                         info <- base::paste(info, collapse = "; ")
[11:01:16.488]                         if (!has_future) {
[11:01:16.488]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.488]                             info)
[11:01:16.488]                         }
[11:01:16.488]                         else {
[11:01:16.488]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.488]                             info, version)
[11:01:16.488]                         }
[11:01:16.488]                         base::stop(msg)
[11:01:16.488]                       }
[11:01:16.488]                     })
[11:01:16.488]                   }
[11:01:16.488]                   ...future.strategy.old <- future::plan("list")
[11:01:16.488]                   options(future.plan = NULL)
[11:01:16.488]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.488]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.488]                 }
[11:01:16.488]                 ...future.workdir <- getwd()
[11:01:16.488]             }
[11:01:16.488]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.488]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.488]         }
[11:01:16.488]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.488]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.488]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.488]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.488]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.488]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.488]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.488]             base::names(...future.oldOptions))
[11:01:16.488]     }
[11:01:16.488]     if (FALSE) {
[11:01:16.488]     }
[11:01:16.488]     else {
[11:01:16.488]         if (TRUE) {
[11:01:16.488]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.488]                 open = "w")
[11:01:16.488]         }
[11:01:16.488]         else {
[11:01:16.488]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.488]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.488]         }
[11:01:16.488]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.488]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.488]             base::sink(type = "output", split = FALSE)
[11:01:16.488]             base::close(...future.stdout)
[11:01:16.488]         }, add = TRUE)
[11:01:16.488]     }
[11:01:16.488]     ...future.frame <- base::sys.nframe()
[11:01:16.488]     ...future.conditions <- base::list()
[11:01:16.488]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.488]     if (FALSE) {
[11:01:16.488]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.488]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.488]     }
[11:01:16.488]     ...future.result <- base::tryCatch({
[11:01:16.488]         base::withCallingHandlers({
[11:01:16.488]             ...future.value <- base::withVisible(base::local({
[11:01:16.488]                 42
[11:01:16.488]             }))
[11:01:16.488]             future::FutureResult(value = ...future.value$value, 
[11:01:16.488]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.488]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.488]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.488]                     ...future.globalenv.names))
[11:01:16.488]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.488]         }, condition = base::local({
[11:01:16.488]             c <- base::c
[11:01:16.488]             inherits <- base::inherits
[11:01:16.488]             invokeRestart <- base::invokeRestart
[11:01:16.488]             length <- base::length
[11:01:16.488]             list <- base::list
[11:01:16.488]             seq.int <- base::seq.int
[11:01:16.488]             signalCondition <- base::signalCondition
[11:01:16.488]             sys.calls <- base::sys.calls
[11:01:16.488]             `[[` <- base::`[[`
[11:01:16.488]             `+` <- base::`+`
[11:01:16.488]             `<<-` <- base::`<<-`
[11:01:16.488]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.488]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.488]                   3L)]
[11:01:16.488]             }
[11:01:16.488]             function(cond) {
[11:01:16.488]                 is_error <- inherits(cond, "error")
[11:01:16.488]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.488]                   NULL)
[11:01:16.488]                 if (is_error) {
[11:01:16.488]                   sessionInformation <- function() {
[11:01:16.488]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.488]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.488]                       search = base::search(), system = base::Sys.info())
[11:01:16.488]                   }
[11:01:16.488]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.488]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.488]                     cond$call), session = sessionInformation(), 
[11:01:16.488]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.488]                   signalCondition(cond)
[11:01:16.488]                 }
[11:01:16.488]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.488]                 "immediateCondition"))) {
[11:01:16.488]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.488]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.488]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.488]                   if (TRUE && !signal) {
[11:01:16.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.488]                     {
[11:01:16.488]                       inherits <- base::inherits
[11:01:16.488]                       invokeRestart <- base::invokeRestart
[11:01:16.488]                       is.null <- base::is.null
[11:01:16.488]                       muffled <- FALSE
[11:01:16.488]                       if (inherits(cond, "message")) {
[11:01:16.488]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.488]                         if (muffled) 
[11:01:16.488]                           invokeRestart("muffleMessage")
[11:01:16.488]                       }
[11:01:16.488]                       else if (inherits(cond, "warning")) {
[11:01:16.488]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.488]                         if (muffled) 
[11:01:16.488]                           invokeRestart("muffleWarning")
[11:01:16.488]                       }
[11:01:16.488]                       else if (inherits(cond, "condition")) {
[11:01:16.488]                         if (!is.null(pattern)) {
[11:01:16.488]                           computeRestarts <- base::computeRestarts
[11:01:16.488]                           grepl <- base::grepl
[11:01:16.488]                           restarts <- computeRestarts(cond)
[11:01:16.488]                           for (restart in restarts) {
[11:01:16.488]                             name <- restart$name
[11:01:16.488]                             if (is.null(name)) 
[11:01:16.488]                               next
[11:01:16.488]                             if (!grepl(pattern, name)) 
[11:01:16.488]                               next
[11:01:16.488]                             invokeRestart(restart)
[11:01:16.488]                             muffled <- TRUE
[11:01:16.488]                             break
[11:01:16.488]                           }
[11:01:16.488]                         }
[11:01:16.488]                       }
[11:01:16.488]                       invisible(muffled)
[11:01:16.488]                     }
[11:01:16.488]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.488]                   }
[11:01:16.488]                 }
[11:01:16.488]                 else {
[11:01:16.488]                   if (TRUE) {
[11:01:16.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.488]                     {
[11:01:16.488]                       inherits <- base::inherits
[11:01:16.488]                       invokeRestart <- base::invokeRestart
[11:01:16.488]                       is.null <- base::is.null
[11:01:16.488]                       muffled <- FALSE
[11:01:16.488]                       if (inherits(cond, "message")) {
[11:01:16.488]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.488]                         if (muffled) 
[11:01:16.488]                           invokeRestart("muffleMessage")
[11:01:16.488]                       }
[11:01:16.488]                       else if (inherits(cond, "warning")) {
[11:01:16.488]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.488]                         if (muffled) 
[11:01:16.488]                           invokeRestart("muffleWarning")
[11:01:16.488]                       }
[11:01:16.488]                       else if (inherits(cond, "condition")) {
[11:01:16.488]                         if (!is.null(pattern)) {
[11:01:16.488]                           computeRestarts <- base::computeRestarts
[11:01:16.488]                           grepl <- base::grepl
[11:01:16.488]                           restarts <- computeRestarts(cond)
[11:01:16.488]                           for (restart in restarts) {
[11:01:16.488]                             name <- restart$name
[11:01:16.488]                             if (is.null(name)) 
[11:01:16.488]                               next
[11:01:16.488]                             if (!grepl(pattern, name)) 
[11:01:16.488]                               next
[11:01:16.488]                             invokeRestart(restart)
[11:01:16.488]                             muffled <- TRUE
[11:01:16.488]                             break
[11:01:16.488]                           }
[11:01:16.488]                         }
[11:01:16.488]                       }
[11:01:16.488]                       invisible(muffled)
[11:01:16.488]                     }
[11:01:16.488]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.488]                   }
[11:01:16.488]                 }
[11:01:16.488]             }
[11:01:16.488]         }))
[11:01:16.488]     }, error = function(ex) {
[11:01:16.488]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.488]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.488]                 ...future.rng), started = ...future.startTime, 
[11:01:16.488]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.488]             version = "1.8"), class = "FutureResult")
[11:01:16.488]     }, finally = {
[11:01:16.488]         if (!identical(...future.workdir, getwd())) 
[11:01:16.488]             setwd(...future.workdir)
[11:01:16.488]         {
[11:01:16.488]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.488]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.488]             }
[11:01:16.488]             base::options(...future.oldOptions)
[11:01:16.488]             if (.Platform$OS.type == "windows") {
[11:01:16.488]                 old_names <- names(...future.oldEnvVars)
[11:01:16.488]                 envs <- base::Sys.getenv()
[11:01:16.488]                 names <- names(envs)
[11:01:16.488]                 common <- intersect(names, old_names)
[11:01:16.488]                 added <- setdiff(names, old_names)
[11:01:16.488]                 removed <- setdiff(old_names, names)
[11:01:16.488]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.488]                   envs[common]]
[11:01:16.488]                 NAMES <- toupper(changed)
[11:01:16.488]                 args <- list()
[11:01:16.488]                 for (kk in seq_along(NAMES)) {
[11:01:16.488]                   name <- changed[[kk]]
[11:01:16.488]                   NAME <- NAMES[[kk]]
[11:01:16.488]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.488]                     next
[11:01:16.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.488]                 }
[11:01:16.488]                 NAMES <- toupper(added)
[11:01:16.488]                 for (kk in seq_along(NAMES)) {
[11:01:16.488]                   name <- added[[kk]]
[11:01:16.488]                   NAME <- NAMES[[kk]]
[11:01:16.488]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.488]                     next
[11:01:16.488]                   args[[name]] <- ""
[11:01:16.488]                 }
[11:01:16.488]                 NAMES <- toupper(removed)
[11:01:16.488]                 for (kk in seq_along(NAMES)) {
[11:01:16.488]                   name <- removed[[kk]]
[11:01:16.488]                   NAME <- NAMES[[kk]]
[11:01:16.488]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.488]                     next
[11:01:16.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.488]                 }
[11:01:16.488]                 if (length(args) > 0) 
[11:01:16.488]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.488]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.488]             }
[11:01:16.488]             else {
[11:01:16.488]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.488]             }
[11:01:16.488]             {
[11:01:16.488]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.488]                   0L) {
[11:01:16.488]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.488]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.488]                   base::options(opts)
[11:01:16.488]                 }
[11:01:16.488]                 {
[11:01:16.488]                   {
[11:01:16.488]                     NULL
[11:01:16.488]                     RNGkind("Mersenne-Twister")
[11:01:16.488]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:16.488]                       inherits = FALSE)
[11:01:16.488]                   }
[11:01:16.488]                   options(future.plan = NULL)
[11:01:16.488]                   if (is.na(NA_character_)) 
[11:01:16.488]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.488]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.488]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.488]                     .init = FALSE)
[11:01:16.488]                 }
[11:01:16.488]             }
[11:01:16.488]         }
[11:01:16.488]     })
[11:01:16.488]     if (TRUE) {
[11:01:16.488]         base::sink(type = "output", split = FALSE)
[11:01:16.488]         if (TRUE) {
[11:01:16.488]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.488]         }
[11:01:16.488]         else {
[11:01:16.488]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.488]         }
[11:01:16.488]         base::close(...future.stdout)
[11:01:16.488]         ...future.stdout <- NULL
[11:01:16.488]     }
[11:01:16.488]     ...future.result$conditions <- ...future.conditions
[11:01:16.488]     ...future.result$finished <- base::Sys.time()
[11:01:16.488]     ...future.result
[11:01:16.488] }
[11:01:16.490] plan(): Setting new future strategy stack:
[11:01:16.490] List of future strategies:
[11:01:16.490] 1. sequential:
[11:01:16.490]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.490]    - tweaked: FALSE
[11:01:16.490]    - call: NULL
[11:01:16.491] plan(): nbrOfWorkers() = 1
[11:01:16.491] plan(): Setting new future strategy stack:
[11:01:16.491] List of future strategies:
[11:01:16.491] 1. sequential:
[11:01:16.491]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.491]    - tweaked: FALSE
[11:01:16.491]    - call: plan(strategy)
[11:01:16.492] plan(): nbrOfWorkers() = 1
[11:01:16.492] SequentialFuture started (and completed)
[11:01:16.492] - Launch lazy future ... done
[11:01:16.492] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[11:01:16.493] plan(): Setting new future strategy stack:
[11:01:16.493] List of future strategies:
[11:01:16.493] 1. multicore:
[11:01:16.493]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:16.493]    - tweaked: FALSE
[11:01:16.493]    - call: plan(strategy)
[11:01:16.495] plan(): nbrOfWorkers() = 2
[11:01:16.496] getGlobalsAndPackages() ...
[11:01:16.496] 
[11:01:16.497] - globals: [0] <none>
[11:01:16.497] getGlobalsAndPackages() ... DONE
[11:01:16.498] Packages needed by the future expression (n = 0): <none>
[11:01:16.498] Packages needed by future strategies (n = 0): <none>
[11:01:16.498] {
[11:01:16.498]     {
[11:01:16.498]         {
[11:01:16.498]             ...future.startTime <- base::Sys.time()
[11:01:16.498]             {
[11:01:16.498]                 {
[11:01:16.498]                   {
[11:01:16.498]                     {
[11:01:16.498]                       base::local({
[11:01:16.498]                         has_future <- base::requireNamespace("future", 
[11:01:16.498]                           quietly = TRUE)
[11:01:16.498]                         if (has_future) {
[11:01:16.498]                           ns <- base::getNamespace("future")
[11:01:16.498]                           version <- ns[[".package"]][["version"]]
[11:01:16.498]                           if (is.null(version)) 
[11:01:16.498]                             version <- utils::packageVersion("future")
[11:01:16.498]                         }
[11:01:16.498]                         else {
[11:01:16.498]                           version <- NULL
[11:01:16.498]                         }
[11:01:16.498]                         if (!has_future || version < "1.8.0") {
[11:01:16.498]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.498]                             "", base::R.version$version.string), 
[11:01:16.498]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.498]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.498]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.498]                               "release", "version")], collapse = " "), 
[11:01:16.498]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.498]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.498]                             info)
[11:01:16.498]                           info <- base::paste(info, collapse = "; ")
[11:01:16.498]                           if (!has_future) {
[11:01:16.498]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.498]                               info)
[11:01:16.498]                           }
[11:01:16.498]                           else {
[11:01:16.498]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.498]                               info, version)
[11:01:16.498]                           }
[11:01:16.498]                           base::stop(msg)
[11:01:16.498]                         }
[11:01:16.498]                       })
[11:01:16.498]                     }
[11:01:16.498]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.498]                     base::options(mc.cores = 1L)
[11:01:16.498]                   }
[11:01:16.498]                   ...future.strategy.old <- future::plan("list")
[11:01:16.498]                   options(future.plan = NULL)
[11:01:16.498]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.498]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.498]                 }
[11:01:16.498]                 ...future.workdir <- getwd()
[11:01:16.498]             }
[11:01:16.498]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.498]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.498]         }
[11:01:16.498]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.498]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.498]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.498]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.498]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.498]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.498]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.498]             base::names(...future.oldOptions))
[11:01:16.498]     }
[11:01:16.498]     if (FALSE) {
[11:01:16.498]     }
[11:01:16.498]     else {
[11:01:16.498]         if (TRUE) {
[11:01:16.498]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.498]                 open = "w")
[11:01:16.498]         }
[11:01:16.498]         else {
[11:01:16.498]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.498]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.498]         }
[11:01:16.498]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.498]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.498]             base::sink(type = "output", split = FALSE)
[11:01:16.498]             base::close(...future.stdout)
[11:01:16.498]         }, add = TRUE)
[11:01:16.498]     }
[11:01:16.498]     ...future.frame <- base::sys.nframe()
[11:01:16.498]     ...future.conditions <- base::list()
[11:01:16.498]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.498]     if (FALSE) {
[11:01:16.498]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.498]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.498]     }
[11:01:16.498]     ...future.result <- base::tryCatch({
[11:01:16.498]         base::withCallingHandlers({
[11:01:16.498]             ...future.value <- base::withVisible(base::local({
[11:01:16.498]                 withCallingHandlers({
[11:01:16.498]                   42
[11:01:16.498]                 }, immediateCondition = function(cond) {
[11:01:16.498]                   save_rds <- function (object, pathname, ...) 
[11:01:16.498]                   {
[11:01:16.498]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:16.498]                     if (file_test("-f", pathname_tmp)) {
[11:01:16.498]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.498]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:16.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.498]                         fi_tmp[["mtime"]])
[11:01:16.498]                     }
[11:01:16.498]                     tryCatch({
[11:01:16.498]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:16.498]                     }, error = function(ex) {
[11:01:16.498]                       msg <- conditionMessage(ex)
[11:01:16.498]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.498]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:16.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.498]                         fi_tmp[["mtime"]], msg)
[11:01:16.498]                       ex$message <- msg
[11:01:16.498]                       stop(ex)
[11:01:16.498]                     })
[11:01:16.498]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:16.498]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:16.498]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:16.498]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.498]                       fi <- file.info(pathname)
[11:01:16.498]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:16.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.498]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:16.498]                         fi[["size"]], fi[["mtime"]])
[11:01:16.498]                       stop(msg)
[11:01:16.498]                     }
[11:01:16.498]                     invisible(pathname)
[11:01:16.498]                   }
[11:01:16.498]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:16.498]                     rootPath = tempdir()) 
[11:01:16.498]                   {
[11:01:16.498]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:16.498]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:16.498]                       tmpdir = path, fileext = ".rds")
[11:01:16.498]                     save_rds(obj, file)
[11:01:16.498]                   }
[11:01:16.498]                   saveImmediateCondition(cond, path = "/tmp/RtmpsecjZy/.future/immediateConditions")
[11:01:16.498]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.498]                   {
[11:01:16.498]                     inherits <- base::inherits
[11:01:16.498]                     invokeRestart <- base::invokeRestart
[11:01:16.498]                     is.null <- base::is.null
[11:01:16.498]                     muffled <- FALSE
[11:01:16.498]                     if (inherits(cond, "message")) {
[11:01:16.498]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.498]                       if (muffled) 
[11:01:16.498]                         invokeRestart("muffleMessage")
[11:01:16.498]                     }
[11:01:16.498]                     else if (inherits(cond, "warning")) {
[11:01:16.498]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.498]                       if (muffled) 
[11:01:16.498]                         invokeRestart("muffleWarning")
[11:01:16.498]                     }
[11:01:16.498]                     else if (inherits(cond, "condition")) {
[11:01:16.498]                       if (!is.null(pattern)) {
[11:01:16.498]                         computeRestarts <- base::computeRestarts
[11:01:16.498]                         grepl <- base::grepl
[11:01:16.498]                         restarts <- computeRestarts(cond)
[11:01:16.498]                         for (restart in restarts) {
[11:01:16.498]                           name <- restart$name
[11:01:16.498]                           if (is.null(name)) 
[11:01:16.498]                             next
[11:01:16.498]                           if (!grepl(pattern, name)) 
[11:01:16.498]                             next
[11:01:16.498]                           invokeRestart(restart)
[11:01:16.498]                           muffled <- TRUE
[11:01:16.498]                           break
[11:01:16.498]                         }
[11:01:16.498]                       }
[11:01:16.498]                     }
[11:01:16.498]                     invisible(muffled)
[11:01:16.498]                   }
[11:01:16.498]                   muffleCondition(cond)
[11:01:16.498]                 })
[11:01:16.498]             }))
[11:01:16.498]             future::FutureResult(value = ...future.value$value, 
[11:01:16.498]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.498]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.498]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.498]                     ...future.globalenv.names))
[11:01:16.498]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.498]         }, condition = base::local({
[11:01:16.498]             c <- base::c
[11:01:16.498]             inherits <- base::inherits
[11:01:16.498]             invokeRestart <- base::invokeRestart
[11:01:16.498]             length <- base::length
[11:01:16.498]             list <- base::list
[11:01:16.498]             seq.int <- base::seq.int
[11:01:16.498]             signalCondition <- base::signalCondition
[11:01:16.498]             sys.calls <- base::sys.calls
[11:01:16.498]             `[[` <- base::`[[`
[11:01:16.498]             `+` <- base::`+`
[11:01:16.498]             `<<-` <- base::`<<-`
[11:01:16.498]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.498]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.498]                   3L)]
[11:01:16.498]             }
[11:01:16.498]             function(cond) {
[11:01:16.498]                 is_error <- inherits(cond, "error")
[11:01:16.498]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.498]                   NULL)
[11:01:16.498]                 if (is_error) {
[11:01:16.498]                   sessionInformation <- function() {
[11:01:16.498]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.498]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.498]                       search = base::search(), system = base::Sys.info())
[11:01:16.498]                   }
[11:01:16.498]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.498]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.498]                     cond$call), session = sessionInformation(), 
[11:01:16.498]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.498]                   signalCondition(cond)
[11:01:16.498]                 }
[11:01:16.498]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.498]                 "immediateCondition"))) {
[11:01:16.498]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.498]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.498]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.498]                   if (TRUE && !signal) {
[11:01:16.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.498]                     {
[11:01:16.498]                       inherits <- base::inherits
[11:01:16.498]                       invokeRestart <- base::invokeRestart
[11:01:16.498]                       is.null <- base::is.null
[11:01:16.498]                       muffled <- FALSE
[11:01:16.498]                       if (inherits(cond, "message")) {
[11:01:16.498]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.498]                         if (muffled) 
[11:01:16.498]                           invokeRestart("muffleMessage")
[11:01:16.498]                       }
[11:01:16.498]                       else if (inherits(cond, "warning")) {
[11:01:16.498]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.498]                         if (muffled) 
[11:01:16.498]                           invokeRestart("muffleWarning")
[11:01:16.498]                       }
[11:01:16.498]                       else if (inherits(cond, "condition")) {
[11:01:16.498]                         if (!is.null(pattern)) {
[11:01:16.498]                           computeRestarts <- base::computeRestarts
[11:01:16.498]                           grepl <- base::grepl
[11:01:16.498]                           restarts <- computeRestarts(cond)
[11:01:16.498]                           for (restart in restarts) {
[11:01:16.498]                             name <- restart$name
[11:01:16.498]                             if (is.null(name)) 
[11:01:16.498]                               next
[11:01:16.498]                             if (!grepl(pattern, name)) 
[11:01:16.498]                               next
[11:01:16.498]                             invokeRestart(restart)
[11:01:16.498]                             muffled <- TRUE
[11:01:16.498]                             break
[11:01:16.498]                           }
[11:01:16.498]                         }
[11:01:16.498]                       }
[11:01:16.498]                       invisible(muffled)
[11:01:16.498]                     }
[11:01:16.498]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.498]                   }
[11:01:16.498]                 }
[11:01:16.498]                 else {
[11:01:16.498]                   if (TRUE) {
[11:01:16.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.498]                     {
[11:01:16.498]                       inherits <- base::inherits
[11:01:16.498]                       invokeRestart <- base::invokeRestart
[11:01:16.498]                       is.null <- base::is.null
[11:01:16.498]                       muffled <- FALSE
[11:01:16.498]                       if (inherits(cond, "message")) {
[11:01:16.498]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.498]                         if (muffled) 
[11:01:16.498]                           invokeRestart("muffleMessage")
[11:01:16.498]                       }
[11:01:16.498]                       else if (inherits(cond, "warning")) {
[11:01:16.498]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.498]                         if (muffled) 
[11:01:16.498]                           invokeRestart("muffleWarning")
[11:01:16.498]                       }
[11:01:16.498]                       else if (inherits(cond, "condition")) {
[11:01:16.498]                         if (!is.null(pattern)) {
[11:01:16.498]                           computeRestarts <- base::computeRestarts
[11:01:16.498]                           grepl <- base::grepl
[11:01:16.498]                           restarts <- computeRestarts(cond)
[11:01:16.498]                           for (restart in restarts) {
[11:01:16.498]                             name <- restart$name
[11:01:16.498]                             if (is.null(name)) 
[11:01:16.498]                               next
[11:01:16.498]                             if (!grepl(pattern, name)) 
[11:01:16.498]                               next
[11:01:16.498]                             invokeRestart(restart)
[11:01:16.498]                             muffled <- TRUE
[11:01:16.498]                             break
[11:01:16.498]                           }
[11:01:16.498]                         }
[11:01:16.498]                       }
[11:01:16.498]                       invisible(muffled)
[11:01:16.498]                     }
[11:01:16.498]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.498]                   }
[11:01:16.498]                 }
[11:01:16.498]             }
[11:01:16.498]         }))
[11:01:16.498]     }, error = function(ex) {
[11:01:16.498]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.498]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.498]                 ...future.rng), started = ...future.startTime, 
[11:01:16.498]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.498]             version = "1.8"), class = "FutureResult")
[11:01:16.498]     }, finally = {
[11:01:16.498]         if (!identical(...future.workdir, getwd())) 
[11:01:16.498]             setwd(...future.workdir)
[11:01:16.498]         {
[11:01:16.498]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.498]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.498]             }
[11:01:16.498]             base::options(...future.oldOptions)
[11:01:16.498]             if (.Platform$OS.type == "windows") {
[11:01:16.498]                 old_names <- names(...future.oldEnvVars)
[11:01:16.498]                 envs <- base::Sys.getenv()
[11:01:16.498]                 names <- names(envs)
[11:01:16.498]                 common <- intersect(names, old_names)
[11:01:16.498]                 added <- setdiff(names, old_names)
[11:01:16.498]                 removed <- setdiff(old_names, names)
[11:01:16.498]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.498]                   envs[common]]
[11:01:16.498]                 NAMES <- toupper(changed)
[11:01:16.498]                 args <- list()
[11:01:16.498]                 for (kk in seq_along(NAMES)) {
[11:01:16.498]                   name <- changed[[kk]]
[11:01:16.498]                   NAME <- NAMES[[kk]]
[11:01:16.498]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.498]                     next
[11:01:16.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.498]                 }
[11:01:16.498]                 NAMES <- toupper(added)
[11:01:16.498]                 for (kk in seq_along(NAMES)) {
[11:01:16.498]                   name <- added[[kk]]
[11:01:16.498]                   NAME <- NAMES[[kk]]
[11:01:16.498]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.498]                     next
[11:01:16.498]                   args[[name]] <- ""
[11:01:16.498]                 }
[11:01:16.498]                 NAMES <- toupper(removed)
[11:01:16.498]                 for (kk in seq_along(NAMES)) {
[11:01:16.498]                   name <- removed[[kk]]
[11:01:16.498]                   NAME <- NAMES[[kk]]
[11:01:16.498]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.498]                     next
[11:01:16.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.498]                 }
[11:01:16.498]                 if (length(args) > 0) 
[11:01:16.498]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.498]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.498]             }
[11:01:16.498]             else {
[11:01:16.498]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.498]             }
[11:01:16.498]             {
[11:01:16.498]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.498]                   0L) {
[11:01:16.498]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.498]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.498]                   base::options(opts)
[11:01:16.498]                 }
[11:01:16.498]                 {
[11:01:16.498]                   {
[11:01:16.498]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.498]                     NULL
[11:01:16.498]                   }
[11:01:16.498]                   options(future.plan = NULL)
[11:01:16.498]                   if (is.na(NA_character_)) 
[11:01:16.498]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.498]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.498]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.498]                     .init = FALSE)
[11:01:16.498]                 }
[11:01:16.498]             }
[11:01:16.498]         }
[11:01:16.498]     })
[11:01:16.498]     if (TRUE) {
[11:01:16.498]         base::sink(type = "output", split = FALSE)
[11:01:16.498]         if (TRUE) {
[11:01:16.498]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.498]         }
[11:01:16.498]         else {
[11:01:16.498]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.498]         }
[11:01:16.498]         base::close(...future.stdout)
[11:01:16.498]         ...future.stdout <- NULL
[11:01:16.498]     }
[11:01:16.498]     ...future.result$conditions <- ...future.conditions
[11:01:16.498]     ...future.result$finished <- base::Sys.time()
[11:01:16.498]     ...future.result
[11:01:16.498] }
[11:01:16.500] requestCore(): workers = 2
[11:01:16.503] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
[11:01:16.504] plan(): Setting new future strategy stack:
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:01:16.504] List of future strategies:
[11:01:16.504] 1. sequential:
[11:01:16.504]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.504]    - tweaked: FALSE
[11:01:16.504]    - call: NULL
[11:01:16.505] plan(): nbrOfWorkers() = 1
[11:01:16.507] plan(): Setting new future strategy stack:
[11:01:16.507] List of future strategies:
[11:01:16.507] 1. multicore:
[11:01:16.507]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:16.507]    - tweaked: FALSE
[11:01:16.507]    - call: plan(strategy)
[11:01:16.510] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.512] result() for MulticoreFuture ...
[11:01:16.517] result() for MulticoreFuture ...
[11:01:16.517] result() for MulticoreFuture ... done
[11:01:16.517] result() for MulticoreFuture ... done
[11:01:16.517] result() for MulticoreFuture ...
[11:01:16.517] result() for MulticoreFuture ... done
[11:01:16.517] getGlobalsAndPackages() ...
[11:01:16.517] Searching for globals...
[11:01:16.518] 
[11:01:16.518] Searching for globals ... DONE
[11:01:16.518] - globals: [0] <none>
[11:01:16.518] getGlobalsAndPackages() ... DONE
[11:01:16.519] run() for ‘Future’ ...
[11:01:16.519] - state: ‘created’
[11:01:16.519] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:16.521] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.521] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:16.521]   - Field: ‘label’
[11:01:16.524]   - Field: ‘local’
[11:01:16.524]   - Field: ‘owner’
[11:01:16.524]   - Field: ‘envir’
[11:01:16.524]   - Field: ‘workers’
[11:01:16.524]   - Field: ‘packages’
[11:01:16.524]   - Field: ‘gc’
[11:01:16.524]   - Field: ‘job’
[11:01:16.525]   - Field: ‘conditions’
[11:01:16.525]   - Field: ‘expr’
[11:01:16.525]   - Field: ‘uuid’
[11:01:16.525]   - Field: ‘seed’
[11:01:16.525]   - Field: ‘version’
[11:01:16.525]   - Field: ‘result’
[11:01:16.525]   - Field: ‘asynchronous’
[11:01:16.525]   - Field: ‘calls’
[11:01:16.526]   - Field: ‘globals’
[11:01:16.526]   - Field: ‘stdout’
[11:01:16.526]   - Field: ‘earlySignal’
[11:01:16.526]   - Field: ‘lazy’
[11:01:16.526]   - Field: ‘state’
[11:01:16.526] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:16.526] - Launch lazy future ...
[11:01:16.527] Packages needed by the future expression (n = 0): <none>
[11:01:16.527] Packages needed by future strategies (n = 0): <none>
[11:01:16.527] {
[11:01:16.527]     {
[11:01:16.527]         {
[11:01:16.527]             ...future.startTime <- base::Sys.time()
[11:01:16.527]             {
[11:01:16.527]                 {
[11:01:16.527]                   {
[11:01:16.527]                     {
[11:01:16.527]                       base::local({
[11:01:16.527]                         has_future <- base::requireNamespace("future", 
[11:01:16.527]                           quietly = TRUE)
[11:01:16.527]                         if (has_future) {
[11:01:16.527]                           ns <- base::getNamespace("future")
[11:01:16.527]                           version <- ns[[".package"]][["version"]]
[11:01:16.527]                           if (is.null(version)) 
[11:01:16.527]                             version <- utils::packageVersion("future")
[11:01:16.527]                         }
[11:01:16.527]                         else {
[11:01:16.527]                           version <- NULL
[11:01:16.527]                         }
[11:01:16.527]                         if (!has_future || version < "1.8.0") {
[11:01:16.527]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.527]                             "", base::R.version$version.string), 
[11:01:16.527]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.527]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.527]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.527]                               "release", "version")], collapse = " "), 
[11:01:16.527]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.527]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.527]                             info)
[11:01:16.527]                           info <- base::paste(info, collapse = "; ")
[11:01:16.527]                           if (!has_future) {
[11:01:16.527]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.527]                               info)
[11:01:16.527]                           }
[11:01:16.527]                           else {
[11:01:16.527]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.527]                               info, version)
[11:01:16.527]                           }
[11:01:16.527]                           base::stop(msg)
[11:01:16.527]                         }
[11:01:16.527]                       })
[11:01:16.527]                     }
[11:01:16.527]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.527]                     base::options(mc.cores = 1L)
[11:01:16.527]                   }
[11:01:16.527]                   ...future.strategy.old <- future::plan("list")
[11:01:16.527]                   options(future.plan = NULL)
[11:01:16.527]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.527]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.527]                 }
[11:01:16.527]                 ...future.workdir <- getwd()
[11:01:16.527]             }
[11:01:16.527]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.527]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.527]         }
[11:01:16.527]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.527]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.527]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.527]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.527]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.527]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.527]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.527]             base::names(...future.oldOptions))
[11:01:16.527]     }
[11:01:16.527]     if (FALSE) {
[11:01:16.527]     }
[11:01:16.527]     else {
[11:01:16.527]         if (TRUE) {
[11:01:16.527]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.527]                 open = "w")
[11:01:16.527]         }
[11:01:16.527]         else {
[11:01:16.527]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.527]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.527]         }
[11:01:16.527]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.527]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.527]             base::sink(type = "output", split = FALSE)
[11:01:16.527]             base::close(...future.stdout)
[11:01:16.527]         }, add = TRUE)
[11:01:16.527]     }
[11:01:16.527]     ...future.frame <- base::sys.nframe()
[11:01:16.527]     ...future.conditions <- base::list()
[11:01:16.527]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.527]     if (FALSE) {
[11:01:16.527]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.527]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.527]     }
[11:01:16.527]     ...future.result <- base::tryCatch({
[11:01:16.527]         base::withCallingHandlers({
[11:01:16.527]             ...future.value <- base::withVisible(base::local({
[11:01:16.527]                 withCallingHandlers({
[11:01:16.527]                   42
[11:01:16.527]                 }, immediateCondition = function(cond) {
[11:01:16.527]                   save_rds <- function (object, pathname, ...) 
[11:01:16.527]                   {
[11:01:16.527]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:16.527]                     if (file_test("-f", pathname_tmp)) {
[11:01:16.527]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.527]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:16.527]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.527]                         fi_tmp[["mtime"]])
[11:01:16.527]                     }
[11:01:16.527]                     tryCatch({
[11:01:16.527]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:16.527]                     }, error = function(ex) {
[11:01:16.527]                       msg <- conditionMessage(ex)
[11:01:16.527]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.527]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:16.527]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.527]                         fi_tmp[["mtime"]], msg)
[11:01:16.527]                       ex$message <- msg
[11:01:16.527]                       stop(ex)
[11:01:16.527]                     })
[11:01:16.527]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:16.527]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:16.527]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:16.527]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.527]                       fi <- file.info(pathname)
[11:01:16.527]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:16.527]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.527]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:16.527]                         fi[["size"]], fi[["mtime"]])
[11:01:16.527]                       stop(msg)
[11:01:16.527]                     }
[11:01:16.527]                     invisible(pathname)
[11:01:16.527]                   }
[11:01:16.527]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:16.527]                     rootPath = tempdir()) 
[11:01:16.527]                   {
[11:01:16.527]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:16.527]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:16.527]                       tmpdir = path, fileext = ".rds")
[11:01:16.527]                     save_rds(obj, file)
[11:01:16.527]                   }
[11:01:16.527]                   saveImmediateCondition(cond, path = "/tmp/RtmpsecjZy/.future/immediateConditions")
[11:01:16.527]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.527]                   {
[11:01:16.527]                     inherits <- base::inherits
[11:01:16.527]                     invokeRestart <- base::invokeRestart
[11:01:16.527]                     is.null <- base::is.null
[11:01:16.527]                     muffled <- FALSE
[11:01:16.527]                     if (inherits(cond, "message")) {
[11:01:16.527]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.527]                       if (muffled) 
[11:01:16.527]                         invokeRestart("muffleMessage")
[11:01:16.527]                     }
[11:01:16.527]                     else if (inherits(cond, "warning")) {
[11:01:16.527]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.527]                       if (muffled) 
[11:01:16.527]                         invokeRestart("muffleWarning")
[11:01:16.527]                     }
[11:01:16.527]                     else if (inherits(cond, "condition")) {
[11:01:16.527]                       if (!is.null(pattern)) {
[11:01:16.527]                         computeRestarts <- base::computeRestarts
[11:01:16.527]                         grepl <- base::grepl
[11:01:16.527]                         restarts <- computeRestarts(cond)
[11:01:16.527]                         for (restart in restarts) {
[11:01:16.527]                           name <- restart$name
[11:01:16.527]                           if (is.null(name)) 
[11:01:16.527]                             next
[11:01:16.527]                           if (!grepl(pattern, name)) 
[11:01:16.527]                             next
[11:01:16.527]                           invokeRestart(restart)
[11:01:16.527]                           muffled <- TRUE
[11:01:16.527]                           break
[11:01:16.527]                         }
[11:01:16.527]                       }
[11:01:16.527]                     }
[11:01:16.527]                     invisible(muffled)
[11:01:16.527]                   }
[11:01:16.527]                   muffleCondition(cond)
[11:01:16.527]                 })
[11:01:16.527]             }))
[11:01:16.527]             future::FutureResult(value = ...future.value$value, 
[11:01:16.527]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.527]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.527]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.527]                     ...future.globalenv.names))
[11:01:16.527]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.527]         }, condition = base::local({
[11:01:16.527]             c <- base::c
[11:01:16.527]             inherits <- base::inherits
[11:01:16.527]             invokeRestart <- base::invokeRestart
[11:01:16.527]             length <- base::length
[11:01:16.527]             list <- base::list
[11:01:16.527]             seq.int <- base::seq.int
[11:01:16.527]             signalCondition <- base::signalCondition
[11:01:16.527]             sys.calls <- base::sys.calls
[11:01:16.527]             `[[` <- base::`[[`
[11:01:16.527]             `+` <- base::`+`
[11:01:16.527]             `<<-` <- base::`<<-`
[11:01:16.527]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.527]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.527]                   3L)]
[11:01:16.527]             }
[11:01:16.527]             function(cond) {
[11:01:16.527]                 is_error <- inherits(cond, "error")
[11:01:16.527]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.527]                   NULL)
[11:01:16.527]                 if (is_error) {
[11:01:16.527]                   sessionInformation <- function() {
[11:01:16.527]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.527]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.527]                       search = base::search(), system = base::Sys.info())
[11:01:16.527]                   }
[11:01:16.527]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.527]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.527]                     cond$call), session = sessionInformation(), 
[11:01:16.527]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.527]                   signalCondition(cond)
[11:01:16.527]                 }
[11:01:16.527]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.527]                 "immediateCondition"))) {
[11:01:16.527]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.527]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.527]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.527]                   if (TRUE && !signal) {
[11:01:16.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.527]                     {
[11:01:16.527]                       inherits <- base::inherits
[11:01:16.527]                       invokeRestart <- base::invokeRestart
[11:01:16.527]                       is.null <- base::is.null
[11:01:16.527]                       muffled <- FALSE
[11:01:16.527]                       if (inherits(cond, "message")) {
[11:01:16.527]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.527]                         if (muffled) 
[11:01:16.527]                           invokeRestart("muffleMessage")
[11:01:16.527]                       }
[11:01:16.527]                       else if (inherits(cond, "warning")) {
[11:01:16.527]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.527]                         if (muffled) 
[11:01:16.527]                           invokeRestart("muffleWarning")
[11:01:16.527]                       }
[11:01:16.527]                       else if (inherits(cond, "condition")) {
[11:01:16.527]                         if (!is.null(pattern)) {
[11:01:16.527]                           computeRestarts <- base::computeRestarts
[11:01:16.527]                           grepl <- base::grepl
[11:01:16.527]                           restarts <- computeRestarts(cond)
[11:01:16.527]                           for (restart in restarts) {
[11:01:16.527]                             name <- restart$name
[11:01:16.527]                             if (is.null(name)) 
[11:01:16.527]                               next
[11:01:16.527]                             if (!grepl(pattern, name)) 
[11:01:16.527]                               next
[11:01:16.527]                             invokeRestart(restart)
[11:01:16.527]                             muffled <- TRUE
[11:01:16.527]                             break
[11:01:16.527]                           }
[11:01:16.527]                         }
[11:01:16.527]                       }
[11:01:16.527]                       invisible(muffled)
[11:01:16.527]                     }
[11:01:16.527]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.527]                   }
[11:01:16.527]                 }
[11:01:16.527]                 else {
[11:01:16.527]                   if (TRUE) {
[11:01:16.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.527]                     {
[11:01:16.527]                       inherits <- base::inherits
[11:01:16.527]                       invokeRestart <- base::invokeRestart
[11:01:16.527]                       is.null <- base::is.null
[11:01:16.527]                       muffled <- FALSE
[11:01:16.527]                       if (inherits(cond, "message")) {
[11:01:16.527]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.527]                         if (muffled) 
[11:01:16.527]                           invokeRestart("muffleMessage")
[11:01:16.527]                       }
[11:01:16.527]                       else if (inherits(cond, "warning")) {
[11:01:16.527]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.527]                         if (muffled) 
[11:01:16.527]                           invokeRestart("muffleWarning")
[11:01:16.527]                       }
[11:01:16.527]                       else if (inherits(cond, "condition")) {
[11:01:16.527]                         if (!is.null(pattern)) {
[11:01:16.527]                           computeRestarts <- base::computeRestarts
[11:01:16.527]                           grepl <- base::grepl
[11:01:16.527]                           restarts <- computeRestarts(cond)
[11:01:16.527]                           for (restart in restarts) {
[11:01:16.527]                             name <- restart$name
[11:01:16.527]                             if (is.null(name)) 
[11:01:16.527]                               next
[11:01:16.527]                             if (!grepl(pattern, name)) 
[11:01:16.527]                               next
[11:01:16.527]                             invokeRestart(restart)
[11:01:16.527]                             muffled <- TRUE
[11:01:16.527]                             break
[11:01:16.527]                           }
[11:01:16.527]                         }
[11:01:16.527]                       }
[11:01:16.527]                       invisible(muffled)
[11:01:16.527]                     }
[11:01:16.527]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.527]                   }
[11:01:16.527]                 }
[11:01:16.527]             }
[11:01:16.527]         }))
[11:01:16.527]     }, error = function(ex) {
[11:01:16.527]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.527]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.527]                 ...future.rng), started = ...future.startTime, 
[11:01:16.527]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.527]             version = "1.8"), class = "FutureResult")
[11:01:16.527]     }, finally = {
[11:01:16.527]         if (!identical(...future.workdir, getwd())) 
[11:01:16.527]             setwd(...future.workdir)
[11:01:16.527]         {
[11:01:16.527]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.527]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.527]             }
[11:01:16.527]             base::options(...future.oldOptions)
[11:01:16.527]             if (.Platform$OS.type == "windows") {
[11:01:16.527]                 old_names <- names(...future.oldEnvVars)
[11:01:16.527]                 envs <- base::Sys.getenv()
[11:01:16.527]                 names <- names(envs)
[11:01:16.527]                 common <- intersect(names, old_names)
[11:01:16.527]                 added <- setdiff(names, old_names)
[11:01:16.527]                 removed <- setdiff(old_names, names)
[11:01:16.527]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.527]                   envs[common]]
[11:01:16.527]                 NAMES <- toupper(changed)
[11:01:16.527]                 args <- list()
[11:01:16.527]                 for (kk in seq_along(NAMES)) {
[11:01:16.527]                   name <- changed[[kk]]
[11:01:16.527]                   NAME <- NAMES[[kk]]
[11:01:16.527]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.527]                     next
[11:01:16.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.527]                 }
[11:01:16.527]                 NAMES <- toupper(added)
[11:01:16.527]                 for (kk in seq_along(NAMES)) {
[11:01:16.527]                   name <- added[[kk]]
[11:01:16.527]                   NAME <- NAMES[[kk]]
[11:01:16.527]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.527]                     next
[11:01:16.527]                   args[[name]] <- ""
[11:01:16.527]                 }
[11:01:16.527]                 NAMES <- toupper(removed)
[11:01:16.527]                 for (kk in seq_along(NAMES)) {
[11:01:16.527]                   name <- removed[[kk]]
[11:01:16.527]                   NAME <- NAMES[[kk]]
[11:01:16.527]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.527]                     next
[11:01:16.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.527]                 }
[11:01:16.527]                 if (length(args) > 0) 
[11:01:16.527]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.527]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.527]             }
[11:01:16.527]             else {
[11:01:16.527]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.527]             }
[11:01:16.527]             {
[11:01:16.527]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.527]                   0L) {
[11:01:16.527]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.527]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.527]                   base::options(opts)
[11:01:16.527]                 }
[11:01:16.527]                 {
[11:01:16.527]                   {
[11:01:16.527]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.527]                     NULL
[11:01:16.527]                   }
[11:01:16.527]                   options(future.plan = NULL)
[11:01:16.527]                   if (is.na(NA_character_)) 
[11:01:16.527]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.527]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.527]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.527]                     .init = FALSE)
[11:01:16.527]                 }
[11:01:16.527]             }
[11:01:16.527]         }
[11:01:16.527]     })
[11:01:16.527]     if (TRUE) {
[11:01:16.527]         base::sink(type = "output", split = FALSE)
[11:01:16.527]         if (TRUE) {
[11:01:16.527]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.527]         }
[11:01:16.527]         else {
[11:01:16.527]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.527]         }
[11:01:16.527]         base::close(...future.stdout)
[11:01:16.527]         ...future.stdout <- NULL
[11:01:16.527]     }
[11:01:16.527]     ...future.result$conditions <- ...future.conditions
[11:01:16.527]     ...future.result$finished <- base::Sys.time()
[11:01:16.527]     ...future.result
[11:01:16.527] }
[11:01:16.530] requestCore(): workers = 2
[11:01:16.532] MulticoreFuture started
[11:01:16.532] - Launch lazy future ... done
[11:01:16.532] plan(): Setting new future strategy stack:
[11:01:16.532] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:01:16.533] List of future strategies:
[11:01:16.533] 1. sequential:
[11:01:16.533]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.533]    - tweaked: FALSE
[11:01:16.533]    - call: NULL
[11:01:16.534] plan(): nbrOfWorkers() = 1
[11:01:16.536] plan(): Setting new future strategy stack:
[11:01:16.536] List of future strategies:
[11:01:16.536] 1. multicore:
[11:01:16.536]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:16.536]    - tweaked: FALSE
[11:01:16.536]    - call: plan(strategy)
[11:01:16.539] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.540] result() for MulticoreFuture ...
[11:01:16.541] result() for MulticoreFuture ...
[11:01:16.541] result() for MulticoreFuture ... done
[11:01:16.541] result() for MulticoreFuture ... done
[11:01:16.541] result() for MulticoreFuture ...
[11:01:16.541] result() for MulticoreFuture ... done
[11:01:16.542] getGlobalsAndPackages() ...
[11:01:16.542] Searching for globals...
[11:01:16.543] - globals found: [1] ‘{’
[11:01:16.543] Searching for globals ... DONE
[11:01:16.543] Resolving globals: FALSE
[11:01:16.544] 
[11:01:16.544] 
[11:01:16.544] getGlobalsAndPackages() ... DONE
[11:01:16.544] run() for ‘Future’ ...
[11:01:16.544] - state: ‘created’
[11:01:16.544] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:16.546] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.547] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:16.547]   - Field: ‘label’
[11:01:16.547]   - Field: ‘local’
[11:01:16.547]   - Field: ‘owner’
[11:01:16.547]   - Field: ‘envir’
[11:01:16.547]   - Field: ‘workers’
[11:01:16.547]   - Field: ‘packages’
[11:01:16.547]   - Field: ‘gc’
[11:01:16.547]   - Field: ‘job’
[11:01:16.548]   - Field: ‘conditions’
[11:01:16.548]   - Field: ‘expr’
[11:01:16.548]   - Field: ‘uuid’
[11:01:16.548]   - Field: ‘seed’
[11:01:16.548]   - Field: ‘version’
[11:01:16.548]   - Field: ‘result’
[11:01:16.548]   - Field: ‘asynchronous’
[11:01:16.548]   - Field: ‘calls’
[11:01:16.548]   - Field: ‘globals’
[11:01:16.549]   - Field: ‘stdout’
[11:01:16.549]   - Field: ‘earlySignal’
[11:01:16.549]   - Field: ‘lazy’
[11:01:16.549]   - Field: ‘state’
[11:01:16.549] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:16.549] - Launch lazy future ...
[11:01:16.549] Packages needed by the future expression (n = 0): <none>
[11:01:16.550] Packages needed by future strategies (n = 0): <none>
[11:01:16.550] {
[11:01:16.550]     {
[11:01:16.550]         {
[11:01:16.550]             ...future.startTime <- base::Sys.time()
[11:01:16.550]             {
[11:01:16.550]                 {
[11:01:16.550]                   {
[11:01:16.550]                     {
[11:01:16.550]                       base::local({
[11:01:16.550]                         has_future <- base::requireNamespace("future", 
[11:01:16.550]                           quietly = TRUE)
[11:01:16.550]                         if (has_future) {
[11:01:16.550]                           ns <- base::getNamespace("future")
[11:01:16.550]                           version <- ns[[".package"]][["version"]]
[11:01:16.550]                           if (is.null(version)) 
[11:01:16.550]                             version <- utils::packageVersion("future")
[11:01:16.550]                         }
[11:01:16.550]                         else {
[11:01:16.550]                           version <- NULL
[11:01:16.550]                         }
[11:01:16.550]                         if (!has_future || version < "1.8.0") {
[11:01:16.550]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.550]                             "", base::R.version$version.string), 
[11:01:16.550]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.550]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.550]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.550]                               "release", "version")], collapse = " "), 
[11:01:16.550]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.550]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.550]                             info)
[11:01:16.550]                           info <- base::paste(info, collapse = "; ")
[11:01:16.550]                           if (!has_future) {
[11:01:16.550]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.550]                               info)
[11:01:16.550]                           }
[11:01:16.550]                           else {
[11:01:16.550]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.550]                               info, version)
[11:01:16.550]                           }
[11:01:16.550]                           base::stop(msg)
[11:01:16.550]                         }
[11:01:16.550]                       })
[11:01:16.550]                     }
[11:01:16.550]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.550]                     base::options(mc.cores = 1L)
[11:01:16.550]                   }
[11:01:16.550]                   ...future.strategy.old <- future::plan("list")
[11:01:16.550]                   options(future.plan = NULL)
[11:01:16.550]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.550]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.550]                 }
[11:01:16.550]                 ...future.workdir <- getwd()
[11:01:16.550]             }
[11:01:16.550]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.550]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.550]         }
[11:01:16.550]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.550]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.550]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.550]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.550]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.550]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.550]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.550]             base::names(...future.oldOptions))
[11:01:16.550]     }
[11:01:16.550]     if (FALSE) {
[11:01:16.550]     }
[11:01:16.550]     else {
[11:01:16.550]         if (TRUE) {
[11:01:16.550]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.550]                 open = "w")
[11:01:16.550]         }
[11:01:16.550]         else {
[11:01:16.550]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.550]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.550]         }
[11:01:16.550]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.550]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.550]             base::sink(type = "output", split = FALSE)
[11:01:16.550]             base::close(...future.stdout)
[11:01:16.550]         }, add = TRUE)
[11:01:16.550]     }
[11:01:16.550]     ...future.frame <- base::sys.nframe()
[11:01:16.550]     ...future.conditions <- base::list()
[11:01:16.550]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.550]     if (FALSE) {
[11:01:16.550]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.550]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.550]     }
[11:01:16.550]     ...future.result <- base::tryCatch({
[11:01:16.550]         base::withCallingHandlers({
[11:01:16.550]             ...future.value <- base::withVisible(base::local({
[11:01:16.550]                 withCallingHandlers({
[11:01:16.550]                   {
[11:01:16.550]                     42
[11:01:16.550]                   }
[11:01:16.550]                 }, immediateCondition = function(cond) {
[11:01:16.550]                   save_rds <- function (object, pathname, ...) 
[11:01:16.550]                   {
[11:01:16.550]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:16.550]                     if (file_test("-f", pathname_tmp)) {
[11:01:16.550]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.550]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:16.550]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.550]                         fi_tmp[["mtime"]])
[11:01:16.550]                     }
[11:01:16.550]                     tryCatch({
[11:01:16.550]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:16.550]                     }, error = function(ex) {
[11:01:16.550]                       msg <- conditionMessage(ex)
[11:01:16.550]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.550]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:16.550]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.550]                         fi_tmp[["mtime"]], msg)
[11:01:16.550]                       ex$message <- msg
[11:01:16.550]                       stop(ex)
[11:01:16.550]                     })
[11:01:16.550]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:16.550]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:16.550]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:16.550]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.550]                       fi <- file.info(pathname)
[11:01:16.550]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:16.550]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.550]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:16.550]                         fi[["size"]], fi[["mtime"]])
[11:01:16.550]                       stop(msg)
[11:01:16.550]                     }
[11:01:16.550]                     invisible(pathname)
[11:01:16.550]                   }
[11:01:16.550]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:16.550]                     rootPath = tempdir()) 
[11:01:16.550]                   {
[11:01:16.550]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:16.550]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:16.550]                       tmpdir = path, fileext = ".rds")
[11:01:16.550]                     save_rds(obj, file)
[11:01:16.550]                   }
[11:01:16.550]                   saveImmediateCondition(cond, path = "/tmp/RtmpsecjZy/.future/immediateConditions")
[11:01:16.550]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.550]                   {
[11:01:16.550]                     inherits <- base::inherits
[11:01:16.550]                     invokeRestart <- base::invokeRestart
[11:01:16.550]                     is.null <- base::is.null
[11:01:16.550]                     muffled <- FALSE
[11:01:16.550]                     if (inherits(cond, "message")) {
[11:01:16.550]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.550]                       if (muffled) 
[11:01:16.550]                         invokeRestart("muffleMessage")
[11:01:16.550]                     }
[11:01:16.550]                     else if (inherits(cond, "warning")) {
[11:01:16.550]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.550]                       if (muffled) 
[11:01:16.550]                         invokeRestart("muffleWarning")
[11:01:16.550]                     }
[11:01:16.550]                     else if (inherits(cond, "condition")) {
[11:01:16.550]                       if (!is.null(pattern)) {
[11:01:16.550]                         computeRestarts <- base::computeRestarts
[11:01:16.550]                         grepl <- base::grepl
[11:01:16.550]                         restarts <- computeRestarts(cond)
[11:01:16.550]                         for (restart in restarts) {
[11:01:16.550]                           name <- restart$name
[11:01:16.550]                           if (is.null(name)) 
[11:01:16.550]                             next
[11:01:16.550]                           if (!grepl(pattern, name)) 
[11:01:16.550]                             next
[11:01:16.550]                           invokeRestart(restart)
[11:01:16.550]                           muffled <- TRUE
[11:01:16.550]                           break
[11:01:16.550]                         }
[11:01:16.550]                       }
[11:01:16.550]                     }
[11:01:16.550]                     invisible(muffled)
[11:01:16.550]                   }
[11:01:16.550]                   muffleCondition(cond)
[11:01:16.550]                 })
[11:01:16.550]             }))
[11:01:16.550]             future::FutureResult(value = ...future.value$value, 
[11:01:16.550]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.550]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.550]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.550]                     ...future.globalenv.names))
[11:01:16.550]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.550]         }, condition = base::local({
[11:01:16.550]             c <- base::c
[11:01:16.550]             inherits <- base::inherits
[11:01:16.550]             invokeRestart <- base::invokeRestart
[11:01:16.550]             length <- base::length
[11:01:16.550]             list <- base::list
[11:01:16.550]             seq.int <- base::seq.int
[11:01:16.550]             signalCondition <- base::signalCondition
[11:01:16.550]             sys.calls <- base::sys.calls
[11:01:16.550]             `[[` <- base::`[[`
[11:01:16.550]             `+` <- base::`+`
[11:01:16.550]             `<<-` <- base::`<<-`
[11:01:16.550]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.550]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.550]                   3L)]
[11:01:16.550]             }
[11:01:16.550]             function(cond) {
[11:01:16.550]                 is_error <- inherits(cond, "error")
[11:01:16.550]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.550]                   NULL)
[11:01:16.550]                 if (is_error) {
[11:01:16.550]                   sessionInformation <- function() {
[11:01:16.550]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.550]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.550]                       search = base::search(), system = base::Sys.info())
[11:01:16.550]                   }
[11:01:16.550]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.550]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.550]                     cond$call), session = sessionInformation(), 
[11:01:16.550]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.550]                   signalCondition(cond)
[11:01:16.550]                 }
[11:01:16.550]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.550]                 "immediateCondition"))) {
[11:01:16.550]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.550]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.550]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.550]                   if (TRUE && !signal) {
[11:01:16.550]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.550]                     {
[11:01:16.550]                       inherits <- base::inherits
[11:01:16.550]                       invokeRestart <- base::invokeRestart
[11:01:16.550]                       is.null <- base::is.null
[11:01:16.550]                       muffled <- FALSE
[11:01:16.550]                       if (inherits(cond, "message")) {
[11:01:16.550]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.550]                         if (muffled) 
[11:01:16.550]                           invokeRestart("muffleMessage")
[11:01:16.550]                       }
[11:01:16.550]                       else if (inherits(cond, "warning")) {
[11:01:16.550]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.550]                         if (muffled) 
[11:01:16.550]                           invokeRestart("muffleWarning")
[11:01:16.550]                       }
[11:01:16.550]                       else if (inherits(cond, "condition")) {
[11:01:16.550]                         if (!is.null(pattern)) {
[11:01:16.550]                           computeRestarts <- base::computeRestarts
[11:01:16.550]                           grepl <- base::grepl
[11:01:16.550]                           restarts <- computeRestarts(cond)
[11:01:16.550]                           for (restart in restarts) {
[11:01:16.550]                             name <- restart$name
[11:01:16.550]                             if (is.null(name)) 
[11:01:16.550]                               next
[11:01:16.550]                             if (!grepl(pattern, name)) 
[11:01:16.550]                               next
[11:01:16.550]                             invokeRestart(restart)
[11:01:16.550]                             muffled <- TRUE
[11:01:16.550]                             break
[11:01:16.550]                           }
[11:01:16.550]                         }
[11:01:16.550]                       }
[11:01:16.550]                       invisible(muffled)
[11:01:16.550]                     }
[11:01:16.550]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.550]                   }
[11:01:16.550]                 }
[11:01:16.550]                 else {
[11:01:16.550]                   if (TRUE) {
[11:01:16.550]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.550]                     {
[11:01:16.550]                       inherits <- base::inherits
[11:01:16.550]                       invokeRestart <- base::invokeRestart
[11:01:16.550]                       is.null <- base::is.null
[11:01:16.550]                       muffled <- FALSE
[11:01:16.550]                       if (inherits(cond, "message")) {
[11:01:16.550]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.550]                         if (muffled) 
[11:01:16.550]                           invokeRestart("muffleMessage")
[11:01:16.550]                       }
[11:01:16.550]                       else if (inherits(cond, "warning")) {
[11:01:16.550]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.550]                         if (muffled) 
[11:01:16.550]                           invokeRestart("muffleWarning")
[11:01:16.550]                       }
[11:01:16.550]                       else if (inherits(cond, "condition")) {
[11:01:16.550]                         if (!is.null(pattern)) {
[11:01:16.550]                           computeRestarts <- base::computeRestarts
[11:01:16.550]                           grepl <- base::grepl
[11:01:16.550]                           restarts <- computeRestarts(cond)
[11:01:16.550]                           for (restart in restarts) {
[11:01:16.550]                             name <- restart$name
[11:01:16.550]                             if (is.null(name)) 
[11:01:16.550]                               next
[11:01:16.550]                             if (!grepl(pattern, name)) 
[11:01:16.550]                               next
[11:01:16.550]                             invokeRestart(restart)
[11:01:16.550]                             muffled <- TRUE
[11:01:16.550]                             break
[11:01:16.550]                           }
[11:01:16.550]                         }
[11:01:16.550]                       }
[11:01:16.550]                       invisible(muffled)
[11:01:16.550]                     }
[11:01:16.550]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.550]                   }
[11:01:16.550]                 }
[11:01:16.550]             }
[11:01:16.550]         }))
[11:01:16.550]     }, error = function(ex) {
[11:01:16.550]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.550]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.550]                 ...future.rng), started = ...future.startTime, 
[11:01:16.550]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.550]             version = "1.8"), class = "FutureResult")
[11:01:16.550]     }, finally = {
[11:01:16.550]         if (!identical(...future.workdir, getwd())) 
[11:01:16.550]             setwd(...future.workdir)
[11:01:16.550]         {
[11:01:16.550]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.550]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.550]             }
[11:01:16.550]             base::options(...future.oldOptions)
[11:01:16.550]             if (.Platform$OS.type == "windows") {
[11:01:16.550]                 old_names <- names(...future.oldEnvVars)
[11:01:16.550]                 envs <- base::Sys.getenv()
[11:01:16.550]                 names <- names(envs)
[11:01:16.550]                 common <- intersect(names, old_names)
[11:01:16.550]                 added <- setdiff(names, old_names)
[11:01:16.550]                 removed <- setdiff(old_names, names)
[11:01:16.550]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.550]                   envs[common]]
[11:01:16.550]                 NAMES <- toupper(changed)
[11:01:16.550]                 args <- list()
[11:01:16.550]                 for (kk in seq_along(NAMES)) {
[11:01:16.550]                   name <- changed[[kk]]
[11:01:16.550]                   NAME <- NAMES[[kk]]
[11:01:16.550]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.550]                     next
[11:01:16.550]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.550]                 }
[11:01:16.550]                 NAMES <- toupper(added)
[11:01:16.550]                 for (kk in seq_along(NAMES)) {
[11:01:16.550]                   name <- added[[kk]]
[11:01:16.550]                   NAME <- NAMES[[kk]]
[11:01:16.550]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.550]                     next
[11:01:16.550]                   args[[name]] <- ""
[11:01:16.550]                 }
[11:01:16.550]                 NAMES <- toupper(removed)
[11:01:16.550]                 for (kk in seq_along(NAMES)) {
[11:01:16.550]                   name <- removed[[kk]]
[11:01:16.550]                   NAME <- NAMES[[kk]]
[11:01:16.550]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.550]                     next
[11:01:16.550]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.550]                 }
[11:01:16.550]                 if (length(args) > 0) 
[11:01:16.550]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.550]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.550]             }
[11:01:16.550]             else {
[11:01:16.550]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.550]             }
[11:01:16.550]             {
[11:01:16.550]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.550]                   0L) {
[11:01:16.550]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.550]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.550]                   base::options(opts)
[11:01:16.550]                 }
[11:01:16.550]                 {
[11:01:16.550]                   {
[11:01:16.550]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.550]                     NULL
[11:01:16.550]                   }
[11:01:16.550]                   options(future.plan = NULL)
[11:01:16.550]                   if (is.na(NA_character_)) 
[11:01:16.550]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.550]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.550]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.550]                     .init = FALSE)
[11:01:16.550]                 }
[11:01:16.550]             }
[11:01:16.550]         }
[11:01:16.550]     })
[11:01:16.550]     if (TRUE) {
[11:01:16.550]         base::sink(type = "output", split = FALSE)
[11:01:16.550]         if (TRUE) {
[11:01:16.550]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.550]         }
[11:01:16.550]         else {
[11:01:16.550]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.550]         }
[11:01:16.550]         base::close(...future.stdout)
[11:01:16.550]         ...future.stdout <- NULL
[11:01:16.550]     }
[11:01:16.550]     ...future.result$conditions <- ...future.conditions
[11:01:16.550]     ...future.result$finished <- base::Sys.time()
[11:01:16.550]     ...future.result
[11:01:16.550] }
[11:01:16.553] requestCore(): workers = 2
[11:01:16.555] MulticoreFuture started
[11:01:16.555] - Launch lazy future ... done
[11:01:16.555] run() for ‘MulticoreFuture’ ... done
[11:01:16.556] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[11:01:16.556] List of future strategies:
[11:01:16.556] 1. sequential:
[11:01:16.556]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.556]    - tweaked: FALSE
[11:01:16.556]    - call: NULL
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:01:16.557] plan(): nbrOfWorkers() = 1
[11:01:16.559] plan(): Setting new future strategy stack:
[11:01:16.559] List of future strategies:
[11:01:16.559] 1. multicore:
[11:01:16.559]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:16.559]    - tweaked: FALSE
[11:01:16.559]    - call: plan(strategy)
[11:01:16.562] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.563] result() for MulticoreFuture ...
[11:01:16.563] result() for MulticoreFuture ...
[11:01:16.563] result() for MulticoreFuture ... done
[11:01:16.564] result() for MulticoreFuture ... done
[11:01:16.564] result() for MulticoreFuture ...
[11:01:16.564] result() for MulticoreFuture ... done
[11:01:16.566] getGlobalsAndPackages() ...
[11:01:16.566] 
[11:01:16.566] - globals: [0] <none>
[11:01:16.566] getGlobalsAndPackages() ... DONE
[11:01:16.567] Packages needed by the future expression (n = 0): <none>
[11:01:16.567] Packages needed by future strategies (n = 0): <none>
[11:01:16.567] {
[11:01:16.567]     {
[11:01:16.567]         {
[11:01:16.567]             ...future.startTime <- base::Sys.time()
[11:01:16.567]             {
[11:01:16.567]                 {
[11:01:16.567]                   {
[11:01:16.567]                     {
[11:01:16.567]                       base::local({
[11:01:16.567]                         has_future <- base::requireNamespace("future", 
[11:01:16.567]                           quietly = TRUE)
[11:01:16.567]                         if (has_future) {
[11:01:16.567]                           ns <- base::getNamespace("future")
[11:01:16.567]                           version <- ns[[".package"]][["version"]]
[11:01:16.567]                           if (is.null(version)) 
[11:01:16.567]                             version <- utils::packageVersion("future")
[11:01:16.567]                         }
[11:01:16.567]                         else {
[11:01:16.567]                           version <- NULL
[11:01:16.567]                         }
[11:01:16.567]                         if (!has_future || version < "1.8.0") {
[11:01:16.567]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.567]                             "", base::R.version$version.string), 
[11:01:16.567]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.567]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.567]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.567]                               "release", "version")], collapse = " "), 
[11:01:16.567]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.567]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.567]                             info)
[11:01:16.567]                           info <- base::paste(info, collapse = "; ")
[11:01:16.567]                           if (!has_future) {
[11:01:16.567]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.567]                               info)
[11:01:16.567]                           }
[11:01:16.567]                           else {
[11:01:16.567]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.567]                               info, version)
[11:01:16.567]                           }
[11:01:16.567]                           base::stop(msg)
[11:01:16.567]                         }
[11:01:16.567]                       })
[11:01:16.567]                     }
[11:01:16.567]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.567]                     base::options(mc.cores = 1L)
[11:01:16.567]                   }
[11:01:16.567]                   ...future.strategy.old <- future::plan("list")
[11:01:16.567]                   options(future.plan = NULL)
[11:01:16.567]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.567]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.567]                 }
[11:01:16.567]                 ...future.workdir <- getwd()
[11:01:16.567]             }
[11:01:16.567]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.567]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.567]         }
[11:01:16.567]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.567]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.567]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.567]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.567]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.567]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.567]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.567]             base::names(...future.oldOptions))
[11:01:16.567]     }
[11:01:16.567]     if (FALSE) {
[11:01:16.567]     }
[11:01:16.567]     else {
[11:01:16.567]         if (TRUE) {
[11:01:16.567]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.567]                 open = "w")
[11:01:16.567]         }
[11:01:16.567]         else {
[11:01:16.567]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.567]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.567]         }
[11:01:16.567]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.567]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.567]             base::sink(type = "output", split = FALSE)
[11:01:16.567]             base::close(...future.stdout)
[11:01:16.567]         }, add = TRUE)
[11:01:16.567]     }
[11:01:16.567]     ...future.frame <- base::sys.nframe()
[11:01:16.567]     ...future.conditions <- base::list()
[11:01:16.567]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.567]     if (FALSE) {
[11:01:16.567]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.567]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.567]     }
[11:01:16.567]     ...future.result <- base::tryCatch({
[11:01:16.567]         base::withCallingHandlers({
[11:01:16.567]             ...future.value <- base::withVisible(base::local({
[11:01:16.567]                 withCallingHandlers({
[11:01:16.567]                   42
[11:01:16.567]                 }, immediateCondition = function(cond) {
[11:01:16.567]                   save_rds <- function (object, pathname, ...) 
[11:01:16.567]                   {
[11:01:16.567]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:16.567]                     if (file_test("-f", pathname_tmp)) {
[11:01:16.567]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.567]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:16.567]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.567]                         fi_tmp[["mtime"]])
[11:01:16.567]                     }
[11:01:16.567]                     tryCatch({
[11:01:16.567]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:16.567]                     }, error = function(ex) {
[11:01:16.567]                       msg <- conditionMessage(ex)
[11:01:16.567]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.567]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:16.567]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.567]                         fi_tmp[["mtime"]], msg)
[11:01:16.567]                       ex$message <- msg
[11:01:16.567]                       stop(ex)
[11:01:16.567]                     })
[11:01:16.567]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:16.567]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:16.567]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:16.567]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.567]                       fi <- file.info(pathname)
[11:01:16.567]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:16.567]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.567]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:16.567]                         fi[["size"]], fi[["mtime"]])
[11:01:16.567]                       stop(msg)
[11:01:16.567]                     }
[11:01:16.567]                     invisible(pathname)
[11:01:16.567]                   }
[11:01:16.567]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:16.567]                     rootPath = tempdir()) 
[11:01:16.567]                   {
[11:01:16.567]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:16.567]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:16.567]                       tmpdir = path, fileext = ".rds")
[11:01:16.567]                     save_rds(obj, file)
[11:01:16.567]                   }
[11:01:16.567]                   saveImmediateCondition(cond, path = "/tmp/RtmpsecjZy/.future/immediateConditions")
[11:01:16.567]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.567]                   {
[11:01:16.567]                     inherits <- base::inherits
[11:01:16.567]                     invokeRestart <- base::invokeRestart
[11:01:16.567]                     is.null <- base::is.null
[11:01:16.567]                     muffled <- FALSE
[11:01:16.567]                     if (inherits(cond, "message")) {
[11:01:16.567]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.567]                       if (muffled) 
[11:01:16.567]                         invokeRestart("muffleMessage")
[11:01:16.567]                     }
[11:01:16.567]                     else if (inherits(cond, "warning")) {
[11:01:16.567]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.567]                       if (muffled) 
[11:01:16.567]                         invokeRestart("muffleWarning")
[11:01:16.567]                     }
[11:01:16.567]                     else if (inherits(cond, "condition")) {
[11:01:16.567]                       if (!is.null(pattern)) {
[11:01:16.567]                         computeRestarts <- base::computeRestarts
[11:01:16.567]                         grepl <- base::grepl
[11:01:16.567]                         restarts <- computeRestarts(cond)
[11:01:16.567]                         for (restart in restarts) {
[11:01:16.567]                           name <- restart$name
[11:01:16.567]                           if (is.null(name)) 
[11:01:16.567]                             next
[11:01:16.567]                           if (!grepl(pattern, name)) 
[11:01:16.567]                             next
[11:01:16.567]                           invokeRestart(restart)
[11:01:16.567]                           muffled <- TRUE
[11:01:16.567]                           break
[11:01:16.567]                         }
[11:01:16.567]                       }
[11:01:16.567]                     }
[11:01:16.567]                     invisible(muffled)
[11:01:16.567]                   }
[11:01:16.567]                   muffleCondition(cond)
[11:01:16.567]                 })
[11:01:16.567]             }))
[11:01:16.567]             future::FutureResult(value = ...future.value$value, 
[11:01:16.567]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.567]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.567]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.567]                     ...future.globalenv.names))
[11:01:16.567]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.567]         }, condition = base::local({
[11:01:16.567]             c <- base::c
[11:01:16.567]             inherits <- base::inherits
[11:01:16.567]             invokeRestart <- base::invokeRestart
[11:01:16.567]             length <- base::length
[11:01:16.567]             list <- base::list
[11:01:16.567]             seq.int <- base::seq.int
[11:01:16.567]             signalCondition <- base::signalCondition
[11:01:16.567]             sys.calls <- base::sys.calls
[11:01:16.567]             `[[` <- base::`[[`
[11:01:16.567]             `+` <- base::`+`
[11:01:16.567]             `<<-` <- base::`<<-`
[11:01:16.567]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.567]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.567]                   3L)]
[11:01:16.567]             }
[11:01:16.567]             function(cond) {
[11:01:16.567]                 is_error <- inherits(cond, "error")
[11:01:16.567]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.567]                   NULL)
[11:01:16.567]                 if (is_error) {
[11:01:16.567]                   sessionInformation <- function() {
[11:01:16.567]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.567]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.567]                       search = base::search(), system = base::Sys.info())
[11:01:16.567]                   }
[11:01:16.567]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.567]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.567]                     cond$call), session = sessionInformation(), 
[11:01:16.567]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.567]                   signalCondition(cond)
[11:01:16.567]                 }
[11:01:16.567]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.567]                 "immediateCondition"))) {
[11:01:16.567]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.567]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.567]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.567]                   if (TRUE && !signal) {
[11:01:16.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.567]                     {
[11:01:16.567]                       inherits <- base::inherits
[11:01:16.567]                       invokeRestart <- base::invokeRestart
[11:01:16.567]                       is.null <- base::is.null
[11:01:16.567]                       muffled <- FALSE
[11:01:16.567]                       if (inherits(cond, "message")) {
[11:01:16.567]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.567]                         if (muffled) 
[11:01:16.567]                           invokeRestart("muffleMessage")
[11:01:16.567]                       }
[11:01:16.567]                       else if (inherits(cond, "warning")) {
[11:01:16.567]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.567]                         if (muffled) 
[11:01:16.567]                           invokeRestart("muffleWarning")
[11:01:16.567]                       }
[11:01:16.567]                       else if (inherits(cond, "condition")) {
[11:01:16.567]                         if (!is.null(pattern)) {
[11:01:16.567]                           computeRestarts <- base::computeRestarts
[11:01:16.567]                           grepl <- base::grepl
[11:01:16.567]                           restarts <- computeRestarts(cond)
[11:01:16.567]                           for (restart in restarts) {
[11:01:16.567]                             name <- restart$name
[11:01:16.567]                             if (is.null(name)) 
[11:01:16.567]                               next
[11:01:16.567]                             if (!grepl(pattern, name)) 
[11:01:16.567]                               next
[11:01:16.567]                             invokeRestart(restart)
[11:01:16.567]                             muffled <- TRUE
[11:01:16.567]                             break
[11:01:16.567]                           }
[11:01:16.567]                         }
[11:01:16.567]                       }
[11:01:16.567]                       invisible(muffled)
[11:01:16.567]                     }
[11:01:16.567]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.567]                   }
[11:01:16.567]                 }
[11:01:16.567]                 else {
[11:01:16.567]                   if (TRUE) {
[11:01:16.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.567]                     {
[11:01:16.567]                       inherits <- base::inherits
[11:01:16.567]                       invokeRestart <- base::invokeRestart
[11:01:16.567]                       is.null <- base::is.null
[11:01:16.567]                       muffled <- FALSE
[11:01:16.567]                       if (inherits(cond, "message")) {
[11:01:16.567]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.567]                         if (muffled) 
[11:01:16.567]                           invokeRestart("muffleMessage")
[11:01:16.567]                       }
[11:01:16.567]                       else if (inherits(cond, "warning")) {
[11:01:16.567]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.567]                         if (muffled) 
[11:01:16.567]                           invokeRestart("muffleWarning")
[11:01:16.567]                       }
[11:01:16.567]                       else if (inherits(cond, "condition")) {
[11:01:16.567]                         if (!is.null(pattern)) {
[11:01:16.567]                           computeRestarts <- base::computeRestarts
[11:01:16.567]                           grepl <- base::grepl
[11:01:16.567]                           restarts <- computeRestarts(cond)
[11:01:16.567]                           for (restart in restarts) {
[11:01:16.567]                             name <- restart$name
[11:01:16.567]                             if (is.null(name)) 
[11:01:16.567]                               next
[11:01:16.567]                             if (!grepl(pattern, name)) 
[11:01:16.567]                               next
[11:01:16.567]                             invokeRestart(restart)
[11:01:16.567]                             muffled <- TRUE
[11:01:16.567]                             break
[11:01:16.567]                           }
[11:01:16.567]                         }
[11:01:16.567]                       }
[11:01:16.567]                       invisible(muffled)
[11:01:16.567]                     }
[11:01:16.567]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.567]                   }
[11:01:16.567]                 }
[11:01:16.567]             }
[11:01:16.567]         }))
[11:01:16.567]     }, error = function(ex) {
[11:01:16.567]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.567]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.567]                 ...future.rng), started = ...future.startTime, 
[11:01:16.567]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.567]             version = "1.8"), class = "FutureResult")
[11:01:16.567]     }, finally = {
[11:01:16.567]         if (!identical(...future.workdir, getwd())) 
[11:01:16.567]             setwd(...future.workdir)
[11:01:16.567]         {
[11:01:16.567]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.567]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.567]             }
[11:01:16.567]             base::options(...future.oldOptions)
[11:01:16.567]             if (.Platform$OS.type == "windows") {
[11:01:16.567]                 old_names <- names(...future.oldEnvVars)
[11:01:16.567]                 envs <- base::Sys.getenv()
[11:01:16.567]                 names <- names(envs)
[11:01:16.567]                 common <- intersect(names, old_names)
[11:01:16.567]                 added <- setdiff(names, old_names)
[11:01:16.567]                 removed <- setdiff(old_names, names)
[11:01:16.567]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.567]                   envs[common]]
[11:01:16.567]                 NAMES <- toupper(changed)
[11:01:16.567]                 args <- list()
[11:01:16.567]                 for (kk in seq_along(NAMES)) {
[11:01:16.567]                   name <- changed[[kk]]
[11:01:16.567]                   NAME <- NAMES[[kk]]
[11:01:16.567]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.567]                     next
[11:01:16.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.567]                 }
[11:01:16.567]                 NAMES <- toupper(added)
[11:01:16.567]                 for (kk in seq_along(NAMES)) {
[11:01:16.567]                   name <- added[[kk]]
[11:01:16.567]                   NAME <- NAMES[[kk]]
[11:01:16.567]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.567]                     next
[11:01:16.567]                   args[[name]] <- ""
[11:01:16.567]                 }
[11:01:16.567]                 NAMES <- toupper(removed)
[11:01:16.567]                 for (kk in seq_along(NAMES)) {
[11:01:16.567]                   name <- removed[[kk]]
[11:01:16.567]                   NAME <- NAMES[[kk]]
[11:01:16.567]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.567]                     next
[11:01:16.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.567]                 }
[11:01:16.567]                 if (length(args) > 0) 
[11:01:16.567]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.567]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.567]             }
[11:01:16.567]             else {
[11:01:16.567]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.567]             }
[11:01:16.567]             {
[11:01:16.567]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.567]                   0L) {
[11:01:16.567]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.567]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.567]                   base::options(opts)
[11:01:16.567]                 }
[11:01:16.567]                 {
[11:01:16.567]                   {
[11:01:16.567]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.567]                     NULL
[11:01:16.567]                   }
[11:01:16.567]                   options(future.plan = NULL)
[11:01:16.567]                   if (is.na(NA_character_)) 
[11:01:16.567]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.567]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.567]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.567]                     .init = FALSE)
[11:01:16.567]                 }
[11:01:16.567]             }
[11:01:16.567]         }
[11:01:16.567]     })
[11:01:16.567]     if (TRUE) {
[11:01:16.567]         base::sink(type = "output", split = FALSE)
[11:01:16.567]         if (TRUE) {
[11:01:16.567]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.567]         }
[11:01:16.567]         else {
[11:01:16.567]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.567]         }
[11:01:16.567]         base::close(...future.stdout)
[11:01:16.567]         ...future.stdout <- NULL
[11:01:16.567]     }
[11:01:16.567]     ...future.result$conditions <- ...future.conditions
[11:01:16.567]     ...future.result$finished <- base::Sys.time()
[11:01:16.567]     ...future.result
[11:01:16.567] }
[11:01:16.570] requestCore(): workers = 2
[11:01:16.572] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:01:16.573] plan(): Setting new future strategy stack:
[11:01:16.573] List of future strategies:
[11:01:16.573] 1. sequential:
[11:01:16.573]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.573]    - tweaked: FALSE
[11:01:16.573]    - call: NULL
[11:01:16.574] plan(): nbrOfWorkers() = 1
[11:01:16.576] plan(): Setting new future strategy stack:
[11:01:16.577] List of future strategies:
[11:01:16.577] 1. multicore:
[11:01:16.577]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:16.577]    - tweaked: FALSE
[11:01:16.577]    - call: plan(strategy)
[11:01:16.581] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.581] result() for MulticoreFuture ...
[11:01:16.582] result() for MulticoreFuture ...
[11:01:16.582] result() for MulticoreFuture ... done
[11:01:16.583] result() for MulticoreFuture ... done
[11:01:16.583] result() for MulticoreFuture ...
[11:01:16.583] result() for MulticoreFuture ... done
[11:01:16.583] getGlobalsAndPackages() ...
[11:01:16.583] Searching for globals...
[11:01:16.584] 
[11:01:16.584] Searching for globals ... DONE
[11:01:16.584] - globals: [0] <none>
[11:01:16.584] getGlobalsAndPackages() ... DONE
[11:01:16.584] run() for ‘Future’ ...
[11:01:16.584] - state: ‘created’
[11:01:16.585] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:16.587] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.587] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:16.587]   - Field: ‘label’
[11:01:16.587]   - Field: ‘local’
[11:01:16.587]   - Field: ‘owner’
[11:01:16.587]   - Field: ‘envir’
[11:01:16.588]   - Field: ‘workers’
[11:01:16.588]   - Field: ‘packages’
[11:01:16.588]   - Field: ‘gc’
[11:01:16.588]   - Field: ‘job’
[11:01:16.588]   - Field: ‘conditions’
[11:01:16.588]   - Field: ‘expr’
[11:01:16.588]   - Field: ‘uuid’
[11:01:16.588]   - Field: ‘seed’
[11:01:16.588]   - Field: ‘version’
[11:01:16.588]   - Field: ‘result’
[11:01:16.589]   - Field: ‘asynchronous’
[11:01:16.589]   - Field: ‘calls’
[11:01:16.589]   - Field: ‘globals’
[11:01:16.589]   - Field: ‘stdout’
[11:01:16.589]   - Field: ‘earlySignal’
[11:01:16.589]   - Field: ‘lazy’
[11:01:16.589]   - Field: ‘state’
[11:01:16.589] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:16.589] - Launch lazy future ...
[11:01:16.590] Packages needed by the future expression (n = 0): <none>
[11:01:16.590] Packages needed by future strategies (n = 0): <none>
[11:01:16.590] {
[11:01:16.590]     {
[11:01:16.590]         {
[11:01:16.590]             ...future.startTime <- base::Sys.time()
[11:01:16.590]             {
[11:01:16.590]                 {
[11:01:16.590]                   {
[11:01:16.590]                     {
[11:01:16.590]                       base::local({
[11:01:16.590]                         has_future <- base::requireNamespace("future", 
[11:01:16.590]                           quietly = TRUE)
[11:01:16.590]                         if (has_future) {
[11:01:16.590]                           ns <- base::getNamespace("future")
[11:01:16.590]                           version <- ns[[".package"]][["version"]]
[11:01:16.590]                           if (is.null(version)) 
[11:01:16.590]                             version <- utils::packageVersion("future")
[11:01:16.590]                         }
[11:01:16.590]                         else {
[11:01:16.590]                           version <- NULL
[11:01:16.590]                         }
[11:01:16.590]                         if (!has_future || version < "1.8.0") {
[11:01:16.590]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.590]                             "", base::R.version$version.string), 
[11:01:16.590]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.590]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.590]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.590]                               "release", "version")], collapse = " "), 
[11:01:16.590]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.590]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.590]                             info)
[11:01:16.590]                           info <- base::paste(info, collapse = "; ")
[11:01:16.590]                           if (!has_future) {
[11:01:16.590]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.590]                               info)
[11:01:16.590]                           }
[11:01:16.590]                           else {
[11:01:16.590]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.590]                               info, version)
[11:01:16.590]                           }
[11:01:16.590]                           base::stop(msg)
[11:01:16.590]                         }
[11:01:16.590]                       })
[11:01:16.590]                     }
[11:01:16.590]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.590]                     base::options(mc.cores = 1L)
[11:01:16.590]                   }
[11:01:16.590]                   ...future.strategy.old <- future::plan("list")
[11:01:16.590]                   options(future.plan = NULL)
[11:01:16.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.590]                 }
[11:01:16.590]                 ...future.workdir <- getwd()
[11:01:16.590]             }
[11:01:16.590]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.590]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.590]         }
[11:01:16.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.590]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.590]             base::names(...future.oldOptions))
[11:01:16.590]     }
[11:01:16.590]     if (FALSE) {
[11:01:16.590]     }
[11:01:16.590]     else {
[11:01:16.590]         if (TRUE) {
[11:01:16.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.590]                 open = "w")
[11:01:16.590]         }
[11:01:16.590]         else {
[11:01:16.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.590]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.590]         }
[11:01:16.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.590]             base::sink(type = "output", split = FALSE)
[11:01:16.590]             base::close(...future.stdout)
[11:01:16.590]         }, add = TRUE)
[11:01:16.590]     }
[11:01:16.590]     ...future.frame <- base::sys.nframe()
[11:01:16.590]     ...future.conditions <- base::list()
[11:01:16.590]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.590]     if (FALSE) {
[11:01:16.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.590]     }
[11:01:16.590]     ...future.result <- base::tryCatch({
[11:01:16.590]         base::withCallingHandlers({
[11:01:16.590]             ...future.value <- base::withVisible(base::local({
[11:01:16.590]                 withCallingHandlers({
[11:01:16.590]                   42
[11:01:16.590]                 }, immediateCondition = function(cond) {
[11:01:16.590]                   save_rds <- function (object, pathname, ...) 
[11:01:16.590]                   {
[11:01:16.590]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:16.590]                     if (file_test("-f", pathname_tmp)) {
[11:01:16.590]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.590]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:16.590]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.590]                         fi_tmp[["mtime"]])
[11:01:16.590]                     }
[11:01:16.590]                     tryCatch({
[11:01:16.590]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:16.590]                     }, error = function(ex) {
[11:01:16.590]                       msg <- conditionMessage(ex)
[11:01:16.590]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.590]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:16.590]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.590]                         fi_tmp[["mtime"]], msg)
[11:01:16.590]                       ex$message <- msg
[11:01:16.590]                       stop(ex)
[11:01:16.590]                     })
[11:01:16.590]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:16.590]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:16.590]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:16.590]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.590]                       fi <- file.info(pathname)
[11:01:16.590]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:16.590]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.590]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:16.590]                         fi[["size"]], fi[["mtime"]])
[11:01:16.590]                       stop(msg)
[11:01:16.590]                     }
[11:01:16.590]                     invisible(pathname)
[11:01:16.590]                   }
[11:01:16.590]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:16.590]                     rootPath = tempdir()) 
[11:01:16.590]                   {
[11:01:16.590]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:16.590]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:16.590]                       tmpdir = path, fileext = ".rds")
[11:01:16.590]                     save_rds(obj, file)
[11:01:16.590]                   }
[11:01:16.590]                   saveImmediateCondition(cond, path = "/tmp/RtmpsecjZy/.future/immediateConditions")
[11:01:16.590]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.590]                   {
[11:01:16.590]                     inherits <- base::inherits
[11:01:16.590]                     invokeRestart <- base::invokeRestart
[11:01:16.590]                     is.null <- base::is.null
[11:01:16.590]                     muffled <- FALSE
[11:01:16.590]                     if (inherits(cond, "message")) {
[11:01:16.590]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.590]                       if (muffled) 
[11:01:16.590]                         invokeRestart("muffleMessage")
[11:01:16.590]                     }
[11:01:16.590]                     else if (inherits(cond, "warning")) {
[11:01:16.590]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.590]                       if (muffled) 
[11:01:16.590]                         invokeRestart("muffleWarning")
[11:01:16.590]                     }
[11:01:16.590]                     else if (inherits(cond, "condition")) {
[11:01:16.590]                       if (!is.null(pattern)) {
[11:01:16.590]                         computeRestarts <- base::computeRestarts
[11:01:16.590]                         grepl <- base::grepl
[11:01:16.590]                         restarts <- computeRestarts(cond)
[11:01:16.590]                         for (restart in restarts) {
[11:01:16.590]                           name <- restart$name
[11:01:16.590]                           if (is.null(name)) 
[11:01:16.590]                             next
[11:01:16.590]                           if (!grepl(pattern, name)) 
[11:01:16.590]                             next
[11:01:16.590]                           invokeRestart(restart)
[11:01:16.590]                           muffled <- TRUE
[11:01:16.590]                           break
[11:01:16.590]                         }
[11:01:16.590]                       }
[11:01:16.590]                     }
[11:01:16.590]                     invisible(muffled)
[11:01:16.590]                   }
[11:01:16.590]                   muffleCondition(cond)
[11:01:16.590]                 })
[11:01:16.590]             }))
[11:01:16.590]             future::FutureResult(value = ...future.value$value, 
[11:01:16.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.590]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.590]                     ...future.globalenv.names))
[11:01:16.590]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.590]         }, condition = base::local({
[11:01:16.590]             c <- base::c
[11:01:16.590]             inherits <- base::inherits
[11:01:16.590]             invokeRestart <- base::invokeRestart
[11:01:16.590]             length <- base::length
[11:01:16.590]             list <- base::list
[11:01:16.590]             seq.int <- base::seq.int
[11:01:16.590]             signalCondition <- base::signalCondition
[11:01:16.590]             sys.calls <- base::sys.calls
[11:01:16.590]             `[[` <- base::`[[`
[11:01:16.590]             `+` <- base::`+`
[11:01:16.590]             `<<-` <- base::`<<-`
[11:01:16.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.590]                   3L)]
[11:01:16.590]             }
[11:01:16.590]             function(cond) {
[11:01:16.590]                 is_error <- inherits(cond, "error")
[11:01:16.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.590]                   NULL)
[11:01:16.590]                 if (is_error) {
[11:01:16.590]                   sessionInformation <- function() {
[11:01:16.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.590]                       search = base::search(), system = base::Sys.info())
[11:01:16.590]                   }
[11:01:16.590]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.590]                     cond$call), session = sessionInformation(), 
[11:01:16.590]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.590]                   signalCondition(cond)
[11:01:16.590]                 }
[11:01:16.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.590]                 "immediateCondition"))) {
[11:01:16.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.590]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.590]                   if (TRUE && !signal) {
[11:01:16.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.590]                     {
[11:01:16.590]                       inherits <- base::inherits
[11:01:16.590]                       invokeRestart <- base::invokeRestart
[11:01:16.590]                       is.null <- base::is.null
[11:01:16.590]                       muffled <- FALSE
[11:01:16.590]                       if (inherits(cond, "message")) {
[11:01:16.590]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.590]                         if (muffled) 
[11:01:16.590]                           invokeRestart("muffleMessage")
[11:01:16.590]                       }
[11:01:16.590]                       else if (inherits(cond, "warning")) {
[11:01:16.590]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.590]                         if (muffled) 
[11:01:16.590]                           invokeRestart("muffleWarning")
[11:01:16.590]                       }
[11:01:16.590]                       else if (inherits(cond, "condition")) {
[11:01:16.590]                         if (!is.null(pattern)) {
[11:01:16.590]                           computeRestarts <- base::computeRestarts
[11:01:16.590]                           grepl <- base::grepl
[11:01:16.590]                           restarts <- computeRestarts(cond)
[11:01:16.590]                           for (restart in restarts) {
[11:01:16.590]                             name <- restart$name
[11:01:16.590]                             if (is.null(name)) 
[11:01:16.590]                               next
[11:01:16.590]                             if (!grepl(pattern, name)) 
[11:01:16.590]                               next
[11:01:16.590]                             invokeRestart(restart)
[11:01:16.590]                             muffled <- TRUE
[11:01:16.590]                             break
[11:01:16.590]                           }
[11:01:16.590]                         }
[11:01:16.590]                       }
[11:01:16.590]                       invisible(muffled)
[11:01:16.590]                     }
[11:01:16.590]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.590]                   }
[11:01:16.590]                 }
[11:01:16.590]                 else {
[11:01:16.590]                   if (TRUE) {
[11:01:16.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.590]                     {
[11:01:16.590]                       inherits <- base::inherits
[11:01:16.590]                       invokeRestart <- base::invokeRestart
[11:01:16.590]                       is.null <- base::is.null
[11:01:16.590]                       muffled <- FALSE
[11:01:16.590]                       if (inherits(cond, "message")) {
[11:01:16.590]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.590]                         if (muffled) 
[11:01:16.590]                           invokeRestart("muffleMessage")
[11:01:16.590]                       }
[11:01:16.590]                       else if (inherits(cond, "warning")) {
[11:01:16.590]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.590]                         if (muffled) 
[11:01:16.590]                           invokeRestart("muffleWarning")
[11:01:16.590]                       }
[11:01:16.590]                       else if (inherits(cond, "condition")) {
[11:01:16.590]                         if (!is.null(pattern)) {
[11:01:16.590]                           computeRestarts <- base::computeRestarts
[11:01:16.590]                           grepl <- base::grepl
[11:01:16.590]                           restarts <- computeRestarts(cond)
[11:01:16.590]                           for (restart in restarts) {
[11:01:16.590]                             name <- restart$name
[11:01:16.590]                             if (is.null(name)) 
[11:01:16.590]                               next
[11:01:16.590]                             if (!grepl(pattern, name)) 
[11:01:16.590]                               next
[11:01:16.590]                             invokeRestart(restart)
[11:01:16.590]                             muffled <- TRUE
[11:01:16.590]                             break
[11:01:16.590]                           }
[11:01:16.590]                         }
[11:01:16.590]                       }
[11:01:16.590]                       invisible(muffled)
[11:01:16.590]                     }
[11:01:16.590]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.590]                   }
[11:01:16.590]                 }
[11:01:16.590]             }
[11:01:16.590]         }))
[11:01:16.590]     }, error = function(ex) {
[11:01:16.590]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.590]                 ...future.rng), started = ...future.startTime, 
[11:01:16.590]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.590]             version = "1.8"), class = "FutureResult")
[11:01:16.590]     }, finally = {
[11:01:16.590]         if (!identical(...future.workdir, getwd())) 
[11:01:16.590]             setwd(...future.workdir)
[11:01:16.590]         {
[11:01:16.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.590]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.590]             }
[11:01:16.590]             base::options(...future.oldOptions)
[11:01:16.590]             if (.Platform$OS.type == "windows") {
[11:01:16.590]                 old_names <- names(...future.oldEnvVars)
[11:01:16.590]                 envs <- base::Sys.getenv()
[11:01:16.590]                 names <- names(envs)
[11:01:16.590]                 common <- intersect(names, old_names)
[11:01:16.590]                 added <- setdiff(names, old_names)
[11:01:16.590]                 removed <- setdiff(old_names, names)
[11:01:16.590]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.590]                   envs[common]]
[11:01:16.590]                 NAMES <- toupper(changed)
[11:01:16.590]                 args <- list()
[11:01:16.590]                 for (kk in seq_along(NAMES)) {
[11:01:16.590]                   name <- changed[[kk]]
[11:01:16.590]                   NAME <- NAMES[[kk]]
[11:01:16.590]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.590]                     next
[11:01:16.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.590]                 }
[11:01:16.590]                 NAMES <- toupper(added)
[11:01:16.590]                 for (kk in seq_along(NAMES)) {
[11:01:16.590]                   name <- added[[kk]]
[11:01:16.590]                   NAME <- NAMES[[kk]]
[11:01:16.590]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.590]                     next
[11:01:16.590]                   args[[name]] <- ""
[11:01:16.590]                 }
[11:01:16.590]                 NAMES <- toupper(removed)
[11:01:16.590]                 for (kk in seq_along(NAMES)) {
[11:01:16.590]                   name <- removed[[kk]]
[11:01:16.590]                   NAME <- NAMES[[kk]]
[11:01:16.590]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.590]                     next
[11:01:16.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.590]                 }
[11:01:16.590]                 if (length(args) > 0) 
[11:01:16.590]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.590]             }
[11:01:16.590]             else {
[11:01:16.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.590]             }
[11:01:16.590]             {
[11:01:16.590]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.590]                   0L) {
[11:01:16.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.590]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.590]                   base::options(opts)
[11:01:16.590]                 }
[11:01:16.590]                 {
[11:01:16.590]                   {
[11:01:16.590]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.590]                     NULL
[11:01:16.590]                   }
[11:01:16.590]                   options(future.plan = NULL)
[11:01:16.590]                   if (is.na(NA_character_)) 
[11:01:16.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.590]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.590]                     .init = FALSE)
[11:01:16.590]                 }
[11:01:16.590]             }
[11:01:16.590]         }
[11:01:16.590]     })
[11:01:16.590]     if (TRUE) {
[11:01:16.590]         base::sink(type = "output", split = FALSE)
[11:01:16.590]         if (TRUE) {
[11:01:16.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.590]         }
[11:01:16.590]         else {
[11:01:16.590]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.590]         }
[11:01:16.590]         base::close(...future.stdout)
[11:01:16.590]         ...future.stdout <- NULL
[11:01:16.590]     }
[11:01:16.590]     ...future.result$conditions <- ...future.conditions
[11:01:16.590]     ...future.result$finished <- base::Sys.time()
[11:01:16.590]     ...future.result
[11:01:16.590] }
[11:01:16.593] requestCore(): workers = 2
[11:01:16.595] MulticoreFuture started
[11:01:16.595] - Launch lazy future ... done
[11:01:16.595] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:01:16.596] plan(): Setting new future strategy stack:
[11:01:16.596] List of future strategies:
[11:01:16.596] 1. sequential:
[11:01:16.596]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.596]    - tweaked: FALSE
[11:01:16.596]    - call: NULL
[11:01:16.597] plan(): nbrOfWorkers() = 1
[11:01:16.599] plan(): Setting new future strategy stack:
[11:01:16.599] List of future strategies:
[11:01:16.599] 1. multicore:
[11:01:16.599]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:16.599]    - tweaked: FALSE
[11:01:16.599]    - call: plan(strategy)
[11:01:16.602] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.603] result() for MulticoreFuture ...
[11:01:16.603] result() for MulticoreFuture ...
[11:01:16.604] result() for MulticoreFuture ... done
[11:01:16.604] result() for MulticoreFuture ... done
[11:01:16.604] result() for MulticoreFuture ...
[11:01:16.604] result() for MulticoreFuture ... done
[11:01:16.604] getGlobalsAndPackages() ...
[11:01:16.605] Searching for globals...
[11:01:16.605] - globals found: [1] ‘{’
[11:01:16.606] Searching for globals ... DONE
[11:01:16.606] Resolving globals: FALSE
[11:01:16.606] 
[11:01:16.606] 
[11:01:16.606] getGlobalsAndPackages() ... DONE
[11:01:16.607] run() for ‘Future’ ...
[11:01:16.609] - state: ‘created’
[11:01:16.610] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:16.612] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.612] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:16.612]   - Field: ‘label’
[11:01:16.612]   - Field: ‘local’
[11:01:16.612]   - Field: ‘owner’
[11:01:16.612]   - Field: ‘envir’
[11:01:16.613]   - Field: ‘workers’
[11:01:16.613]   - Field: ‘packages’
[11:01:16.613]   - Field: ‘gc’
[11:01:16.613]   - Field: ‘job’
[11:01:16.613]   - Field: ‘conditions’
[11:01:16.613]   - Field: ‘expr’
[11:01:16.613]   - Field: ‘uuid’
[11:01:16.613]   - Field: ‘seed’
[11:01:16.614]   - Field: ‘version’
[11:01:16.614]   - Field: ‘result’
[11:01:16.614]   - Field: ‘asynchronous’
[11:01:16.614]   - Field: ‘calls’
[11:01:16.614]   - Field: ‘globals’
[11:01:16.614]   - Field: ‘stdout’
[11:01:16.614]   - Field: ‘earlySignal’
[11:01:16.614]   - Field: ‘lazy’
[11:01:16.614]   - Field: ‘state’
[11:01:16.615] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:16.615] - Launch lazy future ...
[11:01:16.615] Packages needed by the future expression (n = 0): <none>
[11:01:16.615] Packages needed by future strategies (n = 0): <none>
[11:01:16.616] {
[11:01:16.616]     {
[11:01:16.616]         {
[11:01:16.616]             ...future.startTime <- base::Sys.time()
[11:01:16.616]             {
[11:01:16.616]                 {
[11:01:16.616]                   {
[11:01:16.616]                     {
[11:01:16.616]                       base::local({
[11:01:16.616]                         has_future <- base::requireNamespace("future", 
[11:01:16.616]                           quietly = TRUE)
[11:01:16.616]                         if (has_future) {
[11:01:16.616]                           ns <- base::getNamespace("future")
[11:01:16.616]                           version <- ns[[".package"]][["version"]]
[11:01:16.616]                           if (is.null(version)) 
[11:01:16.616]                             version <- utils::packageVersion("future")
[11:01:16.616]                         }
[11:01:16.616]                         else {
[11:01:16.616]                           version <- NULL
[11:01:16.616]                         }
[11:01:16.616]                         if (!has_future || version < "1.8.0") {
[11:01:16.616]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:16.616]                             "", base::R.version$version.string), 
[11:01:16.616]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:16.616]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:16.616]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:16.616]                               "release", "version")], collapse = " "), 
[11:01:16.616]                             hostname = base::Sys.info()[["nodename"]])
[11:01:16.616]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:16.616]                             info)
[11:01:16.616]                           info <- base::paste(info, collapse = "; ")
[11:01:16.616]                           if (!has_future) {
[11:01:16.616]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:16.616]                               info)
[11:01:16.616]                           }
[11:01:16.616]                           else {
[11:01:16.616]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:16.616]                               info, version)
[11:01:16.616]                           }
[11:01:16.616]                           base::stop(msg)
[11:01:16.616]                         }
[11:01:16.616]                       })
[11:01:16.616]                     }
[11:01:16.616]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:16.616]                     base::options(mc.cores = 1L)
[11:01:16.616]                   }
[11:01:16.616]                   ...future.strategy.old <- future::plan("list")
[11:01:16.616]                   options(future.plan = NULL)
[11:01:16.616]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.616]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:16.616]                 }
[11:01:16.616]                 ...future.workdir <- getwd()
[11:01:16.616]             }
[11:01:16.616]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:16.616]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:16.616]         }
[11:01:16.616]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:16.616]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:16.616]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:16.616]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:16.616]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:16.616]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:16.616]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:16.616]             base::names(...future.oldOptions))
[11:01:16.616]     }
[11:01:16.616]     if (FALSE) {
[11:01:16.616]     }
[11:01:16.616]     else {
[11:01:16.616]         if (TRUE) {
[11:01:16.616]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:16.616]                 open = "w")
[11:01:16.616]         }
[11:01:16.616]         else {
[11:01:16.616]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:16.616]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:16.616]         }
[11:01:16.616]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:16.616]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:16.616]             base::sink(type = "output", split = FALSE)
[11:01:16.616]             base::close(...future.stdout)
[11:01:16.616]         }, add = TRUE)
[11:01:16.616]     }
[11:01:16.616]     ...future.frame <- base::sys.nframe()
[11:01:16.616]     ...future.conditions <- base::list()
[11:01:16.616]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:16.616]     if (FALSE) {
[11:01:16.616]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:16.616]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:16.616]     }
[11:01:16.616]     ...future.result <- base::tryCatch({
[11:01:16.616]         base::withCallingHandlers({
[11:01:16.616]             ...future.value <- base::withVisible(base::local({
[11:01:16.616]                 withCallingHandlers({
[11:01:16.616]                   {
[11:01:16.616]                     42
[11:01:16.616]                   }
[11:01:16.616]                 }, immediateCondition = function(cond) {
[11:01:16.616]                   save_rds <- function (object, pathname, ...) 
[11:01:16.616]                   {
[11:01:16.616]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:16.616]                     if (file_test("-f", pathname_tmp)) {
[11:01:16.616]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.616]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:16.616]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.616]                         fi_tmp[["mtime"]])
[11:01:16.616]                     }
[11:01:16.616]                     tryCatch({
[11:01:16.616]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:16.616]                     }, error = function(ex) {
[11:01:16.616]                       msg <- conditionMessage(ex)
[11:01:16.616]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.616]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:16.616]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.616]                         fi_tmp[["mtime"]], msg)
[11:01:16.616]                       ex$message <- msg
[11:01:16.616]                       stop(ex)
[11:01:16.616]                     })
[11:01:16.616]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:16.616]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:16.616]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:16.616]                       fi_tmp <- file.info(pathname_tmp)
[11:01:16.616]                       fi <- file.info(pathname)
[11:01:16.616]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:16.616]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:16.616]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:16.616]                         fi[["size"]], fi[["mtime"]])
[11:01:16.616]                       stop(msg)
[11:01:16.616]                     }
[11:01:16.616]                     invisible(pathname)
[11:01:16.616]                   }
[11:01:16.616]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:16.616]                     rootPath = tempdir()) 
[11:01:16.616]                   {
[11:01:16.616]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:16.616]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:16.616]                       tmpdir = path, fileext = ".rds")
[11:01:16.616]                     save_rds(obj, file)
[11:01:16.616]                   }
[11:01:16.616]                   saveImmediateCondition(cond, path = "/tmp/RtmpsecjZy/.future/immediateConditions")
[11:01:16.616]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.616]                   {
[11:01:16.616]                     inherits <- base::inherits
[11:01:16.616]                     invokeRestart <- base::invokeRestart
[11:01:16.616]                     is.null <- base::is.null
[11:01:16.616]                     muffled <- FALSE
[11:01:16.616]                     if (inherits(cond, "message")) {
[11:01:16.616]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:16.616]                       if (muffled) 
[11:01:16.616]                         invokeRestart("muffleMessage")
[11:01:16.616]                     }
[11:01:16.616]                     else if (inherits(cond, "warning")) {
[11:01:16.616]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:16.616]                       if (muffled) 
[11:01:16.616]                         invokeRestart("muffleWarning")
[11:01:16.616]                     }
[11:01:16.616]                     else if (inherits(cond, "condition")) {
[11:01:16.616]                       if (!is.null(pattern)) {
[11:01:16.616]                         computeRestarts <- base::computeRestarts
[11:01:16.616]                         grepl <- base::grepl
[11:01:16.616]                         restarts <- computeRestarts(cond)
[11:01:16.616]                         for (restart in restarts) {
[11:01:16.616]                           name <- restart$name
[11:01:16.616]                           if (is.null(name)) 
[11:01:16.616]                             next
[11:01:16.616]                           if (!grepl(pattern, name)) 
[11:01:16.616]                             next
[11:01:16.616]                           invokeRestart(restart)
[11:01:16.616]                           muffled <- TRUE
[11:01:16.616]                           break
[11:01:16.616]                         }
[11:01:16.616]                       }
[11:01:16.616]                     }
[11:01:16.616]                     invisible(muffled)
[11:01:16.616]                   }
[11:01:16.616]                   muffleCondition(cond)
[11:01:16.616]                 })
[11:01:16.616]             }))
[11:01:16.616]             future::FutureResult(value = ...future.value$value, 
[11:01:16.616]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.616]                   ...future.rng), globalenv = if (FALSE) 
[11:01:16.616]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:16.616]                     ...future.globalenv.names))
[11:01:16.616]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:16.616]         }, condition = base::local({
[11:01:16.616]             c <- base::c
[11:01:16.616]             inherits <- base::inherits
[11:01:16.616]             invokeRestart <- base::invokeRestart
[11:01:16.616]             length <- base::length
[11:01:16.616]             list <- base::list
[11:01:16.616]             seq.int <- base::seq.int
[11:01:16.616]             signalCondition <- base::signalCondition
[11:01:16.616]             sys.calls <- base::sys.calls
[11:01:16.616]             `[[` <- base::`[[`
[11:01:16.616]             `+` <- base::`+`
[11:01:16.616]             `<<-` <- base::`<<-`
[11:01:16.616]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:16.616]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:16.616]                   3L)]
[11:01:16.616]             }
[11:01:16.616]             function(cond) {
[11:01:16.616]                 is_error <- inherits(cond, "error")
[11:01:16.616]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:16.616]                   NULL)
[11:01:16.616]                 if (is_error) {
[11:01:16.616]                   sessionInformation <- function() {
[11:01:16.616]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:16.616]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:16.616]                       search = base::search(), system = base::Sys.info())
[11:01:16.616]                   }
[11:01:16.616]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.616]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:16.616]                     cond$call), session = sessionInformation(), 
[11:01:16.616]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:16.616]                   signalCondition(cond)
[11:01:16.616]                 }
[11:01:16.616]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:16.616]                 "immediateCondition"))) {
[11:01:16.616]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:16.616]                   ...future.conditions[[length(...future.conditions) + 
[11:01:16.616]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:16.616]                   if (TRUE && !signal) {
[11:01:16.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.616]                     {
[11:01:16.616]                       inherits <- base::inherits
[11:01:16.616]                       invokeRestart <- base::invokeRestart
[11:01:16.616]                       is.null <- base::is.null
[11:01:16.616]                       muffled <- FALSE
[11:01:16.616]                       if (inherits(cond, "message")) {
[11:01:16.616]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.616]                         if (muffled) 
[11:01:16.616]                           invokeRestart("muffleMessage")
[11:01:16.616]                       }
[11:01:16.616]                       else if (inherits(cond, "warning")) {
[11:01:16.616]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.616]                         if (muffled) 
[11:01:16.616]                           invokeRestart("muffleWarning")
[11:01:16.616]                       }
[11:01:16.616]                       else if (inherits(cond, "condition")) {
[11:01:16.616]                         if (!is.null(pattern)) {
[11:01:16.616]                           computeRestarts <- base::computeRestarts
[11:01:16.616]                           grepl <- base::grepl
[11:01:16.616]                           restarts <- computeRestarts(cond)
[11:01:16.616]                           for (restart in restarts) {
[11:01:16.616]                             name <- restart$name
[11:01:16.616]                             if (is.null(name)) 
[11:01:16.616]                               next
[11:01:16.616]                             if (!grepl(pattern, name)) 
[11:01:16.616]                               next
[11:01:16.616]                             invokeRestart(restart)
[11:01:16.616]                             muffled <- TRUE
[11:01:16.616]                             break
[11:01:16.616]                           }
[11:01:16.616]                         }
[11:01:16.616]                       }
[11:01:16.616]                       invisible(muffled)
[11:01:16.616]                     }
[11:01:16.616]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.616]                   }
[11:01:16.616]                 }
[11:01:16.616]                 else {
[11:01:16.616]                   if (TRUE) {
[11:01:16.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:16.616]                     {
[11:01:16.616]                       inherits <- base::inherits
[11:01:16.616]                       invokeRestart <- base::invokeRestart
[11:01:16.616]                       is.null <- base::is.null
[11:01:16.616]                       muffled <- FALSE
[11:01:16.616]                       if (inherits(cond, "message")) {
[11:01:16.616]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:16.616]                         if (muffled) 
[11:01:16.616]                           invokeRestart("muffleMessage")
[11:01:16.616]                       }
[11:01:16.616]                       else if (inherits(cond, "warning")) {
[11:01:16.616]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:16.616]                         if (muffled) 
[11:01:16.616]                           invokeRestart("muffleWarning")
[11:01:16.616]                       }
[11:01:16.616]                       else if (inherits(cond, "condition")) {
[11:01:16.616]                         if (!is.null(pattern)) {
[11:01:16.616]                           computeRestarts <- base::computeRestarts
[11:01:16.616]                           grepl <- base::grepl
[11:01:16.616]                           restarts <- computeRestarts(cond)
[11:01:16.616]                           for (restart in restarts) {
[11:01:16.616]                             name <- restart$name
[11:01:16.616]                             if (is.null(name)) 
[11:01:16.616]                               next
[11:01:16.616]                             if (!grepl(pattern, name)) 
[11:01:16.616]                               next
[11:01:16.616]                             invokeRestart(restart)
[11:01:16.616]                             muffled <- TRUE
[11:01:16.616]                             break
[11:01:16.616]                           }
[11:01:16.616]                         }
[11:01:16.616]                       }
[11:01:16.616]                       invisible(muffled)
[11:01:16.616]                     }
[11:01:16.616]                     muffleCondition(cond, pattern = "^muffle")
[11:01:16.616]                   }
[11:01:16.616]                 }
[11:01:16.616]             }
[11:01:16.616]         }))
[11:01:16.616]     }, error = function(ex) {
[11:01:16.616]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:16.616]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:16.616]                 ...future.rng), started = ...future.startTime, 
[11:01:16.616]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:16.616]             version = "1.8"), class = "FutureResult")
[11:01:16.616]     }, finally = {
[11:01:16.616]         if (!identical(...future.workdir, getwd())) 
[11:01:16.616]             setwd(...future.workdir)
[11:01:16.616]         {
[11:01:16.616]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:16.616]                 ...future.oldOptions$nwarnings <- NULL
[11:01:16.616]             }
[11:01:16.616]             base::options(...future.oldOptions)
[11:01:16.616]             if (.Platform$OS.type == "windows") {
[11:01:16.616]                 old_names <- names(...future.oldEnvVars)
[11:01:16.616]                 envs <- base::Sys.getenv()
[11:01:16.616]                 names <- names(envs)
[11:01:16.616]                 common <- intersect(names, old_names)
[11:01:16.616]                 added <- setdiff(names, old_names)
[11:01:16.616]                 removed <- setdiff(old_names, names)
[11:01:16.616]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:16.616]                   envs[common]]
[11:01:16.616]                 NAMES <- toupper(changed)
[11:01:16.616]                 args <- list()
[11:01:16.616]                 for (kk in seq_along(NAMES)) {
[11:01:16.616]                   name <- changed[[kk]]
[11:01:16.616]                   NAME <- NAMES[[kk]]
[11:01:16.616]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.616]                     next
[11:01:16.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.616]                 }
[11:01:16.616]                 NAMES <- toupper(added)
[11:01:16.616]                 for (kk in seq_along(NAMES)) {
[11:01:16.616]                   name <- added[[kk]]
[11:01:16.616]                   NAME <- NAMES[[kk]]
[11:01:16.616]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.616]                     next
[11:01:16.616]                   args[[name]] <- ""
[11:01:16.616]                 }
[11:01:16.616]                 NAMES <- toupper(removed)
[11:01:16.616]                 for (kk in seq_along(NAMES)) {
[11:01:16.616]                   name <- removed[[kk]]
[11:01:16.616]                   NAME <- NAMES[[kk]]
[11:01:16.616]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:16.616]                     next
[11:01:16.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:16.616]                 }
[11:01:16.616]                 if (length(args) > 0) 
[11:01:16.616]                   base::do.call(base::Sys.setenv, args = args)
[11:01:16.616]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:16.616]             }
[11:01:16.616]             else {
[11:01:16.616]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:16.616]             }
[11:01:16.616]             {
[11:01:16.616]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:16.616]                   0L) {
[11:01:16.616]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:16.616]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:16.616]                   base::options(opts)
[11:01:16.616]                 }
[11:01:16.616]                 {
[11:01:16.616]                   {
[11:01:16.616]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:16.616]                     NULL
[11:01:16.616]                   }
[11:01:16.616]                   options(future.plan = NULL)
[11:01:16.616]                   if (is.na(NA_character_)) 
[11:01:16.616]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:16.616]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:16.616]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:16.616]                     .init = FALSE)
[11:01:16.616]                 }
[11:01:16.616]             }
[11:01:16.616]         }
[11:01:16.616]     })
[11:01:16.616]     if (TRUE) {
[11:01:16.616]         base::sink(type = "output", split = FALSE)
[11:01:16.616]         if (TRUE) {
[11:01:16.616]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:16.616]         }
[11:01:16.616]         else {
[11:01:16.616]             ...future.result["stdout"] <- base::list(NULL)
[11:01:16.616]         }
[11:01:16.616]         base::close(...future.stdout)
[11:01:16.616]         ...future.stdout <- NULL
[11:01:16.616]     }
[11:01:16.616]     ...future.result$conditions <- ...future.conditions
[11:01:16.616]     ...future.result$finished <- base::Sys.time()
[11:01:16.616]     ...future.result
[11:01:16.616] }
[11:01:16.618] requestCore(): workers = 2
[11:01:16.620] MulticoreFuture started
[11:01:16.620] - Launch lazy future ... done
[11:01:16.620] run() for ‘MulticoreFuture’ ... done
[11:01:16.621] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:01:16.621] List of future strategies:
[11:01:16.621] 1. sequential:
[11:01:16.621]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:16.621]    - tweaked: FALSE
[11:01:16.621]    - call: NULL
[11:01:16.622] plan(): nbrOfWorkers() = 1
[11:01:16.624] plan(): Setting new future strategy stack:
[11:01:16.624] List of future strategies:
[11:01:16.624] 1. multicore:
[11:01:16.624]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:16.624]    - tweaked: FALSE
[11:01:16.624]    - call: plan(strategy)
[11:01:16.627] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:16.627] result() for MulticoreFuture ...
[11:01:16.628] result() for MulticoreFuture ...
[11:01:16.628] result() for MulticoreFuture ... done
[11:01:16.628] result() for MulticoreFuture ... done
[11:01:16.628] result() for MulticoreFuture ...
[11:01:16.629] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[11:01:16.629] plan(): Setting new future strategy stack:
[11:01:16.629] List of future strategies:
[11:01:16.629] 1. multisession:
[11:01:16.629]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:16.629]    - tweaked: FALSE
[11:01:16.629]    - call: plan(strategy)
[11:01:16.630] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:01:16.630] multisession:
[11:01:16.630] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:16.630] - tweaked: FALSE
[11:01:16.630] - call: plan(strategy)
[11:01:16.634] getGlobalsAndPackages() ...
[11:01:16.635] Not searching for globals
[11:01:16.635] - globals: [0] <none>
[11:01:16.635] getGlobalsAndPackages() ... DONE
[11:01:17.109] Packages needed by the future expression (n = 0): <none>
[11:01:17.109] Packages needed by future strategies (n = 0): <none>
[11:01:17.110] {
[11:01:17.110]     {
[11:01:17.110]         {
[11:01:17.110]             ...future.startTime <- base::Sys.time()
[11:01:17.110]             {
[11:01:17.110]                 {
[11:01:17.110]                   {
[11:01:17.110]                     {
[11:01:17.110]                       base::local({
[11:01:17.110]                         has_future <- base::requireNamespace("future", 
[11:01:17.110]                           quietly = TRUE)
[11:01:17.110]                         if (has_future) {
[11:01:17.110]                           ns <- base::getNamespace("future")
[11:01:17.110]                           version <- ns[[".package"]][["version"]]
[11:01:17.110]                           if (is.null(version)) 
[11:01:17.110]                             version <- utils::packageVersion("future")
[11:01:17.110]                         }
[11:01:17.110]                         else {
[11:01:17.110]                           version <- NULL
[11:01:17.110]                         }
[11:01:17.110]                         if (!has_future || version < "1.8.0") {
[11:01:17.110]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:17.110]                             "", base::R.version$version.string), 
[11:01:17.110]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:17.110]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:17.110]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:17.110]                               "release", "version")], collapse = " "), 
[11:01:17.110]                             hostname = base::Sys.info()[["nodename"]])
[11:01:17.110]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:17.110]                             info)
[11:01:17.110]                           info <- base::paste(info, collapse = "; ")
[11:01:17.110]                           if (!has_future) {
[11:01:17.110]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:17.110]                               info)
[11:01:17.110]                           }
[11:01:17.110]                           else {
[11:01:17.110]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:17.110]                               info, version)
[11:01:17.110]                           }
[11:01:17.110]                           base::stop(msg)
[11:01:17.110]                         }
[11:01:17.110]                       })
[11:01:17.110]                     }
[11:01:17.110]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:17.110]                     base::options(mc.cores = 1L)
[11:01:17.110]                   }
[11:01:17.110]                   ...future.strategy.old <- future::plan("list")
[11:01:17.110]                   options(future.plan = NULL)
[11:01:17.110]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.110]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:17.110]                 }
[11:01:17.110]                 ...future.workdir <- getwd()
[11:01:17.110]             }
[11:01:17.110]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:17.110]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:17.110]         }
[11:01:17.110]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:17.110]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:17.110]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:17.110]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:17.110]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:17.110]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:17.110]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:17.110]             base::names(...future.oldOptions))
[11:01:17.110]     }
[11:01:17.110]     if (FALSE) {
[11:01:17.110]     }
[11:01:17.110]     else {
[11:01:17.110]         if (TRUE) {
[11:01:17.110]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:17.110]                 open = "w")
[11:01:17.110]         }
[11:01:17.110]         else {
[11:01:17.110]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:17.110]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:17.110]         }
[11:01:17.110]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:17.110]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:17.110]             base::sink(type = "output", split = FALSE)
[11:01:17.110]             base::close(...future.stdout)
[11:01:17.110]         }, add = TRUE)
[11:01:17.110]     }
[11:01:17.110]     ...future.frame <- base::sys.nframe()
[11:01:17.110]     ...future.conditions <- base::list()
[11:01:17.110]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:17.110]     if (FALSE) {
[11:01:17.110]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:17.110]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:17.110]     }
[11:01:17.110]     ...future.result <- base::tryCatch({
[11:01:17.110]         base::withCallingHandlers({
[11:01:17.110]             ...future.value <- base::withVisible(base::local({
[11:01:17.110]                 ...future.makeSendCondition <- base::local({
[11:01:17.110]                   sendCondition <- NULL
[11:01:17.110]                   function(frame = 1L) {
[11:01:17.110]                     if (is.function(sendCondition)) 
[11:01:17.110]                       return(sendCondition)
[11:01:17.110]                     ns <- getNamespace("parallel")
[11:01:17.110]                     if (exists("sendData", mode = "function", 
[11:01:17.110]                       envir = ns)) {
[11:01:17.110]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:17.110]                         envir = ns)
[11:01:17.110]                       envir <- sys.frame(frame)
[11:01:17.110]                       master <- NULL
[11:01:17.110]                       while (!identical(envir, .GlobalEnv) && 
[11:01:17.110]                         !identical(envir, emptyenv())) {
[11:01:17.110]                         if (exists("master", mode = "list", envir = envir, 
[11:01:17.110]                           inherits = FALSE)) {
[11:01:17.110]                           master <- get("master", mode = "list", 
[11:01:17.110]                             envir = envir, inherits = FALSE)
[11:01:17.110]                           if (inherits(master, c("SOCKnode", 
[11:01:17.110]                             "SOCK0node"))) {
[11:01:17.110]                             sendCondition <<- function(cond) {
[11:01:17.110]                               data <- list(type = "VALUE", value = cond, 
[11:01:17.110]                                 success = TRUE)
[11:01:17.110]                               parallel_sendData(master, data)
[11:01:17.110]                             }
[11:01:17.110]                             return(sendCondition)
[11:01:17.110]                           }
[11:01:17.110]                         }
[11:01:17.110]                         frame <- frame + 1L
[11:01:17.110]                         envir <- sys.frame(frame)
[11:01:17.110]                       }
[11:01:17.110]                     }
[11:01:17.110]                     sendCondition <<- function(cond) NULL
[11:01:17.110]                   }
[11:01:17.110]                 })
[11:01:17.110]                 withCallingHandlers({
[11:01:17.110]                   NA
[11:01:17.110]                 }, immediateCondition = function(cond) {
[11:01:17.110]                   sendCondition <- ...future.makeSendCondition()
[11:01:17.110]                   sendCondition(cond)
[11:01:17.110]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.110]                   {
[11:01:17.110]                     inherits <- base::inherits
[11:01:17.110]                     invokeRestart <- base::invokeRestart
[11:01:17.110]                     is.null <- base::is.null
[11:01:17.110]                     muffled <- FALSE
[11:01:17.110]                     if (inherits(cond, "message")) {
[11:01:17.110]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:17.110]                       if (muffled) 
[11:01:17.110]                         invokeRestart("muffleMessage")
[11:01:17.110]                     }
[11:01:17.110]                     else if (inherits(cond, "warning")) {
[11:01:17.110]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:17.110]                       if (muffled) 
[11:01:17.110]                         invokeRestart("muffleWarning")
[11:01:17.110]                     }
[11:01:17.110]                     else if (inherits(cond, "condition")) {
[11:01:17.110]                       if (!is.null(pattern)) {
[11:01:17.110]                         computeRestarts <- base::computeRestarts
[11:01:17.110]                         grepl <- base::grepl
[11:01:17.110]                         restarts <- computeRestarts(cond)
[11:01:17.110]                         for (restart in restarts) {
[11:01:17.110]                           name <- restart$name
[11:01:17.110]                           if (is.null(name)) 
[11:01:17.110]                             next
[11:01:17.110]                           if (!grepl(pattern, name)) 
[11:01:17.110]                             next
[11:01:17.110]                           invokeRestart(restart)
[11:01:17.110]                           muffled <- TRUE
[11:01:17.110]                           break
[11:01:17.110]                         }
[11:01:17.110]                       }
[11:01:17.110]                     }
[11:01:17.110]                     invisible(muffled)
[11:01:17.110]                   }
[11:01:17.110]                   muffleCondition(cond)
[11:01:17.110]                 })
[11:01:17.110]             }))
[11:01:17.110]             future::FutureResult(value = ...future.value$value, 
[11:01:17.110]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.110]                   ...future.rng), globalenv = if (FALSE) 
[11:01:17.110]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:17.110]                     ...future.globalenv.names))
[11:01:17.110]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:17.110]         }, condition = base::local({
[11:01:17.110]             c <- base::c
[11:01:17.110]             inherits <- base::inherits
[11:01:17.110]             invokeRestart <- base::invokeRestart
[11:01:17.110]             length <- base::length
[11:01:17.110]             list <- base::list
[11:01:17.110]             seq.int <- base::seq.int
[11:01:17.110]             signalCondition <- base::signalCondition
[11:01:17.110]             sys.calls <- base::sys.calls
[11:01:17.110]             `[[` <- base::`[[`
[11:01:17.110]             `+` <- base::`+`
[11:01:17.110]             `<<-` <- base::`<<-`
[11:01:17.110]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:17.110]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:17.110]                   3L)]
[11:01:17.110]             }
[11:01:17.110]             function(cond) {
[11:01:17.110]                 is_error <- inherits(cond, "error")
[11:01:17.110]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:17.110]                   NULL)
[11:01:17.110]                 if (is_error) {
[11:01:17.110]                   sessionInformation <- function() {
[11:01:17.110]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:17.110]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:17.110]                       search = base::search(), system = base::Sys.info())
[11:01:17.110]                   }
[11:01:17.110]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.110]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:17.110]                     cond$call), session = sessionInformation(), 
[11:01:17.110]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:17.110]                   signalCondition(cond)
[11:01:17.110]                 }
[11:01:17.110]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:17.110]                 "immediateCondition"))) {
[11:01:17.110]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:17.110]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.110]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:17.110]                   if (TRUE && !signal) {
[11:01:17.110]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.110]                     {
[11:01:17.110]                       inherits <- base::inherits
[11:01:17.110]                       invokeRestart <- base::invokeRestart
[11:01:17.110]                       is.null <- base::is.null
[11:01:17.110]                       muffled <- FALSE
[11:01:17.110]                       if (inherits(cond, "message")) {
[11:01:17.110]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.110]                         if (muffled) 
[11:01:17.110]                           invokeRestart("muffleMessage")
[11:01:17.110]                       }
[11:01:17.110]                       else if (inherits(cond, "warning")) {
[11:01:17.110]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.110]                         if (muffled) 
[11:01:17.110]                           invokeRestart("muffleWarning")
[11:01:17.110]                       }
[11:01:17.110]                       else if (inherits(cond, "condition")) {
[11:01:17.110]                         if (!is.null(pattern)) {
[11:01:17.110]                           computeRestarts <- base::computeRestarts
[11:01:17.110]                           grepl <- base::grepl
[11:01:17.110]                           restarts <- computeRestarts(cond)
[11:01:17.110]                           for (restart in restarts) {
[11:01:17.110]                             name <- restart$name
[11:01:17.110]                             if (is.null(name)) 
[11:01:17.110]                               next
[11:01:17.110]                             if (!grepl(pattern, name)) 
[11:01:17.110]                               next
[11:01:17.110]                             invokeRestart(restart)
[11:01:17.110]                             muffled <- TRUE
[11:01:17.110]                             break
[11:01:17.110]                           }
[11:01:17.110]                         }
[11:01:17.110]                       }
[11:01:17.110]                       invisible(muffled)
[11:01:17.110]                     }
[11:01:17.110]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.110]                   }
[11:01:17.110]                 }
[11:01:17.110]                 else {
[11:01:17.110]                   if (TRUE) {
[11:01:17.110]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.110]                     {
[11:01:17.110]                       inherits <- base::inherits
[11:01:17.110]                       invokeRestart <- base::invokeRestart
[11:01:17.110]                       is.null <- base::is.null
[11:01:17.110]                       muffled <- FALSE
[11:01:17.110]                       if (inherits(cond, "message")) {
[11:01:17.110]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.110]                         if (muffled) 
[11:01:17.110]                           invokeRestart("muffleMessage")
[11:01:17.110]                       }
[11:01:17.110]                       else if (inherits(cond, "warning")) {
[11:01:17.110]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.110]                         if (muffled) 
[11:01:17.110]                           invokeRestart("muffleWarning")
[11:01:17.110]                       }
[11:01:17.110]                       else if (inherits(cond, "condition")) {
[11:01:17.110]                         if (!is.null(pattern)) {
[11:01:17.110]                           computeRestarts <- base::computeRestarts
[11:01:17.110]                           grepl <- base::grepl
[11:01:17.110]                           restarts <- computeRestarts(cond)
[11:01:17.110]                           for (restart in restarts) {
[11:01:17.110]                             name <- restart$name
[11:01:17.110]                             if (is.null(name)) 
[11:01:17.110]                               next
[11:01:17.110]                             if (!grepl(pattern, name)) 
[11:01:17.110]                               next
[11:01:17.110]                             invokeRestart(restart)
[11:01:17.110]                             muffled <- TRUE
[11:01:17.110]                             break
[11:01:17.110]                           }
[11:01:17.110]                         }
[11:01:17.110]                       }
[11:01:17.110]                       invisible(muffled)
[11:01:17.110]                     }
[11:01:17.110]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.110]                   }
[11:01:17.110]                 }
[11:01:17.110]             }
[11:01:17.110]         }))
[11:01:17.110]     }, error = function(ex) {
[11:01:17.110]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:17.110]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.110]                 ...future.rng), started = ...future.startTime, 
[11:01:17.110]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:17.110]             version = "1.8"), class = "FutureResult")
[11:01:17.110]     }, finally = {
[11:01:17.110]         if (!identical(...future.workdir, getwd())) 
[11:01:17.110]             setwd(...future.workdir)
[11:01:17.110]         {
[11:01:17.110]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:17.110]                 ...future.oldOptions$nwarnings <- NULL
[11:01:17.110]             }
[11:01:17.110]             base::options(...future.oldOptions)
[11:01:17.110]             if (.Platform$OS.type == "windows") {
[11:01:17.110]                 old_names <- names(...future.oldEnvVars)
[11:01:17.110]                 envs <- base::Sys.getenv()
[11:01:17.110]                 names <- names(envs)
[11:01:17.110]                 common <- intersect(names, old_names)
[11:01:17.110]                 added <- setdiff(names, old_names)
[11:01:17.110]                 removed <- setdiff(old_names, names)
[11:01:17.110]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:17.110]                   envs[common]]
[11:01:17.110]                 NAMES <- toupper(changed)
[11:01:17.110]                 args <- list()
[11:01:17.110]                 for (kk in seq_along(NAMES)) {
[11:01:17.110]                   name <- changed[[kk]]
[11:01:17.110]                   NAME <- NAMES[[kk]]
[11:01:17.110]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.110]                     next
[11:01:17.110]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.110]                 }
[11:01:17.110]                 NAMES <- toupper(added)
[11:01:17.110]                 for (kk in seq_along(NAMES)) {
[11:01:17.110]                   name <- added[[kk]]
[11:01:17.110]                   NAME <- NAMES[[kk]]
[11:01:17.110]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.110]                     next
[11:01:17.110]                   args[[name]] <- ""
[11:01:17.110]                 }
[11:01:17.110]                 NAMES <- toupper(removed)
[11:01:17.110]                 for (kk in seq_along(NAMES)) {
[11:01:17.110]                   name <- removed[[kk]]
[11:01:17.110]                   NAME <- NAMES[[kk]]
[11:01:17.110]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.110]                     next
[11:01:17.110]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.110]                 }
[11:01:17.110]                 if (length(args) > 0) 
[11:01:17.110]                   base::do.call(base::Sys.setenv, args = args)
[11:01:17.110]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:17.110]             }
[11:01:17.110]             else {
[11:01:17.110]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:17.110]             }
[11:01:17.110]             {
[11:01:17.110]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:17.110]                   0L) {
[11:01:17.110]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:17.110]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:17.110]                   base::options(opts)
[11:01:17.110]                 }
[11:01:17.110]                 {
[11:01:17.110]                   {
[11:01:17.110]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:17.110]                     NULL
[11:01:17.110]                   }
[11:01:17.110]                   options(future.plan = NULL)
[11:01:17.110]                   if (is.na(NA_character_)) 
[11:01:17.110]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.110]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:17.110]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:17.110]                     .init = FALSE)
[11:01:17.110]                 }
[11:01:17.110]             }
[11:01:17.110]         }
[11:01:17.110]     })
[11:01:17.110]     if (TRUE) {
[11:01:17.110]         base::sink(type = "output", split = FALSE)
[11:01:17.110]         if (TRUE) {
[11:01:17.110]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:17.110]         }
[11:01:17.110]         else {
[11:01:17.110]             ...future.result["stdout"] <- base::list(NULL)
[11:01:17.110]         }
[11:01:17.110]         base::close(...future.stdout)
[11:01:17.110]         ...future.stdout <- NULL
[11:01:17.110]     }
[11:01:17.110]     ...future.result$conditions <- ...future.conditions
[11:01:17.110]     ...future.result$finished <- base::Sys.time()
[11:01:17.110]     ...future.result
[11:01:17.110] }
[11:01:17.161] MultisessionFuture started
[11:01:17.161] result() for ClusterFuture ...
[11:01:17.162] receiveMessageFromWorker() for ClusterFuture ...
[11:01:17.162] - Validating connection of MultisessionFuture
[11:01:17.192] - received message: FutureResult
[11:01:17.192] - Received FutureResult
[11:01:17.192] - Erased future from FutureRegistry
[11:01:17.192] result() for ClusterFuture ...
[11:01:17.192] - result already collected: FutureResult
[11:01:17.193] result() for ClusterFuture ... done
[11:01:17.193] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:17.193] result() for ClusterFuture ... done
[11:01:17.193] result() for ClusterFuture ...
[11:01:17.193] - result already collected: FutureResult
[11:01:17.193] result() for ClusterFuture ... done
[11:01:17.193] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:01:17.195] plan(): nbrOfWorkers() = 2
[11:01:17.196] getGlobalsAndPackages() ...
[11:01:17.196] 
[11:01:17.196] - globals: [0] <none>
[11:01:17.196] getGlobalsAndPackages() ... DONE
[11:01:17.209] Packages needed by the future expression (n = 0): <none>
[11:01:17.209] Packages needed by future strategies (n = 0): <none>
[11:01:17.210] {
[11:01:17.210]     {
[11:01:17.210]         {
[11:01:17.210]             ...future.startTime <- base::Sys.time()
[11:01:17.210]             {
[11:01:17.210]                 {
[11:01:17.210]                   {
[11:01:17.210]                     {
[11:01:17.210]                       base::local({
[11:01:17.210]                         has_future <- base::requireNamespace("future", 
[11:01:17.210]                           quietly = TRUE)
[11:01:17.210]                         if (has_future) {
[11:01:17.210]                           ns <- base::getNamespace("future")
[11:01:17.210]                           version <- ns[[".package"]][["version"]]
[11:01:17.210]                           if (is.null(version)) 
[11:01:17.210]                             version <- utils::packageVersion("future")
[11:01:17.210]                         }
[11:01:17.210]                         else {
[11:01:17.210]                           version <- NULL
[11:01:17.210]                         }
[11:01:17.210]                         if (!has_future || version < "1.8.0") {
[11:01:17.210]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:17.210]                             "", base::R.version$version.string), 
[11:01:17.210]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:17.210]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:17.210]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:17.210]                               "release", "version")], collapse = " "), 
[11:01:17.210]                             hostname = base::Sys.info()[["nodename"]])
[11:01:17.210]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:17.210]                             info)
[11:01:17.210]                           info <- base::paste(info, collapse = "; ")
[11:01:17.210]                           if (!has_future) {
[11:01:17.210]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:17.210]                               info)
[11:01:17.210]                           }
[11:01:17.210]                           else {
[11:01:17.210]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:17.210]                               info, version)
[11:01:17.210]                           }
[11:01:17.210]                           base::stop(msg)
[11:01:17.210]                         }
[11:01:17.210]                       })
[11:01:17.210]                     }
[11:01:17.210]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:17.210]                     base::options(mc.cores = 1L)
[11:01:17.210]                   }
[11:01:17.210]                   ...future.strategy.old <- future::plan("list")
[11:01:17.210]                   options(future.plan = NULL)
[11:01:17.210]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.210]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:17.210]                 }
[11:01:17.210]                 ...future.workdir <- getwd()
[11:01:17.210]             }
[11:01:17.210]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:17.210]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:17.210]         }
[11:01:17.210]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:17.210]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:17.210]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:17.210]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:17.210]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:17.210]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:17.210]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:17.210]             base::names(...future.oldOptions))
[11:01:17.210]     }
[11:01:17.210]     if (FALSE) {
[11:01:17.210]     }
[11:01:17.210]     else {
[11:01:17.210]         if (TRUE) {
[11:01:17.210]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:17.210]                 open = "w")
[11:01:17.210]         }
[11:01:17.210]         else {
[11:01:17.210]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:17.210]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:17.210]         }
[11:01:17.210]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:17.210]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:17.210]             base::sink(type = "output", split = FALSE)
[11:01:17.210]             base::close(...future.stdout)
[11:01:17.210]         }, add = TRUE)
[11:01:17.210]     }
[11:01:17.210]     ...future.frame <- base::sys.nframe()
[11:01:17.210]     ...future.conditions <- base::list()
[11:01:17.210]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:17.210]     if (FALSE) {
[11:01:17.210]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:17.210]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:17.210]     }
[11:01:17.210]     ...future.result <- base::tryCatch({
[11:01:17.210]         base::withCallingHandlers({
[11:01:17.210]             ...future.value <- base::withVisible(base::local({
[11:01:17.210]                 ...future.makeSendCondition <- base::local({
[11:01:17.210]                   sendCondition <- NULL
[11:01:17.210]                   function(frame = 1L) {
[11:01:17.210]                     if (is.function(sendCondition)) 
[11:01:17.210]                       return(sendCondition)
[11:01:17.210]                     ns <- getNamespace("parallel")
[11:01:17.210]                     if (exists("sendData", mode = "function", 
[11:01:17.210]                       envir = ns)) {
[11:01:17.210]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:17.210]                         envir = ns)
[11:01:17.210]                       envir <- sys.frame(frame)
[11:01:17.210]                       master <- NULL
[11:01:17.210]                       while (!identical(envir, .GlobalEnv) && 
[11:01:17.210]                         !identical(envir, emptyenv())) {
[11:01:17.210]                         if (exists("master", mode = "list", envir = envir, 
[11:01:17.210]                           inherits = FALSE)) {
[11:01:17.210]                           master <- get("master", mode = "list", 
[11:01:17.210]                             envir = envir, inherits = FALSE)
[11:01:17.210]                           if (inherits(master, c("SOCKnode", 
[11:01:17.210]                             "SOCK0node"))) {
[11:01:17.210]                             sendCondition <<- function(cond) {
[11:01:17.210]                               data <- list(type = "VALUE", value = cond, 
[11:01:17.210]                                 success = TRUE)
[11:01:17.210]                               parallel_sendData(master, data)
[11:01:17.210]                             }
[11:01:17.210]                             return(sendCondition)
[11:01:17.210]                           }
[11:01:17.210]                         }
[11:01:17.210]                         frame <- frame + 1L
[11:01:17.210]                         envir <- sys.frame(frame)
[11:01:17.210]                       }
[11:01:17.210]                     }
[11:01:17.210]                     sendCondition <<- function(cond) NULL
[11:01:17.210]                   }
[11:01:17.210]                 })
[11:01:17.210]                 withCallingHandlers({
[11:01:17.210]                   42
[11:01:17.210]                 }, immediateCondition = function(cond) {
[11:01:17.210]                   sendCondition <- ...future.makeSendCondition()
[11:01:17.210]                   sendCondition(cond)
[11:01:17.210]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.210]                   {
[11:01:17.210]                     inherits <- base::inherits
[11:01:17.210]                     invokeRestart <- base::invokeRestart
[11:01:17.210]                     is.null <- base::is.null
[11:01:17.210]                     muffled <- FALSE
[11:01:17.210]                     if (inherits(cond, "message")) {
[11:01:17.210]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:17.210]                       if (muffled) 
[11:01:17.210]                         invokeRestart("muffleMessage")
[11:01:17.210]                     }
[11:01:17.210]                     else if (inherits(cond, "warning")) {
[11:01:17.210]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:17.210]                       if (muffled) 
[11:01:17.210]                         invokeRestart("muffleWarning")
[11:01:17.210]                     }
[11:01:17.210]                     else if (inherits(cond, "condition")) {
[11:01:17.210]                       if (!is.null(pattern)) {
[11:01:17.210]                         computeRestarts <- base::computeRestarts
[11:01:17.210]                         grepl <- base::grepl
[11:01:17.210]                         restarts <- computeRestarts(cond)
[11:01:17.210]                         for (restart in restarts) {
[11:01:17.210]                           name <- restart$name
[11:01:17.210]                           if (is.null(name)) 
[11:01:17.210]                             next
[11:01:17.210]                           if (!grepl(pattern, name)) 
[11:01:17.210]                             next
[11:01:17.210]                           invokeRestart(restart)
[11:01:17.210]                           muffled <- TRUE
[11:01:17.210]                           break
[11:01:17.210]                         }
[11:01:17.210]                       }
[11:01:17.210]                     }
[11:01:17.210]                     invisible(muffled)
[11:01:17.210]                   }
[11:01:17.210]                   muffleCondition(cond)
[11:01:17.210]                 })
[11:01:17.210]             }))
[11:01:17.210]             future::FutureResult(value = ...future.value$value, 
[11:01:17.210]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.210]                   ...future.rng), globalenv = if (FALSE) 
[11:01:17.210]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:17.210]                     ...future.globalenv.names))
[11:01:17.210]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:17.210]         }, condition = base::local({
[11:01:17.210]             c <- base::c
[11:01:17.210]             inherits <- base::inherits
[11:01:17.210]             invokeRestart <- base::invokeRestart
[11:01:17.210]             length <- base::length
[11:01:17.210]             list <- base::list
[11:01:17.210]             seq.int <- base::seq.int
[11:01:17.210]             signalCondition <- base::signalCondition
[11:01:17.210]             sys.calls <- base::sys.calls
[11:01:17.210]             `[[` <- base::`[[`
[11:01:17.210]             `+` <- base::`+`
[11:01:17.210]             `<<-` <- base::`<<-`
[11:01:17.210]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:17.210]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:17.210]                   3L)]
[11:01:17.210]             }
[11:01:17.210]             function(cond) {
[11:01:17.210]                 is_error <- inherits(cond, "error")
[11:01:17.210]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:17.210]                   NULL)
[11:01:17.210]                 if (is_error) {
[11:01:17.210]                   sessionInformation <- function() {
[11:01:17.210]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:17.210]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:17.210]                       search = base::search(), system = base::Sys.info())
[11:01:17.210]                   }
[11:01:17.210]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.210]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:17.210]                     cond$call), session = sessionInformation(), 
[11:01:17.210]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:17.210]                   signalCondition(cond)
[11:01:17.210]                 }
[11:01:17.210]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:17.210]                 "immediateCondition"))) {
[11:01:17.210]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:17.210]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.210]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:17.210]                   if (TRUE && !signal) {
[11:01:17.210]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.210]                     {
[11:01:17.210]                       inherits <- base::inherits
[11:01:17.210]                       invokeRestart <- base::invokeRestart
[11:01:17.210]                       is.null <- base::is.null
[11:01:17.210]                       muffled <- FALSE
[11:01:17.210]                       if (inherits(cond, "message")) {
[11:01:17.210]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.210]                         if (muffled) 
[11:01:17.210]                           invokeRestart("muffleMessage")
[11:01:17.210]                       }
[11:01:17.210]                       else if (inherits(cond, "warning")) {
[11:01:17.210]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.210]                         if (muffled) 
[11:01:17.210]                           invokeRestart("muffleWarning")
[11:01:17.210]                       }
[11:01:17.210]                       else if (inherits(cond, "condition")) {
[11:01:17.210]                         if (!is.null(pattern)) {
[11:01:17.210]                           computeRestarts <- base::computeRestarts
[11:01:17.210]                           grepl <- base::grepl
[11:01:17.210]                           restarts <- computeRestarts(cond)
[11:01:17.210]                           for (restart in restarts) {
[11:01:17.210]                             name <- restart$name
[11:01:17.210]                             if (is.null(name)) 
[11:01:17.210]                               next
[11:01:17.210]                             if (!grepl(pattern, name)) 
[11:01:17.210]                               next
[11:01:17.210]                             invokeRestart(restart)
[11:01:17.210]                             muffled <- TRUE
[11:01:17.210]                             break
[11:01:17.210]                           }
[11:01:17.210]                         }
[11:01:17.210]                       }
[11:01:17.210]                       invisible(muffled)
[11:01:17.210]                     }
[11:01:17.210]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.210]                   }
[11:01:17.210]                 }
[11:01:17.210]                 else {
[11:01:17.210]                   if (TRUE) {
[11:01:17.210]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.210]                     {
[11:01:17.210]                       inherits <- base::inherits
[11:01:17.210]                       invokeRestart <- base::invokeRestart
[11:01:17.210]                       is.null <- base::is.null
[11:01:17.210]                       muffled <- FALSE
[11:01:17.210]                       if (inherits(cond, "message")) {
[11:01:17.210]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.210]                         if (muffled) 
[11:01:17.210]                           invokeRestart("muffleMessage")
[11:01:17.210]                       }
[11:01:17.210]                       else if (inherits(cond, "warning")) {
[11:01:17.210]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.210]                         if (muffled) 
[11:01:17.210]                           invokeRestart("muffleWarning")
[11:01:17.210]                       }
[11:01:17.210]                       else if (inherits(cond, "condition")) {
[11:01:17.210]                         if (!is.null(pattern)) {
[11:01:17.210]                           computeRestarts <- base::computeRestarts
[11:01:17.210]                           grepl <- base::grepl
[11:01:17.210]                           restarts <- computeRestarts(cond)
[11:01:17.210]                           for (restart in restarts) {
[11:01:17.210]                             name <- restart$name
[11:01:17.210]                             if (is.null(name)) 
[11:01:17.210]                               next
[11:01:17.210]                             if (!grepl(pattern, name)) 
[11:01:17.210]                               next
[11:01:17.210]                             invokeRestart(restart)
[11:01:17.210]                             muffled <- TRUE
[11:01:17.210]                             break
[11:01:17.210]                           }
[11:01:17.210]                         }
[11:01:17.210]                       }
[11:01:17.210]                       invisible(muffled)
[11:01:17.210]                     }
[11:01:17.210]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.210]                   }
[11:01:17.210]                 }
[11:01:17.210]             }
[11:01:17.210]         }))
[11:01:17.210]     }, error = function(ex) {
[11:01:17.210]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:17.210]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.210]                 ...future.rng), started = ...future.startTime, 
[11:01:17.210]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:17.210]             version = "1.8"), class = "FutureResult")
[11:01:17.210]     }, finally = {
[11:01:17.210]         if (!identical(...future.workdir, getwd())) 
[11:01:17.210]             setwd(...future.workdir)
[11:01:17.210]         {
[11:01:17.210]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:17.210]                 ...future.oldOptions$nwarnings <- NULL
[11:01:17.210]             }
[11:01:17.210]             base::options(...future.oldOptions)
[11:01:17.210]             if (.Platform$OS.type == "windows") {
[11:01:17.210]                 old_names <- names(...future.oldEnvVars)
[11:01:17.210]                 envs <- base::Sys.getenv()
[11:01:17.210]                 names <- names(envs)
[11:01:17.210]                 common <- intersect(names, old_names)
[11:01:17.210]                 added <- setdiff(names, old_names)
[11:01:17.210]                 removed <- setdiff(old_names, names)
[11:01:17.210]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:17.210]                   envs[common]]
[11:01:17.210]                 NAMES <- toupper(changed)
[11:01:17.210]                 args <- list()
[11:01:17.210]                 for (kk in seq_along(NAMES)) {
[11:01:17.210]                   name <- changed[[kk]]
[11:01:17.210]                   NAME <- NAMES[[kk]]
[11:01:17.210]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.210]                     next
[11:01:17.210]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.210]                 }
[11:01:17.210]                 NAMES <- toupper(added)
[11:01:17.210]                 for (kk in seq_along(NAMES)) {
[11:01:17.210]                   name <- added[[kk]]
[11:01:17.210]                   NAME <- NAMES[[kk]]
[11:01:17.210]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.210]                     next
[11:01:17.210]                   args[[name]] <- ""
[11:01:17.210]                 }
[11:01:17.210]                 NAMES <- toupper(removed)
[11:01:17.210]                 for (kk in seq_along(NAMES)) {
[11:01:17.210]                   name <- removed[[kk]]
[11:01:17.210]                   NAME <- NAMES[[kk]]
[11:01:17.210]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.210]                     next
[11:01:17.210]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.210]                 }
[11:01:17.210]                 if (length(args) > 0) 
[11:01:17.210]                   base::do.call(base::Sys.setenv, args = args)
[11:01:17.210]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:17.210]             }
[11:01:17.210]             else {
[11:01:17.210]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:17.210]             }
[11:01:17.210]             {
[11:01:17.210]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:17.210]                   0L) {
[11:01:17.210]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:17.210]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:17.210]                   base::options(opts)
[11:01:17.210]                 }
[11:01:17.210]                 {
[11:01:17.210]                   {
[11:01:17.210]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:17.210]                     NULL
[11:01:17.210]                   }
[11:01:17.210]                   options(future.plan = NULL)
[11:01:17.210]                   if (is.na(NA_character_)) 
[11:01:17.210]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.210]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:17.210]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:17.210]                     .init = FALSE)
[11:01:17.210]                 }
[11:01:17.210]             }
[11:01:17.210]         }
[11:01:17.210]     })
[11:01:17.210]     if (TRUE) {
[11:01:17.210]         base::sink(type = "output", split = FALSE)
[11:01:17.210]         if (TRUE) {
[11:01:17.210]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:17.210]         }
[11:01:17.210]         else {
[11:01:17.210]             ...future.result["stdout"] <- base::list(NULL)
[11:01:17.210]         }
[11:01:17.210]         base::close(...future.stdout)
[11:01:17.210]         ...future.stdout <- NULL
[11:01:17.210]     }
[11:01:17.210]     ...future.result$conditions <- ...future.conditions
[11:01:17.210]     ...future.result$finished <- base::Sys.time()
[11:01:17.210]     ...future.result
[11:01:17.210] }
[11:01:17.212] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.224] result() for ClusterFuture ...
[11:01:17.224] receiveMessageFromWorker() for ClusterFuture ...
[11:01:17.224] - Validating connection of MultisessionFuture
[11:01:17.254] - received message: FutureResult
[11:01:17.254] - Received FutureResult
[11:01:17.254] - Erased future from FutureRegistry
[11:01:17.254] result() for ClusterFuture ...
[11:01:17.254] - result already collected: FutureResult
[11:01:17.254] result() for ClusterFuture ... done
[11:01:17.254] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:17.254] result() for ClusterFuture ... done
[11:01:17.255] result() for ClusterFuture ...
[11:01:17.255] - result already collected: FutureResult
[11:01:17.255] result() for ClusterFuture ... done
[11:01:17.255] getGlobalsAndPackages() ...
[11:01:17.255] Searching for globals...
[11:01:17.255] 
[11:01:17.255] Searching for globals ... DONE
[11:01:17.255] - globals: [0] <none>
[11:01:17.256] getGlobalsAndPackages() ... DONE
[11:01:17.256] run() for ‘Future’ ...
[11:01:17.256] - state: ‘created’
[11:01:17.256] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:17.269] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.270] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:17.270]   - Field: ‘node’
[11:01:17.270]   - Field: ‘label’
[11:01:17.270]   - Field: ‘local’
[11:01:17.270]   - Field: ‘owner’
[11:01:17.270]   - Field: ‘envir’
[11:01:17.270]   - Field: ‘workers’
[11:01:17.270]   - Field: ‘packages’
[11:01:17.270]   - Field: ‘gc’
[11:01:17.270]   - Field: ‘conditions’
[11:01:17.270]   - Field: ‘persistent’
[11:01:17.271]   - Field: ‘expr’
[11:01:17.271]   - Field: ‘uuid’
[11:01:17.271]   - Field: ‘seed’
[11:01:17.271]   - Field: ‘version’
[11:01:17.271]   - Field: ‘result’
[11:01:17.271]   - Field: ‘asynchronous’
[11:01:17.271]   - Field: ‘calls’
[11:01:17.271]   - Field: ‘globals’
[11:01:17.271]   - Field: ‘stdout’
[11:01:17.271]   - Field: ‘earlySignal’
[11:01:17.271]   - Field: ‘lazy’
[11:01:17.271]   - Field: ‘state’
[11:01:17.272] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:17.272] - Launch lazy future ...
[11:01:17.272] Packages needed by the future expression (n = 0): <none>
[11:01:17.272] Packages needed by future strategies (n = 0): <none>
[11:01:17.272] {
[11:01:17.272]     {
[11:01:17.272]         {
[11:01:17.272]             ...future.startTime <- base::Sys.time()
[11:01:17.272]             {
[11:01:17.272]                 {
[11:01:17.272]                   {
[11:01:17.272]                     {
[11:01:17.272]                       base::local({
[11:01:17.272]                         has_future <- base::requireNamespace("future", 
[11:01:17.272]                           quietly = TRUE)
[11:01:17.272]                         if (has_future) {
[11:01:17.272]                           ns <- base::getNamespace("future")
[11:01:17.272]                           version <- ns[[".package"]][["version"]]
[11:01:17.272]                           if (is.null(version)) 
[11:01:17.272]                             version <- utils::packageVersion("future")
[11:01:17.272]                         }
[11:01:17.272]                         else {
[11:01:17.272]                           version <- NULL
[11:01:17.272]                         }
[11:01:17.272]                         if (!has_future || version < "1.8.0") {
[11:01:17.272]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:17.272]                             "", base::R.version$version.string), 
[11:01:17.272]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:17.272]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:17.272]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:17.272]                               "release", "version")], collapse = " "), 
[11:01:17.272]                             hostname = base::Sys.info()[["nodename"]])
[11:01:17.272]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:17.272]                             info)
[11:01:17.272]                           info <- base::paste(info, collapse = "; ")
[11:01:17.272]                           if (!has_future) {
[11:01:17.272]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:17.272]                               info)
[11:01:17.272]                           }
[11:01:17.272]                           else {
[11:01:17.272]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:17.272]                               info, version)
[11:01:17.272]                           }
[11:01:17.272]                           base::stop(msg)
[11:01:17.272]                         }
[11:01:17.272]                       })
[11:01:17.272]                     }
[11:01:17.272]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:17.272]                     base::options(mc.cores = 1L)
[11:01:17.272]                   }
[11:01:17.272]                   ...future.strategy.old <- future::plan("list")
[11:01:17.272]                   options(future.plan = NULL)
[11:01:17.272]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.272]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:17.272]                 }
[11:01:17.272]                 ...future.workdir <- getwd()
[11:01:17.272]             }
[11:01:17.272]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:17.272]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:17.272]         }
[11:01:17.272]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:17.272]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:17.272]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:17.272]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:17.272]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:17.272]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:17.272]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:17.272]             base::names(...future.oldOptions))
[11:01:17.272]     }
[11:01:17.272]     if (FALSE) {
[11:01:17.272]     }
[11:01:17.272]     else {
[11:01:17.272]         if (TRUE) {
[11:01:17.272]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:17.272]                 open = "w")
[11:01:17.272]         }
[11:01:17.272]         else {
[11:01:17.272]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:17.272]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:17.272]         }
[11:01:17.272]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:17.272]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:17.272]             base::sink(type = "output", split = FALSE)
[11:01:17.272]             base::close(...future.stdout)
[11:01:17.272]         }, add = TRUE)
[11:01:17.272]     }
[11:01:17.272]     ...future.frame <- base::sys.nframe()
[11:01:17.272]     ...future.conditions <- base::list()
[11:01:17.272]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:17.272]     if (FALSE) {
[11:01:17.272]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:17.272]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:17.272]     }
[11:01:17.272]     ...future.result <- base::tryCatch({
[11:01:17.272]         base::withCallingHandlers({
[11:01:17.272]             ...future.value <- base::withVisible(base::local({
[11:01:17.272]                 ...future.makeSendCondition <- base::local({
[11:01:17.272]                   sendCondition <- NULL
[11:01:17.272]                   function(frame = 1L) {
[11:01:17.272]                     if (is.function(sendCondition)) 
[11:01:17.272]                       return(sendCondition)
[11:01:17.272]                     ns <- getNamespace("parallel")
[11:01:17.272]                     if (exists("sendData", mode = "function", 
[11:01:17.272]                       envir = ns)) {
[11:01:17.272]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:17.272]                         envir = ns)
[11:01:17.272]                       envir <- sys.frame(frame)
[11:01:17.272]                       master <- NULL
[11:01:17.272]                       while (!identical(envir, .GlobalEnv) && 
[11:01:17.272]                         !identical(envir, emptyenv())) {
[11:01:17.272]                         if (exists("master", mode = "list", envir = envir, 
[11:01:17.272]                           inherits = FALSE)) {
[11:01:17.272]                           master <- get("master", mode = "list", 
[11:01:17.272]                             envir = envir, inherits = FALSE)
[11:01:17.272]                           if (inherits(master, c("SOCKnode", 
[11:01:17.272]                             "SOCK0node"))) {
[11:01:17.272]                             sendCondition <<- function(cond) {
[11:01:17.272]                               data <- list(type = "VALUE", value = cond, 
[11:01:17.272]                                 success = TRUE)
[11:01:17.272]                               parallel_sendData(master, data)
[11:01:17.272]                             }
[11:01:17.272]                             return(sendCondition)
[11:01:17.272]                           }
[11:01:17.272]                         }
[11:01:17.272]                         frame <- frame + 1L
[11:01:17.272]                         envir <- sys.frame(frame)
[11:01:17.272]                       }
[11:01:17.272]                     }
[11:01:17.272]                     sendCondition <<- function(cond) NULL
[11:01:17.272]                   }
[11:01:17.272]                 })
[11:01:17.272]                 withCallingHandlers({
[11:01:17.272]                   42
[11:01:17.272]                 }, immediateCondition = function(cond) {
[11:01:17.272]                   sendCondition <- ...future.makeSendCondition()
[11:01:17.272]                   sendCondition(cond)
[11:01:17.272]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.272]                   {
[11:01:17.272]                     inherits <- base::inherits
[11:01:17.272]                     invokeRestart <- base::invokeRestart
[11:01:17.272]                     is.null <- base::is.null
[11:01:17.272]                     muffled <- FALSE
[11:01:17.272]                     if (inherits(cond, "message")) {
[11:01:17.272]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:17.272]                       if (muffled) 
[11:01:17.272]                         invokeRestart("muffleMessage")
[11:01:17.272]                     }
[11:01:17.272]                     else if (inherits(cond, "warning")) {
[11:01:17.272]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:17.272]                       if (muffled) 
[11:01:17.272]                         invokeRestart("muffleWarning")
[11:01:17.272]                     }
[11:01:17.272]                     else if (inherits(cond, "condition")) {
[11:01:17.272]                       if (!is.null(pattern)) {
[11:01:17.272]                         computeRestarts <- base::computeRestarts
[11:01:17.272]                         grepl <- base::grepl
[11:01:17.272]                         restarts <- computeRestarts(cond)
[11:01:17.272]                         for (restart in restarts) {
[11:01:17.272]                           name <- restart$name
[11:01:17.272]                           if (is.null(name)) 
[11:01:17.272]                             next
[11:01:17.272]                           if (!grepl(pattern, name)) 
[11:01:17.272]                             next
[11:01:17.272]                           invokeRestart(restart)
[11:01:17.272]                           muffled <- TRUE
[11:01:17.272]                           break
[11:01:17.272]                         }
[11:01:17.272]                       }
[11:01:17.272]                     }
[11:01:17.272]                     invisible(muffled)
[11:01:17.272]                   }
[11:01:17.272]                   muffleCondition(cond)
[11:01:17.272]                 })
[11:01:17.272]             }))
[11:01:17.272]             future::FutureResult(value = ...future.value$value, 
[11:01:17.272]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.272]                   ...future.rng), globalenv = if (FALSE) 
[11:01:17.272]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:17.272]                     ...future.globalenv.names))
[11:01:17.272]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:17.272]         }, condition = base::local({
[11:01:17.272]             c <- base::c
[11:01:17.272]             inherits <- base::inherits
[11:01:17.272]             invokeRestart <- base::invokeRestart
[11:01:17.272]             length <- base::length
[11:01:17.272]             list <- base::list
[11:01:17.272]             seq.int <- base::seq.int
[11:01:17.272]             signalCondition <- base::signalCondition
[11:01:17.272]             sys.calls <- base::sys.calls
[11:01:17.272]             `[[` <- base::`[[`
[11:01:17.272]             `+` <- base::`+`
[11:01:17.272]             `<<-` <- base::`<<-`
[11:01:17.272]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:17.272]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:17.272]                   3L)]
[11:01:17.272]             }
[11:01:17.272]             function(cond) {
[11:01:17.272]                 is_error <- inherits(cond, "error")
[11:01:17.272]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:17.272]                   NULL)
[11:01:17.272]                 if (is_error) {
[11:01:17.272]                   sessionInformation <- function() {
[11:01:17.272]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:17.272]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:17.272]                       search = base::search(), system = base::Sys.info())
[11:01:17.272]                   }
[11:01:17.272]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.272]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:17.272]                     cond$call), session = sessionInformation(), 
[11:01:17.272]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:17.272]                   signalCondition(cond)
[11:01:17.272]                 }
[11:01:17.272]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:17.272]                 "immediateCondition"))) {
[11:01:17.272]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:17.272]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.272]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:17.272]                   if (TRUE && !signal) {
[11:01:17.272]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.272]                     {
[11:01:17.272]                       inherits <- base::inherits
[11:01:17.272]                       invokeRestart <- base::invokeRestart
[11:01:17.272]                       is.null <- base::is.null
[11:01:17.272]                       muffled <- FALSE
[11:01:17.272]                       if (inherits(cond, "message")) {
[11:01:17.272]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.272]                         if (muffled) 
[11:01:17.272]                           invokeRestart("muffleMessage")
[11:01:17.272]                       }
[11:01:17.272]                       else if (inherits(cond, "warning")) {
[11:01:17.272]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.272]                         if (muffled) 
[11:01:17.272]                           invokeRestart("muffleWarning")
[11:01:17.272]                       }
[11:01:17.272]                       else if (inherits(cond, "condition")) {
[11:01:17.272]                         if (!is.null(pattern)) {
[11:01:17.272]                           computeRestarts <- base::computeRestarts
[11:01:17.272]                           grepl <- base::grepl
[11:01:17.272]                           restarts <- computeRestarts(cond)
[11:01:17.272]                           for (restart in restarts) {
[11:01:17.272]                             name <- restart$name
[11:01:17.272]                             if (is.null(name)) 
[11:01:17.272]                               next
[11:01:17.272]                             if (!grepl(pattern, name)) 
[11:01:17.272]                               next
[11:01:17.272]                             invokeRestart(restart)
[11:01:17.272]                             muffled <- TRUE
[11:01:17.272]                             break
[11:01:17.272]                           }
[11:01:17.272]                         }
[11:01:17.272]                       }
[11:01:17.272]                       invisible(muffled)
[11:01:17.272]                     }
[11:01:17.272]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.272]                   }
[11:01:17.272]                 }
[11:01:17.272]                 else {
[11:01:17.272]                   if (TRUE) {
[11:01:17.272]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.272]                     {
[11:01:17.272]                       inherits <- base::inherits
[11:01:17.272]                       invokeRestart <- base::invokeRestart
[11:01:17.272]                       is.null <- base::is.null
[11:01:17.272]                       muffled <- FALSE
[11:01:17.272]                       if (inherits(cond, "message")) {
[11:01:17.272]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.272]                         if (muffled) 
[11:01:17.272]                           invokeRestart("muffleMessage")
[11:01:17.272]                       }
[11:01:17.272]                       else if (inherits(cond, "warning")) {
[11:01:17.272]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.272]                         if (muffled) 
[11:01:17.272]                           invokeRestart("muffleWarning")
[11:01:17.272]                       }
[11:01:17.272]                       else if (inherits(cond, "condition")) {
[11:01:17.272]                         if (!is.null(pattern)) {
[11:01:17.272]                           computeRestarts <- base::computeRestarts
[11:01:17.272]                           grepl <- base::grepl
[11:01:17.272]                           restarts <- computeRestarts(cond)
[11:01:17.272]                           for (restart in restarts) {
[11:01:17.272]                             name <- restart$name
[11:01:17.272]                             if (is.null(name)) 
[11:01:17.272]                               next
[11:01:17.272]                             if (!grepl(pattern, name)) 
[11:01:17.272]                               next
[11:01:17.272]                             invokeRestart(restart)
[11:01:17.272]                             muffled <- TRUE
[11:01:17.272]                             break
[11:01:17.272]                           }
[11:01:17.272]                         }
[11:01:17.272]                       }
[11:01:17.272]                       invisible(muffled)
[11:01:17.272]                     }
[11:01:17.272]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.272]                   }
[11:01:17.272]                 }
[11:01:17.272]             }
[11:01:17.272]         }))
[11:01:17.272]     }, error = function(ex) {
[11:01:17.272]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:17.272]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.272]                 ...future.rng), started = ...future.startTime, 
[11:01:17.272]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:17.272]             version = "1.8"), class = "FutureResult")
[11:01:17.272]     }, finally = {
[11:01:17.272]         if (!identical(...future.workdir, getwd())) 
[11:01:17.272]             setwd(...future.workdir)
[11:01:17.272]         {
[11:01:17.272]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:17.272]                 ...future.oldOptions$nwarnings <- NULL
[11:01:17.272]             }
[11:01:17.272]             base::options(...future.oldOptions)
[11:01:17.272]             if (.Platform$OS.type == "windows") {
[11:01:17.272]                 old_names <- names(...future.oldEnvVars)
[11:01:17.272]                 envs <- base::Sys.getenv()
[11:01:17.272]                 names <- names(envs)
[11:01:17.272]                 common <- intersect(names, old_names)
[11:01:17.272]                 added <- setdiff(names, old_names)
[11:01:17.272]                 removed <- setdiff(old_names, names)
[11:01:17.272]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:17.272]                   envs[common]]
[11:01:17.272]                 NAMES <- toupper(changed)
[11:01:17.272]                 args <- list()
[11:01:17.272]                 for (kk in seq_along(NAMES)) {
[11:01:17.272]                   name <- changed[[kk]]
[11:01:17.272]                   NAME <- NAMES[[kk]]
[11:01:17.272]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.272]                     next
[11:01:17.272]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.272]                 }
[11:01:17.272]                 NAMES <- toupper(added)
[11:01:17.272]                 for (kk in seq_along(NAMES)) {
[11:01:17.272]                   name <- added[[kk]]
[11:01:17.272]                   NAME <- NAMES[[kk]]
[11:01:17.272]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.272]                     next
[11:01:17.272]                   args[[name]] <- ""
[11:01:17.272]                 }
[11:01:17.272]                 NAMES <- toupper(removed)
[11:01:17.272]                 for (kk in seq_along(NAMES)) {
[11:01:17.272]                   name <- removed[[kk]]
[11:01:17.272]                   NAME <- NAMES[[kk]]
[11:01:17.272]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.272]                     next
[11:01:17.272]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.272]                 }
[11:01:17.272]                 if (length(args) > 0) 
[11:01:17.272]                   base::do.call(base::Sys.setenv, args = args)
[11:01:17.272]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:17.272]             }
[11:01:17.272]             else {
[11:01:17.272]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:17.272]             }
[11:01:17.272]             {
[11:01:17.272]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:17.272]                   0L) {
[11:01:17.272]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:17.272]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:17.272]                   base::options(opts)
[11:01:17.272]                 }
[11:01:17.272]                 {
[11:01:17.272]                   {
[11:01:17.272]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:17.272]                     NULL
[11:01:17.272]                   }
[11:01:17.272]                   options(future.plan = NULL)
[11:01:17.272]                   if (is.na(NA_character_)) 
[11:01:17.272]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.272]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:17.272]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:17.272]                     .init = FALSE)
[11:01:17.272]                 }
[11:01:17.272]             }
[11:01:17.272]         }
[11:01:17.272]     })
[11:01:17.272]     if (TRUE) {
[11:01:17.272]         base::sink(type = "output", split = FALSE)
[11:01:17.272]         if (TRUE) {
[11:01:17.272]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:17.272]         }
[11:01:17.272]         else {
[11:01:17.272]             ...future.result["stdout"] <- base::list(NULL)
[11:01:17.272]         }
[11:01:17.272]         base::close(...future.stdout)
[11:01:17.272]         ...future.stdout <- NULL
[11:01:17.272]     }
[11:01:17.272]     ...future.result$conditions <- ...future.conditions
[11:01:17.272]     ...future.result$finished <- base::Sys.time()
[11:01:17.272]     ...future.result
[11:01:17.272] }
[11:01:17.275] MultisessionFuture started
[11:01:17.275] - Launch lazy future ... done
[11:01:17.276] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.286] result() for ClusterFuture ...
[11:01:17.287] receiveMessageFromWorker() for ClusterFuture ...
[11:01:17.287] - Validating connection of MultisessionFuture
[11:01:17.317] - received message: FutureResult
[11:01:17.317] - Received FutureResult
[11:01:17.317] - Erased future from FutureRegistry
[11:01:17.317] result() for ClusterFuture ...
[11:01:17.317] - result already collected: FutureResult
[11:01:17.317] result() for ClusterFuture ... done
[11:01:17.318] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:17.318] result() for ClusterFuture ... done
[11:01:17.318] result() for ClusterFuture ...
[11:01:17.318] - result already collected: FutureResult
[11:01:17.318] result() for ClusterFuture ... done
[11:01:17.318] getGlobalsAndPackages() ...
[11:01:17.318] Searching for globals...
[11:01:17.319] - globals found: [1] ‘{’
[11:01:17.319] Searching for globals ... DONE
[11:01:17.319] Resolving globals: FALSE
[11:01:17.319] 
[11:01:17.320] 
[11:01:17.320] getGlobalsAndPackages() ... DONE
[11:01:17.320] run() for ‘Future’ ...
[11:01:17.320] - state: ‘created’
[11:01:17.320] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:17.334] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.334] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:17.335]   - Field: ‘node’
[11:01:17.335]   - Field: ‘label’
[11:01:17.335]   - Field: ‘local’
[11:01:17.335]   - Field: ‘owner’
[11:01:17.335]   - Field: ‘envir’
[11:01:17.335]   - Field: ‘workers’
[11:01:17.335]   - Field: ‘packages’
[11:01:17.335]   - Field: ‘gc’
[11:01:17.335]   - Field: ‘conditions’
[11:01:17.335]   - Field: ‘persistent’
[11:01:17.336]   - Field: ‘expr’
[11:01:17.336]   - Field: ‘uuid’
[11:01:17.336]   - Field: ‘seed’
[11:01:17.336]   - Field: ‘version’
[11:01:17.336]   - Field: ‘result’
[11:01:17.336]   - Field: ‘asynchronous’
[11:01:17.336]   - Field: ‘calls’
[11:01:17.336]   - Field: ‘globals’
[11:01:17.336]   - Field: ‘stdout’
[11:01:17.337]   - Field: ‘earlySignal’
[11:01:17.337]   - Field: ‘lazy’
[11:01:17.337]   - Field: ‘state’
[11:01:17.337] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:17.337] - Launch lazy future ...
[11:01:17.337] Packages needed by the future expression (n = 0): <none>
[11:01:17.337] Packages needed by future strategies (n = 0): <none>
[11:01:17.338] {
[11:01:17.338]     {
[11:01:17.338]         {
[11:01:17.338]             ...future.startTime <- base::Sys.time()
[11:01:17.338]             {
[11:01:17.338]                 {
[11:01:17.338]                   {
[11:01:17.338]                     {
[11:01:17.338]                       base::local({
[11:01:17.338]                         has_future <- base::requireNamespace("future", 
[11:01:17.338]                           quietly = TRUE)
[11:01:17.338]                         if (has_future) {
[11:01:17.338]                           ns <- base::getNamespace("future")
[11:01:17.338]                           version <- ns[[".package"]][["version"]]
[11:01:17.338]                           if (is.null(version)) 
[11:01:17.338]                             version <- utils::packageVersion("future")
[11:01:17.338]                         }
[11:01:17.338]                         else {
[11:01:17.338]                           version <- NULL
[11:01:17.338]                         }
[11:01:17.338]                         if (!has_future || version < "1.8.0") {
[11:01:17.338]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:17.338]                             "", base::R.version$version.string), 
[11:01:17.338]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:17.338]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:17.338]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:17.338]                               "release", "version")], collapse = " "), 
[11:01:17.338]                             hostname = base::Sys.info()[["nodename"]])
[11:01:17.338]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:17.338]                             info)
[11:01:17.338]                           info <- base::paste(info, collapse = "; ")
[11:01:17.338]                           if (!has_future) {
[11:01:17.338]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:17.338]                               info)
[11:01:17.338]                           }
[11:01:17.338]                           else {
[11:01:17.338]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:17.338]                               info, version)
[11:01:17.338]                           }
[11:01:17.338]                           base::stop(msg)
[11:01:17.338]                         }
[11:01:17.338]                       })
[11:01:17.338]                     }
[11:01:17.338]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:17.338]                     base::options(mc.cores = 1L)
[11:01:17.338]                   }
[11:01:17.338]                   ...future.strategy.old <- future::plan("list")
[11:01:17.338]                   options(future.plan = NULL)
[11:01:17.338]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.338]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:17.338]                 }
[11:01:17.338]                 ...future.workdir <- getwd()
[11:01:17.338]             }
[11:01:17.338]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:17.338]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:17.338]         }
[11:01:17.338]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:17.338]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:17.338]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:17.338]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:17.338]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:17.338]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:17.338]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:17.338]             base::names(...future.oldOptions))
[11:01:17.338]     }
[11:01:17.338]     if (FALSE) {
[11:01:17.338]     }
[11:01:17.338]     else {
[11:01:17.338]         if (TRUE) {
[11:01:17.338]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:17.338]                 open = "w")
[11:01:17.338]         }
[11:01:17.338]         else {
[11:01:17.338]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:17.338]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:17.338]         }
[11:01:17.338]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:17.338]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:17.338]             base::sink(type = "output", split = FALSE)
[11:01:17.338]             base::close(...future.stdout)
[11:01:17.338]         }, add = TRUE)
[11:01:17.338]     }
[11:01:17.338]     ...future.frame <- base::sys.nframe()
[11:01:17.338]     ...future.conditions <- base::list()
[11:01:17.338]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:17.338]     if (FALSE) {
[11:01:17.338]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:17.338]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:17.338]     }
[11:01:17.338]     ...future.result <- base::tryCatch({
[11:01:17.338]         base::withCallingHandlers({
[11:01:17.338]             ...future.value <- base::withVisible(base::local({
[11:01:17.338]                 ...future.makeSendCondition <- base::local({
[11:01:17.338]                   sendCondition <- NULL
[11:01:17.338]                   function(frame = 1L) {
[11:01:17.338]                     if (is.function(sendCondition)) 
[11:01:17.338]                       return(sendCondition)
[11:01:17.338]                     ns <- getNamespace("parallel")
[11:01:17.338]                     if (exists("sendData", mode = "function", 
[11:01:17.338]                       envir = ns)) {
[11:01:17.338]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:17.338]                         envir = ns)
[11:01:17.338]                       envir <- sys.frame(frame)
[11:01:17.338]                       master <- NULL
[11:01:17.338]                       while (!identical(envir, .GlobalEnv) && 
[11:01:17.338]                         !identical(envir, emptyenv())) {
[11:01:17.338]                         if (exists("master", mode = "list", envir = envir, 
[11:01:17.338]                           inherits = FALSE)) {
[11:01:17.338]                           master <- get("master", mode = "list", 
[11:01:17.338]                             envir = envir, inherits = FALSE)
[11:01:17.338]                           if (inherits(master, c("SOCKnode", 
[11:01:17.338]                             "SOCK0node"))) {
[11:01:17.338]                             sendCondition <<- function(cond) {
[11:01:17.338]                               data <- list(type = "VALUE", value = cond, 
[11:01:17.338]                                 success = TRUE)
[11:01:17.338]                               parallel_sendData(master, data)
[11:01:17.338]                             }
[11:01:17.338]                             return(sendCondition)
[11:01:17.338]                           }
[11:01:17.338]                         }
[11:01:17.338]                         frame <- frame + 1L
[11:01:17.338]                         envir <- sys.frame(frame)
[11:01:17.338]                       }
[11:01:17.338]                     }
[11:01:17.338]                     sendCondition <<- function(cond) NULL
[11:01:17.338]                   }
[11:01:17.338]                 })
[11:01:17.338]                 withCallingHandlers({
[11:01:17.338]                   {
[11:01:17.338]                     42
[11:01:17.338]                   }
[11:01:17.338]                 }, immediateCondition = function(cond) {
[11:01:17.338]                   sendCondition <- ...future.makeSendCondition()
[11:01:17.338]                   sendCondition(cond)
[11:01:17.338]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.338]                   {
[11:01:17.338]                     inherits <- base::inherits
[11:01:17.338]                     invokeRestart <- base::invokeRestart
[11:01:17.338]                     is.null <- base::is.null
[11:01:17.338]                     muffled <- FALSE
[11:01:17.338]                     if (inherits(cond, "message")) {
[11:01:17.338]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:17.338]                       if (muffled) 
[11:01:17.338]                         invokeRestart("muffleMessage")
[11:01:17.338]                     }
[11:01:17.338]                     else if (inherits(cond, "warning")) {
[11:01:17.338]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:17.338]                       if (muffled) 
[11:01:17.338]                         invokeRestart("muffleWarning")
[11:01:17.338]                     }
[11:01:17.338]                     else if (inherits(cond, "condition")) {
[11:01:17.338]                       if (!is.null(pattern)) {
[11:01:17.338]                         computeRestarts <- base::computeRestarts
[11:01:17.338]                         grepl <- base::grepl
[11:01:17.338]                         restarts <- computeRestarts(cond)
[11:01:17.338]                         for (restart in restarts) {
[11:01:17.338]                           name <- restart$name
[11:01:17.338]                           if (is.null(name)) 
[11:01:17.338]                             next
[11:01:17.338]                           if (!grepl(pattern, name)) 
[11:01:17.338]                             next
[11:01:17.338]                           invokeRestart(restart)
[11:01:17.338]                           muffled <- TRUE
[11:01:17.338]                           break
[11:01:17.338]                         }
[11:01:17.338]                       }
[11:01:17.338]                     }
[11:01:17.338]                     invisible(muffled)
[11:01:17.338]                   }
[11:01:17.338]                   muffleCondition(cond)
[11:01:17.338]                 })
[11:01:17.338]             }))
[11:01:17.338]             future::FutureResult(value = ...future.value$value, 
[11:01:17.338]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.338]                   ...future.rng), globalenv = if (FALSE) 
[11:01:17.338]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:17.338]                     ...future.globalenv.names))
[11:01:17.338]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:17.338]         }, condition = base::local({
[11:01:17.338]             c <- base::c
[11:01:17.338]             inherits <- base::inherits
[11:01:17.338]             invokeRestart <- base::invokeRestart
[11:01:17.338]             length <- base::length
[11:01:17.338]             list <- base::list
[11:01:17.338]             seq.int <- base::seq.int
[11:01:17.338]             signalCondition <- base::signalCondition
[11:01:17.338]             sys.calls <- base::sys.calls
[11:01:17.338]             `[[` <- base::`[[`
[11:01:17.338]             `+` <- base::`+`
[11:01:17.338]             `<<-` <- base::`<<-`
[11:01:17.338]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:17.338]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:17.338]                   3L)]
[11:01:17.338]             }
[11:01:17.338]             function(cond) {
[11:01:17.338]                 is_error <- inherits(cond, "error")
[11:01:17.338]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:17.338]                   NULL)
[11:01:17.338]                 if (is_error) {
[11:01:17.338]                   sessionInformation <- function() {
[11:01:17.338]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:17.338]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:17.338]                       search = base::search(), system = base::Sys.info())
[11:01:17.338]                   }
[11:01:17.338]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.338]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:17.338]                     cond$call), session = sessionInformation(), 
[11:01:17.338]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:17.338]                   signalCondition(cond)
[11:01:17.338]                 }
[11:01:17.338]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:17.338]                 "immediateCondition"))) {
[11:01:17.338]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:17.338]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.338]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:17.338]                   if (TRUE && !signal) {
[11:01:17.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.338]                     {
[11:01:17.338]                       inherits <- base::inherits
[11:01:17.338]                       invokeRestart <- base::invokeRestart
[11:01:17.338]                       is.null <- base::is.null
[11:01:17.338]                       muffled <- FALSE
[11:01:17.338]                       if (inherits(cond, "message")) {
[11:01:17.338]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.338]                         if (muffled) 
[11:01:17.338]                           invokeRestart("muffleMessage")
[11:01:17.338]                       }
[11:01:17.338]                       else if (inherits(cond, "warning")) {
[11:01:17.338]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.338]                         if (muffled) 
[11:01:17.338]                           invokeRestart("muffleWarning")
[11:01:17.338]                       }
[11:01:17.338]                       else if (inherits(cond, "condition")) {
[11:01:17.338]                         if (!is.null(pattern)) {
[11:01:17.338]                           computeRestarts <- base::computeRestarts
[11:01:17.338]                           grepl <- base::grepl
[11:01:17.338]                           restarts <- computeRestarts(cond)
[11:01:17.338]                           for (restart in restarts) {
[11:01:17.338]                             name <- restart$name
[11:01:17.338]                             if (is.null(name)) 
[11:01:17.338]                               next
[11:01:17.338]                             if (!grepl(pattern, name)) 
[11:01:17.338]                               next
[11:01:17.338]                             invokeRestart(restart)
[11:01:17.338]                             muffled <- TRUE
[11:01:17.338]                             break
[11:01:17.338]                           }
[11:01:17.338]                         }
[11:01:17.338]                       }
[11:01:17.338]                       invisible(muffled)
[11:01:17.338]                     }
[11:01:17.338]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.338]                   }
[11:01:17.338]                 }
[11:01:17.338]                 else {
[11:01:17.338]                   if (TRUE) {
[11:01:17.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.338]                     {
[11:01:17.338]                       inherits <- base::inherits
[11:01:17.338]                       invokeRestart <- base::invokeRestart
[11:01:17.338]                       is.null <- base::is.null
[11:01:17.338]                       muffled <- FALSE
[11:01:17.338]                       if (inherits(cond, "message")) {
[11:01:17.338]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.338]                         if (muffled) 
[11:01:17.338]                           invokeRestart("muffleMessage")
[11:01:17.338]                       }
[11:01:17.338]                       else if (inherits(cond, "warning")) {
[11:01:17.338]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.338]                         if (muffled) 
[11:01:17.338]                           invokeRestart("muffleWarning")
[11:01:17.338]                       }
[11:01:17.338]                       else if (inherits(cond, "condition")) {
[11:01:17.338]                         if (!is.null(pattern)) {
[11:01:17.338]                           computeRestarts <- base::computeRestarts
[11:01:17.338]                           grepl <- base::grepl
[11:01:17.338]                           restarts <- computeRestarts(cond)
[11:01:17.338]                           for (restart in restarts) {
[11:01:17.338]                             name <- restart$name
[11:01:17.338]                             if (is.null(name)) 
[11:01:17.338]                               next
[11:01:17.338]                             if (!grepl(pattern, name)) 
[11:01:17.338]                               next
[11:01:17.338]                             invokeRestart(restart)
[11:01:17.338]                             muffled <- TRUE
[11:01:17.338]                             break
[11:01:17.338]                           }
[11:01:17.338]                         }
[11:01:17.338]                       }
[11:01:17.338]                       invisible(muffled)
[11:01:17.338]                     }
[11:01:17.338]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.338]                   }
[11:01:17.338]                 }
[11:01:17.338]             }
[11:01:17.338]         }))
[11:01:17.338]     }, error = function(ex) {
[11:01:17.338]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:17.338]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.338]                 ...future.rng), started = ...future.startTime, 
[11:01:17.338]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:17.338]             version = "1.8"), class = "FutureResult")
[11:01:17.338]     }, finally = {
[11:01:17.338]         if (!identical(...future.workdir, getwd())) 
[11:01:17.338]             setwd(...future.workdir)
[11:01:17.338]         {
[11:01:17.338]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:17.338]                 ...future.oldOptions$nwarnings <- NULL
[11:01:17.338]             }
[11:01:17.338]             base::options(...future.oldOptions)
[11:01:17.338]             if (.Platform$OS.type == "windows") {
[11:01:17.338]                 old_names <- names(...future.oldEnvVars)
[11:01:17.338]                 envs <- base::Sys.getenv()
[11:01:17.338]                 names <- names(envs)
[11:01:17.338]                 common <- intersect(names, old_names)
[11:01:17.338]                 added <- setdiff(names, old_names)
[11:01:17.338]                 removed <- setdiff(old_names, names)
[11:01:17.338]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:17.338]                   envs[common]]
[11:01:17.338]                 NAMES <- toupper(changed)
[11:01:17.338]                 args <- list()
[11:01:17.338]                 for (kk in seq_along(NAMES)) {
[11:01:17.338]                   name <- changed[[kk]]
[11:01:17.338]                   NAME <- NAMES[[kk]]
[11:01:17.338]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.338]                     next
[11:01:17.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.338]                 }
[11:01:17.338]                 NAMES <- toupper(added)
[11:01:17.338]                 for (kk in seq_along(NAMES)) {
[11:01:17.338]                   name <- added[[kk]]
[11:01:17.338]                   NAME <- NAMES[[kk]]
[11:01:17.338]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.338]                     next
[11:01:17.338]                   args[[name]] <- ""
[11:01:17.338]                 }
[11:01:17.338]                 NAMES <- toupper(removed)
[11:01:17.338]                 for (kk in seq_along(NAMES)) {
[11:01:17.338]                   name <- removed[[kk]]
[11:01:17.338]                   NAME <- NAMES[[kk]]
[11:01:17.338]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.338]                     next
[11:01:17.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.338]                 }
[11:01:17.338]                 if (length(args) > 0) 
[11:01:17.338]                   base::do.call(base::Sys.setenv, args = args)
[11:01:17.338]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:17.338]             }
[11:01:17.338]             else {
[11:01:17.338]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:17.338]             }
[11:01:17.338]             {
[11:01:17.338]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:17.338]                   0L) {
[11:01:17.338]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:17.338]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:17.338]                   base::options(opts)
[11:01:17.338]                 }
[11:01:17.338]                 {
[11:01:17.338]                   {
[11:01:17.338]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:17.338]                     NULL
[11:01:17.338]                   }
[11:01:17.338]                   options(future.plan = NULL)
[11:01:17.338]                   if (is.na(NA_character_)) 
[11:01:17.338]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.338]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:17.338]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:17.338]                     .init = FALSE)
[11:01:17.338]                 }
[11:01:17.338]             }
[11:01:17.338]         }
[11:01:17.338]     })
[11:01:17.338]     if (TRUE) {
[11:01:17.338]         base::sink(type = "output", split = FALSE)
[11:01:17.338]         if (TRUE) {
[11:01:17.338]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:17.338]         }
[11:01:17.338]         else {
[11:01:17.338]             ...future.result["stdout"] <- base::list(NULL)
[11:01:17.338]         }
[11:01:17.338]         base::close(...future.stdout)
[11:01:17.338]         ...future.stdout <- NULL
[11:01:17.338]     }
[11:01:17.338]     ...future.result$conditions <- ...future.conditions
[11:01:17.338]     ...future.result$finished <- base::Sys.time()
[11:01:17.338]     ...future.result
[11:01:17.338] }
[11:01:17.341] MultisessionFuture started
[11:01:17.341] - Launch lazy future ... done
[11:01:17.341] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.353] result() for ClusterFuture ...
[11:01:17.353] receiveMessageFromWorker() for ClusterFuture ...
[11:01:17.353] - Validating connection of MultisessionFuture
[11:01:17.383] - received message: FutureResult
[11:01:17.383] - Received FutureResult
[11:01:17.383] - Erased future from FutureRegistry
[11:01:17.383] result() for ClusterFuture ...
[11:01:17.383] - result already collected: FutureResult
[11:01:17.383] result() for ClusterFuture ... done
[11:01:17.384] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:17.384] result() for ClusterFuture ... done
[11:01:17.384] result() for ClusterFuture ...
[11:01:17.384] - result already collected: FutureResult
[11:01:17.384] result() for ClusterFuture ... done
[11:01:17.385] getGlobalsAndPackages() ...
[11:01:17.386] 
[11:01:17.386] - globals: [0] <none>
[11:01:17.386] getGlobalsAndPackages() ... DONE
[11:01:17.399] Packages needed by the future expression (n = 0): <none>
[11:01:17.399] Packages needed by future strategies (n = 0): <none>
[11:01:17.399] {
[11:01:17.399]     {
[11:01:17.399]         {
[11:01:17.399]             ...future.startTime <- base::Sys.time()
[11:01:17.399]             {
[11:01:17.399]                 {
[11:01:17.399]                   {
[11:01:17.399]                     {
[11:01:17.399]                       base::local({
[11:01:17.399]                         has_future <- base::requireNamespace("future", 
[11:01:17.399]                           quietly = TRUE)
[11:01:17.399]                         if (has_future) {
[11:01:17.399]                           ns <- base::getNamespace("future")
[11:01:17.399]                           version <- ns[[".package"]][["version"]]
[11:01:17.399]                           if (is.null(version)) 
[11:01:17.399]                             version <- utils::packageVersion("future")
[11:01:17.399]                         }
[11:01:17.399]                         else {
[11:01:17.399]                           version <- NULL
[11:01:17.399]                         }
[11:01:17.399]                         if (!has_future || version < "1.8.0") {
[11:01:17.399]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:17.399]                             "", base::R.version$version.string), 
[11:01:17.399]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:17.399]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:17.399]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:17.399]                               "release", "version")], collapse = " "), 
[11:01:17.399]                             hostname = base::Sys.info()[["nodename"]])
[11:01:17.399]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:17.399]                             info)
[11:01:17.399]                           info <- base::paste(info, collapse = "; ")
[11:01:17.399]                           if (!has_future) {
[11:01:17.399]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:17.399]                               info)
[11:01:17.399]                           }
[11:01:17.399]                           else {
[11:01:17.399]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:17.399]                               info, version)
[11:01:17.399]                           }
[11:01:17.399]                           base::stop(msg)
[11:01:17.399]                         }
[11:01:17.399]                       })
[11:01:17.399]                     }
[11:01:17.399]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:17.399]                     base::options(mc.cores = 1L)
[11:01:17.399]                   }
[11:01:17.399]                   ...future.strategy.old <- future::plan("list")
[11:01:17.399]                   options(future.plan = NULL)
[11:01:17.399]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.399]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:17.399]                 }
[11:01:17.399]                 ...future.workdir <- getwd()
[11:01:17.399]             }
[11:01:17.399]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:17.399]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:17.399]         }
[11:01:17.399]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:17.399]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:17.399]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:17.399]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:17.399]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:17.399]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:17.399]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:17.399]             base::names(...future.oldOptions))
[11:01:17.399]     }
[11:01:17.399]     if (FALSE) {
[11:01:17.399]     }
[11:01:17.399]     else {
[11:01:17.399]         if (TRUE) {
[11:01:17.399]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:17.399]                 open = "w")
[11:01:17.399]         }
[11:01:17.399]         else {
[11:01:17.399]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:17.399]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:17.399]         }
[11:01:17.399]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:17.399]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:17.399]             base::sink(type = "output", split = FALSE)
[11:01:17.399]             base::close(...future.stdout)
[11:01:17.399]         }, add = TRUE)
[11:01:17.399]     }
[11:01:17.399]     ...future.frame <- base::sys.nframe()
[11:01:17.399]     ...future.conditions <- base::list()
[11:01:17.399]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:17.399]     if (FALSE) {
[11:01:17.399]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:17.399]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:17.399]     }
[11:01:17.399]     ...future.result <- base::tryCatch({
[11:01:17.399]         base::withCallingHandlers({
[11:01:17.399]             ...future.value <- base::withVisible(base::local({
[11:01:17.399]                 ...future.makeSendCondition <- base::local({
[11:01:17.399]                   sendCondition <- NULL
[11:01:17.399]                   function(frame = 1L) {
[11:01:17.399]                     if (is.function(sendCondition)) 
[11:01:17.399]                       return(sendCondition)
[11:01:17.399]                     ns <- getNamespace("parallel")
[11:01:17.399]                     if (exists("sendData", mode = "function", 
[11:01:17.399]                       envir = ns)) {
[11:01:17.399]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:17.399]                         envir = ns)
[11:01:17.399]                       envir <- sys.frame(frame)
[11:01:17.399]                       master <- NULL
[11:01:17.399]                       while (!identical(envir, .GlobalEnv) && 
[11:01:17.399]                         !identical(envir, emptyenv())) {
[11:01:17.399]                         if (exists("master", mode = "list", envir = envir, 
[11:01:17.399]                           inherits = FALSE)) {
[11:01:17.399]                           master <- get("master", mode = "list", 
[11:01:17.399]                             envir = envir, inherits = FALSE)
[11:01:17.399]                           if (inherits(master, c("SOCKnode", 
[11:01:17.399]                             "SOCK0node"))) {
[11:01:17.399]                             sendCondition <<- function(cond) {
[11:01:17.399]                               data <- list(type = "VALUE", value = cond, 
[11:01:17.399]                                 success = TRUE)
[11:01:17.399]                               parallel_sendData(master, data)
[11:01:17.399]                             }
[11:01:17.399]                             return(sendCondition)
[11:01:17.399]                           }
[11:01:17.399]                         }
[11:01:17.399]                         frame <- frame + 1L
[11:01:17.399]                         envir <- sys.frame(frame)
[11:01:17.399]                       }
[11:01:17.399]                     }
[11:01:17.399]                     sendCondition <<- function(cond) NULL
[11:01:17.399]                   }
[11:01:17.399]                 })
[11:01:17.399]                 withCallingHandlers({
[11:01:17.399]                   42
[11:01:17.399]                 }, immediateCondition = function(cond) {
[11:01:17.399]                   sendCondition <- ...future.makeSendCondition()
[11:01:17.399]                   sendCondition(cond)
[11:01:17.399]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.399]                   {
[11:01:17.399]                     inherits <- base::inherits
[11:01:17.399]                     invokeRestart <- base::invokeRestart
[11:01:17.399]                     is.null <- base::is.null
[11:01:17.399]                     muffled <- FALSE
[11:01:17.399]                     if (inherits(cond, "message")) {
[11:01:17.399]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:17.399]                       if (muffled) 
[11:01:17.399]                         invokeRestart("muffleMessage")
[11:01:17.399]                     }
[11:01:17.399]                     else if (inherits(cond, "warning")) {
[11:01:17.399]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:17.399]                       if (muffled) 
[11:01:17.399]                         invokeRestart("muffleWarning")
[11:01:17.399]                     }
[11:01:17.399]                     else if (inherits(cond, "condition")) {
[11:01:17.399]                       if (!is.null(pattern)) {
[11:01:17.399]                         computeRestarts <- base::computeRestarts
[11:01:17.399]                         grepl <- base::grepl
[11:01:17.399]                         restarts <- computeRestarts(cond)
[11:01:17.399]                         for (restart in restarts) {
[11:01:17.399]                           name <- restart$name
[11:01:17.399]                           if (is.null(name)) 
[11:01:17.399]                             next
[11:01:17.399]                           if (!grepl(pattern, name)) 
[11:01:17.399]                             next
[11:01:17.399]                           invokeRestart(restart)
[11:01:17.399]                           muffled <- TRUE
[11:01:17.399]                           break
[11:01:17.399]                         }
[11:01:17.399]                       }
[11:01:17.399]                     }
[11:01:17.399]                     invisible(muffled)
[11:01:17.399]                   }
[11:01:17.399]                   muffleCondition(cond)
[11:01:17.399]                 })
[11:01:17.399]             }))
[11:01:17.399]             future::FutureResult(value = ...future.value$value, 
[11:01:17.399]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.399]                   ...future.rng), globalenv = if (FALSE) 
[11:01:17.399]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:17.399]                     ...future.globalenv.names))
[11:01:17.399]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:17.399]         }, condition = base::local({
[11:01:17.399]             c <- base::c
[11:01:17.399]             inherits <- base::inherits
[11:01:17.399]             invokeRestart <- base::invokeRestart
[11:01:17.399]             length <- base::length
[11:01:17.399]             list <- base::list
[11:01:17.399]             seq.int <- base::seq.int
[11:01:17.399]             signalCondition <- base::signalCondition
[11:01:17.399]             sys.calls <- base::sys.calls
[11:01:17.399]             `[[` <- base::`[[`
[11:01:17.399]             `+` <- base::`+`
[11:01:17.399]             `<<-` <- base::`<<-`
[11:01:17.399]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:17.399]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:17.399]                   3L)]
[11:01:17.399]             }
[11:01:17.399]             function(cond) {
[11:01:17.399]                 is_error <- inherits(cond, "error")
[11:01:17.399]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:17.399]                   NULL)
[11:01:17.399]                 if (is_error) {
[11:01:17.399]                   sessionInformation <- function() {
[11:01:17.399]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:17.399]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:17.399]                       search = base::search(), system = base::Sys.info())
[11:01:17.399]                   }
[11:01:17.399]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.399]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:17.399]                     cond$call), session = sessionInformation(), 
[11:01:17.399]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:17.399]                   signalCondition(cond)
[11:01:17.399]                 }
[11:01:17.399]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:17.399]                 "immediateCondition"))) {
[11:01:17.399]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:17.399]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.399]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:17.399]                   if (TRUE && !signal) {
[11:01:17.399]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.399]                     {
[11:01:17.399]                       inherits <- base::inherits
[11:01:17.399]                       invokeRestart <- base::invokeRestart
[11:01:17.399]                       is.null <- base::is.null
[11:01:17.399]                       muffled <- FALSE
[11:01:17.399]                       if (inherits(cond, "message")) {
[11:01:17.399]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.399]                         if (muffled) 
[11:01:17.399]                           invokeRestart("muffleMessage")
[11:01:17.399]                       }
[11:01:17.399]                       else if (inherits(cond, "warning")) {
[11:01:17.399]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.399]                         if (muffled) 
[11:01:17.399]                           invokeRestart("muffleWarning")
[11:01:17.399]                       }
[11:01:17.399]                       else if (inherits(cond, "condition")) {
[11:01:17.399]                         if (!is.null(pattern)) {
[11:01:17.399]                           computeRestarts <- base::computeRestarts
[11:01:17.399]                           grepl <- base::grepl
[11:01:17.399]                           restarts <- computeRestarts(cond)
[11:01:17.399]                           for (restart in restarts) {
[11:01:17.399]                             name <- restart$name
[11:01:17.399]                             if (is.null(name)) 
[11:01:17.399]                               next
[11:01:17.399]                             if (!grepl(pattern, name)) 
[11:01:17.399]                               next
[11:01:17.399]                             invokeRestart(restart)
[11:01:17.399]                             muffled <- TRUE
[11:01:17.399]                             break
[11:01:17.399]                           }
[11:01:17.399]                         }
[11:01:17.399]                       }
[11:01:17.399]                       invisible(muffled)
[11:01:17.399]                     }
[11:01:17.399]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.399]                   }
[11:01:17.399]                 }
[11:01:17.399]                 else {
[11:01:17.399]                   if (TRUE) {
[11:01:17.399]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.399]                     {
[11:01:17.399]                       inherits <- base::inherits
[11:01:17.399]                       invokeRestart <- base::invokeRestart
[11:01:17.399]                       is.null <- base::is.null
[11:01:17.399]                       muffled <- FALSE
[11:01:17.399]                       if (inherits(cond, "message")) {
[11:01:17.399]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.399]                         if (muffled) 
[11:01:17.399]                           invokeRestart("muffleMessage")
[11:01:17.399]                       }
[11:01:17.399]                       else if (inherits(cond, "warning")) {
[11:01:17.399]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.399]                         if (muffled) 
[11:01:17.399]                           invokeRestart("muffleWarning")
[11:01:17.399]                       }
[11:01:17.399]                       else if (inherits(cond, "condition")) {
[11:01:17.399]                         if (!is.null(pattern)) {
[11:01:17.399]                           computeRestarts <- base::computeRestarts
[11:01:17.399]                           grepl <- base::grepl
[11:01:17.399]                           restarts <- computeRestarts(cond)
[11:01:17.399]                           for (restart in restarts) {
[11:01:17.399]                             name <- restart$name
[11:01:17.399]                             if (is.null(name)) 
[11:01:17.399]                               next
[11:01:17.399]                             if (!grepl(pattern, name)) 
[11:01:17.399]                               next
[11:01:17.399]                             invokeRestart(restart)
[11:01:17.399]                             muffled <- TRUE
[11:01:17.399]                             break
[11:01:17.399]                           }
[11:01:17.399]                         }
[11:01:17.399]                       }
[11:01:17.399]                       invisible(muffled)
[11:01:17.399]                     }
[11:01:17.399]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.399]                   }
[11:01:17.399]                 }
[11:01:17.399]             }
[11:01:17.399]         }))
[11:01:17.399]     }, error = function(ex) {
[11:01:17.399]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:17.399]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.399]                 ...future.rng), started = ...future.startTime, 
[11:01:17.399]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:17.399]             version = "1.8"), class = "FutureResult")
[11:01:17.399]     }, finally = {
[11:01:17.399]         if (!identical(...future.workdir, getwd())) 
[11:01:17.399]             setwd(...future.workdir)
[11:01:17.399]         {
[11:01:17.399]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:17.399]                 ...future.oldOptions$nwarnings <- NULL
[11:01:17.399]             }
[11:01:17.399]             base::options(...future.oldOptions)
[11:01:17.399]             if (.Platform$OS.type == "windows") {
[11:01:17.399]                 old_names <- names(...future.oldEnvVars)
[11:01:17.399]                 envs <- base::Sys.getenv()
[11:01:17.399]                 names <- names(envs)
[11:01:17.399]                 common <- intersect(names, old_names)
[11:01:17.399]                 added <- setdiff(names, old_names)
[11:01:17.399]                 removed <- setdiff(old_names, names)
[11:01:17.399]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:17.399]                   envs[common]]
[11:01:17.399]                 NAMES <- toupper(changed)
[11:01:17.399]                 args <- list()
[11:01:17.399]                 for (kk in seq_along(NAMES)) {
[11:01:17.399]                   name <- changed[[kk]]
[11:01:17.399]                   NAME <- NAMES[[kk]]
[11:01:17.399]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.399]                     next
[11:01:17.399]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.399]                 }
[11:01:17.399]                 NAMES <- toupper(added)
[11:01:17.399]                 for (kk in seq_along(NAMES)) {
[11:01:17.399]                   name <- added[[kk]]
[11:01:17.399]                   NAME <- NAMES[[kk]]
[11:01:17.399]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.399]                     next
[11:01:17.399]                   args[[name]] <- ""
[11:01:17.399]                 }
[11:01:17.399]                 NAMES <- toupper(removed)
[11:01:17.399]                 for (kk in seq_along(NAMES)) {
[11:01:17.399]                   name <- removed[[kk]]
[11:01:17.399]                   NAME <- NAMES[[kk]]
[11:01:17.399]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.399]                     next
[11:01:17.399]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.399]                 }
[11:01:17.399]                 if (length(args) > 0) 
[11:01:17.399]                   base::do.call(base::Sys.setenv, args = args)
[11:01:17.399]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:17.399]             }
[11:01:17.399]             else {
[11:01:17.399]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:17.399]             }
[11:01:17.399]             {
[11:01:17.399]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:17.399]                   0L) {
[11:01:17.399]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:17.399]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:17.399]                   base::options(opts)
[11:01:17.399]                 }
[11:01:17.399]                 {
[11:01:17.399]                   {
[11:01:17.399]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:17.399]                     NULL
[11:01:17.399]                   }
[11:01:17.399]                   options(future.plan = NULL)
[11:01:17.399]                   if (is.na(NA_character_)) 
[11:01:17.399]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.399]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:17.399]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:17.399]                     .init = FALSE)
[11:01:17.399]                 }
[11:01:17.399]             }
[11:01:17.399]         }
[11:01:17.399]     })
[11:01:17.399]     if (TRUE) {
[11:01:17.399]         base::sink(type = "output", split = FALSE)
[11:01:17.399]         if (TRUE) {
[11:01:17.399]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:17.399]         }
[11:01:17.399]         else {
[11:01:17.399]             ...future.result["stdout"] <- base::list(NULL)
[11:01:17.399]         }
[11:01:17.399]         base::close(...future.stdout)
[11:01:17.399]         ...future.stdout <- NULL
[11:01:17.399]     }
[11:01:17.399]     ...future.result$conditions <- ...future.conditions
[11:01:17.399]     ...future.result$finished <- base::Sys.time()
[11:01:17.399]     ...future.result
[11:01:17.399] }
[11:01:17.402] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.413] result() for ClusterFuture ...
[11:01:17.414] receiveMessageFromWorker() for ClusterFuture ...
[11:01:17.414] - Validating connection of MultisessionFuture
[11:01:17.444] - received message: FutureResult
[11:01:17.444] - Received FutureResult
[11:01:17.444] - Erased future from FutureRegistry
[11:01:17.444] result() for ClusterFuture ...
[11:01:17.444] - result already collected: FutureResult
[11:01:17.444] result() for ClusterFuture ... done
[11:01:17.445] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:17.445] result() for ClusterFuture ... done
[11:01:17.445] result() for ClusterFuture ...
[11:01:17.445] - result already collected: FutureResult
[11:01:17.445] result() for ClusterFuture ... done
[11:01:17.445] getGlobalsAndPackages() ...
[11:01:17.445] Searching for globals...
[11:01:17.446] 
[11:01:17.446] Searching for globals ... DONE
[11:01:17.446] - globals: [0] <none>
[11:01:17.446] getGlobalsAndPackages() ... DONE
[11:01:17.446] run() for ‘Future’ ...
[11:01:17.446] - state: ‘created’
[11:01:17.446] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:17.461] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.461] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:17.461]   - Field: ‘node’
[11:01:17.461]   - Field: ‘label’
[11:01:17.461]   - Field: ‘local’
[11:01:17.461]   - Field: ‘owner’
[11:01:17.461]   - Field: ‘envir’
[11:01:17.461]   - Field: ‘workers’
[11:01:17.461]   - Field: ‘packages’
[11:01:17.461]   - Field: ‘gc’
[11:01:17.462]   - Field: ‘conditions’
[11:01:17.462]   - Field: ‘persistent’
[11:01:17.462]   - Field: ‘expr’
[11:01:17.462]   - Field: ‘uuid’
[11:01:17.462]   - Field: ‘seed’
[11:01:17.462]   - Field: ‘version’
[11:01:17.462]   - Field: ‘result’
[11:01:17.462]   - Field: ‘asynchronous’
[11:01:17.462]   - Field: ‘calls’
[11:01:17.463]   - Field: ‘globals’
[11:01:17.463]   - Field: ‘stdout’
[11:01:17.463]   - Field: ‘earlySignal’
[11:01:17.463]   - Field: ‘lazy’
[11:01:17.463]   - Field: ‘state’
[11:01:17.463] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:17.463] - Launch lazy future ...
[11:01:17.464] Packages needed by the future expression (n = 0): <none>
[11:01:17.464] Packages needed by future strategies (n = 0): <none>
[11:01:17.464] {
[11:01:17.464]     {
[11:01:17.464]         {
[11:01:17.464]             ...future.startTime <- base::Sys.time()
[11:01:17.464]             {
[11:01:17.464]                 {
[11:01:17.464]                   {
[11:01:17.464]                     {
[11:01:17.464]                       base::local({
[11:01:17.464]                         has_future <- base::requireNamespace("future", 
[11:01:17.464]                           quietly = TRUE)
[11:01:17.464]                         if (has_future) {
[11:01:17.464]                           ns <- base::getNamespace("future")
[11:01:17.464]                           version <- ns[[".package"]][["version"]]
[11:01:17.464]                           if (is.null(version)) 
[11:01:17.464]                             version <- utils::packageVersion("future")
[11:01:17.464]                         }
[11:01:17.464]                         else {
[11:01:17.464]                           version <- NULL
[11:01:17.464]                         }
[11:01:17.464]                         if (!has_future || version < "1.8.0") {
[11:01:17.464]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:17.464]                             "", base::R.version$version.string), 
[11:01:17.464]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:17.464]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:17.464]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:17.464]                               "release", "version")], collapse = " "), 
[11:01:17.464]                             hostname = base::Sys.info()[["nodename"]])
[11:01:17.464]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:17.464]                             info)
[11:01:17.464]                           info <- base::paste(info, collapse = "; ")
[11:01:17.464]                           if (!has_future) {
[11:01:17.464]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:17.464]                               info)
[11:01:17.464]                           }
[11:01:17.464]                           else {
[11:01:17.464]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:17.464]                               info, version)
[11:01:17.464]                           }
[11:01:17.464]                           base::stop(msg)
[11:01:17.464]                         }
[11:01:17.464]                       })
[11:01:17.464]                     }
[11:01:17.464]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:17.464]                     base::options(mc.cores = 1L)
[11:01:17.464]                   }
[11:01:17.464]                   ...future.strategy.old <- future::plan("list")
[11:01:17.464]                   options(future.plan = NULL)
[11:01:17.464]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.464]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:17.464]                 }
[11:01:17.464]                 ...future.workdir <- getwd()
[11:01:17.464]             }
[11:01:17.464]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:17.464]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:17.464]         }
[11:01:17.464]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:17.464]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:17.464]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:17.464]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:17.464]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:17.464]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:17.464]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:17.464]             base::names(...future.oldOptions))
[11:01:17.464]     }
[11:01:17.464]     if (FALSE) {
[11:01:17.464]     }
[11:01:17.464]     else {
[11:01:17.464]         if (TRUE) {
[11:01:17.464]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:17.464]                 open = "w")
[11:01:17.464]         }
[11:01:17.464]         else {
[11:01:17.464]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:17.464]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:17.464]         }
[11:01:17.464]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:17.464]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:17.464]             base::sink(type = "output", split = FALSE)
[11:01:17.464]             base::close(...future.stdout)
[11:01:17.464]         }, add = TRUE)
[11:01:17.464]     }
[11:01:17.464]     ...future.frame <- base::sys.nframe()
[11:01:17.464]     ...future.conditions <- base::list()
[11:01:17.464]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:17.464]     if (FALSE) {
[11:01:17.464]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:17.464]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:17.464]     }
[11:01:17.464]     ...future.result <- base::tryCatch({
[11:01:17.464]         base::withCallingHandlers({
[11:01:17.464]             ...future.value <- base::withVisible(base::local({
[11:01:17.464]                 ...future.makeSendCondition <- base::local({
[11:01:17.464]                   sendCondition <- NULL
[11:01:17.464]                   function(frame = 1L) {
[11:01:17.464]                     if (is.function(sendCondition)) 
[11:01:17.464]                       return(sendCondition)
[11:01:17.464]                     ns <- getNamespace("parallel")
[11:01:17.464]                     if (exists("sendData", mode = "function", 
[11:01:17.464]                       envir = ns)) {
[11:01:17.464]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:17.464]                         envir = ns)
[11:01:17.464]                       envir <- sys.frame(frame)
[11:01:17.464]                       master <- NULL
[11:01:17.464]                       while (!identical(envir, .GlobalEnv) && 
[11:01:17.464]                         !identical(envir, emptyenv())) {
[11:01:17.464]                         if (exists("master", mode = "list", envir = envir, 
[11:01:17.464]                           inherits = FALSE)) {
[11:01:17.464]                           master <- get("master", mode = "list", 
[11:01:17.464]                             envir = envir, inherits = FALSE)
[11:01:17.464]                           if (inherits(master, c("SOCKnode", 
[11:01:17.464]                             "SOCK0node"))) {
[11:01:17.464]                             sendCondition <<- function(cond) {
[11:01:17.464]                               data <- list(type = "VALUE", value = cond, 
[11:01:17.464]                                 success = TRUE)
[11:01:17.464]                               parallel_sendData(master, data)
[11:01:17.464]                             }
[11:01:17.464]                             return(sendCondition)
[11:01:17.464]                           }
[11:01:17.464]                         }
[11:01:17.464]                         frame <- frame + 1L
[11:01:17.464]                         envir <- sys.frame(frame)
[11:01:17.464]                       }
[11:01:17.464]                     }
[11:01:17.464]                     sendCondition <<- function(cond) NULL
[11:01:17.464]                   }
[11:01:17.464]                 })
[11:01:17.464]                 withCallingHandlers({
[11:01:17.464]                   42
[11:01:17.464]                 }, immediateCondition = function(cond) {
[11:01:17.464]                   sendCondition <- ...future.makeSendCondition()
[11:01:17.464]                   sendCondition(cond)
[11:01:17.464]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.464]                   {
[11:01:17.464]                     inherits <- base::inherits
[11:01:17.464]                     invokeRestart <- base::invokeRestart
[11:01:17.464]                     is.null <- base::is.null
[11:01:17.464]                     muffled <- FALSE
[11:01:17.464]                     if (inherits(cond, "message")) {
[11:01:17.464]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:17.464]                       if (muffled) 
[11:01:17.464]                         invokeRestart("muffleMessage")
[11:01:17.464]                     }
[11:01:17.464]                     else if (inherits(cond, "warning")) {
[11:01:17.464]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:17.464]                       if (muffled) 
[11:01:17.464]                         invokeRestart("muffleWarning")
[11:01:17.464]                     }
[11:01:17.464]                     else if (inherits(cond, "condition")) {
[11:01:17.464]                       if (!is.null(pattern)) {
[11:01:17.464]                         computeRestarts <- base::computeRestarts
[11:01:17.464]                         grepl <- base::grepl
[11:01:17.464]                         restarts <- computeRestarts(cond)
[11:01:17.464]                         for (restart in restarts) {
[11:01:17.464]                           name <- restart$name
[11:01:17.464]                           if (is.null(name)) 
[11:01:17.464]                             next
[11:01:17.464]                           if (!grepl(pattern, name)) 
[11:01:17.464]                             next
[11:01:17.464]                           invokeRestart(restart)
[11:01:17.464]                           muffled <- TRUE
[11:01:17.464]                           break
[11:01:17.464]                         }
[11:01:17.464]                       }
[11:01:17.464]                     }
[11:01:17.464]                     invisible(muffled)
[11:01:17.464]                   }
[11:01:17.464]                   muffleCondition(cond)
[11:01:17.464]                 })
[11:01:17.464]             }))
[11:01:17.464]             future::FutureResult(value = ...future.value$value, 
[11:01:17.464]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.464]                   ...future.rng), globalenv = if (FALSE) 
[11:01:17.464]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:17.464]                     ...future.globalenv.names))
[11:01:17.464]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:17.464]         }, condition = base::local({
[11:01:17.464]             c <- base::c
[11:01:17.464]             inherits <- base::inherits
[11:01:17.464]             invokeRestart <- base::invokeRestart
[11:01:17.464]             length <- base::length
[11:01:17.464]             list <- base::list
[11:01:17.464]             seq.int <- base::seq.int
[11:01:17.464]             signalCondition <- base::signalCondition
[11:01:17.464]             sys.calls <- base::sys.calls
[11:01:17.464]             `[[` <- base::`[[`
[11:01:17.464]             `+` <- base::`+`
[11:01:17.464]             `<<-` <- base::`<<-`
[11:01:17.464]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:17.464]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:17.464]                   3L)]
[11:01:17.464]             }
[11:01:17.464]             function(cond) {
[11:01:17.464]                 is_error <- inherits(cond, "error")
[11:01:17.464]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:17.464]                   NULL)
[11:01:17.464]                 if (is_error) {
[11:01:17.464]                   sessionInformation <- function() {
[11:01:17.464]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:17.464]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:17.464]                       search = base::search(), system = base::Sys.info())
[11:01:17.464]                   }
[11:01:17.464]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.464]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:17.464]                     cond$call), session = sessionInformation(), 
[11:01:17.464]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:17.464]                   signalCondition(cond)
[11:01:17.464]                 }
[11:01:17.464]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:17.464]                 "immediateCondition"))) {
[11:01:17.464]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:17.464]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.464]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:17.464]                   if (TRUE && !signal) {
[11:01:17.464]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.464]                     {
[11:01:17.464]                       inherits <- base::inherits
[11:01:17.464]                       invokeRestart <- base::invokeRestart
[11:01:17.464]                       is.null <- base::is.null
[11:01:17.464]                       muffled <- FALSE
[11:01:17.464]                       if (inherits(cond, "message")) {
[11:01:17.464]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.464]                         if (muffled) 
[11:01:17.464]                           invokeRestart("muffleMessage")
[11:01:17.464]                       }
[11:01:17.464]                       else if (inherits(cond, "warning")) {
[11:01:17.464]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.464]                         if (muffled) 
[11:01:17.464]                           invokeRestart("muffleWarning")
[11:01:17.464]                       }
[11:01:17.464]                       else if (inherits(cond, "condition")) {
[11:01:17.464]                         if (!is.null(pattern)) {
[11:01:17.464]                           computeRestarts <- base::computeRestarts
[11:01:17.464]                           grepl <- base::grepl
[11:01:17.464]                           restarts <- computeRestarts(cond)
[11:01:17.464]                           for (restart in restarts) {
[11:01:17.464]                             name <- restart$name
[11:01:17.464]                             if (is.null(name)) 
[11:01:17.464]                               next
[11:01:17.464]                             if (!grepl(pattern, name)) 
[11:01:17.464]                               next
[11:01:17.464]                             invokeRestart(restart)
[11:01:17.464]                             muffled <- TRUE
[11:01:17.464]                             break
[11:01:17.464]                           }
[11:01:17.464]                         }
[11:01:17.464]                       }
[11:01:17.464]                       invisible(muffled)
[11:01:17.464]                     }
[11:01:17.464]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.464]                   }
[11:01:17.464]                 }
[11:01:17.464]                 else {
[11:01:17.464]                   if (TRUE) {
[11:01:17.464]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.464]                     {
[11:01:17.464]                       inherits <- base::inherits
[11:01:17.464]                       invokeRestart <- base::invokeRestart
[11:01:17.464]                       is.null <- base::is.null
[11:01:17.464]                       muffled <- FALSE
[11:01:17.464]                       if (inherits(cond, "message")) {
[11:01:17.464]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.464]                         if (muffled) 
[11:01:17.464]                           invokeRestart("muffleMessage")
[11:01:17.464]                       }
[11:01:17.464]                       else if (inherits(cond, "warning")) {
[11:01:17.464]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.464]                         if (muffled) 
[11:01:17.464]                           invokeRestart("muffleWarning")
[11:01:17.464]                       }
[11:01:17.464]                       else if (inherits(cond, "condition")) {
[11:01:17.464]                         if (!is.null(pattern)) {
[11:01:17.464]                           computeRestarts <- base::computeRestarts
[11:01:17.464]                           grepl <- base::grepl
[11:01:17.464]                           restarts <- computeRestarts(cond)
[11:01:17.464]                           for (restart in restarts) {
[11:01:17.464]                             name <- restart$name
[11:01:17.464]                             if (is.null(name)) 
[11:01:17.464]                               next
[11:01:17.464]                             if (!grepl(pattern, name)) 
[11:01:17.464]                               next
[11:01:17.464]                             invokeRestart(restart)
[11:01:17.464]                             muffled <- TRUE
[11:01:17.464]                             break
[11:01:17.464]                           }
[11:01:17.464]                         }
[11:01:17.464]                       }
[11:01:17.464]                       invisible(muffled)
[11:01:17.464]                     }
[11:01:17.464]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.464]                   }
[11:01:17.464]                 }
[11:01:17.464]             }
[11:01:17.464]         }))
[11:01:17.464]     }, error = function(ex) {
[11:01:17.464]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:17.464]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.464]                 ...future.rng), started = ...future.startTime, 
[11:01:17.464]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:17.464]             version = "1.8"), class = "FutureResult")
[11:01:17.464]     }, finally = {
[11:01:17.464]         if (!identical(...future.workdir, getwd())) 
[11:01:17.464]             setwd(...future.workdir)
[11:01:17.464]         {
[11:01:17.464]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:17.464]                 ...future.oldOptions$nwarnings <- NULL
[11:01:17.464]             }
[11:01:17.464]             base::options(...future.oldOptions)
[11:01:17.464]             if (.Platform$OS.type == "windows") {
[11:01:17.464]                 old_names <- names(...future.oldEnvVars)
[11:01:17.464]                 envs <- base::Sys.getenv()
[11:01:17.464]                 names <- names(envs)
[11:01:17.464]                 common <- intersect(names, old_names)
[11:01:17.464]                 added <- setdiff(names, old_names)
[11:01:17.464]                 removed <- setdiff(old_names, names)
[11:01:17.464]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:17.464]                   envs[common]]
[11:01:17.464]                 NAMES <- toupper(changed)
[11:01:17.464]                 args <- list()
[11:01:17.464]                 for (kk in seq_along(NAMES)) {
[11:01:17.464]                   name <- changed[[kk]]
[11:01:17.464]                   NAME <- NAMES[[kk]]
[11:01:17.464]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.464]                     next
[11:01:17.464]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.464]                 }
[11:01:17.464]                 NAMES <- toupper(added)
[11:01:17.464]                 for (kk in seq_along(NAMES)) {
[11:01:17.464]                   name <- added[[kk]]
[11:01:17.464]                   NAME <- NAMES[[kk]]
[11:01:17.464]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.464]                     next
[11:01:17.464]                   args[[name]] <- ""
[11:01:17.464]                 }
[11:01:17.464]                 NAMES <- toupper(removed)
[11:01:17.464]                 for (kk in seq_along(NAMES)) {
[11:01:17.464]                   name <- removed[[kk]]
[11:01:17.464]                   NAME <- NAMES[[kk]]
[11:01:17.464]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.464]                     next
[11:01:17.464]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.464]                 }
[11:01:17.464]                 if (length(args) > 0) 
[11:01:17.464]                   base::do.call(base::Sys.setenv, args = args)
[11:01:17.464]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:17.464]             }
[11:01:17.464]             else {
[11:01:17.464]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:17.464]             }
[11:01:17.464]             {
[11:01:17.464]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:17.464]                   0L) {
[11:01:17.464]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:17.464]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:17.464]                   base::options(opts)
[11:01:17.464]                 }
[11:01:17.464]                 {
[11:01:17.464]                   {
[11:01:17.464]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:17.464]                     NULL
[11:01:17.464]                   }
[11:01:17.464]                   options(future.plan = NULL)
[11:01:17.464]                   if (is.na(NA_character_)) 
[11:01:17.464]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.464]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:17.464]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:17.464]                     .init = FALSE)
[11:01:17.464]                 }
[11:01:17.464]             }
[11:01:17.464]         }
[11:01:17.464]     })
[11:01:17.464]     if (TRUE) {
[11:01:17.464]         base::sink(type = "output", split = FALSE)
[11:01:17.464]         if (TRUE) {
[11:01:17.464]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:17.464]         }
[11:01:17.464]         else {
[11:01:17.464]             ...future.result["stdout"] <- base::list(NULL)
[11:01:17.464]         }
[11:01:17.464]         base::close(...future.stdout)
[11:01:17.464]         ...future.stdout <- NULL
[11:01:17.464]     }
[11:01:17.464]     ...future.result$conditions <- ...future.conditions
[11:01:17.464]     ...future.result$finished <- base::Sys.time()
[11:01:17.464]     ...future.result
[11:01:17.464] }
[11:01:17.467] MultisessionFuture started
[11:01:17.467] - Launch lazy future ... done
[11:01:17.468] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.479] result() for ClusterFuture ...
[11:01:17.479] receiveMessageFromWorker() for ClusterFuture ...
[11:01:17.479] - Validating connection of MultisessionFuture
[11:01:17.509] - received message: FutureResult
[11:01:17.509] - Received FutureResult
[11:01:17.509] - Erased future from FutureRegistry
[11:01:17.509] result() for ClusterFuture ...
[11:01:17.510] - result already collected: FutureResult
[11:01:17.510] result() for ClusterFuture ... done
[11:01:17.510] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:17.510] result() for ClusterFuture ... done
[11:01:17.510] result() for ClusterFuture ...
[11:01:17.510] - result already collected: FutureResult
[11:01:17.510] result() for ClusterFuture ... done
[11:01:17.510] getGlobalsAndPackages() ...
[11:01:17.511] Searching for globals...
[11:01:17.511] - globals found: [1] ‘{’
[11:01:17.511] Searching for globals ... DONE
[11:01:17.512] Resolving globals: FALSE
[11:01:17.512] 
[11:01:17.512] 
[11:01:17.512] getGlobalsAndPackages() ... DONE
[11:01:17.512] run() for ‘Future’ ...
[11:01:17.512] - state: ‘created’
[11:01:17.513] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:17.527] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.527] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:17.527]   - Field: ‘node’
[11:01:17.527]   - Field: ‘label’
[11:01:17.527]   - Field: ‘local’
[11:01:17.527]   - Field: ‘owner’
[11:01:17.528]   - Field: ‘envir’
[11:01:17.528]   - Field: ‘workers’
[11:01:17.528]   - Field: ‘packages’
[11:01:17.528]   - Field: ‘gc’
[11:01:17.528]   - Field: ‘conditions’
[11:01:17.528]   - Field: ‘persistent’
[11:01:17.528]   - Field: ‘expr’
[11:01:17.528]   - Field: ‘uuid’
[11:01:17.528]   - Field: ‘seed’
[11:01:17.528]   - Field: ‘version’
[11:01:17.529]   - Field: ‘result’
[11:01:17.529]   - Field: ‘asynchronous’
[11:01:17.529]   - Field: ‘calls’
[11:01:17.529]   - Field: ‘globals’
[11:01:17.529]   - Field: ‘stdout’
[11:01:17.529]   - Field: ‘earlySignal’
[11:01:17.529]   - Field: ‘lazy’
[11:01:17.529]   - Field: ‘state’
[11:01:17.529] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:17.530] - Launch lazy future ...
[11:01:17.530] Packages needed by the future expression (n = 0): <none>
[11:01:17.530] Packages needed by future strategies (n = 0): <none>
[11:01:17.530] {
[11:01:17.530]     {
[11:01:17.530]         {
[11:01:17.530]             ...future.startTime <- base::Sys.time()
[11:01:17.530]             {
[11:01:17.530]                 {
[11:01:17.530]                   {
[11:01:17.530]                     {
[11:01:17.530]                       base::local({
[11:01:17.530]                         has_future <- base::requireNamespace("future", 
[11:01:17.530]                           quietly = TRUE)
[11:01:17.530]                         if (has_future) {
[11:01:17.530]                           ns <- base::getNamespace("future")
[11:01:17.530]                           version <- ns[[".package"]][["version"]]
[11:01:17.530]                           if (is.null(version)) 
[11:01:17.530]                             version <- utils::packageVersion("future")
[11:01:17.530]                         }
[11:01:17.530]                         else {
[11:01:17.530]                           version <- NULL
[11:01:17.530]                         }
[11:01:17.530]                         if (!has_future || version < "1.8.0") {
[11:01:17.530]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:17.530]                             "", base::R.version$version.string), 
[11:01:17.530]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:17.530]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:17.530]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:17.530]                               "release", "version")], collapse = " "), 
[11:01:17.530]                             hostname = base::Sys.info()[["nodename"]])
[11:01:17.530]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:17.530]                             info)
[11:01:17.530]                           info <- base::paste(info, collapse = "; ")
[11:01:17.530]                           if (!has_future) {
[11:01:17.530]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:17.530]                               info)
[11:01:17.530]                           }
[11:01:17.530]                           else {
[11:01:17.530]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:17.530]                               info, version)
[11:01:17.530]                           }
[11:01:17.530]                           base::stop(msg)
[11:01:17.530]                         }
[11:01:17.530]                       })
[11:01:17.530]                     }
[11:01:17.530]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:17.530]                     base::options(mc.cores = 1L)
[11:01:17.530]                   }
[11:01:17.530]                   ...future.strategy.old <- future::plan("list")
[11:01:17.530]                   options(future.plan = NULL)
[11:01:17.530]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.530]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:17.530]                 }
[11:01:17.530]                 ...future.workdir <- getwd()
[11:01:17.530]             }
[11:01:17.530]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:17.530]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:17.530]         }
[11:01:17.530]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:17.530]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:17.530]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:17.530]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:17.530]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:17.530]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:17.530]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:17.530]             base::names(...future.oldOptions))
[11:01:17.530]     }
[11:01:17.530]     if (FALSE) {
[11:01:17.530]     }
[11:01:17.530]     else {
[11:01:17.530]         if (TRUE) {
[11:01:17.530]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:17.530]                 open = "w")
[11:01:17.530]         }
[11:01:17.530]         else {
[11:01:17.530]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:17.530]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:17.530]         }
[11:01:17.530]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:17.530]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:17.530]             base::sink(type = "output", split = FALSE)
[11:01:17.530]             base::close(...future.stdout)
[11:01:17.530]         }, add = TRUE)
[11:01:17.530]     }
[11:01:17.530]     ...future.frame <- base::sys.nframe()
[11:01:17.530]     ...future.conditions <- base::list()
[11:01:17.530]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:17.530]     if (FALSE) {
[11:01:17.530]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:17.530]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:17.530]     }
[11:01:17.530]     ...future.result <- base::tryCatch({
[11:01:17.530]         base::withCallingHandlers({
[11:01:17.530]             ...future.value <- base::withVisible(base::local({
[11:01:17.530]                 ...future.makeSendCondition <- base::local({
[11:01:17.530]                   sendCondition <- NULL
[11:01:17.530]                   function(frame = 1L) {
[11:01:17.530]                     if (is.function(sendCondition)) 
[11:01:17.530]                       return(sendCondition)
[11:01:17.530]                     ns <- getNamespace("parallel")
[11:01:17.530]                     if (exists("sendData", mode = "function", 
[11:01:17.530]                       envir = ns)) {
[11:01:17.530]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:17.530]                         envir = ns)
[11:01:17.530]                       envir <- sys.frame(frame)
[11:01:17.530]                       master <- NULL
[11:01:17.530]                       while (!identical(envir, .GlobalEnv) && 
[11:01:17.530]                         !identical(envir, emptyenv())) {
[11:01:17.530]                         if (exists("master", mode = "list", envir = envir, 
[11:01:17.530]                           inherits = FALSE)) {
[11:01:17.530]                           master <- get("master", mode = "list", 
[11:01:17.530]                             envir = envir, inherits = FALSE)
[11:01:17.530]                           if (inherits(master, c("SOCKnode", 
[11:01:17.530]                             "SOCK0node"))) {
[11:01:17.530]                             sendCondition <<- function(cond) {
[11:01:17.530]                               data <- list(type = "VALUE", value = cond, 
[11:01:17.530]                                 success = TRUE)
[11:01:17.530]                               parallel_sendData(master, data)
[11:01:17.530]                             }
[11:01:17.530]                             return(sendCondition)
[11:01:17.530]                           }
[11:01:17.530]                         }
[11:01:17.530]                         frame <- frame + 1L
[11:01:17.530]                         envir <- sys.frame(frame)
[11:01:17.530]                       }
[11:01:17.530]                     }
[11:01:17.530]                     sendCondition <<- function(cond) NULL
[11:01:17.530]                   }
[11:01:17.530]                 })
[11:01:17.530]                 withCallingHandlers({
[11:01:17.530]                   {
[11:01:17.530]                     42
[11:01:17.530]                   }
[11:01:17.530]                 }, immediateCondition = function(cond) {
[11:01:17.530]                   sendCondition <- ...future.makeSendCondition()
[11:01:17.530]                   sendCondition(cond)
[11:01:17.530]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.530]                   {
[11:01:17.530]                     inherits <- base::inherits
[11:01:17.530]                     invokeRestart <- base::invokeRestart
[11:01:17.530]                     is.null <- base::is.null
[11:01:17.530]                     muffled <- FALSE
[11:01:17.530]                     if (inherits(cond, "message")) {
[11:01:17.530]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:17.530]                       if (muffled) 
[11:01:17.530]                         invokeRestart("muffleMessage")
[11:01:17.530]                     }
[11:01:17.530]                     else if (inherits(cond, "warning")) {
[11:01:17.530]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:17.530]                       if (muffled) 
[11:01:17.530]                         invokeRestart("muffleWarning")
[11:01:17.530]                     }
[11:01:17.530]                     else if (inherits(cond, "condition")) {
[11:01:17.530]                       if (!is.null(pattern)) {
[11:01:17.530]                         computeRestarts <- base::computeRestarts
[11:01:17.530]                         grepl <- base::grepl
[11:01:17.530]                         restarts <- computeRestarts(cond)
[11:01:17.530]                         for (restart in restarts) {
[11:01:17.530]                           name <- restart$name
[11:01:17.530]                           if (is.null(name)) 
[11:01:17.530]                             next
[11:01:17.530]                           if (!grepl(pattern, name)) 
[11:01:17.530]                             next
[11:01:17.530]                           invokeRestart(restart)
[11:01:17.530]                           muffled <- TRUE
[11:01:17.530]                           break
[11:01:17.530]                         }
[11:01:17.530]                       }
[11:01:17.530]                     }
[11:01:17.530]                     invisible(muffled)
[11:01:17.530]                   }
[11:01:17.530]                   muffleCondition(cond)
[11:01:17.530]                 })
[11:01:17.530]             }))
[11:01:17.530]             future::FutureResult(value = ...future.value$value, 
[11:01:17.530]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.530]                   ...future.rng), globalenv = if (FALSE) 
[11:01:17.530]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:17.530]                     ...future.globalenv.names))
[11:01:17.530]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:17.530]         }, condition = base::local({
[11:01:17.530]             c <- base::c
[11:01:17.530]             inherits <- base::inherits
[11:01:17.530]             invokeRestart <- base::invokeRestart
[11:01:17.530]             length <- base::length
[11:01:17.530]             list <- base::list
[11:01:17.530]             seq.int <- base::seq.int
[11:01:17.530]             signalCondition <- base::signalCondition
[11:01:17.530]             sys.calls <- base::sys.calls
[11:01:17.530]             `[[` <- base::`[[`
[11:01:17.530]             `+` <- base::`+`
[11:01:17.530]             `<<-` <- base::`<<-`
[11:01:17.530]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:17.530]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:17.530]                   3L)]
[11:01:17.530]             }
[11:01:17.530]             function(cond) {
[11:01:17.530]                 is_error <- inherits(cond, "error")
[11:01:17.530]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:17.530]                   NULL)
[11:01:17.530]                 if (is_error) {
[11:01:17.530]                   sessionInformation <- function() {
[11:01:17.530]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:17.530]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:17.530]                       search = base::search(), system = base::Sys.info())
[11:01:17.530]                   }
[11:01:17.530]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.530]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:17.530]                     cond$call), session = sessionInformation(), 
[11:01:17.530]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:17.530]                   signalCondition(cond)
[11:01:17.530]                 }
[11:01:17.530]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:17.530]                 "immediateCondition"))) {
[11:01:17.530]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:17.530]                   ...future.conditions[[length(...future.conditions) + 
[11:01:17.530]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:17.530]                   if (TRUE && !signal) {
[11:01:17.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.530]                     {
[11:01:17.530]                       inherits <- base::inherits
[11:01:17.530]                       invokeRestart <- base::invokeRestart
[11:01:17.530]                       is.null <- base::is.null
[11:01:17.530]                       muffled <- FALSE
[11:01:17.530]                       if (inherits(cond, "message")) {
[11:01:17.530]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.530]                         if (muffled) 
[11:01:17.530]                           invokeRestart("muffleMessage")
[11:01:17.530]                       }
[11:01:17.530]                       else if (inherits(cond, "warning")) {
[11:01:17.530]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.530]                         if (muffled) 
[11:01:17.530]                           invokeRestart("muffleWarning")
[11:01:17.530]                       }
[11:01:17.530]                       else if (inherits(cond, "condition")) {
[11:01:17.530]                         if (!is.null(pattern)) {
[11:01:17.530]                           computeRestarts <- base::computeRestarts
[11:01:17.530]                           grepl <- base::grepl
[11:01:17.530]                           restarts <- computeRestarts(cond)
[11:01:17.530]                           for (restart in restarts) {
[11:01:17.530]                             name <- restart$name
[11:01:17.530]                             if (is.null(name)) 
[11:01:17.530]                               next
[11:01:17.530]                             if (!grepl(pattern, name)) 
[11:01:17.530]                               next
[11:01:17.530]                             invokeRestart(restart)
[11:01:17.530]                             muffled <- TRUE
[11:01:17.530]                             break
[11:01:17.530]                           }
[11:01:17.530]                         }
[11:01:17.530]                       }
[11:01:17.530]                       invisible(muffled)
[11:01:17.530]                     }
[11:01:17.530]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.530]                   }
[11:01:17.530]                 }
[11:01:17.530]                 else {
[11:01:17.530]                   if (TRUE) {
[11:01:17.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:17.530]                     {
[11:01:17.530]                       inherits <- base::inherits
[11:01:17.530]                       invokeRestart <- base::invokeRestart
[11:01:17.530]                       is.null <- base::is.null
[11:01:17.530]                       muffled <- FALSE
[11:01:17.530]                       if (inherits(cond, "message")) {
[11:01:17.530]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:17.530]                         if (muffled) 
[11:01:17.530]                           invokeRestart("muffleMessage")
[11:01:17.530]                       }
[11:01:17.530]                       else if (inherits(cond, "warning")) {
[11:01:17.530]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:17.530]                         if (muffled) 
[11:01:17.530]                           invokeRestart("muffleWarning")
[11:01:17.530]                       }
[11:01:17.530]                       else if (inherits(cond, "condition")) {
[11:01:17.530]                         if (!is.null(pattern)) {
[11:01:17.530]                           computeRestarts <- base::computeRestarts
[11:01:17.530]                           grepl <- base::grepl
[11:01:17.530]                           restarts <- computeRestarts(cond)
[11:01:17.530]                           for (restart in restarts) {
[11:01:17.530]                             name <- restart$name
[11:01:17.530]                             if (is.null(name)) 
[11:01:17.530]                               next
[11:01:17.530]                             if (!grepl(pattern, name)) 
[11:01:17.530]                               next
[11:01:17.530]                             invokeRestart(restart)
[11:01:17.530]                             muffled <- TRUE
[11:01:17.530]                             break
[11:01:17.530]                           }
[11:01:17.530]                         }
[11:01:17.530]                       }
[11:01:17.530]                       invisible(muffled)
[11:01:17.530]                     }
[11:01:17.530]                     muffleCondition(cond, pattern = "^muffle")
[11:01:17.530]                   }
[11:01:17.530]                 }
[11:01:17.530]             }
[11:01:17.530]         }))
[11:01:17.530]     }, error = function(ex) {
[11:01:17.530]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:17.530]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:17.530]                 ...future.rng), started = ...future.startTime, 
[11:01:17.530]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:17.530]             version = "1.8"), class = "FutureResult")
[11:01:17.530]     }, finally = {
[11:01:17.530]         if (!identical(...future.workdir, getwd())) 
[11:01:17.530]             setwd(...future.workdir)
[11:01:17.530]         {
[11:01:17.530]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:17.530]                 ...future.oldOptions$nwarnings <- NULL
[11:01:17.530]             }
[11:01:17.530]             base::options(...future.oldOptions)
[11:01:17.530]             if (.Platform$OS.type == "windows") {
[11:01:17.530]                 old_names <- names(...future.oldEnvVars)
[11:01:17.530]                 envs <- base::Sys.getenv()
[11:01:17.530]                 names <- names(envs)
[11:01:17.530]                 common <- intersect(names, old_names)
[11:01:17.530]                 added <- setdiff(names, old_names)
[11:01:17.530]                 removed <- setdiff(old_names, names)
[11:01:17.530]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:17.530]                   envs[common]]
[11:01:17.530]                 NAMES <- toupper(changed)
[11:01:17.530]                 args <- list()
[11:01:17.530]                 for (kk in seq_along(NAMES)) {
[11:01:17.530]                   name <- changed[[kk]]
[11:01:17.530]                   NAME <- NAMES[[kk]]
[11:01:17.530]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.530]                     next
[11:01:17.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.530]                 }
[11:01:17.530]                 NAMES <- toupper(added)
[11:01:17.530]                 for (kk in seq_along(NAMES)) {
[11:01:17.530]                   name <- added[[kk]]
[11:01:17.530]                   NAME <- NAMES[[kk]]
[11:01:17.530]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.530]                     next
[11:01:17.530]                   args[[name]] <- ""
[11:01:17.530]                 }
[11:01:17.530]                 NAMES <- toupper(removed)
[11:01:17.530]                 for (kk in seq_along(NAMES)) {
[11:01:17.530]                   name <- removed[[kk]]
[11:01:17.530]                   NAME <- NAMES[[kk]]
[11:01:17.530]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:17.530]                     next
[11:01:17.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:17.530]                 }
[11:01:17.530]                 if (length(args) > 0) 
[11:01:17.530]                   base::do.call(base::Sys.setenv, args = args)
[11:01:17.530]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:17.530]             }
[11:01:17.530]             else {
[11:01:17.530]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:17.530]             }
[11:01:17.530]             {
[11:01:17.530]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:17.530]                   0L) {
[11:01:17.530]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:17.530]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:17.530]                   base::options(opts)
[11:01:17.530]                 }
[11:01:17.530]                 {
[11:01:17.530]                   {
[11:01:17.530]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:17.530]                     NULL
[11:01:17.530]                   }
[11:01:17.530]                   options(future.plan = NULL)
[11:01:17.530]                   if (is.na(NA_character_)) 
[11:01:17.530]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:17.530]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:17.530]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:17.530]                     .init = FALSE)
[11:01:17.530]                 }
[11:01:17.530]             }
[11:01:17.530]         }
[11:01:17.530]     })
[11:01:17.530]     if (TRUE) {
[11:01:17.530]         base::sink(type = "output", split = FALSE)
[11:01:17.530]         if (TRUE) {
[11:01:17.530]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:17.530]         }
[11:01:17.530]         else {
[11:01:17.530]             ...future.result["stdout"] <- base::list(NULL)
[11:01:17.530]         }
[11:01:17.530]         base::close(...future.stdout)
[11:01:17.530]         ...future.stdout <- NULL
[11:01:17.530]     }
[11:01:17.530]     ...future.result$conditions <- ...future.conditions
[11:01:17.530]     ...future.result$finished <- base::Sys.time()
[11:01:17.530]     ...future.result
[11:01:17.530] }
[11:01:17.534] MultisessionFuture started
[11:01:17.534] - Launch lazy future ... done
[11:01:17.534] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f259dbc4-692f-c1e2-ce9f-e498d5151cc3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:17.545] result() for ClusterFuture ...
[11:01:17.545] receiveMessageFromWorker() for ClusterFuture ...
[11:01:17.546] - Validating connection of MultisessionFuture
[11:01:17.576] - received message: FutureResult
[11:01:17.576] - Received FutureResult
[11:01:17.576] - Erased future from FutureRegistry
[11:01:17.576] result() for ClusterFuture ...
[11:01:17.576] - result already collected: FutureResult
[11:01:17.576] result() for ClusterFuture ... done
[11:01:17.576] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:17.577] result() for ClusterFuture ... done
[11:01:17.577] result() for ClusterFuture ...
[11:01:17.577] - result already collected: FutureResult
[11:01:17.577] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[11:01:17.578] plan(): Setting new future strategy stack:
[11:01:17.578] List of future strategies:
[11:01:17.578] 1. FutureStrategy:
[11:01:17.578]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:17.578]    - tweaked: FALSE
[11:01:17.578]    - call: future::plan(oplan)
[11:01:17.579] plan(): nbrOfWorkers() = 1
> 
