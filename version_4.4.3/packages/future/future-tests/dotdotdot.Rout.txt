
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:04.511] plan(): Setting new future strategy stack:
[11:01:04.512] List of future strategies:
[11:01:04.512] 1. sequential:
[11:01:04.512]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.512]    - tweaked: FALSE
[11:01:04.512]    - call: future::plan("sequential")
[11:01:04.525] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[11:01:04.576] plan(): Setting new future strategy stack:
[11:01:04.576] List of future strategies:
[11:01:04.576] 1. sequential:
[11:01:04.576]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.576]    - tweaked: FALSE
[11:01:04.576]    - call: plan(strategy, substitute = FALSE)
[11:01:04.586] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x55b7e3b11768>
Arguments '...' exists: TRUE
[11:01:04.588] getGlobalsAndPackages() ...
[11:01:04.588] Searching for globals...
[11:01:04.595] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[11:01:04.595] Searching for globals ... DONE
[11:01:04.596] Resolving globals: FALSE
[11:01:04.596] Tweak future expression to call with '...' arguments ...
[11:01:04.596] {
[11:01:04.596]     do.call(function(...) {
[11:01:04.596]         sum(x, ...)
[11:01:04.596]     }, args = future.call.arguments)
[11:01:04.596] }
[11:01:04.596] Tweak future expression to call with '...' arguments ... DONE
[11:01:04.597] The total size of the 2 globals is 246 bytes (246 bytes)
[11:01:04.597] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 246 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘future.call.arguments’ (113 bytes of class ‘list’)
[11:01:04.597] - globals: [2] ‘x’, ‘future.call.arguments’
[11:01:04.598] 
[11:01:04.598] getGlobalsAndPackages() ... DONE
[11:01:04.598] run() for ‘Future’ ...
[11:01:04.598] - state: ‘created’
[11:01:04.599] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:04.599] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:04.599] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:04.599]   - Field: ‘label’
[11:01:04.599]   - Field: ‘local’
[11:01:04.599]   - Field: ‘owner’
[11:01:04.599]   - Field: ‘envir’
[11:01:04.599]   - Field: ‘packages’
[11:01:04.599]   - Field: ‘gc’
[11:01:04.600]   - Field: ‘conditions’
[11:01:04.600]   - Field: ‘expr’
[11:01:04.600]   - Field: ‘uuid’
[11:01:04.600]   - Field: ‘seed’
[11:01:04.600]   - Field: ‘version’
[11:01:04.600]   - Field: ‘result’
[11:01:04.600]   - Field: ‘asynchronous’
[11:01:04.600]   - Field: ‘calls’
[11:01:04.600]   - Field: ‘globals’
[11:01:04.600]   - Field: ‘stdout’
[11:01:04.600]   - Field: ‘earlySignal’
[11:01:04.600]   - Field: ‘lazy’
[11:01:04.601]   - Field: ‘state’
[11:01:04.601] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:04.601] - Launch lazy future ...
[11:01:04.601] Packages needed by the future expression (n = 0): <none>
[11:01:04.601] Packages needed by future strategies (n = 0): <none>
[11:01:04.602] {
[11:01:04.602]     {
[11:01:04.602]         {
[11:01:04.602]             ...future.startTime <- base::Sys.time()
[11:01:04.602]             {
[11:01:04.602]                 {
[11:01:04.602]                   {
[11:01:04.602]                     base::local({
[11:01:04.602]                       has_future <- base::requireNamespace("future", 
[11:01:04.602]                         quietly = TRUE)
[11:01:04.602]                       if (has_future) {
[11:01:04.602]                         ns <- base::getNamespace("future")
[11:01:04.602]                         version <- ns[[".package"]][["version"]]
[11:01:04.602]                         if (is.null(version)) 
[11:01:04.602]                           version <- utils::packageVersion("future")
[11:01:04.602]                       }
[11:01:04.602]                       else {
[11:01:04.602]                         version <- NULL
[11:01:04.602]                       }
[11:01:04.602]                       if (!has_future || version < "1.8.0") {
[11:01:04.602]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.602]                           "", base::R.version$version.string), 
[11:01:04.602]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:04.602]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.602]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.602]                             "release", "version")], collapse = " "), 
[11:01:04.602]                           hostname = base::Sys.info()[["nodename"]])
[11:01:04.602]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.602]                           info)
[11:01:04.602]                         info <- base::paste(info, collapse = "; ")
[11:01:04.602]                         if (!has_future) {
[11:01:04.602]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.602]                             info)
[11:01:04.602]                         }
[11:01:04.602]                         else {
[11:01:04.602]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.602]                             info, version)
[11:01:04.602]                         }
[11:01:04.602]                         base::stop(msg)
[11:01:04.602]                       }
[11:01:04.602]                     })
[11:01:04.602]                   }
[11:01:04.602]                   ...future.strategy.old <- future::plan("list")
[11:01:04.602]                   options(future.plan = NULL)
[11:01:04.602]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.602]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.602]                 }
[11:01:04.602]                 ...future.workdir <- getwd()
[11:01:04.602]             }
[11:01:04.602]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.602]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.602]         }
[11:01:04.602]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.602]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.602]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.602]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.602]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.602]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.602]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.602]             base::names(...future.oldOptions))
[11:01:04.602]     }
[11:01:04.602]     if (FALSE) {
[11:01:04.602]     }
[11:01:04.602]     else {
[11:01:04.602]         if (TRUE) {
[11:01:04.602]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.602]                 open = "w")
[11:01:04.602]         }
[11:01:04.602]         else {
[11:01:04.602]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.602]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.602]         }
[11:01:04.602]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.602]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.602]             base::sink(type = "output", split = FALSE)
[11:01:04.602]             base::close(...future.stdout)
[11:01:04.602]         }, add = TRUE)
[11:01:04.602]     }
[11:01:04.602]     ...future.frame <- base::sys.nframe()
[11:01:04.602]     ...future.conditions <- base::list()
[11:01:04.602]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.602]     if (FALSE) {
[11:01:04.602]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.602]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.602]     }
[11:01:04.602]     ...future.result <- base::tryCatch({
[11:01:04.602]         base::withCallingHandlers({
[11:01:04.602]             ...future.value <- base::withVisible(base::local({
[11:01:04.602]                 do.call(function(...) {
[11:01:04.602]                   sum(x, ...)
[11:01:04.602]                 }, args = future.call.arguments)
[11:01:04.602]             }))
[11:01:04.602]             future::FutureResult(value = ...future.value$value, 
[11:01:04.602]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.602]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.602]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.602]                     ...future.globalenv.names))
[11:01:04.602]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.602]         }, condition = base::local({
[11:01:04.602]             c <- base::c
[11:01:04.602]             inherits <- base::inherits
[11:01:04.602]             invokeRestart <- base::invokeRestart
[11:01:04.602]             length <- base::length
[11:01:04.602]             list <- base::list
[11:01:04.602]             seq.int <- base::seq.int
[11:01:04.602]             signalCondition <- base::signalCondition
[11:01:04.602]             sys.calls <- base::sys.calls
[11:01:04.602]             `[[` <- base::`[[`
[11:01:04.602]             `+` <- base::`+`
[11:01:04.602]             `<<-` <- base::`<<-`
[11:01:04.602]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.602]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.602]                   3L)]
[11:01:04.602]             }
[11:01:04.602]             function(cond) {
[11:01:04.602]                 is_error <- inherits(cond, "error")
[11:01:04.602]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.602]                   NULL)
[11:01:04.602]                 if (is_error) {
[11:01:04.602]                   sessionInformation <- function() {
[11:01:04.602]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.602]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.602]                       search = base::search(), system = base::Sys.info())
[11:01:04.602]                   }
[11:01:04.602]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.602]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.602]                     cond$call), session = sessionInformation(), 
[11:01:04.602]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.602]                   signalCondition(cond)
[11:01:04.602]                 }
[11:01:04.602]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.602]                 "immediateCondition"))) {
[11:01:04.602]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.602]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.602]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.602]                   if (TRUE && !signal) {
[11:01:04.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.602]                     {
[11:01:04.602]                       inherits <- base::inherits
[11:01:04.602]                       invokeRestart <- base::invokeRestart
[11:01:04.602]                       is.null <- base::is.null
[11:01:04.602]                       muffled <- FALSE
[11:01:04.602]                       if (inherits(cond, "message")) {
[11:01:04.602]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.602]                         if (muffled) 
[11:01:04.602]                           invokeRestart("muffleMessage")
[11:01:04.602]                       }
[11:01:04.602]                       else if (inherits(cond, "warning")) {
[11:01:04.602]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.602]                         if (muffled) 
[11:01:04.602]                           invokeRestart("muffleWarning")
[11:01:04.602]                       }
[11:01:04.602]                       else if (inherits(cond, "condition")) {
[11:01:04.602]                         if (!is.null(pattern)) {
[11:01:04.602]                           computeRestarts <- base::computeRestarts
[11:01:04.602]                           grepl <- base::grepl
[11:01:04.602]                           restarts <- computeRestarts(cond)
[11:01:04.602]                           for (restart in restarts) {
[11:01:04.602]                             name <- restart$name
[11:01:04.602]                             if (is.null(name)) 
[11:01:04.602]                               next
[11:01:04.602]                             if (!grepl(pattern, name)) 
[11:01:04.602]                               next
[11:01:04.602]                             invokeRestart(restart)
[11:01:04.602]                             muffled <- TRUE
[11:01:04.602]                             break
[11:01:04.602]                           }
[11:01:04.602]                         }
[11:01:04.602]                       }
[11:01:04.602]                       invisible(muffled)
[11:01:04.602]                     }
[11:01:04.602]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.602]                   }
[11:01:04.602]                 }
[11:01:04.602]                 else {
[11:01:04.602]                   if (TRUE) {
[11:01:04.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.602]                     {
[11:01:04.602]                       inherits <- base::inherits
[11:01:04.602]                       invokeRestart <- base::invokeRestart
[11:01:04.602]                       is.null <- base::is.null
[11:01:04.602]                       muffled <- FALSE
[11:01:04.602]                       if (inherits(cond, "message")) {
[11:01:04.602]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.602]                         if (muffled) 
[11:01:04.602]                           invokeRestart("muffleMessage")
[11:01:04.602]                       }
[11:01:04.602]                       else if (inherits(cond, "warning")) {
[11:01:04.602]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.602]                         if (muffled) 
[11:01:04.602]                           invokeRestart("muffleWarning")
[11:01:04.602]                       }
[11:01:04.602]                       else if (inherits(cond, "condition")) {
[11:01:04.602]                         if (!is.null(pattern)) {
[11:01:04.602]                           computeRestarts <- base::computeRestarts
[11:01:04.602]                           grepl <- base::grepl
[11:01:04.602]                           restarts <- computeRestarts(cond)
[11:01:04.602]                           for (restart in restarts) {
[11:01:04.602]                             name <- restart$name
[11:01:04.602]                             if (is.null(name)) 
[11:01:04.602]                               next
[11:01:04.602]                             if (!grepl(pattern, name)) 
[11:01:04.602]                               next
[11:01:04.602]                             invokeRestart(restart)
[11:01:04.602]                             muffled <- TRUE
[11:01:04.602]                             break
[11:01:04.602]                           }
[11:01:04.602]                         }
[11:01:04.602]                       }
[11:01:04.602]                       invisible(muffled)
[11:01:04.602]                     }
[11:01:04.602]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.602]                   }
[11:01:04.602]                 }
[11:01:04.602]             }
[11:01:04.602]         }))
[11:01:04.602]     }, error = function(ex) {
[11:01:04.602]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.602]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.602]                 ...future.rng), started = ...future.startTime, 
[11:01:04.602]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.602]             version = "1.8"), class = "FutureResult")
[11:01:04.602]     }, finally = {
[11:01:04.602]         if (!identical(...future.workdir, getwd())) 
[11:01:04.602]             setwd(...future.workdir)
[11:01:04.602]         {
[11:01:04.602]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.602]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.602]             }
[11:01:04.602]             base::options(...future.oldOptions)
[11:01:04.602]             if (.Platform$OS.type == "windows") {
[11:01:04.602]                 old_names <- names(...future.oldEnvVars)
[11:01:04.602]                 envs <- base::Sys.getenv()
[11:01:04.602]                 names <- names(envs)
[11:01:04.602]                 common <- intersect(names, old_names)
[11:01:04.602]                 added <- setdiff(names, old_names)
[11:01:04.602]                 removed <- setdiff(old_names, names)
[11:01:04.602]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.602]                   envs[common]]
[11:01:04.602]                 NAMES <- toupper(changed)
[11:01:04.602]                 args <- list()
[11:01:04.602]                 for (kk in seq_along(NAMES)) {
[11:01:04.602]                   name <- changed[[kk]]
[11:01:04.602]                   NAME <- NAMES[[kk]]
[11:01:04.602]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.602]                     next
[11:01:04.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.602]                 }
[11:01:04.602]                 NAMES <- toupper(added)
[11:01:04.602]                 for (kk in seq_along(NAMES)) {
[11:01:04.602]                   name <- added[[kk]]
[11:01:04.602]                   NAME <- NAMES[[kk]]
[11:01:04.602]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.602]                     next
[11:01:04.602]                   args[[name]] <- ""
[11:01:04.602]                 }
[11:01:04.602]                 NAMES <- toupper(removed)
[11:01:04.602]                 for (kk in seq_along(NAMES)) {
[11:01:04.602]                   name <- removed[[kk]]
[11:01:04.602]                   NAME <- NAMES[[kk]]
[11:01:04.602]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.602]                     next
[11:01:04.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.602]                 }
[11:01:04.602]                 if (length(args) > 0) 
[11:01:04.602]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.602]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.602]             }
[11:01:04.602]             else {
[11:01:04.602]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.602]             }
[11:01:04.602]             {
[11:01:04.602]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.602]                   0L) {
[11:01:04.602]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.602]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.602]                   base::options(opts)
[11:01:04.602]                 }
[11:01:04.602]                 {
[11:01:04.602]                   {
[11:01:04.602]                     NULL
[11:01:04.602]                     RNGkind("Mersenne-Twister")
[11:01:04.602]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:04.602]                       inherits = FALSE)
[11:01:04.602]                   }
[11:01:04.602]                   options(future.plan = NULL)
[11:01:04.602]                   if (is.na(NA_character_)) 
[11:01:04.602]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.602]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.602]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.602]                     .init = FALSE)
[11:01:04.602]                 }
[11:01:04.602]             }
[11:01:04.602]         }
[11:01:04.602]     })
[11:01:04.602]     if (TRUE) {
[11:01:04.602]         base::sink(type = "output", split = FALSE)
[11:01:04.602]         if (TRUE) {
[11:01:04.602]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.602]         }
[11:01:04.602]         else {
[11:01:04.602]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.602]         }
[11:01:04.602]         base::close(...future.stdout)
[11:01:04.602]         ...future.stdout <- NULL
[11:01:04.602]     }
[11:01:04.602]     ...future.result$conditions <- ...future.conditions
[11:01:04.602]     ...future.result$finished <- base::Sys.time()
[11:01:04.602]     ...future.result
[11:01:04.602] }
[11:01:04.604] assign_globals() ...
[11:01:04.604] List of 2
[11:01:04.604]  $ x                    : int [1:2] 1 2
[11:01:04.604]  $ future.call.arguments:List of 1
[11:01:04.604]   ..$ : num 3
[11:01:04.604]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[11:01:04.604]  - attr(*, "where")=List of 2
[11:01:04.604]   ..$ x                    :<environment: R_EmptyEnv> 
[11:01:04.604]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[11:01:04.604]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.604]  - attr(*, "resolved")= logi FALSE
[11:01:04.604]  - attr(*, "total_size")= num 246
[11:01:04.604]  - attr(*, "already-done")= logi TRUE
[11:01:04.609] - copied ‘x’ to environment
[11:01:04.609] - copied ‘future.call.arguments’ to environment
[11:01:04.609] assign_globals() ... done
[11:01:04.610] plan(): Setting new future strategy stack:
[11:01:04.610] List of future strategies:
[11:01:04.610] 1. sequential:
[11:01:04.610]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.610]    - tweaked: FALSE
[11:01:04.610]    - call: NULL
[11:01:04.610] plan(): nbrOfWorkers() = 1
[11:01:04.611] plan(): Setting new future strategy stack:
[11:01:04.611] List of future strategies:
[11:01:04.611] 1. sequential:
[11:01:04.611]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.611]    - tweaked: FALSE
[11:01:04.611]    - call: plan(strategy, substitute = FALSE)
[11:01:04.612] plan(): nbrOfWorkers() = 1
[11:01:04.612] SequentialFuture started (and completed)
[11:01:04.612] - Launch lazy future ... done
[11:01:04.612] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x55b7e3d9fa20>
Arguments '...' exists: TRUE
[11:01:04.613] getGlobalsAndPackages() ...
[11:01:04.613] Searching for globals...
[11:01:04.614] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[11:01:04.615] Searching for globals ... DONE
[11:01:04.615] Resolving globals: FALSE
[11:01:04.615] Tweak future expression to call with '...' arguments ...
[11:01:04.615] {
[11:01:04.615]     do.call(function(...) {
[11:01:04.615]         sum(x, ...)
[11:01:04.615]     }, args = future.call.arguments)
[11:01:04.615] }
[11:01:04.615] Tweak future expression to call with '...' arguments ... DONE
[11:01:04.615] The total size of the 2 globals is 246 bytes (246 bytes)
[11:01:04.616] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 246 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘future.call.arguments’ (113 bytes of class ‘list’)
[11:01:04.616] - globals: [2] ‘x’, ‘future.call.arguments’
[11:01:04.616] 
[11:01:04.616] getGlobalsAndPackages() ... DONE
[11:01:04.616] run() for ‘Future’ ...
[11:01:04.616] - state: ‘created’
[11:01:04.616] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:04.617] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:04.617] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:04.617]   - Field: ‘label’
[11:01:04.617]   - Field: ‘local’
[11:01:04.617]   - Field: ‘owner’
[11:01:04.617]   - Field: ‘envir’
[11:01:04.617]   - Field: ‘packages’
[11:01:04.617]   - Field: ‘gc’
[11:01:04.617]   - Field: ‘conditions’
[11:01:04.618]   - Field: ‘expr’
[11:01:04.618]   - Field: ‘uuid’
[11:01:04.618]   - Field: ‘seed’
[11:01:04.618]   - Field: ‘version’
[11:01:04.618]   - Field: ‘result’
[11:01:04.618]   - Field: ‘asynchronous’
[11:01:04.618]   - Field: ‘calls’
[11:01:04.618]   - Field: ‘globals’
[11:01:04.618]   - Field: ‘stdout’
[11:01:04.618]   - Field: ‘earlySignal’
[11:01:04.618]   - Field: ‘lazy’
[11:01:04.618]   - Field: ‘state’
[11:01:04.618] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:04.619] - Launch lazy future ...
[11:01:04.619] Packages needed by the future expression (n = 0): <none>
[11:01:04.619] Packages needed by future strategies (n = 0): <none>
[11:01:04.619] {
[11:01:04.619]     {
[11:01:04.619]         {
[11:01:04.619]             ...future.startTime <- base::Sys.time()
[11:01:04.619]             {
[11:01:04.619]                 {
[11:01:04.619]                   {
[11:01:04.619]                     base::local({
[11:01:04.619]                       has_future <- base::requireNamespace("future", 
[11:01:04.619]                         quietly = TRUE)
[11:01:04.619]                       if (has_future) {
[11:01:04.619]                         ns <- base::getNamespace("future")
[11:01:04.619]                         version <- ns[[".package"]][["version"]]
[11:01:04.619]                         if (is.null(version)) 
[11:01:04.619]                           version <- utils::packageVersion("future")
[11:01:04.619]                       }
[11:01:04.619]                       else {
[11:01:04.619]                         version <- NULL
[11:01:04.619]                       }
[11:01:04.619]                       if (!has_future || version < "1.8.0") {
[11:01:04.619]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.619]                           "", base::R.version$version.string), 
[11:01:04.619]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:04.619]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.619]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.619]                             "release", "version")], collapse = " "), 
[11:01:04.619]                           hostname = base::Sys.info()[["nodename"]])
[11:01:04.619]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.619]                           info)
[11:01:04.619]                         info <- base::paste(info, collapse = "; ")
[11:01:04.619]                         if (!has_future) {
[11:01:04.619]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.619]                             info)
[11:01:04.619]                         }
[11:01:04.619]                         else {
[11:01:04.619]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.619]                             info, version)
[11:01:04.619]                         }
[11:01:04.619]                         base::stop(msg)
[11:01:04.619]                       }
[11:01:04.619]                     })
[11:01:04.619]                   }
[11:01:04.619]                   ...future.strategy.old <- future::plan("list")
[11:01:04.619]                   options(future.plan = NULL)
[11:01:04.619]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.619]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.619]                 }
[11:01:04.619]                 ...future.workdir <- getwd()
[11:01:04.619]             }
[11:01:04.619]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.619]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.619]         }
[11:01:04.619]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.619]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.619]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.619]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.619]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.619]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.619]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.619]             base::names(...future.oldOptions))
[11:01:04.619]     }
[11:01:04.619]     if (FALSE) {
[11:01:04.619]     }
[11:01:04.619]     else {
[11:01:04.619]         if (TRUE) {
[11:01:04.619]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.619]                 open = "w")
[11:01:04.619]         }
[11:01:04.619]         else {
[11:01:04.619]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.619]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.619]         }
[11:01:04.619]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.619]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.619]             base::sink(type = "output", split = FALSE)
[11:01:04.619]             base::close(...future.stdout)
[11:01:04.619]         }, add = TRUE)
[11:01:04.619]     }
[11:01:04.619]     ...future.frame <- base::sys.nframe()
[11:01:04.619]     ...future.conditions <- base::list()
[11:01:04.619]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.619]     if (FALSE) {
[11:01:04.619]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.619]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.619]     }
[11:01:04.619]     ...future.result <- base::tryCatch({
[11:01:04.619]         base::withCallingHandlers({
[11:01:04.619]             ...future.value <- base::withVisible(base::local({
[11:01:04.619]                 do.call(function(...) {
[11:01:04.619]                   sum(x, ...)
[11:01:04.619]                 }, args = future.call.arguments)
[11:01:04.619]             }))
[11:01:04.619]             future::FutureResult(value = ...future.value$value, 
[11:01:04.619]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.619]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.619]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.619]                     ...future.globalenv.names))
[11:01:04.619]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.619]         }, condition = base::local({
[11:01:04.619]             c <- base::c
[11:01:04.619]             inherits <- base::inherits
[11:01:04.619]             invokeRestart <- base::invokeRestart
[11:01:04.619]             length <- base::length
[11:01:04.619]             list <- base::list
[11:01:04.619]             seq.int <- base::seq.int
[11:01:04.619]             signalCondition <- base::signalCondition
[11:01:04.619]             sys.calls <- base::sys.calls
[11:01:04.619]             `[[` <- base::`[[`
[11:01:04.619]             `+` <- base::`+`
[11:01:04.619]             `<<-` <- base::`<<-`
[11:01:04.619]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.619]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.619]                   3L)]
[11:01:04.619]             }
[11:01:04.619]             function(cond) {
[11:01:04.619]                 is_error <- inherits(cond, "error")
[11:01:04.619]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.619]                   NULL)
[11:01:04.619]                 if (is_error) {
[11:01:04.619]                   sessionInformation <- function() {
[11:01:04.619]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.619]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.619]                       search = base::search(), system = base::Sys.info())
[11:01:04.619]                   }
[11:01:04.619]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.619]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.619]                     cond$call), session = sessionInformation(), 
[11:01:04.619]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.619]                   signalCondition(cond)
[11:01:04.619]                 }
[11:01:04.619]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.619]                 "immediateCondition"))) {
[11:01:04.619]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.619]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.619]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.619]                   if (TRUE && !signal) {
[11:01:04.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.619]                     {
[11:01:04.619]                       inherits <- base::inherits
[11:01:04.619]                       invokeRestart <- base::invokeRestart
[11:01:04.619]                       is.null <- base::is.null
[11:01:04.619]                       muffled <- FALSE
[11:01:04.619]                       if (inherits(cond, "message")) {
[11:01:04.619]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.619]                         if (muffled) 
[11:01:04.619]                           invokeRestart("muffleMessage")
[11:01:04.619]                       }
[11:01:04.619]                       else if (inherits(cond, "warning")) {
[11:01:04.619]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.619]                         if (muffled) 
[11:01:04.619]                           invokeRestart("muffleWarning")
[11:01:04.619]                       }
[11:01:04.619]                       else if (inherits(cond, "condition")) {
[11:01:04.619]                         if (!is.null(pattern)) {
[11:01:04.619]                           computeRestarts <- base::computeRestarts
[11:01:04.619]                           grepl <- base::grepl
[11:01:04.619]                           restarts <- computeRestarts(cond)
[11:01:04.619]                           for (restart in restarts) {
[11:01:04.619]                             name <- restart$name
[11:01:04.619]                             if (is.null(name)) 
[11:01:04.619]                               next
[11:01:04.619]                             if (!grepl(pattern, name)) 
[11:01:04.619]                               next
[11:01:04.619]                             invokeRestart(restart)
[11:01:04.619]                             muffled <- TRUE
[11:01:04.619]                             break
[11:01:04.619]                           }
[11:01:04.619]                         }
[11:01:04.619]                       }
[11:01:04.619]                       invisible(muffled)
[11:01:04.619]                     }
[11:01:04.619]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.619]                   }
[11:01:04.619]                 }
[11:01:04.619]                 else {
[11:01:04.619]                   if (TRUE) {
[11:01:04.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.619]                     {
[11:01:04.619]                       inherits <- base::inherits
[11:01:04.619]                       invokeRestart <- base::invokeRestart
[11:01:04.619]                       is.null <- base::is.null
[11:01:04.619]                       muffled <- FALSE
[11:01:04.619]                       if (inherits(cond, "message")) {
[11:01:04.619]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.619]                         if (muffled) 
[11:01:04.619]                           invokeRestart("muffleMessage")
[11:01:04.619]                       }
[11:01:04.619]                       else if (inherits(cond, "warning")) {
[11:01:04.619]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.619]                         if (muffled) 
[11:01:04.619]                           invokeRestart("muffleWarning")
[11:01:04.619]                       }
[11:01:04.619]                       else if (inherits(cond, "condition")) {
[11:01:04.619]                         if (!is.null(pattern)) {
[11:01:04.619]                           computeRestarts <- base::computeRestarts
[11:01:04.619]                           grepl <- base::grepl
[11:01:04.619]                           restarts <- computeRestarts(cond)
[11:01:04.619]                           for (restart in restarts) {
[11:01:04.619]                             name <- restart$name
[11:01:04.619]                             if (is.null(name)) 
[11:01:04.619]                               next
[11:01:04.619]                             if (!grepl(pattern, name)) 
[11:01:04.619]                               next
[11:01:04.619]                             invokeRestart(restart)
[11:01:04.619]                             muffled <- TRUE
[11:01:04.619]                             break
[11:01:04.619]                           }
[11:01:04.619]                         }
[11:01:04.619]                       }
[11:01:04.619]                       invisible(muffled)
[11:01:04.619]                     }
[11:01:04.619]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.619]                   }
[11:01:04.619]                 }
[11:01:04.619]             }
[11:01:04.619]         }))
[11:01:04.619]     }, error = function(ex) {
[11:01:04.619]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.619]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.619]                 ...future.rng), started = ...future.startTime, 
[11:01:04.619]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.619]             version = "1.8"), class = "FutureResult")
[11:01:04.619]     }, finally = {
[11:01:04.619]         if (!identical(...future.workdir, getwd())) 
[11:01:04.619]             setwd(...future.workdir)
[11:01:04.619]         {
[11:01:04.619]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.619]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.619]             }
[11:01:04.619]             base::options(...future.oldOptions)
[11:01:04.619]             if (.Platform$OS.type == "windows") {
[11:01:04.619]                 old_names <- names(...future.oldEnvVars)
[11:01:04.619]                 envs <- base::Sys.getenv()
[11:01:04.619]                 names <- names(envs)
[11:01:04.619]                 common <- intersect(names, old_names)
[11:01:04.619]                 added <- setdiff(names, old_names)
[11:01:04.619]                 removed <- setdiff(old_names, names)
[11:01:04.619]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.619]                   envs[common]]
[11:01:04.619]                 NAMES <- toupper(changed)
[11:01:04.619]                 args <- list()
[11:01:04.619]                 for (kk in seq_along(NAMES)) {
[11:01:04.619]                   name <- changed[[kk]]
[11:01:04.619]                   NAME <- NAMES[[kk]]
[11:01:04.619]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.619]                     next
[11:01:04.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.619]                 }
[11:01:04.619]                 NAMES <- toupper(added)
[11:01:04.619]                 for (kk in seq_along(NAMES)) {
[11:01:04.619]                   name <- added[[kk]]
[11:01:04.619]                   NAME <- NAMES[[kk]]
[11:01:04.619]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.619]                     next
[11:01:04.619]                   args[[name]] <- ""
[11:01:04.619]                 }
[11:01:04.619]                 NAMES <- toupper(removed)
[11:01:04.619]                 for (kk in seq_along(NAMES)) {
[11:01:04.619]                   name <- removed[[kk]]
[11:01:04.619]                   NAME <- NAMES[[kk]]
[11:01:04.619]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.619]                     next
[11:01:04.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.619]                 }
[11:01:04.619]                 if (length(args) > 0) 
[11:01:04.619]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.619]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.619]             }
[11:01:04.619]             else {
[11:01:04.619]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.619]             }
[11:01:04.619]             {
[11:01:04.619]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.619]                   0L) {
[11:01:04.619]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.619]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.619]                   base::options(opts)
[11:01:04.619]                 }
[11:01:04.619]                 {
[11:01:04.619]                   {
[11:01:04.619]                     NULL
[11:01:04.619]                     RNGkind("Mersenne-Twister")
[11:01:04.619]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:04.619]                       inherits = FALSE)
[11:01:04.619]                   }
[11:01:04.619]                   options(future.plan = NULL)
[11:01:04.619]                   if (is.na(NA_character_)) 
[11:01:04.619]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.619]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.619]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.619]                     .init = FALSE)
[11:01:04.619]                 }
[11:01:04.619]             }
[11:01:04.619]         }
[11:01:04.619]     })
[11:01:04.619]     if (TRUE) {
[11:01:04.619]         base::sink(type = "output", split = FALSE)
[11:01:04.619]         if (TRUE) {
[11:01:04.619]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.619]         }
[11:01:04.619]         else {
[11:01:04.619]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.619]         }
[11:01:04.619]         base::close(...future.stdout)
[11:01:04.619]         ...future.stdout <- NULL
[11:01:04.619]     }
[11:01:04.619]     ...future.result$conditions <- ...future.conditions
[11:01:04.619]     ...future.result$finished <- base::Sys.time()
[11:01:04.619]     ...future.result
[11:01:04.619] }
[11:01:04.621] assign_globals() ...
[11:01:04.621] List of 2
[11:01:04.621]  $ x                    : int [1:2] 1 2
[11:01:04.621]  $ future.call.arguments:List of 1
[11:01:04.621]   ..$ : num 3
[11:01:04.621]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[11:01:04.621]  - attr(*, "where")=List of 2
[11:01:04.621]   ..$ x                    :<environment: R_EmptyEnv> 
[11:01:04.621]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[11:01:04.621]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.621]  - attr(*, "resolved")= logi FALSE
[11:01:04.621]  - attr(*, "total_size")= num 246
[11:01:04.621]  - attr(*, "already-done")= logi TRUE
[11:01:04.626] - copied ‘x’ to environment
[11:01:04.627] - copied ‘future.call.arguments’ to environment
[11:01:04.627] assign_globals() ... done
[11:01:04.627] plan(): Setting new future strategy stack:
[11:01:04.627] List of future strategies:
[11:01:04.627] 1. sequential:
[11:01:04.627]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.627]    - tweaked: FALSE
[11:01:04.627]    - call: NULL
[11:01:04.627] plan(): nbrOfWorkers() = 1
[11:01:04.628] plan(): Setting new future strategy stack:
[11:01:04.628] List of future strategies:
[11:01:04.628] 1. sequential:
[11:01:04.628]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.628]    - tweaked: FALSE
[11:01:04.628]    - call: plan(strategy, substitute = FALSE)
[11:01:04.629] plan(): nbrOfWorkers() = 1
[11:01:04.629] SequentialFuture started (and completed)
[11:01:04.629] - Launch lazy future ... done
[11:01:04.629] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55b7e3f45960>
Arguments '...' exists: FALSE
[11:01:04.630] getGlobalsAndPackages() ...
[11:01:04.630] Searching for globals...
[11:01:04.631] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[11:01:04.631] Searching for globals ... DONE
[11:01:04.631] Resolving globals: FALSE
[11:01:04.631] The total size of the 2 globals is 172 bytes (172 bytes)
[11:01:04.632] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 172 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:04.632] - globals: [2] ‘x’, ‘y’
[11:01:04.632] 
[11:01:04.632] getGlobalsAndPackages() ... DONE
[11:01:04.632] run() for ‘Future’ ...
[11:01:04.632] - state: ‘created’
[11:01:04.632] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:04.632] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:04.633] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:04.633]   - Field: ‘label’
[11:01:04.633]   - Field: ‘local’
[11:01:04.633]   - Field: ‘owner’
[11:01:04.633]   - Field: ‘envir’
[11:01:04.633]   - Field: ‘packages’
[11:01:04.633]   - Field: ‘gc’
[11:01:04.633]   - Field: ‘conditions’
[11:01:04.633]   - Field: ‘expr’
[11:01:04.633]   - Field: ‘uuid’
[11:01:04.633]   - Field: ‘seed’
[11:01:04.634]   - Field: ‘version’
[11:01:04.634]   - Field: ‘result’
[11:01:04.634]   - Field: ‘asynchronous’
[11:01:04.634]   - Field: ‘calls’
[11:01:04.634]   - Field: ‘globals’
[11:01:04.634]   - Field: ‘stdout’
[11:01:04.634]   - Field: ‘earlySignal’
[11:01:04.634]   - Field: ‘lazy’
[11:01:04.634]   - Field: ‘state’
[11:01:04.634] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:04.634] - Launch lazy future ...
[11:01:04.634] Packages needed by the future expression (n = 0): <none>
[11:01:04.635] Packages needed by future strategies (n = 0): <none>
[11:01:04.635] {
[11:01:04.635]     {
[11:01:04.635]         {
[11:01:04.635]             ...future.startTime <- base::Sys.time()
[11:01:04.635]             {
[11:01:04.635]                 {
[11:01:04.635]                   {
[11:01:04.635]                     base::local({
[11:01:04.635]                       has_future <- base::requireNamespace("future", 
[11:01:04.635]                         quietly = TRUE)
[11:01:04.635]                       if (has_future) {
[11:01:04.635]                         ns <- base::getNamespace("future")
[11:01:04.635]                         version <- ns[[".package"]][["version"]]
[11:01:04.635]                         if (is.null(version)) 
[11:01:04.635]                           version <- utils::packageVersion("future")
[11:01:04.635]                       }
[11:01:04.635]                       else {
[11:01:04.635]                         version <- NULL
[11:01:04.635]                       }
[11:01:04.635]                       if (!has_future || version < "1.8.0") {
[11:01:04.635]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.635]                           "", base::R.version$version.string), 
[11:01:04.635]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:04.635]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.635]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.635]                             "release", "version")], collapse = " "), 
[11:01:04.635]                           hostname = base::Sys.info()[["nodename"]])
[11:01:04.635]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.635]                           info)
[11:01:04.635]                         info <- base::paste(info, collapse = "; ")
[11:01:04.635]                         if (!has_future) {
[11:01:04.635]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.635]                             info)
[11:01:04.635]                         }
[11:01:04.635]                         else {
[11:01:04.635]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.635]                             info, version)
[11:01:04.635]                         }
[11:01:04.635]                         base::stop(msg)
[11:01:04.635]                       }
[11:01:04.635]                     })
[11:01:04.635]                   }
[11:01:04.635]                   ...future.strategy.old <- future::plan("list")
[11:01:04.635]                   options(future.plan = NULL)
[11:01:04.635]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.635]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.635]                 }
[11:01:04.635]                 ...future.workdir <- getwd()
[11:01:04.635]             }
[11:01:04.635]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.635]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.635]         }
[11:01:04.635]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.635]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.635]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.635]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.635]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.635]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.635]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.635]             base::names(...future.oldOptions))
[11:01:04.635]     }
[11:01:04.635]     if (FALSE) {
[11:01:04.635]     }
[11:01:04.635]     else {
[11:01:04.635]         if (TRUE) {
[11:01:04.635]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.635]                 open = "w")
[11:01:04.635]         }
[11:01:04.635]         else {
[11:01:04.635]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.635]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.635]         }
[11:01:04.635]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.635]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.635]             base::sink(type = "output", split = FALSE)
[11:01:04.635]             base::close(...future.stdout)
[11:01:04.635]         }, add = TRUE)
[11:01:04.635]     }
[11:01:04.635]     ...future.frame <- base::sys.nframe()
[11:01:04.635]     ...future.conditions <- base::list()
[11:01:04.635]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.635]     if (FALSE) {
[11:01:04.635]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.635]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.635]     }
[11:01:04.635]     ...future.result <- base::tryCatch({
[11:01:04.635]         base::withCallingHandlers({
[11:01:04.635]             ...future.value <- base::withVisible(base::local({
[11:01:04.635]                 sum(x, y)
[11:01:04.635]             }))
[11:01:04.635]             future::FutureResult(value = ...future.value$value, 
[11:01:04.635]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.635]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.635]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.635]                     ...future.globalenv.names))
[11:01:04.635]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.635]         }, condition = base::local({
[11:01:04.635]             c <- base::c
[11:01:04.635]             inherits <- base::inherits
[11:01:04.635]             invokeRestart <- base::invokeRestart
[11:01:04.635]             length <- base::length
[11:01:04.635]             list <- base::list
[11:01:04.635]             seq.int <- base::seq.int
[11:01:04.635]             signalCondition <- base::signalCondition
[11:01:04.635]             sys.calls <- base::sys.calls
[11:01:04.635]             `[[` <- base::`[[`
[11:01:04.635]             `+` <- base::`+`
[11:01:04.635]             `<<-` <- base::`<<-`
[11:01:04.635]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.635]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.635]                   3L)]
[11:01:04.635]             }
[11:01:04.635]             function(cond) {
[11:01:04.635]                 is_error <- inherits(cond, "error")
[11:01:04.635]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.635]                   NULL)
[11:01:04.635]                 if (is_error) {
[11:01:04.635]                   sessionInformation <- function() {
[11:01:04.635]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.635]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.635]                       search = base::search(), system = base::Sys.info())
[11:01:04.635]                   }
[11:01:04.635]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.635]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.635]                     cond$call), session = sessionInformation(), 
[11:01:04.635]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.635]                   signalCondition(cond)
[11:01:04.635]                 }
[11:01:04.635]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.635]                 "immediateCondition"))) {
[11:01:04.635]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.635]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.635]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.635]                   if (TRUE && !signal) {
[11:01:04.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.635]                     {
[11:01:04.635]                       inherits <- base::inherits
[11:01:04.635]                       invokeRestart <- base::invokeRestart
[11:01:04.635]                       is.null <- base::is.null
[11:01:04.635]                       muffled <- FALSE
[11:01:04.635]                       if (inherits(cond, "message")) {
[11:01:04.635]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.635]                         if (muffled) 
[11:01:04.635]                           invokeRestart("muffleMessage")
[11:01:04.635]                       }
[11:01:04.635]                       else if (inherits(cond, "warning")) {
[11:01:04.635]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.635]                         if (muffled) 
[11:01:04.635]                           invokeRestart("muffleWarning")
[11:01:04.635]                       }
[11:01:04.635]                       else if (inherits(cond, "condition")) {
[11:01:04.635]                         if (!is.null(pattern)) {
[11:01:04.635]                           computeRestarts <- base::computeRestarts
[11:01:04.635]                           grepl <- base::grepl
[11:01:04.635]                           restarts <- computeRestarts(cond)
[11:01:04.635]                           for (restart in restarts) {
[11:01:04.635]                             name <- restart$name
[11:01:04.635]                             if (is.null(name)) 
[11:01:04.635]                               next
[11:01:04.635]                             if (!grepl(pattern, name)) 
[11:01:04.635]                               next
[11:01:04.635]                             invokeRestart(restart)
[11:01:04.635]                             muffled <- TRUE
[11:01:04.635]                             break
[11:01:04.635]                           }
[11:01:04.635]                         }
[11:01:04.635]                       }
[11:01:04.635]                       invisible(muffled)
[11:01:04.635]                     }
[11:01:04.635]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.635]                   }
[11:01:04.635]                 }
[11:01:04.635]                 else {
[11:01:04.635]                   if (TRUE) {
[11:01:04.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.635]                     {
[11:01:04.635]                       inherits <- base::inherits
[11:01:04.635]                       invokeRestart <- base::invokeRestart
[11:01:04.635]                       is.null <- base::is.null
[11:01:04.635]                       muffled <- FALSE
[11:01:04.635]                       if (inherits(cond, "message")) {
[11:01:04.635]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.635]                         if (muffled) 
[11:01:04.635]                           invokeRestart("muffleMessage")
[11:01:04.635]                       }
[11:01:04.635]                       else if (inherits(cond, "warning")) {
[11:01:04.635]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.635]                         if (muffled) 
[11:01:04.635]                           invokeRestart("muffleWarning")
[11:01:04.635]                       }
[11:01:04.635]                       else if (inherits(cond, "condition")) {
[11:01:04.635]                         if (!is.null(pattern)) {
[11:01:04.635]                           computeRestarts <- base::computeRestarts
[11:01:04.635]                           grepl <- base::grepl
[11:01:04.635]                           restarts <- computeRestarts(cond)
[11:01:04.635]                           for (restart in restarts) {
[11:01:04.635]                             name <- restart$name
[11:01:04.635]                             if (is.null(name)) 
[11:01:04.635]                               next
[11:01:04.635]                             if (!grepl(pattern, name)) 
[11:01:04.635]                               next
[11:01:04.635]                             invokeRestart(restart)
[11:01:04.635]                             muffled <- TRUE
[11:01:04.635]                             break
[11:01:04.635]                           }
[11:01:04.635]                         }
[11:01:04.635]                       }
[11:01:04.635]                       invisible(muffled)
[11:01:04.635]                     }
[11:01:04.635]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.635]                   }
[11:01:04.635]                 }
[11:01:04.635]             }
[11:01:04.635]         }))
[11:01:04.635]     }, error = function(ex) {
[11:01:04.635]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.635]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.635]                 ...future.rng), started = ...future.startTime, 
[11:01:04.635]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.635]             version = "1.8"), class = "FutureResult")
[11:01:04.635]     }, finally = {
[11:01:04.635]         if (!identical(...future.workdir, getwd())) 
[11:01:04.635]             setwd(...future.workdir)
[11:01:04.635]         {
[11:01:04.635]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.635]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.635]             }
[11:01:04.635]             base::options(...future.oldOptions)
[11:01:04.635]             if (.Platform$OS.type == "windows") {
[11:01:04.635]                 old_names <- names(...future.oldEnvVars)
[11:01:04.635]                 envs <- base::Sys.getenv()
[11:01:04.635]                 names <- names(envs)
[11:01:04.635]                 common <- intersect(names, old_names)
[11:01:04.635]                 added <- setdiff(names, old_names)
[11:01:04.635]                 removed <- setdiff(old_names, names)
[11:01:04.635]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.635]                   envs[common]]
[11:01:04.635]                 NAMES <- toupper(changed)
[11:01:04.635]                 args <- list()
[11:01:04.635]                 for (kk in seq_along(NAMES)) {
[11:01:04.635]                   name <- changed[[kk]]
[11:01:04.635]                   NAME <- NAMES[[kk]]
[11:01:04.635]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.635]                     next
[11:01:04.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.635]                 }
[11:01:04.635]                 NAMES <- toupper(added)
[11:01:04.635]                 for (kk in seq_along(NAMES)) {
[11:01:04.635]                   name <- added[[kk]]
[11:01:04.635]                   NAME <- NAMES[[kk]]
[11:01:04.635]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.635]                     next
[11:01:04.635]                   args[[name]] <- ""
[11:01:04.635]                 }
[11:01:04.635]                 NAMES <- toupper(removed)
[11:01:04.635]                 for (kk in seq_along(NAMES)) {
[11:01:04.635]                   name <- removed[[kk]]
[11:01:04.635]                   NAME <- NAMES[[kk]]
[11:01:04.635]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.635]                     next
[11:01:04.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.635]                 }
[11:01:04.635]                 if (length(args) > 0) 
[11:01:04.635]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.635]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.635]             }
[11:01:04.635]             else {
[11:01:04.635]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.635]             }
[11:01:04.635]             {
[11:01:04.635]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.635]                   0L) {
[11:01:04.635]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.635]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.635]                   base::options(opts)
[11:01:04.635]                 }
[11:01:04.635]                 {
[11:01:04.635]                   {
[11:01:04.635]                     NULL
[11:01:04.635]                     RNGkind("Mersenne-Twister")
[11:01:04.635]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:04.635]                       inherits = FALSE)
[11:01:04.635]                   }
[11:01:04.635]                   options(future.plan = NULL)
[11:01:04.635]                   if (is.na(NA_character_)) 
[11:01:04.635]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.635]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.635]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.635]                     .init = FALSE)
[11:01:04.635]                 }
[11:01:04.635]             }
[11:01:04.635]         }
[11:01:04.635]     })
[11:01:04.635]     if (TRUE) {
[11:01:04.635]         base::sink(type = "output", split = FALSE)
[11:01:04.635]         if (TRUE) {
[11:01:04.635]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.635]         }
[11:01:04.635]         else {
[11:01:04.635]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.635]         }
[11:01:04.635]         base::close(...future.stdout)
[11:01:04.635]         ...future.stdout <- NULL
[11:01:04.635]     }
[11:01:04.635]     ...future.result$conditions <- ...future.conditions
[11:01:04.635]     ...future.result$finished <- base::Sys.time()
[11:01:04.635]     ...future.result
[11:01:04.635] }
[11:01:04.637] assign_globals() ...
[11:01:04.637] List of 2
[11:01:04.637]  $ x: int [1:2] 1 2
[11:01:04.637]  $ y: num 3
[11:01:04.637]  - attr(*, "where")=List of 2
[11:01:04.637]   ..$ x:<environment: R_EmptyEnv> 
[11:01:04.637]   ..$ y:<environment: R_EmptyEnv> 
[11:01:04.637]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.637]  - attr(*, "resolved")= logi FALSE
[11:01:04.637]  - attr(*, "total_size")= num 172
[11:01:04.637]  - attr(*, "already-done")= logi TRUE
[11:01:04.639] - copied ‘x’ to environment
[11:01:04.639] - copied ‘y’ to environment
[11:01:04.640] assign_globals() ... done
[11:01:04.640] plan(): Setting new future strategy stack:
[11:01:04.640] List of future strategies:
[11:01:04.640] 1. sequential:
[11:01:04.640]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.640]    - tweaked: FALSE
[11:01:04.640]    - call: NULL
[11:01:04.640] plan(): nbrOfWorkers() = 1
[11:01:04.641] plan(): Setting new future strategy stack:
[11:01:04.641] List of future strategies:
[11:01:04.641] 1. sequential:
[11:01:04.641]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.641]    - tweaked: FALSE
[11:01:04.641]    - call: plan(strategy, substitute = FALSE)
[11:01:04.641] plan(): nbrOfWorkers() = 1
[11:01:04.642] SequentialFuture started (and completed)
[11:01:04.642] - Launch lazy future ... done
[11:01:04.642] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x55b7e43ada18>
Arguments '...' exists: FALSE
[11:01:04.642] getGlobalsAndPackages() ...
[11:01:04.642] Searching for globals...
[11:01:04.644] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[11:01:04.644] Searching for globals ... DONE
[11:01:04.644] Resolving globals: FALSE
[11:01:04.644] Tweak future expression to call with '...' arguments ...
[11:01:04.644] The total size of the 2 globals is 172 bytes (172 bytes)
[11:01:04.645] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 172 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:04.645] - globals: [2] ‘x’, ‘y’
[11:01:04.645] 
[11:01:04.645] getGlobalsAndPackages() ... DONE
[11:01:04.645] run() for ‘Future’ ...
[11:01:04.645] - state: ‘created’
[11:01:04.645] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:04.646] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:04.646] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:04.646]   - Field: ‘label’
[11:01:04.646]   - Field: ‘local’
[11:01:04.646]   - Field: ‘owner’
[11:01:04.646]   - Field: ‘envir’
[11:01:04.646]   - Field: ‘packages’
[11:01:04.646]   - Field: ‘gc’
[11:01:04.646]   - Field: ‘conditions’
[11:01:04.646]   - Field: ‘expr’
[11:01:04.647]   - Field: ‘uuid’
[11:01:04.647]   - Field: ‘seed’
[11:01:04.647]   - Field: ‘version’
[11:01:04.647]   - Field: ‘result’
[11:01:04.647]   - Field: ‘asynchronous’
[11:01:04.647]   - Field: ‘calls’
[11:01:04.647]   - Field: ‘globals’
[11:01:04.647]   - Field: ‘stdout’
[11:01:04.647]   - Field: ‘earlySignal’
[11:01:04.647]   - Field: ‘lazy’
[11:01:04.647]   - Field: ‘state’
[11:01:04.647] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:04.648] - Launch lazy future ...
[11:01:04.648] Packages needed by the future expression (n = 0): <none>
[11:01:04.648] Packages needed by future strategies (n = 0): <none>
[11:01:04.648] {
[11:01:04.648]     {
[11:01:04.648]         {
[11:01:04.648]             ...future.startTime <- base::Sys.time()
[11:01:04.648]             {
[11:01:04.648]                 {
[11:01:04.648]                   {
[11:01:04.648]                     base::local({
[11:01:04.648]                       has_future <- base::requireNamespace("future", 
[11:01:04.648]                         quietly = TRUE)
[11:01:04.648]                       if (has_future) {
[11:01:04.648]                         ns <- base::getNamespace("future")
[11:01:04.648]                         version <- ns[[".package"]][["version"]]
[11:01:04.648]                         if (is.null(version)) 
[11:01:04.648]                           version <- utils::packageVersion("future")
[11:01:04.648]                       }
[11:01:04.648]                       else {
[11:01:04.648]                         version <- NULL
[11:01:04.648]                       }
[11:01:04.648]                       if (!has_future || version < "1.8.0") {
[11:01:04.648]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.648]                           "", base::R.version$version.string), 
[11:01:04.648]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:04.648]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.648]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.648]                             "release", "version")], collapse = " "), 
[11:01:04.648]                           hostname = base::Sys.info()[["nodename"]])
[11:01:04.648]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.648]                           info)
[11:01:04.648]                         info <- base::paste(info, collapse = "; ")
[11:01:04.648]                         if (!has_future) {
[11:01:04.648]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.648]                             info)
[11:01:04.648]                         }
[11:01:04.648]                         else {
[11:01:04.648]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.648]                             info, version)
[11:01:04.648]                         }
[11:01:04.648]                         base::stop(msg)
[11:01:04.648]                       }
[11:01:04.648]                     })
[11:01:04.648]                   }
[11:01:04.648]                   ...future.strategy.old <- future::plan("list")
[11:01:04.648]                   options(future.plan = NULL)
[11:01:04.648]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.648]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.648]                 }
[11:01:04.648]                 ...future.workdir <- getwd()
[11:01:04.648]             }
[11:01:04.648]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.648]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.648]         }
[11:01:04.648]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.648]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.648]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.648]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.648]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.648]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.648]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.648]             base::names(...future.oldOptions))
[11:01:04.648]     }
[11:01:04.648]     if (FALSE) {
[11:01:04.648]     }
[11:01:04.648]     else {
[11:01:04.648]         if (TRUE) {
[11:01:04.648]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.648]                 open = "w")
[11:01:04.648]         }
[11:01:04.648]         else {
[11:01:04.648]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.648]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.648]         }
[11:01:04.648]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.648]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.648]             base::sink(type = "output", split = FALSE)
[11:01:04.648]             base::close(...future.stdout)
[11:01:04.648]         }, add = TRUE)
[11:01:04.648]     }
[11:01:04.648]     ...future.frame <- base::sys.nframe()
[11:01:04.648]     ...future.conditions <- base::list()
[11:01:04.648]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.648]     if (FALSE) {
[11:01:04.648]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.648]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.648]     }
[11:01:04.648]     ...future.result <- base::tryCatch({
[11:01:04.648]         base::withCallingHandlers({
[11:01:04.648]             ...future.value <- base::withVisible(base::local({
[11:01:04.648]                 sum(x, y, ...)
[11:01:04.648]             }))
[11:01:04.648]             future::FutureResult(value = ...future.value$value, 
[11:01:04.648]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.648]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.648]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.648]                     ...future.globalenv.names))
[11:01:04.648]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.648]         }, condition = base::local({
[11:01:04.648]             c <- base::c
[11:01:04.648]             inherits <- base::inherits
[11:01:04.648]             invokeRestart <- base::invokeRestart
[11:01:04.648]             length <- base::length
[11:01:04.648]             list <- base::list
[11:01:04.648]             seq.int <- base::seq.int
[11:01:04.648]             signalCondition <- base::signalCondition
[11:01:04.648]             sys.calls <- base::sys.calls
[11:01:04.648]             `[[` <- base::`[[`
[11:01:04.648]             `+` <- base::`+`
[11:01:04.648]             `<<-` <- base::`<<-`
[11:01:04.648]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.648]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.648]                   3L)]
[11:01:04.648]             }
[11:01:04.648]             function(cond) {
[11:01:04.648]                 is_error <- inherits(cond, "error")
[11:01:04.648]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.648]                   NULL)
[11:01:04.648]                 if (is_error) {
[11:01:04.648]                   sessionInformation <- function() {
[11:01:04.648]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.648]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.648]                       search = base::search(), system = base::Sys.info())
[11:01:04.648]                   }
[11:01:04.648]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.648]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.648]                     cond$call), session = sessionInformation(), 
[11:01:04.648]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.648]                   signalCondition(cond)
[11:01:04.648]                 }
[11:01:04.648]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.648]                 "immediateCondition"))) {
[11:01:04.648]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.648]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.648]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.648]                   if (TRUE && !signal) {
[11:01:04.648]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.648]                     {
[11:01:04.648]                       inherits <- base::inherits
[11:01:04.648]                       invokeRestart <- base::invokeRestart
[11:01:04.648]                       is.null <- base::is.null
[11:01:04.648]                       muffled <- FALSE
[11:01:04.648]                       if (inherits(cond, "message")) {
[11:01:04.648]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.648]                         if (muffled) 
[11:01:04.648]                           invokeRestart("muffleMessage")
[11:01:04.648]                       }
[11:01:04.648]                       else if (inherits(cond, "warning")) {
[11:01:04.648]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.648]                         if (muffled) 
[11:01:04.648]                           invokeRestart("muffleWarning")
[11:01:04.648]                       }
[11:01:04.648]                       else if (inherits(cond, "condition")) {
[11:01:04.648]                         if (!is.null(pattern)) {
[11:01:04.648]                           computeRestarts <- base::computeRestarts
[11:01:04.648]                           grepl <- base::grepl
[11:01:04.648]                           restarts <- computeRestarts(cond)
[11:01:04.648]                           for (restart in restarts) {
[11:01:04.648]                             name <- restart$name
[11:01:04.648]                             if (is.null(name)) 
[11:01:04.648]                               next
[11:01:04.648]                             if (!grepl(pattern, name)) 
[11:01:04.648]                               next
[11:01:04.648]                             invokeRestart(restart)
[11:01:04.648]                             muffled <- TRUE
[11:01:04.648]                             break
[11:01:04.648]                           }
[11:01:04.648]                         }
[11:01:04.648]                       }
[11:01:04.648]                       invisible(muffled)
[11:01:04.648]                     }
[11:01:04.648]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.648]                   }
[11:01:04.648]                 }
[11:01:04.648]                 else {
[11:01:04.648]                   if (TRUE) {
[11:01:04.648]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.648]                     {
[11:01:04.648]                       inherits <- base::inherits
[11:01:04.648]                       invokeRestart <- base::invokeRestart
[11:01:04.648]                       is.null <- base::is.null
[11:01:04.648]                       muffled <- FALSE
[11:01:04.648]                       if (inherits(cond, "message")) {
[11:01:04.648]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.648]                         if (muffled) 
[11:01:04.648]                           invokeRestart("muffleMessage")
[11:01:04.648]                       }
[11:01:04.648]                       else if (inherits(cond, "warning")) {
[11:01:04.648]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.648]                         if (muffled) 
[11:01:04.648]                           invokeRestart("muffleWarning")
[11:01:04.648]                       }
[11:01:04.648]                       else if (inherits(cond, "condition")) {
[11:01:04.648]                         if (!is.null(pattern)) {
[11:01:04.648]                           computeRestarts <- base::computeRestarts
[11:01:04.648]                           grepl <- base::grepl
[11:01:04.648]                           restarts <- computeRestarts(cond)
[11:01:04.648]                           for (restart in restarts) {
[11:01:04.648]                             name <- restart$name
[11:01:04.648]                             if (is.null(name)) 
[11:01:04.648]                               next
[11:01:04.648]                             if (!grepl(pattern, name)) 
[11:01:04.648]                               next
[11:01:04.648]                             invokeRestart(restart)
[11:01:04.648]                             muffled <- TRUE
[11:01:04.648]                             break
[11:01:04.648]                           }
[11:01:04.648]                         }
[11:01:04.648]                       }
[11:01:04.648]                       invisible(muffled)
[11:01:04.648]                     }
[11:01:04.648]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.648]                   }
[11:01:04.648]                 }
[11:01:04.648]             }
[11:01:04.648]         }))
[11:01:04.648]     }, error = function(ex) {
[11:01:04.648]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.648]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.648]                 ...future.rng), started = ...future.startTime, 
[11:01:04.648]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.648]             version = "1.8"), class = "FutureResult")
[11:01:04.648]     }, finally = {
[11:01:04.648]         if (!identical(...future.workdir, getwd())) 
[11:01:04.648]             setwd(...future.workdir)
[11:01:04.648]         {
[11:01:04.648]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.648]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.648]             }
[11:01:04.648]             base::options(...future.oldOptions)
[11:01:04.648]             if (.Platform$OS.type == "windows") {
[11:01:04.648]                 old_names <- names(...future.oldEnvVars)
[11:01:04.648]                 envs <- base::Sys.getenv()
[11:01:04.648]                 names <- names(envs)
[11:01:04.648]                 common <- intersect(names, old_names)
[11:01:04.648]                 added <- setdiff(names, old_names)
[11:01:04.648]                 removed <- setdiff(old_names, names)
[11:01:04.648]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.648]                   envs[common]]
[11:01:04.648]                 NAMES <- toupper(changed)
[11:01:04.648]                 args <- list()
[11:01:04.648]                 for (kk in seq_along(NAMES)) {
[11:01:04.648]                   name <- changed[[kk]]
[11:01:04.648]                   NAME <- NAMES[[kk]]
[11:01:04.648]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.648]                     next
[11:01:04.648]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.648]                 }
[11:01:04.648]                 NAMES <- toupper(added)
[11:01:04.648]                 for (kk in seq_along(NAMES)) {
[11:01:04.648]                   name <- added[[kk]]
[11:01:04.648]                   NAME <- NAMES[[kk]]
[11:01:04.648]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.648]                     next
[11:01:04.648]                   args[[name]] <- ""
[11:01:04.648]                 }
[11:01:04.648]                 NAMES <- toupper(removed)
[11:01:04.648]                 for (kk in seq_along(NAMES)) {
[11:01:04.648]                   name <- removed[[kk]]
[11:01:04.648]                   NAME <- NAMES[[kk]]
[11:01:04.648]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.648]                     next
[11:01:04.648]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.648]                 }
[11:01:04.648]                 if (length(args) > 0) 
[11:01:04.648]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.648]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.648]             }
[11:01:04.648]             else {
[11:01:04.648]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.648]             }
[11:01:04.648]             {
[11:01:04.648]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.648]                   0L) {
[11:01:04.648]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.648]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.648]                   base::options(opts)
[11:01:04.648]                 }
[11:01:04.648]                 {
[11:01:04.648]                   {
[11:01:04.648]                     NULL
[11:01:04.648]                     RNGkind("Mersenne-Twister")
[11:01:04.648]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:04.648]                       inherits = FALSE)
[11:01:04.648]                   }
[11:01:04.648]                   options(future.plan = NULL)
[11:01:04.648]                   if (is.na(NA_character_)) 
[11:01:04.648]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.648]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.648]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.648]                     .init = FALSE)
[11:01:04.648]                 }
[11:01:04.648]             }
[11:01:04.648]         }
[11:01:04.648]     })
[11:01:04.648]     if (TRUE) {
[11:01:04.648]         base::sink(type = "output", split = FALSE)
[11:01:04.648]         if (TRUE) {
[11:01:04.648]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.648]         }
[11:01:04.648]         else {
[11:01:04.648]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.648]         }
[11:01:04.648]         base::close(...future.stdout)
[11:01:04.648]         ...future.stdout <- NULL
[11:01:04.648]     }
[11:01:04.648]     ...future.result$conditions <- ...future.conditions
[11:01:04.648]     ...future.result$finished <- base::Sys.time()
[11:01:04.648]     ...future.result
[11:01:04.648] }
[11:01:04.650] assign_globals() ...
[11:01:04.650] List of 2
[11:01:04.650]  $ x: int [1:2] 1 2
[11:01:04.650]  $ y: num 3
[11:01:04.650]  - attr(*, "where")=List of 2
[11:01:04.650]   ..$ x:<environment: R_EmptyEnv> 
[11:01:04.650]   ..$ y:<environment: R_EmptyEnv> 
[11:01:04.650]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.650]  - attr(*, "resolved")= logi FALSE
[11:01:04.650]  - attr(*, "total_size")= num 172
[11:01:04.650]  - attr(*, "already-done")= logi TRUE
[11:01:04.654] - copied ‘x’ to environment
[11:01:04.654] - copied ‘y’ to environment
[11:01:04.654] assign_globals() ... done
[11:01:04.654] plan(): Setting new future strategy stack:
[11:01:04.654] List of future strategies:
[11:01:04.654] 1. sequential:
[11:01:04.654]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.654]    - tweaked: FALSE
[11:01:04.654]    - call: NULL
[11:01:04.655] plan(): nbrOfWorkers() = 1
[11:01:04.655] plan(): Setting new future strategy stack:
[11:01:04.656] List of future strategies:
[11:01:04.656] 1. sequential:
[11:01:04.656]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.656]    - tweaked: FALSE
[11:01:04.656]    - call: plan(strategy, substitute = FALSE)
[11:01:04.656] plan(): nbrOfWorkers() = 1
[11:01:04.656] SequentialFuture started (and completed)
[11:01:04.656] signalConditions() ...
[11:01:04.656]  - include = ‘immediateCondition’
[11:01:04.656]  - exclude = 
[11:01:04.656]  - resignal = FALSE
[11:01:04.657]  - Number of conditions: 1
[11:01:04.657] signalConditions() ... done
[11:01:04.657] - Launch lazy future ... done
[11:01:04.657] run() for ‘SequentialFuture’ ... done
[11:01:04.657] signalConditions() ...
[11:01:04.657]  - include = ‘immediateCondition’
[11:01:04.657]  - exclude = 
[11:01:04.657]  - resignal = FALSE
[11:01:04.657]  - Number of conditions: 1
[11:01:04.657] signalConditions() ... done
[11:01:04.657] Future state: ‘finished’
[11:01:04.658] signalConditions() ...
[11:01:04.658]  - include = ‘condition’
[11:01:04.658]  - exclude = ‘immediateCondition’
[11:01:04.658]  - resignal = TRUE
[11:01:04.658]  - Number of conditions: 1
[11:01:04.658]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:01:04.658] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55b7e2426e88>
Arguments '...' exists: TRUE
[11:01:04.659] getGlobalsAndPackages() ...
[11:01:04.659] - globals passed as-is: [1] ‘...’
[11:01:04.659] Resolving globals: FALSE
[11:01:04.659] Tweak future expression to call with '...' arguments ...
[11:01:04.659] {
[11:01:04.659]     do.call(function(...) {
[11:01:04.659]         fcn <- function() sum(...)
[11:01:04.659]         fcn()
[11:01:04.659]     }, args = future.call.arguments)
[11:01:04.659] }
[11:01:04.659] Tweak future expression to call with '...' arguments ... DONE
[11:01:04.659] The total size of the 1 globals is 223 bytes (223 bytes)
[11:01:04.660] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 223 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (223 bytes of class ‘list’)
[11:01:04.660] - globals: [1] ‘future.call.arguments’
[11:01:04.660] 
[11:01:04.660] getGlobalsAndPackages() ... DONE
[11:01:04.660] run() for ‘Future’ ...
[11:01:04.660] - state: ‘created’
[11:01:04.660] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:04.661] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:04.661] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:04.661]   - Field: ‘label’
[11:01:04.661]   - Field: ‘local’
[11:01:04.661]   - Field: ‘owner’
[11:01:04.661]   - Field: ‘envir’
[11:01:04.661]   - Field: ‘packages’
[11:01:04.661]   - Field: ‘gc’
[11:01:04.661]   - Field: ‘conditions’
[11:01:04.662]   - Field: ‘expr’
[11:01:04.662]   - Field: ‘uuid’
[11:01:04.662]   - Field: ‘seed’
[11:01:04.662]   - Field: ‘version’
[11:01:04.662]   - Field: ‘result’
[11:01:04.662]   - Field: ‘asynchronous’
[11:01:04.662]   - Field: ‘calls’
[11:01:04.662]   - Field: ‘globals’
[11:01:04.662]   - Field: ‘stdout’
[11:01:04.662]   - Field: ‘earlySignal’
[11:01:04.662]   - Field: ‘lazy’
[11:01:04.662]   - Field: ‘state’
[11:01:04.662] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:04.663] - Launch lazy future ...
[11:01:04.663] Packages needed by the future expression (n = 0): <none>
[11:01:04.663] Packages needed by future strategies (n = 0): <none>
[11:01:04.663] {
[11:01:04.663]     {
[11:01:04.663]         {
[11:01:04.663]             ...future.startTime <- base::Sys.time()
[11:01:04.663]             {
[11:01:04.663]                 {
[11:01:04.663]                   {
[11:01:04.663]                     base::local({
[11:01:04.663]                       has_future <- base::requireNamespace("future", 
[11:01:04.663]                         quietly = TRUE)
[11:01:04.663]                       if (has_future) {
[11:01:04.663]                         ns <- base::getNamespace("future")
[11:01:04.663]                         version <- ns[[".package"]][["version"]]
[11:01:04.663]                         if (is.null(version)) 
[11:01:04.663]                           version <- utils::packageVersion("future")
[11:01:04.663]                       }
[11:01:04.663]                       else {
[11:01:04.663]                         version <- NULL
[11:01:04.663]                       }
[11:01:04.663]                       if (!has_future || version < "1.8.0") {
[11:01:04.663]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.663]                           "", base::R.version$version.string), 
[11:01:04.663]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:04.663]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.663]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.663]                             "release", "version")], collapse = " "), 
[11:01:04.663]                           hostname = base::Sys.info()[["nodename"]])
[11:01:04.663]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.663]                           info)
[11:01:04.663]                         info <- base::paste(info, collapse = "; ")
[11:01:04.663]                         if (!has_future) {
[11:01:04.663]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.663]                             info)
[11:01:04.663]                         }
[11:01:04.663]                         else {
[11:01:04.663]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.663]                             info, version)
[11:01:04.663]                         }
[11:01:04.663]                         base::stop(msg)
[11:01:04.663]                       }
[11:01:04.663]                     })
[11:01:04.663]                   }
[11:01:04.663]                   ...future.strategy.old <- future::plan("list")
[11:01:04.663]                   options(future.plan = NULL)
[11:01:04.663]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.663]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.663]                 }
[11:01:04.663]                 ...future.workdir <- getwd()
[11:01:04.663]             }
[11:01:04.663]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.663]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.663]         }
[11:01:04.663]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.663]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.663]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.663]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.663]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.663]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.663]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.663]             base::names(...future.oldOptions))
[11:01:04.663]     }
[11:01:04.663]     if (FALSE) {
[11:01:04.663]     }
[11:01:04.663]     else {
[11:01:04.663]         if (TRUE) {
[11:01:04.663]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.663]                 open = "w")
[11:01:04.663]         }
[11:01:04.663]         else {
[11:01:04.663]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.663]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.663]         }
[11:01:04.663]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.663]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.663]             base::sink(type = "output", split = FALSE)
[11:01:04.663]             base::close(...future.stdout)
[11:01:04.663]         }, add = TRUE)
[11:01:04.663]     }
[11:01:04.663]     ...future.frame <- base::sys.nframe()
[11:01:04.663]     ...future.conditions <- base::list()
[11:01:04.663]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.663]     if (FALSE) {
[11:01:04.663]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.663]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.663]     }
[11:01:04.663]     ...future.result <- base::tryCatch({
[11:01:04.663]         base::withCallingHandlers({
[11:01:04.663]             ...future.value <- base::withVisible(base::local({
[11:01:04.663]                 do.call(function(...) {
[11:01:04.663]                   fcn <- function() sum(...)
[11:01:04.663]                   fcn()
[11:01:04.663]                 }, args = future.call.arguments)
[11:01:04.663]             }))
[11:01:04.663]             future::FutureResult(value = ...future.value$value, 
[11:01:04.663]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.663]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.663]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.663]                     ...future.globalenv.names))
[11:01:04.663]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.663]         }, condition = base::local({
[11:01:04.663]             c <- base::c
[11:01:04.663]             inherits <- base::inherits
[11:01:04.663]             invokeRestart <- base::invokeRestart
[11:01:04.663]             length <- base::length
[11:01:04.663]             list <- base::list
[11:01:04.663]             seq.int <- base::seq.int
[11:01:04.663]             signalCondition <- base::signalCondition
[11:01:04.663]             sys.calls <- base::sys.calls
[11:01:04.663]             `[[` <- base::`[[`
[11:01:04.663]             `+` <- base::`+`
[11:01:04.663]             `<<-` <- base::`<<-`
[11:01:04.663]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.663]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.663]                   3L)]
[11:01:04.663]             }
[11:01:04.663]             function(cond) {
[11:01:04.663]                 is_error <- inherits(cond, "error")
[11:01:04.663]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.663]                   NULL)
[11:01:04.663]                 if (is_error) {
[11:01:04.663]                   sessionInformation <- function() {
[11:01:04.663]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.663]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.663]                       search = base::search(), system = base::Sys.info())
[11:01:04.663]                   }
[11:01:04.663]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.663]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.663]                     cond$call), session = sessionInformation(), 
[11:01:04.663]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.663]                   signalCondition(cond)
[11:01:04.663]                 }
[11:01:04.663]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.663]                 "immediateCondition"))) {
[11:01:04.663]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.663]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.663]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.663]                   if (TRUE && !signal) {
[11:01:04.663]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.663]                     {
[11:01:04.663]                       inherits <- base::inherits
[11:01:04.663]                       invokeRestart <- base::invokeRestart
[11:01:04.663]                       is.null <- base::is.null
[11:01:04.663]                       muffled <- FALSE
[11:01:04.663]                       if (inherits(cond, "message")) {
[11:01:04.663]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.663]                         if (muffled) 
[11:01:04.663]                           invokeRestart("muffleMessage")
[11:01:04.663]                       }
[11:01:04.663]                       else if (inherits(cond, "warning")) {
[11:01:04.663]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.663]                         if (muffled) 
[11:01:04.663]                           invokeRestart("muffleWarning")
[11:01:04.663]                       }
[11:01:04.663]                       else if (inherits(cond, "condition")) {
[11:01:04.663]                         if (!is.null(pattern)) {
[11:01:04.663]                           computeRestarts <- base::computeRestarts
[11:01:04.663]                           grepl <- base::grepl
[11:01:04.663]                           restarts <- computeRestarts(cond)
[11:01:04.663]                           for (restart in restarts) {
[11:01:04.663]                             name <- restart$name
[11:01:04.663]                             if (is.null(name)) 
[11:01:04.663]                               next
[11:01:04.663]                             if (!grepl(pattern, name)) 
[11:01:04.663]                               next
[11:01:04.663]                             invokeRestart(restart)
[11:01:04.663]                             muffled <- TRUE
[11:01:04.663]                             break
[11:01:04.663]                           }
[11:01:04.663]                         }
[11:01:04.663]                       }
[11:01:04.663]                       invisible(muffled)
[11:01:04.663]                     }
[11:01:04.663]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.663]                   }
[11:01:04.663]                 }
[11:01:04.663]                 else {
[11:01:04.663]                   if (TRUE) {
[11:01:04.663]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.663]                     {
[11:01:04.663]                       inherits <- base::inherits
[11:01:04.663]                       invokeRestart <- base::invokeRestart
[11:01:04.663]                       is.null <- base::is.null
[11:01:04.663]                       muffled <- FALSE
[11:01:04.663]                       if (inherits(cond, "message")) {
[11:01:04.663]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.663]                         if (muffled) 
[11:01:04.663]                           invokeRestart("muffleMessage")
[11:01:04.663]                       }
[11:01:04.663]                       else if (inherits(cond, "warning")) {
[11:01:04.663]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.663]                         if (muffled) 
[11:01:04.663]                           invokeRestart("muffleWarning")
[11:01:04.663]                       }
[11:01:04.663]                       else if (inherits(cond, "condition")) {
[11:01:04.663]                         if (!is.null(pattern)) {
[11:01:04.663]                           computeRestarts <- base::computeRestarts
[11:01:04.663]                           grepl <- base::grepl
[11:01:04.663]                           restarts <- computeRestarts(cond)
[11:01:04.663]                           for (restart in restarts) {
[11:01:04.663]                             name <- restart$name
[11:01:04.663]                             if (is.null(name)) 
[11:01:04.663]                               next
[11:01:04.663]                             if (!grepl(pattern, name)) 
[11:01:04.663]                               next
[11:01:04.663]                             invokeRestart(restart)
[11:01:04.663]                             muffled <- TRUE
[11:01:04.663]                             break
[11:01:04.663]                           }
[11:01:04.663]                         }
[11:01:04.663]                       }
[11:01:04.663]                       invisible(muffled)
[11:01:04.663]                     }
[11:01:04.663]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.663]                   }
[11:01:04.663]                 }
[11:01:04.663]             }
[11:01:04.663]         }))
[11:01:04.663]     }, error = function(ex) {
[11:01:04.663]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.663]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.663]                 ...future.rng), started = ...future.startTime, 
[11:01:04.663]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.663]             version = "1.8"), class = "FutureResult")
[11:01:04.663]     }, finally = {
[11:01:04.663]         if (!identical(...future.workdir, getwd())) 
[11:01:04.663]             setwd(...future.workdir)
[11:01:04.663]         {
[11:01:04.663]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.663]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.663]             }
[11:01:04.663]             base::options(...future.oldOptions)
[11:01:04.663]             if (.Platform$OS.type == "windows") {
[11:01:04.663]                 old_names <- names(...future.oldEnvVars)
[11:01:04.663]                 envs <- base::Sys.getenv()
[11:01:04.663]                 names <- names(envs)
[11:01:04.663]                 common <- intersect(names, old_names)
[11:01:04.663]                 added <- setdiff(names, old_names)
[11:01:04.663]                 removed <- setdiff(old_names, names)
[11:01:04.663]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.663]                   envs[common]]
[11:01:04.663]                 NAMES <- toupper(changed)
[11:01:04.663]                 args <- list()
[11:01:04.663]                 for (kk in seq_along(NAMES)) {
[11:01:04.663]                   name <- changed[[kk]]
[11:01:04.663]                   NAME <- NAMES[[kk]]
[11:01:04.663]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.663]                     next
[11:01:04.663]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.663]                 }
[11:01:04.663]                 NAMES <- toupper(added)
[11:01:04.663]                 for (kk in seq_along(NAMES)) {
[11:01:04.663]                   name <- added[[kk]]
[11:01:04.663]                   NAME <- NAMES[[kk]]
[11:01:04.663]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.663]                     next
[11:01:04.663]                   args[[name]] <- ""
[11:01:04.663]                 }
[11:01:04.663]                 NAMES <- toupper(removed)
[11:01:04.663]                 for (kk in seq_along(NAMES)) {
[11:01:04.663]                   name <- removed[[kk]]
[11:01:04.663]                   NAME <- NAMES[[kk]]
[11:01:04.663]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.663]                     next
[11:01:04.663]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.663]                 }
[11:01:04.663]                 if (length(args) > 0) 
[11:01:04.663]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.663]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.663]             }
[11:01:04.663]             else {
[11:01:04.663]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.663]             }
[11:01:04.663]             {
[11:01:04.663]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.663]                   0L) {
[11:01:04.663]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.663]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.663]                   base::options(opts)
[11:01:04.663]                 }
[11:01:04.663]                 {
[11:01:04.663]                   {
[11:01:04.663]                     NULL
[11:01:04.663]                     RNGkind("Mersenne-Twister")
[11:01:04.663]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:04.663]                       inherits = FALSE)
[11:01:04.663]                   }
[11:01:04.663]                   options(future.plan = NULL)
[11:01:04.663]                   if (is.na(NA_character_)) 
[11:01:04.663]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.663]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.663]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.663]                     .init = FALSE)
[11:01:04.663]                 }
[11:01:04.663]             }
[11:01:04.663]         }
[11:01:04.663]     })
[11:01:04.663]     if (TRUE) {
[11:01:04.663]         base::sink(type = "output", split = FALSE)
[11:01:04.663]         if (TRUE) {
[11:01:04.663]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.663]         }
[11:01:04.663]         else {
[11:01:04.663]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.663]         }
[11:01:04.663]         base::close(...future.stdout)
[11:01:04.663]         ...future.stdout <- NULL
[11:01:04.663]     }
[11:01:04.663]     ...future.result$conditions <- ...future.conditions
[11:01:04.663]     ...future.result$finished <- base::Sys.time()
[11:01:04.663]     ...future.result
[11:01:04.663] }
[11:01:04.665] assign_globals() ...
[11:01:04.665] List of 1
[11:01:04.665]  $ future.call.arguments:List of 2
[11:01:04.665]   ..$ : int [1:2] 1 2
[11:01:04.665]   ..$ : num 3
[11:01:04.665]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[11:01:04.665]  - attr(*, "where")=List of 1
[11:01:04.665]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[11:01:04.665]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.665]  - attr(*, "resolved")= logi FALSE
[11:01:04.665]  - attr(*, "total_size")= num 223
[11:01:04.665]  - attr(*, "already-done")= logi TRUE
[11:01:04.668] - copied ‘future.call.arguments’ to environment
[11:01:04.668] assign_globals() ... done
[11:01:04.668] plan(): Setting new future strategy stack:
[11:01:04.668] List of future strategies:
[11:01:04.668] 1. sequential:
[11:01:04.668]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.668]    - tweaked: FALSE
[11:01:04.668]    - call: NULL
[11:01:04.669] plan(): nbrOfWorkers() = 1
[11:01:04.669] plan(): Setting new future strategy stack:
[11:01:04.669] List of future strategies:
[11:01:04.669] 1. sequential:
[11:01:04.669]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.669]    - tweaked: FALSE
[11:01:04.669]    - call: plan(strategy, substitute = FALSE)
[11:01:04.670] plan(): nbrOfWorkers() = 1
[11:01:04.670] SequentialFuture started (and completed)
[11:01:04.670] - Launch lazy future ... done
[11:01:04.670] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x55b7e1b30498>
Using '...' in a formula
[11:01:04.671] getGlobalsAndPackages() ...
[11:01:04.671] Searching for globals...
[11:01:04.673] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[11:01:04.673] Searching for globals ... DONE
[11:01:04.673] Resolving globals: FALSE
[11:01:04.674] Tweak future expression to call with '...' arguments ...
[11:01:04.674] The total size of the 3 globals is 1.94 KiB (1985 bytes)
[11:01:04.674] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 1.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (1.77 KiB of class ‘function’), ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:04.675] - globals: [3] ‘fcn’, ‘x’, ‘y’
[11:01:04.675] 
[11:01:04.675] getGlobalsAndPackages() ... DONE
[11:01:04.675] run() for ‘Future’ ...
[11:01:04.675] - state: ‘created’
[11:01:04.675] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:04.675] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:04.675] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:04.676]   - Field: ‘label’
[11:01:04.676]   - Field: ‘local’
[11:01:04.676]   - Field: ‘owner’
[11:01:04.676]   - Field: ‘envir’
[11:01:04.676]   - Field: ‘packages’
[11:01:04.676]   - Field: ‘gc’
[11:01:04.676]   - Field: ‘conditions’
[11:01:04.676]   - Field: ‘expr’
[11:01:04.676]   - Field: ‘uuid’
[11:01:04.676]   - Field: ‘seed’
[11:01:04.676]   - Field: ‘version’
[11:01:04.676]   - Field: ‘result’
[11:01:04.677]   - Field: ‘asynchronous’
[11:01:04.677]   - Field: ‘calls’
[11:01:04.677]   - Field: ‘globals’
[11:01:04.678]   - Field: ‘stdout’
[11:01:04.678]   - Field: ‘earlySignal’
[11:01:04.678]   - Field: ‘lazy’
[11:01:04.678]   - Field: ‘state’
[11:01:04.678] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:04.678] - Launch lazy future ...
[11:01:04.678] Packages needed by the future expression (n = 0): <none>
[11:01:04.678] Packages needed by future strategies (n = 0): <none>
[11:01:04.679] {
[11:01:04.679]     {
[11:01:04.679]         {
[11:01:04.679]             ...future.startTime <- base::Sys.time()
[11:01:04.679]             {
[11:01:04.679]                 {
[11:01:04.679]                   {
[11:01:04.679]                     base::local({
[11:01:04.679]                       has_future <- base::requireNamespace("future", 
[11:01:04.679]                         quietly = TRUE)
[11:01:04.679]                       if (has_future) {
[11:01:04.679]                         ns <- base::getNamespace("future")
[11:01:04.679]                         version <- ns[[".package"]][["version"]]
[11:01:04.679]                         if (is.null(version)) 
[11:01:04.679]                           version <- utils::packageVersion("future")
[11:01:04.679]                       }
[11:01:04.679]                       else {
[11:01:04.679]                         version <- NULL
[11:01:04.679]                       }
[11:01:04.679]                       if (!has_future || version < "1.8.0") {
[11:01:04.679]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.679]                           "", base::R.version$version.string), 
[11:01:04.679]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:04.679]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.679]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.679]                             "release", "version")], collapse = " "), 
[11:01:04.679]                           hostname = base::Sys.info()[["nodename"]])
[11:01:04.679]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.679]                           info)
[11:01:04.679]                         info <- base::paste(info, collapse = "; ")
[11:01:04.679]                         if (!has_future) {
[11:01:04.679]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.679]                             info)
[11:01:04.679]                         }
[11:01:04.679]                         else {
[11:01:04.679]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.679]                             info, version)
[11:01:04.679]                         }
[11:01:04.679]                         base::stop(msg)
[11:01:04.679]                       }
[11:01:04.679]                     })
[11:01:04.679]                   }
[11:01:04.679]                   ...future.strategy.old <- future::plan("list")
[11:01:04.679]                   options(future.plan = NULL)
[11:01:04.679]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.679]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.679]                 }
[11:01:04.679]                 ...future.workdir <- getwd()
[11:01:04.679]             }
[11:01:04.679]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.679]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.679]         }
[11:01:04.679]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.679]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.679]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.679]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.679]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.679]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.679]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.679]             base::names(...future.oldOptions))
[11:01:04.679]     }
[11:01:04.679]     if (FALSE) {
[11:01:04.679]     }
[11:01:04.679]     else {
[11:01:04.679]         if (TRUE) {
[11:01:04.679]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.679]                 open = "w")
[11:01:04.679]         }
[11:01:04.679]         else {
[11:01:04.679]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.679]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.679]         }
[11:01:04.679]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.679]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.679]             base::sink(type = "output", split = FALSE)
[11:01:04.679]             base::close(...future.stdout)
[11:01:04.679]         }, add = TRUE)
[11:01:04.679]     }
[11:01:04.679]     ...future.frame <- base::sys.nframe()
[11:01:04.679]     ...future.conditions <- base::list()
[11:01:04.679]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.679]     if (FALSE) {
[11:01:04.679]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.679]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.679]     }
[11:01:04.679]     ...future.result <- base::tryCatch({
[11:01:04.679]         base::withCallingHandlers({
[11:01:04.679]             ...future.value <- base::withVisible(base::local(fcn(x, 
[11:01:04.679]                 y)))
[11:01:04.679]             future::FutureResult(value = ...future.value$value, 
[11:01:04.679]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.679]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.679]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.679]                     ...future.globalenv.names))
[11:01:04.679]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.679]         }, condition = base::local({
[11:01:04.679]             c <- base::c
[11:01:04.679]             inherits <- base::inherits
[11:01:04.679]             invokeRestart <- base::invokeRestart
[11:01:04.679]             length <- base::length
[11:01:04.679]             list <- base::list
[11:01:04.679]             seq.int <- base::seq.int
[11:01:04.679]             signalCondition <- base::signalCondition
[11:01:04.679]             sys.calls <- base::sys.calls
[11:01:04.679]             `[[` <- base::`[[`
[11:01:04.679]             `+` <- base::`+`
[11:01:04.679]             `<<-` <- base::`<<-`
[11:01:04.679]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.679]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.679]                   3L)]
[11:01:04.679]             }
[11:01:04.679]             function(cond) {
[11:01:04.679]                 is_error <- inherits(cond, "error")
[11:01:04.679]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.679]                   NULL)
[11:01:04.679]                 if (is_error) {
[11:01:04.679]                   sessionInformation <- function() {
[11:01:04.679]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.679]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.679]                       search = base::search(), system = base::Sys.info())
[11:01:04.679]                   }
[11:01:04.679]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.679]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.679]                     cond$call), session = sessionInformation(), 
[11:01:04.679]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.679]                   signalCondition(cond)
[11:01:04.679]                 }
[11:01:04.679]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.679]                 "immediateCondition"))) {
[11:01:04.679]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.679]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.679]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.679]                   if (TRUE && !signal) {
[11:01:04.679]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.679]                     {
[11:01:04.679]                       inherits <- base::inherits
[11:01:04.679]                       invokeRestart <- base::invokeRestart
[11:01:04.679]                       is.null <- base::is.null
[11:01:04.679]                       muffled <- FALSE
[11:01:04.679]                       if (inherits(cond, "message")) {
[11:01:04.679]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.679]                         if (muffled) 
[11:01:04.679]                           invokeRestart("muffleMessage")
[11:01:04.679]                       }
[11:01:04.679]                       else if (inherits(cond, "warning")) {
[11:01:04.679]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.679]                         if (muffled) 
[11:01:04.679]                           invokeRestart("muffleWarning")
[11:01:04.679]                       }
[11:01:04.679]                       else if (inherits(cond, "condition")) {
[11:01:04.679]                         if (!is.null(pattern)) {
[11:01:04.679]                           computeRestarts <- base::computeRestarts
[11:01:04.679]                           grepl <- base::grepl
[11:01:04.679]                           restarts <- computeRestarts(cond)
[11:01:04.679]                           for (restart in restarts) {
[11:01:04.679]                             name <- restart$name
[11:01:04.679]                             if (is.null(name)) 
[11:01:04.679]                               next
[11:01:04.679]                             if (!grepl(pattern, name)) 
[11:01:04.679]                               next
[11:01:04.679]                             invokeRestart(restart)
[11:01:04.679]                             muffled <- TRUE
[11:01:04.679]                             break
[11:01:04.679]                           }
[11:01:04.679]                         }
[11:01:04.679]                       }
[11:01:04.679]                       invisible(muffled)
[11:01:04.679]                     }
[11:01:04.679]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.679]                   }
[11:01:04.679]                 }
[11:01:04.679]                 else {
[11:01:04.679]                   if (TRUE) {
[11:01:04.679]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.679]                     {
[11:01:04.679]                       inherits <- base::inherits
[11:01:04.679]                       invokeRestart <- base::invokeRestart
[11:01:04.679]                       is.null <- base::is.null
[11:01:04.679]                       muffled <- FALSE
[11:01:04.679]                       if (inherits(cond, "message")) {
[11:01:04.679]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.679]                         if (muffled) 
[11:01:04.679]                           invokeRestart("muffleMessage")
[11:01:04.679]                       }
[11:01:04.679]                       else if (inherits(cond, "warning")) {
[11:01:04.679]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.679]                         if (muffled) 
[11:01:04.679]                           invokeRestart("muffleWarning")
[11:01:04.679]                       }
[11:01:04.679]                       else if (inherits(cond, "condition")) {
[11:01:04.679]                         if (!is.null(pattern)) {
[11:01:04.679]                           computeRestarts <- base::computeRestarts
[11:01:04.679]                           grepl <- base::grepl
[11:01:04.679]                           restarts <- computeRestarts(cond)
[11:01:04.679]                           for (restart in restarts) {
[11:01:04.679]                             name <- restart$name
[11:01:04.679]                             if (is.null(name)) 
[11:01:04.679]                               next
[11:01:04.679]                             if (!grepl(pattern, name)) 
[11:01:04.679]                               next
[11:01:04.679]                             invokeRestart(restart)
[11:01:04.679]                             muffled <- TRUE
[11:01:04.679]                             break
[11:01:04.679]                           }
[11:01:04.679]                         }
[11:01:04.679]                       }
[11:01:04.679]                       invisible(muffled)
[11:01:04.679]                     }
[11:01:04.679]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.679]                   }
[11:01:04.679]                 }
[11:01:04.679]             }
[11:01:04.679]         }))
[11:01:04.679]     }, error = function(ex) {
[11:01:04.679]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.679]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.679]                 ...future.rng), started = ...future.startTime, 
[11:01:04.679]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.679]             version = "1.8"), class = "FutureResult")
[11:01:04.679]     }, finally = {
[11:01:04.679]         if (!identical(...future.workdir, getwd())) 
[11:01:04.679]             setwd(...future.workdir)
[11:01:04.679]         {
[11:01:04.679]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.679]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.679]             }
[11:01:04.679]             base::options(...future.oldOptions)
[11:01:04.679]             if (.Platform$OS.type == "windows") {
[11:01:04.679]                 old_names <- names(...future.oldEnvVars)
[11:01:04.679]                 envs <- base::Sys.getenv()
[11:01:04.679]                 names <- names(envs)
[11:01:04.679]                 common <- intersect(names, old_names)
[11:01:04.679]                 added <- setdiff(names, old_names)
[11:01:04.679]                 removed <- setdiff(old_names, names)
[11:01:04.679]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.679]                   envs[common]]
[11:01:04.679]                 NAMES <- toupper(changed)
[11:01:04.679]                 args <- list()
[11:01:04.679]                 for (kk in seq_along(NAMES)) {
[11:01:04.679]                   name <- changed[[kk]]
[11:01:04.679]                   NAME <- NAMES[[kk]]
[11:01:04.679]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.679]                     next
[11:01:04.679]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.679]                 }
[11:01:04.679]                 NAMES <- toupper(added)
[11:01:04.679]                 for (kk in seq_along(NAMES)) {
[11:01:04.679]                   name <- added[[kk]]
[11:01:04.679]                   NAME <- NAMES[[kk]]
[11:01:04.679]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.679]                     next
[11:01:04.679]                   args[[name]] <- ""
[11:01:04.679]                 }
[11:01:04.679]                 NAMES <- toupper(removed)
[11:01:04.679]                 for (kk in seq_along(NAMES)) {
[11:01:04.679]                   name <- removed[[kk]]
[11:01:04.679]                   NAME <- NAMES[[kk]]
[11:01:04.679]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.679]                     next
[11:01:04.679]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.679]                 }
[11:01:04.679]                 if (length(args) > 0) 
[11:01:04.679]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.679]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.679]             }
[11:01:04.679]             else {
[11:01:04.679]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.679]             }
[11:01:04.679]             {
[11:01:04.679]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.679]                   0L) {
[11:01:04.679]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.679]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.679]                   base::options(opts)
[11:01:04.679]                 }
[11:01:04.679]                 {
[11:01:04.679]                   {
[11:01:04.679]                     NULL
[11:01:04.679]                     RNGkind("Mersenne-Twister")
[11:01:04.679]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:04.679]                       inherits = FALSE)
[11:01:04.679]                   }
[11:01:04.679]                   options(future.plan = NULL)
[11:01:04.679]                   if (is.na(NA_character_)) 
[11:01:04.679]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.679]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.679]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.679]                     .init = FALSE)
[11:01:04.679]                 }
[11:01:04.679]             }
[11:01:04.679]         }
[11:01:04.679]     })
[11:01:04.679]     if (TRUE) {
[11:01:04.679]         base::sink(type = "output", split = FALSE)
[11:01:04.679]         if (TRUE) {
[11:01:04.679]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.679]         }
[11:01:04.679]         else {
[11:01:04.679]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.679]         }
[11:01:04.679]         base::close(...future.stdout)
[11:01:04.679]         ...future.stdout <- NULL
[11:01:04.679]     }
[11:01:04.679]     ...future.result$conditions <- ...future.conditions
[11:01:04.679]     ...future.result$finished <- base::Sys.time()
[11:01:04.679]     ...future.result
[11:01:04.679] }
[11:01:04.681] assign_globals() ...
[11:01:04.681] List of 3
[11:01:04.681]  $ fcn:function (x, y)  
[11:01:04.681]  $ x  : int [1:2] 1 2
[11:01:04.681]  $ y  : num 3
[11:01:04.681]  - attr(*, "where")=List of 3
[11:01:04.681]   ..$ fcn:<environment: R_EmptyEnv> 
[11:01:04.681]   ..$ x  :<environment: R_EmptyEnv> 
[11:01:04.681]   ..$ y  :<environment: R_EmptyEnv> 
[11:01:04.681]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.681]  - attr(*, "resolved")= logi FALSE
[11:01:04.681]  - attr(*, "total_size")= num 1985
[11:01:04.681]  - attr(*, "already-done")= logi TRUE
[11:01:04.684] - reassign environment for ‘fcn’
[11:01:04.684] - copied ‘fcn’ to environment
[11:01:04.684] - copied ‘x’ to environment
[11:01:04.684] - copied ‘y’ to environment
[11:01:04.684] assign_globals() ... done
[11:01:04.684] plan(): Setting new future strategy stack:
[11:01:04.685] List of future strategies:
[11:01:04.685] 1. sequential:
[11:01:04.685]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.685]    - tweaked: FALSE
[11:01:04.685]    - call: NULL
[11:01:04.685] plan(): nbrOfWorkers() = 1
[11:01:04.686] plan(): Setting new future strategy stack:
[11:01:04.686] List of future strategies:
[11:01:04.686] 1. sequential:
[11:01:04.686]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.686]    - tweaked: FALSE
[11:01:04.686]    - call: plan(strategy, substitute = FALSE)
[11:01:04.686] plan(): nbrOfWorkers() = 1
[11:01:04.686] SequentialFuture started (and completed)
[11:01:04.686] - Launch lazy future ... done
[11:01:04.686] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[11:01:04.691] plan(): Setting new future strategy stack:
[11:01:04.691] List of future strategies:
[11:01:04.691] 1. multicore:
[11:01:04.691]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:04.691]    - tweaked: FALSE
[11:01:04.691]    - call: plan(strategy, substitute = FALSE)
[11:01:04.693] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x55b7e3b11768>
Arguments '...' exists: TRUE
[11:01:04.694] getGlobalsAndPackages() ...
[11:01:04.694] Searching for globals...
[11:01:04.695] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[11:01:04.695] Searching for globals ... DONE
[11:01:04.695] Resolving globals: FALSE
[11:01:04.695] Tweak future expression to call with '...' arguments ...
[11:01:04.695] {
[11:01:04.695]     do.call(function(...) {
[11:01:04.695]         sum(x, ...)
[11:01:04.695]     }, args = future.call.arguments)
[11:01:04.695] }
[11:01:04.695] Tweak future expression to call with '...' arguments ... DONE
[11:01:04.696] The total size of the 2 globals is 246 bytes (246 bytes)
[11:01:04.696] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 246 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘future.call.arguments’ (113 bytes of class ‘list’)
[11:01:04.696] - globals: [2] ‘x’, ‘future.call.arguments’
[11:01:04.696] 
[11:01:04.696] getGlobalsAndPackages() ... DONE
[11:01:04.697] run() for ‘Future’ ...
[11:01:04.697] - state: ‘created’
[11:01:04.697] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:04.698] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:04.698] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:04.699]   - Field: ‘label’
[11:01:04.699]   - Field: ‘local’
[11:01:04.699]   - Field: ‘owner’
[11:01:04.699]   - Field: ‘envir’
[11:01:04.699]   - Field: ‘workers’
[11:01:04.699]   - Field: ‘packages’
[11:01:04.699]   - Field: ‘gc’
[11:01:04.699]   - Field: ‘job’
[11:01:04.699]   - Field: ‘conditions’
[11:01:04.699]   - Field: ‘expr’
[11:01:04.699]   - Field: ‘uuid’
[11:01:04.699]   - Field: ‘seed’
[11:01:04.700]   - Field: ‘version’
[11:01:04.700]   - Field: ‘result’
[11:01:04.700]   - Field: ‘asynchronous’
[11:01:04.700]   - Field: ‘calls’
[11:01:04.700]   - Field: ‘globals’
[11:01:04.700]   - Field: ‘stdout’
[11:01:04.700]   - Field: ‘earlySignal’
[11:01:04.700]   - Field: ‘lazy’
[11:01:04.700]   - Field: ‘state’
[11:01:04.700] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:04.700] - Launch lazy future ...
[11:01:04.701] Packages needed by the future expression (n = 0): <none>
[11:01:04.701] Packages needed by future strategies (n = 0): <none>
[11:01:04.702] {
[11:01:04.702]     {
[11:01:04.702]         {
[11:01:04.702]             ...future.startTime <- base::Sys.time()
[11:01:04.702]             {
[11:01:04.702]                 {
[11:01:04.702]                   {
[11:01:04.702]                     {
[11:01:04.702]                       base::local({
[11:01:04.702]                         has_future <- base::requireNamespace("future", 
[11:01:04.702]                           quietly = TRUE)
[11:01:04.702]                         if (has_future) {
[11:01:04.702]                           ns <- base::getNamespace("future")
[11:01:04.702]                           version <- ns[[".package"]][["version"]]
[11:01:04.702]                           if (is.null(version)) 
[11:01:04.702]                             version <- utils::packageVersion("future")
[11:01:04.702]                         }
[11:01:04.702]                         else {
[11:01:04.702]                           version <- NULL
[11:01:04.702]                         }
[11:01:04.702]                         if (!has_future || version < "1.8.0") {
[11:01:04.702]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.702]                             "", base::R.version$version.string), 
[11:01:04.702]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:04.702]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.702]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.702]                               "release", "version")], collapse = " "), 
[11:01:04.702]                             hostname = base::Sys.info()[["nodename"]])
[11:01:04.702]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.702]                             info)
[11:01:04.702]                           info <- base::paste(info, collapse = "; ")
[11:01:04.702]                           if (!has_future) {
[11:01:04.702]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.702]                               info)
[11:01:04.702]                           }
[11:01:04.702]                           else {
[11:01:04.702]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.702]                               info, version)
[11:01:04.702]                           }
[11:01:04.702]                           base::stop(msg)
[11:01:04.702]                         }
[11:01:04.702]                       })
[11:01:04.702]                     }
[11:01:04.702]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:04.702]                     base::options(mc.cores = 1L)
[11:01:04.702]                   }
[11:01:04.702]                   ...future.strategy.old <- future::plan("list")
[11:01:04.702]                   options(future.plan = NULL)
[11:01:04.702]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.702]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.702]                 }
[11:01:04.702]                 ...future.workdir <- getwd()
[11:01:04.702]             }
[11:01:04.702]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.702]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.702]         }
[11:01:04.702]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.702]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.702]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.702]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.702]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.702]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.702]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.702]             base::names(...future.oldOptions))
[11:01:04.702]     }
[11:01:04.702]     if (FALSE) {
[11:01:04.702]     }
[11:01:04.702]     else {
[11:01:04.702]         if (TRUE) {
[11:01:04.702]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.702]                 open = "w")
[11:01:04.702]         }
[11:01:04.702]         else {
[11:01:04.702]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.702]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.702]         }
[11:01:04.702]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.702]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.702]             base::sink(type = "output", split = FALSE)
[11:01:04.702]             base::close(...future.stdout)
[11:01:04.702]         }, add = TRUE)
[11:01:04.702]     }
[11:01:04.702]     ...future.frame <- base::sys.nframe()
[11:01:04.702]     ...future.conditions <- base::list()
[11:01:04.702]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.702]     if (FALSE) {
[11:01:04.702]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.702]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.702]     }
[11:01:04.702]     ...future.result <- base::tryCatch({
[11:01:04.702]         base::withCallingHandlers({
[11:01:04.702]             ...future.value <- base::withVisible(base::local({
[11:01:04.702]                 withCallingHandlers({
[11:01:04.702]                   {
[11:01:04.702]                     do.call(function(...) {
[11:01:04.702]                       sum(x, ...)
[11:01:04.702]                     }, args = future.call.arguments)
[11:01:04.702]                   }
[11:01:04.702]                 }, immediateCondition = function(cond) {
[11:01:04.702]                   save_rds <- function (object, pathname, ...) 
[11:01:04.702]                   {
[11:01:04.702]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:04.702]                     if (file_test("-f", pathname_tmp)) {
[11:01:04.702]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.702]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:04.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.702]                         fi_tmp[["mtime"]])
[11:01:04.702]                     }
[11:01:04.702]                     tryCatch({
[11:01:04.702]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:04.702]                     }, error = function(ex) {
[11:01:04.702]                       msg <- conditionMessage(ex)
[11:01:04.702]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.702]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:04.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.702]                         fi_tmp[["mtime"]], msg)
[11:01:04.702]                       ex$message <- msg
[11:01:04.702]                       stop(ex)
[11:01:04.702]                     })
[11:01:04.702]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:04.702]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:04.702]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:04.702]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.702]                       fi <- file.info(pathname)
[11:01:04.702]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:04.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.702]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:04.702]                         fi[["size"]], fi[["mtime"]])
[11:01:04.702]                       stop(msg)
[11:01:04.702]                     }
[11:01:04.702]                     invisible(pathname)
[11:01:04.702]                   }
[11:01:04.702]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:04.702]                     rootPath = tempdir()) 
[11:01:04.702]                   {
[11:01:04.702]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:04.702]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:04.702]                       tmpdir = path, fileext = ".rds")
[11:01:04.702]                     save_rds(obj, file)
[11:01:04.702]                   }
[11:01:04.702]                   saveImmediateCondition(cond, path = "/tmp/RtmpAJ1ROR/.future/immediateConditions")
[11:01:04.702]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.702]                   {
[11:01:04.702]                     inherits <- base::inherits
[11:01:04.702]                     invokeRestart <- base::invokeRestart
[11:01:04.702]                     is.null <- base::is.null
[11:01:04.702]                     muffled <- FALSE
[11:01:04.702]                     if (inherits(cond, "message")) {
[11:01:04.702]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:04.702]                       if (muffled) 
[11:01:04.702]                         invokeRestart("muffleMessage")
[11:01:04.702]                     }
[11:01:04.702]                     else if (inherits(cond, "warning")) {
[11:01:04.702]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:04.702]                       if (muffled) 
[11:01:04.702]                         invokeRestart("muffleWarning")
[11:01:04.702]                     }
[11:01:04.702]                     else if (inherits(cond, "condition")) {
[11:01:04.702]                       if (!is.null(pattern)) {
[11:01:04.702]                         computeRestarts <- base::computeRestarts
[11:01:04.702]                         grepl <- base::grepl
[11:01:04.702]                         restarts <- computeRestarts(cond)
[11:01:04.702]                         for (restart in restarts) {
[11:01:04.702]                           name <- restart$name
[11:01:04.702]                           if (is.null(name)) 
[11:01:04.702]                             next
[11:01:04.702]                           if (!grepl(pattern, name)) 
[11:01:04.702]                             next
[11:01:04.702]                           invokeRestart(restart)
[11:01:04.702]                           muffled <- TRUE
[11:01:04.702]                           break
[11:01:04.702]                         }
[11:01:04.702]                       }
[11:01:04.702]                     }
[11:01:04.702]                     invisible(muffled)
[11:01:04.702]                   }
[11:01:04.702]                   muffleCondition(cond)
[11:01:04.702]                 })
[11:01:04.702]             }))
[11:01:04.702]             future::FutureResult(value = ...future.value$value, 
[11:01:04.702]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.702]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.702]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.702]                     ...future.globalenv.names))
[11:01:04.702]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.702]         }, condition = base::local({
[11:01:04.702]             c <- base::c
[11:01:04.702]             inherits <- base::inherits
[11:01:04.702]             invokeRestart <- base::invokeRestart
[11:01:04.702]             length <- base::length
[11:01:04.702]             list <- base::list
[11:01:04.702]             seq.int <- base::seq.int
[11:01:04.702]             signalCondition <- base::signalCondition
[11:01:04.702]             sys.calls <- base::sys.calls
[11:01:04.702]             `[[` <- base::`[[`
[11:01:04.702]             `+` <- base::`+`
[11:01:04.702]             `<<-` <- base::`<<-`
[11:01:04.702]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.702]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.702]                   3L)]
[11:01:04.702]             }
[11:01:04.702]             function(cond) {
[11:01:04.702]                 is_error <- inherits(cond, "error")
[11:01:04.702]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.702]                   NULL)
[11:01:04.702]                 if (is_error) {
[11:01:04.702]                   sessionInformation <- function() {
[11:01:04.702]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.702]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.702]                       search = base::search(), system = base::Sys.info())
[11:01:04.702]                   }
[11:01:04.702]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.702]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.702]                     cond$call), session = sessionInformation(), 
[11:01:04.702]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.702]                   signalCondition(cond)
[11:01:04.702]                 }
[11:01:04.702]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.702]                 "immediateCondition"))) {
[11:01:04.702]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.702]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.702]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.702]                   if (TRUE && !signal) {
[11:01:04.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.702]                     {
[11:01:04.702]                       inherits <- base::inherits
[11:01:04.702]                       invokeRestart <- base::invokeRestart
[11:01:04.702]                       is.null <- base::is.null
[11:01:04.702]                       muffled <- FALSE
[11:01:04.702]                       if (inherits(cond, "message")) {
[11:01:04.702]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.702]                         if (muffled) 
[11:01:04.702]                           invokeRestart("muffleMessage")
[11:01:04.702]                       }
[11:01:04.702]                       else if (inherits(cond, "warning")) {
[11:01:04.702]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.702]                         if (muffled) 
[11:01:04.702]                           invokeRestart("muffleWarning")
[11:01:04.702]                       }
[11:01:04.702]                       else if (inherits(cond, "condition")) {
[11:01:04.702]                         if (!is.null(pattern)) {
[11:01:04.702]                           computeRestarts <- base::computeRestarts
[11:01:04.702]                           grepl <- base::grepl
[11:01:04.702]                           restarts <- computeRestarts(cond)
[11:01:04.702]                           for (restart in restarts) {
[11:01:04.702]                             name <- restart$name
[11:01:04.702]                             if (is.null(name)) 
[11:01:04.702]                               next
[11:01:04.702]                             if (!grepl(pattern, name)) 
[11:01:04.702]                               next
[11:01:04.702]                             invokeRestart(restart)
[11:01:04.702]                             muffled <- TRUE
[11:01:04.702]                             break
[11:01:04.702]                           }
[11:01:04.702]                         }
[11:01:04.702]                       }
[11:01:04.702]                       invisible(muffled)
[11:01:04.702]                     }
[11:01:04.702]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.702]                   }
[11:01:04.702]                 }
[11:01:04.702]                 else {
[11:01:04.702]                   if (TRUE) {
[11:01:04.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.702]                     {
[11:01:04.702]                       inherits <- base::inherits
[11:01:04.702]                       invokeRestart <- base::invokeRestart
[11:01:04.702]                       is.null <- base::is.null
[11:01:04.702]                       muffled <- FALSE
[11:01:04.702]                       if (inherits(cond, "message")) {
[11:01:04.702]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.702]                         if (muffled) 
[11:01:04.702]                           invokeRestart("muffleMessage")
[11:01:04.702]                       }
[11:01:04.702]                       else if (inherits(cond, "warning")) {
[11:01:04.702]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.702]                         if (muffled) 
[11:01:04.702]                           invokeRestart("muffleWarning")
[11:01:04.702]                       }
[11:01:04.702]                       else if (inherits(cond, "condition")) {
[11:01:04.702]                         if (!is.null(pattern)) {
[11:01:04.702]                           computeRestarts <- base::computeRestarts
[11:01:04.702]                           grepl <- base::grepl
[11:01:04.702]                           restarts <- computeRestarts(cond)
[11:01:04.702]                           for (restart in restarts) {
[11:01:04.702]                             name <- restart$name
[11:01:04.702]                             if (is.null(name)) 
[11:01:04.702]                               next
[11:01:04.702]                             if (!grepl(pattern, name)) 
[11:01:04.702]                               next
[11:01:04.702]                             invokeRestart(restart)
[11:01:04.702]                             muffled <- TRUE
[11:01:04.702]                             break
[11:01:04.702]                           }
[11:01:04.702]                         }
[11:01:04.702]                       }
[11:01:04.702]                       invisible(muffled)
[11:01:04.702]                     }
[11:01:04.702]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.702]                   }
[11:01:04.702]                 }
[11:01:04.702]             }
[11:01:04.702]         }))
[11:01:04.702]     }, error = function(ex) {
[11:01:04.702]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.702]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.702]                 ...future.rng), started = ...future.startTime, 
[11:01:04.702]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.702]             version = "1.8"), class = "FutureResult")
[11:01:04.702]     }, finally = {
[11:01:04.702]         if (!identical(...future.workdir, getwd())) 
[11:01:04.702]             setwd(...future.workdir)
[11:01:04.702]         {
[11:01:04.702]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.702]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.702]             }
[11:01:04.702]             base::options(...future.oldOptions)
[11:01:04.702]             if (.Platform$OS.type == "windows") {
[11:01:04.702]                 old_names <- names(...future.oldEnvVars)
[11:01:04.702]                 envs <- base::Sys.getenv()
[11:01:04.702]                 names <- names(envs)
[11:01:04.702]                 common <- intersect(names, old_names)
[11:01:04.702]                 added <- setdiff(names, old_names)
[11:01:04.702]                 removed <- setdiff(old_names, names)
[11:01:04.702]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.702]                   envs[common]]
[11:01:04.702]                 NAMES <- toupper(changed)
[11:01:04.702]                 args <- list()
[11:01:04.702]                 for (kk in seq_along(NAMES)) {
[11:01:04.702]                   name <- changed[[kk]]
[11:01:04.702]                   NAME <- NAMES[[kk]]
[11:01:04.702]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.702]                     next
[11:01:04.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.702]                 }
[11:01:04.702]                 NAMES <- toupper(added)
[11:01:04.702]                 for (kk in seq_along(NAMES)) {
[11:01:04.702]                   name <- added[[kk]]
[11:01:04.702]                   NAME <- NAMES[[kk]]
[11:01:04.702]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.702]                     next
[11:01:04.702]                   args[[name]] <- ""
[11:01:04.702]                 }
[11:01:04.702]                 NAMES <- toupper(removed)
[11:01:04.702]                 for (kk in seq_along(NAMES)) {
[11:01:04.702]                   name <- removed[[kk]]
[11:01:04.702]                   NAME <- NAMES[[kk]]
[11:01:04.702]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.702]                     next
[11:01:04.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.702]                 }
[11:01:04.702]                 if (length(args) > 0) 
[11:01:04.702]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.702]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.702]             }
[11:01:04.702]             else {
[11:01:04.702]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.702]             }
[11:01:04.702]             {
[11:01:04.702]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.702]                   0L) {
[11:01:04.702]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.702]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.702]                   base::options(opts)
[11:01:04.702]                 }
[11:01:04.702]                 {
[11:01:04.702]                   {
[11:01:04.702]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:04.702]                     NULL
[11:01:04.702]                   }
[11:01:04.702]                   options(future.plan = NULL)
[11:01:04.702]                   if (is.na(NA_character_)) 
[11:01:04.702]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.702]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.702]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.702]                     .init = FALSE)
[11:01:04.702]                 }
[11:01:04.702]             }
[11:01:04.702]         }
[11:01:04.702]     })
[11:01:04.702]     if (TRUE) {
[11:01:04.702]         base::sink(type = "output", split = FALSE)
[11:01:04.702]         if (TRUE) {
[11:01:04.702]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.702]         }
[11:01:04.702]         else {
[11:01:04.702]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.702]         }
[11:01:04.702]         base::close(...future.stdout)
[11:01:04.702]         ...future.stdout <- NULL
[11:01:04.702]     }
[11:01:04.702]     ...future.result$conditions <- ...future.conditions
[11:01:04.702]     ...future.result$finished <- base::Sys.time()
[11:01:04.702]     ...future.result
[11:01:04.702] }
[11:01:04.705] assign_globals() ...
[11:01:04.705] List of 2
[11:01:04.705]  $ x                    : int [1:2] 1 2
[11:01:04.705]  $ future.call.arguments:List of 1
[11:01:04.705]   ..$ : num 3
[11:01:04.705]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[11:01:04.705]  - attr(*, "where")=List of 2
[11:01:04.705]   ..$ x                    :<environment: R_EmptyEnv> 
[11:01:04.705]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[11:01:04.705]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.705]  - attr(*, "resolved")= logi FALSE
[11:01:04.705]  - attr(*, "total_size")= num 246
[11:01:04.705]  - attr(*, "already-done")= logi TRUE
[11:01:04.708] - copied ‘x’ to environment
[11:01:04.708] - copied ‘future.call.arguments’ to environment
[11:01:04.708] assign_globals() ... done
[11:01:04.708] requestCore(): workers = 2
[11:01:04.711] MulticoreFuture started
[11:01:04.712] - Launch lazy future ... done
[11:01:04.712] plan(): Setting new future strategy stack:
[11:01:04.712] run() for ‘MulticoreFuture’ ... done
[11:01:04.712] List of future strategies:
[11:01:04.712] 1. sequential:
[11:01:04.712]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.712]    - tweaked: FALSE
[11:01:04.712]    - call: NULL
[11:01:04.713] result() for MulticoreFuture ...
[11:01:04.713] plan(): nbrOfWorkers() = 1
[11:01:04.715] plan(): Setting new future strategy stack:
[11:01:04.715] List of future strategies:
[11:01:04.715] 1. multicore:
[11:01:04.715]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:04.715]    - tweaked: FALSE
[11:01:04.715]    - call: plan(strategy, substitute = FALSE)
[11:01:04.718] plan(): nbrOfWorkers() = 2
[11:01:04.722] result() for MulticoreFuture ...
[11:01:04.723] result() for MulticoreFuture ... done
[11:01:04.723] result() for MulticoreFuture ... done
[11:01:04.723] result() for MulticoreFuture ...
[11:01:04.723] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x55b7e3d9fa20>
Arguments '...' exists: TRUE
[11:01:04.724] getGlobalsAndPackages() ...
[11:01:04.724] Searching for globals...
[11:01:04.726] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[11:01:04.726] Searching for globals ... DONE
[11:01:04.726] Resolving globals: FALSE
[11:01:04.726] Tweak future expression to call with '...' arguments ...
[11:01:04.726] {
[11:01:04.726]     do.call(function(...) {
[11:01:04.726]         sum(x, ...)
[11:01:04.726]     }, args = future.call.arguments)
[11:01:04.726] }
[11:01:04.726] Tweak future expression to call with '...' arguments ... DONE
[11:01:04.727] The total size of the 2 globals is 246 bytes (246 bytes)
[11:01:04.727] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 246 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘future.call.arguments’ (113 bytes of class ‘list’)
[11:01:04.727] - globals: [2] ‘x’, ‘future.call.arguments’
[11:01:04.728] 
[11:01:04.728] getGlobalsAndPackages() ... DONE
[11:01:04.728] run() for ‘Future’ ...
[11:01:04.728] - state: ‘created’
[11:01:04.728] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:04.730] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:04.730] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:04.730]   - Field: ‘label’
[11:01:04.731]   - Field: ‘local’
[11:01:04.731]   - Field: ‘owner’
[11:01:04.731]   - Field: ‘envir’
[11:01:04.731]   - Field: ‘workers’
[11:01:04.731]   - Field: ‘packages’
[11:01:04.731]   - Field: ‘gc’
[11:01:04.731]   - Field: ‘job’
[11:01:04.731]   - Field: ‘conditions’
[11:01:04.731]   - Field: ‘expr’
[11:01:04.731]   - Field: ‘uuid’
[11:01:04.732]   - Field: ‘seed’
[11:01:04.732]   - Field: ‘version’
[11:01:04.732]   - Field: ‘result’
[11:01:04.732]   - Field: ‘asynchronous’
[11:01:04.732]   - Field: ‘calls’
[11:01:04.732]   - Field: ‘globals’
[11:01:04.732]   - Field: ‘stdout’
[11:01:04.732]   - Field: ‘earlySignal’
[11:01:04.732]   - Field: ‘lazy’
[11:01:04.733]   - Field: ‘state’
[11:01:04.733] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:04.733] - Launch lazy future ...
[11:01:04.733] Packages needed by the future expression (n = 0): <none>
[11:01:04.733] Packages needed by future strategies (n = 0): <none>
[11:01:04.734] {
[11:01:04.734]     {
[11:01:04.734]         {
[11:01:04.734]             ...future.startTime <- base::Sys.time()
[11:01:04.734]             {
[11:01:04.734]                 {
[11:01:04.734]                   {
[11:01:04.734]                     {
[11:01:04.734]                       base::local({
[11:01:04.734]                         has_future <- base::requireNamespace("future", 
[11:01:04.734]                           quietly = TRUE)
[11:01:04.734]                         if (has_future) {
[11:01:04.734]                           ns <- base::getNamespace("future")
[11:01:04.734]                           version <- ns[[".package"]][["version"]]
[11:01:04.734]                           if (is.null(version)) 
[11:01:04.734]                             version <- utils::packageVersion("future")
[11:01:04.734]                         }
[11:01:04.734]                         else {
[11:01:04.734]                           version <- NULL
[11:01:04.734]                         }
[11:01:04.734]                         if (!has_future || version < "1.8.0") {
[11:01:04.734]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.734]                             "", base::R.version$version.string), 
[11:01:04.734]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:04.734]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.734]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.734]                               "release", "version")], collapse = " "), 
[11:01:04.734]                             hostname = base::Sys.info()[["nodename"]])
[11:01:04.734]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.734]                             info)
[11:01:04.734]                           info <- base::paste(info, collapse = "; ")
[11:01:04.734]                           if (!has_future) {
[11:01:04.734]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.734]                               info)
[11:01:04.734]                           }
[11:01:04.734]                           else {
[11:01:04.734]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.734]                               info, version)
[11:01:04.734]                           }
[11:01:04.734]                           base::stop(msg)
[11:01:04.734]                         }
[11:01:04.734]                       })
[11:01:04.734]                     }
[11:01:04.734]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:04.734]                     base::options(mc.cores = 1L)
[11:01:04.734]                   }
[11:01:04.734]                   ...future.strategy.old <- future::plan("list")
[11:01:04.734]                   options(future.plan = NULL)
[11:01:04.734]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.734]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.734]                 }
[11:01:04.734]                 ...future.workdir <- getwd()
[11:01:04.734]             }
[11:01:04.734]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.734]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.734]         }
[11:01:04.734]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.734]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.734]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.734]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.734]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.734]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.734]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.734]             base::names(...future.oldOptions))
[11:01:04.734]     }
[11:01:04.734]     if (FALSE) {
[11:01:04.734]     }
[11:01:04.734]     else {
[11:01:04.734]         if (TRUE) {
[11:01:04.734]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.734]                 open = "w")
[11:01:04.734]         }
[11:01:04.734]         else {
[11:01:04.734]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.734]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.734]         }
[11:01:04.734]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.734]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.734]             base::sink(type = "output", split = FALSE)
[11:01:04.734]             base::close(...future.stdout)
[11:01:04.734]         }, add = TRUE)
[11:01:04.734]     }
[11:01:04.734]     ...future.frame <- base::sys.nframe()
[11:01:04.734]     ...future.conditions <- base::list()
[11:01:04.734]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.734]     if (FALSE) {
[11:01:04.734]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.734]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.734]     }
[11:01:04.734]     ...future.result <- base::tryCatch({
[11:01:04.734]         base::withCallingHandlers({
[11:01:04.734]             ...future.value <- base::withVisible(base::local({
[11:01:04.734]                 withCallingHandlers({
[11:01:04.734]                   {
[11:01:04.734]                     do.call(function(...) {
[11:01:04.734]                       sum(x, ...)
[11:01:04.734]                     }, args = future.call.arguments)
[11:01:04.734]                   }
[11:01:04.734]                 }, immediateCondition = function(cond) {
[11:01:04.734]                   save_rds <- function (object, pathname, ...) 
[11:01:04.734]                   {
[11:01:04.734]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:04.734]                     if (file_test("-f", pathname_tmp)) {
[11:01:04.734]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.734]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:04.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.734]                         fi_tmp[["mtime"]])
[11:01:04.734]                     }
[11:01:04.734]                     tryCatch({
[11:01:04.734]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:04.734]                     }, error = function(ex) {
[11:01:04.734]                       msg <- conditionMessage(ex)
[11:01:04.734]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.734]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:04.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.734]                         fi_tmp[["mtime"]], msg)
[11:01:04.734]                       ex$message <- msg
[11:01:04.734]                       stop(ex)
[11:01:04.734]                     })
[11:01:04.734]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:04.734]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:04.734]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:04.734]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.734]                       fi <- file.info(pathname)
[11:01:04.734]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:04.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.734]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:04.734]                         fi[["size"]], fi[["mtime"]])
[11:01:04.734]                       stop(msg)
[11:01:04.734]                     }
[11:01:04.734]                     invisible(pathname)
[11:01:04.734]                   }
[11:01:04.734]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:04.734]                     rootPath = tempdir()) 
[11:01:04.734]                   {
[11:01:04.734]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:04.734]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:04.734]                       tmpdir = path, fileext = ".rds")
[11:01:04.734]                     save_rds(obj, file)
[11:01:04.734]                   }
[11:01:04.734]                   saveImmediateCondition(cond, path = "/tmp/RtmpAJ1ROR/.future/immediateConditions")
[11:01:04.734]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.734]                   {
[11:01:04.734]                     inherits <- base::inherits
[11:01:04.734]                     invokeRestart <- base::invokeRestart
[11:01:04.734]                     is.null <- base::is.null
[11:01:04.734]                     muffled <- FALSE
[11:01:04.734]                     if (inherits(cond, "message")) {
[11:01:04.734]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:04.734]                       if (muffled) 
[11:01:04.734]                         invokeRestart("muffleMessage")
[11:01:04.734]                     }
[11:01:04.734]                     else if (inherits(cond, "warning")) {
[11:01:04.734]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:04.734]                       if (muffled) 
[11:01:04.734]                         invokeRestart("muffleWarning")
[11:01:04.734]                     }
[11:01:04.734]                     else if (inherits(cond, "condition")) {
[11:01:04.734]                       if (!is.null(pattern)) {
[11:01:04.734]                         computeRestarts <- base::computeRestarts
[11:01:04.734]                         grepl <- base::grepl
[11:01:04.734]                         restarts <- computeRestarts(cond)
[11:01:04.734]                         for (restart in restarts) {
[11:01:04.734]                           name <- restart$name
[11:01:04.734]                           if (is.null(name)) 
[11:01:04.734]                             next
[11:01:04.734]                           if (!grepl(pattern, name)) 
[11:01:04.734]                             next
[11:01:04.734]                           invokeRestart(restart)
[11:01:04.734]                           muffled <- TRUE
[11:01:04.734]                           break
[11:01:04.734]                         }
[11:01:04.734]                       }
[11:01:04.734]                     }
[11:01:04.734]                     invisible(muffled)
[11:01:04.734]                   }
[11:01:04.734]                   muffleCondition(cond)
[11:01:04.734]                 })
[11:01:04.734]             }))
[11:01:04.734]             future::FutureResult(value = ...future.value$value, 
[11:01:04.734]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.734]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.734]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.734]                     ...future.globalenv.names))
[11:01:04.734]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.734]         }, condition = base::local({
[11:01:04.734]             c <- base::c
[11:01:04.734]             inherits <- base::inherits
[11:01:04.734]             invokeRestart <- base::invokeRestart
[11:01:04.734]             length <- base::length
[11:01:04.734]             list <- base::list
[11:01:04.734]             seq.int <- base::seq.int
[11:01:04.734]             signalCondition <- base::signalCondition
[11:01:04.734]             sys.calls <- base::sys.calls
[11:01:04.734]             `[[` <- base::`[[`
[11:01:04.734]             `+` <- base::`+`
[11:01:04.734]             `<<-` <- base::`<<-`
[11:01:04.734]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.734]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.734]                   3L)]
[11:01:04.734]             }
[11:01:04.734]             function(cond) {
[11:01:04.734]                 is_error <- inherits(cond, "error")
[11:01:04.734]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.734]                   NULL)
[11:01:04.734]                 if (is_error) {
[11:01:04.734]                   sessionInformation <- function() {
[11:01:04.734]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.734]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.734]                       search = base::search(), system = base::Sys.info())
[11:01:04.734]                   }
[11:01:04.734]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.734]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.734]                     cond$call), session = sessionInformation(), 
[11:01:04.734]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.734]                   signalCondition(cond)
[11:01:04.734]                 }
[11:01:04.734]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.734]                 "immediateCondition"))) {
[11:01:04.734]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.734]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.734]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.734]                   if (TRUE && !signal) {
[11:01:04.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.734]                     {
[11:01:04.734]                       inherits <- base::inherits
[11:01:04.734]                       invokeRestart <- base::invokeRestart
[11:01:04.734]                       is.null <- base::is.null
[11:01:04.734]                       muffled <- FALSE
[11:01:04.734]                       if (inherits(cond, "message")) {
[11:01:04.734]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.734]                         if (muffled) 
[11:01:04.734]                           invokeRestart("muffleMessage")
[11:01:04.734]                       }
[11:01:04.734]                       else if (inherits(cond, "warning")) {
[11:01:04.734]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.734]                         if (muffled) 
[11:01:04.734]                           invokeRestart("muffleWarning")
[11:01:04.734]                       }
[11:01:04.734]                       else if (inherits(cond, "condition")) {
[11:01:04.734]                         if (!is.null(pattern)) {
[11:01:04.734]                           computeRestarts <- base::computeRestarts
[11:01:04.734]                           grepl <- base::grepl
[11:01:04.734]                           restarts <- computeRestarts(cond)
[11:01:04.734]                           for (restart in restarts) {
[11:01:04.734]                             name <- restart$name
[11:01:04.734]                             if (is.null(name)) 
[11:01:04.734]                               next
[11:01:04.734]                             if (!grepl(pattern, name)) 
[11:01:04.734]                               next
[11:01:04.734]                             invokeRestart(restart)
[11:01:04.734]                             muffled <- TRUE
[11:01:04.734]                             break
[11:01:04.734]                           }
[11:01:04.734]                         }
[11:01:04.734]                       }
[11:01:04.734]                       invisible(muffled)
[11:01:04.734]                     }
[11:01:04.734]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.734]                   }
[11:01:04.734]                 }
[11:01:04.734]                 else {
[11:01:04.734]                   if (TRUE) {
[11:01:04.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.734]                     {
[11:01:04.734]                       inherits <- base::inherits
[11:01:04.734]                       invokeRestart <- base::invokeRestart
[11:01:04.734]                       is.null <- base::is.null
[11:01:04.734]                       muffled <- FALSE
[11:01:04.734]                       if (inherits(cond, "message")) {
[11:01:04.734]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.734]                         if (muffled) 
[11:01:04.734]                           invokeRestart("muffleMessage")
[11:01:04.734]                       }
[11:01:04.734]                       else if (inherits(cond, "warning")) {
[11:01:04.734]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.734]                         if (muffled) 
[11:01:04.734]                           invokeRestart("muffleWarning")
[11:01:04.734]                       }
[11:01:04.734]                       else if (inherits(cond, "condition")) {
[11:01:04.734]                         if (!is.null(pattern)) {
[11:01:04.734]                           computeRestarts <- base::computeRestarts
[11:01:04.734]                           grepl <- base::grepl
[11:01:04.734]                           restarts <- computeRestarts(cond)
[11:01:04.734]                           for (restart in restarts) {
[11:01:04.734]                             name <- restart$name
[11:01:04.734]                             if (is.null(name)) 
[11:01:04.734]                               next
[11:01:04.734]                             if (!grepl(pattern, name)) 
[11:01:04.734]                               next
[11:01:04.734]                             invokeRestart(restart)
[11:01:04.734]                             muffled <- TRUE
[11:01:04.734]                             break
[11:01:04.734]                           }
[11:01:04.734]                         }
[11:01:04.734]                       }
[11:01:04.734]                       invisible(muffled)
[11:01:04.734]                     }
[11:01:04.734]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.734]                   }
[11:01:04.734]                 }
[11:01:04.734]             }
[11:01:04.734]         }))
[11:01:04.734]     }, error = function(ex) {
[11:01:04.734]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.734]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.734]                 ...future.rng), started = ...future.startTime, 
[11:01:04.734]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.734]             version = "1.8"), class = "FutureResult")
[11:01:04.734]     }, finally = {
[11:01:04.734]         if (!identical(...future.workdir, getwd())) 
[11:01:04.734]             setwd(...future.workdir)
[11:01:04.734]         {
[11:01:04.734]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.734]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.734]             }
[11:01:04.734]             base::options(...future.oldOptions)
[11:01:04.734]             if (.Platform$OS.type == "windows") {
[11:01:04.734]                 old_names <- names(...future.oldEnvVars)
[11:01:04.734]                 envs <- base::Sys.getenv()
[11:01:04.734]                 names <- names(envs)
[11:01:04.734]                 common <- intersect(names, old_names)
[11:01:04.734]                 added <- setdiff(names, old_names)
[11:01:04.734]                 removed <- setdiff(old_names, names)
[11:01:04.734]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.734]                   envs[common]]
[11:01:04.734]                 NAMES <- toupper(changed)
[11:01:04.734]                 args <- list()
[11:01:04.734]                 for (kk in seq_along(NAMES)) {
[11:01:04.734]                   name <- changed[[kk]]
[11:01:04.734]                   NAME <- NAMES[[kk]]
[11:01:04.734]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.734]                     next
[11:01:04.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.734]                 }
[11:01:04.734]                 NAMES <- toupper(added)
[11:01:04.734]                 for (kk in seq_along(NAMES)) {
[11:01:04.734]                   name <- added[[kk]]
[11:01:04.734]                   NAME <- NAMES[[kk]]
[11:01:04.734]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.734]                     next
[11:01:04.734]                   args[[name]] <- ""
[11:01:04.734]                 }
[11:01:04.734]                 NAMES <- toupper(removed)
[11:01:04.734]                 for (kk in seq_along(NAMES)) {
[11:01:04.734]                   name <- removed[[kk]]
[11:01:04.734]                   NAME <- NAMES[[kk]]
[11:01:04.734]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.734]                     next
[11:01:04.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.734]                 }
[11:01:04.734]                 if (length(args) > 0) 
[11:01:04.734]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.734]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.734]             }
[11:01:04.734]             else {
[11:01:04.734]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.734]             }
[11:01:04.734]             {
[11:01:04.734]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.734]                   0L) {
[11:01:04.734]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.734]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.734]                   base::options(opts)
[11:01:04.734]                 }
[11:01:04.734]                 {
[11:01:04.734]                   {
[11:01:04.734]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:04.734]                     NULL
[11:01:04.734]                   }
[11:01:04.734]                   options(future.plan = NULL)
[11:01:04.734]                   if (is.na(NA_character_)) 
[11:01:04.734]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.734]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.734]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.734]                     .init = FALSE)
[11:01:04.734]                 }
[11:01:04.734]             }
[11:01:04.734]         }
[11:01:04.734]     })
[11:01:04.734]     if (TRUE) {
[11:01:04.734]         base::sink(type = "output", split = FALSE)
[11:01:04.734]         if (TRUE) {
[11:01:04.734]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.734]         }
[11:01:04.734]         else {
[11:01:04.734]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.734]         }
[11:01:04.734]         base::close(...future.stdout)
[11:01:04.734]         ...future.stdout <- NULL
[11:01:04.734]     }
[11:01:04.734]     ...future.result$conditions <- ...future.conditions
[11:01:04.734]     ...future.result$finished <- base::Sys.time()
[11:01:04.734]     ...future.result
[11:01:04.734] }
[11:01:04.736] assign_globals() ...
[11:01:04.736] List of 2
[11:01:04.736]  $ x                    : int [1:2] 1 2
[11:01:04.736]  $ future.call.arguments:List of 1
[11:01:04.736]   ..$ : num 3
[11:01:04.736]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[11:01:04.736]  - attr(*, "where")=List of 2
[11:01:04.736]   ..$ x                    :<environment: R_EmptyEnv> 
[11:01:04.736]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[11:01:04.736]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.736]  - attr(*, "resolved")= logi FALSE
[11:01:04.736]  - attr(*, "total_size")= num 246
[11:01:04.736]  - attr(*, "already-done")= logi TRUE
[11:01:04.740] - copied ‘x’ to environment
[11:01:04.740] - copied ‘future.call.arguments’ to environment
[11:01:04.741] assign_globals() ... done
[11:01:04.741] requestCore(): workers = 2
[11:01:04.742] MulticoreFuture started
[11:01:04.743] - Launch lazy future ... done
[11:01:04.743] run() for ‘MulticoreFuture’ ... done
[11:01:04.743] result() for MulticoreFuture ...
[11:01:04.743] plan(): Setting new future strategy stack:
[11:01:04.744] List of future strategies:
[11:01:04.744] 1. sequential:
[11:01:04.744]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.744]    - tweaked: FALSE
[11:01:04.744]    - call: NULL
[11:01:04.745] plan(): nbrOfWorkers() = 1
[11:01:04.746] plan(): Setting new future strategy stack:
[11:01:04.746] List of future strategies:
[11:01:04.746] 1. multicore:
[11:01:04.746]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:04.746]    - tweaked: FALSE
[11:01:04.746]    - call: plan(strategy, substitute = FALSE)
[11:01:04.753] plan(): nbrOfWorkers() = 2
[11:01:04.754] result() for MulticoreFuture ...
[11:01:04.754] result() for MulticoreFuture ... done
[11:01:04.755] result() for MulticoreFuture ... done
[11:01:04.755] result() for MulticoreFuture ...
[11:01:04.755] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55b7e3f45960>
Arguments '...' exists: FALSE
[11:01:04.756] getGlobalsAndPackages() ...
[11:01:04.756] Searching for globals...
[11:01:04.760] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[11:01:04.760] Searching for globals ... DONE
[11:01:04.760] Resolving globals: FALSE
[11:01:04.760] The total size of the 2 globals is 172 bytes (172 bytes)
[11:01:04.761] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 172 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:04.761] - globals: [2] ‘x’, ‘y’
[11:01:04.761] 
[11:01:04.761] getGlobalsAndPackages() ... DONE
[11:01:04.762] run() for ‘Future’ ...
[11:01:04.762] - state: ‘created’
[11:01:04.762] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:04.764] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:04.764] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:04.764]   - Field: ‘label’
[11:01:04.764]   - Field: ‘local’
[11:01:04.765]   - Field: ‘owner’
[11:01:04.765]   - Field: ‘envir’
[11:01:04.765]   - Field: ‘workers’
[11:01:04.765]   - Field: ‘packages’
[11:01:04.765]   - Field: ‘gc’
[11:01:04.765]   - Field: ‘job’
[11:01:04.765]   - Field: ‘conditions’
[11:01:04.765]   - Field: ‘expr’
[11:01:04.765]   - Field: ‘uuid’
[11:01:04.766]   - Field: ‘seed’
[11:01:04.766]   - Field: ‘version’
[11:01:04.766]   - Field: ‘result’
[11:01:04.766]   - Field: ‘asynchronous’
[11:01:04.766]   - Field: ‘calls’
[11:01:04.766]   - Field: ‘globals’
[11:01:04.766]   - Field: ‘stdout’
[11:01:04.766]   - Field: ‘earlySignal’
[11:01:04.766]   - Field: ‘lazy’
[11:01:04.766]   - Field: ‘state’
[11:01:04.767] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:04.767] - Launch lazy future ...
[11:01:04.767] Packages needed by the future expression (n = 0): <none>
[11:01:04.767] Packages needed by future strategies (n = 0): <none>
[11:01:04.768] {
[11:01:04.768]     {
[11:01:04.768]         {
[11:01:04.768]             ...future.startTime <- base::Sys.time()
[11:01:04.768]             {
[11:01:04.768]                 {
[11:01:04.768]                   {
[11:01:04.768]                     {
[11:01:04.768]                       base::local({
[11:01:04.768]                         has_future <- base::requireNamespace("future", 
[11:01:04.768]                           quietly = TRUE)
[11:01:04.768]                         if (has_future) {
[11:01:04.768]                           ns <- base::getNamespace("future")
[11:01:04.768]                           version <- ns[[".package"]][["version"]]
[11:01:04.768]                           if (is.null(version)) 
[11:01:04.768]                             version <- utils::packageVersion("future")
[11:01:04.768]                         }
[11:01:04.768]                         else {
[11:01:04.768]                           version <- NULL
[11:01:04.768]                         }
[11:01:04.768]                         if (!has_future || version < "1.8.0") {
[11:01:04.768]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.768]                             "", base::R.version$version.string), 
[11:01:04.768]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:04.768]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.768]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.768]                               "release", "version")], collapse = " "), 
[11:01:04.768]                             hostname = base::Sys.info()[["nodename"]])
[11:01:04.768]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.768]                             info)
[11:01:04.768]                           info <- base::paste(info, collapse = "; ")
[11:01:04.768]                           if (!has_future) {
[11:01:04.768]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.768]                               info)
[11:01:04.768]                           }
[11:01:04.768]                           else {
[11:01:04.768]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.768]                               info, version)
[11:01:04.768]                           }
[11:01:04.768]                           base::stop(msg)
[11:01:04.768]                         }
[11:01:04.768]                       })
[11:01:04.768]                     }
[11:01:04.768]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:04.768]                     base::options(mc.cores = 1L)
[11:01:04.768]                   }
[11:01:04.768]                   ...future.strategy.old <- future::plan("list")
[11:01:04.768]                   options(future.plan = NULL)
[11:01:04.768]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.768]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.768]                 }
[11:01:04.768]                 ...future.workdir <- getwd()
[11:01:04.768]             }
[11:01:04.768]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.768]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.768]         }
[11:01:04.768]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.768]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.768]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.768]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.768]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.768]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.768]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.768]             base::names(...future.oldOptions))
[11:01:04.768]     }
[11:01:04.768]     if (FALSE) {
[11:01:04.768]     }
[11:01:04.768]     else {
[11:01:04.768]         if (TRUE) {
[11:01:04.768]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.768]                 open = "w")
[11:01:04.768]         }
[11:01:04.768]         else {
[11:01:04.768]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.768]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.768]         }
[11:01:04.768]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.768]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.768]             base::sink(type = "output", split = FALSE)
[11:01:04.768]             base::close(...future.stdout)
[11:01:04.768]         }, add = TRUE)
[11:01:04.768]     }
[11:01:04.768]     ...future.frame <- base::sys.nframe()
[11:01:04.768]     ...future.conditions <- base::list()
[11:01:04.768]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.768]     if (FALSE) {
[11:01:04.768]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.768]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.768]     }
[11:01:04.768]     ...future.result <- base::tryCatch({
[11:01:04.768]         base::withCallingHandlers({
[11:01:04.768]             ...future.value <- base::withVisible(base::local({
[11:01:04.768]                 withCallingHandlers({
[11:01:04.768]                   {
[11:01:04.768]                     sum(x, y)
[11:01:04.768]                   }
[11:01:04.768]                 }, immediateCondition = function(cond) {
[11:01:04.768]                   save_rds <- function (object, pathname, ...) 
[11:01:04.768]                   {
[11:01:04.768]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:04.768]                     if (file_test("-f", pathname_tmp)) {
[11:01:04.768]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.768]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:04.768]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.768]                         fi_tmp[["mtime"]])
[11:01:04.768]                     }
[11:01:04.768]                     tryCatch({
[11:01:04.768]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:04.768]                     }, error = function(ex) {
[11:01:04.768]                       msg <- conditionMessage(ex)
[11:01:04.768]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.768]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:04.768]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.768]                         fi_tmp[["mtime"]], msg)
[11:01:04.768]                       ex$message <- msg
[11:01:04.768]                       stop(ex)
[11:01:04.768]                     })
[11:01:04.768]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:04.768]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:04.768]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:04.768]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.768]                       fi <- file.info(pathname)
[11:01:04.768]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:04.768]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.768]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:04.768]                         fi[["size"]], fi[["mtime"]])
[11:01:04.768]                       stop(msg)
[11:01:04.768]                     }
[11:01:04.768]                     invisible(pathname)
[11:01:04.768]                   }
[11:01:04.768]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:04.768]                     rootPath = tempdir()) 
[11:01:04.768]                   {
[11:01:04.768]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:04.768]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:04.768]                       tmpdir = path, fileext = ".rds")
[11:01:04.768]                     save_rds(obj, file)
[11:01:04.768]                   }
[11:01:04.768]                   saveImmediateCondition(cond, path = "/tmp/RtmpAJ1ROR/.future/immediateConditions")
[11:01:04.768]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.768]                   {
[11:01:04.768]                     inherits <- base::inherits
[11:01:04.768]                     invokeRestart <- base::invokeRestart
[11:01:04.768]                     is.null <- base::is.null
[11:01:04.768]                     muffled <- FALSE
[11:01:04.768]                     if (inherits(cond, "message")) {
[11:01:04.768]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:04.768]                       if (muffled) 
[11:01:04.768]                         invokeRestart("muffleMessage")
[11:01:04.768]                     }
[11:01:04.768]                     else if (inherits(cond, "warning")) {
[11:01:04.768]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:04.768]                       if (muffled) 
[11:01:04.768]                         invokeRestart("muffleWarning")
[11:01:04.768]                     }
[11:01:04.768]                     else if (inherits(cond, "condition")) {
[11:01:04.768]                       if (!is.null(pattern)) {
[11:01:04.768]                         computeRestarts <- base::computeRestarts
[11:01:04.768]                         grepl <- base::grepl
[11:01:04.768]                         restarts <- computeRestarts(cond)
[11:01:04.768]                         for (restart in restarts) {
[11:01:04.768]                           name <- restart$name
[11:01:04.768]                           if (is.null(name)) 
[11:01:04.768]                             next
[11:01:04.768]                           if (!grepl(pattern, name)) 
[11:01:04.768]                             next
[11:01:04.768]                           invokeRestart(restart)
[11:01:04.768]                           muffled <- TRUE
[11:01:04.768]                           break
[11:01:04.768]                         }
[11:01:04.768]                       }
[11:01:04.768]                     }
[11:01:04.768]                     invisible(muffled)
[11:01:04.768]                   }
[11:01:04.768]                   muffleCondition(cond)
[11:01:04.768]                 })
[11:01:04.768]             }))
[11:01:04.768]             future::FutureResult(value = ...future.value$value, 
[11:01:04.768]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.768]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.768]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.768]                     ...future.globalenv.names))
[11:01:04.768]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.768]         }, condition = base::local({
[11:01:04.768]             c <- base::c
[11:01:04.768]             inherits <- base::inherits
[11:01:04.768]             invokeRestart <- base::invokeRestart
[11:01:04.768]             length <- base::length
[11:01:04.768]             list <- base::list
[11:01:04.768]             seq.int <- base::seq.int
[11:01:04.768]             signalCondition <- base::signalCondition
[11:01:04.768]             sys.calls <- base::sys.calls
[11:01:04.768]             `[[` <- base::`[[`
[11:01:04.768]             `+` <- base::`+`
[11:01:04.768]             `<<-` <- base::`<<-`
[11:01:04.768]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.768]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.768]                   3L)]
[11:01:04.768]             }
[11:01:04.768]             function(cond) {
[11:01:04.768]                 is_error <- inherits(cond, "error")
[11:01:04.768]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.768]                   NULL)
[11:01:04.768]                 if (is_error) {
[11:01:04.768]                   sessionInformation <- function() {
[11:01:04.768]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.768]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.768]                       search = base::search(), system = base::Sys.info())
[11:01:04.768]                   }
[11:01:04.768]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.768]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.768]                     cond$call), session = sessionInformation(), 
[11:01:04.768]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.768]                   signalCondition(cond)
[11:01:04.768]                 }
[11:01:04.768]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.768]                 "immediateCondition"))) {
[11:01:04.768]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.768]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.768]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.768]                   if (TRUE && !signal) {
[11:01:04.768]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.768]                     {
[11:01:04.768]                       inherits <- base::inherits
[11:01:04.768]                       invokeRestart <- base::invokeRestart
[11:01:04.768]                       is.null <- base::is.null
[11:01:04.768]                       muffled <- FALSE
[11:01:04.768]                       if (inherits(cond, "message")) {
[11:01:04.768]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.768]                         if (muffled) 
[11:01:04.768]                           invokeRestart("muffleMessage")
[11:01:04.768]                       }
[11:01:04.768]                       else if (inherits(cond, "warning")) {
[11:01:04.768]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.768]                         if (muffled) 
[11:01:04.768]                           invokeRestart("muffleWarning")
[11:01:04.768]                       }
[11:01:04.768]                       else if (inherits(cond, "condition")) {
[11:01:04.768]                         if (!is.null(pattern)) {
[11:01:04.768]                           computeRestarts <- base::computeRestarts
[11:01:04.768]                           grepl <- base::grepl
[11:01:04.768]                           restarts <- computeRestarts(cond)
[11:01:04.768]                           for (restart in restarts) {
[11:01:04.768]                             name <- restart$name
[11:01:04.768]                             if (is.null(name)) 
[11:01:04.768]                               next
[11:01:04.768]                             if (!grepl(pattern, name)) 
[11:01:04.768]                               next
[11:01:04.768]                             invokeRestart(restart)
[11:01:04.768]                             muffled <- TRUE
[11:01:04.768]                             break
[11:01:04.768]                           }
[11:01:04.768]                         }
[11:01:04.768]                       }
[11:01:04.768]                       invisible(muffled)
[11:01:04.768]                     }
[11:01:04.768]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.768]                   }
[11:01:04.768]                 }
[11:01:04.768]                 else {
[11:01:04.768]                   if (TRUE) {
[11:01:04.768]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.768]                     {
[11:01:04.768]                       inherits <- base::inherits
[11:01:04.768]                       invokeRestart <- base::invokeRestart
[11:01:04.768]                       is.null <- base::is.null
[11:01:04.768]                       muffled <- FALSE
[11:01:04.768]                       if (inherits(cond, "message")) {
[11:01:04.768]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.768]                         if (muffled) 
[11:01:04.768]                           invokeRestart("muffleMessage")
[11:01:04.768]                       }
[11:01:04.768]                       else if (inherits(cond, "warning")) {
[11:01:04.768]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.768]                         if (muffled) 
[11:01:04.768]                           invokeRestart("muffleWarning")
[11:01:04.768]                       }
[11:01:04.768]                       else if (inherits(cond, "condition")) {
[11:01:04.768]                         if (!is.null(pattern)) {
[11:01:04.768]                           computeRestarts <- base::computeRestarts
[11:01:04.768]                           grepl <- base::grepl
[11:01:04.768]                           restarts <- computeRestarts(cond)
[11:01:04.768]                           for (restart in restarts) {
[11:01:04.768]                             name <- restart$name
[11:01:04.768]                             if (is.null(name)) 
[11:01:04.768]                               next
[11:01:04.768]                             if (!grepl(pattern, name)) 
[11:01:04.768]                               next
[11:01:04.768]                             invokeRestart(restart)
[11:01:04.768]                             muffled <- TRUE
[11:01:04.768]                             break
[11:01:04.768]                           }
[11:01:04.768]                         }
[11:01:04.768]                       }
[11:01:04.768]                       invisible(muffled)
[11:01:04.768]                     }
[11:01:04.768]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.768]                   }
[11:01:04.768]                 }
[11:01:04.768]             }
[11:01:04.768]         }))
[11:01:04.768]     }, error = function(ex) {
[11:01:04.768]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.768]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.768]                 ...future.rng), started = ...future.startTime, 
[11:01:04.768]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.768]             version = "1.8"), class = "FutureResult")
[11:01:04.768]     }, finally = {
[11:01:04.768]         if (!identical(...future.workdir, getwd())) 
[11:01:04.768]             setwd(...future.workdir)
[11:01:04.768]         {
[11:01:04.768]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.768]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.768]             }
[11:01:04.768]             base::options(...future.oldOptions)
[11:01:04.768]             if (.Platform$OS.type == "windows") {
[11:01:04.768]                 old_names <- names(...future.oldEnvVars)
[11:01:04.768]                 envs <- base::Sys.getenv()
[11:01:04.768]                 names <- names(envs)
[11:01:04.768]                 common <- intersect(names, old_names)
[11:01:04.768]                 added <- setdiff(names, old_names)
[11:01:04.768]                 removed <- setdiff(old_names, names)
[11:01:04.768]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.768]                   envs[common]]
[11:01:04.768]                 NAMES <- toupper(changed)
[11:01:04.768]                 args <- list()
[11:01:04.768]                 for (kk in seq_along(NAMES)) {
[11:01:04.768]                   name <- changed[[kk]]
[11:01:04.768]                   NAME <- NAMES[[kk]]
[11:01:04.768]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.768]                     next
[11:01:04.768]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.768]                 }
[11:01:04.768]                 NAMES <- toupper(added)
[11:01:04.768]                 for (kk in seq_along(NAMES)) {
[11:01:04.768]                   name <- added[[kk]]
[11:01:04.768]                   NAME <- NAMES[[kk]]
[11:01:04.768]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.768]                     next
[11:01:04.768]                   args[[name]] <- ""
[11:01:04.768]                 }
[11:01:04.768]                 NAMES <- toupper(removed)
[11:01:04.768]                 for (kk in seq_along(NAMES)) {
[11:01:04.768]                   name <- removed[[kk]]
[11:01:04.768]                   NAME <- NAMES[[kk]]
[11:01:04.768]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.768]                     next
[11:01:04.768]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.768]                 }
[11:01:04.768]                 if (length(args) > 0) 
[11:01:04.768]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.768]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.768]             }
[11:01:04.768]             else {
[11:01:04.768]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.768]             }
[11:01:04.768]             {
[11:01:04.768]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.768]                   0L) {
[11:01:04.768]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.768]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.768]                   base::options(opts)
[11:01:04.768]                 }
[11:01:04.768]                 {
[11:01:04.768]                   {
[11:01:04.768]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:04.768]                     NULL
[11:01:04.768]                   }
[11:01:04.768]                   options(future.plan = NULL)
[11:01:04.768]                   if (is.na(NA_character_)) 
[11:01:04.768]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.768]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.768]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.768]                     .init = FALSE)
[11:01:04.768]                 }
[11:01:04.768]             }
[11:01:04.768]         }
[11:01:04.768]     })
[11:01:04.768]     if (TRUE) {
[11:01:04.768]         base::sink(type = "output", split = FALSE)
[11:01:04.768]         if (TRUE) {
[11:01:04.768]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.768]         }
[11:01:04.768]         else {
[11:01:04.768]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.768]         }
[11:01:04.768]         base::close(...future.stdout)
[11:01:04.768]         ...future.stdout <- NULL
[11:01:04.768]     }
[11:01:04.768]     ...future.result$conditions <- ...future.conditions
[11:01:04.768]     ...future.result$finished <- base::Sys.time()
[11:01:04.768]     ...future.result
[11:01:04.768] }
[11:01:04.770] assign_globals() ...
[11:01:04.770] List of 2
[11:01:04.770]  $ x: int [1:2] 1 2
[11:01:04.770]  $ y: num 3
[11:01:04.770]  - attr(*, "where")=List of 2
[11:01:04.770]   ..$ x:<environment: R_EmptyEnv> 
[11:01:04.770]   ..$ y:<environment: R_EmptyEnv> 
[11:01:04.770]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.770]  - attr(*, "resolved")= logi FALSE
[11:01:04.770]  - attr(*, "total_size")= num 172
[11:01:04.770]  - attr(*, "already-done")= logi TRUE
[11:01:04.774] - copied ‘x’ to environment
[11:01:04.774] - copied ‘y’ to environment
[11:01:04.774] assign_globals() ... done
[11:01:04.774] requestCore(): workers = 2
[11:01:04.776] MulticoreFuture started
[11:01:04.776] - Launch lazy future ... done
[11:01:04.776] run() for ‘MulticoreFuture’ ... done
[11:01:04.777] result() for MulticoreFuture ...
[11:01:04.777] plan(): Setting new future strategy stack:
[11:01:04.777] List of future strategies:
[11:01:04.777] 1. sequential:
[11:01:04.777]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.777]    - tweaked: FALSE
[11:01:04.777]    - call: NULL
[11:01:04.778] plan(): nbrOfWorkers() = 1
[11:01:04.780] plan(): Setting new future strategy stack:
[11:01:04.780] List of future strategies:
[11:01:04.780] 1. multicore:
[11:01:04.780]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:04.780]    - tweaked: FALSE
[11:01:04.780]    - call: plan(strategy, substitute = FALSE)
[11:01:04.783] plan(): nbrOfWorkers() = 2
[11:01:04.784] result() for MulticoreFuture ...
[11:01:04.784] result() for MulticoreFuture ... done
[11:01:04.784] result() for MulticoreFuture ... done
[11:01:04.784] result() for MulticoreFuture ...
[11:01:04.784] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x55b7e43ada18>
Arguments '...' exists: FALSE
[11:01:04.785] getGlobalsAndPackages() ...
[11:01:04.785] Searching for globals...
[11:01:04.787] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[11:01:04.787] Searching for globals ... DONE
[11:01:04.787] Resolving globals: FALSE
[11:01:04.787] Tweak future expression to call with '...' arguments ...
[11:01:04.788] The total size of the 2 globals is 172 bytes (172 bytes)
[11:01:04.788] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 172 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:04.789] - globals: [2] ‘x’, ‘y’
[11:01:04.789] 
[11:01:04.789] getGlobalsAndPackages() ... DONE
[11:01:04.789] run() for ‘Future’ ...
[11:01:04.789] - state: ‘created’
[11:01:04.789] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:04.791] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:04.792] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:04.792]   - Field: ‘label’
[11:01:04.792]   - Field: ‘local’
[11:01:04.792]   - Field: ‘owner’
[11:01:04.792]   - Field: ‘envir’
[11:01:04.792]   - Field: ‘workers’
[11:01:04.792]   - Field: ‘packages’
[11:01:04.792]   - Field: ‘gc’
[11:01:04.792]   - Field: ‘job’
[11:01:04.793]   - Field: ‘conditions’
[11:01:04.793]   - Field: ‘expr’
[11:01:04.793]   - Field: ‘uuid’
[11:01:04.793]   - Field: ‘seed’
[11:01:04.793]   - Field: ‘version’
[11:01:04.793]   - Field: ‘result’
[11:01:04.793]   - Field: ‘asynchronous’
[11:01:04.793]   - Field: ‘calls’
[11:01:04.793]   - Field: ‘globals’
[11:01:04.793]   - Field: ‘stdout’
[11:01:04.794]   - Field: ‘earlySignal’
[11:01:04.794]   - Field: ‘lazy’
[11:01:04.794]   - Field: ‘state’
[11:01:04.794] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:04.794] - Launch lazy future ...
[11:01:04.794] Packages needed by the future expression (n = 0): <none>
[11:01:04.794] Packages needed by future strategies (n = 0): <none>
[11:01:04.795] {
[11:01:04.795]     {
[11:01:04.795]         {
[11:01:04.795]             ...future.startTime <- base::Sys.time()
[11:01:04.795]             {
[11:01:04.795]                 {
[11:01:04.795]                   {
[11:01:04.795]                     {
[11:01:04.795]                       base::local({
[11:01:04.795]                         has_future <- base::requireNamespace("future", 
[11:01:04.795]                           quietly = TRUE)
[11:01:04.795]                         if (has_future) {
[11:01:04.795]                           ns <- base::getNamespace("future")
[11:01:04.795]                           version <- ns[[".package"]][["version"]]
[11:01:04.795]                           if (is.null(version)) 
[11:01:04.795]                             version <- utils::packageVersion("future")
[11:01:04.795]                         }
[11:01:04.795]                         else {
[11:01:04.795]                           version <- NULL
[11:01:04.795]                         }
[11:01:04.795]                         if (!has_future || version < "1.8.0") {
[11:01:04.795]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.795]                             "", base::R.version$version.string), 
[11:01:04.795]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:04.795]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.795]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.795]                               "release", "version")], collapse = " "), 
[11:01:04.795]                             hostname = base::Sys.info()[["nodename"]])
[11:01:04.795]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.795]                             info)
[11:01:04.795]                           info <- base::paste(info, collapse = "; ")
[11:01:04.795]                           if (!has_future) {
[11:01:04.795]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.795]                               info)
[11:01:04.795]                           }
[11:01:04.795]                           else {
[11:01:04.795]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.795]                               info, version)
[11:01:04.795]                           }
[11:01:04.795]                           base::stop(msg)
[11:01:04.795]                         }
[11:01:04.795]                       })
[11:01:04.795]                     }
[11:01:04.795]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:04.795]                     base::options(mc.cores = 1L)
[11:01:04.795]                   }
[11:01:04.795]                   ...future.strategy.old <- future::plan("list")
[11:01:04.795]                   options(future.plan = NULL)
[11:01:04.795]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.795]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.795]                 }
[11:01:04.795]                 ...future.workdir <- getwd()
[11:01:04.795]             }
[11:01:04.795]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.795]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.795]         }
[11:01:04.795]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.795]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.795]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.795]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.795]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.795]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.795]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.795]             base::names(...future.oldOptions))
[11:01:04.795]     }
[11:01:04.795]     if (FALSE) {
[11:01:04.795]     }
[11:01:04.795]     else {
[11:01:04.795]         if (TRUE) {
[11:01:04.795]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.795]                 open = "w")
[11:01:04.795]         }
[11:01:04.795]         else {
[11:01:04.795]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.795]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.795]         }
[11:01:04.795]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.795]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.795]             base::sink(type = "output", split = FALSE)
[11:01:04.795]             base::close(...future.stdout)
[11:01:04.795]         }, add = TRUE)
[11:01:04.795]     }
[11:01:04.795]     ...future.frame <- base::sys.nframe()
[11:01:04.795]     ...future.conditions <- base::list()
[11:01:04.795]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.795]     if (FALSE) {
[11:01:04.795]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.795]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.795]     }
[11:01:04.795]     ...future.result <- base::tryCatch({
[11:01:04.795]         base::withCallingHandlers({
[11:01:04.795]             ...future.value <- base::withVisible(base::local({
[11:01:04.795]                 withCallingHandlers({
[11:01:04.795]                   {
[11:01:04.795]                     sum(x, y, ...)
[11:01:04.795]                   }
[11:01:04.795]                 }, immediateCondition = function(cond) {
[11:01:04.795]                   save_rds <- function (object, pathname, ...) 
[11:01:04.795]                   {
[11:01:04.795]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:04.795]                     if (file_test("-f", pathname_tmp)) {
[11:01:04.795]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.795]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:04.795]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.795]                         fi_tmp[["mtime"]])
[11:01:04.795]                     }
[11:01:04.795]                     tryCatch({
[11:01:04.795]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:04.795]                     }, error = function(ex) {
[11:01:04.795]                       msg <- conditionMessage(ex)
[11:01:04.795]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.795]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:04.795]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.795]                         fi_tmp[["mtime"]], msg)
[11:01:04.795]                       ex$message <- msg
[11:01:04.795]                       stop(ex)
[11:01:04.795]                     })
[11:01:04.795]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:04.795]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:04.795]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:04.795]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.795]                       fi <- file.info(pathname)
[11:01:04.795]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:04.795]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.795]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:04.795]                         fi[["size"]], fi[["mtime"]])
[11:01:04.795]                       stop(msg)
[11:01:04.795]                     }
[11:01:04.795]                     invisible(pathname)
[11:01:04.795]                   }
[11:01:04.795]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:04.795]                     rootPath = tempdir()) 
[11:01:04.795]                   {
[11:01:04.795]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:04.795]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:04.795]                       tmpdir = path, fileext = ".rds")
[11:01:04.795]                     save_rds(obj, file)
[11:01:04.795]                   }
[11:01:04.795]                   saveImmediateCondition(cond, path = "/tmp/RtmpAJ1ROR/.future/immediateConditions")
[11:01:04.795]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.795]                   {
[11:01:04.795]                     inherits <- base::inherits
[11:01:04.795]                     invokeRestart <- base::invokeRestart
[11:01:04.795]                     is.null <- base::is.null
[11:01:04.795]                     muffled <- FALSE
[11:01:04.795]                     if (inherits(cond, "message")) {
[11:01:04.795]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:04.795]                       if (muffled) 
[11:01:04.795]                         invokeRestart("muffleMessage")
[11:01:04.795]                     }
[11:01:04.795]                     else if (inherits(cond, "warning")) {
[11:01:04.795]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:04.795]                       if (muffled) 
[11:01:04.795]                         invokeRestart("muffleWarning")
[11:01:04.795]                     }
[11:01:04.795]                     else if (inherits(cond, "condition")) {
[11:01:04.795]                       if (!is.null(pattern)) {
[11:01:04.795]                         computeRestarts <- base::computeRestarts
[11:01:04.795]                         grepl <- base::grepl
[11:01:04.795]                         restarts <- computeRestarts(cond)
[11:01:04.795]                         for (restart in restarts) {
[11:01:04.795]                           name <- restart$name
[11:01:04.795]                           if (is.null(name)) 
[11:01:04.795]                             next
[11:01:04.795]                           if (!grepl(pattern, name)) 
[11:01:04.795]                             next
[11:01:04.795]                           invokeRestart(restart)
[11:01:04.795]                           muffled <- TRUE
[11:01:04.795]                           break
[11:01:04.795]                         }
[11:01:04.795]                       }
[11:01:04.795]                     }
[11:01:04.795]                     invisible(muffled)
[11:01:04.795]                   }
[11:01:04.795]                   muffleCondition(cond)
[11:01:04.795]                 })
[11:01:04.795]             }))
[11:01:04.795]             future::FutureResult(value = ...future.value$value, 
[11:01:04.795]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.795]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.795]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.795]                     ...future.globalenv.names))
[11:01:04.795]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.795]         }, condition = base::local({
[11:01:04.795]             c <- base::c
[11:01:04.795]             inherits <- base::inherits
[11:01:04.795]             invokeRestart <- base::invokeRestart
[11:01:04.795]             length <- base::length
[11:01:04.795]             list <- base::list
[11:01:04.795]             seq.int <- base::seq.int
[11:01:04.795]             signalCondition <- base::signalCondition
[11:01:04.795]             sys.calls <- base::sys.calls
[11:01:04.795]             `[[` <- base::`[[`
[11:01:04.795]             `+` <- base::`+`
[11:01:04.795]             `<<-` <- base::`<<-`
[11:01:04.795]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.795]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.795]                   3L)]
[11:01:04.795]             }
[11:01:04.795]             function(cond) {
[11:01:04.795]                 is_error <- inherits(cond, "error")
[11:01:04.795]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.795]                   NULL)
[11:01:04.795]                 if (is_error) {
[11:01:04.795]                   sessionInformation <- function() {
[11:01:04.795]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.795]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.795]                       search = base::search(), system = base::Sys.info())
[11:01:04.795]                   }
[11:01:04.795]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.795]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.795]                     cond$call), session = sessionInformation(), 
[11:01:04.795]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.795]                   signalCondition(cond)
[11:01:04.795]                 }
[11:01:04.795]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.795]                 "immediateCondition"))) {
[11:01:04.795]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.795]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.795]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.795]                   if (TRUE && !signal) {
[11:01:04.795]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.795]                     {
[11:01:04.795]                       inherits <- base::inherits
[11:01:04.795]                       invokeRestart <- base::invokeRestart
[11:01:04.795]                       is.null <- base::is.null
[11:01:04.795]                       muffled <- FALSE
[11:01:04.795]                       if (inherits(cond, "message")) {
[11:01:04.795]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.795]                         if (muffled) 
[11:01:04.795]                           invokeRestart("muffleMessage")
[11:01:04.795]                       }
[11:01:04.795]                       else if (inherits(cond, "warning")) {
[11:01:04.795]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.795]                         if (muffled) 
[11:01:04.795]                           invokeRestart("muffleWarning")
[11:01:04.795]                       }
[11:01:04.795]                       else if (inherits(cond, "condition")) {
[11:01:04.795]                         if (!is.null(pattern)) {
[11:01:04.795]                           computeRestarts <- base::computeRestarts
[11:01:04.795]                           grepl <- base::grepl
[11:01:04.795]                           restarts <- computeRestarts(cond)
[11:01:04.795]                           for (restart in restarts) {
[11:01:04.795]                             name <- restart$name
[11:01:04.795]                             if (is.null(name)) 
[11:01:04.795]                               next
[11:01:04.795]                             if (!grepl(pattern, name)) 
[11:01:04.795]                               next
[11:01:04.795]                             invokeRestart(restart)
[11:01:04.795]                             muffled <- TRUE
[11:01:04.795]                             break
[11:01:04.795]                           }
[11:01:04.795]                         }
[11:01:04.795]                       }
[11:01:04.795]                       invisible(muffled)
[11:01:04.795]                     }
[11:01:04.795]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.795]                   }
[11:01:04.795]                 }
[11:01:04.795]                 else {
[11:01:04.795]                   if (TRUE) {
[11:01:04.795]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.795]                     {
[11:01:04.795]                       inherits <- base::inherits
[11:01:04.795]                       invokeRestart <- base::invokeRestart
[11:01:04.795]                       is.null <- base::is.null
[11:01:04.795]                       muffled <- FALSE
[11:01:04.795]                       if (inherits(cond, "message")) {
[11:01:04.795]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.795]                         if (muffled) 
[11:01:04.795]                           invokeRestart("muffleMessage")
[11:01:04.795]                       }
[11:01:04.795]                       else if (inherits(cond, "warning")) {
[11:01:04.795]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.795]                         if (muffled) 
[11:01:04.795]                           invokeRestart("muffleWarning")
[11:01:04.795]                       }
[11:01:04.795]                       else if (inherits(cond, "condition")) {
[11:01:04.795]                         if (!is.null(pattern)) {
[11:01:04.795]                           computeRestarts <- base::computeRestarts
[11:01:04.795]                           grepl <- base::grepl
[11:01:04.795]                           restarts <- computeRestarts(cond)
[11:01:04.795]                           for (restart in restarts) {
[11:01:04.795]                             name <- restart$name
[11:01:04.795]                             if (is.null(name)) 
[11:01:04.795]                               next
[11:01:04.795]                             if (!grepl(pattern, name)) 
[11:01:04.795]                               next
[11:01:04.795]                             invokeRestart(restart)
[11:01:04.795]                             muffled <- TRUE
[11:01:04.795]                             break
[11:01:04.795]                           }
[11:01:04.795]                         }
[11:01:04.795]                       }
[11:01:04.795]                       invisible(muffled)
[11:01:04.795]                     }
[11:01:04.795]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.795]                   }
[11:01:04.795]                 }
[11:01:04.795]             }
[11:01:04.795]         }))
[11:01:04.795]     }, error = function(ex) {
[11:01:04.795]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.795]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.795]                 ...future.rng), started = ...future.startTime, 
[11:01:04.795]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.795]             version = "1.8"), class = "FutureResult")
[11:01:04.795]     }, finally = {
[11:01:04.795]         if (!identical(...future.workdir, getwd())) 
[11:01:04.795]             setwd(...future.workdir)
[11:01:04.795]         {
[11:01:04.795]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.795]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.795]             }
[11:01:04.795]             base::options(...future.oldOptions)
[11:01:04.795]             if (.Platform$OS.type == "windows") {
[11:01:04.795]                 old_names <- names(...future.oldEnvVars)
[11:01:04.795]                 envs <- base::Sys.getenv()
[11:01:04.795]                 names <- names(envs)
[11:01:04.795]                 common <- intersect(names, old_names)
[11:01:04.795]                 added <- setdiff(names, old_names)
[11:01:04.795]                 removed <- setdiff(old_names, names)
[11:01:04.795]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.795]                   envs[common]]
[11:01:04.795]                 NAMES <- toupper(changed)
[11:01:04.795]                 args <- list()
[11:01:04.795]                 for (kk in seq_along(NAMES)) {
[11:01:04.795]                   name <- changed[[kk]]
[11:01:04.795]                   NAME <- NAMES[[kk]]
[11:01:04.795]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.795]                     next
[11:01:04.795]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.795]                 }
[11:01:04.795]                 NAMES <- toupper(added)
[11:01:04.795]                 for (kk in seq_along(NAMES)) {
[11:01:04.795]                   name <- added[[kk]]
[11:01:04.795]                   NAME <- NAMES[[kk]]
[11:01:04.795]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.795]                     next
[11:01:04.795]                   args[[name]] <- ""
[11:01:04.795]                 }
[11:01:04.795]                 NAMES <- toupper(removed)
[11:01:04.795]                 for (kk in seq_along(NAMES)) {
[11:01:04.795]                   name <- removed[[kk]]
[11:01:04.795]                   NAME <- NAMES[[kk]]
[11:01:04.795]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.795]                     next
[11:01:04.795]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.795]                 }
[11:01:04.795]                 if (length(args) > 0) 
[11:01:04.795]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.795]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.795]             }
[11:01:04.795]             else {
[11:01:04.795]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.795]             }
[11:01:04.795]             {
[11:01:04.795]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.795]                   0L) {
[11:01:04.795]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.795]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.795]                   base::options(opts)
[11:01:04.795]                 }
[11:01:04.795]                 {
[11:01:04.795]                   {
[11:01:04.795]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:04.795]                     NULL
[11:01:04.795]                   }
[11:01:04.795]                   options(future.plan = NULL)
[11:01:04.795]                   if (is.na(NA_character_)) 
[11:01:04.795]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.795]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.795]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.795]                     .init = FALSE)
[11:01:04.795]                 }
[11:01:04.795]             }
[11:01:04.795]         }
[11:01:04.795]     })
[11:01:04.795]     if (TRUE) {
[11:01:04.795]         base::sink(type = "output", split = FALSE)
[11:01:04.795]         if (TRUE) {
[11:01:04.795]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.795]         }
[11:01:04.795]         else {
[11:01:04.795]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.795]         }
[11:01:04.795]         base::close(...future.stdout)
[11:01:04.795]         ...future.stdout <- NULL
[11:01:04.795]     }
[11:01:04.795]     ...future.result$conditions <- ...future.conditions
[11:01:04.795]     ...future.result$finished <- base::Sys.time()
[11:01:04.795]     ...future.result
[11:01:04.795] }
[11:01:04.798] assign_globals() ...
[11:01:04.798] List of 2
[11:01:04.798]  $ x: int [1:2] 1 2
[11:01:04.798]  $ y: num 3
[11:01:04.798]  - attr(*, "where")=List of 2
[11:01:04.798]   ..$ x:<environment: R_EmptyEnv> 
[11:01:04.798]   ..$ y:<environment: R_EmptyEnv> 
[11:01:04.798]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.798]  - attr(*, "resolved")= logi FALSE
[11:01:04.798]  - attr(*, "total_size")= num 172
[11:01:04.798]  - attr(*, "already-done")= logi TRUE
[11:01:04.801] - copied ‘x’ to environment
[11:01:04.801] - copied ‘y’ to environment
[11:01:04.801] assign_globals() ... done
[11:01:04.802] requestCore(): workers = 2
[11:01:04.805] MulticoreFuture started
[11:01:04.805] - Launch lazy future ... done
[11:01:04.805] run() for ‘MulticoreFuture’ ... done
[11:01:04.806] plan(): Setting new future strategy stack:
[11:01:04.806] result() for MulticoreFuture ...
[11:01:04.806] List of future strategies:
[11:01:04.806] 1. sequential:
[11:01:04.806]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.806]    - tweaked: FALSE
[11:01:04.806]    - call: NULL
[11:01:04.807] plan(): nbrOfWorkers() = 1
[11:01:04.809] plan(): Setting new future strategy stack:
[11:01:04.809] List of future strategies:
[11:01:04.809] 1. multicore:
[11:01:04.809]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:04.809]    - tweaked: FALSE
[11:01:04.809]    - call: plan(strategy, substitute = FALSE)
[11:01:04.812] plan(): nbrOfWorkers() = 2
[11:01:04.818] result() for MulticoreFuture ...
[11:01:04.819] result() for MulticoreFuture ... done
[11:01:04.819] signalConditions() ...
[11:01:04.819]  - include = ‘immediateCondition’
[11:01:04.819]  - exclude = 
[11:01:04.819]  - resignal = FALSE
[11:01:04.819]  - Number of conditions: 1
[11:01:04.819] signalConditions() ... done
[11:01:04.819] result() for MulticoreFuture ... done
[11:01:04.820] result() for MulticoreFuture ...
[11:01:04.820] result() for MulticoreFuture ... done
[11:01:04.820] signalConditions() ...
[11:01:04.820]  - include = ‘immediateCondition’
[11:01:04.820]  - exclude = 
[11:01:04.820]  - resignal = FALSE
[11:01:04.820]  - Number of conditions: 1
[11:01:04.820] signalConditions() ... done
[11:01:04.821] Future state: ‘finished’
[11:01:04.821] result() for MulticoreFuture ...
[11:01:04.821] result() for MulticoreFuture ... done
[11:01:04.821] signalConditions() ...
[11:01:04.821]  - include = ‘condition’
[11:01:04.821]  - exclude = ‘immediateCondition’
[11:01:04.821]  - resignal = TRUE
[11:01:04.821]  - Number of conditions: 1
[11:01:04.821]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:01:04.822] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpAJ1ROR/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55b7e2426e88>
Arguments '...' exists: TRUE
[11:01:04.823] getGlobalsAndPackages() ...
[11:01:04.823] - globals passed as-is: [1] ‘...’
[11:01:04.823] Resolving globals: FALSE
[11:01:04.823] Tweak future expression to call with '...' arguments ...
[11:01:04.823] {
[11:01:04.823]     do.call(function(...) {
[11:01:04.823]         fcn <- function() sum(...)
[11:01:04.823]         fcn()
[11:01:04.823]     }, args = future.call.arguments)
[11:01:04.823] }
[11:01:04.824] Tweak future expression to call with '...' arguments ... DONE
[11:01:04.824] The total size of the 1 globals is 223 bytes (223 bytes)
[11:01:04.824] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 223 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (223 bytes of class ‘list’)
[11:01:04.825] - globals: [1] ‘future.call.arguments’
[11:01:04.825] 
[11:01:04.825] getGlobalsAndPackages() ... DONE
[11:01:04.825] run() for ‘Future’ ...
[11:01:04.825] - state: ‘created’
[11:01:04.825] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:04.827] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:04.827] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:04.828]   - Field: ‘label’
[11:01:04.828]   - Field: ‘local’
[11:01:04.828]   - Field: ‘owner’
[11:01:04.828]   - Field: ‘envir’
[11:01:04.828]   - Field: ‘workers’
[11:01:04.828]   - Field: ‘packages’
[11:01:04.828]   - Field: ‘gc’
[11:01:04.828]   - Field: ‘job’
[11:01:04.828]   - Field: ‘conditions’
[11:01:04.829]   - Field: ‘expr’
[11:01:04.829]   - Field: ‘uuid’
[11:01:04.829]   - Field: ‘seed’
[11:01:04.829]   - Field: ‘version’
[11:01:04.829]   - Field: ‘result’
[11:01:04.829]   - Field: ‘asynchronous’
[11:01:04.829]   - Field: ‘calls’
[11:01:04.829]   - Field: ‘globals’
[11:01:04.829]   - Field: ‘stdout’
[11:01:04.830]   - Field: ‘earlySignal’
[11:01:04.830]   - Field: ‘lazy’
[11:01:04.830]   - Field: ‘state’
[11:01:04.830] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:04.830] - Launch lazy future ...
[11:01:04.830] Packages needed by the future expression (n = 0): <none>
[11:01:04.830] Packages needed by future strategies (n = 0): <none>
[11:01:04.831] {
[11:01:04.831]     {
[11:01:04.831]         {
[11:01:04.831]             ...future.startTime <- base::Sys.time()
[11:01:04.831]             {
[11:01:04.831]                 {
[11:01:04.831]                   {
[11:01:04.831]                     {
[11:01:04.831]                       base::local({
[11:01:04.831]                         has_future <- base::requireNamespace("future", 
[11:01:04.831]                           quietly = TRUE)
[11:01:04.831]                         if (has_future) {
[11:01:04.831]                           ns <- base::getNamespace("future")
[11:01:04.831]                           version <- ns[[".package"]][["version"]]
[11:01:04.831]                           if (is.null(version)) 
[11:01:04.831]                             version <- utils::packageVersion("future")
[11:01:04.831]                         }
[11:01:04.831]                         else {
[11:01:04.831]                           version <- NULL
[11:01:04.831]                         }
[11:01:04.831]                         if (!has_future || version < "1.8.0") {
[11:01:04.831]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.831]                             "", base::R.version$version.string), 
[11:01:04.831]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:04.831]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.831]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.831]                               "release", "version")], collapse = " "), 
[11:01:04.831]                             hostname = base::Sys.info()[["nodename"]])
[11:01:04.831]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.831]                             info)
[11:01:04.831]                           info <- base::paste(info, collapse = "; ")
[11:01:04.831]                           if (!has_future) {
[11:01:04.831]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.831]                               info)
[11:01:04.831]                           }
[11:01:04.831]                           else {
[11:01:04.831]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.831]                               info, version)
[11:01:04.831]                           }
[11:01:04.831]                           base::stop(msg)
[11:01:04.831]                         }
[11:01:04.831]                       })
[11:01:04.831]                     }
[11:01:04.831]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:04.831]                     base::options(mc.cores = 1L)
[11:01:04.831]                   }
[11:01:04.831]                   ...future.strategy.old <- future::plan("list")
[11:01:04.831]                   options(future.plan = NULL)
[11:01:04.831]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.831]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.831]                 }
[11:01:04.831]                 ...future.workdir <- getwd()
[11:01:04.831]             }
[11:01:04.831]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.831]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.831]         }
[11:01:04.831]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.831]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.831]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.831]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.831]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.831]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.831]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.831]             base::names(...future.oldOptions))
[11:01:04.831]     }
[11:01:04.831]     if (FALSE) {
[11:01:04.831]     }
[11:01:04.831]     else {
[11:01:04.831]         if (TRUE) {
[11:01:04.831]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.831]                 open = "w")
[11:01:04.831]         }
[11:01:04.831]         else {
[11:01:04.831]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.831]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.831]         }
[11:01:04.831]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.831]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.831]             base::sink(type = "output", split = FALSE)
[11:01:04.831]             base::close(...future.stdout)
[11:01:04.831]         }, add = TRUE)
[11:01:04.831]     }
[11:01:04.831]     ...future.frame <- base::sys.nframe()
[11:01:04.831]     ...future.conditions <- base::list()
[11:01:04.831]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.831]     if (FALSE) {
[11:01:04.831]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.831]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.831]     }
[11:01:04.831]     ...future.result <- base::tryCatch({
[11:01:04.831]         base::withCallingHandlers({
[11:01:04.831]             ...future.value <- base::withVisible(base::local({
[11:01:04.831]                 withCallingHandlers({
[11:01:04.831]                   {
[11:01:04.831]                     do.call(function(...) {
[11:01:04.831]                       fcn <- function() sum(...)
[11:01:04.831]                       fcn()
[11:01:04.831]                     }, args = future.call.arguments)
[11:01:04.831]                   }
[11:01:04.831]                 }, immediateCondition = function(cond) {
[11:01:04.831]                   save_rds <- function (object, pathname, ...) 
[11:01:04.831]                   {
[11:01:04.831]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:04.831]                     if (file_test("-f", pathname_tmp)) {
[11:01:04.831]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.831]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:04.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.831]                         fi_tmp[["mtime"]])
[11:01:04.831]                     }
[11:01:04.831]                     tryCatch({
[11:01:04.831]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:04.831]                     }, error = function(ex) {
[11:01:04.831]                       msg <- conditionMessage(ex)
[11:01:04.831]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.831]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:04.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.831]                         fi_tmp[["mtime"]], msg)
[11:01:04.831]                       ex$message <- msg
[11:01:04.831]                       stop(ex)
[11:01:04.831]                     })
[11:01:04.831]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:04.831]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:04.831]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:04.831]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.831]                       fi <- file.info(pathname)
[11:01:04.831]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:04.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.831]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:04.831]                         fi[["size"]], fi[["mtime"]])
[11:01:04.831]                       stop(msg)
[11:01:04.831]                     }
[11:01:04.831]                     invisible(pathname)
[11:01:04.831]                   }
[11:01:04.831]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:04.831]                     rootPath = tempdir()) 
[11:01:04.831]                   {
[11:01:04.831]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:04.831]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:04.831]                       tmpdir = path, fileext = ".rds")
[11:01:04.831]                     save_rds(obj, file)
[11:01:04.831]                   }
[11:01:04.831]                   saveImmediateCondition(cond, path = "/tmp/RtmpAJ1ROR/.future/immediateConditions")
[11:01:04.831]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.831]                   {
[11:01:04.831]                     inherits <- base::inherits
[11:01:04.831]                     invokeRestart <- base::invokeRestart
[11:01:04.831]                     is.null <- base::is.null
[11:01:04.831]                     muffled <- FALSE
[11:01:04.831]                     if (inherits(cond, "message")) {
[11:01:04.831]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:04.831]                       if (muffled) 
[11:01:04.831]                         invokeRestart("muffleMessage")
[11:01:04.831]                     }
[11:01:04.831]                     else if (inherits(cond, "warning")) {
[11:01:04.831]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:04.831]                       if (muffled) 
[11:01:04.831]                         invokeRestart("muffleWarning")
[11:01:04.831]                     }
[11:01:04.831]                     else if (inherits(cond, "condition")) {
[11:01:04.831]                       if (!is.null(pattern)) {
[11:01:04.831]                         computeRestarts <- base::computeRestarts
[11:01:04.831]                         grepl <- base::grepl
[11:01:04.831]                         restarts <- computeRestarts(cond)
[11:01:04.831]                         for (restart in restarts) {
[11:01:04.831]                           name <- restart$name
[11:01:04.831]                           if (is.null(name)) 
[11:01:04.831]                             next
[11:01:04.831]                           if (!grepl(pattern, name)) 
[11:01:04.831]                             next
[11:01:04.831]                           invokeRestart(restart)
[11:01:04.831]                           muffled <- TRUE
[11:01:04.831]                           break
[11:01:04.831]                         }
[11:01:04.831]                       }
[11:01:04.831]                     }
[11:01:04.831]                     invisible(muffled)
[11:01:04.831]                   }
[11:01:04.831]                   muffleCondition(cond)
[11:01:04.831]                 })
[11:01:04.831]             }))
[11:01:04.831]             future::FutureResult(value = ...future.value$value, 
[11:01:04.831]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.831]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.831]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.831]                     ...future.globalenv.names))
[11:01:04.831]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.831]         }, condition = base::local({
[11:01:04.831]             c <- base::c
[11:01:04.831]             inherits <- base::inherits
[11:01:04.831]             invokeRestart <- base::invokeRestart
[11:01:04.831]             length <- base::length
[11:01:04.831]             list <- base::list
[11:01:04.831]             seq.int <- base::seq.int
[11:01:04.831]             signalCondition <- base::signalCondition
[11:01:04.831]             sys.calls <- base::sys.calls
[11:01:04.831]             `[[` <- base::`[[`
[11:01:04.831]             `+` <- base::`+`
[11:01:04.831]             `<<-` <- base::`<<-`
[11:01:04.831]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.831]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.831]                   3L)]
[11:01:04.831]             }
[11:01:04.831]             function(cond) {
[11:01:04.831]                 is_error <- inherits(cond, "error")
[11:01:04.831]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.831]                   NULL)
[11:01:04.831]                 if (is_error) {
[11:01:04.831]                   sessionInformation <- function() {
[11:01:04.831]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.831]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.831]                       search = base::search(), system = base::Sys.info())
[11:01:04.831]                   }
[11:01:04.831]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.831]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.831]                     cond$call), session = sessionInformation(), 
[11:01:04.831]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.831]                   signalCondition(cond)
[11:01:04.831]                 }
[11:01:04.831]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.831]                 "immediateCondition"))) {
[11:01:04.831]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.831]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.831]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.831]                   if (TRUE && !signal) {
[11:01:04.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.831]                     {
[11:01:04.831]                       inherits <- base::inherits
[11:01:04.831]                       invokeRestart <- base::invokeRestart
[11:01:04.831]                       is.null <- base::is.null
[11:01:04.831]                       muffled <- FALSE
[11:01:04.831]                       if (inherits(cond, "message")) {
[11:01:04.831]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.831]                         if (muffled) 
[11:01:04.831]                           invokeRestart("muffleMessage")
[11:01:04.831]                       }
[11:01:04.831]                       else if (inherits(cond, "warning")) {
[11:01:04.831]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.831]                         if (muffled) 
[11:01:04.831]                           invokeRestart("muffleWarning")
[11:01:04.831]                       }
[11:01:04.831]                       else if (inherits(cond, "condition")) {
[11:01:04.831]                         if (!is.null(pattern)) {
[11:01:04.831]                           computeRestarts <- base::computeRestarts
[11:01:04.831]                           grepl <- base::grepl
[11:01:04.831]                           restarts <- computeRestarts(cond)
[11:01:04.831]                           for (restart in restarts) {
[11:01:04.831]                             name <- restart$name
[11:01:04.831]                             if (is.null(name)) 
[11:01:04.831]                               next
[11:01:04.831]                             if (!grepl(pattern, name)) 
[11:01:04.831]                               next
[11:01:04.831]                             invokeRestart(restart)
[11:01:04.831]                             muffled <- TRUE
[11:01:04.831]                             break
[11:01:04.831]                           }
[11:01:04.831]                         }
[11:01:04.831]                       }
[11:01:04.831]                       invisible(muffled)
[11:01:04.831]                     }
[11:01:04.831]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.831]                   }
[11:01:04.831]                 }
[11:01:04.831]                 else {
[11:01:04.831]                   if (TRUE) {
[11:01:04.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.831]                     {
[11:01:04.831]                       inherits <- base::inherits
[11:01:04.831]                       invokeRestart <- base::invokeRestart
[11:01:04.831]                       is.null <- base::is.null
[11:01:04.831]                       muffled <- FALSE
[11:01:04.831]                       if (inherits(cond, "message")) {
[11:01:04.831]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.831]                         if (muffled) 
[11:01:04.831]                           invokeRestart("muffleMessage")
[11:01:04.831]                       }
[11:01:04.831]                       else if (inherits(cond, "warning")) {
[11:01:04.831]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.831]                         if (muffled) 
[11:01:04.831]                           invokeRestart("muffleWarning")
[11:01:04.831]                       }
[11:01:04.831]                       else if (inherits(cond, "condition")) {
[11:01:04.831]                         if (!is.null(pattern)) {
[11:01:04.831]                           computeRestarts <- base::computeRestarts
[11:01:04.831]                           grepl <- base::grepl
[11:01:04.831]                           restarts <- computeRestarts(cond)
[11:01:04.831]                           for (restart in restarts) {
[11:01:04.831]                             name <- restart$name
[11:01:04.831]                             if (is.null(name)) 
[11:01:04.831]                               next
[11:01:04.831]                             if (!grepl(pattern, name)) 
[11:01:04.831]                               next
[11:01:04.831]                             invokeRestart(restart)
[11:01:04.831]                             muffled <- TRUE
[11:01:04.831]                             break
[11:01:04.831]                           }
[11:01:04.831]                         }
[11:01:04.831]                       }
[11:01:04.831]                       invisible(muffled)
[11:01:04.831]                     }
[11:01:04.831]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.831]                   }
[11:01:04.831]                 }
[11:01:04.831]             }
[11:01:04.831]         }))
[11:01:04.831]     }, error = function(ex) {
[11:01:04.831]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.831]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.831]                 ...future.rng), started = ...future.startTime, 
[11:01:04.831]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.831]             version = "1.8"), class = "FutureResult")
[11:01:04.831]     }, finally = {
[11:01:04.831]         if (!identical(...future.workdir, getwd())) 
[11:01:04.831]             setwd(...future.workdir)
[11:01:04.831]         {
[11:01:04.831]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.831]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.831]             }
[11:01:04.831]             base::options(...future.oldOptions)
[11:01:04.831]             if (.Platform$OS.type == "windows") {
[11:01:04.831]                 old_names <- names(...future.oldEnvVars)
[11:01:04.831]                 envs <- base::Sys.getenv()
[11:01:04.831]                 names <- names(envs)
[11:01:04.831]                 common <- intersect(names, old_names)
[11:01:04.831]                 added <- setdiff(names, old_names)
[11:01:04.831]                 removed <- setdiff(old_names, names)
[11:01:04.831]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.831]                   envs[common]]
[11:01:04.831]                 NAMES <- toupper(changed)
[11:01:04.831]                 args <- list()
[11:01:04.831]                 for (kk in seq_along(NAMES)) {
[11:01:04.831]                   name <- changed[[kk]]
[11:01:04.831]                   NAME <- NAMES[[kk]]
[11:01:04.831]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.831]                     next
[11:01:04.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.831]                 }
[11:01:04.831]                 NAMES <- toupper(added)
[11:01:04.831]                 for (kk in seq_along(NAMES)) {
[11:01:04.831]                   name <- added[[kk]]
[11:01:04.831]                   NAME <- NAMES[[kk]]
[11:01:04.831]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.831]                     next
[11:01:04.831]                   args[[name]] <- ""
[11:01:04.831]                 }
[11:01:04.831]                 NAMES <- toupper(removed)
[11:01:04.831]                 for (kk in seq_along(NAMES)) {
[11:01:04.831]                   name <- removed[[kk]]
[11:01:04.831]                   NAME <- NAMES[[kk]]
[11:01:04.831]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.831]                     next
[11:01:04.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.831]                 }
[11:01:04.831]                 if (length(args) > 0) 
[11:01:04.831]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.831]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.831]             }
[11:01:04.831]             else {
[11:01:04.831]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.831]             }
[11:01:04.831]             {
[11:01:04.831]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.831]                   0L) {
[11:01:04.831]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.831]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.831]                   base::options(opts)
[11:01:04.831]                 }
[11:01:04.831]                 {
[11:01:04.831]                   {
[11:01:04.831]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:04.831]                     NULL
[11:01:04.831]                   }
[11:01:04.831]                   options(future.plan = NULL)
[11:01:04.831]                   if (is.na(NA_character_)) 
[11:01:04.831]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.831]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.831]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.831]                     .init = FALSE)
[11:01:04.831]                 }
[11:01:04.831]             }
[11:01:04.831]         }
[11:01:04.831]     })
[11:01:04.831]     if (TRUE) {
[11:01:04.831]         base::sink(type = "output", split = FALSE)
[11:01:04.831]         if (TRUE) {
[11:01:04.831]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.831]         }
[11:01:04.831]         else {
[11:01:04.831]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.831]         }
[11:01:04.831]         base::close(...future.stdout)
[11:01:04.831]         ...future.stdout <- NULL
[11:01:04.831]     }
[11:01:04.831]     ...future.result$conditions <- ...future.conditions
[11:01:04.831]     ...future.result$finished <- base::Sys.time()
[11:01:04.831]     ...future.result
[11:01:04.831] }
[11:01:04.833] assign_globals() ...
[11:01:04.833] List of 1
[11:01:04.833]  $ future.call.arguments:List of 2
[11:01:04.833]   ..$ : int [1:2] 1 2
[11:01:04.833]   ..$ : num 3
[11:01:04.833]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[11:01:04.833]  - attr(*, "where")=List of 1
[11:01:04.833]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[11:01:04.833]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.833]  - attr(*, "resolved")= logi FALSE
[11:01:04.833]  - attr(*, "total_size")= num 223
[11:01:04.833]  - attr(*, "already-done")= logi TRUE
[11:01:04.837] - copied ‘future.call.arguments’ to environment
[11:01:04.837] assign_globals() ... done
[11:01:04.838] requestCore(): workers = 2
[11:01:04.839] MulticoreFuture started
[11:01:04.839] - Launch lazy future ... done
[11:01:04.840] run() for ‘MulticoreFuture’ ... done
[11:01:04.840] result() for MulticoreFuture ...
[11:01:04.840] plan(): Setting new future strategy stack:
[11:01:04.840] List of future strategies:
[11:01:04.840] 1. sequential:
[11:01:04.840]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.840]    - tweaked: FALSE
[11:01:04.840]    - call: NULL
[11:01:04.841] plan(): nbrOfWorkers() = 1
[11:01:04.843] plan(): Setting new future strategy stack:
[11:01:04.843] List of future strategies:
[11:01:04.843] 1. multicore:
[11:01:04.843]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:04.843]    - tweaked: FALSE
[11:01:04.843]    - call: plan(strategy, substitute = FALSE)
[11:01:04.846] plan(): nbrOfWorkers() = 2
[11:01:04.847] result() for MulticoreFuture ...
[11:01:04.847] result() for MulticoreFuture ... done
[11:01:04.847] result() for MulticoreFuture ... done
[11:01:04.847] result() for MulticoreFuture ...
[11:01:04.847] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x55b7e1b30498>
Using '...' in a formula
[11:01:04.848] getGlobalsAndPackages() ...
[11:01:04.848] Searching for globals...
[11:01:04.852] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[11:01:04.852] Searching for globals ... DONE
[11:01:04.852] Resolving globals: FALSE
[11:01:04.852] Tweak future expression to call with '...' arguments ...
[11:01:04.853] The total size of the 3 globals is 1.94 KiB (1985 bytes)
[11:01:04.853] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 1.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (1.77 KiB of class ‘function’), ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:04.853] - globals: [3] ‘fcn’, ‘x’, ‘y’
[11:01:04.854] 
[11:01:04.854] getGlobalsAndPackages() ... DONE
[11:01:04.854] run() for ‘Future’ ...
[11:01:04.854] - state: ‘created’
[11:01:04.854] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:04.856] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:04.859] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:04.859]   - Field: ‘label’
[11:01:04.859]   - Field: ‘local’
[11:01:04.859]   - Field: ‘owner’
[11:01:04.859]   - Field: ‘envir’
[11:01:04.859]   - Field: ‘workers’
[11:01:04.860]   - Field: ‘packages’
[11:01:04.860]   - Field: ‘gc’
[11:01:04.860]   - Field: ‘job’
[11:01:04.860]   - Field: ‘conditions’
[11:01:04.860]   - Field: ‘expr’
[11:01:04.860]   - Field: ‘uuid’
[11:01:04.860]   - Field: ‘seed’
[11:01:04.860]   - Field: ‘version’
[11:01:04.860]   - Field: ‘result’
[11:01:04.861]   - Field: ‘asynchronous’
[11:01:04.861]   - Field: ‘calls’
[11:01:04.861]   - Field: ‘globals’
[11:01:04.861]   - Field: ‘stdout’
[11:01:04.861]   - Field: ‘earlySignal’
[11:01:04.861]   - Field: ‘lazy’
[11:01:04.861]   - Field: ‘state’
[11:01:04.861] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:04.861] - Launch lazy future ...
[11:01:04.862] Packages needed by the future expression (n = 0): <none>
[11:01:04.862] Packages needed by future strategies (n = 0): <none>
[11:01:04.862] {
[11:01:04.862]     {
[11:01:04.862]         {
[11:01:04.862]             ...future.startTime <- base::Sys.time()
[11:01:04.862]             {
[11:01:04.862]                 {
[11:01:04.862]                   {
[11:01:04.862]                     {
[11:01:04.862]                       base::local({
[11:01:04.862]                         has_future <- base::requireNamespace("future", 
[11:01:04.862]                           quietly = TRUE)
[11:01:04.862]                         if (has_future) {
[11:01:04.862]                           ns <- base::getNamespace("future")
[11:01:04.862]                           version <- ns[[".package"]][["version"]]
[11:01:04.862]                           if (is.null(version)) 
[11:01:04.862]                             version <- utils::packageVersion("future")
[11:01:04.862]                         }
[11:01:04.862]                         else {
[11:01:04.862]                           version <- NULL
[11:01:04.862]                         }
[11:01:04.862]                         if (!has_future || version < "1.8.0") {
[11:01:04.862]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:04.862]                             "", base::R.version$version.string), 
[11:01:04.862]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:04.862]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:04.862]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:04.862]                               "release", "version")], collapse = " "), 
[11:01:04.862]                             hostname = base::Sys.info()[["nodename"]])
[11:01:04.862]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:04.862]                             info)
[11:01:04.862]                           info <- base::paste(info, collapse = "; ")
[11:01:04.862]                           if (!has_future) {
[11:01:04.862]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:04.862]                               info)
[11:01:04.862]                           }
[11:01:04.862]                           else {
[11:01:04.862]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:04.862]                               info, version)
[11:01:04.862]                           }
[11:01:04.862]                           base::stop(msg)
[11:01:04.862]                         }
[11:01:04.862]                       })
[11:01:04.862]                     }
[11:01:04.862]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:04.862]                     base::options(mc.cores = 1L)
[11:01:04.862]                   }
[11:01:04.862]                   ...future.strategy.old <- future::plan("list")
[11:01:04.862]                   options(future.plan = NULL)
[11:01:04.862]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.862]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:04.862]                 }
[11:01:04.862]                 ...future.workdir <- getwd()
[11:01:04.862]             }
[11:01:04.862]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:04.862]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:04.862]         }
[11:01:04.862]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:04.862]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:04.862]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:04.862]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:04.862]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:04.862]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:04.862]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:04.862]             base::names(...future.oldOptions))
[11:01:04.862]     }
[11:01:04.862]     if (FALSE) {
[11:01:04.862]     }
[11:01:04.862]     else {
[11:01:04.862]         if (TRUE) {
[11:01:04.862]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:04.862]                 open = "w")
[11:01:04.862]         }
[11:01:04.862]         else {
[11:01:04.862]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:04.862]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:04.862]         }
[11:01:04.862]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:04.862]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:04.862]             base::sink(type = "output", split = FALSE)
[11:01:04.862]             base::close(...future.stdout)
[11:01:04.862]         }, add = TRUE)
[11:01:04.862]     }
[11:01:04.862]     ...future.frame <- base::sys.nframe()
[11:01:04.862]     ...future.conditions <- base::list()
[11:01:04.862]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:04.862]     if (FALSE) {
[11:01:04.862]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:04.862]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:04.862]     }
[11:01:04.862]     ...future.result <- base::tryCatch({
[11:01:04.862]         base::withCallingHandlers({
[11:01:04.862]             ...future.value <- base::withVisible(base::local({
[11:01:04.862]                 withCallingHandlers({
[11:01:04.862]                   fcn(x, y)
[11:01:04.862]                 }, immediateCondition = function(cond) {
[11:01:04.862]                   save_rds <- function (object, pathname, ...) 
[11:01:04.862]                   {
[11:01:04.862]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:04.862]                     if (file_test("-f", pathname_tmp)) {
[11:01:04.862]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.862]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:04.862]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.862]                         fi_tmp[["mtime"]])
[11:01:04.862]                     }
[11:01:04.862]                     tryCatch({
[11:01:04.862]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:04.862]                     }, error = function(ex) {
[11:01:04.862]                       msg <- conditionMessage(ex)
[11:01:04.862]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.862]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:04.862]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.862]                         fi_tmp[["mtime"]], msg)
[11:01:04.862]                       ex$message <- msg
[11:01:04.862]                       stop(ex)
[11:01:04.862]                     })
[11:01:04.862]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:04.862]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:04.862]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:04.862]                       fi_tmp <- file.info(pathname_tmp)
[11:01:04.862]                       fi <- file.info(pathname)
[11:01:04.862]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:04.862]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:04.862]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:04.862]                         fi[["size"]], fi[["mtime"]])
[11:01:04.862]                       stop(msg)
[11:01:04.862]                     }
[11:01:04.862]                     invisible(pathname)
[11:01:04.862]                   }
[11:01:04.862]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:04.862]                     rootPath = tempdir()) 
[11:01:04.862]                   {
[11:01:04.862]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:04.862]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:04.862]                       tmpdir = path, fileext = ".rds")
[11:01:04.862]                     save_rds(obj, file)
[11:01:04.862]                   }
[11:01:04.862]                   saveImmediateCondition(cond, path = "/tmp/RtmpAJ1ROR/.future/immediateConditions")
[11:01:04.862]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.862]                   {
[11:01:04.862]                     inherits <- base::inherits
[11:01:04.862]                     invokeRestart <- base::invokeRestart
[11:01:04.862]                     is.null <- base::is.null
[11:01:04.862]                     muffled <- FALSE
[11:01:04.862]                     if (inherits(cond, "message")) {
[11:01:04.862]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:04.862]                       if (muffled) 
[11:01:04.862]                         invokeRestart("muffleMessage")
[11:01:04.862]                     }
[11:01:04.862]                     else if (inherits(cond, "warning")) {
[11:01:04.862]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:04.862]                       if (muffled) 
[11:01:04.862]                         invokeRestart("muffleWarning")
[11:01:04.862]                     }
[11:01:04.862]                     else if (inherits(cond, "condition")) {
[11:01:04.862]                       if (!is.null(pattern)) {
[11:01:04.862]                         computeRestarts <- base::computeRestarts
[11:01:04.862]                         grepl <- base::grepl
[11:01:04.862]                         restarts <- computeRestarts(cond)
[11:01:04.862]                         for (restart in restarts) {
[11:01:04.862]                           name <- restart$name
[11:01:04.862]                           if (is.null(name)) 
[11:01:04.862]                             next
[11:01:04.862]                           if (!grepl(pattern, name)) 
[11:01:04.862]                             next
[11:01:04.862]                           invokeRestart(restart)
[11:01:04.862]                           muffled <- TRUE
[11:01:04.862]                           break
[11:01:04.862]                         }
[11:01:04.862]                       }
[11:01:04.862]                     }
[11:01:04.862]                     invisible(muffled)
[11:01:04.862]                   }
[11:01:04.862]                   muffleCondition(cond)
[11:01:04.862]                 })
[11:01:04.862]             }))
[11:01:04.862]             future::FutureResult(value = ...future.value$value, 
[11:01:04.862]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.862]                   ...future.rng), globalenv = if (FALSE) 
[11:01:04.862]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:04.862]                     ...future.globalenv.names))
[11:01:04.862]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:04.862]         }, condition = base::local({
[11:01:04.862]             c <- base::c
[11:01:04.862]             inherits <- base::inherits
[11:01:04.862]             invokeRestart <- base::invokeRestart
[11:01:04.862]             length <- base::length
[11:01:04.862]             list <- base::list
[11:01:04.862]             seq.int <- base::seq.int
[11:01:04.862]             signalCondition <- base::signalCondition
[11:01:04.862]             sys.calls <- base::sys.calls
[11:01:04.862]             `[[` <- base::`[[`
[11:01:04.862]             `+` <- base::`+`
[11:01:04.862]             `<<-` <- base::`<<-`
[11:01:04.862]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:04.862]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:04.862]                   3L)]
[11:01:04.862]             }
[11:01:04.862]             function(cond) {
[11:01:04.862]                 is_error <- inherits(cond, "error")
[11:01:04.862]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:04.862]                   NULL)
[11:01:04.862]                 if (is_error) {
[11:01:04.862]                   sessionInformation <- function() {
[11:01:04.862]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:04.862]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:04.862]                       search = base::search(), system = base::Sys.info())
[11:01:04.862]                   }
[11:01:04.862]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.862]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:04.862]                     cond$call), session = sessionInformation(), 
[11:01:04.862]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:04.862]                   signalCondition(cond)
[11:01:04.862]                 }
[11:01:04.862]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:04.862]                 "immediateCondition"))) {
[11:01:04.862]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:04.862]                   ...future.conditions[[length(...future.conditions) + 
[11:01:04.862]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:04.862]                   if (TRUE && !signal) {
[11:01:04.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.862]                     {
[11:01:04.862]                       inherits <- base::inherits
[11:01:04.862]                       invokeRestart <- base::invokeRestart
[11:01:04.862]                       is.null <- base::is.null
[11:01:04.862]                       muffled <- FALSE
[11:01:04.862]                       if (inherits(cond, "message")) {
[11:01:04.862]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.862]                         if (muffled) 
[11:01:04.862]                           invokeRestart("muffleMessage")
[11:01:04.862]                       }
[11:01:04.862]                       else if (inherits(cond, "warning")) {
[11:01:04.862]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.862]                         if (muffled) 
[11:01:04.862]                           invokeRestart("muffleWarning")
[11:01:04.862]                       }
[11:01:04.862]                       else if (inherits(cond, "condition")) {
[11:01:04.862]                         if (!is.null(pattern)) {
[11:01:04.862]                           computeRestarts <- base::computeRestarts
[11:01:04.862]                           grepl <- base::grepl
[11:01:04.862]                           restarts <- computeRestarts(cond)
[11:01:04.862]                           for (restart in restarts) {
[11:01:04.862]                             name <- restart$name
[11:01:04.862]                             if (is.null(name)) 
[11:01:04.862]                               next
[11:01:04.862]                             if (!grepl(pattern, name)) 
[11:01:04.862]                               next
[11:01:04.862]                             invokeRestart(restart)
[11:01:04.862]                             muffled <- TRUE
[11:01:04.862]                             break
[11:01:04.862]                           }
[11:01:04.862]                         }
[11:01:04.862]                       }
[11:01:04.862]                       invisible(muffled)
[11:01:04.862]                     }
[11:01:04.862]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.862]                   }
[11:01:04.862]                 }
[11:01:04.862]                 else {
[11:01:04.862]                   if (TRUE) {
[11:01:04.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:04.862]                     {
[11:01:04.862]                       inherits <- base::inherits
[11:01:04.862]                       invokeRestart <- base::invokeRestart
[11:01:04.862]                       is.null <- base::is.null
[11:01:04.862]                       muffled <- FALSE
[11:01:04.862]                       if (inherits(cond, "message")) {
[11:01:04.862]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:04.862]                         if (muffled) 
[11:01:04.862]                           invokeRestart("muffleMessage")
[11:01:04.862]                       }
[11:01:04.862]                       else if (inherits(cond, "warning")) {
[11:01:04.862]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:04.862]                         if (muffled) 
[11:01:04.862]                           invokeRestart("muffleWarning")
[11:01:04.862]                       }
[11:01:04.862]                       else if (inherits(cond, "condition")) {
[11:01:04.862]                         if (!is.null(pattern)) {
[11:01:04.862]                           computeRestarts <- base::computeRestarts
[11:01:04.862]                           grepl <- base::grepl
[11:01:04.862]                           restarts <- computeRestarts(cond)
[11:01:04.862]                           for (restart in restarts) {
[11:01:04.862]                             name <- restart$name
[11:01:04.862]                             if (is.null(name)) 
[11:01:04.862]                               next
[11:01:04.862]                             if (!grepl(pattern, name)) 
[11:01:04.862]                               next
[11:01:04.862]                             invokeRestart(restart)
[11:01:04.862]                             muffled <- TRUE
[11:01:04.862]                             break
[11:01:04.862]                           }
[11:01:04.862]                         }
[11:01:04.862]                       }
[11:01:04.862]                       invisible(muffled)
[11:01:04.862]                     }
[11:01:04.862]                     muffleCondition(cond, pattern = "^muffle")
[11:01:04.862]                   }
[11:01:04.862]                 }
[11:01:04.862]             }
[11:01:04.862]         }))
[11:01:04.862]     }, error = function(ex) {
[11:01:04.862]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:04.862]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:04.862]                 ...future.rng), started = ...future.startTime, 
[11:01:04.862]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:04.862]             version = "1.8"), class = "FutureResult")
[11:01:04.862]     }, finally = {
[11:01:04.862]         if (!identical(...future.workdir, getwd())) 
[11:01:04.862]             setwd(...future.workdir)
[11:01:04.862]         {
[11:01:04.862]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:04.862]                 ...future.oldOptions$nwarnings <- NULL
[11:01:04.862]             }
[11:01:04.862]             base::options(...future.oldOptions)
[11:01:04.862]             if (.Platform$OS.type == "windows") {
[11:01:04.862]                 old_names <- names(...future.oldEnvVars)
[11:01:04.862]                 envs <- base::Sys.getenv()
[11:01:04.862]                 names <- names(envs)
[11:01:04.862]                 common <- intersect(names, old_names)
[11:01:04.862]                 added <- setdiff(names, old_names)
[11:01:04.862]                 removed <- setdiff(old_names, names)
[11:01:04.862]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:04.862]                   envs[common]]
[11:01:04.862]                 NAMES <- toupper(changed)
[11:01:04.862]                 args <- list()
[11:01:04.862]                 for (kk in seq_along(NAMES)) {
[11:01:04.862]                   name <- changed[[kk]]
[11:01:04.862]                   NAME <- NAMES[[kk]]
[11:01:04.862]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.862]                     next
[11:01:04.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.862]                 }
[11:01:04.862]                 NAMES <- toupper(added)
[11:01:04.862]                 for (kk in seq_along(NAMES)) {
[11:01:04.862]                   name <- added[[kk]]
[11:01:04.862]                   NAME <- NAMES[[kk]]
[11:01:04.862]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.862]                     next
[11:01:04.862]                   args[[name]] <- ""
[11:01:04.862]                 }
[11:01:04.862]                 NAMES <- toupper(removed)
[11:01:04.862]                 for (kk in seq_along(NAMES)) {
[11:01:04.862]                   name <- removed[[kk]]
[11:01:04.862]                   NAME <- NAMES[[kk]]
[11:01:04.862]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:04.862]                     next
[11:01:04.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:04.862]                 }
[11:01:04.862]                 if (length(args) > 0) 
[11:01:04.862]                   base::do.call(base::Sys.setenv, args = args)
[11:01:04.862]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:04.862]             }
[11:01:04.862]             else {
[11:01:04.862]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:04.862]             }
[11:01:04.862]             {
[11:01:04.862]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:04.862]                   0L) {
[11:01:04.862]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:04.862]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:04.862]                   base::options(opts)
[11:01:04.862]                 }
[11:01:04.862]                 {
[11:01:04.862]                   {
[11:01:04.862]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:04.862]                     NULL
[11:01:04.862]                   }
[11:01:04.862]                   options(future.plan = NULL)
[11:01:04.862]                   if (is.na(NA_character_)) 
[11:01:04.862]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:04.862]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:04.862]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:04.862]                     .init = FALSE)
[11:01:04.862]                 }
[11:01:04.862]             }
[11:01:04.862]         }
[11:01:04.862]     })
[11:01:04.862]     if (TRUE) {
[11:01:04.862]         base::sink(type = "output", split = FALSE)
[11:01:04.862]         if (TRUE) {
[11:01:04.862]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:04.862]         }
[11:01:04.862]         else {
[11:01:04.862]             ...future.result["stdout"] <- base::list(NULL)
[11:01:04.862]         }
[11:01:04.862]         base::close(...future.stdout)
[11:01:04.862]         ...future.stdout <- NULL
[11:01:04.862]     }
[11:01:04.862]     ...future.result$conditions <- ...future.conditions
[11:01:04.862]     ...future.result$finished <- base::Sys.time()
[11:01:04.862]     ...future.result
[11:01:04.862] }
[11:01:04.865] assign_globals() ...
[11:01:04.865] List of 3
[11:01:04.865]  $ fcn:function (x, y)  
[11:01:04.865]  $ x  : int [1:2] 1 2
[11:01:04.865]  $ y  : num 3
[11:01:04.865]  - attr(*, "where")=List of 3
[11:01:04.865]   ..$ fcn:<environment: R_EmptyEnv> 
[11:01:04.865]   ..$ x  :<environment: R_EmptyEnv> 
[11:01:04.865]   ..$ y  :<environment: R_EmptyEnv> 
[11:01:04.865]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:04.865]  - attr(*, "resolved")= logi FALSE
[11:01:04.865]  - attr(*, "total_size")= num 1985
[11:01:04.865]  - attr(*, "already-done")= logi TRUE
[11:01:04.869] - reassign environment for ‘fcn’
[11:01:04.869] - copied ‘fcn’ to environment
[11:01:04.869] - copied ‘x’ to environment
[11:01:04.869] - copied ‘y’ to environment
[11:01:04.869] assign_globals() ... done
[11:01:04.869] requestCore(): workers = 2
[11:01:04.871] MulticoreFuture started
[11:01:04.871] - Launch lazy future ... done
[11:01:04.871] run() for ‘MulticoreFuture’ ... done
[11:01:04.872] result() for MulticoreFuture ...
[11:01:04.872] plan(): Setting new future strategy stack:
[11:01:04.872] List of future strategies:
[11:01:04.872] 1. sequential:
[11:01:04.872]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:04.872]    - tweaked: FALSE
[11:01:04.872]    - call: NULL
[11:01:04.873] plan(): nbrOfWorkers() = 1
[11:01:04.875] plan(): Setting new future strategy stack:
[11:01:04.875] List of future strategies:
[11:01:04.875] 1. multicore:
[11:01:04.875]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:04.875]    - tweaked: FALSE
[11:01:04.875]    - call: plan(strategy, substitute = FALSE)
[11:01:04.878] plan(): nbrOfWorkers() = 2
[11:01:04.879] result() for MulticoreFuture ...
[11:01:04.879] result() for MulticoreFuture ... done
[11:01:04.879] result() for MulticoreFuture ... done
[11:01:04.879] result() for MulticoreFuture ...
[11:01:04.879] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[11:01:04.880] plan(): Setting new future strategy stack:
[11:01:04.880] List of future strategies:
[11:01:04.880] 1. multisession:
[11:01:04.880]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:04.880]    - tweaked: FALSE
[11:01:04.880]    - call: plan(strategy, substitute = FALSE)
[11:01:04.881] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:01:04.881] multisession:
[11:01:04.881] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:04.881] - tweaked: FALSE
[11:01:04.881] - call: plan(strategy, substitute = FALSE)
[11:01:04.885] getGlobalsAndPackages() ...
[11:01:04.885] Not searching for globals
[11:01:04.886] - globals: [0] <none>
[11:01:04.886] getGlobalsAndPackages() ... DONE
[11:01:05.363] Packages needed by the future expression (n = 0): <none>
[11:01:05.363] Packages needed by future strategies (n = 0): <none>
[11:01:05.363] {
[11:01:05.363]     {
[11:01:05.363]         {
[11:01:05.363]             ...future.startTime <- base::Sys.time()
[11:01:05.363]             {
[11:01:05.363]                 {
[11:01:05.363]                   {
[11:01:05.363]                     {
[11:01:05.363]                       base::local({
[11:01:05.363]                         has_future <- base::requireNamespace("future", 
[11:01:05.363]                           quietly = TRUE)
[11:01:05.363]                         if (has_future) {
[11:01:05.363]                           ns <- base::getNamespace("future")
[11:01:05.363]                           version <- ns[[".package"]][["version"]]
[11:01:05.363]                           if (is.null(version)) 
[11:01:05.363]                             version <- utils::packageVersion("future")
[11:01:05.363]                         }
[11:01:05.363]                         else {
[11:01:05.363]                           version <- NULL
[11:01:05.363]                         }
[11:01:05.363]                         if (!has_future || version < "1.8.0") {
[11:01:05.363]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:05.363]                             "", base::R.version$version.string), 
[11:01:05.363]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:05.363]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:05.363]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:05.363]                               "release", "version")], collapse = " "), 
[11:01:05.363]                             hostname = base::Sys.info()[["nodename"]])
[11:01:05.363]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:05.363]                             info)
[11:01:05.363]                           info <- base::paste(info, collapse = "; ")
[11:01:05.363]                           if (!has_future) {
[11:01:05.363]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:05.363]                               info)
[11:01:05.363]                           }
[11:01:05.363]                           else {
[11:01:05.363]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:05.363]                               info, version)
[11:01:05.363]                           }
[11:01:05.363]                           base::stop(msg)
[11:01:05.363]                         }
[11:01:05.363]                       })
[11:01:05.363]                     }
[11:01:05.363]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:05.363]                     base::options(mc.cores = 1L)
[11:01:05.363]                   }
[11:01:05.363]                   ...future.strategy.old <- future::plan("list")
[11:01:05.363]                   options(future.plan = NULL)
[11:01:05.363]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.363]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:05.363]                 }
[11:01:05.363]                 ...future.workdir <- getwd()
[11:01:05.363]             }
[11:01:05.363]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:05.363]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:05.363]         }
[11:01:05.363]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:05.363]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:05.363]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:05.363]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:05.363]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:05.363]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:05.363]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:05.363]             base::names(...future.oldOptions))
[11:01:05.363]     }
[11:01:05.363]     if (FALSE) {
[11:01:05.363]     }
[11:01:05.363]     else {
[11:01:05.363]         if (TRUE) {
[11:01:05.363]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:05.363]                 open = "w")
[11:01:05.363]         }
[11:01:05.363]         else {
[11:01:05.363]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:05.363]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:05.363]         }
[11:01:05.363]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:05.363]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:05.363]             base::sink(type = "output", split = FALSE)
[11:01:05.363]             base::close(...future.stdout)
[11:01:05.363]         }, add = TRUE)
[11:01:05.363]     }
[11:01:05.363]     ...future.frame <- base::sys.nframe()
[11:01:05.363]     ...future.conditions <- base::list()
[11:01:05.363]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:05.363]     if (FALSE) {
[11:01:05.363]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:05.363]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:05.363]     }
[11:01:05.363]     ...future.result <- base::tryCatch({
[11:01:05.363]         base::withCallingHandlers({
[11:01:05.363]             ...future.value <- base::withVisible(base::local({
[11:01:05.363]                 ...future.makeSendCondition <- base::local({
[11:01:05.363]                   sendCondition <- NULL
[11:01:05.363]                   function(frame = 1L) {
[11:01:05.363]                     if (is.function(sendCondition)) 
[11:01:05.363]                       return(sendCondition)
[11:01:05.363]                     ns <- getNamespace("parallel")
[11:01:05.363]                     if (exists("sendData", mode = "function", 
[11:01:05.363]                       envir = ns)) {
[11:01:05.363]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:05.363]                         envir = ns)
[11:01:05.363]                       envir <- sys.frame(frame)
[11:01:05.363]                       master <- NULL
[11:01:05.363]                       while (!identical(envir, .GlobalEnv) && 
[11:01:05.363]                         !identical(envir, emptyenv())) {
[11:01:05.363]                         if (exists("master", mode = "list", envir = envir, 
[11:01:05.363]                           inherits = FALSE)) {
[11:01:05.363]                           master <- get("master", mode = "list", 
[11:01:05.363]                             envir = envir, inherits = FALSE)
[11:01:05.363]                           if (inherits(master, c("SOCKnode", 
[11:01:05.363]                             "SOCK0node"))) {
[11:01:05.363]                             sendCondition <<- function(cond) {
[11:01:05.363]                               data <- list(type = "VALUE", value = cond, 
[11:01:05.363]                                 success = TRUE)
[11:01:05.363]                               parallel_sendData(master, data)
[11:01:05.363]                             }
[11:01:05.363]                             return(sendCondition)
[11:01:05.363]                           }
[11:01:05.363]                         }
[11:01:05.363]                         frame <- frame + 1L
[11:01:05.363]                         envir <- sys.frame(frame)
[11:01:05.363]                       }
[11:01:05.363]                     }
[11:01:05.363]                     sendCondition <<- function(cond) NULL
[11:01:05.363]                   }
[11:01:05.363]                 })
[11:01:05.363]                 withCallingHandlers({
[11:01:05.363]                   NA
[11:01:05.363]                 }, immediateCondition = function(cond) {
[11:01:05.363]                   sendCondition <- ...future.makeSendCondition()
[11:01:05.363]                   sendCondition(cond)
[11:01:05.363]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.363]                   {
[11:01:05.363]                     inherits <- base::inherits
[11:01:05.363]                     invokeRestart <- base::invokeRestart
[11:01:05.363]                     is.null <- base::is.null
[11:01:05.363]                     muffled <- FALSE
[11:01:05.363]                     if (inherits(cond, "message")) {
[11:01:05.363]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:05.363]                       if (muffled) 
[11:01:05.363]                         invokeRestart("muffleMessage")
[11:01:05.363]                     }
[11:01:05.363]                     else if (inherits(cond, "warning")) {
[11:01:05.363]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:05.363]                       if (muffled) 
[11:01:05.363]                         invokeRestart("muffleWarning")
[11:01:05.363]                     }
[11:01:05.363]                     else if (inherits(cond, "condition")) {
[11:01:05.363]                       if (!is.null(pattern)) {
[11:01:05.363]                         computeRestarts <- base::computeRestarts
[11:01:05.363]                         grepl <- base::grepl
[11:01:05.363]                         restarts <- computeRestarts(cond)
[11:01:05.363]                         for (restart in restarts) {
[11:01:05.363]                           name <- restart$name
[11:01:05.363]                           if (is.null(name)) 
[11:01:05.363]                             next
[11:01:05.363]                           if (!grepl(pattern, name)) 
[11:01:05.363]                             next
[11:01:05.363]                           invokeRestart(restart)
[11:01:05.363]                           muffled <- TRUE
[11:01:05.363]                           break
[11:01:05.363]                         }
[11:01:05.363]                       }
[11:01:05.363]                     }
[11:01:05.363]                     invisible(muffled)
[11:01:05.363]                   }
[11:01:05.363]                   muffleCondition(cond)
[11:01:05.363]                 })
[11:01:05.363]             }))
[11:01:05.363]             future::FutureResult(value = ...future.value$value, 
[11:01:05.363]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.363]                   ...future.rng), globalenv = if (FALSE) 
[11:01:05.363]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:05.363]                     ...future.globalenv.names))
[11:01:05.363]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:05.363]         }, condition = base::local({
[11:01:05.363]             c <- base::c
[11:01:05.363]             inherits <- base::inherits
[11:01:05.363]             invokeRestart <- base::invokeRestart
[11:01:05.363]             length <- base::length
[11:01:05.363]             list <- base::list
[11:01:05.363]             seq.int <- base::seq.int
[11:01:05.363]             signalCondition <- base::signalCondition
[11:01:05.363]             sys.calls <- base::sys.calls
[11:01:05.363]             `[[` <- base::`[[`
[11:01:05.363]             `+` <- base::`+`
[11:01:05.363]             `<<-` <- base::`<<-`
[11:01:05.363]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:05.363]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:05.363]                   3L)]
[11:01:05.363]             }
[11:01:05.363]             function(cond) {
[11:01:05.363]                 is_error <- inherits(cond, "error")
[11:01:05.363]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:05.363]                   NULL)
[11:01:05.363]                 if (is_error) {
[11:01:05.363]                   sessionInformation <- function() {
[11:01:05.363]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:05.363]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:05.363]                       search = base::search(), system = base::Sys.info())
[11:01:05.363]                   }
[11:01:05.363]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.363]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:05.363]                     cond$call), session = sessionInformation(), 
[11:01:05.363]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:05.363]                   signalCondition(cond)
[11:01:05.363]                 }
[11:01:05.363]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:05.363]                 "immediateCondition"))) {
[11:01:05.363]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:05.363]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.363]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:05.363]                   if (TRUE && !signal) {
[11:01:05.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.363]                     {
[11:01:05.363]                       inherits <- base::inherits
[11:01:05.363]                       invokeRestart <- base::invokeRestart
[11:01:05.363]                       is.null <- base::is.null
[11:01:05.363]                       muffled <- FALSE
[11:01:05.363]                       if (inherits(cond, "message")) {
[11:01:05.363]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.363]                         if (muffled) 
[11:01:05.363]                           invokeRestart("muffleMessage")
[11:01:05.363]                       }
[11:01:05.363]                       else if (inherits(cond, "warning")) {
[11:01:05.363]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.363]                         if (muffled) 
[11:01:05.363]                           invokeRestart("muffleWarning")
[11:01:05.363]                       }
[11:01:05.363]                       else if (inherits(cond, "condition")) {
[11:01:05.363]                         if (!is.null(pattern)) {
[11:01:05.363]                           computeRestarts <- base::computeRestarts
[11:01:05.363]                           grepl <- base::grepl
[11:01:05.363]                           restarts <- computeRestarts(cond)
[11:01:05.363]                           for (restart in restarts) {
[11:01:05.363]                             name <- restart$name
[11:01:05.363]                             if (is.null(name)) 
[11:01:05.363]                               next
[11:01:05.363]                             if (!grepl(pattern, name)) 
[11:01:05.363]                               next
[11:01:05.363]                             invokeRestart(restart)
[11:01:05.363]                             muffled <- TRUE
[11:01:05.363]                             break
[11:01:05.363]                           }
[11:01:05.363]                         }
[11:01:05.363]                       }
[11:01:05.363]                       invisible(muffled)
[11:01:05.363]                     }
[11:01:05.363]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.363]                   }
[11:01:05.363]                 }
[11:01:05.363]                 else {
[11:01:05.363]                   if (TRUE) {
[11:01:05.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.363]                     {
[11:01:05.363]                       inherits <- base::inherits
[11:01:05.363]                       invokeRestart <- base::invokeRestart
[11:01:05.363]                       is.null <- base::is.null
[11:01:05.363]                       muffled <- FALSE
[11:01:05.363]                       if (inherits(cond, "message")) {
[11:01:05.363]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.363]                         if (muffled) 
[11:01:05.363]                           invokeRestart("muffleMessage")
[11:01:05.363]                       }
[11:01:05.363]                       else if (inherits(cond, "warning")) {
[11:01:05.363]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.363]                         if (muffled) 
[11:01:05.363]                           invokeRestart("muffleWarning")
[11:01:05.363]                       }
[11:01:05.363]                       else if (inherits(cond, "condition")) {
[11:01:05.363]                         if (!is.null(pattern)) {
[11:01:05.363]                           computeRestarts <- base::computeRestarts
[11:01:05.363]                           grepl <- base::grepl
[11:01:05.363]                           restarts <- computeRestarts(cond)
[11:01:05.363]                           for (restart in restarts) {
[11:01:05.363]                             name <- restart$name
[11:01:05.363]                             if (is.null(name)) 
[11:01:05.363]                               next
[11:01:05.363]                             if (!grepl(pattern, name)) 
[11:01:05.363]                               next
[11:01:05.363]                             invokeRestart(restart)
[11:01:05.363]                             muffled <- TRUE
[11:01:05.363]                             break
[11:01:05.363]                           }
[11:01:05.363]                         }
[11:01:05.363]                       }
[11:01:05.363]                       invisible(muffled)
[11:01:05.363]                     }
[11:01:05.363]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.363]                   }
[11:01:05.363]                 }
[11:01:05.363]             }
[11:01:05.363]         }))
[11:01:05.363]     }, error = function(ex) {
[11:01:05.363]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:05.363]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.363]                 ...future.rng), started = ...future.startTime, 
[11:01:05.363]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:05.363]             version = "1.8"), class = "FutureResult")
[11:01:05.363]     }, finally = {
[11:01:05.363]         if (!identical(...future.workdir, getwd())) 
[11:01:05.363]             setwd(...future.workdir)
[11:01:05.363]         {
[11:01:05.363]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:05.363]                 ...future.oldOptions$nwarnings <- NULL
[11:01:05.363]             }
[11:01:05.363]             base::options(...future.oldOptions)
[11:01:05.363]             if (.Platform$OS.type == "windows") {
[11:01:05.363]                 old_names <- names(...future.oldEnvVars)
[11:01:05.363]                 envs <- base::Sys.getenv()
[11:01:05.363]                 names <- names(envs)
[11:01:05.363]                 common <- intersect(names, old_names)
[11:01:05.363]                 added <- setdiff(names, old_names)
[11:01:05.363]                 removed <- setdiff(old_names, names)
[11:01:05.363]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:05.363]                   envs[common]]
[11:01:05.363]                 NAMES <- toupper(changed)
[11:01:05.363]                 args <- list()
[11:01:05.363]                 for (kk in seq_along(NAMES)) {
[11:01:05.363]                   name <- changed[[kk]]
[11:01:05.363]                   NAME <- NAMES[[kk]]
[11:01:05.363]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.363]                     next
[11:01:05.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.363]                 }
[11:01:05.363]                 NAMES <- toupper(added)
[11:01:05.363]                 for (kk in seq_along(NAMES)) {
[11:01:05.363]                   name <- added[[kk]]
[11:01:05.363]                   NAME <- NAMES[[kk]]
[11:01:05.363]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.363]                     next
[11:01:05.363]                   args[[name]] <- ""
[11:01:05.363]                 }
[11:01:05.363]                 NAMES <- toupper(removed)
[11:01:05.363]                 for (kk in seq_along(NAMES)) {
[11:01:05.363]                   name <- removed[[kk]]
[11:01:05.363]                   NAME <- NAMES[[kk]]
[11:01:05.363]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.363]                     next
[11:01:05.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.363]                 }
[11:01:05.363]                 if (length(args) > 0) 
[11:01:05.363]                   base::do.call(base::Sys.setenv, args = args)
[11:01:05.363]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:05.363]             }
[11:01:05.363]             else {
[11:01:05.363]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:05.363]             }
[11:01:05.363]             {
[11:01:05.363]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:05.363]                   0L) {
[11:01:05.363]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:05.363]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:05.363]                   base::options(opts)
[11:01:05.363]                 }
[11:01:05.363]                 {
[11:01:05.363]                   {
[11:01:05.363]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:05.363]                     NULL
[11:01:05.363]                   }
[11:01:05.363]                   options(future.plan = NULL)
[11:01:05.363]                   if (is.na(NA_character_)) 
[11:01:05.363]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.363]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:05.363]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:05.363]                     .init = FALSE)
[11:01:05.363]                 }
[11:01:05.363]             }
[11:01:05.363]         }
[11:01:05.363]     })
[11:01:05.363]     if (TRUE) {
[11:01:05.363]         base::sink(type = "output", split = FALSE)
[11:01:05.363]         if (TRUE) {
[11:01:05.363]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:05.363]         }
[11:01:05.363]         else {
[11:01:05.363]             ...future.result["stdout"] <- base::list(NULL)
[11:01:05.363]         }
[11:01:05.363]         base::close(...future.stdout)
[11:01:05.363]         ...future.stdout <- NULL
[11:01:05.363]     }
[11:01:05.363]     ...future.result$conditions <- ...future.conditions
[11:01:05.363]     ...future.result$finished <- base::Sys.time()
[11:01:05.363]     ...future.result
[11:01:05.363] }
[11:01:05.415] MultisessionFuture started
[11:01:05.415] result() for ClusterFuture ...
[11:01:05.415] receiveMessageFromWorker() for ClusterFuture ...
[11:01:05.416] - Validating connection of MultisessionFuture
[11:01:05.446] - received message: FutureResult
[11:01:05.446] - Received FutureResult
[11:01:05.446] - Erased future from FutureRegistry
[11:01:05.446] result() for ClusterFuture ...
[11:01:05.446] - result already collected: FutureResult
[11:01:05.446] result() for ClusterFuture ... done
[11:01:05.447] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:05.447] result() for ClusterFuture ... done
[11:01:05.447] result() for ClusterFuture ...
[11:01:05.447] - result already collected: FutureResult
[11:01:05.447] result() for ClusterFuture ... done
[11:01:05.447] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:01:05.449] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x55b7e3b11768>
Arguments '...' exists: TRUE
[11:01:05.449] getGlobalsAndPackages() ...
[11:01:05.449] Searching for globals...
[11:01:05.450] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[11:01:05.451] Searching for globals ... DONE
[11:01:05.451] Resolving globals: FALSE
[11:01:05.451] Tweak future expression to call with '...' arguments ...
[11:01:05.451] {
[11:01:05.451]     do.call(function(...) {
[11:01:05.451]         sum(x, ...)
[11:01:05.451]     }, args = future.call.arguments)
[11:01:05.451] }
[11:01:05.451] Tweak future expression to call with '...' arguments ... DONE
[11:01:05.451] The total size of the 2 globals is 246 bytes (246 bytes)
[11:01:05.452] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 246 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘future.call.arguments’ (113 bytes of class ‘list’)
[11:01:05.452] - globals: [2] ‘x’, ‘future.call.arguments’
[11:01:05.452] 
[11:01:05.452] getGlobalsAndPackages() ... DONE
[11:01:05.452] run() for ‘Future’ ...
[11:01:05.452] - state: ‘created’
[11:01:05.453] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:05.466] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:05.466] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:05.466]   - Field: ‘node’
[11:01:05.467]   - Field: ‘label’
[11:01:05.467]   - Field: ‘local’
[11:01:05.467]   - Field: ‘owner’
[11:01:05.467]   - Field: ‘envir’
[11:01:05.467]   - Field: ‘workers’
[11:01:05.467]   - Field: ‘packages’
[11:01:05.467]   - Field: ‘gc’
[11:01:05.467]   - Field: ‘conditions’
[11:01:05.467]   - Field: ‘persistent’
[11:01:05.467]   - Field: ‘expr’
[11:01:05.467]   - Field: ‘uuid’
[11:01:05.467]   - Field: ‘seed’
[11:01:05.468]   - Field: ‘version’
[11:01:05.468]   - Field: ‘result’
[11:01:05.468]   - Field: ‘asynchronous’
[11:01:05.468]   - Field: ‘calls’
[11:01:05.468]   - Field: ‘globals’
[11:01:05.468]   - Field: ‘stdout’
[11:01:05.468]   - Field: ‘earlySignal’
[11:01:05.468]   - Field: ‘lazy’
[11:01:05.468]   - Field: ‘state’
[11:01:05.468] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:05.468] - Launch lazy future ...
[11:01:05.469] Packages needed by the future expression (n = 0): <none>
[11:01:05.469] Packages needed by future strategies (n = 0): <none>
[11:01:05.469] {
[11:01:05.469]     {
[11:01:05.469]         {
[11:01:05.469]             ...future.startTime <- base::Sys.time()
[11:01:05.469]             {
[11:01:05.469]                 {
[11:01:05.469]                   {
[11:01:05.469]                     {
[11:01:05.469]                       base::local({
[11:01:05.469]                         has_future <- base::requireNamespace("future", 
[11:01:05.469]                           quietly = TRUE)
[11:01:05.469]                         if (has_future) {
[11:01:05.469]                           ns <- base::getNamespace("future")
[11:01:05.469]                           version <- ns[[".package"]][["version"]]
[11:01:05.469]                           if (is.null(version)) 
[11:01:05.469]                             version <- utils::packageVersion("future")
[11:01:05.469]                         }
[11:01:05.469]                         else {
[11:01:05.469]                           version <- NULL
[11:01:05.469]                         }
[11:01:05.469]                         if (!has_future || version < "1.8.0") {
[11:01:05.469]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:05.469]                             "", base::R.version$version.string), 
[11:01:05.469]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:05.469]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:05.469]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:05.469]                               "release", "version")], collapse = " "), 
[11:01:05.469]                             hostname = base::Sys.info()[["nodename"]])
[11:01:05.469]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:05.469]                             info)
[11:01:05.469]                           info <- base::paste(info, collapse = "; ")
[11:01:05.469]                           if (!has_future) {
[11:01:05.469]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:05.469]                               info)
[11:01:05.469]                           }
[11:01:05.469]                           else {
[11:01:05.469]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:05.469]                               info, version)
[11:01:05.469]                           }
[11:01:05.469]                           base::stop(msg)
[11:01:05.469]                         }
[11:01:05.469]                       })
[11:01:05.469]                     }
[11:01:05.469]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:05.469]                     base::options(mc.cores = 1L)
[11:01:05.469]                   }
[11:01:05.469]                   ...future.strategy.old <- future::plan("list")
[11:01:05.469]                   options(future.plan = NULL)
[11:01:05.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:05.469]                 }
[11:01:05.469]                 ...future.workdir <- getwd()
[11:01:05.469]             }
[11:01:05.469]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:05.469]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:05.469]         }
[11:01:05.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:05.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:05.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:05.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:05.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:05.469]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:05.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:05.469]             base::names(...future.oldOptions))
[11:01:05.469]     }
[11:01:05.469]     if (FALSE) {
[11:01:05.469]     }
[11:01:05.469]     else {
[11:01:05.469]         if (TRUE) {
[11:01:05.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:05.469]                 open = "w")
[11:01:05.469]         }
[11:01:05.469]         else {
[11:01:05.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:05.469]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:05.469]         }
[11:01:05.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:05.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:05.469]             base::sink(type = "output", split = FALSE)
[11:01:05.469]             base::close(...future.stdout)
[11:01:05.469]         }, add = TRUE)
[11:01:05.469]     }
[11:01:05.469]     ...future.frame <- base::sys.nframe()
[11:01:05.469]     ...future.conditions <- base::list()
[11:01:05.469]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:05.469]     if (FALSE) {
[11:01:05.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:05.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:05.469]     }
[11:01:05.469]     ...future.result <- base::tryCatch({
[11:01:05.469]         base::withCallingHandlers({
[11:01:05.469]             ...future.value <- base::withVisible(base::local({
[11:01:05.469]                 ...future.makeSendCondition <- base::local({
[11:01:05.469]                   sendCondition <- NULL
[11:01:05.469]                   function(frame = 1L) {
[11:01:05.469]                     if (is.function(sendCondition)) 
[11:01:05.469]                       return(sendCondition)
[11:01:05.469]                     ns <- getNamespace("parallel")
[11:01:05.469]                     if (exists("sendData", mode = "function", 
[11:01:05.469]                       envir = ns)) {
[11:01:05.469]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:05.469]                         envir = ns)
[11:01:05.469]                       envir <- sys.frame(frame)
[11:01:05.469]                       master <- NULL
[11:01:05.469]                       while (!identical(envir, .GlobalEnv) && 
[11:01:05.469]                         !identical(envir, emptyenv())) {
[11:01:05.469]                         if (exists("master", mode = "list", envir = envir, 
[11:01:05.469]                           inherits = FALSE)) {
[11:01:05.469]                           master <- get("master", mode = "list", 
[11:01:05.469]                             envir = envir, inherits = FALSE)
[11:01:05.469]                           if (inherits(master, c("SOCKnode", 
[11:01:05.469]                             "SOCK0node"))) {
[11:01:05.469]                             sendCondition <<- function(cond) {
[11:01:05.469]                               data <- list(type = "VALUE", value = cond, 
[11:01:05.469]                                 success = TRUE)
[11:01:05.469]                               parallel_sendData(master, data)
[11:01:05.469]                             }
[11:01:05.469]                             return(sendCondition)
[11:01:05.469]                           }
[11:01:05.469]                         }
[11:01:05.469]                         frame <- frame + 1L
[11:01:05.469]                         envir <- sys.frame(frame)
[11:01:05.469]                       }
[11:01:05.469]                     }
[11:01:05.469]                     sendCondition <<- function(cond) NULL
[11:01:05.469]                   }
[11:01:05.469]                 })
[11:01:05.469]                 withCallingHandlers({
[11:01:05.469]                   {
[11:01:05.469]                     do.call(function(...) {
[11:01:05.469]                       sum(x, ...)
[11:01:05.469]                     }, args = future.call.arguments)
[11:01:05.469]                   }
[11:01:05.469]                 }, immediateCondition = function(cond) {
[11:01:05.469]                   sendCondition <- ...future.makeSendCondition()
[11:01:05.469]                   sendCondition(cond)
[11:01:05.469]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.469]                   {
[11:01:05.469]                     inherits <- base::inherits
[11:01:05.469]                     invokeRestart <- base::invokeRestart
[11:01:05.469]                     is.null <- base::is.null
[11:01:05.469]                     muffled <- FALSE
[11:01:05.469]                     if (inherits(cond, "message")) {
[11:01:05.469]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:05.469]                       if (muffled) 
[11:01:05.469]                         invokeRestart("muffleMessage")
[11:01:05.469]                     }
[11:01:05.469]                     else if (inherits(cond, "warning")) {
[11:01:05.469]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:05.469]                       if (muffled) 
[11:01:05.469]                         invokeRestart("muffleWarning")
[11:01:05.469]                     }
[11:01:05.469]                     else if (inherits(cond, "condition")) {
[11:01:05.469]                       if (!is.null(pattern)) {
[11:01:05.469]                         computeRestarts <- base::computeRestarts
[11:01:05.469]                         grepl <- base::grepl
[11:01:05.469]                         restarts <- computeRestarts(cond)
[11:01:05.469]                         for (restart in restarts) {
[11:01:05.469]                           name <- restart$name
[11:01:05.469]                           if (is.null(name)) 
[11:01:05.469]                             next
[11:01:05.469]                           if (!grepl(pattern, name)) 
[11:01:05.469]                             next
[11:01:05.469]                           invokeRestart(restart)
[11:01:05.469]                           muffled <- TRUE
[11:01:05.469]                           break
[11:01:05.469]                         }
[11:01:05.469]                       }
[11:01:05.469]                     }
[11:01:05.469]                     invisible(muffled)
[11:01:05.469]                   }
[11:01:05.469]                   muffleCondition(cond)
[11:01:05.469]                 })
[11:01:05.469]             }))
[11:01:05.469]             future::FutureResult(value = ...future.value$value, 
[11:01:05.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.469]                   ...future.rng), globalenv = if (FALSE) 
[11:01:05.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:05.469]                     ...future.globalenv.names))
[11:01:05.469]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:05.469]         }, condition = base::local({
[11:01:05.469]             c <- base::c
[11:01:05.469]             inherits <- base::inherits
[11:01:05.469]             invokeRestart <- base::invokeRestart
[11:01:05.469]             length <- base::length
[11:01:05.469]             list <- base::list
[11:01:05.469]             seq.int <- base::seq.int
[11:01:05.469]             signalCondition <- base::signalCondition
[11:01:05.469]             sys.calls <- base::sys.calls
[11:01:05.469]             `[[` <- base::`[[`
[11:01:05.469]             `+` <- base::`+`
[11:01:05.469]             `<<-` <- base::`<<-`
[11:01:05.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:05.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:05.469]                   3L)]
[11:01:05.469]             }
[11:01:05.469]             function(cond) {
[11:01:05.469]                 is_error <- inherits(cond, "error")
[11:01:05.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:05.469]                   NULL)
[11:01:05.469]                 if (is_error) {
[11:01:05.469]                   sessionInformation <- function() {
[11:01:05.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:05.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:05.469]                       search = base::search(), system = base::Sys.info())
[11:01:05.469]                   }
[11:01:05.469]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:05.469]                     cond$call), session = sessionInformation(), 
[11:01:05.469]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:05.469]                   signalCondition(cond)
[11:01:05.469]                 }
[11:01:05.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:05.469]                 "immediateCondition"))) {
[11:01:05.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:05.469]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:05.469]                   if (TRUE && !signal) {
[11:01:05.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.469]                     {
[11:01:05.469]                       inherits <- base::inherits
[11:01:05.469]                       invokeRestart <- base::invokeRestart
[11:01:05.469]                       is.null <- base::is.null
[11:01:05.469]                       muffled <- FALSE
[11:01:05.469]                       if (inherits(cond, "message")) {
[11:01:05.469]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.469]                         if (muffled) 
[11:01:05.469]                           invokeRestart("muffleMessage")
[11:01:05.469]                       }
[11:01:05.469]                       else if (inherits(cond, "warning")) {
[11:01:05.469]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.469]                         if (muffled) 
[11:01:05.469]                           invokeRestart("muffleWarning")
[11:01:05.469]                       }
[11:01:05.469]                       else if (inherits(cond, "condition")) {
[11:01:05.469]                         if (!is.null(pattern)) {
[11:01:05.469]                           computeRestarts <- base::computeRestarts
[11:01:05.469]                           grepl <- base::grepl
[11:01:05.469]                           restarts <- computeRestarts(cond)
[11:01:05.469]                           for (restart in restarts) {
[11:01:05.469]                             name <- restart$name
[11:01:05.469]                             if (is.null(name)) 
[11:01:05.469]                               next
[11:01:05.469]                             if (!grepl(pattern, name)) 
[11:01:05.469]                               next
[11:01:05.469]                             invokeRestart(restart)
[11:01:05.469]                             muffled <- TRUE
[11:01:05.469]                             break
[11:01:05.469]                           }
[11:01:05.469]                         }
[11:01:05.469]                       }
[11:01:05.469]                       invisible(muffled)
[11:01:05.469]                     }
[11:01:05.469]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.469]                   }
[11:01:05.469]                 }
[11:01:05.469]                 else {
[11:01:05.469]                   if (TRUE) {
[11:01:05.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.469]                     {
[11:01:05.469]                       inherits <- base::inherits
[11:01:05.469]                       invokeRestart <- base::invokeRestart
[11:01:05.469]                       is.null <- base::is.null
[11:01:05.469]                       muffled <- FALSE
[11:01:05.469]                       if (inherits(cond, "message")) {
[11:01:05.469]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.469]                         if (muffled) 
[11:01:05.469]                           invokeRestart("muffleMessage")
[11:01:05.469]                       }
[11:01:05.469]                       else if (inherits(cond, "warning")) {
[11:01:05.469]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.469]                         if (muffled) 
[11:01:05.469]                           invokeRestart("muffleWarning")
[11:01:05.469]                       }
[11:01:05.469]                       else if (inherits(cond, "condition")) {
[11:01:05.469]                         if (!is.null(pattern)) {
[11:01:05.469]                           computeRestarts <- base::computeRestarts
[11:01:05.469]                           grepl <- base::grepl
[11:01:05.469]                           restarts <- computeRestarts(cond)
[11:01:05.469]                           for (restart in restarts) {
[11:01:05.469]                             name <- restart$name
[11:01:05.469]                             if (is.null(name)) 
[11:01:05.469]                               next
[11:01:05.469]                             if (!grepl(pattern, name)) 
[11:01:05.469]                               next
[11:01:05.469]                             invokeRestart(restart)
[11:01:05.469]                             muffled <- TRUE
[11:01:05.469]                             break
[11:01:05.469]                           }
[11:01:05.469]                         }
[11:01:05.469]                       }
[11:01:05.469]                       invisible(muffled)
[11:01:05.469]                     }
[11:01:05.469]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.469]                   }
[11:01:05.469]                 }
[11:01:05.469]             }
[11:01:05.469]         }))
[11:01:05.469]     }, error = function(ex) {
[11:01:05.469]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:05.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.469]                 ...future.rng), started = ...future.startTime, 
[11:01:05.469]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:05.469]             version = "1.8"), class = "FutureResult")
[11:01:05.469]     }, finally = {
[11:01:05.469]         if (!identical(...future.workdir, getwd())) 
[11:01:05.469]             setwd(...future.workdir)
[11:01:05.469]         {
[11:01:05.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:05.469]                 ...future.oldOptions$nwarnings <- NULL
[11:01:05.469]             }
[11:01:05.469]             base::options(...future.oldOptions)
[11:01:05.469]             if (.Platform$OS.type == "windows") {
[11:01:05.469]                 old_names <- names(...future.oldEnvVars)
[11:01:05.469]                 envs <- base::Sys.getenv()
[11:01:05.469]                 names <- names(envs)
[11:01:05.469]                 common <- intersect(names, old_names)
[11:01:05.469]                 added <- setdiff(names, old_names)
[11:01:05.469]                 removed <- setdiff(old_names, names)
[11:01:05.469]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:05.469]                   envs[common]]
[11:01:05.469]                 NAMES <- toupper(changed)
[11:01:05.469]                 args <- list()
[11:01:05.469]                 for (kk in seq_along(NAMES)) {
[11:01:05.469]                   name <- changed[[kk]]
[11:01:05.469]                   NAME <- NAMES[[kk]]
[11:01:05.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.469]                     next
[11:01:05.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.469]                 }
[11:01:05.469]                 NAMES <- toupper(added)
[11:01:05.469]                 for (kk in seq_along(NAMES)) {
[11:01:05.469]                   name <- added[[kk]]
[11:01:05.469]                   NAME <- NAMES[[kk]]
[11:01:05.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.469]                     next
[11:01:05.469]                   args[[name]] <- ""
[11:01:05.469]                 }
[11:01:05.469]                 NAMES <- toupper(removed)
[11:01:05.469]                 for (kk in seq_along(NAMES)) {
[11:01:05.469]                   name <- removed[[kk]]
[11:01:05.469]                   NAME <- NAMES[[kk]]
[11:01:05.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.469]                     next
[11:01:05.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.469]                 }
[11:01:05.469]                 if (length(args) > 0) 
[11:01:05.469]                   base::do.call(base::Sys.setenv, args = args)
[11:01:05.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:05.469]             }
[11:01:05.469]             else {
[11:01:05.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:05.469]             }
[11:01:05.469]             {
[11:01:05.469]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:05.469]                   0L) {
[11:01:05.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:05.469]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:05.469]                   base::options(opts)
[11:01:05.469]                 }
[11:01:05.469]                 {
[11:01:05.469]                   {
[11:01:05.469]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:05.469]                     NULL
[11:01:05.469]                   }
[11:01:05.469]                   options(future.plan = NULL)
[11:01:05.469]                   if (is.na(NA_character_)) 
[11:01:05.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:05.469]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:05.469]                     .init = FALSE)
[11:01:05.469]                 }
[11:01:05.469]             }
[11:01:05.469]         }
[11:01:05.469]     })
[11:01:05.469]     if (TRUE) {
[11:01:05.469]         base::sink(type = "output", split = FALSE)
[11:01:05.469]         if (TRUE) {
[11:01:05.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:05.469]         }
[11:01:05.469]         else {
[11:01:05.469]             ...future.result["stdout"] <- base::list(NULL)
[11:01:05.469]         }
[11:01:05.469]         base::close(...future.stdout)
[11:01:05.469]         ...future.stdout <- NULL
[11:01:05.469]     }
[11:01:05.469]     ...future.result$conditions <- ...future.conditions
[11:01:05.469]     ...future.result$finished <- base::Sys.time()
[11:01:05.469]     ...future.result
[11:01:05.469] }
[11:01:05.472] Exporting 2 global objects (579 bytes) to cluster node #1 ...
[11:01:05.472] Exporting ‘x’ (133 bytes) to cluster node #1 ...
[11:01:05.472] Exporting ‘x’ (133 bytes) to cluster node #1 ... DONE
[11:01:05.472] Exporting ‘future.call.arguments’ (113 bytes) to cluster node #1 ...
[11:01:05.473] Exporting ‘future.call.arguments’ (113 bytes) to cluster node #1 ... DONE
[11:01:05.473] Exporting 2 global objects (579 bytes) to cluster node #1 ... DONE
[11:01:05.473] MultisessionFuture started
[11:01:05.473] - Launch lazy future ... done
[11:01:05.473] run() for ‘MultisessionFuture’ ... done
[11:01:05.474] result() for ClusterFuture ...
[11:01:05.474] receiveMessageFromWorker() for ClusterFuture ...
[11:01:05.474] - Validating connection of MultisessionFuture
[11:01:05.518] - received message: FutureResult
[11:01:05.518] - Received FutureResult
[11:01:05.519] - Erased future from FutureRegistry
[11:01:05.519] result() for ClusterFuture ...
[11:01:05.519] - result already collected: FutureResult
[11:01:05.519] result() for ClusterFuture ... done
[11:01:05.519] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:05.519] result() for ClusterFuture ... done
[11:01:05.519] result() for ClusterFuture ...
[11:01:05.519] - result already collected: FutureResult
[11:01:05.519] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x55b7e3d9fa20>
Arguments '...' exists: TRUE
[11:01:05.520] getGlobalsAndPackages() ...
[11:01:05.520] Searching for globals...
[11:01:05.521] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[11:01:05.522] Searching for globals ... DONE
[11:01:05.522] Resolving globals: FALSE
[11:01:05.522] Tweak future expression to call with '...' arguments ...
[11:01:05.522] {
[11:01:05.522]     do.call(function(...) {
[11:01:05.522]         sum(x, ...)
[11:01:05.522]     }, args = future.call.arguments)
[11:01:05.522] }
[11:01:05.522] Tweak future expression to call with '...' arguments ... DONE
[11:01:05.522] The total size of the 2 globals is 246 bytes (246 bytes)
[11:01:05.523] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 246 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘future.call.arguments’ (113 bytes of class ‘list’)
[11:01:05.523] - globals: [2] ‘x’, ‘future.call.arguments’
[11:01:05.523] 
[11:01:05.523] getGlobalsAndPackages() ... DONE
[11:01:05.523] run() for ‘Future’ ...
[11:01:05.524] - state: ‘created’
[11:01:05.524] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:05.538] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:05.538] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:05.538]   - Field: ‘node’
[11:01:05.538]   - Field: ‘label’
[11:01:05.538]   - Field: ‘local’
[11:01:05.538]   - Field: ‘owner’
[11:01:05.539]   - Field: ‘envir’
[11:01:05.539]   - Field: ‘workers’
[11:01:05.539]   - Field: ‘packages’
[11:01:05.539]   - Field: ‘gc’
[11:01:05.539]   - Field: ‘conditions’
[11:01:05.539]   - Field: ‘persistent’
[11:01:05.539]   - Field: ‘expr’
[11:01:05.539]   - Field: ‘uuid’
[11:01:05.539]   - Field: ‘seed’
[11:01:05.539]   - Field: ‘version’
[11:01:05.540]   - Field: ‘result’
[11:01:05.540]   - Field: ‘asynchronous’
[11:01:05.540]   - Field: ‘calls’
[11:01:05.540]   - Field: ‘globals’
[11:01:05.540]   - Field: ‘stdout’
[11:01:05.540]   - Field: ‘earlySignal’
[11:01:05.540]   - Field: ‘lazy’
[11:01:05.540]   - Field: ‘state’
[11:01:05.540] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:05.541] - Launch lazy future ...
[11:01:05.541] Packages needed by the future expression (n = 0): <none>
[11:01:05.541] Packages needed by future strategies (n = 0): <none>
[11:01:05.541] {
[11:01:05.541]     {
[11:01:05.541]         {
[11:01:05.541]             ...future.startTime <- base::Sys.time()
[11:01:05.541]             {
[11:01:05.541]                 {
[11:01:05.541]                   {
[11:01:05.541]                     {
[11:01:05.541]                       base::local({
[11:01:05.541]                         has_future <- base::requireNamespace("future", 
[11:01:05.541]                           quietly = TRUE)
[11:01:05.541]                         if (has_future) {
[11:01:05.541]                           ns <- base::getNamespace("future")
[11:01:05.541]                           version <- ns[[".package"]][["version"]]
[11:01:05.541]                           if (is.null(version)) 
[11:01:05.541]                             version <- utils::packageVersion("future")
[11:01:05.541]                         }
[11:01:05.541]                         else {
[11:01:05.541]                           version <- NULL
[11:01:05.541]                         }
[11:01:05.541]                         if (!has_future || version < "1.8.0") {
[11:01:05.541]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:05.541]                             "", base::R.version$version.string), 
[11:01:05.541]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:05.541]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:05.541]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:05.541]                               "release", "version")], collapse = " "), 
[11:01:05.541]                             hostname = base::Sys.info()[["nodename"]])
[11:01:05.541]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:05.541]                             info)
[11:01:05.541]                           info <- base::paste(info, collapse = "; ")
[11:01:05.541]                           if (!has_future) {
[11:01:05.541]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:05.541]                               info)
[11:01:05.541]                           }
[11:01:05.541]                           else {
[11:01:05.541]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:05.541]                               info, version)
[11:01:05.541]                           }
[11:01:05.541]                           base::stop(msg)
[11:01:05.541]                         }
[11:01:05.541]                       })
[11:01:05.541]                     }
[11:01:05.541]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:05.541]                     base::options(mc.cores = 1L)
[11:01:05.541]                   }
[11:01:05.541]                   ...future.strategy.old <- future::plan("list")
[11:01:05.541]                   options(future.plan = NULL)
[11:01:05.541]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.541]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:05.541]                 }
[11:01:05.541]                 ...future.workdir <- getwd()
[11:01:05.541]             }
[11:01:05.541]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:05.541]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:05.541]         }
[11:01:05.541]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:05.541]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:05.541]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:05.541]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:05.541]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:05.541]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:05.541]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:05.541]             base::names(...future.oldOptions))
[11:01:05.541]     }
[11:01:05.541]     if (FALSE) {
[11:01:05.541]     }
[11:01:05.541]     else {
[11:01:05.541]         if (TRUE) {
[11:01:05.541]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:05.541]                 open = "w")
[11:01:05.541]         }
[11:01:05.541]         else {
[11:01:05.541]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:05.541]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:05.541]         }
[11:01:05.541]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:05.541]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:05.541]             base::sink(type = "output", split = FALSE)
[11:01:05.541]             base::close(...future.stdout)
[11:01:05.541]         }, add = TRUE)
[11:01:05.541]     }
[11:01:05.541]     ...future.frame <- base::sys.nframe()
[11:01:05.541]     ...future.conditions <- base::list()
[11:01:05.541]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:05.541]     if (FALSE) {
[11:01:05.541]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:05.541]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:05.541]     }
[11:01:05.541]     ...future.result <- base::tryCatch({
[11:01:05.541]         base::withCallingHandlers({
[11:01:05.541]             ...future.value <- base::withVisible(base::local({
[11:01:05.541]                 ...future.makeSendCondition <- base::local({
[11:01:05.541]                   sendCondition <- NULL
[11:01:05.541]                   function(frame = 1L) {
[11:01:05.541]                     if (is.function(sendCondition)) 
[11:01:05.541]                       return(sendCondition)
[11:01:05.541]                     ns <- getNamespace("parallel")
[11:01:05.541]                     if (exists("sendData", mode = "function", 
[11:01:05.541]                       envir = ns)) {
[11:01:05.541]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:05.541]                         envir = ns)
[11:01:05.541]                       envir <- sys.frame(frame)
[11:01:05.541]                       master <- NULL
[11:01:05.541]                       while (!identical(envir, .GlobalEnv) && 
[11:01:05.541]                         !identical(envir, emptyenv())) {
[11:01:05.541]                         if (exists("master", mode = "list", envir = envir, 
[11:01:05.541]                           inherits = FALSE)) {
[11:01:05.541]                           master <- get("master", mode = "list", 
[11:01:05.541]                             envir = envir, inherits = FALSE)
[11:01:05.541]                           if (inherits(master, c("SOCKnode", 
[11:01:05.541]                             "SOCK0node"))) {
[11:01:05.541]                             sendCondition <<- function(cond) {
[11:01:05.541]                               data <- list(type = "VALUE", value = cond, 
[11:01:05.541]                                 success = TRUE)
[11:01:05.541]                               parallel_sendData(master, data)
[11:01:05.541]                             }
[11:01:05.541]                             return(sendCondition)
[11:01:05.541]                           }
[11:01:05.541]                         }
[11:01:05.541]                         frame <- frame + 1L
[11:01:05.541]                         envir <- sys.frame(frame)
[11:01:05.541]                       }
[11:01:05.541]                     }
[11:01:05.541]                     sendCondition <<- function(cond) NULL
[11:01:05.541]                   }
[11:01:05.541]                 })
[11:01:05.541]                 withCallingHandlers({
[11:01:05.541]                   {
[11:01:05.541]                     do.call(function(...) {
[11:01:05.541]                       sum(x, ...)
[11:01:05.541]                     }, args = future.call.arguments)
[11:01:05.541]                   }
[11:01:05.541]                 }, immediateCondition = function(cond) {
[11:01:05.541]                   sendCondition <- ...future.makeSendCondition()
[11:01:05.541]                   sendCondition(cond)
[11:01:05.541]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.541]                   {
[11:01:05.541]                     inherits <- base::inherits
[11:01:05.541]                     invokeRestart <- base::invokeRestart
[11:01:05.541]                     is.null <- base::is.null
[11:01:05.541]                     muffled <- FALSE
[11:01:05.541]                     if (inherits(cond, "message")) {
[11:01:05.541]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:05.541]                       if (muffled) 
[11:01:05.541]                         invokeRestart("muffleMessage")
[11:01:05.541]                     }
[11:01:05.541]                     else if (inherits(cond, "warning")) {
[11:01:05.541]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:05.541]                       if (muffled) 
[11:01:05.541]                         invokeRestart("muffleWarning")
[11:01:05.541]                     }
[11:01:05.541]                     else if (inherits(cond, "condition")) {
[11:01:05.541]                       if (!is.null(pattern)) {
[11:01:05.541]                         computeRestarts <- base::computeRestarts
[11:01:05.541]                         grepl <- base::grepl
[11:01:05.541]                         restarts <- computeRestarts(cond)
[11:01:05.541]                         for (restart in restarts) {
[11:01:05.541]                           name <- restart$name
[11:01:05.541]                           if (is.null(name)) 
[11:01:05.541]                             next
[11:01:05.541]                           if (!grepl(pattern, name)) 
[11:01:05.541]                             next
[11:01:05.541]                           invokeRestart(restart)
[11:01:05.541]                           muffled <- TRUE
[11:01:05.541]                           break
[11:01:05.541]                         }
[11:01:05.541]                       }
[11:01:05.541]                     }
[11:01:05.541]                     invisible(muffled)
[11:01:05.541]                   }
[11:01:05.541]                   muffleCondition(cond)
[11:01:05.541]                 })
[11:01:05.541]             }))
[11:01:05.541]             future::FutureResult(value = ...future.value$value, 
[11:01:05.541]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.541]                   ...future.rng), globalenv = if (FALSE) 
[11:01:05.541]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:05.541]                     ...future.globalenv.names))
[11:01:05.541]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:05.541]         }, condition = base::local({
[11:01:05.541]             c <- base::c
[11:01:05.541]             inherits <- base::inherits
[11:01:05.541]             invokeRestart <- base::invokeRestart
[11:01:05.541]             length <- base::length
[11:01:05.541]             list <- base::list
[11:01:05.541]             seq.int <- base::seq.int
[11:01:05.541]             signalCondition <- base::signalCondition
[11:01:05.541]             sys.calls <- base::sys.calls
[11:01:05.541]             `[[` <- base::`[[`
[11:01:05.541]             `+` <- base::`+`
[11:01:05.541]             `<<-` <- base::`<<-`
[11:01:05.541]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:05.541]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:05.541]                   3L)]
[11:01:05.541]             }
[11:01:05.541]             function(cond) {
[11:01:05.541]                 is_error <- inherits(cond, "error")
[11:01:05.541]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:05.541]                   NULL)
[11:01:05.541]                 if (is_error) {
[11:01:05.541]                   sessionInformation <- function() {
[11:01:05.541]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:05.541]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:05.541]                       search = base::search(), system = base::Sys.info())
[11:01:05.541]                   }
[11:01:05.541]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.541]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:05.541]                     cond$call), session = sessionInformation(), 
[11:01:05.541]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:05.541]                   signalCondition(cond)
[11:01:05.541]                 }
[11:01:05.541]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:05.541]                 "immediateCondition"))) {
[11:01:05.541]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:05.541]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.541]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:05.541]                   if (TRUE && !signal) {
[11:01:05.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.541]                     {
[11:01:05.541]                       inherits <- base::inherits
[11:01:05.541]                       invokeRestart <- base::invokeRestart
[11:01:05.541]                       is.null <- base::is.null
[11:01:05.541]                       muffled <- FALSE
[11:01:05.541]                       if (inherits(cond, "message")) {
[11:01:05.541]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.541]                         if (muffled) 
[11:01:05.541]                           invokeRestart("muffleMessage")
[11:01:05.541]                       }
[11:01:05.541]                       else if (inherits(cond, "warning")) {
[11:01:05.541]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.541]                         if (muffled) 
[11:01:05.541]                           invokeRestart("muffleWarning")
[11:01:05.541]                       }
[11:01:05.541]                       else if (inherits(cond, "condition")) {
[11:01:05.541]                         if (!is.null(pattern)) {
[11:01:05.541]                           computeRestarts <- base::computeRestarts
[11:01:05.541]                           grepl <- base::grepl
[11:01:05.541]                           restarts <- computeRestarts(cond)
[11:01:05.541]                           for (restart in restarts) {
[11:01:05.541]                             name <- restart$name
[11:01:05.541]                             if (is.null(name)) 
[11:01:05.541]                               next
[11:01:05.541]                             if (!grepl(pattern, name)) 
[11:01:05.541]                               next
[11:01:05.541]                             invokeRestart(restart)
[11:01:05.541]                             muffled <- TRUE
[11:01:05.541]                             break
[11:01:05.541]                           }
[11:01:05.541]                         }
[11:01:05.541]                       }
[11:01:05.541]                       invisible(muffled)
[11:01:05.541]                     }
[11:01:05.541]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.541]                   }
[11:01:05.541]                 }
[11:01:05.541]                 else {
[11:01:05.541]                   if (TRUE) {
[11:01:05.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.541]                     {
[11:01:05.541]                       inherits <- base::inherits
[11:01:05.541]                       invokeRestart <- base::invokeRestart
[11:01:05.541]                       is.null <- base::is.null
[11:01:05.541]                       muffled <- FALSE
[11:01:05.541]                       if (inherits(cond, "message")) {
[11:01:05.541]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.541]                         if (muffled) 
[11:01:05.541]                           invokeRestart("muffleMessage")
[11:01:05.541]                       }
[11:01:05.541]                       else if (inherits(cond, "warning")) {
[11:01:05.541]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.541]                         if (muffled) 
[11:01:05.541]                           invokeRestart("muffleWarning")
[11:01:05.541]                       }
[11:01:05.541]                       else if (inherits(cond, "condition")) {
[11:01:05.541]                         if (!is.null(pattern)) {
[11:01:05.541]                           computeRestarts <- base::computeRestarts
[11:01:05.541]                           grepl <- base::grepl
[11:01:05.541]                           restarts <- computeRestarts(cond)
[11:01:05.541]                           for (restart in restarts) {
[11:01:05.541]                             name <- restart$name
[11:01:05.541]                             if (is.null(name)) 
[11:01:05.541]                               next
[11:01:05.541]                             if (!grepl(pattern, name)) 
[11:01:05.541]                               next
[11:01:05.541]                             invokeRestart(restart)
[11:01:05.541]                             muffled <- TRUE
[11:01:05.541]                             break
[11:01:05.541]                           }
[11:01:05.541]                         }
[11:01:05.541]                       }
[11:01:05.541]                       invisible(muffled)
[11:01:05.541]                     }
[11:01:05.541]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.541]                   }
[11:01:05.541]                 }
[11:01:05.541]             }
[11:01:05.541]         }))
[11:01:05.541]     }, error = function(ex) {
[11:01:05.541]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:05.541]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.541]                 ...future.rng), started = ...future.startTime, 
[11:01:05.541]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:05.541]             version = "1.8"), class = "FutureResult")
[11:01:05.541]     }, finally = {
[11:01:05.541]         if (!identical(...future.workdir, getwd())) 
[11:01:05.541]             setwd(...future.workdir)
[11:01:05.541]         {
[11:01:05.541]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:05.541]                 ...future.oldOptions$nwarnings <- NULL
[11:01:05.541]             }
[11:01:05.541]             base::options(...future.oldOptions)
[11:01:05.541]             if (.Platform$OS.type == "windows") {
[11:01:05.541]                 old_names <- names(...future.oldEnvVars)
[11:01:05.541]                 envs <- base::Sys.getenv()
[11:01:05.541]                 names <- names(envs)
[11:01:05.541]                 common <- intersect(names, old_names)
[11:01:05.541]                 added <- setdiff(names, old_names)
[11:01:05.541]                 removed <- setdiff(old_names, names)
[11:01:05.541]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:05.541]                   envs[common]]
[11:01:05.541]                 NAMES <- toupper(changed)
[11:01:05.541]                 args <- list()
[11:01:05.541]                 for (kk in seq_along(NAMES)) {
[11:01:05.541]                   name <- changed[[kk]]
[11:01:05.541]                   NAME <- NAMES[[kk]]
[11:01:05.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.541]                     next
[11:01:05.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.541]                 }
[11:01:05.541]                 NAMES <- toupper(added)
[11:01:05.541]                 for (kk in seq_along(NAMES)) {
[11:01:05.541]                   name <- added[[kk]]
[11:01:05.541]                   NAME <- NAMES[[kk]]
[11:01:05.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.541]                     next
[11:01:05.541]                   args[[name]] <- ""
[11:01:05.541]                 }
[11:01:05.541]                 NAMES <- toupper(removed)
[11:01:05.541]                 for (kk in seq_along(NAMES)) {
[11:01:05.541]                   name <- removed[[kk]]
[11:01:05.541]                   NAME <- NAMES[[kk]]
[11:01:05.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.541]                     next
[11:01:05.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.541]                 }
[11:01:05.541]                 if (length(args) > 0) 
[11:01:05.541]                   base::do.call(base::Sys.setenv, args = args)
[11:01:05.541]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:05.541]             }
[11:01:05.541]             else {
[11:01:05.541]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:05.541]             }
[11:01:05.541]             {
[11:01:05.541]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:05.541]                   0L) {
[11:01:05.541]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:05.541]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:05.541]                   base::options(opts)
[11:01:05.541]                 }
[11:01:05.541]                 {
[11:01:05.541]                   {
[11:01:05.541]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:05.541]                     NULL
[11:01:05.541]                   }
[11:01:05.541]                   options(future.plan = NULL)
[11:01:05.541]                   if (is.na(NA_character_)) 
[11:01:05.541]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.541]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:05.541]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:05.541]                     .init = FALSE)
[11:01:05.541]                 }
[11:01:05.541]             }
[11:01:05.541]         }
[11:01:05.541]     })
[11:01:05.541]     if (TRUE) {
[11:01:05.541]         base::sink(type = "output", split = FALSE)
[11:01:05.541]         if (TRUE) {
[11:01:05.541]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:05.541]         }
[11:01:05.541]         else {
[11:01:05.541]             ...future.result["stdout"] <- base::list(NULL)
[11:01:05.541]         }
[11:01:05.541]         base::close(...future.stdout)
[11:01:05.541]         ...future.stdout <- NULL
[11:01:05.541]     }
[11:01:05.541]     ...future.result$conditions <- ...future.conditions
[11:01:05.541]     ...future.result$finished <- base::Sys.time()
[11:01:05.541]     ...future.result
[11:01:05.541] }
[11:01:05.544] Exporting 2 global objects (579 bytes) to cluster node #1 ...
[11:01:05.545] Exporting ‘x’ (133 bytes) to cluster node #1 ...
[11:01:05.545] Exporting ‘x’ (133 bytes) to cluster node #1 ... DONE
[11:01:05.545] Exporting ‘future.call.arguments’ (113 bytes) to cluster node #1 ...
[11:01:05.545] Exporting ‘future.call.arguments’ (113 bytes) to cluster node #1 ... DONE
[11:01:05.546] Exporting 2 global objects (579 bytes) to cluster node #1 ... DONE
[11:01:05.546] MultisessionFuture started
[11:01:05.546] - Launch lazy future ... done
[11:01:05.546] run() for ‘MultisessionFuture’ ... done
[11:01:05.547] result() for ClusterFuture ...
[11:01:05.547] receiveMessageFromWorker() for ClusterFuture ...
[11:01:05.547] - Validating connection of MultisessionFuture
[11:01:05.588] - received message: FutureResult
[11:01:05.588] - Received FutureResult
[11:01:05.588] - Erased future from FutureRegistry
[11:01:05.588] result() for ClusterFuture ...
[11:01:05.588] - result already collected: FutureResult
[11:01:05.589] result() for ClusterFuture ... done
[11:01:05.589] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:05.589] result() for ClusterFuture ... done
[11:01:05.589] result() for ClusterFuture ...
[11:01:05.589] - result already collected: FutureResult
[11:01:05.589] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55b7e3f45960>
Arguments '...' exists: FALSE
[11:01:05.590] getGlobalsAndPackages() ...
[11:01:05.590] Searching for globals...
[11:01:05.591] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[11:01:05.591] Searching for globals ... DONE
[11:01:05.591] Resolving globals: FALSE
[11:01:05.592] The total size of the 2 globals is 172 bytes (172 bytes)
[11:01:05.592] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 172 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:05.592] - globals: [2] ‘x’, ‘y’
[11:01:05.593] 
[11:01:05.593] getGlobalsAndPackages() ... DONE
[11:01:05.593] run() for ‘Future’ ...
[11:01:05.593] - state: ‘created’
[11:01:05.593] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:05.607] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:05.608] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:05.608]   - Field: ‘node’
[11:01:05.608]   - Field: ‘label’
[11:01:05.608]   - Field: ‘local’
[11:01:05.608]   - Field: ‘owner’
[11:01:05.608]   - Field: ‘envir’
[11:01:05.608]   - Field: ‘workers’
[11:01:05.608]   - Field: ‘packages’
[11:01:05.608]   - Field: ‘gc’
[11:01:05.608]   - Field: ‘conditions’
[11:01:05.609]   - Field: ‘persistent’
[11:01:05.609]   - Field: ‘expr’
[11:01:05.609]   - Field: ‘uuid’
[11:01:05.609]   - Field: ‘seed’
[11:01:05.609]   - Field: ‘version’
[11:01:05.609]   - Field: ‘result’
[11:01:05.609]   - Field: ‘asynchronous’
[11:01:05.609]   - Field: ‘calls’
[11:01:05.609]   - Field: ‘globals’
[11:01:05.609]   - Field: ‘stdout’
[11:01:05.610]   - Field: ‘earlySignal’
[11:01:05.610]   - Field: ‘lazy’
[11:01:05.610]   - Field: ‘state’
[11:01:05.610] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:05.610] - Launch lazy future ...
[11:01:05.610] Packages needed by the future expression (n = 0): <none>
[11:01:05.610] Packages needed by future strategies (n = 0): <none>
[11:01:05.611] {
[11:01:05.611]     {
[11:01:05.611]         {
[11:01:05.611]             ...future.startTime <- base::Sys.time()
[11:01:05.611]             {
[11:01:05.611]                 {
[11:01:05.611]                   {
[11:01:05.611]                     {
[11:01:05.611]                       base::local({
[11:01:05.611]                         has_future <- base::requireNamespace("future", 
[11:01:05.611]                           quietly = TRUE)
[11:01:05.611]                         if (has_future) {
[11:01:05.611]                           ns <- base::getNamespace("future")
[11:01:05.611]                           version <- ns[[".package"]][["version"]]
[11:01:05.611]                           if (is.null(version)) 
[11:01:05.611]                             version <- utils::packageVersion("future")
[11:01:05.611]                         }
[11:01:05.611]                         else {
[11:01:05.611]                           version <- NULL
[11:01:05.611]                         }
[11:01:05.611]                         if (!has_future || version < "1.8.0") {
[11:01:05.611]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:05.611]                             "", base::R.version$version.string), 
[11:01:05.611]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:05.611]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:05.611]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:05.611]                               "release", "version")], collapse = " "), 
[11:01:05.611]                             hostname = base::Sys.info()[["nodename"]])
[11:01:05.611]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:05.611]                             info)
[11:01:05.611]                           info <- base::paste(info, collapse = "; ")
[11:01:05.611]                           if (!has_future) {
[11:01:05.611]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:05.611]                               info)
[11:01:05.611]                           }
[11:01:05.611]                           else {
[11:01:05.611]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:05.611]                               info, version)
[11:01:05.611]                           }
[11:01:05.611]                           base::stop(msg)
[11:01:05.611]                         }
[11:01:05.611]                       })
[11:01:05.611]                     }
[11:01:05.611]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:05.611]                     base::options(mc.cores = 1L)
[11:01:05.611]                   }
[11:01:05.611]                   ...future.strategy.old <- future::plan("list")
[11:01:05.611]                   options(future.plan = NULL)
[11:01:05.611]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.611]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:05.611]                 }
[11:01:05.611]                 ...future.workdir <- getwd()
[11:01:05.611]             }
[11:01:05.611]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:05.611]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:05.611]         }
[11:01:05.611]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:05.611]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:05.611]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:05.611]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:05.611]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:05.611]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:05.611]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:05.611]             base::names(...future.oldOptions))
[11:01:05.611]     }
[11:01:05.611]     if (FALSE) {
[11:01:05.611]     }
[11:01:05.611]     else {
[11:01:05.611]         if (TRUE) {
[11:01:05.611]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:05.611]                 open = "w")
[11:01:05.611]         }
[11:01:05.611]         else {
[11:01:05.611]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:05.611]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:05.611]         }
[11:01:05.611]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:05.611]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:05.611]             base::sink(type = "output", split = FALSE)
[11:01:05.611]             base::close(...future.stdout)
[11:01:05.611]         }, add = TRUE)
[11:01:05.611]     }
[11:01:05.611]     ...future.frame <- base::sys.nframe()
[11:01:05.611]     ...future.conditions <- base::list()
[11:01:05.611]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:05.611]     if (FALSE) {
[11:01:05.611]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:05.611]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:05.611]     }
[11:01:05.611]     ...future.result <- base::tryCatch({
[11:01:05.611]         base::withCallingHandlers({
[11:01:05.611]             ...future.value <- base::withVisible(base::local({
[11:01:05.611]                 ...future.makeSendCondition <- base::local({
[11:01:05.611]                   sendCondition <- NULL
[11:01:05.611]                   function(frame = 1L) {
[11:01:05.611]                     if (is.function(sendCondition)) 
[11:01:05.611]                       return(sendCondition)
[11:01:05.611]                     ns <- getNamespace("parallel")
[11:01:05.611]                     if (exists("sendData", mode = "function", 
[11:01:05.611]                       envir = ns)) {
[11:01:05.611]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:05.611]                         envir = ns)
[11:01:05.611]                       envir <- sys.frame(frame)
[11:01:05.611]                       master <- NULL
[11:01:05.611]                       while (!identical(envir, .GlobalEnv) && 
[11:01:05.611]                         !identical(envir, emptyenv())) {
[11:01:05.611]                         if (exists("master", mode = "list", envir = envir, 
[11:01:05.611]                           inherits = FALSE)) {
[11:01:05.611]                           master <- get("master", mode = "list", 
[11:01:05.611]                             envir = envir, inherits = FALSE)
[11:01:05.611]                           if (inherits(master, c("SOCKnode", 
[11:01:05.611]                             "SOCK0node"))) {
[11:01:05.611]                             sendCondition <<- function(cond) {
[11:01:05.611]                               data <- list(type = "VALUE", value = cond, 
[11:01:05.611]                                 success = TRUE)
[11:01:05.611]                               parallel_sendData(master, data)
[11:01:05.611]                             }
[11:01:05.611]                             return(sendCondition)
[11:01:05.611]                           }
[11:01:05.611]                         }
[11:01:05.611]                         frame <- frame + 1L
[11:01:05.611]                         envir <- sys.frame(frame)
[11:01:05.611]                       }
[11:01:05.611]                     }
[11:01:05.611]                     sendCondition <<- function(cond) NULL
[11:01:05.611]                   }
[11:01:05.611]                 })
[11:01:05.611]                 withCallingHandlers({
[11:01:05.611]                   {
[11:01:05.611]                     sum(x, y)
[11:01:05.611]                   }
[11:01:05.611]                 }, immediateCondition = function(cond) {
[11:01:05.611]                   sendCondition <- ...future.makeSendCondition()
[11:01:05.611]                   sendCondition(cond)
[11:01:05.611]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.611]                   {
[11:01:05.611]                     inherits <- base::inherits
[11:01:05.611]                     invokeRestart <- base::invokeRestart
[11:01:05.611]                     is.null <- base::is.null
[11:01:05.611]                     muffled <- FALSE
[11:01:05.611]                     if (inherits(cond, "message")) {
[11:01:05.611]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:05.611]                       if (muffled) 
[11:01:05.611]                         invokeRestart("muffleMessage")
[11:01:05.611]                     }
[11:01:05.611]                     else if (inherits(cond, "warning")) {
[11:01:05.611]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:05.611]                       if (muffled) 
[11:01:05.611]                         invokeRestart("muffleWarning")
[11:01:05.611]                     }
[11:01:05.611]                     else if (inherits(cond, "condition")) {
[11:01:05.611]                       if (!is.null(pattern)) {
[11:01:05.611]                         computeRestarts <- base::computeRestarts
[11:01:05.611]                         grepl <- base::grepl
[11:01:05.611]                         restarts <- computeRestarts(cond)
[11:01:05.611]                         for (restart in restarts) {
[11:01:05.611]                           name <- restart$name
[11:01:05.611]                           if (is.null(name)) 
[11:01:05.611]                             next
[11:01:05.611]                           if (!grepl(pattern, name)) 
[11:01:05.611]                             next
[11:01:05.611]                           invokeRestart(restart)
[11:01:05.611]                           muffled <- TRUE
[11:01:05.611]                           break
[11:01:05.611]                         }
[11:01:05.611]                       }
[11:01:05.611]                     }
[11:01:05.611]                     invisible(muffled)
[11:01:05.611]                   }
[11:01:05.611]                   muffleCondition(cond)
[11:01:05.611]                 })
[11:01:05.611]             }))
[11:01:05.611]             future::FutureResult(value = ...future.value$value, 
[11:01:05.611]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.611]                   ...future.rng), globalenv = if (FALSE) 
[11:01:05.611]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:05.611]                     ...future.globalenv.names))
[11:01:05.611]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:05.611]         }, condition = base::local({
[11:01:05.611]             c <- base::c
[11:01:05.611]             inherits <- base::inherits
[11:01:05.611]             invokeRestart <- base::invokeRestart
[11:01:05.611]             length <- base::length
[11:01:05.611]             list <- base::list
[11:01:05.611]             seq.int <- base::seq.int
[11:01:05.611]             signalCondition <- base::signalCondition
[11:01:05.611]             sys.calls <- base::sys.calls
[11:01:05.611]             `[[` <- base::`[[`
[11:01:05.611]             `+` <- base::`+`
[11:01:05.611]             `<<-` <- base::`<<-`
[11:01:05.611]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:05.611]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:05.611]                   3L)]
[11:01:05.611]             }
[11:01:05.611]             function(cond) {
[11:01:05.611]                 is_error <- inherits(cond, "error")
[11:01:05.611]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:05.611]                   NULL)
[11:01:05.611]                 if (is_error) {
[11:01:05.611]                   sessionInformation <- function() {
[11:01:05.611]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:05.611]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:05.611]                       search = base::search(), system = base::Sys.info())
[11:01:05.611]                   }
[11:01:05.611]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.611]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:05.611]                     cond$call), session = sessionInformation(), 
[11:01:05.611]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:05.611]                   signalCondition(cond)
[11:01:05.611]                 }
[11:01:05.611]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:05.611]                 "immediateCondition"))) {
[11:01:05.611]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:05.611]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.611]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:05.611]                   if (TRUE && !signal) {
[11:01:05.611]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.611]                     {
[11:01:05.611]                       inherits <- base::inherits
[11:01:05.611]                       invokeRestart <- base::invokeRestart
[11:01:05.611]                       is.null <- base::is.null
[11:01:05.611]                       muffled <- FALSE
[11:01:05.611]                       if (inherits(cond, "message")) {
[11:01:05.611]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.611]                         if (muffled) 
[11:01:05.611]                           invokeRestart("muffleMessage")
[11:01:05.611]                       }
[11:01:05.611]                       else if (inherits(cond, "warning")) {
[11:01:05.611]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.611]                         if (muffled) 
[11:01:05.611]                           invokeRestart("muffleWarning")
[11:01:05.611]                       }
[11:01:05.611]                       else if (inherits(cond, "condition")) {
[11:01:05.611]                         if (!is.null(pattern)) {
[11:01:05.611]                           computeRestarts <- base::computeRestarts
[11:01:05.611]                           grepl <- base::grepl
[11:01:05.611]                           restarts <- computeRestarts(cond)
[11:01:05.611]                           for (restart in restarts) {
[11:01:05.611]                             name <- restart$name
[11:01:05.611]                             if (is.null(name)) 
[11:01:05.611]                               next
[11:01:05.611]                             if (!grepl(pattern, name)) 
[11:01:05.611]                               next
[11:01:05.611]                             invokeRestart(restart)
[11:01:05.611]                             muffled <- TRUE
[11:01:05.611]                             break
[11:01:05.611]                           }
[11:01:05.611]                         }
[11:01:05.611]                       }
[11:01:05.611]                       invisible(muffled)
[11:01:05.611]                     }
[11:01:05.611]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.611]                   }
[11:01:05.611]                 }
[11:01:05.611]                 else {
[11:01:05.611]                   if (TRUE) {
[11:01:05.611]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.611]                     {
[11:01:05.611]                       inherits <- base::inherits
[11:01:05.611]                       invokeRestart <- base::invokeRestart
[11:01:05.611]                       is.null <- base::is.null
[11:01:05.611]                       muffled <- FALSE
[11:01:05.611]                       if (inherits(cond, "message")) {
[11:01:05.611]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.611]                         if (muffled) 
[11:01:05.611]                           invokeRestart("muffleMessage")
[11:01:05.611]                       }
[11:01:05.611]                       else if (inherits(cond, "warning")) {
[11:01:05.611]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.611]                         if (muffled) 
[11:01:05.611]                           invokeRestart("muffleWarning")
[11:01:05.611]                       }
[11:01:05.611]                       else if (inherits(cond, "condition")) {
[11:01:05.611]                         if (!is.null(pattern)) {
[11:01:05.611]                           computeRestarts <- base::computeRestarts
[11:01:05.611]                           grepl <- base::grepl
[11:01:05.611]                           restarts <- computeRestarts(cond)
[11:01:05.611]                           for (restart in restarts) {
[11:01:05.611]                             name <- restart$name
[11:01:05.611]                             if (is.null(name)) 
[11:01:05.611]                               next
[11:01:05.611]                             if (!grepl(pattern, name)) 
[11:01:05.611]                               next
[11:01:05.611]                             invokeRestart(restart)
[11:01:05.611]                             muffled <- TRUE
[11:01:05.611]                             break
[11:01:05.611]                           }
[11:01:05.611]                         }
[11:01:05.611]                       }
[11:01:05.611]                       invisible(muffled)
[11:01:05.611]                     }
[11:01:05.611]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.611]                   }
[11:01:05.611]                 }
[11:01:05.611]             }
[11:01:05.611]         }))
[11:01:05.611]     }, error = function(ex) {
[11:01:05.611]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:05.611]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.611]                 ...future.rng), started = ...future.startTime, 
[11:01:05.611]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:05.611]             version = "1.8"), class = "FutureResult")
[11:01:05.611]     }, finally = {
[11:01:05.611]         if (!identical(...future.workdir, getwd())) 
[11:01:05.611]             setwd(...future.workdir)
[11:01:05.611]         {
[11:01:05.611]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:05.611]                 ...future.oldOptions$nwarnings <- NULL
[11:01:05.611]             }
[11:01:05.611]             base::options(...future.oldOptions)
[11:01:05.611]             if (.Platform$OS.type == "windows") {
[11:01:05.611]                 old_names <- names(...future.oldEnvVars)
[11:01:05.611]                 envs <- base::Sys.getenv()
[11:01:05.611]                 names <- names(envs)
[11:01:05.611]                 common <- intersect(names, old_names)
[11:01:05.611]                 added <- setdiff(names, old_names)
[11:01:05.611]                 removed <- setdiff(old_names, names)
[11:01:05.611]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:05.611]                   envs[common]]
[11:01:05.611]                 NAMES <- toupper(changed)
[11:01:05.611]                 args <- list()
[11:01:05.611]                 for (kk in seq_along(NAMES)) {
[11:01:05.611]                   name <- changed[[kk]]
[11:01:05.611]                   NAME <- NAMES[[kk]]
[11:01:05.611]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.611]                     next
[11:01:05.611]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.611]                 }
[11:01:05.611]                 NAMES <- toupper(added)
[11:01:05.611]                 for (kk in seq_along(NAMES)) {
[11:01:05.611]                   name <- added[[kk]]
[11:01:05.611]                   NAME <- NAMES[[kk]]
[11:01:05.611]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.611]                     next
[11:01:05.611]                   args[[name]] <- ""
[11:01:05.611]                 }
[11:01:05.611]                 NAMES <- toupper(removed)
[11:01:05.611]                 for (kk in seq_along(NAMES)) {
[11:01:05.611]                   name <- removed[[kk]]
[11:01:05.611]                   NAME <- NAMES[[kk]]
[11:01:05.611]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.611]                     next
[11:01:05.611]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.611]                 }
[11:01:05.611]                 if (length(args) > 0) 
[11:01:05.611]                   base::do.call(base::Sys.setenv, args = args)
[11:01:05.611]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:05.611]             }
[11:01:05.611]             else {
[11:01:05.611]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:05.611]             }
[11:01:05.611]             {
[11:01:05.611]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:05.611]                   0L) {
[11:01:05.611]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:05.611]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:05.611]                   base::options(opts)
[11:01:05.611]                 }
[11:01:05.611]                 {
[11:01:05.611]                   {
[11:01:05.611]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:05.611]                     NULL
[11:01:05.611]                   }
[11:01:05.611]                   options(future.plan = NULL)
[11:01:05.611]                   if (is.na(NA_character_)) 
[11:01:05.611]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.611]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:05.611]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:05.611]                     .init = FALSE)
[11:01:05.611]                 }
[11:01:05.611]             }
[11:01:05.611]         }
[11:01:05.611]     })
[11:01:05.611]     if (TRUE) {
[11:01:05.611]         base::sink(type = "output", split = FALSE)
[11:01:05.611]         if (TRUE) {
[11:01:05.611]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:05.611]         }
[11:01:05.611]         else {
[11:01:05.611]             ...future.result["stdout"] <- base::list(NULL)
[11:01:05.611]         }
[11:01:05.611]         base::close(...future.stdout)
[11:01:05.611]         ...future.stdout <- NULL
[11:01:05.611]     }
[11:01:05.611]     ...future.result$conditions <- ...future.conditions
[11:01:05.611]     ...future.result$finished <- base::Sys.time()
[11:01:05.611]     ...future.result
[11:01:05.611] }
[11:01:05.614] Exporting 2 global objects (478 bytes) to cluster node #1 ...
[11:01:05.614] Exporting ‘x’ (133 bytes) to cluster node #1 ...
[11:01:05.614] Exporting ‘x’ (133 bytes) to cluster node #1 ... DONE
[11:01:05.614] Exporting ‘y’ (39 bytes) to cluster node #1 ...
[11:01:05.615] Exporting ‘y’ (39 bytes) to cluster node #1 ... DONE
[11:01:05.615] Exporting 2 global objects (478 bytes) to cluster node #1 ... DONE
[11:01:05.615] MultisessionFuture started
[11:01:05.615] - Launch lazy future ... done
[11:01:05.616] run() for ‘MultisessionFuture’ ... done
[11:01:05.616] result() for ClusterFuture ...
[11:01:05.616] receiveMessageFromWorker() for ClusterFuture ...
[11:01:05.616] - Validating connection of MultisessionFuture
[11:01:05.657] - received message: FutureResult
[11:01:05.657] - Received FutureResult
[11:01:05.657] - Erased future from FutureRegistry
[11:01:05.657] result() for ClusterFuture ...
[11:01:05.657] - result already collected: FutureResult
[11:01:05.658] result() for ClusterFuture ... done
[11:01:05.658] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:05.658] result() for ClusterFuture ... done
[11:01:05.658] result() for ClusterFuture ...
[11:01:05.658] - result already collected: FutureResult
[11:01:05.658] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x55b7e43ada18>
Arguments '...' exists: FALSE
[11:01:05.659] getGlobalsAndPackages() ...
[11:01:05.659] Searching for globals...
[11:01:05.660] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[11:01:05.661] Searching for globals ... DONE
[11:01:05.661] Resolving globals: FALSE
[11:01:05.661] Tweak future expression to call with '...' arguments ...
[11:01:05.661] The total size of the 2 globals is 172 bytes (172 bytes)
[11:01:05.662] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 172 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:05.662] - globals: [2] ‘x’, ‘y’
[11:01:05.662] 
[11:01:05.662] getGlobalsAndPackages() ... DONE
[11:01:05.662] run() for ‘Future’ ...
[11:01:05.662] - state: ‘created’
[11:01:05.663] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:05.677] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:05.677] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:05.677]   - Field: ‘node’
[11:01:05.677]   - Field: ‘label’
[11:01:05.677]   - Field: ‘local’
[11:01:05.677]   - Field: ‘owner’
[11:01:05.677]   - Field: ‘envir’
[11:01:05.678]   - Field: ‘workers’
[11:01:05.678]   - Field: ‘packages’
[11:01:05.678]   - Field: ‘gc’
[11:01:05.678]   - Field: ‘conditions’
[11:01:05.678]   - Field: ‘persistent’
[11:01:05.678]   - Field: ‘expr’
[11:01:05.678]   - Field: ‘uuid’
[11:01:05.678]   - Field: ‘seed’
[11:01:05.678]   - Field: ‘version’
[11:01:05.678]   - Field: ‘result’
[11:01:05.679]   - Field: ‘asynchronous’
[11:01:05.679]   - Field: ‘calls’
[11:01:05.679]   - Field: ‘globals’
[11:01:05.679]   - Field: ‘stdout’
[11:01:05.679]   - Field: ‘earlySignal’
[11:01:05.679]   - Field: ‘lazy’
[11:01:05.679]   - Field: ‘state’
[11:01:05.679] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:05.679] - Launch lazy future ...
[11:01:05.680] Packages needed by the future expression (n = 0): <none>
[11:01:05.680] Packages needed by future strategies (n = 0): <none>
[11:01:05.680] {
[11:01:05.680]     {
[11:01:05.680]         {
[11:01:05.680]             ...future.startTime <- base::Sys.time()
[11:01:05.680]             {
[11:01:05.680]                 {
[11:01:05.680]                   {
[11:01:05.680]                     {
[11:01:05.680]                       base::local({
[11:01:05.680]                         has_future <- base::requireNamespace("future", 
[11:01:05.680]                           quietly = TRUE)
[11:01:05.680]                         if (has_future) {
[11:01:05.680]                           ns <- base::getNamespace("future")
[11:01:05.680]                           version <- ns[[".package"]][["version"]]
[11:01:05.680]                           if (is.null(version)) 
[11:01:05.680]                             version <- utils::packageVersion("future")
[11:01:05.680]                         }
[11:01:05.680]                         else {
[11:01:05.680]                           version <- NULL
[11:01:05.680]                         }
[11:01:05.680]                         if (!has_future || version < "1.8.0") {
[11:01:05.680]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:05.680]                             "", base::R.version$version.string), 
[11:01:05.680]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:05.680]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:05.680]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:05.680]                               "release", "version")], collapse = " "), 
[11:01:05.680]                             hostname = base::Sys.info()[["nodename"]])
[11:01:05.680]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:05.680]                             info)
[11:01:05.680]                           info <- base::paste(info, collapse = "; ")
[11:01:05.680]                           if (!has_future) {
[11:01:05.680]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:05.680]                               info)
[11:01:05.680]                           }
[11:01:05.680]                           else {
[11:01:05.680]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:05.680]                               info, version)
[11:01:05.680]                           }
[11:01:05.680]                           base::stop(msg)
[11:01:05.680]                         }
[11:01:05.680]                       })
[11:01:05.680]                     }
[11:01:05.680]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:05.680]                     base::options(mc.cores = 1L)
[11:01:05.680]                   }
[11:01:05.680]                   ...future.strategy.old <- future::plan("list")
[11:01:05.680]                   options(future.plan = NULL)
[11:01:05.680]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.680]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:05.680]                 }
[11:01:05.680]                 ...future.workdir <- getwd()
[11:01:05.680]             }
[11:01:05.680]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:05.680]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:05.680]         }
[11:01:05.680]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:05.680]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:05.680]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:05.680]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:05.680]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:05.680]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:05.680]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:05.680]             base::names(...future.oldOptions))
[11:01:05.680]     }
[11:01:05.680]     if (FALSE) {
[11:01:05.680]     }
[11:01:05.680]     else {
[11:01:05.680]         if (TRUE) {
[11:01:05.680]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:05.680]                 open = "w")
[11:01:05.680]         }
[11:01:05.680]         else {
[11:01:05.680]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:05.680]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:05.680]         }
[11:01:05.680]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:05.680]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:05.680]             base::sink(type = "output", split = FALSE)
[11:01:05.680]             base::close(...future.stdout)
[11:01:05.680]         }, add = TRUE)
[11:01:05.680]     }
[11:01:05.680]     ...future.frame <- base::sys.nframe()
[11:01:05.680]     ...future.conditions <- base::list()
[11:01:05.680]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:05.680]     if (FALSE) {
[11:01:05.680]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:05.680]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:05.680]     }
[11:01:05.680]     ...future.result <- base::tryCatch({
[11:01:05.680]         base::withCallingHandlers({
[11:01:05.680]             ...future.value <- base::withVisible(base::local({
[11:01:05.680]                 ...future.makeSendCondition <- base::local({
[11:01:05.680]                   sendCondition <- NULL
[11:01:05.680]                   function(frame = 1L) {
[11:01:05.680]                     if (is.function(sendCondition)) 
[11:01:05.680]                       return(sendCondition)
[11:01:05.680]                     ns <- getNamespace("parallel")
[11:01:05.680]                     if (exists("sendData", mode = "function", 
[11:01:05.680]                       envir = ns)) {
[11:01:05.680]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:05.680]                         envir = ns)
[11:01:05.680]                       envir <- sys.frame(frame)
[11:01:05.680]                       master <- NULL
[11:01:05.680]                       while (!identical(envir, .GlobalEnv) && 
[11:01:05.680]                         !identical(envir, emptyenv())) {
[11:01:05.680]                         if (exists("master", mode = "list", envir = envir, 
[11:01:05.680]                           inherits = FALSE)) {
[11:01:05.680]                           master <- get("master", mode = "list", 
[11:01:05.680]                             envir = envir, inherits = FALSE)
[11:01:05.680]                           if (inherits(master, c("SOCKnode", 
[11:01:05.680]                             "SOCK0node"))) {
[11:01:05.680]                             sendCondition <<- function(cond) {
[11:01:05.680]                               data <- list(type = "VALUE", value = cond, 
[11:01:05.680]                                 success = TRUE)
[11:01:05.680]                               parallel_sendData(master, data)
[11:01:05.680]                             }
[11:01:05.680]                             return(sendCondition)
[11:01:05.680]                           }
[11:01:05.680]                         }
[11:01:05.680]                         frame <- frame + 1L
[11:01:05.680]                         envir <- sys.frame(frame)
[11:01:05.680]                       }
[11:01:05.680]                     }
[11:01:05.680]                     sendCondition <<- function(cond) NULL
[11:01:05.680]                   }
[11:01:05.680]                 })
[11:01:05.680]                 withCallingHandlers({
[11:01:05.680]                   {
[11:01:05.680]                     sum(x, y, ...)
[11:01:05.680]                   }
[11:01:05.680]                 }, immediateCondition = function(cond) {
[11:01:05.680]                   sendCondition <- ...future.makeSendCondition()
[11:01:05.680]                   sendCondition(cond)
[11:01:05.680]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.680]                   {
[11:01:05.680]                     inherits <- base::inherits
[11:01:05.680]                     invokeRestart <- base::invokeRestart
[11:01:05.680]                     is.null <- base::is.null
[11:01:05.680]                     muffled <- FALSE
[11:01:05.680]                     if (inherits(cond, "message")) {
[11:01:05.680]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:05.680]                       if (muffled) 
[11:01:05.680]                         invokeRestart("muffleMessage")
[11:01:05.680]                     }
[11:01:05.680]                     else if (inherits(cond, "warning")) {
[11:01:05.680]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:05.680]                       if (muffled) 
[11:01:05.680]                         invokeRestart("muffleWarning")
[11:01:05.680]                     }
[11:01:05.680]                     else if (inherits(cond, "condition")) {
[11:01:05.680]                       if (!is.null(pattern)) {
[11:01:05.680]                         computeRestarts <- base::computeRestarts
[11:01:05.680]                         grepl <- base::grepl
[11:01:05.680]                         restarts <- computeRestarts(cond)
[11:01:05.680]                         for (restart in restarts) {
[11:01:05.680]                           name <- restart$name
[11:01:05.680]                           if (is.null(name)) 
[11:01:05.680]                             next
[11:01:05.680]                           if (!grepl(pattern, name)) 
[11:01:05.680]                             next
[11:01:05.680]                           invokeRestart(restart)
[11:01:05.680]                           muffled <- TRUE
[11:01:05.680]                           break
[11:01:05.680]                         }
[11:01:05.680]                       }
[11:01:05.680]                     }
[11:01:05.680]                     invisible(muffled)
[11:01:05.680]                   }
[11:01:05.680]                   muffleCondition(cond)
[11:01:05.680]                 })
[11:01:05.680]             }))
[11:01:05.680]             future::FutureResult(value = ...future.value$value, 
[11:01:05.680]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.680]                   ...future.rng), globalenv = if (FALSE) 
[11:01:05.680]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:05.680]                     ...future.globalenv.names))
[11:01:05.680]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:05.680]         }, condition = base::local({
[11:01:05.680]             c <- base::c
[11:01:05.680]             inherits <- base::inherits
[11:01:05.680]             invokeRestart <- base::invokeRestart
[11:01:05.680]             length <- base::length
[11:01:05.680]             list <- base::list
[11:01:05.680]             seq.int <- base::seq.int
[11:01:05.680]             signalCondition <- base::signalCondition
[11:01:05.680]             sys.calls <- base::sys.calls
[11:01:05.680]             `[[` <- base::`[[`
[11:01:05.680]             `+` <- base::`+`
[11:01:05.680]             `<<-` <- base::`<<-`
[11:01:05.680]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:05.680]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:05.680]                   3L)]
[11:01:05.680]             }
[11:01:05.680]             function(cond) {
[11:01:05.680]                 is_error <- inherits(cond, "error")
[11:01:05.680]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:05.680]                   NULL)
[11:01:05.680]                 if (is_error) {
[11:01:05.680]                   sessionInformation <- function() {
[11:01:05.680]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:05.680]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:05.680]                       search = base::search(), system = base::Sys.info())
[11:01:05.680]                   }
[11:01:05.680]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.680]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:05.680]                     cond$call), session = sessionInformation(), 
[11:01:05.680]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:05.680]                   signalCondition(cond)
[11:01:05.680]                 }
[11:01:05.680]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:05.680]                 "immediateCondition"))) {
[11:01:05.680]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:05.680]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.680]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:05.680]                   if (TRUE && !signal) {
[11:01:05.680]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.680]                     {
[11:01:05.680]                       inherits <- base::inherits
[11:01:05.680]                       invokeRestart <- base::invokeRestart
[11:01:05.680]                       is.null <- base::is.null
[11:01:05.680]                       muffled <- FALSE
[11:01:05.680]                       if (inherits(cond, "message")) {
[11:01:05.680]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.680]                         if (muffled) 
[11:01:05.680]                           invokeRestart("muffleMessage")
[11:01:05.680]                       }
[11:01:05.680]                       else if (inherits(cond, "warning")) {
[11:01:05.680]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.680]                         if (muffled) 
[11:01:05.680]                           invokeRestart("muffleWarning")
[11:01:05.680]                       }
[11:01:05.680]                       else if (inherits(cond, "condition")) {
[11:01:05.680]                         if (!is.null(pattern)) {
[11:01:05.680]                           computeRestarts <- base::computeRestarts
[11:01:05.680]                           grepl <- base::grepl
[11:01:05.680]                           restarts <- computeRestarts(cond)
[11:01:05.680]                           for (restart in restarts) {
[11:01:05.680]                             name <- restart$name
[11:01:05.680]                             if (is.null(name)) 
[11:01:05.680]                               next
[11:01:05.680]                             if (!grepl(pattern, name)) 
[11:01:05.680]                               next
[11:01:05.680]                             invokeRestart(restart)
[11:01:05.680]                             muffled <- TRUE
[11:01:05.680]                             break
[11:01:05.680]                           }
[11:01:05.680]                         }
[11:01:05.680]                       }
[11:01:05.680]                       invisible(muffled)
[11:01:05.680]                     }
[11:01:05.680]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.680]                   }
[11:01:05.680]                 }
[11:01:05.680]                 else {
[11:01:05.680]                   if (TRUE) {
[11:01:05.680]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.680]                     {
[11:01:05.680]                       inherits <- base::inherits
[11:01:05.680]                       invokeRestart <- base::invokeRestart
[11:01:05.680]                       is.null <- base::is.null
[11:01:05.680]                       muffled <- FALSE
[11:01:05.680]                       if (inherits(cond, "message")) {
[11:01:05.680]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.680]                         if (muffled) 
[11:01:05.680]                           invokeRestart("muffleMessage")
[11:01:05.680]                       }
[11:01:05.680]                       else if (inherits(cond, "warning")) {
[11:01:05.680]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.680]                         if (muffled) 
[11:01:05.680]                           invokeRestart("muffleWarning")
[11:01:05.680]                       }
[11:01:05.680]                       else if (inherits(cond, "condition")) {
[11:01:05.680]                         if (!is.null(pattern)) {
[11:01:05.680]                           computeRestarts <- base::computeRestarts
[11:01:05.680]                           grepl <- base::grepl
[11:01:05.680]                           restarts <- computeRestarts(cond)
[11:01:05.680]                           for (restart in restarts) {
[11:01:05.680]                             name <- restart$name
[11:01:05.680]                             if (is.null(name)) 
[11:01:05.680]                               next
[11:01:05.680]                             if (!grepl(pattern, name)) 
[11:01:05.680]                               next
[11:01:05.680]                             invokeRestart(restart)
[11:01:05.680]                             muffled <- TRUE
[11:01:05.680]                             break
[11:01:05.680]                           }
[11:01:05.680]                         }
[11:01:05.680]                       }
[11:01:05.680]                       invisible(muffled)
[11:01:05.680]                     }
[11:01:05.680]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.680]                   }
[11:01:05.680]                 }
[11:01:05.680]             }
[11:01:05.680]         }))
[11:01:05.680]     }, error = function(ex) {
[11:01:05.680]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:05.680]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.680]                 ...future.rng), started = ...future.startTime, 
[11:01:05.680]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:05.680]             version = "1.8"), class = "FutureResult")
[11:01:05.680]     }, finally = {
[11:01:05.680]         if (!identical(...future.workdir, getwd())) 
[11:01:05.680]             setwd(...future.workdir)
[11:01:05.680]         {
[11:01:05.680]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:05.680]                 ...future.oldOptions$nwarnings <- NULL
[11:01:05.680]             }
[11:01:05.680]             base::options(...future.oldOptions)
[11:01:05.680]             if (.Platform$OS.type == "windows") {
[11:01:05.680]                 old_names <- names(...future.oldEnvVars)
[11:01:05.680]                 envs <- base::Sys.getenv()
[11:01:05.680]                 names <- names(envs)
[11:01:05.680]                 common <- intersect(names, old_names)
[11:01:05.680]                 added <- setdiff(names, old_names)
[11:01:05.680]                 removed <- setdiff(old_names, names)
[11:01:05.680]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:05.680]                   envs[common]]
[11:01:05.680]                 NAMES <- toupper(changed)
[11:01:05.680]                 args <- list()
[11:01:05.680]                 for (kk in seq_along(NAMES)) {
[11:01:05.680]                   name <- changed[[kk]]
[11:01:05.680]                   NAME <- NAMES[[kk]]
[11:01:05.680]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.680]                     next
[11:01:05.680]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.680]                 }
[11:01:05.680]                 NAMES <- toupper(added)
[11:01:05.680]                 for (kk in seq_along(NAMES)) {
[11:01:05.680]                   name <- added[[kk]]
[11:01:05.680]                   NAME <- NAMES[[kk]]
[11:01:05.680]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.680]                     next
[11:01:05.680]                   args[[name]] <- ""
[11:01:05.680]                 }
[11:01:05.680]                 NAMES <- toupper(removed)
[11:01:05.680]                 for (kk in seq_along(NAMES)) {
[11:01:05.680]                   name <- removed[[kk]]
[11:01:05.680]                   NAME <- NAMES[[kk]]
[11:01:05.680]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.680]                     next
[11:01:05.680]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.680]                 }
[11:01:05.680]                 if (length(args) > 0) 
[11:01:05.680]                   base::do.call(base::Sys.setenv, args = args)
[11:01:05.680]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:05.680]             }
[11:01:05.680]             else {
[11:01:05.680]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:05.680]             }
[11:01:05.680]             {
[11:01:05.680]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:05.680]                   0L) {
[11:01:05.680]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:05.680]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:05.680]                   base::options(opts)
[11:01:05.680]                 }
[11:01:05.680]                 {
[11:01:05.680]                   {
[11:01:05.680]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:05.680]                     NULL
[11:01:05.680]                   }
[11:01:05.680]                   options(future.plan = NULL)
[11:01:05.680]                   if (is.na(NA_character_)) 
[11:01:05.680]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.680]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:05.680]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:05.680]                     .init = FALSE)
[11:01:05.680]                 }
[11:01:05.680]             }
[11:01:05.680]         }
[11:01:05.680]     })
[11:01:05.680]     if (TRUE) {
[11:01:05.680]         base::sink(type = "output", split = FALSE)
[11:01:05.680]         if (TRUE) {
[11:01:05.680]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:05.680]         }
[11:01:05.680]         else {
[11:01:05.680]             ...future.result["stdout"] <- base::list(NULL)
[11:01:05.680]         }
[11:01:05.680]         base::close(...future.stdout)
[11:01:05.680]         ...future.stdout <- NULL
[11:01:05.680]     }
[11:01:05.680]     ...future.result$conditions <- ...future.conditions
[11:01:05.680]     ...future.result$finished <- base::Sys.time()
[11:01:05.680]     ...future.result
[11:01:05.680] }
[11:01:05.683] Exporting 2 global objects (478 bytes) to cluster node #1 ...
[11:01:05.683] Exporting ‘x’ (133 bytes) to cluster node #1 ...
[11:01:05.684] Exporting ‘x’ (133 bytes) to cluster node #1 ... DONE
[11:01:05.684] Exporting ‘y’ (39 bytes) to cluster node #1 ...
[11:01:05.684] Exporting ‘y’ (39 bytes) to cluster node #1 ... DONE
[11:01:05.684] Exporting 2 global objects (478 bytes) to cluster node #1 ... DONE
[11:01:05.685] MultisessionFuture started
[11:01:05.685] - Launch lazy future ... done
[11:01:05.685] run() for ‘MultisessionFuture’ ... done
[11:01:05.685] result() for ClusterFuture ...
[11:01:05.685] receiveMessageFromWorker() for ClusterFuture ...
[11:01:05.685] - Validating connection of MultisessionFuture
[11:01:05.727] - received message: FutureResult
[11:01:05.727] - Received FutureResult
[11:01:05.728] - Erased future from FutureRegistry
[11:01:05.728] result() for ClusterFuture ...
[11:01:05.728] - result already collected: FutureResult
[11:01:05.728] result() for ClusterFuture ... done
[11:01:05.728] signalConditions() ...
[11:01:05.728]  - include = ‘immediateCondition’
[11:01:05.728]  - exclude = 
[11:01:05.728]  - resignal = FALSE
[11:01:05.728]  - Number of conditions: 1
[11:01:05.729] signalConditions() ... done
[11:01:05.729] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:05.729] result() for ClusterFuture ... done
[11:01:05.729] result() for ClusterFuture ...
[11:01:05.729] - result already collected: FutureResult
[11:01:05.729] result() for ClusterFuture ... done
[11:01:05.729] signalConditions() ...
[11:01:05.729]  - include = ‘immediateCondition’
[11:01:05.729]  - exclude = 
[11:01:05.729]  - resignal = FALSE
[11:01:05.730]  - Number of conditions: 1
[11:01:05.730] signalConditions() ... done
[11:01:05.730] Future state: ‘finished’
[11:01:05.730] result() for ClusterFuture ...
[11:01:05.730] - result already collected: FutureResult
[11:01:05.730] result() for ClusterFuture ... done
[11:01:05.730] signalConditions() ...
[11:01:05.730]  - include = ‘condition’
[11:01:05.730]  - exclude = ‘immediateCondition’
[11:01:05.731]  - resignal = TRUE
[11:01:05.731]  - Number of conditions: 1
[11:01:05.731]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:01:05.731] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55b7e2426e88>
Arguments '...' exists: TRUE
[11:01:05.732] getGlobalsAndPackages() ...
[11:01:05.732] - globals passed as-is: [1] ‘...’
[11:01:05.732] Resolving globals: FALSE
[11:01:05.732] Tweak future expression to call with '...' arguments ...
[11:01:05.732] {
[11:01:05.732]     do.call(function(...) {
[11:01:05.732]         fcn <- function() sum(...)
[11:01:05.732]         fcn()
[11:01:05.732]     }, args = future.call.arguments)
[11:01:05.732] }
[11:01:05.732] Tweak future expression to call with '...' arguments ... DONE
[11:01:05.733] The total size of the 1 globals is 223 bytes (223 bytes)
[11:01:05.733] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 223 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (223 bytes of class ‘list’)
[11:01:05.733] - globals: [1] ‘future.call.arguments’
[11:01:05.733] 
[11:01:05.734] getGlobalsAndPackages() ... DONE
[11:01:05.734] run() for ‘Future’ ...
[11:01:05.734] - state: ‘created’
[11:01:05.734] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:05.748] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:05.749] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:05.749]   - Field: ‘node’
[11:01:05.749]   - Field: ‘label’
[11:01:05.749]   - Field: ‘local’
[11:01:05.749]   - Field: ‘owner’
[11:01:05.749]   - Field: ‘envir’
[11:01:05.749]   - Field: ‘workers’
[11:01:05.749]   - Field: ‘packages’
[11:01:05.749]   - Field: ‘gc’
[11:01:05.749]   - Field: ‘conditions’
[11:01:05.750]   - Field: ‘persistent’
[11:01:05.750]   - Field: ‘expr’
[11:01:05.750]   - Field: ‘uuid’
[11:01:05.750]   - Field: ‘seed’
[11:01:05.750]   - Field: ‘version’
[11:01:05.750]   - Field: ‘result’
[11:01:05.750]   - Field: ‘asynchronous’
[11:01:05.750]   - Field: ‘calls’
[11:01:05.750]   - Field: ‘globals’
[11:01:05.751]   - Field: ‘stdout’
[11:01:05.751]   - Field: ‘earlySignal’
[11:01:05.751]   - Field: ‘lazy’
[11:01:05.751]   - Field: ‘state’
[11:01:05.751] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:05.751] - Launch lazy future ...
[11:01:05.751] Packages needed by the future expression (n = 0): <none>
[11:01:05.752] Packages needed by future strategies (n = 0): <none>
[11:01:05.754] {
[11:01:05.754]     {
[11:01:05.754]         {
[11:01:05.754]             ...future.startTime <- base::Sys.time()
[11:01:05.754]             {
[11:01:05.754]                 {
[11:01:05.754]                   {
[11:01:05.754]                     {
[11:01:05.754]                       base::local({
[11:01:05.754]                         has_future <- base::requireNamespace("future", 
[11:01:05.754]                           quietly = TRUE)
[11:01:05.754]                         if (has_future) {
[11:01:05.754]                           ns <- base::getNamespace("future")
[11:01:05.754]                           version <- ns[[".package"]][["version"]]
[11:01:05.754]                           if (is.null(version)) 
[11:01:05.754]                             version <- utils::packageVersion("future")
[11:01:05.754]                         }
[11:01:05.754]                         else {
[11:01:05.754]                           version <- NULL
[11:01:05.754]                         }
[11:01:05.754]                         if (!has_future || version < "1.8.0") {
[11:01:05.754]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:05.754]                             "", base::R.version$version.string), 
[11:01:05.754]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:05.754]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:05.754]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:05.754]                               "release", "version")], collapse = " "), 
[11:01:05.754]                             hostname = base::Sys.info()[["nodename"]])
[11:01:05.754]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:05.754]                             info)
[11:01:05.754]                           info <- base::paste(info, collapse = "; ")
[11:01:05.754]                           if (!has_future) {
[11:01:05.754]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:05.754]                               info)
[11:01:05.754]                           }
[11:01:05.754]                           else {
[11:01:05.754]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:05.754]                               info, version)
[11:01:05.754]                           }
[11:01:05.754]                           base::stop(msg)
[11:01:05.754]                         }
[11:01:05.754]                       })
[11:01:05.754]                     }
[11:01:05.754]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:05.754]                     base::options(mc.cores = 1L)
[11:01:05.754]                   }
[11:01:05.754]                   ...future.strategy.old <- future::plan("list")
[11:01:05.754]                   options(future.plan = NULL)
[11:01:05.754]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.754]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:05.754]                 }
[11:01:05.754]                 ...future.workdir <- getwd()
[11:01:05.754]             }
[11:01:05.754]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:05.754]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:05.754]         }
[11:01:05.754]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:05.754]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:05.754]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:05.754]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:05.754]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:05.754]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:05.754]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:05.754]             base::names(...future.oldOptions))
[11:01:05.754]     }
[11:01:05.754]     if (FALSE) {
[11:01:05.754]     }
[11:01:05.754]     else {
[11:01:05.754]         if (TRUE) {
[11:01:05.754]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:05.754]                 open = "w")
[11:01:05.754]         }
[11:01:05.754]         else {
[11:01:05.754]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:05.754]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:05.754]         }
[11:01:05.754]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:05.754]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:05.754]             base::sink(type = "output", split = FALSE)
[11:01:05.754]             base::close(...future.stdout)
[11:01:05.754]         }, add = TRUE)
[11:01:05.754]     }
[11:01:05.754]     ...future.frame <- base::sys.nframe()
[11:01:05.754]     ...future.conditions <- base::list()
[11:01:05.754]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:05.754]     if (FALSE) {
[11:01:05.754]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:05.754]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:05.754]     }
[11:01:05.754]     ...future.result <- base::tryCatch({
[11:01:05.754]         base::withCallingHandlers({
[11:01:05.754]             ...future.value <- base::withVisible(base::local({
[11:01:05.754]                 ...future.makeSendCondition <- base::local({
[11:01:05.754]                   sendCondition <- NULL
[11:01:05.754]                   function(frame = 1L) {
[11:01:05.754]                     if (is.function(sendCondition)) 
[11:01:05.754]                       return(sendCondition)
[11:01:05.754]                     ns <- getNamespace("parallel")
[11:01:05.754]                     if (exists("sendData", mode = "function", 
[11:01:05.754]                       envir = ns)) {
[11:01:05.754]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:05.754]                         envir = ns)
[11:01:05.754]                       envir <- sys.frame(frame)
[11:01:05.754]                       master <- NULL
[11:01:05.754]                       while (!identical(envir, .GlobalEnv) && 
[11:01:05.754]                         !identical(envir, emptyenv())) {
[11:01:05.754]                         if (exists("master", mode = "list", envir = envir, 
[11:01:05.754]                           inherits = FALSE)) {
[11:01:05.754]                           master <- get("master", mode = "list", 
[11:01:05.754]                             envir = envir, inherits = FALSE)
[11:01:05.754]                           if (inherits(master, c("SOCKnode", 
[11:01:05.754]                             "SOCK0node"))) {
[11:01:05.754]                             sendCondition <<- function(cond) {
[11:01:05.754]                               data <- list(type = "VALUE", value = cond, 
[11:01:05.754]                                 success = TRUE)
[11:01:05.754]                               parallel_sendData(master, data)
[11:01:05.754]                             }
[11:01:05.754]                             return(sendCondition)
[11:01:05.754]                           }
[11:01:05.754]                         }
[11:01:05.754]                         frame <- frame + 1L
[11:01:05.754]                         envir <- sys.frame(frame)
[11:01:05.754]                       }
[11:01:05.754]                     }
[11:01:05.754]                     sendCondition <<- function(cond) NULL
[11:01:05.754]                   }
[11:01:05.754]                 })
[11:01:05.754]                 withCallingHandlers({
[11:01:05.754]                   {
[11:01:05.754]                     do.call(function(...) {
[11:01:05.754]                       fcn <- function() sum(...)
[11:01:05.754]                       fcn()
[11:01:05.754]                     }, args = future.call.arguments)
[11:01:05.754]                   }
[11:01:05.754]                 }, immediateCondition = function(cond) {
[11:01:05.754]                   sendCondition <- ...future.makeSendCondition()
[11:01:05.754]                   sendCondition(cond)
[11:01:05.754]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.754]                   {
[11:01:05.754]                     inherits <- base::inherits
[11:01:05.754]                     invokeRestart <- base::invokeRestart
[11:01:05.754]                     is.null <- base::is.null
[11:01:05.754]                     muffled <- FALSE
[11:01:05.754]                     if (inherits(cond, "message")) {
[11:01:05.754]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:05.754]                       if (muffled) 
[11:01:05.754]                         invokeRestart("muffleMessage")
[11:01:05.754]                     }
[11:01:05.754]                     else if (inherits(cond, "warning")) {
[11:01:05.754]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:05.754]                       if (muffled) 
[11:01:05.754]                         invokeRestart("muffleWarning")
[11:01:05.754]                     }
[11:01:05.754]                     else if (inherits(cond, "condition")) {
[11:01:05.754]                       if (!is.null(pattern)) {
[11:01:05.754]                         computeRestarts <- base::computeRestarts
[11:01:05.754]                         grepl <- base::grepl
[11:01:05.754]                         restarts <- computeRestarts(cond)
[11:01:05.754]                         for (restart in restarts) {
[11:01:05.754]                           name <- restart$name
[11:01:05.754]                           if (is.null(name)) 
[11:01:05.754]                             next
[11:01:05.754]                           if (!grepl(pattern, name)) 
[11:01:05.754]                             next
[11:01:05.754]                           invokeRestart(restart)
[11:01:05.754]                           muffled <- TRUE
[11:01:05.754]                           break
[11:01:05.754]                         }
[11:01:05.754]                       }
[11:01:05.754]                     }
[11:01:05.754]                     invisible(muffled)
[11:01:05.754]                   }
[11:01:05.754]                   muffleCondition(cond)
[11:01:05.754]                 })
[11:01:05.754]             }))
[11:01:05.754]             future::FutureResult(value = ...future.value$value, 
[11:01:05.754]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.754]                   ...future.rng), globalenv = if (FALSE) 
[11:01:05.754]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:05.754]                     ...future.globalenv.names))
[11:01:05.754]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:05.754]         }, condition = base::local({
[11:01:05.754]             c <- base::c
[11:01:05.754]             inherits <- base::inherits
[11:01:05.754]             invokeRestart <- base::invokeRestart
[11:01:05.754]             length <- base::length
[11:01:05.754]             list <- base::list
[11:01:05.754]             seq.int <- base::seq.int
[11:01:05.754]             signalCondition <- base::signalCondition
[11:01:05.754]             sys.calls <- base::sys.calls
[11:01:05.754]             `[[` <- base::`[[`
[11:01:05.754]             `+` <- base::`+`
[11:01:05.754]             `<<-` <- base::`<<-`
[11:01:05.754]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:05.754]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:05.754]                   3L)]
[11:01:05.754]             }
[11:01:05.754]             function(cond) {
[11:01:05.754]                 is_error <- inherits(cond, "error")
[11:01:05.754]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:05.754]                   NULL)
[11:01:05.754]                 if (is_error) {
[11:01:05.754]                   sessionInformation <- function() {
[11:01:05.754]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:05.754]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:05.754]                       search = base::search(), system = base::Sys.info())
[11:01:05.754]                   }
[11:01:05.754]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.754]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:05.754]                     cond$call), session = sessionInformation(), 
[11:01:05.754]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:05.754]                   signalCondition(cond)
[11:01:05.754]                 }
[11:01:05.754]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:05.754]                 "immediateCondition"))) {
[11:01:05.754]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:05.754]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.754]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:05.754]                   if (TRUE && !signal) {
[11:01:05.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.754]                     {
[11:01:05.754]                       inherits <- base::inherits
[11:01:05.754]                       invokeRestart <- base::invokeRestart
[11:01:05.754]                       is.null <- base::is.null
[11:01:05.754]                       muffled <- FALSE
[11:01:05.754]                       if (inherits(cond, "message")) {
[11:01:05.754]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.754]                         if (muffled) 
[11:01:05.754]                           invokeRestart("muffleMessage")
[11:01:05.754]                       }
[11:01:05.754]                       else if (inherits(cond, "warning")) {
[11:01:05.754]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.754]                         if (muffled) 
[11:01:05.754]                           invokeRestart("muffleWarning")
[11:01:05.754]                       }
[11:01:05.754]                       else if (inherits(cond, "condition")) {
[11:01:05.754]                         if (!is.null(pattern)) {
[11:01:05.754]                           computeRestarts <- base::computeRestarts
[11:01:05.754]                           grepl <- base::grepl
[11:01:05.754]                           restarts <- computeRestarts(cond)
[11:01:05.754]                           for (restart in restarts) {
[11:01:05.754]                             name <- restart$name
[11:01:05.754]                             if (is.null(name)) 
[11:01:05.754]                               next
[11:01:05.754]                             if (!grepl(pattern, name)) 
[11:01:05.754]                               next
[11:01:05.754]                             invokeRestart(restart)
[11:01:05.754]                             muffled <- TRUE
[11:01:05.754]                             break
[11:01:05.754]                           }
[11:01:05.754]                         }
[11:01:05.754]                       }
[11:01:05.754]                       invisible(muffled)
[11:01:05.754]                     }
[11:01:05.754]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.754]                   }
[11:01:05.754]                 }
[11:01:05.754]                 else {
[11:01:05.754]                   if (TRUE) {
[11:01:05.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.754]                     {
[11:01:05.754]                       inherits <- base::inherits
[11:01:05.754]                       invokeRestart <- base::invokeRestart
[11:01:05.754]                       is.null <- base::is.null
[11:01:05.754]                       muffled <- FALSE
[11:01:05.754]                       if (inherits(cond, "message")) {
[11:01:05.754]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.754]                         if (muffled) 
[11:01:05.754]                           invokeRestart("muffleMessage")
[11:01:05.754]                       }
[11:01:05.754]                       else if (inherits(cond, "warning")) {
[11:01:05.754]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.754]                         if (muffled) 
[11:01:05.754]                           invokeRestart("muffleWarning")
[11:01:05.754]                       }
[11:01:05.754]                       else if (inherits(cond, "condition")) {
[11:01:05.754]                         if (!is.null(pattern)) {
[11:01:05.754]                           computeRestarts <- base::computeRestarts
[11:01:05.754]                           grepl <- base::grepl
[11:01:05.754]                           restarts <- computeRestarts(cond)
[11:01:05.754]                           for (restart in restarts) {
[11:01:05.754]                             name <- restart$name
[11:01:05.754]                             if (is.null(name)) 
[11:01:05.754]                               next
[11:01:05.754]                             if (!grepl(pattern, name)) 
[11:01:05.754]                               next
[11:01:05.754]                             invokeRestart(restart)
[11:01:05.754]                             muffled <- TRUE
[11:01:05.754]                             break
[11:01:05.754]                           }
[11:01:05.754]                         }
[11:01:05.754]                       }
[11:01:05.754]                       invisible(muffled)
[11:01:05.754]                     }
[11:01:05.754]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.754]                   }
[11:01:05.754]                 }
[11:01:05.754]             }
[11:01:05.754]         }))
[11:01:05.754]     }, error = function(ex) {
[11:01:05.754]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:05.754]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.754]                 ...future.rng), started = ...future.startTime, 
[11:01:05.754]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:05.754]             version = "1.8"), class = "FutureResult")
[11:01:05.754]     }, finally = {
[11:01:05.754]         if (!identical(...future.workdir, getwd())) 
[11:01:05.754]             setwd(...future.workdir)
[11:01:05.754]         {
[11:01:05.754]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:05.754]                 ...future.oldOptions$nwarnings <- NULL
[11:01:05.754]             }
[11:01:05.754]             base::options(...future.oldOptions)
[11:01:05.754]             if (.Platform$OS.type == "windows") {
[11:01:05.754]                 old_names <- names(...future.oldEnvVars)
[11:01:05.754]                 envs <- base::Sys.getenv()
[11:01:05.754]                 names <- names(envs)
[11:01:05.754]                 common <- intersect(names, old_names)
[11:01:05.754]                 added <- setdiff(names, old_names)
[11:01:05.754]                 removed <- setdiff(old_names, names)
[11:01:05.754]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:05.754]                   envs[common]]
[11:01:05.754]                 NAMES <- toupper(changed)
[11:01:05.754]                 args <- list()
[11:01:05.754]                 for (kk in seq_along(NAMES)) {
[11:01:05.754]                   name <- changed[[kk]]
[11:01:05.754]                   NAME <- NAMES[[kk]]
[11:01:05.754]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.754]                     next
[11:01:05.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.754]                 }
[11:01:05.754]                 NAMES <- toupper(added)
[11:01:05.754]                 for (kk in seq_along(NAMES)) {
[11:01:05.754]                   name <- added[[kk]]
[11:01:05.754]                   NAME <- NAMES[[kk]]
[11:01:05.754]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.754]                     next
[11:01:05.754]                   args[[name]] <- ""
[11:01:05.754]                 }
[11:01:05.754]                 NAMES <- toupper(removed)
[11:01:05.754]                 for (kk in seq_along(NAMES)) {
[11:01:05.754]                   name <- removed[[kk]]
[11:01:05.754]                   NAME <- NAMES[[kk]]
[11:01:05.754]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.754]                     next
[11:01:05.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.754]                 }
[11:01:05.754]                 if (length(args) > 0) 
[11:01:05.754]                   base::do.call(base::Sys.setenv, args = args)
[11:01:05.754]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:05.754]             }
[11:01:05.754]             else {
[11:01:05.754]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:05.754]             }
[11:01:05.754]             {
[11:01:05.754]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:05.754]                   0L) {
[11:01:05.754]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:05.754]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:05.754]                   base::options(opts)
[11:01:05.754]                 }
[11:01:05.754]                 {
[11:01:05.754]                   {
[11:01:05.754]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:05.754]                     NULL
[11:01:05.754]                   }
[11:01:05.754]                   options(future.plan = NULL)
[11:01:05.754]                   if (is.na(NA_character_)) 
[11:01:05.754]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.754]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:05.754]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:05.754]                     .init = FALSE)
[11:01:05.754]                 }
[11:01:05.754]             }
[11:01:05.754]         }
[11:01:05.754]     })
[11:01:05.754]     if (TRUE) {
[11:01:05.754]         base::sink(type = "output", split = FALSE)
[11:01:05.754]         if (TRUE) {
[11:01:05.754]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:05.754]         }
[11:01:05.754]         else {
[11:01:05.754]             ...future.result["stdout"] <- base::list(NULL)
[11:01:05.754]         }
[11:01:05.754]         base::close(...future.stdout)
[11:01:05.754]         ...future.stdout <- NULL
[11:01:05.754]     }
[11:01:05.754]     ...future.result$conditions <- ...future.conditions
[11:01:05.754]     ...future.result$finished <- base::Sys.time()
[11:01:05.754]     ...future.result
[11:01:05.754] }
[11:01:05.757] Exporting 1 global objects (557 bytes) to cluster node #1 ...
[11:01:05.757] Exporting ‘future.call.arguments’ (223 bytes) to cluster node #1 ...
[11:01:05.757] Exporting ‘future.call.arguments’ (223 bytes) to cluster node #1 ... DONE
[11:01:05.757] Exporting 1 global objects (557 bytes) to cluster node #1 ... DONE
[11:01:05.758] MultisessionFuture started
[11:01:05.758] - Launch lazy future ... done
[11:01:05.758] run() for ‘MultisessionFuture’ ... done
[11:01:05.758] result() for ClusterFuture ...
[11:01:05.758] receiveMessageFromWorker() for ClusterFuture ...
[11:01:05.758] - Validating connection of MultisessionFuture
[11:01:05.800] - received message: FutureResult
[11:01:05.800] - Received FutureResult
[11:01:05.800] - Erased future from FutureRegistry
[11:01:05.800] result() for ClusterFuture ...
[11:01:05.801] - result already collected: FutureResult
[11:01:05.801] result() for ClusterFuture ... done
[11:01:05.801] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:05.801] result() for ClusterFuture ... done
[11:01:05.801] result() for ClusterFuture ...
[11:01:05.801] - result already collected: FutureResult
[11:01:05.801] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x55b7e1b30498>
Using '...' in a formula
[11:01:05.801] getGlobalsAndPackages() ...
[11:01:05.801] Searching for globals...
[11:01:05.804] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[11:01:05.804] Searching for globals ... DONE
[11:01:05.804] Resolving globals: FALSE
[11:01:05.804] Tweak future expression to call with '...' arguments ...
[11:01:05.805] The total size of the 3 globals is 1.94 KiB (1985 bytes)
[11:01:05.805] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 1.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (1.77 KiB of class ‘function’), ‘x’ (133 bytes of class ‘numeric’) and ‘y’ (39 bytes of class ‘numeric’)
[11:01:05.805] - globals: [3] ‘fcn’, ‘x’, ‘y’
[11:01:05.805] 
[11:01:05.806] getGlobalsAndPackages() ... DONE
[11:01:05.806] run() for ‘Future’ ...
[11:01:05.806] - state: ‘created’
[11:01:05.806] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:05.820] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:05.820] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:05.820]   - Field: ‘node’
[11:01:05.820]   - Field: ‘label’
[11:01:05.820]   - Field: ‘local’
[11:01:05.820]   - Field: ‘owner’
[11:01:05.820]   - Field: ‘envir’
[11:01:05.820]   - Field: ‘workers’
[11:01:05.821]   - Field: ‘packages’
[11:01:05.821]   - Field: ‘gc’
[11:01:05.821]   - Field: ‘conditions’
[11:01:05.821]   - Field: ‘persistent’
[11:01:05.821]   - Field: ‘expr’
[11:01:05.821]   - Field: ‘uuid’
[11:01:05.821]   - Field: ‘seed’
[11:01:05.821]   - Field: ‘version’
[11:01:05.821]   - Field: ‘result’
[11:01:05.821]   - Field: ‘asynchronous’
[11:01:05.821]   - Field: ‘calls’
[11:01:05.821]   - Field: ‘globals’
[11:01:05.822]   - Field: ‘stdout’
[11:01:05.822]   - Field: ‘earlySignal’
[11:01:05.822]   - Field: ‘lazy’
[11:01:05.822]   - Field: ‘state’
[11:01:05.822] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:05.822] - Launch lazy future ...
[11:01:05.822] Packages needed by the future expression (n = 0): <none>
[11:01:05.822] Packages needed by future strategies (n = 0): <none>
[11:01:05.823] {
[11:01:05.823]     {
[11:01:05.823]         {
[11:01:05.823]             ...future.startTime <- base::Sys.time()
[11:01:05.823]             {
[11:01:05.823]                 {
[11:01:05.823]                   {
[11:01:05.823]                     {
[11:01:05.823]                       base::local({
[11:01:05.823]                         has_future <- base::requireNamespace("future", 
[11:01:05.823]                           quietly = TRUE)
[11:01:05.823]                         if (has_future) {
[11:01:05.823]                           ns <- base::getNamespace("future")
[11:01:05.823]                           version <- ns[[".package"]][["version"]]
[11:01:05.823]                           if (is.null(version)) 
[11:01:05.823]                             version <- utils::packageVersion("future")
[11:01:05.823]                         }
[11:01:05.823]                         else {
[11:01:05.823]                           version <- NULL
[11:01:05.823]                         }
[11:01:05.823]                         if (!has_future || version < "1.8.0") {
[11:01:05.823]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:05.823]                             "", base::R.version$version.string), 
[11:01:05.823]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:05.823]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:05.823]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:05.823]                               "release", "version")], collapse = " "), 
[11:01:05.823]                             hostname = base::Sys.info()[["nodename"]])
[11:01:05.823]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:05.823]                             info)
[11:01:05.823]                           info <- base::paste(info, collapse = "; ")
[11:01:05.823]                           if (!has_future) {
[11:01:05.823]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:05.823]                               info)
[11:01:05.823]                           }
[11:01:05.823]                           else {
[11:01:05.823]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:05.823]                               info, version)
[11:01:05.823]                           }
[11:01:05.823]                           base::stop(msg)
[11:01:05.823]                         }
[11:01:05.823]                       })
[11:01:05.823]                     }
[11:01:05.823]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:05.823]                     base::options(mc.cores = 1L)
[11:01:05.823]                   }
[11:01:05.823]                   ...future.strategy.old <- future::plan("list")
[11:01:05.823]                   options(future.plan = NULL)
[11:01:05.823]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.823]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:05.823]                 }
[11:01:05.823]                 ...future.workdir <- getwd()
[11:01:05.823]             }
[11:01:05.823]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:05.823]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:05.823]         }
[11:01:05.823]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:05.823]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:05.823]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:05.823]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:05.823]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:05.823]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:05.823]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:05.823]             base::names(...future.oldOptions))
[11:01:05.823]     }
[11:01:05.823]     if (FALSE) {
[11:01:05.823]     }
[11:01:05.823]     else {
[11:01:05.823]         if (TRUE) {
[11:01:05.823]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:05.823]                 open = "w")
[11:01:05.823]         }
[11:01:05.823]         else {
[11:01:05.823]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:05.823]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:05.823]         }
[11:01:05.823]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:05.823]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:05.823]             base::sink(type = "output", split = FALSE)
[11:01:05.823]             base::close(...future.stdout)
[11:01:05.823]         }, add = TRUE)
[11:01:05.823]     }
[11:01:05.823]     ...future.frame <- base::sys.nframe()
[11:01:05.823]     ...future.conditions <- base::list()
[11:01:05.823]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:05.823]     if (FALSE) {
[11:01:05.823]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:05.823]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:05.823]     }
[11:01:05.823]     ...future.result <- base::tryCatch({
[11:01:05.823]         base::withCallingHandlers({
[11:01:05.823]             ...future.value <- base::withVisible(base::local({
[11:01:05.823]                 ...future.makeSendCondition <- base::local({
[11:01:05.823]                   sendCondition <- NULL
[11:01:05.823]                   function(frame = 1L) {
[11:01:05.823]                     if (is.function(sendCondition)) 
[11:01:05.823]                       return(sendCondition)
[11:01:05.823]                     ns <- getNamespace("parallel")
[11:01:05.823]                     if (exists("sendData", mode = "function", 
[11:01:05.823]                       envir = ns)) {
[11:01:05.823]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:05.823]                         envir = ns)
[11:01:05.823]                       envir <- sys.frame(frame)
[11:01:05.823]                       master <- NULL
[11:01:05.823]                       while (!identical(envir, .GlobalEnv) && 
[11:01:05.823]                         !identical(envir, emptyenv())) {
[11:01:05.823]                         if (exists("master", mode = "list", envir = envir, 
[11:01:05.823]                           inherits = FALSE)) {
[11:01:05.823]                           master <- get("master", mode = "list", 
[11:01:05.823]                             envir = envir, inherits = FALSE)
[11:01:05.823]                           if (inherits(master, c("SOCKnode", 
[11:01:05.823]                             "SOCK0node"))) {
[11:01:05.823]                             sendCondition <<- function(cond) {
[11:01:05.823]                               data <- list(type = "VALUE", value = cond, 
[11:01:05.823]                                 success = TRUE)
[11:01:05.823]                               parallel_sendData(master, data)
[11:01:05.823]                             }
[11:01:05.823]                             return(sendCondition)
[11:01:05.823]                           }
[11:01:05.823]                         }
[11:01:05.823]                         frame <- frame + 1L
[11:01:05.823]                         envir <- sys.frame(frame)
[11:01:05.823]                       }
[11:01:05.823]                     }
[11:01:05.823]                     sendCondition <<- function(cond) NULL
[11:01:05.823]                   }
[11:01:05.823]                 })
[11:01:05.823]                 withCallingHandlers({
[11:01:05.823]                   fcn(x, y)
[11:01:05.823]                 }, immediateCondition = function(cond) {
[11:01:05.823]                   sendCondition <- ...future.makeSendCondition()
[11:01:05.823]                   sendCondition(cond)
[11:01:05.823]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.823]                   {
[11:01:05.823]                     inherits <- base::inherits
[11:01:05.823]                     invokeRestart <- base::invokeRestart
[11:01:05.823]                     is.null <- base::is.null
[11:01:05.823]                     muffled <- FALSE
[11:01:05.823]                     if (inherits(cond, "message")) {
[11:01:05.823]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:05.823]                       if (muffled) 
[11:01:05.823]                         invokeRestart("muffleMessage")
[11:01:05.823]                     }
[11:01:05.823]                     else if (inherits(cond, "warning")) {
[11:01:05.823]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:05.823]                       if (muffled) 
[11:01:05.823]                         invokeRestart("muffleWarning")
[11:01:05.823]                     }
[11:01:05.823]                     else if (inherits(cond, "condition")) {
[11:01:05.823]                       if (!is.null(pattern)) {
[11:01:05.823]                         computeRestarts <- base::computeRestarts
[11:01:05.823]                         grepl <- base::grepl
[11:01:05.823]                         restarts <- computeRestarts(cond)
[11:01:05.823]                         for (restart in restarts) {
[11:01:05.823]                           name <- restart$name
[11:01:05.823]                           if (is.null(name)) 
[11:01:05.823]                             next
[11:01:05.823]                           if (!grepl(pattern, name)) 
[11:01:05.823]                             next
[11:01:05.823]                           invokeRestart(restart)
[11:01:05.823]                           muffled <- TRUE
[11:01:05.823]                           break
[11:01:05.823]                         }
[11:01:05.823]                       }
[11:01:05.823]                     }
[11:01:05.823]                     invisible(muffled)
[11:01:05.823]                   }
[11:01:05.823]                   muffleCondition(cond)
[11:01:05.823]                 })
[11:01:05.823]             }))
[11:01:05.823]             future::FutureResult(value = ...future.value$value, 
[11:01:05.823]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.823]                   ...future.rng), globalenv = if (FALSE) 
[11:01:05.823]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:05.823]                     ...future.globalenv.names))
[11:01:05.823]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:05.823]         }, condition = base::local({
[11:01:05.823]             c <- base::c
[11:01:05.823]             inherits <- base::inherits
[11:01:05.823]             invokeRestart <- base::invokeRestart
[11:01:05.823]             length <- base::length
[11:01:05.823]             list <- base::list
[11:01:05.823]             seq.int <- base::seq.int
[11:01:05.823]             signalCondition <- base::signalCondition
[11:01:05.823]             sys.calls <- base::sys.calls
[11:01:05.823]             `[[` <- base::`[[`
[11:01:05.823]             `+` <- base::`+`
[11:01:05.823]             `<<-` <- base::`<<-`
[11:01:05.823]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:05.823]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:05.823]                   3L)]
[11:01:05.823]             }
[11:01:05.823]             function(cond) {
[11:01:05.823]                 is_error <- inherits(cond, "error")
[11:01:05.823]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:05.823]                   NULL)
[11:01:05.823]                 if (is_error) {
[11:01:05.823]                   sessionInformation <- function() {
[11:01:05.823]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:05.823]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:05.823]                       search = base::search(), system = base::Sys.info())
[11:01:05.823]                   }
[11:01:05.823]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.823]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:05.823]                     cond$call), session = sessionInformation(), 
[11:01:05.823]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:05.823]                   signalCondition(cond)
[11:01:05.823]                 }
[11:01:05.823]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:05.823]                 "immediateCondition"))) {
[11:01:05.823]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:05.823]                   ...future.conditions[[length(...future.conditions) + 
[11:01:05.823]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:05.823]                   if (TRUE && !signal) {
[11:01:05.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.823]                     {
[11:01:05.823]                       inherits <- base::inherits
[11:01:05.823]                       invokeRestart <- base::invokeRestart
[11:01:05.823]                       is.null <- base::is.null
[11:01:05.823]                       muffled <- FALSE
[11:01:05.823]                       if (inherits(cond, "message")) {
[11:01:05.823]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.823]                         if (muffled) 
[11:01:05.823]                           invokeRestart("muffleMessage")
[11:01:05.823]                       }
[11:01:05.823]                       else if (inherits(cond, "warning")) {
[11:01:05.823]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.823]                         if (muffled) 
[11:01:05.823]                           invokeRestart("muffleWarning")
[11:01:05.823]                       }
[11:01:05.823]                       else if (inherits(cond, "condition")) {
[11:01:05.823]                         if (!is.null(pattern)) {
[11:01:05.823]                           computeRestarts <- base::computeRestarts
[11:01:05.823]                           grepl <- base::grepl
[11:01:05.823]                           restarts <- computeRestarts(cond)
[11:01:05.823]                           for (restart in restarts) {
[11:01:05.823]                             name <- restart$name
[11:01:05.823]                             if (is.null(name)) 
[11:01:05.823]                               next
[11:01:05.823]                             if (!grepl(pattern, name)) 
[11:01:05.823]                               next
[11:01:05.823]                             invokeRestart(restart)
[11:01:05.823]                             muffled <- TRUE
[11:01:05.823]                             break
[11:01:05.823]                           }
[11:01:05.823]                         }
[11:01:05.823]                       }
[11:01:05.823]                       invisible(muffled)
[11:01:05.823]                     }
[11:01:05.823]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.823]                   }
[11:01:05.823]                 }
[11:01:05.823]                 else {
[11:01:05.823]                   if (TRUE) {
[11:01:05.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:05.823]                     {
[11:01:05.823]                       inherits <- base::inherits
[11:01:05.823]                       invokeRestart <- base::invokeRestart
[11:01:05.823]                       is.null <- base::is.null
[11:01:05.823]                       muffled <- FALSE
[11:01:05.823]                       if (inherits(cond, "message")) {
[11:01:05.823]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:05.823]                         if (muffled) 
[11:01:05.823]                           invokeRestart("muffleMessage")
[11:01:05.823]                       }
[11:01:05.823]                       else if (inherits(cond, "warning")) {
[11:01:05.823]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:05.823]                         if (muffled) 
[11:01:05.823]                           invokeRestart("muffleWarning")
[11:01:05.823]                       }
[11:01:05.823]                       else if (inherits(cond, "condition")) {
[11:01:05.823]                         if (!is.null(pattern)) {
[11:01:05.823]                           computeRestarts <- base::computeRestarts
[11:01:05.823]                           grepl <- base::grepl
[11:01:05.823]                           restarts <- computeRestarts(cond)
[11:01:05.823]                           for (restart in restarts) {
[11:01:05.823]                             name <- restart$name
[11:01:05.823]                             if (is.null(name)) 
[11:01:05.823]                               next
[11:01:05.823]                             if (!grepl(pattern, name)) 
[11:01:05.823]                               next
[11:01:05.823]                             invokeRestart(restart)
[11:01:05.823]                             muffled <- TRUE
[11:01:05.823]                             break
[11:01:05.823]                           }
[11:01:05.823]                         }
[11:01:05.823]                       }
[11:01:05.823]                       invisible(muffled)
[11:01:05.823]                     }
[11:01:05.823]                     muffleCondition(cond, pattern = "^muffle")
[11:01:05.823]                   }
[11:01:05.823]                 }
[11:01:05.823]             }
[11:01:05.823]         }))
[11:01:05.823]     }, error = function(ex) {
[11:01:05.823]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:05.823]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:05.823]                 ...future.rng), started = ...future.startTime, 
[11:01:05.823]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:05.823]             version = "1.8"), class = "FutureResult")
[11:01:05.823]     }, finally = {
[11:01:05.823]         if (!identical(...future.workdir, getwd())) 
[11:01:05.823]             setwd(...future.workdir)
[11:01:05.823]         {
[11:01:05.823]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:05.823]                 ...future.oldOptions$nwarnings <- NULL
[11:01:05.823]             }
[11:01:05.823]             base::options(...future.oldOptions)
[11:01:05.823]             if (.Platform$OS.type == "windows") {
[11:01:05.823]                 old_names <- names(...future.oldEnvVars)
[11:01:05.823]                 envs <- base::Sys.getenv()
[11:01:05.823]                 names <- names(envs)
[11:01:05.823]                 common <- intersect(names, old_names)
[11:01:05.823]                 added <- setdiff(names, old_names)
[11:01:05.823]                 removed <- setdiff(old_names, names)
[11:01:05.823]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:05.823]                   envs[common]]
[11:01:05.823]                 NAMES <- toupper(changed)
[11:01:05.823]                 args <- list()
[11:01:05.823]                 for (kk in seq_along(NAMES)) {
[11:01:05.823]                   name <- changed[[kk]]
[11:01:05.823]                   NAME <- NAMES[[kk]]
[11:01:05.823]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.823]                     next
[11:01:05.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.823]                 }
[11:01:05.823]                 NAMES <- toupper(added)
[11:01:05.823]                 for (kk in seq_along(NAMES)) {
[11:01:05.823]                   name <- added[[kk]]
[11:01:05.823]                   NAME <- NAMES[[kk]]
[11:01:05.823]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.823]                     next
[11:01:05.823]                   args[[name]] <- ""
[11:01:05.823]                 }
[11:01:05.823]                 NAMES <- toupper(removed)
[11:01:05.823]                 for (kk in seq_along(NAMES)) {
[11:01:05.823]                   name <- removed[[kk]]
[11:01:05.823]                   NAME <- NAMES[[kk]]
[11:01:05.823]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:05.823]                     next
[11:01:05.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:05.823]                 }
[11:01:05.823]                 if (length(args) > 0) 
[11:01:05.823]                   base::do.call(base::Sys.setenv, args = args)
[11:01:05.823]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:05.823]             }
[11:01:05.823]             else {
[11:01:05.823]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:05.823]             }
[11:01:05.823]             {
[11:01:05.823]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:05.823]                   0L) {
[11:01:05.823]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:05.823]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:05.823]                   base::options(opts)
[11:01:05.823]                 }
[11:01:05.823]                 {
[11:01:05.823]                   {
[11:01:05.823]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:05.823]                     NULL
[11:01:05.823]                   }
[11:01:05.823]                   options(future.plan = NULL)
[11:01:05.823]                   if (is.na(NA_character_)) 
[11:01:05.823]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:05.823]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:05.823]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:05.823]                     .init = FALSE)
[11:01:05.823]                 }
[11:01:05.823]             }
[11:01:05.823]         }
[11:01:05.823]     })
[11:01:05.823]     if (TRUE) {
[11:01:05.823]         base::sink(type = "output", split = FALSE)
[11:01:05.823]         if (TRUE) {
[11:01:05.823]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:05.823]         }
[11:01:05.823]         else {
[11:01:05.823]             ...future.result["stdout"] <- base::list(NULL)
[11:01:05.823]         }
[11:01:05.823]         base::close(...future.stdout)
[11:01:05.823]         ...future.stdout <- NULL
[11:01:05.823]     }
[11:01:05.823]     ...future.result$conditions <- ...future.conditions
[11:01:05.823]     ...future.result$finished <- base::Sys.time()
[11:01:05.823]     ...future.result
[11:01:05.823] }
[11:01:05.825] Exporting 3 global objects (2.19 KiB) to cluster node #1 ...
[11:01:05.826] Exporting ‘fcn’ (1.77 KiB) to cluster node #1 ...
[11:01:05.826] Exporting ‘fcn’ (1.77 KiB) to cluster node #1 ... DONE
[11:01:05.826] Exporting ‘x’ (133 bytes) to cluster node #1 ...
[11:01:05.826] Exporting ‘x’ (133 bytes) to cluster node #1 ... DONE
[11:01:05.827] Exporting ‘y’ (39 bytes) to cluster node #1 ...
[11:01:05.827] Exporting ‘y’ (39 bytes) to cluster node #1 ... DONE
[11:01:05.827] Exporting 3 global objects (2.19 KiB) to cluster node #1 ... DONE
[11:01:05.827] MultisessionFuture started
[11:01:05.828] - Launch lazy future ... done
[11:01:05.828] run() for ‘MultisessionFuture’ ... done
[11:01:05.828] result() for ClusterFuture ...
[11:01:05.828] receiveMessageFromWorker() for ClusterFuture ...
[11:01:05.828] - Validating connection of MultisessionFuture
[11:01:05.869] - received message: FutureResult
[11:01:05.869] - Received FutureResult
[11:01:05.869] - Erased future from FutureRegistry
[11:01:05.869] result() for ClusterFuture ...
[11:01:05.869] - result already collected: FutureResult
[11:01:05.870] result() for ClusterFuture ... done
[11:01:05.870] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:05.870] result() for ClusterFuture ... done
[11:01:05.870] result() for ClusterFuture ...
[11:01:05.870] - result already collected: FutureResult
[11:01:05.870] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[11:01:05.871] plan(): Setting new future strategy stack:
[11:01:05.871] List of future strategies:
[11:01:05.871] 1. FutureStrategy:
[11:01:05.871]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:05.871]    - tweaked: FALSE
[11:01:05.871]    - call: future::plan(oplan)
[11:01:05.871] plan(): nbrOfWorkers() = 1
> 
