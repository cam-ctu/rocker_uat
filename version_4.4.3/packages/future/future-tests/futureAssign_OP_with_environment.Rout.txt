
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:27:40.225] plan(): Setting new future strategy stack:
[08:27:40.226] List of future strategies:
[08:27:40.226] 1. sequential:
[08:27:40.226]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.226]    - tweaked: FALSE
[08:27:40.226]    - call: future::plan("sequential")
[08:27:40.241] plan(): nbrOfWorkers() = 1
> 
> ## BACKWARD COMPATIBILITY
> if (getRversion() < "3.2.0") {
+   names <- function(x) if (is.environment(x)) ls(envir = x) else base::names(x)
+ }
> 
> message("*** %<-% to environment ...")
*** %<-% to environment ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Async delayed assignment (infix operator)
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- new.env()
> stopifnot(length(names(z)) == 0L)
> 
> message("*** %<-% to environment: Assign by index (not allowed)")
*** %<-% to environment: Assign by index (not allowed)
> res <- try(z[[1]] %<-% { 2 } %lazy% TRUE, silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** %<-% to environment: Assign by name (new)")
*** %<-% to environment: Assign by name (new)
> z$B %<-% { TRUE }  %lazy% TRUE
[08:27:40.259] getGlobalsAndPackages() ...
[08:27:40.260] Searching for globals...
[08:27:40.262] - globals found: [1] ‘{’
[08:27:40.263] Searching for globals ... DONE
[08:27:40.263] Resolving globals: FALSE
[08:27:40.263] 
[08:27:40.263] 
[08:27:40.263] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 2) # sic!
> stopifnot("B" %in% ls(z))
> 
> y <- as.list(z)
[08:27:40.264] run() for ‘Future’ ...
[08:27:40.264] - state: ‘created’
[08:27:40.265] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.265] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.265] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.265]   - Field: ‘label’
[08:27:40.265]   - Field: ‘local’
[08:27:40.265]   - Field: ‘owner’
[08:27:40.265]   - Field: ‘envir’
[08:27:40.266]   - Field: ‘packages’
[08:27:40.266]   - Field: ‘gc’
[08:27:40.266]   - Field: ‘conditions’
[08:27:40.266]   - Field: ‘expr’
[08:27:40.266]   - Field: ‘uuid’
[08:27:40.266]   - Field: ‘seed’
[08:27:40.266]   - Field: ‘version’
[08:27:40.266]   - Field: ‘result’
[08:27:40.266]   - Field: ‘asynchronous’
[08:27:40.266]   - Field: ‘calls’
[08:27:40.266]   - Field: ‘globals’
[08:27:40.267]   - Field: ‘stdout’
[08:27:40.267]   - Field: ‘earlySignal’
[08:27:40.267]   - Field: ‘lazy’
[08:27:40.267]   - Field: ‘state’
[08:27:40.267] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.267] - Launch lazy future ...
[08:27:40.268] Packages needed by the future expression (n = 0): <none>
[08:27:40.268] Packages needed by future strategies (n = 0): <none>
[08:27:40.268] {
[08:27:40.268]     {
[08:27:40.268]         {
[08:27:40.268]             ...future.startTime <- base::Sys.time()
[08:27:40.268]             {
[08:27:40.268]                 {
[08:27:40.268]                   {
[08:27:40.268]                     base::local({
[08:27:40.268]                       has_future <- base::requireNamespace("future", 
[08:27:40.268]                         quietly = TRUE)
[08:27:40.268]                       if (has_future) {
[08:27:40.268]                         ns <- base::getNamespace("future")
[08:27:40.268]                         version <- ns[[".package"]][["version"]]
[08:27:40.268]                         if (is.null(version)) 
[08:27:40.268]                           version <- utils::packageVersion("future")
[08:27:40.268]                       }
[08:27:40.268]                       else {
[08:27:40.268]                         version <- NULL
[08:27:40.268]                       }
[08:27:40.268]                       if (!has_future || version < "1.8.0") {
[08:27:40.268]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.268]                           "", base::R.version$version.string), 
[08:27:40.268]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.268]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.268]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.268]                             "release", "version")], collapse = " "), 
[08:27:40.268]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.268]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.268]                           info)
[08:27:40.268]                         info <- base::paste(info, collapse = "; ")
[08:27:40.268]                         if (!has_future) {
[08:27:40.268]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.268]                             info)
[08:27:40.268]                         }
[08:27:40.268]                         else {
[08:27:40.268]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.268]                             info, version)
[08:27:40.268]                         }
[08:27:40.268]                         base::stop(msg)
[08:27:40.268]                       }
[08:27:40.268]                     })
[08:27:40.268]                   }
[08:27:40.268]                   ...future.strategy.old <- future::plan("list")
[08:27:40.268]                   options(future.plan = NULL)
[08:27:40.268]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.268]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.268]                 }
[08:27:40.268]                 ...future.workdir <- getwd()
[08:27:40.268]             }
[08:27:40.268]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.268]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.268]         }
[08:27:40.268]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.268]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.268]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.268]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.268]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.268]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.268]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.268]             base::names(...future.oldOptions))
[08:27:40.268]     }
[08:27:40.268]     if (FALSE) {
[08:27:40.268]     }
[08:27:40.268]     else {
[08:27:40.268]         if (TRUE) {
[08:27:40.268]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.268]                 open = "w")
[08:27:40.268]         }
[08:27:40.268]         else {
[08:27:40.268]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.268]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.268]         }
[08:27:40.268]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.268]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.268]             base::sink(type = "output", split = FALSE)
[08:27:40.268]             base::close(...future.stdout)
[08:27:40.268]         }, add = TRUE)
[08:27:40.268]     }
[08:27:40.268]     ...future.frame <- base::sys.nframe()
[08:27:40.268]     ...future.conditions <- base::list()
[08:27:40.268]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.268]     if (FALSE) {
[08:27:40.268]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.268]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.268]     }
[08:27:40.268]     ...future.result <- base::tryCatch({
[08:27:40.268]         base::withCallingHandlers({
[08:27:40.268]             ...future.value <- base::withVisible(base::local({
[08:27:40.268]                 TRUE
[08:27:40.268]             }))
[08:27:40.268]             future::FutureResult(value = ...future.value$value, 
[08:27:40.268]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.268]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.268]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.268]                     ...future.globalenv.names))
[08:27:40.268]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.268]         }, condition = base::local({
[08:27:40.268]             c <- base::c
[08:27:40.268]             inherits <- base::inherits
[08:27:40.268]             invokeRestart <- base::invokeRestart
[08:27:40.268]             length <- base::length
[08:27:40.268]             list <- base::list
[08:27:40.268]             seq.int <- base::seq.int
[08:27:40.268]             signalCondition <- base::signalCondition
[08:27:40.268]             sys.calls <- base::sys.calls
[08:27:40.268]             `[[` <- base::`[[`
[08:27:40.268]             `+` <- base::`+`
[08:27:40.268]             `<<-` <- base::`<<-`
[08:27:40.268]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.268]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.268]                   3L)]
[08:27:40.268]             }
[08:27:40.268]             function(cond) {
[08:27:40.268]                 is_error <- inherits(cond, "error")
[08:27:40.268]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.268]                   NULL)
[08:27:40.268]                 if (is_error) {
[08:27:40.268]                   sessionInformation <- function() {
[08:27:40.268]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.268]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.268]                       search = base::search(), system = base::Sys.info())
[08:27:40.268]                   }
[08:27:40.268]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.268]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.268]                     cond$call), session = sessionInformation(), 
[08:27:40.268]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.268]                   signalCondition(cond)
[08:27:40.268]                 }
[08:27:40.268]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.268]                 "immediateCondition"))) {
[08:27:40.268]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.268]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.268]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.268]                   if (TRUE && !signal) {
[08:27:40.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.268]                     {
[08:27:40.268]                       inherits <- base::inherits
[08:27:40.268]                       invokeRestart <- base::invokeRestart
[08:27:40.268]                       is.null <- base::is.null
[08:27:40.268]                       muffled <- FALSE
[08:27:40.268]                       if (inherits(cond, "message")) {
[08:27:40.268]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.268]                         if (muffled) 
[08:27:40.268]                           invokeRestart("muffleMessage")
[08:27:40.268]                       }
[08:27:40.268]                       else if (inherits(cond, "warning")) {
[08:27:40.268]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.268]                         if (muffled) 
[08:27:40.268]                           invokeRestart("muffleWarning")
[08:27:40.268]                       }
[08:27:40.268]                       else if (inherits(cond, "condition")) {
[08:27:40.268]                         if (!is.null(pattern)) {
[08:27:40.268]                           computeRestarts <- base::computeRestarts
[08:27:40.268]                           grepl <- base::grepl
[08:27:40.268]                           restarts <- computeRestarts(cond)
[08:27:40.268]                           for (restart in restarts) {
[08:27:40.268]                             name <- restart$name
[08:27:40.268]                             if (is.null(name)) 
[08:27:40.268]                               next
[08:27:40.268]                             if (!grepl(pattern, name)) 
[08:27:40.268]                               next
[08:27:40.268]                             invokeRestart(restart)
[08:27:40.268]                             muffled <- TRUE
[08:27:40.268]                             break
[08:27:40.268]                           }
[08:27:40.268]                         }
[08:27:40.268]                       }
[08:27:40.268]                       invisible(muffled)
[08:27:40.268]                     }
[08:27:40.268]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.268]                   }
[08:27:40.268]                 }
[08:27:40.268]                 else {
[08:27:40.268]                   if (TRUE) {
[08:27:40.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.268]                     {
[08:27:40.268]                       inherits <- base::inherits
[08:27:40.268]                       invokeRestart <- base::invokeRestart
[08:27:40.268]                       is.null <- base::is.null
[08:27:40.268]                       muffled <- FALSE
[08:27:40.268]                       if (inherits(cond, "message")) {
[08:27:40.268]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.268]                         if (muffled) 
[08:27:40.268]                           invokeRestart("muffleMessage")
[08:27:40.268]                       }
[08:27:40.268]                       else if (inherits(cond, "warning")) {
[08:27:40.268]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.268]                         if (muffled) 
[08:27:40.268]                           invokeRestart("muffleWarning")
[08:27:40.268]                       }
[08:27:40.268]                       else if (inherits(cond, "condition")) {
[08:27:40.268]                         if (!is.null(pattern)) {
[08:27:40.268]                           computeRestarts <- base::computeRestarts
[08:27:40.268]                           grepl <- base::grepl
[08:27:40.268]                           restarts <- computeRestarts(cond)
[08:27:40.268]                           for (restart in restarts) {
[08:27:40.268]                             name <- restart$name
[08:27:40.268]                             if (is.null(name)) 
[08:27:40.268]                               next
[08:27:40.268]                             if (!grepl(pattern, name)) 
[08:27:40.268]                               next
[08:27:40.268]                             invokeRestart(restart)
[08:27:40.268]                             muffled <- TRUE
[08:27:40.268]                             break
[08:27:40.268]                           }
[08:27:40.268]                         }
[08:27:40.268]                       }
[08:27:40.268]                       invisible(muffled)
[08:27:40.268]                     }
[08:27:40.268]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.268]                   }
[08:27:40.268]                 }
[08:27:40.268]             }
[08:27:40.268]         }))
[08:27:40.268]     }, error = function(ex) {
[08:27:40.268]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.268]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.268]                 ...future.rng), started = ...future.startTime, 
[08:27:40.268]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.268]             version = "1.8"), class = "FutureResult")
[08:27:40.268]     }, finally = {
[08:27:40.268]         if (!identical(...future.workdir, getwd())) 
[08:27:40.268]             setwd(...future.workdir)
[08:27:40.268]         {
[08:27:40.268]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.268]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.268]             }
[08:27:40.268]             base::options(...future.oldOptions)
[08:27:40.268]             if (.Platform$OS.type == "windows") {
[08:27:40.268]                 old_names <- names(...future.oldEnvVars)
[08:27:40.268]                 envs <- base::Sys.getenv()
[08:27:40.268]                 names <- names(envs)
[08:27:40.268]                 common <- intersect(names, old_names)
[08:27:40.268]                 added <- setdiff(names, old_names)
[08:27:40.268]                 removed <- setdiff(old_names, names)
[08:27:40.268]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.268]                   envs[common]]
[08:27:40.268]                 NAMES <- toupper(changed)
[08:27:40.268]                 args <- list()
[08:27:40.268]                 for (kk in seq_along(NAMES)) {
[08:27:40.268]                   name <- changed[[kk]]
[08:27:40.268]                   NAME <- NAMES[[kk]]
[08:27:40.268]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.268]                     next
[08:27:40.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.268]                 }
[08:27:40.268]                 NAMES <- toupper(added)
[08:27:40.268]                 for (kk in seq_along(NAMES)) {
[08:27:40.268]                   name <- added[[kk]]
[08:27:40.268]                   NAME <- NAMES[[kk]]
[08:27:40.268]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.268]                     next
[08:27:40.268]                   args[[name]] <- ""
[08:27:40.268]                 }
[08:27:40.268]                 NAMES <- toupper(removed)
[08:27:40.268]                 for (kk in seq_along(NAMES)) {
[08:27:40.268]                   name <- removed[[kk]]
[08:27:40.268]                   NAME <- NAMES[[kk]]
[08:27:40.268]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.268]                     next
[08:27:40.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.268]                 }
[08:27:40.268]                 if (length(args) > 0) 
[08:27:40.268]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.268]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.268]             }
[08:27:40.268]             else {
[08:27:40.268]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.268]             }
[08:27:40.268]             {
[08:27:40.268]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.268]                   0L) {
[08:27:40.268]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.268]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.268]                   base::options(opts)
[08:27:40.268]                 }
[08:27:40.268]                 {
[08:27:40.268]                   {
[08:27:40.268]                     NULL
[08:27:40.268]                     RNGkind("Mersenne-Twister")
[08:27:40.268]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.268]                       inherits = FALSE)
[08:27:40.268]                   }
[08:27:40.268]                   options(future.plan = NULL)
[08:27:40.268]                   if (is.na(NA_character_)) 
[08:27:40.268]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.268]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.268]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.268]                     .init = FALSE)
[08:27:40.268]                 }
[08:27:40.268]             }
[08:27:40.268]         }
[08:27:40.268]     })
[08:27:40.268]     if (TRUE) {
[08:27:40.268]         base::sink(type = "output", split = FALSE)
[08:27:40.268]         if (TRUE) {
[08:27:40.268]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.268]         }
[08:27:40.268]         else {
[08:27:40.268]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.268]         }
[08:27:40.268]         base::close(...future.stdout)
[08:27:40.268]         ...future.stdout <- NULL
[08:27:40.268]     }
[08:27:40.268]     ...future.result$conditions <- ...future.conditions
[08:27:40.268]     ...future.result$finished <- base::Sys.time()
[08:27:40.268]     ...future.result
[08:27:40.268] }
[08:27:40.271] plan(): Setting new future strategy stack:
[08:27:40.271] List of future strategies:
[08:27:40.271] 1. sequential:
[08:27:40.271]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.271]    - tweaked: FALSE
[08:27:40.271]    - call: NULL
[08:27:40.271] plan(): nbrOfWorkers() = 1
[08:27:40.272] plan(): Setting new future strategy stack:
[08:27:40.272] List of future strategies:
[08:27:40.272] 1. sequential:
[08:27:40.272]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.272]    - tweaked: FALSE
[08:27:40.272]    - call: future::plan("sequential")
[08:27:40.273] plan(): nbrOfWorkers() = 1
[08:27:40.273] SequentialFuture started (and completed)
[08:27:40.273] - Launch lazy future ... done
[08:27:40.274] run() for ‘SequentialFuture’ ... done
> str(y)
List of 1
 $ B: logi TRUE
> stopifnot(length(y) == 1)
> stopifnot(identical(names(y), "B"))
> 
> 
> message("*** %<-% to environment: Potential task name clashes")
*** %<-% to environment: Potential task name clashes
> u <- new.env()
> u$a %<-% { 1 } %lazy% TRUE
[08:27:40.277] getGlobalsAndPackages() ...
[08:27:40.277] Searching for globals...
[08:27:40.277] - globals found: [1] ‘{’
[08:27:40.277] Searching for globals ... DONE
[08:27:40.278] Resolving globals: FALSE
[08:27:40.278] 
[08:27:40.278] 
[08:27:40.278] getGlobalsAndPackages() ... DONE
> stopifnot(length(u) == 2)
> stopifnot("a" %in% names(u))
> fu <- futureOf(u$a)
> 
> v <- new.env()
> v$a %<-% { 2 } %lazy% TRUE
[08:27:40.279] getGlobalsAndPackages() ...
[08:27:40.279] Searching for globals...
[08:27:40.279] - globals found: [1] ‘{’
[08:27:40.280] Searching for globals ... DONE
[08:27:40.280] Resolving globals: FALSE
[08:27:40.280] 
[08:27:40.280] 
[08:27:40.280] getGlobalsAndPackages() ... DONE
> stopifnot(length(v) == 2)
> stopifnot("a" %in% names(v))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[08:27:40.281] run() for ‘Future’ ...
[08:27:40.281] - state: ‘created’
[08:27:40.281] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.281] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.281] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.281]   - Field: ‘label’
[08:27:40.282]   - Field: ‘local’
[08:27:40.282]   - Field: ‘owner’
[08:27:40.282]   - Field: ‘envir’
[08:27:40.282]   - Field: ‘packages’
[08:27:40.282]   - Field: ‘gc’
[08:27:40.282]   - Field: ‘conditions’
[08:27:40.282]   - Field: ‘expr’
[08:27:40.282]   - Field: ‘uuid’
[08:27:40.282]   - Field: ‘seed’
[08:27:40.282]   - Field: ‘version’
[08:27:40.282]   - Field: ‘result’
[08:27:40.282]   - Field: ‘asynchronous’
[08:27:40.283]   - Field: ‘calls’
[08:27:40.283]   - Field: ‘globals’
[08:27:40.283]   - Field: ‘stdout’
[08:27:40.283]   - Field: ‘earlySignal’
[08:27:40.283]   - Field: ‘lazy’
[08:27:40.283]   - Field: ‘state’
[08:27:40.283] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.283] - Launch lazy future ...
[08:27:40.283] Packages needed by the future expression (n = 0): <none>
[08:27:40.283] Packages needed by future strategies (n = 0): <none>
[08:27:40.284] {
[08:27:40.284]     {
[08:27:40.284]         {
[08:27:40.284]             ...future.startTime <- base::Sys.time()
[08:27:40.284]             {
[08:27:40.284]                 {
[08:27:40.284]                   {
[08:27:40.284]                     base::local({
[08:27:40.284]                       has_future <- base::requireNamespace("future", 
[08:27:40.284]                         quietly = TRUE)
[08:27:40.284]                       if (has_future) {
[08:27:40.284]                         ns <- base::getNamespace("future")
[08:27:40.284]                         version <- ns[[".package"]][["version"]]
[08:27:40.284]                         if (is.null(version)) 
[08:27:40.284]                           version <- utils::packageVersion("future")
[08:27:40.284]                       }
[08:27:40.284]                       else {
[08:27:40.284]                         version <- NULL
[08:27:40.284]                       }
[08:27:40.284]                       if (!has_future || version < "1.8.0") {
[08:27:40.284]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.284]                           "", base::R.version$version.string), 
[08:27:40.284]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.284]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.284]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.284]                             "release", "version")], collapse = " "), 
[08:27:40.284]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.284]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.284]                           info)
[08:27:40.284]                         info <- base::paste(info, collapse = "; ")
[08:27:40.284]                         if (!has_future) {
[08:27:40.284]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.284]                             info)
[08:27:40.284]                         }
[08:27:40.284]                         else {
[08:27:40.284]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.284]                             info, version)
[08:27:40.284]                         }
[08:27:40.284]                         base::stop(msg)
[08:27:40.284]                       }
[08:27:40.284]                     })
[08:27:40.284]                   }
[08:27:40.284]                   ...future.strategy.old <- future::plan("list")
[08:27:40.284]                   options(future.plan = NULL)
[08:27:40.284]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.284]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.284]                 }
[08:27:40.284]                 ...future.workdir <- getwd()
[08:27:40.284]             }
[08:27:40.284]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.284]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.284]         }
[08:27:40.284]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.284]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.284]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.284]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.284]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.284]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.284]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.284]             base::names(...future.oldOptions))
[08:27:40.284]     }
[08:27:40.284]     if (FALSE) {
[08:27:40.284]     }
[08:27:40.284]     else {
[08:27:40.284]         if (TRUE) {
[08:27:40.284]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.284]                 open = "w")
[08:27:40.284]         }
[08:27:40.284]         else {
[08:27:40.284]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.284]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.284]         }
[08:27:40.284]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.284]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.284]             base::sink(type = "output", split = FALSE)
[08:27:40.284]             base::close(...future.stdout)
[08:27:40.284]         }, add = TRUE)
[08:27:40.284]     }
[08:27:40.284]     ...future.frame <- base::sys.nframe()
[08:27:40.284]     ...future.conditions <- base::list()
[08:27:40.284]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.284]     if (FALSE) {
[08:27:40.284]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.284]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.284]     }
[08:27:40.284]     ...future.result <- base::tryCatch({
[08:27:40.284]         base::withCallingHandlers({
[08:27:40.284]             ...future.value <- base::withVisible(base::local({
[08:27:40.284]                 1
[08:27:40.284]             }))
[08:27:40.284]             future::FutureResult(value = ...future.value$value, 
[08:27:40.284]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.284]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.284]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.284]                     ...future.globalenv.names))
[08:27:40.284]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.284]         }, condition = base::local({
[08:27:40.284]             c <- base::c
[08:27:40.284]             inherits <- base::inherits
[08:27:40.284]             invokeRestart <- base::invokeRestart
[08:27:40.284]             length <- base::length
[08:27:40.284]             list <- base::list
[08:27:40.284]             seq.int <- base::seq.int
[08:27:40.284]             signalCondition <- base::signalCondition
[08:27:40.284]             sys.calls <- base::sys.calls
[08:27:40.284]             `[[` <- base::`[[`
[08:27:40.284]             `+` <- base::`+`
[08:27:40.284]             `<<-` <- base::`<<-`
[08:27:40.284]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.284]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.284]                   3L)]
[08:27:40.284]             }
[08:27:40.284]             function(cond) {
[08:27:40.284]                 is_error <- inherits(cond, "error")
[08:27:40.284]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.284]                   NULL)
[08:27:40.284]                 if (is_error) {
[08:27:40.284]                   sessionInformation <- function() {
[08:27:40.284]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.284]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.284]                       search = base::search(), system = base::Sys.info())
[08:27:40.284]                   }
[08:27:40.284]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.284]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.284]                     cond$call), session = sessionInformation(), 
[08:27:40.284]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.284]                   signalCondition(cond)
[08:27:40.284]                 }
[08:27:40.284]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.284]                 "immediateCondition"))) {
[08:27:40.284]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.284]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.284]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.284]                   if (TRUE && !signal) {
[08:27:40.284]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.284]                     {
[08:27:40.284]                       inherits <- base::inherits
[08:27:40.284]                       invokeRestart <- base::invokeRestart
[08:27:40.284]                       is.null <- base::is.null
[08:27:40.284]                       muffled <- FALSE
[08:27:40.284]                       if (inherits(cond, "message")) {
[08:27:40.284]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.284]                         if (muffled) 
[08:27:40.284]                           invokeRestart("muffleMessage")
[08:27:40.284]                       }
[08:27:40.284]                       else if (inherits(cond, "warning")) {
[08:27:40.284]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.284]                         if (muffled) 
[08:27:40.284]                           invokeRestart("muffleWarning")
[08:27:40.284]                       }
[08:27:40.284]                       else if (inherits(cond, "condition")) {
[08:27:40.284]                         if (!is.null(pattern)) {
[08:27:40.284]                           computeRestarts <- base::computeRestarts
[08:27:40.284]                           grepl <- base::grepl
[08:27:40.284]                           restarts <- computeRestarts(cond)
[08:27:40.284]                           for (restart in restarts) {
[08:27:40.284]                             name <- restart$name
[08:27:40.284]                             if (is.null(name)) 
[08:27:40.284]                               next
[08:27:40.284]                             if (!grepl(pattern, name)) 
[08:27:40.284]                               next
[08:27:40.284]                             invokeRestart(restart)
[08:27:40.284]                             muffled <- TRUE
[08:27:40.284]                             break
[08:27:40.284]                           }
[08:27:40.284]                         }
[08:27:40.284]                       }
[08:27:40.284]                       invisible(muffled)
[08:27:40.284]                     }
[08:27:40.284]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.284]                   }
[08:27:40.284]                 }
[08:27:40.284]                 else {
[08:27:40.284]                   if (TRUE) {
[08:27:40.284]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.284]                     {
[08:27:40.284]                       inherits <- base::inherits
[08:27:40.284]                       invokeRestart <- base::invokeRestart
[08:27:40.284]                       is.null <- base::is.null
[08:27:40.284]                       muffled <- FALSE
[08:27:40.284]                       if (inherits(cond, "message")) {
[08:27:40.284]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.284]                         if (muffled) 
[08:27:40.284]                           invokeRestart("muffleMessage")
[08:27:40.284]                       }
[08:27:40.284]                       else if (inherits(cond, "warning")) {
[08:27:40.284]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.284]                         if (muffled) 
[08:27:40.284]                           invokeRestart("muffleWarning")
[08:27:40.284]                       }
[08:27:40.284]                       else if (inherits(cond, "condition")) {
[08:27:40.284]                         if (!is.null(pattern)) {
[08:27:40.284]                           computeRestarts <- base::computeRestarts
[08:27:40.284]                           grepl <- base::grepl
[08:27:40.284]                           restarts <- computeRestarts(cond)
[08:27:40.284]                           for (restart in restarts) {
[08:27:40.284]                             name <- restart$name
[08:27:40.284]                             if (is.null(name)) 
[08:27:40.284]                               next
[08:27:40.284]                             if (!grepl(pattern, name)) 
[08:27:40.284]                               next
[08:27:40.284]                             invokeRestart(restart)
[08:27:40.284]                             muffled <- TRUE
[08:27:40.284]                             break
[08:27:40.284]                           }
[08:27:40.284]                         }
[08:27:40.284]                       }
[08:27:40.284]                       invisible(muffled)
[08:27:40.284]                     }
[08:27:40.284]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.284]                   }
[08:27:40.284]                 }
[08:27:40.284]             }
[08:27:40.284]         }))
[08:27:40.284]     }, error = function(ex) {
[08:27:40.284]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.284]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.284]                 ...future.rng), started = ...future.startTime, 
[08:27:40.284]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.284]             version = "1.8"), class = "FutureResult")
[08:27:40.284]     }, finally = {
[08:27:40.284]         if (!identical(...future.workdir, getwd())) 
[08:27:40.284]             setwd(...future.workdir)
[08:27:40.284]         {
[08:27:40.284]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.284]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.284]             }
[08:27:40.284]             base::options(...future.oldOptions)
[08:27:40.284]             if (.Platform$OS.type == "windows") {
[08:27:40.284]                 old_names <- names(...future.oldEnvVars)
[08:27:40.284]                 envs <- base::Sys.getenv()
[08:27:40.284]                 names <- names(envs)
[08:27:40.284]                 common <- intersect(names, old_names)
[08:27:40.284]                 added <- setdiff(names, old_names)
[08:27:40.284]                 removed <- setdiff(old_names, names)
[08:27:40.284]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.284]                   envs[common]]
[08:27:40.284]                 NAMES <- toupper(changed)
[08:27:40.284]                 args <- list()
[08:27:40.284]                 for (kk in seq_along(NAMES)) {
[08:27:40.284]                   name <- changed[[kk]]
[08:27:40.284]                   NAME <- NAMES[[kk]]
[08:27:40.284]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.284]                     next
[08:27:40.284]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.284]                 }
[08:27:40.284]                 NAMES <- toupper(added)
[08:27:40.284]                 for (kk in seq_along(NAMES)) {
[08:27:40.284]                   name <- added[[kk]]
[08:27:40.284]                   NAME <- NAMES[[kk]]
[08:27:40.284]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.284]                     next
[08:27:40.284]                   args[[name]] <- ""
[08:27:40.284]                 }
[08:27:40.284]                 NAMES <- toupper(removed)
[08:27:40.284]                 for (kk in seq_along(NAMES)) {
[08:27:40.284]                   name <- removed[[kk]]
[08:27:40.284]                   NAME <- NAMES[[kk]]
[08:27:40.284]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.284]                     next
[08:27:40.284]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.284]                 }
[08:27:40.284]                 if (length(args) > 0) 
[08:27:40.284]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.284]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.284]             }
[08:27:40.284]             else {
[08:27:40.284]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.284]             }
[08:27:40.284]             {
[08:27:40.284]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.284]                   0L) {
[08:27:40.284]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.284]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.284]                   base::options(opts)
[08:27:40.284]                 }
[08:27:40.284]                 {
[08:27:40.284]                   {
[08:27:40.284]                     NULL
[08:27:40.284]                     RNGkind("Mersenne-Twister")
[08:27:40.284]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.284]                       inherits = FALSE)
[08:27:40.284]                   }
[08:27:40.284]                   options(future.plan = NULL)
[08:27:40.284]                   if (is.na(NA_character_)) 
[08:27:40.284]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.284]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.284]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.284]                     .init = FALSE)
[08:27:40.284]                 }
[08:27:40.284]             }
[08:27:40.284]         }
[08:27:40.284]     })
[08:27:40.284]     if (TRUE) {
[08:27:40.284]         base::sink(type = "output", split = FALSE)
[08:27:40.284]         if (TRUE) {
[08:27:40.284]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.284]         }
[08:27:40.284]         else {
[08:27:40.284]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.284]         }
[08:27:40.284]         base::close(...future.stdout)
[08:27:40.284]         ...future.stdout <- NULL
[08:27:40.284]     }
[08:27:40.284]     ...future.result$conditions <- ...future.conditions
[08:27:40.284]     ...future.result$finished <- base::Sys.time()
[08:27:40.284]     ...future.result
[08:27:40.284] }
[08:27:40.286] plan(): Setting new future strategy stack:
[08:27:40.286] List of future strategies:
[08:27:40.286] 1. sequential:
[08:27:40.286]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.286]    - tweaked: FALSE
[08:27:40.286]    - call: NULL
[08:27:40.287] plan(): nbrOfWorkers() = 1
[08:27:40.287] plan(): Setting new future strategy stack:
[08:27:40.288] List of future strategies:
[08:27:40.288] 1. sequential:
[08:27:40.288]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.288]    - tweaked: FALSE
[08:27:40.288]    - call: future::plan("sequential")
[08:27:40.288] plan(): nbrOfWorkers() = 1
[08:27:40.288] SequentialFuture started (and completed)
[08:27:40.288] - Launch lazy future ... done
[08:27:40.288] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[08:27:40.289] run() for ‘Future’ ...
[08:27:40.289] - state: ‘created’
[08:27:40.289] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.289] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.289] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.289]   - Field: ‘label’
[08:27:40.290]   - Field: ‘local’
[08:27:40.290]   - Field: ‘owner’
[08:27:40.290]   - Field: ‘envir’
[08:27:40.290]   - Field: ‘packages’
[08:27:40.290]   - Field: ‘gc’
[08:27:40.290]   - Field: ‘conditions’
[08:27:40.290]   - Field: ‘expr’
[08:27:40.290]   - Field: ‘uuid’
[08:27:40.290]   - Field: ‘seed’
[08:27:40.290]   - Field: ‘version’
[08:27:40.290]   - Field: ‘result’
[08:27:40.291]   - Field: ‘asynchronous’
[08:27:40.291]   - Field: ‘calls’
[08:27:40.291]   - Field: ‘globals’
[08:27:40.291]   - Field: ‘stdout’
[08:27:40.291]   - Field: ‘earlySignal’
[08:27:40.294]   - Field: ‘lazy’
[08:27:40.294]   - Field: ‘state’
[08:27:40.294] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.295] - Launch lazy future ...
[08:27:40.295] Packages needed by the future expression (n = 0): <none>
[08:27:40.295] Packages needed by future strategies (n = 0): <none>
[08:27:40.295] {
[08:27:40.295]     {
[08:27:40.295]         {
[08:27:40.295]             ...future.startTime <- base::Sys.time()
[08:27:40.295]             {
[08:27:40.295]                 {
[08:27:40.295]                   {
[08:27:40.295]                     base::local({
[08:27:40.295]                       has_future <- base::requireNamespace("future", 
[08:27:40.295]                         quietly = TRUE)
[08:27:40.295]                       if (has_future) {
[08:27:40.295]                         ns <- base::getNamespace("future")
[08:27:40.295]                         version <- ns[[".package"]][["version"]]
[08:27:40.295]                         if (is.null(version)) 
[08:27:40.295]                           version <- utils::packageVersion("future")
[08:27:40.295]                       }
[08:27:40.295]                       else {
[08:27:40.295]                         version <- NULL
[08:27:40.295]                       }
[08:27:40.295]                       if (!has_future || version < "1.8.0") {
[08:27:40.295]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.295]                           "", base::R.version$version.string), 
[08:27:40.295]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.295]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.295]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.295]                             "release", "version")], collapse = " "), 
[08:27:40.295]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.295]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.295]                           info)
[08:27:40.295]                         info <- base::paste(info, collapse = "; ")
[08:27:40.295]                         if (!has_future) {
[08:27:40.295]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.295]                             info)
[08:27:40.295]                         }
[08:27:40.295]                         else {
[08:27:40.295]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.295]                             info, version)
[08:27:40.295]                         }
[08:27:40.295]                         base::stop(msg)
[08:27:40.295]                       }
[08:27:40.295]                     })
[08:27:40.295]                   }
[08:27:40.295]                   ...future.strategy.old <- future::plan("list")
[08:27:40.295]                   options(future.plan = NULL)
[08:27:40.295]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.295]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.295]                 }
[08:27:40.295]                 ...future.workdir <- getwd()
[08:27:40.295]             }
[08:27:40.295]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.295]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.295]         }
[08:27:40.295]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.295]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.295]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.295]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.295]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.295]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.295]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.295]             base::names(...future.oldOptions))
[08:27:40.295]     }
[08:27:40.295]     if (FALSE) {
[08:27:40.295]     }
[08:27:40.295]     else {
[08:27:40.295]         if (TRUE) {
[08:27:40.295]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.295]                 open = "w")
[08:27:40.295]         }
[08:27:40.295]         else {
[08:27:40.295]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.295]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.295]         }
[08:27:40.295]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.295]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.295]             base::sink(type = "output", split = FALSE)
[08:27:40.295]             base::close(...future.stdout)
[08:27:40.295]         }, add = TRUE)
[08:27:40.295]     }
[08:27:40.295]     ...future.frame <- base::sys.nframe()
[08:27:40.295]     ...future.conditions <- base::list()
[08:27:40.295]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.295]     if (FALSE) {
[08:27:40.295]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.295]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.295]     }
[08:27:40.295]     ...future.result <- base::tryCatch({
[08:27:40.295]         base::withCallingHandlers({
[08:27:40.295]             ...future.value <- base::withVisible(base::local({
[08:27:40.295]                 2
[08:27:40.295]             }))
[08:27:40.295]             future::FutureResult(value = ...future.value$value, 
[08:27:40.295]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.295]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.295]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.295]                     ...future.globalenv.names))
[08:27:40.295]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.295]         }, condition = base::local({
[08:27:40.295]             c <- base::c
[08:27:40.295]             inherits <- base::inherits
[08:27:40.295]             invokeRestart <- base::invokeRestart
[08:27:40.295]             length <- base::length
[08:27:40.295]             list <- base::list
[08:27:40.295]             seq.int <- base::seq.int
[08:27:40.295]             signalCondition <- base::signalCondition
[08:27:40.295]             sys.calls <- base::sys.calls
[08:27:40.295]             `[[` <- base::`[[`
[08:27:40.295]             `+` <- base::`+`
[08:27:40.295]             `<<-` <- base::`<<-`
[08:27:40.295]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.295]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.295]                   3L)]
[08:27:40.295]             }
[08:27:40.295]             function(cond) {
[08:27:40.295]                 is_error <- inherits(cond, "error")
[08:27:40.295]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.295]                   NULL)
[08:27:40.295]                 if (is_error) {
[08:27:40.295]                   sessionInformation <- function() {
[08:27:40.295]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.295]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.295]                       search = base::search(), system = base::Sys.info())
[08:27:40.295]                   }
[08:27:40.295]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.295]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.295]                     cond$call), session = sessionInformation(), 
[08:27:40.295]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.295]                   signalCondition(cond)
[08:27:40.295]                 }
[08:27:40.295]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.295]                 "immediateCondition"))) {
[08:27:40.295]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.295]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.295]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.295]                   if (TRUE && !signal) {
[08:27:40.295]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.295]                     {
[08:27:40.295]                       inherits <- base::inherits
[08:27:40.295]                       invokeRestart <- base::invokeRestart
[08:27:40.295]                       is.null <- base::is.null
[08:27:40.295]                       muffled <- FALSE
[08:27:40.295]                       if (inherits(cond, "message")) {
[08:27:40.295]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.295]                         if (muffled) 
[08:27:40.295]                           invokeRestart("muffleMessage")
[08:27:40.295]                       }
[08:27:40.295]                       else if (inherits(cond, "warning")) {
[08:27:40.295]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.295]                         if (muffled) 
[08:27:40.295]                           invokeRestart("muffleWarning")
[08:27:40.295]                       }
[08:27:40.295]                       else if (inherits(cond, "condition")) {
[08:27:40.295]                         if (!is.null(pattern)) {
[08:27:40.295]                           computeRestarts <- base::computeRestarts
[08:27:40.295]                           grepl <- base::grepl
[08:27:40.295]                           restarts <- computeRestarts(cond)
[08:27:40.295]                           for (restart in restarts) {
[08:27:40.295]                             name <- restart$name
[08:27:40.295]                             if (is.null(name)) 
[08:27:40.295]                               next
[08:27:40.295]                             if (!grepl(pattern, name)) 
[08:27:40.295]                               next
[08:27:40.295]                             invokeRestart(restart)
[08:27:40.295]                             muffled <- TRUE
[08:27:40.295]                             break
[08:27:40.295]                           }
[08:27:40.295]                         }
[08:27:40.295]                       }
[08:27:40.295]                       invisible(muffled)
[08:27:40.295]                     }
[08:27:40.295]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.295]                   }
[08:27:40.295]                 }
[08:27:40.295]                 else {
[08:27:40.295]                   if (TRUE) {
[08:27:40.295]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.295]                     {
[08:27:40.295]                       inherits <- base::inherits
[08:27:40.295]                       invokeRestart <- base::invokeRestart
[08:27:40.295]                       is.null <- base::is.null
[08:27:40.295]                       muffled <- FALSE
[08:27:40.295]                       if (inherits(cond, "message")) {
[08:27:40.295]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.295]                         if (muffled) 
[08:27:40.295]                           invokeRestart("muffleMessage")
[08:27:40.295]                       }
[08:27:40.295]                       else if (inherits(cond, "warning")) {
[08:27:40.295]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.295]                         if (muffled) 
[08:27:40.295]                           invokeRestart("muffleWarning")
[08:27:40.295]                       }
[08:27:40.295]                       else if (inherits(cond, "condition")) {
[08:27:40.295]                         if (!is.null(pattern)) {
[08:27:40.295]                           computeRestarts <- base::computeRestarts
[08:27:40.295]                           grepl <- base::grepl
[08:27:40.295]                           restarts <- computeRestarts(cond)
[08:27:40.295]                           for (restart in restarts) {
[08:27:40.295]                             name <- restart$name
[08:27:40.295]                             if (is.null(name)) 
[08:27:40.295]                               next
[08:27:40.295]                             if (!grepl(pattern, name)) 
[08:27:40.295]                               next
[08:27:40.295]                             invokeRestart(restart)
[08:27:40.295]                             muffled <- TRUE
[08:27:40.295]                             break
[08:27:40.295]                           }
[08:27:40.295]                         }
[08:27:40.295]                       }
[08:27:40.295]                       invisible(muffled)
[08:27:40.295]                     }
[08:27:40.295]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.295]                   }
[08:27:40.295]                 }
[08:27:40.295]             }
[08:27:40.295]         }))
[08:27:40.295]     }, error = function(ex) {
[08:27:40.295]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.295]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.295]                 ...future.rng), started = ...future.startTime, 
[08:27:40.295]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.295]             version = "1.8"), class = "FutureResult")
[08:27:40.295]     }, finally = {
[08:27:40.295]         if (!identical(...future.workdir, getwd())) 
[08:27:40.295]             setwd(...future.workdir)
[08:27:40.295]         {
[08:27:40.295]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.295]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.295]             }
[08:27:40.295]             base::options(...future.oldOptions)
[08:27:40.295]             if (.Platform$OS.type == "windows") {
[08:27:40.295]                 old_names <- names(...future.oldEnvVars)
[08:27:40.295]                 envs <- base::Sys.getenv()
[08:27:40.295]                 names <- names(envs)
[08:27:40.295]                 common <- intersect(names, old_names)
[08:27:40.295]                 added <- setdiff(names, old_names)
[08:27:40.295]                 removed <- setdiff(old_names, names)
[08:27:40.295]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.295]                   envs[common]]
[08:27:40.295]                 NAMES <- toupper(changed)
[08:27:40.295]                 args <- list()
[08:27:40.295]                 for (kk in seq_along(NAMES)) {
[08:27:40.295]                   name <- changed[[kk]]
[08:27:40.295]                   NAME <- NAMES[[kk]]
[08:27:40.295]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.295]                     next
[08:27:40.295]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.295]                 }
[08:27:40.295]                 NAMES <- toupper(added)
[08:27:40.295]                 for (kk in seq_along(NAMES)) {
[08:27:40.295]                   name <- added[[kk]]
[08:27:40.295]                   NAME <- NAMES[[kk]]
[08:27:40.295]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.295]                     next
[08:27:40.295]                   args[[name]] <- ""
[08:27:40.295]                 }
[08:27:40.295]                 NAMES <- toupper(removed)
[08:27:40.295]                 for (kk in seq_along(NAMES)) {
[08:27:40.295]                   name <- removed[[kk]]
[08:27:40.295]                   NAME <- NAMES[[kk]]
[08:27:40.295]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.295]                     next
[08:27:40.295]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.295]                 }
[08:27:40.295]                 if (length(args) > 0) 
[08:27:40.295]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.295]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.295]             }
[08:27:40.295]             else {
[08:27:40.295]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.295]             }
[08:27:40.295]             {
[08:27:40.295]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.295]                   0L) {
[08:27:40.295]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.295]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.295]                   base::options(opts)
[08:27:40.295]                 }
[08:27:40.295]                 {
[08:27:40.295]                   {
[08:27:40.295]                     NULL
[08:27:40.295]                     RNGkind("Mersenne-Twister")
[08:27:40.295]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.295]                       inherits = FALSE)
[08:27:40.295]                   }
[08:27:40.295]                   options(future.plan = NULL)
[08:27:40.295]                   if (is.na(NA_character_)) 
[08:27:40.295]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.295]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.295]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.295]                     .init = FALSE)
[08:27:40.295]                 }
[08:27:40.295]             }
[08:27:40.295]         }
[08:27:40.295]     })
[08:27:40.295]     if (TRUE) {
[08:27:40.295]         base::sink(type = "output", split = FALSE)
[08:27:40.295]         if (TRUE) {
[08:27:40.295]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.295]         }
[08:27:40.295]         else {
[08:27:40.295]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.295]         }
[08:27:40.295]         base::close(...future.stdout)
[08:27:40.295]         ...future.stdout <- NULL
[08:27:40.295]     }
[08:27:40.295]     ...future.result$conditions <- ...future.conditions
[08:27:40.295]     ...future.result$finished <- base::Sys.time()
[08:27:40.295]     ...future.result
[08:27:40.295] }
[08:27:40.297] plan(): Setting new future strategy stack:
[08:27:40.297] List of future strategies:
[08:27:40.297] 1. sequential:
[08:27:40.297]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.297]    - tweaked: FALSE
[08:27:40.297]    - call: NULL
[08:27:40.298] plan(): nbrOfWorkers() = 1
[08:27:40.298] plan(): Setting new future strategy stack:
[08:27:40.299] List of future strategies:
[08:27:40.299] 1. sequential:
[08:27:40.299]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.299]    - tweaked: FALSE
[08:27:40.299]    - call: future::plan("sequential")
[08:27:40.299] plan(): nbrOfWorkers() = 1
[08:27:40.299] SequentialFuture started (and completed)
[08:27:40.299] - Launch lazy future ... done
[08:27:40.299] run() for ‘SequentialFuture’ ... done
> 
> message("*** %<-% to environment ... DONE")
*** %<-% to environment ... DONE
> 
> source("incl/end.R")
[08:27:40.300] plan(): Setting new future strategy stack:
[08:27:40.300] List of future strategies:
[08:27:40.300] 1. FutureStrategy:
[08:27:40.300]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.300]    - tweaked: FALSE
[08:27:40.300]    - call: future::plan(oplan)
[08:27:40.312] plan(): nbrOfWorkers() = 1
> 
