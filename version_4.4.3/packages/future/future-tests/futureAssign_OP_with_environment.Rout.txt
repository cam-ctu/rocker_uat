
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:19.129] plan(): Setting new future strategy stack:
[11:01:19.129] List of future strategies:
[11:01:19.129] 1. sequential:
[11:01:19.129]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.129]    - tweaked: FALSE
[11:01:19.129]    - call: future::plan("sequential")
[11:01:19.142] plan(): nbrOfWorkers() = 1
> 
> ## BACKWARD COMPATIBILITY
> if (getRversion() < "3.2.0") {
+   names <- function(x) if (is.environment(x)) ls(envir = x) else base::names(x)
+ }
> 
> message("*** %<-% to environment ...")
*** %<-% to environment ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Async delayed assignment (infix operator)
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- new.env()
> stopifnot(length(names(z)) == 0L)
> 
> message("*** %<-% to environment: Assign by index (not allowed)")
*** %<-% to environment: Assign by index (not allowed)
> res <- try(z[[1]] %<-% { 2 } %lazy% TRUE, silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** %<-% to environment: Assign by name (new)")
*** %<-% to environment: Assign by name (new)
> z$B %<-% { TRUE }  %lazy% TRUE
[11:01:19.159] getGlobalsAndPackages() ...
[11:01:19.159] Searching for globals...
[11:01:19.162] - globals found: [1] ‘{’
[11:01:19.162] Searching for globals ... DONE
[11:01:19.162] Resolving globals: FALSE
[11:01:19.163] 
[11:01:19.163] 
[11:01:19.163] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 2) # sic!
> stopifnot("B" %in% ls(z))
> 
> y <- as.list(z)
[11:01:19.164] run() for ‘Future’ ...
[11:01:19.164] - state: ‘created’
[11:01:19.164] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.164] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.164] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.164]   - Field: ‘label’
[11:01:19.165]   - Field: ‘local’
[11:01:19.165]   - Field: ‘owner’
[11:01:19.165]   - Field: ‘envir’
[11:01:19.165]   - Field: ‘packages’
[11:01:19.165]   - Field: ‘gc’
[11:01:19.165]   - Field: ‘conditions’
[11:01:19.165]   - Field: ‘expr’
[11:01:19.165]   - Field: ‘uuid’
[11:01:19.165]   - Field: ‘seed’
[11:01:19.165]   - Field: ‘version’
[11:01:19.165]   - Field: ‘result’
[11:01:19.165]   - Field: ‘asynchronous’
[11:01:19.166]   - Field: ‘calls’
[11:01:19.166]   - Field: ‘globals’
[11:01:19.166]   - Field: ‘stdout’
[11:01:19.166]   - Field: ‘earlySignal’
[11:01:19.166]   - Field: ‘lazy’
[11:01:19.166]   - Field: ‘state’
[11:01:19.166] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.166] - Launch lazy future ...
[11:01:19.167] Packages needed by the future expression (n = 0): <none>
[11:01:19.167] Packages needed by future strategies (n = 0): <none>
[11:01:19.168] {
[11:01:19.168]     {
[11:01:19.168]         {
[11:01:19.168]             ...future.startTime <- base::Sys.time()
[11:01:19.168]             {
[11:01:19.168]                 {
[11:01:19.168]                   {
[11:01:19.168]                     base::local({
[11:01:19.168]                       has_future <- base::requireNamespace("future", 
[11:01:19.168]                         quietly = TRUE)
[11:01:19.168]                       if (has_future) {
[11:01:19.168]                         ns <- base::getNamespace("future")
[11:01:19.168]                         version <- ns[[".package"]][["version"]]
[11:01:19.168]                         if (is.null(version)) 
[11:01:19.168]                           version <- utils::packageVersion("future")
[11:01:19.168]                       }
[11:01:19.168]                       else {
[11:01:19.168]                         version <- NULL
[11:01:19.168]                       }
[11:01:19.168]                       if (!has_future || version < "1.8.0") {
[11:01:19.168]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.168]                           "", base::R.version$version.string), 
[11:01:19.168]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.168]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.168]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.168]                             "release", "version")], collapse = " "), 
[11:01:19.168]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.168]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.168]                           info)
[11:01:19.168]                         info <- base::paste(info, collapse = "; ")
[11:01:19.168]                         if (!has_future) {
[11:01:19.168]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.168]                             info)
[11:01:19.168]                         }
[11:01:19.168]                         else {
[11:01:19.168]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.168]                             info, version)
[11:01:19.168]                         }
[11:01:19.168]                         base::stop(msg)
[11:01:19.168]                       }
[11:01:19.168]                     })
[11:01:19.168]                   }
[11:01:19.168]                   ...future.strategy.old <- future::plan("list")
[11:01:19.168]                   options(future.plan = NULL)
[11:01:19.168]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.168]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.168]                 }
[11:01:19.168]                 ...future.workdir <- getwd()
[11:01:19.168]             }
[11:01:19.168]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.168]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.168]         }
[11:01:19.168]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.168]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.168]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.168]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.168]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.168]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.168]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.168]             base::names(...future.oldOptions))
[11:01:19.168]     }
[11:01:19.168]     if (FALSE) {
[11:01:19.168]     }
[11:01:19.168]     else {
[11:01:19.168]         if (TRUE) {
[11:01:19.168]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.168]                 open = "w")
[11:01:19.168]         }
[11:01:19.168]         else {
[11:01:19.168]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.168]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.168]         }
[11:01:19.168]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.168]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.168]             base::sink(type = "output", split = FALSE)
[11:01:19.168]             base::close(...future.stdout)
[11:01:19.168]         }, add = TRUE)
[11:01:19.168]     }
[11:01:19.168]     ...future.frame <- base::sys.nframe()
[11:01:19.168]     ...future.conditions <- base::list()
[11:01:19.168]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.168]     if (FALSE) {
[11:01:19.168]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.168]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.168]     }
[11:01:19.168]     ...future.result <- base::tryCatch({
[11:01:19.168]         base::withCallingHandlers({
[11:01:19.168]             ...future.value <- base::withVisible(base::local({
[11:01:19.168]                 TRUE
[11:01:19.168]             }))
[11:01:19.168]             future::FutureResult(value = ...future.value$value, 
[11:01:19.168]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.168]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.168]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.168]                     ...future.globalenv.names))
[11:01:19.168]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.168]         }, condition = base::local({
[11:01:19.168]             c <- base::c
[11:01:19.168]             inherits <- base::inherits
[11:01:19.168]             invokeRestart <- base::invokeRestart
[11:01:19.168]             length <- base::length
[11:01:19.168]             list <- base::list
[11:01:19.168]             seq.int <- base::seq.int
[11:01:19.168]             signalCondition <- base::signalCondition
[11:01:19.168]             sys.calls <- base::sys.calls
[11:01:19.168]             `[[` <- base::`[[`
[11:01:19.168]             `+` <- base::`+`
[11:01:19.168]             `<<-` <- base::`<<-`
[11:01:19.168]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.168]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.168]                   3L)]
[11:01:19.168]             }
[11:01:19.168]             function(cond) {
[11:01:19.168]                 is_error <- inherits(cond, "error")
[11:01:19.168]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.168]                   NULL)
[11:01:19.168]                 if (is_error) {
[11:01:19.168]                   sessionInformation <- function() {
[11:01:19.168]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.168]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.168]                       search = base::search(), system = base::Sys.info())
[11:01:19.168]                   }
[11:01:19.168]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.168]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.168]                     cond$call), session = sessionInformation(), 
[11:01:19.168]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.168]                   signalCondition(cond)
[11:01:19.168]                 }
[11:01:19.168]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.168]                 "immediateCondition"))) {
[11:01:19.168]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.168]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.168]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.168]                   if (TRUE && !signal) {
[11:01:19.168]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.168]                     {
[11:01:19.168]                       inherits <- base::inherits
[11:01:19.168]                       invokeRestart <- base::invokeRestart
[11:01:19.168]                       is.null <- base::is.null
[11:01:19.168]                       muffled <- FALSE
[11:01:19.168]                       if (inherits(cond, "message")) {
[11:01:19.168]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.168]                         if (muffled) 
[11:01:19.168]                           invokeRestart("muffleMessage")
[11:01:19.168]                       }
[11:01:19.168]                       else if (inherits(cond, "warning")) {
[11:01:19.168]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.168]                         if (muffled) 
[11:01:19.168]                           invokeRestart("muffleWarning")
[11:01:19.168]                       }
[11:01:19.168]                       else if (inherits(cond, "condition")) {
[11:01:19.168]                         if (!is.null(pattern)) {
[11:01:19.168]                           computeRestarts <- base::computeRestarts
[11:01:19.168]                           grepl <- base::grepl
[11:01:19.168]                           restarts <- computeRestarts(cond)
[11:01:19.168]                           for (restart in restarts) {
[11:01:19.168]                             name <- restart$name
[11:01:19.168]                             if (is.null(name)) 
[11:01:19.168]                               next
[11:01:19.168]                             if (!grepl(pattern, name)) 
[11:01:19.168]                               next
[11:01:19.168]                             invokeRestart(restart)
[11:01:19.168]                             muffled <- TRUE
[11:01:19.168]                             break
[11:01:19.168]                           }
[11:01:19.168]                         }
[11:01:19.168]                       }
[11:01:19.168]                       invisible(muffled)
[11:01:19.168]                     }
[11:01:19.168]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.168]                   }
[11:01:19.168]                 }
[11:01:19.168]                 else {
[11:01:19.168]                   if (TRUE) {
[11:01:19.168]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.168]                     {
[11:01:19.168]                       inherits <- base::inherits
[11:01:19.168]                       invokeRestart <- base::invokeRestart
[11:01:19.168]                       is.null <- base::is.null
[11:01:19.168]                       muffled <- FALSE
[11:01:19.168]                       if (inherits(cond, "message")) {
[11:01:19.168]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.168]                         if (muffled) 
[11:01:19.168]                           invokeRestart("muffleMessage")
[11:01:19.168]                       }
[11:01:19.168]                       else if (inherits(cond, "warning")) {
[11:01:19.168]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.168]                         if (muffled) 
[11:01:19.168]                           invokeRestart("muffleWarning")
[11:01:19.168]                       }
[11:01:19.168]                       else if (inherits(cond, "condition")) {
[11:01:19.168]                         if (!is.null(pattern)) {
[11:01:19.168]                           computeRestarts <- base::computeRestarts
[11:01:19.168]                           grepl <- base::grepl
[11:01:19.168]                           restarts <- computeRestarts(cond)
[11:01:19.168]                           for (restart in restarts) {
[11:01:19.168]                             name <- restart$name
[11:01:19.168]                             if (is.null(name)) 
[11:01:19.168]                               next
[11:01:19.168]                             if (!grepl(pattern, name)) 
[11:01:19.168]                               next
[11:01:19.168]                             invokeRestart(restart)
[11:01:19.168]                             muffled <- TRUE
[11:01:19.168]                             break
[11:01:19.168]                           }
[11:01:19.168]                         }
[11:01:19.168]                       }
[11:01:19.168]                       invisible(muffled)
[11:01:19.168]                     }
[11:01:19.168]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.168]                   }
[11:01:19.168]                 }
[11:01:19.168]             }
[11:01:19.168]         }))
[11:01:19.168]     }, error = function(ex) {
[11:01:19.168]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.168]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.168]                 ...future.rng), started = ...future.startTime, 
[11:01:19.168]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.168]             version = "1.8"), class = "FutureResult")
[11:01:19.168]     }, finally = {
[11:01:19.168]         if (!identical(...future.workdir, getwd())) 
[11:01:19.168]             setwd(...future.workdir)
[11:01:19.168]         {
[11:01:19.168]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.168]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.168]             }
[11:01:19.168]             base::options(...future.oldOptions)
[11:01:19.168]             if (.Platform$OS.type == "windows") {
[11:01:19.168]                 old_names <- names(...future.oldEnvVars)
[11:01:19.168]                 envs <- base::Sys.getenv()
[11:01:19.168]                 names <- names(envs)
[11:01:19.168]                 common <- intersect(names, old_names)
[11:01:19.168]                 added <- setdiff(names, old_names)
[11:01:19.168]                 removed <- setdiff(old_names, names)
[11:01:19.168]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.168]                   envs[common]]
[11:01:19.168]                 NAMES <- toupper(changed)
[11:01:19.168]                 args <- list()
[11:01:19.168]                 for (kk in seq_along(NAMES)) {
[11:01:19.168]                   name <- changed[[kk]]
[11:01:19.168]                   NAME <- NAMES[[kk]]
[11:01:19.168]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.168]                     next
[11:01:19.168]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.168]                 }
[11:01:19.168]                 NAMES <- toupper(added)
[11:01:19.168]                 for (kk in seq_along(NAMES)) {
[11:01:19.168]                   name <- added[[kk]]
[11:01:19.168]                   NAME <- NAMES[[kk]]
[11:01:19.168]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.168]                     next
[11:01:19.168]                   args[[name]] <- ""
[11:01:19.168]                 }
[11:01:19.168]                 NAMES <- toupper(removed)
[11:01:19.168]                 for (kk in seq_along(NAMES)) {
[11:01:19.168]                   name <- removed[[kk]]
[11:01:19.168]                   NAME <- NAMES[[kk]]
[11:01:19.168]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.168]                     next
[11:01:19.168]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.168]                 }
[11:01:19.168]                 if (length(args) > 0) 
[11:01:19.168]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.168]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.168]             }
[11:01:19.168]             else {
[11:01:19.168]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.168]             }
[11:01:19.168]             {
[11:01:19.168]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.168]                   0L) {
[11:01:19.168]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.168]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.168]                   base::options(opts)
[11:01:19.168]                 }
[11:01:19.168]                 {
[11:01:19.168]                   {
[11:01:19.168]                     NULL
[11:01:19.168]                     RNGkind("Mersenne-Twister")
[11:01:19.168]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.168]                       inherits = FALSE)
[11:01:19.168]                   }
[11:01:19.168]                   options(future.plan = NULL)
[11:01:19.168]                   if (is.na(NA_character_)) 
[11:01:19.168]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.168]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.168]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.168]                     .init = FALSE)
[11:01:19.168]                 }
[11:01:19.168]             }
[11:01:19.168]         }
[11:01:19.168]     })
[11:01:19.168]     if (TRUE) {
[11:01:19.168]         base::sink(type = "output", split = FALSE)
[11:01:19.168]         if (TRUE) {
[11:01:19.168]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.168]         }
[11:01:19.168]         else {
[11:01:19.168]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.168]         }
[11:01:19.168]         base::close(...future.stdout)
[11:01:19.168]         ...future.stdout <- NULL
[11:01:19.168]     }
[11:01:19.168]     ...future.result$conditions <- ...future.conditions
[11:01:19.168]     ...future.result$finished <- base::Sys.time()
[11:01:19.168]     ...future.result
[11:01:19.168] }
[11:01:19.169] plan(): Setting new future strategy stack:
[11:01:19.170] List of future strategies:
[11:01:19.170] 1. sequential:
[11:01:19.170]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.170]    - tweaked: FALSE
[11:01:19.170]    - call: NULL
[11:01:19.170] plan(): nbrOfWorkers() = 1
[11:01:19.171] plan(): Setting new future strategy stack:
[11:01:19.171] List of future strategies:
[11:01:19.171] 1. sequential:
[11:01:19.171]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.171]    - tweaked: FALSE
[11:01:19.171]    - call: future::plan("sequential")
[11:01:19.172] plan(): nbrOfWorkers() = 1
[11:01:19.172] SequentialFuture started (and completed)
[11:01:19.172] - Launch lazy future ... done
[11:01:19.172] run() for ‘SequentialFuture’ ... done
> str(y)
List of 1
 $ B: logi TRUE
> stopifnot(length(y) == 1)
> stopifnot(identical(names(y), "B"))
> 
> 
> message("*** %<-% to environment: Potential task name clashes")
*** %<-% to environment: Potential task name clashes
> u <- new.env()
> u$a %<-% { 1 } %lazy% TRUE
[11:01:19.175] getGlobalsAndPackages() ...
[11:01:19.175] Searching for globals...
[11:01:19.176] - globals found: [1] ‘{’
[11:01:19.176] Searching for globals ... DONE
[11:01:19.176] Resolving globals: FALSE
[11:01:19.176] 
[11:01:19.176] 
[11:01:19.176] getGlobalsAndPackages() ... DONE
> stopifnot(length(u) == 2)
> stopifnot("a" %in% names(u))
> fu <- futureOf(u$a)
> 
> v <- new.env()
> v$a %<-% { 2 } %lazy% TRUE
[11:01:19.177] getGlobalsAndPackages() ...
[11:01:19.177] Searching for globals...
[11:01:19.178] - globals found: [1] ‘{’
[11:01:19.178] Searching for globals ... DONE
[11:01:19.178] Resolving globals: FALSE
[11:01:19.178] 
[11:01:19.178] 
[11:01:19.178] getGlobalsAndPackages() ... DONE
> stopifnot(length(v) == 2)
> stopifnot("a" %in% names(v))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[11:01:19.179] run() for ‘Future’ ...
[11:01:19.179] - state: ‘created’
[11:01:19.179] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.179] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.180] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.180]   - Field: ‘label’
[11:01:19.180]   - Field: ‘local’
[11:01:19.180]   - Field: ‘owner’
[11:01:19.180]   - Field: ‘envir’
[11:01:19.180]   - Field: ‘packages’
[11:01:19.180]   - Field: ‘gc’
[11:01:19.180]   - Field: ‘conditions’
[11:01:19.180]   - Field: ‘expr’
[11:01:19.180]   - Field: ‘uuid’
[11:01:19.180]   - Field: ‘seed’
[11:01:19.180]   - Field: ‘version’
[11:01:19.181]   - Field: ‘result’
[11:01:19.181]   - Field: ‘asynchronous’
[11:01:19.181]   - Field: ‘calls’
[11:01:19.181]   - Field: ‘globals’
[11:01:19.181]   - Field: ‘stdout’
[11:01:19.181]   - Field: ‘earlySignal’
[11:01:19.181]   - Field: ‘lazy’
[11:01:19.181]   - Field: ‘state’
[11:01:19.181] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.181] - Launch lazy future ...
[11:01:19.181] Packages needed by the future expression (n = 0): <none>
[11:01:19.182] Packages needed by future strategies (n = 0): <none>
[11:01:19.182] {
[11:01:19.182]     {
[11:01:19.182]         {
[11:01:19.182]             ...future.startTime <- base::Sys.time()
[11:01:19.182]             {
[11:01:19.182]                 {
[11:01:19.182]                   {
[11:01:19.182]                     base::local({
[11:01:19.182]                       has_future <- base::requireNamespace("future", 
[11:01:19.182]                         quietly = TRUE)
[11:01:19.182]                       if (has_future) {
[11:01:19.182]                         ns <- base::getNamespace("future")
[11:01:19.182]                         version <- ns[[".package"]][["version"]]
[11:01:19.182]                         if (is.null(version)) 
[11:01:19.182]                           version <- utils::packageVersion("future")
[11:01:19.182]                       }
[11:01:19.182]                       else {
[11:01:19.182]                         version <- NULL
[11:01:19.182]                       }
[11:01:19.182]                       if (!has_future || version < "1.8.0") {
[11:01:19.182]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.182]                           "", base::R.version$version.string), 
[11:01:19.182]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.182]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.182]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.182]                             "release", "version")], collapse = " "), 
[11:01:19.182]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.182]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.182]                           info)
[11:01:19.182]                         info <- base::paste(info, collapse = "; ")
[11:01:19.182]                         if (!has_future) {
[11:01:19.182]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.182]                             info)
[11:01:19.182]                         }
[11:01:19.182]                         else {
[11:01:19.182]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.182]                             info, version)
[11:01:19.182]                         }
[11:01:19.182]                         base::stop(msg)
[11:01:19.182]                       }
[11:01:19.182]                     })
[11:01:19.182]                   }
[11:01:19.182]                   ...future.strategy.old <- future::plan("list")
[11:01:19.182]                   options(future.plan = NULL)
[11:01:19.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.182]                 }
[11:01:19.182]                 ...future.workdir <- getwd()
[11:01:19.182]             }
[11:01:19.182]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.182]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.182]         }
[11:01:19.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.182]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.182]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.182]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.182]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.182]             base::names(...future.oldOptions))
[11:01:19.182]     }
[11:01:19.182]     if (FALSE) {
[11:01:19.182]     }
[11:01:19.182]     else {
[11:01:19.182]         if (TRUE) {
[11:01:19.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.182]                 open = "w")
[11:01:19.182]         }
[11:01:19.182]         else {
[11:01:19.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.182]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.182]         }
[11:01:19.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.182]             base::sink(type = "output", split = FALSE)
[11:01:19.182]             base::close(...future.stdout)
[11:01:19.182]         }, add = TRUE)
[11:01:19.182]     }
[11:01:19.182]     ...future.frame <- base::sys.nframe()
[11:01:19.182]     ...future.conditions <- base::list()
[11:01:19.182]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.182]     if (FALSE) {
[11:01:19.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.182]     }
[11:01:19.182]     ...future.result <- base::tryCatch({
[11:01:19.182]         base::withCallingHandlers({
[11:01:19.182]             ...future.value <- base::withVisible(base::local({
[11:01:19.182]                 1
[11:01:19.182]             }))
[11:01:19.182]             future::FutureResult(value = ...future.value$value, 
[11:01:19.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.182]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.182]                     ...future.globalenv.names))
[11:01:19.182]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.182]         }, condition = base::local({
[11:01:19.182]             c <- base::c
[11:01:19.182]             inherits <- base::inherits
[11:01:19.182]             invokeRestart <- base::invokeRestart
[11:01:19.182]             length <- base::length
[11:01:19.182]             list <- base::list
[11:01:19.182]             seq.int <- base::seq.int
[11:01:19.182]             signalCondition <- base::signalCondition
[11:01:19.182]             sys.calls <- base::sys.calls
[11:01:19.182]             `[[` <- base::`[[`
[11:01:19.182]             `+` <- base::`+`
[11:01:19.182]             `<<-` <- base::`<<-`
[11:01:19.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.182]                   3L)]
[11:01:19.182]             }
[11:01:19.182]             function(cond) {
[11:01:19.182]                 is_error <- inherits(cond, "error")
[11:01:19.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.182]                   NULL)
[11:01:19.182]                 if (is_error) {
[11:01:19.182]                   sessionInformation <- function() {
[11:01:19.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.182]                       search = base::search(), system = base::Sys.info())
[11:01:19.182]                   }
[11:01:19.182]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.182]                     cond$call), session = sessionInformation(), 
[11:01:19.182]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.182]                   signalCondition(cond)
[11:01:19.182]                 }
[11:01:19.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.182]                 "immediateCondition"))) {
[11:01:19.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.182]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.182]                   if (TRUE && !signal) {
[11:01:19.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.182]                     {
[11:01:19.182]                       inherits <- base::inherits
[11:01:19.182]                       invokeRestart <- base::invokeRestart
[11:01:19.182]                       is.null <- base::is.null
[11:01:19.182]                       muffled <- FALSE
[11:01:19.182]                       if (inherits(cond, "message")) {
[11:01:19.182]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.182]                         if (muffled) 
[11:01:19.182]                           invokeRestart("muffleMessage")
[11:01:19.182]                       }
[11:01:19.182]                       else if (inherits(cond, "warning")) {
[11:01:19.182]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.182]                         if (muffled) 
[11:01:19.182]                           invokeRestart("muffleWarning")
[11:01:19.182]                       }
[11:01:19.182]                       else if (inherits(cond, "condition")) {
[11:01:19.182]                         if (!is.null(pattern)) {
[11:01:19.182]                           computeRestarts <- base::computeRestarts
[11:01:19.182]                           grepl <- base::grepl
[11:01:19.182]                           restarts <- computeRestarts(cond)
[11:01:19.182]                           for (restart in restarts) {
[11:01:19.182]                             name <- restart$name
[11:01:19.182]                             if (is.null(name)) 
[11:01:19.182]                               next
[11:01:19.182]                             if (!grepl(pattern, name)) 
[11:01:19.182]                               next
[11:01:19.182]                             invokeRestart(restart)
[11:01:19.182]                             muffled <- TRUE
[11:01:19.182]                             break
[11:01:19.182]                           }
[11:01:19.182]                         }
[11:01:19.182]                       }
[11:01:19.182]                       invisible(muffled)
[11:01:19.182]                     }
[11:01:19.182]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.182]                   }
[11:01:19.182]                 }
[11:01:19.182]                 else {
[11:01:19.182]                   if (TRUE) {
[11:01:19.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.182]                     {
[11:01:19.182]                       inherits <- base::inherits
[11:01:19.182]                       invokeRestart <- base::invokeRestart
[11:01:19.182]                       is.null <- base::is.null
[11:01:19.182]                       muffled <- FALSE
[11:01:19.182]                       if (inherits(cond, "message")) {
[11:01:19.182]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.182]                         if (muffled) 
[11:01:19.182]                           invokeRestart("muffleMessage")
[11:01:19.182]                       }
[11:01:19.182]                       else if (inherits(cond, "warning")) {
[11:01:19.182]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.182]                         if (muffled) 
[11:01:19.182]                           invokeRestart("muffleWarning")
[11:01:19.182]                       }
[11:01:19.182]                       else if (inherits(cond, "condition")) {
[11:01:19.182]                         if (!is.null(pattern)) {
[11:01:19.182]                           computeRestarts <- base::computeRestarts
[11:01:19.182]                           grepl <- base::grepl
[11:01:19.182]                           restarts <- computeRestarts(cond)
[11:01:19.182]                           for (restart in restarts) {
[11:01:19.182]                             name <- restart$name
[11:01:19.182]                             if (is.null(name)) 
[11:01:19.182]                               next
[11:01:19.182]                             if (!grepl(pattern, name)) 
[11:01:19.182]                               next
[11:01:19.182]                             invokeRestart(restart)
[11:01:19.182]                             muffled <- TRUE
[11:01:19.182]                             break
[11:01:19.182]                           }
[11:01:19.182]                         }
[11:01:19.182]                       }
[11:01:19.182]                       invisible(muffled)
[11:01:19.182]                     }
[11:01:19.182]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.182]                   }
[11:01:19.182]                 }
[11:01:19.182]             }
[11:01:19.182]         }))
[11:01:19.182]     }, error = function(ex) {
[11:01:19.182]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.182]                 ...future.rng), started = ...future.startTime, 
[11:01:19.182]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.182]             version = "1.8"), class = "FutureResult")
[11:01:19.182]     }, finally = {
[11:01:19.182]         if (!identical(...future.workdir, getwd())) 
[11:01:19.182]             setwd(...future.workdir)
[11:01:19.182]         {
[11:01:19.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.182]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.182]             }
[11:01:19.182]             base::options(...future.oldOptions)
[11:01:19.182]             if (.Platform$OS.type == "windows") {
[11:01:19.182]                 old_names <- names(...future.oldEnvVars)
[11:01:19.182]                 envs <- base::Sys.getenv()
[11:01:19.182]                 names <- names(envs)
[11:01:19.182]                 common <- intersect(names, old_names)
[11:01:19.182]                 added <- setdiff(names, old_names)
[11:01:19.182]                 removed <- setdiff(old_names, names)
[11:01:19.182]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.182]                   envs[common]]
[11:01:19.182]                 NAMES <- toupper(changed)
[11:01:19.182]                 args <- list()
[11:01:19.182]                 for (kk in seq_along(NAMES)) {
[11:01:19.182]                   name <- changed[[kk]]
[11:01:19.182]                   NAME <- NAMES[[kk]]
[11:01:19.182]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.182]                     next
[11:01:19.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.182]                 }
[11:01:19.182]                 NAMES <- toupper(added)
[11:01:19.182]                 for (kk in seq_along(NAMES)) {
[11:01:19.182]                   name <- added[[kk]]
[11:01:19.182]                   NAME <- NAMES[[kk]]
[11:01:19.182]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.182]                     next
[11:01:19.182]                   args[[name]] <- ""
[11:01:19.182]                 }
[11:01:19.182]                 NAMES <- toupper(removed)
[11:01:19.182]                 for (kk in seq_along(NAMES)) {
[11:01:19.182]                   name <- removed[[kk]]
[11:01:19.182]                   NAME <- NAMES[[kk]]
[11:01:19.182]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.182]                     next
[11:01:19.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.182]                 }
[11:01:19.182]                 if (length(args) > 0) 
[11:01:19.182]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.182]             }
[11:01:19.182]             else {
[11:01:19.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.182]             }
[11:01:19.182]             {
[11:01:19.182]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.182]                   0L) {
[11:01:19.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.182]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.182]                   base::options(opts)
[11:01:19.182]                 }
[11:01:19.182]                 {
[11:01:19.182]                   {
[11:01:19.182]                     NULL
[11:01:19.182]                     RNGkind("Mersenne-Twister")
[11:01:19.182]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.182]                       inherits = FALSE)
[11:01:19.182]                   }
[11:01:19.182]                   options(future.plan = NULL)
[11:01:19.182]                   if (is.na(NA_character_)) 
[11:01:19.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.182]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.182]                     .init = FALSE)
[11:01:19.182]                 }
[11:01:19.182]             }
[11:01:19.182]         }
[11:01:19.182]     })
[11:01:19.182]     if (TRUE) {
[11:01:19.182]         base::sink(type = "output", split = FALSE)
[11:01:19.182]         if (TRUE) {
[11:01:19.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.182]         }
[11:01:19.182]         else {
[11:01:19.182]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.182]         }
[11:01:19.182]         base::close(...future.stdout)
[11:01:19.182]         ...future.stdout <- NULL
[11:01:19.182]     }
[11:01:19.182]     ...future.result$conditions <- ...future.conditions
[11:01:19.182]     ...future.result$finished <- base::Sys.time()
[11:01:19.182]     ...future.result
[11:01:19.182] }
[11:01:19.184] plan(): Setting new future strategy stack:
[11:01:19.184] List of future strategies:
[11:01:19.184] 1. sequential:
[11:01:19.184]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.184]    - tweaked: FALSE
[11:01:19.184]    - call: NULL
[11:01:19.185] plan(): nbrOfWorkers() = 1
[11:01:19.185] plan(): Setting new future strategy stack:
[11:01:19.185] List of future strategies:
[11:01:19.185] 1. sequential:
[11:01:19.185]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.185]    - tweaked: FALSE
[11:01:19.185]    - call: future::plan("sequential")
[11:01:19.186] plan(): nbrOfWorkers() = 1
[11:01:19.186] SequentialFuture started (and completed)
[11:01:19.186] - Launch lazy future ... done
[11:01:19.186] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[11:01:19.186] run() for ‘Future’ ...
[11:01:19.187] - state: ‘created’
[11:01:19.187] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.187] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.187] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.187]   - Field: ‘label’
[11:01:19.187]   - Field: ‘local’
[11:01:19.187]   - Field: ‘owner’
[11:01:19.187]   - Field: ‘envir’
[11:01:19.187]   - Field: ‘packages’
[11:01:19.188]   - Field: ‘gc’
[11:01:19.188]   - Field: ‘conditions’
[11:01:19.188]   - Field: ‘expr’
[11:01:19.188]   - Field: ‘uuid’
[11:01:19.188]   - Field: ‘seed’
[11:01:19.188]   - Field: ‘version’
[11:01:19.188]   - Field: ‘result’
[11:01:19.188]   - Field: ‘asynchronous’
[11:01:19.188]   - Field: ‘calls’
[11:01:19.188]   - Field: ‘globals’
[11:01:19.189]   - Field: ‘stdout’
[11:01:19.189]   - Field: ‘earlySignal’
[11:01:19.191]   - Field: ‘lazy’
[11:01:19.191]   - Field: ‘state’
[11:01:19.191] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.191] - Launch lazy future ...
[11:01:19.191] Packages needed by the future expression (n = 0): <none>
[11:01:19.191] Packages needed by future strategies (n = 0): <none>
[11:01:19.192] {
[11:01:19.192]     {
[11:01:19.192]         {
[11:01:19.192]             ...future.startTime <- base::Sys.time()
[11:01:19.192]             {
[11:01:19.192]                 {
[11:01:19.192]                   {
[11:01:19.192]                     base::local({
[11:01:19.192]                       has_future <- base::requireNamespace("future", 
[11:01:19.192]                         quietly = TRUE)
[11:01:19.192]                       if (has_future) {
[11:01:19.192]                         ns <- base::getNamespace("future")
[11:01:19.192]                         version <- ns[[".package"]][["version"]]
[11:01:19.192]                         if (is.null(version)) 
[11:01:19.192]                           version <- utils::packageVersion("future")
[11:01:19.192]                       }
[11:01:19.192]                       else {
[11:01:19.192]                         version <- NULL
[11:01:19.192]                       }
[11:01:19.192]                       if (!has_future || version < "1.8.0") {
[11:01:19.192]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.192]                           "", base::R.version$version.string), 
[11:01:19.192]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.192]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.192]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.192]                             "release", "version")], collapse = " "), 
[11:01:19.192]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.192]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.192]                           info)
[11:01:19.192]                         info <- base::paste(info, collapse = "; ")
[11:01:19.192]                         if (!has_future) {
[11:01:19.192]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.192]                             info)
[11:01:19.192]                         }
[11:01:19.192]                         else {
[11:01:19.192]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.192]                             info, version)
[11:01:19.192]                         }
[11:01:19.192]                         base::stop(msg)
[11:01:19.192]                       }
[11:01:19.192]                     })
[11:01:19.192]                   }
[11:01:19.192]                   ...future.strategy.old <- future::plan("list")
[11:01:19.192]                   options(future.plan = NULL)
[11:01:19.192]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.192]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.192]                 }
[11:01:19.192]                 ...future.workdir <- getwd()
[11:01:19.192]             }
[11:01:19.192]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.192]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.192]         }
[11:01:19.192]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.192]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.192]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.192]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.192]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.192]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.192]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.192]             base::names(...future.oldOptions))
[11:01:19.192]     }
[11:01:19.192]     if (FALSE) {
[11:01:19.192]     }
[11:01:19.192]     else {
[11:01:19.192]         if (TRUE) {
[11:01:19.192]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.192]                 open = "w")
[11:01:19.192]         }
[11:01:19.192]         else {
[11:01:19.192]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.192]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.192]         }
[11:01:19.192]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.192]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.192]             base::sink(type = "output", split = FALSE)
[11:01:19.192]             base::close(...future.stdout)
[11:01:19.192]         }, add = TRUE)
[11:01:19.192]     }
[11:01:19.192]     ...future.frame <- base::sys.nframe()
[11:01:19.192]     ...future.conditions <- base::list()
[11:01:19.192]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.192]     if (FALSE) {
[11:01:19.192]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.192]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.192]     }
[11:01:19.192]     ...future.result <- base::tryCatch({
[11:01:19.192]         base::withCallingHandlers({
[11:01:19.192]             ...future.value <- base::withVisible(base::local({
[11:01:19.192]                 2
[11:01:19.192]             }))
[11:01:19.192]             future::FutureResult(value = ...future.value$value, 
[11:01:19.192]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.192]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.192]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.192]                     ...future.globalenv.names))
[11:01:19.192]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.192]         }, condition = base::local({
[11:01:19.192]             c <- base::c
[11:01:19.192]             inherits <- base::inherits
[11:01:19.192]             invokeRestart <- base::invokeRestart
[11:01:19.192]             length <- base::length
[11:01:19.192]             list <- base::list
[11:01:19.192]             seq.int <- base::seq.int
[11:01:19.192]             signalCondition <- base::signalCondition
[11:01:19.192]             sys.calls <- base::sys.calls
[11:01:19.192]             `[[` <- base::`[[`
[11:01:19.192]             `+` <- base::`+`
[11:01:19.192]             `<<-` <- base::`<<-`
[11:01:19.192]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.192]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.192]                   3L)]
[11:01:19.192]             }
[11:01:19.192]             function(cond) {
[11:01:19.192]                 is_error <- inherits(cond, "error")
[11:01:19.192]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.192]                   NULL)
[11:01:19.192]                 if (is_error) {
[11:01:19.192]                   sessionInformation <- function() {
[11:01:19.192]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.192]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.192]                       search = base::search(), system = base::Sys.info())
[11:01:19.192]                   }
[11:01:19.192]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.192]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.192]                     cond$call), session = sessionInformation(), 
[11:01:19.192]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.192]                   signalCondition(cond)
[11:01:19.192]                 }
[11:01:19.192]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.192]                 "immediateCondition"))) {
[11:01:19.192]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.192]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.192]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.192]                   if (TRUE && !signal) {
[11:01:19.192]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.192]                     {
[11:01:19.192]                       inherits <- base::inherits
[11:01:19.192]                       invokeRestart <- base::invokeRestart
[11:01:19.192]                       is.null <- base::is.null
[11:01:19.192]                       muffled <- FALSE
[11:01:19.192]                       if (inherits(cond, "message")) {
[11:01:19.192]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.192]                         if (muffled) 
[11:01:19.192]                           invokeRestart("muffleMessage")
[11:01:19.192]                       }
[11:01:19.192]                       else if (inherits(cond, "warning")) {
[11:01:19.192]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.192]                         if (muffled) 
[11:01:19.192]                           invokeRestart("muffleWarning")
[11:01:19.192]                       }
[11:01:19.192]                       else if (inherits(cond, "condition")) {
[11:01:19.192]                         if (!is.null(pattern)) {
[11:01:19.192]                           computeRestarts <- base::computeRestarts
[11:01:19.192]                           grepl <- base::grepl
[11:01:19.192]                           restarts <- computeRestarts(cond)
[11:01:19.192]                           for (restart in restarts) {
[11:01:19.192]                             name <- restart$name
[11:01:19.192]                             if (is.null(name)) 
[11:01:19.192]                               next
[11:01:19.192]                             if (!grepl(pattern, name)) 
[11:01:19.192]                               next
[11:01:19.192]                             invokeRestart(restart)
[11:01:19.192]                             muffled <- TRUE
[11:01:19.192]                             break
[11:01:19.192]                           }
[11:01:19.192]                         }
[11:01:19.192]                       }
[11:01:19.192]                       invisible(muffled)
[11:01:19.192]                     }
[11:01:19.192]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.192]                   }
[11:01:19.192]                 }
[11:01:19.192]                 else {
[11:01:19.192]                   if (TRUE) {
[11:01:19.192]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.192]                     {
[11:01:19.192]                       inherits <- base::inherits
[11:01:19.192]                       invokeRestart <- base::invokeRestart
[11:01:19.192]                       is.null <- base::is.null
[11:01:19.192]                       muffled <- FALSE
[11:01:19.192]                       if (inherits(cond, "message")) {
[11:01:19.192]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.192]                         if (muffled) 
[11:01:19.192]                           invokeRestart("muffleMessage")
[11:01:19.192]                       }
[11:01:19.192]                       else if (inherits(cond, "warning")) {
[11:01:19.192]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.192]                         if (muffled) 
[11:01:19.192]                           invokeRestart("muffleWarning")
[11:01:19.192]                       }
[11:01:19.192]                       else if (inherits(cond, "condition")) {
[11:01:19.192]                         if (!is.null(pattern)) {
[11:01:19.192]                           computeRestarts <- base::computeRestarts
[11:01:19.192]                           grepl <- base::grepl
[11:01:19.192]                           restarts <- computeRestarts(cond)
[11:01:19.192]                           for (restart in restarts) {
[11:01:19.192]                             name <- restart$name
[11:01:19.192]                             if (is.null(name)) 
[11:01:19.192]                               next
[11:01:19.192]                             if (!grepl(pattern, name)) 
[11:01:19.192]                               next
[11:01:19.192]                             invokeRestart(restart)
[11:01:19.192]                             muffled <- TRUE
[11:01:19.192]                             break
[11:01:19.192]                           }
[11:01:19.192]                         }
[11:01:19.192]                       }
[11:01:19.192]                       invisible(muffled)
[11:01:19.192]                     }
[11:01:19.192]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.192]                   }
[11:01:19.192]                 }
[11:01:19.192]             }
[11:01:19.192]         }))
[11:01:19.192]     }, error = function(ex) {
[11:01:19.192]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.192]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.192]                 ...future.rng), started = ...future.startTime, 
[11:01:19.192]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.192]             version = "1.8"), class = "FutureResult")
[11:01:19.192]     }, finally = {
[11:01:19.192]         if (!identical(...future.workdir, getwd())) 
[11:01:19.192]             setwd(...future.workdir)
[11:01:19.192]         {
[11:01:19.192]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.192]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.192]             }
[11:01:19.192]             base::options(...future.oldOptions)
[11:01:19.192]             if (.Platform$OS.type == "windows") {
[11:01:19.192]                 old_names <- names(...future.oldEnvVars)
[11:01:19.192]                 envs <- base::Sys.getenv()
[11:01:19.192]                 names <- names(envs)
[11:01:19.192]                 common <- intersect(names, old_names)
[11:01:19.192]                 added <- setdiff(names, old_names)
[11:01:19.192]                 removed <- setdiff(old_names, names)
[11:01:19.192]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.192]                   envs[common]]
[11:01:19.192]                 NAMES <- toupper(changed)
[11:01:19.192]                 args <- list()
[11:01:19.192]                 for (kk in seq_along(NAMES)) {
[11:01:19.192]                   name <- changed[[kk]]
[11:01:19.192]                   NAME <- NAMES[[kk]]
[11:01:19.192]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.192]                     next
[11:01:19.192]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.192]                 }
[11:01:19.192]                 NAMES <- toupper(added)
[11:01:19.192]                 for (kk in seq_along(NAMES)) {
[11:01:19.192]                   name <- added[[kk]]
[11:01:19.192]                   NAME <- NAMES[[kk]]
[11:01:19.192]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.192]                     next
[11:01:19.192]                   args[[name]] <- ""
[11:01:19.192]                 }
[11:01:19.192]                 NAMES <- toupper(removed)
[11:01:19.192]                 for (kk in seq_along(NAMES)) {
[11:01:19.192]                   name <- removed[[kk]]
[11:01:19.192]                   NAME <- NAMES[[kk]]
[11:01:19.192]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.192]                     next
[11:01:19.192]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.192]                 }
[11:01:19.192]                 if (length(args) > 0) 
[11:01:19.192]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.192]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.192]             }
[11:01:19.192]             else {
[11:01:19.192]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.192]             }
[11:01:19.192]             {
[11:01:19.192]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.192]                   0L) {
[11:01:19.192]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.192]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.192]                   base::options(opts)
[11:01:19.192]                 }
[11:01:19.192]                 {
[11:01:19.192]                   {
[11:01:19.192]                     NULL
[11:01:19.192]                     RNGkind("Mersenne-Twister")
[11:01:19.192]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.192]                       inherits = FALSE)
[11:01:19.192]                   }
[11:01:19.192]                   options(future.plan = NULL)
[11:01:19.192]                   if (is.na(NA_character_)) 
[11:01:19.192]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.192]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.192]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.192]                     .init = FALSE)
[11:01:19.192]                 }
[11:01:19.192]             }
[11:01:19.192]         }
[11:01:19.192]     })
[11:01:19.192]     if (TRUE) {
[11:01:19.192]         base::sink(type = "output", split = FALSE)
[11:01:19.192]         if (TRUE) {
[11:01:19.192]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.192]         }
[11:01:19.192]         else {
[11:01:19.192]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.192]         }
[11:01:19.192]         base::close(...future.stdout)
[11:01:19.192]         ...future.stdout <- NULL
[11:01:19.192]     }
[11:01:19.192]     ...future.result$conditions <- ...future.conditions
[11:01:19.192]     ...future.result$finished <- base::Sys.time()
[11:01:19.192]     ...future.result
[11:01:19.192] }
[11:01:19.194] plan(): Setting new future strategy stack:
[11:01:19.194] List of future strategies:
[11:01:19.194] 1. sequential:
[11:01:19.194]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.194]    - tweaked: FALSE
[11:01:19.194]    - call: NULL
[11:01:19.194] plan(): nbrOfWorkers() = 1
[11:01:19.195] plan(): Setting new future strategy stack:
[11:01:19.195] List of future strategies:
[11:01:19.195] 1. sequential:
[11:01:19.195]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.195]    - tweaked: FALSE
[11:01:19.195]    - call: future::plan("sequential")
[11:01:19.195] plan(): nbrOfWorkers() = 1
[11:01:19.195] SequentialFuture started (and completed)
[11:01:19.196] - Launch lazy future ... done
[11:01:19.196] run() for ‘SequentialFuture’ ... done
> 
> message("*** %<-% to environment ... DONE")
*** %<-% to environment ... DONE
> 
> source("incl/end.R")
[11:01:19.196] plan(): Setting new future strategy stack:
[11:01:19.196] List of future strategies:
[11:01:19.196] 1. FutureStrategy:
[11:01:19.196]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.196]    - tweaked: FALSE
[11:01:19.196]    - call: future::plan(oplan)
[11:01:19.207] plan(): nbrOfWorkers() = 1
> 
