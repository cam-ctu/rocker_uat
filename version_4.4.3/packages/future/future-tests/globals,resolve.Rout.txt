
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:44.865] plan(): Setting new future strategy stack:
[11:01:44.865] List of future strategies:
[11:01:44.865] 1. sequential:
[11:01:44.865]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:44.865]    - tweaked: FALSE
[11:01:44.865]    - call: future::plan("sequential")
[11:01:44.878] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[11:01:44.897] plan(): Setting new future strategy stack:
[11:01:44.897] List of future strategies:
[11:01:44.897] 1. multisession:
[11:01:44.897]    - args: function (..., workers = 2L, envir = parent.frame())
[11:01:44.897]    - tweaked: TRUE
[11:01:44.897]    - call: plan(multisession, workers = 2L)
[11:01:44.908] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:01:44.908] multisession:
[11:01:44.908] - args: function (..., workers = 2L, envir = parent.frame())
[11:01:44.908] - tweaked: TRUE
[11:01:44.908] - call: plan(multisession, workers = 2L)
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:44.910] getGlobalsAndPackages() ...
[11:01:44.910] Not searching for globals
[11:01:44.910] - globals: [0] <none>
[11:01:44.910] getGlobalsAndPackages() ... DONE
[11:01:45.375] Packages needed by the future expression (n = 0): <none>
[11:01:45.375] Packages needed by future strategies (n = 0): <none>
[11:01:45.376] {
[11:01:45.376]     {
[11:01:45.376]         {
[11:01:45.376]             ...future.startTime <- base::Sys.time()
[11:01:45.376]             {
[11:01:45.376]                 {
[11:01:45.376]                   {
[11:01:45.376]                     {
[11:01:45.376]                       base::local({
[11:01:45.376]                         has_future <- base::requireNamespace("future", 
[11:01:45.376]                           quietly = TRUE)
[11:01:45.376]                         if (has_future) {
[11:01:45.376]                           ns <- base::getNamespace("future")
[11:01:45.376]                           version <- ns[[".package"]][["version"]]
[11:01:45.376]                           if (is.null(version)) 
[11:01:45.376]                             version <- utils::packageVersion("future")
[11:01:45.376]                         }
[11:01:45.376]                         else {
[11:01:45.376]                           version <- NULL
[11:01:45.376]                         }
[11:01:45.376]                         if (!has_future || version < "1.8.0") {
[11:01:45.376]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:45.376]                             "", base::R.version$version.string), 
[11:01:45.376]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:45.376]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:45.376]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:45.376]                               "release", "version")], collapse = " "), 
[11:01:45.376]                             hostname = base::Sys.info()[["nodename"]])
[11:01:45.376]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:45.376]                             info)
[11:01:45.376]                           info <- base::paste(info, collapse = "; ")
[11:01:45.376]                           if (!has_future) {
[11:01:45.376]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:45.376]                               info)
[11:01:45.376]                           }
[11:01:45.376]                           else {
[11:01:45.376]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:45.376]                               info, version)
[11:01:45.376]                           }
[11:01:45.376]                           base::stop(msg)
[11:01:45.376]                         }
[11:01:45.376]                       })
[11:01:45.376]                     }
[11:01:45.376]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:45.376]                     base::options(mc.cores = 1L)
[11:01:45.376]                   }
[11:01:45.376]                   ...future.strategy.old <- future::plan("list")
[11:01:45.376]                   options(future.plan = NULL)
[11:01:45.376]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.376]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:45.376]                 }
[11:01:45.376]                 ...future.workdir <- getwd()
[11:01:45.376]             }
[11:01:45.376]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:45.376]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:45.376]         }
[11:01:45.376]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:45.376]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:45.376]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:45.376]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:45.376]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:45.376]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:45.376]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:45.376]             base::names(...future.oldOptions))
[11:01:45.376]     }
[11:01:45.376]     if (FALSE) {
[11:01:45.376]     }
[11:01:45.376]     else {
[11:01:45.376]         if (TRUE) {
[11:01:45.376]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:45.376]                 open = "w")
[11:01:45.376]         }
[11:01:45.376]         else {
[11:01:45.376]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:45.376]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:45.376]         }
[11:01:45.376]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:45.376]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:45.376]             base::sink(type = "output", split = FALSE)
[11:01:45.376]             base::close(...future.stdout)
[11:01:45.376]         }, add = TRUE)
[11:01:45.376]     }
[11:01:45.376]     ...future.frame <- base::sys.nframe()
[11:01:45.376]     ...future.conditions <- base::list()
[11:01:45.376]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:45.376]     if (FALSE) {
[11:01:45.376]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:45.376]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:45.376]     }
[11:01:45.376]     ...future.result <- base::tryCatch({
[11:01:45.376]         base::withCallingHandlers({
[11:01:45.376]             ...future.value <- base::withVisible(base::local({
[11:01:45.376]                 ...future.makeSendCondition <- base::local({
[11:01:45.376]                   sendCondition <- NULL
[11:01:45.376]                   function(frame = 1L) {
[11:01:45.376]                     if (is.function(sendCondition)) 
[11:01:45.376]                       return(sendCondition)
[11:01:45.376]                     ns <- getNamespace("parallel")
[11:01:45.376]                     if (exists("sendData", mode = "function", 
[11:01:45.376]                       envir = ns)) {
[11:01:45.376]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:45.376]                         envir = ns)
[11:01:45.376]                       envir <- sys.frame(frame)
[11:01:45.376]                       master <- NULL
[11:01:45.376]                       while (!identical(envir, .GlobalEnv) && 
[11:01:45.376]                         !identical(envir, emptyenv())) {
[11:01:45.376]                         if (exists("master", mode = "list", envir = envir, 
[11:01:45.376]                           inherits = FALSE)) {
[11:01:45.376]                           master <- get("master", mode = "list", 
[11:01:45.376]                             envir = envir, inherits = FALSE)
[11:01:45.376]                           if (inherits(master, c("SOCKnode", 
[11:01:45.376]                             "SOCK0node"))) {
[11:01:45.376]                             sendCondition <<- function(cond) {
[11:01:45.376]                               data <- list(type = "VALUE", value = cond, 
[11:01:45.376]                                 success = TRUE)
[11:01:45.376]                               parallel_sendData(master, data)
[11:01:45.376]                             }
[11:01:45.376]                             return(sendCondition)
[11:01:45.376]                           }
[11:01:45.376]                         }
[11:01:45.376]                         frame <- frame + 1L
[11:01:45.376]                         envir <- sys.frame(frame)
[11:01:45.376]                       }
[11:01:45.376]                     }
[11:01:45.376]                     sendCondition <<- function(cond) NULL
[11:01:45.376]                   }
[11:01:45.376]                 })
[11:01:45.376]                 withCallingHandlers({
[11:01:45.376]                   NA
[11:01:45.376]                 }, immediateCondition = function(cond) {
[11:01:45.376]                   sendCondition <- ...future.makeSendCondition()
[11:01:45.376]                   sendCondition(cond)
[11:01:45.376]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.376]                   {
[11:01:45.376]                     inherits <- base::inherits
[11:01:45.376]                     invokeRestart <- base::invokeRestart
[11:01:45.376]                     is.null <- base::is.null
[11:01:45.376]                     muffled <- FALSE
[11:01:45.376]                     if (inherits(cond, "message")) {
[11:01:45.376]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:45.376]                       if (muffled) 
[11:01:45.376]                         invokeRestart("muffleMessage")
[11:01:45.376]                     }
[11:01:45.376]                     else if (inherits(cond, "warning")) {
[11:01:45.376]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:45.376]                       if (muffled) 
[11:01:45.376]                         invokeRestart("muffleWarning")
[11:01:45.376]                     }
[11:01:45.376]                     else if (inherits(cond, "condition")) {
[11:01:45.376]                       if (!is.null(pattern)) {
[11:01:45.376]                         computeRestarts <- base::computeRestarts
[11:01:45.376]                         grepl <- base::grepl
[11:01:45.376]                         restarts <- computeRestarts(cond)
[11:01:45.376]                         for (restart in restarts) {
[11:01:45.376]                           name <- restart$name
[11:01:45.376]                           if (is.null(name)) 
[11:01:45.376]                             next
[11:01:45.376]                           if (!grepl(pattern, name)) 
[11:01:45.376]                             next
[11:01:45.376]                           invokeRestart(restart)
[11:01:45.376]                           muffled <- TRUE
[11:01:45.376]                           break
[11:01:45.376]                         }
[11:01:45.376]                       }
[11:01:45.376]                     }
[11:01:45.376]                     invisible(muffled)
[11:01:45.376]                   }
[11:01:45.376]                   muffleCondition(cond)
[11:01:45.376]                 })
[11:01:45.376]             }))
[11:01:45.376]             future::FutureResult(value = ...future.value$value, 
[11:01:45.376]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.376]                   ...future.rng), globalenv = if (FALSE) 
[11:01:45.376]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:45.376]                     ...future.globalenv.names))
[11:01:45.376]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:45.376]         }, condition = base::local({
[11:01:45.376]             c <- base::c
[11:01:45.376]             inherits <- base::inherits
[11:01:45.376]             invokeRestart <- base::invokeRestart
[11:01:45.376]             length <- base::length
[11:01:45.376]             list <- base::list
[11:01:45.376]             seq.int <- base::seq.int
[11:01:45.376]             signalCondition <- base::signalCondition
[11:01:45.376]             sys.calls <- base::sys.calls
[11:01:45.376]             `[[` <- base::`[[`
[11:01:45.376]             `+` <- base::`+`
[11:01:45.376]             `<<-` <- base::`<<-`
[11:01:45.376]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:45.376]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:45.376]                   3L)]
[11:01:45.376]             }
[11:01:45.376]             function(cond) {
[11:01:45.376]                 is_error <- inherits(cond, "error")
[11:01:45.376]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:45.376]                   NULL)
[11:01:45.376]                 if (is_error) {
[11:01:45.376]                   sessionInformation <- function() {
[11:01:45.376]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:45.376]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:45.376]                       search = base::search(), system = base::Sys.info())
[11:01:45.376]                   }
[11:01:45.376]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.376]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:45.376]                     cond$call), session = sessionInformation(), 
[11:01:45.376]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:45.376]                   signalCondition(cond)
[11:01:45.376]                 }
[11:01:45.376]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:45.376]                 "immediateCondition"))) {
[11:01:45.376]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:45.376]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.376]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:45.376]                   if (TRUE && !signal) {
[11:01:45.376]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.376]                     {
[11:01:45.376]                       inherits <- base::inherits
[11:01:45.376]                       invokeRestart <- base::invokeRestart
[11:01:45.376]                       is.null <- base::is.null
[11:01:45.376]                       muffled <- FALSE
[11:01:45.376]                       if (inherits(cond, "message")) {
[11:01:45.376]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.376]                         if (muffled) 
[11:01:45.376]                           invokeRestart("muffleMessage")
[11:01:45.376]                       }
[11:01:45.376]                       else if (inherits(cond, "warning")) {
[11:01:45.376]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.376]                         if (muffled) 
[11:01:45.376]                           invokeRestart("muffleWarning")
[11:01:45.376]                       }
[11:01:45.376]                       else if (inherits(cond, "condition")) {
[11:01:45.376]                         if (!is.null(pattern)) {
[11:01:45.376]                           computeRestarts <- base::computeRestarts
[11:01:45.376]                           grepl <- base::grepl
[11:01:45.376]                           restarts <- computeRestarts(cond)
[11:01:45.376]                           for (restart in restarts) {
[11:01:45.376]                             name <- restart$name
[11:01:45.376]                             if (is.null(name)) 
[11:01:45.376]                               next
[11:01:45.376]                             if (!grepl(pattern, name)) 
[11:01:45.376]                               next
[11:01:45.376]                             invokeRestart(restart)
[11:01:45.376]                             muffled <- TRUE
[11:01:45.376]                             break
[11:01:45.376]                           }
[11:01:45.376]                         }
[11:01:45.376]                       }
[11:01:45.376]                       invisible(muffled)
[11:01:45.376]                     }
[11:01:45.376]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.376]                   }
[11:01:45.376]                 }
[11:01:45.376]                 else {
[11:01:45.376]                   if (TRUE) {
[11:01:45.376]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.376]                     {
[11:01:45.376]                       inherits <- base::inherits
[11:01:45.376]                       invokeRestart <- base::invokeRestart
[11:01:45.376]                       is.null <- base::is.null
[11:01:45.376]                       muffled <- FALSE
[11:01:45.376]                       if (inherits(cond, "message")) {
[11:01:45.376]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.376]                         if (muffled) 
[11:01:45.376]                           invokeRestart("muffleMessage")
[11:01:45.376]                       }
[11:01:45.376]                       else if (inherits(cond, "warning")) {
[11:01:45.376]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.376]                         if (muffled) 
[11:01:45.376]                           invokeRestart("muffleWarning")
[11:01:45.376]                       }
[11:01:45.376]                       else if (inherits(cond, "condition")) {
[11:01:45.376]                         if (!is.null(pattern)) {
[11:01:45.376]                           computeRestarts <- base::computeRestarts
[11:01:45.376]                           grepl <- base::grepl
[11:01:45.376]                           restarts <- computeRestarts(cond)
[11:01:45.376]                           for (restart in restarts) {
[11:01:45.376]                             name <- restart$name
[11:01:45.376]                             if (is.null(name)) 
[11:01:45.376]                               next
[11:01:45.376]                             if (!grepl(pattern, name)) 
[11:01:45.376]                               next
[11:01:45.376]                             invokeRestart(restart)
[11:01:45.376]                             muffled <- TRUE
[11:01:45.376]                             break
[11:01:45.376]                           }
[11:01:45.376]                         }
[11:01:45.376]                       }
[11:01:45.376]                       invisible(muffled)
[11:01:45.376]                     }
[11:01:45.376]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.376]                   }
[11:01:45.376]                 }
[11:01:45.376]             }
[11:01:45.376]         }))
[11:01:45.376]     }, error = function(ex) {
[11:01:45.376]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:45.376]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.376]                 ...future.rng), started = ...future.startTime, 
[11:01:45.376]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:45.376]             version = "1.8"), class = "FutureResult")
[11:01:45.376]     }, finally = {
[11:01:45.376]         if (!identical(...future.workdir, getwd())) 
[11:01:45.376]             setwd(...future.workdir)
[11:01:45.376]         {
[11:01:45.376]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:45.376]                 ...future.oldOptions$nwarnings <- NULL
[11:01:45.376]             }
[11:01:45.376]             base::options(...future.oldOptions)
[11:01:45.376]             if (.Platform$OS.type == "windows") {
[11:01:45.376]                 old_names <- names(...future.oldEnvVars)
[11:01:45.376]                 envs <- base::Sys.getenv()
[11:01:45.376]                 names <- names(envs)
[11:01:45.376]                 common <- intersect(names, old_names)
[11:01:45.376]                 added <- setdiff(names, old_names)
[11:01:45.376]                 removed <- setdiff(old_names, names)
[11:01:45.376]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:45.376]                   envs[common]]
[11:01:45.376]                 NAMES <- toupper(changed)
[11:01:45.376]                 args <- list()
[11:01:45.376]                 for (kk in seq_along(NAMES)) {
[11:01:45.376]                   name <- changed[[kk]]
[11:01:45.376]                   NAME <- NAMES[[kk]]
[11:01:45.376]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.376]                     next
[11:01:45.376]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.376]                 }
[11:01:45.376]                 NAMES <- toupper(added)
[11:01:45.376]                 for (kk in seq_along(NAMES)) {
[11:01:45.376]                   name <- added[[kk]]
[11:01:45.376]                   NAME <- NAMES[[kk]]
[11:01:45.376]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.376]                     next
[11:01:45.376]                   args[[name]] <- ""
[11:01:45.376]                 }
[11:01:45.376]                 NAMES <- toupper(removed)
[11:01:45.376]                 for (kk in seq_along(NAMES)) {
[11:01:45.376]                   name <- removed[[kk]]
[11:01:45.376]                   NAME <- NAMES[[kk]]
[11:01:45.376]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.376]                     next
[11:01:45.376]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.376]                 }
[11:01:45.376]                 if (length(args) > 0) 
[11:01:45.376]                   base::do.call(base::Sys.setenv, args = args)
[11:01:45.376]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:45.376]             }
[11:01:45.376]             else {
[11:01:45.376]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:45.376]             }
[11:01:45.376]             {
[11:01:45.376]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:45.376]                   0L) {
[11:01:45.376]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:45.376]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:45.376]                   base::options(opts)
[11:01:45.376]                 }
[11:01:45.376]                 {
[11:01:45.376]                   {
[11:01:45.376]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:45.376]                     NULL
[11:01:45.376]                   }
[11:01:45.376]                   options(future.plan = NULL)
[11:01:45.376]                   if (is.na(NA_character_)) 
[11:01:45.376]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.376]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:45.376]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:45.376]                     .init = FALSE)
[11:01:45.376]                 }
[11:01:45.376]             }
[11:01:45.376]         }
[11:01:45.376]     })
[11:01:45.376]     if (TRUE) {
[11:01:45.376]         base::sink(type = "output", split = FALSE)
[11:01:45.376]         if (TRUE) {
[11:01:45.376]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:45.376]         }
[11:01:45.376]         else {
[11:01:45.376]             ...future.result["stdout"] <- base::list(NULL)
[11:01:45.376]         }
[11:01:45.376]         base::close(...future.stdout)
[11:01:45.376]         ...future.stdout <- NULL
[11:01:45.376]     }
[11:01:45.376]     ...future.result$conditions <- ...future.conditions
[11:01:45.376]     ...future.result$finished <- base::Sys.time()
[11:01:45.376]     ...future.result
[11:01:45.376] }
[11:01:45.426] MultisessionFuture started
[11:01:45.427] result() for ClusterFuture ...
[11:01:45.427] receiveMessageFromWorker() for ClusterFuture ...
[11:01:45.427] - Validating connection of MultisessionFuture
[11:01:45.457] - received message: FutureResult
[11:01:45.457] - Received FutureResult
[11:01:45.459] - Erased future from FutureRegistry
[11:01:45.460] result() for ClusterFuture ...
[11:01:45.460] - result already collected: FutureResult
[11:01:45.460] result() for ClusterFuture ... done
[11:01:45.460] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:45.460] result() for ClusterFuture ... done
[11:01:45.460] result() for ClusterFuture ...
[11:01:45.460] - result already collected: FutureResult
[11:01:45.460] result() for ClusterFuture ... done
[11:01:45.460] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:01:45.460] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:45.462] getGlobalsAndPackages() ...
[11:01:45.462] Searching for globals...
[11:01:45.464] - globals found: [1] ‘{’
[11:01:45.464] Searching for globals ... DONE
[11:01:45.465] Resolving globals: TRUE
[11:01:45.465] Resolving any globals that are futures ...
[11:01:45.465] - globals: [1] ‘{’
[11:01:45.465] Resolving any globals that are futures ... DONE
[11:01:45.465] 
[11:01:45.465] 
[11:01:45.465] getGlobalsAndPackages() ... DONE
[11:01:45.466] run() for ‘Future’ ...
[11:01:45.466] - state: ‘created’
[11:01:45.466] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:45.479] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:45.479] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:45.479]   - Field: ‘node’
[11:01:45.479]   - Field: ‘label’
[11:01:45.480]   - Field: ‘local’
[11:01:45.480]   - Field: ‘owner’
[11:01:45.480]   - Field: ‘envir’
[11:01:45.480]   - Field: ‘workers’
[11:01:45.480]   - Field: ‘packages’
[11:01:45.480]   - Field: ‘gc’
[11:01:45.480]   - Field: ‘conditions’
[11:01:45.480]   - Field: ‘persistent’
[11:01:45.480]   - Field: ‘expr’
[11:01:45.480]   - Field: ‘uuid’
[11:01:45.480]   - Field: ‘seed’
[11:01:45.480]   - Field: ‘version’
[11:01:45.481]   - Field: ‘result’
[11:01:45.481]   - Field: ‘asynchronous’
[11:01:45.481]   - Field: ‘calls’
[11:01:45.481]   - Field: ‘globals’
[11:01:45.481]   - Field: ‘stdout’
[11:01:45.481]   - Field: ‘earlySignal’
[11:01:45.481]   - Field: ‘lazy’
[11:01:45.481]   - Field: ‘state’
[11:01:45.481] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:45.481] - Launch lazy future ...
[11:01:45.482] Packages needed by the future expression (n = 0): <none>
[11:01:45.482] Packages needed by future strategies (n = 0): <none>
[11:01:45.482] {
[11:01:45.482]     {
[11:01:45.482]         {
[11:01:45.482]             ...future.startTime <- base::Sys.time()
[11:01:45.482]             {
[11:01:45.482]                 {
[11:01:45.482]                   {
[11:01:45.482]                     {
[11:01:45.482]                       base::local({
[11:01:45.482]                         has_future <- base::requireNamespace("future", 
[11:01:45.482]                           quietly = TRUE)
[11:01:45.482]                         if (has_future) {
[11:01:45.482]                           ns <- base::getNamespace("future")
[11:01:45.482]                           version <- ns[[".package"]][["version"]]
[11:01:45.482]                           if (is.null(version)) 
[11:01:45.482]                             version <- utils::packageVersion("future")
[11:01:45.482]                         }
[11:01:45.482]                         else {
[11:01:45.482]                           version <- NULL
[11:01:45.482]                         }
[11:01:45.482]                         if (!has_future || version < "1.8.0") {
[11:01:45.482]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:45.482]                             "", base::R.version$version.string), 
[11:01:45.482]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:45.482]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:45.482]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:45.482]                               "release", "version")], collapse = " "), 
[11:01:45.482]                             hostname = base::Sys.info()[["nodename"]])
[11:01:45.482]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:45.482]                             info)
[11:01:45.482]                           info <- base::paste(info, collapse = "; ")
[11:01:45.482]                           if (!has_future) {
[11:01:45.482]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:45.482]                               info)
[11:01:45.482]                           }
[11:01:45.482]                           else {
[11:01:45.482]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:45.482]                               info, version)
[11:01:45.482]                           }
[11:01:45.482]                           base::stop(msg)
[11:01:45.482]                         }
[11:01:45.482]                       })
[11:01:45.482]                     }
[11:01:45.482]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:45.482]                     base::options(mc.cores = 1L)
[11:01:45.482]                   }
[11:01:45.482]                   ...future.strategy.old <- future::plan("list")
[11:01:45.482]                   options(future.plan = NULL)
[11:01:45.482]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.482]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:45.482]                 }
[11:01:45.482]                 ...future.workdir <- getwd()
[11:01:45.482]             }
[11:01:45.482]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:45.482]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:45.482]         }
[11:01:45.482]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:45.482]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:45.482]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:45.482]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:45.482]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:45.482]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:45.482]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:45.482]             base::names(...future.oldOptions))
[11:01:45.482]     }
[11:01:45.482]     if (FALSE) {
[11:01:45.482]     }
[11:01:45.482]     else {
[11:01:45.482]         if (TRUE) {
[11:01:45.482]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:45.482]                 open = "w")
[11:01:45.482]         }
[11:01:45.482]         else {
[11:01:45.482]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:45.482]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:45.482]         }
[11:01:45.482]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:45.482]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:45.482]             base::sink(type = "output", split = FALSE)
[11:01:45.482]             base::close(...future.stdout)
[11:01:45.482]         }, add = TRUE)
[11:01:45.482]     }
[11:01:45.482]     ...future.frame <- base::sys.nframe()
[11:01:45.482]     ...future.conditions <- base::list()
[11:01:45.482]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:45.482]     if (FALSE) {
[11:01:45.482]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:45.482]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:45.482]     }
[11:01:45.482]     ...future.result <- base::tryCatch({
[11:01:45.482]         base::withCallingHandlers({
[11:01:45.482]             ...future.value <- base::withVisible(base::local({
[11:01:45.482]                 ...future.makeSendCondition <- base::local({
[11:01:45.482]                   sendCondition <- NULL
[11:01:45.482]                   function(frame = 1L) {
[11:01:45.482]                     if (is.function(sendCondition)) 
[11:01:45.482]                       return(sendCondition)
[11:01:45.482]                     ns <- getNamespace("parallel")
[11:01:45.482]                     if (exists("sendData", mode = "function", 
[11:01:45.482]                       envir = ns)) {
[11:01:45.482]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:45.482]                         envir = ns)
[11:01:45.482]                       envir <- sys.frame(frame)
[11:01:45.482]                       master <- NULL
[11:01:45.482]                       while (!identical(envir, .GlobalEnv) && 
[11:01:45.482]                         !identical(envir, emptyenv())) {
[11:01:45.482]                         if (exists("master", mode = "list", envir = envir, 
[11:01:45.482]                           inherits = FALSE)) {
[11:01:45.482]                           master <- get("master", mode = "list", 
[11:01:45.482]                             envir = envir, inherits = FALSE)
[11:01:45.482]                           if (inherits(master, c("SOCKnode", 
[11:01:45.482]                             "SOCK0node"))) {
[11:01:45.482]                             sendCondition <<- function(cond) {
[11:01:45.482]                               data <- list(type = "VALUE", value = cond, 
[11:01:45.482]                                 success = TRUE)
[11:01:45.482]                               parallel_sendData(master, data)
[11:01:45.482]                             }
[11:01:45.482]                             return(sendCondition)
[11:01:45.482]                           }
[11:01:45.482]                         }
[11:01:45.482]                         frame <- frame + 1L
[11:01:45.482]                         envir <- sys.frame(frame)
[11:01:45.482]                       }
[11:01:45.482]                     }
[11:01:45.482]                     sendCondition <<- function(cond) NULL
[11:01:45.482]                   }
[11:01:45.482]                 })
[11:01:45.482]                 withCallingHandlers({
[11:01:45.482]                   {
[11:01:45.482]                     5
[11:01:45.482]                   }
[11:01:45.482]                 }, immediateCondition = function(cond) {
[11:01:45.482]                   sendCondition <- ...future.makeSendCondition()
[11:01:45.482]                   sendCondition(cond)
[11:01:45.482]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.482]                   {
[11:01:45.482]                     inherits <- base::inherits
[11:01:45.482]                     invokeRestart <- base::invokeRestart
[11:01:45.482]                     is.null <- base::is.null
[11:01:45.482]                     muffled <- FALSE
[11:01:45.482]                     if (inherits(cond, "message")) {
[11:01:45.482]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:45.482]                       if (muffled) 
[11:01:45.482]                         invokeRestart("muffleMessage")
[11:01:45.482]                     }
[11:01:45.482]                     else if (inherits(cond, "warning")) {
[11:01:45.482]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:45.482]                       if (muffled) 
[11:01:45.482]                         invokeRestart("muffleWarning")
[11:01:45.482]                     }
[11:01:45.482]                     else if (inherits(cond, "condition")) {
[11:01:45.482]                       if (!is.null(pattern)) {
[11:01:45.482]                         computeRestarts <- base::computeRestarts
[11:01:45.482]                         grepl <- base::grepl
[11:01:45.482]                         restarts <- computeRestarts(cond)
[11:01:45.482]                         for (restart in restarts) {
[11:01:45.482]                           name <- restart$name
[11:01:45.482]                           if (is.null(name)) 
[11:01:45.482]                             next
[11:01:45.482]                           if (!grepl(pattern, name)) 
[11:01:45.482]                             next
[11:01:45.482]                           invokeRestart(restart)
[11:01:45.482]                           muffled <- TRUE
[11:01:45.482]                           break
[11:01:45.482]                         }
[11:01:45.482]                       }
[11:01:45.482]                     }
[11:01:45.482]                     invisible(muffled)
[11:01:45.482]                   }
[11:01:45.482]                   muffleCondition(cond)
[11:01:45.482]                 })
[11:01:45.482]             }))
[11:01:45.482]             future::FutureResult(value = ...future.value$value, 
[11:01:45.482]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.482]                   ...future.rng), globalenv = if (FALSE) 
[11:01:45.482]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:45.482]                     ...future.globalenv.names))
[11:01:45.482]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:45.482]         }, condition = base::local({
[11:01:45.482]             c <- base::c
[11:01:45.482]             inherits <- base::inherits
[11:01:45.482]             invokeRestart <- base::invokeRestart
[11:01:45.482]             length <- base::length
[11:01:45.482]             list <- base::list
[11:01:45.482]             seq.int <- base::seq.int
[11:01:45.482]             signalCondition <- base::signalCondition
[11:01:45.482]             sys.calls <- base::sys.calls
[11:01:45.482]             `[[` <- base::`[[`
[11:01:45.482]             `+` <- base::`+`
[11:01:45.482]             `<<-` <- base::`<<-`
[11:01:45.482]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:45.482]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:45.482]                   3L)]
[11:01:45.482]             }
[11:01:45.482]             function(cond) {
[11:01:45.482]                 is_error <- inherits(cond, "error")
[11:01:45.482]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:45.482]                   NULL)
[11:01:45.482]                 if (is_error) {
[11:01:45.482]                   sessionInformation <- function() {
[11:01:45.482]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:45.482]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:45.482]                       search = base::search(), system = base::Sys.info())
[11:01:45.482]                   }
[11:01:45.482]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.482]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:45.482]                     cond$call), session = sessionInformation(), 
[11:01:45.482]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:45.482]                   signalCondition(cond)
[11:01:45.482]                 }
[11:01:45.482]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:45.482]                 "immediateCondition"))) {
[11:01:45.482]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:45.482]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.482]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:45.482]                   if (TRUE && !signal) {
[11:01:45.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.482]                     {
[11:01:45.482]                       inherits <- base::inherits
[11:01:45.482]                       invokeRestart <- base::invokeRestart
[11:01:45.482]                       is.null <- base::is.null
[11:01:45.482]                       muffled <- FALSE
[11:01:45.482]                       if (inherits(cond, "message")) {
[11:01:45.482]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.482]                         if (muffled) 
[11:01:45.482]                           invokeRestart("muffleMessage")
[11:01:45.482]                       }
[11:01:45.482]                       else if (inherits(cond, "warning")) {
[11:01:45.482]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.482]                         if (muffled) 
[11:01:45.482]                           invokeRestart("muffleWarning")
[11:01:45.482]                       }
[11:01:45.482]                       else if (inherits(cond, "condition")) {
[11:01:45.482]                         if (!is.null(pattern)) {
[11:01:45.482]                           computeRestarts <- base::computeRestarts
[11:01:45.482]                           grepl <- base::grepl
[11:01:45.482]                           restarts <- computeRestarts(cond)
[11:01:45.482]                           for (restart in restarts) {
[11:01:45.482]                             name <- restart$name
[11:01:45.482]                             if (is.null(name)) 
[11:01:45.482]                               next
[11:01:45.482]                             if (!grepl(pattern, name)) 
[11:01:45.482]                               next
[11:01:45.482]                             invokeRestart(restart)
[11:01:45.482]                             muffled <- TRUE
[11:01:45.482]                             break
[11:01:45.482]                           }
[11:01:45.482]                         }
[11:01:45.482]                       }
[11:01:45.482]                       invisible(muffled)
[11:01:45.482]                     }
[11:01:45.482]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.482]                   }
[11:01:45.482]                 }
[11:01:45.482]                 else {
[11:01:45.482]                   if (TRUE) {
[11:01:45.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.482]                     {
[11:01:45.482]                       inherits <- base::inherits
[11:01:45.482]                       invokeRestart <- base::invokeRestart
[11:01:45.482]                       is.null <- base::is.null
[11:01:45.482]                       muffled <- FALSE
[11:01:45.482]                       if (inherits(cond, "message")) {
[11:01:45.482]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.482]                         if (muffled) 
[11:01:45.482]                           invokeRestart("muffleMessage")
[11:01:45.482]                       }
[11:01:45.482]                       else if (inherits(cond, "warning")) {
[11:01:45.482]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.482]                         if (muffled) 
[11:01:45.482]                           invokeRestart("muffleWarning")
[11:01:45.482]                       }
[11:01:45.482]                       else if (inherits(cond, "condition")) {
[11:01:45.482]                         if (!is.null(pattern)) {
[11:01:45.482]                           computeRestarts <- base::computeRestarts
[11:01:45.482]                           grepl <- base::grepl
[11:01:45.482]                           restarts <- computeRestarts(cond)
[11:01:45.482]                           for (restart in restarts) {
[11:01:45.482]                             name <- restart$name
[11:01:45.482]                             if (is.null(name)) 
[11:01:45.482]                               next
[11:01:45.482]                             if (!grepl(pattern, name)) 
[11:01:45.482]                               next
[11:01:45.482]                             invokeRestart(restart)
[11:01:45.482]                             muffled <- TRUE
[11:01:45.482]                             break
[11:01:45.482]                           }
[11:01:45.482]                         }
[11:01:45.482]                       }
[11:01:45.482]                       invisible(muffled)
[11:01:45.482]                     }
[11:01:45.482]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.482]                   }
[11:01:45.482]                 }
[11:01:45.482]             }
[11:01:45.482]         }))
[11:01:45.482]     }, error = function(ex) {
[11:01:45.482]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:45.482]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.482]                 ...future.rng), started = ...future.startTime, 
[11:01:45.482]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:45.482]             version = "1.8"), class = "FutureResult")
[11:01:45.482]     }, finally = {
[11:01:45.482]         if (!identical(...future.workdir, getwd())) 
[11:01:45.482]             setwd(...future.workdir)
[11:01:45.482]         {
[11:01:45.482]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:45.482]                 ...future.oldOptions$nwarnings <- NULL
[11:01:45.482]             }
[11:01:45.482]             base::options(...future.oldOptions)
[11:01:45.482]             if (.Platform$OS.type == "windows") {
[11:01:45.482]                 old_names <- names(...future.oldEnvVars)
[11:01:45.482]                 envs <- base::Sys.getenv()
[11:01:45.482]                 names <- names(envs)
[11:01:45.482]                 common <- intersect(names, old_names)
[11:01:45.482]                 added <- setdiff(names, old_names)
[11:01:45.482]                 removed <- setdiff(old_names, names)
[11:01:45.482]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:45.482]                   envs[common]]
[11:01:45.482]                 NAMES <- toupper(changed)
[11:01:45.482]                 args <- list()
[11:01:45.482]                 for (kk in seq_along(NAMES)) {
[11:01:45.482]                   name <- changed[[kk]]
[11:01:45.482]                   NAME <- NAMES[[kk]]
[11:01:45.482]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.482]                     next
[11:01:45.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.482]                 }
[11:01:45.482]                 NAMES <- toupper(added)
[11:01:45.482]                 for (kk in seq_along(NAMES)) {
[11:01:45.482]                   name <- added[[kk]]
[11:01:45.482]                   NAME <- NAMES[[kk]]
[11:01:45.482]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.482]                     next
[11:01:45.482]                   args[[name]] <- ""
[11:01:45.482]                 }
[11:01:45.482]                 NAMES <- toupper(removed)
[11:01:45.482]                 for (kk in seq_along(NAMES)) {
[11:01:45.482]                   name <- removed[[kk]]
[11:01:45.482]                   NAME <- NAMES[[kk]]
[11:01:45.482]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.482]                     next
[11:01:45.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.482]                 }
[11:01:45.482]                 if (length(args) > 0) 
[11:01:45.482]                   base::do.call(base::Sys.setenv, args = args)
[11:01:45.482]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:45.482]             }
[11:01:45.482]             else {
[11:01:45.482]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:45.482]             }
[11:01:45.482]             {
[11:01:45.482]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:45.482]                   0L) {
[11:01:45.482]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:45.482]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:45.482]                   base::options(opts)
[11:01:45.482]                 }
[11:01:45.482]                 {
[11:01:45.482]                   {
[11:01:45.482]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:45.482]                     NULL
[11:01:45.482]                   }
[11:01:45.482]                   options(future.plan = NULL)
[11:01:45.482]                   if (is.na(NA_character_)) 
[11:01:45.482]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.482]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:45.482]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:45.482]                     .init = FALSE)
[11:01:45.482]                 }
[11:01:45.482]             }
[11:01:45.482]         }
[11:01:45.482]     })
[11:01:45.482]     if (TRUE) {
[11:01:45.482]         base::sink(type = "output", split = FALSE)
[11:01:45.482]         if (TRUE) {
[11:01:45.482]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:45.482]         }
[11:01:45.482]         else {
[11:01:45.482]             ...future.result["stdout"] <- base::list(NULL)
[11:01:45.482]         }
[11:01:45.482]         base::close(...future.stdout)
[11:01:45.482]         ...future.stdout <- NULL
[11:01:45.482]     }
[11:01:45.482]     ...future.result$conditions <- ...future.conditions
[11:01:45.482]     ...future.result$finished <- base::Sys.time()
[11:01:45.482]     ...future.result
[11:01:45.482] }
[11:01:45.485] MultisessionFuture started
[11:01:45.485] - Launch lazy future ... done
[11:01:45.486] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:45.486] getGlobalsAndPackages() ...
[11:01:45.486] Searching for globals...
[11:01:45.487] - globals found: [1] ‘{’
[11:01:45.487] Searching for globals ... DONE
[11:01:45.487] Resolving globals: TRUE
[11:01:45.487] Resolving any globals that are futures ...
[11:01:45.487] - globals: [1] ‘{’
[11:01:45.488] Resolving any globals that are futures ... DONE
[11:01:45.488] 
[11:01:45.488] 
[11:01:45.488] getGlobalsAndPackages() ... DONE
[11:01:45.488] run() for ‘Future’ ...
[11:01:45.489] - state: ‘created’
[11:01:45.489] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:45.502] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:45.502] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:45.502]   - Field: ‘node’
[11:01:45.502]   - Field: ‘label’
[11:01:45.503]   - Field: ‘local’
[11:01:45.503]   - Field: ‘owner’
[11:01:45.503]   - Field: ‘envir’
[11:01:45.503]   - Field: ‘workers’
[11:01:45.503]   - Field: ‘packages’
[11:01:45.503]   - Field: ‘gc’
[11:01:45.503]   - Field: ‘conditions’
[11:01:45.503]   - Field: ‘persistent’
[11:01:45.503]   - Field: ‘expr’
[11:01:45.503]   - Field: ‘uuid’
[11:01:45.503]   - Field: ‘seed’
[11:01:45.503]   - Field: ‘version’
[11:01:45.504]   - Field: ‘result’
[11:01:45.504]   - Field: ‘asynchronous’
[11:01:45.504]   - Field: ‘calls’
[11:01:45.504]   - Field: ‘globals’
[11:01:45.504]   - Field: ‘stdout’
[11:01:45.504]   - Field: ‘earlySignal’
[11:01:45.504]   - Field: ‘lazy’
[11:01:45.504]   - Field: ‘state’
[11:01:45.504] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:45.504] - Launch lazy future ...
[11:01:45.505] Packages needed by the future expression (n = 0): <none>
[11:01:45.505] Packages needed by future strategies (n = 0): <none>
[11:01:45.505] {
[11:01:45.505]     {
[11:01:45.505]         {
[11:01:45.505]             ...future.startTime <- base::Sys.time()
[11:01:45.505]             {
[11:01:45.505]                 {
[11:01:45.505]                   {
[11:01:45.505]                     {
[11:01:45.505]                       base::local({
[11:01:45.505]                         has_future <- base::requireNamespace("future", 
[11:01:45.505]                           quietly = TRUE)
[11:01:45.505]                         if (has_future) {
[11:01:45.505]                           ns <- base::getNamespace("future")
[11:01:45.505]                           version <- ns[[".package"]][["version"]]
[11:01:45.505]                           if (is.null(version)) 
[11:01:45.505]                             version <- utils::packageVersion("future")
[11:01:45.505]                         }
[11:01:45.505]                         else {
[11:01:45.505]                           version <- NULL
[11:01:45.505]                         }
[11:01:45.505]                         if (!has_future || version < "1.8.0") {
[11:01:45.505]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:45.505]                             "", base::R.version$version.string), 
[11:01:45.505]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:45.505]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:45.505]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:45.505]                               "release", "version")], collapse = " "), 
[11:01:45.505]                             hostname = base::Sys.info()[["nodename"]])
[11:01:45.505]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:45.505]                             info)
[11:01:45.505]                           info <- base::paste(info, collapse = "; ")
[11:01:45.505]                           if (!has_future) {
[11:01:45.505]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:45.505]                               info)
[11:01:45.505]                           }
[11:01:45.505]                           else {
[11:01:45.505]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:45.505]                               info, version)
[11:01:45.505]                           }
[11:01:45.505]                           base::stop(msg)
[11:01:45.505]                         }
[11:01:45.505]                       })
[11:01:45.505]                     }
[11:01:45.505]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:45.505]                     base::options(mc.cores = 1L)
[11:01:45.505]                   }
[11:01:45.505]                   ...future.strategy.old <- future::plan("list")
[11:01:45.505]                   options(future.plan = NULL)
[11:01:45.505]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.505]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:45.505]                 }
[11:01:45.505]                 ...future.workdir <- getwd()
[11:01:45.505]             }
[11:01:45.505]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:45.505]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:45.505]         }
[11:01:45.505]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:45.505]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:45.505]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:45.505]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:45.505]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:45.505]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:45.505]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:45.505]             base::names(...future.oldOptions))
[11:01:45.505]     }
[11:01:45.505]     if (FALSE) {
[11:01:45.505]     }
[11:01:45.505]     else {
[11:01:45.505]         if (TRUE) {
[11:01:45.505]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:45.505]                 open = "w")
[11:01:45.505]         }
[11:01:45.505]         else {
[11:01:45.505]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:45.505]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:45.505]         }
[11:01:45.505]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:45.505]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:45.505]             base::sink(type = "output", split = FALSE)
[11:01:45.505]             base::close(...future.stdout)
[11:01:45.505]         }, add = TRUE)
[11:01:45.505]     }
[11:01:45.505]     ...future.frame <- base::sys.nframe()
[11:01:45.505]     ...future.conditions <- base::list()
[11:01:45.505]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:45.505]     if (FALSE) {
[11:01:45.505]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:45.505]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:45.505]     }
[11:01:45.505]     ...future.result <- base::tryCatch({
[11:01:45.505]         base::withCallingHandlers({
[11:01:45.505]             ...future.value <- base::withVisible(base::local({
[11:01:45.505]                 ...future.makeSendCondition <- base::local({
[11:01:45.505]                   sendCondition <- NULL
[11:01:45.505]                   function(frame = 1L) {
[11:01:45.505]                     if (is.function(sendCondition)) 
[11:01:45.505]                       return(sendCondition)
[11:01:45.505]                     ns <- getNamespace("parallel")
[11:01:45.505]                     if (exists("sendData", mode = "function", 
[11:01:45.505]                       envir = ns)) {
[11:01:45.505]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:45.505]                         envir = ns)
[11:01:45.505]                       envir <- sys.frame(frame)
[11:01:45.505]                       master <- NULL
[11:01:45.505]                       while (!identical(envir, .GlobalEnv) && 
[11:01:45.505]                         !identical(envir, emptyenv())) {
[11:01:45.505]                         if (exists("master", mode = "list", envir = envir, 
[11:01:45.505]                           inherits = FALSE)) {
[11:01:45.505]                           master <- get("master", mode = "list", 
[11:01:45.505]                             envir = envir, inherits = FALSE)
[11:01:45.505]                           if (inherits(master, c("SOCKnode", 
[11:01:45.505]                             "SOCK0node"))) {
[11:01:45.505]                             sendCondition <<- function(cond) {
[11:01:45.505]                               data <- list(type = "VALUE", value = cond, 
[11:01:45.505]                                 success = TRUE)
[11:01:45.505]                               parallel_sendData(master, data)
[11:01:45.505]                             }
[11:01:45.505]                             return(sendCondition)
[11:01:45.505]                           }
[11:01:45.505]                         }
[11:01:45.505]                         frame <- frame + 1L
[11:01:45.505]                         envir <- sys.frame(frame)
[11:01:45.505]                       }
[11:01:45.505]                     }
[11:01:45.505]                     sendCondition <<- function(cond) NULL
[11:01:45.505]                   }
[11:01:45.505]                 })
[11:01:45.505]                 withCallingHandlers({
[11:01:45.505]                   {
[11:01:45.505]                     "a"
[11:01:45.505]                   }
[11:01:45.505]                 }, immediateCondition = function(cond) {
[11:01:45.505]                   sendCondition <- ...future.makeSendCondition()
[11:01:45.505]                   sendCondition(cond)
[11:01:45.505]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.505]                   {
[11:01:45.505]                     inherits <- base::inherits
[11:01:45.505]                     invokeRestart <- base::invokeRestart
[11:01:45.505]                     is.null <- base::is.null
[11:01:45.505]                     muffled <- FALSE
[11:01:45.505]                     if (inherits(cond, "message")) {
[11:01:45.505]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:45.505]                       if (muffled) 
[11:01:45.505]                         invokeRestart("muffleMessage")
[11:01:45.505]                     }
[11:01:45.505]                     else if (inherits(cond, "warning")) {
[11:01:45.505]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:45.505]                       if (muffled) 
[11:01:45.505]                         invokeRestart("muffleWarning")
[11:01:45.505]                     }
[11:01:45.505]                     else if (inherits(cond, "condition")) {
[11:01:45.505]                       if (!is.null(pattern)) {
[11:01:45.505]                         computeRestarts <- base::computeRestarts
[11:01:45.505]                         grepl <- base::grepl
[11:01:45.505]                         restarts <- computeRestarts(cond)
[11:01:45.505]                         for (restart in restarts) {
[11:01:45.505]                           name <- restart$name
[11:01:45.505]                           if (is.null(name)) 
[11:01:45.505]                             next
[11:01:45.505]                           if (!grepl(pattern, name)) 
[11:01:45.505]                             next
[11:01:45.505]                           invokeRestart(restart)
[11:01:45.505]                           muffled <- TRUE
[11:01:45.505]                           break
[11:01:45.505]                         }
[11:01:45.505]                       }
[11:01:45.505]                     }
[11:01:45.505]                     invisible(muffled)
[11:01:45.505]                   }
[11:01:45.505]                   muffleCondition(cond)
[11:01:45.505]                 })
[11:01:45.505]             }))
[11:01:45.505]             future::FutureResult(value = ...future.value$value, 
[11:01:45.505]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.505]                   ...future.rng), globalenv = if (FALSE) 
[11:01:45.505]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:45.505]                     ...future.globalenv.names))
[11:01:45.505]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:45.505]         }, condition = base::local({
[11:01:45.505]             c <- base::c
[11:01:45.505]             inherits <- base::inherits
[11:01:45.505]             invokeRestart <- base::invokeRestart
[11:01:45.505]             length <- base::length
[11:01:45.505]             list <- base::list
[11:01:45.505]             seq.int <- base::seq.int
[11:01:45.505]             signalCondition <- base::signalCondition
[11:01:45.505]             sys.calls <- base::sys.calls
[11:01:45.505]             `[[` <- base::`[[`
[11:01:45.505]             `+` <- base::`+`
[11:01:45.505]             `<<-` <- base::`<<-`
[11:01:45.505]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:45.505]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:45.505]                   3L)]
[11:01:45.505]             }
[11:01:45.505]             function(cond) {
[11:01:45.505]                 is_error <- inherits(cond, "error")
[11:01:45.505]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:45.505]                   NULL)
[11:01:45.505]                 if (is_error) {
[11:01:45.505]                   sessionInformation <- function() {
[11:01:45.505]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:45.505]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:45.505]                       search = base::search(), system = base::Sys.info())
[11:01:45.505]                   }
[11:01:45.505]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.505]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:45.505]                     cond$call), session = sessionInformation(), 
[11:01:45.505]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:45.505]                   signalCondition(cond)
[11:01:45.505]                 }
[11:01:45.505]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:45.505]                 "immediateCondition"))) {
[11:01:45.505]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:45.505]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.505]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:45.505]                   if (TRUE && !signal) {
[11:01:45.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.505]                     {
[11:01:45.505]                       inherits <- base::inherits
[11:01:45.505]                       invokeRestart <- base::invokeRestart
[11:01:45.505]                       is.null <- base::is.null
[11:01:45.505]                       muffled <- FALSE
[11:01:45.505]                       if (inherits(cond, "message")) {
[11:01:45.505]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.505]                         if (muffled) 
[11:01:45.505]                           invokeRestart("muffleMessage")
[11:01:45.505]                       }
[11:01:45.505]                       else if (inherits(cond, "warning")) {
[11:01:45.505]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.505]                         if (muffled) 
[11:01:45.505]                           invokeRestart("muffleWarning")
[11:01:45.505]                       }
[11:01:45.505]                       else if (inherits(cond, "condition")) {
[11:01:45.505]                         if (!is.null(pattern)) {
[11:01:45.505]                           computeRestarts <- base::computeRestarts
[11:01:45.505]                           grepl <- base::grepl
[11:01:45.505]                           restarts <- computeRestarts(cond)
[11:01:45.505]                           for (restart in restarts) {
[11:01:45.505]                             name <- restart$name
[11:01:45.505]                             if (is.null(name)) 
[11:01:45.505]                               next
[11:01:45.505]                             if (!grepl(pattern, name)) 
[11:01:45.505]                               next
[11:01:45.505]                             invokeRestart(restart)
[11:01:45.505]                             muffled <- TRUE
[11:01:45.505]                             break
[11:01:45.505]                           }
[11:01:45.505]                         }
[11:01:45.505]                       }
[11:01:45.505]                       invisible(muffled)
[11:01:45.505]                     }
[11:01:45.505]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.505]                   }
[11:01:45.505]                 }
[11:01:45.505]                 else {
[11:01:45.505]                   if (TRUE) {
[11:01:45.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.505]                     {
[11:01:45.505]                       inherits <- base::inherits
[11:01:45.505]                       invokeRestart <- base::invokeRestart
[11:01:45.505]                       is.null <- base::is.null
[11:01:45.505]                       muffled <- FALSE
[11:01:45.505]                       if (inherits(cond, "message")) {
[11:01:45.505]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.505]                         if (muffled) 
[11:01:45.505]                           invokeRestart("muffleMessage")
[11:01:45.505]                       }
[11:01:45.505]                       else if (inherits(cond, "warning")) {
[11:01:45.505]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.505]                         if (muffled) 
[11:01:45.505]                           invokeRestart("muffleWarning")
[11:01:45.505]                       }
[11:01:45.505]                       else if (inherits(cond, "condition")) {
[11:01:45.505]                         if (!is.null(pattern)) {
[11:01:45.505]                           computeRestarts <- base::computeRestarts
[11:01:45.505]                           grepl <- base::grepl
[11:01:45.505]                           restarts <- computeRestarts(cond)
[11:01:45.505]                           for (restart in restarts) {
[11:01:45.505]                             name <- restart$name
[11:01:45.505]                             if (is.null(name)) 
[11:01:45.505]                               next
[11:01:45.505]                             if (!grepl(pattern, name)) 
[11:01:45.505]                               next
[11:01:45.505]                             invokeRestart(restart)
[11:01:45.505]                             muffled <- TRUE
[11:01:45.505]                             break
[11:01:45.505]                           }
[11:01:45.505]                         }
[11:01:45.505]                       }
[11:01:45.505]                       invisible(muffled)
[11:01:45.505]                     }
[11:01:45.505]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.505]                   }
[11:01:45.505]                 }
[11:01:45.505]             }
[11:01:45.505]         }))
[11:01:45.505]     }, error = function(ex) {
[11:01:45.505]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:45.505]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.505]                 ...future.rng), started = ...future.startTime, 
[11:01:45.505]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:45.505]             version = "1.8"), class = "FutureResult")
[11:01:45.505]     }, finally = {
[11:01:45.505]         if (!identical(...future.workdir, getwd())) 
[11:01:45.505]             setwd(...future.workdir)
[11:01:45.505]         {
[11:01:45.505]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:45.505]                 ...future.oldOptions$nwarnings <- NULL
[11:01:45.505]             }
[11:01:45.505]             base::options(...future.oldOptions)
[11:01:45.505]             if (.Platform$OS.type == "windows") {
[11:01:45.505]                 old_names <- names(...future.oldEnvVars)
[11:01:45.505]                 envs <- base::Sys.getenv()
[11:01:45.505]                 names <- names(envs)
[11:01:45.505]                 common <- intersect(names, old_names)
[11:01:45.505]                 added <- setdiff(names, old_names)
[11:01:45.505]                 removed <- setdiff(old_names, names)
[11:01:45.505]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:45.505]                   envs[common]]
[11:01:45.505]                 NAMES <- toupper(changed)
[11:01:45.505]                 args <- list()
[11:01:45.505]                 for (kk in seq_along(NAMES)) {
[11:01:45.505]                   name <- changed[[kk]]
[11:01:45.505]                   NAME <- NAMES[[kk]]
[11:01:45.505]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.505]                     next
[11:01:45.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.505]                 }
[11:01:45.505]                 NAMES <- toupper(added)
[11:01:45.505]                 for (kk in seq_along(NAMES)) {
[11:01:45.505]                   name <- added[[kk]]
[11:01:45.505]                   NAME <- NAMES[[kk]]
[11:01:45.505]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.505]                     next
[11:01:45.505]                   args[[name]] <- ""
[11:01:45.505]                 }
[11:01:45.505]                 NAMES <- toupper(removed)
[11:01:45.505]                 for (kk in seq_along(NAMES)) {
[11:01:45.505]                   name <- removed[[kk]]
[11:01:45.505]                   NAME <- NAMES[[kk]]
[11:01:45.505]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.505]                     next
[11:01:45.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.505]                 }
[11:01:45.505]                 if (length(args) > 0) 
[11:01:45.505]                   base::do.call(base::Sys.setenv, args = args)
[11:01:45.505]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:45.505]             }
[11:01:45.505]             else {
[11:01:45.505]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:45.505]             }
[11:01:45.505]             {
[11:01:45.505]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:45.505]                   0L) {
[11:01:45.505]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:45.505]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:45.505]                   base::options(opts)
[11:01:45.505]                 }
[11:01:45.505]                 {
[11:01:45.505]                   {
[11:01:45.505]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:45.505]                     NULL
[11:01:45.505]                   }
[11:01:45.505]                   options(future.plan = NULL)
[11:01:45.505]                   if (is.na(NA_character_)) 
[11:01:45.505]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.505]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:45.505]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:45.505]                     .init = FALSE)
[11:01:45.505]                 }
[11:01:45.505]             }
[11:01:45.505]         }
[11:01:45.505]     })
[11:01:45.505]     if (TRUE) {
[11:01:45.505]         base::sink(type = "output", split = FALSE)
[11:01:45.505]         if (TRUE) {
[11:01:45.505]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:45.505]         }
[11:01:45.505]         else {
[11:01:45.505]             ...future.result["stdout"] <- base::list(NULL)
[11:01:45.505]         }
[11:01:45.505]         base::close(...future.stdout)
[11:01:45.505]         ...future.stdout <- NULL
[11:01:45.505]     }
[11:01:45.505]     ...future.result$conditions <- ...future.conditions
[11:01:45.505]     ...future.result$finished <- base::Sys.time()
[11:01:45.505]     ...future.result
[11:01:45.505] }
[11:01:45.557] MultisessionFuture started
[11:01:45.557] - Launch lazy future ... done
[11:01:45.557] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[11:01:45.558] result() for ClusterFuture ...
[11:01:45.558] receiveMessageFromWorker() for ClusterFuture ...
[11:01:45.558] - Validating connection of MultisessionFuture
[11:01:45.588] - received message: FutureResult
[11:01:45.588] - Received FutureResult
[11:01:45.589] - Erased future from FutureRegistry
[11:01:45.589] result() for ClusterFuture ...
[11:01:45.589] - result already collected: FutureResult
[11:01:45.589] result() for ClusterFuture ... done
[11:01:45.589] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:45.589] result() for ClusterFuture ... done
[11:01:45.589] result() for ClusterFuture ...
[11:01:45.589] - result already collected: FutureResult
[11:01:45.589] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:45.590] getGlobalsAndPackages() ...
[11:01:45.590] Searching for globals...
[11:01:45.595] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[11:01:45.595] Searching for globals ... DONE
[11:01:45.595] Resolving globals: TRUE
[11:01:45.595] Resolving any globals that are futures ...
[11:01:45.596] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[11:01:45.596] Resolving any globals that are futures ... DONE
[11:01:45.596] Resolving futures part of globals (recursively) ...
[11:01:45.597] resolve() on list ...
[11:01:45.597]  recursive: 99
[11:01:45.597]  length: 2
[11:01:45.598]  elements: ‘env’, ‘b’
[11:01:45.598] resolve() on environment ...
[11:01:45.598]  recursive: 98
[11:01:45.599]  elements: [1] ‘.future_a’, ‘a’
[11:01:45.599] receiveMessageFromWorker() for ClusterFuture ...
[11:01:45.600] - Validating connection of MultisessionFuture
[11:01:45.600] - received message: FutureResult
[11:01:45.600] - Received FutureResult
[11:01:45.600] - Erased future from FutureRegistry
[11:01:45.600] result() for ClusterFuture ...
[11:01:45.600] - result already collected: FutureResult
[11:01:45.600] result() for ClusterFuture ... done
[11:01:45.600] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:45.601] Future #1
[11:01:45.601] result() for ClusterFuture ...
[11:01:45.601] - result already collected: FutureResult
[11:01:45.601] result() for ClusterFuture ... done
[11:01:45.601] result() for ClusterFuture ...
[11:01:45.601] - result already collected: FutureResult
[11:01:45.601] result() for ClusterFuture ... done
[11:01:45.602] A MultisessionFuture was resolved
[11:01:45.602]  length: 0 (resolved future 1)
[11:01:45.602] resolve() on environment ... DONE
[11:01:45.602]  length: 1 (resolved future 1)
[11:01:45.602]  length: 0 (resolved future 2)
[11:01:45.602] resolve() on list ... DONE
[11:01:45.602] - globals: [2] ‘env’, ‘b’
[11:01:45.602] Resolving futures part of globals (recursively) ... DONE
[11:01:45.614] The total size of the 2 globals is 326.57 KiB (334405 bytes)
[11:01:45.615] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 326.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (326.53 KiB of class ‘environment’) and ‘b’ (40 bytes of class ‘character’)
[11:01:45.615] - globals: [2] ‘env’, ‘b’
[11:01:45.615] 
[11:01:45.615] getGlobalsAndPackages() ... DONE
[11:01:45.615] run() for ‘Future’ ...
[11:01:45.616] - state: ‘created’
[11:01:45.616] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:45.629] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:45.629] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:45.629]   - Field: ‘node’
[11:01:45.629]   - Field: ‘label’
[11:01:45.629]   - Field: ‘local’
[11:01:45.630]   - Field: ‘owner’
[11:01:45.630]   - Field: ‘envir’
[11:01:45.630]   - Field: ‘workers’
[11:01:45.630]   - Field: ‘packages’
[11:01:45.630]   - Field: ‘gc’
[11:01:45.630]   - Field: ‘conditions’
[11:01:45.630]   - Field: ‘persistent’
[11:01:45.630]   - Field: ‘expr’
[11:01:45.630]   - Field: ‘uuid’
[11:01:45.630]   - Field: ‘seed’
[11:01:45.631]   - Field: ‘version’
[11:01:45.631]   - Field: ‘result’
[11:01:45.631]   - Field: ‘asynchronous’
[11:01:45.631]   - Field: ‘calls’
[11:01:45.631]   - Field: ‘globals’
[11:01:45.631]   - Field: ‘stdout’
[11:01:45.631]   - Field: ‘earlySignal’
[11:01:45.631]   - Field: ‘lazy’
[11:01:45.631]   - Field: ‘state’
[11:01:45.631] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:45.632] - Launch lazy future ...
[11:01:45.632] Packages needed by the future expression (n = 0): <none>
[11:01:45.632] Packages needed by future strategies (n = 0): <none>
[11:01:45.633] {
[11:01:45.633]     {
[11:01:45.633]         {
[11:01:45.633]             ...future.startTime <- base::Sys.time()
[11:01:45.633]             {
[11:01:45.633]                 {
[11:01:45.633]                   {
[11:01:45.633]                     {
[11:01:45.633]                       base::local({
[11:01:45.633]                         has_future <- base::requireNamespace("future", 
[11:01:45.633]                           quietly = TRUE)
[11:01:45.633]                         if (has_future) {
[11:01:45.633]                           ns <- base::getNamespace("future")
[11:01:45.633]                           version <- ns[[".package"]][["version"]]
[11:01:45.633]                           if (is.null(version)) 
[11:01:45.633]                             version <- utils::packageVersion("future")
[11:01:45.633]                         }
[11:01:45.633]                         else {
[11:01:45.633]                           version <- NULL
[11:01:45.633]                         }
[11:01:45.633]                         if (!has_future || version < "1.8.0") {
[11:01:45.633]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:45.633]                             "", base::R.version$version.string), 
[11:01:45.633]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:45.633]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:45.633]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:45.633]                               "release", "version")], collapse = " "), 
[11:01:45.633]                             hostname = base::Sys.info()[["nodename"]])
[11:01:45.633]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:45.633]                             info)
[11:01:45.633]                           info <- base::paste(info, collapse = "; ")
[11:01:45.633]                           if (!has_future) {
[11:01:45.633]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:45.633]                               info)
[11:01:45.633]                           }
[11:01:45.633]                           else {
[11:01:45.633]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:45.633]                               info, version)
[11:01:45.633]                           }
[11:01:45.633]                           base::stop(msg)
[11:01:45.633]                         }
[11:01:45.633]                       })
[11:01:45.633]                     }
[11:01:45.633]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:45.633]                     base::options(mc.cores = 1L)
[11:01:45.633]                   }
[11:01:45.633]                   ...future.strategy.old <- future::plan("list")
[11:01:45.633]                   options(future.plan = NULL)
[11:01:45.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:45.633]                 }
[11:01:45.633]                 ...future.workdir <- getwd()
[11:01:45.633]             }
[11:01:45.633]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:45.633]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:45.633]         }
[11:01:45.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:45.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:45.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:45.633]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:45.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:45.633]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:45.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:45.633]             base::names(...future.oldOptions))
[11:01:45.633]     }
[11:01:45.633]     if (FALSE) {
[11:01:45.633]     }
[11:01:45.633]     else {
[11:01:45.633]         if (TRUE) {
[11:01:45.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:45.633]                 open = "w")
[11:01:45.633]         }
[11:01:45.633]         else {
[11:01:45.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:45.633]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:45.633]         }
[11:01:45.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:45.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:45.633]             base::sink(type = "output", split = FALSE)
[11:01:45.633]             base::close(...future.stdout)
[11:01:45.633]         }, add = TRUE)
[11:01:45.633]     }
[11:01:45.633]     ...future.frame <- base::sys.nframe()
[11:01:45.633]     ...future.conditions <- base::list()
[11:01:45.633]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:45.633]     if (FALSE) {
[11:01:45.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:45.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:45.633]     }
[11:01:45.633]     ...future.result <- base::tryCatch({
[11:01:45.633]         base::withCallingHandlers({
[11:01:45.633]             ...future.value <- base::withVisible(base::local({
[11:01:45.633]                 ...future.makeSendCondition <- base::local({
[11:01:45.633]                   sendCondition <- NULL
[11:01:45.633]                   function(frame = 1L) {
[11:01:45.633]                     if (is.function(sendCondition)) 
[11:01:45.633]                       return(sendCondition)
[11:01:45.633]                     ns <- getNamespace("parallel")
[11:01:45.633]                     if (exists("sendData", mode = "function", 
[11:01:45.633]                       envir = ns)) {
[11:01:45.633]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:45.633]                         envir = ns)
[11:01:45.633]                       envir <- sys.frame(frame)
[11:01:45.633]                       master <- NULL
[11:01:45.633]                       while (!identical(envir, .GlobalEnv) && 
[11:01:45.633]                         !identical(envir, emptyenv())) {
[11:01:45.633]                         if (exists("master", mode = "list", envir = envir, 
[11:01:45.633]                           inherits = FALSE)) {
[11:01:45.633]                           master <- get("master", mode = "list", 
[11:01:45.633]                             envir = envir, inherits = FALSE)
[11:01:45.633]                           if (inherits(master, c("SOCKnode", 
[11:01:45.633]                             "SOCK0node"))) {
[11:01:45.633]                             sendCondition <<- function(cond) {
[11:01:45.633]                               data <- list(type = "VALUE", value = cond, 
[11:01:45.633]                                 success = TRUE)
[11:01:45.633]                               parallel_sendData(master, data)
[11:01:45.633]                             }
[11:01:45.633]                             return(sendCondition)
[11:01:45.633]                           }
[11:01:45.633]                         }
[11:01:45.633]                         frame <- frame + 1L
[11:01:45.633]                         envir <- sys.frame(frame)
[11:01:45.633]                       }
[11:01:45.633]                     }
[11:01:45.633]                     sendCondition <<- function(cond) NULL
[11:01:45.633]                   }
[11:01:45.633]                 })
[11:01:45.633]                 withCallingHandlers({
[11:01:45.633]                   {
[11:01:45.633]                     env[[b]]
[11:01:45.633]                   }
[11:01:45.633]                 }, immediateCondition = function(cond) {
[11:01:45.633]                   sendCondition <- ...future.makeSendCondition()
[11:01:45.633]                   sendCondition(cond)
[11:01:45.633]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.633]                   {
[11:01:45.633]                     inherits <- base::inherits
[11:01:45.633]                     invokeRestart <- base::invokeRestart
[11:01:45.633]                     is.null <- base::is.null
[11:01:45.633]                     muffled <- FALSE
[11:01:45.633]                     if (inherits(cond, "message")) {
[11:01:45.633]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:45.633]                       if (muffled) 
[11:01:45.633]                         invokeRestart("muffleMessage")
[11:01:45.633]                     }
[11:01:45.633]                     else if (inherits(cond, "warning")) {
[11:01:45.633]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:45.633]                       if (muffled) 
[11:01:45.633]                         invokeRestart("muffleWarning")
[11:01:45.633]                     }
[11:01:45.633]                     else if (inherits(cond, "condition")) {
[11:01:45.633]                       if (!is.null(pattern)) {
[11:01:45.633]                         computeRestarts <- base::computeRestarts
[11:01:45.633]                         grepl <- base::grepl
[11:01:45.633]                         restarts <- computeRestarts(cond)
[11:01:45.633]                         for (restart in restarts) {
[11:01:45.633]                           name <- restart$name
[11:01:45.633]                           if (is.null(name)) 
[11:01:45.633]                             next
[11:01:45.633]                           if (!grepl(pattern, name)) 
[11:01:45.633]                             next
[11:01:45.633]                           invokeRestart(restart)
[11:01:45.633]                           muffled <- TRUE
[11:01:45.633]                           break
[11:01:45.633]                         }
[11:01:45.633]                       }
[11:01:45.633]                     }
[11:01:45.633]                     invisible(muffled)
[11:01:45.633]                   }
[11:01:45.633]                   muffleCondition(cond)
[11:01:45.633]                 })
[11:01:45.633]             }))
[11:01:45.633]             future::FutureResult(value = ...future.value$value, 
[11:01:45.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.633]                   ...future.rng), globalenv = if (FALSE) 
[11:01:45.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:45.633]                     ...future.globalenv.names))
[11:01:45.633]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:45.633]         }, condition = base::local({
[11:01:45.633]             c <- base::c
[11:01:45.633]             inherits <- base::inherits
[11:01:45.633]             invokeRestart <- base::invokeRestart
[11:01:45.633]             length <- base::length
[11:01:45.633]             list <- base::list
[11:01:45.633]             seq.int <- base::seq.int
[11:01:45.633]             signalCondition <- base::signalCondition
[11:01:45.633]             sys.calls <- base::sys.calls
[11:01:45.633]             `[[` <- base::`[[`
[11:01:45.633]             `+` <- base::`+`
[11:01:45.633]             `<<-` <- base::`<<-`
[11:01:45.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:45.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:45.633]                   3L)]
[11:01:45.633]             }
[11:01:45.633]             function(cond) {
[11:01:45.633]                 is_error <- inherits(cond, "error")
[11:01:45.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:45.633]                   NULL)
[11:01:45.633]                 if (is_error) {
[11:01:45.633]                   sessionInformation <- function() {
[11:01:45.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:45.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:45.633]                       search = base::search(), system = base::Sys.info())
[11:01:45.633]                   }
[11:01:45.633]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:45.633]                     cond$call), session = sessionInformation(), 
[11:01:45.633]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:45.633]                   signalCondition(cond)
[11:01:45.633]                 }
[11:01:45.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:45.633]                 "immediateCondition"))) {
[11:01:45.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:45.633]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:45.633]                   if (TRUE && !signal) {
[11:01:45.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.633]                     {
[11:01:45.633]                       inherits <- base::inherits
[11:01:45.633]                       invokeRestart <- base::invokeRestart
[11:01:45.633]                       is.null <- base::is.null
[11:01:45.633]                       muffled <- FALSE
[11:01:45.633]                       if (inherits(cond, "message")) {
[11:01:45.633]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.633]                         if (muffled) 
[11:01:45.633]                           invokeRestart("muffleMessage")
[11:01:45.633]                       }
[11:01:45.633]                       else if (inherits(cond, "warning")) {
[11:01:45.633]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.633]                         if (muffled) 
[11:01:45.633]                           invokeRestart("muffleWarning")
[11:01:45.633]                       }
[11:01:45.633]                       else if (inherits(cond, "condition")) {
[11:01:45.633]                         if (!is.null(pattern)) {
[11:01:45.633]                           computeRestarts <- base::computeRestarts
[11:01:45.633]                           grepl <- base::grepl
[11:01:45.633]                           restarts <- computeRestarts(cond)
[11:01:45.633]                           for (restart in restarts) {
[11:01:45.633]                             name <- restart$name
[11:01:45.633]                             if (is.null(name)) 
[11:01:45.633]                               next
[11:01:45.633]                             if (!grepl(pattern, name)) 
[11:01:45.633]                               next
[11:01:45.633]                             invokeRestart(restart)
[11:01:45.633]                             muffled <- TRUE
[11:01:45.633]                             break
[11:01:45.633]                           }
[11:01:45.633]                         }
[11:01:45.633]                       }
[11:01:45.633]                       invisible(muffled)
[11:01:45.633]                     }
[11:01:45.633]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.633]                   }
[11:01:45.633]                 }
[11:01:45.633]                 else {
[11:01:45.633]                   if (TRUE) {
[11:01:45.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.633]                     {
[11:01:45.633]                       inherits <- base::inherits
[11:01:45.633]                       invokeRestart <- base::invokeRestart
[11:01:45.633]                       is.null <- base::is.null
[11:01:45.633]                       muffled <- FALSE
[11:01:45.633]                       if (inherits(cond, "message")) {
[11:01:45.633]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.633]                         if (muffled) 
[11:01:45.633]                           invokeRestart("muffleMessage")
[11:01:45.633]                       }
[11:01:45.633]                       else if (inherits(cond, "warning")) {
[11:01:45.633]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.633]                         if (muffled) 
[11:01:45.633]                           invokeRestart("muffleWarning")
[11:01:45.633]                       }
[11:01:45.633]                       else if (inherits(cond, "condition")) {
[11:01:45.633]                         if (!is.null(pattern)) {
[11:01:45.633]                           computeRestarts <- base::computeRestarts
[11:01:45.633]                           grepl <- base::grepl
[11:01:45.633]                           restarts <- computeRestarts(cond)
[11:01:45.633]                           for (restart in restarts) {
[11:01:45.633]                             name <- restart$name
[11:01:45.633]                             if (is.null(name)) 
[11:01:45.633]                               next
[11:01:45.633]                             if (!grepl(pattern, name)) 
[11:01:45.633]                               next
[11:01:45.633]                             invokeRestart(restart)
[11:01:45.633]                             muffled <- TRUE
[11:01:45.633]                             break
[11:01:45.633]                           }
[11:01:45.633]                         }
[11:01:45.633]                       }
[11:01:45.633]                       invisible(muffled)
[11:01:45.633]                     }
[11:01:45.633]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.633]                   }
[11:01:45.633]                 }
[11:01:45.633]             }
[11:01:45.633]         }))
[11:01:45.633]     }, error = function(ex) {
[11:01:45.633]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:45.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.633]                 ...future.rng), started = ...future.startTime, 
[11:01:45.633]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:45.633]             version = "1.8"), class = "FutureResult")
[11:01:45.633]     }, finally = {
[11:01:45.633]         if (!identical(...future.workdir, getwd())) 
[11:01:45.633]             setwd(...future.workdir)
[11:01:45.633]         {
[11:01:45.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:45.633]                 ...future.oldOptions$nwarnings <- NULL
[11:01:45.633]             }
[11:01:45.633]             base::options(...future.oldOptions)
[11:01:45.633]             if (.Platform$OS.type == "windows") {
[11:01:45.633]                 old_names <- names(...future.oldEnvVars)
[11:01:45.633]                 envs <- base::Sys.getenv()
[11:01:45.633]                 names <- names(envs)
[11:01:45.633]                 common <- intersect(names, old_names)
[11:01:45.633]                 added <- setdiff(names, old_names)
[11:01:45.633]                 removed <- setdiff(old_names, names)
[11:01:45.633]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:45.633]                   envs[common]]
[11:01:45.633]                 NAMES <- toupper(changed)
[11:01:45.633]                 args <- list()
[11:01:45.633]                 for (kk in seq_along(NAMES)) {
[11:01:45.633]                   name <- changed[[kk]]
[11:01:45.633]                   NAME <- NAMES[[kk]]
[11:01:45.633]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.633]                     next
[11:01:45.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.633]                 }
[11:01:45.633]                 NAMES <- toupper(added)
[11:01:45.633]                 for (kk in seq_along(NAMES)) {
[11:01:45.633]                   name <- added[[kk]]
[11:01:45.633]                   NAME <- NAMES[[kk]]
[11:01:45.633]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.633]                     next
[11:01:45.633]                   args[[name]] <- ""
[11:01:45.633]                 }
[11:01:45.633]                 NAMES <- toupper(removed)
[11:01:45.633]                 for (kk in seq_along(NAMES)) {
[11:01:45.633]                   name <- removed[[kk]]
[11:01:45.633]                   NAME <- NAMES[[kk]]
[11:01:45.633]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.633]                     next
[11:01:45.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.633]                 }
[11:01:45.633]                 if (length(args) > 0) 
[11:01:45.633]                   base::do.call(base::Sys.setenv, args = args)
[11:01:45.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:45.633]             }
[11:01:45.633]             else {
[11:01:45.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:45.633]             }
[11:01:45.633]             {
[11:01:45.633]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:45.633]                   0L) {
[11:01:45.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:45.633]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:45.633]                   base::options(opts)
[11:01:45.633]                 }
[11:01:45.633]                 {
[11:01:45.633]                   {
[11:01:45.633]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:45.633]                     NULL
[11:01:45.633]                   }
[11:01:45.633]                   options(future.plan = NULL)
[11:01:45.633]                   if (is.na(NA_character_)) 
[11:01:45.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:45.633]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:45.633]                     .init = FALSE)
[11:01:45.633]                 }
[11:01:45.633]             }
[11:01:45.633]         }
[11:01:45.633]     })
[11:01:45.633]     if (TRUE) {
[11:01:45.633]         base::sink(type = "output", split = FALSE)
[11:01:45.633]         if (TRUE) {
[11:01:45.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:45.633]         }
[11:01:45.633]         else {
[11:01:45.633]             ...future.result["stdout"] <- base::list(NULL)
[11:01:45.633]         }
[11:01:45.633]         base::close(...future.stdout)
[11:01:45.633]         ...future.stdout <- NULL
[11:01:45.633]     }
[11:01:45.633]     ...future.result$conditions <- ...future.conditions
[11:01:45.633]     ...future.result$finished <- base::Sys.time()
[11:01:45.633]     ...future.result
[11:01:45.633] }
[11:01:45.647] Exporting 2 global objects (326.78 KiB) to cluster node #1 ...
[11:01:45.658] Exporting ‘env’ (326.53 KiB) to cluster node #1 ...
[11:01:45.711] Exporting ‘env’ (326.53 KiB) to cluster node #1 ... DONE
[11:01:45.711] Exporting ‘b’ (40 bytes) to cluster node #1 ...
[11:01:45.711] Exporting ‘b’ (40 bytes) to cluster node #1 ... DONE
[11:01:45.711] Exporting 2 global objects (326.78 KiB) to cluster node #1 ... DONE
[11:01:45.712] MultisessionFuture started
[11:01:45.712] - Launch lazy future ... done
[11:01:45.712] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[11:01:45.712] result() for ClusterFuture ...
[11:01:45.713] receiveMessageFromWorker() for ClusterFuture ...
[11:01:45.713] - Validating connection of MultisessionFuture
[11:01:45.754] - received message: FutureResult
[11:01:45.754] - Received FutureResult
[11:01:45.755] - Erased future from FutureRegistry
[11:01:45.755] result() for ClusterFuture ...
[11:01:45.755] - result already collected: FutureResult
[11:01:45.755] result() for ClusterFuture ... done
[11:01:45.755] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:45.755] result() for ClusterFuture ... done
[11:01:45.755] result() for ClusterFuture ...
[11:01:45.755] - result already collected: FutureResult
[11:01:45.758] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[11:01:45.758] result() for ClusterFuture ...
[11:01:45.759] - result already collected: FutureResult
[11:01:45.759] result() for ClusterFuture ... done
[11:01:45.759] result() for ClusterFuture ...
[11:01:45.759] - result already collected: FutureResult
[11:01:45.759] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[11:01:45.761] getGlobalsAndPackages() ...
[11:01:45.762] Searching for globals...
[11:01:45.762] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[11:01:45.762] Searching for globals ... DONE
[11:01:45.763] Resolving globals: TRUE
[11:01:45.763] Resolving any globals that are futures ...
[11:01:45.763] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[11:01:45.763] Resolving any globals that are futures ... DONE
[11:01:45.763] Resolving futures part of globals (recursively) ...
[11:01:45.763] resolve() on list ...
[11:01:45.764]  recursive: 99
[11:01:45.764]  length: 2
[11:01:45.764]  elements: ‘env’, ‘b’
[11:01:45.764] resolve() on environment ...
[11:01:45.764]  recursive: 98
[11:01:45.764]  elements: [1] ‘a’
[11:01:45.764]  length: 0 (resolved future 1)
[11:01:45.764] resolve() on environment ... DONE
[11:01:45.765]  length: 1 (resolved future 1)
[11:01:45.765]  length: 0 (resolved future 2)
[11:01:45.765] resolve() on list ... DONE
[11:01:45.765] - globals: [2] ‘env’, ‘b’
[11:01:45.765] Resolving futures part of globals (recursively) ... DONE
[11:01:45.765] The total size of the 2 globals is 499 bytes (499 bytes)
[11:01:45.765] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 499 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (459 bytes of class ‘environment’) and ‘b’ (40 bytes of class ‘character’)
[11:01:45.765] - globals: [2] ‘env’, ‘b’
[11:01:45.766] 
[11:01:45.766] getGlobalsAndPackages() ... DONE
[11:01:45.766] run() for ‘Future’ ...
[11:01:45.766] - state: ‘created’
[11:01:45.766] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:45.778] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:45.779] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:45.779]   - Field: ‘node’
[11:01:45.779]   - Field: ‘label’
[11:01:45.779]   - Field: ‘local’
[11:01:45.779]   - Field: ‘owner’
[11:01:45.779]   - Field: ‘envir’
[11:01:45.779]   - Field: ‘workers’
[11:01:45.779]   - Field: ‘packages’
[11:01:45.779]   - Field: ‘gc’
[11:01:45.779]   - Field: ‘conditions’
[11:01:45.779]   - Field: ‘persistent’
[11:01:45.780]   - Field: ‘expr’
[11:01:45.780]   - Field: ‘uuid’
[11:01:45.780]   - Field: ‘seed’
[11:01:45.780]   - Field: ‘version’
[11:01:45.780]   - Field: ‘result’
[11:01:45.780]   - Field: ‘asynchronous’
[11:01:45.780]   - Field: ‘calls’
[11:01:45.780]   - Field: ‘globals’
[11:01:45.780]   - Field: ‘stdout’
[11:01:45.780]   - Field: ‘earlySignal’
[11:01:45.780]   - Field: ‘lazy’
[11:01:45.780]   - Field: ‘state’
[11:01:45.781] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:45.781] - Launch lazy future ...
[11:01:45.781] Packages needed by the future expression (n = 0): <none>
[11:01:45.781] Packages needed by future strategies (n = 0): <none>
[11:01:45.781] {
[11:01:45.781]     {
[11:01:45.781]         {
[11:01:45.781]             ...future.startTime <- base::Sys.time()
[11:01:45.781]             {
[11:01:45.781]                 {
[11:01:45.781]                   {
[11:01:45.781]                     {
[11:01:45.781]                       base::local({
[11:01:45.781]                         has_future <- base::requireNamespace("future", 
[11:01:45.781]                           quietly = TRUE)
[11:01:45.781]                         if (has_future) {
[11:01:45.781]                           ns <- base::getNamespace("future")
[11:01:45.781]                           version <- ns[[".package"]][["version"]]
[11:01:45.781]                           if (is.null(version)) 
[11:01:45.781]                             version <- utils::packageVersion("future")
[11:01:45.781]                         }
[11:01:45.781]                         else {
[11:01:45.781]                           version <- NULL
[11:01:45.781]                         }
[11:01:45.781]                         if (!has_future || version < "1.8.0") {
[11:01:45.781]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:45.781]                             "", base::R.version$version.string), 
[11:01:45.781]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:45.781]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:45.781]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:45.781]                               "release", "version")], collapse = " "), 
[11:01:45.781]                             hostname = base::Sys.info()[["nodename"]])
[11:01:45.781]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:45.781]                             info)
[11:01:45.781]                           info <- base::paste(info, collapse = "; ")
[11:01:45.781]                           if (!has_future) {
[11:01:45.781]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:45.781]                               info)
[11:01:45.781]                           }
[11:01:45.781]                           else {
[11:01:45.781]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:45.781]                               info, version)
[11:01:45.781]                           }
[11:01:45.781]                           base::stop(msg)
[11:01:45.781]                         }
[11:01:45.781]                       })
[11:01:45.781]                     }
[11:01:45.781]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:45.781]                     base::options(mc.cores = 1L)
[11:01:45.781]                   }
[11:01:45.781]                   ...future.strategy.old <- future::plan("list")
[11:01:45.781]                   options(future.plan = NULL)
[11:01:45.781]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.781]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:45.781]                 }
[11:01:45.781]                 ...future.workdir <- getwd()
[11:01:45.781]             }
[11:01:45.781]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:45.781]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:45.781]         }
[11:01:45.781]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:45.781]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:45.781]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:45.781]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[11:01:45.781]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:45.781]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:45.781]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:45.781]             base::names(...future.oldOptions))
[11:01:45.781]     }
[11:01:45.781]     if (FALSE) {
[11:01:45.781]     }
[11:01:45.781]     else {
[11:01:45.781]         if (TRUE) {
[11:01:45.781]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:45.781]                 open = "w")
[11:01:45.781]         }
[11:01:45.781]         else {
[11:01:45.781]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:45.781]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:45.781]         }
[11:01:45.781]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:45.781]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:45.781]             base::sink(type = "output", split = FALSE)
[11:01:45.781]             base::close(...future.stdout)
[11:01:45.781]         }, add = TRUE)
[11:01:45.781]     }
[11:01:45.781]     ...future.frame <- base::sys.nframe()
[11:01:45.781]     ...future.conditions <- base::list()
[11:01:45.781]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:45.781]     if (FALSE) {
[11:01:45.781]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:45.781]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:45.781]     }
[11:01:45.781]     ...future.result <- base::tryCatch({
[11:01:45.781]         base::withCallingHandlers({
[11:01:45.781]             ...future.value <- base::withVisible(base::local({
[11:01:45.781]                 ...future.makeSendCondition <- base::local({
[11:01:45.781]                   sendCondition <- NULL
[11:01:45.781]                   function(frame = 1L) {
[11:01:45.781]                     if (is.function(sendCondition)) 
[11:01:45.781]                       return(sendCondition)
[11:01:45.781]                     ns <- getNamespace("parallel")
[11:01:45.781]                     if (exists("sendData", mode = "function", 
[11:01:45.781]                       envir = ns)) {
[11:01:45.781]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:45.781]                         envir = ns)
[11:01:45.781]                       envir <- sys.frame(frame)
[11:01:45.781]                       master <- NULL
[11:01:45.781]                       while (!identical(envir, .GlobalEnv) && 
[11:01:45.781]                         !identical(envir, emptyenv())) {
[11:01:45.781]                         if (exists("master", mode = "list", envir = envir, 
[11:01:45.781]                           inherits = FALSE)) {
[11:01:45.781]                           master <- get("master", mode = "list", 
[11:01:45.781]                             envir = envir, inherits = FALSE)
[11:01:45.781]                           if (inherits(master, c("SOCKnode", 
[11:01:45.781]                             "SOCK0node"))) {
[11:01:45.781]                             sendCondition <<- function(cond) {
[11:01:45.781]                               data <- list(type = "VALUE", value = cond, 
[11:01:45.781]                                 success = TRUE)
[11:01:45.781]                               parallel_sendData(master, data)
[11:01:45.781]                             }
[11:01:45.781]                             return(sendCondition)
[11:01:45.781]                           }
[11:01:45.781]                         }
[11:01:45.781]                         frame <- frame + 1L
[11:01:45.781]                         envir <- sys.frame(frame)
[11:01:45.781]                       }
[11:01:45.781]                     }
[11:01:45.781]                     sendCondition <<- function(cond) NULL
[11:01:45.781]                   }
[11:01:45.781]                 })
[11:01:45.781]                 withCallingHandlers({
[11:01:45.781]                   {
[11:01:45.781]                     env[[b]]
[11:01:45.781]                   }
[11:01:45.781]                 }, immediateCondition = function(cond) {
[11:01:45.781]                   sendCondition <- ...future.makeSendCondition()
[11:01:45.781]                   sendCondition(cond)
[11:01:45.781]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.781]                   {
[11:01:45.781]                     inherits <- base::inherits
[11:01:45.781]                     invokeRestart <- base::invokeRestart
[11:01:45.781]                     is.null <- base::is.null
[11:01:45.781]                     muffled <- FALSE
[11:01:45.781]                     if (inherits(cond, "message")) {
[11:01:45.781]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:45.781]                       if (muffled) 
[11:01:45.781]                         invokeRestart("muffleMessage")
[11:01:45.781]                     }
[11:01:45.781]                     else if (inherits(cond, "warning")) {
[11:01:45.781]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:45.781]                       if (muffled) 
[11:01:45.781]                         invokeRestart("muffleWarning")
[11:01:45.781]                     }
[11:01:45.781]                     else if (inherits(cond, "condition")) {
[11:01:45.781]                       if (!is.null(pattern)) {
[11:01:45.781]                         computeRestarts <- base::computeRestarts
[11:01:45.781]                         grepl <- base::grepl
[11:01:45.781]                         restarts <- computeRestarts(cond)
[11:01:45.781]                         for (restart in restarts) {
[11:01:45.781]                           name <- restart$name
[11:01:45.781]                           if (is.null(name)) 
[11:01:45.781]                             next
[11:01:45.781]                           if (!grepl(pattern, name)) 
[11:01:45.781]                             next
[11:01:45.781]                           invokeRestart(restart)
[11:01:45.781]                           muffled <- TRUE
[11:01:45.781]                           break
[11:01:45.781]                         }
[11:01:45.781]                       }
[11:01:45.781]                     }
[11:01:45.781]                     invisible(muffled)
[11:01:45.781]                   }
[11:01:45.781]                   muffleCondition(cond)
[11:01:45.781]                 })
[11:01:45.781]             }))
[11:01:45.781]             future::FutureResult(value = ...future.value$value, 
[11:01:45.781]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.781]                   ...future.rng), globalenv = if (FALSE) 
[11:01:45.781]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:45.781]                     ...future.globalenv.names))
[11:01:45.781]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:45.781]         }, condition = base::local({
[11:01:45.781]             c <- base::c
[11:01:45.781]             inherits <- base::inherits
[11:01:45.781]             invokeRestart <- base::invokeRestart
[11:01:45.781]             length <- base::length
[11:01:45.781]             list <- base::list
[11:01:45.781]             seq.int <- base::seq.int
[11:01:45.781]             signalCondition <- base::signalCondition
[11:01:45.781]             sys.calls <- base::sys.calls
[11:01:45.781]             `[[` <- base::`[[`
[11:01:45.781]             `+` <- base::`+`
[11:01:45.781]             `<<-` <- base::`<<-`
[11:01:45.781]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:45.781]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:45.781]                   3L)]
[11:01:45.781]             }
[11:01:45.781]             function(cond) {
[11:01:45.781]                 is_error <- inherits(cond, "error")
[11:01:45.781]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:45.781]                   NULL)
[11:01:45.781]                 if (is_error) {
[11:01:45.781]                   sessionInformation <- function() {
[11:01:45.781]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:45.781]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:45.781]                       search = base::search(), system = base::Sys.info())
[11:01:45.781]                   }
[11:01:45.781]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.781]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:45.781]                     cond$call), session = sessionInformation(), 
[11:01:45.781]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:45.781]                   signalCondition(cond)
[11:01:45.781]                 }
[11:01:45.781]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:45.781]                 "immediateCondition"))) {
[11:01:45.781]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:45.781]                   ...future.conditions[[length(...future.conditions) + 
[11:01:45.781]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:45.781]                   if (TRUE && !signal) {
[11:01:45.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.781]                     {
[11:01:45.781]                       inherits <- base::inherits
[11:01:45.781]                       invokeRestart <- base::invokeRestart
[11:01:45.781]                       is.null <- base::is.null
[11:01:45.781]                       muffled <- FALSE
[11:01:45.781]                       if (inherits(cond, "message")) {
[11:01:45.781]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.781]                         if (muffled) 
[11:01:45.781]                           invokeRestart("muffleMessage")
[11:01:45.781]                       }
[11:01:45.781]                       else if (inherits(cond, "warning")) {
[11:01:45.781]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.781]                         if (muffled) 
[11:01:45.781]                           invokeRestart("muffleWarning")
[11:01:45.781]                       }
[11:01:45.781]                       else if (inherits(cond, "condition")) {
[11:01:45.781]                         if (!is.null(pattern)) {
[11:01:45.781]                           computeRestarts <- base::computeRestarts
[11:01:45.781]                           grepl <- base::grepl
[11:01:45.781]                           restarts <- computeRestarts(cond)
[11:01:45.781]                           for (restart in restarts) {
[11:01:45.781]                             name <- restart$name
[11:01:45.781]                             if (is.null(name)) 
[11:01:45.781]                               next
[11:01:45.781]                             if (!grepl(pattern, name)) 
[11:01:45.781]                               next
[11:01:45.781]                             invokeRestart(restart)
[11:01:45.781]                             muffled <- TRUE
[11:01:45.781]                             break
[11:01:45.781]                           }
[11:01:45.781]                         }
[11:01:45.781]                       }
[11:01:45.781]                       invisible(muffled)
[11:01:45.781]                     }
[11:01:45.781]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.781]                   }
[11:01:45.781]                 }
[11:01:45.781]                 else {
[11:01:45.781]                   if (TRUE) {
[11:01:45.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:45.781]                     {
[11:01:45.781]                       inherits <- base::inherits
[11:01:45.781]                       invokeRestart <- base::invokeRestart
[11:01:45.781]                       is.null <- base::is.null
[11:01:45.781]                       muffled <- FALSE
[11:01:45.781]                       if (inherits(cond, "message")) {
[11:01:45.781]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:45.781]                         if (muffled) 
[11:01:45.781]                           invokeRestart("muffleMessage")
[11:01:45.781]                       }
[11:01:45.781]                       else if (inherits(cond, "warning")) {
[11:01:45.781]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:45.781]                         if (muffled) 
[11:01:45.781]                           invokeRestart("muffleWarning")
[11:01:45.781]                       }
[11:01:45.781]                       else if (inherits(cond, "condition")) {
[11:01:45.781]                         if (!is.null(pattern)) {
[11:01:45.781]                           computeRestarts <- base::computeRestarts
[11:01:45.781]                           grepl <- base::grepl
[11:01:45.781]                           restarts <- computeRestarts(cond)
[11:01:45.781]                           for (restart in restarts) {
[11:01:45.781]                             name <- restart$name
[11:01:45.781]                             if (is.null(name)) 
[11:01:45.781]                               next
[11:01:45.781]                             if (!grepl(pattern, name)) 
[11:01:45.781]                               next
[11:01:45.781]                             invokeRestart(restart)
[11:01:45.781]                             muffled <- TRUE
[11:01:45.781]                             break
[11:01:45.781]                           }
[11:01:45.781]                         }
[11:01:45.781]                       }
[11:01:45.781]                       invisible(muffled)
[11:01:45.781]                     }
[11:01:45.781]                     muffleCondition(cond, pattern = "^muffle")
[11:01:45.781]                   }
[11:01:45.781]                 }
[11:01:45.781]             }
[11:01:45.781]         }))
[11:01:45.781]     }, error = function(ex) {
[11:01:45.781]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:45.781]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:45.781]                 ...future.rng), started = ...future.startTime, 
[11:01:45.781]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:45.781]             version = "1.8"), class = "FutureResult")
[11:01:45.781]     }, finally = {
[11:01:45.781]         if (!identical(...future.workdir, getwd())) 
[11:01:45.781]             setwd(...future.workdir)
[11:01:45.781]         {
[11:01:45.781]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:45.781]                 ...future.oldOptions$nwarnings <- NULL
[11:01:45.781]             }
[11:01:45.781]             base::options(...future.oldOptions)
[11:01:45.781]             if (.Platform$OS.type == "windows") {
[11:01:45.781]                 old_names <- names(...future.oldEnvVars)
[11:01:45.781]                 envs <- base::Sys.getenv()
[11:01:45.781]                 names <- names(envs)
[11:01:45.781]                 common <- intersect(names, old_names)
[11:01:45.781]                 added <- setdiff(names, old_names)
[11:01:45.781]                 removed <- setdiff(old_names, names)
[11:01:45.781]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:45.781]                   envs[common]]
[11:01:45.781]                 NAMES <- toupper(changed)
[11:01:45.781]                 args <- list()
[11:01:45.781]                 for (kk in seq_along(NAMES)) {
[11:01:45.781]                   name <- changed[[kk]]
[11:01:45.781]                   NAME <- NAMES[[kk]]
[11:01:45.781]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.781]                     next
[11:01:45.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.781]                 }
[11:01:45.781]                 NAMES <- toupper(added)
[11:01:45.781]                 for (kk in seq_along(NAMES)) {
[11:01:45.781]                   name <- added[[kk]]
[11:01:45.781]                   NAME <- NAMES[[kk]]
[11:01:45.781]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.781]                     next
[11:01:45.781]                   args[[name]] <- ""
[11:01:45.781]                 }
[11:01:45.781]                 NAMES <- toupper(removed)
[11:01:45.781]                 for (kk in seq_along(NAMES)) {
[11:01:45.781]                   name <- removed[[kk]]
[11:01:45.781]                   NAME <- NAMES[[kk]]
[11:01:45.781]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:45.781]                     next
[11:01:45.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:45.781]                 }
[11:01:45.781]                 if (length(args) > 0) 
[11:01:45.781]                   base::do.call(base::Sys.setenv, args = args)
[11:01:45.781]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:45.781]             }
[11:01:45.781]             else {
[11:01:45.781]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:45.781]             }
[11:01:45.781]             {
[11:01:45.781]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:45.781]                   0L) {
[11:01:45.781]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:45.781]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:45.781]                   base::options(opts)
[11:01:45.781]                 }
[11:01:45.781]                 {
[11:01:45.781]                   {
[11:01:45.781]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:45.781]                     NULL
[11:01:45.781]                   }
[11:01:45.781]                   options(future.plan = NULL)
[11:01:45.781]                   if (is.na(NA_character_)) 
[11:01:45.781]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:45.781]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:45.781]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:45.781]                     .init = FALSE)
[11:01:45.781]                 }
[11:01:45.781]             }
[11:01:45.781]         }
[11:01:45.781]     })
[11:01:45.781]     if (TRUE) {
[11:01:45.781]         base::sink(type = "output", split = FALSE)
[11:01:45.781]         if (TRUE) {
[11:01:45.781]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:45.781]         }
[11:01:45.781]         else {
[11:01:45.781]             ...future.result["stdout"] <- base::list(NULL)
[11:01:45.781]         }
[11:01:45.781]         base::close(...future.stdout)
[11:01:45.781]         ...future.stdout <- NULL
[11:01:45.781]     }
[11:01:45.781]     ...future.result$conditions <- ...future.conditions
[11:01:45.781]     ...future.result$finished <- base::Sys.time()
[11:01:45.781]     ...future.result
[11:01:45.781] }
[11:01:45.784] Exporting 2 global objects (809 bytes) to cluster node #1 ...
[11:01:45.784] Exporting ‘env’ (459 bytes) to cluster node #1 ...
[11:01:45.784] Exporting ‘env’ (459 bytes) to cluster node #1 ... DONE
[11:01:45.785] Exporting ‘b’ (40 bytes) to cluster node #1 ...
[11:01:45.785] Exporting ‘b’ (40 bytes) to cluster node #1 ... DONE
[11:01:45.785] Exporting 2 global objects (809 bytes) to cluster node #1 ... DONE
[11:01:45.785] MultisessionFuture started
[11:01:45.786] - Launch lazy future ... done
[11:01:45.786] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[11:01:45.786] result() for ClusterFuture ...
[11:01:45.786] receiveMessageFromWorker() for ClusterFuture ...
[11:01:45.786] - Validating connection of MultisessionFuture
[11:01:45.827] - received message: FutureResult
[11:01:45.827] - Received FutureResult
[11:01:45.827] - Erased future from FutureRegistry
[11:01:45.827] result() for ClusterFuture ...
[11:01:45.828] - result already collected: FutureResult
[11:01:45.828] result() for ClusterFuture ... done
[11:01:45.828] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:45.828] result() for ClusterFuture ... done
[11:01:45.828] result() for ClusterFuture ...
[11:01:45.828] - result already collected: FutureResult
[11:01:45.828] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[11:01:45.829] plan(): Setting new future strategy stack:
[11:01:45.829] List of future strategies:
[11:01:45.829] 1. FutureStrategy:
[11:01:45.829]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:45.829]    - tweaked: FALSE
[11:01:45.829]    - call: future::plan(oplan)
[11:01:45.830] plan(): nbrOfWorkers() = 1
> 
