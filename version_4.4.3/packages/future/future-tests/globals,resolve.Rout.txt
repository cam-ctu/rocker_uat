
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:28:07.062] plan(): Setting new future strategy stack:
[08:28:07.063] List of future strategies:
[08:28:07.063] 1. sequential:
[08:28:07.063]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:07.063]    - tweaked: FALSE
[08:28:07.063]    - call: future::plan("sequential")
[08:28:07.076] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[08:28:07.096] plan(): Setting new future strategy stack:
[08:28:07.096] List of future strategies:
[08:28:07.096] 1. multisession:
[08:28:07.096]    - args: function (..., workers = 2L, envir = parent.frame())
[08:28:07.096]    - tweaked: TRUE
[08:28:07.096]    - call: plan(multisession, workers = 2L)
[08:28:07.107] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:07.107] multisession:
[08:28:07.107] - args: function (..., workers = 2L, envir = parent.frame())
[08:28:07.107] - tweaked: TRUE
[08:28:07.107] - call: plan(multisession, workers = 2L)
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:07.109] getGlobalsAndPackages() ...
[08:28:07.109] Not searching for globals
[08:28:07.109] - globals: [0] <none>
[08:28:07.109] getGlobalsAndPackages() ... DONE
[08:28:07.596] Packages needed by the future expression (n = 0): <none>
[08:28:07.596] Packages needed by future strategies (n = 0): <none>
[08:28:07.597] {
[08:28:07.597]     {
[08:28:07.597]         {
[08:28:07.597]             ...future.startTime <- base::Sys.time()
[08:28:07.597]             {
[08:28:07.597]                 {
[08:28:07.597]                   {
[08:28:07.597]                     {
[08:28:07.597]                       base::local({
[08:28:07.597]                         has_future <- base::requireNamespace("future", 
[08:28:07.597]                           quietly = TRUE)
[08:28:07.597]                         if (has_future) {
[08:28:07.597]                           ns <- base::getNamespace("future")
[08:28:07.597]                           version <- ns[[".package"]][["version"]]
[08:28:07.597]                           if (is.null(version)) 
[08:28:07.597]                             version <- utils::packageVersion("future")
[08:28:07.597]                         }
[08:28:07.597]                         else {
[08:28:07.597]                           version <- NULL
[08:28:07.597]                         }
[08:28:07.597]                         if (!has_future || version < "1.8.0") {
[08:28:07.597]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:07.597]                             "", base::R.version$version.string), 
[08:28:07.597]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:07.597]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:07.597]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:07.597]                               "release", "version")], collapse = " "), 
[08:28:07.597]                             hostname = base::Sys.info()[["nodename"]])
[08:28:07.597]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:07.597]                             info)
[08:28:07.597]                           info <- base::paste(info, collapse = "; ")
[08:28:07.597]                           if (!has_future) {
[08:28:07.597]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:07.597]                               info)
[08:28:07.597]                           }
[08:28:07.597]                           else {
[08:28:07.597]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:07.597]                               info, version)
[08:28:07.597]                           }
[08:28:07.597]                           base::stop(msg)
[08:28:07.597]                         }
[08:28:07.597]                       })
[08:28:07.597]                     }
[08:28:07.597]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:07.597]                     base::options(mc.cores = 1L)
[08:28:07.597]                   }
[08:28:07.597]                   ...future.strategy.old <- future::plan("list")
[08:28:07.597]                   options(future.plan = NULL)
[08:28:07.597]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:07.597]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:07.597]                 }
[08:28:07.597]                 ...future.workdir <- getwd()
[08:28:07.597]             }
[08:28:07.597]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:07.597]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:07.597]         }
[08:28:07.597]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:07.597]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:07.597]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:07.597]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:07.597]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:07.597]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:07.597]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:07.597]             base::names(...future.oldOptions))
[08:28:07.597]     }
[08:28:07.597]     if (FALSE) {
[08:28:07.597]     }
[08:28:07.597]     else {
[08:28:07.597]         if (TRUE) {
[08:28:07.597]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:07.597]                 open = "w")
[08:28:07.597]         }
[08:28:07.597]         else {
[08:28:07.597]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:07.597]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:07.597]         }
[08:28:07.597]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:07.597]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:07.597]             base::sink(type = "output", split = FALSE)
[08:28:07.597]             base::close(...future.stdout)
[08:28:07.597]         }, add = TRUE)
[08:28:07.597]     }
[08:28:07.597]     ...future.frame <- base::sys.nframe()
[08:28:07.597]     ...future.conditions <- base::list()
[08:28:07.597]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:07.597]     if (FALSE) {
[08:28:07.597]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:07.597]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:07.597]     }
[08:28:07.597]     ...future.result <- base::tryCatch({
[08:28:07.597]         base::withCallingHandlers({
[08:28:07.597]             ...future.value <- base::withVisible(base::local({
[08:28:07.597]                 ...future.makeSendCondition <- base::local({
[08:28:07.597]                   sendCondition <- NULL
[08:28:07.597]                   function(frame = 1L) {
[08:28:07.597]                     if (is.function(sendCondition)) 
[08:28:07.597]                       return(sendCondition)
[08:28:07.597]                     ns <- getNamespace("parallel")
[08:28:07.597]                     if (exists("sendData", mode = "function", 
[08:28:07.597]                       envir = ns)) {
[08:28:07.597]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:07.597]                         envir = ns)
[08:28:07.597]                       envir <- sys.frame(frame)
[08:28:07.597]                       master <- NULL
[08:28:07.597]                       while (!identical(envir, .GlobalEnv) && 
[08:28:07.597]                         !identical(envir, emptyenv())) {
[08:28:07.597]                         if (exists("master", mode = "list", envir = envir, 
[08:28:07.597]                           inherits = FALSE)) {
[08:28:07.597]                           master <- get("master", mode = "list", 
[08:28:07.597]                             envir = envir, inherits = FALSE)
[08:28:07.597]                           if (inherits(master, c("SOCKnode", 
[08:28:07.597]                             "SOCK0node"))) {
[08:28:07.597]                             sendCondition <<- function(cond) {
[08:28:07.597]                               data <- list(type = "VALUE", value = cond, 
[08:28:07.597]                                 success = TRUE)
[08:28:07.597]                               parallel_sendData(master, data)
[08:28:07.597]                             }
[08:28:07.597]                             return(sendCondition)
[08:28:07.597]                           }
[08:28:07.597]                         }
[08:28:07.597]                         frame <- frame + 1L
[08:28:07.597]                         envir <- sys.frame(frame)
[08:28:07.597]                       }
[08:28:07.597]                     }
[08:28:07.597]                     sendCondition <<- function(cond) NULL
[08:28:07.597]                   }
[08:28:07.597]                 })
[08:28:07.597]                 withCallingHandlers({
[08:28:07.597]                   NA
[08:28:07.597]                 }, immediateCondition = function(cond) {
[08:28:07.597]                   sendCondition <- ...future.makeSendCondition()
[08:28:07.597]                   sendCondition(cond)
[08:28:07.597]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.597]                   {
[08:28:07.597]                     inherits <- base::inherits
[08:28:07.597]                     invokeRestart <- base::invokeRestart
[08:28:07.597]                     is.null <- base::is.null
[08:28:07.597]                     muffled <- FALSE
[08:28:07.597]                     if (inherits(cond, "message")) {
[08:28:07.597]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:07.597]                       if (muffled) 
[08:28:07.597]                         invokeRestart("muffleMessage")
[08:28:07.597]                     }
[08:28:07.597]                     else if (inherits(cond, "warning")) {
[08:28:07.597]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:07.597]                       if (muffled) 
[08:28:07.597]                         invokeRestart("muffleWarning")
[08:28:07.597]                     }
[08:28:07.597]                     else if (inherits(cond, "condition")) {
[08:28:07.597]                       if (!is.null(pattern)) {
[08:28:07.597]                         computeRestarts <- base::computeRestarts
[08:28:07.597]                         grepl <- base::grepl
[08:28:07.597]                         restarts <- computeRestarts(cond)
[08:28:07.597]                         for (restart in restarts) {
[08:28:07.597]                           name <- restart$name
[08:28:07.597]                           if (is.null(name)) 
[08:28:07.597]                             next
[08:28:07.597]                           if (!grepl(pattern, name)) 
[08:28:07.597]                             next
[08:28:07.597]                           invokeRestart(restart)
[08:28:07.597]                           muffled <- TRUE
[08:28:07.597]                           break
[08:28:07.597]                         }
[08:28:07.597]                       }
[08:28:07.597]                     }
[08:28:07.597]                     invisible(muffled)
[08:28:07.597]                   }
[08:28:07.597]                   muffleCondition(cond)
[08:28:07.597]                 })
[08:28:07.597]             }))
[08:28:07.597]             future::FutureResult(value = ...future.value$value, 
[08:28:07.597]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:07.597]                   ...future.rng), globalenv = if (FALSE) 
[08:28:07.597]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:07.597]                     ...future.globalenv.names))
[08:28:07.597]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:07.597]         }, condition = base::local({
[08:28:07.597]             c <- base::c
[08:28:07.597]             inherits <- base::inherits
[08:28:07.597]             invokeRestart <- base::invokeRestart
[08:28:07.597]             length <- base::length
[08:28:07.597]             list <- base::list
[08:28:07.597]             seq.int <- base::seq.int
[08:28:07.597]             signalCondition <- base::signalCondition
[08:28:07.597]             sys.calls <- base::sys.calls
[08:28:07.597]             `[[` <- base::`[[`
[08:28:07.597]             `+` <- base::`+`
[08:28:07.597]             `<<-` <- base::`<<-`
[08:28:07.597]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:07.597]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:07.597]                   3L)]
[08:28:07.597]             }
[08:28:07.597]             function(cond) {
[08:28:07.597]                 is_error <- inherits(cond, "error")
[08:28:07.597]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:07.597]                   NULL)
[08:28:07.597]                 if (is_error) {
[08:28:07.597]                   sessionInformation <- function() {
[08:28:07.597]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:07.597]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:07.597]                       search = base::search(), system = base::Sys.info())
[08:28:07.597]                   }
[08:28:07.597]                   ...future.conditions[[length(...future.conditions) + 
[08:28:07.597]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:07.597]                     cond$call), session = sessionInformation(), 
[08:28:07.597]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:07.597]                   signalCondition(cond)
[08:28:07.597]                 }
[08:28:07.597]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:07.597]                 "immediateCondition"))) {
[08:28:07.597]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:07.597]                   ...future.conditions[[length(...future.conditions) + 
[08:28:07.597]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:07.597]                   if (TRUE && !signal) {
[08:28:07.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.597]                     {
[08:28:07.597]                       inherits <- base::inherits
[08:28:07.597]                       invokeRestart <- base::invokeRestart
[08:28:07.597]                       is.null <- base::is.null
[08:28:07.597]                       muffled <- FALSE
[08:28:07.597]                       if (inherits(cond, "message")) {
[08:28:07.597]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:07.597]                         if (muffled) 
[08:28:07.597]                           invokeRestart("muffleMessage")
[08:28:07.597]                       }
[08:28:07.597]                       else if (inherits(cond, "warning")) {
[08:28:07.597]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:07.597]                         if (muffled) 
[08:28:07.597]                           invokeRestart("muffleWarning")
[08:28:07.597]                       }
[08:28:07.597]                       else if (inherits(cond, "condition")) {
[08:28:07.597]                         if (!is.null(pattern)) {
[08:28:07.597]                           computeRestarts <- base::computeRestarts
[08:28:07.597]                           grepl <- base::grepl
[08:28:07.597]                           restarts <- computeRestarts(cond)
[08:28:07.597]                           for (restart in restarts) {
[08:28:07.597]                             name <- restart$name
[08:28:07.597]                             if (is.null(name)) 
[08:28:07.597]                               next
[08:28:07.597]                             if (!grepl(pattern, name)) 
[08:28:07.597]                               next
[08:28:07.597]                             invokeRestart(restart)
[08:28:07.597]                             muffled <- TRUE
[08:28:07.597]                             break
[08:28:07.597]                           }
[08:28:07.597]                         }
[08:28:07.597]                       }
[08:28:07.597]                       invisible(muffled)
[08:28:07.597]                     }
[08:28:07.597]                     muffleCondition(cond, pattern = "^muffle")
[08:28:07.597]                   }
[08:28:07.597]                 }
[08:28:07.597]                 else {
[08:28:07.597]                   if (TRUE) {
[08:28:07.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.597]                     {
[08:28:07.597]                       inherits <- base::inherits
[08:28:07.597]                       invokeRestart <- base::invokeRestart
[08:28:07.597]                       is.null <- base::is.null
[08:28:07.597]                       muffled <- FALSE
[08:28:07.597]                       if (inherits(cond, "message")) {
[08:28:07.597]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:07.597]                         if (muffled) 
[08:28:07.597]                           invokeRestart("muffleMessage")
[08:28:07.597]                       }
[08:28:07.597]                       else if (inherits(cond, "warning")) {
[08:28:07.597]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:07.597]                         if (muffled) 
[08:28:07.597]                           invokeRestart("muffleWarning")
[08:28:07.597]                       }
[08:28:07.597]                       else if (inherits(cond, "condition")) {
[08:28:07.597]                         if (!is.null(pattern)) {
[08:28:07.597]                           computeRestarts <- base::computeRestarts
[08:28:07.597]                           grepl <- base::grepl
[08:28:07.597]                           restarts <- computeRestarts(cond)
[08:28:07.597]                           for (restart in restarts) {
[08:28:07.597]                             name <- restart$name
[08:28:07.597]                             if (is.null(name)) 
[08:28:07.597]                               next
[08:28:07.597]                             if (!grepl(pattern, name)) 
[08:28:07.597]                               next
[08:28:07.597]                             invokeRestart(restart)
[08:28:07.597]                             muffled <- TRUE
[08:28:07.597]                             break
[08:28:07.597]                           }
[08:28:07.597]                         }
[08:28:07.597]                       }
[08:28:07.597]                       invisible(muffled)
[08:28:07.597]                     }
[08:28:07.597]                     muffleCondition(cond, pattern = "^muffle")
[08:28:07.597]                   }
[08:28:07.597]                 }
[08:28:07.597]             }
[08:28:07.597]         }))
[08:28:07.597]     }, error = function(ex) {
[08:28:07.597]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:07.597]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:07.597]                 ...future.rng), started = ...future.startTime, 
[08:28:07.597]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:07.597]             version = "1.8"), class = "FutureResult")
[08:28:07.597]     }, finally = {
[08:28:07.597]         if (!identical(...future.workdir, getwd())) 
[08:28:07.597]             setwd(...future.workdir)
[08:28:07.597]         {
[08:28:07.597]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:07.597]                 ...future.oldOptions$nwarnings <- NULL
[08:28:07.597]             }
[08:28:07.597]             base::options(...future.oldOptions)
[08:28:07.597]             if (.Platform$OS.type == "windows") {
[08:28:07.597]                 old_names <- names(...future.oldEnvVars)
[08:28:07.597]                 envs <- base::Sys.getenv()
[08:28:07.597]                 names <- names(envs)
[08:28:07.597]                 common <- intersect(names, old_names)
[08:28:07.597]                 added <- setdiff(names, old_names)
[08:28:07.597]                 removed <- setdiff(old_names, names)
[08:28:07.597]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:07.597]                   envs[common]]
[08:28:07.597]                 NAMES <- toupper(changed)
[08:28:07.597]                 args <- list()
[08:28:07.597]                 for (kk in seq_along(NAMES)) {
[08:28:07.597]                   name <- changed[[kk]]
[08:28:07.597]                   NAME <- NAMES[[kk]]
[08:28:07.597]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.597]                     next
[08:28:07.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:07.597]                 }
[08:28:07.597]                 NAMES <- toupper(added)
[08:28:07.597]                 for (kk in seq_along(NAMES)) {
[08:28:07.597]                   name <- added[[kk]]
[08:28:07.597]                   NAME <- NAMES[[kk]]
[08:28:07.597]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.597]                     next
[08:28:07.597]                   args[[name]] <- ""
[08:28:07.597]                 }
[08:28:07.597]                 NAMES <- toupper(removed)
[08:28:07.597]                 for (kk in seq_along(NAMES)) {
[08:28:07.597]                   name <- removed[[kk]]
[08:28:07.597]                   NAME <- NAMES[[kk]]
[08:28:07.597]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.597]                     next
[08:28:07.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:07.597]                 }
[08:28:07.597]                 if (length(args) > 0) 
[08:28:07.597]                   base::do.call(base::Sys.setenv, args = args)
[08:28:07.597]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:07.597]             }
[08:28:07.597]             else {
[08:28:07.597]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:07.597]             }
[08:28:07.597]             {
[08:28:07.597]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:07.597]                   0L) {
[08:28:07.597]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:07.597]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:07.597]                   base::options(opts)
[08:28:07.597]                 }
[08:28:07.597]                 {
[08:28:07.597]                   {
[08:28:07.597]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:07.597]                     NULL
[08:28:07.597]                   }
[08:28:07.597]                   options(future.plan = NULL)
[08:28:07.597]                   if (is.na(NA_character_)) 
[08:28:07.597]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:07.597]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:07.597]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:07.597]                     .init = FALSE)
[08:28:07.597]                 }
[08:28:07.597]             }
[08:28:07.597]         }
[08:28:07.597]     })
[08:28:07.597]     if (TRUE) {
[08:28:07.597]         base::sink(type = "output", split = FALSE)
[08:28:07.597]         if (TRUE) {
[08:28:07.597]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:07.597]         }
[08:28:07.597]         else {
[08:28:07.597]             ...future.result["stdout"] <- base::list(NULL)
[08:28:07.597]         }
[08:28:07.597]         base::close(...future.stdout)
[08:28:07.597]         ...future.stdout <- NULL
[08:28:07.597]     }
[08:28:07.597]     ...future.result$conditions <- ...future.conditions
[08:28:07.597]     ...future.result$finished <- base::Sys.time()
[08:28:07.597]     ...future.result
[08:28:07.597] }
[08:28:07.651] MultisessionFuture started
[08:28:07.652] result() for ClusterFuture ...
[08:28:07.653] receiveMessageFromWorker() for ClusterFuture ...
[08:28:07.653] - Validating connection of MultisessionFuture
[08:28:07.684] - received message: FutureResult
[08:28:07.685] - Received FutureResult
[08:28:07.687] - Erased future from FutureRegistry
[08:28:07.687] result() for ClusterFuture ...
[08:28:07.688] - result already collected: FutureResult
[08:28:07.688] result() for ClusterFuture ... done
[08:28:07.688] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:07.688] result() for ClusterFuture ... done
[08:28:07.688] result() for ClusterFuture ...
[08:28:07.688] - result already collected: FutureResult
[08:28:07.688] result() for ClusterFuture ... done
[08:28:07.688] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:07.688] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:07.690] getGlobalsAndPackages() ...
[08:28:07.690] Searching for globals...
[08:28:07.692] - globals found: [1] ‘{’
[08:28:07.693] Searching for globals ... DONE
[08:28:07.693] Resolving globals: TRUE
[08:28:07.693] Resolving any globals that are futures ...
[08:28:07.693] - globals: [1] ‘{’
[08:28:07.693] Resolving any globals that are futures ... DONE
[08:28:07.693] 
[08:28:07.693] 
[08:28:07.694] getGlobalsAndPackages() ... DONE
[08:28:07.694] run() for ‘Future’ ...
[08:28:07.694] - state: ‘created’
[08:28:07.694] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:07.707] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:07.707] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:07.707]   - Field: ‘node’
[08:28:07.708]   - Field: ‘label’
[08:28:07.708]   - Field: ‘local’
[08:28:07.708]   - Field: ‘owner’
[08:28:07.708]   - Field: ‘envir’
[08:28:07.708]   - Field: ‘workers’
[08:28:07.708]   - Field: ‘packages’
[08:28:07.708]   - Field: ‘gc’
[08:28:07.708]   - Field: ‘conditions’
[08:28:07.708]   - Field: ‘persistent’
[08:28:07.708]   - Field: ‘expr’
[08:28:07.708]   - Field: ‘uuid’
[08:28:07.708]   - Field: ‘seed’
[08:28:07.709]   - Field: ‘version’
[08:28:07.709]   - Field: ‘result’
[08:28:07.709]   - Field: ‘asynchronous’
[08:28:07.709]   - Field: ‘calls’
[08:28:07.709]   - Field: ‘globals’
[08:28:07.709]   - Field: ‘stdout’
[08:28:07.709]   - Field: ‘earlySignal’
[08:28:07.709]   - Field: ‘lazy’
[08:28:07.709]   - Field: ‘state’
[08:28:07.709] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:07.709] - Launch lazy future ...
[08:28:07.710] Packages needed by the future expression (n = 0): <none>
[08:28:07.710] Packages needed by future strategies (n = 0): <none>
[08:28:07.710] {
[08:28:07.710]     {
[08:28:07.710]         {
[08:28:07.710]             ...future.startTime <- base::Sys.time()
[08:28:07.710]             {
[08:28:07.710]                 {
[08:28:07.710]                   {
[08:28:07.710]                     {
[08:28:07.710]                       base::local({
[08:28:07.710]                         has_future <- base::requireNamespace("future", 
[08:28:07.710]                           quietly = TRUE)
[08:28:07.710]                         if (has_future) {
[08:28:07.710]                           ns <- base::getNamespace("future")
[08:28:07.710]                           version <- ns[[".package"]][["version"]]
[08:28:07.710]                           if (is.null(version)) 
[08:28:07.710]                             version <- utils::packageVersion("future")
[08:28:07.710]                         }
[08:28:07.710]                         else {
[08:28:07.710]                           version <- NULL
[08:28:07.710]                         }
[08:28:07.710]                         if (!has_future || version < "1.8.0") {
[08:28:07.710]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:07.710]                             "", base::R.version$version.string), 
[08:28:07.710]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:07.710]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:07.710]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:07.710]                               "release", "version")], collapse = " "), 
[08:28:07.710]                             hostname = base::Sys.info()[["nodename"]])
[08:28:07.710]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:07.710]                             info)
[08:28:07.710]                           info <- base::paste(info, collapse = "; ")
[08:28:07.710]                           if (!has_future) {
[08:28:07.710]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:07.710]                               info)
[08:28:07.710]                           }
[08:28:07.710]                           else {
[08:28:07.710]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:07.710]                               info, version)
[08:28:07.710]                           }
[08:28:07.710]                           base::stop(msg)
[08:28:07.710]                         }
[08:28:07.710]                       })
[08:28:07.710]                     }
[08:28:07.710]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:07.710]                     base::options(mc.cores = 1L)
[08:28:07.710]                   }
[08:28:07.710]                   ...future.strategy.old <- future::plan("list")
[08:28:07.710]                   options(future.plan = NULL)
[08:28:07.710]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:07.710]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:07.710]                 }
[08:28:07.710]                 ...future.workdir <- getwd()
[08:28:07.710]             }
[08:28:07.710]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:07.710]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:07.710]         }
[08:28:07.710]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:07.710]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:07.710]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:07.710]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:07.710]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:07.710]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:07.710]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:07.710]             base::names(...future.oldOptions))
[08:28:07.710]     }
[08:28:07.710]     if (FALSE) {
[08:28:07.710]     }
[08:28:07.710]     else {
[08:28:07.710]         if (TRUE) {
[08:28:07.710]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:07.710]                 open = "w")
[08:28:07.710]         }
[08:28:07.710]         else {
[08:28:07.710]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:07.710]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:07.710]         }
[08:28:07.710]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:07.710]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:07.710]             base::sink(type = "output", split = FALSE)
[08:28:07.710]             base::close(...future.stdout)
[08:28:07.710]         }, add = TRUE)
[08:28:07.710]     }
[08:28:07.710]     ...future.frame <- base::sys.nframe()
[08:28:07.710]     ...future.conditions <- base::list()
[08:28:07.710]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:07.710]     if (FALSE) {
[08:28:07.710]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:07.710]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:07.710]     }
[08:28:07.710]     ...future.result <- base::tryCatch({
[08:28:07.710]         base::withCallingHandlers({
[08:28:07.710]             ...future.value <- base::withVisible(base::local({
[08:28:07.710]                 ...future.makeSendCondition <- base::local({
[08:28:07.710]                   sendCondition <- NULL
[08:28:07.710]                   function(frame = 1L) {
[08:28:07.710]                     if (is.function(sendCondition)) 
[08:28:07.710]                       return(sendCondition)
[08:28:07.710]                     ns <- getNamespace("parallel")
[08:28:07.710]                     if (exists("sendData", mode = "function", 
[08:28:07.710]                       envir = ns)) {
[08:28:07.710]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:07.710]                         envir = ns)
[08:28:07.710]                       envir <- sys.frame(frame)
[08:28:07.710]                       master <- NULL
[08:28:07.710]                       while (!identical(envir, .GlobalEnv) && 
[08:28:07.710]                         !identical(envir, emptyenv())) {
[08:28:07.710]                         if (exists("master", mode = "list", envir = envir, 
[08:28:07.710]                           inherits = FALSE)) {
[08:28:07.710]                           master <- get("master", mode = "list", 
[08:28:07.710]                             envir = envir, inherits = FALSE)
[08:28:07.710]                           if (inherits(master, c("SOCKnode", 
[08:28:07.710]                             "SOCK0node"))) {
[08:28:07.710]                             sendCondition <<- function(cond) {
[08:28:07.710]                               data <- list(type = "VALUE", value = cond, 
[08:28:07.710]                                 success = TRUE)
[08:28:07.710]                               parallel_sendData(master, data)
[08:28:07.710]                             }
[08:28:07.710]                             return(sendCondition)
[08:28:07.710]                           }
[08:28:07.710]                         }
[08:28:07.710]                         frame <- frame + 1L
[08:28:07.710]                         envir <- sys.frame(frame)
[08:28:07.710]                       }
[08:28:07.710]                     }
[08:28:07.710]                     sendCondition <<- function(cond) NULL
[08:28:07.710]                   }
[08:28:07.710]                 })
[08:28:07.710]                 withCallingHandlers({
[08:28:07.710]                   {
[08:28:07.710]                     5
[08:28:07.710]                   }
[08:28:07.710]                 }, immediateCondition = function(cond) {
[08:28:07.710]                   sendCondition <- ...future.makeSendCondition()
[08:28:07.710]                   sendCondition(cond)
[08:28:07.710]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.710]                   {
[08:28:07.710]                     inherits <- base::inherits
[08:28:07.710]                     invokeRestart <- base::invokeRestart
[08:28:07.710]                     is.null <- base::is.null
[08:28:07.710]                     muffled <- FALSE
[08:28:07.710]                     if (inherits(cond, "message")) {
[08:28:07.710]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:07.710]                       if (muffled) 
[08:28:07.710]                         invokeRestart("muffleMessage")
[08:28:07.710]                     }
[08:28:07.710]                     else if (inherits(cond, "warning")) {
[08:28:07.710]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:07.710]                       if (muffled) 
[08:28:07.710]                         invokeRestart("muffleWarning")
[08:28:07.710]                     }
[08:28:07.710]                     else if (inherits(cond, "condition")) {
[08:28:07.710]                       if (!is.null(pattern)) {
[08:28:07.710]                         computeRestarts <- base::computeRestarts
[08:28:07.710]                         grepl <- base::grepl
[08:28:07.710]                         restarts <- computeRestarts(cond)
[08:28:07.710]                         for (restart in restarts) {
[08:28:07.710]                           name <- restart$name
[08:28:07.710]                           if (is.null(name)) 
[08:28:07.710]                             next
[08:28:07.710]                           if (!grepl(pattern, name)) 
[08:28:07.710]                             next
[08:28:07.710]                           invokeRestart(restart)
[08:28:07.710]                           muffled <- TRUE
[08:28:07.710]                           break
[08:28:07.710]                         }
[08:28:07.710]                       }
[08:28:07.710]                     }
[08:28:07.710]                     invisible(muffled)
[08:28:07.710]                   }
[08:28:07.710]                   muffleCondition(cond)
[08:28:07.710]                 })
[08:28:07.710]             }))
[08:28:07.710]             future::FutureResult(value = ...future.value$value, 
[08:28:07.710]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:07.710]                   ...future.rng), globalenv = if (FALSE) 
[08:28:07.710]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:07.710]                     ...future.globalenv.names))
[08:28:07.710]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:07.710]         }, condition = base::local({
[08:28:07.710]             c <- base::c
[08:28:07.710]             inherits <- base::inherits
[08:28:07.710]             invokeRestart <- base::invokeRestart
[08:28:07.710]             length <- base::length
[08:28:07.710]             list <- base::list
[08:28:07.710]             seq.int <- base::seq.int
[08:28:07.710]             signalCondition <- base::signalCondition
[08:28:07.710]             sys.calls <- base::sys.calls
[08:28:07.710]             `[[` <- base::`[[`
[08:28:07.710]             `+` <- base::`+`
[08:28:07.710]             `<<-` <- base::`<<-`
[08:28:07.710]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:07.710]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:07.710]                   3L)]
[08:28:07.710]             }
[08:28:07.710]             function(cond) {
[08:28:07.710]                 is_error <- inherits(cond, "error")
[08:28:07.710]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:07.710]                   NULL)
[08:28:07.710]                 if (is_error) {
[08:28:07.710]                   sessionInformation <- function() {
[08:28:07.710]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:07.710]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:07.710]                       search = base::search(), system = base::Sys.info())
[08:28:07.710]                   }
[08:28:07.710]                   ...future.conditions[[length(...future.conditions) + 
[08:28:07.710]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:07.710]                     cond$call), session = sessionInformation(), 
[08:28:07.710]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:07.710]                   signalCondition(cond)
[08:28:07.710]                 }
[08:28:07.710]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:07.710]                 "immediateCondition"))) {
[08:28:07.710]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:07.710]                   ...future.conditions[[length(...future.conditions) + 
[08:28:07.710]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:07.710]                   if (TRUE && !signal) {
[08:28:07.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.710]                     {
[08:28:07.710]                       inherits <- base::inherits
[08:28:07.710]                       invokeRestart <- base::invokeRestart
[08:28:07.710]                       is.null <- base::is.null
[08:28:07.710]                       muffled <- FALSE
[08:28:07.710]                       if (inherits(cond, "message")) {
[08:28:07.710]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:07.710]                         if (muffled) 
[08:28:07.710]                           invokeRestart("muffleMessage")
[08:28:07.710]                       }
[08:28:07.710]                       else if (inherits(cond, "warning")) {
[08:28:07.710]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:07.710]                         if (muffled) 
[08:28:07.710]                           invokeRestart("muffleWarning")
[08:28:07.710]                       }
[08:28:07.710]                       else if (inherits(cond, "condition")) {
[08:28:07.710]                         if (!is.null(pattern)) {
[08:28:07.710]                           computeRestarts <- base::computeRestarts
[08:28:07.710]                           grepl <- base::grepl
[08:28:07.710]                           restarts <- computeRestarts(cond)
[08:28:07.710]                           for (restart in restarts) {
[08:28:07.710]                             name <- restart$name
[08:28:07.710]                             if (is.null(name)) 
[08:28:07.710]                               next
[08:28:07.710]                             if (!grepl(pattern, name)) 
[08:28:07.710]                               next
[08:28:07.710]                             invokeRestart(restart)
[08:28:07.710]                             muffled <- TRUE
[08:28:07.710]                             break
[08:28:07.710]                           }
[08:28:07.710]                         }
[08:28:07.710]                       }
[08:28:07.710]                       invisible(muffled)
[08:28:07.710]                     }
[08:28:07.710]                     muffleCondition(cond, pattern = "^muffle")
[08:28:07.710]                   }
[08:28:07.710]                 }
[08:28:07.710]                 else {
[08:28:07.710]                   if (TRUE) {
[08:28:07.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.710]                     {
[08:28:07.710]                       inherits <- base::inherits
[08:28:07.710]                       invokeRestart <- base::invokeRestart
[08:28:07.710]                       is.null <- base::is.null
[08:28:07.710]                       muffled <- FALSE
[08:28:07.710]                       if (inherits(cond, "message")) {
[08:28:07.710]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:07.710]                         if (muffled) 
[08:28:07.710]                           invokeRestart("muffleMessage")
[08:28:07.710]                       }
[08:28:07.710]                       else if (inherits(cond, "warning")) {
[08:28:07.710]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:07.710]                         if (muffled) 
[08:28:07.710]                           invokeRestart("muffleWarning")
[08:28:07.710]                       }
[08:28:07.710]                       else if (inherits(cond, "condition")) {
[08:28:07.710]                         if (!is.null(pattern)) {
[08:28:07.710]                           computeRestarts <- base::computeRestarts
[08:28:07.710]                           grepl <- base::grepl
[08:28:07.710]                           restarts <- computeRestarts(cond)
[08:28:07.710]                           for (restart in restarts) {
[08:28:07.710]                             name <- restart$name
[08:28:07.710]                             if (is.null(name)) 
[08:28:07.710]                               next
[08:28:07.710]                             if (!grepl(pattern, name)) 
[08:28:07.710]                               next
[08:28:07.710]                             invokeRestart(restart)
[08:28:07.710]                             muffled <- TRUE
[08:28:07.710]                             break
[08:28:07.710]                           }
[08:28:07.710]                         }
[08:28:07.710]                       }
[08:28:07.710]                       invisible(muffled)
[08:28:07.710]                     }
[08:28:07.710]                     muffleCondition(cond, pattern = "^muffle")
[08:28:07.710]                   }
[08:28:07.710]                 }
[08:28:07.710]             }
[08:28:07.710]         }))
[08:28:07.710]     }, error = function(ex) {
[08:28:07.710]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:07.710]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:07.710]                 ...future.rng), started = ...future.startTime, 
[08:28:07.710]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:07.710]             version = "1.8"), class = "FutureResult")
[08:28:07.710]     }, finally = {
[08:28:07.710]         if (!identical(...future.workdir, getwd())) 
[08:28:07.710]             setwd(...future.workdir)
[08:28:07.710]         {
[08:28:07.710]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:07.710]                 ...future.oldOptions$nwarnings <- NULL
[08:28:07.710]             }
[08:28:07.710]             base::options(...future.oldOptions)
[08:28:07.710]             if (.Platform$OS.type == "windows") {
[08:28:07.710]                 old_names <- names(...future.oldEnvVars)
[08:28:07.710]                 envs <- base::Sys.getenv()
[08:28:07.710]                 names <- names(envs)
[08:28:07.710]                 common <- intersect(names, old_names)
[08:28:07.710]                 added <- setdiff(names, old_names)
[08:28:07.710]                 removed <- setdiff(old_names, names)
[08:28:07.710]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:07.710]                   envs[common]]
[08:28:07.710]                 NAMES <- toupper(changed)
[08:28:07.710]                 args <- list()
[08:28:07.710]                 for (kk in seq_along(NAMES)) {
[08:28:07.710]                   name <- changed[[kk]]
[08:28:07.710]                   NAME <- NAMES[[kk]]
[08:28:07.710]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.710]                     next
[08:28:07.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:07.710]                 }
[08:28:07.710]                 NAMES <- toupper(added)
[08:28:07.710]                 for (kk in seq_along(NAMES)) {
[08:28:07.710]                   name <- added[[kk]]
[08:28:07.710]                   NAME <- NAMES[[kk]]
[08:28:07.710]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.710]                     next
[08:28:07.710]                   args[[name]] <- ""
[08:28:07.710]                 }
[08:28:07.710]                 NAMES <- toupper(removed)
[08:28:07.710]                 for (kk in seq_along(NAMES)) {
[08:28:07.710]                   name <- removed[[kk]]
[08:28:07.710]                   NAME <- NAMES[[kk]]
[08:28:07.710]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.710]                     next
[08:28:07.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:07.710]                 }
[08:28:07.710]                 if (length(args) > 0) 
[08:28:07.710]                   base::do.call(base::Sys.setenv, args = args)
[08:28:07.710]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:07.710]             }
[08:28:07.710]             else {
[08:28:07.710]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:07.710]             }
[08:28:07.710]             {
[08:28:07.710]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:07.710]                   0L) {
[08:28:07.710]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:07.710]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:07.710]                   base::options(opts)
[08:28:07.710]                 }
[08:28:07.710]                 {
[08:28:07.710]                   {
[08:28:07.710]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:07.710]                     NULL
[08:28:07.710]                   }
[08:28:07.710]                   options(future.plan = NULL)
[08:28:07.710]                   if (is.na(NA_character_)) 
[08:28:07.710]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:07.710]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:07.710]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:07.710]                     .init = FALSE)
[08:28:07.710]                 }
[08:28:07.710]             }
[08:28:07.710]         }
[08:28:07.710]     })
[08:28:07.710]     if (TRUE) {
[08:28:07.710]         base::sink(type = "output", split = FALSE)
[08:28:07.710]         if (TRUE) {
[08:28:07.710]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:07.710]         }
[08:28:07.710]         else {
[08:28:07.710]             ...future.result["stdout"] <- base::list(NULL)
[08:28:07.710]         }
[08:28:07.710]         base::close(...future.stdout)
[08:28:07.710]         ...future.stdout <- NULL
[08:28:07.710]     }
[08:28:07.710]     ...future.result$conditions <- ...future.conditions
[08:28:07.710]     ...future.result$finished <- base::Sys.time()
[08:28:07.710]     ...future.result
[08:28:07.710] }
[08:28:07.713] MultisessionFuture started
[08:28:07.714] - Launch lazy future ... done
[08:28:07.714] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:07.714] getGlobalsAndPackages() ...
[08:28:07.714] Searching for globals...
[08:28:07.715] - globals found: [1] ‘{’
[08:28:07.715] Searching for globals ... DONE
[08:28:07.715] Resolving globals: TRUE
[08:28:07.715] Resolving any globals that are futures ...
[08:28:07.715] - globals: [1] ‘{’
[08:28:07.715] Resolving any globals that are futures ... DONE
[08:28:07.716] 
[08:28:07.716] 
[08:28:07.716] getGlobalsAndPackages() ... DONE
[08:28:07.716] run() for ‘Future’ ...
[08:28:07.716] - state: ‘created’
[08:28:07.716] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:07.729] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:07.729] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:07.730]   - Field: ‘node’
[08:28:07.730]   - Field: ‘label’
[08:28:07.730]   - Field: ‘local’
[08:28:07.730]   - Field: ‘owner’
[08:28:07.730]   - Field: ‘envir’
[08:28:07.730]   - Field: ‘workers’
[08:28:07.730]   - Field: ‘packages’
[08:28:07.730]   - Field: ‘gc’
[08:28:07.730]   - Field: ‘conditions’
[08:28:07.730]   - Field: ‘persistent’
[08:28:07.730]   - Field: ‘expr’
[08:28:07.730]   - Field: ‘uuid’
[08:28:07.731]   - Field: ‘seed’
[08:28:07.731]   - Field: ‘version’
[08:28:07.731]   - Field: ‘result’
[08:28:07.731]   - Field: ‘asynchronous’
[08:28:07.731]   - Field: ‘calls’
[08:28:07.731]   - Field: ‘globals’
[08:28:07.731]   - Field: ‘stdout’
[08:28:07.731]   - Field: ‘earlySignal’
[08:28:07.731]   - Field: ‘lazy’
[08:28:07.731]   - Field: ‘state’
[08:28:07.731] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:07.731] - Launch lazy future ...
[08:28:07.732] Packages needed by the future expression (n = 0): <none>
[08:28:07.732] Packages needed by future strategies (n = 0): <none>
[08:28:07.732] {
[08:28:07.732]     {
[08:28:07.732]         {
[08:28:07.732]             ...future.startTime <- base::Sys.time()
[08:28:07.732]             {
[08:28:07.732]                 {
[08:28:07.732]                   {
[08:28:07.732]                     {
[08:28:07.732]                       base::local({
[08:28:07.732]                         has_future <- base::requireNamespace("future", 
[08:28:07.732]                           quietly = TRUE)
[08:28:07.732]                         if (has_future) {
[08:28:07.732]                           ns <- base::getNamespace("future")
[08:28:07.732]                           version <- ns[[".package"]][["version"]]
[08:28:07.732]                           if (is.null(version)) 
[08:28:07.732]                             version <- utils::packageVersion("future")
[08:28:07.732]                         }
[08:28:07.732]                         else {
[08:28:07.732]                           version <- NULL
[08:28:07.732]                         }
[08:28:07.732]                         if (!has_future || version < "1.8.0") {
[08:28:07.732]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:07.732]                             "", base::R.version$version.string), 
[08:28:07.732]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:07.732]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:07.732]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:07.732]                               "release", "version")], collapse = " "), 
[08:28:07.732]                             hostname = base::Sys.info()[["nodename"]])
[08:28:07.732]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:07.732]                             info)
[08:28:07.732]                           info <- base::paste(info, collapse = "; ")
[08:28:07.732]                           if (!has_future) {
[08:28:07.732]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:07.732]                               info)
[08:28:07.732]                           }
[08:28:07.732]                           else {
[08:28:07.732]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:07.732]                               info, version)
[08:28:07.732]                           }
[08:28:07.732]                           base::stop(msg)
[08:28:07.732]                         }
[08:28:07.732]                       })
[08:28:07.732]                     }
[08:28:07.732]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:07.732]                     base::options(mc.cores = 1L)
[08:28:07.732]                   }
[08:28:07.732]                   ...future.strategy.old <- future::plan("list")
[08:28:07.732]                   options(future.plan = NULL)
[08:28:07.732]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:07.732]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:07.732]                 }
[08:28:07.732]                 ...future.workdir <- getwd()
[08:28:07.732]             }
[08:28:07.732]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:07.732]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:07.732]         }
[08:28:07.732]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:07.732]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:07.732]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:07.732]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:07.732]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:07.732]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:07.732]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:07.732]             base::names(...future.oldOptions))
[08:28:07.732]     }
[08:28:07.732]     if (FALSE) {
[08:28:07.732]     }
[08:28:07.732]     else {
[08:28:07.732]         if (TRUE) {
[08:28:07.732]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:07.732]                 open = "w")
[08:28:07.732]         }
[08:28:07.732]         else {
[08:28:07.732]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:07.732]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:07.732]         }
[08:28:07.732]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:07.732]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:07.732]             base::sink(type = "output", split = FALSE)
[08:28:07.732]             base::close(...future.stdout)
[08:28:07.732]         }, add = TRUE)
[08:28:07.732]     }
[08:28:07.732]     ...future.frame <- base::sys.nframe()
[08:28:07.732]     ...future.conditions <- base::list()
[08:28:07.732]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:07.732]     if (FALSE) {
[08:28:07.732]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:07.732]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:07.732]     }
[08:28:07.732]     ...future.result <- base::tryCatch({
[08:28:07.732]         base::withCallingHandlers({
[08:28:07.732]             ...future.value <- base::withVisible(base::local({
[08:28:07.732]                 ...future.makeSendCondition <- base::local({
[08:28:07.732]                   sendCondition <- NULL
[08:28:07.732]                   function(frame = 1L) {
[08:28:07.732]                     if (is.function(sendCondition)) 
[08:28:07.732]                       return(sendCondition)
[08:28:07.732]                     ns <- getNamespace("parallel")
[08:28:07.732]                     if (exists("sendData", mode = "function", 
[08:28:07.732]                       envir = ns)) {
[08:28:07.732]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:07.732]                         envir = ns)
[08:28:07.732]                       envir <- sys.frame(frame)
[08:28:07.732]                       master <- NULL
[08:28:07.732]                       while (!identical(envir, .GlobalEnv) && 
[08:28:07.732]                         !identical(envir, emptyenv())) {
[08:28:07.732]                         if (exists("master", mode = "list", envir = envir, 
[08:28:07.732]                           inherits = FALSE)) {
[08:28:07.732]                           master <- get("master", mode = "list", 
[08:28:07.732]                             envir = envir, inherits = FALSE)
[08:28:07.732]                           if (inherits(master, c("SOCKnode", 
[08:28:07.732]                             "SOCK0node"))) {
[08:28:07.732]                             sendCondition <<- function(cond) {
[08:28:07.732]                               data <- list(type = "VALUE", value = cond, 
[08:28:07.732]                                 success = TRUE)
[08:28:07.732]                               parallel_sendData(master, data)
[08:28:07.732]                             }
[08:28:07.732]                             return(sendCondition)
[08:28:07.732]                           }
[08:28:07.732]                         }
[08:28:07.732]                         frame <- frame + 1L
[08:28:07.732]                         envir <- sys.frame(frame)
[08:28:07.732]                       }
[08:28:07.732]                     }
[08:28:07.732]                     sendCondition <<- function(cond) NULL
[08:28:07.732]                   }
[08:28:07.732]                 })
[08:28:07.732]                 withCallingHandlers({
[08:28:07.732]                   {
[08:28:07.732]                     "a"
[08:28:07.732]                   }
[08:28:07.732]                 }, immediateCondition = function(cond) {
[08:28:07.732]                   sendCondition <- ...future.makeSendCondition()
[08:28:07.732]                   sendCondition(cond)
[08:28:07.732]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.732]                   {
[08:28:07.732]                     inherits <- base::inherits
[08:28:07.732]                     invokeRestart <- base::invokeRestart
[08:28:07.732]                     is.null <- base::is.null
[08:28:07.732]                     muffled <- FALSE
[08:28:07.732]                     if (inherits(cond, "message")) {
[08:28:07.732]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:07.732]                       if (muffled) 
[08:28:07.732]                         invokeRestart("muffleMessage")
[08:28:07.732]                     }
[08:28:07.732]                     else if (inherits(cond, "warning")) {
[08:28:07.732]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:07.732]                       if (muffled) 
[08:28:07.732]                         invokeRestart("muffleWarning")
[08:28:07.732]                     }
[08:28:07.732]                     else if (inherits(cond, "condition")) {
[08:28:07.732]                       if (!is.null(pattern)) {
[08:28:07.732]                         computeRestarts <- base::computeRestarts
[08:28:07.732]                         grepl <- base::grepl
[08:28:07.732]                         restarts <- computeRestarts(cond)
[08:28:07.732]                         for (restart in restarts) {
[08:28:07.732]                           name <- restart$name
[08:28:07.732]                           if (is.null(name)) 
[08:28:07.732]                             next
[08:28:07.732]                           if (!grepl(pattern, name)) 
[08:28:07.732]                             next
[08:28:07.732]                           invokeRestart(restart)
[08:28:07.732]                           muffled <- TRUE
[08:28:07.732]                           break
[08:28:07.732]                         }
[08:28:07.732]                       }
[08:28:07.732]                     }
[08:28:07.732]                     invisible(muffled)
[08:28:07.732]                   }
[08:28:07.732]                   muffleCondition(cond)
[08:28:07.732]                 })
[08:28:07.732]             }))
[08:28:07.732]             future::FutureResult(value = ...future.value$value, 
[08:28:07.732]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:07.732]                   ...future.rng), globalenv = if (FALSE) 
[08:28:07.732]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:07.732]                     ...future.globalenv.names))
[08:28:07.732]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:07.732]         }, condition = base::local({
[08:28:07.732]             c <- base::c
[08:28:07.732]             inherits <- base::inherits
[08:28:07.732]             invokeRestart <- base::invokeRestart
[08:28:07.732]             length <- base::length
[08:28:07.732]             list <- base::list
[08:28:07.732]             seq.int <- base::seq.int
[08:28:07.732]             signalCondition <- base::signalCondition
[08:28:07.732]             sys.calls <- base::sys.calls
[08:28:07.732]             `[[` <- base::`[[`
[08:28:07.732]             `+` <- base::`+`
[08:28:07.732]             `<<-` <- base::`<<-`
[08:28:07.732]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:07.732]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:07.732]                   3L)]
[08:28:07.732]             }
[08:28:07.732]             function(cond) {
[08:28:07.732]                 is_error <- inherits(cond, "error")
[08:28:07.732]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:07.732]                   NULL)
[08:28:07.732]                 if (is_error) {
[08:28:07.732]                   sessionInformation <- function() {
[08:28:07.732]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:07.732]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:07.732]                       search = base::search(), system = base::Sys.info())
[08:28:07.732]                   }
[08:28:07.732]                   ...future.conditions[[length(...future.conditions) + 
[08:28:07.732]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:07.732]                     cond$call), session = sessionInformation(), 
[08:28:07.732]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:07.732]                   signalCondition(cond)
[08:28:07.732]                 }
[08:28:07.732]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:07.732]                 "immediateCondition"))) {
[08:28:07.732]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:07.732]                   ...future.conditions[[length(...future.conditions) + 
[08:28:07.732]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:07.732]                   if (TRUE && !signal) {
[08:28:07.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.732]                     {
[08:28:07.732]                       inherits <- base::inherits
[08:28:07.732]                       invokeRestart <- base::invokeRestart
[08:28:07.732]                       is.null <- base::is.null
[08:28:07.732]                       muffled <- FALSE
[08:28:07.732]                       if (inherits(cond, "message")) {
[08:28:07.732]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:07.732]                         if (muffled) 
[08:28:07.732]                           invokeRestart("muffleMessage")
[08:28:07.732]                       }
[08:28:07.732]                       else if (inherits(cond, "warning")) {
[08:28:07.732]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:07.732]                         if (muffled) 
[08:28:07.732]                           invokeRestart("muffleWarning")
[08:28:07.732]                       }
[08:28:07.732]                       else if (inherits(cond, "condition")) {
[08:28:07.732]                         if (!is.null(pattern)) {
[08:28:07.732]                           computeRestarts <- base::computeRestarts
[08:28:07.732]                           grepl <- base::grepl
[08:28:07.732]                           restarts <- computeRestarts(cond)
[08:28:07.732]                           for (restart in restarts) {
[08:28:07.732]                             name <- restart$name
[08:28:07.732]                             if (is.null(name)) 
[08:28:07.732]                               next
[08:28:07.732]                             if (!grepl(pattern, name)) 
[08:28:07.732]                               next
[08:28:07.732]                             invokeRestart(restart)
[08:28:07.732]                             muffled <- TRUE
[08:28:07.732]                             break
[08:28:07.732]                           }
[08:28:07.732]                         }
[08:28:07.732]                       }
[08:28:07.732]                       invisible(muffled)
[08:28:07.732]                     }
[08:28:07.732]                     muffleCondition(cond, pattern = "^muffle")
[08:28:07.732]                   }
[08:28:07.732]                 }
[08:28:07.732]                 else {
[08:28:07.732]                   if (TRUE) {
[08:28:07.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.732]                     {
[08:28:07.732]                       inherits <- base::inherits
[08:28:07.732]                       invokeRestart <- base::invokeRestart
[08:28:07.732]                       is.null <- base::is.null
[08:28:07.732]                       muffled <- FALSE
[08:28:07.732]                       if (inherits(cond, "message")) {
[08:28:07.732]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:07.732]                         if (muffled) 
[08:28:07.732]                           invokeRestart("muffleMessage")
[08:28:07.732]                       }
[08:28:07.732]                       else if (inherits(cond, "warning")) {
[08:28:07.732]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:07.732]                         if (muffled) 
[08:28:07.732]                           invokeRestart("muffleWarning")
[08:28:07.732]                       }
[08:28:07.732]                       else if (inherits(cond, "condition")) {
[08:28:07.732]                         if (!is.null(pattern)) {
[08:28:07.732]                           computeRestarts <- base::computeRestarts
[08:28:07.732]                           grepl <- base::grepl
[08:28:07.732]                           restarts <- computeRestarts(cond)
[08:28:07.732]                           for (restart in restarts) {
[08:28:07.732]                             name <- restart$name
[08:28:07.732]                             if (is.null(name)) 
[08:28:07.732]                               next
[08:28:07.732]                             if (!grepl(pattern, name)) 
[08:28:07.732]                               next
[08:28:07.732]                             invokeRestart(restart)
[08:28:07.732]                             muffled <- TRUE
[08:28:07.732]                             break
[08:28:07.732]                           }
[08:28:07.732]                         }
[08:28:07.732]                       }
[08:28:07.732]                       invisible(muffled)
[08:28:07.732]                     }
[08:28:07.732]                     muffleCondition(cond, pattern = "^muffle")
[08:28:07.732]                   }
[08:28:07.732]                 }
[08:28:07.732]             }
[08:28:07.732]         }))
[08:28:07.732]     }, error = function(ex) {
[08:28:07.732]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:07.732]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:07.732]                 ...future.rng), started = ...future.startTime, 
[08:28:07.732]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:07.732]             version = "1.8"), class = "FutureResult")
[08:28:07.732]     }, finally = {
[08:28:07.732]         if (!identical(...future.workdir, getwd())) 
[08:28:07.732]             setwd(...future.workdir)
[08:28:07.732]         {
[08:28:07.732]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:07.732]                 ...future.oldOptions$nwarnings <- NULL
[08:28:07.732]             }
[08:28:07.732]             base::options(...future.oldOptions)
[08:28:07.732]             if (.Platform$OS.type == "windows") {
[08:28:07.732]                 old_names <- names(...future.oldEnvVars)
[08:28:07.732]                 envs <- base::Sys.getenv()
[08:28:07.732]                 names <- names(envs)
[08:28:07.732]                 common <- intersect(names, old_names)
[08:28:07.732]                 added <- setdiff(names, old_names)
[08:28:07.732]                 removed <- setdiff(old_names, names)
[08:28:07.732]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:07.732]                   envs[common]]
[08:28:07.732]                 NAMES <- toupper(changed)
[08:28:07.732]                 args <- list()
[08:28:07.732]                 for (kk in seq_along(NAMES)) {
[08:28:07.732]                   name <- changed[[kk]]
[08:28:07.732]                   NAME <- NAMES[[kk]]
[08:28:07.732]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.732]                     next
[08:28:07.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:07.732]                 }
[08:28:07.732]                 NAMES <- toupper(added)
[08:28:07.732]                 for (kk in seq_along(NAMES)) {
[08:28:07.732]                   name <- added[[kk]]
[08:28:07.732]                   NAME <- NAMES[[kk]]
[08:28:07.732]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.732]                     next
[08:28:07.732]                   args[[name]] <- ""
[08:28:07.732]                 }
[08:28:07.732]                 NAMES <- toupper(removed)
[08:28:07.732]                 for (kk in seq_along(NAMES)) {
[08:28:07.732]                   name <- removed[[kk]]
[08:28:07.732]                   NAME <- NAMES[[kk]]
[08:28:07.732]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.732]                     next
[08:28:07.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:07.732]                 }
[08:28:07.732]                 if (length(args) > 0) 
[08:28:07.732]                   base::do.call(base::Sys.setenv, args = args)
[08:28:07.732]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:07.732]             }
[08:28:07.732]             else {
[08:28:07.732]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:07.732]             }
[08:28:07.732]             {
[08:28:07.732]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:07.732]                   0L) {
[08:28:07.732]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:07.732]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:07.732]                   base::options(opts)
[08:28:07.732]                 }
[08:28:07.732]                 {
[08:28:07.732]                   {
[08:28:07.732]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:07.732]                     NULL
[08:28:07.732]                   }
[08:28:07.732]                   options(future.plan = NULL)
[08:28:07.732]                   if (is.na(NA_character_)) 
[08:28:07.732]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:07.732]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:07.732]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:07.732]                     .init = FALSE)
[08:28:07.732]                 }
[08:28:07.732]             }
[08:28:07.732]         }
[08:28:07.732]     })
[08:28:07.732]     if (TRUE) {
[08:28:07.732]         base::sink(type = "output", split = FALSE)
[08:28:07.732]         if (TRUE) {
[08:28:07.732]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:07.732]         }
[08:28:07.732]         else {
[08:28:07.732]             ...future.result["stdout"] <- base::list(NULL)
[08:28:07.732]         }
[08:28:07.732]         base::close(...future.stdout)
[08:28:07.732]         ...future.stdout <- NULL
[08:28:07.732]     }
[08:28:07.732]     ...future.result$conditions <- ...future.conditions
[08:28:07.732]     ...future.result$finished <- base::Sys.time()
[08:28:07.732]     ...future.result
[08:28:07.732] }
[08:28:07.787] MultisessionFuture started
[08:28:07.787] - Launch lazy future ... done
[08:28:07.787] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[08:28:07.788] result() for ClusterFuture ...
[08:28:07.788] receiveMessageFromWorker() for ClusterFuture ...
[08:28:07.788] - Validating connection of MultisessionFuture
[08:28:07.818] - received message: FutureResult
[08:28:07.819] - Received FutureResult
[08:28:07.819] - Erased future from FutureRegistry
[08:28:07.819] result() for ClusterFuture ...
[08:28:07.819] - result already collected: FutureResult
[08:28:07.819] result() for ClusterFuture ... done
[08:28:07.819] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:07.819] result() for ClusterFuture ... done
[08:28:07.819] result() for ClusterFuture ...
[08:28:07.819] - result already collected: FutureResult
[08:28:07.820] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:07.820] getGlobalsAndPackages() ...
[08:28:07.820] Searching for globals...
[08:28:07.825] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[08:28:07.825] Searching for globals ... DONE
[08:28:07.825] Resolving globals: TRUE
[08:28:07.826] Resolving any globals that are futures ...
[08:28:07.826] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[08:28:07.826] Resolving any globals that are futures ... DONE
[08:28:07.826] Resolving futures part of globals (recursively) ...
[08:28:07.827] resolve() on list ...
[08:28:07.827]  recursive: 99
[08:28:07.828]  length: 2
[08:28:07.828]  elements: ‘env’, ‘b’
[08:28:07.828] resolve() on environment ...
[08:28:07.828]  recursive: 98
[08:28:07.829]  elements: [1] ‘.future_a’, ‘a’
[08:28:07.830] receiveMessageFromWorker() for ClusterFuture ...
[08:28:07.830] - Validating connection of MultisessionFuture
[08:28:07.830] - received message: FutureResult
[08:28:07.830] - Received FutureResult
[08:28:07.830] - Erased future from FutureRegistry
[08:28:07.830] result() for ClusterFuture ...
[08:28:07.830] - result already collected: FutureResult
[08:28:07.831] result() for ClusterFuture ... done
[08:28:07.831] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:07.831] Future #1
[08:28:07.831] result() for ClusterFuture ...
[08:28:07.831] - result already collected: FutureResult
[08:28:07.831] result() for ClusterFuture ... done
[08:28:07.831] result() for ClusterFuture ...
[08:28:07.831] - result already collected: FutureResult
[08:28:07.832] result() for ClusterFuture ... done
[08:28:07.832] A MultisessionFuture was resolved
[08:28:07.832]  length: 0 (resolved future 1)
[08:28:07.832] resolve() on environment ... DONE
[08:28:07.832]  length: 1 (resolved future 1)
[08:28:07.832]  length: 0 (resolved future 2)
[08:28:07.832] resolve() on list ... DONE
[08:28:07.833] - globals: [2] ‘env’, ‘b’
[08:28:07.833] Resolving futures part of globals (recursively) ... DONE
[08:28:07.844] The total size of the 2 globals is 326.57 KiB (334405 bytes)
[08:28:07.845] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 326.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (326.53 KiB of class ‘environment’) and ‘b’ (40 bytes of class ‘character’)
[08:28:07.845] - globals: [2] ‘env’, ‘b’
[08:28:07.845] 
[08:28:07.845] getGlobalsAndPackages() ... DONE
[08:28:07.846] run() for ‘Future’ ...
[08:28:07.846] - state: ‘created’
[08:28:07.846] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:07.859] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:07.859] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:07.859]   - Field: ‘node’
[08:28:07.860]   - Field: ‘label’
[08:28:07.860]   - Field: ‘local’
[08:28:07.860]   - Field: ‘owner’
[08:28:07.860]   - Field: ‘envir’
[08:28:07.860]   - Field: ‘workers’
[08:28:07.860]   - Field: ‘packages’
[08:28:07.860]   - Field: ‘gc’
[08:28:07.860]   - Field: ‘conditions’
[08:28:07.860]   - Field: ‘persistent’
[08:28:07.860]   - Field: ‘expr’
[08:28:07.861]   - Field: ‘uuid’
[08:28:07.861]   - Field: ‘seed’
[08:28:07.861]   - Field: ‘version’
[08:28:07.861]   - Field: ‘result’
[08:28:07.861]   - Field: ‘asynchronous’
[08:28:07.861]   - Field: ‘calls’
[08:28:07.861]   - Field: ‘globals’
[08:28:07.861]   - Field: ‘stdout’
[08:28:07.861]   - Field: ‘earlySignal’
[08:28:07.862]   - Field: ‘lazy’
[08:28:07.862]   - Field: ‘state’
[08:28:07.862] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:07.862] - Launch lazy future ...
[08:28:07.862] Packages needed by the future expression (n = 0): <none>
[08:28:07.862] Packages needed by future strategies (n = 0): <none>
[08:28:07.863] {
[08:28:07.863]     {
[08:28:07.863]         {
[08:28:07.863]             ...future.startTime <- base::Sys.time()
[08:28:07.863]             {
[08:28:07.863]                 {
[08:28:07.863]                   {
[08:28:07.863]                     {
[08:28:07.863]                       base::local({
[08:28:07.863]                         has_future <- base::requireNamespace("future", 
[08:28:07.863]                           quietly = TRUE)
[08:28:07.863]                         if (has_future) {
[08:28:07.863]                           ns <- base::getNamespace("future")
[08:28:07.863]                           version <- ns[[".package"]][["version"]]
[08:28:07.863]                           if (is.null(version)) 
[08:28:07.863]                             version <- utils::packageVersion("future")
[08:28:07.863]                         }
[08:28:07.863]                         else {
[08:28:07.863]                           version <- NULL
[08:28:07.863]                         }
[08:28:07.863]                         if (!has_future || version < "1.8.0") {
[08:28:07.863]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:07.863]                             "", base::R.version$version.string), 
[08:28:07.863]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:07.863]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:07.863]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:07.863]                               "release", "version")], collapse = " "), 
[08:28:07.863]                             hostname = base::Sys.info()[["nodename"]])
[08:28:07.863]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:07.863]                             info)
[08:28:07.863]                           info <- base::paste(info, collapse = "; ")
[08:28:07.863]                           if (!has_future) {
[08:28:07.863]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:07.863]                               info)
[08:28:07.863]                           }
[08:28:07.863]                           else {
[08:28:07.863]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:07.863]                               info, version)
[08:28:07.863]                           }
[08:28:07.863]                           base::stop(msg)
[08:28:07.863]                         }
[08:28:07.863]                       })
[08:28:07.863]                     }
[08:28:07.863]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:07.863]                     base::options(mc.cores = 1L)
[08:28:07.863]                   }
[08:28:07.863]                   ...future.strategy.old <- future::plan("list")
[08:28:07.863]                   options(future.plan = NULL)
[08:28:07.863]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:07.863]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:07.863]                 }
[08:28:07.863]                 ...future.workdir <- getwd()
[08:28:07.863]             }
[08:28:07.863]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:07.863]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:07.863]         }
[08:28:07.863]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:07.863]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:07.863]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:07.863]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:07.863]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:07.863]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:07.863]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:07.863]             base::names(...future.oldOptions))
[08:28:07.863]     }
[08:28:07.863]     if (FALSE) {
[08:28:07.863]     }
[08:28:07.863]     else {
[08:28:07.863]         if (TRUE) {
[08:28:07.863]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:07.863]                 open = "w")
[08:28:07.863]         }
[08:28:07.863]         else {
[08:28:07.863]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:07.863]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:07.863]         }
[08:28:07.863]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:07.863]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:07.863]             base::sink(type = "output", split = FALSE)
[08:28:07.863]             base::close(...future.stdout)
[08:28:07.863]         }, add = TRUE)
[08:28:07.863]     }
[08:28:07.863]     ...future.frame <- base::sys.nframe()
[08:28:07.863]     ...future.conditions <- base::list()
[08:28:07.863]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:07.863]     if (FALSE) {
[08:28:07.863]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:07.863]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:07.863]     }
[08:28:07.863]     ...future.result <- base::tryCatch({
[08:28:07.863]         base::withCallingHandlers({
[08:28:07.863]             ...future.value <- base::withVisible(base::local({
[08:28:07.863]                 ...future.makeSendCondition <- base::local({
[08:28:07.863]                   sendCondition <- NULL
[08:28:07.863]                   function(frame = 1L) {
[08:28:07.863]                     if (is.function(sendCondition)) 
[08:28:07.863]                       return(sendCondition)
[08:28:07.863]                     ns <- getNamespace("parallel")
[08:28:07.863]                     if (exists("sendData", mode = "function", 
[08:28:07.863]                       envir = ns)) {
[08:28:07.863]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:07.863]                         envir = ns)
[08:28:07.863]                       envir <- sys.frame(frame)
[08:28:07.863]                       master <- NULL
[08:28:07.863]                       while (!identical(envir, .GlobalEnv) && 
[08:28:07.863]                         !identical(envir, emptyenv())) {
[08:28:07.863]                         if (exists("master", mode = "list", envir = envir, 
[08:28:07.863]                           inherits = FALSE)) {
[08:28:07.863]                           master <- get("master", mode = "list", 
[08:28:07.863]                             envir = envir, inherits = FALSE)
[08:28:07.863]                           if (inherits(master, c("SOCKnode", 
[08:28:07.863]                             "SOCK0node"))) {
[08:28:07.863]                             sendCondition <<- function(cond) {
[08:28:07.863]                               data <- list(type = "VALUE", value = cond, 
[08:28:07.863]                                 success = TRUE)
[08:28:07.863]                               parallel_sendData(master, data)
[08:28:07.863]                             }
[08:28:07.863]                             return(sendCondition)
[08:28:07.863]                           }
[08:28:07.863]                         }
[08:28:07.863]                         frame <- frame + 1L
[08:28:07.863]                         envir <- sys.frame(frame)
[08:28:07.863]                       }
[08:28:07.863]                     }
[08:28:07.863]                     sendCondition <<- function(cond) NULL
[08:28:07.863]                   }
[08:28:07.863]                 })
[08:28:07.863]                 withCallingHandlers({
[08:28:07.863]                   {
[08:28:07.863]                     env[[b]]
[08:28:07.863]                   }
[08:28:07.863]                 }, immediateCondition = function(cond) {
[08:28:07.863]                   sendCondition <- ...future.makeSendCondition()
[08:28:07.863]                   sendCondition(cond)
[08:28:07.863]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.863]                   {
[08:28:07.863]                     inherits <- base::inherits
[08:28:07.863]                     invokeRestart <- base::invokeRestart
[08:28:07.863]                     is.null <- base::is.null
[08:28:07.863]                     muffled <- FALSE
[08:28:07.863]                     if (inherits(cond, "message")) {
[08:28:07.863]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:07.863]                       if (muffled) 
[08:28:07.863]                         invokeRestart("muffleMessage")
[08:28:07.863]                     }
[08:28:07.863]                     else if (inherits(cond, "warning")) {
[08:28:07.863]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:07.863]                       if (muffled) 
[08:28:07.863]                         invokeRestart("muffleWarning")
[08:28:07.863]                     }
[08:28:07.863]                     else if (inherits(cond, "condition")) {
[08:28:07.863]                       if (!is.null(pattern)) {
[08:28:07.863]                         computeRestarts <- base::computeRestarts
[08:28:07.863]                         grepl <- base::grepl
[08:28:07.863]                         restarts <- computeRestarts(cond)
[08:28:07.863]                         for (restart in restarts) {
[08:28:07.863]                           name <- restart$name
[08:28:07.863]                           if (is.null(name)) 
[08:28:07.863]                             next
[08:28:07.863]                           if (!grepl(pattern, name)) 
[08:28:07.863]                             next
[08:28:07.863]                           invokeRestart(restart)
[08:28:07.863]                           muffled <- TRUE
[08:28:07.863]                           break
[08:28:07.863]                         }
[08:28:07.863]                       }
[08:28:07.863]                     }
[08:28:07.863]                     invisible(muffled)
[08:28:07.863]                   }
[08:28:07.863]                   muffleCondition(cond)
[08:28:07.863]                 })
[08:28:07.863]             }))
[08:28:07.863]             future::FutureResult(value = ...future.value$value, 
[08:28:07.863]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:07.863]                   ...future.rng), globalenv = if (FALSE) 
[08:28:07.863]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:07.863]                     ...future.globalenv.names))
[08:28:07.863]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:07.863]         }, condition = base::local({
[08:28:07.863]             c <- base::c
[08:28:07.863]             inherits <- base::inherits
[08:28:07.863]             invokeRestart <- base::invokeRestart
[08:28:07.863]             length <- base::length
[08:28:07.863]             list <- base::list
[08:28:07.863]             seq.int <- base::seq.int
[08:28:07.863]             signalCondition <- base::signalCondition
[08:28:07.863]             sys.calls <- base::sys.calls
[08:28:07.863]             `[[` <- base::`[[`
[08:28:07.863]             `+` <- base::`+`
[08:28:07.863]             `<<-` <- base::`<<-`
[08:28:07.863]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:07.863]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:07.863]                   3L)]
[08:28:07.863]             }
[08:28:07.863]             function(cond) {
[08:28:07.863]                 is_error <- inherits(cond, "error")
[08:28:07.863]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:07.863]                   NULL)
[08:28:07.863]                 if (is_error) {
[08:28:07.863]                   sessionInformation <- function() {
[08:28:07.863]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:07.863]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:07.863]                       search = base::search(), system = base::Sys.info())
[08:28:07.863]                   }
[08:28:07.863]                   ...future.conditions[[length(...future.conditions) + 
[08:28:07.863]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:07.863]                     cond$call), session = sessionInformation(), 
[08:28:07.863]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:07.863]                   signalCondition(cond)
[08:28:07.863]                 }
[08:28:07.863]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:07.863]                 "immediateCondition"))) {
[08:28:07.863]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:07.863]                   ...future.conditions[[length(...future.conditions) + 
[08:28:07.863]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:07.863]                   if (TRUE && !signal) {
[08:28:07.863]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.863]                     {
[08:28:07.863]                       inherits <- base::inherits
[08:28:07.863]                       invokeRestart <- base::invokeRestart
[08:28:07.863]                       is.null <- base::is.null
[08:28:07.863]                       muffled <- FALSE
[08:28:07.863]                       if (inherits(cond, "message")) {
[08:28:07.863]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:07.863]                         if (muffled) 
[08:28:07.863]                           invokeRestart("muffleMessage")
[08:28:07.863]                       }
[08:28:07.863]                       else if (inherits(cond, "warning")) {
[08:28:07.863]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:07.863]                         if (muffled) 
[08:28:07.863]                           invokeRestart("muffleWarning")
[08:28:07.863]                       }
[08:28:07.863]                       else if (inherits(cond, "condition")) {
[08:28:07.863]                         if (!is.null(pattern)) {
[08:28:07.863]                           computeRestarts <- base::computeRestarts
[08:28:07.863]                           grepl <- base::grepl
[08:28:07.863]                           restarts <- computeRestarts(cond)
[08:28:07.863]                           for (restart in restarts) {
[08:28:07.863]                             name <- restart$name
[08:28:07.863]                             if (is.null(name)) 
[08:28:07.863]                               next
[08:28:07.863]                             if (!grepl(pattern, name)) 
[08:28:07.863]                               next
[08:28:07.863]                             invokeRestart(restart)
[08:28:07.863]                             muffled <- TRUE
[08:28:07.863]                             break
[08:28:07.863]                           }
[08:28:07.863]                         }
[08:28:07.863]                       }
[08:28:07.863]                       invisible(muffled)
[08:28:07.863]                     }
[08:28:07.863]                     muffleCondition(cond, pattern = "^muffle")
[08:28:07.863]                   }
[08:28:07.863]                 }
[08:28:07.863]                 else {
[08:28:07.863]                   if (TRUE) {
[08:28:07.863]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:07.863]                     {
[08:28:07.863]                       inherits <- base::inherits
[08:28:07.863]                       invokeRestart <- base::invokeRestart
[08:28:07.863]                       is.null <- base::is.null
[08:28:07.863]                       muffled <- FALSE
[08:28:07.863]                       if (inherits(cond, "message")) {
[08:28:07.863]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:07.863]                         if (muffled) 
[08:28:07.863]                           invokeRestart("muffleMessage")
[08:28:07.863]                       }
[08:28:07.863]                       else if (inherits(cond, "warning")) {
[08:28:07.863]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:07.863]                         if (muffled) 
[08:28:07.863]                           invokeRestart("muffleWarning")
[08:28:07.863]                       }
[08:28:07.863]                       else if (inherits(cond, "condition")) {
[08:28:07.863]                         if (!is.null(pattern)) {
[08:28:07.863]                           computeRestarts <- base::computeRestarts
[08:28:07.863]                           grepl <- base::grepl
[08:28:07.863]                           restarts <- computeRestarts(cond)
[08:28:07.863]                           for (restart in restarts) {
[08:28:07.863]                             name <- restart$name
[08:28:07.863]                             if (is.null(name)) 
[08:28:07.863]                               next
[08:28:07.863]                             if (!grepl(pattern, name)) 
[08:28:07.863]                               next
[08:28:07.863]                             invokeRestart(restart)
[08:28:07.863]                             muffled <- TRUE
[08:28:07.863]                             break
[08:28:07.863]                           }
[08:28:07.863]                         }
[08:28:07.863]                       }
[08:28:07.863]                       invisible(muffled)
[08:28:07.863]                     }
[08:28:07.863]                     muffleCondition(cond, pattern = "^muffle")
[08:28:07.863]                   }
[08:28:07.863]                 }
[08:28:07.863]             }
[08:28:07.863]         }))
[08:28:07.863]     }, error = function(ex) {
[08:28:07.863]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:07.863]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:07.863]                 ...future.rng), started = ...future.startTime, 
[08:28:07.863]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:07.863]             version = "1.8"), class = "FutureResult")
[08:28:07.863]     }, finally = {
[08:28:07.863]         if (!identical(...future.workdir, getwd())) 
[08:28:07.863]             setwd(...future.workdir)
[08:28:07.863]         {
[08:28:07.863]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:07.863]                 ...future.oldOptions$nwarnings <- NULL
[08:28:07.863]             }
[08:28:07.863]             base::options(...future.oldOptions)
[08:28:07.863]             if (.Platform$OS.type == "windows") {
[08:28:07.863]                 old_names <- names(...future.oldEnvVars)
[08:28:07.863]                 envs <- base::Sys.getenv()
[08:28:07.863]                 names <- names(envs)
[08:28:07.863]                 common <- intersect(names, old_names)
[08:28:07.863]                 added <- setdiff(names, old_names)
[08:28:07.863]                 removed <- setdiff(old_names, names)
[08:28:07.863]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:07.863]                   envs[common]]
[08:28:07.863]                 NAMES <- toupper(changed)
[08:28:07.863]                 args <- list()
[08:28:07.863]                 for (kk in seq_along(NAMES)) {
[08:28:07.863]                   name <- changed[[kk]]
[08:28:07.863]                   NAME <- NAMES[[kk]]
[08:28:07.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.863]                     next
[08:28:07.863]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:07.863]                 }
[08:28:07.863]                 NAMES <- toupper(added)
[08:28:07.863]                 for (kk in seq_along(NAMES)) {
[08:28:07.863]                   name <- added[[kk]]
[08:28:07.863]                   NAME <- NAMES[[kk]]
[08:28:07.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.863]                     next
[08:28:07.863]                   args[[name]] <- ""
[08:28:07.863]                 }
[08:28:07.863]                 NAMES <- toupper(removed)
[08:28:07.863]                 for (kk in seq_along(NAMES)) {
[08:28:07.863]                   name <- removed[[kk]]
[08:28:07.863]                   NAME <- NAMES[[kk]]
[08:28:07.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:07.863]                     next
[08:28:07.863]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:07.863]                 }
[08:28:07.863]                 if (length(args) > 0) 
[08:28:07.863]                   base::do.call(base::Sys.setenv, args = args)
[08:28:07.863]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:07.863]             }
[08:28:07.863]             else {
[08:28:07.863]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:07.863]             }
[08:28:07.863]             {
[08:28:07.863]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:07.863]                   0L) {
[08:28:07.863]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:07.863]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:07.863]                   base::options(opts)
[08:28:07.863]                 }
[08:28:07.863]                 {
[08:28:07.863]                   {
[08:28:07.863]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:07.863]                     NULL
[08:28:07.863]                   }
[08:28:07.863]                   options(future.plan = NULL)
[08:28:07.863]                   if (is.na(NA_character_)) 
[08:28:07.863]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:07.863]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:07.863]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:07.863]                     .init = FALSE)
[08:28:07.863]                 }
[08:28:07.863]             }
[08:28:07.863]         }
[08:28:07.863]     })
[08:28:07.863]     if (TRUE) {
[08:28:07.863]         base::sink(type = "output", split = FALSE)
[08:28:07.863]         if (TRUE) {
[08:28:07.863]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:07.863]         }
[08:28:07.863]         else {
[08:28:07.863]             ...future.result["stdout"] <- base::list(NULL)
[08:28:07.863]         }
[08:28:07.863]         base::close(...future.stdout)
[08:28:07.863]         ...future.stdout <- NULL
[08:28:07.863]     }
[08:28:07.863]     ...future.result$conditions <- ...future.conditions
[08:28:07.863]     ...future.result$finished <- base::Sys.time()
[08:28:07.863]     ...future.result
[08:28:07.863] }
[08:28:07.877] Exporting 2 global objects (326.78 KiB) to cluster node #1 ...
[08:28:07.888] Exporting ‘env’ (326.53 KiB) to cluster node #1 ...
[08:28:07.942] Exporting ‘env’ (326.53 KiB) to cluster node #1 ... DONE
[08:28:07.943] Exporting ‘b’ (40 bytes) to cluster node #1 ...
[08:28:07.943] Exporting ‘b’ (40 bytes) to cluster node #1 ... DONE
[08:28:07.943] Exporting 2 global objects (326.78 KiB) to cluster node #1 ... DONE
[08:28:07.944] MultisessionFuture started
[08:28:07.944] - Launch lazy future ... done
[08:28:07.944] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[08:28:07.944] result() for ClusterFuture ...
[08:28:07.944] receiveMessageFromWorker() for ClusterFuture ...
[08:28:07.945] - Validating connection of MultisessionFuture
[08:28:07.986] - received message: FutureResult
[08:28:07.987] - Received FutureResult
[08:28:07.987] - Erased future from FutureRegistry
[08:28:07.987] result() for ClusterFuture ...
[08:28:07.987] - result already collected: FutureResult
[08:28:07.987] result() for ClusterFuture ... done
[08:28:07.987] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:07.987] result() for ClusterFuture ... done
[08:28:07.987] result() for ClusterFuture ...
[08:28:07.988] - result already collected: FutureResult
[08:28:07.991] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[08:28:07.991] result() for ClusterFuture ...
[08:28:07.991] - result already collected: FutureResult
[08:28:07.991] result() for ClusterFuture ... done
[08:28:07.991] result() for ClusterFuture ...
[08:28:07.991] - result already collected: FutureResult
[08:28:07.991] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:28:07.994] getGlobalsAndPackages() ...
[08:28:07.994] Searching for globals...
[08:28:07.995] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[08:28:07.995] Searching for globals ... DONE
[08:28:07.995] Resolving globals: TRUE
[08:28:07.996] Resolving any globals that are futures ...
[08:28:07.996] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[08:28:07.996] Resolving any globals that are futures ... DONE
[08:28:07.996] Resolving futures part of globals (recursively) ...
[08:28:07.996] resolve() on list ...
[08:28:07.996]  recursive: 99
[08:28:07.996]  length: 2
[08:28:07.996]  elements: ‘env’, ‘b’
[08:28:07.997] resolve() on environment ...
[08:28:07.997]  recursive: 98
[08:28:07.997]  elements: [1] ‘a’
[08:28:07.997]  length: 0 (resolved future 1)
[08:28:07.997] resolve() on environment ... DONE
[08:28:07.997]  length: 1 (resolved future 1)
[08:28:07.997]  length: 0 (resolved future 2)
[08:28:07.998] resolve() on list ... DONE
[08:28:07.998] - globals: [2] ‘env’, ‘b’
[08:28:07.998] Resolving futures part of globals (recursively) ... DONE
[08:28:07.998] The total size of the 2 globals is 499 bytes (499 bytes)
[08:28:07.998] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 499 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (459 bytes of class ‘environment’) and ‘b’ (40 bytes of class ‘character’)
[08:28:07.998] - globals: [2] ‘env’, ‘b’
[08:28:07.998] 
[08:28:07.998] getGlobalsAndPackages() ... DONE
[08:28:07.999] run() for ‘Future’ ...
[08:28:07.999] - state: ‘created’
[08:28:07.999] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:08.011] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:08.011] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:08.011]   - Field: ‘node’
[08:28:08.012]   - Field: ‘label’
[08:28:08.012]   - Field: ‘local’
[08:28:08.012]   - Field: ‘owner’
[08:28:08.012]   - Field: ‘envir’
[08:28:08.012]   - Field: ‘workers’
[08:28:08.012]   - Field: ‘packages’
[08:28:08.012]   - Field: ‘gc’
[08:28:08.012]   - Field: ‘conditions’
[08:28:08.012]   - Field: ‘persistent’
[08:28:08.012]   - Field: ‘expr’
[08:28:08.012]   - Field: ‘uuid’
[08:28:08.012]   - Field: ‘seed’
[08:28:08.013]   - Field: ‘version’
[08:28:08.013]   - Field: ‘result’
[08:28:08.013]   - Field: ‘asynchronous’
[08:28:08.013]   - Field: ‘calls’
[08:28:08.013]   - Field: ‘globals’
[08:28:08.013]   - Field: ‘stdout’
[08:28:08.013]   - Field: ‘earlySignal’
[08:28:08.013]   - Field: ‘lazy’
[08:28:08.013]   - Field: ‘state’
[08:28:08.013] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:08.013] - Launch lazy future ...
[08:28:08.014] Packages needed by the future expression (n = 0): <none>
[08:28:08.014] Packages needed by future strategies (n = 0): <none>
[08:28:08.014] {
[08:28:08.014]     {
[08:28:08.014]         {
[08:28:08.014]             ...future.startTime <- base::Sys.time()
[08:28:08.014]             {
[08:28:08.014]                 {
[08:28:08.014]                   {
[08:28:08.014]                     {
[08:28:08.014]                       base::local({
[08:28:08.014]                         has_future <- base::requireNamespace("future", 
[08:28:08.014]                           quietly = TRUE)
[08:28:08.014]                         if (has_future) {
[08:28:08.014]                           ns <- base::getNamespace("future")
[08:28:08.014]                           version <- ns[[".package"]][["version"]]
[08:28:08.014]                           if (is.null(version)) 
[08:28:08.014]                             version <- utils::packageVersion("future")
[08:28:08.014]                         }
[08:28:08.014]                         else {
[08:28:08.014]                           version <- NULL
[08:28:08.014]                         }
[08:28:08.014]                         if (!has_future || version < "1.8.0") {
[08:28:08.014]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:08.014]                             "", base::R.version$version.string), 
[08:28:08.014]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:08.014]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:08.014]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:08.014]                               "release", "version")], collapse = " "), 
[08:28:08.014]                             hostname = base::Sys.info()[["nodename"]])
[08:28:08.014]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:08.014]                             info)
[08:28:08.014]                           info <- base::paste(info, collapse = "; ")
[08:28:08.014]                           if (!has_future) {
[08:28:08.014]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:08.014]                               info)
[08:28:08.014]                           }
[08:28:08.014]                           else {
[08:28:08.014]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:08.014]                               info, version)
[08:28:08.014]                           }
[08:28:08.014]                           base::stop(msg)
[08:28:08.014]                         }
[08:28:08.014]                       })
[08:28:08.014]                     }
[08:28:08.014]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:08.014]                     base::options(mc.cores = 1L)
[08:28:08.014]                   }
[08:28:08.014]                   ...future.strategy.old <- future::plan("list")
[08:28:08.014]                   options(future.plan = NULL)
[08:28:08.014]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.014]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:08.014]                 }
[08:28:08.014]                 ...future.workdir <- getwd()
[08:28:08.014]             }
[08:28:08.014]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:08.014]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:08.014]         }
[08:28:08.014]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:08.014]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:08.014]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:08.014]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[08:28:08.014]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:08.014]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:08.014]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:08.014]             base::names(...future.oldOptions))
[08:28:08.014]     }
[08:28:08.014]     if (FALSE) {
[08:28:08.014]     }
[08:28:08.014]     else {
[08:28:08.014]         if (TRUE) {
[08:28:08.014]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:08.014]                 open = "w")
[08:28:08.014]         }
[08:28:08.014]         else {
[08:28:08.014]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:08.014]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:08.014]         }
[08:28:08.014]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:08.014]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:08.014]             base::sink(type = "output", split = FALSE)
[08:28:08.014]             base::close(...future.stdout)
[08:28:08.014]         }, add = TRUE)
[08:28:08.014]     }
[08:28:08.014]     ...future.frame <- base::sys.nframe()
[08:28:08.014]     ...future.conditions <- base::list()
[08:28:08.014]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:08.014]     if (FALSE) {
[08:28:08.014]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:08.014]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:08.014]     }
[08:28:08.014]     ...future.result <- base::tryCatch({
[08:28:08.014]         base::withCallingHandlers({
[08:28:08.014]             ...future.value <- base::withVisible(base::local({
[08:28:08.014]                 ...future.makeSendCondition <- base::local({
[08:28:08.014]                   sendCondition <- NULL
[08:28:08.014]                   function(frame = 1L) {
[08:28:08.014]                     if (is.function(sendCondition)) 
[08:28:08.014]                       return(sendCondition)
[08:28:08.014]                     ns <- getNamespace("parallel")
[08:28:08.014]                     if (exists("sendData", mode = "function", 
[08:28:08.014]                       envir = ns)) {
[08:28:08.014]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:08.014]                         envir = ns)
[08:28:08.014]                       envir <- sys.frame(frame)
[08:28:08.014]                       master <- NULL
[08:28:08.014]                       while (!identical(envir, .GlobalEnv) && 
[08:28:08.014]                         !identical(envir, emptyenv())) {
[08:28:08.014]                         if (exists("master", mode = "list", envir = envir, 
[08:28:08.014]                           inherits = FALSE)) {
[08:28:08.014]                           master <- get("master", mode = "list", 
[08:28:08.014]                             envir = envir, inherits = FALSE)
[08:28:08.014]                           if (inherits(master, c("SOCKnode", 
[08:28:08.014]                             "SOCK0node"))) {
[08:28:08.014]                             sendCondition <<- function(cond) {
[08:28:08.014]                               data <- list(type = "VALUE", value = cond, 
[08:28:08.014]                                 success = TRUE)
[08:28:08.014]                               parallel_sendData(master, data)
[08:28:08.014]                             }
[08:28:08.014]                             return(sendCondition)
[08:28:08.014]                           }
[08:28:08.014]                         }
[08:28:08.014]                         frame <- frame + 1L
[08:28:08.014]                         envir <- sys.frame(frame)
[08:28:08.014]                       }
[08:28:08.014]                     }
[08:28:08.014]                     sendCondition <<- function(cond) NULL
[08:28:08.014]                   }
[08:28:08.014]                 })
[08:28:08.014]                 withCallingHandlers({
[08:28:08.014]                   {
[08:28:08.014]                     env[[b]]
[08:28:08.014]                   }
[08:28:08.014]                 }, immediateCondition = function(cond) {
[08:28:08.014]                   sendCondition <- ...future.makeSendCondition()
[08:28:08.014]                   sendCondition(cond)
[08:28:08.014]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.014]                   {
[08:28:08.014]                     inherits <- base::inherits
[08:28:08.014]                     invokeRestart <- base::invokeRestart
[08:28:08.014]                     is.null <- base::is.null
[08:28:08.014]                     muffled <- FALSE
[08:28:08.014]                     if (inherits(cond, "message")) {
[08:28:08.014]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:08.014]                       if (muffled) 
[08:28:08.014]                         invokeRestart("muffleMessage")
[08:28:08.014]                     }
[08:28:08.014]                     else if (inherits(cond, "warning")) {
[08:28:08.014]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:08.014]                       if (muffled) 
[08:28:08.014]                         invokeRestart("muffleWarning")
[08:28:08.014]                     }
[08:28:08.014]                     else if (inherits(cond, "condition")) {
[08:28:08.014]                       if (!is.null(pattern)) {
[08:28:08.014]                         computeRestarts <- base::computeRestarts
[08:28:08.014]                         grepl <- base::grepl
[08:28:08.014]                         restarts <- computeRestarts(cond)
[08:28:08.014]                         for (restart in restarts) {
[08:28:08.014]                           name <- restart$name
[08:28:08.014]                           if (is.null(name)) 
[08:28:08.014]                             next
[08:28:08.014]                           if (!grepl(pattern, name)) 
[08:28:08.014]                             next
[08:28:08.014]                           invokeRestart(restart)
[08:28:08.014]                           muffled <- TRUE
[08:28:08.014]                           break
[08:28:08.014]                         }
[08:28:08.014]                       }
[08:28:08.014]                     }
[08:28:08.014]                     invisible(muffled)
[08:28:08.014]                   }
[08:28:08.014]                   muffleCondition(cond)
[08:28:08.014]                 })
[08:28:08.014]             }))
[08:28:08.014]             future::FutureResult(value = ...future.value$value, 
[08:28:08.014]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.014]                   ...future.rng), globalenv = if (FALSE) 
[08:28:08.014]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:08.014]                     ...future.globalenv.names))
[08:28:08.014]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:08.014]         }, condition = base::local({
[08:28:08.014]             c <- base::c
[08:28:08.014]             inherits <- base::inherits
[08:28:08.014]             invokeRestart <- base::invokeRestart
[08:28:08.014]             length <- base::length
[08:28:08.014]             list <- base::list
[08:28:08.014]             seq.int <- base::seq.int
[08:28:08.014]             signalCondition <- base::signalCondition
[08:28:08.014]             sys.calls <- base::sys.calls
[08:28:08.014]             `[[` <- base::`[[`
[08:28:08.014]             `+` <- base::`+`
[08:28:08.014]             `<<-` <- base::`<<-`
[08:28:08.014]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:08.014]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:08.014]                   3L)]
[08:28:08.014]             }
[08:28:08.014]             function(cond) {
[08:28:08.014]                 is_error <- inherits(cond, "error")
[08:28:08.014]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:08.014]                   NULL)
[08:28:08.014]                 if (is_error) {
[08:28:08.014]                   sessionInformation <- function() {
[08:28:08.014]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:08.014]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:08.014]                       search = base::search(), system = base::Sys.info())
[08:28:08.014]                   }
[08:28:08.014]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.014]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:08.014]                     cond$call), session = sessionInformation(), 
[08:28:08.014]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:08.014]                   signalCondition(cond)
[08:28:08.014]                 }
[08:28:08.014]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:08.014]                 "immediateCondition"))) {
[08:28:08.014]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:08.014]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.014]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:08.014]                   if (TRUE && !signal) {
[08:28:08.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.014]                     {
[08:28:08.014]                       inherits <- base::inherits
[08:28:08.014]                       invokeRestart <- base::invokeRestart
[08:28:08.014]                       is.null <- base::is.null
[08:28:08.014]                       muffled <- FALSE
[08:28:08.014]                       if (inherits(cond, "message")) {
[08:28:08.014]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.014]                         if (muffled) 
[08:28:08.014]                           invokeRestart("muffleMessage")
[08:28:08.014]                       }
[08:28:08.014]                       else if (inherits(cond, "warning")) {
[08:28:08.014]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.014]                         if (muffled) 
[08:28:08.014]                           invokeRestart("muffleWarning")
[08:28:08.014]                       }
[08:28:08.014]                       else if (inherits(cond, "condition")) {
[08:28:08.014]                         if (!is.null(pattern)) {
[08:28:08.014]                           computeRestarts <- base::computeRestarts
[08:28:08.014]                           grepl <- base::grepl
[08:28:08.014]                           restarts <- computeRestarts(cond)
[08:28:08.014]                           for (restart in restarts) {
[08:28:08.014]                             name <- restart$name
[08:28:08.014]                             if (is.null(name)) 
[08:28:08.014]                               next
[08:28:08.014]                             if (!grepl(pattern, name)) 
[08:28:08.014]                               next
[08:28:08.014]                             invokeRestart(restart)
[08:28:08.014]                             muffled <- TRUE
[08:28:08.014]                             break
[08:28:08.014]                           }
[08:28:08.014]                         }
[08:28:08.014]                       }
[08:28:08.014]                       invisible(muffled)
[08:28:08.014]                     }
[08:28:08.014]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.014]                   }
[08:28:08.014]                 }
[08:28:08.014]                 else {
[08:28:08.014]                   if (TRUE) {
[08:28:08.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.014]                     {
[08:28:08.014]                       inherits <- base::inherits
[08:28:08.014]                       invokeRestart <- base::invokeRestart
[08:28:08.014]                       is.null <- base::is.null
[08:28:08.014]                       muffled <- FALSE
[08:28:08.014]                       if (inherits(cond, "message")) {
[08:28:08.014]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.014]                         if (muffled) 
[08:28:08.014]                           invokeRestart("muffleMessage")
[08:28:08.014]                       }
[08:28:08.014]                       else if (inherits(cond, "warning")) {
[08:28:08.014]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.014]                         if (muffled) 
[08:28:08.014]                           invokeRestart("muffleWarning")
[08:28:08.014]                       }
[08:28:08.014]                       else if (inherits(cond, "condition")) {
[08:28:08.014]                         if (!is.null(pattern)) {
[08:28:08.014]                           computeRestarts <- base::computeRestarts
[08:28:08.014]                           grepl <- base::grepl
[08:28:08.014]                           restarts <- computeRestarts(cond)
[08:28:08.014]                           for (restart in restarts) {
[08:28:08.014]                             name <- restart$name
[08:28:08.014]                             if (is.null(name)) 
[08:28:08.014]                               next
[08:28:08.014]                             if (!grepl(pattern, name)) 
[08:28:08.014]                               next
[08:28:08.014]                             invokeRestart(restart)
[08:28:08.014]                             muffled <- TRUE
[08:28:08.014]                             break
[08:28:08.014]                           }
[08:28:08.014]                         }
[08:28:08.014]                       }
[08:28:08.014]                       invisible(muffled)
[08:28:08.014]                     }
[08:28:08.014]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.014]                   }
[08:28:08.014]                 }
[08:28:08.014]             }
[08:28:08.014]         }))
[08:28:08.014]     }, error = function(ex) {
[08:28:08.014]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:08.014]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.014]                 ...future.rng), started = ...future.startTime, 
[08:28:08.014]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:08.014]             version = "1.8"), class = "FutureResult")
[08:28:08.014]     }, finally = {
[08:28:08.014]         if (!identical(...future.workdir, getwd())) 
[08:28:08.014]             setwd(...future.workdir)
[08:28:08.014]         {
[08:28:08.014]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:08.014]                 ...future.oldOptions$nwarnings <- NULL
[08:28:08.014]             }
[08:28:08.014]             base::options(...future.oldOptions)
[08:28:08.014]             if (.Platform$OS.type == "windows") {
[08:28:08.014]                 old_names <- names(...future.oldEnvVars)
[08:28:08.014]                 envs <- base::Sys.getenv()
[08:28:08.014]                 names <- names(envs)
[08:28:08.014]                 common <- intersect(names, old_names)
[08:28:08.014]                 added <- setdiff(names, old_names)
[08:28:08.014]                 removed <- setdiff(old_names, names)
[08:28:08.014]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:08.014]                   envs[common]]
[08:28:08.014]                 NAMES <- toupper(changed)
[08:28:08.014]                 args <- list()
[08:28:08.014]                 for (kk in seq_along(NAMES)) {
[08:28:08.014]                   name <- changed[[kk]]
[08:28:08.014]                   NAME <- NAMES[[kk]]
[08:28:08.014]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.014]                     next
[08:28:08.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.014]                 }
[08:28:08.014]                 NAMES <- toupper(added)
[08:28:08.014]                 for (kk in seq_along(NAMES)) {
[08:28:08.014]                   name <- added[[kk]]
[08:28:08.014]                   NAME <- NAMES[[kk]]
[08:28:08.014]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.014]                     next
[08:28:08.014]                   args[[name]] <- ""
[08:28:08.014]                 }
[08:28:08.014]                 NAMES <- toupper(removed)
[08:28:08.014]                 for (kk in seq_along(NAMES)) {
[08:28:08.014]                   name <- removed[[kk]]
[08:28:08.014]                   NAME <- NAMES[[kk]]
[08:28:08.014]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.014]                     next
[08:28:08.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.014]                 }
[08:28:08.014]                 if (length(args) > 0) 
[08:28:08.014]                   base::do.call(base::Sys.setenv, args = args)
[08:28:08.014]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:08.014]             }
[08:28:08.014]             else {
[08:28:08.014]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:08.014]             }
[08:28:08.014]             {
[08:28:08.014]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:08.014]                   0L) {
[08:28:08.014]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:08.014]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:08.014]                   base::options(opts)
[08:28:08.014]                 }
[08:28:08.014]                 {
[08:28:08.014]                   {
[08:28:08.014]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:08.014]                     NULL
[08:28:08.014]                   }
[08:28:08.014]                   options(future.plan = NULL)
[08:28:08.014]                   if (is.na(NA_character_)) 
[08:28:08.014]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.014]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:08.014]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:08.014]                     .init = FALSE)
[08:28:08.014]                 }
[08:28:08.014]             }
[08:28:08.014]         }
[08:28:08.014]     })
[08:28:08.014]     if (TRUE) {
[08:28:08.014]         base::sink(type = "output", split = FALSE)
[08:28:08.014]         if (TRUE) {
[08:28:08.014]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:08.014]         }
[08:28:08.014]         else {
[08:28:08.014]             ...future.result["stdout"] <- base::list(NULL)
[08:28:08.014]         }
[08:28:08.014]         base::close(...future.stdout)
[08:28:08.014]         ...future.stdout <- NULL
[08:28:08.014]     }
[08:28:08.014]     ...future.result$conditions <- ...future.conditions
[08:28:08.014]     ...future.result$finished <- base::Sys.time()
[08:28:08.014]     ...future.result
[08:28:08.014] }
[08:28:08.017] Exporting 2 global objects (809 bytes) to cluster node #1 ...
[08:28:08.017] Exporting ‘env’ (459 bytes) to cluster node #1 ...
[08:28:08.017] Exporting ‘env’ (459 bytes) to cluster node #1 ... DONE
[08:28:08.017] Exporting ‘b’ (40 bytes) to cluster node #1 ...
[08:28:08.018] Exporting ‘b’ (40 bytes) to cluster node #1 ... DONE
[08:28:08.018] Exporting 2 global objects (809 bytes) to cluster node #1 ... DONE
[08:28:08.018] MultisessionFuture started
[08:28:08.018] - Launch lazy future ... done
[08:28:08.019] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[08:28:08.019] result() for ClusterFuture ...
[08:28:08.019] receiveMessageFromWorker() for ClusterFuture ...
[08:28:08.019] - Validating connection of MultisessionFuture
[08:28:08.060] - received message: FutureResult
[08:28:08.060] - Received FutureResult
[08:28:08.060] - Erased future from FutureRegistry
[08:28:08.060] result() for ClusterFuture ...
[08:28:08.060] - result already collected: FutureResult
[08:28:08.060] result() for ClusterFuture ... done
[08:28:08.061] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:08.061] result() for ClusterFuture ... done
[08:28:08.061] result() for ClusterFuture ...
[08:28:08.061] - result already collected: FutureResult
[08:28:08.061] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[08:28:08.062] plan(): Setting new future strategy stack:
[08:28:08.062] List of future strategies:
[08:28:08.062] 1. FutureStrategy:
[08:28:08.062]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.062]    - tweaked: FALSE
[08:28:08.062]    - call: future::plan(oplan)
[08:28:08.063] plan(): nbrOfWorkers() = 1
> 
