
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:28:26.140] plan(): Setting new future strategy stack:
[08:28:26.141] List of future strategies:
[08:28:26.141] 1. sequential:
[08:28:26.141]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:26.141]    - tweaked: FALSE
[08:28:26.141]    - call: future::plan("sequential")
[08:28:26.155] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[08:28:26.174] plan(): Setting new future strategy stack:
[08:28:26.174] List of future strategies:
[08:28:26.174] 1. multicore:
[08:28:26.174]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:26.174]    - tweaked: FALSE
[08:28:26.174]    - call: plan(multicore)
[08:28:26.187] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() and multi-threading ...")
*** multicore() and multi-threading ...
> 
> message("supportsMulticore(): ", sQuote(supportsMulticore()))
supportsMulticore(): ‘TRUE’
> message("availableCores('multicore'): ", sQuote(availableCores("multicore")))
availableCores('multicore'): ‘2’
> message("supports_omp_threads(): ", sQuote(supports_omp_threads()))
[08:28:26.192] supports_omp_threads() = TRUE
supports_omp_threads(): ‘TRUE’
> 
> if (requireNamespace("RhpcBLASctl", quietly = TRUE)) {
+   message("Checking RhpcBLASctl capabilities ...")
+   nthreads_0 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_0 = nthreads_0))
+   message("- Number of OpenMP threads: ", sQuote(nthreads_0))
+   
+   message("- Trying to set number of OpenMP threads to one")
+   try(RhpcBLASctl::omp_set_num_threads(1L))
+   nthreads_1 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_1 = nthreads_1))
+   message("  - Number of OpenMP threads: ", sQuote(nthreads_1))
+   try(RhpcBLASctl::omp_set_num_threads(nthreads_0))
+ 
+   f <- future(RhpcBLASctl::omp_get_max_threads())
+   nthreads_child <- value(f)
+   utils::str(list(nthreads_child = nthreads_child))
+   message(sprintf("  - Number of OpenMP threads in %s future: %s", sQuote(class(f)[1]), sQuote(nthreads_child)))
+ 
+   nthreads_children <- parallel::mclapply(1:2, FUN = function(x) {
+     RhpcBLASctl::omp_get_max_threads()
+   })
+   utils::str(list(nthreads_children = nthreads_children))
+   message("  - Number of OpenMP threads in mclapply(): ", sQuote(nthreads_children[[1]]))
+ 
+   message("- Trying to reset number of OpenMP threads")
+   nthreads_2 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_2 = nthreads_2))
+   message("  - Number of OpenMP threads: ", sQuote(nthreads_2))
+   stopifnot(identical(nthreads_2, nthreads_0))
+   message("Checking RhpcBLASctl capabilities ... done")
+ }
Checking RhpcBLASctl capabilities ...
List of 1
 $ nthreads_0: int 4
- Number of OpenMP threads: ‘4’
- Trying to set number of OpenMP threads to one
List of 1
 $ nthreads_1: int 1
  - Number of OpenMP threads: ‘1’
[08:28:26.197] getGlobalsAndPackages() ...
[08:28:26.198] Searching for globals...
[08:28:26.201] - globals found: [1] ‘::’
[08:28:26.201] Searching for globals ... DONE
[08:28:26.201] Resolving globals: FALSE
[08:28:26.202] 
[08:28:26.202] 
[08:28:26.202] getGlobalsAndPackages() ... DONE
[08:28:26.202] run() for ‘Future’ ...
[08:28:26.203] - state: ‘created’
[08:28:26.203] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:26.207] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:26.207] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:26.207]   - Field: ‘label’
[08:28:26.208]   - Field: ‘local’
[08:28:26.208]   - Field: ‘owner’
[08:28:26.208]   - Field: ‘envir’
[08:28:26.208]   - Field: ‘workers’
[08:28:26.208]   - Field: ‘packages’
[08:28:26.208]   - Field: ‘gc’
[08:28:26.208]   - Field: ‘job’
[08:28:26.208]   - Field: ‘conditions’
[08:28:26.208]   - Field: ‘expr’
[08:28:26.208]   - Field: ‘uuid’
[08:28:26.208]   - Field: ‘seed’
[08:28:26.209]   - Field: ‘version’
[08:28:26.209]   - Field: ‘result’
[08:28:26.209]   - Field: ‘asynchronous’
[08:28:26.209]   - Field: ‘calls’
[08:28:26.209]   - Field: ‘globals’
[08:28:26.209]   - Field: ‘stdout’
[08:28:26.209]   - Field: ‘earlySignal’
[08:28:26.209]   - Field: ‘lazy’
[08:28:26.209]   - Field: ‘state’
[08:28:26.209] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:26.209] - Launch lazy future ...
[08:28:26.211] Packages needed by the future expression (n = 0): <none>
[08:28:26.211] Packages needed by future strategies (n = 0): <none>
[08:28:26.211] {
[08:28:26.211]     {
[08:28:26.211]         {
[08:28:26.211]             ...future.startTime <- base::Sys.time()
[08:28:26.211]             {
[08:28:26.211]                 {
[08:28:26.211]                   {
[08:28:26.211]                     {
[08:28:26.211]                       base::local({
[08:28:26.211]                         has_future <- base::requireNamespace("future", 
[08:28:26.211]                           quietly = TRUE)
[08:28:26.211]                         if (has_future) {
[08:28:26.211]                           ns <- base::getNamespace("future")
[08:28:26.211]                           version <- ns[[".package"]][["version"]]
[08:28:26.211]                           if (is.null(version)) 
[08:28:26.211]                             version <- utils::packageVersion("future")
[08:28:26.211]                         }
[08:28:26.211]                         else {
[08:28:26.211]                           version <- NULL
[08:28:26.211]                         }
[08:28:26.211]                         if (!has_future || version < "1.8.0") {
[08:28:26.211]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:26.211]                             "", base::R.version$version.string), 
[08:28:26.211]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:26.211]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:26.211]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:26.211]                               "release", "version")], collapse = " "), 
[08:28:26.211]                             hostname = base::Sys.info()[["nodename"]])
[08:28:26.211]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:26.211]                             info)
[08:28:26.211]                           info <- base::paste(info, collapse = "; ")
[08:28:26.211]                           if (!has_future) {
[08:28:26.211]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:26.211]                               info)
[08:28:26.211]                           }
[08:28:26.211]                           else {
[08:28:26.211]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:26.211]                               info, version)
[08:28:26.211]                           }
[08:28:26.211]                           base::stop(msg)
[08:28:26.211]                         }
[08:28:26.211]                       })
[08:28:26.211]                     }
[08:28:26.211]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:26.211]                     base::options(mc.cores = 1L)
[08:28:26.211]                   }
[08:28:26.211]                   ...future.strategy.old <- future::plan("list")
[08:28:26.211]                   options(future.plan = NULL)
[08:28:26.211]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:26.211]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:26.211]                 }
[08:28:26.211]                 ...future.workdir <- getwd()
[08:28:26.211]             }
[08:28:26.211]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:26.211]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:26.211]         }
[08:28:26.211]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:26.211]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:26.211]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:26.211]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:26.211]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:26.211]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:26.211]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:26.211]             base::names(...future.oldOptions))
[08:28:26.211]     }
[08:28:26.211]     if (FALSE) {
[08:28:26.211]     }
[08:28:26.211]     else {
[08:28:26.211]         if (TRUE) {
[08:28:26.211]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:26.211]                 open = "w")
[08:28:26.211]         }
[08:28:26.211]         else {
[08:28:26.211]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:26.211]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:26.211]         }
[08:28:26.211]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:26.211]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:26.211]             base::sink(type = "output", split = FALSE)
[08:28:26.211]             base::close(...future.stdout)
[08:28:26.211]         }, add = TRUE)
[08:28:26.211]     }
[08:28:26.211]     ...future.frame <- base::sys.nframe()
[08:28:26.211]     ...future.conditions <- base::list()
[08:28:26.211]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:26.211]     if (FALSE) {
[08:28:26.211]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:26.211]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:26.211]     }
[08:28:26.211]     ...future.result <- base::tryCatch({
[08:28:26.211]         base::withCallingHandlers({
[08:28:26.211]             ...future.value <- base::withVisible(base::local({
[08:28:26.211]                 withCallingHandlers({
[08:28:26.211]                   RhpcBLASctl::omp_get_max_threads()
[08:28:26.211]                 }, immediateCondition = function(cond) {
[08:28:26.211]                   save_rds <- function (object, pathname, ...) 
[08:28:26.211]                   {
[08:28:26.211]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:26.211]                     if (file_test("-f", pathname_tmp)) {
[08:28:26.211]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.211]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:26.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.211]                         fi_tmp[["mtime"]])
[08:28:26.211]                     }
[08:28:26.211]                     tryCatch({
[08:28:26.211]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:26.211]                     }, error = function(ex) {
[08:28:26.211]                       msg <- conditionMessage(ex)
[08:28:26.211]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.211]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:26.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.211]                         fi_tmp[["mtime"]], msg)
[08:28:26.211]                       ex$message <- msg
[08:28:26.211]                       stop(ex)
[08:28:26.211]                     })
[08:28:26.211]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:26.211]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:26.211]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:26.211]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.211]                       fi <- file.info(pathname)
[08:28:26.211]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:26.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.211]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:26.211]                         fi[["size"]], fi[["mtime"]])
[08:28:26.211]                       stop(msg)
[08:28:26.211]                     }
[08:28:26.211]                     invisible(pathname)
[08:28:26.211]                   }
[08:28:26.211]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:26.211]                     rootPath = tempdir()) 
[08:28:26.211]                   {
[08:28:26.211]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:26.211]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:26.211]                       tmpdir = path, fileext = ".rds")
[08:28:26.211]                     save_rds(obj, file)
[08:28:26.211]                   }
[08:28:26.211]                   saveImmediateCondition(cond, path = "/tmp/RtmpmQlwJZ/.future/immediateConditions")
[08:28:26.211]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.211]                   {
[08:28:26.211]                     inherits <- base::inherits
[08:28:26.211]                     invokeRestart <- base::invokeRestart
[08:28:26.211]                     is.null <- base::is.null
[08:28:26.211]                     muffled <- FALSE
[08:28:26.211]                     if (inherits(cond, "message")) {
[08:28:26.211]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:26.211]                       if (muffled) 
[08:28:26.211]                         invokeRestart("muffleMessage")
[08:28:26.211]                     }
[08:28:26.211]                     else if (inherits(cond, "warning")) {
[08:28:26.211]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:26.211]                       if (muffled) 
[08:28:26.211]                         invokeRestart("muffleWarning")
[08:28:26.211]                     }
[08:28:26.211]                     else if (inherits(cond, "condition")) {
[08:28:26.211]                       if (!is.null(pattern)) {
[08:28:26.211]                         computeRestarts <- base::computeRestarts
[08:28:26.211]                         grepl <- base::grepl
[08:28:26.211]                         restarts <- computeRestarts(cond)
[08:28:26.211]                         for (restart in restarts) {
[08:28:26.211]                           name <- restart$name
[08:28:26.211]                           if (is.null(name)) 
[08:28:26.211]                             next
[08:28:26.211]                           if (!grepl(pattern, name)) 
[08:28:26.211]                             next
[08:28:26.211]                           invokeRestart(restart)
[08:28:26.211]                           muffled <- TRUE
[08:28:26.211]                           break
[08:28:26.211]                         }
[08:28:26.211]                       }
[08:28:26.211]                     }
[08:28:26.211]                     invisible(muffled)
[08:28:26.211]                   }
[08:28:26.211]                   muffleCondition(cond)
[08:28:26.211]                 })
[08:28:26.211]             }))
[08:28:26.211]             future::FutureResult(value = ...future.value$value, 
[08:28:26.211]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:26.211]                   ...future.rng), globalenv = if (FALSE) 
[08:28:26.211]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:26.211]                     ...future.globalenv.names))
[08:28:26.211]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:26.211]         }, condition = base::local({
[08:28:26.211]             c <- base::c
[08:28:26.211]             inherits <- base::inherits
[08:28:26.211]             invokeRestart <- base::invokeRestart
[08:28:26.211]             length <- base::length
[08:28:26.211]             list <- base::list
[08:28:26.211]             seq.int <- base::seq.int
[08:28:26.211]             signalCondition <- base::signalCondition
[08:28:26.211]             sys.calls <- base::sys.calls
[08:28:26.211]             `[[` <- base::`[[`
[08:28:26.211]             `+` <- base::`+`
[08:28:26.211]             `<<-` <- base::`<<-`
[08:28:26.211]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:26.211]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:26.211]                   3L)]
[08:28:26.211]             }
[08:28:26.211]             function(cond) {
[08:28:26.211]                 is_error <- inherits(cond, "error")
[08:28:26.211]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:26.211]                   NULL)
[08:28:26.211]                 if (is_error) {
[08:28:26.211]                   sessionInformation <- function() {
[08:28:26.211]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:26.211]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:26.211]                       search = base::search(), system = base::Sys.info())
[08:28:26.211]                   }
[08:28:26.211]                   ...future.conditions[[length(...future.conditions) + 
[08:28:26.211]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:26.211]                     cond$call), session = sessionInformation(), 
[08:28:26.211]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:26.211]                   signalCondition(cond)
[08:28:26.211]                 }
[08:28:26.211]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:26.211]                 "immediateCondition"))) {
[08:28:26.211]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:26.211]                   ...future.conditions[[length(...future.conditions) + 
[08:28:26.211]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:26.211]                   if (TRUE && !signal) {
[08:28:26.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.211]                     {
[08:28:26.211]                       inherits <- base::inherits
[08:28:26.211]                       invokeRestart <- base::invokeRestart
[08:28:26.211]                       is.null <- base::is.null
[08:28:26.211]                       muffled <- FALSE
[08:28:26.211]                       if (inherits(cond, "message")) {
[08:28:26.211]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:26.211]                         if (muffled) 
[08:28:26.211]                           invokeRestart("muffleMessage")
[08:28:26.211]                       }
[08:28:26.211]                       else if (inherits(cond, "warning")) {
[08:28:26.211]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:26.211]                         if (muffled) 
[08:28:26.211]                           invokeRestart("muffleWarning")
[08:28:26.211]                       }
[08:28:26.211]                       else if (inherits(cond, "condition")) {
[08:28:26.211]                         if (!is.null(pattern)) {
[08:28:26.211]                           computeRestarts <- base::computeRestarts
[08:28:26.211]                           grepl <- base::grepl
[08:28:26.211]                           restarts <- computeRestarts(cond)
[08:28:26.211]                           for (restart in restarts) {
[08:28:26.211]                             name <- restart$name
[08:28:26.211]                             if (is.null(name)) 
[08:28:26.211]                               next
[08:28:26.211]                             if (!grepl(pattern, name)) 
[08:28:26.211]                               next
[08:28:26.211]                             invokeRestart(restart)
[08:28:26.211]                             muffled <- TRUE
[08:28:26.211]                             break
[08:28:26.211]                           }
[08:28:26.211]                         }
[08:28:26.211]                       }
[08:28:26.211]                       invisible(muffled)
[08:28:26.211]                     }
[08:28:26.211]                     muffleCondition(cond, pattern = "^muffle")
[08:28:26.211]                   }
[08:28:26.211]                 }
[08:28:26.211]                 else {
[08:28:26.211]                   if (TRUE) {
[08:28:26.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.211]                     {
[08:28:26.211]                       inherits <- base::inherits
[08:28:26.211]                       invokeRestart <- base::invokeRestart
[08:28:26.211]                       is.null <- base::is.null
[08:28:26.211]                       muffled <- FALSE
[08:28:26.211]                       if (inherits(cond, "message")) {
[08:28:26.211]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:26.211]                         if (muffled) 
[08:28:26.211]                           invokeRestart("muffleMessage")
[08:28:26.211]                       }
[08:28:26.211]                       else if (inherits(cond, "warning")) {
[08:28:26.211]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:26.211]                         if (muffled) 
[08:28:26.211]                           invokeRestart("muffleWarning")
[08:28:26.211]                       }
[08:28:26.211]                       else if (inherits(cond, "condition")) {
[08:28:26.211]                         if (!is.null(pattern)) {
[08:28:26.211]                           computeRestarts <- base::computeRestarts
[08:28:26.211]                           grepl <- base::grepl
[08:28:26.211]                           restarts <- computeRestarts(cond)
[08:28:26.211]                           for (restart in restarts) {
[08:28:26.211]                             name <- restart$name
[08:28:26.211]                             if (is.null(name)) 
[08:28:26.211]                               next
[08:28:26.211]                             if (!grepl(pattern, name)) 
[08:28:26.211]                               next
[08:28:26.211]                             invokeRestart(restart)
[08:28:26.211]                             muffled <- TRUE
[08:28:26.211]                             break
[08:28:26.211]                           }
[08:28:26.211]                         }
[08:28:26.211]                       }
[08:28:26.211]                       invisible(muffled)
[08:28:26.211]                     }
[08:28:26.211]                     muffleCondition(cond, pattern = "^muffle")
[08:28:26.211]                   }
[08:28:26.211]                 }
[08:28:26.211]             }
[08:28:26.211]         }))
[08:28:26.211]     }, error = function(ex) {
[08:28:26.211]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:26.211]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:26.211]                 ...future.rng), started = ...future.startTime, 
[08:28:26.211]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:26.211]             version = "1.8"), class = "FutureResult")
[08:28:26.211]     }, finally = {
[08:28:26.211]         if (!identical(...future.workdir, getwd())) 
[08:28:26.211]             setwd(...future.workdir)
[08:28:26.211]         {
[08:28:26.211]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:26.211]                 ...future.oldOptions$nwarnings <- NULL
[08:28:26.211]             }
[08:28:26.211]             base::options(...future.oldOptions)
[08:28:26.211]             if (.Platform$OS.type == "windows") {
[08:28:26.211]                 old_names <- names(...future.oldEnvVars)
[08:28:26.211]                 envs <- base::Sys.getenv()
[08:28:26.211]                 names <- names(envs)
[08:28:26.211]                 common <- intersect(names, old_names)
[08:28:26.211]                 added <- setdiff(names, old_names)
[08:28:26.211]                 removed <- setdiff(old_names, names)
[08:28:26.211]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:26.211]                   envs[common]]
[08:28:26.211]                 NAMES <- toupper(changed)
[08:28:26.211]                 args <- list()
[08:28:26.211]                 for (kk in seq_along(NAMES)) {
[08:28:26.211]                   name <- changed[[kk]]
[08:28:26.211]                   NAME <- NAMES[[kk]]
[08:28:26.211]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.211]                     next
[08:28:26.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:26.211]                 }
[08:28:26.211]                 NAMES <- toupper(added)
[08:28:26.211]                 for (kk in seq_along(NAMES)) {
[08:28:26.211]                   name <- added[[kk]]
[08:28:26.211]                   NAME <- NAMES[[kk]]
[08:28:26.211]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.211]                     next
[08:28:26.211]                   args[[name]] <- ""
[08:28:26.211]                 }
[08:28:26.211]                 NAMES <- toupper(removed)
[08:28:26.211]                 for (kk in seq_along(NAMES)) {
[08:28:26.211]                   name <- removed[[kk]]
[08:28:26.211]                   NAME <- NAMES[[kk]]
[08:28:26.211]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.211]                     next
[08:28:26.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:26.211]                 }
[08:28:26.211]                 if (length(args) > 0) 
[08:28:26.211]                   base::do.call(base::Sys.setenv, args = args)
[08:28:26.211]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:26.211]             }
[08:28:26.211]             else {
[08:28:26.211]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:26.211]             }
[08:28:26.211]             {
[08:28:26.211]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:26.211]                   0L) {
[08:28:26.211]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:26.211]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:26.211]                   base::options(opts)
[08:28:26.211]                 }
[08:28:26.211]                 {
[08:28:26.211]                   {
[08:28:26.211]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:26.211]                     NULL
[08:28:26.211]                   }
[08:28:26.211]                   options(future.plan = NULL)
[08:28:26.211]                   if (is.na(NA_character_)) 
[08:28:26.211]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:26.211]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:26.211]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:26.211]                     .init = FALSE)
[08:28:26.211]                 }
[08:28:26.211]             }
[08:28:26.211]         }
[08:28:26.211]     })
[08:28:26.211]     if (TRUE) {
[08:28:26.211]         base::sink(type = "output", split = FALSE)
[08:28:26.211]         if (TRUE) {
[08:28:26.211]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:26.211]         }
[08:28:26.211]         else {
[08:28:26.211]             ...future.result["stdout"] <- base::list(NULL)
[08:28:26.211]         }
[08:28:26.211]         base::close(...future.stdout)
[08:28:26.211]         ...future.stdout <- NULL
[08:28:26.211]     }
[08:28:26.211]     ...future.result$conditions <- ...future.conditions
[08:28:26.211]     ...future.result$finished <- base::Sys.time()
[08:28:26.211]     ...future.result
[08:28:26.211] }
[08:28:26.214] requestCore(): workers = 2
[08:28:26.217] MulticoreFuture started
[08:28:26.217] - Launch lazy future ... done
[08:28:26.218] run() for ‘MulticoreFuture’ ... done
[08:28:26.218] plan(): Setting new future strategy stack:
[08:28:26.218] List of future strategies:
[08:28:26.218] 1. sequential:
[08:28:26.218]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:26.218]    - tweaked: FALSE
[08:28:26.218]    - call: NULL
[08:28:26.219] plan(): nbrOfWorkers() = 1
[08:28:26.219] result() for MulticoreFuture ...
[08:28:26.222] plan(): Setting new future strategy stack:
[08:28:26.222] List of future strategies:
[08:28:26.222] 1. multicore:
[08:28:26.222]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:26.222]    - tweaked: FALSE
[08:28:26.222]    - call: plan(multicore)
[08:28:26.225] plan(): nbrOfWorkers() = 2
[08:28:26.230] result() for MulticoreFuture ...
[08:28:26.230] result() for MulticoreFuture ... done
[08:28:26.231] result() for MulticoreFuture ... done
[08:28:26.231] result() for MulticoreFuture ...
[08:28:26.231] result() for MulticoreFuture ... done
List of 1
 $ nthreads_child: int 4
  - Number of OpenMP threads in ‘MulticoreFuture’ future: ‘4’
List of 1
 $ nthreads_children:List of 2
  ..$ : int 4
  ..$ : int 4
  - Number of OpenMP threads in mclapply(): ‘4’
- Trying to reset number of OpenMP threads
List of 1
 $ nthreads_2: int 4
  - Number of OpenMP threads: ‘4’
Checking RhpcBLASctl capabilities ... done
> 
> if (supportsMulticore() && availableCores("multicore") >= 2L && supports_omp_threads()) {
+   nthreads_0 <- RhpcBLASctl::omp_get_max_threads()
+   
+   for (enable in c(TRUE, FALSE)) {
+     options(future.fork.multithreading.enable = enable)
+ 
+     message(sprintf("'future.fork.multithreading.enable' = %s ...", enable))
+ 
+     f <- future(list(nthreads = RhpcBLASctl::omp_get_max_threads()))
+     nthreads <- value(f)$nthreads
+     cat(sprintf("Number of OpenMP threads in %s future: %d\n", sQuote(class(f)[1]), nthreads))
+ 
+     ## Assert that single-threading was set?
+     if (enable) {
+       stopifnot(enable && nthreads >= nthreads_0)
+     } else {
+       ## FIXME: On CRAN r-devel-linux-x86_64-fedora-clang (2020-01-17):
+       ## Number of OpenMP threads in 'MulticoreFuture' future: 24
+       ## Error: !enable && nthreads == 1L is not TRUE
+       stopifnot(!enable && nthreads == 1L)
+     }
+       
+     message(sprintf("'future.fork.multithreading.enable' = %s ... DONE", enable))
+   } ## for (enable ...)
+ } ## if (requireNamespace("RhpcBLASctl", ...)) {
[08:28:26.243] supports_omp_threads() = TRUE
'future.fork.multithreading.enable' = TRUE ...
[08:28:26.253] getGlobalsAndPackages() ...
[08:28:26.253] Searching for globals...
[08:28:26.254] - globals found: [2] ‘list’, ‘::’
[08:28:26.254] Searching for globals ... DONE
[08:28:26.255] Resolving globals: FALSE
[08:28:26.255] 
[08:28:26.255] 
[08:28:26.255] getGlobalsAndPackages() ... DONE
[08:28:26.256] run() for ‘Future’ ...
[08:28:26.256] - state: ‘created’
[08:28:26.256] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:26.258] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:26.258] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:26.258]   - Field: ‘label’
[08:28:26.258]   - Field: ‘local’
[08:28:26.258]   - Field: ‘owner’
[08:28:26.261]   - Field: ‘envir’
[08:28:26.262]   - Field: ‘workers’
[08:28:26.262]   - Field: ‘packages’
[08:28:26.262]   - Field: ‘gc’
[08:28:26.262]   - Field: ‘job’
[08:28:26.262]   - Field: ‘conditions’
[08:28:26.262]   - Field: ‘expr’
[08:28:26.262]   - Field: ‘uuid’
[08:28:26.262]   - Field: ‘seed’
[08:28:26.263]   - Field: ‘version’
[08:28:26.263]   - Field: ‘result’
[08:28:26.263]   - Field: ‘asynchronous’
[08:28:26.263]   - Field: ‘calls’
[08:28:26.263]   - Field: ‘globals’
[08:28:26.263]   - Field: ‘stdout’
[08:28:26.263]   - Field: ‘earlySignal’
[08:28:26.263]   - Field: ‘lazy’
[08:28:26.264]   - Field: ‘state’
[08:28:26.264] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:26.264] - Launch lazy future ...
[08:28:26.264] Packages needed by the future expression (n = 0): <none>
[08:28:26.264] Packages needed by future strategies (n = 0): <none>
[08:28:26.265] {
[08:28:26.265]     {
[08:28:26.265]         {
[08:28:26.265]             ...future.startTime <- base::Sys.time()
[08:28:26.265]             {
[08:28:26.265]                 {
[08:28:26.265]                   {
[08:28:26.265]                     {
[08:28:26.265]                       base::local({
[08:28:26.265]                         has_future <- base::requireNamespace("future", 
[08:28:26.265]                           quietly = TRUE)
[08:28:26.265]                         if (has_future) {
[08:28:26.265]                           ns <- base::getNamespace("future")
[08:28:26.265]                           version <- ns[[".package"]][["version"]]
[08:28:26.265]                           if (is.null(version)) 
[08:28:26.265]                             version <- utils::packageVersion("future")
[08:28:26.265]                         }
[08:28:26.265]                         else {
[08:28:26.265]                           version <- NULL
[08:28:26.265]                         }
[08:28:26.265]                         if (!has_future || version < "1.8.0") {
[08:28:26.265]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:26.265]                             "", base::R.version$version.string), 
[08:28:26.265]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:26.265]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:26.265]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:26.265]                               "release", "version")], collapse = " "), 
[08:28:26.265]                             hostname = base::Sys.info()[["nodename"]])
[08:28:26.265]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:26.265]                             info)
[08:28:26.265]                           info <- base::paste(info, collapse = "; ")
[08:28:26.265]                           if (!has_future) {
[08:28:26.265]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:26.265]                               info)
[08:28:26.265]                           }
[08:28:26.265]                           else {
[08:28:26.265]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:26.265]                               info, version)
[08:28:26.265]                           }
[08:28:26.265]                           base::stop(msg)
[08:28:26.265]                         }
[08:28:26.265]                       })
[08:28:26.265]                     }
[08:28:26.265]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:26.265]                     base::options(mc.cores = 1L)
[08:28:26.265]                   }
[08:28:26.265]                   ...future.strategy.old <- future::plan("list")
[08:28:26.265]                   options(future.plan = NULL)
[08:28:26.265]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:26.265]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:26.265]                 }
[08:28:26.265]                 ...future.workdir <- getwd()
[08:28:26.265]             }
[08:28:26.265]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:26.265]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:26.265]         }
[08:28:26.265]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:26.265]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:26.265]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:26.265]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:26.265]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:26.265]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:26.265]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:26.265]             base::names(...future.oldOptions))
[08:28:26.265]     }
[08:28:26.265]     if (FALSE) {
[08:28:26.265]     }
[08:28:26.265]     else {
[08:28:26.265]         if (TRUE) {
[08:28:26.265]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:26.265]                 open = "w")
[08:28:26.265]         }
[08:28:26.265]         else {
[08:28:26.265]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:26.265]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:26.265]         }
[08:28:26.265]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:26.265]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:26.265]             base::sink(type = "output", split = FALSE)
[08:28:26.265]             base::close(...future.stdout)
[08:28:26.265]         }, add = TRUE)
[08:28:26.265]     }
[08:28:26.265]     ...future.frame <- base::sys.nframe()
[08:28:26.265]     ...future.conditions <- base::list()
[08:28:26.265]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:26.265]     if (FALSE) {
[08:28:26.265]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:26.265]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:26.265]     }
[08:28:26.265]     ...future.result <- base::tryCatch({
[08:28:26.265]         base::withCallingHandlers({
[08:28:26.265]             ...future.value <- base::withVisible(base::local({
[08:28:26.265]                 withCallingHandlers({
[08:28:26.265]                   list(nthreads = RhpcBLASctl::omp_get_max_threads())
[08:28:26.265]                 }, immediateCondition = function(cond) {
[08:28:26.265]                   save_rds <- function (object, pathname, ...) 
[08:28:26.265]                   {
[08:28:26.265]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:26.265]                     if (file_test("-f", pathname_tmp)) {
[08:28:26.265]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.265]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:26.265]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.265]                         fi_tmp[["mtime"]])
[08:28:26.265]                     }
[08:28:26.265]                     tryCatch({
[08:28:26.265]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:26.265]                     }, error = function(ex) {
[08:28:26.265]                       msg <- conditionMessage(ex)
[08:28:26.265]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.265]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:26.265]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.265]                         fi_tmp[["mtime"]], msg)
[08:28:26.265]                       ex$message <- msg
[08:28:26.265]                       stop(ex)
[08:28:26.265]                     })
[08:28:26.265]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:26.265]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:26.265]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:26.265]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.265]                       fi <- file.info(pathname)
[08:28:26.265]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:26.265]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.265]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:26.265]                         fi[["size"]], fi[["mtime"]])
[08:28:26.265]                       stop(msg)
[08:28:26.265]                     }
[08:28:26.265]                     invisible(pathname)
[08:28:26.265]                   }
[08:28:26.265]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:26.265]                     rootPath = tempdir()) 
[08:28:26.265]                   {
[08:28:26.265]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:26.265]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:26.265]                       tmpdir = path, fileext = ".rds")
[08:28:26.265]                     save_rds(obj, file)
[08:28:26.265]                   }
[08:28:26.265]                   saveImmediateCondition(cond, path = "/tmp/RtmpmQlwJZ/.future/immediateConditions")
[08:28:26.265]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.265]                   {
[08:28:26.265]                     inherits <- base::inherits
[08:28:26.265]                     invokeRestart <- base::invokeRestart
[08:28:26.265]                     is.null <- base::is.null
[08:28:26.265]                     muffled <- FALSE
[08:28:26.265]                     if (inherits(cond, "message")) {
[08:28:26.265]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:26.265]                       if (muffled) 
[08:28:26.265]                         invokeRestart("muffleMessage")
[08:28:26.265]                     }
[08:28:26.265]                     else if (inherits(cond, "warning")) {
[08:28:26.265]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:26.265]                       if (muffled) 
[08:28:26.265]                         invokeRestart("muffleWarning")
[08:28:26.265]                     }
[08:28:26.265]                     else if (inherits(cond, "condition")) {
[08:28:26.265]                       if (!is.null(pattern)) {
[08:28:26.265]                         computeRestarts <- base::computeRestarts
[08:28:26.265]                         grepl <- base::grepl
[08:28:26.265]                         restarts <- computeRestarts(cond)
[08:28:26.265]                         for (restart in restarts) {
[08:28:26.265]                           name <- restart$name
[08:28:26.265]                           if (is.null(name)) 
[08:28:26.265]                             next
[08:28:26.265]                           if (!grepl(pattern, name)) 
[08:28:26.265]                             next
[08:28:26.265]                           invokeRestart(restart)
[08:28:26.265]                           muffled <- TRUE
[08:28:26.265]                           break
[08:28:26.265]                         }
[08:28:26.265]                       }
[08:28:26.265]                     }
[08:28:26.265]                     invisible(muffled)
[08:28:26.265]                   }
[08:28:26.265]                   muffleCondition(cond)
[08:28:26.265]                 })
[08:28:26.265]             }))
[08:28:26.265]             future::FutureResult(value = ...future.value$value, 
[08:28:26.265]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:26.265]                   ...future.rng), globalenv = if (FALSE) 
[08:28:26.265]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:26.265]                     ...future.globalenv.names))
[08:28:26.265]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:26.265]         }, condition = base::local({
[08:28:26.265]             c <- base::c
[08:28:26.265]             inherits <- base::inherits
[08:28:26.265]             invokeRestart <- base::invokeRestart
[08:28:26.265]             length <- base::length
[08:28:26.265]             list <- base::list
[08:28:26.265]             seq.int <- base::seq.int
[08:28:26.265]             signalCondition <- base::signalCondition
[08:28:26.265]             sys.calls <- base::sys.calls
[08:28:26.265]             `[[` <- base::`[[`
[08:28:26.265]             `+` <- base::`+`
[08:28:26.265]             `<<-` <- base::`<<-`
[08:28:26.265]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:26.265]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:26.265]                   3L)]
[08:28:26.265]             }
[08:28:26.265]             function(cond) {
[08:28:26.265]                 is_error <- inherits(cond, "error")
[08:28:26.265]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:26.265]                   NULL)
[08:28:26.265]                 if (is_error) {
[08:28:26.265]                   sessionInformation <- function() {
[08:28:26.265]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:26.265]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:26.265]                       search = base::search(), system = base::Sys.info())
[08:28:26.265]                   }
[08:28:26.265]                   ...future.conditions[[length(...future.conditions) + 
[08:28:26.265]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:26.265]                     cond$call), session = sessionInformation(), 
[08:28:26.265]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:26.265]                   signalCondition(cond)
[08:28:26.265]                 }
[08:28:26.265]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:26.265]                 "immediateCondition"))) {
[08:28:26.265]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:26.265]                   ...future.conditions[[length(...future.conditions) + 
[08:28:26.265]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:26.265]                   if (TRUE && !signal) {
[08:28:26.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.265]                     {
[08:28:26.265]                       inherits <- base::inherits
[08:28:26.265]                       invokeRestart <- base::invokeRestart
[08:28:26.265]                       is.null <- base::is.null
[08:28:26.265]                       muffled <- FALSE
[08:28:26.265]                       if (inherits(cond, "message")) {
[08:28:26.265]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:26.265]                         if (muffled) 
[08:28:26.265]                           invokeRestart("muffleMessage")
[08:28:26.265]                       }
[08:28:26.265]                       else if (inherits(cond, "warning")) {
[08:28:26.265]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:26.265]                         if (muffled) 
[08:28:26.265]                           invokeRestart("muffleWarning")
[08:28:26.265]                       }
[08:28:26.265]                       else if (inherits(cond, "condition")) {
[08:28:26.265]                         if (!is.null(pattern)) {
[08:28:26.265]                           computeRestarts <- base::computeRestarts
[08:28:26.265]                           grepl <- base::grepl
[08:28:26.265]                           restarts <- computeRestarts(cond)
[08:28:26.265]                           for (restart in restarts) {
[08:28:26.265]                             name <- restart$name
[08:28:26.265]                             if (is.null(name)) 
[08:28:26.265]                               next
[08:28:26.265]                             if (!grepl(pattern, name)) 
[08:28:26.265]                               next
[08:28:26.265]                             invokeRestart(restart)
[08:28:26.265]                             muffled <- TRUE
[08:28:26.265]                             break
[08:28:26.265]                           }
[08:28:26.265]                         }
[08:28:26.265]                       }
[08:28:26.265]                       invisible(muffled)
[08:28:26.265]                     }
[08:28:26.265]                     muffleCondition(cond, pattern = "^muffle")
[08:28:26.265]                   }
[08:28:26.265]                 }
[08:28:26.265]                 else {
[08:28:26.265]                   if (TRUE) {
[08:28:26.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.265]                     {
[08:28:26.265]                       inherits <- base::inherits
[08:28:26.265]                       invokeRestart <- base::invokeRestart
[08:28:26.265]                       is.null <- base::is.null
[08:28:26.265]                       muffled <- FALSE
[08:28:26.265]                       if (inherits(cond, "message")) {
[08:28:26.265]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:26.265]                         if (muffled) 
[08:28:26.265]                           invokeRestart("muffleMessage")
[08:28:26.265]                       }
[08:28:26.265]                       else if (inherits(cond, "warning")) {
[08:28:26.265]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:26.265]                         if (muffled) 
[08:28:26.265]                           invokeRestart("muffleWarning")
[08:28:26.265]                       }
[08:28:26.265]                       else if (inherits(cond, "condition")) {
[08:28:26.265]                         if (!is.null(pattern)) {
[08:28:26.265]                           computeRestarts <- base::computeRestarts
[08:28:26.265]                           grepl <- base::grepl
[08:28:26.265]                           restarts <- computeRestarts(cond)
[08:28:26.265]                           for (restart in restarts) {
[08:28:26.265]                             name <- restart$name
[08:28:26.265]                             if (is.null(name)) 
[08:28:26.265]                               next
[08:28:26.265]                             if (!grepl(pattern, name)) 
[08:28:26.265]                               next
[08:28:26.265]                             invokeRestart(restart)
[08:28:26.265]                             muffled <- TRUE
[08:28:26.265]                             break
[08:28:26.265]                           }
[08:28:26.265]                         }
[08:28:26.265]                       }
[08:28:26.265]                       invisible(muffled)
[08:28:26.265]                     }
[08:28:26.265]                     muffleCondition(cond, pattern = "^muffle")
[08:28:26.265]                   }
[08:28:26.265]                 }
[08:28:26.265]             }
[08:28:26.265]         }))
[08:28:26.265]     }, error = function(ex) {
[08:28:26.265]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:26.265]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:26.265]                 ...future.rng), started = ...future.startTime, 
[08:28:26.265]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:26.265]             version = "1.8"), class = "FutureResult")
[08:28:26.265]     }, finally = {
[08:28:26.265]         if (!identical(...future.workdir, getwd())) 
[08:28:26.265]             setwd(...future.workdir)
[08:28:26.265]         {
[08:28:26.265]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:26.265]                 ...future.oldOptions$nwarnings <- NULL
[08:28:26.265]             }
[08:28:26.265]             base::options(...future.oldOptions)
[08:28:26.265]             if (.Platform$OS.type == "windows") {
[08:28:26.265]                 old_names <- names(...future.oldEnvVars)
[08:28:26.265]                 envs <- base::Sys.getenv()
[08:28:26.265]                 names <- names(envs)
[08:28:26.265]                 common <- intersect(names, old_names)
[08:28:26.265]                 added <- setdiff(names, old_names)
[08:28:26.265]                 removed <- setdiff(old_names, names)
[08:28:26.265]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:26.265]                   envs[common]]
[08:28:26.265]                 NAMES <- toupper(changed)
[08:28:26.265]                 args <- list()
[08:28:26.265]                 for (kk in seq_along(NAMES)) {
[08:28:26.265]                   name <- changed[[kk]]
[08:28:26.265]                   NAME <- NAMES[[kk]]
[08:28:26.265]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.265]                     next
[08:28:26.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:26.265]                 }
[08:28:26.265]                 NAMES <- toupper(added)
[08:28:26.265]                 for (kk in seq_along(NAMES)) {
[08:28:26.265]                   name <- added[[kk]]
[08:28:26.265]                   NAME <- NAMES[[kk]]
[08:28:26.265]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.265]                     next
[08:28:26.265]                   args[[name]] <- ""
[08:28:26.265]                 }
[08:28:26.265]                 NAMES <- toupper(removed)
[08:28:26.265]                 for (kk in seq_along(NAMES)) {
[08:28:26.265]                   name <- removed[[kk]]
[08:28:26.265]                   NAME <- NAMES[[kk]]
[08:28:26.265]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.265]                     next
[08:28:26.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:26.265]                 }
[08:28:26.265]                 if (length(args) > 0) 
[08:28:26.265]                   base::do.call(base::Sys.setenv, args = args)
[08:28:26.265]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:26.265]             }
[08:28:26.265]             else {
[08:28:26.265]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:26.265]             }
[08:28:26.265]             {
[08:28:26.265]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:26.265]                   0L) {
[08:28:26.265]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:26.265]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:26.265]                   base::options(opts)
[08:28:26.265]                 }
[08:28:26.265]                 {
[08:28:26.265]                   {
[08:28:26.265]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:26.265]                     NULL
[08:28:26.265]                   }
[08:28:26.265]                   options(future.plan = NULL)
[08:28:26.265]                   if (is.na(NA_character_)) 
[08:28:26.265]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:26.265]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:26.265]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:26.265]                     .init = FALSE)
[08:28:26.265]                 }
[08:28:26.265]             }
[08:28:26.265]         }
[08:28:26.265]     })
[08:28:26.265]     if (TRUE) {
[08:28:26.265]         base::sink(type = "output", split = FALSE)
[08:28:26.265]         if (TRUE) {
[08:28:26.265]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:26.265]         }
[08:28:26.265]         else {
[08:28:26.265]             ...future.result["stdout"] <- base::list(NULL)
[08:28:26.265]         }
[08:28:26.265]         base::close(...future.stdout)
[08:28:26.265]         ...future.stdout <- NULL
[08:28:26.265]     }
[08:28:26.265]     ...future.result$conditions <- ...future.conditions
[08:28:26.265]     ...future.result$finished <- base::Sys.time()
[08:28:26.265]     ...future.result
[08:28:26.265] }
[08:28:26.267] requestCore(): workers = 2
[08:28:26.269] MulticoreFuture started
[08:28:26.270] - Launch lazy future ... done
[08:28:26.270] run() for ‘MulticoreFuture’ ... done
[08:28:26.270] result() for MulticoreFuture ...
[08:28:26.271] plan(): Setting new future strategy stack:
[08:28:26.271] List of future strategies:
[08:28:26.271] 1. sequential:
[08:28:26.271]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:26.271]    - tweaked: FALSE
[08:28:26.271]    - call: NULL
[08:28:26.272] plan(): nbrOfWorkers() = 1
[08:28:26.275] plan(): Setting new future strategy stack:
[08:28:26.275] List of future strategies:
[08:28:26.275] 1. multicore:
[08:28:26.275]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:26.275]    - tweaked: FALSE
[08:28:26.275]    - call: plan(multicore)
[08:28:26.278] plan(): nbrOfWorkers() = 2
[08:28:26.279] result() for MulticoreFuture ...
[08:28:26.279] result() for MulticoreFuture ... done
[08:28:26.280] result() for MulticoreFuture ... done
[08:28:26.280] result() for MulticoreFuture ...
[08:28:26.280] result() for MulticoreFuture ... done
Number of OpenMP threads in ‘MulticoreFuture’ future: 4
'future.fork.multithreading.enable' = TRUE ... DONE
'future.fork.multithreading.enable' = FALSE ...
[08:28:26.280] getGlobalsAndPackages() ...
[08:28:26.280] Searching for globals...
[08:28:26.282] - globals found: [2] ‘list’, ‘::’
[08:28:26.282] Searching for globals ... DONE
[08:28:26.282] Resolving globals: FALSE
[08:28:26.282] 
[08:28:26.282] 
[08:28:26.283] getGlobalsAndPackages() ... DONE
[08:28:26.283] run() for ‘Future’ ...
[08:28:26.283] - state: ‘created’
[08:28:26.283] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:26.285] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:26.286] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:26.286]   - Field: ‘label’
[08:28:26.286]   - Field: ‘local’
[08:28:26.286]   - Field: ‘owner’
[08:28:26.286]   - Field: ‘envir’
[08:28:26.286]   - Field: ‘workers’
[08:28:26.286]   - Field: ‘packages’
[08:28:26.286]   - Field: ‘gc’
[08:28:26.286]   - Field: ‘job’
[08:28:26.287]   - Field: ‘conditions’
[08:28:26.287]   - Field: ‘expr’
[08:28:26.287]   - Field: ‘uuid’
[08:28:26.287]   - Field: ‘seed’
[08:28:26.287]   - Field: ‘version’
[08:28:26.287]   - Field: ‘result’
[08:28:26.287]   - Field: ‘asynchronous’
[08:28:26.287]   - Field: ‘calls’
[08:28:26.287]   - Field: ‘globals’
[08:28:26.288]   - Field: ‘stdout’
[08:28:26.288]   - Field: ‘earlySignal’
[08:28:26.288]   - Field: ‘lazy’
[08:28:26.288]   - Field: ‘state’
[08:28:26.288] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:26.288] - Launch lazy future ...
[08:28:26.288] supports_omp_threads() = TRUE
[08:28:26.288] - Updated expression to force single-threaded (OpenMP and RcppParallel) processing
[08:28:26.289] Packages needed by the future expression (n = 0): <none>
[08:28:26.289] Packages needed by future strategies (n = 0): <none>
[08:28:26.289] {
[08:28:26.289]     {
[08:28:26.289]         {
[08:28:26.289]             ...future.startTime <- base::Sys.time()
[08:28:26.289]             {
[08:28:26.289]                 {
[08:28:26.289]                   {
[08:28:26.289]                     {
[08:28:26.289]                       base::local({
[08:28:26.289]                         has_future <- base::requireNamespace("future", 
[08:28:26.289]                           quietly = TRUE)
[08:28:26.289]                         if (has_future) {
[08:28:26.289]                           ns <- base::getNamespace("future")
[08:28:26.289]                           version <- ns[[".package"]][["version"]]
[08:28:26.289]                           if (is.null(version)) 
[08:28:26.289]                             version <- utils::packageVersion("future")
[08:28:26.289]                         }
[08:28:26.289]                         else {
[08:28:26.289]                           version <- NULL
[08:28:26.289]                         }
[08:28:26.289]                         if (!has_future || version < "1.8.0") {
[08:28:26.289]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:26.289]                             "", base::R.version$version.string), 
[08:28:26.289]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:26.289]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:26.289]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:26.289]                               "release", "version")], collapse = " "), 
[08:28:26.289]                             hostname = base::Sys.info()[["nodename"]])
[08:28:26.289]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:26.289]                             info)
[08:28:26.289]                           info <- base::paste(info, collapse = "; ")
[08:28:26.289]                           if (!has_future) {
[08:28:26.289]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:26.289]                               info)
[08:28:26.289]                           }
[08:28:26.289]                           else {
[08:28:26.289]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:26.289]                               info, version)
[08:28:26.289]                           }
[08:28:26.289]                           base::stop(msg)
[08:28:26.289]                         }
[08:28:26.289]                       })
[08:28:26.289]                     }
[08:28:26.289]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:26.289]                     base::options(mc.cores = 1L)
[08:28:26.289]                   }
[08:28:26.289]                   ...future.strategy.old <- future::plan("list")
[08:28:26.289]                   options(future.plan = NULL)
[08:28:26.289]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:26.289]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:26.289]                 }
[08:28:26.289]                 ...future.workdir <- getwd()
[08:28:26.289]             }
[08:28:26.289]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:26.289]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:26.289]         }
[08:28:26.289]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:26.289]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:26.289]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:26.289]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:26.289]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:26.289]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:26.289]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:26.289]             base::names(...future.oldOptions))
[08:28:26.289]     }
[08:28:26.289]     if (FALSE) {
[08:28:26.289]     }
[08:28:26.289]     else {
[08:28:26.289]         if (TRUE) {
[08:28:26.289]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:26.289]                 open = "w")
[08:28:26.289]         }
[08:28:26.289]         else {
[08:28:26.289]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:26.289]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:26.289]         }
[08:28:26.289]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:26.289]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:26.289]             base::sink(type = "output", split = FALSE)
[08:28:26.289]             base::close(...future.stdout)
[08:28:26.289]         }, add = TRUE)
[08:28:26.289]     }
[08:28:26.289]     ...future.frame <- base::sys.nframe()
[08:28:26.289]     ...future.conditions <- base::list()
[08:28:26.289]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:26.289]     if (FALSE) {
[08:28:26.289]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:26.289]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:26.289]     }
[08:28:26.289]     ...future.result <- base::tryCatch({
[08:28:26.289]         base::withCallingHandlers({
[08:28:26.289]             ...future.value <- base::withVisible(base::local({
[08:28:26.289]                 withCallingHandlers({
[08:28:26.289]                   {
[08:28:26.289]                     old_omp_threads <- RhpcBLASctl::omp_get_max_threads()
[08:28:26.289]                     if (old_omp_threads > 1L) {
[08:28:26.289]                       RhpcBLASctl::omp_set_num_threads(1L)
[08:28:26.289]                       base::on.exit(RhpcBLASctl::omp_set_num_threads(old_omp_threads), 
[08:28:26.289]                         add = TRUE)
[08:28:26.289]                       new_omp_threads <- RhpcBLASctl::omp_get_max_threads()
[08:28:26.289]                       if (!is.numeric(new_omp_threads) || is.na(new_omp_threads) || 
[08:28:26.289]                         new_omp_threads != 1L) {
[08:28:26.289]                         label <- future$label
[08:28:26.289]                         if (is.null(label)) 
[08:28:26.289]                           label <- "<none>"
[08:28:26.289]                         warning(future::FutureWarning(sprintf("Failed to force a single OMP thread on this system. Number of threads used: %s", 
[08:28:26.289]                           new_omp_threads), future = future))
[08:28:26.289]                       }
[08:28:26.289]                     }
[08:28:26.289]                     old_rcppparallel_threads <- Sys.getenv("RCPP_PARALLEL_NUM_THREADS", 
[08:28:26.289]                       "")
[08:28:26.289]                     if (old_rcppparallel_threads != "1") {
[08:28:26.289]                       Sys.setenv(RCPP_PARALLEL_NUM_THREADS = "1")
[08:28:26.289]                       if (old_rcppparallel_threads == "") {
[08:28:26.289]                         base::on.exit(Sys.unsetenv("RCPP_PARALLEL_NUM_THREADS"), 
[08:28:26.289]                           add = TRUE)
[08:28:26.289]                       }
[08:28:26.289]                       else {
[08:28:26.289]                         base::on.exit(Sys.setenv(RCPP_PARALLEL_NUM_THREADS = old_rcppparallel_threads), 
[08:28:26.289]                           add = TRUE)
[08:28:26.289]                       }
[08:28:26.289]                     }
[08:28:26.289]                     list(nthreads = RhpcBLASctl::omp_get_max_threads())
[08:28:26.289]                   }
[08:28:26.289]                 }, immediateCondition = function(cond) {
[08:28:26.289]                   save_rds <- function (object, pathname, ...) 
[08:28:26.289]                   {
[08:28:26.289]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:26.289]                     if (file_test("-f", pathname_tmp)) {
[08:28:26.289]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.289]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:26.289]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.289]                         fi_tmp[["mtime"]])
[08:28:26.289]                     }
[08:28:26.289]                     tryCatch({
[08:28:26.289]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:26.289]                     }, error = function(ex) {
[08:28:26.289]                       msg <- conditionMessage(ex)
[08:28:26.289]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.289]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:26.289]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.289]                         fi_tmp[["mtime"]], msg)
[08:28:26.289]                       ex$message <- msg
[08:28:26.289]                       stop(ex)
[08:28:26.289]                     })
[08:28:26.289]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:26.289]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:26.289]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:26.289]                       fi_tmp <- file.info(pathname_tmp)
[08:28:26.289]                       fi <- file.info(pathname)
[08:28:26.289]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:26.289]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:26.289]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:26.289]                         fi[["size"]], fi[["mtime"]])
[08:28:26.289]                       stop(msg)
[08:28:26.289]                     }
[08:28:26.289]                     invisible(pathname)
[08:28:26.289]                   }
[08:28:26.289]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:26.289]                     rootPath = tempdir()) 
[08:28:26.289]                   {
[08:28:26.289]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:26.289]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:26.289]                       tmpdir = path, fileext = ".rds")
[08:28:26.289]                     save_rds(obj, file)
[08:28:26.289]                   }
[08:28:26.289]                   saveImmediateCondition(cond, path = "/tmp/RtmpmQlwJZ/.future/immediateConditions")
[08:28:26.289]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.289]                   {
[08:28:26.289]                     inherits <- base::inherits
[08:28:26.289]                     invokeRestart <- base::invokeRestart
[08:28:26.289]                     is.null <- base::is.null
[08:28:26.289]                     muffled <- FALSE
[08:28:26.289]                     if (inherits(cond, "message")) {
[08:28:26.289]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:26.289]                       if (muffled) 
[08:28:26.289]                         invokeRestart("muffleMessage")
[08:28:26.289]                     }
[08:28:26.289]                     else if (inherits(cond, "warning")) {
[08:28:26.289]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:26.289]                       if (muffled) 
[08:28:26.289]                         invokeRestart("muffleWarning")
[08:28:26.289]                     }
[08:28:26.289]                     else if (inherits(cond, "condition")) {
[08:28:26.289]                       if (!is.null(pattern)) {
[08:28:26.289]                         computeRestarts <- base::computeRestarts
[08:28:26.289]                         grepl <- base::grepl
[08:28:26.289]                         restarts <- computeRestarts(cond)
[08:28:26.289]                         for (restart in restarts) {
[08:28:26.289]                           name <- restart$name
[08:28:26.289]                           if (is.null(name)) 
[08:28:26.289]                             next
[08:28:26.289]                           if (!grepl(pattern, name)) 
[08:28:26.289]                             next
[08:28:26.289]                           invokeRestart(restart)
[08:28:26.289]                           muffled <- TRUE
[08:28:26.289]                           break
[08:28:26.289]                         }
[08:28:26.289]                       }
[08:28:26.289]                     }
[08:28:26.289]                     invisible(muffled)
[08:28:26.289]                   }
[08:28:26.289]                   muffleCondition(cond)
[08:28:26.289]                 })
[08:28:26.289]             }))
[08:28:26.289]             future::FutureResult(value = ...future.value$value, 
[08:28:26.289]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:26.289]                   ...future.rng), globalenv = if (FALSE) 
[08:28:26.289]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:26.289]                     ...future.globalenv.names))
[08:28:26.289]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:26.289]         }, condition = base::local({
[08:28:26.289]             c <- base::c
[08:28:26.289]             inherits <- base::inherits
[08:28:26.289]             invokeRestart <- base::invokeRestart
[08:28:26.289]             length <- base::length
[08:28:26.289]             list <- base::list
[08:28:26.289]             seq.int <- base::seq.int
[08:28:26.289]             signalCondition <- base::signalCondition
[08:28:26.289]             sys.calls <- base::sys.calls
[08:28:26.289]             `[[` <- base::`[[`
[08:28:26.289]             `+` <- base::`+`
[08:28:26.289]             `<<-` <- base::`<<-`
[08:28:26.289]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:26.289]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:26.289]                   3L)]
[08:28:26.289]             }
[08:28:26.289]             function(cond) {
[08:28:26.289]                 is_error <- inherits(cond, "error")
[08:28:26.289]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:26.289]                   NULL)
[08:28:26.289]                 if (is_error) {
[08:28:26.289]                   sessionInformation <- function() {
[08:28:26.289]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:26.289]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:26.289]                       search = base::search(), system = base::Sys.info())
[08:28:26.289]                   }
[08:28:26.289]                   ...future.conditions[[length(...future.conditions) + 
[08:28:26.289]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:26.289]                     cond$call), session = sessionInformation(), 
[08:28:26.289]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:26.289]                   signalCondition(cond)
[08:28:26.289]                 }
[08:28:26.289]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:26.289]                 "immediateCondition"))) {
[08:28:26.289]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:26.289]                   ...future.conditions[[length(...future.conditions) + 
[08:28:26.289]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:26.289]                   if (TRUE && !signal) {
[08:28:26.289]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.289]                     {
[08:28:26.289]                       inherits <- base::inherits
[08:28:26.289]                       invokeRestart <- base::invokeRestart
[08:28:26.289]                       is.null <- base::is.null
[08:28:26.289]                       muffled <- FALSE
[08:28:26.289]                       if (inherits(cond, "message")) {
[08:28:26.289]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:26.289]                         if (muffled) 
[08:28:26.289]                           invokeRestart("muffleMessage")
[08:28:26.289]                       }
[08:28:26.289]                       else if (inherits(cond, "warning")) {
[08:28:26.289]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:26.289]                         if (muffled) 
[08:28:26.289]                           invokeRestart("muffleWarning")
[08:28:26.289]                       }
[08:28:26.289]                       else if (inherits(cond, "condition")) {
[08:28:26.289]                         if (!is.null(pattern)) {
[08:28:26.289]                           computeRestarts <- base::computeRestarts
[08:28:26.289]                           grepl <- base::grepl
[08:28:26.289]                           restarts <- computeRestarts(cond)
[08:28:26.289]                           for (restart in restarts) {
[08:28:26.289]                             name <- restart$name
[08:28:26.289]                             if (is.null(name)) 
[08:28:26.289]                               next
[08:28:26.289]                             if (!grepl(pattern, name)) 
[08:28:26.289]                               next
[08:28:26.289]                             invokeRestart(restart)
[08:28:26.289]                             muffled <- TRUE
[08:28:26.289]                             break
[08:28:26.289]                           }
[08:28:26.289]                         }
[08:28:26.289]                       }
[08:28:26.289]                       invisible(muffled)
[08:28:26.289]                     }
[08:28:26.289]                     muffleCondition(cond, pattern = "^muffle")
[08:28:26.289]                   }
[08:28:26.289]                 }
[08:28:26.289]                 else {
[08:28:26.289]                   if (TRUE) {
[08:28:26.289]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:26.289]                     {
[08:28:26.289]                       inherits <- base::inherits
[08:28:26.289]                       invokeRestart <- base::invokeRestart
[08:28:26.289]                       is.null <- base::is.null
[08:28:26.289]                       muffled <- FALSE
[08:28:26.289]                       if (inherits(cond, "message")) {
[08:28:26.289]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:26.289]                         if (muffled) 
[08:28:26.289]                           invokeRestart("muffleMessage")
[08:28:26.289]                       }
[08:28:26.289]                       else if (inherits(cond, "warning")) {
[08:28:26.289]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:26.289]                         if (muffled) 
[08:28:26.289]                           invokeRestart("muffleWarning")
[08:28:26.289]                       }
[08:28:26.289]                       else if (inherits(cond, "condition")) {
[08:28:26.289]                         if (!is.null(pattern)) {
[08:28:26.289]                           computeRestarts <- base::computeRestarts
[08:28:26.289]                           grepl <- base::grepl
[08:28:26.289]                           restarts <- computeRestarts(cond)
[08:28:26.289]                           for (restart in restarts) {
[08:28:26.289]                             name <- restart$name
[08:28:26.289]                             if (is.null(name)) 
[08:28:26.289]                               next
[08:28:26.289]                             if (!grepl(pattern, name)) 
[08:28:26.289]                               next
[08:28:26.289]                             invokeRestart(restart)
[08:28:26.289]                             muffled <- TRUE
[08:28:26.289]                             break
[08:28:26.289]                           }
[08:28:26.289]                         }
[08:28:26.289]                       }
[08:28:26.289]                       invisible(muffled)
[08:28:26.289]                     }
[08:28:26.289]                     muffleCondition(cond, pattern = "^muffle")
[08:28:26.289]                   }
[08:28:26.289]                 }
[08:28:26.289]             }
[08:28:26.289]         }))
[08:28:26.289]     }, error = function(ex) {
[08:28:26.289]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:26.289]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:26.289]                 ...future.rng), started = ...future.startTime, 
[08:28:26.289]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:26.289]             version = "1.8"), class = "FutureResult")
[08:28:26.289]     }, finally = {
[08:28:26.289]         if (!identical(...future.workdir, getwd())) 
[08:28:26.289]             setwd(...future.workdir)
[08:28:26.289]         {
[08:28:26.289]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:26.289]                 ...future.oldOptions$nwarnings <- NULL
[08:28:26.289]             }
[08:28:26.289]             base::options(...future.oldOptions)
[08:28:26.289]             if (.Platform$OS.type == "windows") {
[08:28:26.289]                 old_names <- names(...future.oldEnvVars)
[08:28:26.289]                 envs <- base::Sys.getenv()
[08:28:26.289]                 names <- names(envs)
[08:28:26.289]                 common <- intersect(names, old_names)
[08:28:26.289]                 added <- setdiff(names, old_names)
[08:28:26.289]                 removed <- setdiff(old_names, names)
[08:28:26.289]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:26.289]                   envs[common]]
[08:28:26.289]                 NAMES <- toupper(changed)
[08:28:26.289]                 args <- list()
[08:28:26.289]                 for (kk in seq_along(NAMES)) {
[08:28:26.289]                   name <- changed[[kk]]
[08:28:26.289]                   NAME <- NAMES[[kk]]
[08:28:26.289]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.289]                     next
[08:28:26.289]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:26.289]                 }
[08:28:26.289]                 NAMES <- toupper(added)
[08:28:26.289]                 for (kk in seq_along(NAMES)) {
[08:28:26.289]                   name <- added[[kk]]
[08:28:26.289]                   NAME <- NAMES[[kk]]
[08:28:26.289]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.289]                     next
[08:28:26.289]                   args[[name]] <- ""
[08:28:26.289]                 }
[08:28:26.289]                 NAMES <- toupper(removed)
[08:28:26.289]                 for (kk in seq_along(NAMES)) {
[08:28:26.289]                   name <- removed[[kk]]
[08:28:26.289]                   NAME <- NAMES[[kk]]
[08:28:26.289]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:26.289]                     next
[08:28:26.289]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:26.289]                 }
[08:28:26.289]                 if (length(args) > 0) 
[08:28:26.289]                   base::do.call(base::Sys.setenv, args = args)
[08:28:26.289]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:26.289]             }
[08:28:26.289]             else {
[08:28:26.289]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:26.289]             }
[08:28:26.289]             {
[08:28:26.289]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:26.289]                   0L) {
[08:28:26.289]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:26.289]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:26.289]                   base::options(opts)
[08:28:26.289]                 }
[08:28:26.289]                 {
[08:28:26.289]                   {
[08:28:26.289]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:26.289]                     NULL
[08:28:26.289]                   }
[08:28:26.289]                   options(future.plan = NULL)
[08:28:26.289]                   if (is.na(NA_character_)) 
[08:28:26.289]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:26.289]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:26.289]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:26.289]                     .init = FALSE)
[08:28:26.289]                 }
[08:28:26.289]             }
[08:28:26.289]         }
[08:28:26.289]     })
[08:28:26.289]     if (TRUE) {
[08:28:26.289]         base::sink(type = "output", split = FALSE)
[08:28:26.289]         if (TRUE) {
[08:28:26.289]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:26.289]         }
[08:28:26.289]         else {
[08:28:26.289]             ...future.result["stdout"] <- base::list(NULL)
[08:28:26.289]         }
[08:28:26.289]         base::close(...future.stdout)
[08:28:26.289]         ...future.stdout <- NULL
[08:28:26.289]     }
[08:28:26.289]     ...future.result$conditions <- ...future.conditions
[08:28:26.289]     ...future.result$finished <- base::Sys.time()
[08:28:26.289]     ...future.result
[08:28:26.289] }
[08:28:26.293] requestCore(): workers = 2
[08:28:26.295] MulticoreFuture started
[08:28:26.295] - Launch lazy future ... done
[08:28:26.295] run() for ‘MulticoreFuture’ ... done
[08:28:26.295] result() for MulticoreFuture ...
[08:28:26.296] plan(): Setting new future strategy stack:
[08:28:26.296] List of future strategies:
[08:28:26.296] 1. sequential:
[08:28:26.296]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:26.296]    - tweaked: FALSE
[08:28:26.296]    - call: NULL
[08:28:26.297] plan(): nbrOfWorkers() = 1
[08:28:26.300] plan(): Setting new future strategy stack:
[08:28:26.300] List of future strategies:
[08:28:26.300] 1. multicore:
[08:28:26.300]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:26.300]    - tweaked: FALSE
[08:28:26.300]    - call: plan(multicore)
[08:28:26.303] plan(): nbrOfWorkers() = 2
[08:28:26.304] result() for MulticoreFuture ...
[08:28:26.304] result() for MulticoreFuture ... done
[08:28:26.305] result() for MulticoreFuture ... done
[08:28:26.305] result() for MulticoreFuture ...
[08:28:26.305] result() for MulticoreFuture ... done
Number of OpenMP threads in ‘MulticoreFuture’ future: 1
'future.fork.multithreading.enable' = FALSE ... DONE
> 
> message("*** multicore() and multi-threading ... DONE")
*** multicore() and multi-threading ... DONE
> 
> source("incl/end.R")
[08:28:26.306] plan(): Setting new future strategy stack:
[08:28:26.306] List of future strategies:
[08:28:26.306] 1. FutureStrategy:
[08:28:26.306]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:26.306]    - tweaked: FALSE
[08:28:26.306]    - call: future::plan(oplan)
[08:28:26.307] plan(): nbrOfWorkers() = 1
> 
