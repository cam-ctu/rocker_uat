
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:02:03.603] plan(): Setting new future strategy stack:
[11:02:03.603] List of future strategies:
[11:02:03.603] 1. sequential:
[11:02:03.603]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:03.603]    - tweaked: FALSE
[11:02:03.603]    - call: future::plan("sequential")
[11:02:03.617] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[11:02:03.634] plan(): Setting new future strategy stack:
[11:02:03.634] List of future strategies:
[11:02:03.634] 1. multicore:
[11:02:03.634]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:03.634]    - tweaked: FALSE
[11:02:03.634]    - call: plan(multicore)
[11:02:03.647] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() and multi-threading ...")
*** multicore() and multi-threading ...
> 
> message("supportsMulticore(): ", sQuote(supportsMulticore()))
supportsMulticore(): ‘TRUE’
> message("availableCores('multicore'): ", sQuote(availableCores("multicore")))
availableCores('multicore'): ‘2’
> message("supports_omp_threads(): ", sQuote(supports_omp_threads()))
[11:02:03.652] supports_omp_threads() = TRUE
supports_omp_threads(): ‘TRUE’
> 
> if (requireNamespace("RhpcBLASctl", quietly = TRUE)) {
+   message("Checking RhpcBLASctl capabilities ...")
+   nthreads_0 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_0 = nthreads_0))
+   message("- Number of OpenMP threads: ", sQuote(nthreads_0))
+   
+   message("- Trying to set number of OpenMP threads to one")
+   try(RhpcBLASctl::omp_set_num_threads(1L))
+   nthreads_1 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_1 = nthreads_1))
+   message("  - Number of OpenMP threads: ", sQuote(nthreads_1))
+   try(RhpcBLASctl::omp_set_num_threads(nthreads_0))
+ 
+   f <- future(RhpcBLASctl::omp_get_max_threads())
+   nthreads_child <- value(f)
+   utils::str(list(nthreads_child = nthreads_child))
+   message(sprintf("  - Number of OpenMP threads in %s future: %s", sQuote(class(f)[1]), sQuote(nthreads_child)))
+ 
+   nthreads_children <- parallel::mclapply(1:2, FUN = function(x) {
+     RhpcBLASctl::omp_get_max_threads()
+   })
+   utils::str(list(nthreads_children = nthreads_children))
+   message("  - Number of OpenMP threads in mclapply(): ", sQuote(nthreads_children[[1]]))
+ 
+   message("- Trying to reset number of OpenMP threads")
+   nthreads_2 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_2 = nthreads_2))
+   message("  - Number of OpenMP threads: ", sQuote(nthreads_2))
+   stopifnot(identical(nthreads_2, nthreads_0))
+   message("Checking RhpcBLASctl capabilities ... done")
+ }
Checking RhpcBLASctl capabilities ...
List of 1
 $ nthreads_0: int 4
- Number of OpenMP threads: ‘4’
- Trying to set number of OpenMP threads to one
List of 1
 $ nthreads_1: int 1
  - Number of OpenMP threads: ‘1’
[11:02:03.657] getGlobalsAndPackages() ...
[11:02:03.657] Searching for globals...
[11:02:03.660] - globals found: [1] ‘::’
[11:02:03.660] Searching for globals ... DONE
[11:02:03.660] Resolving globals: FALSE
[11:02:03.661] 
[11:02:03.661] 
[11:02:03.661] getGlobalsAndPackages() ... DONE
[11:02:03.662] run() for ‘Future’ ...
[11:02:03.662] - state: ‘created’
[11:02:03.662] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:02:03.665] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:03.665] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:02:03.665]   - Field: ‘label’
[11:02:03.666]   - Field: ‘local’
[11:02:03.666]   - Field: ‘owner’
[11:02:03.666]   - Field: ‘envir’
[11:02:03.666]   - Field: ‘workers’
[11:02:03.666]   - Field: ‘packages’
[11:02:03.666]   - Field: ‘gc’
[11:02:03.666]   - Field: ‘job’
[11:02:03.666]   - Field: ‘conditions’
[11:02:03.666]   - Field: ‘expr’
[11:02:03.666]   - Field: ‘uuid’
[11:02:03.666]   - Field: ‘seed’
[11:02:03.667]   - Field: ‘version’
[11:02:03.667]   - Field: ‘result’
[11:02:03.667]   - Field: ‘asynchronous’
[11:02:03.667]   - Field: ‘calls’
[11:02:03.667]   - Field: ‘globals’
[11:02:03.667]   - Field: ‘stdout’
[11:02:03.667]   - Field: ‘earlySignal’
[11:02:03.667]   - Field: ‘lazy’
[11:02:03.667]   - Field: ‘state’
[11:02:03.667] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:02:03.667] - Launch lazy future ...
[11:02:03.668] Packages needed by the future expression (n = 0): <none>
[11:02:03.669] Packages needed by future strategies (n = 0): <none>
[11:02:03.669] {
[11:02:03.669]     {
[11:02:03.669]         {
[11:02:03.669]             ...future.startTime <- base::Sys.time()
[11:02:03.669]             {
[11:02:03.669]                 {
[11:02:03.669]                   {
[11:02:03.669]                     {
[11:02:03.669]                       base::local({
[11:02:03.669]                         has_future <- base::requireNamespace("future", 
[11:02:03.669]                           quietly = TRUE)
[11:02:03.669]                         if (has_future) {
[11:02:03.669]                           ns <- base::getNamespace("future")
[11:02:03.669]                           version <- ns[[".package"]][["version"]]
[11:02:03.669]                           if (is.null(version)) 
[11:02:03.669]                             version <- utils::packageVersion("future")
[11:02:03.669]                         }
[11:02:03.669]                         else {
[11:02:03.669]                           version <- NULL
[11:02:03.669]                         }
[11:02:03.669]                         if (!has_future || version < "1.8.0") {
[11:02:03.669]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:03.669]                             "", base::R.version$version.string), 
[11:02:03.669]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:03.669]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:03.669]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:03.669]                               "release", "version")], collapse = " "), 
[11:02:03.669]                             hostname = base::Sys.info()[["nodename"]])
[11:02:03.669]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:03.669]                             info)
[11:02:03.669]                           info <- base::paste(info, collapse = "; ")
[11:02:03.669]                           if (!has_future) {
[11:02:03.669]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:03.669]                               info)
[11:02:03.669]                           }
[11:02:03.669]                           else {
[11:02:03.669]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:03.669]                               info, version)
[11:02:03.669]                           }
[11:02:03.669]                           base::stop(msg)
[11:02:03.669]                         }
[11:02:03.669]                       })
[11:02:03.669]                     }
[11:02:03.669]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:03.669]                     base::options(mc.cores = 1L)
[11:02:03.669]                   }
[11:02:03.669]                   ...future.strategy.old <- future::plan("list")
[11:02:03.669]                   options(future.plan = NULL)
[11:02:03.669]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:03.669]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:03.669]                 }
[11:02:03.669]                 ...future.workdir <- getwd()
[11:02:03.669]             }
[11:02:03.669]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:03.669]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:03.669]         }
[11:02:03.669]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:03.669]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:03.669]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:03.669]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:03.669]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:03.669]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:03.669]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:03.669]             base::names(...future.oldOptions))
[11:02:03.669]     }
[11:02:03.669]     if (FALSE) {
[11:02:03.669]     }
[11:02:03.669]     else {
[11:02:03.669]         if (TRUE) {
[11:02:03.669]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:03.669]                 open = "w")
[11:02:03.669]         }
[11:02:03.669]         else {
[11:02:03.669]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:03.669]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:03.669]         }
[11:02:03.669]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:03.669]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:03.669]             base::sink(type = "output", split = FALSE)
[11:02:03.669]             base::close(...future.stdout)
[11:02:03.669]         }, add = TRUE)
[11:02:03.669]     }
[11:02:03.669]     ...future.frame <- base::sys.nframe()
[11:02:03.669]     ...future.conditions <- base::list()
[11:02:03.669]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:03.669]     if (FALSE) {
[11:02:03.669]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:03.669]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:03.669]     }
[11:02:03.669]     ...future.result <- base::tryCatch({
[11:02:03.669]         base::withCallingHandlers({
[11:02:03.669]             ...future.value <- base::withVisible(base::local({
[11:02:03.669]                 withCallingHandlers({
[11:02:03.669]                   RhpcBLASctl::omp_get_max_threads()
[11:02:03.669]                 }, immediateCondition = function(cond) {
[11:02:03.669]                   save_rds <- function (object, pathname, ...) 
[11:02:03.669]                   {
[11:02:03.669]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:03.669]                     if (file_test("-f", pathname_tmp)) {
[11:02:03.669]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.669]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:03.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.669]                         fi_tmp[["mtime"]])
[11:02:03.669]                     }
[11:02:03.669]                     tryCatch({
[11:02:03.669]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:03.669]                     }, error = function(ex) {
[11:02:03.669]                       msg <- conditionMessage(ex)
[11:02:03.669]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.669]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:03.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.669]                         fi_tmp[["mtime"]], msg)
[11:02:03.669]                       ex$message <- msg
[11:02:03.669]                       stop(ex)
[11:02:03.669]                     })
[11:02:03.669]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:03.669]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:03.669]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:03.669]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.669]                       fi <- file.info(pathname)
[11:02:03.669]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:03.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.669]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:03.669]                         fi[["size"]], fi[["mtime"]])
[11:02:03.669]                       stop(msg)
[11:02:03.669]                     }
[11:02:03.669]                     invisible(pathname)
[11:02:03.669]                   }
[11:02:03.669]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:03.669]                     rootPath = tempdir()) 
[11:02:03.669]                   {
[11:02:03.669]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:03.669]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:03.669]                       tmpdir = path, fileext = ".rds")
[11:02:03.669]                     save_rds(obj, file)
[11:02:03.669]                   }
[11:02:03.669]                   saveImmediateCondition(cond, path = "/tmp/RtmplZB5GE/.future/immediateConditions")
[11:02:03.669]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.669]                   {
[11:02:03.669]                     inherits <- base::inherits
[11:02:03.669]                     invokeRestart <- base::invokeRestart
[11:02:03.669]                     is.null <- base::is.null
[11:02:03.669]                     muffled <- FALSE
[11:02:03.669]                     if (inherits(cond, "message")) {
[11:02:03.669]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:03.669]                       if (muffled) 
[11:02:03.669]                         invokeRestart("muffleMessage")
[11:02:03.669]                     }
[11:02:03.669]                     else if (inherits(cond, "warning")) {
[11:02:03.669]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:03.669]                       if (muffled) 
[11:02:03.669]                         invokeRestart("muffleWarning")
[11:02:03.669]                     }
[11:02:03.669]                     else if (inherits(cond, "condition")) {
[11:02:03.669]                       if (!is.null(pattern)) {
[11:02:03.669]                         computeRestarts <- base::computeRestarts
[11:02:03.669]                         grepl <- base::grepl
[11:02:03.669]                         restarts <- computeRestarts(cond)
[11:02:03.669]                         for (restart in restarts) {
[11:02:03.669]                           name <- restart$name
[11:02:03.669]                           if (is.null(name)) 
[11:02:03.669]                             next
[11:02:03.669]                           if (!grepl(pattern, name)) 
[11:02:03.669]                             next
[11:02:03.669]                           invokeRestart(restart)
[11:02:03.669]                           muffled <- TRUE
[11:02:03.669]                           break
[11:02:03.669]                         }
[11:02:03.669]                       }
[11:02:03.669]                     }
[11:02:03.669]                     invisible(muffled)
[11:02:03.669]                   }
[11:02:03.669]                   muffleCondition(cond)
[11:02:03.669]                 })
[11:02:03.669]             }))
[11:02:03.669]             future::FutureResult(value = ...future.value$value, 
[11:02:03.669]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:03.669]                   ...future.rng), globalenv = if (FALSE) 
[11:02:03.669]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:03.669]                     ...future.globalenv.names))
[11:02:03.669]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:03.669]         }, condition = base::local({
[11:02:03.669]             c <- base::c
[11:02:03.669]             inherits <- base::inherits
[11:02:03.669]             invokeRestart <- base::invokeRestart
[11:02:03.669]             length <- base::length
[11:02:03.669]             list <- base::list
[11:02:03.669]             seq.int <- base::seq.int
[11:02:03.669]             signalCondition <- base::signalCondition
[11:02:03.669]             sys.calls <- base::sys.calls
[11:02:03.669]             `[[` <- base::`[[`
[11:02:03.669]             `+` <- base::`+`
[11:02:03.669]             `<<-` <- base::`<<-`
[11:02:03.669]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:03.669]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:03.669]                   3L)]
[11:02:03.669]             }
[11:02:03.669]             function(cond) {
[11:02:03.669]                 is_error <- inherits(cond, "error")
[11:02:03.669]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:03.669]                   NULL)
[11:02:03.669]                 if (is_error) {
[11:02:03.669]                   sessionInformation <- function() {
[11:02:03.669]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:03.669]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:03.669]                       search = base::search(), system = base::Sys.info())
[11:02:03.669]                   }
[11:02:03.669]                   ...future.conditions[[length(...future.conditions) + 
[11:02:03.669]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:03.669]                     cond$call), session = sessionInformation(), 
[11:02:03.669]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:03.669]                   signalCondition(cond)
[11:02:03.669]                 }
[11:02:03.669]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:03.669]                 "immediateCondition"))) {
[11:02:03.669]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:03.669]                   ...future.conditions[[length(...future.conditions) + 
[11:02:03.669]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:03.669]                   if (TRUE && !signal) {
[11:02:03.669]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.669]                     {
[11:02:03.669]                       inherits <- base::inherits
[11:02:03.669]                       invokeRestart <- base::invokeRestart
[11:02:03.669]                       is.null <- base::is.null
[11:02:03.669]                       muffled <- FALSE
[11:02:03.669]                       if (inherits(cond, "message")) {
[11:02:03.669]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:03.669]                         if (muffled) 
[11:02:03.669]                           invokeRestart("muffleMessage")
[11:02:03.669]                       }
[11:02:03.669]                       else if (inherits(cond, "warning")) {
[11:02:03.669]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:03.669]                         if (muffled) 
[11:02:03.669]                           invokeRestart("muffleWarning")
[11:02:03.669]                       }
[11:02:03.669]                       else if (inherits(cond, "condition")) {
[11:02:03.669]                         if (!is.null(pattern)) {
[11:02:03.669]                           computeRestarts <- base::computeRestarts
[11:02:03.669]                           grepl <- base::grepl
[11:02:03.669]                           restarts <- computeRestarts(cond)
[11:02:03.669]                           for (restart in restarts) {
[11:02:03.669]                             name <- restart$name
[11:02:03.669]                             if (is.null(name)) 
[11:02:03.669]                               next
[11:02:03.669]                             if (!grepl(pattern, name)) 
[11:02:03.669]                               next
[11:02:03.669]                             invokeRestart(restart)
[11:02:03.669]                             muffled <- TRUE
[11:02:03.669]                             break
[11:02:03.669]                           }
[11:02:03.669]                         }
[11:02:03.669]                       }
[11:02:03.669]                       invisible(muffled)
[11:02:03.669]                     }
[11:02:03.669]                     muffleCondition(cond, pattern = "^muffle")
[11:02:03.669]                   }
[11:02:03.669]                 }
[11:02:03.669]                 else {
[11:02:03.669]                   if (TRUE) {
[11:02:03.669]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.669]                     {
[11:02:03.669]                       inherits <- base::inherits
[11:02:03.669]                       invokeRestart <- base::invokeRestart
[11:02:03.669]                       is.null <- base::is.null
[11:02:03.669]                       muffled <- FALSE
[11:02:03.669]                       if (inherits(cond, "message")) {
[11:02:03.669]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:03.669]                         if (muffled) 
[11:02:03.669]                           invokeRestart("muffleMessage")
[11:02:03.669]                       }
[11:02:03.669]                       else if (inherits(cond, "warning")) {
[11:02:03.669]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:03.669]                         if (muffled) 
[11:02:03.669]                           invokeRestart("muffleWarning")
[11:02:03.669]                       }
[11:02:03.669]                       else if (inherits(cond, "condition")) {
[11:02:03.669]                         if (!is.null(pattern)) {
[11:02:03.669]                           computeRestarts <- base::computeRestarts
[11:02:03.669]                           grepl <- base::grepl
[11:02:03.669]                           restarts <- computeRestarts(cond)
[11:02:03.669]                           for (restart in restarts) {
[11:02:03.669]                             name <- restart$name
[11:02:03.669]                             if (is.null(name)) 
[11:02:03.669]                               next
[11:02:03.669]                             if (!grepl(pattern, name)) 
[11:02:03.669]                               next
[11:02:03.669]                             invokeRestart(restart)
[11:02:03.669]                             muffled <- TRUE
[11:02:03.669]                             break
[11:02:03.669]                           }
[11:02:03.669]                         }
[11:02:03.669]                       }
[11:02:03.669]                       invisible(muffled)
[11:02:03.669]                     }
[11:02:03.669]                     muffleCondition(cond, pattern = "^muffle")
[11:02:03.669]                   }
[11:02:03.669]                 }
[11:02:03.669]             }
[11:02:03.669]         }))
[11:02:03.669]     }, error = function(ex) {
[11:02:03.669]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:03.669]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:03.669]                 ...future.rng), started = ...future.startTime, 
[11:02:03.669]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:03.669]             version = "1.8"), class = "FutureResult")
[11:02:03.669]     }, finally = {
[11:02:03.669]         if (!identical(...future.workdir, getwd())) 
[11:02:03.669]             setwd(...future.workdir)
[11:02:03.669]         {
[11:02:03.669]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:03.669]                 ...future.oldOptions$nwarnings <- NULL
[11:02:03.669]             }
[11:02:03.669]             base::options(...future.oldOptions)
[11:02:03.669]             if (.Platform$OS.type == "windows") {
[11:02:03.669]                 old_names <- names(...future.oldEnvVars)
[11:02:03.669]                 envs <- base::Sys.getenv()
[11:02:03.669]                 names <- names(envs)
[11:02:03.669]                 common <- intersect(names, old_names)
[11:02:03.669]                 added <- setdiff(names, old_names)
[11:02:03.669]                 removed <- setdiff(old_names, names)
[11:02:03.669]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:03.669]                   envs[common]]
[11:02:03.669]                 NAMES <- toupper(changed)
[11:02:03.669]                 args <- list()
[11:02:03.669]                 for (kk in seq_along(NAMES)) {
[11:02:03.669]                   name <- changed[[kk]]
[11:02:03.669]                   NAME <- NAMES[[kk]]
[11:02:03.669]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.669]                     next
[11:02:03.669]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:03.669]                 }
[11:02:03.669]                 NAMES <- toupper(added)
[11:02:03.669]                 for (kk in seq_along(NAMES)) {
[11:02:03.669]                   name <- added[[kk]]
[11:02:03.669]                   NAME <- NAMES[[kk]]
[11:02:03.669]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.669]                     next
[11:02:03.669]                   args[[name]] <- ""
[11:02:03.669]                 }
[11:02:03.669]                 NAMES <- toupper(removed)
[11:02:03.669]                 for (kk in seq_along(NAMES)) {
[11:02:03.669]                   name <- removed[[kk]]
[11:02:03.669]                   NAME <- NAMES[[kk]]
[11:02:03.669]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.669]                     next
[11:02:03.669]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:03.669]                 }
[11:02:03.669]                 if (length(args) > 0) 
[11:02:03.669]                   base::do.call(base::Sys.setenv, args = args)
[11:02:03.669]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:03.669]             }
[11:02:03.669]             else {
[11:02:03.669]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:03.669]             }
[11:02:03.669]             {
[11:02:03.669]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:03.669]                   0L) {
[11:02:03.669]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:03.669]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:03.669]                   base::options(opts)
[11:02:03.669]                 }
[11:02:03.669]                 {
[11:02:03.669]                   {
[11:02:03.669]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:03.669]                     NULL
[11:02:03.669]                   }
[11:02:03.669]                   options(future.plan = NULL)
[11:02:03.669]                   if (is.na(NA_character_)) 
[11:02:03.669]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:03.669]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:03.669]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:03.669]                     .init = FALSE)
[11:02:03.669]                 }
[11:02:03.669]             }
[11:02:03.669]         }
[11:02:03.669]     })
[11:02:03.669]     if (TRUE) {
[11:02:03.669]         base::sink(type = "output", split = FALSE)
[11:02:03.669]         if (TRUE) {
[11:02:03.669]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:03.669]         }
[11:02:03.669]         else {
[11:02:03.669]             ...future.result["stdout"] <- base::list(NULL)
[11:02:03.669]         }
[11:02:03.669]         base::close(...future.stdout)
[11:02:03.669]         ...future.stdout <- NULL
[11:02:03.669]     }
[11:02:03.669]     ...future.result$conditions <- ...future.conditions
[11:02:03.669]     ...future.result$finished <- base::Sys.time()
[11:02:03.669]     ...future.result
[11:02:03.669] }
[11:02:03.672] requestCore(): workers = 2
[11:02:03.675] MulticoreFuture started
[11:02:03.675] - Launch lazy future ... done
[11:02:03.675] plan(): Setting new future strategy stack:
[11:02:03.675] run() for ‘MulticoreFuture’ ... done
[11:02:03.675] List of future strategies:
[11:02:03.675] 1. sequential:
[11:02:03.675]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:03.675]    - tweaked: FALSE
[11:02:03.675]    - call: NULL
[11:02:03.677] plan(): nbrOfWorkers() = 1
[11:02:03.677] result() for MulticoreFuture ...
[11:02:03.679] plan(): Setting new future strategy stack:
[11:02:03.679] List of future strategies:
[11:02:03.679] 1. multicore:
[11:02:03.679]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:03.679]    - tweaked: FALSE
[11:02:03.679]    - call: plan(multicore)
[11:02:03.682] plan(): nbrOfWorkers() = 2
[11:02:03.687] result() for MulticoreFuture ...
[11:02:03.687] result() for MulticoreFuture ... done
[11:02:03.687] result() for MulticoreFuture ... done
[11:02:03.687] result() for MulticoreFuture ...
[11:02:03.687] result() for MulticoreFuture ... done
List of 1
 $ nthreads_child: int 4
  - Number of OpenMP threads in ‘MulticoreFuture’ future: ‘4’
List of 1
 $ nthreads_children:List of 2
  ..$ : int 4
  ..$ : int 4
  - Number of OpenMP threads in mclapply(): ‘4’
- Trying to reset number of OpenMP threads
List of 1
 $ nthreads_2: int 4
  - Number of OpenMP threads: ‘4’
Checking RhpcBLASctl capabilities ... done
> 
> if (supportsMulticore() && availableCores("multicore") >= 2L && supports_omp_threads()) {
+   nthreads_0 <- RhpcBLASctl::omp_get_max_threads()
+   
+   for (enable in c(TRUE, FALSE)) {
+     options(future.fork.multithreading.enable = enable)
+ 
+     message(sprintf("'future.fork.multithreading.enable' = %s ...", enable))
+ 
+     f <- future(list(nthreads = RhpcBLASctl::omp_get_max_threads()))
+     nthreads <- value(f)$nthreads
+     cat(sprintf("Number of OpenMP threads in %s future: %d\n", sQuote(class(f)[1]), nthreads))
+ 
+     ## Assert that single-threading was set?
+     if (enable) {
+       stopifnot(enable && nthreads >= nthreads_0)
+     } else {
+       ## FIXME: On CRAN r-devel-linux-x86_64-fedora-clang (2020-01-17):
+       ## Number of OpenMP threads in 'MulticoreFuture' future: 24
+       ## Error: !enable && nthreads == 1L is not TRUE
+       stopifnot(!enable && nthreads == 1L)
+     }
+       
+     message(sprintf("'future.fork.multithreading.enable' = %s ... DONE", enable))
+   } ## for (enable ...)
+ } ## if (requireNamespace("RhpcBLASctl", ...)) {
[11:02:03.698] supports_omp_threads() = TRUE
'future.fork.multithreading.enable' = TRUE ...
[11:02:03.708] getGlobalsAndPackages() ...
[11:02:03.708] Searching for globals...
[11:02:03.709] - globals found: [2] ‘list’, ‘::’
[11:02:03.709] Searching for globals ... DONE
[11:02:03.709] Resolving globals: FALSE
[11:02:03.710] 
[11:02:03.710] 
[11:02:03.710] getGlobalsAndPackages() ... DONE
[11:02:03.710] run() for ‘Future’ ...
[11:02:03.710] - state: ‘created’
[11:02:03.710] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:02:03.712] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:03.712] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:02:03.713]   - Field: ‘label’
[11:02:03.713]   - Field: ‘local’
[11:02:03.713]   - Field: ‘owner’
[11:02:03.715]   - Field: ‘envir’
[11:02:03.715]   - Field: ‘workers’
[11:02:03.716]   - Field: ‘packages’
[11:02:03.716]   - Field: ‘gc’
[11:02:03.716]   - Field: ‘job’
[11:02:03.716]   - Field: ‘conditions’
[11:02:03.716]   - Field: ‘expr’
[11:02:03.716]   - Field: ‘uuid’
[11:02:03.716]   - Field: ‘seed’
[11:02:03.716]   - Field: ‘version’
[11:02:03.717]   - Field: ‘result’
[11:02:03.717]   - Field: ‘asynchronous’
[11:02:03.717]   - Field: ‘calls’
[11:02:03.717]   - Field: ‘globals’
[11:02:03.717]   - Field: ‘stdout’
[11:02:03.717]   - Field: ‘earlySignal’
[11:02:03.717]   - Field: ‘lazy’
[11:02:03.717]   - Field: ‘state’
[11:02:03.718] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:02:03.718] - Launch lazy future ...
[11:02:03.718] Packages needed by the future expression (n = 0): <none>
[11:02:03.718] Packages needed by future strategies (n = 0): <none>
[11:02:03.719] {
[11:02:03.719]     {
[11:02:03.719]         {
[11:02:03.719]             ...future.startTime <- base::Sys.time()
[11:02:03.719]             {
[11:02:03.719]                 {
[11:02:03.719]                   {
[11:02:03.719]                     {
[11:02:03.719]                       base::local({
[11:02:03.719]                         has_future <- base::requireNamespace("future", 
[11:02:03.719]                           quietly = TRUE)
[11:02:03.719]                         if (has_future) {
[11:02:03.719]                           ns <- base::getNamespace("future")
[11:02:03.719]                           version <- ns[[".package"]][["version"]]
[11:02:03.719]                           if (is.null(version)) 
[11:02:03.719]                             version <- utils::packageVersion("future")
[11:02:03.719]                         }
[11:02:03.719]                         else {
[11:02:03.719]                           version <- NULL
[11:02:03.719]                         }
[11:02:03.719]                         if (!has_future || version < "1.8.0") {
[11:02:03.719]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:03.719]                             "", base::R.version$version.string), 
[11:02:03.719]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:03.719]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:03.719]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:03.719]                               "release", "version")], collapse = " "), 
[11:02:03.719]                             hostname = base::Sys.info()[["nodename"]])
[11:02:03.719]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:03.719]                             info)
[11:02:03.719]                           info <- base::paste(info, collapse = "; ")
[11:02:03.719]                           if (!has_future) {
[11:02:03.719]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:03.719]                               info)
[11:02:03.719]                           }
[11:02:03.719]                           else {
[11:02:03.719]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:03.719]                               info, version)
[11:02:03.719]                           }
[11:02:03.719]                           base::stop(msg)
[11:02:03.719]                         }
[11:02:03.719]                       })
[11:02:03.719]                     }
[11:02:03.719]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:03.719]                     base::options(mc.cores = 1L)
[11:02:03.719]                   }
[11:02:03.719]                   ...future.strategy.old <- future::plan("list")
[11:02:03.719]                   options(future.plan = NULL)
[11:02:03.719]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:03.719]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:03.719]                 }
[11:02:03.719]                 ...future.workdir <- getwd()
[11:02:03.719]             }
[11:02:03.719]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:03.719]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:03.719]         }
[11:02:03.719]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:03.719]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:03.719]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:03.719]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:03.719]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:03.719]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:03.719]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:03.719]             base::names(...future.oldOptions))
[11:02:03.719]     }
[11:02:03.719]     if (FALSE) {
[11:02:03.719]     }
[11:02:03.719]     else {
[11:02:03.719]         if (TRUE) {
[11:02:03.719]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:03.719]                 open = "w")
[11:02:03.719]         }
[11:02:03.719]         else {
[11:02:03.719]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:03.719]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:03.719]         }
[11:02:03.719]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:03.719]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:03.719]             base::sink(type = "output", split = FALSE)
[11:02:03.719]             base::close(...future.stdout)
[11:02:03.719]         }, add = TRUE)
[11:02:03.719]     }
[11:02:03.719]     ...future.frame <- base::sys.nframe()
[11:02:03.719]     ...future.conditions <- base::list()
[11:02:03.719]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:03.719]     if (FALSE) {
[11:02:03.719]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:03.719]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:03.719]     }
[11:02:03.719]     ...future.result <- base::tryCatch({
[11:02:03.719]         base::withCallingHandlers({
[11:02:03.719]             ...future.value <- base::withVisible(base::local({
[11:02:03.719]                 withCallingHandlers({
[11:02:03.719]                   list(nthreads = RhpcBLASctl::omp_get_max_threads())
[11:02:03.719]                 }, immediateCondition = function(cond) {
[11:02:03.719]                   save_rds <- function (object, pathname, ...) 
[11:02:03.719]                   {
[11:02:03.719]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:03.719]                     if (file_test("-f", pathname_tmp)) {
[11:02:03.719]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.719]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:03.719]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.719]                         fi_tmp[["mtime"]])
[11:02:03.719]                     }
[11:02:03.719]                     tryCatch({
[11:02:03.719]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:03.719]                     }, error = function(ex) {
[11:02:03.719]                       msg <- conditionMessage(ex)
[11:02:03.719]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.719]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:03.719]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.719]                         fi_tmp[["mtime"]], msg)
[11:02:03.719]                       ex$message <- msg
[11:02:03.719]                       stop(ex)
[11:02:03.719]                     })
[11:02:03.719]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:03.719]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:03.719]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:03.719]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.719]                       fi <- file.info(pathname)
[11:02:03.719]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:03.719]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.719]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:03.719]                         fi[["size"]], fi[["mtime"]])
[11:02:03.719]                       stop(msg)
[11:02:03.719]                     }
[11:02:03.719]                     invisible(pathname)
[11:02:03.719]                   }
[11:02:03.719]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:03.719]                     rootPath = tempdir()) 
[11:02:03.719]                   {
[11:02:03.719]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:03.719]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:03.719]                       tmpdir = path, fileext = ".rds")
[11:02:03.719]                     save_rds(obj, file)
[11:02:03.719]                   }
[11:02:03.719]                   saveImmediateCondition(cond, path = "/tmp/RtmplZB5GE/.future/immediateConditions")
[11:02:03.719]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.719]                   {
[11:02:03.719]                     inherits <- base::inherits
[11:02:03.719]                     invokeRestart <- base::invokeRestart
[11:02:03.719]                     is.null <- base::is.null
[11:02:03.719]                     muffled <- FALSE
[11:02:03.719]                     if (inherits(cond, "message")) {
[11:02:03.719]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:03.719]                       if (muffled) 
[11:02:03.719]                         invokeRestart("muffleMessage")
[11:02:03.719]                     }
[11:02:03.719]                     else if (inherits(cond, "warning")) {
[11:02:03.719]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:03.719]                       if (muffled) 
[11:02:03.719]                         invokeRestart("muffleWarning")
[11:02:03.719]                     }
[11:02:03.719]                     else if (inherits(cond, "condition")) {
[11:02:03.719]                       if (!is.null(pattern)) {
[11:02:03.719]                         computeRestarts <- base::computeRestarts
[11:02:03.719]                         grepl <- base::grepl
[11:02:03.719]                         restarts <- computeRestarts(cond)
[11:02:03.719]                         for (restart in restarts) {
[11:02:03.719]                           name <- restart$name
[11:02:03.719]                           if (is.null(name)) 
[11:02:03.719]                             next
[11:02:03.719]                           if (!grepl(pattern, name)) 
[11:02:03.719]                             next
[11:02:03.719]                           invokeRestart(restart)
[11:02:03.719]                           muffled <- TRUE
[11:02:03.719]                           break
[11:02:03.719]                         }
[11:02:03.719]                       }
[11:02:03.719]                     }
[11:02:03.719]                     invisible(muffled)
[11:02:03.719]                   }
[11:02:03.719]                   muffleCondition(cond)
[11:02:03.719]                 })
[11:02:03.719]             }))
[11:02:03.719]             future::FutureResult(value = ...future.value$value, 
[11:02:03.719]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:03.719]                   ...future.rng), globalenv = if (FALSE) 
[11:02:03.719]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:03.719]                     ...future.globalenv.names))
[11:02:03.719]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:03.719]         }, condition = base::local({
[11:02:03.719]             c <- base::c
[11:02:03.719]             inherits <- base::inherits
[11:02:03.719]             invokeRestart <- base::invokeRestart
[11:02:03.719]             length <- base::length
[11:02:03.719]             list <- base::list
[11:02:03.719]             seq.int <- base::seq.int
[11:02:03.719]             signalCondition <- base::signalCondition
[11:02:03.719]             sys.calls <- base::sys.calls
[11:02:03.719]             `[[` <- base::`[[`
[11:02:03.719]             `+` <- base::`+`
[11:02:03.719]             `<<-` <- base::`<<-`
[11:02:03.719]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:03.719]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:03.719]                   3L)]
[11:02:03.719]             }
[11:02:03.719]             function(cond) {
[11:02:03.719]                 is_error <- inherits(cond, "error")
[11:02:03.719]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:03.719]                   NULL)
[11:02:03.719]                 if (is_error) {
[11:02:03.719]                   sessionInformation <- function() {
[11:02:03.719]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:03.719]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:03.719]                       search = base::search(), system = base::Sys.info())
[11:02:03.719]                   }
[11:02:03.719]                   ...future.conditions[[length(...future.conditions) + 
[11:02:03.719]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:03.719]                     cond$call), session = sessionInformation(), 
[11:02:03.719]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:03.719]                   signalCondition(cond)
[11:02:03.719]                 }
[11:02:03.719]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:03.719]                 "immediateCondition"))) {
[11:02:03.719]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:03.719]                   ...future.conditions[[length(...future.conditions) + 
[11:02:03.719]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:03.719]                   if (TRUE && !signal) {
[11:02:03.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.719]                     {
[11:02:03.719]                       inherits <- base::inherits
[11:02:03.719]                       invokeRestart <- base::invokeRestart
[11:02:03.719]                       is.null <- base::is.null
[11:02:03.719]                       muffled <- FALSE
[11:02:03.719]                       if (inherits(cond, "message")) {
[11:02:03.719]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:03.719]                         if (muffled) 
[11:02:03.719]                           invokeRestart("muffleMessage")
[11:02:03.719]                       }
[11:02:03.719]                       else if (inherits(cond, "warning")) {
[11:02:03.719]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:03.719]                         if (muffled) 
[11:02:03.719]                           invokeRestart("muffleWarning")
[11:02:03.719]                       }
[11:02:03.719]                       else if (inherits(cond, "condition")) {
[11:02:03.719]                         if (!is.null(pattern)) {
[11:02:03.719]                           computeRestarts <- base::computeRestarts
[11:02:03.719]                           grepl <- base::grepl
[11:02:03.719]                           restarts <- computeRestarts(cond)
[11:02:03.719]                           for (restart in restarts) {
[11:02:03.719]                             name <- restart$name
[11:02:03.719]                             if (is.null(name)) 
[11:02:03.719]                               next
[11:02:03.719]                             if (!grepl(pattern, name)) 
[11:02:03.719]                               next
[11:02:03.719]                             invokeRestart(restart)
[11:02:03.719]                             muffled <- TRUE
[11:02:03.719]                             break
[11:02:03.719]                           }
[11:02:03.719]                         }
[11:02:03.719]                       }
[11:02:03.719]                       invisible(muffled)
[11:02:03.719]                     }
[11:02:03.719]                     muffleCondition(cond, pattern = "^muffle")
[11:02:03.719]                   }
[11:02:03.719]                 }
[11:02:03.719]                 else {
[11:02:03.719]                   if (TRUE) {
[11:02:03.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.719]                     {
[11:02:03.719]                       inherits <- base::inherits
[11:02:03.719]                       invokeRestart <- base::invokeRestart
[11:02:03.719]                       is.null <- base::is.null
[11:02:03.719]                       muffled <- FALSE
[11:02:03.719]                       if (inherits(cond, "message")) {
[11:02:03.719]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:03.719]                         if (muffled) 
[11:02:03.719]                           invokeRestart("muffleMessage")
[11:02:03.719]                       }
[11:02:03.719]                       else if (inherits(cond, "warning")) {
[11:02:03.719]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:03.719]                         if (muffled) 
[11:02:03.719]                           invokeRestart("muffleWarning")
[11:02:03.719]                       }
[11:02:03.719]                       else if (inherits(cond, "condition")) {
[11:02:03.719]                         if (!is.null(pattern)) {
[11:02:03.719]                           computeRestarts <- base::computeRestarts
[11:02:03.719]                           grepl <- base::grepl
[11:02:03.719]                           restarts <- computeRestarts(cond)
[11:02:03.719]                           for (restart in restarts) {
[11:02:03.719]                             name <- restart$name
[11:02:03.719]                             if (is.null(name)) 
[11:02:03.719]                               next
[11:02:03.719]                             if (!grepl(pattern, name)) 
[11:02:03.719]                               next
[11:02:03.719]                             invokeRestart(restart)
[11:02:03.719]                             muffled <- TRUE
[11:02:03.719]                             break
[11:02:03.719]                           }
[11:02:03.719]                         }
[11:02:03.719]                       }
[11:02:03.719]                       invisible(muffled)
[11:02:03.719]                     }
[11:02:03.719]                     muffleCondition(cond, pattern = "^muffle")
[11:02:03.719]                   }
[11:02:03.719]                 }
[11:02:03.719]             }
[11:02:03.719]         }))
[11:02:03.719]     }, error = function(ex) {
[11:02:03.719]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:03.719]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:03.719]                 ...future.rng), started = ...future.startTime, 
[11:02:03.719]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:03.719]             version = "1.8"), class = "FutureResult")
[11:02:03.719]     }, finally = {
[11:02:03.719]         if (!identical(...future.workdir, getwd())) 
[11:02:03.719]             setwd(...future.workdir)
[11:02:03.719]         {
[11:02:03.719]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:03.719]                 ...future.oldOptions$nwarnings <- NULL
[11:02:03.719]             }
[11:02:03.719]             base::options(...future.oldOptions)
[11:02:03.719]             if (.Platform$OS.type == "windows") {
[11:02:03.719]                 old_names <- names(...future.oldEnvVars)
[11:02:03.719]                 envs <- base::Sys.getenv()
[11:02:03.719]                 names <- names(envs)
[11:02:03.719]                 common <- intersect(names, old_names)
[11:02:03.719]                 added <- setdiff(names, old_names)
[11:02:03.719]                 removed <- setdiff(old_names, names)
[11:02:03.719]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:03.719]                   envs[common]]
[11:02:03.719]                 NAMES <- toupper(changed)
[11:02:03.719]                 args <- list()
[11:02:03.719]                 for (kk in seq_along(NAMES)) {
[11:02:03.719]                   name <- changed[[kk]]
[11:02:03.719]                   NAME <- NAMES[[kk]]
[11:02:03.719]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.719]                     next
[11:02:03.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:03.719]                 }
[11:02:03.719]                 NAMES <- toupper(added)
[11:02:03.719]                 for (kk in seq_along(NAMES)) {
[11:02:03.719]                   name <- added[[kk]]
[11:02:03.719]                   NAME <- NAMES[[kk]]
[11:02:03.719]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.719]                     next
[11:02:03.719]                   args[[name]] <- ""
[11:02:03.719]                 }
[11:02:03.719]                 NAMES <- toupper(removed)
[11:02:03.719]                 for (kk in seq_along(NAMES)) {
[11:02:03.719]                   name <- removed[[kk]]
[11:02:03.719]                   NAME <- NAMES[[kk]]
[11:02:03.719]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.719]                     next
[11:02:03.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:03.719]                 }
[11:02:03.719]                 if (length(args) > 0) 
[11:02:03.719]                   base::do.call(base::Sys.setenv, args = args)
[11:02:03.719]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:03.719]             }
[11:02:03.719]             else {
[11:02:03.719]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:03.719]             }
[11:02:03.719]             {
[11:02:03.719]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:03.719]                   0L) {
[11:02:03.719]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:03.719]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:03.719]                   base::options(opts)
[11:02:03.719]                 }
[11:02:03.719]                 {
[11:02:03.719]                   {
[11:02:03.719]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:03.719]                     NULL
[11:02:03.719]                   }
[11:02:03.719]                   options(future.plan = NULL)
[11:02:03.719]                   if (is.na(NA_character_)) 
[11:02:03.719]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:03.719]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:03.719]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:03.719]                     .init = FALSE)
[11:02:03.719]                 }
[11:02:03.719]             }
[11:02:03.719]         }
[11:02:03.719]     })
[11:02:03.719]     if (TRUE) {
[11:02:03.719]         base::sink(type = "output", split = FALSE)
[11:02:03.719]         if (TRUE) {
[11:02:03.719]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:03.719]         }
[11:02:03.719]         else {
[11:02:03.719]             ...future.result["stdout"] <- base::list(NULL)
[11:02:03.719]         }
[11:02:03.719]         base::close(...future.stdout)
[11:02:03.719]         ...future.stdout <- NULL
[11:02:03.719]     }
[11:02:03.719]     ...future.result$conditions <- ...future.conditions
[11:02:03.719]     ...future.result$finished <- base::Sys.time()
[11:02:03.719]     ...future.result
[11:02:03.719] }
[11:02:03.721] requestCore(): workers = 2
[11:02:03.723] MulticoreFuture started
[11:02:03.723] - Launch lazy future ... done
[11:02:03.723] run() for ‘MulticoreFuture’ ... done
[11:02:03.723] result() for MulticoreFuture ...
[11:02:03.724] plan(): Setting new future strategy stack:
[11:02:03.724] List of future strategies:
[11:02:03.724] 1. sequential:
[11:02:03.724]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:03.724]    - tweaked: FALSE
[11:02:03.724]    - call: NULL
[11:02:03.725] plan(): nbrOfWorkers() = 1
[11:02:03.728] plan(): Setting new future strategy stack:
[11:02:03.728] List of future strategies:
[11:02:03.728] 1. multicore:
[11:02:03.728]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:03.728]    - tweaked: FALSE
[11:02:03.728]    - call: plan(multicore)
[11:02:03.731] plan(): nbrOfWorkers() = 2
[11:02:03.731] result() for MulticoreFuture ...
[11:02:03.732] result() for MulticoreFuture ... done
[11:02:03.732] result() for MulticoreFuture ... done
[11:02:03.732] result() for MulticoreFuture ...
[11:02:03.732] result() for MulticoreFuture ... done
Number of OpenMP threads in ‘MulticoreFuture’ future: 4
'future.fork.multithreading.enable' = TRUE ... DONE
'future.fork.multithreading.enable' = FALSE ...
[11:02:03.732] getGlobalsAndPackages() ...
[11:02:03.733] Searching for globals...
[11:02:03.734] - globals found: [2] ‘list’, ‘::’
[11:02:03.734] Searching for globals ... DONE
[11:02:03.734] Resolving globals: FALSE
[11:02:03.734] 
[11:02:03.734] 
[11:02:03.734] getGlobalsAndPackages() ... DONE
[11:02:03.735] run() for ‘Future’ ...
[11:02:03.735] - state: ‘created’
[11:02:03.735] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:02:03.737] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:03.737] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:02:03.737]   - Field: ‘label’
[11:02:03.738]   - Field: ‘local’
[11:02:03.738]   - Field: ‘owner’
[11:02:03.738]   - Field: ‘envir’
[11:02:03.738]   - Field: ‘workers’
[11:02:03.738]   - Field: ‘packages’
[11:02:03.738]   - Field: ‘gc’
[11:02:03.738]   - Field: ‘job’
[11:02:03.738]   - Field: ‘conditions’
[11:02:03.738]   - Field: ‘expr’
[11:02:03.738]   - Field: ‘uuid’
[11:02:03.739]   - Field: ‘seed’
[11:02:03.739]   - Field: ‘version’
[11:02:03.739]   - Field: ‘result’
[11:02:03.739]   - Field: ‘asynchronous’
[11:02:03.739]   - Field: ‘calls’
[11:02:03.739]   - Field: ‘globals’
[11:02:03.739]   - Field: ‘stdout’
[11:02:03.739]   - Field: ‘earlySignal’
[11:02:03.739]   - Field: ‘lazy’
[11:02:03.740]   - Field: ‘state’
[11:02:03.740] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:02:03.740] - Launch lazy future ...
[11:02:03.740] supports_omp_threads() = TRUE
[11:02:03.740] - Updated expression to force single-threaded (OpenMP and RcppParallel) processing
[11:02:03.740] Packages needed by the future expression (n = 0): <none>
[11:02:03.740] Packages needed by future strategies (n = 0): <none>
[11:02:03.741] {
[11:02:03.741]     {
[11:02:03.741]         {
[11:02:03.741]             ...future.startTime <- base::Sys.time()
[11:02:03.741]             {
[11:02:03.741]                 {
[11:02:03.741]                   {
[11:02:03.741]                     {
[11:02:03.741]                       base::local({
[11:02:03.741]                         has_future <- base::requireNamespace("future", 
[11:02:03.741]                           quietly = TRUE)
[11:02:03.741]                         if (has_future) {
[11:02:03.741]                           ns <- base::getNamespace("future")
[11:02:03.741]                           version <- ns[[".package"]][["version"]]
[11:02:03.741]                           if (is.null(version)) 
[11:02:03.741]                             version <- utils::packageVersion("future")
[11:02:03.741]                         }
[11:02:03.741]                         else {
[11:02:03.741]                           version <- NULL
[11:02:03.741]                         }
[11:02:03.741]                         if (!has_future || version < "1.8.0") {
[11:02:03.741]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:03.741]                             "", base::R.version$version.string), 
[11:02:03.741]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:03.741]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:03.741]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:03.741]                               "release", "version")], collapse = " "), 
[11:02:03.741]                             hostname = base::Sys.info()[["nodename"]])
[11:02:03.741]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:03.741]                             info)
[11:02:03.741]                           info <- base::paste(info, collapse = "; ")
[11:02:03.741]                           if (!has_future) {
[11:02:03.741]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:03.741]                               info)
[11:02:03.741]                           }
[11:02:03.741]                           else {
[11:02:03.741]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:03.741]                               info, version)
[11:02:03.741]                           }
[11:02:03.741]                           base::stop(msg)
[11:02:03.741]                         }
[11:02:03.741]                       })
[11:02:03.741]                     }
[11:02:03.741]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:03.741]                     base::options(mc.cores = 1L)
[11:02:03.741]                   }
[11:02:03.741]                   ...future.strategy.old <- future::plan("list")
[11:02:03.741]                   options(future.plan = NULL)
[11:02:03.741]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:03.741]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:03.741]                 }
[11:02:03.741]                 ...future.workdir <- getwd()
[11:02:03.741]             }
[11:02:03.741]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:03.741]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:03.741]         }
[11:02:03.741]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:03.741]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:03.741]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:03.741]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:03.741]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:03.741]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:03.741]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:03.741]             base::names(...future.oldOptions))
[11:02:03.741]     }
[11:02:03.741]     if (FALSE) {
[11:02:03.741]     }
[11:02:03.741]     else {
[11:02:03.741]         if (TRUE) {
[11:02:03.741]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:03.741]                 open = "w")
[11:02:03.741]         }
[11:02:03.741]         else {
[11:02:03.741]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:03.741]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:03.741]         }
[11:02:03.741]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:03.741]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:03.741]             base::sink(type = "output", split = FALSE)
[11:02:03.741]             base::close(...future.stdout)
[11:02:03.741]         }, add = TRUE)
[11:02:03.741]     }
[11:02:03.741]     ...future.frame <- base::sys.nframe()
[11:02:03.741]     ...future.conditions <- base::list()
[11:02:03.741]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:03.741]     if (FALSE) {
[11:02:03.741]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:03.741]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:03.741]     }
[11:02:03.741]     ...future.result <- base::tryCatch({
[11:02:03.741]         base::withCallingHandlers({
[11:02:03.741]             ...future.value <- base::withVisible(base::local({
[11:02:03.741]                 withCallingHandlers({
[11:02:03.741]                   {
[11:02:03.741]                     old_omp_threads <- RhpcBLASctl::omp_get_max_threads()
[11:02:03.741]                     if (old_omp_threads > 1L) {
[11:02:03.741]                       RhpcBLASctl::omp_set_num_threads(1L)
[11:02:03.741]                       base::on.exit(RhpcBLASctl::omp_set_num_threads(old_omp_threads), 
[11:02:03.741]                         add = TRUE)
[11:02:03.741]                       new_omp_threads <- RhpcBLASctl::omp_get_max_threads()
[11:02:03.741]                       if (!is.numeric(new_omp_threads) || is.na(new_omp_threads) || 
[11:02:03.741]                         new_omp_threads != 1L) {
[11:02:03.741]                         label <- future$label
[11:02:03.741]                         if (is.null(label)) 
[11:02:03.741]                           label <- "<none>"
[11:02:03.741]                         warning(future::FutureWarning(sprintf("Failed to force a single OMP thread on this system. Number of threads used: %s", 
[11:02:03.741]                           new_omp_threads), future = future))
[11:02:03.741]                       }
[11:02:03.741]                     }
[11:02:03.741]                     old_rcppparallel_threads <- Sys.getenv("RCPP_PARALLEL_NUM_THREADS", 
[11:02:03.741]                       "")
[11:02:03.741]                     if (old_rcppparallel_threads != "1") {
[11:02:03.741]                       Sys.setenv(RCPP_PARALLEL_NUM_THREADS = "1")
[11:02:03.741]                       if (old_rcppparallel_threads == "") {
[11:02:03.741]                         base::on.exit(Sys.unsetenv("RCPP_PARALLEL_NUM_THREADS"), 
[11:02:03.741]                           add = TRUE)
[11:02:03.741]                       }
[11:02:03.741]                       else {
[11:02:03.741]                         base::on.exit(Sys.setenv(RCPP_PARALLEL_NUM_THREADS = old_rcppparallel_threads), 
[11:02:03.741]                           add = TRUE)
[11:02:03.741]                       }
[11:02:03.741]                     }
[11:02:03.741]                     list(nthreads = RhpcBLASctl::omp_get_max_threads())
[11:02:03.741]                   }
[11:02:03.741]                 }, immediateCondition = function(cond) {
[11:02:03.741]                   save_rds <- function (object, pathname, ...) 
[11:02:03.741]                   {
[11:02:03.741]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:03.741]                     if (file_test("-f", pathname_tmp)) {
[11:02:03.741]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.741]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:03.741]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.741]                         fi_tmp[["mtime"]])
[11:02:03.741]                     }
[11:02:03.741]                     tryCatch({
[11:02:03.741]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:03.741]                     }, error = function(ex) {
[11:02:03.741]                       msg <- conditionMessage(ex)
[11:02:03.741]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.741]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:03.741]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.741]                         fi_tmp[["mtime"]], msg)
[11:02:03.741]                       ex$message <- msg
[11:02:03.741]                       stop(ex)
[11:02:03.741]                     })
[11:02:03.741]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:03.741]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:03.741]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:03.741]                       fi_tmp <- file.info(pathname_tmp)
[11:02:03.741]                       fi <- file.info(pathname)
[11:02:03.741]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:03.741]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:03.741]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:03.741]                         fi[["size"]], fi[["mtime"]])
[11:02:03.741]                       stop(msg)
[11:02:03.741]                     }
[11:02:03.741]                     invisible(pathname)
[11:02:03.741]                   }
[11:02:03.741]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:03.741]                     rootPath = tempdir()) 
[11:02:03.741]                   {
[11:02:03.741]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:03.741]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:03.741]                       tmpdir = path, fileext = ".rds")
[11:02:03.741]                     save_rds(obj, file)
[11:02:03.741]                   }
[11:02:03.741]                   saveImmediateCondition(cond, path = "/tmp/RtmplZB5GE/.future/immediateConditions")
[11:02:03.741]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.741]                   {
[11:02:03.741]                     inherits <- base::inherits
[11:02:03.741]                     invokeRestart <- base::invokeRestart
[11:02:03.741]                     is.null <- base::is.null
[11:02:03.741]                     muffled <- FALSE
[11:02:03.741]                     if (inherits(cond, "message")) {
[11:02:03.741]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:03.741]                       if (muffled) 
[11:02:03.741]                         invokeRestart("muffleMessage")
[11:02:03.741]                     }
[11:02:03.741]                     else if (inherits(cond, "warning")) {
[11:02:03.741]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:03.741]                       if (muffled) 
[11:02:03.741]                         invokeRestart("muffleWarning")
[11:02:03.741]                     }
[11:02:03.741]                     else if (inherits(cond, "condition")) {
[11:02:03.741]                       if (!is.null(pattern)) {
[11:02:03.741]                         computeRestarts <- base::computeRestarts
[11:02:03.741]                         grepl <- base::grepl
[11:02:03.741]                         restarts <- computeRestarts(cond)
[11:02:03.741]                         for (restart in restarts) {
[11:02:03.741]                           name <- restart$name
[11:02:03.741]                           if (is.null(name)) 
[11:02:03.741]                             next
[11:02:03.741]                           if (!grepl(pattern, name)) 
[11:02:03.741]                             next
[11:02:03.741]                           invokeRestart(restart)
[11:02:03.741]                           muffled <- TRUE
[11:02:03.741]                           break
[11:02:03.741]                         }
[11:02:03.741]                       }
[11:02:03.741]                     }
[11:02:03.741]                     invisible(muffled)
[11:02:03.741]                   }
[11:02:03.741]                   muffleCondition(cond)
[11:02:03.741]                 })
[11:02:03.741]             }))
[11:02:03.741]             future::FutureResult(value = ...future.value$value, 
[11:02:03.741]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:03.741]                   ...future.rng), globalenv = if (FALSE) 
[11:02:03.741]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:03.741]                     ...future.globalenv.names))
[11:02:03.741]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:03.741]         }, condition = base::local({
[11:02:03.741]             c <- base::c
[11:02:03.741]             inherits <- base::inherits
[11:02:03.741]             invokeRestart <- base::invokeRestart
[11:02:03.741]             length <- base::length
[11:02:03.741]             list <- base::list
[11:02:03.741]             seq.int <- base::seq.int
[11:02:03.741]             signalCondition <- base::signalCondition
[11:02:03.741]             sys.calls <- base::sys.calls
[11:02:03.741]             `[[` <- base::`[[`
[11:02:03.741]             `+` <- base::`+`
[11:02:03.741]             `<<-` <- base::`<<-`
[11:02:03.741]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:03.741]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:03.741]                   3L)]
[11:02:03.741]             }
[11:02:03.741]             function(cond) {
[11:02:03.741]                 is_error <- inherits(cond, "error")
[11:02:03.741]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:03.741]                   NULL)
[11:02:03.741]                 if (is_error) {
[11:02:03.741]                   sessionInformation <- function() {
[11:02:03.741]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:03.741]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:03.741]                       search = base::search(), system = base::Sys.info())
[11:02:03.741]                   }
[11:02:03.741]                   ...future.conditions[[length(...future.conditions) + 
[11:02:03.741]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:03.741]                     cond$call), session = sessionInformation(), 
[11:02:03.741]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:03.741]                   signalCondition(cond)
[11:02:03.741]                 }
[11:02:03.741]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:03.741]                 "immediateCondition"))) {
[11:02:03.741]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:03.741]                   ...future.conditions[[length(...future.conditions) + 
[11:02:03.741]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:03.741]                   if (TRUE && !signal) {
[11:02:03.741]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.741]                     {
[11:02:03.741]                       inherits <- base::inherits
[11:02:03.741]                       invokeRestart <- base::invokeRestart
[11:02:03.741]                       is.null <- base::is.null
[11:02:03.741]                       muffled <- FALSE
[11:02:03.741]                       if (inherits(cond, "message")) {
[11:02:03.741]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:03.741]                         if (muffled) 
[11:02:03.741]                           invokeRestart("muffleMessage")
[11:02:03.741]                       }
[11:02:03.741]                       else if (inherits(cond, "warning")) {
[11:02:03.741]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:03.741]                         if (muffled) 
[11:02:03.741]                           invokeRestart("muffleWarning")
[11:02:03.741]                       }
[11:02:03.741]                       else if (inherits(cond, "condition")) {
[11:02:03.741]                         if (!is.null(pattern)) {
[11:02:03.741]                           computeRestarts <- base::computeRestarts
[11:02:03.741]                           grepl <- base::grepl
[11:02:03.741]                           restarts <- computeRestarts(cond)
[11:02:03.741]                           for (restart in restarts) {
[11:02:03.741]                             name <- restart$name
[11:02:03.741]                             if (is.null(name)) 
[11:02:03.741]                               next
[11:02:03.741]                             if (!grepl(pattern, name)) 
[11:02:03.741]                               next
[11:02:03.741]                             invokeRestart(restart)
[11:02:03.741]                             muffled <- TRUE
[11:02:03.741]                             break
[11:02:03.741]                           }
[11:02:03.741]                         }
[11:02:03.741]                       }
[11:02:03.741]                       invisible(muffled)
[11:02:03.741]                     }
[11:02:03.741]                     muffleCondition(cond, pattern = "^muffle")
[11:02:03.741]                   }
[11:02:03.741]                 }
[11:02:03.741]                 else {
[11:02:03.741]                   if (TRUE) {
[11:02:03.741]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:03.741]                     {
[11:02:03.741]                       inherits <- base::inherits
[11:02:03.741]                       invokeRestart <- base::invokeRestart
[11:02:03.741]                       is.null <- base::is.null
[11:02:03.741]                       muffled <- FALSE
[11:02:03.741]                       if (inherits(cond, "message")) {
[11:02:03.741]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:03.741]                         if (muffled) 
[11:02:03.741]                           invokeRestart("muffleMessage")
[11:02:03.741]                       }
[11:02:03.741]                       else if (inherits(cond, "warning")) {
[11:02:03.741]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:03.741]                         if (muffled) 
[11:02:03.741]                           invokeRestart("muffleWarning")
[11:02:03.741]                       }
[11:02:03.741]                       else if (inherits(cond, "condition")) {
[11:02:03.741]                         if (!is.null(pattern)) {
[11:02:03.741]                           computeRestarts <- base::computeRestarts
[11:02:03.741]                           grepl <- base::grepl
[11:02:03.741]                           restarts <- computeRestarts(cond)
[11:02:03.741]                           for (restart in restarts) {
[11:02:03.741]                             name <- restart$name
[11:02:03.741]                             if (is.null(name)) 
[11:02:03.741]                               next
[11:02:03.741]                             if (!grepl(pattern, name)) 
[11:02:03.741]                               next
[11:02:03.741]                             invokeRestart(restart)
[11:02:03.741]                             muffled <- TRUE
[11:02:03.741]                             break
[11:02:03.741]                           }
[11:02:03.741]                         }
[11:02:03.741]                       }
[11:02:03.741]                       invisible(muffled)
[11:02:03.741]                     }
[11:02:03.741]                     muffleCondition(cond, pattern = "^muffle")
[11:02:03.741]                   }
[11:02:03.741]                 }
[11:02:03.741]             }
[11:02:03.741]         }))
[11:02:03.741]     }, error = function(ex) {
[11:02:03.741]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:03.741]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:03.741]                 ...future.rng), started = ...future.startTime, 
[11:02:03.741]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:03.741]             version = "1.8"), class = "FutureResult")
[11:02:03.741]     }, finally = {
[11:02:03.741]         if (!identical(...future.workdir, getwd())) 
[11:02:03.741]             setwd(...future.workdir)
[11:02:03.741]         {
[11:02:03.741]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:03.741]                 ...future.oldOptions$nwarnings <- NULL
[11:02:03.741]             }
[11:02:03.741]             base::options(...future.oldOptions)
[11:02:03.741]             if (.Platform$OS.type == "windows") {
[11:02:03.741]                 old_names <- names(...future.oldEnvVars)
[11:02:03.741]                 envs <- base::Sys.getenv()
[11:02:03.741]                 names <- names(envs)
[11:02:03.741]                 common <- intersect(names, old_names)
[11:02:03.741]                 added <- setdiff(names, old_names)
[11:02:03.741]                 removed <- setdiff(old_names, names)
[11:02:03.741]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:03.741]                   envs[common]]
[11:02:03.741]                 NAMES <- toupper(changed)
[11:02:03.741]                 args <- list()
[11:02:03.741]                 for (kk in seq_along(NAMES)) {
[11:02:03.741]                   name <- changed[[kk]]
[11:02:03.741]                   NAME <- NAMES[[kk]]
[11:02:03.741]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.741]                     next
[11:02:03.741]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:03.741]                 }
[11:02:03.741]                 NAMES <- toupper(added)
[11:02:03.741]                 for (kk in seq_along(NAMES)) {
[11:02:03.741]                   name <- added[[kk]]
[11:02:03.741]                   NAME <- NAMES[[kk]]
[11:02:03.741]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.741]                     next
[11:02:03.741]                   args[[name]] <- ""
[11:02:03.741]                 }
[11:02:03.741]                 NAMES <- toupper(removed)
[11:02:03.741]                 for (kk in seq_along(NAMES)) {
[11:02:03.741]                   name <- removed[[kk]]
[11:02:03.741]                   NAME <- NAMES[[kk]]
[11:02:03.741]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:03.741]                     next
[11:02:03.741]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:03.741]                 }
[11:02:03.741]                 if (length(args) > 0) 
[11:02:03.741]                   base::do.call(base::Sys.setenv, args = args)
[11:02:03.741]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:03.741]             }
[11:02:03.741]             else {
[11:02:03.741]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:03.741]             }
[11:02:03.741]             {
[11:02:03.741]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:03.741]                   0L) {
[11:02:03.741]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:03.741]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:03.741]                   base::options(opts)
[11:02:03.741]                 }
[11:02:03.741]                 {
[11:02:03.741]                   {
[11:02:03.741]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:03.741]                     NULL
[11:02:03.741]                   }
[11:02:03.741]                   options(future.plan = NULL)
[11:02:03.741]                   if (is.na(NA_character_)) 
[11:02:03.741]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:03.741]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:03.741]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:03.741]                     .init = FALSE)
[11:02:03.741]                 }
[11:02:03.741]             }
[11:02:03.741]         }
[11:02:03.741]     })
[11:02:03.741]     if (TRUE) {
[11:02:03.741]         base::sink(type = "output", split = FALSE)
[11:02:03.741]         if (TRUE) {
[11:02:03.741]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:03.741]         }
[11:02:03.741]         else {
[11:02:03.741]             ...future.result["stdout"] <- base::list(NULL)
[11:02:03.741]         }
[11:02:03.741]         base::close(...future.stdout)
[11:02:03.741]         ...future.stdout <- NULL
[11:02:03.741]     }
[11:02:03.741]     ...future.result$conditions <- ...future.conditions
[11:02:03.741]     ...future.result$finished <- base::Sys.time()
[11:02:03.741]     ...future.result
[11:02:03.741] }
[11:02:03.744] requestCore(): workers = 2
[11:02:03.745] MulticoreFuture started
[11:02:03.746] - Launch lazy future ... done
[11:02:03.746] run() for ‘MulticoreFuture’ ... done
[11:02:03.746] result() for MulticoreFuture ...
[11:02:03.746] plan(): Setting new future strategy stack:
[11:02:03.747] List of future strategies:
[11:02:03.747] 1. sequential:
[11:02:03.747]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:03.747]    - tweaked: FALSE
[11:02:03.747]    - call: NULL
[11:02:03.747] plan(): nbrOfWorkers() = 1
[11:02:03.750] plan(): Setting new future strategy stack:
[11:02:03.750] List of future strategies:
[11:02:03.750] 1. multicore:
[11:02:03.750]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:03.750]    - tweaked: FALSE
[11:02:03.750]    - call: plan(multicore)
[11:02:03.754] plan(): nbrOfWorkers() = 2
[11:02:03.755] result() for MulticoreFuture ...
[11:02:03.755] result() for MulticoreFuture ... done
[11:02:03.755] result() for MulticoreFuture ... done
[11:02:03.755] result() for MulticoreFuture ...
[11:02:03.755] result() for MulticoreFuture ... done
Number of OpenMP threads in ‘MulticoreFuture’ future: 1
'future.fork.multithreading.enable' = FALSE ... DONE
> 
> message("*** multicore() and multi-threading ... DONE")
*** multicore() and multi-threading ... DONE
> 
> source("incl/end.R")
[11:02:03.756] plan(): Setting new future strategy stack:
[11:02:03.757] List of future strategies:
[11:02:03.757] 1. FutureStrategy:
[11:02:03.757]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:03.757]    - tweaked: FALSE
[11:02:03.757]    - call: future::plan(oplan)
[11:02:03.757] plan(): nbrOfWorkers() = 1
> 
