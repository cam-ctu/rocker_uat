
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:46.080] plan(): Setting new future strategy stack:
[11:01:46.081] List of future strategies:
[11:01:46.081] 1. sequential:
[11:01:46.081]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.081]    - tweaked: FALSE
[11:01:46.081]    - call: future::plan("sequential")
[11:01:46.094] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[11:01:46.129] plan(): Setting new future strategy stack:
[11:01:46.129] List of future strategies:
[11:01:46.129] 1. sequential:
[11:01:46.129]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.129]    - tweaked: FALSE
[11:01:46.129]    - call: plan(strategy)
[11:01:46.141] plan(): nbrOfWorkers() = 1
[11:01:46.142] getGlobalsAndPackages() ...
[11:01:46.142] Searching for globals...
[11:01:46.147] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[11:01:46.147] Searching for globals ... DONE
[11:01:46.147] Resolving globals: FALSE
[11:01:46.148] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[11:01:46.149] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[11:01:46.149] - globals: [1] ‘my_fcn’
[11:01:46.149] 
[11:01:46.149] getGlobalsAndPackages() ... DONE
[11:01:46.150] run() for ‘Future’ ...
[11:01:46.150] - state: ‘created’
[11:01:46.150] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:46.150] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:46.150] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:46.151]   - Field: ‘label’
[11:01:46.151]   - Field: ‘local’
[11:01:46.151]   - Field: ‘owner’
[11:01:46.151]   - Field: ‘envir’
[11:01:46.151]   - Field: ‘packages’
[11:01:46.151]   - Field: ‘gc’
[11:01:46.151]   - Field: ‘conditions’
[11:01:46.151]   - Field: ‘expr’
[11:01:46.151]   - Field: ‘uuid’
[11:01:46.151]   - Field: ‘seed’
[11:01:46.151]   - Field: ‘version’
[11:01:46.151]   - Field: ‘result’
[11:01:46.152]   - Field: ‘asynchronous’
[11:01:46.152]   - Field: ‘calls’
[11:01:46.152]   - Field: ‘globals’
[11:01:46.152]   - Field: ‘stdout’
[11:01:46.152]   - Field: ‘earlySignal’
[11:01:46.152]   - Field: ‘lazy’
[11:01:46.152]   - Field: ‘state’
[11:01:46.152] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:46.152] - Launch lazy future ...
[11:01:46.153] Packages needed by the future expression (n = 0): <none>
[11:01:46.153] Packages needed by future strategies (n = 0): <none>
[11:01:46.154] {
[11:01:46.154]     {
[11:01:46.154]         {
[11:01:46.154]             ...future.startTime <- base::Sys.time()
[11:01:46.154]             {
[11:01:46.154]                 {
[11:01:46.154]                   {
[11:01:46.154]                     base::local({
[11:01:46.154]                       has_future <- base::requireNamespace("future", 
[11:01:46.154]                         quietly = TRUE)
[11:01:46.154]                       if (has_future) {
[11:01:46.154]                         ns <- base::getNamespace("future")
[11:01:46.154]                         version <- ns[[".package"]][["version"]]
[11:01:46.154]                         if (is.null(version)) 
[11:01:46.154]                           version <- utils::packageVersion("future")
[11:01:46.154]                       }
[11:01:46.154]                       else {
[11:01:46.154]                         version <- NULL
[11:01:46.154]                       }
[11:01:46.154]                       if (!has_future || version < "1.8.0") {
[11:01:46.154]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:46.154]                           "", base::R.version$version.string), 
[11:01:46.154]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:46.154]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:46.154]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:46.154]                             "release", "version")], collapse = " "), 
[11:01:46.154]                           hostname = base::Sys.info()[["nodename"]])
[11:01:46.154]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:46.154]                           info)
[11:01:46.154]                         info <- base::paste(info, collapse = "; ")
[11:01:46.154]                         if (!has_future) {
[11:01:46.154]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:46.154]                             info)
[11:01:46.154]                         }
[11:01:46.154]                         else {
[11:01:46.154]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:46.154]                             info, version)
[11:01:46.154]                         }
[11:01:46.154]                         base::stop(msg)
[11:01:46.154]                       }
[11:01:46.154]                     })
[11:01:46.154]                   }
[11:01:46.154]                   ...future.strategy.old <- future::plan("list")
[11:01:46.154]                   options(future.plan = NULL)
[11:01:46.154]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.154]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:46.154]                 }
[11:01:46.154]                 ...future.workdir <- getwd()
[11:01:46.154]             }
[11:01:46.154]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:46.154]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:46.154]         }
[11:01:46.154]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:46.154]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:46.154]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:46.154]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:46.154]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:46.154]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:46.154]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:46.154]             base::names(...future.oldOptions))
[11:01:46.154]     }
[11:01:46.154]     if (FALSE) {
[11:01:46.154]     }
[11:01:46.154]     else {
[11:01:46.154]         if (TRUE) {
[11:01:46.154]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:46.154]                 open = "w")
[11:01:46.154]         }
[11:01:46.154]         else {
[11:01:46.154]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:46.154]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:46.154]         }
[11:01:46.154]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:46.154]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:46.154]             base::sink(type = "output", split = FALSE)
[11:01:46.154]             base::close(...future.stdout)
[11:01:46.154]         }, add = TRUE)
[11:01:46.154]     }
[11:01:46.154]     ...future.frame <- base::sys.nframe()
[11:01:46.154]     ...future.conditions <- base::list()
[11:01:46.154]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:46.154]     if (FALSE) {
[11:01:46.154]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:46.154]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:46.154]     }
[11:01:46.154]     ...future.result <- base::tryCatch({
[11:01:46.154]         base::withCallingHandlers({
[11:01:46.154]             ...future.value <- base::withVisible(base::local({
[11:01:46.154]                 my_fcn
[11:01:46.154]             }))
[11:01:46.154]             future::FutureResult(value = ...future.value$value, 
[11:01:46.154]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.154]                   ...future.rng), globalenv = if (FALSE) 
[11:01:46.154]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:46.154]                     ...future.globalenv.names))
[11:01:46.154]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:46.154]         }, condition = base::local({
[11:01:46.154]             c <- base::c
[11:01:46.154]             inherits <- base::inherits
[11:01:46.154]             invokeRestart <- base::invokeRestart
[11:01:46.154]             length <- base::length
[11:01:46.154]             list <- base::list
[11:01:46.154]             seq.int <- base::seq.int
[11:01:46.154]             signalCondition <- base::signalCondition
[11:01:46.154]             sys.calls <- base::sys.calls
[11:01:46.154]             `[[` <- base::`[[`
[11:01:46.154]             `+` <- base::`+`
[11:01:46.154]             `<<-` <- base::`<<-`
[11:01:46.154]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:46.154]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:46.154]                   3L)]
[11:01:46.154]             }
[11:01:46.154]             function(cond) {
[11:01:46.154]                 is_error <- inherits(cond, "error")
[11:01:46.154]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:46.154]                   NULL)
[11:01:46.154]                 if (is_error) {
[11:01:46.154]                   sessionInformation <- function() {
[11:01:46.154]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:46.154]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:46.154]                       search = base::search(), system = base::Sys.info())
[11:01:46.154]                   }
[11:01:46.154]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.154]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:46.154]                     cond$call), session = sessionInformation(), 
[11:01:46.154]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:46.154]                   signalCondition(cond)
[11:01:46.154]                 }
[11:01:46.154]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:46.154]                 "immediateCondition"))) {
[11:01:46.154]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:46.154]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.154]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:46.154]                   if (TRUE && !signal) {
[11:01:46.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.154]                     {
[11:01:46.154]                       inherits <- base::inherits
[11:01:46.154]                       invokeRestart <- base::invokeRestart
[11:01:46.154]                       is.null <- base::is.null
[11:01:46.154]                       muffled <- FALSE
[11:01:46.154]                       if (inherits(cond, "message")) {
[11:01:46.154]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.154]                         if (muffled) 
[11:01:46.154]                           invokeRestart("muffleMessage")
[11:01:46.154]                       }
[11:01:46.154]                       else if (inherits(cond, "warning")) {
[11:01:46.154]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.154]                         if (muffled) 
[11:01:46.154]                           invokeRestart("muffleWarning")
[11:01:46.154]                       }
[11:01:46.154]                       else if (inherits(cond, "condition")) {
[11:01:46.154]                         if (!is.null(pattern)) {
[11:01:46.154]                           computeRestarts <- base::computeRestarts
[11:01:46.154]                           grepl <- base::grepl
[11:01:46.154]                           restarts <- computeRestarts(cond)
[11:01:46.154]                           for (restart in restarts) {
[11:01:46.154]                             name <- restart$name
[11:01:46.154]                             if (is.null(name)) 
[11:01:46.154]                               next
[11:01:46.154]                             if (!grepl(pattern, name)) 
[11:01:46.154]                               next
[11:01:46.154]                             invokeRestart(restart)
[11:01:46.154]                             muffled <- TRUE
[11:01:46.154]                             break
[11:01:46.154]                           }
[11:01:46.154]                         }
[11:01:46.154]                       }
[11:01:46.154]                       invisible(muffled)
[11:01:46.154]                     }
[11:01:46.154]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.154]                   }
[11:01:46.154]                 }
[11:01:46.154]                 else {
[11:01:46.154]                   if (TRUE) {
[11:01:46.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.154]                     {
[11:01:46.154]                       inherits <- base::inherits
[11:01:46.154]                       invokeRestart <- base::invokeRestart
[11:01:46.154]                       is.null <- base::is.null
[11:01:46.154]                       muffled <- FALSE
[11:01:46.154]                       if (inherits(cond, "message")) {
[11:01:46.154]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.154]                         if (muffled) 
[11:01:46.154]                           invokeRestart("muffleMessage")
[11:01:46.154]                       }
[11:01:46.154]                       else if (inherits(cond, "warning")) {
[11:01:46.154]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.154]                         if (muffled) 
[11:01:46.154]                           invokeRestart("muffleWarning")
[11:01:46.154]                       }
[11:01:46.154]                       else if (inherits(cond, "condition")) {
[11:01:46.154]                         if (!is.null(pattern)) {
[11:01:46.154]                           computeRestarts <- base::computeRestarts
[11:01:46.154]                           grepl <- base::grepl
[11:01:46.154]                           restarts <- computeRestarts(cond)
[11:01:46.154]                           for (restart in restarts) {
[11:01:46.154]                             name <- restart$name
[11:01:46.154]                             if (is.null(name)) 
[11:01:46.154]                               next
[11:01:46.154]                             if (!grepl(pattern, name)) 
[11:01:46.154]                               next
[11:01:46.154]                             invokeRestart(restart)
[11:01:46.154]                             muffled <- TRUE
[11:01:46.154]                             break
[11:01:46.154]                           }
[11:01:46.154]                         }
[11:01:46.154]                       }
[11:01:46.154]                       invisible(muffled)
[11:01:46.154]                     }
[11:01:46.154]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.154]                   }
[11:01:46.154]                 }
[11:01:46.154]             }
[11:01:46.154]         }))
[11:01:46.154]     }, error = function(ex) {
[11:01:46.154]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:46.154]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.154]                 ...future.rng), started = ...future.startTime, 
[11:01:46.154]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:46.154]             version = "1.8"), class = "FutureResult")
[11:01:46.154]     }, finally = {
[11:01:46.154]         if (!identical(...future.workdir, getwd())) 
[11:01:46.154]             setwd(...future.workdir)
[11:01:46.154]         {
[11:01:46.154]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:46.154]                 ...future.oldOptions$nwarnings <- NULL
[11:01:46.154]             }
[11:01:46.154]             base::options(...future.oldOptions)
[11:01:46.154]             if (.Platform$OS.type == "windows") {
[11:01:46.154]                 old_names <- names(...future.oldEnvVars)
[11:01:46.154]                 envs <- base::Sys.getenv()
[11:01:46.154]                 names <- names(envs)
[11:01:46.154]                 common <- intersect(names, old_names)
[11:01:46.154]                 added <- setdiff(names, old_names)
[11:01:46.154]                 removed <- setdiff(old_names, names)
[11:01:46.154]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:46.154]                   envs[common]]
[11:01:46.154]                 NAMES <- toupper(changed)
[11:01:46.154]                 args <- list()
[11:01:46.154]                 for (kk in seq_along(NAMES)) {
[11:01:46.154]                   name <- changed[[kk]]
[11:01:46.154]                   NAME <- NAMES[[kk]]
[11:01:46.154]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.154]                     next
[11:01:46.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.154]                 }
[11:01:46.154]                 NAMES <- toupper(added)
[11:01:46.154]                 for (kk in seq_along(NAMES)) {
[11:01:46.154]                   name <- added[[kk]]
[11:01:46.154]                   NAME <- NAMES[[kk]]
[11:01:46.154]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.154]                     next
[11:01:46.154]                   args[[name]] <- ""
[11:01:46.154]                 }
[11:01:46.154]                 NAMES <- toupper(removed)
[11:01:46.154]                 for (kk in seq_along(NAMES)) {
[11:01:46.154]                   name <- removed[[kk]]
[11:01:46.154]                   NAME <- NAMES[[kk]]
[11:01:46.154]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.154]                     next
[11:01:46.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.154]                 }
[11:01:46.154]                 if (length(args) > 0) 
[11:01:46.154]                   base::do.call(base::Sys.setenv, args = args)
[11:01:46.154]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:46.154]             }
[11:01:46.154]             else {
[11:01:46.154]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:46.154]             }
[11:01:46.154]             {
[11:01:46.154]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:46.154]                   0L) {
[11:01:46.154]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:46.154]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:46.154]                   base::options(opts)
[11:01:46.154]                 }
[11:01:46.154]                 {
[11:01:46.154]                   {
[11:01:46.154]                     NULL
[11:01:46.154]                     RNGkind("Mersenne-Twister")
[11:01:46.154]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:46.154]                       inherits = FALSE)
[11:01:46.154]                   }
[11:01:46.154]                   options(future.plan = NULL)
[11:01:46.154]                   if (is.na(NA_character_)) 
[11:01:46.154]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.154]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:46.154]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:46.154]                     .init = FALSE)
[11:01:46.154]                 }
[11:01:46.154]             }
[11:01:46.154]         }
[11:01:46.154]     })
[11:01:46.154]     if (TRUE) {
[11:01:46.154]         base::sink(type = "output", split = FALSE)
[11:01:46.154]         if (TRUE) {
[11:01:46.154]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:46.154]         }
[11:01:46.154]         else {
[11:01:46.154]             ...future.result["stdout"] <- base::list(NULL)
[11:01:46.154]         }
[11:01:46.154]         base::close(...future.stdout)
[11:01:46.154]         ...future.stdout <- NULL
[11:01:46.154]     }
[11:01:46.154]     ...future.result$conditions <- ...future.conditions
[11:01:46.154]     ...future.result$finished <- base::Sys.time()
[11:01:46.154]     ...future.result
[11:01:46.154] }
[11:01:46.155] assign_globals() ...
[11:01:46.156] List of 1
[11:01:46.156]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[11:01:46.156]   .. ..@ .Data     :function (x)  
[11:01:46.156]   .. ..@ generic   : chr "my_fcn"
[11:01:46.156]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[11:01:46.156]   .. ..@ package   : chr ".GlobalEnv"
[11:01:46.156]   .. ..@ group     : list()
[11:01:46.156]   .. ..@ valueClass: chr(0) 
[11:01:46.156]   .. ..@ signature : chr "x"
[11:01:46.156]   .. ..@ default   : NULL
[11:01:46.156]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[11:01:46.156]  - attr(*, "where")=List of 1
[11:01:46.156]   ..$ my_fcn:<environment: R_EmptyEnv> 
[11:01:46.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:46.156]  - attr(*, "resolved")= logi FALSE
[11:01:46.156]  - attr(*, "total_size")= num 2591
[11:01:46.156]  - attr(*, "already-done")= logi TRUE
[11:01:46.164] - reassign environment for ‘my_fcn’
[11:01:46.164] - copied ‘my_fcn’ to environment
[11:01:46.164] assign_globals() ... done
[11:01:46.164] plan(): Setting new future strategy stack:
[11:01:46.164] List of future strategies:
[11:01:46.164] 1. sequential:
[11:01:46.164]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.164]    - tweaked: FALSE
[11:01:46.164]    - call: NULL
[11:01:46.165] plan(): nbrOfWorkers() = 1
[11:01:46.166] plan(): Setting new future strategy stack:
[11:01:46.166] List of future strategies:
[11:01:46.166] 1. sequential:
[11:01:46.166]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.166]    - tweaked: FALSE
[11:01:46.166]    - call: plan(strategy)
[11:01:46.166] plan(): nbrOfWorkers() = 1
[11:01:46.166] SequentialFuture started (and completed)
[11:01:46.167] - Launch lazy future ... done
[11:01:46.167] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55a2a29be7d0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[11:01:46.167] getGlobalsAndPackages() ...
[11:01:46.167] Searching for globals...
[11:01:46.171] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[11:01:46.171] Searching for globals ... DONE
[11:01:46.171] Resolving globals: FALSE
[11:01:46.172] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[11:01:46.172] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[11:01:46.172] - globals: [1] ‘my_fcn’
[11:01:46.172] 
[11:01:46.172] getGlobalsAndPackages() ... DONE
[11:01:46.172] run() for ‘Future’ ...
[11:01:46.173] - state: ‘created’
[11:01:46.173] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:46.173] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:46.173] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:46.173]   - Field: ‘label’
[11:01:46.173]   - Field: ‘local’
[11:01:46.173]   - Field: ‘owner’
[11:01:46.173]   - Field: ‘envir’
[11:01:46.173]   - Field: ‘packages’
[11:01:46.173]   - Field: ‘gc’
[11:01:46.174]   - Field: ‘conditions’
[11:01:46.174]   - Field: ‘expr’
[11:01:46.174]   - Field: ‘uuid’
[11:01:46.174]   - Field: ‘seed’
[11:01:46.174]   - Field: ‘version’
[11:01:46.174]   - Field: ‘result’
[11:01:46.174]   - Field: ‘asynchronous’
[11:01:46.174]   - Field: ‘calls’
[11:01:46.174]   - Field: ‘globals’
[11:01:46.174]   - Field: ‘stdout’
[11:01:46.174]   - Field: ‘earlySignal’
[11:01:46.174]   - Field: ‘lazy’
[11:01:46.174]   - Field: ‘state’
[11:01:46.175] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:46.175] - Launch lazy future ...
[11:01:46.175] Packages needed by the future expression (n = 0): <none>
[11:01:46.175] Packages needed by future strategies (n = 0): <none>
[11:01:46.175] {
[11:01:46.175]     {
[11:01:46.175]         {
[11:01:46.175]             ...future.startTime <- base::Sys.time()
[11:01:46.175]             {
[11:01:46.175]                 {
[11:01:46.175]                   {
[11:01:46.175]                     base::local({
[11:01:46.175]                       has_future <- base::requireNamespace("future", 
[11:01:46.175]                         quietly = TRUE)
[11:01:46.175]                       if (has_future) {
[11:01:46.175]                         ns <- base::getNamespace("future")
[11:01:46.175]                         version <- ns[[".package"]][["version"]]
[11:01:46.175]                         if (is.null(version)) 
[11:01:46.175]                           version <- utils::packageVersion("future")
[11:01:46.175]                       }
[11:01:46.175]                       else {
[11:01:46.175]                         version <- NULL
[11:01:46.175]                       }
[11:01:46.175]                       if (!has_future || version < "1.8.0") {
[11:01:46.175]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:46.175]                           "", base::R.version$version.string), 
[11:01:46.175]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:46.175]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:46.175]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:46.175]                             "release", "version")], collapse = " "), 
[11:01:46.175]                           hostname = base::Sys.info()[["nodename"]])
[11:01:46.175]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:46.175]                           info)
[11:01:46.175]                         info <- base::paste(info, collapse = "; ")
[11:01:46.175]                         if (!has_future) {
[11:01:46.175]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:46.175]                             info)
[11:01:46.175]                         }
[11:01:46.175]                         else {
[11:01:46.175]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:46.175]                             info, version)
[11:01:46.175]                         }
[11:01:46.175]                         base::stop(msg)
[11:01:46.175]                       }
[11:01:46.175]                     })
[11:01:46.175]                   }
[11:01:46.175]                   ...future.strategy.old <- future::plan("list")
[11:01:46.175]                   options(future.plan = NULL)
[11:01:46.175]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.175]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:46.175]                 }
[11:01:46.175]                 ...future.workdir <- getwd()
[11:01:46.175]             }
[11:01:46.175]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:46.175]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:46.175]         }
[11:01:46.175]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:46.175]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:46.175]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:46.175]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:46.175]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:46.175]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:46.175]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:46.175]             base::names(...future.oldOptions))
[11:01:46.175]     }
[11:01:46.175]     if (FALSE) {
[11:01:46.175]     }
[11:01:46.175]     else {
[11:01:46.175]         if (TRUE) {
[11:01:46.175]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:46.175]                 open = "w")
[11:01:46.175]         }
[11:01:46.175]         else {
[11:01:46.175]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:46.175]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:46.175]         }
[11:01:46.175]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:46.175]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:46.175]             base::sink(type = "output", split = FALSE)
[11:01:46.175]             base::close(...future.stdout)
[11:01:46.175]         }, add = TRUE)
[11:01:46.175]     }
[11:01:46.175]     ...future.frame <- base::sys.nframe()
[11:01:46.175]     ...future.conditions <- base::list()
[11:01:46.175]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:46.175]     if (FALSE) {
[11:01:46.175]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:46.175]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:46.175]     }
[11:01:46.175]     ...future.result <- base::tryCatch({
[11:01:46.175]         base::withCallingHandlers({
[11:01:46.175]             ...future.value <- base::withVisible(base::local({
[11:01:46.175]                 my_fcn(3)
[11:01:46.175]             }))
[11:01:46.175]             future::FutureResult(value = ...future.value$value, 
[11:01:46.175]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.175]                   ...future.rng), globalenv = if (FALSE) 
[11:01:46.175]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:46.175]                     ...future.globalenv.names))
[11:01:46.175]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:46.175]         }, condition = base::local({
[11:01:46.175]             c <- base::c
[11:01:46.175]             inherits <- base::inherits
[11:01:46.175]             invokeRestart <- base::invokeRestart
[11:01:46.175]             length <- base::length
[11:01:46.175]             list <- base::list
[11:01:46.175]             seq.int <- base::seq.int
[11:01:46.175]             signalCondition <- base::signalCondition
[11:01:46.175]             sys.calls <- base::sys.calls
[11:01:46.175]             `[[` <- base::`[[`
[11:01:46.175]             `+` <- base::`+`
[11:01:46.175]             `<<-` <- base::`<<-`
[11:01:46.175]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:46.175]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:46.175]                   3L)]
[11:01:46.175]             }
[11:01:46.175]             function(cond) {
[11:01:46.175]                 is_error <- inherits(cond, "error")
[11:01:46.175]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:46.175]                   NULL)
[11:01:46.175]                 if (is_error) {
[11:01:46.175]                   sessionInformation <- function() {
[11:01:46.175]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:46.175]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:46.175]                       search = base::search(), system = base::Sys.info())
[11:01:46.175]                   }
[11:01:46.175]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.175]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:46.175]                     cond$call), session = sessionInformation(), 
[11:01:46.175]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:46.175]                   signalCondition(cond)
[11:01:46.175]                 }
[11:01:46.175]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:46.175]                 "immediateCondition"))) {
[11:01:46.175]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:46.175]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.175]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:46.175]                   if (TRUE && !signal) {
[11:01:46.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.175]                     {
[11:01:46.175]                       inherits <- base::inherits
[11:01:46.175]                       invokeRestart <- base::invokeRestart
[11:01:46.175]                       is.null <- base::is.null
[11:01:46.175]                       muffled <- FALSE
[11:01:46.175]                       if (inherits(cond, "message")) {
[11:01:46.175]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.175]                         if (muffled) 
[11:01:46.175]                           invokeRestart("muffleMessage")
[11:01:46.175]                       }
[11:01:46.175]                       else if (inherits(cond, "warning")) {
[11:01:46.175]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.175]                         if (muffled) 
[11:01:46.175]                           invokeRestart("muffleWarning")
[11:01:46.175]                       }
[11:01:46.175]                       else if (inherits(cond, "condition")) {
[11:01:46.175]                         if (!is.null(pattern)) {
[11:01:46.175]                           computeRestarts <- base::computeRestarts
[11:01:46.175]                           grepl <- base::grepl
[11:01:46.175]                           restarts <- computeRestarts(cond)
[11:01:46.175]                           for (restart in restarts) {
[11:01:46.175]                             name <- restart$name
[11:01:46.175]                             if (is.null(name)) 
[11:01:46.175]                               next
[11:01:46.175]                             if (!grepl(pattern, name)) 
[11:01:46.175]                               next
[11:01:46.175]                             invokeRestart(restart)
[11:01:46.175]                             muffled <- TRUE
[11:01:46.175]                             break
[11:01:46.175]                           }
[11:01:46.175]                         }
[11:01:46.175]                       }
[11:01:46.175]                       invisible(muffled)
[11:01:46.175]                     }
[11:01:46.175]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.175]                   }
[11:01:46.175]                 }
[11:01:46.175]                 else {
[11:01:46.175]                   if (TRUE) {
[11:01:46.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.175]                     {
[11:01:46.175]                       inherits <- base::inherits
[11:01:46.175]                       invokeRestart <- base::invokeRestart
[11:01:46.175]                       is.null <- base::is.null
[11:01:46.175]                       muffled <- FALSE
[11:01:46.175]                       if (inherits(cond, "message")) {
[11:01:46.175]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.175]                         if (muffled) 
[11:01:46.175]                           invokeRestart("muffleMessage")
[11:01:46.175]                       }
[11:01:46.175]                       else if (inherits(cond, "warning")) {
[11:01:46.175]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.175]                         if (muffled) 
[11:01:46.175]                           invokeRestart("muffleWarning")
[11:01:46.175]                       }
[11:01:46.175]                       else if (inherits(cond, "condition")) {
[11:01:46.175]                         if (!is.null(pattern)) {
[11:01:46.175]                           computeRestarts <- base::computeRestarts
[11:01:46.175]                           grepl <- base::grepl
[11:01:46.175]                           restarts <- computeRestarts(cond)
[11:01:46.175]                           for (restart in restarts) {
[11:01:46.175]                             name <- restart$name
[11:01:46.175]                             if (is.null(name)) 
[11:01:46.175]                               next
[11:01:46.175]                             if (!grepl(pattern, name)) 
[11:01:46.175]                               next
[11:01:46.175]                             invokeRestart(restart)
[11:01:46.175]                             muffled <- TRUE
[11:01:46.175]                             break
[11:01:46.175]                           }
[11:01:46.175]                         }
[11:01:46.175]                       }
[11:01:46.175]                       invisible(muffled)
[11:01:46.175]                     }
[11:01:46.175]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.175]                   }
[11:01:46.175]                 }
[11:01:46.175]             }
[11:01:46.175]         }))
[11:01:46.175]     }, error = function(ex) {
[11:01:46.175]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:46.175]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.175]                 ...future.rng), started = ...future.startTime, 
[11:01:46.175]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:46.175]             version = "1.8"), class = "FutureResult")
[11:01:46.175]     }, finally = {
[11:01:46.175]         if (!identical(...future.workdir, getwd())) 
[11:01:46.175]             setwd(...future.workdir)
[11:01:46.175]         {
[11:01:46.175]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:46.175]                 ...future.oldOptions$nwarnings <- NULL
[11:01:46.175]             }
[11:01:46.175]             base::options(...future.oldOptions)
[11:01:46.175]             if (.Platform$OS.type == "windows") {
[11:01:46.175]                 old_names <- names(...future.oldEnvVars)
[11:01:46.175]                 envs <- base::Sys.getenv()
[11:01:46.175]                 names <- names(envs)
[11:01:46.175]                 common <- intersect(names, old_names)
[11:01:46.175]                 added <- setdiff(names, old_names)
[11:01:46.175]                 removed <- setdiff(old_names, names)
[11:01:46.175]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:46.175]                   envs[common]]
[11:01:46.175]                 NAMES <- toupper(changed)
[11:01:46.175]                 args <- list()
[11:01:46.175]                 for (kk in seq_along(NAMES)) {
[11:01:46.175]                   name <- changed[[kk]]
[11:01:46.175]                   NAME <- NAMES[[kk]]
[11:01:46.175]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.175]                     next
[11:01:46.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.175]                 }
[11:01:46.175]                 NAMES <- toupper(added)
[11:01:46.175]                 for (kk in seq_along(NAMES)) {
[11:01:46.175]                   name <- added[[kk]]
[11:01:46.175]                   NAME <- NAMES[[kk]]
[11:01:46.175]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.175]                     next
[11:01:46.175]                   args[[name]] <- ""
[11:01:46.175]                 }
[11:01:46.175]                 NAMES <- toupper(removed)
[11:01:46.175]                 for (kk in seq_along(NAMES)) {
[11:01:46.175]                   name <- removed[[kk]]
[11:01:46.175]                   NAME <- NAMES[[kk]]
[11:01:46.175]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.175]                     next
[11:01:46.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.175]                 }
[11:01:46.175]                 if (length(args) > 0) 
[11:01:46.175]                   base::do.call(base::Sys.setenv, args = args)
[11:01:46.175]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:46.175]             }
[11:01:46.175]             else {
[11:01:46.175]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:46.175]             }
[11:01:46.175]             {
[11:01:46.175]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:46.175]                   0L) {
[11:01:46.175]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:46.175]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:46.175]                   base::options(opts)
[11:01:46.175]                 }
[11:01:46.175]                 {
[11:01:46.175]                   {
[11:01:46.175]                     NULL
[11:01:46.175]                     RNGkind("Mersenne-Twister")
[11:01:46.175]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:46.175]                       inherits = FALSE)
[11:01:46.175]                   }
[11:01:46.175]                   options(future.plan = NULL)
[11:01:46.175]                   if (is.na(NA_character_)) 
[11:01:46.175]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.175]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:46.175]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:46.175]                     .init = FALSE)
[11:01:46.175]                 }
[11:01:46.175]             }
[11:01:46.175]         }
[11:01:46.175]     })
[11:01:46.175]     if (TRUE) {
[11:01:46.175]         base::sink(type = "output", split = FALSE)
[11:01:46.175]         if (TRUE) {
[11:01:46.175]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:46.175]         }
[11:01:46.175]         else {
[11:01:46.175]             ...future.result["stdout"] <- base::list(NULL)
[11:01:46.175]         }
[11:01:46.175]         base::close(...future.stdout)
[11:01:46.175]         ...future.stdout <- NULL
[11:01:46.175]     }
[11:01:46.175]     ...future.result$conditions <- ...future.conditions
[11:01:46.175]     ...future.result$finished <- base::Sys.time()
[11:01:46.175]     ...future.result
[11:01:46.175] }
[11:01:46.177] assign_globals() ...
[11:01:46.177] List of 1
[11:01:46.177]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[11:01:46.177]   .. ..@ .Data     :function (x)  
[11:01:46.177]   .. ..@ generic   : chr "my_fcn"
[11:01:46.177]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[11:01:46.177]   .. ..@ package   : chr ".GlobalEnv"
[11:01:46.177]   .. ..@ group     : list()
[11:01:46.177]   .. ..@ valueClass: chr(0) 
[11:01:46.177]   .. ..@ signature : chr "x"
[11:01:46.177]   .. ..@ default   : NULL
[11:01:46.177]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[11:01:46.177]  - attr(*, "where")=List of 1
[11:01:46.177]   ..$ my_fcn:<environment: R_EmptyEnv> 
[11:01:46.177]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:46.177]  - attr(*, "resolved")= logi FALSE
[11:01:46.177]  - attr(*, "total_size")= num 2591
[11:01:46.177]  - attr(*, "already-done")= logi TRUE
[11:01:46.181] - reassign environment for ‘my_fcn’
[11:01:46.181] - copied ‘my_fcn’ to environment
[11:01:46.182] assign_globals() ... done
[11:01:46.182] plan(): Setting new future strategy stack:
[11:01:46.182] List of future strategies:
[11:01:46.182] 1. sequential:
[11:01:46.182]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.182]    - tweaked: FALSE
[11:01:46.182]    - call: NULL
[11:01:46.182] plan(): nbrOfWorkers() = 1
[11:01:46.184] plan(): Setting new future strategy stack:
[11:01:46.184] List of future strategies:
[11:01:46.184] 1. sequential:
[11:01:46.184]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.184]    - tweaked: FALSE
[11:01:46.184]    - call: plan(strategy)
[11:01:46.184] plan(): nbrOfWorkers() = 1
[11:01:46.184] SequentialFuture started (and completed)
[11:01:46.184] signalConditions() ...
[11:01:46.185]  - include = ‘immediateCondition’
[11:01:46.185]  - exclude = 
[11:01:46.185]  - resignal = FALSE
[11:01:46.185]  - Number of conditions: 1
[11:01:46.186] signalConditions() ... done
[11:01:46.186] - Launch lazy future ... done
[11:01:46.186] run() for ‘SequentialFuture’ ... done
[11:01:46.186] signalConditions() ...
[11:01:46.186]  - include = ‘immediateCondition’
[11:01:46.186]  - exclude = 
[11:01:46.186]  - resignal = FALSE
[11:01:46.187]  - Number of conditions: 1
[11:01:46.187] signalConditions() ... done
[11:01:46.187] Future state: ‘finished’
[11:01:46.187] signalConditions() ...
[11:01:46.187]  - include = ‘condition’
[11:01:46.187]  - exclude = ‘immediateCondition’
[11:01:46.187]  - resignal = TRUE
[11:01:46.187]  - Number of conditions: 1
[11:01:46.187]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:01:46.187] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multicore
[11:01:46.188] plan(): Setting new future strategy stack:
[11:01:46.188] List of future strategies:
[11:01:46.188] 1. multicore:
[11:01:46.188]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:46.188]    - tweaked: FALSE
[11:01:46.188]    - call: plan(strategy)
[11:01:46.189] plan(): nbrOfWorkers() = 2
[11:01:46.190] getGlobalsAndPackages() ...
[11:01:46.190] Searching for globals...
[11:01:46.192] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[11:01:46.192] Searching for globals ... DONE
[11:01:46.192] Resolving globals: FALSE
[11:01:46.192] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[11:01:46.192] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[11:01:46.193] - globals: [1] ‘my_fcn’
[11:01:46.193] 
[11:01:46.193] getGlobalsAndPackages() ... DONE
[11:01:46.193] run() for ‘Future’ ...
[11:01:46.193] - state: ‘created’
[11:01:46.193] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:46.195] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:46.195] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:46.195]   - Field: ‘label’
[11:01:46.195]   - Field: ‘local’
[11:01:46.195]   - Field: ‘owner’
[11:01:46.195]   - Field: ‘envir’
[11:01:46.195]   - Field: ‘workers’
[11:01:46.195]   - Field: ‘packages’
[11:01:46.195]   - Field: ‘gc’
[11:01:46.196]   - Field: ‘job’
[11:01:46.196]   - Field: ‘conditions’
[11:01:46.196]   - Field: ‘expr’
[11:01:46.196]   - Field: ‘uuid’
[11:01:46.196]   - Field: ‘seed’
[11:01:46.196]   - Field: ‘version’
[11:01:46.196]   - Field: ‘result’
[11:01:46.196]   - Field: ‘asynchronous’
[11:01:46.196]   - Field: ‘calls’
[11:01:46.196]   - Field: ‘globals’
[11:01:46.196]   - Field: ‘stdout’
[11:01:46.196]   - Field: ‘earlySignal’
[11:01:46.196]   - Field: ‘lazy’
[11:01:46.197]   - Field: ‘state’
[11:01:46.197] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:46.197] - Launch lazy future ...
[11:01:46.197] Packages needed by the future expression (n = 0): <none>
[11:01:46.198] Packages needed by future strategies (n = 0): <none>
[11:01:46.198] {
[11:01:46.198]     {
[11:01:46.198]         {
[11:01:46.198]             ...future.startTime <- base::Sys.time()
[11:01:46.198]             {
[11:01:46.198]                 {
[11:01:46.198]                   {
[11:01:46.198]                     {
[11:01:46.198]                       base::local({
[11:01:46.198]                         has_future <- base::requireNamespace("future", 
[11:01:46.198]                           quietly = TRUE)
[11:01:46.198]                         if (has_future) {
[11:01:46.198]                           ns <- base::getNamespace("future")
[11:01:46.198]                           version <- ns[[".package"]][["version"]]
[11:01:46.198]                           if (is.null(version)) 
[11:01:46.198]                             version <- utils::packageVersion("future")
[11:01:46.198]                         }
[11:01:46.198]                         else {
[11:01:46.198]                           version <- NULL
[11:01:46.198]                         }
[11:01:46.198]                         if (!has_future || version < "1.8.0") {
[11:01:46.198]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:46.198]                             "", base::R.version$version.string), 
[11:01:46.198]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:46.198]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:46.198]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:46.198]                               "release", "version")], collapse = " "), 
[11:01:46.198]                             hostname = base::Sys.info()[["nodename"]])
[11:01:46.198]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:46.198]                             info)
[11:01:46.198]                           info <- base::paste(info, collapse = "; ")
[11:01:46.198]                           if (!has_future) {
[11:01:46.198]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:46.198]                               info)
[11:01:46.198]                           }
[11:01:46.198]                           else {
[11:01:46.198]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:46.198]                               info, version)
[11:01:46.198]                           }
[11:01:46.198]                           base::stop(msg)
[11:01:46.198]                         }
[11:01:46.198]                       })
[11:01:46.198]                     }
[11:01:46.198]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:46.198]                     base::options(mc.cores = 1L)
[11:01:46.198]                   }
[11:01:46.198]                   ...future.strategy.old <- future::plan("list")
[11:01:46.198]                   options(future.plan = NULL)
[11:01:46.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:46.198]                 }
[11:01:46.198]                 ...future.workdir <- getwd()
[11:01:46.198]             }
[11:01:46.198]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:46.198]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:46.198]         }
[11:01:46.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:46.198]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:46.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:46.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:46.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:46.198]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:46.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:46.198]             base::names(...future.oldOptions))
[11:01:46.198]     }
[11:01:46.198]     if (FALSE) {
[11:01:46.198]     }
[11:01:46.198]     else {
[11:01:46.198]         if (TRUE) {
[11:01:46.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:46.198]                 open = "w")
[11:01:46.198]         }
[11:01:46.198]         else {
[11:01:46.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:46.198]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:46.198]         }
[11:01:46.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:46.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:46.198]             base::sink(type = "output", split = FALSE)
[11:01:46.198]             base::close(...future.stdout)
[11:01:46.198]         }, add = TRUE)
[11:01:46.198]     }
[11:01:46.198]     ...future.frame <- base::sys.nframe()
[11:01:46.198]     ...future.conditions <- base::list()
[11:01:46.198]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:46.198]     if (FALSE) {
[11:01:46.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:46.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:46.198]     }
[11:01:46.198]     ...future.result <- base::tryCatch({
[11:01:46.198]         base::withCallingHandlers({
[11:01:46.198]             ...future.value <- base::withVisible(base::local({
[11:01:46.198]                 withCallingHandlers({
[11:01:46.198]                   {
[11:01:46.198]                     my_fcn
[11:01:46.198]                   }
[11:01:46.198]                 }, immediateCondition = function(cond) {
[11:01:46.198]                   save_rds <- function (object, pathname, ...) 
[11:01:46.198]                   {
[11:01:46.198]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:46.198]                     if (file_test("-f", pathname_tmp)) {
[11:01:46.198]                       fi_tmp <- file.info(pathname_tmp)
[11:01:46.198]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:46.198]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:46.198]                         fi_tmp[["mtime"]])
[11:01:46.198]                     }
[11:01:46.198]                     tryCatch({
[11:01:46.198]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:46.198]                     }, error = function(ex) {
[11:01:46.198]                       msg <- conditionMessage(ex)
[11:01:46.198]                       fi_tmp <- file.info(pathname_tmp)
[11:01:46.198]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:46.198]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:46.198]                         fi_tmp[["mtime"]], msg)
[11:01:46.198]                       ex$message <- msg
[11:01:46.198]                       stop(ex)
[11:01:46.198]                     })
[11:01:46.198]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:46.198]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:46.198]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:46.198]                       fi_tmp <- file.info(pathname_tmp)
[11:01:46.198]                       fi <- file.info(pathname)
[11:01:46.198]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:46.198]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:46.198]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:46.198]                         fi[["size"]], fi[["mtime"]])
[11:01:46.198]                       stop(msg)
[11:01:46.198]                     }
[11:01:46.198]                     invisible(pathname)
[11:01:46.198]                   }
[11:01:46.198]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:46.198]                     rootPath = tempdir()) 
[11:01:46.198]                   {
[11:01:46.198]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:46.198]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:46.198]                       tmpdir = path, fileext = ".rds")
[11:01:46.198]                     save_rds(obj, file)
[11:01:46.198]                   }
[11:01:46.198]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4jLw2e/.future/immediateConditions")
[11:01:46.198]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.198]                   {
[11:01:46.198]                     inherits <- base::inherits
[11:01:46.198]                     invokeRestart <- base::invokeRestart
[11:01:46.198]                     is.null <- base::is.null
[11:01:46.198]                     muffled <- FALSE
[11:01:46.198]                     if (inherits(cond, "message")) {
[11:01:46.198]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:46.198]                       if (muffled) 
[11:01:46.198]                         invokeRestart("muffleMessage")
[11:01:46.198]                     }
[11:01:46.198]                     else if (inherits(cond, "warning")) {
[11:01:46.198]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:46.198]                       if (muffled) 
[11:01:46.198]                         invokeRestart("muffleWarning")
[11:01:46.198]                     }
[11:01:46.198]                     else if (inherits(cond, "condition")) {
[11:01:46.198]                       if (!is.null(pattern)) {
[11:01:46.198]                         computeRestarts <- base::computeRestarts
[11:01:46.198]                         grepl <- base::grepl
[11:01:46.198]                         restarts <- computeRestarts(cond)
[11:01:46.198]                         for (restart in restarts) {
[11:01:46.198]                           name <- restart$name
[11:01:46.198]                           if (is.null(name)) 
[11:01:46.198]                             next
[11:01:46.198]                           if (!grepl(pattern, name)) 
[11:01:46.198]                             next
[11:01:46.198]                           invokeRestart(restart)
[11:01:46.198]                           muffled <- TRUE
[11:01:46.198]                           break
[11:01:46.198]                         }
[11:01:46.198]                       }
[11:01:46.198]                     }
[11:01:46.198]                     invisible(muffled)
[11:01:46.198]                   }
[11:01:46.198]                   muffleCondition(cond)
[11:01:46.198]                 })
[11:01:46.198]             }))
[11:01:46.198]             future::FutureResult(value = ...future.value$value, 
[11:01:46.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.198]                   ...future.rng), globalenv = if (FALSE) 
[11:01:46.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:46.198]                     ...future.globalenv.names))
[11:01:46.198]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:46.198]         }, condition = base::local({
[11:01:46.198]             c <- base::c
[11:01:46.198]             inherits <- base::inherits
[11:01:46.198]             invokeRestart <- base::invokeRestart
[11:01:46.198]             length <- base::length
[11:01:46.198]             list <- base::list
[11:01:46.198]             seq.int <- base::seq.int
[11:01:46.198]             signalCondition <- base::signalCondition
[11:01:46.198]             sys.calls <- base::sys.calls
[11:01:46.198]             `[[` <- base::`[[`
[11:01:46.198]             `+` <- base::`+`
[11:01:46.198]             `<<-` <- base::`<<-`
[11:01:46.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:46.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:46.198]                   3L)]
[11:01:46.198]             }
[11:01:46.198]             function(cond) {
[11:01:46.198]                 is_error <- inherits(cond, "error")
[11:01:46.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:46.198]                   NULL)
[11:01:46.198]                 if (is_error) {
[11:01:46.198]                   sessionInformation <- function() {
[11:01:46.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:46.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:46.198]                       search = base::search(), system = base::Sys.info())
[11:01:46.198]                   }
[11:01:46.198]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:46.198]                     cond$call), session = sessionInformation(), 
[11:01:46.198]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:46.198]                   signalCondition(cond)
[11:01:46.198]                 }
[11:01:46.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:46.198]                 "immediateCondition"))) {
[11:01:46.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:46.198]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:46.198]                   if (TRUE && !signal) {
[11:01:46.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.198]                     {
[11:01:46.198]                       inherits <- base::inherits
[11:01:46.198]                       invokeRestart <- base::invokeRestart
[11:01:46.198]                       is.null <- base::is.null
[11:01:46.198]                       muffled <- FALSE
[11:01:46.198]                       if (inherits(cond, "message")) {
[11:01:46.198]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.198]                         if (muffled) 
[11:01:46.198]                           invokeRestart("muffleMessage")
[11:01:46.198]                       }
[11:01:46.198]                       else if (inherits(cond, "warning")) {
[11:01:46.198]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.198]                         if (muffled) 
[11:01:46.198]                           invokeRestart("muffleWarning")
[11:01:46.198]                       }
[11:01:46.198]                       else if (inherits(cond, "condition")) {
[11:01:46.198]                         if (!is.null(pattern)) {
[11:01:46.198]                           computeRestarts <- base::computeRestarts
[11:01:46.198]                           grepl <- base::grepl
[11:01:46.198]                           restarts <- computeRestarts(cond)
[11:01:46.198]                           for (restart in restarts) {
[11:01:46.198]                             name <- restart$name
[11:01:46.198]                             if (is.null(name)) 
[11:01:46.198]                               next
[11:01:46.198]                             if (!grepl(pattern, name)) 
[11:01:46.198]                               next
[11:01:46.198]                             invokeRestart(restart)
[11:01:46.198]                             muffled <- TRUE
[11:01:46.198]                             break
[11:01:46.198]                           }
[11:01:46.198]                         }
[11:01:46.198]                       }
[11:01:46.198]                       invisible(muffled)
[11:01:46.198]                     }
[11:01:46.198]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.198]                   }
[11:01:46.198]                 }
[11:01:46.198]                 else {
[11:01:46.198]                   if (TRUE) {
[11:01:46.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.198]                     {
[11:01:46.198]                       inherits <- base::inherits
[11:01:46.198]                       invokeRestart <- base::invokeRestart
[11:01:46.198]                       is.null <- base::is.null
[11:01:46.198]                       muffled <- FALSE
[11:01:46.198]                       if (inherits(cond, "message")) {
[11:01:46.198]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.198]                         if (muffled) 
[11:01:46.198]                           invokeRestart("muffleMessage")
[11:01:46.198]                       }
[11:01:46.198]                       else if (inherits(cond, "warning")) {
[11:01:46.198]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.198]                         if (muffled) 
[11:01:46.198]                           invokeRestart("muffleWarning")
[11:01:46.198]                       }
[11:01:46.198]                       else if (inherits(cond, "condition")) {
[11:01:46.198]                         if (!is.null(pattern)) {
[11:01:46.198]                           computeRestarts <- base::computeRestarts
[11:01:46.198]                           grepl <- base::grepl
[11:01:46.198]                           restarts <- computeRestarts(cond)
[11:01:46.198]                           for (restart in restarts) {
[11:01:46.198]                             name <- restart$name
[11:01:46.198]                             if (is.null(name)) 
[11:01:46.198]                               next
[11:01:46.198]                             if (!grepl(pattern, name)) 
[11:01:46.198]                               next
[11:01:46.198]                             invokeRestart(restart)
[11:01:46.198]                             muffled <- TRUE
[11:01:46.198]                             break
[11:01:46.198]                           }
[11:01:46.198]                         }
[11:01:46.198]                       }
[11:01:46.198]                       invisible(muffled)
[11:01:46.198]                     }
[11:01:46.198]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.198]                   }
[11:01:46.198]                 }
[11:01:46.198]             }
[11:01:46.198]         }))
[11:01:46.198]     }, error = function(ex) {
[11:01:46.198]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:46.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.198]                 ...future.rng), started = ...future.startTime, 
[11:01:46.198]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:46.198]             version = "1.8"), class = "FutureResult")
[11:01:46.198]     }, finally = {
[11:01:46.198]         if (!identical(...future.workdir, getwd())) 
[11:01:46.198]             setwd(...future.workdir)
[11:01:46.198]         {
[11:01:46.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:46.198]                 ...future.oldOptions$nwarnings <- NULL
[11:01:46.198]             }
[11:01:46.198]             base::options(...future.oldOptions)
[11:01:46.198]             if (.Platform$OS.type == "windows") {
[11:01:46.198]                 old_names <- names(...future.oldEnvVars)
[11:01:46.198]                 envs <- base::Sys.getenv()
[11:01:46.198]                 names <- names(envs)
[11:01:46.198]                 common <- intersect(names, old_names)
[11:01:46.198]                 added <- setdiff(names, old_names)
[11:01:46.198]                 removed <- setdiff(old_names, names)
[11:01:46.198]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:46.198]                   envs[common]]
[11:01:46.198]                 NAMES <- toupper(changed)
[11:01:46.198]                 args <- list()
[11:01:46.198]                 for (kk in seq_along(NAMES)) {
[11:01:46.198]                   name <- changed[[kk]]
[11:01:46.198]                   NAME <- NAMES[[kk]]
[11:01:46.198]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.198]                     next
[11:01:46.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.198]                 }
[11:01:46.198]                 NAMES <- toupper(added)
[11:01:46.198]                 for (kk in seq_along(NAMES)) {
[11:01:46.198]                   name <- added[[kk]]
[11:01:46.198]                   NAME <- NAMES[[kk]]
[11:01:46.198]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.198]                     next
[11:01:46.198]                   args[[name]] <- ""
[11:01:46.198]                 }
[11:01:46.198]                 NAMES <- toupper(removed)
[11:01:46.198]                 for (kk in seq_along(NAMES)) {
[11:01:46.198]                   name <- removed[[kk]]
[11:01:46.198]                   NAME <- NAMES[[kk]]
[11:01:46.198]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.198]                     next
[11:01:46.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.198]                 }
[11:01:46.198]                 if (length(args) > 0) 
[11:01:46.198]                   base::do.call(base::Sys.setenv, args = args)
[11:01:46.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:46.198]             }
[11:01:46.198]             else {
[11:01:46.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:46.198]             }
[11:01:46.198]             {
[11:01:46.198]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:46.198]                   0L) {
[11:01:46.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:46.198]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:46.198]                   base::options(opts)
[11:01:46.198]                 }
[11:01:46.198]                 {
[11:01:46.198]                   {
[11:01:46.198]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:46.198]                     NULL
[11:01:46.198]                   }
[11:01:46.198]                   options(future.plan = NULL)
[11:01:46.198]                   if (is.na(NA_character_)) 
[11:01:46.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:46.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:46.198]                     .init = FALSE)
[11:01:46.198]                 }
[11:01:46.198]             }
[11:01:46.198]         }
[11:01:46.198]     })
[11:01:46.198]     if (TRUE) {
[11:01:46.198]         base::sink(type = "output", split = FALSE)
[11:01:46.198]         if (TRUE) {
[11:01:46.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:46.198]         }
[11:01:46.198]         else {
[11:01:46.198]             ...future.result["stdout"] <- base::list(NULL)
[11:01:46.198]         }
[11:01:46.198]         base::close(...future.stdout)
[11:01:46.198]         ...future.stdout <- NULL
[11:01:46.198]     }
[11:01:46.198]     ...future.result$conditions <- ...future.conditions
[11:01:46.198]     ...future.result$finished <- base::Sys.time()
[11:01:46.198]     ...future.result
[11:01:46.198] }
[11:01:46.200] assign_globals() ...
[11:01:46.200] List of 1
[11:01:46.200]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[11:01:46.200]   .. ..@ .Data     :function (x)  
[11:01:46.200]   .. ..@ generic   : chr "my_fcn"
[11:01:46.200]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[11:01:46.200]   .. ..@ package   : chr ".GlobalEnv"
[11:01:46.200]   .. ..@ group     : list()
[11:01:46.200]   .. ..@ valueClass: chr(0) 
[11:01:46.200]   .. ..@ signature : chr "x"
[11:01:46.200]   .. ..@ default   : NULL
[11:01:46.200]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[11:01:46.200]  - attr(*, "where")=List of 1
[11:01:46.200]   ..$ my_fcn:<environment: R_EmptyEnv> 
[11:01:46.200]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:46.200]  - attr(*, "resolved")= logi FALSE
[11:01:46.200]  - attr(*, "total_size")= num 2591
[11:01:46.200]  - attr(*, "already-done")= logi TRUE
[11:01:46.205] - reassign environment for ‘my_fcn’
[11:01:46.205] - copied ‘my_fcn’ to environment
[11:01:46.205] assign_globals() ... done
[11:01:46.205] requestCore(): workers = 2
[11:01:46.208] MulticoreFuture started
[11:01:46.208] - Launch lazy future ... done
[11:01:46.208] plan(): Setting new future strategy stack:
[11:01:46.208] run() for ‘MulticoreFuture’ ... done
[11:01:46.209] result() for MulticoreFuture ...
[11:01:46.208] List of future strategies:
[11:01:46.208] 1. sequential:
[11:01:46.208]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.208]    - tweaked: FALSE
[11:01:46.208]    - call: NULL
[11:01:46.209] plan(): nbrOfWorkers() = 1
[11:01:46.211] plan(): Setting new future strategy stack:
[11:01:46.211] List of future strategies:
[11:01:46.211] 1. multicore:
[11:01:46.211]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:46.211]    - tweaked: FALSE
[11:01:46.211]    - call: plan(strategy)
[11:01:46.214] plan(): nbrOfWorkers() = 2
[11:01:46.222] result() for MulticoreFuture ...
[11:01:46.222] result() for MulticoreFuture ... done
[11:01:46.222] result() for MulticoreFuture ... done
[11:01:46.222] result() for MulticoreFuture ...
[11:01:46.223] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55a2a2995940>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[11:01:46.223] getGlobalsAndPackages() ...
[11:01:46.223] Searching for globals...
[11:01:46.226] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[11:01:46.226] Searching for globals ... DONE
[11:01:46.227] Resolving globals: FALSE
[11:01:46.227] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[11:01:46.228] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[11:01:46.228] - globals: [1] ‘my_fcn’
[11:01:46.228] 
[11:01:46.228] getGlobalsAndPackages() ... DONE
[11:01:46.228] run() for ‘Future’ ...
[11:01:46.228] - state: ‘created’
[11:01:46.229] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[11:01:46.230] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:46.231] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[11:01:46.231]   - Field: ‘label’
[11:01:46.231]   - Field: ‘local’
[11:01:46.231]   - Field: ‘owner’
[11:01:46.231]   - Field: ‘envir’
[11:01:46.231]   - Field: ‘workers’
[11:01:46.231]   - Field: ‘packages’
[11:01:46.231]   - Field: ‘gc’
[11:01:46.231]   - Field: ‘job’
[11:01:46.232]   - Field: ‘conditions’
[11:01:46.232]   - Field: ‘expr’
[11:01:46.232]   - Field: ‘uuid’
[11:01:46.232]   - Field: ‘seed’
[11:01:46.232]   - Field: ‘version’
[11:01:46.232]   - Field: ‘result’
[11:01:46.232]   - Field: ‘asynchronous’
[11:01:46.232]   - Field: ‘calls’
[11:01:46.232]   - Field: ‘globals’
[11:01:46.233]   - Field: ‘stdout’
[11:01:46.233]   - Field: ‘earlySignal’
[11:01:46.233]   - Field: ‘lazy’
[11:01:46.233]   - Field: ‘state’
[11:01:46.233] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[11:01:46.233] - Launch lazy future ...
[11:01:46.233] Packages needed by the future expression (n = 0): <none>
[11:01:46.233] Packages needed by future strategies (n = 0): <none>
[11:01:46.234] {
[11:01:46.234]     {
[11:01:46.234]         {
[11:01:46.234]             ...future.startTime <- base::Sys.time()
[11:01:46.234]             {
[11:01:46.234]                 {
[11:01:46.234]                   {
[11:01:46.234]                     {
[11:01:46.234]                       base::local({
[11:01:46.234]                         has_future <- base::requireNamespace("future", 
[11:01:46.234]                           quietly = TRUE)
[11:01:46.234]                         if (has_future) {
[11:01:46.234]                           ns <- base::getNamespace("future")
[11:01:46.234]                           version <- ns[[".package"]][["version"]]
[11:01:46.234]                           if (is.null(version)) 
[11:01:46.234]                             version <- utils::packageVersion("future")
[11:01:46.234]                         }
[11:01:46.234]                         else {
[11:01:46.234]                           version <- NULL
[11:01:46.234]                         }
[11:01:46.234]                         if (!has_future || version < "1.8.0") {
[11:01:46.234]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:46.234]                             "", base::R.version$version.string), 
[11:01:46.234]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:46.234]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:46.234]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:46.234]                               "release", "version")], collapse = " "), 
[11:01:46.234]                             hostname = base::Sys.info()[["nodename"]])
[11:01:46.234]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:46.234]                             info)
[11:01:46.234]                           info <- base::paste(info, collapse = "; ")
[11:01:46.234]                           if (!has_future) {
[11:01:46.234]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:46.234]                               info)
[11:01:46.234]                           }
[11:01:46.234]                           else {
[11:01:46.234]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:46.234]                               info, version)
[11:01:46.234]                           }
[11:01:46.234]                           base::stop(msg)
[11:01:46.234]                         }
[11:01:46.234]                       })
[11:01:46.234]                     }
[11:01:46.234]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:46.234]                     base::options(mc.cores = 1L)
[11:01:46.234]                   }
[11:01:46.234]                   ...future.strategy.old <- future::plan("list")
[11:01:46.234]                   options(future.plan = NULL)
[11:01:46.234]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.234]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:46.234]                 }
[11:01:46.234]                 ...future.workdir <- getwd()
[11:01:46.234]             }
[11:01:46.234]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:46.234]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:46.234]         }
[11:01:46.234]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:46.234]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:46.234]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:46.234]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:46.234]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:46.234]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:46.234]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:46.234]             base::names(...future.oldOptions))
[11:01:46.234]     }
[11:01:46.234]     if (FALSE) {
[11:01:46.234]     }
[11:01:46.234]     else {
[11:01:46.234]         if (TRUE) {
[11:01:46.234]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:46.234]                 open = "w")
[11:01:46.234]         }
[11:01:46.234]         else {
[11:01:46.234]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:46.234]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:46.234]         }
[11:01:46.234]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:46.234]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:46.234]             base::sink(type = "output", split = FALSE)
[11:01:46.234]             base::close(...future.stdout)
[11:01:46.234]         }, add = TRUE)
[11:01:46.234]     }
[11:01:46.234]     ...future.frame <- base::sys.nframe()
[11:01:46.234]     ...future.conditions <- base::list()
[11:01:46.234]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:46.234]     if (FALSE) {
[11:01:46.234]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:46.234]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:46.234]     }
[11:01:46.234]     ...future.result <- base::tryCatch({
[11:01:46.234]         base::withCallingHandlers({
[11:01:46.234]             ...future.value <- base::withVisible(base::local({
[11:01:46.234]                 withCallingHandlers({
[11:01:46.234]                   {
[11:01:46.234]                     my_fcn(3)
[11:01:46.234]                   }
[11:01:46.234]                 }, immediateCondition = function(cond) {
[11:01:46.234]                   save_rds <- function (object, pathname, ...) 
[11:01:46.234]                   {
[11:01:46.234]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:01:46.234]                     if (file_test("-f", pathname_tmp)) {
[11:01:46.234]                       fi_tmp <- file.info(pathname_tmp)
[11:01:46.234]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:01:46.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:46.234]                         fi_tmp[["mtime"]])
[11:01:46.234]                     }
[11:01:46.234]                     tryCatch({
[11:01:46.234]                       saveRDS(object, file = pathname_tmp, ...)
[11:01:46.234]                     }, error = function(ex) {
[11:01:46.234]                       msg <- conditionMessage(ex)
[11:01:46.234]                       fi_tmp <- file.info(pathname_tmp)
[11:01:46.234]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:01:46.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:46.234]                         fi_tmp[["mtime"]], msg)
[11:01:46.234]                       ex$message <- msg
[11:01:46.234]                       stop(ex)
[11:01:46.234]                     })
[11:01:46.234]                     stopifnot(file_test("-f", pathname_tmp))
[11:01:46.234]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:01:46.234]                     if (!res || file_test("-f", pathname_tmp)) {
[11:01:46.234]                       fi_tmp <- file.info(pathname_tmp)
[11:01:46.234]                       fi <- file.info(pathname)
[11:01:46.234]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:01:46.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:01:46.234]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:01:46.234]                         fi[["size"]], fi[["mtime"]])
[11:01:46.234]                       stop(msg)
[11:01:46.234]                     }
[11:01:46.234]                     invisible(pathname)
[11:01:46.234]                   }
[11:01:46.234]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:01:46.234]                     rootPath = tempdir()) 
[11:01:46.234]                   {
[11:01:46.234]                     obj <- list(time = Sys.time(), condition = cond)
[11:01:46.234]                     file <- tempfile(pattern = class(cond)[1], 
[11:01:46.234]                       tmpdir = path, fileext = ".rds")
[11:01:46.234]                     save_rds(obj, file)
[11:01:46.234]                   }
[11:01:46.234]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4jLw2e/.future/immediateConditions")
[11:01:46.234]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.234]                   {
[11:01:46.234]                     inherits <- base::inherits
[11:01:46.234]                     invokeRestart <- base::invokeRestart
[11:01:46.234]                     is.null <- base::is.null
[11:01:46.234]                     muffled <- FALSE
[11:01:46.234]                     if (inherits(cond, "message")) {
[11:01:46.234]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:46.234]                       if (muffled) 
[11:01:46.234]                         invokeRestart("muffleMessage")
[11:01:46.234]                     }
[11:01:46.234]                     else if (inherits(cond, "warning")) {
[11:01:46.234]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:46.234]                       if (muffled) 
[11:01:46.234]                         invokeRestart("muffleWarning")
[11:01:46.234]                     }
[11:01:46.234]                     else if (inherits(cond, "condition")) {
[11:01:46.234]                       if (!is.null(pattern)) {
[11:01:46.234]                         computeRestarts <- base::computeRestarts
[11:01:46.234]                         grepl <- base::grepl
[11:01:46.234]                         restarts <- computeRestarts(cond)
[11:01:46.234]                         for (restart in restarts) {
[11:01:46.234]                           name <- restart$name
[11:01:46.234]                           if (is.null(name)) 
[11:01:46.234]                             next
[11:01:46.234]                           if (!grepl(pattern, name)) 
[11:01:46.234]                             next
[11:01:46.234]                           invokeRestart(restart)
[11:01:46.234]                           muffled <- TRUE
[11:01:46.234]                           break
[11:01:46.234]                         }
[11:01:46.234]                       }
[11:01:46.234]                     }
[11:01:46.234]                     invisible(muffled)
[11:01:46.234]                   }
[11:01:46.234]                   muffleCondition(cond)
[11:01:46.234]                 })
[11:01:46.234]             }))
[11:01:46.234]             future::FutureResult(value = ...future.value$value, 
[11:01:46.234]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.234]                   ...future.rng), globalenv = if (FALSE) 
[11:01:46.234]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:46.234]                     ...future.globalenv.names))
[11:01:46.234]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:46.234]         }, condition = base::local({
[11:01:46.234]             c <- base::c
[11:01:46.234]             inherits <- base::inherits
[11:01:46.234]             invokeRestart <- base::invokeRestart
[11:01:46.234]             length <- base::length
[11:01:46.234]             list <- base::list
[11:01:46.234]             seq.int <- base::seq.int
[11:01:46.234]             signalCondition <- base::signalCondition
[11:01:46.234]             sys.calls <- base::sys.calls
[11:01:46.234]             `[[` <- base::`[[`
[11:01:46.234]             `+` <- base::`+`
[11:01:46.234]             `<<-` <- base::`<<-`
[11:01:46.234]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:46.234]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:46.234]                   3L)]
[11:01:46.234]             }
[11:01:46.234]             function(cond) {
[11:01:46.234]                 is_error <- inherits(cond, "error")
[11:01:46.234]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:46.234]                   NULL)
[11:01:46.234]                 if (is_error) {
[11:01:46.234]                   sessionInformation <- function() {
[11:01:46.234]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:46.234]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:46.234]                       search = base::search(), system = base::Sys.info())
[11:01:46.234]                   }
[11:01:46.234]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.234]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:46.234]                     cond$call), session = sessionInformation(), 
[11:01:46.234]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:46.234]                   signalCondition(cond)
[11:01:46.234]                 }
[11:01:46.234]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:46.234]                 "immediateCondition"))) {
[11:01:46.234]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:46.234]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.234]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:46.234]                   if (TRUE && !signal) {
[11:01:46.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.234]                     {
[11:01:46.234]                       inherits <- base::inherits
[11:01:46.234]                       invokeRestart <- base::invokeRestart
[11:01:46.234]                       is.null <- base::is.null
[11:01:46.234]                       muffled <- FALSE
[11:01:46.234]                       if (inherits(cond, "message")) {
[11:01:46.234]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.234]                         if (muffled) 
[11:01:46.234]                           invokeRestart("muffleMessage")
[11:01:46.234]                       }
[11:01:46.234]                       else if (inherits(cond, "warning")) {
[11:01:46.234]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.234]                         if (muffled) 
[11:01:46.234]                           invokeRestart("muffleWarning")
[11:01:46.234]                       }
[11:01:46.234]                       else if (inherits(cond, "condition")) {
[11:01:46.234]                         if (!is.null(pattern)) {
[11:01:46.234]                           computeRestarts <- base::computeRestarts
[11:01:46.234]                           grepl <- base::grepl
[11:01:46.234]                           restarts <- computeRestarts(cond)
[11:01:46.234]                           for (restart in restarts) {
[11:01:46.234]                             name <- restart$name
[11:01:46.234]                             if (is.null(name)) 
[11:01:46.234]                               next
[11:01:46.234]                             if (!grepl(pattern, name)) 
[11:01:46.234]                               next
[11:01:46.234]                             invokeRestart(restart)
[11:01:46.234]                             muffled <- TRUE
[11:01:46.234]                             break
[11:01:46.234]                           }
[11:01:46.234]                         }
[11:01:46.234]                       }
[11:01:46.234]                       invisible(muffled)
[11:01:46.234]                     }
[11:01:46.234]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.234]                   }
[11:01:46.234]                 }
[11:01:46.234]                 else {
[11:01:46.234]                   if (TRUE) {
[11:01:46.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.234]                     {
[11:01:46.234]                       inherits <- base::inherits
[11:01:46.234]                       invokeRestart <- base::invokeRestart
[11:01:46.234]                       is.null <- base::is.null
[11:01:46.234]                       muffled <- FALSE
[11:01:46.234]                       if (inherits(cond, "message")) {
[11:01:46.234]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.234]                         if (muffled) 
[11:01:46.234]                           invokeRestart("muffleMessage")
[11:01:46.234]                       }
[11:01:46.234]                       else if (inherits(cond, "warning")) {
[11:01:46.234]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.234]                         if (muffled) 
[11:01:46.234]                           invokeRestart("muffleWarning")
[11:01:46.234]                       }
[11:01:46.234]                       else if (inherits(cond, "condition")) {
[11:01:46.234]                         if (!is.null(pattern)) {
[11:01:46.234]                           computeRestarts <- base::computeRestarts
[11:01:46.234]                           grepl <- base::grepl
[11:01:46.234]                           restarts <- computeRestarts(cond)
[11:01:46.234]                           for (restart in restarts) {
[11:01:46.234]                             name <- restart$name
[11:01:46.234]                             if (is.null(name)) 
[11:01:46.234]                               next
[11:01:46.234]                             if (!grepl(pattern, name)) 
[11:01:46.234]                               next
[11:01:46.234]                             invokeRestart(restart)
[11:01:46.234]                             muffled <- TRUE
[11:01:46.234]                             break
[11:01:46.234]                           }
[11:01:46.234]                         }
[11:01:46.234]                       }
[11:01:46.234]                       invisible(muffled)
[11:01:46.234]                     }
[11:01:46.234]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.234]                   }
[11:01:46.234]                 }
[11:01:46.234]             }
[11:01:46.234]         }))
[11:01:46.234]     }, error = function(ex) {
[11:01:46.234]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:46.234]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.234]                 ...future.rng), started = ...future.startTime, 
[11:01:46.234]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:46.234]             version = "1.8"), class = "FutureResult")
[11:01:46.234]     }, finally = {
[11:01:46.234]         if (!identical(...future.workdir, getwd())) 
[11:01:46.234]             setwd(...future.workdir)
[11:01:46.234]         {
[11:01:46.234]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:46.234]                 ...future.oldOptions$nwarnings <- NULL
[11:01:46.234]             }
[11:01:46.234]             base::options(...future.oldOptions)
[11:01:46.234]             if (.Platform$OS.type == "windows") {
[11:01:46.234]                 old_names <- names(...future.oldEnvVars)
[11:01:46.234]                 envs <- base::Sys.getenv()
[11:01:46.234]                 names <- names(envs)
[11:01:46.234]                 common <- intersect(names, old_names)
[11:01:46.234]                 added <- setdiff(names, old_names)
[11:01:46.234]                 removed <- setdiff(old_names, names)
[11:01:46.234]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:46.234]                   envs[common]]
[11:01:46.234]                 NAMES <- toupper(changed)
[11:01:46.234]                 args <- list()
[11:01:46.234]                 for (kk in seq_along(NAMES)) {
[11:01:46.234]                   name <- changed[[kk]]
[11:01:46.234]                   NAME <- NAMES[[kk]]
[11:01:46.234]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.234]                     next
[11:01:46.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.234]                 }
[11:01:46.234]                 NAMES <- toupper(added)
[11:01:46.234]                 for (kk in seq_along(NAMES)) {
[11:01:46.234]                   name <- added[[kk]]
[11:01:46.234]                   NAME <- NAMES[[kk]]
[11:01:46.234]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.234]                     next
[11:01:46.234]                   args[[name]] <- ""
[11:01:46.234]                 }
[11:01:46.234]                 NAMES <- toupper(removed)
[11:01:46.234]                 for (kk in seq_along(NAMES)) {
[11:01:46.234]                   name <- removed[[kk]]
[11:01:46.234]                   NAME <- NAMES[[kk]]
[11:01:46.234]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.234]                     next
[11:01:46.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.234]                 }
[11:01:46.234]                 if (length(args) > 0) 
[11:01:46.234]                   base::do.call(base::Sys.setenv, args = args)
[11:01:46.234]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:46.234]             }
[11:01:46.234]             else {
[11:01:46.234]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:46.234]             }
[11:01:46.234]             {
[11:01:46.234]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:46.234]                   0L) {
[11:01:46.234]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:46.234]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:46.234]                   base::options(opts)
[11:01:46.234]                 }
[11:01:46.234]                 {
[11:01:46.234]                   {
[11:01:46.234]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:46.234]                     NULL
[11:01:46.234]                   }
[11:01:46.234]                   options(future.plan = NULL)
[11:01:46.234]                   if (is.na(NA_character_)) 
[11:01:46.234]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.234]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:46.234]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:46.234]                     .init = FALSE)
[11:01:46.234]                 }
[11:01:46.234]             }
[11:01:46.234]         }
[11:01:46.234]     })
[11:01:46.234]     if (TRUE) {
[11:01:46.234]         base::sink(type = "output", split = FALSE)
[11:01:46.234]         if (TRUE) {
[11:01:46.234]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:46.234]         }
[11:01:46.234]         else {
[11:01:46.234]             ...future.result["stdout"] <- base::list(NULL)
[11:01:46.234]         }
[11:01:46.234]         base::close(...future.stdout)
[11:01:46.234]         ...future.stdout <- NULL
[11:01:46.234]     }
[11:01:46.234]     ...future.result$conditions <- ...future.conditions
[11:01:46.234]     ...future.result$finished <- base::Sys.time()
[11:01:46.234]     ...future.result
[11:01:46.234] }
[11:01:46.236] assign_globals() ...
[11:01:46.236] List of 1
[11:01:46.236]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[11:01:46.236]   .. ..@ .Data     :function (x)  
[11:01:46.236]   .. ..@ generic   : chr "my_fcn"
[11:01:46.236]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[11:01:46.236]   .. ..@ package   : chr ".GlobalEnv"
[11:01:46.236]   .. ..@ group     : list()
[11:01:46.236]   .. ..@ valueClass: chr(0) 
[11:01:46.236]   .. ..@ signature : chr "x"
[11:01:46.236]   .. ..@ default   : NULL
[11:01:46.236]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[11:01:46.236]  - attr(*, "where")=List of 1
[11:01:46.236]   ..$ my_fcn:<environment: R_EmptyEnv> 
[11:01:46.236]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:46.236]  - attr(*, "resolved")= logi FALSE
[11:01:46.236]  - attr(*, "total_size")= num 2591
[11:01:46.236]  - attr(*, "already-done")= logi TRUE
[11:01:46.242] - reassign environment for ‘my_fcn’
[11:01:46.242] - copied ‘my_fcn’ to environment
[11:01:46.242] assign_globals() ... done
[11:01:46.242] requestCore(): workers = 2
[11:01:46.244] MulticoreFuture started
[11:01:46.244] - Launch lazy future ... done
[11:01:46.244] run() for ‘MulticoreFuture’ ... done
[11:01:46.244] plan(): Setting new future strategy stack:
[11:01:46.245] result() for MulticoreFuture ...
[11:01:46.245] List of future strategies:
[11:01:46.245] 1. sequential:
[11:01:46.245]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.245]    - tweaked: FALSE
[11:01:46.245]    - call: NULL
[11:01:46.246] plan(): nbrOfWorkers() = 1
[11:01:46.248] plan(): Setting new future strategy stack:
[11:01:46.248] List of future strategies:
[11:01:46.248] 1. multicore:
[11:01:46.248]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:01:46.248]    - tweaked: FALSE
[11:01:46.248]    - call: plan(strategy)
[11:01:46.251] plan(): nbrOfWorkers() = 2
[11:01:46.264] result() for MulticoreFuture ...
[11:01:46.264] result() for MulticoreFuture ... done
[11:01:46.264] signalConditions() ...
[11:01:46.264]  - include = ‘immediateCondition’
[11:01:46.264]  - exclude = 
[11:01:46.264]  - resignal = FALSE
[11:01:46.264]  - Number of conditions: 1
[11:01:46.264] signalConditions() ... done
[11:01:46.265] result() for MulticoreFuture ... done
[11:01:46.265] result() for MulticoreFuture ...
[11:01:46.267] result() for MulticoreFuture ... done
[11:01:46.267] signalConditions() ...
[11:01:46.267]  - include = ‘immediateCondition’
[11:01:46.267]  - exclude = 
[11:01:46.268]  - resignal = FALSE
[11:01:46.268]  - Number of conditions: 1
[11:01:46.268] signalConditions() ... done
[11:01:46.268] Future state: ‘finished’
[11:01:46.268] result() for MulticoreFuture ...
[11:01:46.268] result() for MulticoreFuture ... done
[11:01:46.269] signalConditions() ...
[11:01:46.269]  - include = ‘condition’
[11:01:46.269]  - exclude = ‘immediateCondition’
[11:01:46.269]  - resignal = TRUE
[11:01:46.269]  - Number of conditions: 1
[11:01:46.269]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:01:46.269] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multisession
[11:01:46.270] plan(): Setting new future strategy stack:
[11:01:46.270] List of future strategies:
[11:01:46.270] 1. multisession:
[11:01:46.270]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:46.270]    - tweaked: FALSE
[11:01:46.270]    - call: plan(strategy)
[11:01:46.271] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:01:46.271] multisession:
[11:01:46.271] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:46.271] - tweaked: FALSE
[11:01:46.271] - call: plan(strategy)
[11:01:46.275] getGlobalsAndPackages() ...
[11:01:46.275] Not searching for globals
[11:01:46.275] - globals: [0] <none>
[11:01:46.275] getGlobalsAndPackages() ... DONE
[11:01:46.749] Packages needed by the future expression (n = 0): <none>
[11:01:46.750] Packages needed by future strategies (n = 0): <none>
[11:01:46.750] {
[11:01:46.750]     {
[11:01:46.750]         {
[11:01:46.750]             ...future.startTime <- base::Sys.time()
[11:01:46.750]             {
[11:01:46.750]                 {
[11:01:46.750]                   {
[11:01:46.750]                     {
[11:01:46.750]                       base::local({
[11:01:46.750]                         has_future <- base::requireNamespace("future", 
[11:01:46.750]                           quietly = TRUE)
[11:01:46.750]                         if (has_future) {
[11:01:46.750]                           ns <- base::getNamespace("future")
[11:01:46.750]                           version <- ns[[".package"]][["version"]]
[11:01:46.750]                           if (is.null(version)) 
[11:01:46.750]                             version <- utils::packageVersion("future")
[11:01:46.750]                         }
[11:01:46.750]                         else {
[11:01:46.750]                           version <- NULL
[11:01:46.750]                         }
[11:01:46.750]                         if (!has_future || version < "1.8.0") {
[11:01:46.750]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:46.750]                             "", base::R.version$version.string), 
[11:01:46.750]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:46.750]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:46.750]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:46.750]                               "release", "version")], collapse = " "), 
[11:01:46.750]                             hostname = base::Sys.info()[["nodename"]])
[11:01:46.750]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:46.750]                             info)
[11:01:46.750]                           info <- base::paste(info, collapse = "; ")
[11:01:46.750]                           if (!has_future) {
[11:01:46.750]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:46.750]                               info)
[11:01:46.750]                           }
[11:01:46.750]                           else {
[11:01:46.750]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:46.750]                               info, version)
[11:01:46.750]                           }
[11:01:46.750]                           base::stop(msg)
[11:01:46.750]                         }
[11:01:46.750]                       })
[11:01:46.750]                     }
[11:01:46.750]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:46.750]                     base::options(mc.cores = 1L)
[11:01:46.750]                   }
[11:01:46.750]                   ...future.strategy.old <- future::plan("list")
[11:01:46.750]                   options(future.plan = NULL)
[11:01:46.750]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.750]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:46.750]                 }
[11:01:46.750]                 ...future.workdir <- getwd()
[11:01:46.750]             }
[11:01:46.750]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:46.750]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:46.750]         }
[11:01:46.750]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:46.750]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:46.750]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:46.750]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:46.750]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:46.750]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:46.750]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:46.750]             base::names(...future.oldOptions))
[11:01:46.750]     }
[11:01:46.750]     if (FALSE) {
[11:01:46.750]     }
[11:01:46.750]     else {
[11:01:46.750]         if (TRUE) {
[11:01:46.750]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:46.750]                 open = "w")
[11:01:46.750]         }
[11:01:46.750]         else {
[11:01:46.750]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:46.750]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:46.750]         }
[11:01:46.750]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:46.750]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:46.750]             base::sink(type = "output", split = FALSE)
[11:01:46.750]             base::close(...future.stdout)
[11:01:46.750]         }, add = TRUE)
[11:01:46.750]     }
[11:01:46.750]     ...future.frame <- base::sys.nframe()
[11:01:46.750]     ...future.conditions <- base::list()
[11:01:46.750]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:46.750]     if (FALSE) {
[11:01:46.750]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:46.750]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:46.750]     }
[11:01:46.750]     ...future.result <- base::tryCatch({
[11:01:46.750]         base::withCallingHandlers({
[11:01:46.750]             ...future.value <- base::withVisible(base::local({
[11:01:46.750]                 ...future.makeSendCondition <- base::local({
[11:01:46.750]                   sendCondition <- NULL
[11:01:46.750]                   function(frame = 1L) {
[11:01:46.750]                     if (is.function(sendCondition)) 
[11:01:46.750]                       return(sendCondition)
[11:01:46.750]                     ns <- getNamespace("parallel")
[11:01:46.750]                     if (exists("sendData", mode = "function", 
[11:01:46.750]                       envir = ns)) {
[11:01:46.750]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:46.750]                         envir = ns)
[11:01:46.750]                       envir <- sys.frame(frame)
[11:01:46.750]                       master <- NULL
[11:01:46.750]                       while (!identical(envir, .GlobalEnv) && 
[11:01:46.750]                         !identical(envir, emptyenv())) {
[11:01:46.750]                         if (exists("master", mode = "list", envir = envir, 
[11:01:46.750]                           inherits = FALSE)) {
[11:01:46.750]                           master <- get("master", mode = "list", 
[11:01:46.750]                             envir = envir, inherits = FALSE)
[11:01:46.750]                           if (inherits(master, c("SOCKnode", 
[11:01:46.750]                             "SOCK0node"))) {
[11:01:46.750]                             sendCondition <<- function(cond) {
[11:01:46.750]                               data <- list(type = "VALUE", value = cond, 
[11:01:46.750]                                 success = TRUE)
[11:01:46.750]                               parallel_sendData(master, data)
[11:01:46.750]                             }
[11:01:46.750]                             return(sendCondition)
[11:01:46.750]                           }
[11:01:46.750]                         }
[11:01:46.750]                         frame <- frame + 1L
[11:01:46.750]                         envir <- sys.frame(frame)
[11:01:46.750]                       }
[11:01:46.750]                     }
[11:01:46.750]                     sendCondition <<- function(cond) NULL
[11:01:46.750]                   }
[11:01:46.750]                 })
[11:01:46.750]                 withCallingHandlers({
[11:01:46.750]                   NA
[11:01:46.750]                 }, immediateCondition = function(cond) {
[11:01:46.750]                   sendCondition <- ...future.makeSendCondition()
[11:01:46.750]                   sendCondition(cond)
[11:01:46.750]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.750]                   {
[11:01:46.750]                     inherits <- base::inherits
[11:01:46.750]                     invokeRestart <- base::invokeRestart
[11:01:46.750]                     is.null <- base::is.null
[11:01:46.750]                     muffled <- FALSE
[11:01:46.750]                     if (inherits(cond, "message")) {
[11:01:46.750]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:46.750]                       if (muffled) 
[11:01:46.750]                         invokeRestart("muffleMessage")
[11:01:46.750]                     }
[11:01:46.750]                     else if (inherits(cond, "warning")) {
[11:01:46.750]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:46.750]                       if (muffled) 
[11:01:46.750]                         invokeRestart("muffleWarning")
[11:01:46.750]                     }
[11:01:46.750]                     else if (inherits(cond, "condition")) {
[11:01:46.750]                       if (!is.null(pattern)) {
[11:01:46.750]                         computeRestarts <- base::computeRestarts
[11:01:46.750]                         grepl <- base::grepl
[11:01:46.750]                         restarts <- computeRestarts(cond)
[11:01:46.750]                         for (restart in restarts) {
[11:01:46.750]                           name <- restart$name
[11:01:46.750]                           if (is.null(name)) 
[11:01:46.750]                             next
[11:01:46.750]                           if (!grepl(pattern, name)) 
[11:01:46.750]                             next
[11:01:46.750]                           invokeRestart(restart)
[11:01:46.750]                           muffled <- TRUE
[11:01:46.750]                           break
[11:01:46.750]                         }
[11:01:46.750]                       }
[11:01:46.750]                     }
[11:01:46.750]                     invisible(muffled)
[11:01:46.750]                   }
[11:01:46.750]                   muffleCondition(cond)
[11:01:46.750]                 })
[11:01:46.750]             }))
[11:01:46.750]             future::FutureResult(value = ...future.value$value, 
[11:01:46.750]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.750]                   ...future.rng), globalenv = if (FALSE) 
[11:01:46.750]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:46.750]                     ...future.globalenv.names))
[11:01:46.750]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:46.750]         }, condition = base::local({
[11:01:46.750]             c <- base::c
[11:01:46.750]             inherits <- base::inherits
[11:01:46.750]             invokeRestart <- base::invokeRestart
[11:01:46.750]             length <- base::length
[11:01:46.750]             list <- base::list
[11:01:46.750]             seq.int <- base::seq.int
[11:01:46.750]             signalCondition <- base::signalCondition
[11:01:46.750]             sys.calls <- base::sys.calls
[11:01:46.750]             `[[` <- base::`[[`
[11:01:46.750]             `+` <- base::`+`
[11:01:46.750]             `<<-` <- base::`<<-`
[11:01:46.750]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:46.750]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:46.750]                   3L)]
[11:01:46.750]             }
[11:01:46.750]             function(cond) {
[11:01:46.750]                 is_error <- inherits(cond, "error")
[11:01:46.750]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:46.750]                   NULL)
[11:01:46.750]                 if (is_error) {
[11:01:46.750]                   sessionInformation <- function() {
[11:01:46.750]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:46.750]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:46.750]                       search = base::search(), system = base::Sys.info())
[11:01:46.750]                   }
[11:01:46.750]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.750]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:46.750]                     cond$call), session = sessionInformation(), 
[11:01:46.750]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:46.750]                   signalCondition(cond)
[11:01:46.750]                 }
[11:01:46.750]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:46.750]                 "immediateCondition"))) {
[11:01:46.750]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:46.750]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.750]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:46.750]                   if (TRUE && !signal) {
[11:01:46.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.750]                     {
[11:01:46.750]                       inherits <- base::inherits
[11:01:46.750]                       invokeRestart <- base::invokeRestart
[11:01:46.750]                       is.null <- base::is.null
[11:01:46.750]                       muffled <- FALSE
[11:01:46.750]                       if (inherits(cond, "message")) {
[11:01:46.750]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.750]                         if (muffled) 
[11:01:46.750]                           invokeRestart("muffleMessage")
[11:01:46.750]                       }
[11:01:46.750]                       else if (inherits(cond, "warning")) {
[11:01:46.750]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.750]                         if (muffled) 
[11:01:46.750]                           invokeRestart("muffleWarning")
[11:01:46.750]                       }
[11:01:46.750]                       else if (inherits(cond, "condition")) {
[11:01:46.750]                         if (!is.null(pattern)) {
[11:01:46.750]                           computeRestarts <- base::computeRestarts
[11:01:46.750]                           grepl <- base::grepl
[11:01:46.750]                           restarts <- computeRestarts(cond)
[11:01:46.750]                           for (restart in restarts) {
[11:01:46.750]                             name <- restart$name
[11:01:46.750]                             if (is.null(name)) 
[11:01:46.750]                               next
[11:01:46.750]                             if (!grepl(pattern, name)) 
[11:01:46.750]                               next
[11:01:46.750]                             invokeRestart(restart)
[11:01:46.750]                             muffled <- TRUE
[11:01:46.750]                             break
[11:01:46.750]                           }
[11:01:46.750]                         }
[11:01:46.750]                       }
[11:01:46.750]                       invisible(muffled)
[11:01:46.750]                     }
[11:01:46.750]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.750]                   }
[11:01:46.750]                 }
[11:01:46.750]                 else {
[11:01:46.750]                   if (TRUE) {
[11:01:46.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.750]                     {
[11:01:46.750]                       inherits <- base::inherits
[11:01:46.750]                       invokeRestart <- base::invokeRestart
[11:01:46.750]                       is.null <- base::is.null
[11:01:46.750]                       muffled <- FALSE
[11:01:46.750]                       if (inherits(cond, "message")) {
[11:01:46.750]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.750]                         if (muffled) 
[11:01:46.750]                           invokeRestart("muffleMessage")
[11:01:46.750]                       }
[11:01:46.750]                       else if (inherits(cond, "warning")) {
[11:01:46.750]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.750]                         if (muffled) 
[11:01:46.750]                           invokeRestart("muffleWarning")
[11:01:46.750]                       }
[11:01:46.750]                       else if (inherits(cond, "condition")) {
[11:01:46.750]                         if (!is.null(pattern)) {
[11:01:46.750]                           computeRestarts <- base::computeRestarts
[11:01:46.750]                           grepl <- base::grepl
[11:01:46.750]                           restarts <- computeRestarts(cond)
[11:01:46.750]                           for (restart in restarts) {
[11:01:46.750]                             name <- restart$name
[11:01:46.750]                             if (is.null(name)) 
[11:01:46.750]                               next
[11:01:46.750]                             if (!grepl(pattern, name)) 
[11:01:46.750]                               next
[11:01:46.750]                             invokeRestart(restart)
[11:01:46.750]                             muffled <- TRUE
[11:01:46.750]                             break
[11:01:46.750]                           }
[11:01:46.750]                         }
[11:01:46.750]                       }
[11:01:46.750]                       invisible(muffled)
[11:01:46.750]                     }
[11:01:46.750]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.750]                   }
[11:01:46.750]                 }
[11:01:46.750]             }
[11:01:46.750]         }))
[11:01:46.750]     }, error = function(ex) {
[11:01:46.750]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:46.750]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.750]                 ...future.rng), started = ...future.startTime, 
[11:01:46.750]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:46.750]             version = "1.8"), class = "FutureResult")
[11:01:46.750]     }, finally = {
[11:01:46.750]         if (!identical(...future.workdir, getwd())) 
[11:01:46.750]             setwd(...future.workdir)
[11:01:46.750]         {
[11:01:46.750]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:46.750]                 ...future.oldOptions$nwarnings <- NULL
[11:01:46.750]             }
[11:01:46.750]             base::options(...future.oldOptions)
[11:01:46.750]             if (.Platform$OS.type == "windows") {
[11:01:46.750]                 old_names <- names(...future.oldEnvVars)
[11:01:46.750]                 envs <- base::Sys.getenv()
[11:01:46.750]                 names <- names(envs)
[11:01:46.750]                 common <- intersect(names, old_names)
[11:01:46.750]                 added <- setdiff(names, old_names)
[11:01:46.750]                 removed <- setdiff(old_names, names)
[11:01:46.750]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:46.750]                   envs[common]]
[11:01:46.750]                 NAMES <- toupper(changed)
[11:01:46.750]                 args <- list()
[11:01:46.750]                 for (kk in seq_along(NAMES)) {
[11:01:46.750]                   name <- changed[[kk]]
[11:01:46.750]                   NAME <- NAMES[[kk]]
[11:01:46.750]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.750]                     next
[11:01:46.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.750]                 }
[11:01:46.750]                 NAMES <- toupper(added)
[11:01:46.750]                 for (kk in seq_along(NAMES)) {
[11:01:46.750]                   name <- added[[kk]]
[11:01:46.750]                   NAME <- NAMES[[kk]]
[11:01:46.750]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.750]                     next
[11:01:46.750]                   args[[name]] <- ""
[11:01:46.750]                 }
[11:01:46.750]                 NAMES <- toupper(removed)
[11:01:46.750]                 for (kk in seq_along(NAMES)) {
[11:01:46.750]                   name <- removed[[kk]]
[11:01:46.750]                   NAME <- NAMES[[kk]]
[11:01:46.750]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.750]                     next
[11:01:46.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.750]                 }
[11:01:46.750]                 if (length(args) > 0) 
[11:01:46.750]                   base::do.call(base::Sys.setenv, args = args)
[11:01:46.750]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:46.750]             }
[11:01:46.750]             else {
[11:01:46.750]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:46.750]             }
[11:01:46.750]             {
[11:01:46.750]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:46.750]                   0L) {
[11:01:46.750]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:46.750]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:46.750]                   base::options(opts)
[11:01:46.750]                 }
[11:01:46.750]                 {
[11:01:46.750]                   {
[11:01:46.750]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:46.750]                     NULL
[11:01:46.750]                   }
[11:01:46.750]                   options(future.plan = NULL)
[11:01:46.750]                   if (is.na(NA_character_)) 
[11:01:46.750]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.750]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:46.750]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:46.750]                     .init = FALSE)
[11:01:46.750]                 }
[11:01:46.750]             }
[11:01:46.750]         }
[11:01:46.750]     })
[11:01:46.750]     if (TRUE) {
[11:01:46.750]         base::sink(type = "output", split = FALSE)
[11:01:46.750]         if (TRUE) {
[11:01:46.750]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:46.750]         }
[11:01:46.750]         else {
[11:01:46.750]             ...future.result["stdout"] <- base::list(NULL)
[11:01:46.750]         }
[11:01:46.750]         base::close(...future.stdout)
[11:01:46.750]         ...future.stdout <- NULL
[11:01:46.750]     }
[11:01:46.750]     ...future.result$conditions <- ...future.conditions
[11:01:46.750]     ...future.result$finished <- base::Sys.time()
[11:01:46.750]     ...future.result
[11:01:46.750] }
[11:01:46.801] MultisessionFuture started
[11:01:46.801] result() for ClusterFuture ...
[11:01:46.802] receiveMessageFromWorker() for ClusterFuture ...
[11:01:46.802] - Validating connection of MultisessionFuture
[11:01:46.832] - received message: FutureResult
[11:01:46.832] - Received FutureResult
[11:01:46.832] - Erased future from FutureRegistry
[11:01:46.832] result() for ClusterFuture ...
[11:01:46.832] - result already collected: FutureResult
[11:01:46.832] result() for ClusterFuture ... done
[11:01:46.832] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:46.833] result() for ClusterFuture ... done
[11:01:46.833] result() for ClusterFuture ...
[11:01:46.833] - result already collected: FutureResult
[11:01:46.833] result() for ClusterFuture ... done
[11:01:46.833] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:01:46.834] plan(): nbrOfWorkers() = 2
[11:01:46.835] getGlobalsAndPackages() ...
[11:01:46.835] Searching for globals...
[11:01:46.837] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[11:01:46.837] Searching for globals ... DONE
[11:01:46.837] Resolving globals: FALSE
[11:01:46.838] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[11:01:46.838] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[11:01:46.838] - globals: [1] ‘my_fcn’
[11:01:46.838] 
[11:01:46.838] getGlobalsAndPackages() ... DONE
[11:01:46.838] run() for ‘Future’ ...
[11:01:46.839] - state: ‘created’
[11:01:46.839] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:46.853] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:46.853] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:46.853]   - Field: ‘node’
[11:01:46.853]   - Field: ‘label’
[11:01:46.853]   - Field: ‘local’
[11:01:46.854]   - Field: ‘owner’
[11:01:46.854]   - Field: ‘envir’
[11:01:46.854]   - Field: ‘workers’
[11:01:46.854]   - Field: ‘packages’
[11:01:46.854]   - Field: ‘gc’
[11:01:46.854]   - Field: ‘conditions’
[11:01:46.854]   - Field: ‘persistent’
[11:01:46.854]   - Field: ‘expr’
[11:01:46.854]   - Field: ‘uuid’
[11:01:46.854]   - Field: ‘seed’
[11:01:46.854]   - Field: ‘version’
[11:01:46.854]   - Field: ‘result’
[11:01:46.855]   - Field: ‘asynchronous’
[11:01:46.855]   - Field: ‘calls’
[11:01:46.855]   - Field: ‘globals’
[11:01:46.855]   - Field: ‘stdout’
[11:01:46.855]   - Field: ‘earlySignal’
[11:01:46.855]   - Field: ‘lazy’
[11:01:46.855]   - Field: ‘state’
[11:01:46.855] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:46.855] - Launch lazy future ...
[11:01:46.855] Packages needed by the future expression (n = 0): <none>
[11:01:46.856] Packages needed by future strategies (n = 0): <none>
[11:01:46.856] {
[11:01:46.856]     {
[11:01:46.856]         {
[11:01:46.856]             ...future.startTime <- base::Sys.time()
[11:01:46.856]             {
[11:01:46.856]                 {
[11:01:46.856]                   {
[11:01:46.856]                     {
[11:01:46.856]                       base::local({
[11:01:46.856]                         has_future <- base::requireNamespace("future", 
[11:01:46.856]                           quietly = TRUE)
[11:01:46.856]                         if (has_future) {
[11:01:46.856]                           ns <- base::getNamespace("future")
[11:01:46.856]                           version <- ns[[".package"]][["version"]]
[11:01:46.856]                           if (is.null(version)) 
[11:01:46.856]                             version <- utils::packageVersion("future")
[11:01:46.856]                         }
[11:01:46.856]                         else {
[11:01:46.856]                           version <- NULL
[11:01:46.856]                         }
[11:01:46.856]                         if (!has_future || version < "1.8.0") {
[11:01:46.856]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:46.856]                             "", base::R.version$version.string), 
[11:01:46.856]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:46.856]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:46.856]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:46.856]                               "release", "version")], collapse = " "), 
[11:01:46.856]                             hostname = base::Sys.info()[["nodename"]])
[11:01:46.856]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:46.856]                             info)
[11:01:46.856]                           info <- base::paste(info, collapse = "; ")
[11:01:46.856]                           if (!has_future) {
[11:01:46.856]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:46.856]                               info)
[11:01:46.856]                           }
[11:01:46.856]                           else {
[11:01:46.856]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:46.856]                               info, version)
[11:01:46.856]                           }
[11:01:46.856]                           base::stop(msg)
[11:01:46.856]                         }
[11:01:46.856]                       })
[11:01:46.856]                     }
[11:01:46.856]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:46.856]                     base::options(mc.cores = 1L)
[11:01:46.856]                   }
[11:01:46.856]                   ...future.strategy.old <- future::plan("list")
[11:01:46.856]                   options(future.plan = NULL)
[11:01:46.856]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.856]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:46.856]                 }
[11:01:46.856]                 ...future.workdir <- getwd()
[11:01:46.856]             }
[11:01:46.856]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:46.856]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:46.856]         }
[11:01:46.856]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:46.856]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:46.856]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:46.856]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:46.856]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:46.856]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:46.856]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:46.856]             base::names(...future.oldOptions))
[11:01:46.856]     }
[11:01:46.856]     if (FALSE) {
[11:01:46.856]     }
[11:01:46.856]     else {
[11:01:46.856]         if (TRUE) {
[11:01:46.856]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:46.856]                 open = "w")
[11:01:46.856]         }
[11:01:46.856]         else {
[11:01:46.856]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:46.856]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:46.856]         }
[11:01:46.856]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:46.856]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:46.856]             base::sink(type = "output", split = FALSE)
[11:01:46.856]             base::close(...future.stdout)
[11:01:46.856]         }, add = TRUE)
[11:01:46.856]     }
[11:01:46.856]     ...future.frame <- base::sys.nframe()
[11:01:46.856]     ...future.conditions <- base::list()
[11:01:46.856]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:46.856]     if (FALSE) {
[11:01:46.856]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:46.856]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:46.856]     }
[11:01:46.856]     ...future.result <- base::tryCatch({
[11:01:46.856]         base::withCallingHandlers({
[11:01:46.856]             ...future.value <- base::withVisible(base::local({
[11:01:46.856]                 ...future.makeSendCondition <- base::local({
[11:01:46.856]                   sendCondition <- NULL
[11:01:46.856]                   function(frame = 1L) {
[11:01:46.856]                     if (is.function(sendCondition)) 
[11:01:46.856]                       return(sendCondition)
[11:01:46.856]                     ns <- getNamespace("parallel")
[11:01:46.856]                     if (exists("sendData", mode = "function", 
[11:01:46.856]                       envir = ns)) {
[11:01:46.856]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:46.856]                         envir = ns)
[11:01:46.856]                       envir <- sys.frame(frame)
[11:01:46.856]                       master <- NULL
[11:01:46.856]                       while (!identical(envir, .GlobalEnv) && 
[11:01:46.856]                         !identical(envir, emptyenv())) {
[11:01:46.856]                         if (exists("master", mode = "list", envir = envir, 
[11:01:46.856]                           inherits = FALSE)) {
[11:01:46.856]                           master <- get("master", mode = "list", 
[11:01:46.856]                             envir = envir, inherits = FALSE)
[11:01:46.856]                           if (inherits(master, c("SOCKnode", 
[11:01:46.856]                             "SOCK0node"))) {
[11:01:46.856]                             sendCondition <<- function(cond) {
[11:01:46.856]                               data <- list(type = "VALUE", value = cond, 
[11:01:46.856]                                 success = TRUE)
[11:01:46.856]                               parallel_sendData(master, data)
[11:01:46.856]                             }
[11:01:46.856]                             return(sendCondition)
[11:01:46.856]                           }
[11:01:46.856]                         }
[11:01:46.856]                         frame <- frame + 1L
[11:01:46.856]                         envir <- sys.frame(frame)
[11:01:46.856]                       }
[11:01:46.856]                     }
[11:01:46.856]                     sendCondition <<- function(cond) NULL
[11:01:46.856]                   }
[11:01:46.856]                 })
[11:01:46.856]                 withCallingHandlers({
[11:01:46.856]                   {
[11:01:46.856]                     my_fcn
[11:01:46.856]                   }
[11:01:46.856]                 }, immediateCondition = function(cond) {
[11:01:46.856]                   sendCondition <- ...future.makeSendCondition()
[11:01:46.856]                   sendCondition(cond)
[11:01:46.856]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.856]                   {
[11:01:46.856]                     inherits <- base::inherits
[11:01:46.856]                     invokeRestart <- base::invokeRestart
[11:01:46.856]                     is.null <- base::is.null
[11:01:46.856]                     muffled <- FALSE
[11:01:46.856]                     if (inherits(cond, "message")) {
[11:01:46.856]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:46.856]                       if (muffled) 
[11:01:46.856]                         invokeRestart("muffleMessage")
[11:01:46.856]                     }
[11:01:46.856]                     else if (inherits(cond, "warning")) {
[11:01:46.856]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:46.856]                       if (muffled) 
[11:01:46.856]                         invokeRestart("muffleWarning")
[11:01:46.856]                     }
[11:01:46.856]                     else if (inherits(cond, "condition")) {
[11:01:46.856]                       if (!is.null(pattern)) {
[11:01:46.856]                         computeRestarts <- base::computeRestarts
[11:01:46.856]                         grepl <- base::grepl
[11:01:46.856]                         restarts <- computeRestarts(cond)
[11:01:46.856]                         for (restart in restarts) {
[11:01:46.856]                           name <- restart$name
[11:01:46.856]                           if (is.null(name)) 
[11:01:46.856]                             next
[11:01:46.856]                           if (!grepl(pattern, name)) 
[11:01:46.856]                             next
[11:01:46.856]                           invokeRestart(restart)
[11:01:46.856]                           muffled <- TRUE
[11:01:46.856]                           break
[11:01:46.856]                         }
[11:01:46.856]                       }
[11:01:46.856]                     }
[11:01:46.856]                     invisible(muffled)
[11:01:46.856]                   }
[11:01:46.856]                   muffleCondition(cond)
[11:01:46.856]                 })
[11:01:46.856]             }))
[11:01:46.856]             future::FutureResult(value = ...future.value$value, 
[11:01:46.856]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.856]                   ...future.rng), globalenv = if (FALSE) 
[11:01:46.856]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:46.856]                     ...future.globalenv.names))
[11:01:46.856]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:46.856]         }, condition = base::local({
[11:01:46.856]             c <- base::c
[11:01:46.856]             inherits <- base::inherits
[11:01:46.856]             invokeRestart <- base::invokeRestart
[11:01:46.856]             length <- base::length
[11:01:46.856]             list <- base::list
[11:01:46.856]             seq.int <- base::seq.int
[11:01:46.856]             signalCondition <- base::signalCondition
[11:01:46.856]             sys.calls <- base::sys.calls
[11:01:46.856]             `[[` <- base::`[[`
[11:01:46.856]             `+` <- base::`+`
[11:01:46.856]             `<<-` <- base::`<<-`
[11:01:46.856]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:46.856]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:46.856]                   3L)]
[11:01:46.856]             }
[11:01:46.856]             function(cond) {
[11:01:46.856]                 is_error <- inherits(cond, "error")
[11:01:46.856]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:46.856]                   NULL)
[11:01:46.856]                 if (is_error) {
[11:01:46.856]                   sessionInformation <- function() {
[11:01:46.856]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:46.856]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:46.856]                       search = base::search(), system = base::Sys.info())
[11:01:46.856]                   }
[11:01:46.856]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.856]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:46.856]                     cond$call), session = sessionInformation(), 
[11:01:46.856]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:46.856]                   signalCondition(cond)
[11:01:46.856]                 }
[11:01:46.856]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:46.856]                 "immediateCondition"))) {
[11:01:46.856]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:46.856]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.856]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:46.856]                   if (TRUE && !signal) {
[11:01:46.856]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.856]                     {
[11:01:46.856]                       inherits <- base::inherits
[11:01:46.856]                       invokeRestart <- base::invokeRestart
[11:01:46.856]                       is.null <- base::is.null
[11:01:46.856]                       muffled <- FALSE
[11:01:46.856]                       if (inherits(cond, "message")) {
[11:01:46.856]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.856]                         if (muffled) 
[11:01:46.856]                           invokeRestart("muffleMessage")
[11:01:46.856]                       }
[11:01:46.856]                       else if (inherits(cond, "warning")) {
[11:01:46.856]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.856]                         if (muffled) 
[11:01:46.856]                           invokeRestart("muffleWarning")
[11:01:46.856]                       }
[11:01:46.856]                       else if (inherits(cond, "condition")) {
[11:01:46.856]                         if (!is.null(pattern)) {
[11:01:46.856]                           computeRestarts <- base::computeRestarts
[11:01:46.856]                           grepl <- base::grepl
[11:01:46.856]                           restarts <- computeRestarts(cond)
[11:01:46.856]                           for (restart in restarts) {
[11:01:46.856]                             name <- restart$name
[11:01:46.856]                             if (is.null(name)) 
[11:01:46.856]                               next
[11:01:46.856]                             if (!grepl(pattern, name)) 
[11:01:46.856]                               next
[11:01:46.856]                             invokeRestart(restart)
[11:01:46.856]                             muffled <- TRUE
[11:01:46.856]                             break
[11:01:46.856]                           }
[11:01:46.856]                         }
[11:01:46.856]                       }
[11:01:46.856]                       invisible(muffled)
[11:01:46.856]                     }
[11:01:46.856]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.856]                   }
[11:01:46.856]                 }
[11:01:46.856]                 else {
[11:01:46.856]                   if (TRUE) {
[11:01:46.856]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.856]                     {
[11:01:46.856]                       inherits <- base::inherits
[11:01:46.856]                       invokeRestart <- base::invokeRestart
[11:01:46.856]                       is.null <- base::is.null
[11:01:46.856]                       muffled <- FALSE
[11:01:46.856]                       if (inherits(cond, "message")) {
[11:01:46.856]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.856]                         if (muffled) 
[11:01:46.856]                           invokeRestart("muffleMessage")
[11:01:46.856]                       }
[11:01:46.856]                       else if (inherits(cond, "warning")) {
[11:01:46.856]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.856]                         if (muffled) 
[11:01:46.856]                           invokeRestart("muffleWarning")
[11:01:46.856]                       }
[11:01:46.856]                       else if (inherits(cond, "condition")) {
[11:01:46.856]                         if (!is.null(pattern)) {
[11:01:46.856]                           computeRestarts <- base::computeRestarts
[11:01:46.856]                           grepl <- base::grepl
[11:01:46.856]                           restarts <- computeRestarts(cond)
[11:01:46.856]                           for (restart in restarts) {
[11:01:46.856]                             name <- restart$name
[11:01:46.856]                             if (is.null(name)) 
[11:01:46.856]                               next
[11:01:46.856]                             if (!grepl(pattern, name)) 
[11:01:46.856]                               next
[11:01:46.856]                             invokeRestart(restart)
[11:01:46.856]                             muffled <- TRUE
[11:01:46.856]                             break
[11:01:46.856]                           }
[11:01:46.856]                         }
[11:01:46.856]                       }
[11:01:46.856]                       invisible(muffled)
[11:01:46.856]                     }
[11:01:46.856]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.856]                   }
[11:01:46.856]                 }
[11:01:46.856]             }
[11:01:46.856]         }))
[11:01:46.856]     }, error = function(ex) {
[11:01:46.856]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:46.856]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.856]                 ...future.rng), started = ...future.startTime, 
[11:01:46.856]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:46.856]             version = "1.8"), class = "FutureResult")
[11:01:46.856]     }, finally = {
[11:01:46.856]         if (!identical(...future.workdir, getwd())) 
[11:01:46.856]             setwd(...future.workdir)
[11:01:46.856]         {
[11:01:46.856]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:46.856]                 ...future.oldOptions$nwarnings <- NULL
[11:01:46.856]             }
[11:01:46.856]             base::options(...future.oldOptions)
[11:01:46.856]             if (.Platform$OS.type == "windows") {
[11:01:46.856]                 old_names <- names(...future.oldEnvVars)
[11:01:46.856]                 envs <- base::Sys.getenv()
[11:01:46.856]                 names <- names(envs)
[11:01:46.856]                 common <- intersect(names, old_names)
[11:01:46.856]                 added <- setdiff(names, old_names)
[11:01:46.856]                 removed <- setdiff(old_names, names)
[11:01:46.856]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:46.856]                   envs[common]]
[11:01:46.856]                 NAMES <- toupper(changed)
[11:01:46.856]                 args <- list()
[11:01:46.856]                 for (kk in seq_along(NAMES)) {
[11:01:46.856]                   name <- changed[[kk]]
[11:01:46.856]                   NAME <- NAMES[[kk]]
[11:01:46.856]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.856]                     next
[11:01:46.856]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.856]                 }
[11:01:46.856]                 NAMES <- toupper(added)
[11:01:46.856]                 for (kk in seq_along(NAMES)) {
[11:01:46.856]                   name <- added[[kk]]
[11:01:46.856]                   NAME <- NAMES[[kk]]
[11:01:46.856]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.856]                     next
[11:01:46.856]                   args[[name]] <- ""
[11:01:46.856]                 }
[11:01:46.856]                 NAMES <- toupper(removed)
[11:01:46.856]                 for (kk in seq_along(NAMES)) {
[11:01:46.856]                   name <- removed[[kk]]
[11:01:46.856]                   NAME <- NAMES[[kk]]
[11:01:46.856]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.856]                     next
[11:01:46.856]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.856]                 }
[11:01:46.856]                 if (length(args) > 0) 
[11:01:46.856]                   base::do.call(base::Sys.setenv, args = args)
[11:01:46.856]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:46.856]             }
[11:01:46.856]             else {
[11:01:46.856]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:46.856]             }
[11:01:46.856]             {
[11:01:46.856]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:46.856]                   0L) {
[11:01:46.856]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:46.856]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:46.856]                   base::options(opts)
[11:01:46.856]                 }
[11:01:46.856]                 {
[11:01:46.856]                   {
[11:01:46.856]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:46.856]                     NULL
[11:01:46.856]                   }
[11:01:46.856]                   options(future.plan = NULL)
[11:01:46.856]                   if (is.na(NA_character_)) 
[11:01:46.856]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.856]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:46.856]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:46.856]                     .init = FALSE)
[11:01:46.856]                 }
[11:01:46.856]             }
[11:01:46.856]         }
[11:01:46.856]     })
[11:01:46.856]     if (TRUE) {
[11:01:46.856]         base::sink(type = "output", split = FALSE)
[11:01:46.856]         if (TRUE) {
[11:01:46.856]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:46.856]         }
[11:01:46.856]         else {
[11:01:46.856]             ...future.result["stdout"] <- base::list(NULL)
[11:01:46.856]         }
[11:01:46.856]         base::close(...future.stdout)
[11:01:46.856]         ...future.stdout <- NULL
[11:01:46.856]     }
[11:01:46.856]     ...future.result$conditions <- ...future.conditions
[11:01:46.856]     ...future.result$finished <- base::Sys.time()
[11:01:46.856]     ...future.result
[11:01:46.856] }
[11:01:46.859] Exporting 1 global objects (2.81 KiB) to cluster node #1 ...
[11:01:46.859] Exporting ‘my_fcn’ (2.53 KiB) to cluster node #1 ...
[11:01:46.859] Exporting ‘my_fcn’ (2.53 KiB) to cluster node #1 ... DONE
[11:01:46.859] Exporting 1 global objects (2.81 KiB) to cluster node #1 ... DONE
[11:01:46.860] MultisessionFuture started
[11:01:46.860] - Launch lazy future ... done
[11:01:46.860] run() for ‘MultisessionFuture’ ... done
[11:01:46.860] result() for ClusterFuture ...
[11:01:46.860] receiveMessageFromWorker() for ClusterFuture ...
[11:01:46.860] - Validating connection of MultisessionFuture
[11:01:46.902] - received message: FutureResult
[11:01:46.902] - Received FutureResult
[11:01:46.902] - Erased future from FutureRegistry
[11:01:46.903] result() for ClusterFuture ...
[11:01:46.903] - result already collected: FutureResult
[11:01:46.903] result() for ClusterFuture ... done
[11:01:46.903] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:46.903] result() for ClusterFuture ... done
[11:01:46.903] result() for ClusterFuture ...
[11:01:46.903] - result already collected: FutureResult
[11:01:46.903] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55a2a37d85b0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[11:01:46.904] getGlobalsAndPackages() ...
[11:01:46.904] Searching for globals...
[11:01:46.907] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[11:01:46.907] Searching for globals ... DONE
[11:01:46.907] Resolving globals: FALSE
[11:01:46.908] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[11:01:46.908] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[11:01:46.908] - globals: [1] ‘my_fcn’
[11:01:46.908] 
[11:01:46.908] getGlobalsAndPackages() ... DONE
[11:01:46.909] run() for ‘Future’ ...
[11:01:46.909] - state: ‘created’
[11:01:46.909] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:01:46.923] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:01:46.924] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:01:46.924]   - Field: ‘node’
[11:01:46.924]   - Field: ‘label’
[11:01:46.924]   - Field: ‘local’
[11:01:46.924]   - Field: ‘owner’
[11:01:46.924]   - Field: ‘envir’
[11:01:46.924]   - Field: ‘workers’
[11:01:46.924]   - Field: ‘packages’
[11:01:46.924]   - Field: ‘gc’
[11:01:46.924]   - Field: ‘conditions’
[11:01:46.924]   - Field: ‘persistent’
[11:01:46.925]   - Field: ‘expr’
[11:01:46.925]   - Field: ‘uuid’
[11:01:46.925]   - Field: ‘seed’
[11:01:46.925]   - Field: ‘version’
[11:01:46.925]   - Field: ‘result’
[11:01:46.925]   - Field: ‘asynchronous’
[11:01:46.925]   - Field: ‘calls’
[11:01:46.925]   - Field: ‘globals’
[11:01:46.925]   - Field: ‘stdout’
[11:01:46.926]   - Field: ‘earlySignal’
[11:01:46.926]   - Field: ‘lazy’
[11:01:46.926]   - Field: ‘state’
[11:01:46.926] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:01:46.926] - Launch lazy future ...
[11:01:46.926] Packages needed by the future expression (n = 0): <none>
[11:01:46.926] Packages needed by future strategies (n = 0): <none>
[11:01:46.927] {
[11:01:46.927]     {
[11:01:46.927]         {
[11:01:46.927]             ...future.startTime <- base::Sys.time()
[11:01:46.927]             {
[11:01:46.927]                 {
[11:01:46.927]                   {
[11:01:46.927]                     {
[11:01:46.927]                       base::local({
[11:01:46.927]                         has_future <- base::requireNamespace("future", 
[11:01:46.927]                           quietly = TRUE)
[11:01:46.927]                         if (has_future) {
[11:01:46.927]                           ns <- base::getNamespace("future")
[11:01:46.927]                           version <- ns[[".package"]][["version"]]
[11:01:46.927]                           if (is.null(version)) 
[11:01:46.927]                             version <- utils::packageVersion("future")
[11:01:46.927]                         }
[11:01:46.927]                         else {
[11:01:46.927]                           version <- NULL
[11:01:46.927]                         }
[11:01:46.927]                         if (!has_future || version < "1.8.0") {
[11:01:46.927]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:46.927]                             "", base::R.version$version.string), 
[11:01:46.927]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:46.927]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:46.927]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:46.927]                               "release", "version")], collapse = " "), 
[11:01:46.927]                             hostname = base::Sys.info()[["nodename"]])
[11:01:46.927]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:46.927]                             info)
[11:01:46.927]                           info <- base::paste(info, collapse = "; ")
[11:01:46.927]                           if (!has_future) {
[11:01:46.927]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:46.927]                               info)
[11:01:46.927]                           }
[11:01:46.927]                           else {
[11:01:46.927]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:46.927]                               info, version)
[11:01:46.927]                           }
[11:01:46.927]                           base::stop(msg)
[11:01:46.927]                         }
[11:01:46.927]                       })
[11:01:46.927]                     }
[11:01:46.927]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:46.927]                     base::options(mc.cores = 1L)
[11:01:46.927]                   }
[11:01:46.927]                   ...future.strategy.old <- future::plan("list")
[11:01:46.927]                   options(future.plan = NULL)
[11:01:46.927]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.927]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:46.927]                 }
[11:01:46.927]                 ...future.workdir <- getwd()
[11:01:46.927]             }
[11:01:46.927]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:46.927]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:46.927]         }
[11:01:46.927]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:46.927]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:46.927]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:46.927]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:46.927]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:46.927]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:46.927]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:46.927]             base::names(...future.oldOptions))
[11:01:46.927]     }
[11:01:46.927]     if (FALSE) {
[11:01:46.927]     }
[11:01:46.927]     else {
[11:01:46.927]         if (TRUE) {
[11:01:46.927]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:46.927]                 open = "w")
[11:01:46.927]         }
[11:01:46.927]         else {
[11:01:46.927]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:46.927]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:46.927]         }
[11:01:46.927]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:46.927]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:46.927]             base::sink(type = "output", split = FALSE)
[11:01:46.927]             base::close(...future.stdout)
[11:01:46.927]         }, add = TRUE)
[11:01:46.927]     }
[11:01:46.927]     ...future.frame <- base::sys.nframe()
[11:01:46.927]     ...future.conditions <- base::list()
[11:01:46.927]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:46.927]     if (FALSE) {
[11:01:46.927]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:46.927]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:46.927]     }
[11:01:46.927]     ...future.result <- base::tryCatch({
[11:01:46.927]         base::withCallingHandlers({
[11:01:46.927]             ...future.value <- base::withVisible(base::local({
[11:01:46.927]                 ...future.makeSendCondition <- base::local({
[11:01:46.927]                   sendCondition <- NULL
[11:01:46.927]                   function(frame = 1L) {
[11:01:46.927]                     if (is.function(sendCondition)) 
[11:01:46.927]                       return(sendCondition)
[11:01:46.927]                     ns <- getNamespace("parallel")
[11:01:46.927]                     if (exists("sendData", mode = "function", 
[11:01:46.927]                       envir = ns)) {
[11:01:46.927]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:46.927]                         envir = ns)
[11:01:46.927]                       envir <- sys.frame(frame)
[11:01:46.927]                       master <- NULL
[11:01:46.927]                       while (!identical(envir, .GlobalEnv) && 
[11:01:46.927]                         !identical(envir, emptyenv())) {
[11:01:46.927]                         if (exists("master", mode = "list", envir = envir, 
[11:01:46.927]                           inherits = FALSE)) {
[11:01:46.927]                           master <- get("master", mode = "list", 
[11:01:46.927]                             envir = envir, inherits = FALSE)
[11:01:46.927]                           if (inherits(master, c("SOCKnode", 
[11:01:46.927]                             "SOCK0node"))) {
[11:01:46.927]                             sendCondition <<- function(cond) {
[11:01:46.927]                               data <- list(type = "VALUE", value = cond, 
[11:01:46.927]                                 success = TRUE)
[11:01:46.927]                               parallel_sendData(master, data)
[11:01:46.927]                             }
[11:01:46.927]                             return(sendCondition)
[11:01:46.927]                           }
[11:01:46.927]                         }
[11:01:46.927]                         frame <- frame + 1L
[11:01:46.927]                         envir <- sys.frame(frame)
[11:01:46.927]                       }
[11:01:46.927]                     }
[11:01:46.927]                     sendCondition <<- function(cond) NULL
[11:01:46.927]                   }
[11:01:46.927]                 })
[11:01:46.927]                 withCallingHandlers({
[11:01:46.927]                   {
[11:01:46.927]                     my_fcn(3)
[11:01:46.927]                   }
[11:01:46.927]                 }, immediateCondition = function(cond) {
[11:01:46.927]                   sendCondition <- ...future.makeSendCondition()
[11:01:46.927]                   sendCondition(cond)
[11:01:46.927]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.927]                   {
[11:01:46.927]                     inherits <- base::inherits
[11:01:46.927]                     invokeRestart <- base::invokeRestart
[11:01:46.927]                     is.null <- base::is.null
[11:01:46.927]                     muffled <- FALSE
[11:01:46.927]                     if (inherits(cond, "message")) {
[11:01:46.927]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:46.927]                       if (muffled) 
[11:01:46.927]                         invokeRestart("muffleMessage")
[11:01:46.927]                     }
[11:01:46.927]                     else if (inherits(cond, "warning")) {
[11:01:46.927]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:46.927]                       if (muffled) 
[11:01:46.927]                         invokeRestart("muffleWarning")
[11:01:46.927]                     }
[11:01:46.927]                     else if (inherits(cond, "condition")) {
[11:01:46.927]                       if (!is.null(pattern)) {
[11:01:46.927]                         computeRestarts <- base::computeRestarts
[11:01:46.927]                         grepl <- base::grepl
[11:01:46.927]                         restarts <- computeRestarts(cond)
[11:01:46.927]                         for (restart in restarts) {
[11:01:46.927]                           name <- restart$name
[11:01:46.927]                           if (is.null(name)) 
[11:01:46.927]                             next
[11:01:46.927]                           if (!grepl(pattern, name)) 
[11:01:46.927]                             next
[11:01:46.927]                           invokeRestart(restart)
[11:01:46.927]                           muffled <- TRUE
[11:01:46.927]                           break
[11:01:46.927]                         }
[11:01:46.927]                       }
[11:01:46.927]                     }
[11:01:46.927]                     invisible(muffled)
[11:01:46.927]                   }
[11:01:46.927]                   muffleCondition(cond)
[11:01:46.927]                 })
[11:01:46.927]             }))
[11:01:46.927]             future::FutureResult(value = ...future.value$value, 
[11:01:46.927]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.927]                   ...future.rng), globalenv = if (FALSE) 
[11:01:46.927]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:46.927]                     ...future.globalenv.names))
[11:01:46.927]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:46.927]         }, condition = base::local({
[11:01:46.927]             c <- base::c
[11:01:46.927]             inherits <- base::inherits
[11:01:46.927]             invokeRestart <- base::invokeRestart
[11:01:46.927]             length <- base::length
[11:01:46.927]             list <- base::list
[11:01:46.927]             seq.int <- base::seq.int
[11:01:46.927]             signalCondition <- base::signalCondition
[11:01:46.927]             sys.calls <- base::sys.calls
[11:01:46.927]             `[[` <- base::`[[`
[11:01:46.927]             `+` <- base::`+`
[11:01:46.927]             `<<-` <- base::`<<-`
[11:01:46.927]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:46.927]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:46.927]                   3L)]
[11:01:46.927]             }
[11:01:46.927]             function(cond) {
[11:01:46.927]                 is_error <- inherits(cond, "error")
[11:01:46.927]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:46.927]                   NULL)
[11:01:46.927]                 if (is_error) {
[11:01:46.927]                   sessionInformation <- function() {
[11:01:46.927]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:46.927]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:46.927]                       search = base::search(), system = base::Sys.info())
[11:01:46.927]                   }
[11:01:46.927]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.927]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:46.927]                     cond$call), session = sessionInformation(), 
[11:01:46.927]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:46.927]                   signalCondition(cond)
[11:01:46.927]                 }
[11:01:46.927]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:46.927]                 "immediateCondition"))) {
[11:01:46.927]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:46.927]                   ...future.conditions[[length(...future.conditions) + 
[11:01:46.927]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:46.927]                   if (TRUE && !signal) {
[11:01:46.927]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.927]                     {
[11:01:46.927]                       inherits <- base::inherits
[11:01:46.927]                       invokeRestart <- base::invokeRestart
[11:01:46.927]                       is.null <- base::is.null
[11:01:46.927]                       muffled <- FALSE
[11:01:46.927]                       if (inherits(cond, "message")) {
[11:01:46.927]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.927]                         if (muffled) 
[11:01:46.927]                           invokeRestart("muffleMessage")
[11:01:46.927]                       }
[11:01:46.927]                       else if (inherits(cond, "warning")) {
[11:01:46.927]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.927]                         if (muffled) 
[11:01:46.927]                           invokeRestart("muffleWarning")
[11:01:46.927]                       }
[11:01:46.927]                       else if (inherits(cond, "condition")) {
[11:01:46.927]                         if (!is.null(pattern)) {
[11:01:46.927]                           computeRestarts <- base::computeRestarts
[11:01:46.927]                           grepl <- base::grepl
[11:01:46.927]                           restarts <- computeRestarts(cond)
[11:01:46.927]                           for (restart in restarts) {
[11:01:46.927]                             name <- restart$name
[11:01:46.927]                             if (is.null(name)) 
[11:01:46.927]                               next
[11:01:46.927]                             if (!grepl(pattern, name)) 
[11:01:46.927]                               next
[11:01:46.927]                             invokeRestart(restart)
[11:01:46.927]                             muffled <- TRUE
[11:01:46.927]                             break
[11:01:46.927]                           }
[11:01:46.927]                         }
[11:01:46.927]                       }
[11:01:46.927]                       invisible(muffled)
[11:01:46.927]                     }
[11:01:46.927]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.927]                   }
[11:01:46.927]                 }
[11:01:46.927]                 else {
[11:01:46.927]                   if (TRUE) {
[11:01:46.927]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:46.927]                     {
[11:01:46.927]                       inherits <- base::inherits
[11:01:46.927]                       invokeRestart <- base::invokeRestart
[11:01:46.927]                       is.null <- base::is.null
[11:01:46.927]                       muffled <- FALSE
[11:01:46.927]                       if (inherits(cond, "message")) {
[11:01:46.927]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:46.927]                         if (muffled) 
[11:01:46.927]                           invokeRestart("muffleMessage")
[11:01:46.927]                       }
[11:01:46.927]                       else if (inherits(cond, "warning")) {
[11:01:46.927]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:46.927]                         if (muffled) 
[11:01:46.927]                           invokeRestart("muffleWarning")
[11:01:46.927]                       }
[11:01:46.927]                       else if (inherits(cond, "condition")) {
[11:01:46.927]                         if (!is.null(pattern)) {
[11:01:46.927]                           computeRestarts <- base::computeRestarts
[11:01:46.927]                           grepl <- base::grepl
[11:01:46.927]                           restarts <- computeRestarts(cond)
[11:01:46.927]                           for (restart in restarts) {
[11:01:46.927]                             name <- restart$name
[11:01:46.927]                             if (is.null(name)) 
[11:01:46.927]                               next
[11:01:46.927]                             if (!grepl(pattern, name)) 
[11:01:46.927]                               next
[11:01:46.927]                             invokeRestart(restart)
[11:01:46.927]                             muffled <- TRUE
[11:01:46.927]                             break
[11:01:46.927]                           }
[11:01:46.927]                         }
[11:01:46.927]                       }
[11:01:46.927]                       invisible(muffled)
[11:01:46.927]                     }
[11:01:46.927]                     muffleCondition(cond, pattern = "^muffle")
[11:01:46.927]                   }
[11:01:46.927]                 }
[11:01:46.927]             }
[11:01:46.927]         }))
[11:01:46.927]     }, error = function(ex) {
[11:01:46.927]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:46.927]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:46.927]                 ...future.rng), started = ...future.startTime, 
[11:01:46.927]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:46.927]             version = "1.8"), class = "FutureResult")
[11:01:46.927]     }, finally = {
[11:01:46.927]         if (!identical(...future.workdir, getwd())) 
[11:01:46.927]             setwd(...future.workdir)
[11:01:46.927]         {
[11:01:46.927]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:46.927]                 ...future.oldOptions$nwarnings <- NULL
[11:01:46.927]             }
[11:01:46.927]             base::options(...future.oldOptions)
[11:01:46.927]             if (.Platform$OS.type == "windows") {
[11:01:46.927]                 old_names <- names(...future.oldEnvVars)
[11:01:46.927]                 envs <- base::Sys.getenv()
[11:01:46.927]                 names <- names(envs)
[11:01:46.927]                 common <- intersect(names, old_names)
[11:01:46.927]                 added <- setdiff(names, old_names)
[11:01:46.927]                 removed <- setdiff(old_names, names)
[11:01:46.927]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:46.927]                   envs[common]]
[11:01:46.927]                 NAMES <- toupper(changed)
[11:01:46.927]                 args <- list()
[11:01:46.927]                 for (kk in seq_along(NAMES)) {
[11:01:46.927]                   name <- changed[[kk]]
[11:01:46.927]                   NAME <- NAMES[[kk]]
[11:01:46.927]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.927]                     next
[11:01:46.927]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.927]                 }
[11:01:46.927]                 NAMES <- toupper(added)
[11:01:46.927]                 for (kk in seq_along(NAMES)) {
[11:01:46.927]                   name <- added[[kk]]
[11:01:46.927]                   NAME <- NAMES[[kk]]
[11:01:46.927]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.927]                     next
[11:01:46.927]                   args[[name]] <- ""
[11:01:46.927]                 }
[11:01:46.927]                 NAMES <- toupper(removed)
[11:01:46.927]                 for (kk in seq_along(NAMES)) {
[11:01:46.927]                   name <- removed[[kk]]
[11:01:46.927]                   NAME <- NAMES[[kk]]
[11:01:46.927]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:46.927]                     next
[11:01:46.927]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:46.927]                 }
[11:01:46.927]                 if (length(args) > 0) 
[11:01:46.927]                   base::do.call(base::Sys.setenv, args = args)
[11:01:46.927]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:46.927]             }
[11:01:46.927]             else {
[11:01:46.927]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:46.927]             }
[11:01:46.927]             {
[11:01:46.927]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:46.927]                   0L) {
[11:01:46.927]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:46.927]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:46.927]                   base::options(opts)
[11:01:46.927]                 }
[11:01:46.927]                 {
[11:01:46.927]                   {
[11:01:46.927]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:46.927]                     NULL
[11:01:46.927]                   }
[11:01:46.927]                   options(future.plan = NULL)
[11:01:46.927]                   if (is.na(NA_character_)) 
[11:01:46.927]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:46.927]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:46.927]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:46.927]                     .init = FALSE)
[11:01:46.927]                 }
[11:01:46.927]             }
[11:01:46.927]         }
[11:01:46.927]     })
[11:01:46.927]     if (TRUE) {
[11:01:46.927]         base::sink(type = "output", split = FALSE)
[11:01:46.927]         if (TRUE) {
[11:01:46.927]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:46.927]         }
[11:01:46.927]         else {
[11:01:46.927]             ...future.result["stdout"] <- base::list(NULL)
[11:01:46.927]         }
[11:01:46.927]         base::close(...future.stdout)
[11:01:46.927]         ...future.stdout <- NULL
[11:01:46.927]     }
[11:01:46.927]     ...future.result$conditions <- ...future.conditions
[11:01:46.927]     ...future.result$finished <- base::Sys.time()
[11:01:46.927]     ...future.result
[11:01:46.927] }
[11:01:46.930] Exporting 1 global objects (2.81 KiB) to cluster node #1 ...
[11:01:46.930] Exporting ‘my_fcn’ (2.53 KiB) to cluster node #1 ...
[11:01:46.930] Exporting ‘my_fcn’ (2.53 KiB) to cluster node #1 ... DONE
[11:01:46.931] Exporting 1 global objects (2.81 KiB) to cluster node #1 ... DONE
[11:01:46.931] MultisessionFuture started
[11:01:46.931] - Launch lazy future ... done
[11:01:46.931] run() for ‘MultisessionFuture’ ... done
[11:01:46.931] result() for ClusterFuture ...
[11:01:46.932] receiveMessageFromWorker() for ClusterFuture ...
[11:01:46.932] - Validating connection of MultisessionFuture
[11:01:46.974] - received message: FutureResult
[11:01:46.974] - Received FutureResult
[11:01:46.974] - Erased future from FutureRegistry
[11:01:46.974] result() for ClusterFuture ...
[11:01:46.974] - result already collected: FutureResult
[11:01:46.975] result() for ClusterFuture ... done
[11:01:46.975] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:46.975] result() for ClusterFuture ... done
[11:01:46.975] result() for ClusterFuture ...
[11:01:46.975] - result already collected: FutureResult
[11:01:46.975] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[11:01:46.976] plan(): Setting new future strategy stack:
[11:01:46.976] List of future strategies:
[11:01:46.976] 1. FutureStrategy:
[11:01:46.976]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:46.976]    - tweaked: FALSE
[11:01:46.976]    - call: future::plan(oplan)
[11:01:46.977] plan(): nbrOfWorkers() = 1
> 
