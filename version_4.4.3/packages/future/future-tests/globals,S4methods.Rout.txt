
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:28:08.318] plan(): Setting new future strategy stack:
[08:28:08.318] List of future strategies:
[08:28:08.318] 1. sequential:
[08:28:08.318]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.318]    - tweaked: FALSE
[08:28:08.318]    - call: future::plan("sequential")
[08:28:08.332] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[08:28:08.368] plan(): Setting new future strategy stack:
[08:28:08.368] List of future strategies:
[08:28:08.368] 1. sequential:
[08:28:08.368]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.368]    - tweaked: FALSE
[08:28:08.368]    - call: plan(strategy)
[08:28:08.381] plan(): nbrOfWorkers() = 1
[08:28:08.381] getGlobalsAndPackages() ...
[08:28:08.381] Searching for globals...
[08:28:08.387] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:28:08.387] Searching for globals ... DONE
[08:28:08.387] Resolving globals: FALSE
[08:28:08.388] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[08:28:08.388] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[08:28:08.388] - globals: [1] ‘my_fcn’
[08:28:08.388] 
[08:28:08.388] getGlobalsAndPackages() ... DONE
[08:28:08.389] run() for ‘Future’ ...
[08:28:08.389] - state: ‘created’
[08:28:08.390] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:08.390] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:08.390] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:08.390]   - Field: ‘label’
[08:28:08.390]   - Field: ‘local’
[08:28:08.390]   - Field: ‘owner’
[08:28:08.390]   - Field: ‘envir’
[08:28:08.390]   - Field: ‘packages’
[08:28:08.391]   - Field: ‘gc’
[08:28:08.391]   - Field: ‘conditions’
[08:28:08.391]   - Field: ‘expr’
[08:28:08.391]   - Field: ‘uuid’
[08:28:08.391]   - Field: ‘seed’
[08:28:08.391]   - Field: ‘version’
[08:28:08.391]   - Field: ‘result’
[08:28:08.391]   - Field: ‘asynchronous’
[08:28:08.391]   - Field: ‘calls’
[08:28:08.391]   - Field: ‘globals’
[08:28:08.391]   - Field: ‘stdout’
[08:28:08.391]   - Field: ‘earlySignal’
[08:28:08.391]   - Field: ‘lazy’
[08:28:08.392]   - Field: ‘state’
[08:28:08.392] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:08.392] - Launch lazy future ...
[08:28:08.392] Packages needed by the future expression (n = 0): <none>
[08:28:08.392] Packages needed by future strategies (n = 0): <none>
[08:28:08.393] {
[08:28:08.393]     {
[08:28:08.393]         {
[08:28:08.393]             ...future.startTime <- base::Sys.time()
[08:28:08.393]             {
[08:28:08.393]                 {
[08:28:08.393]                   {
[08:28:08.393]                     base::local({
[08:28:08.393]                       has_future <- base::requireNamespace("future", 
[08:28:08.393]                         quietly = TRUE)
[08:28:08.393]                       if (has_future) {
[08:28:08.393]                         ns <- base::getNamespace("future")
[08:28:08.393]                         version <- ns[[".package"]][["version"]]
[08:28:08.393]                         if (is.null(version)) 
[08:28:08.393]                           version <- utils::packageVersion("future")
[08:28:08.393]                       }
[08:28:08.393]                       else {
[08:28:08.393]                         version <- NULL
[08:28:08.393]                       }
[08:28:08.393]                       if (!has_future || version < "1.8.0") {
[08:28:08.393]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:08.393]                           "", base::R.version$version.string), 
[08:28:08.393]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:08.393]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:08.393]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:08.393]                             "release", "version")], collapse = " "), 
[08:28:08.393]                           hostname = base::Sys.info()[["nodename"]])
[08:28:08.393]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:08.393]                           info)
[08:28:08.393]                         info <- base::paste(info, collapse = "; ")
[08:28:08.393]                         if (!has_future) {
[08:28:08.393]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:08.393]                             info)
[08:28:08.393]                         }
[08:28:08.393]                         else {
[08:28:08.393]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:08.393]                             info, version)
[08:28:08.393]                         }
[08:28:08.393]                         base::stop(msg)
[08:28:08.393]                       }
[08:28:08.393]                     })
[08:28:08.393]                   }
[08:28:08.393]                   ...future.strategy.old <- future::plan("list")
[08:28:08.393]                   options(future.plan = NULL)
[08:28:08.393]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.393]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:08.393]                 }
[08:28:08.393]                 ...future.workdir <- getwd()
[08:28:08.393]             }
[08:28:08.393]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:08.393]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:08.393]         }
[08:28:08.393]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:08.393]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:08.393]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:08.393]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:08.393]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:08.393]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:08.393]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:08.393]             base::names(...future.oldOptions))
[08:28:08.393]     }
[08:28:08.393]     if (FALSE) {
[08:28:08.393]     }
[08:28:08.393]     else {
[08:28:08.393]         if (TRUE) {
[08:28:08.393]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:08.393]                 open = "w")
[08:28:08.393]         }
[08:28:08.393]         else {
[08:28:08.393]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:08.393]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:08.393]         }
[08:28:08.393]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:08.393]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:08.393]             base::sink(type = "output", split = FALSE)
[08:28:08.393]             base::close(...future.stdout)
[08:28:08.393]         }, add = TRUE)
[08:28:08.393]     }
[08:28:08.393]     ...future.frame <- base::sys.nframe()
[08:28:08.393]     ...future.conditions <- base::list()
[08:28:08.393]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:08.393]     if (FALSE) {
[08:28:08.393]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:08.393]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:08.393]     }
[08:28:08.393]     ...future.result <- base::tryCatch({
[08:28:08.393]         base::withCallingHandlers({
[08:28:08.393]             ...future.value <- base::withVisible(base::local({
[08:28:08.393]                 my_fcn
[08:28:08.393]             }))
[08:28:08.393]             future::FutureResult(value = ...future.value$value, 
[08:28:08.393]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.393]                   ...future.rng), globalenv = if (FALSE) 
[08:28:08.393]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:08.393]                     ...future.globalenv.names))
[08:28:08.393]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:08.393]         }, condition = base::local({
[08:28:08.393]             c <- base::c
[08:28:08.393]             inherits <- base::inherits
[08:28:08.393]             invokeRestart <- base::invokeRestart
[08:28:08.393]             length <- base::length
[08:28:08.393]             list <- base::list
[08:28:08.393]             seq.int <- base::seq.int
[08:28:08.393]             signalCondition <- base::signalCondition
[08:28:08.393]             sys.calls <- base::sys.calls
[08:28:08.393]             `[[` <- base::`[[`
[08:28:08.393]             `+` <- base::`+`
[08:28:08.393]             `<<-` <- base::`<<-`
[08:28:08.393]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:08.393]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:08.393]                   3L)]
[08:28:08.393]             }
[08:28:08.393]             function(cond) {
[08:28:08.393]                 is_error <- inherits(cond, "error")
[08:28:08.393]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:08.393]                   NULL)
[08:28:08.393]                 if (is_error) {
[08:28:08.393]                   sessionInformation <- function() {
[08:28:08.393]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:08.393]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:08.393]                       search = base::search(), system = base::Sys.info())
[08:28:08.393]                   }
[08:28:08.393]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.393]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:08.393]                     cond$call), session = sessionInformation(), 
[08:28:08.393]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:08.393]                   signalCondition(cond)
[08:28:08.393]                 }
[08:28:08.393]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:08.393]                 "immediateCondition"))) {
[08:28:08.393]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:08.393]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.393]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:08.393]                   if (TRUE && !signal) {
[08:28:08.393]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.393]                     {
[08:28:08.393]                       inherits <- base::inherits
[08:28:08.393]                       invokeRestart <- base::invokeRestart
[08:28:08.393]                       is.null <- base::is.null
[08:28:08.393]                       muffled <- FALSE
[08:28:08.393]                       if (inherits(cond, "message")) {
[08:28:08.393]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.393]                         if (muffled) 
[08:28:08.393]                           invokeRestart("muffleMessage")
[08:28:08.393]                       }
[08:28:08.393]                       else if (inherits(cond, "warning")) {
[08:28:08.393]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.393]                         if (muffled) 
[08:28:08.393]                           invokeRestart("muffleWarning")
[08:28:08.393]                       }
[08:28:08.393]                       else if (inherits(cond, "condition")) {
[08:28:08.393]                         if (!is.null(pattern)) {
[08:28:08.393]                           computeRestarts <- base::computeRestarts
[08:28:08.393]                           grepl <- base::grepl
[08:28:08.393]                           restarts <- computeRestarts(cond)
[08:28:08.393]                           for (restart in restarts) {
[08:28:08.393]                             name <- restart$name
[08:28:08.393]                             if (is.null(name)) 
[08:28:08.393]                               next
[08:28:08.393]                             if (!grepl(pattern, name)) 
[08:28:08.393]                               next
[08:28:08.393]                             invokeRestart(restart)
[08:28:08.393]                             muffled <- TRUE
[08:28:08.393]                             break
[08:28:08.393]                           }
[08:28:08.393]                         }
[08:28:08.393]                       }
[08:28:08.393]                       invisible(muffled)
[08:28:08.393]                     }
[08:28:08.393]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.393]                   }
[08:28:08.393]                 }
[08:28:08.393]                 else {
[08:28:08.393]                   if (TRUE) {
[08:28:08.393]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.393]                     {
[08:28:08.393]                       inherits <- base::inherits
[08:28:08.393]                       invokeRestart <- base::invokeRestart
[08:28:08.393]                       is.null <- base::is.null
[08:28:08.393]                       muffled <- FALSE
[08:28:08.393]                       if (inherits(cond, "message")) {
[08:28:08.393]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.393]                         if (muffled) 
[08:28:08.393]                           invokeRestart("muffleMessage")
[08:28:08.393]                       }
[08:28:08.393]                       else if (inherits(cond, "warning")) {
[08:28:08.393]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.393]                         if (muffled) 
[08:28:08.393]                           invokeRestart("muffleWarning")
[08:28:08.393]                       }
[08:28:08.393]                       else if (inherits(cond, "condition")) {
[08:28:08.393]                         if (!is.null(pattern)) {
[08:28:08.393]                           computeRestarts <- base::computeRestarts
[08:28:08.393]                           grepl <- base::grepl
[08:28:08.393]                           restarts <- computeRestarts(cond)
[08:28:08.393]                           for (restart in restarts) {
[08:28:08.393]                             name <- restart$name
[08:28:08.393]                             if (is.null(name)) 
[08:28:08.393]                               next
[08:28:08.393]                             if (!grepl(pattern, name)) 
[08:28:08.393]                               next
[08:28:08.393]                             invokeRestart(restart)
[08:28:08.393]                             muffled <- TRUE
[08:28:08.393]                             break
[08:28:08.393]                           }
[08:28:08.393]                         }
[08:28:08.393]                       }
[08:28:08.393]                       invisible(muffled)
[08:28:08.393]                     }
[08:28:08.393]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.393]                   }
[08:28:08.393]                 }
[08:28:08.393]             }
[08:28:08.393]         }))
[08:28:08.393]     }, error = function(ex) {
[08:28:08.393]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:08.393]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.393]                 ...future.rng), started = ...future.startTime, 
[08:28:08.393]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:08.393]             version = "1.8"), class = "FutureResult")
[08:28:08.393]     }, finally = {
[08:28:08.393]         if (!identical(...future.workdir, getwd())) 
[08:28:08.393]             setwd(...future.workdir)
[08:28:08.393]         {
[08:28:08.393]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:08.393]                 ...future.oldOptions$nwarnings <- NULL
[08:28:08.393]             }
[08:28:08.393]             base::options(...future.oldOptions)
[08:28:08.393]             if (.Platform$OS.type == "windows") {
[08:28:08.393]                 old_names <- names(...future.oldEnvVars)
[08:28:08.393]                 envs <- base::Sys.getenv()
[08:28:08.393]                 names <- names(envs)
[08:28:08.393]                 common <- intersect(names, old_names)
[08:28:08.393]                 added <- setdiff(names, old_names)
[08:28:08.393]                 removed <- setdiff(old_names, names)
[08:28:08.393]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:08.393]                   envs[common]]
[08:28:08.393]                 NAMES <- toupper(changed)
[08:28:08.393]                 args <- list()
[08:28:08.393]                 for (kk in seq_along(NAMES)) {
[08:28:08.393]                   name <- changed[[kk]]
[08:28:08.393]                   NAME <- NAMES[[kk]]
[08:28:08.393]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.393]                     next
[08:28:08.393]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.393]                 }
[08:28:08.393]                 NAMES <- toupper(added)
[08:28:08.393]                 for (kk in seq_along(NAMES)) {
[08:28:08.393]                   name <- added[[kk]]
[08:28:08.393]                   NAME <- NAMES[[kk]]
[08:28:08.393]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.393]                     next
[08:28:08.393]                   args[[name]] <- ""
[08:28:08.393]                 }
[08:28:08.393]                 NAMES <- toupper(removed)
[08:28:08.393]                 for (kk in seq_along(NAMES)) {
[08:28:08.393]                   name <- removed[[kk]]
[08:28:08.393]                   NAME <- NAMES[[kk]]
[08:28:08.393]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.393]                     next
[08:28:08.393]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.393]                 }
[08:28:08.393]                 if (length(args) > 0) 
[08:28:08.393]                   base::do.call(base::Sys.setenv, args = args)
[08:28:08.393]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:08.393]             }
[08:28:08.393]             else {
[08:28:08.393]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:08.393]             }
[08:28:08.393]             {
[08:28:08.393]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:08.393]                   0L) {
[08:28:08.393]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:08.393]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:08.393]                   base::options(opts)
[08:28:08.393]                 }
[08:28:08.393]                 {
[08:28:08.393]                   {
[08:28:08.393]                     NULL
[08:28:08.393]                     RNGkind("Mersenne-Twister")
[08:28:08.393]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:08.393]                       inherits = FALSE)
[08:28:08.393]                   }
[08:28:08.393]                   options(future.plan = NULL)
[08:28:08.393]                   if (is.na(NA_character_)) 
[08:28:08.393]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.393]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:08.393]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:08.393]                     .init = FALSE)
[08:28:08.393]                 }
[08:28:08.393]             }
[08:28:08.393]         }
[08:28:08.393]     })
[08:28:08.393]     if (TRUE) {
[08:28:08.393]         base::sink(type = "output", split = FALSE)
[08:28:08.393]         if (TRUE) {
[08:28:08.393]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:08.393]         }
[08:28:08.393]         else {
[08:28:08.393]             ...future.result["stdout"] <- base::list(NULL)
[08:28:08.393]         }
[08:28:08.393]         base::close(...future.stdout)
[08:28:08.393]         ...future.stdout <- NULL
[08:28:08.393]     }
[08:28:08.393]     ...future.result$conditions <- ...future.conditions
[08:28:08.393]     ...future.result$finished <- base::Sys.time()
[08:28:08.393]     ...future.result
[08:28:08.393] }
[08:28:08.395] assign_globals() ...
[08:28:08.395] List of 1
[08:28:08.395]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:28:08.395]   .. ..@ .Data     :function (x)  
[08:28:08.395]   .. ..@ generic   : chr "my_fcn"
[08:28:08.395]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:28:08.395]   .. ..@ package   : chr ".GlobalEnv"
[08:28:08.395]   .. ..@ group     : list()
[08:28:08.395]   .. ..@ valueClass: chr(0) 
[08:28:08.395]   .. ..@ signature : chr "x"
[08:28:08.395]   .. ..@ default   : NULL
[08:28:08.395]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:28:08.395]  - attr(*, "where")=List of 1
[08:28:08.395]   ..$ my_fcn:<environment: R_EmptyEnv> 
[08:28:08.395]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:08.395]  - attr(*, "resolved")= logi FALSE
[08:28:08.395]  - attr(*, "total_size")= num 2591
[08:28:08.395]  - attr(*, "already-done")= logi TRUE
[08:28:08.403] - reassign environment for ‘my_fcn’
[08:28:08.404] - copied ‘my_fcn’ to environment
[08:28:08.404] assign_globals() ... done
[08:28:08.404] plan(): Setting new future strategy stack:
[08:28:08.404] List of future strategies:
[08:28:08.404] 1. sequential:
[08:28:08.404]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.404]    - tweaked: FALSE
[08:28:08.404]    - call: NULL
[08:28:08.404] plan(): nbrOfWorkers() = 1
[08:28:08.405] plan(): Setting new future strategy stack:
[08:28:08.406] List of future strategies:
[08:28:08.406] 1. sequential:
[08:28:08.406]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.406]    - tweaked: FALSE
[08:28:08.406]    - call: plan(strategy)
[08:28:08.406] plan(): nbrOfWorkers() = 1
[08:28:08.406] SequentialFuture started (and completed)
[08:28:08.407] - Launch lazy future ... done
[08:28:08.407] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55d3fc2e4490>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:28:08.407] getGlobalsAndPackages() ...
[08:28:08.407] Searching for globals...
[08:28:08.411] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:28:08.411] Searching for globals ... DONE
[08:28:08.411] Resolving globals: FALSE
[08:28:08.412] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[08:28:08.412] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[08:28:08.412] - globals: [1] ‘my_fcn’
[08:28:08.412] 
[08:28:08.412] getGlobalsAndPackages() ... DONE
[08:28:08.412] run() for ‘Future’ ...
[08:28:08.413] - state: ‘created’
[08:28:08.413] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:28:08.413] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:28:08.413] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:28:08.413]   - Field: ‘label’
[08:28:08.413]   - Field: ‘local’
[08:28:08.413]   - Field: ‘owner’
[08:28:08.413]   - Field: ‘envir’
[08:28:08.413]   - Field: ‘packages’
[08:28:08.414]   - Field: ‘gc’
[08:28:08.414]   - Field: ‘conditions’
[08:28:08.414]   - Field: ‘expr’
[08:28:08.414]   - Field: ‘uuid’
[08:28:08.414]   - Field: ‘seed’
[08:28:08.414]   - Field: ‘version’
[08:28:08.414]   - Field: ‘result’
[08:28:08.414]   - Field: ‘asynchronous’
[08:28:08.414]   - Field: ‘calls’
[08:28:08.414]   - Field: ‘globals’
[08:28:08.414]   - Field: ‘stdout’
[08:28:08.414]   - Field: ‘earlySignal’
[08:28:08.415]   - Field: ‘lazy’
[08:28:08.415]   - Field: ‘state’
[08:28:08.415] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:28:08.415] - Launch lazy future ...
[08:28:08.415] Packages needed by the future expression (n = 0): <none>
[08:28:08.415] Packages needed by future strategies (n = 0): <none>
[08:28:08.415] {
[08:28:08.415]     {
[08:28:08.415]         {
[08:28:08.415]             ...future.startTime <- base::Sys.time()
[08:28:08.415]             {
[08:28:08.415]                 {
[08:28:08.415]                   {
[08:28:08.415]                     base::local({
[08:28:08.415]                       has_future <- base::requireNamespace("future", 
[08:28:08.415]                         quietly = TRUE)
[08:28:08.415]                       if (has_future) {
[08:28:08.415]                         ns <- base::getNamespace("future")
[08:28:08.415]                         version <- ns[[".package"]][["version"]]
[08:28:08.415]                         if (is.null(version)) 
[08:28:08.415]                           version <- utils::packageVersion("future")
[08:28:08.415]                       }
[08:28:08.415]                       else {
[08:28:08.415]                         version <- NULL
[08:28:08.415]                       }
[08:28:08.415]                       if (!has_future || version < "1.8.0") {
[08:28:08.415]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:08.415]                           "", base::R.version$version.string), 
[08:28:08.415]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:08.415]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:08.415]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:08.415]                             "release", "version")], collapse = " "), 
[08:28:08.415]                           hostname = base::Sys.info()[["nodename"]])
[08:28:08.415]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:08.415]                           info)
[08:28:08.415]                         info <- base::paste(info, collapse = "; ")
[08:28:08.415]                         if (!has_future) {
[08:28:08.415]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:08.415]                             info)
[08:28:08.415]                         }
[08:28:08.415]                         else {
[08:28:08.415]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:08.415]                             info, version)
[08:28:08.415]                         }
[08:28:08.415]                         base::stop(msg)
[08:28:08.415]                       }
[08:28:08.415]                     })
[08:28:08.415]                   }
[08:28:08.415]                   ...future.strategy.old <- future::plan("list")
[08:28:08.415]                   options(future.plan = NULL)
[08:28:08.415]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.415]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:08.415]                 }
[08:28:08.415]                 ...future.workdir <- getwd()
[08:28:08.415]             }
[08:28:08.415]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:08.415]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:08.415]         }
[08:28:08.415]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:08.415]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:08.415]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:08.415]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:08.415]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:08.415]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:08.415]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:08.415]             base::names(...future.oldOptions))
[08:28:08.415]     }
[08:28:08.415]     if (FALSE) {
[08:28:08.415]     }
[08:28:08.415]     else {
[08:28:08.415]         if (TRUE) {
[08:28:08.415]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:08.415]                 open = "w")
[08:28:08.415]         }
[08:28:08.415]         else {
[08:28:08.415]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:08.415]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:08.415]         }
[08:28:08.415]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:08.415]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:08.415]             base::sink(type = "output", split = FALSE)
[08:28:08.415]             base::close(...future.stdout)
[08:28:08.415]         }, add = TRUE)
[08:28:08.415]     }
[08:28:08.415]     ...future.frame <- base::sys.nframe()
[08:28:08.415]     ...future.conditions <- base::list()
[08:28:08.415]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:08.415]     if (FALSE) {
[08:28:08.415]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:08.415]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:08.415]     }
[08:28:08.415]     ...future.result <- base::tryCatch({
[08:28:08.415]         base::withCallingHandlers({
[08:28:08.415]             ...future.value <- base::withVisible(base::local({
[08:28:08.415]                 my_fcn(3)
[08:28:08.415]             }))
[08:28:08.415]             future::FutureResult(value = ...future.value$value, 
[08:28:08.415]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.415]                   ...future.rng), globalenv = if (FALSE) 
[08:28:08.415]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:08.415]                     ...future.globalenv.names))
[08:28:08.415]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:08.415]         }, condition = base::local({
[08:28:08.415]             c <- base::c
[08:28:08.415]             inherits <- base::inherits
[08:28:08.415]             invokeRestart <- base::invokeRestart
[08:28:08.415]             length <- base::length
[08:28:08.415]             list <- base::list
[08:28:08.415]             seq.int <- base::seq.int
[08:28:08.415]             signalCondition <- base::signalCondition
[08:28:08.415]             sys.calls <- base::sys.calls
[08:28:08.415]             `[[` <- base::`[[`
[08:28:08.415]             `+` <- base::`+`
[08:28:08.415]             `<<-` <- base::`<<-`
[08:28:08.415]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:08.415]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:08.415]                   3L)]
[08:28:08.415]             }
[08:28:08.415]             function(cond) {
[08:28:08.415]                 is_error <- inherits(cond, "error")
[08:28:08.415]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:08.415]                   NULL)
[08:28:08.415]                 if (is_error) {
[08:28:08.415]                   sessionInformation <- function() {
[08:28:08.415]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:08.415]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:08.415]                       search = base::search(), system = base::Sys.info())
[08:28:08.415]                   }
[08:28:08.415]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.415]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:08.415]                     cond$call), session = sessionInformation(), 
[08:28:08.415]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:08.415]                   signalCondition(cond)
[08:28:08.415]                 }
[08:28:08.415]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:08.415]                 "immediateCondition"))) {
[08:28:08.415]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:08.415]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.415]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:08.415]                   if (TRUE && !signal) {
[08:28:08.415]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.415]                     {
[08:28:08.415]                       inherits <- base::inherits
[08:28:08.415]                       invokeRestart <- base::invokeRestart
[08:28:08.415]                       is.null <- base::is.null
[08:28:08.415]                       muffled <- FALSE
[08:28:08.415]                       if (inherits(cond, "message")) {
[08:28:08.415]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.415]                         if (muffled) 
[08:28:08.415]                           invokeRestart("muffleMessage")
[08:28:08.415]                       }
[08:28:08.415]                       else if (inherits(cond, "warning")) {
[08:28:08.415]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.415]                         if (muffled) 
[08:28:08.415]                           invokeRestart("muffleWarning")
[08:28:08.415]                       }
[08:28:08.415]                       else if (inherits(cond, "condition")) {
[08:28:08.415]                         if (!is.null(pattern)) {
[08:28:08.415]                           computeRestarts <- base::computeRestarts
[08:28:08.415]                           grepl <- base::grepl
[08:28:08.415]                           restarts <- computeRestarts(cond)
[08:28:08.415]                           for (restart in restarts) {
[08:28:08.415]                             name <- restart$name
[08:28:08.415]                             if (is.null(name)) 
[08:28:08.415]                               next
[08:28:08.415]                             if (!grepl(pattern, name)) 
[08:28:08.415]                               next
[08:28:08.415]                             invokeRestart(restart)
[08:28:08.415]                             muffled <- TRUE
[08:28:08.415]                             break
[08:28:08.415]                           }
[08:28:08.415]                         }
[08:28:08.415]                       }
[08:28:08.415]                       invisible(muffled)
[08:28:08.415]                     }
[08:28:08.415]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.415]                   }
[08:28:08.415]                 }
[08:28:08.415]                 else {
[08:28:08.415]                   if (TRUE) {
[08:28:08.415]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.415]                     {
[08:28:08.415]                       inherits <- base::inherits
[08:28:08.415]                       invokeRestart <- base::invokeRestart
[08:28:08.415]                       is.null <- base::is.null
[08:28:08.415]                       muffled <- FALSE
[08:28:08.415]                       if (inherits(cond, "message")) {
[08:28:08.415]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.415]                         if (muffled) 
[08:28:08.415]                           invokeRestart("muffleMessage")
[08:28:08.415]                       }
[08:28:08.415]                       else if (inherits(cond, "warning")) {
[08:28:08.415]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.415]                         if (muffled) 
[08:28:08.415]                           invokeRestart("muffleWarning")
[08:28:08.415]                       }
[08:28:08.415]                       else if (inherits(cond, "condition")) {
[08:28:08.415]                         if (!is.null(pattern)) {
[08:28:08.415]                           computeRestarts <- base::computeRestarts
[08:28:08.415]                           grepl <- base::grepl
[08:28:08.415]                           restarts <- computeRestarts(cond)
[08:28:08.415]                           for (restart in restarts) {
[08:28:08.415]                             name <- restart$name
[08:28:08.415]                             if (is.null(name)) 
[08:28:08.415]                               next
[08:28:08.415]                             if (!grepl(pattern, name)) 
[08:28:08.415]                               next
[08:28:08.415]                             invokeRestart(restart)
[08:28:08.415]                             muffled <- TRUE
[08:28:08.415]                             break
[08:28:08.415]                           }
[08:28:08.415]                         }
[08:28:08.415]                       }
[08:28:08.415]                       invisible(muffled)
[08:28:08.415]                     }
[08:28:08.415]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.415]                   }
[08:28:08.415]                 }
[08:28:08.415]             }
[08:28:08.415]         }))
[08:28:08.415]     }, error = function(ex) {
[08:28:08.415]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:08.415]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.415]                 ...future.rng), started = ...future.startTime, 
[08:28:08.415]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:08.415]             version = "1.8"), class = "FutureResult")
[08:28:08.415]     }, finally = {
[08:28:08.415]         if (!identical(...future.workdir, getwd())) 
[08:28:08.415]             setwd(...future.workdir)
[08:28:08.415]         {
[08:28:08.415]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:08.415]                 ...future.oldOptions$nwarnings <- NULL
[08:28:08.415]             }
[08:28:08.415]             base::options(...future.oldOptions)
[08:28:08.415]             if (.Platform$OS.type == "windows") {
[08:28:08.415]                 old_names <- names(...future.oldEnvVars)
[08:28:08.415]                 envs <- base::Sys.getenv()
[08:28:08.415]                 names <- names(envs)
[08:28:08.415]                 common <- intersect(names, old_names)
[08:28:08.415]                 added <- setdiff(names, old_names)
[08:28:08.415]                 removed <- setdiff(old_names, names)
[08:28:08.415]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:08.415]                   envs[common]]
[08:28:08.415]                 NAMES <- toupper(changed)
[08:28:08.415]                 args <- list()
[08:28:08.415]                 for (kk in seq_along(NAMES)) {
[08:28:08.415]                   name <- changed[[kk]]
[08:28:08.415]                   NAME <- NAMES[[kk]]
[08:28:08.415]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.415]                     next
[08:28:08.415]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.415]                 }
[08:28:08.415]                 NAMES <- toupper(added)
[08:28:08.415]                 for (kk in seq_along(NAMES)) {
[08:28:08.415]                   name <- added[[kk]]
[08:28:08.415]                   NAME <- NAMES[[kk]]
[08:28:08.415]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.415]                     next
[08:28:08.415]                   args[[name]] <- ""
[08:28:08.415]                 }
[08:28:08.415]                 NAMES <- toupper(removed)
[08:28:08.415]                 for (kk in seq_along(NAMES)) {
[08:28:08.415]                   name <- removed[[kk]]
[08:28:08.415]                   NAME <- NAMES[[kk]]
[08:28:08.415]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.415]                     next
[08:28:08.415]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.415]                 }
[08:28:08.415]                 if (length(args) > 0) 
[08:28:08.415]                   base::do.call(base::Sys.setenv, args = args)
[08:28:08.415]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:08.415]             }
[08:28:08.415]             else {
[08:28:08.415]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:08.415]             }
[08:28:08.415]             {
[08:28:08.415]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:08.415]                   0L) {
[08:28:08.415]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:08.415]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:08.415]                   base::options(opts)
[08:28:08.415]                 }
[08:28:08.415]                 {
[08:28:08.415]                   {
[08:28:08.415]                     NULL
[08:28:08.415]                     RNGkind("Mersenne-Twister")
[08:28:08.415]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:08.415]                       inherits = FALSE)
[08:28:08.415]                   }
[08:28:08.415]                   options(future.plan = NULL)
[08:28:08.415]                   if (is.na(NA_character_)) 
[08:28:08.415]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.415]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:08.415]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:08.415]                     .init = FALSE)
[08:28:08.415]                 }
[08:28:08.415]             }
[08:28:08.415]         }
[08:28:08.415]     })
[08:28:08.415]     if (TRUE) {
[08:28:08.415]         base::sink(type = "output", split = FALSE)
[08:28:08.415]         if (TRUE) {
[08:28:08.415]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:08.415]         }
[08:28:08.415]         else {
[08:28:08.415]             ...future.result["stdout"] <- base::list(NULL)
[08:28:08.415]         }
[08:28:08.415]         base::close(...future.stdout)
[08:28:08.415]         ...future.stdout <- NULL
[08:28:08.415]     }
[08:28:08.415]     ...future.result$conditions <- ...future.conditions
[08:28:08.415]     ...future.result$finished <- base::Sys.time()
[08:28:08.415]     ...future.result
[08:28:08.415] }
[08:28:08.417] assign_globals() ...
[08:28:08.417] List of 1
[08:28:08.417]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:28:08.417]   .. ..@ .Data     :function (x)  
[08:28:08.417]   .. ..@ generic   : chr "my_fcn"
[08:28:08.417]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:28:08.417]   .. ..@ package   : chr ".GlobalEnv"
[08:28:08.417]   .. ..@ group     : list()
[08:28:08.417]   .. ..@ valueClass: chr(0) 
[08:28:08.417]   .. ..@ signature : chr "x"
[08:28:08.417]   .. ..@ default   : NULL
[08:28:08.417]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:28:08.417]  - attr(*, "where")=List of 1
[08:28:08.417]   ..$ my_fcn:<environment: R_EmptyEnv> 
[08:28:08.417]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:08.417]  - attr(*, "resolved")= logi FALSE
[08:28:08.417]  - attr(*, "total_size")= num 2591
[08:28:08.417]  - attr(*, "already-done")= logi TRUE
[08:28:08.422] - reassign environment for ‘my_fcn’
[08:28:08.422] - copied ‘my_fcn’ to environment
[08:28:08.422] assign_globals() ... done
[08:28:08.422] plan(): Setting new future strategy stack:
[08:28:08.422] List of future strategies:
[08:28:08.422] 1. sequential:
[08:28:08.422]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.422]    - tweaked: FALSE
[08:28:08.422]    - call: NULL
[08:28:08.423] plan(): nbrOfWorkers() = 1
[08:28:08.424] plan(): Setting new future strategy stack:
[08:28:08.424] List of future strategies:
[08:28:08.424] 1. sequential:
[08:28:08.424]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.424]    - tweaked: FALSE
[08:28:08.424]    - call: plan(strategy)
[08:28:08.425] plan(): nbrOfWorkers() = 1
[08:28:08.425] SequentialFuture started (and completed)
[08:28:08.425] signalConditions() ...
[08:28:08.425]  - include = ‘immediateCondition’
[08:28:08.425]  - exclude = 
[08:28:08.425]  - resignal = FALSE
[08:28:08.425]  - Number of conditions: 1
[08:28:08.427] signalConditions() ... done
[08:28:08.427] - Launch lazy future ... done
[08:28:08.427] run() for ‘SequentialFuture’ ... done
[08:28:08.427] signalConditions() ...
[08:28:08.427]  - include = ‘immediateCondition’
[08:28:08.427]  - exclude = 
[08:28:08.427]  - resignal = FALSE
[08:28:08.427]  - Number of conditions: 1
[08:28:08.427] signalConditions() ... done
[08:28:08.427] Future state: ‘finished’
[08:28:08.428] signalConditions() ...
[08:28:08.428]  - include = ‘condition’
[08:28:08.428]  - exclude = ‘immediateCondition’
[08:28:08.428]  - resignal = TRUE
[08:28:08.428]  - Number of conditions: 1
[08:28:08.428]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[08:28:08.428] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multicore
[08:28:08.428] plan(): Setting new future strategy stack:
[08:28:08.428] List of future strategies:
[08:28:08.428] 1. multicore:
[08:28:08.428]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:08.428]    - tweaked: FALSE
[08:28:08.428]    - call: plan(strategy)
[08:28:08.430] plan(): nbrOfWorkers() = 2
[08:28:08.430] getGlobalsAndPackages() ...
[08:28:08.430] Searching for globals...
[08:28:08.432] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:28:08.433] Searching for globals ... DONE
[08:28:08.433] Resolving globals: FALSE
[08:28:08.433] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[08:28:08.433] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[08:28:08.434] - globals: [1] ‘my_fcn’
[08:28:08.434] 
[08:28:08.434] getGlobalsAndPackages() ... DONE
[08:28:08.434] run() for ‘Future’ ...
[08:28:08.434] - state: ‘created’
[08:28:08.434] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:08.436] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:08.436] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:08.436]   - Field: ‘label’
[08:28:08.436]   - Field: ‘local’
[08:28:08.436]   - Field: ‘owner’
[08:28:08.436]   - Field: ‘envir’
[08:28:08.436]   - Field: ‘workers’
[08:28:08.436]   - Field: ‘packages’
[08:28:08.437]   - Field: ‘gc’
[08:28:08.437]   - Field: ‘job’
[08:28:08.437]   - Field: ‘conditions’
[08:28:08.437]   - Field: ‘expr’
[08:28:08.437]   - Field: ‘uuid’
[08:28:08.437]   - Field: ‘seed’
[08:28:08.437]   - Field: ‘version’
[08:28:08.437]   - Field: ‘result’
[08:28:08.437]   - Field: ‘asynchronous’
[08:28:08.437]   - Field: ‘calls’
[08:28:08.437]   - Field: ‘globals’
[08:28:08.437]   - Field: ‘stdout’
[08:28:08.437]   - Field: ‘earlySignal’
[08:28:08.438]   - Field: ‘lazy’
[08:28:08.438]   - Field: ‘state’
[08:28:08.438] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:08.438] - Launch lazy future ...
[08:28:08.439] Packages needed by the future expression (n = 0): <none>
[08:28:08.439] Packages needed by future strategies (n = 0): <none>
[08:28:08.439] {
[08:28:08.439]     {
[08:28:08.439]         {
[08:28:08.439]             ...future.startTime <- base::Sys.time()
[08:28:08.439]             {
[08:28:08.439]                 {
[08:28:08.439]                   {
[08:28:08.439]                     {
[08:28:08.439]                       base::local({
[08:28:08.439]                         has_future <- base::requireNamespace("future", 
[08:28:08.439]                           quietly = TRUE)
[08:28:08.439]                         if (has_future) {
[08:28:08.439]                           ns <- base::getNamespace("future")
[08:28:08.439]                           version <- ns[[".package"]][["version"]]
[08:28:08.439]                           if (is.null(version)) 
[08:28:08.439]                             version <- utils::packageVersion("future")
[08:28:08.439]                         }
[08:28:08.439]                         else {
[08:28:08.439]                           version <- NULL
[08:28:08.439]                         }
[08:28:08.439]                         if (!has_future || version < "1.8.0") {
[08:28:08.439]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:08.439]                             "", base::R.version$version.string), 
[08:28:08.439]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:08.439]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:08.439]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:08.439]                               "release", "version")], collapse = " "), 
[08:28:08.439]                             hostname = base::Sys.info()[["nodename"]])
[08:28:08.439]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:08.439]                             info)
[08:28:08.439]                           info <- base::paste(info, collapse = "; ")
[08:28:08.439]                           if (!has_future) {
[08:28:08.439]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:08.439]                               info)
[08:28:08.439]                           }
[08:28:08.439]                           else {
[08:28:08.439]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:08.439]                               info, version)
[08:28:08.439]                           }
[08:28:08.439]                           base::stop(msg)
[08:28:08.439]                         }
[08:28:08.439]                       })
[08:28:08.439]                     }
[08:28:08.439]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:08.439]                     base::options(mc.cores = 1L)
[08:28:08.439]                   }
[08:28:08.439]                   ...future.strategy.old <- future::plan("list")
[08:28:08.439]                   options(future.plan = NULL)
[08:28:08.439]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.439]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:08.439]                 }
[08:28:08.439]                 ...future.workdir <- getwd()
[08:28:08.439]             }
[08:28:08.439]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:08.439]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:08.439]         }
[08:28:08.439]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:08.439]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:08.439]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:08.439]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:08.439]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:08.439]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:08.439]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:08.439]             base::names(...future.oldOptions))
[08:28:08.439]     }
[08:28:08.439]     if (FALSE) {
[08:28:08.439]     }
[08:28:08.439]     else {
[08:28:08.439]         if (TRUE) {
[08:28:08.439]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:08.439]                 open = "w")
[08:28:08.439]         }
[08:28:08.439]         else {
[08:28:08.439]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:08.439]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:08.439]         }
[08:28:08.439]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:08.439]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:08.439]             base::sink(type = "output", split = FALSE)
[08:28:08.439]             base::close(...future.stdout)
[08:28:08.439]         }, add = TRUE)
[08:28:08.439]     }
[08:28:08.439]     ...future.frame <- base::sys.nframe()
[08:28:08.439]     ...future.conditions <- base::list()
[08:28:08.439]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:08.439]     if (FALSE) {
[08:28:08.439]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:08.439]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:08.439]     }
[08:28:08.439]     ...future.result <- base::tryCatch({
[08:28:08.439]         base::withCallingHandlers({
[08:28:08.439]             ...future.value <- base::withVisible(base::local({
[08:28:08.439]                 withCallingHandlers({
[08:28:08.439]                   {
[08:28:08.439]                     my_fcn
[08:28:08.439]                   }
[08:28:08.439]                 }, immediateCondition = function(cond) {
[08:28:08.439]                   save_rds <- function (object, pathname, ...) 
[08:28:08.439]                   {
[08:28:08.439]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:08.439]                     if (file_test("-f", pathname_tmp)) {
[08:28:08.439]                       fi_tmp <- file.info(pathname_tmp)
[08:28:08.439]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:08.439]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:08.439]                         fi_tmp[["mtime"]])
[08:28:08.439]                     }
[08:28:08.439]                     tryCatch({
[08:28:08.439]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:08.439]                     }, error = function(ex) {
[08:28:08.439]                       msg <- conditionMessage(ex)
[08:28:08.439]                       fi_tmp <- file.info(pathname_tmp)
[08:28:08.439]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:08.439]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:08.439]                         fi_tmp[["mtime"]], msg)
[08:28:08.439]                       ex$message <- msg
[08:28:08.439]                       stop(ex)
[08:28:08.439]                     })
[08:28:08.439]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:08.439]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:08.439]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:08.439]                       fi_tmp <- file.info(pathname_tmp)
[08:28:08.439]                       fi <- file.info(pathname)
[08:28:08.439]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:08.439]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:08.439]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:08.439]                         fi[["size"]], fi[["mtime"]])
[08:28:08.439]                       stop(msg)
[08:28:08.439]                     }
[08:28:08.439]                     invisible(pathname)
[08:28:08.439]                   }
[08:28:08.439]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:08.439]                     rootPath = tempdir()) 
[08:28:08.439]                   {
[08:28:08.439]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:08.439]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:08.439]                       tmpdir = path, fileext = ".rds")
[08:28:08.439]                     save_rds(obj, file)
[08:28:08.439]                   }
[08:28:08.439]                   saveImmediateCondition(cond, path = "/tmp/RtmpFyzo0U/.future/immediateConditions")
[08:28:08.439]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.439]                   {
[08:28:08.439]                     inherits <- base::inherits
[08:28:08.439]                     invokeRestart <- base::invokeRestart
[08:28:08.439]                     is.null <- base::is.null
[08:28:08.439]                     muffled <- FALSE
[08:28:08.439]                     if (inherits(cond, "message")) {
[08:28:08.439]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:08.439]                       if (muffled) 
[08:28:08.439]                         invokeRestart("muffleMessage")
[08:28:08.439]                     }
[08:28:08.439]                     else if (inherits(cond, "warning")) {
[08:28:08.439]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:08.439]                       if (muffled) 
[08:28:08.439]                         invokeRestart("muffleWarning")
[08:28:08.439]                     }
[08:28:08.439]                     else if (inherits(cond, "condition")) {
[08:28:08.439]                       if (!is.null(pattern)) {
[08:28:08.439]                         computeRestarts <- base::computeRestarts
[08:28:08.439]                         grepl <- base::grepl
[08:28:08.439]                         restarts <- computeRestarts(cond)
[08:28:08.439]                         for (restart in restarts) {
[08:28:08.439]                           name <- restart$name
[08:28:08.439]                           if (is.null(name)) 
[08:28:08.439]                             next
[08:28:08.439]                           if (!grepl(pattern, name)) 
[08:28:08.439]                             next
[08:28:08.439]                           invokeRestart(restart)
[08:28:08.439]                           muffled <- TRUE
[08:28:08.439]                           break
[08:28:08.439]                         }
[08:28:08.439]                       }
[08:28:08.439]                     }
[08:28:08.439]                     invisible(muffled)
[08:28:08.439]                   }
[08:28:08.439]                   muffleCondition(cond)
[08:28:08.439]                 })
[08:28:08.439]             }))
[08:28:08.439]             future::FutureResult(value = ...future.value$value, 
[08:28:08.439]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.439]                   ...future.rng), globalenv = if (FALSE) 
[08:28:08.439]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:08.439]                     ...future.globalenv.names))
[08:28:08.439]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:08.439]         }, condition = base::local({
[08:28:08.439]             c <- base::c
[08:28:08.439]             inherits <- base::inherits
[08:28:08.439]             invokeRestart <- base::invokeRestart
[08:28:08.439]             length <- base::length
[08:28:08.439]             list <- base::list
[08:28:08.439]             seq.int <- base::seq.int
[08:28:08.439]             signalCondition <- base::signalCondition
[08:28:08.439]             sys.calls <- base::sys.calls
[08:28:08.439]             `[[` <- base::`[[`
[08:28:08.439]             `+` <- base::`+`
[08:28:08.439]             `<<-` <- base::`<<-`
[08:28:08.439]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:08.439]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:08.439]                   3L)]
[08:28:08.439]             }
[08:28:08.439]             function(cond) {
[08:28:08.439]                 is_error <- inherits(cond, "error")
[08:28:08.439]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:08.439]                   NULL)
[08:28:08.439]                 if (is_error) {
[08:28:08.439]                   sessionInformation <- function() {
[08:28:08.439]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:08.439]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:08.439]                       search = base::search(), system = base::Sys.info())
[08:28:08.439]                   }
[08:28:08.439]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.439]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:08.439]                     cond$call), session = sessionInformation(), 
[08:28:08.439]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:08.439]                   signalCondition(cond)
[08:28:08.439]                 }
[08:28:08.439]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:08.439]                 "immediateCondition"))) {
[08:28:08.439]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:08.439]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.439]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:08.439]                   if (TRUE && !signal) {
[08:28:08.439]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.439]                     {
[08:28:08.439]                       inherits <- base::inherits
[08:28:08.439]                       invokeRestart <- base::invokeRestart
[08:28:08.439]                       is.null <- base::is.null
[08:28:08.439]                       muffled <- FALSE
[08:28:08.439]                       if (inherits(cond, "message")) {
[08:28:08.439]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.439]                         if (muffled) 
[08:28:08.439]                           invokeRestart("muffleMessage")
[08:28:08.439]                       }
[08:28:08.439]                       else if (inherits(cond, "warning")) {
[08:28:08.439]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.439]                         if (muffled) 
[08:28:08.439]                           invokeRestart("muffleWarning")
[08:28:08.439]                       }
[08:28:08.439]                       else if (inherits(cond, "condition")) {
[08:28:08.439]                         if (!is.null(pattern)) {
[08:28:08.439]                           computeRestarts <- base::computeRestarts
[08:28:08.439]                           grepl <- base::grepl
[08:28:08.439]                           restarts <- computeRestarts(cond)
[08:28:08.439]                           for (restart in restarts) {
[08:28:08.439]                             name <- restart$name
[08:28:08.439]                             if (is.null(name)) 
[08:28:08.439]                               next
[08:28:08.439]                             if (!grepl(pattern, name)) 
[08:28:08.439]                               next
[08:28:08.439]                             invokeRestart(restart)
[08:28:08.439]                             muffled <- TRUE
[08:28:08.439]                             break
[08:28:08.439]                           }
[08:28:08.439]                         }
[08:28:08.439]                       }
[08:28:08.439]                       invisible(muffled)
[08:28:08.439]                     }
[08:28:08.439]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.439]                   }
[08:28:08.439]                 }
[08:28:08.439]                 else {
[08:28:08.439]                   if (TRUE) {
[08:28:08.439]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.439]                     {
[08:28:08.439]                       inherits <- base::inherits
[08:28:08.439]                       invokeRestart <- base::invokeRestart
[08:28:08.439]                       is.null <- base::is.null
[08:28:08.439]                       muffled <- FALSE
[08:28:08.439]                       if (inherits(cond, "message")) {
[08:28:08.439]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.439]                         if (muffled) 
[08:28:08.439]                           invokeRestart("muffleMessage")
[08:28:08.439]                       }
[08:28:08.439]                       else if (inherits(cond, "warning")) {
[08:28:08.439]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.439]                         if (muffled) 
[08:28:08.439]                           invokeRestart("muffleWarning")
[08:28:08.439]                       }
[08:28:08.439]                       else if (inherits(cond, "condition")) {
[08:28:08.439]                         if (!is.null(pattern)) {
[08:28:08.439]                           computeRestarts <- base::computeRestarts
[08:28:08.439]                           grepl <- base::grepl
[08:28:08.439]                           restarts <- computeRestarts(cond)
[08:28:08.439]                           for (restart in restarts) {
[08:28:08.439]                             name <- restart$name
[08:28:08.439]                             if (is.null(name)) 
[08:28:08.439]                               next
[08:28:08.439]                             if (!grepl(pattern, name)) 
[08:28:08.439]                               next
[08:28:08.439]                             invokeRestart(restart)
[08:28:08.439]                             muffled <- TRUE
[08:28:08.439]                             break
[08:28:08.439]                           }
[08:28:08.439]                         }
[08:28:08.439]                       }
[08:28:08.439]                       invisible(muffled)
[08:28:08.439]                     }
[08:28:08.439]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.439]                   }
[08:28:08.439]                 }
[08:28:08.439]             }
[08:28:08.439]         }))
[08:28:08.439]     }, error = function(ex) {
[08:28:08.439]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:08.439]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.439]                 ...future.rng), started = ...future.startTime, 
[08:28:08.439]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:08.439]             version = "1.8"), class = "FutureResult")
[08:28:08.439]     }, finally = {
[08:28:08.439]         if (!identical(...future.workdir, getwd())) 
[08:28:08.439]             setwd(...future.workdir)
[08:28:08.439]         {
[08:28:08.439]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:08.439]                 ...future.oldOptions$nwarnings <- NULL
[08:28:08.439]             }
[08:28:08.439]             base::options(...future.oldOptions)
[08:28:08.439]             if (.Platform$OS.type == "windows") {
[08:28:08.439]                 old_names <- names(...future.oldEnvVars)
[08:28:08.439]                 envs <- base::Sys.getenv()
[08:28:08.439]                 names <- names(envs)
[08:28:08.439]                 common <- intersect(names, old_names)
[08:28:08.439]                 added <- setdiff(names, old_names)
[08:28:08.439]                 removed <- setdiff(old_names, names)
[08:28:08.439]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:08.439]                   envs[common]]
[08:28:08.439]                 NAMES <- toupper(changed)
[08:28:08.439]                 args <- list()
[08:28:08.439]                 for (kk in seq_along(NAMES)) {
[08:28:08.439]                   name <- changed[[kk]]
[08:28:08.439]                   NAME <- NAMES[[kk]]
[08:28:08.439]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.439]                     next
[08:28:08.439]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.439]                 }
[08:28:08.439]                 NAMES <- toupper(added)
[08:28:08.439]                 for (kk in seq_along(NAMES)) {
[08:28:08.439]                   name <- added[[kk]]
[08:28:08.439]                   NAME <- NAMES[[kk]]
[08:28:08.439]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.439]                     next
[08:28:08.439]                   args[[name]] <- ""
[08:28:08.439]                 }
[08:28:08.439]                 NAMES <- toupper(removed)
[08:28:08.439]                 for (kk in seq_along(NAMES)) {
[08:28:08.439]                   name <- removed[[kk]]
[08:28:08.439]                   NAME <- NAMES[[kk]]
[08:28:08.439]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.439]                     next
[08:28:08.439]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.439]                 }
[08:28:08.439]                 if (length(args) > 0) 
[08:28:08.439]                   base::do.call(base::Sys.setenv, args = args)
[08:28:08.439]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:08.439]             }
[08:28:08.439]             else {
[08:28:08.439]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:08.439]             }
[08:28:08.439]             {
[08:28:08.439]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:08.439]                   0L) {
[08:28:08.439]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:08.439]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:08.439]                   base::options(opts)
[08:28:08.439]                 }
[08:28:08.439]                 {
[08:28:08.439]                   {
[08:28:08.439]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:08.439]                     NULL
[08:28:08.439]                   }
[08:28:08.439]                   options(future.plan = NULL)
[08:28:08.439]                   if (is.na(NA_character_)) 
[08:28:08.439]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.439]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:08.439]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:08.439]                     .init = FALSE)
[08:28:08.439]                 }
[08:28:08.439]             }
[08:28:08.439]         }
[08:28:08.439]     })
[08:28:08.439]     if (TRUE) {
[08:28:08.439]         base::sink(type = "output", split = FALSE)
[08:28:08.439]         if (TRUE) {
[08:28:08.439]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:08.439]         }
[08:28:08.439]         else {
[08:28:08.439]             ...future.result["stdout"] <- base::list(NULL)
[08:28:08.439]         }
[08:28:08.439]         base::close(...future.stdout)
[08:28:08.439]         ...future.stdout <- NULL
[08:28:08.439]     }
[08:28:08.439]     ...future.result$conditions <- ...future.conditions
[08:28:08.439]     ...future.result$finished <- base::Sys.time()
[08:28:08.439]     ...future.result
[08:28:08.439] }
[08:28:08.441] assign_globals() ...
[08:28:08.441] List of 1
[08:28:08.441]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:28:08.441]   .. ..@ .Data     :function (x)  
[08:28:08.441]   .. ..@ generic   : chr "my_fcn"
[08:28:08.441]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:28:08.441]   .. ..@ package   : chr ".GlobalEnv"
[08:28:08.441]   .. ..@ group     : list()
[08:28:08.441]   .. ..@ valueClass: chr(0) 
[08:28:08.441]   .. ..@ signature : chr "x"
[08:28:08.441]   .. ..@ default   : NULL
[08:28:08.441]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:28:08.441]  - attr(*, "where")=List of 1
[08:28:08.441]   ..$ my_fcn:<environment: R_EmptyEnv> 
[08:28:08.441]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:08.441]  - attr(*, "resolved")= logi FALSE
[08:28:08.441]  - attr(*, "total_size")= num 2591
[08:28:08.441]  - attr(*, "already-done")= logi TRUE
[08:28:08.446] - reassign environment for ‘my_fcn’
[08:28:08.446] - copied ‘my_fcn’ to environment
[08:28:08.446] assign_globals() ... done
[08:28:08.446] requestCore(): workers = 2
[08:28:08.449] MulticoreFuture started
[08:28:08.450] - Launch lazy future ... done
[08:28:08.450] plan(): Setting new future strategy stack:
[08:28:08.450] run() for ‘MulticoreFuture’ ... done
[08:28:08.451] result() for MulticoreFuture ...
[08:28:08.450] List of future strategies:
[08:28:08.450] 1. sequential:
[08:28:08.450]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.450]    - tweaked: FALSE
[08:28:08.450]    - call: NULL
[08:28:08.451] plan(): nbrOfWorkers() = 1
[08:28:08.453] plan(): Setting new future strategy stack:
[08:28:08.453] List of future strategies:
[08:28:08.453] 1. multicore:
[08:28:08.453]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:08.453]    - tweaked: FALSE
[08:28:08.453]    - call: plan(strategy)
[08:28:08.456] plan(): nbrOfWorkers() = 2
[08:28:08.464] result() for MulticoreFuture ...
[08:28:08.464] result() for MulticoreFuture ... done
[08:28:08.465] result() for MulticoreFuture ... done
[08:28:08.465] result() for MulticoreFuture ...
[08:28:08.465] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55d3fc2bb670>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:28:08.465] getGlobalsAndPackages() ...
[08:28:08.465] Searching for globals...
[08:28:08.468] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:28:08.469] Searching for globals ... DONE
[08:28:08.469] Resolving globals: FALSE
[08:28:08.469] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[08:28:08.470] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[08:28:08.470] - globals: [1] ‘my_fcn’
[08:28:08.470] 
[08:28:08.470] getGlobalsAndPackages() ... DONE
[08:28:08.471] run() for ‘Future’ ...
[08:28:08.471] - state: ‘created’
[08:28:08.471] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:28:08.473] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:08.473] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:28:08.473]   - Field: ‘label’
[08:28:08.473]   - Field: ‘local’
[08:28:08.473]   - Field: ‘owner’
[08:28:08.473]   - Field: ‘envir’
[08:28:08.473]   - Field: ‘workers’
[08:28:08.474]   - Field: ‘packages’
[08:28:08.474]   - Field: ‘gc’
[08:28:08.474]   - Field: ‘job’
[08:28:08.474]   - Field: ‘conditions’
[08:28:08.474]   - Field: ‘expr’
[08:28:08.474]   - Field: ‘uuid’
[08:28:08.474]   - Field: ‘seed’
[08:28:08.474]   - Field: ‘version’
[08:28:08.474]   - Field: ‘result’
[08:28:08.475]   - Field: ‘asynchronous’
[08:28:08.475]   - Field: ‘calls’
[08:28:08.475]   - Field: ‘globals’
[08:28:08.475]   - Field: ‘stdout’
[08:28:08.475]   - Field: ‘earlySignal’
[08:28:08.475]   - Field: ‘lazy’
[08:28:08.475]   - Field: ‘state’
[08:28:08.475] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:28:08.475] - Launch lazy future ...
[08:28:08.476] Packages needed by the future expression (n = 0): <none>
[08:28:08.476] Packages needed by future strategies (n = 0): <none>
[08:28:08.476] {
[08:28:08.476]     {
[08:28:08.476]         {
[08:28:08.476]             ...future.startTime <- base::Sys.time()
[08:28:08.476]             {
[08:28:08.476]                 {
[08:28:08.476]                   {
[08:28:08.476]                     {
[08:28:08.476]                       base::local({
[08:28:08.476]                         has_future <- base::requireNamespace("future", 
[08:28:08.476]                           quietly = TRUE)
[08:28:08.476]                         if (has_future) {
[08:28:08.476]                           ns <- base::getNamespace("future")
[08:28:08.476]                           version <- ns[[".package"]][["version"]]
[08:28:08.476]                           if (is.null(version)) 
[08:28:08.476]                             version <- utils::packageVersion("future")
[08:28:08.476]                         }
[08:28:08.476]                         else {
[08:28:08.476]                           version <- NULL
[08:28:08.476]                         }
[08:28:08.476]                         if (!has_future || version < "1.8.0") {
[08:28:08.476]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:08.476]                             "", base::R.version$version.string), 
[08:28:08.476]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:08.476]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:08.476]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:08.476]                               "release", "version")], collapse = " "), 
[08:28:08.476]                             hostname = base::Sys.info()[["nodename"]])
[08:28:08.476]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:08.476]                             info)
[08:28:08.476]                           info <- base::paste(info, collapse = "; ")
[08:28:08.476]                           if (!has_future) {
[08:28:08.476]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:08.476]                               info)
[08:28:08.476]                           }
[08:28:08.476]                           else {
[08:28:08.476]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:08.476]                               info, version)
[08:28:08.476]                           }
[08:28:08.476]                           base::stop(msg)
[08:28:08.476]                         }
[08:28:08.476]                       })
[08:28:08.476]                     }
[08:28:08.476]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:08.476]                     base::options(mc.cores = 1L)
[08:28:08.476]                   }
[08:28:08.476]                   ...future.strategy.old <- future::plan("list")
[08:28:08.476]                   options(future.plan = NULL)
[08:28:08.476]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.476]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:08.476]                 }
[08:28:08.476]                 ...future.workdir <- getwd()
[08:28:08.476]             }
[08:28:08.476]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:08.476]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:08.476]         }
[08:28:08.476]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:08.476]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:08.476]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:08.476]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:08.476]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:08.476]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:08.476]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:08.476]             base::names(...future.oldOptions))
[08:28:08.476]     }
[08:28:08.476]     if (FALSE) {
[08:28:08.476]     }
[08:28:08.476]     else {
[08:28:08.476]         if (TRUE) {
[08:28:08.476]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:08.476]                 open = "w")
[08:28:08.476]         }
[08:28:08.476]         else {
[08:28:08.476]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:08.476]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:08.476]         }
[08:28:08.476]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:08.476]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:08.476]             base::sink(type = "output", split = FALSE)
[08:28:08.476]             base::close(...future.stdout)
[08:28:08.476]         }, add = TRUE)
[08:28:08.476]     }
[08:28:08.476]     ...future.frame <- base::sys.nframe()
[08:28:08.476]     ...future.conditions <- base::list()
[08:28:08.476]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:08.476]     if (FALSE) {
[08:28:08.476]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:08.476]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:08.476]     }
[08:28:08.476]     ...future.result <- base::tryCatch({
[08:28:08.476]         base::withCallingHandlers({
[08:28:08.476]             ...future.value <- base::withVisible(base::local({
[08:28:08.476]                 withCallingHandlers({
[08:28:08.476]                   {
[08:28:08.476]                     my_fcn(3)
[08:28:08.476]                   }
[08:28:08.476]                 }, immediateCondition = function(cond) {
[08:28:08.476]                   save_rds <- function (object, pathname, ...) 
[08:28:08.476]                   {
[08:28:08.476]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:28:08.476]                     if (file_test("-f", pathname_tmp)) {
[08:28:08.476]                       fi_tmp <- file.info(pathname_tmp)
[08:28:08.476]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:28:08.476]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:08.476]                         fi_tmp[["mtime"]])
[08:28:08.476]                     }
[08:28:08.476]                     tryCatch({
[08:28:08.476]                       saveRDS(object, file = pathname_tmp, ...)
[08:28:08.476]                     }, error = function(ex) {
[08:28:08.476]                       msg <- conditionMessage(ex)
[08:28:08.476]                       fi_tmp <- file.info(pathname_tmp)
[08:28:08.476]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:28:08.476]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:08.476]                         fi_tmp[["mtime"]], msg)
[08:28:08.476]                       ex$message <- msg
[08:28:08.476]                       stop(ex)
[08:28:08.476]                     })
[08:28:08.476]                     stopifnot(file_test("-f", pathname_tmp))
[08:28:08.476]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:28:08.476]                     if (!res || file_test("-f", pathname_tmp)) {
[08:28:08.476]                       fi_tmp <- file.info(pathname_tmp)
[08:28:08.476]                       fi <- file.info(pathname)
[08:28:08.476]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:28:08.476]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:28:08.476]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:28:08.476]                         fi[["size"]], fi[["mtime"]])
[08:28:08.476]                       stop(msg)
[08:28:08.476]                     }
[08:28:08.476]                     invisible(pathname)
[08:28:08.476]                   }
[08:28:08.476]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:28:08.476]                     rootPath = tempdir()) 
[08:28:08.476]                   {
[08:28:08.476]                     obj <- list(time = Sys.time(), condition = cond)
[08:28:08.476]                     file <- tempfile(pattern = class(cond)[1], 
[08:28:08.476]                       tmpdir = path, fileext = ".rds")
[08:28:08.476]                     save_rds(obj, file)
[08:28:08.476]                   }
[08:28:08.476]                   saveImmediateCondition(cond, path = "/tmp/RtmpFyzo0U/.future/immediateConditions")
[08:28:08.476]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.476]                   {
[08:28:08.476]                     inherits <- base::inherits
[08:28:08.476]                     invokeRestart <- base::invokeRestart
[08:28:08.476]                     is.null <- base::is.null
[08:28:08.476]                     muffled <- FALSE
[08:28:08.476]                     if (inherits(cond, "message")) {
[08:28:08.476]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:08.476]                       if (muffled) 
[08:28:08.476]                         invokeRestart("muffleMessage")
[08:28:08.476]                     }
[08:28:08.476]                     else if (inherits(cond, "warning")) {
[08:28:08.476]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:08.476]                       if (muffled) 
[08:28:08.476]                         invokeRestart("muffleWarning")
[08:28:08.476]                     }
[08:28:08.476]                     else if (inherits(cond, "condition")) {
[08:28:08.476]                       if (!is.null(pattern)) {
[08:28:08.476]                         computeRestarts <- base::computeRestarts
[08:28:08.476]                         grepl <- base::grepl
[08:28:08.476]                         restarts <- computeRestarts(cond)
[08:28:08.476]                         for (restart in restarts) {
[08:28:08.476]                           name <- restart$name
[08:28:08.476]                           if (is.null(name)) 
[08:28:08.476]                             next
[08:28:08.476]                           if (!grepl(pattern, name)) 
[08:28:08.476]                             next
[08:28:08.476]                           invokeRestart(restart)
[08:28:08.476]                           muffled <- TRUE
[08:28:08.476]                           break
[08:28:08.476]                         }
[08:28:08.476]                       }
[08:28:08.476]                     }
[08:28:08.476]                     invisible(muffled)
[08:28:08.476]                   }
[08:28:08.476]                   muffleCondition(cond)
[08:28:08.476]                 })
[08:28:08.476]             }))
[08:28:08.476]             future::FutureResult(value = ...future.value$value, 
[08:28:08.476]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.476]                   ...future.rng), globalenv = if (FALSE) 
[08:28:08.476]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:08.476]                     ...future.globalenv.names))
[08:28:08.476]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:08.476]         }, condition = base::local({
[08:28:08.476]             c <- base::c
[08:28:08.476]             inherits <- base::inherits
[08:28:08.476]             invokeRestart <- base::invokeRestart
[08:28:08.476]             length <- base::length
[08:28:08.476]             list <- base::list
[08:28:08.476]             seq.int <- base::seq.int
[08:28:08.476]             signalCondition <- base::signalCondition
[08:28:08.476]             sys.calls <- base::sys.calls
[08:28:08.476]             `[[` <- base::`[[`
[08:28:08.476]             `+` <- base::`+`
[08:28:08.476]             `<<-` <- base::`<<-`
[08:28:08.476]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:08.476]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:08.476]                   3L)]
[08:28:08.476]             }
[08:28:08.476]             function(cond) {
[08:28:08.476]                 is_error <- inherits(cond, "error")
[08:28:08.476]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:08.476]                   NULL)
[08:28:08.476]                 if (is_error) {
[08:28:08.476]                   sessionInformation <- function() {
[08:28:08.476]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:08.476]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:08.476]                       search = base::search(), system = base::Sys.info())
[08:28:08.476]                   }
[08:28:08.476]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.476]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:08.476]                     cond$call), session = sessionInformation(), 
[08:28:08.476]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:08.476]                   signalCondition(cond)
[08:28:08.476]                 }
[08:28:08.476]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:08.476]                 "immediateCondition"))) {
[08:28:08.476]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:08.476]                   ...future.conditions[[length(...future.conditions) + 
[08:28:08.476]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:08.476]                   if (TRUE && !signal) {
[08:28:08.476]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.476]                     {
[08:28:08.476]                       inherits <- base::inherits
[08:28:08.476]                       invokeRestart <- base::invokeRestart
[08:28:08.476]                       is.null <- base::is.null
[08:28:08.476]                       muffled <- FALSE
[08:28:08.476]                       if (inherits(cond, "message")) {
[08:28:08.476]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.476]                         if (muffled) 
[08:28:08.476]                           invokeRestart("muffleMessage")
[08:28:08.476]                       }
[08:28:08.476]                       else if (inherits(cond, "warning")) {
[08:28:08.476]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.476]                         if (muffled) 
[08:28:08.476]                           invokeRestart("muffleWarning")
[08:28:08.476]                       }
[08:28:08.476]                       else if (inherits(cond, "condition")) {
[08:28:08.476]                         if (!is.null(pattern)) {
[08:28:08.476]                           computeRestarts <- base::computeRestarts
[08:28:08.476]                           grepl <- base::grepl
[08:28:08.476]                           restarts <- computeRestarts(cond)
[08:28:08.476]                           for (restart in restarts) {
[08:28:08.476]                             name <- restart$name
[08:28:08.476]                             if (is.null(name)) 
[08:28:08.476]                               next
[08:28:08.476]                             if (!grepl(pattern, name)) 
[08:28:08.476]                               next
[08:28:08.476]                             invokeRestart(restart)
[08:28:08.476]                             muffled <- TRUE
[08:28:08.476]                             break
[08:28:08.476]                           }
[08:28:08.476]                         }
[08:28:08.476]                       }
[08:28:08.476]                       invisible(muffled)
[08:28:08.476]                     }
[08:28:08.476]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.476]                   }
[08:28:08.476]                 }
[08:28:08.476]                 else {
[08:28:08.476]                   if (TRUE) {
[08:28:08.476]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:08.476]                     {
[08:28:08.476]                       inherits <- base::inherits
[08:28:08.476]                       invokeRestart <- base::invokeRestart
[08:28:08.476]                       is.null <- base::is.null
[08:28:08.476]                       muffled <- FALSE
[08:28:08.476]                       if (inherits(cond, "message")) {
[08:28:08.476]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:08.476]                         if (muffled) 
[08:28:08.476]                           invokeRestart("muffleMessage")
[08:28:08.476]                       }
[08:28:08.476]                       else if (inherits(cond, "warning")) {
[08:28:08.476]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:08.476]                         if (muffled) 
[08:28:08.476]                           invokeRestart("muffleWarning")
[08:28:08.476]                       }
[08:28:08.476]                       else if (inherits(cond, "condition")) {
[08:28:08.476]                         if (!is.null(pattern)) {
[08:28:08.476]                           computeRestarts <- base::computeRestarts
[08:28:08.476]                           grepl <- base::grepl
[08:28:08.476]                           restarts <- computeRestarts(cond)
[08:28:08.476]                           for (restart in restarts) {
[08:28:08.476]                             name <- restart$name
[08:28:08.476]                             if (is.null(name)) 
[08:28:08.476]                               next
[08:28:08.476]                             if (!grepl(pattern, name)) 
[08:28:08.476]                               next
[08:28:08.476]                             invokeRestart(restart)
[08:28:08.476]                             muffled <- TRUE
[08:28:08.476]                             break
[08:28:08.476]                           }
[08:28:08.476]                         }
[08:28:08.476]                       }
[08:28:08.476]                       invisible(muffled)
[08:28:08.476]                     }
[08:28:08.476]                     muffleCondition(cond, pattern = "^muffle")
[08:28:08.476]                   }
[08:28:08.476]                 }
[08:28:08.476]             }
[08:28:08.476]         }))
[08:28:08.476]     }, error = function(ex) {
[08:28:08.476]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:08.476]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:08.476]                 ...future.rng), started = ...future.startTime, 
[08:28:08.476]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:08.476]             version = "1.8"), class = "FutureResult")
[08:28:08.476]     }, finally = {
[08:28:08.476]         if (!identical(...future.workdir, getwd())) 
[08:28:08.476]             setwd(...future.workdir)
[08:28:08.476]         {
[08:28:08.476]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:08.476]                 ...future.oldOptions$nwarnings <- NULL
[08:28:08.476]             }
[08:28:08.476]             base::options(...future.oldOptions)
[08:28:08.476]             if (.Platform$OS.type == "windows") {
[08:28:08.476]                 old_names <- names(...future.oldEnvVars)
[08:28:08.476]                 envs <- base::Sys.getenv()
[08:28:08.476]                 names <- names(envs)
[08:28:08.476]                 common <- intersect(names, old_names)
[08:28:08.476]                 added <- setdiff(names, old_names)
[08:28:08.476]                 removed <- setdiff(old_names, names)
[08:28:08.476]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:08.476]                   envs[common]]
[08:28:08.476]                 NAMES <- toupper(changed)
[08:28:08.476]                 args <- list()
[08:28:08.476]                 for (kk in seq_along(NAMES)) {
[08:28:08.476]                   name <- changed[[kk]]
[08:28:08.476]                   NAME <- NAMES[[kk]]
[08:28:08.476]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.476]                     next
[08:28:08.476]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.476]                 }
[08:28:08.476]                 NAMES <- toupper(added)
[08:28:08.476]                 for (kk in seq_along(NAMES)) {
[08:28:08.476]                   name <- added[[kk]]
[08:28:08.476]                   NAME <- NAMES[[kk]]
[08:28:08.476]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.476]                     next
[08:28:08.476]                   args[[name]] <- ""
[08:28:08.476]                 }
[08:28:08.476]                 NAMES <- toupper(removed)
[08:28:08.476]                 for (kk in seq_along(NAMES)) {
[08:28:08.476]                   name <- removed[[kk]]
[08:28:08.476]                   NAME <- NAMES[[kk]]
[08:28:08.476]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:08.476]                     next
[08:28:08.476]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:08.476]                 }
[08:28:08.476]                 if (length(args) > 0) 
[08:28:08.476]                   base::do.call(base::Sys.setenv, args = args)
[08:28:08.476]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:08.476]             }
[08:28:08.476]             else {
[08:28:08.476]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:08.476]             }
[08:28:08.476]             {
[08:28:08.476]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:08.476]                   0L) {
[08:28:08.476]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:08.476]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:08.476]                   base::options(opts)
[08:28:08.476]                 }
[08:28:08.476]                 {
[08:28:08.476]                   {
[08:28:08.476]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:08.476]                     NULL
[08:28:08.476]                   }
[08:28:08.476]                   options(future.plan = NULL)
[08:28:08.476]                   if (is.na(NA_character_)) 
[08:28:08.476]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:08.476]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:08.476]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:08.476]                     .init = FALSE)
[08:28:08.476]                 }
[08:28:08.476]             }
[08:28:08.476]         }
[08:28:08.476]     })
[08:28:08.476]     if (TRUE) {
[08:28:08.476]         base::sink(type = "output", split = FALSE)
[08:28:08.476]         if (TRUE) {
[08:28:08.476]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:08.476]         }
[08:28:08.476]         else {
[08:28:08.476]             ...future.result["stdout"] <- base::list(NULL)
[08:28:08.476]         }
[08:28:08.476]         base::close(...future.stdout)
[08:28:08.476]         ...future.stdout <- NULL
[08:28:08.476]     }
[08:28:08.476]     ...future.result$conditions <- ...future.conditions
[08:28:08.476]     ...future.result$finished <- base::Sys.time()
[08:28:08.476]     ...future.result
[08:28:08.476] }
[08:28:08.478] assign_globals() ...
[08:28:08.479] List of 1
[08:28:08.479]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:28:08.479]   .. ..@ .Data     :function (x)  
[08:28:08.479]   .. ..@ generic   : chr "my_fcn"
[08:28:08.479]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:28:08.479]   .. ..@ package   : chr ".GlobalEnv"
[08:28:08.479]   .. ..@ group     : list()
[08:28:08.479]   .. ..@ valueClass: chr(0) 
[08:28:08.479]   .. ..@ signature : chr "x"
[08:28:08.479]   .. ..@ default   : NULL
[08:28:08.479]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:28:08.479]  - attr(*, "where")=List of 1
[08:28:08.479]   ..$ my_fcn:<environment: R_EmptyEnv> 
[08:28:08.479]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:28:08.479]  - attr(*, "resolved")= logi FALSE
[08:28:08.479]  - attr(*, "total_size")= num 2591
[08:28:08.479]  - attr(*, "already-done")= logi TRUE
[08:28:08.484] - reassign environment for ‘my_fcn’
[08:28:08.484] - copied ‘my_fcn’ to environment
[08:28:08.484] assign_globals() ... done
[08:28:08.484] requestCore(): workers = 2
[08:28:08.486] MulticoreFuture started
[08:28:08.487] - Launch lazy future ... done
[08:28:08.487] run() for ‘MulticoreFuture’ ... done
[08:28:08.487] plan(): Setting new future strategy stack:
[08:28:08.487] result() for MulticoreFuture ...
[08:28:08.488] List of future strategies:
[08:28:08.488] 1. sequential:
[08:28:08.488]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:08.488]    - tweaked: FALSE
[08:28:08.488]    - call: NULL
[08:28:08.489] plan(): nbrOfWorkers() = 1
[08:28:08.491] plan(): Setting new future strategy stack:
[08:28:08.491] List of future strategies:
[08:28:08.491] 1. multicore:
[08:28:08.491]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:08.491]    - tweaked: FALSE
[08:28:08.491]    - call: plan(strategy)
[08:28:08.494] plan(): nbrOfWorkers() = 2
[08:28:08.507] result() for MulticoreFuture ...
[08:28:08.507] result() for MulticoreFuture ... done
[08:28:08.507] signalConditions() ...
[08:28:08.507]  - include = ‘immediateCondition’
[08:28:08.507]  - exclude = 
[08:28:08.507]  - resignal = FALSE
[08:28:08.508]  - Number of conditions: 1
[08:28:08.508] signalConditions() ... done
[08:28:08.508] result() for MulticoreFuture ... done
[08:28:08.508] result() for MulticoreFuture ...
[08:28:08.511] result() for MulticoreFuture ... done
[08:28:08.511] signalConditions() ...
[08:28:08.511]  - include = ‘immediateCondition’
[08:28:08.511]  - exclude = 
[08:28:08.511]  - resignal = FALSE
[08:28:08.511]  - Number of conditions: 1
[08:28:08.511] signalConditions() ... done
[08:28:08.511] Future state: ‘finished’
[08:28:08.512] result() for MulticoreFuture ...
[08:28:08.512] result() for MulticoreFuture ... done
[08:28:08.512] signalConditions() ...
[08:28:08.512]  - include = ‘condition’
[08:28:08.512]  - exclude = ‘immediateCondition’
[08:28:08.512]  - resignal = TRUE
[08:28:08.512]  - Number of conditions: 1
[08:28:08.512]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[08:28:08.513] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multisession
[08:28:08.513] plan(): Setting new future strategy stack:
[08:28:08.513] List of future strategies:
[08:28:08.513] 1. multisession:
[08:28:08.513]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:28:08.513]    - tweaked: FALSE
[08:28:08.513]    - call: plan(strategy)
[08:28:08.514] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:08.514] multisession:
[08:28:08.514] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:28:08.514] - tweaked: FALSE
[08:28:08.514] - call: plan(strategy)
[08:28:08.518] getGlobalsAndPackages() ...
[08:28:08.518] Not searching for globals
[08:28:08.519] - globals: [0] <none>
[08:28:08.519] getGlobalsAndPackages() ... DONE
[08:28:09.009] Packages needed by the future expression (n = 0): <none>
[08:28:09.009] Packages needed by future strategies (n = 0): <none>
[08:28:09.010] {
[08:28:09.010]     {
[08:28:09.010]         {
[08:28:09.010]             ...future.startTime <- base::Sys.time()
[08:28:09.010]             {
[08:28:09.010]                 {
[08:28:09.010]                   {
[08:28:09.010]                     {
[08:28:09.010]                       base::local({
[08:28:09.010]                         has_future <- base::requireNamespace("future", 
[08:28:09.010]                           quietly = TRUE)
[08:28:09.010]                         if (has_future) {
[08:28:09.010]                           ns <- base::getNamespace("future")
[08:28:09.010]                           version <- ns[[".package"]][["version"]]
[08:28:09.010]                           if (is.null(version)) 
[08:28:09.010]                             version <- utils::packageVersion("future")
[08:28:09.010]                         }
[08:28:09.010]                         else {
[08:28:09.010]                           version <- NULL
[08:28:09.010]                         }
[08:28:09.010]                         if (!has_future || version < "1.8.0") {
[08:28:09.010]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.010]                             "", base::R.version$version.string), 
[08:28:09.010]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.010]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.010]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.010]                               "release", "version")], collapse = " "), 
[08:28:09.010]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.010]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.010]                             info)
[08:28:09.010]                           info <- base::paste(info, collapse = "; ")
[08:28:09.010]                           if (!has_future) {
[08:28:09.010]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.010]                               info)
[08:28:09.010]                           }
[08:28:09.010]                           else {
[08:28:09.010]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.010]                               info, version)
[08:28:09.010]                           }
[08:28:09.010]                           base::stop(msg)
[08:28:09.010]                         }
[08:28:09.010]                       })
[08:28:09.010]                     }
[08:28:09.010]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.010]                     base::options(mc.cores = 1L)
[08:28:09.010]                   }
[08:28:09.010]                   ...future.strategy.old <- future::plan("list")
[08:28:09.010]                   options(future.plan = NULL)
[08:28:09.010]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.010]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.010]                 }
[08:28:09.010]                 ...future.workdir <- getwd()
[08:28:09.010]             }
[08:28:09.010]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.010]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.010]         }
[08:28:09.010]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:09.010]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.010]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:09.010]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:09.010]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.010]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.010]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.010]             base::names(...future.oldOptions))
[08:28:09.010]     }
[08:28:09.010]     if (FALSE) {
[08:28:09.010]     }
[08:28:09.010]     else {
[08:28:09.010]         if (TRUE) {
[08:28:09.010]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.010]                 open = "w")
[08:28:09.010]         }
[08:28:09.010]         else {
[08:28:09.010]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.010]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.010]         }
[08:28:09.010]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.010]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.010]             base::sink(type = "output", split = FALSE)
[08:28:09.010]             base::close(...future.stdout)
[08:28:09.010]         }, add = TRUE)
[08:28:09.010]     }
[08:28:09.010]     ...future.frame <- base::sys.nframe()
[08:28:09.010]     ...future.conditions <- base::list()
[08:28:09.010]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.010]     if (FALSE) {
[08:28:09.010]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.010]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.010]     }
[08:28:09.010]     ...future.result <- base::tryCatch({
[08:28:09.010]         base::withCallingHandlers({
[08:28:09.010]             ...future.value <- base::withVisible(base::local({
[08:28:09.010]                 ...future.makeSendCondition <- base::local({
[08:28:09.010]                   sendCondition <- NULL
[08:28:09.010]                   function(frame = 1L) {
[08:28:09.010]                     if (is.function(sendCondition)) 
[08:28:09.010]                       return(sendCondition)
[08:28:09.010]                     ns <- getNamespace("parallel")
[08:28:09.010]                     if (exists("sendData", mode = "function", 
[08:28:09.010]                       envir = ns)) {
[08:28:09.010]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:09.010]                         envir = ns)
[08:28:09.010]                       envir <- sys.frame(frame)
[08:28:09.010]                       master <- NULL
[08:28:09.010]                       while (!identical(envir, .GlobalEnv) && 
[08:28:09.010]                         !identical(envir, emptyenv())) {
[08:28:09.010]                         if (exists("master", mode = "list", envir = envir, 
[08:28:09.010]                           inherits = FALSE)) {
[08:28:09.010]                           master <- get("master", mode = "list", 
[08:28:09.010]                             envir = envir, inherits = FALSE)
[08:28:09.010]                           if (inherits(master, c("SOCKnode", 
[08:28:09.010]                             "SOCK0node"))) {
[08:28:09.010]                             sendCondition <<- function(cond) {
[08:28:09.010]                               data <- list(type = "VALUE", value = cond, 
[08:28:09.010]                                 success = TRUE)
[08:28:09.010]                               parallel_sendData(master, data)
[08:28:09.010]                             }
[08:28:09.010]                             return(sendCondition)
[08:28:09.010]                           }
[08:28:09.010]                         }
[08:28:09.010]                         frame <- frame + 1L
[08:28:09.010]                         envir <- sys.frame(frame)
[08:28:09.010]                       }
[08:28:09.010]                     }
[08:28:09.010]                     sendCondition <<- function(cond) NULL
[08:28:09.010]                   }
[08:28:09.010]                 })
[08:28:09.010]                 withCallingHandlers({
[08:28:09.010]                   NA
[08:28:09.010]                 }, immediateCondition = function(cond) {
[08:28:09.010]                   sendCondition <- ...future.makeSendCondition()
[08:28:09.010]                   sendCondition(cond)
[08:28:09.010]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.010]                   {
[08:28:09.010]                     inherits <- base::inherits
[08:28:09.010]                     invokeRestart <- base::invokeRestart
[08:28:09.010]                     is.null <- base::is.null
[08:28:09.010]                     muffled <- FALSE
[08:28:09.010]                     if (inherits(cond, "message")) {
[08:28:09.010]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.010]                       if (muffled) 
[08:28:09.010]                         invokeRestart("muffleMessage")
[08:28:09.010]                     }
[08:28:09.010]                     else if (inherits(cond, "warning")) {
[08:28:09.010]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.010]                       if (muffled) 
[08:28:09.010]                         invokeRestart("muffleWarning")
[08:28:09.010]                     }
[08:28:09.010]                     else if (inherits(cond, "condition")) {
[08:28:09.010]                       if (!is.null(pattern)) {
[08:28:09.010]                         computeRestarts <- base::computeRestarts
[08:28:09.010]                         grepl <- base::grepl
[08:28:09.010]                         restarts <- computeRestarts(cond)
[08:28:09.010]                         for (restart in restarts) {
[08:28:09.010]                           name <- restart$name
[08:28:09.010]                           if (is.null(name)) 
[08:28:09.010]                             next
[08:28:09.010]                           if (!grepl(pattern, name)) 
[08:28:09.010]                             next
[08:28:09.010]                           invokeRestart(restart)
[08:28:09.010]                           muffled <- TRUE
[08:28:09.010]                           break
[08:28:09.010]                         }
[08:28:09.010]                       }
[08:28:09.010]                     }
[08:28:09.010]                     invisible(muffled)
[08:28:09.010]                   }
[08:28:09.010]                   muffleCondition(cond)
[08:28:09.010]                 })
[08:28:09.010]             }))
[08:28:09.010]             future::FutureResult(value = ...future.value$value, 
[08:28:09.010]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.010]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.010]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.010]                     ...future.globalenv.names))
[08:28:09.010]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.010]         }, condition = base::local({
[08:28:09.010]             c <- base::c
[08:28:09.010]             inherits <- base::inherits
[08:28:09.010]             invokeRestart <- base::invokeRestart
[08:28:09.010]             length <- base::length
[08:28:09.010]             list <- base::list
[08:28:09.010]             seq.int <- base::seq.int
[08:28:09.010]             signalCondition <- base::signalCondition
[08:28:09.010]             sys.calls <- base::sys.calls
[08:28:09.010]             `[[` <- base::`[[`
[08:28:09.010]             `+` <- base::`+`
[08:28:09.010]             `<<-` <- base::`<<-`
[08:28:09.010]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.010]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.010]                   3L)]
[08:28:09.010]             }
[08:28:09.010]             function(cond) {
[08:28:09.010]                 is_error <- inherits(cond, "error")
[08:28:09.010]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.010]                   NULL)
[08:28:09.010]                 if (is_error) {
[08:28:09.010]                   sessionInformation <- function() {
[08:28:09.010]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.010]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.010]                       search = base::search(), system = base::Sys.info())
[08:28:09.010]                   }
[08:28:09.010]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.010]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.010]                     cond$call), session = sessionInformation(), 
[08:28:09.010]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.010]                   signalCondition(cond)
[08:28:09.010]                 }
[08:28:09.010]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.010]                 "immediateCondition"))) {
[08:28:09.010]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.010]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.010]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.010]                   if (TRUE && !signal) {
[08:28:09.010]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.010]                     {
[08:28:09.010]                       inherits <- base::inherits
[08:28:09.010]                       invokeRestart <- base::invokeRestart
[08:28:09.010]                       is.null <- base::is.null
[08:28:09.010]                       muffled <- FALSE
[08:28:09.010]                       if (inherits(cond, "message")) {
[08:28:09.010]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.010]                         if (muffled) 
[08:28:09.010]                           invokeRestart("muffleMessage")
[08:28:09.010]                       }
[08:28:09.010]                       else if (inherits(cond, "warning")) {
[08:28:09.010]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.010]                         if (muffled) 
[08:28:09.010]                           invokeRestart("muffleWarning")
[08:28:09.010]                       }
[08:28:09.010]                       else if (inherits(cond, "condition")) {
[08:28:09.010]                         if (!is.null(pattern)) {
[08:28:09.010]                           computeRestarts <- base::computeRestarts
[08:28:09.010]                           grepl <- base::grepl
[08:28:09.010]                           restarts <- computeRestarts(cond)
[08:28:09.010]                           for (restart in restarts) {
[08:28:09.010]                             name <- restart$name
[08:28:09.010]                             if (is.null(name)) 
[08:28:09.010]                               next
[08:28:09.010]                             if (!grepl(pattern, name)) 
[08:28:09.010]                               next
[08:28:09.010]                             invokeRestart(restart)
[08:28:09.010]                             muffled <- TRUE
[08:28:09.010]                             break
[08:28:09.010]                           }
[08:28:09.010]                         }
[08:28:09.010]                       }
[08:28:09.010]                       invisible(muffled)
[08:28:09.010]                     }
[08:28:09.010]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.010]                   }
[08:28:09.010]                 }
[08:28:09.010]                 else {
[08:28:09.010]                   if (TRUE) {
[08:28:09.010]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.010]                     {
[08:28:09.010]                       inherits <- base::inherits
[08:28:09.010]                       invokeRestart <- base::invokeRestart
[08:28:09.010]                       is.null <- base::is.null
[08:28:09.010]                       muffled <- FALSE
[08:28:09.010]                       if (inherits(cond, "message")) {
[08:28:09.010]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.010]                         if (muffled) 
[08:28:09.010]                           invokeRestart("muffleMessage")
[08:28:09.010]                       }
[08:28:09.010]                       else if (inherits(cond, "warning")) {
[08:28:09.010]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.010]                         if (muffled) 
[08:28:09.010]                           invokeRestart("muffleWarning")
[08:28:09.010]                       }
[08:28:09.010]                       else if (inherits(cond, "condition")) {
[08:28:09.010]                         if (!is.null(pattern)) {
[08:28:09.010]                           computeRestarts <- base::computeRestarts
[08:28:09.010]                           grepl <- base::grepl
[08:28:09.010]                           restarts <- computeRestarts(cond)
[08:28:09.010]                           for (restart in restarts) {
[08:28:09.010]                             name <- restart$name
[08:28:09.010]                             if (is.null(name)) 
[08:28:09.010]                               next
[08:28:09.010]                             if (!grepl(pattern, name)) 
[08:28:09.010]                               next
[08:28:09.010]                             invokeRestart(restart)
[08:28:09.010]                             muffled <- TRUE
[08:28:09.010]                             break
[08:28:09.010]                           }
[08:28:09.010]                         }
[08:28:09.010]                       }
[08:28:09.010]                       invisible(muffled)
[08:28:09.010]                     }
[08:28:09.010]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.010]                   }
[08:28:09.010]                 }
[08:28:09.010]             }
[08:28:09.010]         }))
[08:28:09.010]     }, error = function(ex) {
[08:28:09.010]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.010]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.010]                 ...future.rng), started = ...future.startTime, 
[08:28:09.010]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.010]             version = "1.8"), class = "FutureResult")
[08:28:09.010]     }, finally = {
[08:28:09.010]         if (!identical(...future.workdir, getwd())) 
[08:28:09.010]             setwd(...future.workdir)
[08:28:09.010]         {
[08:28:09.010]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.010]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.010]             }
[08:28:09.010]             base::options(...future.oldOptions)
[08:28:09.010]             if (.Platform$OS.type == "windows") {
[08:28:09.010]                 old_names <- names(...future.oldEnvVars)
[08:28:09.010]                 envs <- base::Sys.getenv()
[08:28:09.010]                 names <- names(envs)
[08:28:09.010]                 common <- intersect(names, old_names)
[08:28:09.010]                 added <- setdiff(names, old_names)
[08:28:09.010]                 removed <- setdiff(old_names, names)
[08:28:09.010]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.010]                   envs[common]]
[08:28:09.010]                 NAMES <- toupper(changed)
[08:28:09.010]                 args <- list()
[08:28:09.010]                 for (kk in seq_along(NAMES)) {
[08:28:09.010]                   name <- changed[[kk]]
[08:28:09.010]                   NAME <- NAMES[[kk]]
[08:28:09.010]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.010]                     next
[08:28:09.010]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.010]                 }
[08:28:09.010]                 NAMES <- toupper(added)
[08:28:09.010]                 for (kk in seq_along(NAMES)) {
[08:28:09.010]                   name <- added[[kk]]
[08:28:09.010]                   NAME <- NAMES[[kk]]
[08:28:09.010]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.010]                     next
[08:28:09.010]                   args[[name]] <- ""
[08:28:09.010]                 }
[08:28:09.010]                 NAMES <- toupper(removed)
[08:28:09.010]                 for (kk in seq_along(NAMES)) {
[08:28:09.010]                   name <- removed[[kk]]
[08:28:09.010]                   NAME <- NAMES[[kk]]
[08:28:09.010]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.010]                     next
[08:28:09.010]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.010]                 }
[08:28:09.010]                 if (length(args) > 0) 
[08:28:09.010]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.010]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.010]             }
[08:28:09.010]             else {
[08:28:09.010]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.010]             }
[08:28:09.010]             {
[08:28:09.010]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.010]                   0L) {
[08:28:09.010]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.010]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.010]                   base::options(opts)
[08:28:09.010]                 }
[08:28:09.010]                 {
[08:28:09.010]                   {
[08:28:09.010]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.010]                     NULL
[08:28:09.010]                   }
[08:28:09.010]                   options(future.plan = NULL)
[08:28:09.010]                   if (is.na(NA_character_)) 
[08:28:09.010]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.010]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.010]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.010]                     .init = FALSE)
[08:28:09.010]                 }
[08:28:09.010]             }
[08:28:09.010]         }
[08:28:09.010]     })
[08:28:09.010]     if (TRUE) {
[08:28:09.010]         base::sink(type = "output", split = FALSE)
[08:28:09.010]         if (TRUE) {
[08:28:09.010]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.010]         }
[08:28:09.010]         else {
[08:28:09.010]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.010]         }
[08:28:09.010]         base::close(...future.stdout)
[08:28:09.010]         ...future.stdout <- NULL
[08:28:09.010]     }
[08:28:09.010]     ...future.result$conditions <- ...future.conditions
[08:28:09.010]     ...future.result$finished <- base::Sys.time()
[08:28:09.010]     ...future.result
[08:28:09.010] }
[08:28:09.062] MultisessionFuture started
[08:28:09.062] result() for ClusterFuture ...
[08:28:09.063] receiveMessageFromWorker() for ClusterFuture ...
[08:28:09.063] - Validating connection of MultisessionFuture
[08:28:09.093] - received message: FutureResult
[08:28:09.093] - Received FutureResult
[08:28:09.093] - Erased future from FutureRegistry
[08:28:09.094] result() for ClusterFuture ...
[08:28:09.094] - result already collected: FutureResult
[08:28:09.094] result() for ClusterFuture ... done
[08:28:09.094] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:09.094] result() for ClusterFuture ... done
[08:28:09.094] result() for ClusterFuture ...
[08:28:09.094] - result already collected: FutureResult
[08:28:09.094] result() for ClusterFuture ... done
[08:28:09.094] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:09.096] plan(): nbrOfWorkers() = 2
[08:28:09.096] getGlobalsAndPackages() ...
[08:28:09.096] Searching for globals...
[08:28:09.098] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:28:09.099] Searching for globals ... DONE
[08:28:09.099] Resolving globals: FALSE
[08:28:09.099] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[08:28:09.099] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[08:28:09.100] - globals: [1] ‘my_fcn’
[08:28:09.100] 
[08:28:09.100] getGlobalsAndPackages() ... DONE
[08:28:09.100] run() for ‘Future’ ...
[08:28:09.100] - state: ‘created’
[08:28:09.100] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:09.114] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:09.115] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:09.115]   - Field: ‘node’
[08:28:09.115]   - Field: ‘label’
[08:28:09.115]   - Field: ‘local’
[08:28:09.115]   - Field: ‘owner’
[08:28:09.115]   - Field: ‘envir’
[08:28:09.115]   - Field: ‘workers’
[08:28:09.115]   - Field: ‘packages’
[08:28:09.115]   - Field: ‘gc’
[08:28:09.115]   - Field: ‘conditions’
[08:28:09.116]   - Field: ‘persistent’
[08:28:09.116]   - Field: ‘expr’
[08:28:09.116]   - Field: ‘uuid’
[08:28:09.116]   - Field: ‘seed’
[08:28:09.116]   - Field: ‘version’
[08:28:09.116]   - Field: ‘result’
[08:28:09.116]   - Field: ‘asynchronous’
[08:28:09.116]   - Field: ‘calls’
[08:28:09.116]   - Field: ‘globals’
[08:28:09.116]   - Field: ‘stdout’
[08:28:09.116]   - Field: ‘earlySignal’
[08:28:09.116]   - Field: ‘lazy’
[08:28:09.117]   - Field: ‘state’
[08:28:09.117] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:09.117] - Launch lazy future ...
[08:28:09.117] Packages needed by the future expression (n = 0): <none>
[08:28:09.117] Packages needed by future strategies (n = 0): <none>
[08:28:09.118] {
[08:28:09.118]     {
[08:28:09.118]         {
[08:28:09.118]             ...future.startTime <- base::Sys.time()
[08:28:09.118]             {
[08:28:09.118]                 {
[08:28:09.118]                   {
[08:28:09.118]                     {
[08:28:09.118]                       base::local({
[08:28:09.118]                         has_future <- base::requireNamespace("future", 
[08:28:09.118]                           quietly = TRUE)
[08:28:09.118]                         if (has_future) {
[08:28:09.118]                           ns <- base::getNamespace("future")
[08:28:09.118]                           version <- ns[[".package"]][["version"]]
[08:28:09.118]                           if (is.null(version)) 
[08:28:09.118]                             version <- utils::packageVersion("future")
[08:28:09.118]                         }
[08:28:09.118]                         else {
[08:28:09.118]                           version <- NULL
[08:28:09.118]                         }
[08:28:09.118]                         if (!has_future || version < "1.8.0") {
[08:28:09.118]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.118]                             "", base::R.version$version.string), 
[08:28:09.118]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.118]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.118]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.118]                               "release", "version")], collapse = " "), 
[08:28:09.118]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.118]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.118]                             info)
[08:28:09.118]                           info <- base::paste(info, collapse = "; ")
[08:28:09.118]                           if (!has_future) {
[08:28:09.118]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.118]                               info)
[08:28:09.118]                           }
[08:28:09.118]                           else {
[08:28:09.118]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.118]                               info, version)
[08:28:09.118]                           }
[08:28:09.118]                           base::stop(msg)
[08:28:09.118]                         }
[08:28:09.118]                       })
[08:28:09.118]                     }
[08:28:09.118]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.118]                     base::options(mc.cores = 1L)
[08:28:09.118]                   }
[08:28:09.118]                   ...future.strategy.old <- future::plan("list")
[08:28:09.118]                   options(future.plan = NULL)
[08:28:09.118]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.118]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.118]                 }
[08:28:09.118]                 ...future.workdir <- getwd()
[08:28:09.118]             }
[08:28:09.118]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.118]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.118]         }
[08:28:09.118]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:09.118]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.118]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:09.118]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:09.118]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.118]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.118]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.118]             base::names(...future.oldOptions))
[08:28:09.118]     }
[08:28:09.118]     if (FALSE) {
[08:28:09.118]     }
[08:28:09.118]     else {
[08:28:09.118]         if (TRUE) {
[08:28:09.118]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.118]                 open = "w")
[08:28:09.118]         }
[08:28:09.118]         else {
[08:28:09.118]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.118]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.118]         }
[08:28:09.118]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.118]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.118]             base::sink(type = "output", split = FALSE)
[08:28:09.118]             base::close(...future.stdout)
[08:28:09.118]         }, add = TRUE)
[08:28:09.118]     }
[08:28:09.118]     ...future.frame <- base::sys.nframe()
[08:28:09.118]     ...future.conditions <- base::list()
[08:28:09.118]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.118]     if (FALSE) {
[08:28:09.118]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.118]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.118]     }
[08:28:09.118]     ...future.result <- base::tryCatch({
[08:28:09.118]         base::withCallingHandlers({
[08:28:09.118]             ...future.value <- base::withVisible(base::local({
[08:28:09.118]                 ...future.makeSendCondition <- base::local({
[08:28:09.118]                   sendCondition <- NULL
[08:28:09.118]                   function(frame = 1L) {
[08:28:09.118]                     if (is.function(sendCondition)) 
[08:28:09.118]                       return(sendCondition)
[08:28:09.118]                     ns <- getNamespace("parallel")
[08:28:09.118]                     if (exists("sendData", mode = "function", 
[08:28:09.118]                       envir = ns)) {
[08:28:09.118]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:09.118]                         envir = ns)
[08:28:09.118]                       envir <- sys.frame(frame)
[08:28:09.118]                       master <- NULL
[08:28:09.118]                       while (!identical(envir, .GlobalEnv) && 
[08:28:09.118]                         !identical(envir, emptyenv())) {
[08:28:09.118]                         if (exists("master", mode = "list", envir = envir, 
[08:28:09.118]                           inherits = FALSE)) {
[08:28:09.118]                           master <- get("master", mode = "list", 
[08:28:09.118]                             envir = envir, inherits = FALSE)
[08:28:09.118]                           if (inherits(master, c("SOCKnode", 
[08:28:09.118]                             "SOCK0node"))) {
[08:28:09.118]                             sendCondition <<- function(cond) {
[08:28:09.118]                               data <- list(type = "VALUE", value = cond, 
[08:28:09.118]                                 success = TRUE)
[08:28:09.118]                               parallel_sendData(master, data)
[08:28:09.118]                             }
[08:28:09.118]                             return(sendCondition)
[08:28:09.118]                           }
[08:28:09.118]                         }
[08:28:09.118]                         frame <- frame + 1L
[08:28:09.118]                         envir <- sys.frame(frame)
[08:28:09.118]                       }
[08:28:09.118]                     }
[08:28:09.118]                     sendCondition <<- function(cond) NULL
[08:28:09.118]                   }
[08:28:09.118]                 })
[08:28:09.118]                 withCallingHandlers({
[08:28:09.118]                   {
[08:28:09.118]                     my_fcn
[08:28:09.118]                   }
[08:28:09.118]                 }, immediateCondition = function(cond) {
[08:28:09.118]                   sendCondition <- ...future.makeSendCondition()
[08:28:09.118]                   sendCondition(cond)
[08:28:09.118]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.118]                   {
[08:28:09.118]                     inherits <- base::inherits
[08:28:09.118]                     invokeRestart <- base::invokeRestart
[08:28:09.118]                     is.null <- base::is.null
[08:28:09.118]                     muffled <- FALSE
[08:28:09.118]                     if (inherits(cond, "message")) {
[08:28:09.118]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.118]                       if (muffled) 
[08:28:09.118]                         invokeRestart("muffleMessage")
[08:28:09.118]                     }
[08:28:09.118]                     else if (inherits(cond, "warning")) {
[08:28:09.118]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.118]                       if (muffled) 
[08:28:09.118]                         invokeRestart("muffleWarning")
[08:28:09.118]                     }
[08:28:09.118]                     else if (inherits(cond, "condition")) {
[08:28:09.118]                       if (!is.null(pattern)) {
[08:28:09.118]                         computeRestarts <- base::computeRestarts
[08:28:09.118]                         grepl <- base::grepl
[08:28:09.118]                         restarts <- computeRestarts(cond)
[08:28:09.118]                         for (restart in restarts) {
[08:28:09.118]                           name <- restart$name
[08:28:09.118]                           if (is.null(name)) 
[08:28:09.118]                             next
[08:28:09.118]                           if (!grepl(pattern, name)) 
[08:28:09.118]                             next
[08:28:09.118]                           invokeRestart(restart)
[08:28:09.118]                           muffled <- TRUE
[08:28:09.118]                           break
[08:28:09.118]                         }
[08:28:09.118]                       }
[08:28:09.118]                     }
[08:28:09.118]                     invisible(muffled)
[08:28:09.118]                   }
[08:28:09.118]                   muffleCondition(cond)
[08:28:09.118]                 })
[08:28:09.118]             }))
[08:28:09.118]             future::FutureResult(value = ...future.value$value, 
[08:28:09.118]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.118]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.118]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.118]                     ...future.globalenv.names))
[08:28:09.118]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.118]         }, condition = base::local({
[08:28:09.118]             c <- base::c
[08:28:09.118]             inherits <- base::inherits
[08:28:09.118]             invokeRestart <- base::invokeRestart
[08:28:09.118]             length <- base::length
[08:28:09.118]             list <- base::list
[08:28:09.118]             seq.int <- base::seq.int
[08:28:09.118]             signalCondition <- base::signalCondition
[08:28:09.118]             sys.calls <- base::sys.calls
[08:28:09.118]             `[[` <- base::`[[`
[08:28:09.118]             `+` <- base::`+`
[08:28:09.118]             `<<-` <- base::`<<-`
[08:28:09.118]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.118]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.118]                   3L)]
[08:28:09.118]             }
[08:28:09.118]             function(cond) {
[08:28:09.118]                 is_error <- inherits(cond, "error")
[08:28:09.118]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.118]                   NULL)
[08:28:09.118]                 if (is_error) {
[08:28:09.118]                   sessionInformation <- function() {
[08:28:09.118]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.118]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.118]                       search = base::search(), system = base::Sys.info())
[08:28:09.118]                   }
[08:28:09.118]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.118]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.118]                     cond$call), session = sessionInformation(), 
[08:28:09.118]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.118]                   signalCondition(cond)
[08:28:09.118]                 }
[08:28:09.118]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.118]                 "immediateCondition"))) {
[08:28:09.118]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.118]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.118]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.118]                   if (TRUE && !signal) {
[08:28:09.118]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.118]                     {
[08:28:09.118]                       inherits <- base::inherits
[08:28:09.118]                       invokeRestart <- base::invokeRestart
[08:28:09.118]                       is.null <- base::is.null
[08:28:09.118]                       muffled <- FALSE
[08:28:09.118]                       if (inherits(cond, "message")) {
[08:28:09.118]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.118]                         if (muffled) 
[08:28:09.118]                           invokeRestart("muffleMessage")
[08:28:09.118]                       }
[08:28:09.118]                       else if (inherits(cond, "warning")) {
[08:28:09.118]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.118]                         if (muffled) 
[08:28:09.118]                           invokeRestart("muffleWarning")
[08:28:09.118]                       }
[08:28:09.118]                       else if (inherits(cond, "condition")) {
[08:28:09.118]                         if (!is.null(pattern)) {
[08:28:09.118]                           computeRestarts <- base::computeRestarts
[08:28:09.118]                           grepl <- base::grepl
[08:28:09.118]                           restarts <- computeRestarts(cond)
[08:28:09.118]                           for (restart in restarts) {
[08:28:09.118]                             name <- restart$name
[08:28:09.118]                             if (is.null(name)) 
[08:28:09.118]                               next
[08:28:09.118]                             if (!grepl(pattern, name)) 
[08:28:09.118]                               next
[08:28:09.118]                             invokeRestart(restart)
[08:28:09.118]                             muffled <- TRUE
[08:28:09.118]                             break
[08:28:09.118]                           }
[08:28:09.118]                         }
[08:28:09.118]                       }
[08:28:09.118]                       invisible(muffled)
[08:28:09.118]                     }
[08:28:09.118]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.118]                   }
[08:28:09.118]                 }
[08:28:09.118]                 else {
[08:28:09.118]                   if (TRUE) {
[08:28:09.118]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.118]                     {
[08:28:09.118]                       inherits <- base::inherits
[08:28:09.118]                       invokeRestart <- base::invokeRestart
[08:28:09.118]                       is.null <- base::is.null
[08:28:09.118]                       muffled <- FALSE
[08:28:09.118]                       if (inherits(cond, "message")) {
[08:28:09.118]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.118]                         if (muffled) 
[08:28:09.118]                           invokeRestart("muffleMessage")
[08:28:09.118]                       }
[08:28:09.118]                       else if (inherits(cond, "warning")) {
[08:28:09.118]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.118]                         if (muffled) 
[08:28:09.118]                           invokeRestart("muffleWarning")
[08:28:09.118]                       }
[08:28:09.118]                       else if (inherits(cond, "condition")) {
[08:28:09.118]                         if (!is.null(pattern)) {
[08:28:09.118]                           computeRestarts <- base::computeRestarts
[08:28:09.118]                           grepl <- base::grepl
[08:28:09.118]                           restarts <- computeRestarts(cond)
[08:28:09.118]                           for (restart in restarts) {
[08:28:09.118]                             name <- restart$name
[08:28:09.118]                             if (is.null(name)) 
[08:28:09.118]                               next
[08:28:09.118]                             if (!grepl(pattern, name)) 
[08:28:09.118]                               next
[08:28:09.118]                             invokeRestart(restart)
[08:28:09.118]                             muffled <- TRUE
[08:28:09.118]                             break
[08:28:09.118]                           }
[08:28:09.118]                         }
[08:28:09.118]                       }
[08:28:09.118]                       invisible(muffled)
[08:28:09.118]                     }
[08:28:09.118]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.118]                   }
[08:28:09.118]                 }
[08:28:09.118]             }
[08:28:09.118]         }))
[08:28:09.118]     }, error = function(ex) {
[08:28:09.118]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.118]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.118]                 ...future.rng), started = ...future.startTime, 
[08:28:09.118]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.118]             version = "1.8"), class = "FutureResult")
[08:28:09.118]     }, finally = {
[08:28:09.118]         if (!identical(...future.workdir, getwd())) 
[08:28:09.118]             setwd(...future.workdir)
[08:28:09.118]         {
[08:28:09.118]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.118]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.118]             }
[08:28:09.118]             base::options(...future.oldOptions)
[08:28:09.118]             if (.Platform$OS.type == "windows") {
[08:28:09.118]                 old_names <- names(...future.oldEnvVars)
[08:28:09.118]                 envs <- base::Sys.getenv()
[08:28:09.118]                 names <- names(envs)
[08:28:09.118]                 common <- intersect(names, old_names)
[08:28:09.118]                 added <- setdiff(names, old_names)
[08:28:09.118]                 removed <- setdiff(old_names, names)
[08:28:09.118]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.118]                   envs[common]]
[08:28:09.118]                 NAMES <- toupper(changed)
[08:28:09.118]                 args <- list()
[08:28:09.118]                 for (kk in seq_along(NAMES)) {
[08:28:09.118]                   name <- changed[[kk]]
[08:28:09.118]                   NAME <- NAMES[[kk]]
[08:28:09.118]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.118]                     next
[08:28:09.118]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.118]                 }
[08:28:09.118]                 NAMES <- toupper(added)
[08:28:09.118]                 for (kk in seq_along(NAMES)) {
[08:28:09.118]                   name <- added[[kk]]
[08:28:09.118]                   NAME <- NAMES[[kk]]
[08:28:09.118]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.118]                     next
[08:28:09.118]                   args[[name]] <- ""
[08:28:09.118]                 }
[08:28:09.118]                 NAMES <- toupper(removed)
[08:28:09.118]                 for (kk in seq_along(NAMES)) {
[08:28:09.118]                   name <- removed[[kk]]
[08:28:09.118]                   NAME <- NAMES[[kk]]
[08:28:09.118]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.118]                     next
[08:28:09.118]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.118]                 }
[08:28:09.118]                 if (length(args) > 0) 
[08:28:09.118]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.118]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.118]             }
[08:28:09.118]             else {
[08:28:09.118]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.118]             }
[08:28:09.118]             {
[08:28:09.118]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.118]                   0L) {
[08:28:09.118]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.118]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.118]                   base::options(opts)
[08:28:09.118]                 }
[08:28:09.118]                 {
[08:28:09.118]                   {
[08:28:09.118]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.118]                     NULL
[08:28:09.118]                   }
[08:28:09.118]                   options(future.plan = NULL)
[08:28:09.118]                   if (is.na(NA_character_)) 
[08:28:09.118]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.118]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.118]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.118]                     .init = FALSE)
[08:28:09.118]                 }
[08:28:09.118]             }
[08:28:09.118]         }
[08:28:09.118]     })
[08:28:09.118]     if (TRUE) {
[08:28:09.118]         base::sink(type = "output", split = FALSE)
[08:28:09.118]         if (TRUE) {
[08:28:09.118]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.118]         }
[08:28:09.118]         else {
[08:28:09.118]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.118]         }
[08:28:09.118]         base::close(...future.stdout)
[08:28:09.118]         ...future.stdout <- NULL
[08:28:09.118]     }
[08:28:09.118]     ...future.result$conditions <- ...future.conditions
[08:28:09.118]     ...future.result$finished <- base::Sys.time()
[08:28:09.118]     ...future.result
[08:28:09.118] }
[08:28:09.120] Exporting 1 global objects (2.81 KiB) to cluster node #1 ...
[08:28:09.121] Exporting ‘my_fcn’ (2.53 KiB) to cluster node #1 ...
[08:28:09.121] Exporting ‘my_fcn’ (2.53 KiB) to cluster node #1 ... DONE
[08:28:09.121] Exporting 1 global objects (2.81 KiB) to cluster node #1 ... DONE
[08:28:09.122] MultisessionFuture started
[08:28:09.122] - Launch lazy future ... done
[08:28:09.122] run() for ‘MultisessionFuture’ ... done
[08:28:09.122] result() for ClusterFuture ...
[08:28:09.122] receiveMessageFromWorker() for ClusterFuture ...
[08:28:09.122] - Validating connection of MultisessionFuture
[08:28:09.164] - received message: FutureResult
[08:28:09.164] - Received FutureResult
[08:28:09.165] - Erased future from FutureRegistry
[08:28:09.165] result() for ClusterFuture ...
[08:28:09.165] - result already collected: FutureResult
[08:28:09.165] result() for ClusterFuture ... done
[08:28:09.165] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:09.165] result() for ClusterFuture ... done
[08:28:09.165] result() for ClusterFuture ...
[08:28:09.165] - result already collected: FutureResult
[08:28:09.166] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55d3fd0ff318>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:28:09.166] getGlobalsAndPackages() ...
[08:28:09.166] Searching for globals...
[08:28:09.169] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:28:09.169] Searching for globals ... DONE
[08:28:09.169] Resolving globals: FALSE
[08:28:09.170] The total size of the 1 globals is 2.53 KiB (2591 bytes)
[08:28:09.170] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 2.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (2.53 KiB of class ‘function’)
[08:28:09.171] - globals: [1] ‘my_fcn’
[08:28:09.171] 
[08:28:09.171] getGlobalsAndPackages() ... DONE
[08:28:09.171] run() for ‘Future’ ...
[08:28:09.171] - state: ‘created’
[08:28:09.171] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:09.186] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:09.186] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:09.187]   - Field: ‘node’
[08:28:09.187]   - Field: ‘label’
[08:28:09.187]   - Field: ‘local’
[08:28:09.187]   - Field: ‘owner’
[08:28:09.187]   - Field: ‘envir’
[08:28:09.187]   - Field: ‘workers’
[08:28:09.187]   - Field: ‘packages’
[08:28:09.187]   - Field: ‘gc’
[08:28:09.187]   - Field: ‘conditions’
[08:28:09.187]   - Field: ‘persistent’
[08:28:09.188]   - Field: ‘expr’
[08:28:09.188]   - Field: ‘uuid’
[08:28:09.188]   - Field: ‘seed’
[08:28:09.188]   - Field: ‘version’
[08:28:09.188]   - Field: ‘result’
[08:28:09.188]   - Field: ‘asynchronous’
[08:28:09.188]   - Field: ‘calls’
[08:28:09.188]   - Field: ‘globals’
[08:28:09.188]   - Field: ‘stdout’
[08:28:09.188]   - Field: ‘earlySignal’
[08:28:09.189]   - Field: ‘lazy’
[08:28:09.189]   - Field: ‘state’
[08:28:09.189] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:09.189] - Launch lazy future ...
[08:28:09.189] Packages needed by the future expression (n = 0): <none>
[08:28:09.189] Packages needed by future strategies (n = 0): <none>
[08:28:09.190] {
[08:28:09.190]     {
[08:28:09.190]         {
[08:28:09.190]             ...future.startTime <- base::Sys.time()
[08:28:09.190]             {
[08:28:09.190]                 {
[08:28:09.190]                   {
[08:28:09.190]                     {
[08:28:09.190]                       base::local({
[08:28:09.190]                         has_future <- base::requireNamespace("future", 
[08:28:09.190]                           quietly = TRUE)
[08:28:09.190]                         if (has_future) {
[08:28:09.190]                           ns <- base::getNamespace("future")
[08:28:09.190]                           version <- ns[[".package"]][["version"]]
[08:28:09.190]                           if (is.null(version)) 
[08:28:09.190]                             version <- utils::packageVersion("future")
[08:28:09.190]                         }
[08:28:09.190]                         else {
[08:28:09.190]                           version <- NULL
[08:28:09.190]                         }
[08:28:09.190]                         if (!has_future || version < "1.8.0") {
[08:28:09.190]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:09.190]                             "", base::R.version$version.string), 
[08:28:09.190]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:09.190]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:09.190]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:09.190]                               "release", "version")], collapse = " "), 
[08:28:09.190]                             hostname = base::Sys.info()[["nodename"]])
[08:28:09.190]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:09.190]                             info)
[08:28:09.190]                           info <- base::paste(info, collapse = "; ")
[08:28:09.190]                           if (!has_future) {
[08:28:09.190]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:09.190]                               info)
[08:28:09.190]                           }
[08:28:09.190]                           else {
[08:28:09.190]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:09.190]                               info, version)
[08:28:09.190]                           }
[08:28:09.190]                           base::stop(msg)
[08:28:09.190]                         }
[08:28:09.190]                       })
[08:28:09.190]                     }
[08:28:09.190]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:09.190]                     base::options(mc.cores = 1L)
[08:28:09.190]                   }
[08:28:09.190]                   ...future.strategy.old <- future::plan("list")
[08:28:09.190]                   options(future.plan = NULL)
[08:28:09.190]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.190]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:09.190]                 }
[08:28:09.190]                 ...future.workdir <- getwd()
[08:28:09.190]             }
[08:28:09.190]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:09.190]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:09.190]         }
[08:28:09.190]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:09.190]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:09.190]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:09.190]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:09.190]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:09.190]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:09.190]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:09.190]             base::names(...future.oldOptions))
[08:28:09.190]     }
[08:28:09.190]     if (FALSE) {
[08:28:09.190]     }
[08:28:09.190]     else {
[08:28:09.190]         if (TRUE) {
[08:28:09.190]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:09.190]                 open = "w")
[08:28:09.190]         }
[08:28:09.190]         else {
[08:28:09.190]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:09.190]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:09.190]         }
[08:28:09.190]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:09.190]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:09.190]             base::sink(type = "output", split = FALSE)
[08:28:09.190]             base::close(...future.stdout)
[08:28:09.190]         }, add = TRUE)
[08:28:09.190]     }
[08:28:09.190]     ...future.frame <- base::sys.nframe()
[08:28:09.190]     ...future.conditions <- base::list()
[08:28:09.190]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:09.190]     if (FALSE) {
[08:28:09.190]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:09.190]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:09.190]     }
[08:28:09.190]     ...future.result <- base::tryCatch({
[08:28:09.190]         base::withCallingHandlers({
[08:28:09.190]             ...future.value <- base::withVisible(base::local({
[08:28:09.190]                 ...future.makeSendCondition <- base::local({
[08:28:09.190]                   sendCondition <- NULL
[08:28:09.190]                   function(frame = 1L) {
[08:28:09.190]                     if (is.function(sendCondition)) 
[08:28:09.190]                       return(sendCondition)
[08:28:09.190]                     ns <- getNamespace("parallel")
[08:28:09.190]                     if (exists("sendData", mode = "function", 
[08:28:09.190]                       envir = ns)) {
[08:28:09.190]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:09.190]                         envir = ns)
[08:28:09.190]                       envir <- sys.frame(frame)
[08:28:09.190]                       master <- NULL
[08:28:09.190]                       while (!identical(envir, .GlobalEnv) && 
[08:28:09.190]                         !identical(envir, emptyenv())) {
[08:28:09.190]                         if (exists("master", mode = "list", envir = envir, 
[08:28:09.190]                           inherits = FALSE)) {
[08:28:09.190]                           master <- get("master", mode = "list", 
[08:28:09.190]                             envir = envir, inherits = FALSE)
[08:28:09.190]                           if (inherits(master, c("SOCKnode", 
[08:28:09.190]                             "SOCK0node"))) {
[08:28:09.190]                             sendCondition <<- function(cond) {
[08:28:09.190]                               data <- list(type = "VALUE", value = cond, 
[08:28:09.190]                                 success = TRUE)
[08:28:09.190]                               parallel_sendData(master, data)
[08:28:09.190]                             }
[08:28:09.190]                             return(sendCondition)
[08:28:09.190]                           }
[08:28:09.190]                         }
[08:28:09.190]                         frame <- frame + 1L
[08:28:09.190]                         envir <- sys.frame(frame)
[08:28:09.190]                       }
[08:28:09.190]                     }
[08:28:09.190]                     sendCondition <<- function(cond) NULL
[08:28:09.190]                   }
[08:28:09.190]                 })
[08:28:09.190]                 withCallingHandlers({
[08:28:09.190]                   {
[08:28:09.190]                     my_fcn(3)
[08:28:09.190]                   }
[08:28:09.190]                 }, immediateCondition = function(cond) {
[08:28:09.190]                   sendCondition <- ...future.makeSendCondition()
[08:28:09.190]                   sendCondition(cond)
[08:28:09.190]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.190]                   {
[08:28:09.190]                     inherits <- base::inherits
[08:28:09.190]                     invokeRestart <- base::invokeRestart
[08:28:09.190]                     is.null <- base::is.null
[08:28:09.190]                     muffled <- FALSE
[08:28:09.190]                     if (inherits(cond, "message")) {
[08:28:09.190]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:09.190]                       if (muffled) 
[08:28:09.190]                         invokeRestart("muffleMessage")
[08:28:09.190]                     }
[08:28:09.190]                     else if (inherits(cond, "warning")) {
[08:28:09.190]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:09.190]                       if (muffled) 
[08:28:09.190]                         invokeRestart("muffleWarning")
[08:28:09.190]                     }
[08:28:09.190]                     else if (inherits(cond, "condition")) {
[08:28:09.190]                       if (!is.null(pattern)) {
[08:28:09.190]                         computeRestarts <- base::computeRestarts
[08:28:09.190]                         grepl <- base::grepl
[08:28:09.190]                         restarts <- computeRestarts(cond)
[08:28:09.190]                         for (restart in restarts) {
[08:28:09.190]                           name <- restart$name
[08:28:09.190]                           if (is.null(name)) 
[08:28:09.190]                             next
[08:28:09.190]                           if (!grepl(pattern, name)) 
[08:28:09.190]                             next
[08:28:09.190]                           invokeRestart(restart)
[08:28:09.190]                           muffled <- TRUE
[08:28:09.190]                           break
[08:28:09.190]                         }
[08:28:09.190]                       }
[08:28:09.190]                     }
[08:28:09.190]                     invisible(muffled)
[08:28:09.190]                   }
[08:28:09.190]                   muffleCondition(cond)
[08:28:09.190]                 })
[08:28:09.190]             }))
[08:28:09.190]             future::FutureResult(value = ...future.value$value, 
[08:28:09.190]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.190]                   ...future.rng), globalenv = if (FALSE) 
[08:28:09.190]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:09.190]                     ...future.globalenv.names))
[08:28:09.190]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:09.190]         }, condition = base::local({
[08:28:09.190]             c <- base::c
[08:28:09.190]             inherits <- base::inherits
[08:28:09.190]             invokeRestart <- base::invokeRestart
[08:28:09.190]             length <- base::length
[08:28:09.190]             list <- base::list
[08:28:09.190]             seq.int <- base::seq.int
[08:28:09.190]             signalCondition <- base::signalCondition
[08:28:09.190]             sys.calls <- base::sys.calls
[08:28:09.190]             `[[` <- base::`[[`
[08:28:09.190]             `+` <- base::`+`
[08:28:09.190]             `<<-` <- base::`<<-`
[08:28:09.190]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:09.190]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:09.190]                   3L)]
[08:28:09.190]             }
[08:28:09.190]             function(cond) {
[08:28:09.190]                 is_error <- inherits(cond, "error")
[08:28:09.190]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:09.190]                   NULL)
[08:28:09.190]                 if (is_error) {
[08:28:09.190]                   sessionInformation <- function() {
[08:28:09.190]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:09.190]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:09.190]                       search = base::search(), system = base::Sys.info())
[08:28:09.190]                   }
[08:28:09.190]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.190]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:09.190]                     cond$call), session = sessionInformation(), 
[08:28:09.190]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:09.190]                   signalCondition(cond)
[08:28:09.190]                 }
[08:28:09.190]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:09.190]                 "immediateCondition"))) {
[08:28:09.190]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:09.190]                   ...future.conditions[[length(...future.conditions) + 
[08:28:09.190]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:09.190]                   if (TRUE && !signal) {
[08:28:09.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.190]                     {
[08:28:09.190]                       inherits <- base::inherits
[08:28:09.190]                       invokeRestart <- base::invokeRestart
[08:28:09.190]                       is.null <- base::is.null
[08:28:09.190]                       muffled <- FALSE
[08:28:09.190]                       if (inherits(cond, "message")) {
[08:28:09.190]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.190]                         if (muffled) 
[08:28:09.190]                           invokeRestart("muffleMessage")
[08:28:09.190]                       }
[08:28:09.190]                       else if (inherits(cond, "warning")) {
[08:28:09.190]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.190]                         if (muffled) 
[08:28:09.190]                           invokeRestart("muffleWarning")
[08:28:09.190]                       }
[08:28:09.190]                       else if (inherits(cond, "condition")) {
[08:28:09.190]                         if (!is.null(pattern)) {
[08:28:09.190]                           computeRestarts <- base::computeRestarts
[08:28:09.190]                           grepl <- base::grepl
[08:28:09.190]                           restarts <- computeRestarts(cond)
[08:28:09.190]                           for (restart in restarts) {
[08:28:09.190]                             name <- restart$name
[08:28:09.190]                             if (is.null(name)) 
[08:28:09.190]                               next
[08:28:09.190]                             if (!grepl(pattern, name)) 
[08:28:09.190]                               next
[08:28:09.190]                             invokeRestart(restart)
[08:28:09.190]                             muffled <- TRUE
[08:28:09.190]                             break
[08:28:09.190]                           }
[08:28:09.190]                         }
[08:28:09.190]                       }
[08:28:09.190]                       invisible(muffled)
[08:28:09.190]                     }
[08:28:09.190]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.190]                   }
[08:28:09.190]                 }
[08:28:09.190]                 else {
[08:28:09.190]                   if (TRUE) {
[08:28:09.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:09.190]                     {
[08:28:09.190]                       inherits <- base::inherits
[08:28:09.190]                       invokeRestart <- base::invokeRestart
[08:28:09.190]                       is.null <- base::is.null
[08:28:09.190]                       muffled <- FALSE
[08:28:09.190]                       if (inherits(cond, "message")) {
[08:28:09.190]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:09.190]                         if (muffled) 
[08:28:09.190]                           invokeRestart("muffleMessage")
[08:28:09.190]                       }
[08:28:09.190]                       else if (inherits(cond, "warning")) {
[08:28:09.190]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:09.190]                         if (muffled) 
[08:28:09.190]                           invokeRestart("muffleWarning")
[08:28:09.190]                       }
[08:28:09.190]                       else if (inherits(cond, "condition")) {
[08:28:09.190]                         if (!is.null(pattern)) {
[08:28:09.190]                           computeRestarts <- base::computeRestarts
[08:28:09.190]                           grepl <- base::grepl
[08:28:09.190]                           restarts <- computeRestarts(cond)
[08:28:09.190]                           for (restart in restarts) {
[08:28:09.190]                             name <- restart$name
[08:28:09.190]                             if (is.null(name)) 
[08:28:09.190]                               next
[08:28:09.190]                             if (!grepl(pattern, name)) 
[08:28:09.190]                               next
[08:28:09.190]                             invokeRestart(restart)
[08:28:09.190]                             muffled <- TRUE
[08:28:09.190]                             break
[08:28:09.190]                           }
[08:28:09.190]                         }
[08:28:09.190]                       }
[08:28:09.190]                       invisible(muffled)
[08:28:09.190]                     }
[08:28:09.190]                     muffleCondition(cond, pattern = "^muffle")
[08:28:09.190]                   }
[08:28:09.190]                 }
[08:28:09.190]             }
[08:28:09.190]         }))
[08:28:09.190]     }, error = function(ex) {
[08:28:09.190]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:09.190]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:09.190]                 ...future.rng), started = ...future.startTime, 
[08:28:09.190]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:09.190]             version = "1.8"), class = "FutureResult")
[08:28:09.190]     }, finally = {
[08:28:09.190]         if (!identical(...future.workdir, getwd())) 
[08:28:09.190]             setwd(...future.workdir)
[08:28:09.190]         {
[08:28:09.190]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:09.190]                 ...future.oldOptions$nwarnings <- NULL
[08:28:09.190]             }
[08:28:09.190]             base::options(...future.oldOptions)
[08:28:09.190]             if (.Platform$OS.type == "windows") {
[08:28:09.190]                 old_names <- names(...future.oldEnvVars)
[08:28:09.190]                 envs <- base::Sys.getenv()
[08:28:09.190]                 names <- names(envs)
[08:28:09.190]                 common <- intersect(names, old_names)
[08:28:09.190]                 added <- setdiff(names, old_names)
[08:28:09.190]                 removed <- setdiff(old_names, names)
[08:28:09.190]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:09.190]                   envs[common]]
[08:28:09.190]                 NAMES <- toupper(changed)
[08:28:09.190]                 args <- list()
[08:28:09.190]                 for (kk in seq_along(NAMES)) {
[08:28:09.190]                   name <- changed[[kk]]
[08:28:09.190]                   NAME <- NAMES[[kk]]
[08:28:09.190]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.190]                     next
[08:28:09.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.190]                 }
[08:28:09.190]                 NAMES <- toupper(added)
[08:28:09.190]                 for (kk in seq_along(NAMES)) {
[08:28:09.190]                   name <- added[[kk]]
[08:28:09.190]                   NAME <- NAMES[[kk]]
[08:28:09.190]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.190]                     next
[08:28:09.190]                   args[[name]] <- ""
[08:28:09.190]                 }
[08:28:09.190]                 NAMES <- toupper(removed)
[08:28:09.190]                 for (kk in seq_along(NAMES)) {
[08:28:09.190]                   name <- removed[[kk]]
[08:28:09.190]                   NAME <- NAMES[[kk]]
[08:28:09.190]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:09.190]                     next
[08:28:09.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:09.190]                 }
[08:28:09.190]                 if (length(args) > 0) 
[08:28:09.190]                   base::do.call(base::Sys.setenv, args = args)
[08:28:09.190]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:09.190]             }
[08:28:09.190]             else {
[08:28:09.190]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:09.190]             }
[08:28:09.190]             {
[08:28:09.190]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:09.190]                   0L) {
[08:28:09.190]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:09.190]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:09.190]                   base::options(opts)
[08:28:09.190]                 }
[08:28:09.190]                 {
[08:28:09.190]                   {
[08:28:09.190]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:09.190]                     NULL
[08:28:09.190]                   }
[08:28:09.190]                   options(future.plan = NULL)
[08:28:09.190]                   if (is.na(NA_character_)) 
[08:28:09.190]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:09.190]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:09.190]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:09.190]                     .init = FALSE)
[08:28:09.190]                 }
[08:28:09.190]             }
[08:28:09.190]         }
[08:28:09.190]     })
[08:28:09.190]     if (TRUE) {
[08:28:09.190]         base::sink(type = "output", split = FALSE)
[08:28:09.190]         if (TRUE) {
[08:28:09.190]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:09.190]         }
[08:28:09.190]         else {
[08:28:09.190]             ...future.result["stdout"] <- base::list(NULL)
[08:28:09.190]         }
[08:28:09.190]         base::close(...future.stdout)
[08:28:09.190]         ...future.stdout <- NULL
[08:28:09.190]     }
[08:28:09.190]     ...future.result$conditions <- ...future.conditions
[08:28:09.190]     ...future.result$finished <- base::Sys.time()
[08:28:09.190]     ...future.result
[08:28:09.190] }
[08:28:09.193] Exporting 1 global objects (2.81 KiB) to cluster node #1 ...
[08:28:09.193] Exporting ‘my_fcn’ (2.53 KiB) to cluster node #1 ...
[08:28:09.194] Exporting ‘my_fcn’ (2.53 KiB) to cluster node #1 ... DONE
[08:28:09.194] Exporting 1 global objects (2.81 KiB) to cluster node #1 ... DONE
[08:28:09.194] MultisessionFuture started
[08:28:09.194] - Launch lazy future ... done
[08:28:09.195] run() for ‘MultisessionFuture’ ... done
[08:28:09.195] result() for ClusterFuture ...
[08:28:09.195] receiveMessageFromWorker() for ClusterFuture ...
[08:28:09.195] - Validating connection of MultisessionFuture
[08:28:09.237] - received message: FutureResult
[08:28:09.237] - Received FutureResult
[08:28:09.237] - Erased future from FutureRegistry
[08:28:09.237] result() for ClusterFuture ...
[08:28:09.238] - result already collected: FutureResult
[08:28:09.238] result() for ClusterFuture ... done
[08:28:09.238] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:09.238] result() for ClusterFuture ... done
[08:28:09.238] result() for ClusterFuture ...
[08:28:09.238] - result already collected: FutureResult
[08:28:09.238] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[08:28:09.239] plan(): Setting new future strategy stack:
[08:28:09.239] List of future strategies:
[08:28:09.239] 1. FutureStrategy:
[08:28:09.239]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:09.239]    - tweaked: FALSE
[08:28:09.239]    - call: future::plan(oplan)
[08:28:09.240] plan(): nbrOfWorkers() = 1
> 
