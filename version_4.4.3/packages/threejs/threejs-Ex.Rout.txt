
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "threejs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('threejs')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("globejs")
> ### * globejs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: globejs
> ### Title: Plot Data on 3D Globes
> ### Aliases: globejs
> 
> ### ** Examples
> 
> # Plot flights to frequent destinations from Callum Prentice's
> # global flight data set,
> # http://callumprentice.github.io/apps/flight_stream/index.html
> data(flights)
> # Approximate locations as factors
> dest   <- factor(sprintf("%.2f:%.2f",flights[,3], flights[,4]))
> # A table of destination frequencies
> freq <- sort(table(dest), decreasing=TRUE)
> # The most frequent destinations in these data, possibly hub airports?
> frequent_destinations <- names(freq)[1:10]
> # Subset the flight data by destination frequency
> idx <- dest %in% frequent_destinations
> frequent_flights <- flights[idx, ]
> # Lat/long and counts of frequent flights
> ll <- unique(frequent_flights[,3:4])
> # Plot frequent destinations as bars, and the flights to and from
> # them as arcs. Adjust arc width and color by frequency.
> globejs(lat=ll[, 1], long=ll[, 2], arcs=frequent_flights,
+         bodycolor="#aaaaff", arcsHeight=0.3, arcsLwd=2,
+         arcsColor="#ffff00", arcsOpacity=0.15,
+         atmosphere=TRUE, color="#00aaff", pointsize=0.5)
> 
> ## Not run: 
> ##D # Plot populous world cities from the maps package.
> ##D library(threejs)
> ##D library(maps)
> ##D data(world.cities, package="maps")
> ##D cities <- world.cities[order(world.cities$pop, decreasing=TRUE)[1:1000],]
> ##D value  <- 100 * cities$pop / max(cities$pop)
> ##D col <- colorRampPalette(c("cyan", "lightgreen"))(10)[floor(10 * value/100) + 1]
> ##D globejs(lat=cities$lat, long=cities$long, value=value, color=col, atmosphere=TRUE)
> ##D 
> ##D # Plot the data on the moon:
> ##D moon <- system.file("images/moon.jpg", package="threejs")
> ##D globejs(img=moon, bodycolor="#555555", lightcolor="#aaaaaa",
> ##D         lat=cities$lat, long=cities$long,
> ##D         value=value, color=col)
> ##D 
> ##D # Using global plots from the maptools, rworldmap, or sp packages.
> ##D 
> ##D # Instead of using ready-made images of the earth, we can use
> ##D # many R spatial imaging packages to produce globe images
> ##D # dynamically. With a little extra effort you can build globes with total
> ##D # control over how they are plotted.
> ##D 
> ##D library(maptools)
> ##D library(threejs)
> ##D data(wrld_simpl)
> ##D 
> ##D bgcolor <- "#000025"
> ##D earth <- tempfile(fileext=".jpg")
> ##D 
> ##D # NOTE: Use antialiasing to smooth border boundary lines. But! Set the jpeg
> ##D # background color to the globe background color to avoid a visible aliasing
> ##D # effect at the the plot edges.
> ##D 
> ##D jpeg(earth, width=2048, height=1024, quality=100, bg=bgcolor, antialias="default")
> ##D par(mar = c(0,0,0,0), pin = c(4,2), pty = "m",  xaxs = "i",
> ##D     xaxt = "n",       xpd = FALSE,  yaxs = "i", bty = "n", yaxt = "n")
> ##D plot(wrld_simpl, col="black", bg=bgcolor, border="cyan", ann=FALSE,
> ##D      setParUsrBB=TRUE)
> ##D dev.off()
> ##D globejs(earth)
> ##D 
> ##D # A shiny example:
> ##D shiny::runApp(system.file("examples/globe",package="threejs"))
> ## End(Not run)
> 
> # See http://bwlewis.github.io/rthreejs for additional examples.
> 
> 
> 
> cleanEx()
> nameEx("graphjs")
> ### * graphjs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graphjs
> ### Title: Interactive 3D Graph Visualization
> ### Aliases: graphjs
> 
> ### ** Examples
> 
> set.seed(1)
> g <- sample_islands(3, 10, 5/10, 1)
> i <- cluster_louvain(g)
> (graphjs(g, vertex.color=c("orange", "green", "blue")[i$membership], vertex.shape="sphere"))
> 
> # similar example with user-defined directional lighting
> l1 = light_directional(color = "red", position = c(0, -0.8, 0.5))
> l2 = light_directional(color = "yellow", position = c(0, 0.8, -0.5))
> l3 = light_ambient(color = "#555555")
> (graphjs(g, vertex.color="gray", vertex.shape="sphere", lights=list(l1, l2, l3)))
> 
> # Les Miserables Character Co-appearance Data
> data("LeMis")
> (graphjs(LeMis))
This graph was created by an old(er) igraph version.
ℹ Call `igraph::upgrade_graph()` on it to use with the current igraph version.
For now we convert it on the fly...
> 
> # ...plot Character names
> (graphjs(LeMis, vertex.shape=V(LeMis)$label))
> 
> # SNAP Facebook ego network dataset
> data("ego")
> (graphjs(ego, bg="black"))
This graph was created by an old(er) igraph version.
ℹ Call `igraph::upgrade_graph()` on it to use with the current igraph version.
For now we convert it on the fly...
> 
> ## Not run: 
> ##D # A shiny example
> ##D shiny::runApp(system.file("examples/graph", package="threejs"))
> ##D 
> ##D # A graph amination that shows several layouts
> ##D data("LeMis")
> ##D graphjs(LeMis,
> ##D   layout=list(
> ##D     layout_randomly(LeMis, dim=3),
> ##D     layout_on_sphere(LeMis),
> ##D     layout_with_drl(LeMis, dim=3),  # note! somewhat slow...
> ##D     layout_with_fr(LeMis, dim=3, niter=30)),
> ##D   main=list("random layout", "sphere layout", "drl layout", "fr layout"),
> ##D   fpl=300)
> ##D 
> ##D # A simple graph animation illustrating edge modification
> ##D g <- make_ring(5) - edges(1:5)
> ##D graph_list <- list(
> ##D  g + edge(1, 2),
> ##D  g + edge(1, 2) + edge(2, 3),
> ##D  g + edge(1, 2) + edge(2, 3) + edge(3, 4),
> ##D  g + edge(1, 2) + edge(2, 3) + edge(3, 4) + edge(4, 5),
> ##D  g + edge(1, 2) + edge(2, 3) + edge(3, 4) + edge(4, 5) + edge(5, 1))
> ##D  graphjs(graph_list, main=paste(1:5),
> ##D    vertex.color=rainbow(5), vertex.shape="sphere", edge.width=3)
> ##D 
> ##D # see `demo(package="threejs") for more animation demos.
> ##D 
> ##D # A crosstalk example
> ##D library(crosstalk)
> ##D library(DT)
> ##D data(LeMis)
> ##D sd = SharedData$new(data.frame(Name = V(LeMis)$label))
> ##D print(bscols(
> ##D   graphjs(LeMis, brush=TRUE, crosstalk=sd),
> ##D   datatable(sd, rownames=FALSE, options=list(dom='tp'))
> ##D ))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("lines3d")
> ### * lines3d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lines3d
> ### Title: Add lines to a 3D scatterplot
> ### Aliases: lines3d
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  x <- rnorm(5)
> ##D  y <- rnorm(5)
> ##D  z <- rnorm(5)
> ##D  scatterplot3js(x, y, z, pch="@", color=rainbow(5)) %>%
> ##D    lines3d(c(1, 2), c(3, 4), lwd=2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("points3d")
> ### * points3d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: points3d
> ### Title: Add points to a 3D scatterplot
> ### Aliases: points3d
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  # Adding point labels to a scatterplot:
> ##D  x <- rnorm(5)
> ##D  y <- rnorm(5)
> ##D  z <- rnorm(5)
> ##D  scatterplot3js(x, y, z, pch="o") %>%
> ##D    points3d(x + 0.1, y + 0.1, z, color="red", pch=paste("point", 1:5))
> ##D 
> ##D # Adding point labels to a graph, obtaining the graph vertex coordinates
> ##D # with the `vertices()` function:
> ##D data(LeMis)
> ##D graphjs(LeMis) %>% points3d(vertices(.), color="red", pch=V(LeMis)$label)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("scatterplot3js")
> ### * scatterplot3js
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scatterplot3js
> ### Title: Interactive 3D Scatterplots
> ### Aliases: scatterplot3js
> 
> ### ** Examples
> 
> # Example 1 from the scatterplot3d package (cf.)
> z <- seq(-10, 10, 0.1)
> x <- cos(z)
> y <- sin(z)
> scatterplot3js(x, y, z, color=rainbow(length(z)))
> 
> # Same example with explicit axis labels
> scatterplot3js(x, y, z, color=rainbow(length(z)), axisLabels=c("a", "b", "c"))
> 
> # Same example showing multiple point styles with pch
> scatterplot3js(x, y, z, color=rainbow(length(z)),
+                pch=sample(c(".", "o", letters), length(x), replace=TRUE))
> 
> # Point cloud example, should run this with WebGL!
> N     <- 20000
> theta <- runif (N) * 2 * pi
> phi   <- runif (N) * 2 * pi
> R     <- 1.5
> r     <- 1.0
> x <- (R + r * cos(theta)) * cos(phi)
> y <- (R + r * cos(theta)) * sin(phi)
> z <- r * sin(theta)
> d <- 6
> h <- 6
> t <- 2 * runif (N) - 1
> w <- t^2 * sqrt(1 - t^2)
> x1 <- d * cos(theta) * sin(phi) * w
> y1 <- d * sin(theta) * sin(phi) * w
> i <- order(phi)
> j <- order(t)
> col <- c( rainbow(length(phi))[order(i)],
+          rainbow(length(t), start=0, end=2/6)[order(j)])
> M <- cbind(x=c(x, x1), y=c(y, y1), z=c(z, h*t))
> scatterplot3js(M, size=0.5, color=col, bg="black", pch=".")
> 
> # Plot generic text using 'pch' (we label some points in this example)
> set.seed(1)
> x <- rnorm(5); y <- rnorm(5); z <- rnorm(5)
> scatterplot3js(x, y, z, pch="@") %>%
+    points3d(x + 0.1, y + 0.1, z, color="red", pch=paste("point", 1:5))
> 
> ## Not run: 
> ##D   # A shiny example
> ##D   shiny::runApp(system.file("examples/scatterplot", package="threejs"))
> ## End(Not run)
> 
> ## Not run: 
> ##D   # A crosstalk example
> ##D   library(crosstalk)
> ##D   library(d3scatter) # devtools::install_github("jcheng5/d3scatter")
> ##D   z <- seq(-10, 10, 0.1)
> ##D   x <- cos(z)
> ##D   y <- sin(z)
> ##D   sd <- SharedData$new(data.frame(x=x, y=y, z=z))
> ##D   print(bscols(
> ##D     scatterplot3js(x, y, z, color=rainbow(length(z)), brush=TRUE, crosstalk=sd),
> ##D     d3scatter(sd, ~x, ~y, width="100%", height=300)
> ##D   ))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("texture")
> ### * texture
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: texture
> ### Title: Convert an image file or uri to a three.js texture
> ### Aliases: texture
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # A big image (may take a while to download):
> ##D img <- paste("http://eoimages.gsfc.nasa.gov/",
> ##D              "images/imagerecords/73000/73909/",
> ##D              "world.topo.bathy.200412.3x5400x2700.jpg", sep="")
> ##D t <- texture(img)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("threejs-package")
> ### * threejs-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: threejs-package
> ### Title: Interactive 3D graphics including point clouds and globes using
> ###   three.js and htmlwidgets.
> ### Aliases: threejs-package threejs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library("shiny")
> ##D runApp(system.file("examples/globe",package="threejs"))
> ##D runApp(system.file("examples/scatterplot",package="threejs"))
> ##D 
> ##D # See also help for globe.js and scatterplot3.js
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.983 0.105 1.093 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
