
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "isoband"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('isoband')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("iso_to_sfg")
> ### * iso_to_sfg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iso_to_sfg
> ### Title: Convert isolines or isobands to sfg object
> ### Aliases: iso_to_sfg
> 
> ### ** Examples
> 
> if (requireNamespace("sf", quietly = TRUE)) {
+ library(sf)
+ library(ggplot2)
+ 
+ # Example 1: simple 5x5 matrix
+ m <- matrix(c(0, 2, 2, 2, 0,
+               0, 1, 0, 1, 0,
+               0, 1, 0, 0, 0,
+               0, 1, 0, 1, 0,
+               0, 0, 0, 0, 0), 5, 5, byrow = TRUE)
+ 
+ z <- isolines(1:ncol(m), nrow(m):1, m, c(0.5, 1.5))
+ lines <- iso_to_sfg(z)
+ x <- st_sf(level = names(lines), geometry = st_sfc(lines))
+ ggplot(x) + geom_sf(aes(color = level))
+ 
+ # Example 2: volcano dataset
+ m <- volcano
+ b <- isobands((1:ncol(m))/(ncol(m)+1), (nrow(m):1)/(nrow(m)+1), m,
+               10*9:19, 10*10:20)
+ bands <- iso_to_sfg(b)
+ x <- st_sf(level = as.numeric(sub(":.*", "", names(bands))), geometry = st_sfc(bands))
+ ggplot(x) + geom_sf(aes(color = level, fill = level))
+ 
+ # Example 3: invalid simple features
+ m <- matrix(c(1.5, 1.5, 1.5, 1.5, 0.6,
+               0.5, 1.5, 1.5,   0,   0,
+                 0,   1,   0,   1,   1,
+                 0,   1,   0, 0.7,   0,
+               0.9, 1.3, 1.8, 1.4, 0.4), 5, 5, byrow = TRUE)
+ 
+ raw <- isobands(1:5, 5:1, m, levels_low = 0:1, levels_high = 1:2)
+ bands <- iso_to_sfg(raw)
+ 
+ iso <- st_sf(
+   id = factor(1:length(bands)),
+   geometry = st_sfc(bands)
+ )
+ 
+ # the geometries are not valid
+ st_is_valid(iso, reason = TRUE)
+ # this doesn't prevent us from plotting them
+ ggplot(iso, aes(fill = id)) + geom_sf()
+ 
+ # make all geometries valid, requires GEOS >= 3.8.0
+ if (sf_extSoftVersion()["GEOS"] >= "3.8.0") {
+   iso2 <- st_make_valid(iso)
+   st_is_valid(iso2, reason=TRUE)
+   # the plot should be unchanged
+   ggplot(iso2, aes(fill = id)) + geom_sf()
+ }
+ 
+ # alternatively, if we shift all data values by a tiny
+ # amount (here, 1e-10) so they don't coincide with the band
+ # limits, no invalid geometries are generated.
+ raw <- isobands(1:5, 5:1, m + 1e-10, levels_low = 0:1, levels_high = 1:2)
+ bands <- iso_to_sfg(raw)
+ iso <- st_sf(id = factor(1:length(bands)), geometry = st_sfc(bands))
+ st_is_valid(iso, reason = TRUE)
+ }
Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE
[1] "Valid Geometry" "Valid Geometry"
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:sf’

> nameEx("isobands")
> ### * isobands
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isobands
> ### Title: Efficient calculation of isolines and isobands from elevation
> ###   grid
> ### Aliases: isobands isolines
> 
> ### ** Examples
> 
> library(grid)
> 
> #' # one simple connected shape
> m <- matrix(c(0, 0, 0, 0, 0, 0,
+               0, 0, 0, 1, 1, 0,
+               0, 0, 1, 1, 1, 0,
+               0, 1, 1, 0, 0, 0,
+               0, 0, 0, 1, 0, 0,
+               0, 0, 0, 0, 0, 0), 6, 6, byrow = TRUE)
> 
> df_bands <- isobands((1:ncol(m))/(ncol(m)+1), (nrow(m):1)/(nrow(m)+1), m, 0.5, 1.5)[[1]]
> df_lines <- isolines((1:ncol(m))/(ncol(m)+1), (nrow(m):1)/(nrow(m)+1), m, 0.5)[[1]]
> g <- expand.grid(x = (1:ncol(m))/(ncol(m)+1), y = (nrow(m):1)/(nrow(m)+1))
> grid.newpage()
> grid.points(g$x, g$y, default.units = "npc", pch = 19, size = unit(0.5, "char"))
> grid.path(df_bands$x, df_bands$y, df_bands$id, gp = gpar(fill = "cornsilk", col = NA))
> grid.polyline(df_lines$x, df_lines$y, df_lines$id)
> 
> # a similar plot can be generated with the plot_iso() function,
> # which is useful for exploring how the algorithm works
> plot_iso(m, 0.5, 1.5)
> 
> # NAs are ignored
> m <- matrix(c(NA, NA, NA, 0, 0, 0,
+               NA, NA, NA, 1, 1, 0,
+                0,  0,  1, 1, 1, 0,
+                0,  1,  1, 0, 0, 0,
+                0,  0,  0, 1, 0, 0,
+                0,  0,  0, 0, 0, 0), 6, 6, byrow = TRUE)
> plot_iso(m, 0.5, 1.5)
> 
> # two separate shapes
> m <- matrix(c(0, 0, 1, 1,
+               0, 1, 1, 1,
+               1, 1, 0, 0,
+               0, 0, 0.8, 0), 4, 4, byrow = TRUE)
> plot_iso(m, 0.5, 1.5)
> 
> # shape with hole
> m <- matrix(c(0, 0, 0, 0, 0, 0,
+               0, 1, 1, 1, 1, 0,
+               0, 1, 2, 2, 1, 0,
+               0, 1, 2, 2, 1, 0,
+               0, 1, 1, 1, 1, 0,
+               0, 0, 0, 0, 0, 0), 6, 6, byrow = TRUE)
> plot_iso(m, 0.5, 1.5)
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("isobands_grob")
> ### * isobands_grob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isobands_grob
> ### Title: Render isobands
> ### Aliases: isobands_grob
> 
> ### ** Examples
> 
> library(grid)
> 
> viridis_pal <- colorRampPalette(
+   c("#440154", "#414487", "#2A788E", "#22A884", "#7AD151", "#FDE725"),
+   space = "Lab"
+ )
> 
> x <- (1:ncol(volcano))/(ncol(volcano)+1)
> y <- (nrow(volcano):1)/(nrow(volcano)+1)
> bands <- isobands(x, y, volcano, 5*(18:38), 5*(19:39))
> 
> b <- isobands_grob(
+   bands,
+   gp = gpar(col = "black", fill = viridis_pal(21), alpha = 0.5)
+ )
> 
> grid.newpage()
> grid.draw(b)
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("isolines_grob")
> ### * isolines_grob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isolines_grob
> ### Title: Render labeled isolines
> ### Aliases: isolines_grob
> 
> ### ** Examples
> 
> library(grid)
> 
> viridis_pal <- colorRampPalette(
+   c("#440154", "#414487", "#2A788E", "#22A884", "#7AD151", "#FDE725"),
+   space = "Lab"
+ )
> 
> x <- (1:ncol(volcano))/(ncol(volcano)+1)
> y <- (nrow(volcano):1)/(nrow(volcano)+1)
> lines <- isolines(x, y, volcano, 5*(19:38))
> bands <- isobands(x, y, volcano, 5*(18:38), 5*(19:39))
> 
> b <- isobands_grob(
+   bands,
+   gp = gpar(col = NA, fill = viridis_pal(21), alpha = 0.4)
+ )
> l <- isolines_grob(
+   lines, breaks = 20*(5:10),
+   gp = gpar(
+     lwd = c(.3, 1, .3, .3)
+   )
+ )
> 
> grid.newpage()
> grid.draw(b)
> grid.draw(l)
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("plot_iso")
> ### * plot_iso
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_iso
> ### Title: Visualize a single isoband
> ### Aliases: plot_iso
> 
> ### ** Examples
> 
> m <- matrix(c(0, 0, 0, 0, 0, 0,
+               0, 2, 2, 2, 2, 0,
+               0, 2, 0, 0, 2, 0,
+               0, 2, 0, 0, 2, 0,
+               0, 2, 2, 2, 2, 0,
+               0, 0, 0, 0, 0, 0), 6, 6, byrow = TRUE)
> 
> plot_iso(m, 0.5, 1.5)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.794 0.051 0.846 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
