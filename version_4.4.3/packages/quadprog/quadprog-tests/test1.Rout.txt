
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(quadprog)
> 
> FullAmat <- function(Dmat, Amat, Aind){
+   res <- matrix(0, nrow=NROW(Dmat), ncol=NCOL(Amat))
+   ii <- as.vector(Aind[-1,])
+   ii <- cbind(ii, rep(1:NCOL(Aind), each=NROW(Aind)-1))
+   ind <- ii[,1] != 0
+   res[ii[ind,]] <- as.vector(Amat)[ind]
+   res
+ }
> 
> Dmat       <- matrix(0,3,3)
> diag(Dmat) <- 1
> dvec       <- c(0,5,0)
> Aind <- c(2,2,2)
> Aind <- rbind(Aind,c(1,1,2))
> Aind <- rbind(Aind,c(2,2,3))
> Amat <- c(-4,2,-2)
> Amat <- rbind(Amat,c(-3,1,1))
> bvec  <- c(-8,2,0)
> res<-solve.QP.compact(Dmat,dvec,Amat,Aind,bvec=bvec)
> print(res)
$solution
[1] 0.4761905 1.0476190 2.0952381

$value
[1] -2.380952

$unconstrained.solution
[1] 0 5 0

$iterations
[1] 3 0

$Lagrangian
[1] 0.0000000 0.2380952 2.0952381

$iact
[1] 3 2

> res<-solve.QP.compact(solve(chol(Dmat)),dvec,Amat,Aind,bvec=bvec,fac=T)
> print(res)
$solution
[1] 0.4761905 1.0476190 2.0952381

$value
[1] -2.380952

$unconstrained.solution
[1] 0 5 0

$iterations
[1] 3 0

$Lagrangian
[1] 0.0000000 0.2380952 2.0952381

$iact
[1] 3 2

> 
> print(crv1 <- (crossprod(res$unc, Dmat)/2-dvec)%*%res$unc)
      [,1]
[1,] -12.5
> print(crv2 <- (crossprod(res$solution, Dmat)/2-dvec)%*%res$solution)
          [,1]
[1,] -2.380952
> print(res$value)
[1] -2.380952
> print(crv2 >= crv1)
     [,1]
[1,] TRUE
> Amat <- FullAmat(Dmat, Amat, Aind)
> print(all(crossprod(Amat, res$solution) >= bvec))
[1] TRUE
> 
> Dmat <- matrix(c(4,-2,-2,4),2,2)
> dvec <- c(-6,0)
> Amat <- c(1,1,1)
> Amat <- rbind(Amat,Amat)
> Aind <- c(1,1,2)
> Aind <- rbind(Aind,c(1,2,1))
> Aind <- rbind(Aind,c(0,0,2))
> bvec <- c(0,0,2)
> res<-solve.QP.compact(Dmat,dvec,Amat,Aind,bvec=bvec)
> print(res)
$solution
[1] 0.5 1.5

$value
[1] 6.5

$unconstrained.solution
[1] -2 -1

$iterations
[1] 2 0

$Lagrangian
[1] 0 0 5

$iact
[1] 3

> res<-solve.QP.compact(solve(chol(Dmat)),dvec,Amat,Aind,bvec=bvec,fac=T)
> print(res)
$solution
[1] 0.5 1.5

$value
[1] 6.5

$unconstrained.solution
[1] -2 -1

$iterations
[1] 2 0

$Lagrangian
[1] 0 0 5

$iact
[1] 3

> 
> print(crv1 <- (crossprod(res$unc, Dmat)/2-dvec)%*%res$unc)
     [,1]
[1,]   -6
> print(crv2 <- (crossprod(res$solution, Dmat)/2-dvec)%*%res$solution)
     [,1]
[1,]  6.5
> print(res$value)
[1] 6.5
> print(crv2 >= crv1)
     [,1]
[1,] TRUE
> Amat <- FullAmat(Dmat, Amat, Aind)
> print(all(crossprod(Amat, res$solution) >= bvec))
[1] TRUE
> 
> 
