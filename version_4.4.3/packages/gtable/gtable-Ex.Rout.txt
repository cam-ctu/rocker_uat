
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gtable"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gtable')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bind")
> ### * bind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bind
> ### Title: Row and column binding for gtables.
> ### Aliases: bind rbind.gtable cbind.gtable
> 
> ### ** Examples
> 
> library(grid)
> a <- rectGrob(gp = gpar(fill = "red"))
> b <- circleGrob()
> c <- linesGrob()
> 
> row <- matrix(list(a, b), nrow = 1)
> col <- matrix(list(a, b), ncol = 1)
> mat <- matrix(list(a, b, c, nullGrob()), nrow = 2)
> 
> row_gt <- gtable_matrix("demo", row, unit(c(1, 1), "null"), unit(1, "null"))
> col_gt <- gtable_matrix("demo", col, unit(1, "null"), unit(c(1, 1), "null"))
> mat_gt <- gtable_matrix("demo", mat, unit(c(1, 1), "null"), unit(c(1, 1), "null"))
> 
> # cbind
> c_binded <- cbind(mat_gt, col_gt, size = "first")
> plot(c_binded)
> 
> # rbind
> r_binded <- rbind(mat_gt, row_gt, size = "last")
> plot(r_binded)
> 
> # Dimensions must match along bind direction
> try(cbind(mat_gt, row_gt))
Error in cbind_gtable(x, y, size = size) : 
  `x` and `y` must have the same number of rows
> 
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable")
> ### * gtable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable
> ### Title: Create a new grob table.
> ### Aliases: gtable
> 
> ### ** Examples
> 
> library(grid)
> a <- gtable(unit(1:3, c("cm")), unit(5, "cm"))
> a
TableGrob (1 x 3) "layout": 0 grobs
> gtable_show_layout(a)
> 
> # Add a grob:
> rect <- rectGrob(gp = gpar(fill = "black"))
> a <- gtable_add_grob(a, rect, 1, 1)
> a
TableGrob (1 x 3) "layout": 1 grobs
  z     cells   name               grob
1 1 (1-1,1-1) layout rect[GRID.rect.24]
> plot(a)
> 
> # gtables behave like matrices:
> dim(a)
[1] 1 3
> t(a)
TableGrob (3 x 1) "layout": 1 grobs
  z     cells   name               grob
1 1 (1-1,1-1) layout rect[GRID.rect.24]
> plot(t(a))
> 
> # when subsetting, grobs are retained if their extents lie in the
> # rows/columns that retained.
> 
> b <- gtable(unit(c(2, 2, 2), "cm"), unit(c(2, 2, 2), "cm"))
> b <- gtable_add_grob(b, rect, 2, 2)
> b[1, ]
TableGrob (1 x 3) "layout": 0 grobs
> b[, 1]
TableGrob (3 x 1) "layout": 0 grobs
> b[2, 2]
TableGrob (1 x 1) "layout": 1 grobs
  z     cells   name               grob
1 1 (1-1,1-1) layout rect[GRID.rect.24]
> 
> # gtable have row and column names
> rownames(b) <- 1:3
> rownames(b)[2] <- 200
> colnames(b) <- letters[1:3]
> dimnames(b)
[[1]]
[1]   1 200   3

[[2]]
[1] "a" "b" "c"

> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_add_cols")
> ### * gtable_add_cols
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_add_cols
> ### Title: Add new columns in specified position.
> ### Aliases: gtable_add_cols
> 
> ### ** Examples
> 
> library(grid)
> rect <- rectGrob(gp = gpar(fill = "#00000080"))
> tab <- gtable(unit(rep(1, 3), "null"), unit(rep(1, 3), "null"))
> tab <- gtable_add_grob(tab, rect, t = 1, l = 1, r = 3)
> tab <- gtable_add_grob(tab, rect, t = 1, b = 3, l = 1)
> tab <- gtable_add_grob(tab, rect, t = 1, b = 3, l = 3)
> dim(tab)
[1] 3 3
> plot(tab)
> 
> # Grobs will continue to span over new rows if added in the middle
> tab2 <- gtable_add_cols(tab, unit(1, "null"), 1)
> dim(tab2)
[1] 3 4
> plot(tab2)
> 
> # But not when added to left (0) or right (-1, the default)
> tab3 <- gtable_add_cols(tab, unit(1, "null"))
> tab3 <- gtable_add_cols(tab3, unit(1, "null"), 0)
> dim(tab3)
[1] 3 5
> plot(tab3)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_add_grob")
> ### * gtable_add_grob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_add_grob
> ### Title: Add a single grob, possibly spanning multiple rows or columns.
> ### Aliases: gtable_add_grob
> 
> ### ** Examples
> 
> library(grid)
> 
> gt <- gtable(widths = unit(c(1, 1), 'null'), heights = unit(c(1, 1), 'null'))
> pts <- pointsGrob(x = runif(5), y = runif(5))
> 
> # Add a grob to a single cell (top-right cell)
> gt <- gtable_add_grob(gt, pts, t = 1, l = 2)
> 
> # Add a grob spanning multiple cells
> gt <- gtable_add_grob(gt, pts, t = 1, l = 1, b = 2)
> 
> plot(gt)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_add_padding")
> ### * gtable_add_padding
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_add_padding
> ### Title: Add padding around edges of table.
> ### Aliases: gtable_add_padding
> 
> ### ** Examples
> 
> library(grid)
> gt <- gtable(unit(1, "null"), unit(1, "null"))
> gt <- gtable_add_grob(gt, rectGrob(gp = gpar(fill = "black")), 1, 1)
> 
> plot(gt)
> plot(cbind(gt, gt))
> plot(rbind(gt, gt))
> 
> pad <- gtable_add_padding(gt, unit(1, "cm"))
> plot(pad)
> plot(cbind(pad, pad))
> plot(rbind(pad, pad))
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_add_rows")
> ### * gtable_add_rows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_add_rows
> ### Title: Add new rows in specified position.
> ### Aliases: gtable_add_rows
> 
> ### ** Examples
> 
> library(grid)
> rect <- rectGrob(gp = gpar(fill = "#00000080"))
> tab <- gtable(unit(rep(1, 3), "null"), unit(rep(1, 3), "null"))
> tab <- gtable_add_grob(tab, rect, t = 1, l = 1, r = 3)
> tab <- gtable_add_grob(tab, rect, t = 1, b = 3, l = 1)
> tab <- gtable_add_grob(tab, rect, t = 1, b = 3, l = 3)
> dim(tab)
[1] 3 3
> plot(tab)
> 
> # Grobs will continue to span over new rows if added in the middle
> tab2 <- gtable_add_rows(tab, unit(1, "null"), 1)
> dim(tab2)
[1] 4 3
> plot(tab2)
> 
> # But not when added to top (0) or bottom (-1, the default)
> tab3 <- gtable_add_rows(tab, unit(1, "null"))
> tab3 <- gtable_add_rows(tab3, unit(1, "null"), 0)
> dim(tab3)
[1] 5 3
> plot(tab3)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_add_space")
> ### * gtable_add_space
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_add_space
> ### Title: Add row/column spacing.
> ### Aliases: gtable_add_space gtable_add_col_space gtable_add_row_space
> 
> ### ** Examples
> 
> library(grid)
> 
> rect <- rectGrob()
> rect_mat <- matrix(rep(list(rect), 9), nrow = 3)
> 
> gt <- gtable_matrix("rects", rect_mat, widths = unit(rep(1, 3), "null"),
+                     heights = unit(rep(1, 3), "null"))
> 
> plot(gt)
> 
> # Add spacing between the grobs
> # same height between all rows
> gt <- gtable_add_row_space(gt, unit(0.5, "cm"))
> 
> # Different width between the columns
> gt <- gtable_add_col_space(gt, unit(c(0.5, 1), "cm"))
> 
> plot(gt)
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_col")
> ### * gtable_col
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_col
> ### Title: Create a single column gtable
> ### Aliases: gtable_col
> 
> ### ** Examples
> 
> library(grid)
> a <- rectGrob(gp = gpar(fill = "red"))
> b <- circleGrob()
> c <- linesGrob()
> gt <- gtable_col("demo", list(a, b, c))
> gt
TableGrob (3 x 1) "demo": 3 grobs
  z     cells name                   grob
1 1 (1-1,1-1) demo     rect[GRID.rect.47]
2 2 (2-2,1-1) demo circle[GRID.circle.48]
3 3 (3-3,1-1) demo   lines[GRID.lines.49]
> plot(gt)
> gtable_show_layout(gt)
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_filter")
> ### * gtable_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_filter
> ### Title: Filter cells by name
> ### Aliases: gtable_filter
> 
> ### ** Examples
> 
> library(grid)
> gt <- gtable(unit(rep(5, 3), c("cm")), unit(5, "cm"))
> rect <- rectGrob(gp = gpar(fill = "black"))
> circ <- circleGrob(gp = gpar(fill = "red"))
> 
> gt <- gtable_add_grob(gt, rect, 1, 1, name = "rect")
> gt <- gtable_add_grob(gt, circ, 1, 3, name = "circ")
> 
> plot(gtable_filter(gt, "rect"))
> plot(gtable_filter(gt, "rect", trim = FALSE))
> plot(gtable_filter(gt, "circ"))
> plot(gtable_filter(gt, "circ", trim = FALSE))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_matrix")
> ### * gtable_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_matrix
> ### Title: Create a gtable from a matrix of grobs.
> ### Aliases: gtable_matrix
> 
> ### ** Examples
> 
> library(grid)
> a <- rectGrob(gp = gpar(fill = "red"))
> b <- circleGrob()
> c <- linesGrob()
> 
> row <- matrix(list(a, b, c), nrow = 1)
> col <- matrix(list(a, b, c), ncol = 1)
> mat <- matrix(list(a, b, c, nullGrob()), nrow = 2)
> 
> gtable_matrix("demo", row, unit(c(1, 1, 1), "null"), unit(1, "null"))
TableGrob (1 x 3) "demo": 3 grobs
  z     cells name                   grob
1 1 (1-1,1-1) demo     rect[GRID.rect.74]
2 2 (1-1,2-2) demo circle[GRID.circle.75]
3 3 (1-1,3-3) demo   lines[GRID.lines.76]
> gtable_matrix("demo", col, unit(1, "null"), unit(c(1, 1, 1), "null"))
TableGrob (3 x 1) "demo": 3 grobs
  z     cells name                   grob
1 1 (1-1,1-1) demo     rect[GRID.rect.74]
2 2 (2-2,1-1) demo circle[GRID.circle.75]
3 3 (3-3,1-1) demo   lines[GRID.lines.76]
> gtable_matrix("demo", mat, unit(c(1, 1), "null"), unit(c(1, 1), "null"))
TableGrob (2 x 2) "demo": 4 grobs
  z     cells name                   grob
1 1 (1-1,1-1) demo     rect[GRID.rect.74]
2 2 (2-2,1-1) demo circle[GRID.circle.75]
3 3 (1-1,2-2) demo   lines[GRID.lines.76]
4 4 (2-2,2-2) demo     null[GRID.null.77]
> 
> # Can specify z ordering
> z <- matrix(c(3, 1, 2, 4), nrow = 2)
> gtable_matrix("demo", mat, unit(c(1, 1), "null"), unit(c(1, 1), "null"), z = z)
TableGrob (2 x 2) "demo": 4 grobs
  z     cells name                   grob
1 3 (1-1,1-1) demo     rect[GRID.rect.74]
2 1 (2-2,1-1) demo circle[GRID.circle.75]
3 2 (1-1,2-2) demo   lines[GRID.lines.76]
4 4 (2-2,2-2) demo     null[GRID.null.77]
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_row")
> ### * gtable_row
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_row
> ### Title: Create a single row gtable.
> ### Aliases: gtable_row
> 
> ### ** Examples
> 
> library(grid)
> a <- rectGrob(gp = gpar(fill = "red"))
> b <- circleGrob()
> c <- linesGrob()
> gt <- gtable_row("demo", list(a, b, c))
> gt
TableGrob (1 x 3) "demo": 3 grobs
  z     cells name                   grob
1 1 (1-1,1-1) demo     rect[GRID.rect.78]
2 2 (1-1,2-2) demo circle[GRID.circle.79]
3 3 (1-1,3-3) demo   lines[GRID.lines.80]
> plot(gt)
> gtable_show_layout(gt)
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("gtable_show_layout")
> ### * gtable_show_layout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_show_layout
> ### Title: Visualise the layout of a gtable.
> ### Aliases: gtable_show_layout
> 
> ### ** Examples
> 
> gt <- gtable(widths = grid::unit(c(1, 0.5, 2), c("null", "cm", "null")),
+              heights = grid::unit(c(0.2, 1, 3), c("inch", "null", "cm")))
> gtable_show_layout(gt)
> 
> 
> 
> 
> cleanEx()
> nameEx("gtable_trim")
> ### * gtable_trim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gtable_trim
> ### Title: Trim off empty cells.
> ### Aliases: gtable_trim
> 
> ### ** Examples
> 
> library(grid)
> rect <- rectGrob(gp = gpar(fill = "black"))
> base <- gtable(unit(c(2, 2, 2), "cm"), unit(c(2, 2, 2), "cm"))
> 
> center <- gtable_add_grob(base, rect, 2, 2)
> plot(center)
> plot(gtable_trim(center))
> 
> col <- gtable_add_grob(base, rect, 1, 2, 3, 2)
> plot(col)
> plot(gtable_trim(col))
> 
> row <- gtable_add_grob(base, rect, 2, 1, 2, 3)
> plot(row)
> plot(gtable_trim(row))
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:grid’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.484 0.043 0.526 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
