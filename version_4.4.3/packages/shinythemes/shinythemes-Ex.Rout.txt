
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "shinythemes"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('shinythemes')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("shinytheme")
> ### * shinytheme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shinytheme
> ### Title: Return the URL for a Shiny theme
> ### Aliases: shinytheme
> 
> ### ** Examples
> 
> ## Not run: 
> ##D shinyApp(
> ##D   ui = fluidPage(theme = shinytheme("united"),
> ##D     ...
> ##D   ),
> ##D   server = function(input, output) { }
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("shinythemes")
> ### * shinythemes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shinythemes
> ### Title: Themes for Shiny
> ### Aliases: shinythemes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(shiny)
> ##D library(shinythemes)
> ##D 
> ##D # A very basic navbar page with different themes
> ##D shinyApp(
> ##D   ui = navbarPage("Default theme",
> ##D     tabPanel("Plot", "Plot tab contents..."),
> ##D     navbarMenu("More",
> ##D       tabPanel("Summary", "Summary tab contents..."),
> ##D       tabPanel("Table", "Table tab contents...")
> ##D     )
> ##D   ),
> ##D   server = function(input, output) { }
> ##D )
> ##D 
> ##D shinyApp(
> ##D   ui = navbarPage("United",
> ##D     theme = shinytheme("united"),
> ##D     tabPanel("Plot", "Plot tab contents..."),
> ##D     navbarMenu("More",
> ##D       tabPanel("Summary", "Summary tab contents..."),
> ##D       tabPanel("Table", "Table tab contents...")
> ##D     )
> ##D   ),
> ##D   server = function(input, output) { }
> ##D )
> ##D 
> ##D shinyApp(
> ##D   ui = navbarPage("Cerulean",
> ##D     theme = shinytheme("cerulean"),
> ##D     tabPanel("Plot", "Plot tab contents..."),
> ##D     navbarMenu("More",
> ##D       tabPanel("Summary", "Summary tab contents..."),
> ##D       tabPanel("Table", "Table tab contents...")
> ##D     )
> ##D   ),
> ##D   server = function(input, output) { }
> ##D )
> ##D 
> ##D 
> ##D # A more complicated app with the flatly theme
> ##D shinyApp(
> ##D   ui = fluidPage(
> ##D     theme = shinytheme("flatly"),
> ##D     titlePanel("Tabsets"),
> ##D     sidebarLayout(
> ##D       sidebarPanel(
> ##D         radioButtons("dist", "Distribution type:",
> ##D                      c("Normal" = "norm",
> ##D                        "Uniform" = "unif",
> ##D                        "Log-normal" = "lnorm",
> ##D                        "Exponential" = "exp")),
> ##D         br(),
> ##D         sliderInput("n", "Number of observations:",
> ##D                      value = 500, min = 1, max = 1000)
> ##D       ),
> ##D       mainPanel(
> ##D         tabsetPanel(type = "tabs",
> ##D           tabPanel("Plot", plotOutput("plot")),
> ##D           tabPanel("Summary", verbatimTextOutput("summary")),
> ##D           tabPanel("Table", tableOutput("table"))
> ##D         )
> ##D       )
> ##D     )
> ##D   ),
> ##D   server = function(input, output) {
> ##D     data <- reactive({
> ##D       dist <- switch(input$dist,
> ##D                      norm = rnorm,
> ##D                      unif = runif,
> ##D                      lnorm = rlnorm,
> ##D                      exp = rexp,
> ##D                      rnorm)
> ##D       dist(input$n)
> ##D     })
> ##D 
> ##D     output$plot <- renderPlot({
> ##D       dist <- input$dist
> ##D       n <- input$n
> ##D       hist(data(), main=paste('r', dist, '(', n, ')', sep=''))
> ##D     })
> ##D 
> ##D     output$summary <- renderPrint({
> ##D       summary(data())
> ##D     })
> ##D 
> ##D     output$table <- renderTable({
> ##D       data.frame(x=data())
> ##D     })
> ##D   }
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("themeSelector")
> ### * themeSelector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: themeSelector
> ### Title: Add a theme selector widget in a floating panel
> ### Aliases: themeSelector
> 
> ### ** Examples
> 
> 
> if (interactive()) {
+ # themeSelector can be inserted anywhere in the app.
+ shinyApp(
+   ui = fluidPage(
+     shinythemes::themeSelector(),
+     sidebarPanel(
+       textInput("txt", "Text input:", "text here"),
+       sliderInput("slider", "Slider input:", 1, 100, 30),
+       actionButton("action", "Button"),
+       actionButton("action2", "Button2", class = "btn-primary")
+     ),
+     mainPanel(
+       tabsetPanel(
+         tabPanel("Tab 1"),
+         tabPanel("Tab 2")
+       )
+     )
+   ),
+   server = function(input, output) {}
+ )
+ 
+ 
+ # If this is used with a navbarPage() or other type of page where there is not a
+ # good place to put it where it is outside of all tabs, you can wrap the entire
+ # page in tagList() and make the themeSelector a sibling of the page.
+ shinyApp(
+   ui = tagList(
+     shinythemes::themeSelector(),
+     navbarPage(
+       "Theme test",
+       tabPanel("Navbar 1",
+         sidebarPanel(
+           textInput("txt", "Text input:", "text here"),
+           sliderInput("slider", "Slider input:", 1, 100, 30),
+           actionButton("action", "Button"),
+           actionButton("action2", "Button2", class = "btn-primary")
+         ),
+         mainPanel(
+           tabsetPanel(
+             tabPanel("Tab 1"),
+             tabPanel("Tab 2")
+           )
+         )
+       ),
+       tabPanel("Navbar 2")
+     )
+   ),
+   server = function(input, output) {}
+ )
+ }
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.287 0.02 0.307 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
