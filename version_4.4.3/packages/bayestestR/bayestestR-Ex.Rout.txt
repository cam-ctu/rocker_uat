
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bayestestR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('bayestestR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("area_under_curve")
> ### * area_under_curve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: area_under_curve
> ### Title: Area under the Curve (AUC)
> ### Aliases: area_under_curve auc
> 
> ### ** Examples
> 
> library(bayestestR)
> posterior <- distribution_normal(1000)
> 
> dens <- estimate_density(posterior)
> dens <- dens[dens$x > 0, ]
> x <- dens$x
> y <- dens$y
> 
> area_under_curve(x, y, method = "trapezoid")
[1] 0.4980638
> area_under_curve(x, y, method = "step")
[1] 0.4992903
> area_under_curve(x, y, method = "spline")
[1] 0.4980639
> 
> 
> 
> cleanEx()
> nameEx("bayesfactor")
> ### * bayesfactor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bayesfactor
> ### Title: Bayes Factors (BF)
> ### Aliases: bayesfactor
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("logspline")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Not run: 
+ ##D library(bayestestR)
+ ##D 
+ ##D prior <- distribution_normal(1000, mean = 0, sd = 1)
+ ##D posterior <- distribution_normal(1000, mean = 0.5, sd = 0.3)
+ ##D 
+ ##D bayesfactor(posterior, prior = prior, verbose = FALSE)
+ ##D 
+ ##D # rstanarm models
+ ##D # ---------------
+ ##D model <- suppressWarnings(rstanarm::stan_lmer(extra ~ group + (1 | ID), data = sleep))
+ ##D bayesfactor(model, verbose = FALSE)
+ ##D 
+ ##D # Frequentist models
+ ##D # ---------------
+ ##D m0 <- lm(extra ~ 1, data = sleep)
+ ##D m1 <- lm(extra ~ group, data = sleep)
+ ##D m2 <- lm(extra ~ group + ID, data = sleep)
+ ##D 
+ ##D comparison <- bayesfactor(m0, m1, m2)
+ ##D comparison
+ ##D 
+ ##D bayesfactor(comparison)
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: logspline
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:logspline’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("bayesfactor_inclusion")
> ### * bayesfactor_inclusion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bayesfactor_inclusion
> ### Title: Inclusion Bayes Factors for testing predictors across Bayesian
> ###   models
> ### Aliases: bayesfactor_inclusion bf_inclusion
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("BayesFactor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ # Using bayesfactor_models:
+ # ------------------------------
+ mo0 <- lm(Sepal.Length ~ 1, data = iris)
+ mo1 <- lm(Sepal.Length ~ Species, data = iris)
+ mo2 <- lm(Sepal.Length ~ Species + Petal.Length, data = iris)
+ mo3 <- lm(Sepal.Length ~ Species * Petal.Length, data = iris)
+ 
+ BFmodels <- bayesfactor_models(mo1, mo2, mo3, denominator = mo0)
+ (bf_inc <- bayesfactor_inclusion(BFmodels))
+ 
+ as.numeric(bf_inc)
+ 
+ ## Don't show: 
+ }) # examplesIf
Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> library(bayestestR)
> mo0 <- lm(Sepal.Length ~ 1, data = iris)
> mo1 <- lm(Sepal.Length ~ Species, data = iris)
> mo2 <- lm(Sepal.Length ~ Species + Petal.Length, data = iris)
> mo3 <- lm(Sepal.Length ~ Species * Petal.Length, data = iris)
> BFmodels <- bayesfactor_models(mo1, mo2, mo3, denominator = mo0)
> (bf_inc <- bayesfactor_inclusion(BFmodels))
Inclusion Bayes Factors (Model Averaged)

                     P(prior) P(posterior) Inclusion BF
Species                  0.75         1.00     2.02e+55
Petal.Length             0.50         1.00     3.58e+26
Petal.Length:Species     0.25         0.04        0.113

* Compared among: all models
*    Priors odds: uniform-equal> as.numeric(bf_inc)
[1] 2.021143e+55 3.575448e+26 1.131202e-01
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:BayesFactor’, ‘package:Matrix’, ‘package:coda’

> nameEx("bayesfactor_models")
> ### * bayesfactor_models
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bayesfactor_models
> ### Title: Bayes Factors (BF) for model comparison
> ### Aliases: bayesfactor_models bf_models bayesfactor_models.default
> ###   update.bayesfactor_models as.matrix.bayesfactor_models
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("lme4") && require("BayesFactor") && require("rstanarm") && require("brms")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # With lm objects:
+ # ----------------
+ lm1 <- lm(mpg ~ 1, data = mtcars)
+ lm2 <- lm(mpg ~ hp, data = mtcars)
+ lm3 <- lm(mpg ~ hp + drat, data = mtcars)
+ lm4 <- lm(mpg ~ hp * drat, data = mtcars)
+ (BFM <- bayesfactor_models(lm1, lm2, lm3, lm4, denominator = 1))
+ # bayesfactor_models(lm2, lm3, lm4, denominator = lm1) # same result
+ # bayesfactor_models(lm1, lm2, lm3, lm4, denominator = lm1) # same result
+ 
+ update(BFM, reference = "bottom")
+ as.matrix(BFM)
+ as.numeric(BFM)
+ 
+ lm2b <- lm(sqrt(mpg) ~ hp, data = mtcars)
+ # Set check_response = TRUE for transformed responses
+ bayesfactor_models(lm2b, denominator = lm2, check_response = TRUE)
+ 
+ ## Don't show: 
+ }) # examplesIf
Loading required package: lme4
Loading required package: Matrix
Loading required package: BayesFactor
Loading required package: coda
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:lme4’:

    ngrps

The following object is masked from ‘package:stats’:

    ar

> lm1 <- lm(mpg ~ 1, data = mtcars)
> lm2 <- lm(mpg ~ hp, data = mtcars)
> lm3 <- lm(mpg ~ hp + drat, data = mtcars)
> lm4 <- lm(mpg ~ hp * drat, data = mtcars)
> (BFM <- bayesfactor_models(lm1, lm2, lm3, lm4, denominator = 1))
Bayes Factors for Model Comparison

      Model           BF
[lm2] hp        4.54e+05
[lm3] hp + drat 7.70e+07
[lm4] hp * drat 1.59e+07

* Against Denominator: [lm1] (Intercept only)
*   Bayes Factor Type: BIC approximation> update(BFM, reference = "bottom")
Bayes Factors for Model Comparison

      Model           BF
[lm2] hp        4.54e+05
[lm3] hp + drat 7.70e+07
[lm4] hp * drat 1.59e+07

* Against Denominator: [lm1] (Intercept only)
*   Bayes Factor Type: BIC approximation> as.matrix(BFM)
# Bayes Factors for Model Comparison 

           Numerator
Denominator

          |      [1] |      [2] |      [3] |      [4]
----------------------------------------------------------------
[1] (Intercept only) |        1 | 4.54e+05 | 7.70e+07 | 1.59e+07
[2] hp               | 2.20e-06 |        1 |   169.72 |    35.09
[3] hp + drat        | 1.30e-08 |    0.006 |        1 |    0.207
[4] hp * drat        | 6.28e-08 |    0.028 |     4.84 |        1
> as.numeric(BFM)
[1]        1.0   453874.3 77029881.3 15925712.4
> lm2b <- lm(sqrt(mpg) ~ hp, data = mtcars)
> bayesfactor_models(lm2b, denominator = lm2, check_response = TRUE)
Bayes Factors for Model Comparison

       Model   BF
[lm2b] hp    6.94

* Against Denominator: [lm2] hp
*   Bayes Factor Type: BIC approximation> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:brms’, ‘package:rstanarm’, ‘package:Rcpp’,
  ‘package:BayesFactor’, ‘package:coda’, ‘package:lme4’,
  ‘package:Matrix’

> nameEx("bayesfactor_parameters")
> ### * bayesfactor_parameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bayesfactor_parameters
> ### Title: Bayes Factors (BF) for a Single Parameter
> ### Aliases: bayesfactor_parameters bayesfactor_pointnull bayesfactor_rope
> ###   bf_parameters bf_pointnull bf_rope bayesfactor_parameters.numeric
> ###   bayesfactor_parameters.stanreg bayesfactor_parameters.brmsfit
> ###   bayesfactor_parameters.blavaan bayesfactor_parameters.data.frame
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("logspline")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ prior <- distribution_normal(1000, mean = 0, sd = 1)
+ posterior <- distribution_normal(1000, mean = .5, sd = .3)
+ (BF_pars <- bayesfactor_parameters(posterior, prior, verbose = FALSE))
+ 
+ as.numeric(BF_pars)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: logspline
> library(bayestestR)
> prior <- distribution_normal(1000, mean = 0, sd = 1)
> posterior <- distribution_normal(1000, mean = 0.5, sd = 0.3)
> (BF_pars <- bayesfactor_parameters(posterior, prior, verbose = FALSE))
Bayes Factor (Savage-Dickey density ratio)

BF  
----
1.21

* Evidence Against The Null: 0
> as.numeric(BF_pars)
[1] 1.212843
> ## End(Don't show)
> ## Don't show: 
> if (require("rstanarm") && require("emmeans") && require("logspline")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
> ## End(Don't show)
> ## Don't show: 
> if (require("brms") && require("logspline")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # brms models
+ # -----------
+ ## Not run: 
+ ##D contrasts(sleep$group) <- contr.equalprior_pairs # see vingette
+ ##D my_custom_priors <-
+ ##D   set_prior("student_t(3, 0, 1)", class = "b") +
+ ##D   set_prior("student_t(3, 0, 1)", class = "sd", group = "ID")
+ ##D 
+ ##D brms_model <- suppressWarnings(brm(extra ~ group + (1 | ID),
+ ##D   data = sleep,
+ ##D   prior = my_custom_priors,
+ ##D   refresh = 0
+ ##D ))
+ ##D bayesfactor_parameters(brms_model, verbose = FALSE)
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:brms’, ‘package:emmeans’, ‘package:rstanarm’,
  ‘package:Rcpp’, ‘package:logspline’

> nameEx("bayesfactor_restricted")
> ### * bayesfactor_restricted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bayesfactor_restricted
> ### Title: Bayes Factors (BF) for Order Restricted Models
> ### Aliases: bayesfactor_restricted bf_restricted
> ###   bayesfactor_restricted.stanreg bayesfactor_restricted.brmsfit
> ###   bayesfactor_restricted.blavaan bayesfactor_restricted.emmGrid
> ###   bayesfactor_restricted.data.frame as.logical.bayesfactor_restricted
> 
> ### ** Examples
> 
> set.seed(444)
> library(bayestestR)
> prior <- data.frame(
+   A = rnorm(500),
+   B = rnorm(500),
+   C = rnorm(500)
+ )
> 
> posterior <- data.frame(
+   A = rnorm(500, .4, 0.7),
+   B = rnorm(500, -.2, 0.4),
+   C = rnorm(500, 0, 0.5)
+ )
> 
> hyps <- c(
+   "A > B & B > C",
+   "A > B & A > C",
+   "C > A"
+ )
> 
> 
> (b <- bayesfactor_restricted(posterior, hypothesis = hyps, prior = prior))
Bayes Factor (Order-Restriction)

Hypothesis    P(Prior) P(Posterior)    BF
A > B & B > C     0.16         0.23  1.39
A > B & A > C     0.36         0.59  1.61
C > A             0.46         0.34 0.742

* Bayes factors for the restricted model vs. the un-restricted model.
> 
> bool <- as.logical(b, which = "posterior")
> head(bool)
     A > B & B > C A > B & A > C C > A
[1,]          TRUE          TRUE FALSE
[2,]          TRUE          TRUE FALSE
[3,]          TRUE          TRUE FALSE
[4,]         FALSE          TRUE FALSE
[5,]         FALSE         FALSE  TRUE
[6,]         FALSE          TRUE FALSE
> 
> ## Don't show: 
> if (require("see") && require("patchwork")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ see::plots(
+   plot(estimate_density(posterior)),
+   # distribution **conditional** on the restrictions
+   plot(estimate_density(posterior[bool[, hyps[1]], ])) + ggplot2::ggtitle(hyps[1]),
+   plot(estimate_density(posterior[bool[, hyps[2]], ])) + ggplot2::ggtitle(hyps[2]),
+   plot(estimate_density(posterior[bool[, hyps[3]], ])) + ggplot2::ggtitle(hyps[3]),
+   guides = "collect"
+ )
+ ## Don't show: 
+ }) # examplesIf
Loading required package: see
Loading required package: patchwork
> see::plots(plot(estimate_density(posterior)), plot(estimate_density(posterior[bool[, 
+     hyps[1]], ])) + ggplot2::ggtitle(hyps[1]), plot(estimate_density(posterior[bool[, 
+     hyps[2]], ])) + ggplot2::ggtitle(hyps[2]), plot(estimate_density(posterior[bool[, 
+     hyps[3]], ])) + ggplot2::ggtitle(hyps[3]), guides = "collect")
> ## End(Don't show)
> ## Don't show: 
> if (require("rstanarm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> ## End(Don't show)
> ## Don't show: 
> if (require("rstanarm") && require("emmeans")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:emmeans’, ‘package:rstanarm’, ‘package:Rcpp’,
  ‘package:patchwork’, ‘package:see’

> nameEx("bci")
> ### * bci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bci
> ### Title: Bias Corrected and Accelerated Interval (BCa)
> ### Aliases: bci bcai bci.numeric bci.data.frame bci.MCMCglmm
> ###   bci.sim.merMod bci.sim bci.emmGrid bci.slopes bci.stanreg bci.brmsfit
> ###   bci.BFBayesFactor bci.get_predicted
> 
> ### ** Examples
> 
> posterior <- rnorm(1000)
> bci(posterior)
95% ETI: [-2.06, 2.07]
> bci(posterior, ci = c(0.80, 0.89, 0.95))
Equal-Tailed Interval

80% ETI       |       89% ETI |       95% ETI
---------------------------------------------
[-1.25, 1.40] | [-1.57, 1.76] | [-2.06, 2.07]
> 
> 
> 
> cleanEx()
> nameEx("bic_to_bf")
> ### * bic_to_bf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bic_to_bf
> ### Title: Convert BIC indices to Bayes Factors via the BIC-approximation
> ###   method.
> ### Aliases: bic_to_bf
> 
> ### ** Examples
> 
> bic1 <- BIC(lm(Sepal.Length ~ 1, data = iris))
> bic2 <- BIC(lm(Sepal.Length ~ Species, data = iris))
> bic3 <- BIC(lm(Sepal.Length ~ Species + Petal.Length, data = iris))
> bic4 <- BIC(lm(Sepal.Length ~ Species * Petal.Length, data = iris))
> 
> bic_to_bf(c(bic1, bic2, bic3, bic4), denominator = bic1)
[1] 1.000000e+00 1.695852e+29 5.843105e+55 2.203243e+54
> 
> 
> 
> cleanEx()
> nameEx("check_prior")
> ### * check_prior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_prior
> ### Title: Check if Prior is Informative
> ### Aliases: check_prior
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("see")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: see
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:see’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("ci")
> ### * ci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ci
> ### Title: Confidence/Credible/Compatibility Interval (CI)
> ### Aliases: ci ci.numeric ci.data.frame ci.sim.merMod ci.sim ci.stanreg
> ###   ci.brmsfit ci.BFBayesFactor ci.MCMCglmm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ posterior <- rnorm(1000)
+ ci(posterior, method = "ETI")
+ ci(posterior, method = "HDI")
+ 
+ df <- data.frame(replicate(4, rnorm(100)))
+ ci(df, method = "ETI", ci = c(0.80, 0.89, 0.95))
+ ci(df, method = "HDI", ci = c(0.80, 0.89, 0.95))
+ 
+ model <- suppressWarnings(
+   stan_glm(mpg ~ wt, data = mtcars, chains = 2, iter = 200, refresh = 0)
+ )
+ ci(model, method = "ETI", ci = c(0.80, 0.89))
+ ci(model, method = "HDI", ci = c(0.80, 0.89))
+ ## Don't show: 
+ }) # examplesIf
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> library(bayestestR)
> posterior <- rnorm(1000)
> ci(posterior, method = "ETI")
95% ETI: [-2.13, 2.01]
> ci(posterior, method = "HDI")
95% HDI: [-2.10, 2.03]
> df <- data.frame(replicate(4, rnorm(100)))
> ci(df, method = "ETI", ci = c(0.8, 0.89, 0.95))
Equal-Tailed Interval

Parameter |       80% ETI |       89% ETI |       95% ETI
---------------------------------------------------------
X1        | [-1.41, 1.22] | [-1.76, 1.71] | [-1.88, 1.85]
X2        | [-1.26, 1.22] | [-1.53, 1.43] | [-1.84, 1.82]
X3        | [-1.10, 1.62] | [-1.51, 2.07] | [-1.62, 2.33]
X4        | [-1.21, 1.09] | [-1.34, 1.28] | [-1.52, 1.45]
> ci(df, method = "HDI", ci = c(0.8, 0.89, 0.95))
Highest Density Interval

Parameter |       80% HDI |       89% HDI |       95% HDI
---------------------------------------------------------
X1        | [-1.45, 1.21] | [-1.91, 1.36] | [-1.91, 1.92]
X2        | [-1.40, 0.99] | [-1.40, 1.52] | [-1.65, 2.19]
X3        | [-1.34, 1.40] | [-1.65, 1.76] | [-1.65, 2.39]
X4        | [-1.35, 0.85] | [-1.43, 1.16] | [-1.43, 1.57]
> model <- suppressWarnings(stan_glm(mpg ~ wt, data = mtcars, chains = 2, 
+     iter = 200, refresh = 0))
> ci(model, method = "ETI", ci = c(0.8, 0.89))
Equal-Tailed Interval

Parameter   |        80% ETI |        89% ETI | Effects |   Component
---------------------------------------------------------------------
(Intercept) | [35.03, 39.96] | [34.18, 40.75] |   fixed | conditional
wt          | [-6.07, -4.57] | [-6.22, -4.47] |   fixed | conditional
> ci(model, method = "HDI", ci = c(0.8, 0.89))
Highest Density Interval

Parameter   |        80% HDI |        89% HDI
---------------------------------------------
(Intercept) | [35.31, 40.18] | [34.05, 40.18]
wt          | [-6.22, -4.73] | [-6.22, -4.46]
> ## End(Don't show)
> ## Don't show: 
> if (require("BayesFactor", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ bf <- ttestBF(x = rnorm(100, 1, 1))
+ ci(bf, method = "ETI")
+ ci(bf, method = "HDI")
+ ## Don't show: 
+ }) # examplesIf
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> bf <- ttestBF(x = rnorm(100, 1, 1))
> ci(bf, method = "ETI")
Equal-Tailed Interval

Parameter  |      95% ETI
-------------------------
Difference | [0.75, 1.14]
> ci(bf, method = "HDI")
Highest Density Interval

Parameter  |      95% HDI
-------------------------
Difference | [0.74, 1.14]
> ## End(Don't show)
> ## Don't show: 
> if (require("emmeans", quietly = TRUE) && require("rstanarm", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ model <- emtrends(model, ~1, "wt", data = mtcars)
+ ci(model, method = "ETI")
+ ci(model, method = "HDI")
+ ## Don't show: 
+ }) # examplesIf
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
> model <- emtrends(model, ~1, "wt", data = mtcars)
> ci(model, method = "ETI")
Equal-Tailed Interval

X1      |        95% ETI
------------------------
overall | [-6.52, -4.34]
> ci(model, method = "HDI")
Highest Density Interval

X1      |        95% HDI
------------------------
overall | [-6.32, -4.22]
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:emmeans’, ‘package:BayesFactor’, ‘package:Matrix’,
  ‘package:coda’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("contr.equalprior")
> ### * contr.equalprior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contr.equalprior
> ### Title: Contrast Matrices for Equal Marginal Priors in Bayesian
> ###   Estimation
> ### Aliases: contr.equalprior contr.bayes contr.orthonorm
> ###   contr.equalprior_pairs contr.equalprior_deviations
> 
> ### ** Examples
> 
> contr.equalprior(2) # Q_2 in Rouder et al. (2012, p. 363)
           [,1]
[1,] -0.7071068
[2,]  0.7071068
> 
> contr.equalprior(5) # equivalent to Q_5 in Rouder et al. (2012, p. 363)
              [,1]       [,2]       [,3]       [,4]
[1,]  0.000000e+00  0.0000000  0.0000000  0.8944272
[2,] -4.163336e-17  0.0000000  0.8660254 -0.2236068
[3,] -5.773503e-01 -0.5773503 -0.2886751 -0.2236068
[4,] -2.113249e-01  0.7886751 -0.2886751 -0.2236068
[5,]  7.886751e-01 -0.2113249 -0.2886751 -0.2236068
> 
> ## check decomposition
> Q3 <- contr.equalprior(3)
> Q3 %*% t(Q3) ## 2/3 on diagonal and -1/3 on off-diagonal elements
           [,1]       [,2]       [,3]
[1,]  0.6666667 -0.3333333 -0.3333333
[2,] -0.3333333  0.6666667 -0.3333333
[3,] -0.3333333 -0.3333333  0.6666667
> 
> 
> 
> cleanEx()
> nameEx("convert_bayesian_as_frequentist")
> ### * convert_bayesian_as_frequentist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convert_bayesian_as_frequentist
> ### Title: Convert (refit) a Bayesian model to frequentist
> ### Aliases: convert_bayesian_as_frequentist bayesian_as_frequentist
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("density_at")
> ### * density_at
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: density_at
> ### Title: Density Probability at a Given Value
> ### Aliases: density_at
> 
> ### ** Examples
> 
> library(bayestestR)
> posterior <- distribution_normal(n = 10)
> density_at(posterior, 0)
[1] 0.3206131
> density_at(posterior, c(0, 1))
[1] 0.3206131 0.2374056
> 
> 
> 
> cleanEx()
> nameEx("describe_posterior")
> ### * describe_posterior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: describe_posterior
> ### Title: Describe Posterior Distributions
> ### Aliases: describe_posterior describe_posterior.numeric
> ###   describe_posterior.data.frame describe_posterior.stanreg
> ###   describe_posterior.brmsfit
> 
> ### ** Examples
> 
> library(bayestestR)
> 
> if (require("logspline")) {
+   x <- rnorm(1000)
+   describe_posterior(x, verbose = FALSE)
+   describe_posterior(x,
+     centrality = "all",
+     dispersion = TRUE,
+     test = "all",
+     verbose = FALSE
+   )
+   describe_posterior(x, ci = c(0.80, 0.90), verbose = FALSE)
+ 
+   df <- data.frame(replicate(4, rnorm(100)))
+   describe_posterior(df, verbose = FALSE)
+   describe_posterior(
+     df,
+     centrality = "all",
+     dispersion = TRUE,
+     test = "all",
+     verbose = FALSE
+   )
+   describe_posterior(df, ci = c(0.80, 0.90), verbose = FALSE)
+ 
+   df <- data.frame(replicate(4, rnorm(20)))
+   head(reshape_iterations(
+     describe_posterior(df, keep_iterations = TRUE, verbose = FALSE)
+   ))
+ }
Loading required package: logspline
Summary of Posterior Distribution

Parameter | Median |        95% CI |     pd |          ROPE | % in ROPE
-----------------------------------------------------------------------
X1        |  -0.02 | [-1.61, 1.43] | 50.00% | [-0.10, 0.10] |     5.56%
X2        |   0.83 | [-0.81, 2.19] | 75.00% | [-0.10, 0.10] |    11.11%
X3        |   0.09 | [-3.04, 1.45] | 60.00% | [-0.10, 0.10] |    11.11%
X4        |  -0.43 | [-1.75, 1.81] | 70.00% | [-0.10, 0.10] |        0%
X1        |  -0.02 | [-1.61, 1.43] | 50.00% | [-0.10, 0.10] |     5.56%
X2        |   0.83 | [-0.81, 2.19] | 75.00% | [-0.10, 0.10] |    11.11%

Parameter | iter_index | iter_group | iter_value
------------------------------------------------
X1        |       1.00 |       1.00 |       1.55
X2        |       2.00 |       1.00 |       0.98
X3        |       3.00 |       1.00 |       0.16
X4        |       4.00 |       1.00 |      -0.27
X1        |       1.00 |       2.00 |       0.18
X2        |       2.00 |       2.00 |       0.33
> 
> 
> 
> cleanEx()

detaching ‘package:logspline’

> nameEx("describe_prior")
> ### * describe_prior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: describe_prior
> ### Title: Describe Priors
> ### Aliases: describe_prior describe_prior.brmsfit
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("diagnostic_draws")
> ### * diagnostic_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diagnostic_draws
> ### Title: Diagnostic values for each iteration
> ### Aliases: diagnostic_draws
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("diagnostic_posterior")
> ### * diagnostic_posterior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diagnostic_posterior
> ### Title: Posteriors Sampling Diagnostic
> ### Aliases: diagnostic_posterior diagnostic_posterior.default
> ###   diagnostic_posterior.stanreg diagnostic_posterior.brmsfit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("brms")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:brms’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("distribution")
> ### * distribution
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distribution
> ### Title: Empirical Distributions
> ### Aliases: distribution distribution_custom distribution_beta
> ###   distribution_binomial distribution_binom distribution_cauchy
> ###   distribution_chisquared distribution_chisq distribution_gamma
> ###   distribution_mixture_normal distribution_normal distribution_gaussian
> ###   distribution_nbinom distribution_poisson distribution_student
> ###   distribution_t distribution_student_t distribution_tweedie
> ###   distribution_uniform rnorm_perfect
> 
> ### ** Examples
> 
> library(bayestestR)
> x <- distribution(n = 10)
> plot(density(x))
> 
> x <- distribution(type = "gamma", n = 100, shape = 2)
> plot(density(x))
> 
> 
> 
> cleanEx()
> nameEx("effective_sample")
> ### * effective_sample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: effective_sample
> ### Title: Effective Sample Size (ESS)
> ### Aliases: effective_sample effective_sample.brmsfit
> ###   effective_sample.stanreg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("equivalence_test")
> ### * equivalence_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: equivalence_test
> ### Title: Test for Practical Equivalence
> ### Aliases: equivalence_test equivalence_test.default
> ###   equivalence_test.data.frame equivalence_test.stanreg
> ###   equivalence_test.brmsfit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("brms") && require("emmeans") && require("BayesFactor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ equivalence_test(x = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1))
+ equivalence_test(x = rnorm(1000, 0, 1), range = c(-0.1, 0.1))
+ equivalence_test(x = rnorm(1000, 1, 0.01), range = c(-0.1, 0.1))
+ equivalence_test(x = rnorm(1000, 1, 1), ci = c(.50, .99))
+ 
+ # print more digits
+ test <- equivalence_test(x = rnorm(1000, 1, 1), ci = c(.50, .99))
+ print(test, digits = 4)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> library(bayestestR)
> equivalence_test(x = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1))
# Test for Practical Equivalence

  ROPE: [-0.10 0.10]

H0       | inside ROPE |       95% HDI
--------------------------------------
Accepted |    100.00 % | [-0.02, 0.02]


> equivalence_test(x = rnorm(1000, 0, 1), range = c(-0.1, 0.1))
# Test for Practical Equivalence

  ROPE: [-0.10 0.10]

H0        | inside ROPE |       95% HDI
---------------------------------------
Undecided |      8.32 % | [-2.00, 2.04]


> equivalence_test(x = rnorm(1000, 1, 0.01), range = c(-0.1, 0.1))
# Test for Practical Equivalence

  ROPE: [-0.10 0.10]

H0       | inside ROPE |      95% HDI
-------------------------------------
Rejected |      0.00 % | [0.98, 1.02]


> equivalence_test(x = rnorm(1000, 1, 1), ci = c(0.5, 0.99))
# Test for Practical Equivalence

  ROPE: [-0.10 0.10]

H0       | inside ROPE |      50% HDI
-------------------------------------
Rejected |      0.00 % | [0.32, 1.72]


H0        | inside ROPE |       99% HDI
---------------------------------------
Undecided |      4.95 % | [-1.89, 3.55]


> test <- equivalence_test(x = rnorm(1000, 1, 1), ci = c(0.5, 0.99))
> print(test, digits = 4)
# Test for Practical Equivalence

  ROPE: [-0.1000 0.1000]

H0       | inside ROPE |          50% HDI
-----------------------------------------
Rejected |    0.0000 % | [0.3257, 1.6225]


H0        | inside ROPE |           99% HDI
-------------------------------------------
Undecided |    5.1515 % | [-1.4420, 3.3730]


> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:BayesFactor’, ‘package:Matrix’, ‘package:coda’,
  ‘package:emmeans’, ‘package:brms’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("estimate_density")
> ### * estimate_density
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimate_density
> ### Title: Density Estimation
> ### Aliases: estimate_density estimate_density.data.frame
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("logspline") && require("KernSmooth") && require("mclust") && require("emmeans") && require("rstanarm") && require("brms")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ set.seed(1)
+ x <- rnorm(250, mean = 1)
+ 
+ # Basic usage
+ density_kernel <- estimate_density(x) # default method is "kernel"
+ 
+ hist(x, prob = TRUE)
+ lines(density_kernel$x, density_kernel$y, col = "black", lwd = 2)
+ lines(density_kernel$x, density_kernel$CI_low, col = "gray", lty = 2)
+ lines(density_kernel$x, density_kernel$CI_high, col = "gray", lty = 2)
+ legend("topright",
+   legend = c("Estimate", "95% CI"),
+   col = c("black", "gray"), lwd = 2, lty = c(1, 2)
+ )
+ 
+ # Other Methods
+ density_logspline <- estimate_density(x, method = "logspline")
+ density_KernSmooth <- estimate_density(x, method = "KernSmooth")
+ density_mixture <- estimate_density(x, method = "mixture")
+ 
+ hist(x, prob = TRUE)
+ lines(density_kernel$x, density_kernel$y, col = "black", lwd = 2)
+ lines(density_logspline$x, density_logspline$y, col = "red", lwd = 2)
+ lines(density_KernSmooth$x, density_KernSmooth$y, col = "blue", lwd = 2)
+ lines(density_mixture$x, density_mixture$y, col = "green", lwd = 2)
+ 
+ # Extension
+ density_extended <- estimate_density(x, extend = TRUE)
+ density_default <- estimate_density(x, extend = FALSE)
+ 
+ hist(x, prob = TRUE)
+ lines(density_extended$x, density_extended$y, col = "red", lwd = 3)
+ lines(density_default$x, density_default$y, col = "black", lwd = 3)
+ 
+ # Multiple columns
+ head(estimate_density(iris))
+ head(estimate_density(iris, select = "Sepal.Width"))
+ 
+ # Grouped data
+ head(estimate_density(iris, by = "Species"))
+ head(estimate_density(iris$Petal.Width, by = iris$Species))
+ ## Don't show: 
+ }) # examplesIf
Loading required package: logspline
Loading required package: KernSmooth
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
Loading required package: mclust
Package 'mclust' version 6.1.1
Type 'citation("mclust")' for citing this R package in publications.
Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:mclust’:

    me

The following object is masked from ‘package:stats’:

    ar

> library(bayestestR)
> set.seed(1)
> x <- rnorm(250, mean = 1)
> density_kernel <- estimate_density(x)
> hist(x, prob = TRUE)
> lines(density_kernel$x, density_kernel$y, col = "black", lwd = 2)
> lines(density_kernel$x, density_kernel$CI_low, col = "gray", lty = 2)
> lines(density_kernel$x, density_kernel$CI_high, col = "gray", lty = 2)
> legend("topright", legend = c("Estimate", "95% CI"), col = c("black", 
+     "gray"), lwd = 2, lty = c(1, 2))
> density_logspline <- estimate_density(x, method = "logspline")
> density_KernSmooth <- estimate_density(x, method = "KernSmooth")
> density_mixture <- estimate_density(x, method = "mixture")
> hist(x, prob = TRUE)
> lines(density_kernel$x, density_kernel$y, col = "black", lwd = 2)
> lines(density_logspline$x, density_logspline$y, col = "red", lwd = 2)
> lines(density_KernSmooth$x, density_KernSmooth$y, col = "blue", lwd = 2)
> lines(density_mixture$x, density_mixture$y, col = "green", lwd = 2)
> density_extended <- estimate_density(x, extend = TRUE)
> density_default <- estimate_density(x, extend = FALSE)
> hist(x, prob = TRUE)
> lines(density_extended$x, density_extended$y, col = "red", lwd = 3)
> lines(density_default$x, density_default$y, col = "black", lwd = 3)
> head(estimate_density(iris))
     Parameter        x          y
1 Sepal.Length 4.300000 0.09643086
2 Sepal.Length 4.303519 0.09759152
3 Sepal.Length 4.307038 0.09875679
4 Sepal.Length 4.310557 0.09993469
5 Sepal.Length 4.314076 0.10111692
6 Sepal.Length 4.317595 0.10230788
> head(estimate_density(iris, select = "Sepal.Width"))
    Parameter        x          y
1 Sepal.Width 2.000000 0.04647877
2 Sepal.Width 2.002346 0.04729167
3 Sepal.Width 2.004692 0.04811925
4 Sepal.Width 2.007038 0.04895638
5 Sepal.Width 2.009384 0.04980346
6 Sepal.Width 2.011730 0.05066768
> head(estimate_density(iris, by = "Species"))
     Parameter        x         y Species
1 Sepal.Length 4.300000 0.2354858  setosa
2 Sepal.Length 4.301466 0.2374750  setosa
3 Sepal.Length 4.302933 0.2394634  setosa
4 Sepal.Length 4.304399 0.2414506  setosa
5 Sepal.Length 4.305865 0.2434373  setosa
6 Sepal.Length 4.307331 0.2454216  setosa
> head(estimate_density(iris$Petal.Width, by = iris$Species))
          x        y  Group
1 0.1000000 9.011849 setosa
2 0.1004888 8.955321 setosa
3 0.1009775 8.792006 setosa
4 0.1014663 8.527789 setosa
5 0.1019550 8.171922 setosa
6 0.1024438 7.736494 setosa
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:brms’, ‘package:rstanarm’, ‘package:Rcpp’,
  ‘package:emmeans’, ‘package:mclust’, ‘package:KernSmooth’,
  ‘package:logspline’

> nameEx("eti")
> ### * eti
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eti
> ### Title: Equal-Tailed Interval (ETI)
> ### Aliases: eti eti.numeric eti.data.frame eti.stanreg eti.brmsfit
> ###   eti.get_predicted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("emmeans") && require("brms") && require("BayesFactor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ posterior <- rnorm(1000)
+ eti(posterior)
+ eti(posterior, ci = c(0.80, 0.89, 0.95))
+ 
+ df <- data.frame(replicate(4, rnorm(100)))
+ eti(df)
+ eti(df, ci = c(0.80, 0.89, 0.95))
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> library(bayestestR)
> posterior <- rnorm(1000)
> eti(posterior)
95% ETI: [-2.13, 2.01]
> eti(posterior, ci = c(0.8, 0.89, 0.95))
Equal-Tailed Interval

80% ETI       |       89% ETI |       95% ETI
---------------------------------------------
[-1.34, 1.32] | [-1.66, 1.68] | [-2.13, 2.01]
> df <- data.frame(replicate(4, rnorm(100)))
> eti(df)
Equal-Tailed Interval

Parameter |       95% ETI
-------------------------
X1        | [-1.88, 1.85]
X2        | [-1.84, 1.82]
X3        | [-1.62, 2.33]
X4        | [-1.52, 1.45]
> eti(df, ci = c(0.8, 0.89, 0.95))
Equal-Tailed Interval

Parameter |       80% ETI |       89% ETI |       95% ETI
---------------------------------------------------------
X1        | [-1.41, 1.22] | [-1.76, 1.71] | [-1.88, 1.85]
X2        | [-1.26, 1.22] | [-1.53, 1.43] | [-1.84, 1.82]
X3        | [-1.10, 1.62] | [-1.51, 2.07] | [-1.62, 2.33]
X4        | [-1.21, 1.09] | [-1.34, 1.28] | [-1.52, 1.45]
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:BayesFactor’, ‘package:Matrix’, ‘package:coda’,
  ‘package:brms’, ‘package:emmeans’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("hdi")
> ### * hdi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hdi
> ### Title: Highest Density Interval (HDI)
> ### Aliases: hdi hdi.numeric hdi.data.frame hdi.stanreg hdi.brmsfit
> ###   hdi.get_predicted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("brms") && require("emmeans") && require("BayesFactor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ posterior <- rnorm(1000)
+ hdi(posterior, ci = 0.89)
+ hdi(posterior, ci = c(0.80, 0.90, 0.95))
+ 
+ bayestestR::hdi(iris[1:4])
+ bayestestR::hdi(iris[1:4], ci = c(0.80, 0.90, 0.95))
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> library(bayestestR)
> posterior <- rnorm(1000)
> hdi(posterior, ci = 0.89)
89% HDI: [-1.49, 1.80]
> hdi(posterior, ci = c(0.8, 0.9, 0.95))
Highest Density Interval

80% HDI       |       90% HDI |       95% HDI
---------------------------------------------
[-1.38, 1.21] | [-1.57, 1.80] | [-2.10, 2.03]
> bayestestR::hdi(iris[1:4])
Identical densities found along different segments of the distribution,
  choosing rightmost.
Highest Density Interval

Parameter    |      95% HDI
---------------------------
Sepal.Length | [4.60, 7.70]
Sepal.Width  | [2.20, 3.90]
Petal.Length | [1.00, 6.10]
Petal.Width  | [0.10, 2.30]
> bayestestR::hdi(iris[1:4], ci = c(0.8, 0.9, 0.95))
Identical densities found along different segments of the distribution,
  choosing rightmost.
Identical densities found along different segments of the distribution,
  choosing rightmost.
Identical densities found along different segments of the distribution,
  choosing rightmost.
Highest Density Interval

Parameter    |      80% HDI |      90% HDI |      95% HDI
---------------------------------------------------------
Sepal.Length | [4.90, 6.90] | [4.40, 6.90] | [4.60, 7.70]
Sepal.Width  | [2.50, 3.60] | [2.40, 3.80] | [2.20, 3.90]
Petal.Length | [1.30, 5.50] | [1.10, 5.80] | [1.00, 6.10]
Petal.Width  | [0.10, 1.90] | [0.20, 2.30] | [0.10, 2.30]
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:BayesFactor’, ‘package:Matrix’, ‘package:coda’,
  ‘package:emmeans’, ‘package:brms’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("map_estimate")
> ### * map_estimate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: map_estimate
> ### Title: Maximum A Posteriori probability estimate (MAP)
> ### Aliases: map_estimate map_estimate.numeric map_estimate.stanreg
> ###   map_estimate.brmsfit map_estimate.data.frame
> ###   map_estimate.get_predicted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("brms")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:brms’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("mcse")
> ### * mcse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcse
> ### Title: Monte-Carlo Standard Error (MCSE)
> ### Aliases: mcse mcse.stanreg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("mediation")
> ### * mediation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mediation
> ### Title: Summary of Bayesian multivariate-response mediation-models
> ### Aliases: mediation mediation.brmsfit mediation.stanmvreg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("mediation") && require("brms") && require("rstanarm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: mediation
Loading required package: MASS
Loading required package: Matrix
Loading required package: mvtnorm
Loading required package: sandwich
mediation: Causal Mediation Analysis
Version: 4.5.0

Loading required package: brms
Loading required package: Rcpp
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following object is masked from ‘package:stats’:

    ar

Loading required package: rstanarm
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())

Attaching package: ‘rstanarm’

The following objects are masked from ‘package:brms’:

    dirichlet, exponential, get_y, lasso, ngrps

> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:rstanarm’, ‘package:brms’, ‘package:Rcpp’,
  ‘package:mediation’, ‘package:sandwich’, ‘package:mvtnorm’,
  ‘package:Matrix’, ‘package:MASS’

> nameEx("model_to_priors")
> ### * model_to_priors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model_to_priors
> ### Title: Convert model's posteriors to priors (EXPERIMENTAL)
> ### Aliases: model_to_priors
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("overlap")
> ### * overlap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: overlap
> ### Title: Overlap Coefficient
> ### Aliases: overlap
> 
> ### ** Examples
> 
> library(bayestestR)
> 
> x <- distribution_normal(1000, 2, 0.5)
> y <- distribution_normal(1000, 0, 1)
> 
> overlap(x, y)
# Overlap

18.6%
> plot(overlap(x, y))
> 
> 
> 
> cleanEx()
> nameEx("p_direction")
> ### * p_direction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: p_direction
> ### Title: Probability of Direction (pd)
> ### Aliases: p_direction pd p_direction.numeric p_direction.data.frame
> ###   p_direction.MCMCglmm p_direction.emmGrid p_direction.slopes
> ###   p_direction.stanreg p_direction.brmsfit p_direction.BFBayesFactor
> ###   p_direction.get_predicted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("rstanarm", quietly = TRUE) && requireNamespace("emmeans", quietly = TRUE) && requireNamespace("brms", quietly = TRUE) && requireNamespace("BayesFactor", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ # Simulate a posterior distribution of mean 1 and SD 1
+ # ----------------------------------------------------
+ posterior <- rnorm(1000, mean = 1, sd = 1)
+ p_direction(posterior)
+ p_direction(posterior, method = "kernel")
+ 
+ # Simulate a dataframe of posterior distributions
+ # -----------------------------------------------
+ df <- data.frame(replicate(4, rnorm(100)))
+ p_direction(df)
+ p_direction(df, method = "kernel")
+ 
+ ## Don't show: 
+ }) # examplesIf
> library(bayestestR)
> posterior <- rnorm(1000, mean = 1, sd = 1)
> p_direction(posterior)
Probability of Direction

Parameter |     pd
------------------
Posterior | 83.20%
> p_direction(posterior, method = "kernel")
Probability of Direction

Parameter |     pd
------------------
Posterior | 82.39%
> df <- data.frame(replicate(4, rnorm(100)))
> p_direction(df)
Probability of Direction

Parameter |     pd
------------------
X1        | 51.00%
X2        | 62.00%
X3        | 55.00%
X4        | 62.00%
> p_direction(df, method = "kernel")
Probability of Direction

Parameter |     pd
------------------
X1        | 50.29%
X2        | 58.54%
X3        | 56.99%
X4        | 58.74%
> ## End(Don't show)
> ## Don't show: 
> if (requireNamespace("posterior", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Using "rvar_col"
+ x <- data.frame(mu = c(0, 0.5, 1), sigma = c(1, 0.5, 0.25))
+ x$my_rvar <- posterior::rvar_rng(rnorm, 3, mean = x$mu, sd = x$sigma)
+ x
+ p_direction(x, rvar_col = "my_rvar")
+ ## Don't show: 
+ }) # examplesIf
> x <- data.frame(mu = c(0, 0.5, 1), sigma = c(1, 0.5, 0.25))
> x$my_rvar <- posterior::rvar_rng(rnorm, 3, mean = x$mu, sd = x$sigma)
> x
   mu sigma        my_rvar
1 0.0  1.00 0.00029 ± 1.02
2 0.5  0.50 0.49337 ± 0.50
3 1.0  0.25 0.99721 ± 0.25
> p_direction(x, rvar_col = "my_rvar")
Probability of Direction

mu   | sigma |     pd
---------------------
0.00 |  1.00 | 50.15%
0.50 |  0.50 | 84.35%
1.00 |  0.25 | 99.98%
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("p_map")
> ### * p_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: p_map
> ### Title: Bayesian p-value based on the density at the Maximum A
> ###   Posteriori (MAP)
> ### Aliases: p_map p_pointnull p_map.numeric p_map.get_predicted
> ###   p_map.data.frame p_map.stanreg p_map.brmsfit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("emmeans") && require("brms") && require("BayesFactor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ p_map(rnorm(1000, 0, 1))
+ p_map(rnorm(1000, 10, 1))
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> library(bayestestR)
> p_map(rnorm(1000, 0, 1))
MAP-based p-value

Parameter | p (MAP)
-------------------
Posterior |   0.978
> p_map(rnorm(1000, 10, 1))
MAP-based p-value

Parameter | p (MAP)
-------------------
Posterior |  < .001
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:BayesFactor’, ‘package:Matrix’, ‘package:coda’,
  ‘package:brms’, ‘package:emmeans’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("p_rope")
> ### * p_rope
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: p_rope
> ### Title: Probability of being in the ROPE
> ### Aliases: p_rope p_rope.numeric p_rope.data.frame p_rope.stanreg
> ###   p_rope.brmsfit
> 
> ### ** Examples
> 
> library(bayestestR)
> 
> p_rope(x = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1))
Proportion of samples inside the ROPE [-0.10, 0.10]: > .999
> p_rope(x = mtcars, range = c(-0.1, 0.1))
Proportion of samples inside the ROPE [-0.10, 0.10]

Parameter | p (ROPE)
--------------------
mpg       |   < .001
cyl       |   < .001
disp      |   < .001
hp        |   < .001
drat      |   < .001
wt        |   < .001
qsec      |   < .001
vs        |   0.562 
am        |   0.594 
gear      |   < .001
carb      |   < .001
> 
> 
> 
> cleanEx()
> nameEx("p_significance")
> ### * p_significance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: p_significance
> ### Title: Practical Significance (ps)
> ### Aliases: p_significance p_significance.numeric
> ###   p_significance.get_predicted p_significance.data.frame
> ###   p_significance.stanreg p_significance.brmsfit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ # Simulate a posterior distribution of mean 1 and SD 1
+ # ----------------------------------------------------
+ posterior <- rnorm(1000, mean = 1, sd = 1)
+ p_significance(posterior)
+ 
+ # Simulate a dataframe of posterior distributions
+ # -----------------------------------------------
+ df <- data.frame(replicate(4, rnorm(100)))
+ p_significance(df)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> library(bayestestR)
> posterior <- rnorm(1000, mean = 1, sd = 1)
> p_significance(posterior)
Practical Significance (threshold: 0.10)

Parameter |   ps
----------------
Posterior | 0.80
> df <- data.frame(replicate(4, rnorm(100)))
> p_significance(df)
Practical Significance (threshold: 0.10)

Parameter |   ps
----------------
X1        | 0.48
X2        | 0.58
X3        | 0.52
X4        | 0.54
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("p_to_bf")
> ### * p_to_bf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: p_to_bf
> ### Title: Convert p-values to (pseudo) Bayes Factors
> ### Aliases: p_to_bf p_to_bf.numeric p_to_bf.default
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("parameters")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(iris)
+ model <- lm(Petal.Length ~ Sepal.Length + Species, data = iris)
+ p_to_bf(model)
+ 
+ # Examples that demonstrate comparison between
+ # BIC-approximated and pseudo BF
+ # --------------------------------------------
+ m0 <- lm(mpg ~ 1, mtcars)
+ m1 <- lm(mpg ~ am, mtcars)
+ m2 <- lm(mpg ~ factor(cyl), mtcars)
+ 
+ # In this first example, BIC-approximated BF and
+ # pseudo-BF based on p-values are close...
+ 
+ # BIC-approximated BF, m1 against null model
+ bic_to_bf(BIC(m1), denominator = BIC(m0))
+ 
+ # pseudo-BF based on p-values - dropping intercept
+ p_to_bf(m1)[-1, ]
+ 
+ # The second example shows that results from pseudo-BF are less accurate
+ # and should be handled wit caution!
+ bic_to_bf(BIC(m2), denominator = BIC(m0))
+ p_to_bf(anova(m2), n_obs = nrow(mtcars))
+ ## Don't show: 
+ }) # examplesIf
Loading required package: parameters
> data(iris)
> model <- lm(Petal.Length ~ Sepal.Length + Species, data = iris)
> p_to_bf(model)
Pseudo-BF (against NULL)

Parameter         |      p |       BF
-------------------------------------
(Intercept)       | < .001 | 2.71e+09
Sepal.Length      | < .001 | 2.43e+26
Speciesversicolor | < .001 | 2.82e+64
Speciesvirginica  | < .001 | 5.53e+68
> m0 <- lm(mpg ~ 1, mtcars)
> m1 <- lm(mpg ~ am, mtcars)
> m2 <- lm(mpg ~ factor(cyl), mtcars)
> bic_to_bf(BIC(m1), denominator = BIC(m0))
[1] 222.005
> p_to_bf(m1)[-1, ]
Pseudo-BF (against NULL)

Parameter |      p |     BF
---------------------------
am        | < .001 | 206.74
> bic_to_bf(BIC(m2), denominator = BIC(m0))
[1] 45355714
> p_to_bf(anova(m2), n_obs = nrow(mtcars))
Pseudo-BF (against NULL)

Parameter   |      p |       BF
-------------------------------
factor(cyl) | < .001 | 1.18e+07
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:parameters’

> nameEx("pd_to_p")
> ### * pd_to_p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pd_to_p
> ### Title: Convert between Probability of Direction (pd) and p-value.
> ### Aliases: pd_to_p pd_to_p.numeric p_to_pd convert_p_to_pd
> ###   convert_pd_to_p
> 
> ### ** Examples
> 
> pd_to_p(pd = 0.95)
[1] 0.1
> pd_to_p(pd = 0.95, direction = "one-sided")
[1] 0.05
> 
> 
> 
> 
> cleanEx()
> nameEx("point_estimate")
> ### * point_estimate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: point_estimate
> ### Title: Point-estimates of posterior distributions
> ### Aliases: point_estimate point_estimate.numeric
> ###   point_estimate.data.frame point_estimate.stanreg
> ###   point_estimate.brmsfit point_estimate.BFBayesFactor
> ###   point_estimate.get_predicted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("emmeans") && require("brms") && require("BayesFactor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ point_estimate(rnorm(1000))
+ point_estimate(rnorm(1000), centrality = "all", dispersion = TRUE)
+ point_estimate(rnorm(1000), centrality = c("median", "MAP"))
+ 
+ df <- data.frame(replicate(4, rnorm(100)))
+ point_estimate(df, centrality = "all", dispersion = TRUE)
+ point_estimate(df, centrality = c("median", "MAP"))
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> library(bayestestR)
> point_estimate(rnorm(1000))
Point Estimate

Median |  Mean |   MAP
----------------------
-0.04  | -0.01 | -0.18
> point_estimate(rnorm(1000), centrality = "all", dispersion = TRUE)
Point Estimate

Median |  MAD |  Mean |   SD |   MAP
------------------------------------
-0.03  | 1.08 | -0.02 | 1.04 | -0.15
> point_estimate(rnorm(1000), centrality = c("median", "MAP"))
Point Estimate

Median    |   MAP
-----------------
-5.50e-03 | -0.15
> df <- data.frame(replicate(4, rnorm(100)))
> point_estimate(df, centrality = "all", dispersion = TRUE)
Point Estimate

Parameter |   Median |  MAD | Mean |   SD |   MAP
-------------------------------------------------
X1        |     0.10 | 1.30 | 0.14 | 1.16 |  0.17
X2        |     0.13 | 1.08 | 0.12 | 1.03 |  0.21
X3        | 2.78e-03 | 1.08 | 0.13 | 1.06 | -0.16
X4        |     0.18 | 1.16 | 0.08 | 1.07 |  0.33
> point_estimate(df, centrality = c("median", "MAP"))
Point Estimate

Parameter |   Median |   MAP
----------------------------
X1        |     0.10 |  0.17
X2        |     0.13 |  0.21
X3        | 2.78e-03 | -0.16
X4        |     0.18 |  0.33
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:BayesFactor’, ‘package:Matrix’, ‘package:coda’,
  ‘package:brms’, ‘package:emmeans’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("reshape_iterations")
> ### * reshape_iterations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reshape_iterations
> ### Title: Reshape estimations with multiple iterations (draws) to long
> ###   format
> ### Aliases: reshape_iterations reshape_draws
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("rope")
> ### * rope
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rope
> ### Title: Region of Practical Equivalence (ROPE)
> ### Aliases: rope rope.numeric rope.data.frame rope.stanreg rope.brmsfit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("emmeans") && require("brms") && require("BayesFactor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ rope(x = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1))
+ rope(x = rnorm(1000, 0, 1), range = c(-0.1, 0.1))
+ rope(x = rnorm(1000, 1, 0.01), range = c(-0.1, 0.1))
+ rope(x = rnorm(1000, 1, 1), ci = c(0.90, 0.95))
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> library(bayestestR)
> rope(x = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1))
# Proportion of samples inside the ROPE [-0.10, 0.10]:

inside ROPE
-----------
100.00 %   

> rope(x = rnorm(1000, 0, 1), range = c(-0.1, 0.1))
# Proportion of samples inside the ROPE [-0.10, 0.10]:

inside ROPE
-----------
8.32 %     

> rope(x = rnorm(1000, 1, 0.01), range = c(-0.1, 0.1))
# Proportion of samples inside the ROPE [-0.10, 0.10]:

inside ROPE
-----------
0.00 %     

> rope(x = rnorm(1000, 1, 1), ci = c(0.9, 0.95))
# Proportions of samples inside the ROPE [-0.10, 0.10]:

ROPE for the 90% HDI:

inside ROPE
-----------
5.44 %     


ROPE for the 95% HDI:

inside ROPE
-----------
5.16 %     


> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:BayesFactor’, ‘package:Matrix’, ‘package:coda’,
  ‘package:brms’, ‘package:emmeans’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("rope_range")
> ### * rope_range
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rope_range
> ### Title: Find Default Equivalence (ROPE) Region Bounds
> ### Aliases: rope_range rope_range.default
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm") && require("brms") && require("BayesFactor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.7. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:BayesFactor’, ‘package:Matrix’, ‘package:coda’,
  ‘package:brms’, ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("sensitivity_to_prior")
> ### * sensitivity_to_prior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sensitivity_to_prior
> ### Title: Sensitivity to Prior
> ### Aliases: sensitivity_to_prior sensitivity_to_prior.stanreg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("rstanarm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("sexit")
> ### * sexit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sexit
> ### Title: Sequential Effect eXistence and sIgnificance Testing (SEXIT)
> ### Aliases: sexit
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("sexit_thresholds")
> ### * sexit_thresholds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sexit_thresholds
> ### Title: Find Effect Size Thresholds
> ### Aliases: sexit_thresholds
> 
> ### ** Examples
> 
> sexit_thresholds(rnorm(1000))
[1] 0.05 0.30
> 
> 
> 
> cleanEx()
> nameEx("si")
> ### * si
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: si
> ### Title: Compute Support Intervals
> ### Aliases: si si.numeric si.stanreg si.brmsfit si.blavaan si.emmGrid
> ###   si.get_predicted si.data.frame
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("logspline") && require("rstanarm") && require("brms") && require("emmeans")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ prior <- distribution_normal(1000, mean = 0, sd = 1)
+ posterior <- distribution_normal(1000, mean = 0.5, sd = 0.3)
+ 
+ si(posterior, prior, verbose = FALSE)
+ ## Don't show: 
+ }) # examplesIf
Loading required package: logspline
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: brms
Loading 'brms' package (version 2.22.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following objects are masked from ‘package:rstanarm’:

    dirichlet, exponential, get_y, lasso, ngrps

The following object is masked from ‘package:stats’:

    ar

Loading required package: emmeans
Welcome to emmeans.
Caution: You lose important information if you filter this package's results.
See '? untidy'
> library(bayestestR)
> prior <- distribution_normal(1000, mean = 0, sd = 1)
> posterior <- distribution_normal(1000, mean = 0.5, sd = 0.3)
> si(posterior, prior, verbose = FALSE)
BF = 1 SI: [0.04, 1.04]
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:emmeans’, ‘package:brms’, ‘package:rstanarm’,
  ‘package:Rcpp’, ‘package:logspline’

> nameEx("simulate_correlation")
> ### * simulate_correlation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate_correlation
> ### Title: Data Simulation
> ### Aliases: simulate_correlation simulate_ttest simulate_difference
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("MASS", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Correlation --------------------------------
+ data <- simulate_correlation(r = 0.5)
+ plot(data$V1, data$V2)
+ cor.test(data$V1, data$V2)
+ summary(lm(V2 ~ V1, data = data))
+ 
+ # Specify mean and SD
+ data <- simulate_correlation(r = 0.5, n = 50, mean = c(0, 1), sd = c(0.7, 1.7))
+ cor.test(data$V1, data$V2)
+ round(c(mean(data$V1), sd(data$V1)), 1)
+ round(c(mean(data$V2), sd(data$V2)), 1)
+ summary(lm(V2 ~ V1, data = data))
+ 
+ # Generate multiple variables
+ cor_matrix <- matrix(
+   c(
+     1.0, 0.2, 0.4,
+     0.2, 1.0, 0.3,
+     0.4, 0.3, 1.0
+   ),
+   nrow = 3
+ )
+ 
+ data <- simulate_correlation(r = cor_matrix, names = c("y", "x1", "x2"))
+ cor(data)
+ summary(lm(y ~ x1, data = data))
+ 
+ # t-test --------------------------------
+ data <- simulate_ttest(n = 30, d = 0.3)
+ plot(data$V1, data$V0)
+ round(c(mean(data$V1), sd(data$V1)), 1)
+ diff(t.test(data$V1 ~ data$V0)$estimate)
+ summary(lm(V1 ~ V0, data = data))
+ summary(glm(V0 ~ V1, data = data, family = "binomial"))
+ 
+ # Difference --------------------------------
+ data <- simulate_difference(n = 30, d = 0.3)
+ plot(data$V1, data$V0)
+ round(c(mean(data$V1), sd(data$V1)), 1)
+ diff(t.test(data$V1 ~ data$V0)$estimate)
+ summary(lm(V1 ~ V0, data = data))
+ summary(glm(V0 ~ V1, data = data, family = "binomial"))
+ ## Don't show: 
+ }) # examplesIf
> data <- simulate_correlation(r = 0.5)
> plot(data$V1, data$V2)
> cor.test(data$V1, data$V2)

	Pearson's product-moment correlation

data:  data$V1 and data$V2
t = 5.7155, df = 98, p-value = 1.18e-07
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.3366433 0.6341398
sample estimates:
cor 
0.5 

> summary(lm(V2 ~ V1, data = data))

Call:
lm(formula = V2 ~ V1, data = data)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.11862 -0.58218 -0.06576  0.62165  2.21304 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 2.853e-17  8.704e-02   0.000        1    
V1          5.000e-01  8.748e-02   5.715 1.18e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.8704 on 98 degrees of freedom
Multiple R-squared:   0.25,	Adjusted R-squared:  0.2423 
F-statistic: 32.67 on 1 and 98 DF,  p-value: 1.18e-07

> data <- simulate_correlation(r = 0.5, n = 50, mean = c(0, 1), sd = c(0.7, 
+     1.7))
> cor.test(data$V1, data$V2)

	Pearson's product-moment correlation

data:  data$V1 and data$V2
t = 4, df = 48, p-value = 0.000218
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.2574879 0.6832563
sample estimates:
cor 
0.5 

> round(c(mean(data$V1), sd(data$V1)), 1)
[1] 0.0 0.7
> round(c(mean(data$V2), sd(data$V2)), 1)
[1] 1.0 1.7
> summary(lm(V2 ~ V1, data = data))

Call:
lm(formula = V2 ~ V1, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-3.7386 -0.8903 -0.0729  0.7957  3.5832 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)   1.0000     0.2104   4.754 1.86e-05 ***
V1            1.2143     0.3036   4.000 0.000218 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.487 on 48 degrees of freedom
Multiple R-squared:   0.25,	Adjusted R-squared:  0.2344 
F-statistic:    16 on 1 and 48 DF,  p-value: 0.000218

> cor_matrix <- matrix(c(1, 0.2, 0.4, 0.2, 1, 0.3, 0.4, 0.3, 1), nrow = 3)
> data <- simulate_correlation(r = cor_matrix, names = c("y", "x1", "x2"))
> cor(data)
     y  x1  x2
y  1.0 0.2 0.4
x1 0.2 1.0 0.3
x2 0.4 0.3 1.0
> summary(lm(y ~ x1, data = data))

Call:
lm(formula = y ~ x1, data = data)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.70515 -0.59361  0.02898  0.65354  2.71700 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)  
(Intercept) -8.258e-18  9.848e-02   0.000    1.000  
x1           2.000e-01  9.897e-02   2.021    0.046 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9848 on 98 degrees of freedom
Multiple R-squared:   0.04,	Adjusted R-squared:  0.0302 
F-statistic: 4.083 on 1 and 98 DF,  p-value: 0.04604

> data <- simulate_ttest(n = 30, d = 0.3)
> plot(data$V1, data$V0)
> round(c(mean(data$V1), sd(data$V1)), 1)
[1] 0 1
> diff(t.test(data$V1 ~ data$V0)$estimate)
mean in group 1 
    -0.07871408 
> summary(lm(V1 ~ V0, data = data))

Call:
lm(formula = V1 ~ V0, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-2.1726 -0.6347 -0.0446  0.6242  2.1622 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)
(Intercept)  0.04460    0.28086   0.159    0.875
V01         -0.07871    0.37310  -0.211    0.834

Residual standard error: 1.013 on 28 degrees of freedom
Multiple R-squared:  0.001587,	Adjusted R-squared:  -0.03407 
F-statistic: 0.04451 on 1 and 28 DF,  p-value: 0.8344

> summary(glm(V0 ~ V1, data = data, family = "binomial"))

Call:
glm(formula = V0 ~ V1, family = "binomial", data = data)

Coefficients:
            Estimate Std. Error z value Pr(>|z|)
(Intercept)  0.26870    0.36875   0.729    0.466
V1          -0.08223    0.37709  -0.218    0.827

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 41.054  on 29  degrees of freedom
Residual deviance: 41.006  on 28  degrees of freedom
AIC: 45.006

Number of Fisher Scoring iterations: 4

> data <- simulate_difference(n = 30, d = 0.3)
> plot(data$V1, data$V0)
> round(c(mean(data$V1), sd(data$V1)), 1)
[1] 0 1
> diff(t.test(data$V1 ~ data$V0)$estimate)
mean in group 1 
            0.3 
> summary(lm(V1 ~ V0, data = data))

Call:
lm(formula = V1 ~ V0, data = data)

Residuals:
   Min     1Q Median     3Q    Max 
-1.834 -0.677  0.000  0.677  1.834 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)
(Intercept)  -0.1500     0.2562  -0.586    0.563
V01           0.3000     0.3623   0.828    0.415

Residual standard error: 0.9922 on 28 degrees of freedom
Multiple R-squared:  0.0239,	Adjusted R-squared:  -0.01096 
F-statistic: 0.6857 on 1 and 28 DF,  p-value: 0.4146

> summary(glm(V0 ~ V1, data = data, family = "binomial"))

Call:
glm(formula = V0 ~ V1, family = "binomial", data = data)

Coefficients:
              Estimate Std. Error z value Pr(>|z|)
(Intercept) -4.569e-17  3.696e-01   0.000    1.000
V1           3.251e-01  3.877e-01   0.839    0.402

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 41.589  on 29  degrees of freedom
Residual deviance: 40.865  on 28  degrees of freedom
AIC: 44.865

Number of Fisher Scoring iterations: 4

> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("simulate_prior")
> ### * simulate_prior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate_prior
> ### Title: Returns Priors of a Model as Empirical Distributions
> ### Aliases: simulate_prior
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("simulate_simpson")
> ### * simulate_simpson
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate_simpson
> ### Title: Simpson's paradox dataset simulation
> ### Aliases: simulate_simpson
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("MASS", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data <- simulate_simpson(n = 10, groups = 5, r = 0.5)
+ 
+ if (require("ggplot2")) {
+   ggplot(data, aes(x = V1, y = V2)) +
+     geom_point(aes(color = Group)) +
+     geom_smooth(aes(color = Group), method = "lm") +
+     geom_smooth(method = "lm")
+ }
+ ## Don't show: 
+ }) # examplesIf
> data <- simulate_simpson(n = 10, groups = 5, r = 0.5)
> if (require("ggplot2")) {
+     ggplot(data, aes(x = V1, y = V2)) + geom_point(aes(color = Group)) + geom_smooth(aes(color = Group), 
+         method = "lm") + geom_smooth(method = "lm")
+ }
Loading required package: ggplot2
`geom_smooth()` using formula = 'y ~ x'
`geom_smooth()` using formula = 'y ~ x'
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("spi")
> ### * spi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spi
> ### Title: Shortest Probability Interval (SPI)
> ### Aliases: spi spi.numeric spi.data.frame spi.stanreg spi.brmsfit
> ###   spi.get_predicted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (require("quadprog") && require("rstanarm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(bayestestR)
+ 
+ posterior <- rnorm(1000)
+ spi(posterior)
+ spi(posterior, ci = c(0.80, 0.89, 0.95))
+ 
+ df <- data.frame(replicate(4, rnorm(100)))
+ spi(df)
+ spi(df, ci = c(0.80, 0.89, 0.95))
+ ## Don't show: 
+ }) # examplesIf
Loading required package: quadprog
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.32.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> library(bayestestR)
> posterior <- rnorm(1000)
> spi(posterior)
95% SPI: [-2.10, 2.05]
> spi(posterior, ci = c(0.8, 0.89, 0.95))
Shortest Probability Interval

80% SPI       |       89% SPI |       95% SPI
---------------------------------------------
[-1.38, 1.22] | [-1.49, 1.81] | [-2.10, 2.05]
> df <- data.frame(replicate(4, rnorm(100)))
> spi(df)
Shortest Probability Interval

Parameter |       95% SPI
-------------------------
X1        | [-2.00, 1.90]
X2        | [-2.04, 1.64]
X3        | [-1.76, 2.45]
X4        | [-1.52, 1.50]
> spi(df, ci = c(0.8, 0.89, 0.95))
Shortest Probability Interval

Parameter |       80% SPI |       89% SPI |       95% SPI
---------------------------------------------------------
X1        | [-1.50, 1.19] | [-2.00, 1.30] | [-2.00, 1.90]
X2        | [-1.45, 0.90] | [-1.34, 1.64] | [-2.04, 1.64]
X3        | [-1.02, 1.71] | [-1.69, 1.79] | [-1.76, 2.45]
X4        | [-1.30, 0.90] | [-1.52, 1.15] | [-1.52, 1.50]
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:rstanarm’, ‘package:Rcpp’, ‘package:quadprog’

> nameEx("weighted_posteriors")
> ### * weighted_posteriors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weighted_posteriors
> ### Title: Generate posterior distributions weighted across models
> ### Aliases: weighted_posteriors weighted_posteriors.data.frame
> ###   weighted_posteriors.stanreg weighted_posteriors.brmsfit
> ###   weighted_posteriors.blavaan weighted_posteriors.BFBayesFactor
> 
> ### ** Examples
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.827 0.359 6.914 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
