
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a            b           c          d           e            f
A  1.89641450  0.148469985  0.48154318 -1.0271250  0.90365328  0.668674035
B -1.07350604 -1.385274588  1.25888644  1.1299382  1.15983727 -1.136876934
C -0.45137754 -0.910125088  1.49522580 -1.5118277  2.37916766 -0.866711929
D  0.12503563  0.005149776 -0.61097317 -1.2456139 -0.17369126  0.164212243
E  0.28378935 -0.169691332 -0.45309790 -0.4514475  1.15162069 -0.412023160
F  0.30812614  0.676661428 -0.75686028  0.8752525 -0.08136845 -0.236412945
G -2.16854947  0.940672160 -0.23892104 -2.0491171 -0.40215366 -0.087297639
H  0.03786728 -0.120519140  1.21089866  0.2367805  1.61688024 -0.406236688
I -1.10173702 -1.039722537 -2.21697457 -0.7418919 -0.31550680  0.458002248
J -0.88966533  0.695791623  1.89332350  1.4511951  0.22953972 -0.759531709
K  0.31896714  1.550124170  0.23802815  0.3497285 -1.14055015 -0.002575523
L  0.07029090  0.563024746  0.20239679  0.1792080 -0.55876784 -0.662479268
M -0.53293390 -1.443168702 -0.37778772 -0.9849161 -1.91607245 -0.074769566
N  0.60237042 -1.318147357 -1.60805173 -1.2860418  0.29561144 -2.094488458
O  0.03715571 -1.452418724 -0.09405732  0.8448204 -0.44378852 -1.205268300
P -0.46780781  1.853244917  0.50267277 -0.3023150  1.06468025  1.264293599
Q -0.30927756  0.563790576 -0.32601213 -0.2092065  1.15574077  0.018205937
R -0.64384771  0.291031313 -0.17236917 -0.8532437 -0.69164179 -0.780858204
S -0.47301821  0.930773445 -0.51575019 -0.1619371 -1.92036118 -0.044680302
T -0.87887598 -0.739557213  1.68565864 -0.2970145  0.91958601 -1.035502564
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1           s2           s3
A  1.02244224 -0.272790898  0.786163656
B -1.22939031  1.194412328  0.011480166
C -0.68075131 -0.008300965  0.756227863
D  0.06509270 -0.928293553 -0.004739506
E  0.05704901 -0.452272719  0.369798765
F  0.49239379  0.059196135 -0.158890699
G -0.61393865 -1.144019080 -0.244725648
H -0.04132593  0.723839596  0.605321776
I -1.07072978 -1.479433213  0.071247724
J -0.09693685  1.672259323 -0.264995992
K  0.93454565  0.293878322 -0.571562835
L  0.31665783  0.190802375 -0.610623552
M -0.98805130 -0.681351889 -0.995421007
N -0.35788847 -1.447046768 -0.899438509
O -0.70763151  0.375381545 -0.824528409
P  0.69271856  0.100178886  1.164486926
Q  0.12725651 -0.267609311  0.586973355
R -0.17640820 -0.512806448 -0.736249998
S  0.22887762 -0.338843621 -0.982520740
T -0.80921660  0.694322088 -0.057958276
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b           c          d          e          f
s1  0.12414164 -0.5354450  0.65617056 -0.6636571  1.0672417 -0.2926756
s2 -0.38469167  0.3317808 -0.05949514 -0.3471329  0.5712447 -0.2854926
s3 -0.40053608  0.4423045  0.02919347  0.3095599 -0.4463213 -0.2416461
s4 -0.09030389 -0.5901225 -0.39430600 -0.4321131 -0.2498923 -0.5275582
s5 -0.57625487  0.2615095  0.16788179 -0.3803504 -0.1341690 -0.4607088
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
            s1
A  0.511938333
B -0.007832606
C  0.022391862
D -0.289313452
E -0.008474981
F  0.130899741
G -0.667561127
H  0.429278481
I -0.826305088
J  0.436775493
K  0.218953714
L -0.034387784
M -0.888274732
N -0.901457915
O -0.385592790
P  0.652461456
Q  0.148873518
R -0.475154882
S -0.364162248
T -0.057617595
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a           b          c          d         e          f
s1 -0.265529 -0.01799453 0.07988894 -0.3027387 0.1616208 -0.3616163
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1           s2           s3
A  1.02244224 -0.272790898  0.786163656
B -1.22939031  1.194412328  0.011480166
C -0.68075131 -0.008300965  0.756227863
D  0.06509270 -0.928293553 -0.004739506
E  0.05704901 -0.452272719  0.369798765
F  0.49239379  0.059196135 -0.158890699
G -0.61393865 -1.144019080 -0.244725648
H -0.04132593  0.723839596  0.605321776
I -1.07072978 -1.479433213  0.071247724
J -0.09693685  1.672259323 -0.264995992
K  0.93454565  0.293878322 -0.571562835
L  0.31665783  0.190802375 -0.610623552
M -0.98805130 -0.681351889 -0.995421007
N -0.35788847 -1.447046768 -0.899438509
O -0.70763151  0.375381545 -0.824528409
P  0.69271856  0.100178886  1.164486926
Q  0.12725651 -0.267609311  0.586973355
R -0.17640820 -0.512806448 -0.736249998
S  0.22887762 -0.338843621 -0.982520740
T -0.80921660  0.694322088 -0.057958276
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c           d         e          f
s1  0.4114542 -0.6184023  0.8702148  0.05140662 1.0317453 -0.2341014
s2 -0.1631710 -0.4524877  0.4421263 -1.37872083 1.1027382 -0.3512498
s3  0.2959577  0.2534850 -0.6049791  0.21190250 0.5351261 -0.3242181
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
