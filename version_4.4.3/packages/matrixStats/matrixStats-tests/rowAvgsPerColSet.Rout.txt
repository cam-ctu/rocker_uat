
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
             a           b           c          d           e           f
A  0.336206507  0.29253838 -0.73278337  0.3263887  1.91571030 -0.86621088
B -2.432052715  0.35660643 -0.45941415  1.2921432 -0.50990022 -0.89088485
C  0.171546113 -0.83282238 -0.56555996 -0.2271253  2.32712596 -1.62649988
D -1.037896263 -0.51459185 -0.73868305 -0.5366906  0.32606603  0.19298908
E -1.502331802 -0.24889051 -1.13016549  1.3532250  0.66746959  1.09287158
F  0.596156146 -0.41738249 -0.53876364  1.7495944 -0.58636863 -0.63026565
G -0.835719220  0.45740367 -1.21311163 -1.4080495  0.15372024  0.08254951
H -0.649625372  0.58542754  1.88577890  0.3002025  0.25254435  0.62896716
I  0.318896789  1.72511432 -1.20917037  1.7168250  0.45937476  1.15499096
J  0.894927223 -0.63406852  1.84947156  1.3995761 -0.60369608  0.02341758
K -0.102130961  0.10140377 -0.48599646 -0.1570226  1.70521143  1.03299629
L -0.002883332  0.72136658  1.22409545 -1.4783007  0.03712380 -0.88317221
M  0.662557052 -0.38961187 -1.16432895 -0.4733595 -0.34223308 -0.19260591
N  0.765310745  1.04289747 -0.95011463 -2.0164218 -1.83402060  1.11315175
O -2.620739407 -0.06067697  0.44522448  0.2433172  0.19455555 -2.23136542
P -1.341775682 -2.11224121 -0.61067848  0.7992845  0.05470527  0.51400063
Q -0.042021879 -1.54552494  1.42979364  0.1655192  0.69636220  0.54898743
R  1.375482102 -0.04723543  0.04804652 -0.2447228  0.33885442  1.17003605
S  0.577404808 -0.01232908  0.49345109  0.9970579 -0.07387677  0.03654955
T -1.311676293  1.06742677  0.17971109  1.2855682  1.30032520  0.11009213
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
             s1          s2          s3
A  0.3143724449 -0.20319732  0.52474971
B -1.0377231407  0.41636453 -0.70039253
C -0.3306381352 -0.39634263  0.35031304
D -0.7762440575 -0.63768682  0.25952756
E -0.8756111555  0.11152973  0.88017059
F  0.0893868285  0.60541538 -0.60831714
G -0.1891577756 -1.31058057  0.11813488
H -0.0320989165  1.09299072  0.44075576
I  1.0220055548  0.25382732  0.80718286
J  0.1304293514  1.62452381 -0.29013925
K -0.0003635945 -0.32150955  1.36910386
L  0.3592416243 -0.12710263 -0.42302420
M  0.1364725906 -0.81884422 -0.26741949
N  0.9041041050 -1.48326821 -0.36043443
O -1.3407081884  0.34427083 -1.01840493
P -1.7270084466  0.09430299  0.28435295
Q -0.7937734110  0.79765644  0.62267481
R  0.6641233383 -0.09833813  0.75444523
S  0.2825378644  0.74525449 -0.01866361
T -0.1221247619  0.73263967  0.70520866
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a           b          c          d          e          f
s1 -0.7405491 -0.17456735 -0.6241101  0.2136790  1.0147505 -0.7976516
s2 -0.5978801  0.09413955 -0.2490655  0.4987431  0.1218414  0.2935307
s3  0.2772024  0.47845404  0.3446000  0.3702694  0.3995035  0.3320582
s4 -0.6336618 -0.37990815 -0.5699744 -0.3617949 -0.4817482 -0.1992047
s5  0.1497972 -0.13441567  0.5377506  0.5508556  0.5654163  0.4664163
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.21197494
B -0.44058371
C -0.12555591
D -0.38480111
E  0.03869639
F  0.02882836
G -0.46053449
H  0.50054919
I  0.69433858
J  0.48827131
K  0.34907690
L -0.06362840
M -0.31659704
N -0.31319951
O -0.67161410
P -0.44945084
Q  0.20885261
R  0.44007681
S  0.33637625
T  0.43857452
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a           b          c         d         e          f
s1 -0.3090183 -0.02325952 -0.1121599 0.2543505 0.3239527 0.01902974
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
             s1          s2          s3
A  0.3143724449 -0.20319732  0.52474971
B -1.0377231407  0.41636453 -0.70039253
C -0.3306381352 -0.39634263  0.35031304
D -0.7762440575 -0.63768682  0.25952756
E -0.8756111555  0.11152973  0.88017059
F  0.0893868285  0.60541538 -0.60831714
G -0.1891577756 -1.31058057  0.11813488
H -0.0320989165  1.09299072  0.44075576
I  1.0220055548  0.25382732  0.80718286
J  0.1304293514  1.62452381 -0.29013925
K -0.0003635945 -0.32150955  1.36910386
L  0.3592416243 -0.12710263 -0.42302420
M  0.1364725906 -0.81884422 -0.26741949
N  0.9041041050 -1.48326821 -0.36043443
O -1.3407081884  0.34427083 -1.01840493
P -1.7270084466  0.09430299  0.28435295
Q -0.7937734110  0.79765644  0.62267481
R  0.6641233383 -0.09833813  0.75444523
S  0.2825378644  0.74525449 -0.01866361
T -0.1221247619  0.73263967  0.70520866
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c          d          e          f
s1 -1.0479231  0.3245724 -0.5960988  0.8092660 0.70290504 -0.8785479
s2 -0.4331751 -0.6737071 -0.6521215 -0.3819079 1.32659600 -0.7167554
s3 -0.4530878 -0.3331365 -0.8344646  1.5514097 0.04055048  0.2313030
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
