
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b          c           d           e            f
A  0.2824448 -0.48111327 -1.1245724 -0.04408795 -0.93207619  1.319095802
B -1.2335333  0.27633557 -0.5339607 -0.86771233  0.12822251  0.905965431
C  1.9000748 -2.51877329  1.1034546 -1.07851507  0.99768293 -0.723148201
D  0.4183675 -0.64941794  1.8343788 -0.95440380 -0.70671491 -0.729284113
E  1.0993900 -1.08447009 -2.1689089  0.36103286  0.62320092  0.694169573
F -0.4196696  0.76858327 -0.6393022  0.75130525  1.20675965 -2.347522812
G  0.4277980 -1.35750750  0.2779608  0.99967225  0.82909766 -1.276746454
H -2.5957201 -0.04865674  0.4933045 -0.38156274  0.22813560 -0.556534207
I  0.2525304 -0.80268326 -0.3533021  1.04827494  1.83210209  1.057805242
J -0.7223632  1.35985950  0.7559007  0.17158752 -1.56517200  0.719473223
K -0.1219124 -0.50695360  1.6875483  0.09561700 -1.34697959 -0.519117019
L -1.0218907  0.47613689  2.2635761 -0.13181983  1.26250955  0.033045585
M -0.6315874 -0.36720251  1.0175061 -0.44296971  1.11288397 -0.107135538
N  0.7119841 -1.96937085  1.5890382 -0.11333672 -0.16573856  0.006794221
O  1.0203480 -1.70334482 -2.4267894 -0.67277841 -1.15789881 -0.228762453
P  0.6195712 -0.34460855 -0.9564446  0.52065570  0.05528288 -1.213837724
Q  1.5313906 -1.15257868 -0.8241572 -0.54629007 -0.24167051  0.111516247
R -0.7448600  0.40631194 -0.7601190 -0.31616881 -0.28476437 -0.001898009
S -0.7935563 -1.77597966 -0.7544166  1.01646634  0.53114963  0.039021839
T -2.1510889  2.08873909  0.6366700 -0.93829814 -0.44671269 -2.370939968
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
            s1          s2          s3
A -0.099334259 -0.58433019  0.19350981
B -0.478598878 -0.70083653  0.51709397
C -0.309349260  0.01246977  0.13726736
D -0.115525235  0.43998751 -0.71799951
E  0.007459951 -0.90393801  0.65868525
F  0.174456848  0.05600152 -0.57038158
G -0.464854734  0.63881651 -0.22382440
H -1.322188403  0.05587089 -0.16419930
I -0.275076448  0.34748644  1.44495366
J  0.318748137  0.46374410 -0.42284939
K -0.314432989  0.89158267 -0.93304830
L -0.272876879  1.06587812  0.64777757
M -0.499394959  0.28726819  0.50287422
N -0.628693357  0.73785072 -0.07947217
O -0.341498419 -1.54978391 -0.69333063
P  0.137481348 -0.21789448 -0.57927742
Q  0.189405954 -0.68522363 -0.06507713
R -0.169274009 -0.53814388 -0.14333119
S -1.284767998  0.13102488  0.28508573
T -0.031174907 -0.15081405 -1.40882633
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a          b          c          d           e          f
s1  0.3418384 -0.8432422  0.3198251 -0.7361798 -0.12822141  0.1931572
s2 -0.3720504 -0.4305128 -0.5092365  0.4326119  0.72179846 -0.8716585
s3 -0.4034090  0.1315899  1.0884308  0.2959149  0.04561501  0.3228018
s4  0.4300790 -1.0961317 -0.1941724 -0.1771073 -0.03886763 -0.3857354
s5 -0.5395287 -0.1083768 -0.4255057 -0.1960727 -0.11049949 -0.5555750
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
            s1
A -0.163384879
B -0.220780480
C -0.053204042
D -0.131179079
E -0.079264270
F -0.113307738
G -0.016620874
H -0.476838940
I  0.505787887
J  0.119880948
K -0.118632873
L  0.480259601
M  0.096915816
N  0.009895065
O -0.861537652
P -0.219896849
Q -0.186964934
R -0.283583027
S -0.289552463
T -0.530271762
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a          b          c           d          e         f
s1 -0.1086141 -0.4693347 0.05586825 -0.07616659 0.09796499 -0.259402
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
            s1          s2          s3
A -0.099334259 -0.58433019  0.19350981
B -0.478598878 -0.70083653  0.51709397
C -0.309349260  0.01246977  0.13726736
D -0.115525235  0.43998751 -0.71799951
E  0.007459951 -0.90393801  0.65868525
F  0.174456848  0.05600152 -0.57038158
G -0.464854734  0.63881651 -0.22382440
H -1.322188403  0.05587089 -0.16419930
I -0.275076448  0.34748644  1.44495366
J  0.318748137  0.46374410 -0.42284939
K -0.314432989  0.89158267 -0.93304830
L -0.272876879  1.06587812  0.64777757
M -0.499394959  0.28726819  0.50287422
N -0.628693357  0.73785072 -0.07947217
O -0.341498419 -1.54978391 -0.69333063
P  0.137481348 -0.21789448 -0.57927742
Q  0.189405954 -0.68522363 -0.06507713
R -0.169274009 -0.53814388 -0.14333119
S -1.284767998  0.13102488  0.28508573
T -0.031174907 -0.15081405 -1.40882633
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c          d          e          f
s1 -0.4755443 -0.1023889 -0.8292666 -0.4559001 -0.4019268  1.1125306
s2  1.1592211 -1.5840956  1.4689167 -1.0164594  0.1454840 -0.7262162
s3  0.3398602 -0.1579434 -1.4041055  0.5561691  0.9149803 -0.8266766
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
