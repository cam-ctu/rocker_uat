
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a            b            c           d           e            f
A  0.05341043 -0.379830539 -2.533639003  0.80279469 -1.34746999  0.172556595
B  0.74989598  1.109104413 -0.204984332 -0.15264893  0.54229070  0.071766959
C -0.04108261 -1.009434133 -0.799823423 -0.66822507 -0.21856953  0.487791812
D  1.58469488  1.750699715 -0.357433600 -0.62106879 -0.17037784  1.214492458
E  1.17295576 -0.349345431 -2.572951379  1.19502366 -0.02717952  1.328229156
F  0.13660018  0.454072150  1.736769459  0.20848234 -2.22881347  1.099686604
G -0.92267833 -0.491311660 -0.005639489 -1.28009727  0.73484468  0.006460634
H -0.15511914 -1.693509917  0.160646904  0.01167352 -0.35638747  0.235798670
I  3.26315784 -0.207113472  0.581360072  1.11790642  1.67318148 -1.236163126
J  1.90147078  0.009281534  0.137419709 -0.33862705 -2.11299833 -0.696203336
K -0.65824416 -0.551683114  0.191308142 -0.12273465 -1.17121107  0.968561779
L  0.60064839  0.294999659  0.503176003 -0.65922160 -0.50882465 -0.089305715
M -0.21660551  0.096758498 -0.716670646  0.83364221  0.23782593 -0.718914140
N  1.90051068  0.139756580 -0.421677772 -0.46124267  1.66467677  0.567953908
O -1.57238574  0.652129369  0.079216965 -0.01843760 -0.26688015  1.337545925
P  1.47658925  1.283457122 -0.394827881  0.10742703  0.86392815  0.871441222
Q  0.40734811  0.020633912 -0.458981571  1.10089513  0.95269961  0.614665651
R -0.92105975 -0.798543023  1.073169289 -0.91399800 -1.32626428 -1.038886462
S -0.02295932  0.121188128 -0.133666897 -1.33390983 -1.52380770  0.257860843
T  0.30881658 -0.802775547  2.143875695  0.15563015 -0.85736735 -0.685199275
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2         s3
A -0.16321005 -0.86542216 -0.5874567
B  0.92950019 -0.17881663  0.3070288
C -0.52525837 -0.73402425  0.1346111
D  1.66769730 -0.48925120  0.5220573
E  0.41180516 -0.68896386  0.6505248
F  0.29533617  0.97262590 -0.5645634
G -0.70699500 -0.64286838  0.3706527
H -0.92431453  0.08616021 -0.0602944
I  1.52802218  0.84963325  0.2185092
J  0.95537616 -0.10060367 -1.4046008
K -0.60496364  0.03428675 -0.1013246
L  0.44782402 -0.07802280 -0.2990652
M -0.05992351  0.05848578 -0.2405441
N  1.02013363 -0.44146022  1.1163153
O -0.46012819  0.03038968  0.5353329
P  1.38002319 -0.14370042  0.8676847
Q  0.21399101  0.32095678  0.7836826
R -0.85980139  0.07958564 -1.1825754
S  0.04911441 -0.73378837 -0.6329734
T -0.24697948  1.14975292 -0.7712833
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b          c             d          e          f
s1  0.58672967  0.3676349 -0.9739701 -0.1597870245 -0.2985317  0.4866520
s2  0.05793962 -0.5200237 -0.1702936  0.0337705633 -0.4693839  0.6675438
s3  1.27675821 -0.1136288  0.3533160 -0.0006692204 -0.5299631 -0.2632776
s4  0.39702717  0.5430254 -0.3634898  0.1153472430  0.6248877  0.5145067
s5 -0.05696359 -0.3648741  0.6560991 -0.2478456392 -0.6886849 -0.2128898
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.53869630
B  0.35257080
C -0.37489049
D  0.56683447
E  0.12445537
F  0.23446621
G -0.32640357
H -0.29948291
I  0.86538820
J -0.18327611
K -0.22400051
L  0.02357868
M -0.08066061
N  0.56499625
O  0.03519813
P  0.70133582
Q  0.43954347
R -0.65426371
S -0.43921580
T  0.04383004
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a           b           c           d          e        f
s1 0.4522982 -0.01757329 -0.09966769 -0.05183682 -0.2723352 0.238507
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2         s3
A -0.16321005 -0.86542216 -0.5874567
B  0.92950019 -0.17881663  0.3070288
C -0.52525837 -0.73402425  0.1346111
D  1.66769730 -0.48925120  0.5220573
E  0.41180516 -0.68896386  0.6505248
F  0.29533617  0.97262590 -0.5645634
G -0.70699500 -0.64286838  0.3706527
H -0.92431453  0.08616021 -0.0602944
I  1.52802218  0.84963325  0.2185092
J  0.95537616 -0.10060367 -1.4046008
K -0.60496364  0.03428675 -0.1013246
L  0.44782402 -0.07802280 -0.2990652
M -0.05992351  0.05848578 -0.2405441
N  1.02013363 -0.44146022  1.1163153
O -0.46012819  0.03038968  0.5353329
P  1.38002319 -0.14370042  0.8676847
Q  0.21399101  0.32095678  0.7836826
R -0.85980139  0.07958564 -1.1825754
S  0.04911441 -0.73378837 -0.6329734
T -0.24697948  1.14975292 -0.7712833
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
           a          b          c          d          e         f
s1 0.4016532 0.36463694 -1.3693117  0.3250729 -0.4025896 0.1221618
s2 0.7718061 0.37063279 -0.5786285 -0.6446469 -0.1944737 0.8511421
s3 0.6547780 0.05236336 -0.4180910  0.7017530 -1.1279965 1.2139579
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
