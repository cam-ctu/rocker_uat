
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpAIBAAKCAQEAjnme/kgiFBWO0TN67F3m3/8KYq2n5SDmouKifoafijvFrmx9"
 [3] "QeUHEzuQ0p3b+lsHDm2fKFddm8IIGctf36jUWdmfgs+TJymGC+vzxik+da+LqkkH"
 [4] "EkZUy20xRHeJHvltFMFZJ6KbLL5q8dfXHTzU7ygy4wl5zg0zWEYkNCKYe2dJJ6OT"
 [5] "TGhLCM+qWKS/d+e4cVBT82wO08bchQ94l2nff9JZ0YPAwllNON6XAfqRzxkMkUBb"
 [6] "lxvDumhmctg/Y7MOR1jAkfMfRo90uZblzsyXWU2m9vRw6+fIKttLAtW4ZQO3LYBE"
 [7] "nyAj33QfkFd/fjblvKLhxmf8fUxSTfEYXQBOEwIDAQABAoIBAAZJxuMpMtvZEbsY"
 [8] "/xFkmZaETqSJTpI10AgbYZmc/nie57wpjKO2ZIgMRnmNPxK/JsITw4UHyhlgSHQ+"
 [9] "/iXEcU7f5ILk/3Uoh4KKMPGri1atX0guPfIoCYEK+jQv5GzqDE7ws6skqZ2hb93p"
[10] "rVRchXdiulA78FTQT1ZTjjCA4GL93KTRxlFrTmTopw1EpXC01ywZomEunWj6M7bx"
[11] "LSi8U6SFgZoctKI0S1x0PCrjW3Xlcw6Bp22aUtR095YrCKaZEl6Wx0oZKGXRCE6i"
[12] "kb/PCwk0JW7o4tm8Jc8VuMyhNs9tYd4TThqBLeQfHB9u3H0GfHnJmjnE6xl+Wu5r"
[13] "S6KtfjECgYEAxwRudRas++kmlNoW+bcivr6f9RWDWLYr8o8bYtc6r0FvYjuMaAS8"
[14] "YuOO6KNgih11oS51Z4JpqilgA55G64IgN7Aj2ezDuumPiamdk/2FNlqtwexKBpEB"
[15] "pGItxXrVy2MVIVYv5NHdMh6XksKZb7AIRDZJikozTNfLz9+PPk5rDQMCgYEAt0TC"
[16] "DLaKEpyUr+Xdldc5jABpyjHx3Qyw2JnfuEwn5cfG7B0smtFEcvZs9ydfXWNoer7R"
[17] "r4LcoeIe/sOFFfXdoK1R2k9LwheS6eWio7H3bbesAfpO7DmfEQtoXYpMtYCnW26C"
[18] "Ub8TYdy9jT4OblaoonlgScc+vjacCob3a4RTxbECgYEAgRKWsMmsFxT3OMLY88ua"
[19] "dSscgs8ZCIfdqMq3cDs2jENcAdGtFik8JMaBANA05F6G06pV6nPiI8IBy1bzl/ok"
[20] "+vj5x3SO3MJtnVKsKDbcFoxo9MRSnj+dWQdzuAgacHYqVhyXo0eYtdCxbTVYXd9E"
[21] "/ThYKaBF9Shfvsm3FSm2tBECgYEAiMoVXI/SttmQUUns/i5KkaitTXHB6Q/T35fa"
[22] "WCDflq5qV0nfRR71TCmKY19L2tSb4yISOEIgk+PG5rjg2OdOqOM0uRF+pjwaN+Ji"
[23] "ZnQrDgWNqVw/FCpeA8bT+x2C6+Y/BAuT0Zggy2aLRKUQ+GJONBcMO4Uv26G/Dkx2"
[24] "2BVIwcECgYBtro8Ppbqwdn8h4b2f+21KjgzuG9DdsTwDPMCedRji4FA7C6Ul9lUW"
[25] "QG+IlwhrNdEe4icaGkNlbFYb5xw68z4eAYNzI9ydxaNWtwC2Dg/Vdhn7KHLeSVih"
[26] "iUyysUn7aJLXtEkSE33hU2Ot1+YeChTDXP9O+8p0Jnz/5PquwNfgcg=="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a4 02 01 00 02 82 01 01 00 8e 79 9e fe 48 22 14 15 8e d1 33 7a
  [25] ec 5d e6 df ff 0a 62 ad a7 e5 20 e6 a2 e2 a2 7e 86 9f 8a 3b c5 ae 6c 7d
  [49] 41 e5 07 13 3b 90 d2 9d db fa 5b 07 0e 6d 9f 28 57 5d 9b c2 08 19 cb 5f
  [73] df a8 d4 59 d9 9f 82 cf 93 27 29 86 0b eb f3 c6 29 3e 75 af 8b aa 49 07
  [97] 12 46 54 cb 6d 31 44 77 89 1e f9 6d 14 c1 59 27 a2 9b 2c be 6a f1 d7 d7
 [121] 1d 3c d4 ef 28 32 e3 09 79 ce 0d 33 58 46 24 34 22 98 7b 67 49 27 a3 93
 [145] 4c 68 4b 08 cf aa 58 a4 bf 77 e7 b8 71 50 53 f3 6c 0e d3 c6 dc 85 0f 78
 [169] 97 69 df 7f d2 59 d1 83 c0 c2 59 4d 38 de 97 01 fa 91 cf 19 0c 91 40 5b
 [193] 97 1b c3 ba 68 66 72 d8 3f 63 b3 0e 47 58 c0 91 f3 1f 46 8f 74 b9 96 e5
 [217] ce cc 97 59 4d a6 f6 f4 70 eb e7 c8 2a db 4b 02 d5 b8 65 03 b7 2d 80 44
 [241] 9f 20 23 df 74 1f 90 57 7f 7e 36 e5 bc a2 e1 c6 67 fc 7d 4c 52 4d f1 18
 [265] 5d 00 4e 13 02 03 01 00 01 02 82 01 00 06 49 c6 e3 29 32 db d9 11 bb 18
 [289] ff 11 64 99 96 84 4e a4 89 4e 92 35 d0 08 1b 61 99 9c fe 78 9e e7 bc 29
 [313] 8c a3 b6 64 88 0c 46 79 8d 3f 12 bf 26 c2 13 c3 85 07 ca 19 60 48 74 3e
 [337] fe 25 c4 71 4e df e4 82 e4 ff 75 28 87 82 8a 30 f1 ab 8b 56 ad 5f 48 2e
 [361] 3d f2 28 09 81 0a fa 34 2f e4 6c ea 0c 4e f0 b3 ab 24 a9 9d a1 6f dd e9
 [385] ad 54 5c 85 77 62 ba 50 3b f0 54 d0 4f 56 53 8e 30 80 e0 62 fd dc a4 d1
 [409] c6 51 6b 4e 64 e8 a7 0d 44 a5 70 b4 d7 2c 19 a2 61 2e 9d 68 fa 33 b6 f1
 [433] 2d 28 bc 53 a4 85 81 9a 1c b4 a2 34 4b 5c 74 3c 2a e3 5b 75 e5 73 0e 81
 [457] a7 6d 9a 52 d4 74 f7 96 2b 08 a6 99 12 5e 96 c7 4a 19 28 65 d1 08 4e a2
 [481] 91 bf cf 0b 09 34 25 6e e8 e2 d9 bc 25 cf 15 b8 cc a1 36 cf 6d 61 de 13
 [505] 4e 1a 81 2d e4 1f 1c 1f 6e dc 7d 06 7c 79 c9 9a 39 c4 eb 19 7e 5a ee 6b
 [529] 4b a2 ad 7e 31 02 81 81 00 c7 04 6e 75 16 ac fb e9 26 94 da 16 f9 b7 22
 [553] be be 9f f5 15 83 58 b6 2b f2 8f 1b 62 d7 3a af 41 6f 62 3b 8c 68 04 bc
 [577] 62 e3 8e e8 a3 60 8a 1d 75 a1 2e 75 67 82 69 aa 29 60 03 9e 46 eb 82 20
 [601] 37 b0 23 d9 ec c3 ba e9 8f 89 a9 9d 93 fd 85 36 5a ad c1 ec 4a 06 91 01
 [625] a4 62 2d c5 7a d5 cb 63 15 21 56 2f e4 d1 dd 32 1e 97 92 c2 99 6f b0 08
 [649] 44 36 49 8a 4a 33 4c d7 cb cf df 8f 3e 4e 6b 0d 03 02 81 81 00 b7 44 c2
 [673] 0c b6 8a 12 9c 94 af e5 dd 95 d7 39 8c 00 69 ca 31 f1 dd 0c b0 d8 99 df
 [697] b8 4c 27 e5 c7 c6 ec 1d 2c 9a d1 44 72 f6 6c f7 27 5f 5d 63 68 7a be d1
 [721] af 82 dc a1 e2 1e fe c3 85 15 f5 dd a0 ad 51 da 4f 4b c2 17 92 e9 e5 a2
 [745] a3 b1 f7 6d b7 ac 01 fa 4e ec 39 9f 11 0b 68 5d 8a 4c b5 80 a7 5b 6e 82
 [769] 51 bf 13 61 dc bd 8d 3e 0e 6e 56 a8 a2 79 60 49 c7 3e be 36 9c 0a 86 f7
 [793] 6b 84 53 c5 b1 02 81 81 00 81 12 96 b0 c9 ac 17 14 f7 38 c2 d8 f3 cb 9a
 [817] 75 2b 1c 82 cf 19 08 87 dd a8 ca b7 70 3b 36 8c 43 5c 01 d1 ad 16 29 3c
 [841] 24 c6 81 00 d0 34 e4 5e 86 d3 aa 55 ea 73 e2 23 c2 01 cb 56 f3 97 fa 24
 [865] fa f8 f9 c7 74 8e dc c2 6d 9d 52 ac 28 36 dc 16 8c 68 f4 c4 52 9e 3f 9d
 [889] 59 07 73 b8 08 1a 70 76 2a 56 1c 97 a3 47 98 b5 d0 b1 6d 35 58 5d df 44
 [913] fd 38 58 29 a0 45 f5 28 5f be c9 b7 15 29 b6 b4 11 02 81 81 00 88 ca 15
 [937] 5c 8f d2 b6 d9 90 51 49 ec fe 2e 4a 91 a8 ad 4d 71 c1 e9 0f d3 df 97 da
 [961] 58 20 df 96 ae 6a 57 49 df 45 1e f5 4c 29 8a 63 5f 4b da d4 9b e3 22 12
 [985] 38 42 20 93 e3 c6 e6 b8 e0 d8 e7 4e a8 e3 34 b9 11 7e a6 3c 1a 37 e2 62
[1009] 66 74 2b 0e 05 8d a9 5c 3f 14 2a 5e 03 c6 d3 fb 1d 82 eb e6 3f 04 0b 93
[1033] d1 98 20 cb 66 8b 44 a5 10 f8 62 4e 34 17 0c 3b 85 2f db a1 bf 0e 4c 76
[1057] d8 15 48 c1 c1 02 81 80 6d ae 8f 0f a5 ba b0 76 7f 21 e1 bd 9f fb 6d 4a
[1081] 8e 0c ee 1b d0 dd b1 3c 03 3c c0 9e 75 18 e2 e0 50 3b 0b a5 25 f6 55 16
[1105] 40 6f 88 97 08 6b 35 d1 1e e2 27 1a 1a 43 65 6c 56 1b e7 1c 3a f3 3e 1e
[1129] 01 83 73 23 dc 9d c5 a3 56 b7 00 b6 0e 0f d5 76 19 fb 28 72 de 49 58 a1
[1153] 89 4c b2 b1 49 fb 68 92 d7 b4 49 12 13 7d e1 53 63 ad d7 e6 1e 0a 14 c3
[1177] 5c ff 4e fb ca 74 26 7c ff e4 fa ae c0 d7 e0 72
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x5617508ed660>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x5617508e6ed0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjnme/kgiFBWO0TN67F3m"
[3] "3/8KYq2n5SDmouKifoafijvFrmx9QeUHEzuQ0p3b+lsHDm2fKFddm8IIGctf36jU"
[4] "Wdmfgs+TJymGC+vzxik+da+LqkkHEkZUy20xRHeJHvltFMFZJ6KbLL5q8dfXHTzU"
[5] "7ygy4wl5zg0zWEYkNCKYe2dJJ6OTTGhLCM+qWKS/d+e4cVBT82wO08bchQ94l2nf"
[6] "f9JZ0YPAwllNON6XAfqRzxkMkUBblxvDumhmctg/Y7MOR1jAkfMfRo90uZblzsyX"
[7] "WU2m9vRw6+fIKttLAtW4ZQO3LYBEnyAj33QfkFd/fjblvKLhxmf8fUxSTfEYXQBO"
[8] "EwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 8e 79 9e fe 48 22 14 15 8e d1 33 7a ec 5d e6 df ff
 [51] 0a 62 ad a7 e5 20 e6 a2 e2 a2 7e 86 9f 8a 3b c5 ae 6c 7d 41 e5 07 13 3b 90
 [76] d2 9d db fa 5b 07 0e 6d 9f 28 57 5d 9b c2 08 19 cb 5f df a8 d4 59 d9 9f 82
[101] cf 93 27 29 86 0b eb f3 c6 29 3e 75 af 8b aa 49 07 12 46 54 cb 6d 31 44 77
[126] 89 1e f9 6d 14 c1 59 27 a2 9b 2c be 6a f1 d7 d7 1d 3c d4 ef 28 32 e3 09 79
[151] ce 0d 33 58 46 24 34 22 98 7b 67 49 27 a3 93 4c 68 4b 08 cf aa 58 a4 bf 77
[176] e7 b8 71 50 53 f3 6c 0e d3 c6 dc 85 0f 78 97 69 df 7f d2 59 d1 83 c0 c2 59
[201] 4d 38 de 97 01 fa 91 cf 19 0c 91 40 5b 97 1b c3 ba 68 66 72 d8 3f 63 b3 0e
[226] 47 58 c0 91 f3 1f 46 8f 74 b9 96 e5 ce cc 97 59 4d a6 f6 f4 70 eb e7 c8 2a
[251] db 4b 02 d5 b8 65 03 b7 2d 80 44 9f 20 23 df 74 1f 90 57 7f 7e 36 e5 bc a2
[276] e1 c6 67 fc 7d 4c 52 4d f1 18 5d 00 4e 13 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x5617508538f0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x561750855300>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
