
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEAk4lZR4wTHFjL1Hv+WI3nmsiT0TlTCdyzHd8p9eCKyDYk35Na"
 [3] "YD0jUfklNjscWHiQ/M57cmi1imzsSJRuu4856Tk+y4NEYafjMVu9qvEImHzclInW"
 [4] "y+7oBy82wHXyi4Zjppcu8NSMZER8ifYrl+BuMXvEk4ONCdU/3gUJYWxvwhE0AIDg"
 [5] "bW+0uB+MRmcmoV9M29j8tlY4yey0T0EB6yWOQrm5TC9hKAPaCz3k6KaP7MIbs6LN"
 [6] "klqKePdqFIjiVFeeghMdcgpvhcVbg9ODfr5mRRUbGmdgOxOMpVe7CH8CgQUGen4U"
 [7] "y2BdqlX7OgYds3BL1IN5N/kLDVR/3Reumuc38wIDAQABAoIBADyY/2iZqgfMmPvP"
 [8] "aeqpbmVu2PfomajFU3SDgtKQxa/yPTbvaQF6WxWCRbx+jufvrW2Iyb92LoqKroop"
 [9] "HUpAS8L1Vkt0wRNzR6ewTLj3g1ZOgrMn4mek2vyIce6fA143dpqoIgmc44UTdCue"
[10] "Rs18ywXcFiOYtsdBJZhlbTLsvQJyOop+4dC0CxIbu+uHM0Oummue40HPyZLVeyPc"
[11] "+q9xdfAFdz5d2ODmNaitLR/gl6mHKMlWr0Pbg6J8hZd5LwWeWCk5IjvFbLEwFxK0"
[12] "338roLP6eW+poey1fXJhmG5D/jmTzUw9eR9Q1CSf1dRZ2LeFdIQvIlq1t1lnzTRU"
[13] "GN/hwZECgYEAzXlEkt+aqdygmJgTv+SL7aEzsY7eDAt494e0YNihQZ03BdLZdemL"
[14] "qJvQtu6DuAEVnc9sYjBDix52AHeCcNKH0TqZJ5FErQoBQcmWDXG7+fJZhXRIN6YO"
[15] "2R4NFBijlJfDfn1gvKweJziiPb8iYqYmf2KRfyD1FxBOOO9TTVChFPcCgYEAt9Dj"
[16] "qdPZTiHdbXVsk8UyMHlYNpYLyA+y2TPj6PxWVQoiyVlyThZwhb7n+rTKCj+RAPpD"
[17] "O9OAxs4OEfJm36/AuHSjaWubqZRaNalP6MiP62eHvVgIDWEUDK4LwwgpXyLZug0H"
[18] "E7dPkgPgamBvUEtoiSc3UkWAXfrwuITzVK35geUCgYBfDDW4a080PCbd75tTLPm9"
[19] "ltA+1oPItpXiixfZpNwTahJF019cuAgumsVVmce8mmPReF3+nazg8dpMJPxmDD1f"
[20] "f+fQ8dX+5Z3nPMT4ux/lY0IeBchSVbKQpOIP5cXlur5oCL9zB3t7UStbvMq/L3Sn"
[21] "gIUlda1qWdSVab/zB9U7yQKBgHm2fHkgSLx+mgL3hMyX/3KvdqS2V9jB5FgEDv5f"
[22] "z76BdqVCb/iazSkSTsLn4PxGOPqfu9MqahO5rwFdM5cb5g19VhLg6PKxw8XSdZIa"
[23] "84kZRX0vhC1vwXnf6PPcPKC9D9Qs+imo8KwrmvZ1Il/VfsOKTwxP7v7LwYc8qW7B"
[24] "v/utAoGAdDxUu5KVUFLH2ZWny9svigvdA1FFoF0nHPZIS/pLkcCS9DtlU764nf82"
[25] "LPUpHDVNmGEZqRjNDG87nv5rcLP9Gy7G5ipR896v0MGgakCSHqAiIXqAZJotTclk"
[26] "35FK2I9+8QUCQ3AAClRY7pUXwePsBWf7xOLaXlM/Jhh48uxY07c="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 93 89 59 47 8c 13 1c 58 cb d4 7b fe
  [25] 58 8d e7 9a c8 93 d1 39 53 09 dc b3 1d df 29 f5 e0 8a c8 36 24 df 93 5a
  [49] 60 3d 23 51 f9 25 36 3b 1c 58 78 90 fc ce 7b 72 68 b5 8a 6c ec 48 94 6e
  [73] bb 8f 39 e9 39 3e cb 83 44 61 a7 e3 31 5b bd aa f1 08 98 7c dc 94 89 d6
  [97] cb ee e8 07 2f 36 c0 75 f2 8b 86 63 a6 97 2e f0 d4 8c 64 44 7c 89 f6 2b
 [121] 97 e0 6e 31 7b c4 93 83 8d 09 d5 3f de 05 09 61 6c 6f c2 11 34 00 80 e0
 [145] 6d 6f b4 b8 1f 8c 46 67 26 a1 5f 4c db d8 fc b6 56 38 c9 ec b4 4f 41 01
 [169] eb 25 8e 42 b9 b9 4c 2f 61 28 03 da 0b 3d e4 e8 a6 8f ec c2 1b b3 a2 cd
 [193] 92 5a 8a 78 f7 6a 14 88 e2 54 57 9e 82 13 1d 72 0a 6f 85 c5 5b 83 d3 83
 [217] 7e be 66 45 15 1b 1a 67 60 3b 13 8c a5 57 bb 08 7f 02 81 05 06 7a 7e 14
 [241] cb 60 5d aa 55 fb 3a 06 1d b3 70 4b d4 83 79 37 f9 0b 0d 54 7f dd 17 ae
 [265] 9a e7 37 f3 02 03 01 00 01 02 82 01 00 3c 98 ff 68 99 aa 07 cc 98 fb cf
 [289] 69 ea a9 6e 65 6e d8 f7 e8 99 a8 c5 53 74 83 82 d2 90 c5 af f2 3d 36 ef
 [313] 69 01 7a 5b 15 82 45 bc 7e 8e e7 ef ad 6d 88 c9 bf 76 2e 8a 8a ae 8a 29
 [337] 1d 4a 40 4b c2 f5 56 4b 74 c1 13 73 47 a7 b0 4c b8 f7 83 56 4e 82 b3 27
 [361] e2 67 a4 da fc 88 71 ee 9f 03 5e 37 76 9a a8 22 09 9c e3 85 13 74 2b 9e
 [385] 46 cd 7c cb 05 dc 16 23 98 b6 c7 41 25 98 65 6d 32 ec bd 02 72 3a 8a 7e
 [409] e1 d0 b4 0b 12 1b bb eb 87 33 43 ae 9a 6b 9e e3 41 cf c9 92 d5 7b 23 dc
 [433] fa af 71 75 f0 05 77 3e 5d d8 e0 e6 35 a8 ad 2d 1f e0 97 a9 87 28 c9 56
 [457] af 43 db 83 a2 7c 85 97 79 2f 05 9e 58 29 39 22 3b c5 6c b1 30 17 12 b4
 [481] df 7f 2b a0 b3 fa 79 6f a9 a1 ec b5 7d 72 61 98 6e 43 fe 39 93 cd 4c 3d
 [505] 79 1f 50 d4 24 9f d5 d4 59 d8 b7 85 74 84 2f 22 5a b5 b7 59 67 cd 34 54
 [529] 18 df e1 c1 91 02 81 81 00 cd 79 44 92 df 9a a9 dc a0 98 98 13 bf e4 8b
 [553] ed a1 33 b1 8e de 0c 0b 78 f7 87 b4 60 d8 a1 41 9d 37 05 d2 d9 75 e9 8b
 [577] a8 9b d0 b6 ee 83 b8 01 15 9d cf 6c 62 30 43 8b 1e 76 00 77 82 70 d2 87
 [601] d1 3a 99 27 91 44 ad 0a 01 41 c9 96 0d 71 bb f9 f2 59 85 74 48 37 a6 0e
 [625] d9 1e 0d 14 18 a3 94 97 c3 7e 7d 60 bc ac 1e 27 38 a2 3d bf 22 62 a6 26
 [649] 7f 62 91 7f 20 f5 17 10 4e 38 ef 53 4d 50 a1 14 f7 02 81 81 00 b7 d0 e3
 [673] a9 d3 d9 4e 21 dd 6d 75 6c 93 c5 32 30 79 58 36 96 0b c8 0f b2 d9 33 e3
 [697] e8 fc 56 55 0a 22 c9 59 72 4e 16 70 85 be e7 fa b4 ca 0a 3f 91 00 fa 43
 [721] 3b d3 80 c6 ce 0e 11 f2 66 df af c0 b8 74 a3 69 6b 9b a9 94 5a 35 a9 4f
 [745] e8 c8 8f eb 67 87 bd 58 08 0d 61 14 0c ae 0b c3 08 29 5f 22 d9 ba 0d 07
 [769] 13 b7 4f 92 03 e0 6a 60 6f 50 4b 68 89 27 37 52 45 80 5d fa f0 b8 84 f3
 [793] 54 ad f9 81 e5 02 81 80 5f 0c 35 b8 6b 4f 34 3c 26 dd ef 9b 53 2c f9 bd
 [817] 96 d0 3e d6 83 c8 b6 95 e2 8b 17 d9 a4 dc 13 6a 12 45 d3 5f 5c b8 08 2e
 [841] 9a c5 55 99 c7 bc 9a 63 d1 78 5d fe 9d ac e0 f1 da 4c 24 fc 66 0c 3d 5f
 [865] 7f e7 d0 f1 d5 fe e5 9d e7 3c c4 f8 bb 1f e5 63 42 1e 05 c8 52 55 b2 90
 [889] a4 e2 0f e5 c5 e5 ba be 68 08 bf 73 07 7b 7b 51 2b 5b bc ca bf 2f 74 a7
 [913] 80 85 25 75 ad 6a 59 d4 95 69 bf f3 07 d5 3b c9 02 81 80 79 b6 7c 79 20
 [937] 48 bc 7e 9a 02 f7 84 cc 97 ff 72 af 76 a4 b6 57 d8 c1 e4 58 04 0e fe 5f
 [961] cf be 81 76 a5 42 6f f8 9a cd 29 12 4e c2 e7 e0 fc 46 38 fa 9f bb d3 2a
 [985] 6a 13 b9 af 01 5d 33 97 1b e6 0d 7d 56 12 e0 e8 f2 b1 c3 c5 d2 75 92 1a
[1009] f3 89 19 45 7d 2f 84 2d 6f c1 79 df e8 f3 dc 3c a0 bd 0f d4 2c fa 29 a8
[1033] f0 ac 2b 9a f6 75 22 5f d5 7e c3 8a 4f 0c 4f ee fe cb c1 87 3c a9 6e c1
[1057] bf fb ad 02 81 80 74 3c 54 bb 92 95 50 52 c7 d9 95 a7 cb db 2f 8a 0b dd
[1081] 03 51 45 a0 5d 27 1c f6 48 4b fa 4b 91 c0 92 f4 3b 65 53 be b8 9d ff 36
[1105] 2c f5 29 1c 35 4d 98 61 19 a9 18 cd 0c 6f 3b 9e fe 6b 70 b3 fd 1b 2e c6
[1129] e6 2a 51 f3 de af d0 c1 a0 6a 40 92 1e a0 22 21 7a 80 64 9a 2d 4d c9 64
[1153] df 91 4a d8 8f 7e f1 05 02 43 70 00 0a 54 58 ee 95 17 c1 e3 ec 05 67 fb
[1177] c4 e2 da 5e 53 3f 26 18 78 f2 ec 58 d3 b7
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x5619c6df1670>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x5619c6deaee0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAk4lZR4wTHFjL1Hv+WI3n"
[3] "msiT0TlTCdyzHd8p9eCKyDYk35NaYD0jUfklNjscWHiQ/M57cmi1imzsSJRuu485"
[4] "6Tk+y4NEYafjMVu9qvEImHzclInWy+7oBy82wHXyi4Zjppcu8NSMZER8ifYrl+Bu"
[5] "MXvEk4ONCdU/3gUJYWxvwhE0AIDgbW+0uB+MRmcmoV9M29j8tlY4yey0T0EB6yWO"
[6] "Qrm5TC9hKAPaCz3k6KaP7MIbs6LNklqKePdqFIjiVFeeghMdcgpvhcVbg9ODfr5m"
[7] "RRUbGmdgOxOMpVe7CH8CgQUGen4Uy2BdqlX7OgYds3BL1IN5N/kLDVR/3Reumuc3"
[8] "8wIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 93 89 59 47 8c 13 1c 58 cb d4 7b fe 58 8d e7 9a c8
 [51] 93 d1 39 53 09 dc b3 1d df 29 f5 e0 8a c8 36 24 df 93 5a 60 3d 23 51 f9 25
 [76] 36 3b 1c 58 78 90 fc ce 7b 72 68 b5 8a 6c ec 48 94 6e bb 8f 39 e9 39 3e cb
[101] 83 44 61 a7 e3 31 5b bd aa f1 08 98 7c dc 94 89 d6 cb ee e8 07 2f 36 c0 75
[126] f2 8b 86 63 a6 97 2e f0 d4 8c 64 44 7c 89 f6 2b 97 e0 6e 31 7b c4 93 83 8d
[151] 09 d5 3f de 05 09 61 6c 6f c2 11 34 00 80 e0 6d 6f b4 b8 1f 8c 46 67 26 a1
[176] 5f 4c db d8 fc b6 56 38 c9 ec b4 4f 41 01 eb 25 8e 42 b9 b9 4c 2f 61 28 03
[201] da 0b 3d e4 e8 a6 8f ec c2 1b b3 a2 cd 92 5a 8a 78 f7 6a 14 88 e2 54 57 9e
[226] 82 13 1d 72 0a 6f 85 c5 5b 83 d3 83 7e be 66 45 15 1b 1a 67 60 3b 13 8c a5
[251] 57 bb 08 7f 02 81 05 06 7a 7e 14 cb 60 5d aa 55 fb 3a 06 1d b3 70 4b d4 83
[276] 79 37 f9 0b 0d 54 7f dd 17 ae 9a e7 37 f3 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x5619c6d57900>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x5619c6d59310>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
