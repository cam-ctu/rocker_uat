
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEApE9BaMxQOmMnqxaMio1jjbDVpRwDtcKQYRVmDJZmGjmEQdWz"
 [3] "dIAfEJiBTerUpkJ7Zqx8Ac4/R/mMaGGkWTnc+9MDZeqLGgZXg6M4xzcx5jKF26hC"
 [4] "TYrwfJes30Ql/VQmaJLjaFF3JYs37oRHPIMc1y/AOO6PrCbEP/tG+t2OzNDXnbJu"
 [5] "t+9WVA9W5k1/+b2FBCCZit0SnysGljcWoAvxIWDb+OO8tc0S2eH+KWGZGC3uibc/"
 [6] "jleRv6ddxRd5WntvzSlTLwa1yp/tz5aq4SrHYHsO/wGH4hMCW+5irp6TqQS6roXp"
 [7] "CzwKVOy8mGI8CmGESIIrAOH1dw0o1KDrVFUzcwIDAQABAoH/PHNl6zbMeLSr+Jvs"
 [8] "sB2mH1JvAUWp/E1DCxW2cnCC4FYevQ02ajMHe5KeSJonaoB1GDJsGemc+4JQft7Y"
 [9] "iEXWtcqpeslR1dzK+ZsVC1C5dIOkeiuh6rGGT0mrfgsqJddP5i1kX76j7pSfppV4"
[10] "371FrJZl2SdNCPYQIHkMJzMQ4XZkQrVizxzk0nNszqtYehqzk3DQzWNVefWyPj66"
[11] "N5H2SD9PHybvd6nEgkqthKnNajvbQUcH82C1RD9arElITtvYV9fcejQLtgwb6CF8"
[12] "5mWCv9AKxwJmlv940AL1b9Ssmzp69uJOo8AeRhy8XT+NV1jtvWYKsNlu7OtsqEUN"
[13] "C5yBAoGBANgtVYGi+K6LaH6JGV9q1dBiGSPAdA3GCcvN0cEjIGcTJkp+OK/oixth"
[14] "coNWaJJA1VZGmOvcZt2WYzTNGJxBmypkTxq8IArFlXp0fAfcezJ4sq7fmttmERyt"
[15] "wsIFO/KQWmz84KY6VIvID2Pj5GES4bExi2POxwAa+DQnbvSk21XzAoGBAMKT6Mrx"
[16] "tdmj5BQ8H14zlL9j2hBUKfJUvdFWUetL0msYZthHuYgTDfdl/MXw2ESTW/3GtDPK"
[17] "on2fJx2JdJgik/1T30CHPbO2ral+FATJ9quPcUSP7eSwe4fLGSpuo8i0aihd9q2e"
[18] "iXK/ZCjYFowr6OV6WZnYRilhSaGSnJ6DeoyBAoGAc3MCj1Ex7kWVcL5XRpYPylIZ"
[19] "ivZlBFYXNTieJL9VtraLZI00SP2wDNdmCK5E+paVWJYrZQs4BG8kXDaMRibjbyhS"
[20] "9rwxgI803UkIVEpzoOjExI+2bCV+TgqeUG/rLAfbwwjqENxl+qDFV1uFxDIJRlBn"
[21] "WM49iNjeZTwKDa1dVfECgYEAqd61So/wwdv6H8xJWlVP1DMZSk4f/McMnHhutiwQ"
[22] "vJymFMWxbOGtvMHWBvz34g6ALjLOWbTbXS6X2IqLNtJhPrV9X3lyXbXrMOC4G2Iy"
[23] "rp5hNYkuGAwXHHssMkY7SNpxH2LBG9wfhQUgLSRRsvgWsFi7ZrtQrYmY3a0AfMau"
[24] "M4ECgYEAmjuQN7B/3aLG1w8ujrMcRSgyo0DaUV+SgUwJtdmQhbFe0Q0c+lirDiuV"
[25] "OSLDmswZsydiaHe6M+0MGkgMPU/znE2YSyk2OUxb/2IU2v9WagkB0weUqk9EocJS"
[26] "u+/eKxF+FjCYBfY95sIFmosu2KSRpv4157D5LGrZPxYOltwlMpQ="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 a4 4f 41 68 cc 50 3a 63 27 ab 16 8c
  [25] 8a 8d 63 8d b0 d5 a5 1c 03 b5 c2 90 61 15 66 0c 96 66 1a 39 84 41 d5 b3
  [49] 74 80 1f 10 98 81 4d ea d4 a6 42 7b 66 ac 7c 01 ce 3f 47 f9 8c 68 61 a4
  [73] 59 39 dc fb d3 03 65 ea 8b 1a 06 57 83 a3 38 c7 37 31 e6 32 85 db a8 42
  [97] 4d 8a f0 7c 97 ac df 44 25 fd 54 26 68 92 e3 68 51 77 25 8b 37 ee 84 47
 [121] 3c 83 1c d7 2f c0 38 ee 8f ac 26 c4 3f fb 46 fa dd 8e cc d0 d7 9d b2 6e
 [145] b7 ef 56 54 0f 56 e6 4d 7f f9 bd 85 04 20 99 8a dd 12 9f 2b 06 96 37 16
 [169] a0 0b f1 21 60 db f8 e3 bc b5 cd 12 d9 e1 fe 29 61 99 18 2d ee 89 b7 3f
 [193] 8e 57 91 bf a7 5d c5 17 79 5a 7b 6f cd 29 53 2f 06 b5 ca 9f ed cf 96 aa
 [217] e1 2a c7 60 7b 0e ff 01 87 e2 13 02 5b ee 62 ae 9e 93 a9 04 ba ae 85 e9
 [241] 0b 3c 0a 54 ec bc 98 62 3c 0a 61 84 48 82 2b 00 e1 f5 77 0d 28 d4 a0 eb
 [265] 54 55 33 73 02 03 01 00 01 02 81 ff 3c 73 65 eb 36 cc 78 b4 ab f8 9b ec
 [289] b0 1d a6 1f 52 6f 01 45 a9 fc 4d 43 0b 15 b6 72 70 82 e0 56 1e bd 0d 36
 [313] 6a 33 07 7b 92 9e 48 9a 27 6a 80 75 18 32 6c 19 e9 9c fb 82 50 7e de d8
 [337] 88 45 d6 b5 ca a9 7a c9 51 d5 dc ca f9 9b 15 0b 50 b9 74 83 a4 7a 2b a1
 [361] ea b1 86 4f 49 ab 7e 0b 2a 25 d7 4f e6 2d 64 5f be a3 ee 94 9f a6 95 78
 [385] df bd 45 ac 96 65 d9 27 4d 08 f6 10 20 79 0c 27 33 10 e1 76 64 42 b5 62
 [409] cf 1c e4 d2 73 6c ce ab 58 7a 1a b3 93 70 d0 cd 63 55 79 f5 b2 3e 3e ba
 [433] 37 91 f6 48 3f 4f 1f 26 ef 77 a9 c4 82 4a ad 84 a9 cd 6a 3b db 41 47 07
 [457] f3 60 b5 44 3f 5a ac 49 48 4e db d8 57 d7 dc 7a 34 0b b6 0c 1b e8 21 7c
 [481] e6 65 82 bf d0 0a c7 02 66 96 ff 78 d0 02 f5 6f d4 ac 9b 3a 7a f6 e2 4e
 [505] a3 c0 1e 46 1c bc 5d 3f 8d 57 58 ed bd 66 0a b0 d9 6e ec eb 6c a8 45 0d
 [529] 0b 9c 81 02 81 81 00 d8 2d 55 81 a2 f8 ae 8b 68 7e 89 19 5f 6a d5 d0 62
 [553] 19 23 c0 74 0d c6 09 cb cd d1 c1 23 20 67 13 26 4a 7e 38 af e8 8b 1b 61
 [577] 72 83 56 68 92 40 d5 56 46 98 eb dc 66 dd 96 63 34 cd 18 9c 41 9b 2a 64
 [601] 4f 1a bc 20 0a c5 95 7a 74 7c 07 dc 7b 32 78 b2 ae df 9a db 66 11 1c ad
 [625] c2 c2 05 3b f2 90 5a 6c fc e0 a6 3a 54 8b c8 0f 63 e3 e4 61 12 e1 b1 31
 [649] 8b 63 ce c7 00 1a f8 34 27 6e f4 a4 db 55 f3 02 81 81 00 c2 93 e8 ca f1
 [673] b5 d9 a3 e4 14 3c 1f 5e 33 94 bf 63 da 10 54 29 f2 54 bd d1 56 51 eb 4b
 [697] d2 6b 18 66 d8 47 b9 88 13 0d f7 65 fc c5 f0 d8 44 93 5b fd c6 b4 33 ca
 [721] a2 7d 9f 27 1d 89 74 98 22 93 fd 53 df 40 87 3d b3 b6 ad a9 7e 14 04 c9
 [745] f6 ab 8f 71 44 8f ed e4 b0 7b 87 cb 19 2a 6e a3 c8 b4 6a 28 5d f6 ad 9e
 [769] 89 72 bf 64 28 d8 16 8c 2b e8 e5 7a 59 99 d8 46 29 61 49 a1 92 9c 9e 83
 [793] 7a 8c 81 02 81 80 73 73 02 8f 51 31 ee 45 95 70 be 57 46 96 0f ca 52 19
 [817] 8a f6 65 04 56 17 35 38 9e 24 bf 55 b6 b6 8b 64 8d 34 48 fd b0 0c d7 66
 [841] 08 ae 44 fa 96 95 58 96 2b 65 0b 38 04 6f 24 5c 36 8c 46 26 e3 6f 28 52
 [865] f6 bc 31 80 8f 34 dd 49 08 54 4a 73 a0 e8 c4 c4 8f b6 6c 25 7e 4e 0a 9e
 [889] 50 6f eb 2c 07 db c3 08 ea 10 dc 65 fa a0 c5 57 5b 85 c4 32 09 46 50 67
 [913] 58 ce 3d 88 d8 de 65 3c 0a 0d ad 5d 55 f1 02 81 81 00 a9 de b5 4a 8f f0
 [937] c1 db fa 1f cc 49 5a 55 4f d4 33 19 4a 4e 1f fc c7 0c 9c 78 6e b6 2c 10
 [961] bc 9c a6 14 c5 b1 6c e1 ad bc c1 d6 06 fc f7 e2 0e 80 2e 32 ce 59 b4 db
 [985] 5d 2e 97 d8 8a 8b 36 d2 61 3e b5 7d 5f 79 72 5d b5 eb 30 e0 b8 1b 62 32
[1009] ae 9e 61 35 89 2e 18 0c 17 1c 7b 2c 32 46 3b 48 da 71 1f 62 c1 1b dc 1f
[1033] 85 05 20 2d 24 51 b2 f8 16 b0 58 bb 66 bb 50 ad 89 98 dd ad 00 7c c6 ae
[1057] 33 81 02 81 81 00 9a 3b 90 37 b0 7f dd a2 c6 d7 0f 2e 8e b3 1c 45 28 32
[1081] a3 40 da 51 5f 92 81 4c 09 b5 d9 90 85 b1 5e d1 0d 1c fa 58 ab 0e 2b 95
[1105] 39 22 c3 9a cc 19 b3 27 62 68 77 ba 33 ed 0c 1a 48 0c 3d 4f f3 9c 4d 98
[1129] 4b 29 36 39 4c 5b ff 62 14 da ff 56 6a 09 01 d3 07 94 aa 4f 44 a1 c2 52
[1153] bb ef de 2b 11 7e 16 30 98 05 f6 3d e6 c2 05 9a 8b 2e d8 a4 91 a6 fe 35
[1177] e7 b0 f9 2c 6a d9 3f 16 0e 96 dc 25 32 94
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x564f57f26670>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x564f57f1fee0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApE9BaMxQOmMnqxaMio1j"
[3] "jbDVpRwDtcKQYRVmDJZmGjmEQdWzdIAfEJiBTerUpkJ7Zqx8Ac4/R/mMaGGkWTnc"
[4] "+9MDZeqLGgZXg6M4xzcx5jKF26hCTYrwfJes30Ql/VQmaJLjaFF3JYs37oRHPIMc"
[5] "1y/AOO6PrCbEP/tG+t2OzNDXnbJut+9WVA9W5k1/+b2FBCCZit0SnysGljcWoAvx"
[6] "IWDb+OO8tc0S2eH+KWGZGC3uibc/jleRv6ddxRd5WntvzSlTLwa1yp/tz5aq4SrH"
[7] "YHsO/wGH4hMCW+5irp6TqQS6roXpCzwKVOy8mGI8CmGESIIrAOH1dw0o1KDrVFUz"
[8] "cwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 a4 4f 41 68 cc 50 3a 63 27 ab 16 8c 8a 8d 63 8d b0
 [51] d5 a5 1c 03 b5 c2 90 61 15 66 0c 96 66 1a 39 84 41 d5 b3 74 80 1f 10 98 81
 [76] 4d ea d4 a6 42 7b 66 ac 7c 01 ce 3f 47 f9 8c 68 61 a4 59 39 dc fb d3 03 65
[101] ea 8b 1a 06 57 83 a3 38 c7 37 31 e6 32 85 db a8 42 4d 8a f0 7c 97 ac df 44
[126] 25 fd 54 26 68 92 e3 68 51 77 25 8b 37 ee 84 47 3c 83 1c d7 2f c0 38 ee 8f
[151] ac 26 c4 3f fb 46 fa dd 8e cc d0 d7 9d b2 6e b7 ef 56 54 0f 56 e6 4d 7f f9
[176] bd 85 04 20 99 8a dd 12 9f 2b 06 96 37 16 a0 0b f1 21 60 db f8 e3 bc b5 cd
[201] 12 d9 e1 fe 29 61 99 18 2d ee 89 b7 3f 8e 57 91 bf a7 5d c5 17 79 5a 7b 6f
[226] cd 29 53 2f 06 b5 ca 9f ed cf 96 aa e1 2a c7 60 7b 0e ff 01 87 e2 13 02 5b
[251] ee 62 ae 9e 93 a9 04 ba ae 85 e9 0b 3c 0a 54 ec bc 98 62 3c 0a 61 84 48 82
[276] 2b 00 e1 f5 77 0d 28 d4 a0 eb 54 55 33 73 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x564f57e8c900>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x564f57e8e310>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
