
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEA5RDrCyqWbGoTS0L8YPtdo4DeTkaEGF7SwSAmh5d6Rg+doqih"
 [3] "dMsdzT3/AVc3yqfb7Up+hzrEwVfrfA4bcymH0ADSFbm3lRWP+0Be3vGd8tyDgcAR"
 [4] "7CWkIPpI/u7HuRWjkvGWo4JWvT7B4LsozOlVr40nK76gopt95x3Eu95dfDCm/Mda"
 [5] "1/flkjIcvujeL0qARusgNnG4emEWyVQGGTULHmOwTIR191OzAwzKDYky3gVsfcC3"
 [6] "wezg144J2QocaWxUnlYzP0mlwaK9ByxZMjweuKH8Ow4q/6P2b74VqOGekEUVZnjp"
 [7] "W9GhkyBLwv+TSC8sGCN+PpZAJIIDn3MH8K3ZXQIDAQABAoIBAHD5Y5spwW+t718e"
 [8] "pf+k6b1iqQGdCLhGSBaE50vXezBDsmDPX3YNWWDo8zRzkioqmK7TH01NwE2FMbiI"
 [9] "8qPdN0TwqqyZYIAwVsc5q7C0JMzrUhazpoM721OCbW8CUFGp6PdnnH5/IY2Lfq56"
[10] "UDij2iVPbiLGjU41dyZ+CZIIrT26iDgtNurRHp2PFijlQoax8/SbuAhfMqRZW7VV"
[11] "kLQ47kfknd3oGUF7u5ZXvc77kDnTW/cpYkeQifrk/NfQLx7WAKLncpZEr28yAxpI"
[12] "jDhs8FQEvossVYH1dwKOWOq4uccqSkRQ2RT10kIhpkIz1AjKG9ovX68yhBJ7u+1Y"
[13] "WZNQBFcCgYEA9KoKOYK0fkl28bUgV8oqrDRvr8QMpJCTm6WcvkUQJG+dgmknFY2h"
[14] "Smiarxt8lV9i/MW7yD5PZ5+cGqNW2PR6V5wcYjVAIzN4NxoY0xTMW0FhrJWJ5/Q+"
[15] "e+DKM79NgrFE6iI92TQ05pP0I6/NxjAWKYfn62YTihZGGgLXVcWXfeMCgYEA763e"
[16] "cBI/FF7LjqR9IidTyZz1DGwUo+zwZYwuUhE0Jb2Y+gre8gxpwpyQ05ErsDoNkgNW"
[17] "YRgHYsDjoPGyhwcVXzc4FwxEu0TLQsXCYbG6klNODlx1OluTmSNXoiWBZb9X2ZKv"
[18] "5gBICMb6w2IJB7fm6u9oYAmH7KlJ9rH8jGtg778CgYB+9KkflJJCIa7l133z8ATa"
[19] "nM8DnrCMyDTABFzkYoPw1DYgUJ4mUfrK2KLDkHjCLd/4mEZLrwGXHLxtGirbo2jE"
[20] "g047K7SfT3rm5NTS2yz7gV7EpkgMI7I0p71kwrTex0uiTqhXR/7XUxjRV81oNNWb"
[21] "MVmHzcz/z3UK1ESWzlRAzwKBgHy6NYyK4kq+fh3wGbKBVsgPpzJcuG0KK5wc1Cof"
[22] "C80sGoTczWKW9R6yjWecH2ko/NDkbbo/X/CTQqIJxYchN40CVm0gFFCEH2bTNTHT"
[23] "5KyrL26nzNWevHOwAbW+4NTLO3NdM650rQfsTKkKxno+yKuwBNgdfZ+6BWSdATkt"
[24] "1BdPAoGAbDVvfCCQyQvFVV1QSnUbBgqOnE+Pm1byKsyN8OnSUzqw3w/NjgUuyVUB"
[25] "kM9xsJE/m53Hj+AcEm2CT7EuOdmuo3t9u0gzvM6kFFdJfku9jI0UfvnWhGZLnksE"
[26] "TchyVDgaMrF60nRNt6k/8SeIJuZPxJ7UZPLw7LGoLex1DlOIuZs="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 e5 10 eb 0b 2a 96 6c 6a 13 4b 42 fc
  [25] 60 fb 5d a3 80 de 4e 46 84 18 5e d2 c1 20 26 87 97 7a 46 0f 9d a2 a8 a1
  [49] 74 cb 1d cd 3d ff 01 57 37 ca a7 db ed 4a 7e 87 3a c4 c1 57 eb 7c 0e 1b
  [73] 73 29 87 d0 00 d2 15 b9 b7 95 15 8f fb 40 5e de f1 9d f2 dc 83 81 c0 11
  [97] ec 25 a4 20 fa 48 fe ee c7 b9 15 a3 92 f1 96 a3 82 56 bd 3e c1 e0 bb 28
 [121] cc e9 55 af 8d 27 2b be a0 a2 9b 7d e7 1d c4 bb de 5d 7c 30 a6 fc c7 5a
 [145] d7 f7 e5 92 32 1c be e8 de 2f 4a 80 46 eb 20 36 71 b8 7a 61 16 c9 54 06
 [169] 19 35 0b 1e 63 b0 4c 84 75 f7 53 b3 03 0c ca 0d 89 32 de 05 6c 7d c0 b7
 [193] c1 ec e0 d7 8e 09 d9 0a 1c 69 6c 54 9e 56 33 3f 49 a5 c1 a2 bd 07 2c 59
 [217] 32 3c 1e b8 a1 fc 3b 0e 2a ff a3 f6 6f be 15 a8 e1 9e 90 45 15 66 78 e9
 [241] 5b d1 a1 93 20 4b c2 ff 93 48 2f 2c 18 23 7e 3e 96 40 24 82 03 9f 73 07
 [265] f0 ad d9 5d 02 03 01 00 01 02 82 01 00 70 f9 63 9b 29 c1 6f ad ef 5f 1e
 [289] a5 ff a4 e9 bd 62 a9 01 9d 08 b8 46 48 16 84 e7 4b d7 7b 30 43 b2 60 cf
 [313] 5f 76 0d 59 60 e8 f3 34 73 92 2a 2a 98 ae d3 1f 4d 4d c0 4d 85 31 b8 88
 [337] f2 a3 dd 37 44 f0 aa ac 99 60 80 30 56 c7 39 ab b0 b4 24 cc eb 52 16 b3
 [361] a6 83 3b db 53 82 6d 6f 02 50 51 a9 e8 f7 67 9c 7e 7f 21 8d 8b 7e ae 7a
 [385] 50 38 a3 da 25 4f 6e 22 c6 8d 4e 35 77 26 7e 09 92 08 ad 3d ba 88 38 2d
 [409] 36 ea d1 1e 9d 8f 16 28 e5 42 86 b1 f3 f4 9b b8 08 5f 32 a4 59 5b b5 55
 [433] 90 b4 38 ee 47 e4 9d dd e8 19 41 7b bb 96 57 bd ce fb 90 39 d3 5b f7 29
 [457] 62 47 90 89 fa e4 fc d7 d0 2f 1e d6 00 a2 e7 72 96 44 af 6f 32 03 1a 48
 [481] 8c 38 6c f0 54 04 be 8b 2c 55 81 f5 77 02 8e 58 ea b8 b9 c7 2a 4a 44 50
 [505] d9 14 f5 d2 42 21 a6 42 33 d4 08 ca 1b da 2f 5f af 32 84 12 7b bb ed 58
 [529] 59 93 50 04 57 02 81 81 00 f4 aa 0a 39 82 b4 7e 49 76 f1 b5 20 57 ca 2a
 [553] ac 34 6f af c4 0c a4 90 93 9b a5 9c be 45 10 24 6f 9d 82 69 27 15 8d a1
 [577] 4a 68 9a af 1b 7c 95 5f 62 fc c5 bb c8 3e 4f 67 9f 9c 1a a3 56 d8 f4 7a
 [601] 57 9c 1c 62 35 40 23 33 78 37 1a 18 d3 14 cc 5b 41 61 ac 95 89 e7 f4 3e
 [625] 7b e0 ca 33 bf 4d 82 b1 44 ea 22 3d d9 34 34 e6 93 f4 23 af cd c6 30 16
 [649] 29 87 e7 eb 66 13 8a 16 46 1a 02 d7 55 c5 97 7d e3 02 81 81 00 ef ad de
 [673] 70 12 3f 14 5e cb 8e a4 7d 22 27 53 c9 9c f5 0c 6c 14 a3 ec f0 65 8c 2e
 [697] 52 11 34 25 bd 98 fa 0a de f2 0c 69 c2 9c 90 d3 91 2b b0 3a 0d 92 03 56
 [721] 61 18 07 62 c0 e3 a0 f1 b2 87 07 15 5f 37 38 17 0c 44 bb 44 cb 42 c5 c2
 [745] 61 b1 ba 92 53 4e 0e 5c 75 3a 5b 93 99 23 57 a2 25 81 65 bf 57 d9 92 af
 [769] e6 00 48 08 c6 fa c3 62 09 07 b7 e6 ea ef 68 60 09 87 ec a9 49 f6 b1 fc
 [793] 8c 6b 60 ef bf 02 81 80 7e f4 a9 1f 94 92 42 21 ae e5 d7 7d f3 f0 04 da
 [817] 9c cf 03 9e b0 8c c8 34 c0 04 5c e4 62 83 f0 d4 36 20 50 9e 26 51 fa ca
 [841] d8 a2 c3 90 78 c2 2d df f8 98 46 4b af 01 97 1c bc 6d 1a 2a db a3 68 c4
 [865] 83 4e 3b 2b b4 9f 4f 7a e6 e4 d4 d2 db 2c fb 81 5e c4 a6 48 0c 23 b2 34
 [889] a7 bd 64 c2 b4 de c7 4b a2 4e a8 57 47 fe d7 53 18 d1 57 cd 68 34 d5 9b
 [913] 31 59 87 cd cc ff cf 75 0a d4 44 96 ce 54 40 cf 02 81 80 7c ba 35 8c 8a
 [937] e2 4a be 7e 1d f0 19 b2 81 56 c8 0f a7 32 5c b8 6d 0a 2b 9c 1c d4 2a 1f
 [961] 0b cd 2c 1a 84 dc cd 62 96 f5 1e b2 8d 67 9c 1f 69 28 fc d0 e4 6d ba 3f
 [985] 5f f0 93 42 a2 09 c5 87 21 37 8d 02 56 6d 20 14 50 84 1f 66 d3 35 31 d3
[1009] e4 ac ab 2f 6e a7 cc d5 9e bc 73 b0 01 b5 be e0 d4 cb 3b 73 5d 33 ae 74
[1033] ad 07 ec 4c a9 0a c6 7a 3e c8 ab b0 04 d8 1d 7d 9f ba 05 64 9d 01 39 2d
[1057] d4 17 4f 02 81 80 6c 35 6f 7c 20 90 c9 0b c5 55 5d 50 4a 75 1b 06 0a 8e
[1081] 9c 4f 8f 9b 56 f2 2a cc 8d f0 e9 d2 53 3a b0 df 0f cd 8e 05 2e c9 55 01
[1105] 90 cf 71 b0 91 3f 9b 9d c7 8f e0 1c 12 6d 82 4f b1 2e 39 d9 ae a3 7b 7d
[1129] bb 48 33 bc ce a4 14 57 49 7e 4b bd 8c 8d 14 7e f9 d6 84 66 4b 9e 4b 04
[1153] 4d c8 72 54 38 1a 32 b1 7a d2 74 4d b7 a9 3f f1 27 88 26 e6 4f c4 9e d4
[1177] 64 f2 f0 ec b1 a8 2d ec 75 0e 53 88 b9 9b
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55fccf0a66e0>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55fccf09ff50>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5RDrCyqWbGoTS0L8YPtd"
[3] "o4DeTkaEGF7SwSAmh5d6Rg+doqihdMsdzT3/AVc3yqfb7Up+hzrEwVfrfA4bcymH"
[4] "0ADSFbm3lRWP+0Be3vGd8tyDgcAR7CWkIPpI/u7HuRWjkvGWo4JWvT7B4LsozOlV"
[5] "r40nK76gopt95x3Eu95dfDCm/Mda1/flkjIcvujeL0qARusgNnG4emEWyVQGGTUL"
[6] "HmOwTIR191OzAwzKDYky3gVsfcC3wezg144J2QocaWxUnlYzP0mlwaK9ByxZMjwe"
[7] "uKH8Ow4q/6P2b74VqOGekEUVZnjpW9GhkyBLwv+TSC8sGCN+PpZAJIIDn3MH8K3Z"
[8] "XQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 e5 10 eb 0b 2a 96 6c 6a 13 4b 42 fc 60 fb 5d a3 80
 [51] de 4e 46 84 18 5e d2 c1 20 26 87 97 7a 46 0f 9d a2 a8 a1 74 cb 1d cd 3d ff
 [76] 01 57 37 ca a7 db ed 4a 7e 87 3a c4 c1 57 eb 7c 0e 1b 73 29 87 d0 00 d2 15
[101] b9 b7 95 15 8f fb 40 5e de f1 9d f2 dc 83 81 c0 11 ec 25 a4 20 fa 48 fe ee
[126] c7 b9 15 a3 92 f1 96 a3 82 56 bd 3e c1 e0 bb 28 cc e9 55 af 8d 27 2b be a0
[151] a2 9b 7d e7 1d c4 bb de 5d 7c 30 a6 fc c7 5a d7 f7 e5 92 32 1c be e8 de 2f
[176] 4a 80 46 eb 20 36 71 b8 7a 61 16 c9 54 06 19 35 0b 1e 63 b0 4c 84 75 f7 53
[201] b3 03 0c ca 0d 89 32 de 05 6c 7d c0 b7 c1 ec e0 d7 8e 09 d9 0a 1c 69 6c 54
[226] 9e 56 33 3f 49 a5 c1 a2 bd 07 2c 59 32 3c 1e b8 a1 fc 3b 0e 2a ff a3 f6 6f
[251] be 15 a8 e1 9e 90 45 15 66 78 e9 5b d1 a1 93 20 4b c2 ff 93 48 2f 2c 18 23
[276] 7e 3e 96 40 24 82 03 9f 73 07 f0 ad d9 5d 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55fccf00c970>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55fccf00e380>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
