
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("R.cache")
R.cache v0.16.0 (2022-07-21 16:20:02 UTC) successfully loaded. See ?R.cache for help.
> 
> for (kk in 1:5) {
+   cat(sprintf("Iteration #%d:\n", kk))
+   res <- evalWithMemoization({
+     cat("Evaluating expression...")
+     a <- 1
+     b <- 2
+     c <- 4
+     cat("done\n")
+     b
+   })
+   print(res)
+ 
+   # Sanity checks
+   stopifnot(a == 1 && b == 2 && c == 4)
+ 
+   # Clean up
+   rm(list=c("a", "b", "c"))
+ } # for (kk ...)
Iteration #1:
Evaluating expression...done
[1] 2
Iteration #2:
[1] 2
Iteration #3:
[1] 2
Iteration #4:
[1] 2
Iteration #5:
[1] 2
> 
> 
> ############################################################
> # WARNING
> ############################################################
> # If the expression being evaluated depends on
> # "input" objects, then these must be be specified
> # explicitly as "key" objects.
> for (ii in 1:2) {
+   for (kk in 1:3) {
+     cat(sprintf("Iteration #%d:\n", kk))
+     res <- evalWithMemoization({
+       cat("Evaluating expression...")
+       a <- kk
+       cat("done\n")
+       a
+     }, key=list(kk=kk))
+     print(res)
+ 
+     # Sanity checks
+     stopifnot(a == kk)
+ 
+     # Clean up
+     rm(list=c("a"))
+   } # for (kk ...)
+ } # for (ii ...)
Iteration #1:
Evaluating expression...done
[1] 1
Iteration #2:
Evaluating expression...done
[1] 2
Iteration #3:
Evaluating expression...done
[1] 3
Iteration #1:
[1] 1
Iteration #2:
[1] 2
Iteration #3:
[1] 3
> 
