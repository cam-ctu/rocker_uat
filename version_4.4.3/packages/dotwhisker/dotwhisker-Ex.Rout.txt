
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dotwhisker"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('dotwhisker')
Loading required package: ggplot2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_brackets")
> ### * add_brackets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_brackets
> ### Title: Add Labelled Brackets to Group Predictors in a Dot-and-Whisker
> ###   Plot
> ### Aliases: add_brackets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> m1 <- lm(mpg ~ wt + cyl + disp, data = mtcars)
> two_brackets <- list(c("Engine", "Cylinder", "Displacement"),
+                      c("Not Engine", "Intercept", "Weight"))
> 
> {dwplot(m1, show_intercept = TRUE) %>%
+        relabel_predictors("(Intercept)" = "Intercept",
+                           wt = "Weight",
+                           cyl = "Cylinder",
+                           disp = "Displacement") +
+        theme_bw() + xlab("Coefficient") + ylab("") +
+        theme(legend.position="none") +
+        geom_vline(xintercept = 0, colour = "grey50", linetype = 2)} %>%
+    add_brackets(two_brackets)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("by_2sd")
> ### * by_2sd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: by_2sd
> ### Title: Rescale regression results by multiplying by 2 standard
> ###   deviations
> ### Aliases: by_2sd
> 
> ### ** Examples
> 
> library(broom)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> data(mtcars)
> m1 <- lm(mpg ~ wt + cyl + disp, data = mtcars)
> m1_df <- tidy(m1) %>% by_2sd(mtcars) # create data frame of rescaled regression results
> 
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:broom’

> nameEx("dwplot")
> ### * dwplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dwplot
> ### Title: Dot-and-Whisker Plots of Regression Results
> ### Aliases: dwplot dw_plot
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> # Plot regression coefficients from a single model object
> data(mtcars)
> m1 <- lm(mpg ~ wt + cyl + disp, data = mtcars)
> dwplot(m1, vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
+     xlab("Coefficient")
> # using 99% confidence interval
> dwplot(m1, ci = .99)
> # Plot regression coefficients from multiple models
> m2 <- update(m1, . ~ . - disp)
> dwplot(list(full = m1, nodisp = m2))
> # Change the appearance of dots and whiskers
> dwplot(m1, dot_args = list(size = 3, pch = 21, fill = "white"))
> # Plot regression coefficients from multiple models on the fly
> mtcars %>%
+     split(.$am) %>%
+     purrr::map(~ lm(mpg ~ wt + cyl + disp, data = .x)) %>%
+     dwplot() %>%
+     relabel_predictors(c(wt = "Weight", cyl = "Cylinders", disp = "Displacement")) +
+     theme_bw() + xlab("Coefficient") + ylab("") +
+     geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
+     ggtitle("Predicting Gas Mileage, OLS Estimates") +
+     theme(plot.title = element_text(face = "bold"),
+           legend.position = c(.995, .99),
+           legend.justification = c(1, 1),
+           legend.background = element_rect(colour="grey80"),
+           legend.title.align = .5) +
+     scale_colour_grey(start = .4, end = .8,
+                       name = "Transmission",
+                       breaks = c("Model 0", "Model 1"),
+                       labels = c("Automatic", "Manual"))
Warning: The `legend.title.align` argument of `theme()` is deprecated as of ggplot2
3.5.0.
ℹ Please use theme(legend.title = element_text(hjust)) instead.
Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2
3.5.0.
ℹ Please use the `legend.position.inside` argument of `theme()` instead.
> 
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("relabel_predictors")
> ### * relabel_predictors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: relabel_predictors
> ### Title: Relabel the Predictors in a Tidy Data Frame of Regression
> ###   Results
> ### Aliases: relabel_predictors
> 
> ### ** Examples
> 
> library(broom)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> data(mtcars)
> m1 <- lm(mpg ~ wt + cyl + disp, data = mtcars)
> m1_df <- broom::tidy(m1) %>%
+          relabel_predictors("(Intercept)" = "Intercept",
+                               wt = "Weight",
+                               disp = "Displacement",
+                               cyl = "Cylinder")
> dwplot(m1_df)
> 
> dwplot(m1, show_intercept = TRUE) %>%
+     relabel_predictors("(Intercept)" = "Intercept",
+                               wt = "Weight",
+                               disp = "Displacement",
+                               cyl = "Cylinder")
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:broom’

> nameEx("secret_weapon")
> ### * secret_weapon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: secret_weapon
> ### Title: Generate a 'Secret Weapon' Plot of Regression Results from
> ###   Multiple Models
> ### Aliases: secret_weapon
> 
> ### ** Examples
> 
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(broom)
> 
> # Estimate models across many samples, put results in a tidy data frame
> by_clarity <- diamonds %>% group_by(clarity) %>%
+  do(tidy(lm(price ~ carat + cut + color, data = .))) %>%
+  ungroup %>% rename(model = clarity)
> 
> # Generate a 'secret weapon' plot of the results of diamond size
> secret_weapon(by_clarity, "carat")
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:broom’, ‘package:dplyr’

> nameEx("small_multiple")
> ### * small_multiple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: small_multiple
> ### Title: Generate a 'Small Multiple' Plot of Regression Results
> ### Aliases: small_multiple
> 
> ### ** Examples
> 
> 
> m1 <- lm(mpg ~ wt + cyl + disp + gear, data = mtcars)
> m2 <- update(m1, . ~ . + hp)
> 
> 
> # Generate a 'small multiple' plot
> small_multiple(list(m1, m2))
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.87 0.472 3.981 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
