
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("R.utils")
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.27.0 (2024-11-01 18:00:02 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.13.0 (2025-02-24 21:20:02 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, use, warnings

> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Create a file atomically
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> n <- 10
> createFileAtomically("foobar.txt", FUN=function(pathname) {
+   cat(file=pathname, "This file was created atomically.\n")
+   cat(file=pathname, "Timestamp: ", as.character(Sys.time()), "\n", sep="")
+   for (kk in 1:n) {
+     cat(file=pathname, kk, "\n", append=TRUE)
+     # Emulate a slow process
+     if (interactive()) Sys.sleep(0.1)
+   }
+   cat(file=pathname, "END OF FILE\n", append=TRUE)
+ }, overwrite=TRUE)
> 
> # Skip, if already exists
> createFileAtomically("foobar.txt", FUN=function(pathname) {
+   cat("This will not be called\n")
+ }, skip=TRUE, verbose=TRUE)
Writes a file atomically...
 Pathname: foobar.txt
 Argument 'skip': TRUE
 Argument 'overwrite': FALSE
 Returning already existing file (skip=TRUE).
Writes a file atomically...done
[1] "foobar.txt"
> 
> bfr <- readLines("foobar.txt")
> cat(bfr, sep="\n")
Timestamp: 2025-05-06 10:09:27.938239
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
END OF FILE
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Overwrite the file atomically (emulate write failure)
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> tryCatch({
+   createFileAtomically("foobar.txt", FUN=function(pathname) {
+     cat(file=pathname, "Trying to create a new file.\n")
+     cat(file=pathname, "Writing a bit, but then an error...\n", append=TRUE)
+     # Emulate write error
+     stop("An error occured while writing to the new file.")
+     cat(file=pathname, "END OF FILE\n", append=TRUE)
+   }, overwrite=TRUE)
+ }, error = function(ex) {
+   print(ex$message)
+ })
> 
> # The original file was never overwritten
> bfr2 <- readLines("foobar.txt")
> cat(bfr2, sep="\n")
Timestamp: 2025-05-06 10:09:27.938239
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
END OF FILE
> stopifnot(identical(bfr2, bfr))
> 
> # The partially temporary file remains
> stopifnot(isFile("foobar.txt.tmp"))
> bfr3 <- readLines("foobar.txt.tmp")
> cat(bfr3, sep="\n")
Trying to create a new file.
Writing a bit, but then an error...
> 
> file.remove("foobar.txt.tmp")
[1] TRUE
> file.remove("foobar.txt")
[1] TRUE
> 
