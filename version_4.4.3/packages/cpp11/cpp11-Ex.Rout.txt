
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "cpp11"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('cpp11')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cpp_register")
> ### * cpp_register
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cpp_register
> ### Title: Generates wrappers for registered C++ functions
> ### Aliases: cpp_register
> 
> ### ** Examples
> 
> # create a minimal package
> dir <- tempfile()
> dir.create(dir)
> 
> writeLines("Package: testPkg", file.path(dir, "DESCRIPTION"))
> writeLines("useDynLib(testPkg, .registration = TRUE)", file.path(dir, "NAMESPACE"))
> 
> # create a C++ file with a decorated function
> dir.create(file.path(dir, "src"))
> writeLines("[[cpp11::register]] int one() { return 1; }", file.path(dir, "src", "one.cpp"))
> 
> # register the functions in the package
> cpp_register(dir)
> 
> # Files generated by registration
> file.exists(file.path(dir, "R", "cpp11.R"))
[1] TRUE
> file.exists(file.path(dir, "src", "cpp11.cpp"))
[1] TRUE
> 
> # cleanup
> unlink(dir, recursive = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("cpp_source")
> ### * cpp_source
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cpp_source
> ### Title: Compile C++ code
> ### Aliases: cpp_source cpp_function cpp_eval
> 
> ### ** Examples
> 
> 
> cpp_source(
+   code = '#include "cpp11/integers.hpp"
+ 
+   [[cpp11::register]]
+   int num_odd(cpp11::integers x) {
+     int total = 0;
+     for (int val : x) {
+       if ((val % 2) == 1) {
+         ++total;
+       }
+     }
+     return total;
+   }
+   ')
> 
> num_odd(as.integer(c(1:10, 15, 23)))
[1] 7
> 
> if (interactive() && require("progress")) {
+ 
+ cpp_source(
+   code = '
+ #include <cpp11/R.hpp>
+ #include <RProgress.h>
+ 
+ [[cpp11::linking_to("progress")]]
+ 
+ [[cpp11::register]] void
+ show_progress() {
+   RProgress::RProgress pb("Processing [:bar] ETA: :eta");
+ 
+   pb.tick(0);
+   for (int i = 0; i < 100; i++) {
+     usleep(2.0 / 100 * 1000000);
+     pb.tick();
+   }
+ }
+ ')
+ 
+ show_progress()
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("cpp_vendor")
> ### * cpp_vendor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cpp_vendor
> ### Title: Vendor the cpp11 dependency
> ### Aliases: cpp_vendor
> 
> ### ** Examples
> 
> # create a new directory
> dir <- tempfile()
> dir.create(dir)
> 
> # vendor the cpp11 headers into the directory
> cpp_vendor(dir)
> 
> list.files(file.path(dir, "inst", "include", "cpp11"))
 [1] "altrep.hpp"           "as.hpp"               "attribute_proxy.hpp" 
 [4] "data_frame.hpp"       "declarations.hpp"     "doubles.hpp"         
 [7] "environment.hpp"      "external_pointer.hpp" "function.hpp"        
[10] "integers.hpp"         "list_of.hpp"          "list.hpp"            
[13] "logicals.hpp"         "matrix.hpp"           "named_arg.hpp"       
[16] "protect.hpp"          "r_bool.hpp"           "r_string.hpp"        
[19] "r_vector.hpp"         "R.hpp"                "raws.hpp"            
[22] "sexp.hpp"             "strings.hpp"         
> 
> # cleanup
> unlink(dir, recursive = TRUE)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.369 0.032 1.33 0.838 0.415 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
