
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "farver"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('farver')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as_white_ref")
> ### * as_white_ref
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_white_ref
> ### Title: Convert value to a tristimulus values normalised to Y=100
> ### Aliases: as_white_ref
> ### Keywords: internal
> 
> ### ** Examples
> 
> # Using names
> as_white_ref('D65')
        X         Y         Z 
 95.04285 100.00000 108.89004 
> 
> # Using chromaticity values
> as_white_ref(c(0.3, 0.4))
  X   Y   Z 
 75 100  75 
> 
> 
> 
> cleanEx()
> nameEx("compare_colour")
> ### * compare_colour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_colour
> ### Title: Calculate the distance between colours
> ### Aliases: compare_colour
> 
> ### ** Examples
> 
> r <- decode_colour(rainbow(10))
> h <- decode_colour(heat.colors(15))
> 
> # Compare two sets of colours
> compare_colour(r, h, 'rgb', method = 'cie2000')
          [,1]       [,2]      [,3]     [,4]     [,5]     [,6]      [,7]
 [1,]  0.00000  0.9533762  3.000824  6.57770 11.40975 17.52601 24.723573
 [2,] 29.50083 28.5558177 26.521813 22.95539 18.11996 11.98805  4.775709
 [3,] 72.33606 71.3575538 69.242820 65.50814 60.39647 53.85364 46.123120
 [4,] 85.84698 84.7949077 82.516916 78.48359 72.95656 65.91025 57.700879
 [5,] 85.92110 84.8858340 82.646223 78.68939 73.29065 66.45879 58.585358
 [6,] 70.95853 70.2695051 68.802658 66.28933 63.01735 59.12704 54.973704
 [7,] 50.38091 50.6204430 51.184821 52.32043 54.12124 56.78372 60.394557
 [8,] 52.15698 52.7007613 53.923828 56.23309 59.66383 64.36086 69.987595
 [9,] 44.47475 44.9165073 45.932292 47.90510 50.91157 55.17495 60.707919
[10,] 30.89123 31.3674680 32.487084 34.71591 38.15422 42.98987 49.095286
          [,8]     [,9]    [,10]    [,11]      [,12]      [,13]    [,14]
 [1,] 32.67872 40.97546 49.52951 57.25740  64.299474  63.895520 60.57729
 [2,]  3.16786 11.38266 19.71938 27.08742  33.646908  33.488301 32.47947
 [3,] 37.67285 29.15780 20.92325 14.21750   9.325976   9.059491 10.49557
 [4,] 48.97226 40.53408 32.80674 26.89319  22.660408  22.341120 21.56970
 [5,] 50.32473 42.44960 35.33751 29.96925  26.166094  25.707067 23.60073
 [6,] 50.98220 47.53531 44.77211 42.98433  41.972721  41.436516 37.40409
 [7,] 64.89992 70.06575 75.76079 81.12373  86.129806  85.536298 80.31417
 [8,] 76.18219 82.84641 89.96539 96.53168 102.567205 101.830677 95.66170
 [9,] 67.30314 74.52107 82.12052 88.99246  95.209202  94.367152 87.31037
[10,] 56.09295 63.45764 70.99828 77.74381  83.865025  83.098194 76.75948
         [,15]
 [1,] 52.36649
 [2,] 32.00440
 [3,] 21.49275
 [4,] 26.48901
 [5,] 25.76501
 [6,] 28.94258
 [7,] 64.93634
 [8,] 78.99746
 [9,] 67.87546
[10,] 59.84362
> 
> # Compare a set of colours with itself
> compare_colour(r, from_space = 'rgb', method = 'cmc')
      [,1]     [,2]     [,3]      [,4]       [,5]     [,6]      [,7]      [,8]
 [1,]    0 30.66001 79.59275 103.37370 101.509242 91.48686  97.00427 107.02585
 [2,]    0  0.00000 50.42953  75.88074  77.339032 81.22327 110.77720 128.40117
 [3,]    0  0.00000  0.00000  16.64463  21.009428 41.12636  80.26399  97.81056
 [4,]    0  0.00000  0.00000   0.00000   8.359694 34.63378  76.14760  93.97196
 [5,]    0  0.00000  0.00000   0.00000   0.000000 28.07909  71.85226  90.44183
 [6,]    0  0.00000  0.00000   0.00000   0.000000  0.00000  55.60517  78.29659
 [7,]    0  0.00000  0.00000   0.00000   0.000000  0.00000   0.00000  19.91406
 [8,]    0  0.00000  0.00000   0.00000   0.000000  0.00000   0.00000   0.00000
 [9,]    0  0.00000  0.00000   0.00000   0.000000  0.00000   0.00000   0.00000
[10,]    0  0.00000  0.00000   0.00000   0.000000  0.00000   0.00000   0.00000
           [,9]    [,10]
 [1,]  88.69588 47.25557
 [2,] 111.75460 72.07381
 [3,]  89.44199 69.07941
 [4,]  87.83719 72.00177
 [5,]  85.01006 70.79239
 [6,]  75.70598 69.06744
 [7,]  26.36408 45.50214
 [8,]  16.45858 39.30074
 [9,]   0.00000 24.97282
[10,]   0.00000  0.00000
> 
> # Compare colours from different colour spaces
> h_luv <- convert_colour(h, 'rgb', 'luv')
> compare_colour(r, h_luv, 'rgb', 'luv')
           [,1]      [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8]
 [1,] 269.75047 266.98290 261.3195 252.2761 241.5891 230.1999 219.2811 209.6951
 [2,] 206.44011 205.64789 204.2222 202.5385 201.6224 202.1931 204.6754 209.0740
 [3,] 174.78715 176.24962 179.5202 185.5461 194.0407 204.9786 217.7871 231.7625
 [4,]  88.47164  92.42388 100.6683 114.3188 131.3838 151.0651 172.0906 193.4469
 [5,] 115.57637 117.88566 122.9627 132.0420 144.3498 159.5508 176.6664 194.7251
 [6,] 237.53853 237.90584 238.8600 240.9830 244.5478 249.8338 256.7524 264.9852
 [7,] 235.28781 233.18662 228.9612 222.4461 215.1867 208.1223 202.2425 198.1545
 [8,] 278.98265 275.69390 268.8986 257.8385 244.3546 229.3136 213.9318 199.1665
 [9,] 317.10351 313.89311 307.2456 296.3769 283.0180 267.9184 252.1564 236.5575
[10,] 290.89512 287.69780 281.0874 270.3128 257.1382 242.3644 227.1189 212.2718
          [,9]    [,10]    [,11]    [,12]    [,13]    [,14]    [,15]
 [1,] 201.9461 196.0358 192.4455 190.7461 188.9878 176.3276 158.9800
 [2,] 215.1081 222.7265 230.9081 239.6480 238.3923 229.6493 219.0854
 [3,] 246.2732 261.4841 275.8258 289.7788 288.8310 282.3895 275.4135
 [4,] 214.4548 235.5892 254.9104 273.2789 272.3119 265.7935 259.1322
 [5,] 212.9741 231.6944 249.0506 265.7198 265.9122 268.6680 280.6467
 [6,] 274.1305 284.2483 294.2037 304.2199 305.9190 320.0701 352.0550
 [7,] 196.0771 195.9797 197.6374 200.7253 203.1255 222.6780 264.5882
 [8,] 185.6644 173.3355 163.4112 155.4158 158.3398 181.6162 229.2526
 [9,] 221.6549 207.1638 194.4319 182.8782 185.3136 205.1393 247.5072
[10,] 198.3929 185.2913 174.2208 164.6657 165.4737 173.6139 198.0978
> 
> 
> 
> 
> cleanEx()
> nameEx("convert_colour")
> ### * convert_colour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convert_colour
> ### Title: Convert between colour spaces
> ### Aliases: convert_colour
> 
> ### ** Examples
> 
> spectrum <- decode_colour(rainbow(10))
> spec_lab <- convert_colour(spectrum, 'rgb', 'lab')
> spec_lab
             l         a          b
 [1,] 53.24079  80.09796   67.20432
 [2,] 72.26072  30.17136   77.22610
 [3,] 93.60533 -41.93879   90.27635
 [4,] 88.07403 -83.10282   83.59544
 [5,] 88.19634 -80.27407   57.92961
 [6,] 91.11322 -48.08151  -14.12690
 [7,] 47.90478  35.20130  -82.00196
 [8,] 33.81896  79.70472 -105.27489
 [9,] 51.90416  91.00028  -74.83009
[10,] 55.65103  86.53436   -9.71618
> 
> # Convert between different white references
> convert_colour(spec_lab, 'lab', 'lab', white_from = 'D65', white_to = 'F10')
             l         a          b
 [1,] 53.24080  78.60861   61.96368
 [2,] 72.26073  28.55590   69.69829
 [3,] 93.60534 -43.63249   80.36298
 [4,] 88.07403 -84.54076   73.96892
 [5,] 88.19634 -81.72521   45.70399
 [6,] 91.11322 -49.70878  -34.09510
 [7,] 47.90478  33.97911 -101.30502
 [8,] 33.81896  78.54632 -124.47620
 [9,] 51.90416  89.49072  -94.10538
[10,] 55.65103  84.97882  -23.10021
> 
> 
> 
> 
> cleanEx()
> nameEx("decode_colour")
> ### * decode_colour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: decode_colour
> ### Title: Decode RGB hex-strings into colour values
> ### Aliases: decode_colour
> 
> ### ** Examples
> 
> # basic use
> decode_colour(c('#43e1f6', 'steelblue', '#67ce9fe4'))
       r   g   b
[1,]  67 225 246
[2,]  70 130 180
[3,] 103 206 159
> 
> # Return alpha as well (no alpha value is interpreted as 1)
> decode_colour(c('#43e1f6', 'steelblue', '#67ce9fe4'), alpha = TRUE)
       r   g   b     alpha
[1,]  67 225 246 1.0000000
[2,]  70 130 180 1.0000000
[3,] 103 206 159 0.8941176
> 
> # Decode directly into specific colour space
> decode_colour(c('#43e1f6', 'steelblue', '#67ce9fe4'), to = 'lch')
            l        c        h
[1,] 82.74938 40.01458 213.2785
[2,] 52.46552 32.44532 262.7880
[3,] 75.77774 43.36657 160.7072
> 
> 
> 
> 
> cleanEx()
> nameEx("encode_colour")
> ### * encode_colour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: encode_colour
> ### Title: Encode colours into RGB hex-strings
> ### Aliases: encode_colour
> 
> ### ** Examples
> 
> spectrum <- decode_colour(rainbow(10))
> 
> encode_colour(spectrum)
 [1] "#FF0000" "#FF9900" "#CCFF00" "#33FF00" "#00FF66" "#00FFFF" "#0066FF"
 [8] "#3300FF" "#CC00FF" "#FF0099"
> 
> # Attach alpha values
> encode_colour(spectrum, alpha = c(0.5, 1))
 [1] "#FF000080" "#FF9900"   "#CCFF0080" "#33FF00"   "#00FF6680" "#00FFFF"  
 [7] "#0066FF80" "#3300FF"   "#CC00FF80" "#FF0099"  
> 
> # Encode from a different colour space
> spectrum_hcl <- convert_colour(spectrum, 'rgb', 'hcl')
> encode_colour(spectrum_hcl, from = 'hcl')
 [1] "#FF0000" "#FF9900" "#CCFF00" "#33FF00" "#00FF66" "#00FFFF" "#0066FF"
 [8] "#3300FF" "#CC00FF" "#FF0099"
> 
> 
> 
> 
> cleanEx()
> nameEx("manip_channel")
> ### * manip_channel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: manip_channel
> ### Title: Modify colour space channels in hex-encoded colour strings
> ### Aliases: manip_channel set_channel add_to_channel multiply_channel
> ###   raise_channel cap_channel get_channel
> 
> ### ** Examples
> 
> spectrum <- rainbow(10)
> 
> # set a specific channel
> set_channel(spectrum, 'r', c(10, 50))
 [1] "#0A0000" "#329900" "#0AFF00" "#32FF00" "#0AFF66" "#32FFFF" "#0A66FF"
 [8] "#3200FF" "#0A00FF" "#320099"
> set_channel(spectrum, 'l', 50, space = 'lab')
 [1] "#F40000" "#B86000" "#4B8600" "#009200" "#009100" "#008B8E" "#1D6BFF"
 [8] "#7A3FFF" "#C600F9" "#ED008A"
> set_channel(spectrum, 'alpha', c(0.5, 1))
 [1] "#FF000080" "#FF9900"   "#CCFF0080" "#33FF00"   "#00FF6680" "#00FFFF"  
 [7] "#0066FF80" "#3300FF"   "#CC00FF80" "#FF0099"  
> 
> # Add value to channel
> add_to_channel(spectrum, 'r', c(10, 50))
 [1] "#FF0000" "#FF9900" "#D6FF00" "#65FF00" "#0AFF66" "#32FFFF" "#0A66FF"
 [8] "#6500FF" "#D600FF" "#FF0099"
> add_to_channel(spectrum, 'l', 50, space = 'lab')
 [1] "#FFB380" "#FFE663" "#DFFF2D" "#69FF41" "#55FF86" "#4BFFFF" "#D6EAFF"
 [8] "#EC9DFF" "#FFB7FF" "#FFB1FF"
> 
> # Multiply a channel
> multiply_channel(spectrum, 'r', c(10, 50))
 [1] "#FF0000" "#FF9900" "#FFFF00" "#FFFF00" "#00FF66" "#00FFFF" "#0066FF"
 [8] "#FF00FF" "#FF00FF" "#FF0099"
> multiply_channel(spectrum, 'l', 50, space = 'lab')
 [1] "#FFB380" "#FFE663" "#DFFF2D" "#69FF41" "#55FF86" "#4BFFFF" "#DCF0FF"
 [8] "#FFCCFF" "#FFB7FF" "#FFB1FF"
> 
> # set a lower bound on a channel
> raise_channel(spectrum, 'r', c(10, 50))
 [1] "#FF0000" "#FF9900" "#CCFF00" "#33FF00" "#0AFF66" "#32FFFF" "#0A66FF"
 [8] "#3300FF" "#CC00FF" "#FF0099"
> raise_channel(spectrum, 'l', 20, space = 'lab')
 [1] "#FF0000" "#FF9900" "#CCFF00" "#33FF00" "#00FF66" "#00FFFF" "#0066FF"
 [8] "#3300FF" "#CC00FF" "#FF0099"
> 
> # set an upper bound on a channel
> cap_channel(spectrum, 'r', c(100, 50))
 [1] "#640000" "#329900" "#64FF00" "#32FF00" "#00FF66" "#00FFFF" "#0066FF"
 [8] "#3200FF" "#6400FF" "#320099"
> cap_channel(spectrum, 'l', 20, space = 'lab')
 [1] "#920000" "#631600" "#183B00" "#004200" "#004200" "#003F44" "#0029AF"
 [8] "#0000D6" "#6B00A4" "#900041"
> 
> 
> 
> 
> cleanEx()
> nameEx("native_encoding")
> ### * native_encoding
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: native-encoding
> ### Title: Convert to and from the R native colour representation
> ### Aliases: native-encoding encode_native decode_native
> 
> ### ** Examples
> 
> 
> # Get native representation of navyblue and #228B22
> native_col <- encode_native(c('navyblue', '#228B22'))
> native_col
[1]  -8388608 -14513374
> 
> # Convert back
> decode_native(native_col)
[1] "#000080" "#228B22"
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.064 0.007 0.072 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
