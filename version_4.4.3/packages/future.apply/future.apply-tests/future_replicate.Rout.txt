
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[08:25:54.565] plan(): Setting new future strategy stack:
[08:25:54.565] List of future strategies:
[08:25:54.565] 1. sequential:
[08:25:54.565]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.565]    - tweaked: FALSE
[08:25:54.565]    - call: future::plan("sequential")
[08:25:54.579] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[08:25:54.610] plan(): Setting new future strategy stack:
[08:25:54.611] List of future strategies:
[08:25:54.611] 1. sequential:
[08:25:54.611]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.611]    - tweaked: FALSE
[08:25:54.611]    - call: plan(strategy)
[08:25:54.624] plan(): nbrOfWorkers() = 1
[08:25:54.626] future_lapply() ...
[08:25:54.629] Generating random seeds ...
[08:25:54.629] Generating random seed streams for 5 elements ...
[08:25:54.629] Generating random seed streams for 5 elements ... DONE
[08:25:54.629] Generating random seeds ... DONE
[08:25:54.630] Will set RNG state on exit: 10403, 10, 617037423, 1957722998, -1507980128, -454171293, 1042507265, 1368647024, 70104334, 979744633, 1795753739, 1960273978, 1440806716, 930755711, 824944597, 882756076, -768382142, 740144285, -2023969513, 2115216510, 1350097976, 1680522011, 1523380345, -519587640, 1508217078, -729091791, -403023517, -1691571406, -1244191612, -1260691257, -2036368483, -1553875180, -1654229574, 497406981, -640562721, 205114470, 490359792, -1623485165, -858117455, -1956805280, 588511998, 1706907273, 643948987, 385891210, -861060500, -2060973073, 543478821, 2065591516, 1951728306, -2095974995, -1702368921, -455129458, -1340199064, -1659340949, 1920135433, -503429224, 979656390, -433353695, -2132498253, -62303710, -1151990764, 898717847, 96057997, 1099348900, -1272486518, 148382197, -1091838897, -127083690, -570854912, -770274493, -370963743, 1062074448, 1918048430, -1261716391, -206803861, -1820073510, 39201436, 1181156511, 1428084469, -1022751860, -700700062, 89779773, 801378487, 783519582, -1448504680, -570170885, 123386777, 193897512, -1426901802, -1572126383, -516399101, 232253330, 1213981988, 1699638247, -1689120707, -996983116, 813110554, -276507035, -268190977, 1336246150, -1485532912, -1362476621, 44087889, 1001015808, 379881182, -1318433495, 1932636379, -48576534, -705026164, 904075471, 30005381, 563571516, 353186322, -1208637171, -1591061945, 290039854, -1325793912, 630105227, 284581481, 604840504, 704320230, -20468095, -1954999789, 733058498, 135929460, 161935479, -365907603, -1538341372, -175385302, -1306381675, 1728387375, 2083560502, -696076192, 1797328547, -830256703, 552867248, -1778574130, -362964423, -1680024501, -174621190, -1004275460, 527498559, -284536299, 586561836, 231881218, -1910982435, -897917993, -1916795202, -1653808904, -1137590565, -2037537479, -2058940280, -941750218, -1018647439, 260626083, 1825725426, 1338490692, -466866169, -616665635, -1801889068, 267478522, -583366331, 969969055, 1140502310, -336887888, 1401723987, -219916431, -917934432, 1468002878, 80009545, -1756837893, -276427830, 772547884, -1209427665, 990595045, 658151068, 375702258, 1325949805, -1466139481, 1811928782, -1745458136, -367751125, -359595447, 40627032, 1899521542, -62574623, -1693033101, -1595247134, 307673428, 602548311, 684282957, 868313060, -1271859766, 1907219509, -1285309809, 1324299158, 1917042496, -162000381, -1092523999, -584105200, -523771666, -2080735079, 823567659, 2083658778, -1118500, 207619807, -1262391115, 1508275788, 849762978, -1538833923, 1888897783, -1056695266, -1475848488, 1175226939, 1653319641, -1948521112, -938943338, 854481425, 428118979, -1134776366, -432133532, -837097049, 737773309, -143686924, 1052722650, -820225755, -1759084481, 1491222470, 114189392, 1872861250, -1872195424, -1986007364, 947661264, 2105918306, -1063247128, 400101580, -1367830020, 1112504818, -855602560, 1770608116, -825162104, 60321594, -376540336, -1583172500, -431617644, -128920494, -1083078176, 82123980, -1154356064, 1389892994, 376168680, 1984339692, 1994513724, -1653105550, 1505603696, -1498036188, 352865336, -864725222, 874941648, -553019588, -1070442604, -1514906750, -1928293952, 612998716, 1788523920, -1130109406, 522878216, 1833301644, -1722931428, 315945106, -166831744, -978555372, 764022568, 1149968954, -1680837168, 819738988, 1339323316, -1922787310, 1653489120, -2047897652, 1549349088, 510404642, 101769512, 1505197580, 916897596, -340177934, 1153149680, -931666364, -529948072, 1602690874, -1060768272, -76280132, -1130100460, -725857598, 1345444960, -1910647940, 551200720, -1924267742, -594437464, 258790284, 2034985148, -1322920142, 145545792, 1163175092, -754685368, 531721658, 1820965392, -341845268, -1134720684, 121082130, -1652421216, -2133603636, 46378592, 292937666, -1025446104, -204292180, 606606140, -1482524302, -486716624, 958092580, -1778767048, -1355897126, 160743312, 2009554684, 291574676, -850720702, -1582664448, -1753951172, 254038352, 632117410, -12916408, 704210700, 1276478172, 2002898258, 743378048, -1205608364, -1568057368, 234275066, -1545876656, 234934060, 1940973940, -1134363758, -974796704, -1394993780, -1089803424, 1357175266, -96072792, 1891720396, 1344120828, -340298318, -627831312, 1748061124, -619459240, -20917894, 607349680, -2026286660, 91179092, 1145176002, -2115250144, -1552910148, -1172168112, -354051102, -1999001496, -1667150772, 214972668, -1438020622, 1297836288, -288284300, -1787538424, -656384070, -852274736, 1663130604, 1104972180, -275500590, 955257184, -306794676, 564721952, -1894127742, 697847528, -2078842644, 825627708, 1527651186, -470972816, 1200253988, 1347068728, -2015638374, 1674062544, 578252988, 478916244, 696827522, -1633388352, -398234820, -2119451504, -1654649310, 1318477832, 1922622732, -257854308, -793997806, 100122496, 1337320980, 486670888, 989322554, -130649648, 2011487340, -440116940, -781304174, -999828640, -679484596, 1255131104, -1844340830, -2028165208, 1061338508, 1415336124, -1722216078, 364784880, 977440836, -1113052840, 2069966394, -1403991184, -546961348, -1256081644, -840094270, -1160998176, 1599078268, 488562384, -1076686686, 975950888, -714222324, 1226420156, 1004532018, -710135360, -730568140, -1660124216, -268193606, -1288877680, 38169068, 1144912468, 650705042, 1933858592, -233442868, -850725408, 1512580802, 2068093992, -1930265940, -1232804676, 1228370418, 1106084144, -707494748, 417164984, 226323802, 711466384, 1273920380, 116879636, -86863038, -2063107328, 985999292, -1647478943, -1470775533, 76093236, 1462601026, -768480937, -1016048479, -1796682394, -1233547420, -1119027563, -846661697, -1469670568, -1140362, -1853760637, -1748088379, 1851227874, -456876208, 463915641, -457667157, -1533635812, -205183926, -1460510657, 975925385, -400055138, 551387468, 1057528093, 1903903911, 1227523024, 2141756270, 1886136859, 280111997, 960113002, -257734648, 517066929, -731844829, -1444213724, 1964232402, 1379359527, 1571802481, -1959775306, -1256736940, -1417121307, -308835345, 552139560, 1631611782, -195106893, -512577771, -39929486, 997207488, 1253289513, 2066948763, 174148460, 239891322, -1804899153, 1100068793, -1439211058, 433095964, 1316081805, 1459698935, 1299195904, -1609012642, -322644693, -1363565011, 1070784154, -1137845672, 1288828353, 531217011, 928962452, 136775202, 1107511607, -1058760703, -350563066, 491041092, 546718837, 720266719, -829320904, -794236138, -1280670941, 1981491429, 962360578, -1657571472, -120424679, -1916150005, 550378492, 751548458, -1818692513, -1713185815, 417924350, 841743596, 2056147005, -464092153, -1069391888, -1811268722, 2028636603, 337880989, -2127821494, 1182813544, 1678009169, -903180221, 1231198532, 192836082, -858541113, -1844410991, -811009770, 1016756596, -1059753979, 713050191, 510446664, -1902599706, -49230061, -792680331, -1558955438, 1551801504, 1598969225, -2036017733, 1918280204, -9196646, -1011625201, -1626791591, -112364562, 1179441788, 1923037933, -596464233, -1409067424, -883655618, 2031705355, 1852022669, 1296452794, 502041336, -2007445343, -501341101, 1011300212, -93793022, 1912872343, -1628944543, 998319014, 899009956, 747885653, 751831295, 625999256, -1487759690, 574846787, -763749755, -1410314462, 1030900752, 1273192377, 614010987, 1653635932, 582761098, 522913407, 1131182025, 1485225054, 1140651788, -1623722275, -598044697, -1004239856, 854460718, 1514548699, 1906164413, -1887803350, 1188516040, -482454031, -1956129949, 943809380, -1059612014, 1613903719, 830597425, -1432776074, -348343404, 1860171685, -828600216
[08:25:54.630] Number of chunks: 1
[08:25:54.631] getGlobalsAndPackagesXApply() ...
[08:25:54.631]  - future.globals: TRUE
[08:25:54.631] getGlobalsAndPackages() ...
[08:25:54.631] Searching for globals...
[08:25:54.633] - globals found: [2] ‘FUN’, ‘sample’
[08:25:54.633] Searching for globals ... DONE
[08:25:54.634] Resolving globals: FALSE
[08:25:54.634] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:54.635] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:54.635] - globals: [1] ‘FUN’
[08:25:54.635] 
[08:25:54.635] getGlobalsAndPackages() ... DONE
[08:25:54.635]  - globals found/used: [n=1] ‘FUN’
[08:25:54.635]  - needed namespaces: [n=0] 
[08:25:54.635] Finding globals ... DONE
[08:25:54.636]  - use_args: TRUE
[08:25:54.636]  - Getting '...' globals ...
[08:25:54.636] resolve() on list ...
[08:25:54.636]  recursive: 0
[08:25:54.637]  length: 1
[08:25:54.637]  elements: ‘...’
[08:25:54.637]  length: 0 (resolved future 1)
[08:25:54.637] resolve() on list ... DONE
[08:25:54.637]    - '...' content: [n=0] 
[08:25:54.637] List of 1
[08:25:54.637]  $ ...: list()
[08:25:54.637]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.637]  - attr(*, "where")=List of 1
[08:25:54.637]   ..$ ...:<environment: 0x55f777607710> 
[08:25:54.637]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.637]  - attr(*, "resolved")= logi TRUE
[08:25:54.637]  - attr(*, "total_size")= num NA
[08:25:54.641]  - Getting '...' globals ... DONE
[08:25:54.642] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:54.642] List of 2
[08:25:54.642]  $ ...future.FUN:function (...)  
[08:25:54.642]  $ ...          : list()
[08:25:54.642]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.642]  - attr(*, "where")=List of 2
[08:25:54.642]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:54.642]   ..$ ...          :<environment: 0x55f777607710> 
[08:25:54.642]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.642]  - attr(*, "resolved")= logi FALSE
[08:25:54.642]  - attr(*, "total_size")= num 7184
[08:25:54.644] Packages to be attached in all futures: [n=0] 
[08:25:54.644] getGlobalsAndPackagesXApply() ... DONE
[08:25:54.645] Number of futures (= number of chunks): 1
[08:25:54.645] Launching 1 futures (chunks) ...
[08:25:54.645] Chunk #1 of 1 ...
[08:25:54.645]  - Finding globals in 'X' for chunk #1 ...
[08:25:54.645] getGlobalsAndPackages() ...
[08:25:54.645] Searching for globals...
[08:25:54.646] 
[08:25:54.646] Searching for globals ... DONE
[08:25:54.646] - globals: [0] <none>
[08:25:54.646] getGlobalsAndPackages() ... DONE
[08:25:54.649]    + additional globals found: [n=0] 
[08:25:54.649]    + additional namespaces needed: [n=0] 
[08:25:54.649]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:54.649]  - seeds: [5] <seeds>
[08:25:54.649]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.649] getGlobalsAndPackages() ...
[08:25:54.649] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.649] Resolving globals: FALSE
[08:25:54.650] Tweak future expression to call with '...' arguments ...
[08:25:54.650] {
[08:25:54.650]     do.call(function(...) {
[08:25:54.650]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.650]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.650]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.650]             on.exit(options(oopts), add = TRUE)
[08:25:54.650]         }
[08:25:54.650]         {
[08:25:54.650]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.650]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.650]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.650]                   envir = globalenv(), inherits = FALSE)
[08:25:54.650]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.650]             })
[08:25:54.650]         }
[08:25:54.650]     }, args = future.call.arguments)
[08:25:54.650] }
[08:25:54.650] Tweak future expression to call with '...' arguments ... DONE
[08:25:54.650] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.650] 
[08:25:54.650] getGlobalsAndPackages() ... DONE
[08:25:54.651] run() for ‘Future’ ...
[08:25:54.651] - state: ‘created’
[08:25:54.651] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:54.652] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.652] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:54.652]   - Field: ‘label’
[08:25:54.652]   - Field: ‘local’
[08:25:54.652]   - Field: ‘owner’
[08:25:54.652]   - Field: ‘envir’
[08:25:54.652]   - Field: ‘packages’
[08:25:54.652]   - Field: ‘gc’
[08:25:54.652]   - Field: ‘conditions’
[08:25:54.653]   - Field: ‘expr’
[08:25:54.653]   - Field: ‘uuid’
[08:25:54.653]   - Field: ‘seed’
[08:25:54.653]   - Field: ‘version’
[08:25:54.653]   - Field: ‘result’
[08:25:54.653]   - Field: ‘asynchronous’
[08:25:54.653]   - Field: ‘calls’
[08:25:54.653]   - Field: ‘globals’
[08:25:54.653]   - Field: ‘stdout’
[08:25:54.653]   - Field: ‘earlySignal’
[08:25:54.653]   - Field: ‘lazy’
[08:25:54.654]   - Field: ‘state’
[08:25:54.654] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:54.654] - Launch lazy future ...
[08:25:54.654] Packages needed by the future expression (n = 0): <none>
[08:25:54.654] Packages needed by future strategies (n = 0): <none>
[08:25:54.655] {
[08:25:54.655]     {
[08:25:54.655]         {
[08:25:54.655]             ...future.startTime <- base::Sys.time()
[08:25:54.655]             {
[08:25:54.655]                 {
[08:25:54.655]                   {
[08:25:54.655]                     base::local({
[08:25:54.655]                       has_future <- base::requireNamespace("future", 
[08:25:54.655]                         quietly = TRUE)
[08:25:54.655]                       if (has_future) {
[08:25:54.655]                         ns <- base::getNamespace("future")
[08:25:54.655]                         version <- ns[[".package"]][["version"]]
[08:25:54.655]                         if (is.null(version)) 
[08:25:54.655]                           version <- utils::packageVersion("future")
[08:25:54.655]                       }
[08:25:54.655]                       else {
[08:25:54.655]                         version <- NULL
[08:25:54.655]                       }
[08:25:54.655]                       if (!has_future || version < "1.8.0") {
[08:25:54.655]                         info <- base::c(r_version = base::gsub("R version ", 
[08:25:54.655]                           "", base::R.version$version.string), 
[08:25:54.655]                           platform = base::sprintf("%s (%s-bit)", 
[08:25:54.655]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:54.655]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:54.655]                             "release", "version")], collapse = " "), 
[08:25:54.655]                           hostname = base::Sys.info()[["nodename"]])
[08:25:54.655]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:25:54.655]                           info)
[08:25:54.655]                         info <- base::paste(info, collapse = "; ")
[08:25:54.655]                         if (!has_future) {
[08:25:54.655]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:54.655]                             info)
[08:25:54.655]                         }
[08:25:54.655]                         else {
[08:25:54.655]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:54.655]                             info, version)
[08:25:54.655]                         }
[08:25:54.655]                         base::stop(msg)
[08:25:54.655]                       }
[08:25:54.655]                     })
[08:25:54.655]                   }
[08:25:54.655]                   ...future.strategy.old <- future::plan("list")
[08:25:54.655]                   options(future.plan = NULL)
[08:25:54.655]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.655]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:54.655]                 }
[08:25:54.655]                 ...future.workdir <- getwd()
[08:25:54.655]             }
[08:25:54.655]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:54.655]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:54.655]         }
[08:25:54.655]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:54.655]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:54.655]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:54.655]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:54.655]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:54.655]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:54.655]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:54.655]             base::names(...future.oldOptions))
[08:25:54.655]     }
[08:25:54.655]     if (FALSE) {
[08:25:54.655]     }
[08:25:54.655]     else {
[08:25:54.655]         if (TRUE) {
[08:25:54.655]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:54.655]                 open = "w")
[08:25:54.655]         }
[08:25:54.655]         else {
[08:25:54.655]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:54.655]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:54.655]         }
[08:25:54.655]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:54.655]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:54.655]             base::sink(type = "output", split = FALSE)
[08:25:54.655]             base::close(...future.stdout)
[08:25:54.655]         }, add = TRUE)
[08:25:54.655]     }
[08:25:54.655]     ...future.frame <- base::sys.nframe()
[08:25:54.655]     ...future.conditions <- base::list()
[08:25:54.655]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:54.655]     if (FALSE) {
[08:25:54.655]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:54.655]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:54.655]     }
[08:25:54.655]     ...future.result <- base::tryCatch({
[08:25:54.655]         base::withCallingHandlers({
[08:25:54.655]             ...future.value <- base::withVisible(base::local({
[08:25:54.655]                 do.call(function(...) {
[08:25:54.655]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.655]                   if (!identical(...future.globals.maxSize.org, 
[08:25:54.655]                     ...future.globals.maxSize)) {
[08:25:54.655]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.655]                     on.exit(options(oopts), add = TRUE)
[08:25:54.655]                   }
[08:25:54.655]                   {
[08:25:54.655]                     lapply(seq_along(...future.elements_ii), 
[08:25:54.655]                       FUN = function(jj) {
[08:25:54.655]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.655]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.655]                           envir = globalenv(), inherits = FALSE)
[08:25:54.655]                         ...future.FUN(...future.X_jj, ...)
[08:25:54.655]                       })
[08:25:54.655]                   }
[08:25:54.655]                 }, args = future.call.arguments)
[08:25:54.655]             }))
[08:25:54.655]             future::FutureResult(value = ...future.value$value, 
[08:25:54.655]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.655]                   ...future.rng), globalenv = if (FALSE) 
[08:25:54.655]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:54.655]                     ...future.globalenv.names))
[08:25:54.655]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:54.655]         }, condition = base::local({
[08:25:54.655]             c <- base::c
[08:25:54.655]             inherits <- base::inherits
[08:25:54.655]             invokeRestart <- base::invokeRestart
[08:25:54.655]             length <- base::length
[08:25:54.655]             list <- base::list
[08:25:54.655]             seq.int <- base::seq.int
[08:25:54.655]             signalCondition <- base::signalCondition
[08:25:54.655]             sys.calls <- base::sys.calls
[08:25:54.655]             `[[` <- base::`[[`
[08:25:54.655]             `+` <- base::`+`
[08:25:54.655]             `<<-` <- base::`<<-`
[08:25:54.655]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:54.655]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:54.655]                   3L)]
[08:25:54.655]             }
[08:25:54.655]             function(cond) {
[08:25:54.655]                 is_error <- inherits(cond, "error")
[08:25:54.655]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:54.655]                   NULL)
[08:25:54.655]                 if (is_error) {
[08:25:54.655]                   sessionInformation <- function() {
[08:25:54.655]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:54.655]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:54.655]                       search = base::search(), system = base::Sys.info())
[08:25:54.655]                   }
[08:25:54.655]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.655]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:54.655]                     cond$call), session = sessionInformation(), 
[08:25:54.655]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:54.655]                   signalCondition(cond)
[08:25:54.655]                 }
[08:25:54.655]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:54.655]                 "immediateCondition"))) {
[08:25:54.655]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:54.655]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.655]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:54.655]                   if (TRUE && !signal) {
[08:25:54.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.655]                     {
[08:25:54.655]                       inherits <- base::inherits
[08:25:54.655]                       invokeRestart <- base::invokeRestart
[08:25:54.655]                       is.null <- base::is.null
[08:25:54.655]                       muffled <- FALSE
[08:25:54.655]                       if (inherits(cond, "message")) {
[08:25:54.655]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.655]                         if (muffled) 
[08:25:54.655]                           invokeRestart("muffleMessage")
[08:25:54.655]                       }
[08:25:54.655]                       else if (inherits(cond, "warning")) {
[08:25:54.655]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.655]                         if (muffled) 
[08:25:54.655]                           invokeRestart("muffleWarning")
[08:25:54.655]                       }
[08:25:54.655]                       else if (inherits(cond, "condition")) {
[08:25:54.655]                         if (!is.null(pattern)) {
[08:25:54.655]                           computeRestarts <- base::computeRestarts
[08:25:54.655]                           grepl <- base::grepl
[08:25:54.655]                           restarts <- computeRestarts(cond)
[08:25:54.655]                           for (restart in restarts) {
[08:25:54.655]                             name <- restart$name
[08:25:54.655]                             if (is.null(name)) 
[08:25:54.655]                               next
[08:25:54.655]                             if (!grepl(pattern, name)) 
[08:25:54.655]                               next
[08:25:54.655]                             invokeRestart(restart)
[08:25:54.655]                             muffled <- TRUE
[08:25:54.655]                             break
[08:25:54.655]                           }
[08:25:54.655]                         }
[08:25:54.655]                       }
[08:25:54.655]                       invisible(muffled)
[08:25:54.655]                     }
[08:25:54.655]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.655]                   }
[08:25:54.655]                 }
[08:25:54.655]                 else {
[08:25:54.655]                   if (TRUE) {
[08:25:54.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.655]                     {
[08:25:54.655]                       inherits <- base::inherits
[08:25:54.655]                       invokeRestart <- base::invokeRestart
[08:25:54.655]                       is.null <- base::is.null
[08:25:54.655]                       muffled <- FALSE
[08:25:54.655]                       if (inherits(cond, "message")) {
[08:25:54.655]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.655]                         if (muffled) 
[08:25:54.655]                           invokeRestart("muffleMessage")
[08:25:54.655]                       }
[08:25:54.655]                       else if (inherits(cond, "warning")) {
[08:25:54.655]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.655]                         if (muffled) 
[08:25:54.655]                           invokeRestart("muffleWarning")
[08:25:54.655]                       }
[08:25:54.655]                       else if (inherits(cond, "condition")) {
[08:25:54.655]                         if (!is.null(pattern)) {
[08:25:54.655]                           computeRestarts <- base::computeRestarts
[08:25:54.655]                           grepl <- base::grepl
[08:25:54.655]                           restarts <- computeRestarts(cond)
[08:25:54.655]                           for (restart in restarts) {
[08:25:54.655]                             name <- restart$name
[08:25:54.655]                             if (is.null(name)) 
[08:25:54.655]                               next
[08:25:54.655]                             if (!grepl(pattern, name)) 
[08:25:54.655]                               next
[08:25:54.655]                             invokeRestart(restart)
[08:25:54.655]                             muffled <- TRUE
[08:25:54.655]                             break
[08:25:54.655]                           }
[08:25:54.655]                         }
[08:25:54.655]                       }
[08:25:54.655]                       invisible(muffled)
[08:25:54.655]                     }
[08:25:54.655]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.655]                   }
[08:25:54.655]                 }
[08:25:54.655]             }
[08:25:54.655]         }))
[08:25:54.655]     }, error = function(ex) {
[08:25:54.655]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:54.655]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.655]                 ...future.rng), started = ...future.startTime, 
[08:25:54.655]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:54.655]             version = "1.8"), class = "FutureResult")
[08:25:54.655]     }, finally = {
[08:25:54.655]         if (!identical(...future.workdir, getwd())) 
[08:25:54.655]             setwd(...future.workdir)
[08:25:54.655]         {
[08:25:54.655]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:54.655]                 ...future.oldOptions$nwarnings <- NULL
[08:25:54.655]             }
[08:25:54.655]             base::options(...future.oldOptions)
[08:25:54.655]             if (.Platform$OS.type == "windows") {
[08:25:54.655]                 old_names <- names(...future.oldEnvVars)
[08:25:54.655]                 envs <- base::Sys.getenv()
[08:25:54.655]                 names <- names(envs)
[08:25:54.655]                 common <- intersect(names, old_names)
[08:25:54.655]                 added <- setdiff(names, old_names)
[08:25:54.655]                 removed <- setdiff(old_names, names)
[08:25:54.655]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:54.655]                   envs[common]]
[08:25:54.655]                 NAMES <- toupper(changed)
[08:25:54.655]                 args <- list()
[08:25:54.655]                 for (kk in seq_along(NAMES)) {
[08:25:54.655]                   name <- changed[[kk]]
[08:25:54.655]                   NAME <- NAMES[[kk]]
[08:25:54.655]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.655]                     next
[08:25:54.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.655]                 }
[08:25:54.655]                 NAMES <- toupper(added)
[08:25:54.655]                 for (kk in seq_along(NAMES)) {
[08:25:54.655]                   name <- added[[kk]]
[08:25:54.655]                   NAME <- NAMES[[kk]]
[08:25:54.655]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.655]                     next
[08:25:54.655]                   args[[name]] <- ""
[08:25:54.655]                 }
[08:25:54.655]                 NAMES <- toupper(removed)
[08:25:54.655]                 for (kk in seq_along(NAMES)) {
[08:25:54.655]                   name <- removed[[kk]]
[08:25:54.655]                   NAME <- NAMES[[kk]]
[08:25:54.655]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.655]                     next
[08:25:54.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.655]                 }
[08:25:54.655]                 if (length(args) > 0) 
[08:25:54.655]                   base::do.call(base::Sys.setenv, args = args)
[08:25:54.655]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:54.655]             }
[08:25:54.655]             else {
[08:25:54.655]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:54.655]             }
[08:25:54.655]             {
[08:25:54.655]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:54.655]                   0L) {
[08:25:54.655]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:54.655]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:54.655]                   base::options(opts)
[08:25:54.655]                 }
[08:25:54.655]                 {
[08:25:54.655]                   {
[08:25:54.655]                     base::assign(".Random.seed", c(10403L, 10L, 
[08:25:54.655]                     617037423L, 1957722998L, -1507980128L, -454171293L, 
[08:25:54.655]                     1042507265L, 1368647024L, 70104334L, 979744633L, 
[08:25:54.655]                     1795753739L, 1960273978L, 1440806716L, 930755711L, 
[08:25:54.655]                     824944597L, 882756076L, -768382142L, 740144285L, 
[08:25:54.655]                     -2023969513L, 2115216510L, 1350097976L, 1680522011L, 
[08:25:54.655]                     1523380345L, -519587640L, 1508217078L, -729091791L, 
[08:25:54.655]                     -403023517L, -1691571406L, -1244191612L, 
[08:25:54.655]                     -1260691257L, -2036368483L, -1553875180L, 
[08:25:54.655]                     -1654229574L, 497406981L, -640562721L, 205114470L, 
[08:25:54.655]                     490359792L, -1623485165L, -858117455L, -1956805280L, 
[08:25:54.655]                     588511998L, 1706907273L, 643948987L, 385891210L, 
[08:25:54.655]                     -861060500L, -2060973073L, 543478821L, 2065591516L, 
[08:25:54.655]                     1951728306L, -2095974995L, -1702368921L, 
[08:25:54.655]                     -455129458L, -1340199064L, -1659340949L, 
[08:25:54.655]                     1920135433L, -503429224L, 979656390L, -433353695L, 
[08:25:54.655]                     -2132498253L, -62303710L, -1151990764L, 898717847L, 
[08:25:54.655]                     96057997L, 1099348900L, -1272486518L, 148382197L, 
[08:25:54.655]                     -1091838897L, -127083690L, -570854912L, -770274493L, 
[08:25:54.655]                     -370963743L, 1062074448L, 1918048430L, -1261716391L, 
[08:25:54.655]                     -206803861L, -1820073510L, 39201436L, 1181156511L, 
[08:25:54.655]                     1428084469L, -1022751860L, -700700062L, 89779773L, 
[08:25:54.655]                     801378487L, 783519582L, -1448504680L, -570170885L, 
[08:25:54.655]                     123386777L, 193897512L, -1426901802L, -1572126383L, 
[08:25:54.655]                     -516399101L, 232253330L, 1213981988L, 1699638247L, 
[08:25:54.655]                     -1689120707L, -996983116L, 813110554L, -276507035L, 
[08:25:54.655]                     -268190977L, 1336246150L, -1485532912L, -1362476621L, 
[08:25:54.655]                     44087889L, 1001015808L, 379881182L, -1318433495L, 
[08:25:54.655]                     1932636379L, -48576534L, -705026164L, 904075471L, 
[08:25:54.655]                     30005381L, 563571516L, 353186322L, -1208637171L, 
[08:25:54.655]                     -1591061945L, 290039854L, -1325793912L, 630105227L, 
[08:25:54.655]                     284581481L, 604840504L, 704320230L, -20468095L, 
[08:25:54.655]                     -1954999789L, 733058498L, 135929460L, 161935479L, 
[08:25:54.655]                     -365907603L, -1538341372L, -175385302L, -1306381675L, 
[08:25:54.655]                     1728387375L, 2083560502L, -696076192L, 1797328547L, 
[08:25:54.655]                     -830256703L, 552867248L, -1778574130L, -362964423L, 
[08:25:54.655]                     -1680024501L, -174621190L, -1004275460L, 
[08:25:54.655]                     527498559L, -284536299L, 586561836L, 231881218L, 
[08:25:54.655]                     -1910982435L, -897917993L, -1916795202L, 
[08:25:54.655]                     -1653808904L, -1137590565L, -2037537479L, 
[08:25:54.655]                     -2058940280L, -941750218L, -1018647439L, 
[08:25:54.655]                     260626083L, 1825725426L, 1338490692L, -466866169L, 
[08:25:54.655]                     -616665635L, -1801889068L, 267478522L, -583366331L, 
[08:25:54.655]                     969969055L, 1140502310L, -336887888L, 1401723987L, 
[08:25:54.655]                     -219916431L, -917934432L, 1468002878L, 80009545L, 
[08:25:54.655]                     -1756837893L, -276427830L, 772547884L, -1209427665L, 
[08:25:54.655]                     990595045L, 658151068L, 375702258L, 1325949805L, 
[08:25:54.655]                     -1466139481L, 1811928782L, -1745458136L, 
[08:25:54.655]                     -367751125L, -359595447L, 40627032L, 1899521542L, 
[08:25:54.655]                     -62574623L, -1693033101L, -1595247134L, 307673428L, 
[08:25:54.655]                     602548311L, 684282957L, 868313060L, -1271859766L, 
[08:25:54.655]                     1907219509L, -1285309809L, 1324299158L, 1917042496L, 
[08:25:54.655]                     -162000381L, -1092523999L, -584105200L, -523771666L, 
[08:25:54.655]                     -2080735079L, 823567659L, 2083658778L, -1118500L, 
[08:25:54.655]                     207619807L, -1262391115L, 1508275788L, 849762978L, 
[08:25:54.655]                     -1538833923L, 1888897783L, -1056695266L, 
[08:25:54.655]                     -1475848488L, 1175226939L, 1653319641L, -1948521112L, 
[08:25:54.655]                     -938943338L, 854481425L, 428118979L, -1134776366L, 
[08:25:54.655]                     -432133532L, -837097049L, 737773309L, -143686924L, 
[08:25:54.655]                     1052722650L, -820225755L, -1759084481L, 1491222470L, 
[08:25:54.655]                     114189392L, 1872861250L, -1872195424L, -1986007364L, 
[08:25:54.655]                     947661264L, 2105918306L, -1063247128L, 400101580L, 
[08:25:54.655]                     -1367830020L, 1112504818L, -855602560L, 1770608116L, 
[08:25:54.655]                     -825162104L, 60321594L, -376540336L, -1583172500L, 
[08:25:54.655]                     -431617644L, -128920494L, -1083078176L, 82123980L, 
[08:25:54.655]                     -1154356064L, 1389892994L, 376168680L, 1984339692L, 
[08:25:54.655]                     1994513724L, -1653105550L, 1505603696L, -1498036188L, 
[08:25:54.655]                     352865336L, -864725222L, 874941648L, -553019588L, 
[08:25:54.655]                     -1070442604L, -1514906750L, -1928293952L, 
[08:25:54.655]                     612998716L, 1788523920L, -1130109406L, 522878216L, 
[08:25:54.655]                     1833301644L, -1722931428L, 315945106L, -166831744L, 
[08:25:54.655]                     -978555372L, 764022568L, 1149968954L, -1680837168L, 
[08:25:54.655]                     819738988L, 1339323316L, -1922787310L, 1653489120L, 
[08:25:54.655]                     -2047897652L, 1549349088L, 510404642L, 101769512L, 
[08:25:54.655]                     1505197580L, 916897596L, -340177934L, 1153149680L, 
[08:25:54.655]                     -931666364L, -529948072L, 1602690874L, -1060768272L, 
[08:25:54.655]                     -76280132L, -1130100460L, -725857598L, 1345444960L, 
[08:25:54.655]                     -1910647940L, 551200720L, -1924267742L, -594437464L, 
[08:25:54.655]                     258790284L, 2034985148L, -1322920142L, 145545792L, 
[08:25:54.655]                     1163175092L, -754685368L, 531721658L, 1820965392L, 
[08:25:54.655]                     -341845268L, -1134720684L, 121082130L, -1652421216L, 
[08:25:54.655]                     -2133603636L, 46378592L, 292937666L, -1025446104L, 
[08:25:54.655]                     -204292180L, 606606140L, -1482524302L, -486716624L, 
[08:25:54.655]                     958092580L, -1778767048L, -1355897126L, 160743312L, 
[08:25:54.655]                     2009554684L, 291574676L, -850720702L, -1582664448L, 
[08:25:54.655]                     -1753951172L, 254038352L, 632117410L, -12916408L, 
[08:25:54.655]                     704210700L, 1276478172L, 2002898258L, 743378048L, 
[08:25:54.655]                     -1205608364L, -1568057368L, 234275066L, -1545876656L, 
[08:25:54.655]                     234934060L, 1940973940L, -1134363758L, -974796704L, 
[08:25:54.655]                     -1394993780L, -1089803424L, 1357175266L, 
[08:25:54.655]                     -96072792L, 1891720396L, 1344120828L, -340298318L, 
[08:25:54.655]                     -627831312L, 1748061124L, -619459240L, -20917894L, 
[08:25:54.655]                     607349680L, -2026286660L, 91179092L, 1145176002L, 
[08:25:54.655]                     -2115250144L, -1552910148L, -1172168112L, 
[08:25:54.655]                     -354051102L, -1999001496L, -1667150772L, 
[08:25:54.655]                     214972668L, -1438020622L, 1297836288L, -288284300L, 
[08:25:54.655]                     -1787538424L, -656384070L, -852274736L, 1663130604L, 
[08:25:54.655]                     1104972180L, -275500590L, 955257184L, -306794676L, 
[08:25:54.655]                     564721952L, -1894127742L, 697847528L, -2078842644L, 
[08:25:54.655]                     825627708L, 1527651186L, -470972816L, 1200253988L, 
[08:25:54.655]                     1347068728L, -2015638374L, 1674062544L, 578252988L, 
[08:25:54.655]                     478916244L, 696827522L, -1633388352L, -398234820L, 
[08:25:54.655]                     -2119451504L, -1654649310L, 1318477832L, 
[08:25:54.655]                     1922622732L, -257854308L, -793997806L, 100122496L, 
[08:25:54.655]                     1337320980L, 486670888L, 989322554L, -130649648L, 
[08:25:54.655]                     2011487340L, -440116940L, -781304174L, -999828640L, 
[08:25:54.655]                     -679484596L, 1255131104L, -1844340830L, -2028165208L, 
[08:25:54.655]                     1061338508L, 1415336124L, -1722216078L, 364784880L, 
[08:25:54.655]                     977440836L, -1113052840L, 2069966394L, -1403991184L, 
[08:25:54.655]                     -546961348L, -1256081644L, -840094270L, -1160998176L, 
[08:25:54.655]                     1599078268L, 488562384L, -1076686686L, 975950888L, 
[08:25:54.655]                     -714222324L, 1226420156L, 1004532018L, -710135360L, 
[08:25:54.655]                     -730568140L, -1660124216L, -268193606L, -1288877680L, 
[08:25:54.655]                     38169068L, 1144912468L, 650705042L, 1933858592L, 
[08:25:54.655]                     -233442868L, -850725408L, 1512580802L, 2068093992L, 
[08:25:54.655]                     -1930265940L, -1232804676L, 1228370418L, 
[08:25:54.655]                     1106084144L, -707494748L, 417164984L, 226323802L, 
[08:25:54.655]                     711466384L, 1273920380L, 116879636L, -86863038L, 
[08:25:54.655]                     -2063107328L, 985999292L, -1647478943L, -1470775533L, 
[08:25:54.655]                     76093236L, 1462601026L, -768480937L, -1016048479L, 
[08:25:54.655]                     -1796682394L, -1233547420L, -1119027563L, 
[08:25:54.655]                     -846661697L, -1469670568L, -1140362L, -1853760637L, 
[08:25:54.655]                     -1748088379L, 1851227874L, -456876208L, 463915641L, 
[08:25:54.655]                     -457667157L, -1533635812L, -205183926L, -1460510657L, 
[08:25:54.655]                     975925385L, -400055138L, 551387468L, 1057528093L, 
[08:25:54.655]                     1903903911L, 1227523024L, 2141756270L, 1886136859L, 
[08:25:54.655]                     280111997L, 960113002L, -257734648L, 517066929L, 
[08:25:54.655]                     -731844829L, -1444213724L, 1964232402L, 1379359527L, 
[08:25:54.655]                     1571802481L, -1959775306L, -1256736940L, 
[08:25:54.655]                     -1417121307L, -308835345L, 552139560L, 1631611782L, 
[08:25:54.655]                     -195106893L, -512577771L, -39929486L, 997207488L, 
[08:25:54.655]                     1253289513L, 2066948763L, 174148460L, 239891322L, 
[08:25:54.655]                     -1804899153L, 1100068793L, -1439211058L, 
[08:25:54.655]                     433095964L, 1316081805L, 1459698935L, 1299195904L, 
[08:25:54.655]                     -1609012642L, -322644693L, -1363565011L, 
[08:25:54.655]                     1070784154L, -1137845672L, 1288828353L, 531217011L, 
[08:25:54.655]                     928962452L, 136775202L, 1107511607L, -1058760703L, 
[08:25:54.655]                     -350563066L, 491041092L, 546718837L, 720266719L, 
[08:25:54.655]                     -829320904L, -794236138L, -1280670941L, 1981491429L, 
[08:25:54.655]                     962360578L, -1657571472L, -120424679L, -1916150005L, 
[08:25:54.655]                     550378492L, 751548458L, -1818692513L, -1713185815L, 
[08:25:54.655]                     417924350L, 841743596L, 2056147005L, -464092153L, 
[08:25:54.655]                     -1069391888L, -1811268722L, 2028636603L, 
[08:25:54.655]                     337880989L, -2127821494L, 1182813544L, 1678009169L, 
[08:25:54.655]                     -903180221L, 1231198532L, 192836082L, -858541113L, 
[08:25:54.655]                     -1844410991L, -811009770L, 1016756596L, -1059753979L, 
[08:25:54.655]                     713050191L, 510446664L, -1902599706L, -49230061L, 
[08:25:54.655]                     -792680331L, -1558955438L, 1551801504L, 1598969225L, 
[08:25:54.655]                     -2036017733L, 1918280204L, -9196646L, -1011625201L, 
[08:25:54.655]                     -1626791591L, -112364562L, 1179441788L, 1923037933L, 
[08:25:54.655]                     -596464233L, -1409067424L, -883655618L, 2031705355L, 
[08:25:54.655]                     1852022669L, 1296452794L, 502041336L, -2007445343L, 
[08:25:54.655]                     -501341101L, 1011300212L, -93793022L, 1912872343L, 
[08:25:54.655]                     -1628944543L, 998319014L, 899009956L, 747885653L, 
[08:25:54.655]                     751831295L, 625999256L, -1487759690L, 574846787L, 
[08:25:54.655]                     -763749755L, -1410314462L, 1030900752L, 1273192377L, 
[08:25:54.655]                     614010987L, 1653635932L, 582761098L, 522913407L, 
[08:25:54.655]                     1131182025L, 1485225054L, 1140651788L, -1623722275L, 
[08:25:54.655]                     -598044697L, -1004239856L, 854460718L, 1514548699L, 
[08:25:54.655]                     1906164413L, -1887803350L, 1188516040L, -482454031L, 
[08:25:54.655]                     -1956129949L, 943809380L, -1059612014L, 1613903719L, 
[08:25:54.655]                     830597425L, -1432776074L, -348343404L, 1860171685L, 
[08:25:54.655]                     -828600216L), envir = base::globalenv(), 
[08:25:54.655]                       inherits = FALSE)
[08:25:54.655]                     NULL
[08:25:54.655]                   }
[08:25:54.655]                   options(future.plan = NULL)
[08:25:54.655]                   if (is.na(NA_character_)) 
[08:25:54.655]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.655]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:54.655]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:54.655]                     .init = FALSE)
[08:25:54.655]                 }
[08:25:54.655]             }
[08:25:54.655]         }
[08:25:54.655]     })
[08:25:54.655]     if (TRUE) {
[08:25:54.655]         base::sink(type = "output", split = FALSE)
[08:25:54.655]         if (TRUE) {
[08:25:54.655]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:54.655]         }
[08:25:54.655]         else {
[08:25:54.655]             ...future.result["stdout"] <- base::list(NULL)
[08:25:54.655]         }
[08:25:54.655]         base::close(...future.stdout)
[08:25:54.655]         ...future.stdout <- NULL
[08:25:54.655]     }
[08:25:54.655]     ...future.result$conditions <- ...future.conditions
[08:25:54.655]     ...future.result$finished <- base::Sys.time()
[08:25:54.655]     ...future.result
[08:25:54.655] }
[08:25:54.658] assign_globals() ...
[08:25:54.658] List of 5
[08:25:54.658]  $ ...future.FUN            :function (...)  
[08:25:54.658]  $ future.call.arguments    : list()
[08:25:54.658]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.658]  $ ...future.elements_ii    :List of 5
[08:25:54.658]   ..$ : int 0
[08:25:54.658]   ..$ : int 0
[08:25:54.658]   ..$ : int 0
[08:25:54.658]   ..$ : int 0
[08:25:54.658]   ..$ : int 0
[08:25:54.658]  $ ...future.seeds_ii       :List of 5
[08:25:54.658]   ..$ : int [1:7] 10407 -1229221746 -448921914 -496353901 714741232 987745083 -1451167165
[08:25:54.658]   ..$ : int [1:7] 10407 1890368395 2034087310 -931813063 -1994981858 -27083194 1438157611
[08:25:54.658]   ..$ : int [1:7] 10407 1724505091 -1273928090 -1453804920 -379076611 -175825063 1389587766
[08:25:54.658]   ..$ : int [1:7] 10407 -1930598873 -1854344019 -1549320388 1121997128 -2001720050 1996931992
[08:25:54.658]   ..$ : int [1:7] 10407 -1336528913 1099607371 -531518915 79989444 -400546879 2100584925
[08:25:54.658]  $ ...future.globals.maxSize: NULL
[08:25:54.658]  - attr(*, "where")=List of 5
[08:25:54.658]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:54.658]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:54.658]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:54.658]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:54.658]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:54.658]  - attr(*, "resolved")= logi FALSE
[08:25:54.658]  - attr(*, "total_size")= num 7184
[08:25:54.658]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.658]  - attr(*, "already-done")= logi TRUE
[08:25:54.665] - reassign environment for ‘...future.FUN’
[08:25:54.666] - copied ‘...future.FUN’ to environment
[08:25:54.666] - copied ‘future.call.arguments’ to environment
[08:25:54.666] - copied ‘...future.elements_ii’ to environment
[08:25:54.666] - copied ‘...future.seeds_ii’ to environment
[08:25:54.666] - copied ‘...future.globals.maxSize’ to environment
[08:25:54.666] assign_globals() ... done
[08:25:54.666] plan(): Setting new future strategy stack:
[08:25:54.666] List of future strategies:
[08:25:54.666] 1. sequential:
[08:25:54.666]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.666]    - tweaked: FALSE
[08:25:54.666]    - call: NULL
[08:25:54.667] plan(): nbrOfWorkers() = 1
[08:25:54.668] plan(): Setting new future strategy stack:
[08:25:54.668] List of future strategies:
[08:25:54.668] 1. sequential:
[08:25:54.668]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.668]    - tweaked: FALSE
[08:25:54.668]    - call: plan(strategy)
[08:25:54.669] plan(): nbrOfWorkers() = 1
[08:25:54.669] SequentialFuture started (and completed)
[08:25:54.669] - Launch lazy future ... done
[08:25:54.669] run() for ‘SequentialFuture’ ... done
[08:25:54.670] Created future:
[08:25:54.670] SequentialFuture:
[08:25:54.670] Label: ‘future_replicate-1’
[08:25:54.670] Expression:
[08:25:54.670] {
[08:25:54.670]     do.call(function(...) {
[08:25:54.670]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.670]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.670]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.670]             on.exit(options(oopts), add = TRUE)
[08:25:54.670]         }
[08:25:54.670]         {
[08:25:54.670]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.670]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.670]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.670]                   envir = globalenv(), inherits = FALSE)
[08:25:54.670]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.670]             })
[08:25:54.670]         }
[08:25:54.670]     }, args = future.call.arguments)
[08:25:54.670] }
[08:25:54.670] Lazy evaluation: FALSE
[08:25:54.670] Asynchronous evaluation: FALSE
[08:25:54.670] Local evaluation: TRUE
[08:25:54.670] Environment: R_GlobalEnv
[08:25:54.670] Capture standard output: TRUE
[08:25:54.670] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:54.670] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:54.670] Packages: <none>
[08:25:54.670] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:54.670] Resolved: TRUE
[08:25:54.670] Value: 91 bytes of class ‘list’
[08:25:54.670] Early signaling: FALSE
[08:25:54.670] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:54.670] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.671] Chunk #1 of 1 ... DONE
[08:25:54.671] Launching 1 futures (chunks) ... DONE
[08:25:54.671] Resolving 1 futures (chunks) ...
[08:25:54.671] resolve() on list ...
[08:25:54.671]  recursive: 0
[08:25:54.671]  length: 1
[08:25:54.671] 
[08:25:54.672] resolved() for ‘SequentialFuture’ ...
[08:25:54.672] - state: ‘finished’
[08:25:54.672] - run: TRUE
[08:25:54.672] - result: ‘FutureResult’
[08:25:54.672] resolved() for ‘SequentialFuture’ ... done
[08:25:54.672] Future #1
[08:25:54.672] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:54.673] - nx: 1
[08:25:54.673] - relay: TRUE
[08:25:54.673] - stdout: TRUE
[08:25:54.673] - signal: TRUE
[08:25:54.673] - resignal: FALSE
[08:25:54.673] - force: TRUE
[08:25:54.673] - relayed: [n=1] FALSE
[08:25:54.673] - queued futures: [n=1] FALSE
[08:25:54.673]  - until=1
[08:25:54.673]  - relaying element #1
[08:25:54.673] - relayed: [n=1] TRUE
[08:25:54.674] - queued futures: [n=1] TRUE
[08:25:54.674] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:54.674]  length: 0 (resolved future 1)
[08:25:54.674] Relaying remaining futures
[08:25:54.674] signalConditionsASAP(NULL, pos=0) ...
[08:25:54.674] - nx: 1
[08:25:54.674] - relay: TRUE
[08:25:54.674] - stdout: TRUE
[08:25:54.674] - signal: TRUE
[08:25:54.674] - resignal: FALSE
[08:25:54.674] - force: TRUE
[08:25:54.675] - relayed: [n=1] TRUE
[08:25:54.675] - queued futures: [n=1] TRUE
 - flush all
[08:25:54.675] - relayed: [n=1] TRUE
[08:25:54.675] - queued futures: [n=1] TRUE
[08:25:54.675] signalConditionsASAP(NULL, pos=0) ... done
[08:25:54.675] resolve() on list ... DONE
[08:25:54.675]  - Number of value chunks collected: 1
[08:25:54.675] Resolving 1 futures (chunks) ... DONE
[08:25:54.675] Reducing values from 1 chunks ...
[08:25:54.675]  - Number of values collected after concatenation: 5
[08:25:54.675]  - Number of values expected: 5
[08:25:54.676] Reducing values from 1 chunks ... DONE
[08:25:54.676] future_lapply() ... DONE
[08:25:54.676] future_lapply() ...
[08:25:54.676] Generating random seeds ...
[08:25:54.676] Generating random seed streams for 5 elements ...
[08:25:54.677] Generating random seed streams for 5 elements ... DONE
[08:25:54.677] Generating random seeds ... DONE
[08:25:54.677] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:54.677] Number of chunks: 1
[08:25:54.677] getGlobalsAndPackagesXApply() ...
[08:25:54.678]  - future.globals: TRUE
[08:25:54.678] getGlobalsAndPackages() ...
[08:25:54.678] Searching for globals...
[08:25:54.681] - globals found: [2] ‘FUN’, ‘sample’
[08:25:54.681] Searching for globals ... DONE
[08:25:54.681] Resolving globals: FALSE
[08:25:54.681] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:54.682] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:54.682] - globals: [1] ‘FUN’
[08:25:54.682] 
[08:25:54.682] getGlobalsAndPackages() ... DONE
[08:25:54.682]  - globals found/used: [n=1] ‘FUN’
[08:25:54.682]  - needed namespaces: [n=0] 
[08:25:54.682] Finding globals ... DONE
[08:25:54.682]  - use_args: TRUE
[08:25:54.683]  - Getting '...' globals ...
[08:25:54.683] resolve() on list ...
[08:25:54.683]  recursive: 0
[08:25:54.683]  length: 1
[08:25:54.683]  elements: ‘...’
[08:25:54.683]  length: 0 (resolved future 1)
[08:25:54.683] resolve() on list ... DONE
[08:25:54.683]    - '...' content: [n=0] 
[08:25:54.684] List of 1
[08:25:54.684]  $ ...: list()
[08:25:54.684]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.684]  - attr(*, "where")=List of 1
[08:25:54.684]   ..$ ...:<environment: 0x55f778280830> 
[08:25:54.684]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.684]  - attr(*, "resolved")= logi TRUE
[08:25:54.684]  - attr(*, "total_size")= num NA
[08:25:54.686]  - Getting '...' globals ... DONE
[08:25:54.686] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:54.686] List of 2
[08:25:54.686]  $ ...future.FUN:function (...)  
[08:25:54.686]  $ ...          : list()
[08:25:54.686]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.686]  - attr(*, "where")=List of 2
[08:25:54.686]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:54.686]   ..$ ...          :<environment: 0x55f778280830> 
[08:25:54.686]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.686]  - attr(*, "resolved")= logi FALSE
[08:25:54.686]  - attr(*, "total_size")= num 7184
[08:25:54.689] Packages to be attached in all futures: [n=0] 
[08:25:54.689] getGlobalsAndPackagesXApply() ... DONE
[08:25:54.689] Number of futures (= number of chunks): 1
[08:25:54.689] Launching 1 futures (chunks) ...
[08:25:54.689] Chunk #1 of 1 ...
[08:25:54.689]  - Finding globals in 'X' for chunk #1 ...
[08:25:54.690] getGlobalsAndPackages() ...
[08:25:54.690] Searching for globals...
[08:25:54.690] 
[08:25:54.690] Searching for globals ... DONE
[08:25:54.690] - globals: [0] <none>
[08:25:54.690] getGlobalsAndPackages() ... DONE
[08:25:54.690]    + additional globals found: [n=0] 
[08:25:54.690]    + additional namespaces needed: [n=0] 
[08:25:54.690]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:54.690]  - seeds: [5] <seeds>
[08:25:54.691]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.691] getGlobalsAndPackages() ...
[08:25:54.691] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.691] Resolving globals: FALSE
[08:25:54.691] Tweak future expression to call with '...' arguments ...
[08:25:54.691] {
[08:25:54.691]     do.call(function(...) {
[08:25:54.691]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.691]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.691]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.691]             on.exit(options(oopts), add = TRUE)
[08:25:54.691]         }
[08:25:54.691]         {
[08:25:54.691]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.691]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.691]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.691]                   envir = globalenv(), inherits = FALSE)
[08:25:54.691]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.691]             })
[08:25:54.691]         }
[08:25:54.691]     }, args = future.call.arguments)
[08:25:54.691] }
[08:25:54.691] Tweak future expression to call with '...' arguments ... DONE
[08:25:54.692] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.692] 
[08:25:54.692] getGlobalsAndPackages() ... DONE
[08:25:54.692] run() for ‘Future’ ...
[08:25:54.692] - state: ‘created’
[08:25:54.692] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:54.693] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.693] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:54.693]   - Field: ‘label’
[08:25:54.693]   - Field: ‘local’
[08:25:54.693]   - Field: ‘owner’
[08:25:54.693]   - Field: ‘envir’
[08:25:54.693]   - Field: ‘packages’
[08:25:54.693]   - Field: ‘gc’
[08:25:54.693]   - Field: ‘conditions’
[08:25:54.694]   - Field: ‘expr’
[08:25:54.694]   - Field: ‘uuid’
[08:25:54.694]   - Field: ‘seed’
[08:25:54.694]   - Field: ‘version’
[08:25:54.694]   - Field: ‘result’
[08:25:54.694]   - Field: ‘asynchronous’
[08:25:54.694]   - Field: ‘calls’
[08:25:54.694]   - Field: ‘globals’
[08:25:54.694]   - Field: ‘stdout’
[08:25:54.694]   - Field: ‘earlySignal’
[08:25:54.694]   - Field: ‘lazy’
[08:25:54.695]   - Field: ‘state’
[08:25:54.695] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:54.695] - Launch lazy future ...
[08:25:54.695] Packages needed by the future expression (n = 0): <none>
[08:25:54.695] Packages needed by future strategies (n = 0): <none>
[08:25:54.695] {
[08:25:54.695]     {
[08:25:54.695]         {
[08:25:54.695]             ...future.startTime <- base::Sys.time()
[08:25:54.695]             {
[08:25:54.695]                 {
[08:25:54.695]                   {
[08:25:54.695]                     base::local({
[08:25:54.695]                       has_future <- base::requireNamespace("future", 
[08:25:54.695]                         quietly = TRUE)
[08:25:54.695]                       if (has_future) {
[08:25:54.695]                         ns <- base::getNamespace("future")
[08:25:54.695]                         version <- ns[[".package"]][["version"]]
[08:25:54.695]                         if (is.null(version)) 
[08:25:54.695]                           version <- utils::packageVersion("future")
[08:25:54.695]                       }
[08:25:54.695]                       else {
[08:25:54.695]                         version <- NULL
[08:25:54.695]                       }
[08:25:54.695]                       if (!has_future || version < "1.8.0") {
[08:25:54.695]                         info <- base::c(r_version = base::gsub("R version ", 
[08:25:54.695]                           "", base::R.version$version.string), 
[08:25:54.695]                           platform = base::sprintf("%s (%s-bit)", 
[08:25:54.695]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:54.695]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:54.695]                             "release", "version")], collapse = " "), 
[08:25:54.695]                           hostname = base::Sys.info()[["nodename"]])
[08:25:54.695]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:25:54.695]                           info)
[08:25:54.695]                         info <- base::paste(info, collapse = "; ")
[08:25:54.695]                         if (!has_future) {
[08:25:54.695]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:54.695]                             info)
[08:25:54.695]                         }
[08:25:54.695]                         else {
[08:25:54.695]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:54.695]                             info, version)
[08:25:54.695]                         }
[08:25:54.695]                         base::stop(msg)
[08:25:54.695]                       }
[08:25:54.695]                     })
[08:25:54.695]                   }
[08:25:54.695]                   ...future.strategy.old <- future::plan("list")
[08:25:54.695]                   options(future.plan = NULL)
[08:25:54.695]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.695]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:54.695]                 }
[08:25:54.695]                 ...future.workdir <- getwd()
[08:25:54.695]             }
[08:25:54.695]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:54.695]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:54.695]         }
[08:25:54.695]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:54.695]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:54.695]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:54.695]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:54.695]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:54.695]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:54.695]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:54.695]             base::names(...future.oldOptions))
[08:25:54.695]     }
[08:25:54.695]     if (FALSE) {
[08:25:54.695]     }
[08:25:54.695]     else {
[08:25:54.695]         if (TRUE) {
[08:25:54.695]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:54.695]                 open = "w")
[08:25:54.695]         }
[08:25:54.695]         else {
[08:25:54.695]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:54.695]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:54.695]         }
[08:25:54.695]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:54.695]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:54.695]             base::sink(type = "output", split = FALSE)
[08:25:54.695]             base::close(...future.stdout)
[08:25:54.695]         }, add = TRUE)
[08:25:54.695]     }
[08:25:54.695]     ...future.frame <- base::sys.nframe()
[08:25:54.695]     ...future.conditions <- base::list()
[08:25:54.695]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:54.695]     if (FALSE) {
[08:25:54.695]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:54.695]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:54.695]     }
[08:25:54.695]     ...future.result <- base::tryCatch({
[08:25:54.695]         base::withCallingHandlers({
[08:25:54.695]             ...future.value <- base::withVisible(base::local({
[08:25:54.695]                 do.call(function(...) {
[08:25:54.695]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.695]                   if (!identical(...future.globals.maxSize.org, 
[08:25:54.695]                     ...future.globals.maxSize)) {
[08:25:54.695]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.695]                     on.exit(options(oopts), add = TRUE)
[08:25:54.695]                   }
[08:25:54.695]                   {
[08:25:54.695]                     lapply(seq_along(...future.elements_ii), 
[08:25:54.695]                       FUN = function(jj) {
[08:25:54.695]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.695]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.695]                           envir = globalenv(), inherits = FALSE)
[08:25:54.695]                         ...future.FUN(...future.X_jj, ...)
[08:25:54.695]                       })
[08:25:54.695]                   }
[08:25:54.695]                 }, args = future.call.arguments)
[08:25:54.695]             }))
[08:25:54.695]             future::FutureResult(value = ...future.value$value, 
[08:25:54.695]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.695]                   ...future.rng), globalenv = if (FALSE) 
[08:25:54.695]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:54.695]                     ...future.globalenv.names))
[08:25:54.695]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:54.695]         }, condition = base::local({
[08:25:54.695]             c <- base::c
[08:25:54.695]             inherits <- base::inherits
[08:25:54.695]             invokeRestart <- base::invokeRestart
[08:25:54.695]             length <- base::length
[08:25:54.695]             list <- base::list
[08:25:54.695]             seq.int <- base::seq.int
[08:25:54.695]             signalCondition <- base::signalCondition
[08:25:54.695]             sys.calls <- base::sys.calls
[08:25:54.695]             `[[` <- base::`[[`
[08:25:54.695]             `+` <- base::`+`
[08:25:54.695]             `<<-` <- base::`<<-`
[08:25:54.695]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:54.695]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:54.695]                   3L)]
[08:25:54.695]             }
[08:25:54.695]             function(cond) {
[08:25:54.695]                 is_error <- inherits(cond, "error")
[08:25:54.695]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:54.695]                   NULL)
[08:25:54.695]                 if (is_error) {
[08:25:54.695]                   sessionInformation <- function() {
[08:25:54.695]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:54.695]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:54.695]                       search = base::search(), system = base::Sys.info())
[08:25:54.695]                   }
[08:25:54.695]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.695]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:54.695]                     cond$call), session = sessionInformation(), 
[08:25:54.695]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:54.695]                   signalCondition(cond)
[08:25:54.695]                 }
[08:25:54.695]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:54.695]                 "immediateCondition"))) {
[08:25:54.695]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:54.695]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.695]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:54.695]                   if (TRUE && !signal) {
[08:25:54.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.695]                     {
[08:25:54.695]                       inherits <- base::inherits
[08:25:54.695]                       invokeRestart <- base::invokeRestart
[08:25:54.695]                       is.null <- base::is.null
[08:25:54.695]                       muffled <- FALSE
[08:25:54.695]                       if (inherits(cond, "message")) {
[08:25:54.695]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.695]                         if (muffled) 
[08:25:54.695]                           invokeRestart("muffleMessage")
[08:25:54.695]                       }
[08:25:54.695]                       else if (inherits(cond, "warning")) {
[08:25:54.695]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.695]                         if (muffled) 
[08:25:54.695]                           invokeRestart("muffleWarning")
[08:25:54.695]                       }
[08:25:54.695]                       else if (inherits(cond, "condition")) {
[08:25:54.695]                         if (!is.null(pattern)) {
[08:25:54.695]                           computeRestarts <- base::computeRestarts
[08:25:54.695]                           grepl <- base::grepl
[08:25:54.695]                           restarts <- computeRestarts(cond)
[08:25:54.695]                           for (restart in restarts) {
[08:25:54.695]                             name <- restart$name
[08:25:54.695]                             if (is.null(name)) 
[08:25:54.695]                               next
[08:25:54.695]                             if (!grepl(pattern, name)) 
[08:25:54.695]                               next
[08:25:54.695]                             invokeRestart(restart)
[08:25:54.695]                             muffled <- TRUE
[08:25:54.695]                             break
[08:25:54.695]                           }
[08:25:54.695]                         }
[08:25:54.695]                       }
[08:25:54.695]                       invisible(muffled)
[08:25:54.695]                     }
[08:25:54.695]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.695]                   }
[08:25:54.695]                 }
[08:25:54.695]                 else {
[08:25:54.695]                   if (TRUE) {
[08:25:54.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.695]                     {
[08:25:54.695]                       inherits <- base::inherits
[08:25:54.695]                       invokeRestart <- base::invokeRestart
[08:25:54.695]                       is.null <- base::is.null
[08:25:54.695]                       muffled <- FALSE
[08:25:54.695]                       if (inherits(cond, "message")) {
[08:25:54.695]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.695]                         if (muffled) 
[08:25:54.695]                           invokeRestart("muffleMessage")
[08:25:54.695]                       }
[08:25:54.695]                       else if (inherits(cond, "warning")) {
[08:25:54.695]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.695]                         if (muffled) 
[08:25:54.695]                           invokeRestart("muffleWarning")
[08:25:54.695]                       }
[08:25:54.695]                       else if (inherits(cond, "condition")) {
[08:25:54.695]                         if (!is.null(pattern)) {
[08:25:54.695]                           computeRestarts <- base::computeRestarts
[08:25:54.695]                           grepl <- base::grepl
[08:25:54.695]                           restarts <- computeRestarts(cond)
[08:25:54.695]                           for (restart in restarts) {
[08:25:54.695]                             name <- restart$name
[08:25:54.695]                             if (is.null(name)) 
[08:25:54.695]                               next
[08:25:54.695]                             if (!grepl(pattern, name)) 
[08:25:54.695]                               next
[08:25:54.695]                             invokeRestart(restart)
[08:25:54.695]                             muffled <- TRUE
[08:25:54.695]                             break
[08:25:54.695]                           }
[08:25:54.695]                         }
[08:25:54.695]                       }
[08:25:54.695]                       invisible(muffled)
[08:25:54.695]                     }
[08:25:54.695]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.695]                   }
[08:25:54.695]                 }
[08:25:54.695]             }
[08:25:54.695]         }))
[08:25:54.695]     }, error = function(ex) {
[08:25:54.695]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:54.695]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.695]                 ...future.rng), started = ...future.startTime, 
[08:25:54.695]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:54.695]             version = "1.8"), class = "FutureResult")
[08:25:54.695]     }, finally = {
[08:25:54.695]         if (!identical(...future.workdir, getwd())) 
[08:25:54.695]             setwd(...future.workdir)
[08:25:54.695]         {
[08:25:54.695]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:54.695]                 ...future.oldOptions$nwarnings <- NULL
[08:25:54.695]             }
[08:25:54.695]             base::options(...future.oldOptions)
[08:25:54.695]             if (.Platform$OS.type == "windows") {
[08:25:54.695]                 old_names <- names(...future.oldEnvVars)
[08:25:54.695]                 envs <- base::Sys.getenv()
[08:25:54.695]                 names <- names(envs)
[08:25:54.695]                 common <- intersect(names, old_names)
[08:25:54.695]                 added <- setdiff(names, old_names)
[08:25:54.695]                 removed <- setdiff(old_names, names)
[08:25:54.695]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:54.695]                   envs[common]]
[08:25:54.695]                 NAMES <- toupper(changed)
[08:25:54.695]                 args <- list()
[08:25:54.695]                 for (kk in seq_along(NAMES)) {
[08:25:54.695]                   name <- changed[[kk]]
[08:25:54.695]                   NAME <- NAMES[[kk]]
[08:25:54.695]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.695]                     next
[08:25:54.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.695]                 }
[08:25:54.695]                 NAMES <- toupper(added)
[08:25:54.695]                 for (kk in seq_along(NAMES)) {
[08:25:54.695]                   name <- added[[kk]]
[08:25:54.695]                   NAME <- NAMES[[kk]]
[08:25:54.695]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.695]                     next
[08:25:54.695]                   args[[name]] <- ""
[08:25:54.695]                 }
[08:25:54.695]                 NAMES <- toupper(removed)
[08:25:54.695]                 for (kk in seq_along(NAMES)) {
[08:25:54.695]                   name <- removed[[kk]]
[08:25:54.695]                   NAME <- NAMES[[kk]]
[08:25:54.695]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.695]                     next
[08:25:54.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.695]                 }
[08:25:54.695]                 if (length(args) > 0) 
[08:25:54.695]                   base::do.call(base::Sys.setenv, args = args)
[08:25:54.695]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:54.695]             }
[08:25:54.695]             else {
[08:25:54.695]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:54.695]             }
[08:25:54.695]             {
[08:25:54.695]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:54.695]                   0L) {
[08:25:54.695]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:54.695]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:54.695]                   base::options(opts)
[08:25:54.695]                 }
[08:25:54.695]                 {
[08:25:54.695]                   {
[08:25:54.695]                     base::assign(".Random.seed", c(10403L, 2L, 
[08:25:54.695]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[08:25:54.695]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[08:25:54.695]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[08:25:54.695]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[08:25:54.695]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[08:25:54.695]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[08:25:54.695]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[08:25:54.695]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[08:25:54.695]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[08:25:54.695]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[08:25:54.695]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[08:25:54.695]                     -1512233174L, -1985955764L, -425390065L, 
[08:25:54.695]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[08:25:54.695]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[08:25:54.695]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[08:25:54.695]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[08:25:54.695]                     1818328109L, -1284085436L, -1981489558L, 
[08:25:54.695]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[08:25:54.695]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[08:25:54.695]                     -1718567047L, -793788661L, -1133789126L, 
[08:25:54.695]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[08:25:54.695]                     -1823521982L, -1345991523L, -1672661737L, 
[08:25:54.695]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[08:25:54.695]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[08:25:54.695]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[08:25:54.695]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[08:25:54.695]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[08:25:54.695]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[08:25:54.695]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[08:25:54.695]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[08:25:54.695]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[08:25:54.695]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[08:25:54.695]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[08:25:54.695]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[08:25:54.695]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[08:25:54.695]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[08:25:54.695]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[08:25:54.695]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[08:25:54.695]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[08:25:54.695]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[08:25:54.695]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[08:25:54.695]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[08:25:54.695]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[08:25:54.695]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[08:25:54.695]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[08:25:54.695]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[08:25:54.695]                     -1119334354L, -1521015416L, -2041922421L, 
[08:25:54.695]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[08:25:54.695]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[08:25:54.695]                     1232111981L, -1801753084L, -1608606422L, 
[08:25:54.695]                     -1172096363L, 1420874031L, -1210473418L, 
[08:25:54.695]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[08:25:54.695]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[08:25:54.695]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[08:25:54.695]                     679371266L, -591318819L, -104578089L, -172818754L, 
[08:25:54.695]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[08:25:54.695]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[08:25:54.695]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[08:25:54.695]                     -332493318L, -1978392251L, -1691039632L, 
[08:25:54.695]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[08:25:54.695]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[08:25:54.695]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[08:25:54.695]                     87560756L, -87565624L, 426345146L, -699970416L, 
[08:25:54.695]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[08:25:54.695]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[08:25:54.695]                     -1178330196L, -687617348L, -1701912078L, 
[08:25:54.695]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[08:25:54.695]                     -1345416048L, 1816730492L, -1570431212L, 
[08:25:54.695]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[08:25:54.695]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[08:25:54.695]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[08:25:54.695]                     -1493184262L, -1943836976L, -590788308L, 
[08:25:54.695]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[08:25:54.695]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[08:25:54.695]                     1274857340L, -1205842638L, -1938479504L, 
[08:25:54.695]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[08:25:54.695]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[08:25:54.695]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[08:25:54.695]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[08:25:54.695]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[08:25:54.695]                     -1460751252L, 1201879444L, -1459788718L, 
[08:25:54.695]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[08:25:54.695]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[08:25:54.695]                     -420945808L, -1997735900L, -1838404552L, 
[08:25:54.695]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[08:25:54.695]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[08:25:54.695]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[08:25:54.695]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[08:25:54.695]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[08:25:54.695]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[08:25:54.695]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[08:25:54.695]                     942193650L, 751741680L, 689743428L, -18455976L, 
[08:25:54.695]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[08:25:54.695]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[08:25:54.695]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[08:25:54.695]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[08:25:54.695]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[08:25:54.695]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[08:25:54.695]                     -1357570110L, 1896595240L, -2066952276L, 
[08:25:54.695]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[08:25:54.695]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[08:25:54.695]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[08:25:54.695]                     769655120L, 236357794L, 181393736L, -13334772L, 
[08:25:54.695]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[08:25:54.695]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[08:25:54.695]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[08:25:54.695]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[08:25:54.695]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[08:25:54.695]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[08:25:54.695]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[08:25:54.695]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[08:25:54.695]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[08:25:54.695]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[08:25:54.695]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[08:25:54.695]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[08:25:54.695]                     -1365842884L, -438961294L, -1851472272L, 
[08:25:54.695]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[08:25:54.695]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[08:25:54.695]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[08:25:54.695]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[08:25:54.695]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[08:25:54.695]                     -594809770L, -2146766621L, -2013964635L, 
[08:25:54.695]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[08:25:54.695]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[08:25:54.695]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[08:25:54.695]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[08:25:54.695]                     -1426021878L, -1285634264L, 1507547537L, 
[08:25:54.695]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[08:25:54.695]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[08:25:54.695]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[08:25:54.695]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[08:25:54.695]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[08:25:54.695]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[08:25:54.695]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[08:25:54.695]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[08:25:54.695]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[08:25:54.695]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[08:25:54.695]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[08:25:54.695]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[08:25:54.695]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[08:25:54.695]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[08:25:54.695]                     -1604604761L, 1421229008L, -1268333714L, 
[08:25:54.695]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[08:25:54.695]                     -2070476623L, -2099222749L, 1141171236L, 
[08:25:54.695]                     -146426158L, -1797385433L, -1129376399L, 
[08:25:54.695]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[08:25:54.695]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[08:25:54.695]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[08:25:54.695]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[08:25:54.695]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[08:25:54.695]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[08:25:54.695]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[08:25:54.695]                     -1092079724L, -1765622238L, -1882554057L, 
[08:25:54.695]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[08:25:54.695]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[08:25:54.695]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[08:25:54.695]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[08:25:54.695]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[08:25:54.695]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[08:25:54.695]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[08:25:54.695]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[08:25:54.695]                     865377681L, -1127426242L), envir = base::globalenv(), 
[08:25:54.695]                       inherits = FALSE)
[08:25:54.695]                     NULL
[08:25:54.695]                   }
[08:25:54.695]                   options(future.plan = NULL)
[08:25:54.695]                   if (is.na(NA_character_)) 
[08:25:54.695]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.695]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:54.695]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:54.695]                     .init = FALSE)
[08:25:54.695]                 }
[08:25:54.695]             }
[08:25:54.695]         }
[08:25:54.695]     })
[08:25:54.695]     if (TRUE) {
[08:25:54.695]         base::sink(type = "output", split = FALSE)
[08:25:54.695]         if (TRUE) {
[08:25:54.695]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:54.695]         }
[08:25:54.695]         else {
[08:25:54.695]             ...future.result["stdout"] <- base::list(NULL)
[08:25:54.695]         }
[08:25:54.695]         base::close(...future.stdout)
[08:25:54.695]         ...future.stdout <- NULL
[08:25:54.695]     }
[08:25:54.695]     ...future.result$conditions <- ...future.conditions
[08:25:54.695]     ...future.result$finished <- base::Sys.time()
[08:25:54.695]     ...future.result
[08:25:54.695] }
[08:25:54.698] assign_globals() ...
[08:25:54.698] List of 5
[08:25:54.698]  $ ...future.FUN            :function (...)  
[08:25:54.698]  $ future.call.arguments    : list()
[08:25:54.698]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.698]  $ ...future.elements_ii    :List of 5
[08:25:54.698]   ..$ : int 0
[08:25:54.698]   ..$ : int 0
[08:25:54.698]   ..$ : int 0
[08:25:54.698]   ..$ : int 0
[08:25:54.698]   ..$ : int 0
[08:25:54.698]  $ ...future.seeds_ii       :List of 5
[08:25:54.698]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[08:25:54.698]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[08:25:54.698]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[08:25:54.698]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[08:25:54.698]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[08:25:54.698]  $ ...future.globals.maxSize: NULL
[08:25:54.698]  - attr(*, "where")=List of 5
[08:25:54.698]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:54.698]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:54.698]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:54.698]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:54.698]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:54.698]  - attr(*, "resolved")= logi FALSE
[08:25:54.698]  - attr(*, "total_size")= num 7184
[08:25:54.698]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.698]  - attr(*, "already-done")= logi TRUE
[08:25:54.707] - reassign environment for ‘...future.FUN’
[08:25:54.708] - copied ‘...future.FUN’ to environment
[08:25:54.708] - copied ‘future.call.arguments’ to environment
[08:25:54.708] - copied ‘...future.elements_ii’ to environment
[08:25:54.708] - copied ‘...future.seeds_ii’ to environment
[08:25:54.708] - copied ‘...future.globals.maxSize’ to environment
[08:25:54.708] assign_globals() ... done
[08:25:54.708] plan(): Setting new future strategy stack:
[08:25:54.708] List of future strategies:
[08:25:54.708] 1. sequential:
[08:25:54.708]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.708]    - tweaked: FALSE
[08:25:54.708]    - call: NULL
[08:25:54.709] plan(): nbrOfWorkers() = 1
[08:25:54.710] plan(): Setting new future strategy stack:
[08:25:54.710] List of future strategies:
[08:25:54.710] 1. sequential:
[08:25:54.710]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.710]    - tweaked: FALSE
[08:25:54.710]    - call: plan(strategy)
[08:25:54.710] plan(): nbrOfWorkers() = 1
[08:25:54.710] SequentialFuture started (and completed)
[08:25:54.711] - Launch lazy future ... done
[08:25:54.711] run() for ‘SequentialFuture’ ... done
[08:25:54.711] Created future:
[08:25:54.711] SequentialFuture:
[08:25:54.711] Label: ‘future_replicate-1’
[08:25:54.711] Expression:
[08:25:54.711] {
[08:25:54.711]     do.call(function(...) {
[08:25:54.711]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.711]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.711]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.711]             on.exit(options(oopts), add = TRUE)
[08:25:54.711]         }
[08:25:54.711]         {
[08:25:54.711]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.711]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.711]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.711]                   envir = globalenv(), inherits = FALSE)
[08:25:54.711]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.711]             })
[08:25:54.711]         }
[08:25:54.711]     }, args = future.call.arguments)
[08:25:54.711] }
[08:25:54.711] Lazy evaluation: FALSE
[08:25:54.711] Asynchronous evaluation: FALSE
[08:25:54.711] Local evaluation: TRUE
[08:25:54.711] Environment: R_GlobalEnv
[08:25:54.711] Capture standard output: TRUE
[08:25:54.711] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:54.711] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:54.711] Packages: <none>
[08:25:54.711] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:54.711] Resolved: TRUE
[08:25:54.711] Value: 91 bytes of class ‘list’
[08:25:54.711] Early signaling: FALSE
[08:25:54.711] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:54.711] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.712] Chunk #1 of 1 ... DONE
[08:25:54.712] Launching 1 futures (chunks) ... DONE
[08:25:54.712] Resolving 1 futures (chunks) ...
[08:25:54.712] resolve() on list ...
[08:25:54.712]  recursive: 0
[08:25:54.712]  length: 1
[08:25:54.712] 
[08:25:54.712] resolved() for ‘SequentialFuture’ ...
[08:25:54.712] - state: ‘finished’
[08:25:54.712] - run: TRUE
[08:25:54.713] - result: ‘FutureResult’
[08:25:54.713] resolved() for ‘SequentialFuture’ ... done
[08:25:54.713] Future #1
[08:25:54.713] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:54.713] - nx: 1
[08:25:54.713] - relay: TRUE
[08:25:54.713] - stdout: TRUE
[08:25:54.713] - signal: TRUE
[08:25:54.713] - resignal: FALSE
[08:25:54.713] - force: TRUE
[08:25:54.713] - relayed: [n=1] FALSE
[08:25:54.714] - queued futures: [n=1] FALSE
[08:25:54.714]  - until=1
[08:25:54.714]  - relaying element #1
[08:25:54.714] - relayed: [n=1] TRUE
[08:25:54.714] - queued futures: [n=1] TRUE
[08:25:54.714] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:54.714]  length: 0 (resolved future 1)
[08:25:54.714] Relaying remaining futures
[08:25:54.714] signalConditionsASAP(NULL, pos=0) ...
[08:25:54.714] - nx: 1
[08:25:54.715] - relay: TRUE
[08:25:54.715] - stdout: TRUE
[08:25:54.715] - signal: TRUE
[08:25:54.715] - resignal: FALSE
[08:25:54.715] - force: TRUE
[08:25:54.715] - relayed: [n=1] TRUE
[08:25:54.715] - queued futures: [n=1] TRUE
 - flush all
[08:25:54.715] - relayed: [n=1] TRUE
[08:25:54.715] - queued futures: [n=1] TRUE
[08:25:54.715] signalConditionsASAP(NULL, pos=0) ... done
[08:25:54.715] resolve() on list ... DONE
[08:25:54.716]  - Number of value chunks collected: 1
[08:25:54.716] Resolving 1 futures (chunks) ... DONE
[08:25:54.716] Reducing values from 1 chunks ...
[08:25:54.716]  - Number of values collected after concatenation: 5
[08:25:54.716]  - Number of values expected: 5
[08:25:54.716] Reducing values from 1 chunks ... DONE
[08:25:54.716] future_lapply() ... DONE
[08:25:54.716] future_lapply() ...
[08:25:54.717] Generating random seeds ...
[08:25:54.717] Generating random seed streams for 5 elements ...
[08:25:54.717] Generating random seed streams for 5 elements ... DONE
[08:25:54.717] Generating random seeds ... DONE
[08:25:54.717] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:54.718] Number of chunks: 1
[08:25:54.718] getGlobalsAndPackagesXApply() ...
[08:25:54.718]  - future.globals: TRUE
[08:25:54.718] getGlobalsAndPackages() ...
[08:25:54.718] Searching for globals...
[08:25:54.719] - globals found: [2] ‘FUN’, ‘sample’
[08:25:54.719] Searching for globals ... DONE
[08:25:54.719] Resolving globals: FALSE
[08:25:54.720] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:54.720] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:54.720] - globals: [1] ‘FUN’
[08:25:54.720] 
[08:25:54.720] getGlobalsAndPackages() ... DONE
[08:25:54.720]  - globals found/used: [n=1] ‘FUN’
[08:25:54.720]  - needed namespaces: [n=0] 
[08:25:54.720] Finding globals ... DONE
[08:25:54.721]  - use_args: TRUE
[08:25:54.721]  - Getting '...' globals ...
[08:25:54.721] resolve() on list ...
[08:25:54.721]  recursive: 0
[08:25:54.721]  length: 1
[08:25:54.721]  elements: ‘...’
[08:25:54.721]  length: 0 (resolved future 1)
[08:25:54.721] resolve() on list ... DONE
[08:25:54.722]    - '...' content: [n=0] 
[08:25:54.722] List of 1
[08:25:54.722]  $ ...: list()
[08:25:54.722]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.722]  - attr(*, "where")=List of 1
[08:25:54.722]   ..$ ...:<environment: 0x55f775f6a430> 
[08:25:54.722]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.722]  - attr(*, "resolved")= logi TRUE
[08:25:54.722]  - attr(*, "total_size")= num NA
[08:25:54.724]  - Getting '...' globals ... DONE
[08:25:54.724] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:54.724] List of 2
[08:25:54.724]  $ ...future.FUN:function (...)  
[08:25:54.724]  $ ...          : list()
[08:25:54.724]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.724]  - attr(*, "where")=List of 2
[08:25:54.724]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:54.724]   ..$ ...          :<environment: 0x55f775f6a430> 
[08:25:54.724]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.724]  - attr(*, "resolved")= logi FALSE
[08:25:54.724]  - attr(*, "total_size")= num 7184
[08:25:54.727] Packages to be attached in all futures: [n=0] 
[08:25:54.727] getGlobalsAndPackagesXApply() ... DONE
[08:25:54.727] Number of futures (= number of chunks): 1
[08:25:54.727] Launching 1 futures (chunks) ...
[08:25:54.727] Chunk #1 of 1 ...
[08:25:54.728]  - Finding globals in 'X' for chunk #1 ...
[08:25:54.728] getGlobalsAndPackages() ...
[08:25:54.728] Searching for globals...
[08:25:54.728] 
[08:25:54.728] Searching for globals ... DONE
[08:25:54.728] - globals: [0] <none>
[08:25:54.728] getGlobalsAndPackages() ... DONE
[08:25:54.728]    + additional globals found: [n=0] 
[08:25:54.728]    + additional namespaces needed: [n=0] 
[08:25:54.729]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:54.729]  - seeds: [5] <seeds>
[08:25:54.729]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.729] getGlobalsAndPackages() ...
[08:25:54.729] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.729] Resolving globals: FALSE
[08:25:54.729] Tweak future expression to call with '...' arguments ...
[08:25:54.729] {
[08:25:54.729]     do.call(function(...) {
[08:25:54.729]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.729]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.729]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.729]             on.exit(options(oopts), add = TRUE)
[08:25:54.729]         }
[08:25:54.729]         {
[08:25:54.729]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.729]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.729]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.729]                   envir = globalenv(), inherits = FALSE)
[08:25:54.729]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.729]             })
[08:25:54.729]         }
[08:25:54.729]     }, args = future.call.arguments)
[08:25:54.729] }
[08:25:54.729] Tweak future expression to call with '...' arguments ... DONE
[08:25:54.730] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.730] 
[08:25:54.730] getGlobalsAndPackages() ... DONE
[08:25:54.730] run() for ‘Future’ ...
[08:25:54.730] - state: ‘created’
[08:25:54.731] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:54.731] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.731] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:54.731]   - Field: ‘label’
[08:25:54.731]   - Field: ‘local’
[08:25:54.731]   - Field: ‘owner’
[08:25:54.731]   - Field: ‘envir’
[08:25:54.733]   - Field: ‘packages’
[08:25:54.733]   - Field: ‘gc’
[08:25:54.733]   - Field: ‘conditions’
[08:25:54.733]   - Field: ‘expr’
[08:25:54.734]   - Field: ‘uuid’
[08:25:54.734]   - Field: ‘seed’
[08:25:54.734]   - Field: ‘version’
[08:25:54.734]   - Field: ‘result’
[08:25:54.734]   - Field: ‘asynchronous’
[08:25:54.734]   - Field: ‘calls’
[08:25:54.734]   - Field: ‘globals’
[08:25:54.734]   - Field: ‘stdout’
[08:25:54.734]   - Field: ‘earlySignal’
[08:25:54.734]   - Field: ‘lazy’
[08:25:54.734]   - Field: ‘state’
[08:25:54.734] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:54.735] - Launch lazy future ...
[08:25:54.735] Packages needed by the future expression (n = 0): <none>
[08:25:54.735] Packages needed by future strategies (n = 0): <none>
[08:25:54.735] {
[08:25:54.735]     {
[08:25:54.735]         {
[08:25:54.735]             ...future.startTime <- base::Sys.time()
[08:25:54.735]             {
[08:25:54.735]                 {
[08:25:54.735]                   {
[08:25:54.735]                     base::local({
[08:25:54.735]                       has_future <- base::requireNamespace("future", 
[08:25:54.735]                         quietly = TRUE)
[08:25:54.735]                       if (has_future) {
[08:25:54.735]                         ns <- base::getNamespace("future")
[08:25:54.735]                         version <- ns[[".package"]][["version"]]
[08:25:54.735]                         if (is.null(version)) 
[08:25:54.735]                           version <- utils::packageVersion("future")
[08:25:54.735]                       }
[08:25:54.735]                       else {
[08:25:54.735]                         version <- NULL
[08:25:54.735]                       }
[08:25:54.735]                       if (!has_future || version < "1.8.0") {
[08:25:54.735]                         info <- base::c(r_version = base::gsub("R version ", 
[08:25:54.735]                           "", base::R.version$version.string), 
[08:25:54.735]                           platform = base::sprintf("%s (%s-bit)", 
[08:25:54.735]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:54.735]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:54.735]                             "release", "version")], collapse = " "), 
[08:25:54.735]                           hostname = base::Sys.info()[["nodename"]])
[08:25:54.735]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:25:54.735]                           info)
[08:25:54.735]                         info <- base::paste(info, collapse = "; ")
[08:25:54.735]                         if (!has_future) {
[08:25:54.735]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:54.735]                             info)
[08:25:54.735]                         }
[08:25:54.735]                         else {
[08:25:54.735]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:54.735]                             info, version)
[08:25:54.735]                         }
[08:25:54.735]                         base::stop(msg)
[08:25:54.735]                       }
[08:25:54.735]                     })
[08:25:54.735]                   }
[08:25:54.735]                   ...future.strategy.old <- future::plan("list")
[08:25:54.735]                   options(future.plan = NULL)
[08:25:54.735]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.735]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:54.735]                 }
[08:25:54.735]                 ...future.workdir <- getwd()
[08:25:54.735]             }
[08:25:54.735]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:54.735]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:54.735]         }
[08:25:54.735]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:54.735]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:54.735]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:54.735]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:54.735]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:54.735]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:54.735]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:54.735]             base::names(...future.oldOptions))
[08:25:54.735]     }
[08:25:54.735]     if (FALSE) {
[08:25:54.735]     }
[08:25:54.735]     else {
[08:25:54.735]         if (TRUE) {
[08:25:54.735]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:54.735]                 open = "w")
[08:25:54.735]         }
[08:25:54.735]         else {
[08:25:54.735]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:54.735]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:54.735]         }
[08:25:54.735]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:54.735]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:54.735]             base::sink(type = "output", split = FALSE)
[08:25:54.735]             base::close(...future.stdout)
[08:25:54.735]         }, add = TRUE)
[08:25:54.735]     }
[08:25:54.735]     ...future.frame <- base::sys.nframe()
[08:25:54.735]     ...future.conditions <- base::list()
[08:25:54.735]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:54.735]     if (FALSE) {
[08:25:54.735]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:54.735]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:54.735]     }
[08:25:54.735]     ...future.result <- base::tryCatch({
[08:25:54.735]         base::withCallingHandlers({
[08:25:54.735]             ...future.value <- base::withVisible(base::local({
[08:25:54.735]                 do.call(function(...) {
[08:25:54.735]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.735]                   if (!identical(...future.globals.maxSize.org, 
[08:25:54.735]                     ...future.globals.maxSize)) {
[08:25:54.735]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.735]                     on.exit(options(oopts), add = TRUE)
[08:25:54.735]                   }
[08:25:54.735]                   {
[08:25:54.735]                     lapply(seq_along(...future.elements_ii), 
[08:25:54.735]                       FUN = function(jj) {
[08:25:54.735]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.735]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.735]                           envir = globalenv(), inherits = FALSE)
[08:25:54.735]                         ...future.FUN(...future.X_jj, ...)
[08:25:54.735]                       })
[08:25:54.735]                   }
[08:25:54.735]                 }, args = future.call.arguments)
[08:25:54.735]             }))
[08:25:54.735]             future::FutureResult(value = ...future.value$value, 
[08:25:54.735]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.735]                   ...future.rng), globalenv = if (FALSE) 
[08:25:54.735]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:54.735]                     ...future.globalenv.names))
[08:25:54.735]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:54.735]         }, condition = base::local({
[08:25:54.735]             c <- base::c
[08:25:54.735]             inherits <- base::inherits
[08:25:54.735]             invokeRestart <- base::invokeRestart
[08:25:54.735]             length <- base::length
[08:25:54.735]             list <- base::list
[08:25:54.735]             seq.int <- base::seq.int
[08:25:54.735]             signalCondition <- base::signalCondition
[08:25:54.735]             sys.calls <- base::sys.calls
[08:25:54.735]             `[[` <- base::`[[`
[08:25:54.735]             `+` <- base::`+`
[08:25:54.735]             `<<-` <- base::`<<-`
[08:25:54.735]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:54.735]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:54.735]                   3L)]
[08:25:54.735]             }
[08:25:54.735]             function(cond) {
[08:25:54.735]                 is_error <- inherits(cond, "error")
[08:25:54.735]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:54.735]                   NULL)
[08:25:54.735]                 if (is_error) {
[08:25:54.735]                   sessionInformation <- function() {
[08:25:54.735]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:54.735]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:54.735]                       search = base::search(), system = base::Sys.info())
[08:25:54.735]                   }
[08:25:54.735]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.735]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:54.735]                     cond$call), session = sessionInformation(), 
[08:25:54.735]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:54.735]                   signalCondition(cond)
[08:25:54.735]                 }
[08:25:54.735]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:54.735]                 "immediateCondition"))) {
[08:25:54.735]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:54.735]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.735]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:54.735]                   if (TRUE && !signal) {
[08:25:54.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.735]                     {
[08:25:54.735]                       inherits <- base::inherits
[08:25:54.735]                       invokeRestart <- base::invokeRestart
[08:25:54.735]                       is.null <- base::is.null
[08:25:54.735]                       muffled <- FALSE
[08:25:54.735]                       if (inherits(cond, "message")) {
[08:25:54.735]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.735]                         if (muffled) 
[08:25:54.735]                           invokeRestart("muffleMessage")
[08:25:54.735]                       }
[08:25:54.735]                       else if (inherits(cond, "warning")) {
[08:25:54.735]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.735]                         if (muffled) 
[08:25:54.735]                           invokeRestart("muffleWarning")
[08:25:54.735]                       }
[08:25:54.735]                       else if (inherits(cond, "condition")) {
[08:25:54.735]                         if (!is.null(pattern)) {
[08:25:54.735]                           computeRestarts <- base::computeRestarts
[08:25:54.735]                           grepl <- base::grepl
[08:25:54.735]                           restarts <- computeRestarts(cond)
[08:25:54.735]                           for (restart in restarts) {
[08:25:54.735]                             name <- restart$name
[08:25:54.735]                             if (is.null(name)) 
[08:25:54.735]                               next
[08:25:54.735]                             if (!grepl(pattern, name)) 
[08:25:54.735]                               next
[08:25:54.735]                             invokeRestart(restart)
[08:25:54.735]                             muffled <- TRUE
[08:25:54.735]                             break
[08:25:54.735]                           }
[08:25:54.735]                         }
[08:25:54.735]                       }
[08:25:54.735]                       invisible(muffled)
[08:25:54.735]                     }
[08:25:54.735]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.735]                   }
[08:25:54.735]                 }
[08:25:54.735]                 else {
[08:25:54.735]                   if (TRUE) {
[08:25:54.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.735]                     {
[08:25:54.735]                       inherits <- base::inherits
[08:25:54.735]                       invokeRestart <- base::invokeRestart
[08:25:54.735]                       is.null <- base::is.null
[08:25:54.735]                       muffled <- FALSE
[08:25:54.735]                       if (inherits(cond, "message")) {
[08:25:54.735]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.735]                         if (muffled) 
[08:25:54.735]                           invokeRestart("muffleMessage")
[08:25:54.735]                       }
[08:25:54.735]                       else if (inherits(cond, "warning")) {
[08:25:54.735]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.735]                         if (muffled) 
[08:25:54.735]                           invokeRestart("muffleWarning")
[08:25:54.735]                       }
[08:25:54.735]                       else if (inherits(cond, "condition")) {
[08:25:54.735]                         if (!is.null(pattern)) {
[08:25:54.735]                           computeRestarts <- base::computeRestarts
[08:25:54.735]                           grepl <- base::grepl
[08:25:54.735]                           restarts <- computeRestarts(cond)
[08:25:54.735]                           for (restart in restarts) {
[08:25:54.735]                             name <- restart$name
[08:25:54.735]                             if (is.null(name)) 
[08:25:54.735]                               next
[08:25:54.735]                             if (!grepl(pattern, name)) 
[08:25:54.735]                               next
[08:25:54.735]                             invokeRestart(restart)
[08:25:54.735]                             muffled <- TRUE
[08:25:54.735]                             break
[08:25:54.735]                           }
[08:25:54.735]                         }
[08:25:54.735]                       }
[08:25:54.735]                       invisible(muffled)
[08:25:54.735]                     }
[08:25:54.735]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.735]                   }
[08:25:54.735]                 }
[08:25:54.735]             }
[08:25:54.735]         }))
[08:25:54.735]     }, error = function(ex) {
[08:25:54.735]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:54.735]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.735]                 ...future.rng), started = ...future.startTime, 
[08:25:54.735]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:54.735]             version = "1.8"), class = "FutureResult")
[08:25:54.735]     }, finally = {
[08:25:54.735]         if (!identical(...future.workdir, getwd())) 
[08:25:54.735]             setwd(...future.workdir)
[08:25:54.735]         {
[08:25:54.735]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:54.735]                 ...future.oldOptions$nwarnings <- NULL
[08:25:54.735]             }
[08:25:54.735]             base::options(...future.oldOptions)
[08:25:54.735]             if (.Platform$OS.type == "windows") {
[08:25:54.735]                 old_names <- names(...future.oldEnvVars)
[08:25:54.735]                 envs <- base::Sys.getenv()
[08:25:54.735]                 names <- names(envs)
[08:25:54.735]                 common <- intersect(names, old_names)
[08:25:54.735]                 added <- setdiff(names, old_names)
[08:25:54.735]                 removed <- setdiff(old_names, names)
[08:25:54.735]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:54.735]                   envs[common]]
[08:25:54.735]                 NAMES <- toupper(changed)
[08:25:54.735]                 args <- list()
[08:25:54.735]                 for (kk in seq_along(NAMES)) {
[08:25:54.735]                   name <- changed[[kk]]
[08:25:54.735]                   NAME <- NAMES[[kk]]
[08:25:54.735]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.735]                     next
[08:25:54.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.735]                 }
[08:25:54.735]                 NAMES <- toupper(added)
[08:25:54.735]                 for (kk in seq_along(NAMES)) {
[08:25:54.735]                   name <- added[[kk]]
[08:25:54.735]                   NAME <- NAMES[[kk]]
[08:25:54.735]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.735]                     next
[08:25:54.735]                   args[[name]] <- ""
[08:25:54.735]                 }
[08:25:54.735]                 NAMES <- toupper(removed)
[08:25:54.735]                 for (kk in seq_along(NAMES)) {
[08:25:54.735]                   name <- removed[[kk]]
[08:25:54.735]                   NAME <- NAMES[[kk]]
[08:25:54.735]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.735]                     next
[08:25:54.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.735]                 }
[08:25:54.735]                 if (length(args) > 0) 
[08:25:54.735]                   base::do.call(base::Sys.setenv, args = args)
[08:25:54.735]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:54.735]             }
[08:25:54.735]             else {
[08:25:54.735]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:54.735]             }
[08:25:54.735]             {
[08:25:54.735]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:54.735]                   0L) {
[08:25:54.735]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:54.735]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:54.735]                   base::options(opts)
[08:25:54.735]                 }
[08:25:54.735]                 {
[08:25:54.735]                   {
[08:25:54.735]                     base::assign(".Random.seed", c(10403L, 2L, 
[08:25:54.735]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[08:25:54.735]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[08:25:54.735]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[08:25:54.735]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[08:25:54.735]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[08:25:54.735]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[08:25:54.735]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[08:25:54.735]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[08:25:54.735]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[08:25:54.735]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[08:25:54.735]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[08:25:54.735]                     -1512233174L, -1985955764L, -425390065L, 
[08:25:54.735]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[08:25:54.735]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[08:25:54.735]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[08:25:54.735]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[08:25:54.735]                     1818328109L, -1284085436L, -1981489558L, 
[08:25:54.735]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[08:25:54.735]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[08:25:54.735]                     -1718567047L, -793788661L, -1133789126L, 
[08:25:54.735]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[08:25:54.735]                     -1823521982L, -1345991523L, -1672661737L, 
[08:25:54.735]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[08:25:54.735]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[08:25:54.735]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[08:25:54.735]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[08:25:54.735]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[08:25:54.735]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[08:25:54.735]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[08:25:54.735]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[08:25:54.735]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[08:25:54.735]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[08:25:54.735]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[08:25:54.735]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[08:25:54.735]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[08:25:54.735]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[08:25:54.735]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[08:25:54.735]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[08:25:54.735]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[08:25:54.735]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[08:25:54.735]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[08:25:54.735]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[08:25:54.735]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[08:25:54.735]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[08:25:54.735]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[08:25:54.735]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[08:25:54.735]                     -1119334354L, -1521015416L, -2041922421L, 
[08:25:54.735]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[08:25:54.735]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[08:25:54.735]                     1232111981L, -1801753084L, -1608606422L, 
[08:25:54.735]                     -1172096363L, 1420874031L, -1210473418L, 
[08:25:54.735]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[08:25:54.735]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[08:25:54.735]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[08:25:54.735]                     679371266L, -591318819L, -104578089L, -172818754L, 
[08:25:54.735]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[08:25:54.735]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[08:25:54.735]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[08:25:54.735]                     -332493318L, -1978392251L, -1691039632L, 
[08:25:54.735]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[08:25:54.735]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[08:25:54.735]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[08:25:54.735]                     87560756L, -87565624L, 426345146L, -699970416L, 
[08:25:54.735]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[08:25:54.735]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[08:25:54.735]                     -1178330196L, -687617348L, -1701912078L, 
[08:25:54.735]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[08:25:54.735]                     -1345416048L, 1816730492L, -1570431212L, 
[08:25:54.735]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[08:25:54.735]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[08:25:54.735]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[08:25:54.735]                     -1493184262L, -1943836976L, -590788308L, 
[08:25:54.735]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[08:25:54.735]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[08:25:54.735]                     1274857340L, -1205842638L, -1938479504L, 
[08:25:54.735]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[08:25:54.735]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[08:25:54.735]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[08:25:54.735]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[08:25:54.735]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[08:25:54.735]                     -1460751252L, 1201879444L, -1459788718L, 
[08:25:54.735]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[08:25:54.735]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[08:25:54.735]                     -420945808L, -1997735900L, -1838404552L, 
[08:25:54.735]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[08:25:54.735]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[08:25:54.735]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[08:25:54.735]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[08:25:54.735]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[08:25:54.735]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[08:25:54.735]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[08:25:54.735]                     942193650L, 751741680L, 689743428L, -18455976L, 
[08:25:54.735]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[08:25:54.735]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[08:25:54.735]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[08:25:54.735]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[08:25:54.735]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[08:25:54.735]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[08:25:54.735]                     -1357570110L, 1896595240L, -2066952276L, 
[08:25:54.735]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[08:25:54.735]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[08:25:54.735]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[08:25:54.735]                     769655120L, 236357794L, 181393736L, -13334772L, 
[08:25:54.735]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[08:25:54.735]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[08:25:54.735]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[08:25:54.735]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[08:25:54.735]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[08:25:54.735]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[08:25:54.735]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[08:25:54.735]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[08:25:54.735]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[08:25:54.735]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[08:25:54.735]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[08:25:54.735]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[08:25:54.735]                     -1365842884L, -438961294L, -1851472272L, 
[08:25:54.735]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[08:25:54.735]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[08:25:54.735]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[08:25:54.735]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[08:25:54.735]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[08:25:54.735]                     -594809770L, -2146766621L, -2013964635L, 
[08:25:54.735]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[08:25:54.735]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[08:25:54.735]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[08:25:54.735]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[08:25:54.735]                     -1426021878L, -1285634264L, 1507547537L, 
[08:25:54.735]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[08:25:54.735]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[08:25:54.735]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[08:25:54.735]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[08:25:54.735]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[08:25:54.735]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[08:25:54.735]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[08:25:54.735]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[08:25:54.735]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[08:25:54.735]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[08:25:54.735]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[08:25:54.735]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[08:25:54.735]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[08:25:54.735]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[08:25:54.735]                     -1604604761L, 1421229008L, -1268333714L, 
[08:25:54.735]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[08:25:54.735]                     -2070476623L, -2099222749L, 1141171236L, 
[08:25:54.735]                     -146426158L, -1797385433L, -1129376399L, 
[08:25:54.735]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[08:25:54.735]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[08:25:54.735]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[08:25:54.735]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[08:25:54.735]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[08:25:54.735]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[08:25:54.735]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[08:25:54.735]                     -1092079724L, -1765622238L, -1882554057L, 
[08:25:54.735]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[08:25:54.735]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[08:25:54.735]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[08:25:54.735]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[08:25:54.735]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[08:25:54.735]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[08:25:54.735]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[08:25:54.735]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[08:25:54.735]                     865377681L, -1127426242L), envir = base::globalenv(), 
[08:25:54.735]                       inherits = FALSE)
[08:25:54.735]                     NULL
[08:25:54.735]                   }
[08:25:54.735]                   options(future.plan = NULL)
[08:25:54.735]                   if (is.na(NA_character_)) 
[08:25:54.735]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.735]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:54.735]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:54.735]                     .init = FALSE)
[08:25:54.735]                 }
[08:25:54.735]             }
[08:25:54.735]         }
[08:25:54.735]     })
[08:25:54.735]     if (TRUE) {
[08:25:54.735]         base::sink(type = "output", split = FALSE)
[08:25:54.735]         if (TRUE) {
[08:25:54.735]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:54.735]         }
[08:25:54.735]         else {
[08:25:54.735]             ...future.result["stdout"] <- base::list(NULL)
[08:25:54.735]         }
[08:25:54.735]         base::close(...future.stdout)
[08:25:54.735]         ...future.stdout <- NULL
[08:25:54.735]     }
[08:25:54.735]     ...future.result$conditions <- ...future.conditions
[08:25:54.735]     ...future.result$finished <- base::Sys.time()
[08:25:54.735]     ...future.result
[08:25:54.735] }
[08:25:54.738] assign_globals() ...
[08:25:54.738] List of 5
[08:25:54.738]  $ ...future.FUN            :function (...)  
[08:25:54.738]  $ future.call.arguments    : list()
[08:25:54.738]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.738]  $ ...future.elements_ii    :List of 5
[08:25:54.738]   ..$ : int 0
[08:25:54.738]   ..$ : int 0
[08:25:54.738]   ..$ : int 0
[08:25:54.738]   ..$ : int 0
[08:25:54.738]   ..$ : int 0
[08:25:54.738]  $ ...future.seeds_ii       :List of 5
[08:25:54.738]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[08:25:54.738]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[08:25:54.738]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[08:25:54.738]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[08:25:54.738]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[08:25:54.738]  $ ...future.globals.maxSize: NULL
[08:25:54.738]  - attr(*, "where")=List of 5
[08:25:54.738]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:54.738]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:54.738]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:54.738]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:54.738]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:54.738]  - attr(*, "resolved")= logi FALSE
[08:25:54.738]  - attr(*, "total_size")= num 7184
[08:25:54.738]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.738]  - attr(*, "already-done")= logi TRUE
[08:25:54.745] - reassign environment for ‘...future.FUN’
[08:25:54.745] - copied ‘...future.FUN’ to environment
[08:25:54.746] - copied ‘future.call.arguments’ to environment
[08:25:54.746] - copied ‘...future.elements_ii’ to environment
[08:25:54.746] - copied ‘...future.seeds_ii’ to environment
[08:25:54.746] - copied ‘...future.globals.maxSize’ to environment
[08:25:54.746] assign_globals() ... done
[08:25:54.746] plan(): Setting new future strategy stack:
[08:25:54.746] List of future strategies:
[08:25:54.746] 1. sequential:
[08:25:54.746]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.746]    - tweaked: FALSE
[08:25:54.746]    - call: NULL
[08:25:54.747] plan(): nbrOfWorkers() = 1
[08:25:54.748] plan(): Setting new future strategy stack:
[08:25:54.748] List of future strategies:
[08:25:54.748] 1. sequential:
[08:25:54.748]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.748]    - tweaked: FALSE
[08:25:54.748]    - call: plan(strategy)
[08:25:54.748] plan(): nbrOfWorkers() = 1
[08:25:54.748] SequentialFuture started (and completed)
[08:25:54.748] - Launch lazy future ... done
[08:25:54.748] run() for ‘SequentialFuture’ ... done
[08:25:54.749] Created future:
[08:25:54.749] SequentialFuture:
[08:25:54.749] Label: ‘future_replicate-1’
[08:25:54.749] Expression:
[08:25:54.749] {
[08:25:54.749]     do.call(function(...) {
[08:25:54.749]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.749]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.749]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.749]             on.exit(options(oopts), add = TRUE)
[08:25:54.749]         }
[08:25:54.749]         {
[08:25:54.749]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.749]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.749]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.749]                   envir = globalenv(), inherits = FALSE)
[08:25:54.749]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.749]             })
[08:25:54.749]         }
[08:25:54.749]     }, args = future.call.arguments)
[08:25:54.749] }
[08:25:54.749] Lazy evaluation: FALSE
[08:25:54.749] Asynchronous evaluation: FALSE
[08:25:54.749] Local evaluation: TRUE
[08:25:54.749] Environment: R_GlobalEnv
[08:25:54.749] Capture standard output: TRUE
[08:25:54.749] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:54.749] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:54.749] Packages: <none>
[08:25:54.749] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:54.749] Resolved: TRUE
[08:25:54.749] Value: 91 bytes of class ‘list’
[08:25:54.749] Early signaling: FALSE
[08:25:54.749] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:54.749] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.750] Chunk #1 of 1 ... DONE
[08:25:54.750] Launching 1 futures (chunks) ... DONE
[08:25:54.750] Resolving 1 futures (chunks) ...
[08:25:54.750] resolve() on list ...
[08:25:54.750]  recursive: 0
[08:25:54.750]  length: 1
[08:25:54.750] 
[08:25:54.750] resolved() for ‘SequentialFuture’ ...
[08:25:54.750] - state: ‘finished’
[08:25:54.750] - run: TRUE
[08:25:54.750] - result: ‘FutureResult’
[08:25:54.751] resolved() for ‘SequentialFuture’ ... done
[08:25:54.751] Future #1
[08:25:54.751] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:54.751] - nx: 1
[08:25:54.751] - relay: TRUE
[08:25:54.751] - stdout: TRUE
[08:25:54.751] - signal: TRUE
[08:25:54.751] - resignal: FALSE
[08:25:54.751] - force: TRUE
[08:25:54.751] - relayed: [n=1] FALSE
[08:25:54.751] - queued futures: [n=1] FALSE
[08:25:54.752]  - until=1
[08:25:54.752]  - relaying element #1
[08:25:54.752] - relayed: [n=1] TRUE
[08:25:54.752] - queued futures: [n=1] TRUE
[08:25:54.752] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:54.752]  length: 0 (resolved future 1)
[08:25:54.752] Relaying remaining futures
[08:25:54.752] signalConditionsASAP(NULL, pos=0) ...
[08:25:54.752] - nx: 1
[08:25:54.752] - relay: TRUE
[08:25:54.752] - stdout: TRUE
[08:25:54.753] - signal: TRUE
[08:25:54.753] - resignal: FALSE
[08:25:54.753] - force: TRUE
[08:25:54.753] - relayed: [n=1] TRUE
[08:25:54.753] - queued futures: [n=1] TRUE
 - flush all
[08:25:54.753] - relayed: [n=1] TRUE
[08:25:54.753] - queued futures: [n=1] TRUE
[08:25:54.753] signalConditionsASAP(NULL, pos=0) ... done
[08:25:54.753] resolve() on list ... DONE
[08:25:54.753]  - Number of value chunks collected: 1
[08:25:54.753] Resolving 1 futures (chunks) ... DONE
[08:25:54.754] Reducing values from 1 chunks ...
[08:25:54.754]  - Number of values collected after concatenation: 5
[08:25:54.754]  - Number of values expected: 5
[08:25:54.754] Reducing values from 1 chunks ... DONE
[08:25:54.754] future_lapply() ... DONE
[08:25:54.754] future_lapply() ...
[08:25:54.755] Generating random seeds ...
[08:25:54.755] Generating random seed streams for 5 elements ...
[08:25:54.755] Generating random seed streams for 5 elements ... DONE
[08:25:54.755] Generating random seeds ... DONE
[08:25:54.755] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:54.756] Number of chunks: 1
[08:25:54.756] getGlobalsAndPackagesXApply() ...
[08:25:54.756]  - future.globals: TRUE
[08:25:54.756] getGlobalsAndPackages() ...
[08:25:54.756] Searching for globals...
[08:25:54.757] - globals found: [2] ‘FUN’, ‘sample’
[08:25:54.757] Searching for globals ... DONE
[08:25:54.758] Resolving globals: FALSE
[08:25:54.758] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:54.758] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:54.758] - globals: [1] ‘FUN’
[08:25:54.758] 
[08:25:54.758] getGlobalsAndPackages() ... DONE
[08:25:54.759]  - globals found/used: [n=1] ‘FUN’
[08:25:54.759]  - needed namespaces: [n=0] 
[08:25:54.759] Finding globals ... DONE
[08:25:54.759]  - use_args: TRUE
[08:25:54.761]  - Getting '...' globals ...
[08:25:54.761] resolve() on list ...
[08:25:54.761]  recursive: 0
[08:25:54.761]  length: 1
[08:25:54.761]  elements: ‘...’
[08:25:54.761]  length: 0 (resolved future 1)
[08:25:54.762] resolve() on list ... DONE
[08:25:54.762]    - '...' content: [n=0] 
[08:25:54.762] List of 1
[08:25:54.762]  $ ...: list()
[08:25:54.762]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.762]  - attr(*, "where")=List of 1
[08:25:54.762]   ..$ ...:<environment: 0x55f7780ce7b0> 
[08:25:54.762]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.762]  - attr(*, "resolved")= logi TRUE
[08:25:54.762]  - attr(*, "total_size")= num NA
[08:25:54.764]  - Getting '...' globals ... DONE
[08:25:54.764] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:54.764] List of 2
[08:25:54.764]  $ ...future.FUN:function (...)  
[08:25:54.764]  $ ...          : list()
[08:25:54.764]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.764]  - attr(*, "where")=List of 2
[08:25:54.764]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:54.764]   ..$ ...          :<environment: 0x55f7780ce7b0> 
[08:25:54.764]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.764]  - attr(*, "resolved")= logi FALSE
[08:25:54.764]  - attr(*, "total_size")= num 7184
[08:25:54.767] Packages to be attached in all futures: [n=0] 
[08:25:54.767] getGlobalsAndPackagesXApply() ... DONE
[08:25:54.767] Number of futures (= number of chunks): 1
[08:25:54.768] Launching 1 futures (chunks) ...
[08:25:54.768] Chunk #1 of 1 ...
[08:25:54.768]  - Finding globals in 'X' for chunk #1 ...
[08:25:54.768] getGlobalsAndPackages() ...
[08:25:54.768] Searching for globals...
[08:25:54.768] 
[08:25:54.768] Searching for globals ... DONE
[08:25:54.768] - globals: [0] <none>
[08:25:54.768] getGlobalsAndPackages() ... DONE
[08:25:54.769]    + additional globals found: [n=0] 
[08:25:54.769]    + additional namespaces needed: [n=0] 
[08:25:54.769]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:54.769]  - seeds: [5] <seeds>
[08:25:54.769]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.769] getGlobalsAndPackages() ...
[08:25:54.769] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.769] Resolving globals: FALSE
[08:25:54.769] Tweak future expression to call with '...' arguments ...
[08:25:54.769] {
[08:25:54.769]     do.call(function(...) {
[08:25:54.769]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.769]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.769]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.769]             on.exit(options(oopts), add = TRUE)
[08:25:54.769]         }
[08:25:54.769]         {
[08:25:54.769]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.769]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.769]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.769]                   envir = globalenv(), inherits = FALSE)
[08:25:54.769]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.769]             })
[08:25:54.769]         }
[08:25:54.769]     }, args = future.call.arguments)
[08:25:54.769] }
[08:25:54.770] Tweak future expression to call with '...' arguments ... DONE
[08:25:54.770] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.770] 
[08:25:54.770] getGlobalsAndPackages() ... DONE
[08:25:54.771] run() for ‘Future’ ...
[08:25:54.771] - state: ‘created’
[08:25:54.771] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:54.771] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.771] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:54.771]   - Field: ‘label’
[08:25:54.771]   - Field: ‘local’
[08:25:54.771]   - Field: ‘owner’
[08:25:54.772]   - Field: ‘envir’
[08:25:54.772]   - Field: ‘packages’
[08:25:54.772]   - Field: ‘gc’
[08:25:54.772]   - Field: ‘conditions’
[08:25:54.772]   - Field: ‘expr’
[08:25:54.772]   - Field: ‘uuid’
[08:25:54.772]   - Field: ‘seed’
[08:25:54.772]   - Field: ‘version’
[08:25:54.772]   - Field: ‘result’
[08:25:54.772]   - Field: ‘asynchronous’
[08:25:54.772]   - Field: ‘calls’
[08:25:54.773]   - Field: ‘globals’
[08:25:54.773]   - Field: ‘stdout’
[08:25:54.773]   - Field: ‘earlySignal’
[08:25:54.773]   - Field: ‘lazy’
[08:25:54.773]   - Field: ‘state’
[08:25:54.773] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:54.773] - Launch lazy future ...
[08:25:54.773] Packages needed by the future expression (n = 0): <none>
[08:25:54.773] Packages needed by future strategies (n = 0): <none>
[08:25:54.774] {
[08:25:54.774]     {
[08:25:54.774]         {
[08:25:54.774]             ...future.startTime <- base::Sys.time()
[08:25:54.774]             {
[08:25:54.774]                 {
[08:25:54.774]                   {
[08:25:54.774]                     base::local({
[08:25:54.774]                       has_future <- base::requireNamespace("future", 
[08:25:54.774]                         quietly = TRUE)
[08:25:54.774]                       if (has_future) {
[08:25:54.774]                         ns <- base::getNamespace("future")
[08:25:54.774]                         version <- ns[[".package"]][["version"]]
[08:25:54.774]                         if (is.null(version)) 
[08:25:54.774]                           version <- utils::packageVersion("future")
[08:25:54.774]                       }
[08:25:54.774]                       else {
[08:25:54.774]                         version <- NULL
[08:25:54.774]                       }
[08:25:54.774]                       if (!has_future || version < "1.8.0") {
[08:25:54.774]                         info <- base::c(r_version = base::gsub("R version ", 
[08:25:54.774]                           "", base::R.version$version.string), 
[08:25:54.774]                           platform = base::sprintf("%s (%s-bit)", 
[08:25:54.774]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:54.774]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:54.774]                             "release", "version")], collapse = " "), 
[08:25:54.774]                           hostname = base::Sys.info()[["nodename"]])
[08:25:54.774]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:25:54.774]                           info)
[08:25:54.774]                         info <- base::paste(info, collapse = "; ")
[08:25:54.774]                         if (!has_future) {
[08:25:54.774]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:54.774]                             info)
[08:25:54.774]                         }
[08:25:54.774]                         else {
[08:25:54.774]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:54.774]                             info, version)
[08:25:54.774]                         }
[08:25:54.774]                         base::stop(msg)
[08:25:54.774]                       }
[08:25:54.774]                     })
[08:25:54.774]                   }
[08:25:54.774]                   ...future.strategy.old <- future::plan("list")
[08:25:54.774]                   options(future.plan = NULL)
[08:25:54.774]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.774]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:54.774]                 }
[08:25:54.774]                 ...future.workdir <- getwd()
[08:25:54.774]             }
[08:25:54.774]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:54.774]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:54.774]         }
[08:25:54.774]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:54.774]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:54.774]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:54.774]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:54.774]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:54.774]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:54.774]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:54.774]             base::names(...future.oldOptions))
[08:25:54.774]     }
[08:25:54.774]     if (FALSE) {
[08:25:54.774]     }
[08:25:54.774]     else {
[08:25:54.774]         if (TRUE) {
[08:25:54.774]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:54.774]                 open = "w")
[08:25:54.774]         }
[08:25:54.774]         else {
[08:25:54.774]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:54.774]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:54.774]         }
[08:25:54.774]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:54.774]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:54.774]             base::sink(type = "output", split = FALSE)
[08:25:54.774]             base::close(...future.stdout)
[08:25:54.774]         }, add = TRUE)
[08:25:54.774]     }
[08:25:54.774]     ...future.frame <- base::sys.nframe()
[08:25:54.774]     ...future.conditions <- base::list()
[08:25:54.774]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:54.774]     if (FALSE) {
[08:25:54.774]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:54.774]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:54.774]     }
[08:25:54.774]     ...future.result <- base::tryCatch({
[08:25:54.774]         base::withCallingHandlers({
[08:25:54.774]             ...future.value <- base::withVisible(base::local({
[08:25:54.774]                 do.call(function(...) {
[08:25:54.774]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.774]                   if (!identical(...future.globals.maxSize.org, 
[08:25:54.774]                     ...future.globals.maxSize)) {
[08:25:54.774]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.774]                     on.exit(options(oopts), add = TRUE)
[08:25:54.774]                   }
[08:25:54.774]                   {
[08:25:54.774]                     lapply(seq_along(...future.elements_ii), 
[08:25:54.774]                       FUN = function(jj) {
[08:25:54.774]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.774]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.774]                           envir = globalenv(), inherits = FALSE)
[08:25:54.774]                         ...future.FUN(...future.X_jj, ...)
[08:25:54.774]                       })
[08:25:54.774]                   }
[08:25:54.774]                 }, args = future.call.arguments)
[08:25:54.774]             }))
[08:25:54.774]             future::FutureResult(value = ...future.value$value, 
[08:25:54.774]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.774]                   ...future.rng), globalenv = if (FALSE) 
[08:25:54.774]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:54.774]                     ...future.globalenv.names))
[08:25:54.774]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:54.774]         }, condition = base::local({
[08:25:54.774]             c <- base::c
[08:25:54.774]             inherits <- base::inherits
[08:25:54.774]             invokeRestart <- base::invokeRestart
[08:25:54.774]             length <- base::length
[08:25:54.774]             list <- base::list
[08:25:54.774]             seq.int <- base::seq.int
[08:25:54.774]             signalCondition <- base::signalCondition
[08:25:54.774]             sys.calls <- base::sys.calls
[08:25:54.774]             `[[` <- base::`[[`
[08:25:54.774]             `+` <- base::`+`
[08:25:54.774]             `<<-` <- base::`<<-`
[08:25:54.774]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:54.774]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:54.774]                   3L)]
[08:25:54.774]             }
[08:25:54.774]             function(cond) {
[08:25:54.774]                 is_error <- inherits(cond, "error")
[08:25:54.774]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:54.774]                   NULL)
[08:25:54.774]                 if (is_error) {
[08:25:54.774]                   sessionInformation <- function() {
[08:25:54.774]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:54.774]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:54.774]                       search = base::search(), system = base::Sys.info())
[08:25:54.774]                   }
[08:25:54.774]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.774]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:54.774]                     cond$call), session = sessionInformation(), 
[08:25:54.774]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:54.774]                   signalCondition(cond)
[08:25:54.774]                 }
[08:25:54.774]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:54.774]                 "immediateCondition"))) {
[08:25:54.774]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:54.774]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.774]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:54.774]                   if (TRUE && !signal) {
[08:25:54.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.774]                     {
[08:25:54.774]                       inherits <- base::inherits
[08:25:54.774]                       invokeRestart <- base::invokeRestart
[08:25:54.774]                       is.null <- base::is.null
[08:25:54.774]                       muffled <- FALSE
[08:25:54.774]                       if (inherits(cond, "message")) {
[08:25:54.774]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.774]                         if (muffled) 
[08:25:54.774]                           invokeRestart("muffleMessage")
[08:25:54.774]                       }
[08:25:54.774]                       else if (inherits(cond, "warning")) {
[08:25:54.774]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.774]                         if (muffled) 
[08:25:54.774]                           invokeRestart("muffleWarning")
[08:25:54.774]                       }
[08:25:54.774]                       else if (inherits(cond, "condition")) {
[08:25:54.774]                         if (!is.null(pattern)) {
[08:25:54.774]                           computeRestarts <- base::computeRestarts
[08:25:54.774]                           grepl <- base::grepl
[08:25:54.774]                           restarts <- computeRestarts(cond)
[08:25:54.774]                           for (restart in restarts) {
[08:25:54.774]                             name <- restart$name
[08:25:54.774]                             if (is.null(name)) 
[08:25:54.774]                               next
[08:25:54.774]                             if (!grepl(pattern, name)) 
[08:25:54.774]                               next
[08:25:54.774]                             invokeRestart(restart)
[08:25:54.774]                             muffled <- TRUE
[08:25:54.774]                             break
[08:25:54.774]                           }
[08:25:54.774]                         }
[08:25:54.774]                       }
[08:25:54.774]                       invisible(muffled)
[08:25:54.774]                     }
[08:25:54.774]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.774]                   }
[08:25:54.774]                 }
[08:25:54.774]                 else {
[08:25:54.774]                   if (TRUE) {
[08:25:54.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.774]                     {
[08:25:54.774]                       inherits <- base::inherits
[08:25:54.774]                       invokeRestart <- base::invokeRestart
[08:25:54.774]                       is.null <- base::is.null
[08:25:54.774]                       muffled <- FALSE
[08:25:54.774]                       if (inherits(cond, "message")) {
[08:25:54.774]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.774]                         if (muffled) 
[08:25:54.774]                           invokeRestart("muffleMessage")
[08:25:54.774]                       }
[08:25:54.774]                       else if (inherits(cond, "warning")) {
[08:25:54.774]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.774]                         if (muffled) 
[08:25:54.774]                           invokeRestart("muffleWarning")
[08:25:54.774]                       }
[08:25:54.774]                       else if (inherits(cond, "condition")) {
[08:25:54.774]                         if (!is.null(pattern)) {
[08:25:54.774]                           computeRestarts <- base::computeRestarts
[08:25:54.774]                           grepl <- base::grepl
[08:25:54.774]                           restarts <- computeRestarts(cond)
[08:25:54.774]                           for (restart in restarts) {
[08:25:54.774]                             name <- restart$name
[08:25:54.774]                             if (is.null(name)) 
[08:25:54.774]                               next
[08:25:54.774]                             if (!grepl(pattern, name)) 
[08:25:54.774]                               next
[08:25:54.774]                             invokeRestart(restart)
[08:25:54.774]                             muffled <- TRUE
[08:25:54.774]                             break
[08:25:54.774]                           }
[08:25:54.774]                         }
[08:25:54.774]                       }
[08:25:54.774]                       invisible(muffled)
[08:25:54.774]                     }
[08:25:54.774]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.774]                   }
[08:25:54.774]                 }
[08:25:54.774]             }
[08:25:54.774]         }))
[08:25:54.774]     }, error = function(ex) {
[08:25:54.774]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:54.774]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.774]                 ...future.rng), started = ...future.startTime, 
[08:25:54.774]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:54.774]             version = "1.8"), class = "FutureResult")
[08:25:54.774]     }, finally = {
[08:25:54.774]         if (!identical(...future.workdir, getwd())) 
[08:25:54.774]             setwd(...future.workdir)
[08:25:54.774]         {
[08:25:54.774]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:54.774]                 ...future.oldOptions$nwarnings <- NULL
[08:25:54.774]             }
[08:25:54.774]             base::options(...future.oldOptions)
[08:25:54.774]             if (.Platform$OS.type == "windows") {
[08:25:54.774]                 old_names <- names(...future.oldEnvVars)
[08:25:54.774]                 envs <- base::Sys.getenv()
[08:25:54.774]                 names <- names(envs)
[08:25:54.774]                 common <- intersect(names, old_names)
[08:25:54.774]                 added <- setdiff(names, old_names)
[08:25:54.774]                 removed <- setdiff(old_names, names)
[08:25:54.774]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:54.774]                   envs[common]]
[08:25:54.774]                 NAMES <- toupper(changed)
[08:25:54.774]                 args <- list()
[08:25:54.774]                 for (kk in seq_along(NAMES)) {
[08:25:54.774]                   name <- changed[[kk]]
[08:25:54.774]                   NAME <- NAMES[[kk]]
[08:25:54.774]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.774]                     next
[08:25:54.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.774]                 }
[08:25:54.774]                 NAMES <- toupper(added)
[08:25:54.774]                 for (kk in seq_along(NAMES)) {
[08:25:54.774]                   name <- added[[kk]]
[08:25:54.774]                   NAME <- NAMES[[kk]]
[08:25:54.774]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.774]                     next
[08:25:54.774]                   args[[name]] <- ""
[08:25:54.774]                 }
[08:25:54.774]                 NAMES <- toupper(removed)
[08:25:54.774]                 for (kk in seq_along(NAMES)) {
[08:25:54.774]                   name <- removed[[kk]]
[08:25:54.774]                   NAME <- NAMES[[kk]]
[08:25:54.774]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.774]                     next
[08:25:54.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.774]                 }
[08:25:54.774]                 if (length(args) > 0) 
[08:25:54.774]                   base::do.call(base::Sys.setenv, args = args)
[08:25:54.774]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:54.774]             }
[08:25:54.774]             else {
[08:25:54.774]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:54.774]             }
[08:25:54.774]             {
[08:25:54.774]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:54.774]                   0L) {
[08:25:54.774]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:54.774]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:54.774]                   base::options(opts)
[08:25:54.774]                 }
[08:25:54.774]                 {
[08:25:54.774]                   {
[08:25:54.774]                     base::assign(".Random.seed", c(10403L, 4L, 
[08:25:54.774]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[08:25:54.774]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[08:25:54.774]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[08:25:54.774]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[08:25:54.774]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[08:25:54.774]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[08:25:54.774]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[08:25:54.774]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[08:25:54.774]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[08:25:54.774]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[08:25:54.774]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[08:25:54.774]                     -1512233174L, -1985955764L, -425390065L, 
[08:25:54.774]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[08:25:54.774]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[08:25:54.774]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[08:25:54.774]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[08:25:54.774]                     1818328109L, -1284085436L, -1981489558L, 
[08:25:54.774]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[08:25:54.774]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[08:25:54.774]                     -1718567047L, -793788661L, -1133789126L, 
[08:25:54.774]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[08:25:54.774]                     -1823521982L, -1345991523L, -1672661737L, 
[08:25:54.774]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[08:25:54.774]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[08:25:54.774]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[08:25:54.774]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[08:25:54.774]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[08:25:54.774]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[08:25:54.774]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[08:25:54.774]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[08:25:54.774]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[08:25:54.774]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[08:25:54.774]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[08:25:54.774]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[08:25:54.774]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[08:25:54.774]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[08:25:54.774]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[08:25:54.774]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[08:25:54.774]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[08:25:54.774]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[08:25:54.774]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[08:25:54.774]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[08:25:54.774]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[08:25:54.774]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[08:25:54.774]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[08:25:54.774]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[08:25:54.774]                     -1119334354L, -1521015416L, -2041922421L, 
[08:25:54.774]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[08:25:54.774]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[08:25:54.774]                     1232111981L, -1801753084L, -1608606422L, 
[08:25:54.774]                     -1172096363L, 1420874031L, -1210473418L, 
[08:25:54.774]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[08:25:54.774]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[08:25:54.774]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[08:25:54.774]                     679371266L, -591318819L, -104578089L, -172818754L, 
[08:25:54.774]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[08:25:54.774]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[08:25:54.774]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[08:25:54.774]                     -332493318L, -1978392251L, -1691039632L, 
[08:25:54.774]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[08:25:54.774]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[08:25:54.774]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[08:25:54.774]                     87560756L, -87565624L, 426345146L, -699970416L, 
[08:25:54.774]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[08:25:54.774]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[08:25:54.774]                     -1178330196L, -687617348L, -1701912078L, 
[08:25:54.774]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[08:25:54.774]                     -1345416048L, 1816730492L, -1570431212L, 
[08:25:54.774]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[08:25:54.774]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[08:25:54.774]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[08:25:54.774]                     -1493184262L, -1943836976L, -590788308L, 
[08:25:54.774]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[08:25:54.774]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[08:25:54.774]                     1274857340L, -1205842638L, -1938479504L, 
[08:25:54.774]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[08:25:54.774]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[08:25:54.774]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[08:25:54.774]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[08:25:54.774]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[08:25:54.774]                     -1460751252L, 1201879444L, -1459788718L, 
[08:25:54.774]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[08:25:54.774]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[08:25:54.774]                     -420945808L, -1997735900L, -1838404552L, 
[08:25:54.774]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[08:25:54.774]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[08:25:54.774]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[08:25:54.774]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[08:25:54.774]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[08:25:54.774]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[08:25:54.774]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[08:25:54.774]                     942193650L, 751741680L, 689743428L, -18455976L, 
[08:25:54.774]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[08:25:54.774]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[08:25:54.774]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[08:25:54.774]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[08:25:54.774]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[08:25:54.774]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[08:25:54.774]                     -1357570110L, 1896595240L, -2066952276L, 
[08:25:54.774]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[08:25:54.774]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[08:25:54.774]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[08:25:54.774]                     769655120L, 236357794L, 181393736L, -13334772L, 
[08:25:54.774]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[08:25:54.774]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[08:25:54.774]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[08:25:54.774]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[08:25:54.774]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[08:25:54.774]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[08:25:54.774]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[08:25:54.774]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[08:25:54.774]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[08:25:54.774]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[08:25:54.774]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[08:25:54.774]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[08:25:54.774]                     -1365842884L, -438961294L, -1851472272L, 
[08:25:54.774]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[08:25:54.774]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[08:25:54.774]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[08:25:54.774]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[08:25:54.774]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[08:25:54.774]                     -594809770L, -2146766621L, -2013964635L, 
[08:25:54.774]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[08:25:54.774]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[08:25:54.774]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[08:25:54.774]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[08:25:54.774]                     -1426021878L, -1285634264L, 1507547537L, 
[08:25:54.774]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[08:25:54.774]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[08:25:54.774]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[08:25:54.774]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[08:25:54.774]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[08:25:54.774]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[08:25:54.774]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[08:25:54.774]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[08:25:54.774]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[08:25:54.774]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[08:25:54.774]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[08:25:54.774]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[08:25:54.774]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[08:25:54.774]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[08:25:54.774]                     -1604604761L, 1421229008L, -1268333714L, 
[08:25:54.774]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[08:25:54.774]                     -2070476623L, -2099222749L, 1141171236L, 
[08:25:54.774]                     -146426158L, -1797385433L, -1129376399L, 
[08:25:54.774]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[08:25:54.774]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[08:25:54.774]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[08:25:54.774]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[08:25:54.774]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[08:25:54.774]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[08:25:54.774]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[08:25:54.774]                     -1092079724L, -1765622238L, -1882554057L, 
[08:25:54.774]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[08:25:54.774]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[08:25:54.774]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[08:25:54.774]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[08:25:54.774]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[08:25:54.774]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[08:25:54.774]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[08:25:54.774]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[08:25:54.774]                     865377681L, -1127426242L), envir = base::globalenv(), 
[08:25:54.774]                       inherits = FALSE)
[08:25:54.774]                     NULL
[08:25:54.774]                   }
[08:25:54.774]                   options(future.plan = NULL)
[08:25:54.774]                   if (is.na(NA_character_)) 
[08:25:54.774]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.774]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:54.774]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:54.774]                     .init = FALSE)
[08:25:54.774]                 }
[08:25:54.774]             }
[08:25:54.774]         }
[08:25:54.774]     })
[08:25:54.774]     if (TRUE) {
[08:25:54.774]         base::sink(type = "output", split = FALSE)
[08:25:54.774]         if (TRUE) {
[08:25:54.774]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:54.774]         }
[08:25:54.774]         else {
[08:25:54.774]             ...future.result["stdout"] <- base::list(NULL)
[08:25:54.774]         }
[08:25:54.774]         base::close(...future.stdout)
[08:25:54.774]         ...future.stdout <- NULL
[08:25:54.774]     }
[08:25:54.774]     ...future.result$conditions <- ...future.conditions
[08:25:54.774]     ...future.result$finished <- base::Sys.time()
[08:25:54.774]     ...future.result
[08:25:54.774] }
[08:25:54.777] assign_globals() ...
[08:25:54.777] List of 5
[08:25:54.777]  $ ...future.FUN            :function (...)  
[08:25:54.777]  $ future.call.arguments    : list()
[08:25:54.777]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.777]  $ ...future.elements_ii    :List of 5
[08:25:54.777]   ..$ : int 0
[08:25:54.777]   ..$ : int 0
[08:25:54.777]   ..$ : int 0
[08:25:54.777]   ..$ : int 0
[08:25:54.777]   ..$ : int 0
[08:25:54.777]  $ ...future.seeds_ii       :List of 5
[08:25:54.777]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[08:25:54.777]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[08:25:54.777]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[08:25:54.777]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[08:25:54.777]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[08:25:54.777]  $ ...future.globals.maxSize: NULL
[08:25:54.777]  - attr(*, "where")=List of 5
[08:25:54.777]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:54.777]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:54.777]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:54.777]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:54.777]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:54.777]  - attr(*, "resolved")= logi FALSE
[08:25:54.777]  - attr(*, "total_size")= num 7184
[08:25:54.777]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.777]  - attr(*, "already-done")= logi TRUE
[08:25:54.784] - reassign environment for ‘...future.FUN’
[08:25:54.784] - copied ‘...future.FUN’ to environment
[08:25:54.784] - copied ‘future.call.arguments’ to environment
[08:25:54.784] - copied ‘...future.elements_ii’ to environment
[08:25:54.784] - copied ‘...future.seeds_ii’ to environment
[08:25:54.784] - copied ‘...future.globals.maxSize’ to environment
[08:25:54.785] assign_globals() ... done
[08:25:54.785] plan(): Setting new future strategy stack:
[08:25:54.785] List of future strategies:
[08:25:54.785] 1. sequential:
[08:25:54.785]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.785]    - tweaked: FALSE
[08:25:54.785]    - call: NULL
[08:25:54.785] plan(): nbrOfWorkers() = 1
[08:25:54.788] plan(): Setting new future strategy stack:
[08:25:54.788] List of future strategies:
[08:25:54.788] 1. sequential:
[08:25:54.788]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.788]    - tweaked: FALSE
[08:25:54.788]    - call: plan(strategy)
[08:25:54.789] plan(): nbrOfWorkers() = 1
[08:25:54.789] SequentialFuture started (and completed)
[08:25:54.789] - Launch lazy future ... done
[08:25:54.789] run() for ‘SequentialFuture’ ... done
[08:25:54.789] Created future:
[08:25:54.789] SequentialFuture:
[08:25:54.789] Label: ‘future_replicate-1’
[08:25:54.789] Expression:
[08:25:54.789] {
[08:25:54.789]     do.call(function(...) {
[08:25:54.789]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.789]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.789]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.789]             on.exit(options(oopts), add = TRUE)
[08:25:54.789]         }
[08:25:54.789]         {
[08:25:54.789]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.789]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.789]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.789]                   envir = globalenv(), inherits = FALSE)
[08:25:54.789]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.789]             })
[08:25:54.789]         }
[08:25:54.789]     }, args = future.call.arguments)
[08:25:54.789] }
[08:25:54.789] Lazy evaluation: FALSE
[08:25:54.789] Asynchronous evaluation: FALSE
[08:25:54.789] Local evaluation: TRUE
[08:25:54.789] Environment: R_GlobalEnv
[08:25:54.789] Capture standard output: TRUE
[08:25:54.789] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:54.789] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:54.789] Packages: <none>
[08:25:54.789] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:54.789] Resolved: TRUE
[08:25:54.789] Value: 91 bytes of class ‘list’
[08:25:54.789] Early signaling: FALSE
[08:25:54.789] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:54.789] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.790] Chunk #1 of 1 ... DONE
[08:25:54.790] Launching 1 futures (chunks) ... DONE
[08:25:54.790] Resolving 1 futures (chunks) ...
[08:25:54.790] resolve() on list ...
[08:25:54.790]  recursive: 0
[08:25:54.791]  length: 1
[08:25:54.791] 
[08:25:54.791] resolved() for ‘SequentialFuture’ ...
[08:25:54.791] - state: ‘finished’
[08:25:54.791] - run: TRUE
[08:25:54.791] - result: ‘FutureResult’
[08:25:54.791] resolved() for ‘SequentialFuture’ ... done
[08:25:54.791] Future #1
[08:25:54.791] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:54.791] - nx: 1
[08:25:54.791] - relay: TRUE
[08:25:54.792] - stdout: TRUE
[08:25:54.792] - signal: TRUE
[08:25:54.792] - resignal: FALSE
[08:25:54.792] - force: TRUE
[08:25:54.792] - relayed: [n=1] FALSE
[08:25:54.792] - queued futures: [n=1] FALSE
[08:25:54.792]  - until=1
[08:25:54.792]  - relaying element #1
[08:25:54.792] - relayed: [n=1] TRUE
[08:25:54.792] - queued futures: [n=1] TRUE
[08:25:54.792] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:54.793]  length: 0 (resolved future 1)
[08:25:54.793] Relaying remaining futures
[08:25:54.793] signalConditionsASAP(NULL, pos=0) ...
[08:25:54.793] - nx: 1
[08:25:54.793] - relay: TRUE
[08:25:54.793] - stdout: TRUE
[08:25:54.793] - signal: TRUE
[08:25:54.793] - resignal: FALSE
[08:25:54.793] - force: TRUE
[08:25:54.793] - relayed: [n=1] TRUE
[08:25:54.793] - queued futures: [n=1] TRUE
 - flush all
[08:25:54.794] - relayed: [n=1] TRUE
[08:25:54.794] - queued futures: [n=1] TRUE
[08:25:54.794] signalConditionsASAP(NULL, pos=0) ... done
[08:25:54.794] resolve() on list ... DONE
[08:25:54.794]  - Number of value chunks collected: 1
[08:25:54.794] Resolving 1 futures (chunks) ... DONE
[08:25:54.794] Reducing values from 1 chunks ...
[08:25:54.794]  - Number of values collected after concatenation: 5
[08:25:54.794]  - Number of values expected: 5
[08:25:54.794] Reducing values from 1 chunks ... DONE
[08:25:54.794] future_lapply() ... DONE
[08:25:54.795] future_lapply() ...
[08:25:54.795] Generating random seeds ...
[08:25:54.795] Generating random seed streams for 5 elements ...
[08:25:54.795] Generating random seed streams for 5 elements ... DONE
[08:25:54.795] Generating random seeds ... DONE
[08:25:54.795] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:54.796] Number of chunks: 1
[08:25:54.796] getGlobalsAndPackagesXApply() ...
[08:25:54.796]  - future.globals: TRUE
[08:25:54.796] getGlobalsAndPackages() ...
[08:25:54.796] Searching for globals...
[08:25:54.797] - globals found: [2] ‘FUN’, ‘sample’
[08:25:54.798] Searching for globals ... DONE
[08:25:54.798] Resolving globals: FALSE
[08:25:54.798] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:54.798] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:54.798] - globals: [1] ‘FUN’
[08:25:54.799] 
[08:25:54.799] getGlobalsAndPackages() ... DONE
[08:25:54.799]  - globals found/used: [n=1] ‘FUN’
[08:25:54.799]  - needed namespaces: [n=0] 
[08:25:54.799] Finding globals ... DONE
[08:25:54.799]  - use_args: TRUE
[08:25:54.799]  - Getting '...' globals ...
[08:25:54.799] resolve() on list ...
[08:25:54.799]  recursive: 0
[08:25:54.800]  length: 1
[08:25:54.800]  elements: ‘...’
[08:25:54.800]  length: 0 (resolved future 1)
[08:25:54.800] resolve() on list ... DONE
[08:25:54.800]    - '...' content: [n=0] 
[08:25:54.800] List of 1
[08:25:54.800]  $ ...: list()
[08:25:54.800]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.800]  - attr(*, "where")=List of 1
[08:25:54.800]   ..$ ...:<environment: 0x55f776422b78> 
[08:25:54.800]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.800]  - attr(*, "resolved")= logi TRUE
[08:25:54.800]  - attr(*, "total_size")= num NA
[08:25:54.802]  - Getting '...' globals ... DONE
[08:25:54.803] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:54.803] List of 2
[08:25:54.803]  $ ...future.FUN:function (...)  
[08:25:54.803]  $ ...          : list()
[08:25:54.803]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.803]  - attr(*, "where")=List of 2
[08:25:54.803]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:54.803]   ..$ ...          :<environment: 0x55f776422b78> 
[08:25:54.803]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.803]  - attr(*, "resolved")= logi FALSE
[08:25:54.803]  - attr(*, "total_size")= num 7184
[08:25:54.805] Packages to be attached in all futures: [n=0] 
[08:25:54.805] getGlobalsAndPackagesXApply() ... DONE
[08:25:54.806] Number of futures (= number of chunks): 1
[08:25:54.806] Launching 1 futures (chunks) ...
[08:25:54.806] Chunk #1 of 1 ...
[08:25:54.806]  - Finding globals in 'X' for chunk #1 ...
[08:25:54.806] getGlobalsAndPackages() ...
[08:25:54.806] Searching for globals...
[08:25:54.806] 
[08:25:54.806] Searching for globals ... DONE
[08:25:54.807] - globals: [0] <none>
[08:25:54.807] getGlobalsAndPackages() ... DONE
[08:25:54.807]    + additional globals found: [n=0] 
[08:25:54.807]    + additional namespaces needed: [n=0] 
[08:25:54.807]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:54.807]  - seeds: [5] <seeds>
[08:25:54.807]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.807] getGlobalsAndPackages() ...
[08:25:54.807] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.807] Resolving globals: FALSE
[08:25:54.807] Tweak future expression to call with '...' arguments ...
[08:25:54.808] {
[08:25:54.808]     do.call(function(...) {
[08:25:54.808]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.808]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.808]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.808]             on.exit(options(oopts), add = TRUE)
[08:25:54.808]         }
[08:25:54.808]         {
[08:25:54.808]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.808]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.808]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.808]                   envir = globalenv(), inherits = FALSE)
[08:25:54.808]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.808]             })
[08:25:54.808]         }
[08:25:54.808]     }, args = future.call.arguments)
[08:25:54.808] }
[08:25:54.808] Tweak future expression to call with '...' arguments ... DONE
[08:25:54.808] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.808] 
[08:25:54.808] getGlobalsAndPackages() ... DONE
[08:25:54.809] run() for ‘Future’ ...
[08:25:54.809] - state: ‘created’
[08:25:54.809] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:54.809] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.809] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:54.809]   - Field: ‘label’
[08:25:54.809]   - Field: ‘local’
[08:25:54.810]   - Field: ‘owner’
[08:25:54.810]   - Field: ‘envir’
[08:25:54.810]   - Field: ‘packages’
[08:25:54.810]   - Field: ‘gc’
[08:25:54.810]   - Field: ‘conditions’
[08:25:54.810]   - Field: ‘expr’
[08:25:54.810]   - Field: ‘uuid’
[08:25:54.810]   - Field: ‘seed’
[08:25:54.810]   - Field: ‘version’
[08:25:54.810]   - Field: ‘result’
[08:25:54.810]   - Field: ‘asynchronous’
[08:25:54.811]   - Field: ‘calls’
[08:25:54.811]   - Field: ‘globals’
[08:25:54.811]   - Field: ‘stdout’
[08:25:54.813]   - Field: ‘earlySignal’
[08:25:54.813]   - Field: ‘lazy’
[08:25:54.813]   - Field: ‘state’
[08:25:54.813] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:54.813] - Launch lazy future ...
[08:25:54.813] Packages needed by the future expression (n = 0): <none>
[08:25:54.813] Packages needed by future strategies (n = 0): <none>
[08:25:54.814] {
[08:25:54.814]     {
[08:25:54.814]         {
[08:25:54.814]             ...future.startTime <- base::Sys.time()
[08:25:54.814]             {
[08:25:54.814]                 {
[08:25:54.814]                   {
[08:25:54.814]                     base::local({
[08:25:54.814]                       has_future <- base::requireNamespace("future", 
[08:25:54.814]                         quietly = TRUE)
[08:25:54.814]                       if (has_future) {
[08:25:54.814]                         ns <- base::getNamespace("future")
[08:25:54.814]                         version <- ns[[".package"]][["version"]]
[08:25:54.814]                         if (is.null(version)) 
[08:25:54.814]                           version <- utils::packageVersion("future")
[08:25:54.814]                       }
[08:25:54.814]                       else {
[08:25:54.814]                         version <- NULL
[08:25:54.814]                       }
[08:25:54.814]                       if (!has_future || version < "1.8.0") {
[08:25:54.814]                         info <- base::c(r_version = base::gsub("R version ", 
[08:25:54.814]                           "", base::R.version$version.string), 
[08:25:54.814]                           platform = base::sprintf("%s (%s-bit)", 
[08:25:54.814]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:54.814]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:54.814]                             "release", "version")], collapse = " "), 
[08:25:54.814]                           hostname = base::Sys.info()[["nodename"]])
[08:25:54.814]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:25:54.814]                           info)
[08:25:54.814]                         info <- base::paste(info, collapse = "; ")
[08:25:54.814]                         if (!has_future) {
[08:25:54.814]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:54.814]                             info)
[08:25:54.814]                         }
[08:25:54.814]                         else {
[08:25:54.814]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:54.814]                             info, version)
[08:25:54.814]                         }
[08:25:54.814]                         base::stop(msg)
[08:25:54.814]                       }
[08:25:54.814]                     })
[08:25:54.814]                   }
[08:25:54.814]                   ...future.strategy.old <- future::plan("list")
[08:25:54.814]                   options(future.plan = NULL)
[08:25:54.814]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.814]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:54.814]                 }
[08:25:54.814]                 ...future.workdir <- getwd()
[08:25:54.814]             }
[08:25:54.814]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:54.814]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:54.814]         }
[08:25:54.814]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:54.814]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:54.814]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:54.814]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:54.814]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:54.814]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:54.814]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:54.814]             base::names(...future.oldOptions))
[08:25:54.814]     }
[08:25:54.814]     if (FALSE) {
[08:25:54.814]     }
[08:25:54.814]     else {
[08:25:54.814]         if (TRUE) {
[08:25:54.814]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:54.814]                 open = "w")
[08:25:54.814]         }
[08:25:54.814]         else {
[08:25:54.814]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:54.814]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:54.814]         }
[08:25:54.814]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:54.814]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:54.814]             base::sink(type = "output", split = FALSE)
[08:25:54.814]             base::close(...future.stdout)
[08:25:54.814]         }, add = TRUE)
[08:25:54.814]     }
[08:25:54.814]     ...future.frame <- base::sys.nframe()
[08:25:54.814]     ...future.conditions <- base::list()
[08:25:54.814]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:54.814]     if (FALSE) {
[08:25:54.814]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:54.814]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:54.814]     }
[08:25:54.814]     ...future.result <- base::tryCatch({
[08:25:54.814]         base::withCallingHandlers({
[08:25:54.814]             ...future.value <- base::withVisible(base::local({
[08:25:54.814]                 do.call(function(...) {
[08:25:54.814]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.814]                   if (!identical(...future.globals.maxSize.org, 
[08:25:54.814]                     ...future.globals.maxSize)) {
[08:25:54.814]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.814]                     on.exit(options(oopts), add = TRUE)
[08:25:54.814]                   }
[08:25:54.814]                   {
[08:25:54.814]                     lapply(seq_along(...future.elements_ii), 
[08:25:54.814]                       FUN = function(jj) {
[08:25:54.814]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.814]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.814]                           envir = globalenv(), inherits = FALSE)
[08:25:54.814]                         ...future.FUN(...future.X_jj, ...)
[08:25:54.814]                       })
[08:25:54.814]                   }
[08:25:54.814]                 }, args = future.call.arguments)
[08:25:54.814]             }))
[08:25:54.814]             future::FutureResult(value = ...future.value$value, 
[08:25:54.814]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.814]                   ...future.rng), globalenv = if (FALSE) 
[08:25:54.814]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:54.814]                     ...future.globalenv.names))
[08:25:54.814]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:54.814]         }, condition = base::local({
[08:25:54.814]             c <- base::c
[08:25:54.814]             inherits <- base::inherits
[08:25:54.814]             invokeRestart <- base::invokeRestart
[08:25:54.814]             length <- base::length
[08:25:54.814]             list <- base::list
[08:25:54.814]             seq.int <- base::seq.int
[08:25:54.814]             signalCondition <- base::signalCondition
[08:25:54.814]             sys.calls <- base::sys.calls
[08:25:54.814]             `[[` <- base::`[[`
[08:25:54.814]             `+` <- base::`+`
[08:25:54.814]             `<<-` <- base::`<<-`
[08:25:54.814]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:54.814]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:54.814]                   3L)]
[08:25:54.814]             }
[08:25:54.814]             function(cond) {
[08:25:54.814]                 is_error <- inherits(cond, "error")
[08:25:54.814]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:54.814]                   NULL)
[08:25:54.814]                 if (is_error) {
[08:25:54.814]                   sessionInformation <- function() {
[08:25:54.814]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:54.814]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:54.814]                       search = base::search(), system = base::Sys.info())
[08:25:54.814]                   }
[08:25:54.814]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.814]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:54.814]                     cond$call), session = sessionInformation(), 
[08:25:54.814]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:54.814]                   signalCondition(cond)
[08:25:54.814]                 }
[08:25:54.814]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:54.814]                 "immediateCondition"))) {
[08:25:54.814]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:54.814]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.814]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:54.814]                   if (TRUE && !signal) {
[08:25:54.814]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.814]                     {
[08:25:54.814]                       inherits <- base::inherits
[08:25:54.814]                       invokeRestart <- base::invokeRestart
[08:25:54.814]                       is.null <- base::is.null
[08:25:54.814]                       muffled <- FALSE
[08:25:54.814]                       if (inherits(cond, "message")) {
[08:25:54.814]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.814]                         if (muffled) 
[08:25:54.814]                           invokeRestart("muffleMessage")
[08:25:54.814]                       }
[08:25:54.814]                       else if (inherits(cond, "warning")) {
[08:25:54.814]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.814]                         if (muffled) 
[08:25:54.814]                           invokeRestart("muffleWarning")
[08:25:54.814]                       }
[08:25:54.814]                       else if (inherits(cond, "condition")) {
[08:25:54.814]                         if (!is.null(pattern)) {
[08:25:54.814]                           computeRestarts <- base::computeRestarts
[08:25:54.814]                           grepl <- base::grepl
[08:25:54.814]                           restarts <- computeRestarts(cond)
[08:25:54.814]                           for (restart in restarts) {
[08:25:54.814]                             name <- restart$name
[08:25:54.814]                             if (is.null(name)) 
[08:25:54.814]                               next
[08:25:54.814]                             if (!grepl(pattern, name)) 
[08:25:54.814]                               next
[08:25:54.814]                             invokeRestart(restart)
[08:25:54.814]                             muffled <- TRUE
[08:25:54.814]                             break
[08:25:54.814]                           }
[08:25:54.814]                         }
[08:25:54.814]                       }
[08:25:54.814]                       invisible(muffled)
[08:25:54.814]                     }
[08:25:54.814]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.814]                   }
[08:25:54.814]                 }
[08:25:54.814]                 else {
[08:25:54.814]                   if (TRUE) {
[08:25:54.814]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.814]                     {
[08:25:54.814]                       inherits <- base::inherits
[08:25:54.814]                       invokeRestart <- base::invokeRestart
[08:25:54.814]                       is.null <- base::is.null
[08:25:54.814]                       muffled <- FALSE
[08:25:54.814]                       if (inherits(cond, "message")) {
[08:25:54.814]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.814]                         if (muffled) 
[08:25:54.814]                           invokeRestart("muffleMessage")
[08:25:54.814]                       }
[08:25:54.814]                       else if (inherits(cond, "warning")) {
[08:25:54.814]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.814]                         if (muffled) 
[08:25:54.814]                           invokeRestart("muffleWarning")
[08:25:54.814]                       }
[08:25:54.814]                       else if (inherits(cond, "condition")) {
[08:25:54.814]                         if (!is.null(pattern)) {
[08:25:54.814]                           computeRestarts <- base::computeRestarts
[08:25:54.814]                           grepl <- base::grepl
[08:25:54.814]                           restarts <- computeRestarts(cond)
[08:25:54.814]                           for (restart in restarts) {
[08:25:54.814]                             name <- restart$name
[08:25:54.814]                             if (is.null(name)) 
[08:25:54.814]                               next
[08:25:54.814]                             if (!grepl(pattern, name)) 
[08:25:54.814]                               next
[08:25:54.814]                             invokeRestart(restart)
[08:25:54.814]                             muffled <- TRUE
[08:25:54.814]                             break
[08:25:54.814]                           }
[08:25:54.814]                         }
[08:25:54.814]                       }
[08:25:54.814]                       invisible(muffled)
[08:25:54.814]                     }
[08:25:54.814]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.814]                   }
[08:25:54.814]                 }
[08:25:54.814]             }
[08:25:54.814]         }))
[08:25:54.814]     }, error = function(ex) {
[08:25:54.814]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:54.814]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.814]                 ...future.rng), started = ...future.startTime, 
[08:25:54.814]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:54.814]             version = "1.8"), class = "FutureResult")
[08:25:54.814]     }, finally = {
[08:25:54.814]         if (!identical(...future.workdir, getwd())) 
[08:25:54.814]             setwd(...future.workdir)
[08:25:54.814]         {
[08:25:54.814]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:54.814]                 ...future.oldOptions$nwarnings <- NULL
[08:25:54.814]             }
[08:25:54.814]             base::options(...future.oldOptions)
[08:25:54.814]             if (.Platform$OS.type == "windows") {
[08:25:54.814]                 old_names <- names(...future.oldEnvVars)
[08:25:54.814]                 envs <- base::Sys.getenv()
[08:25:54.814]                 names <- names(envs)
[08:25:54.814]                 common <- intersect(names, old_names)
[08:25:54.814]                 added <- setdiff(names, old_names)
[08:25:54.814]                 removed <- setdiff(old_names, names)
[08:25:54.814]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:54.814]                   envs[common]]
[08:25:54.814]                 NAMES <- toupper(changed)
[08:25:54.814]                 args <- list()
[08:25:54.814]                 for (kk in seq_along(NAMES)) {
[08:25:54.814]                   name <- changed[[kk]]
[08:25:54.814]                   NAME <- NAMES[[kk]]
[08:25:54.814]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.814]                     next
[08:25:54.814]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.814]                 }
[08:25:54.814]                 NAMES <- toupper(added)
[08:25:54.814]                 for (kk in seq_along(NAMES)) {
[08:25:54.814]                   name <- added[[kk]]
[08:25:54.814]                   NAME <- NAMES[[kk]]
[08:25:54.814]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.814]                     next
[08:25:54.814]                   args[[name]] <- ""
[08:25:54.814]                 }
[08:25:54.814]                 NAMES <- toupper(removed)
[08:25:54.814]                 for (kk in seq_along(NAMES)) {
[08:25:54.814]                   name <- removed[[kk]]
[08:25:54.814]                   NAME <- NAMES[[kk]]
[08:25:54.814]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.814]                     next
[08:25:54.814]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.814]                 }
[08:25:54.814]                 if (length(args) > 0) 
[08:25:54.814]                   base::do.call(base::Sys.setenv, args = args)
[08:25:54.814]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:54.814]             }
[08:25:54.814]             else {
[08:25:54.814]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:54.814]             }
[08:25:54.814]             {
[08:25:54.814]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:54.814]                   0L) {
[08:25:54.814]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:54.814]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:54.814]                   base::options(opts)
[08:25:54.814]                 }
[08:25:54.814]                 {
[08:25:54.814]                   {
[08:25:54.814]                     base::assign(".Random.seed", c(10403L, 6L, 
[08:25:54.814]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[08:25:54.814]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[08:25:54.814]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[08:25:54.814]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[08:25:54.814]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[08:25:54.814]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[08:25:54.814]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[08:25:54.814]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[08:25:54.814]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[08:25:54.814]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[08:25:54.814]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[08:25:54.814]                     -1512233174L, -1985955764L, -425390065L, 
[08:25:54.814]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[08:25:54.814]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[08:25:54.814]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[08:25:54.814]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[08:25:54.814]                     1818328109L, -1284085436L, -1981489558L, 
[08:25:54.814]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[08:25:54.814]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[08:25:54.814]                     -1718567047L, -793788661L, -1133789126L, 
[08:25:54.814]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[08:25:54.814]                     -1823521982L, -1345991523L, -1672661737L, 
[08:25:54.814]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[08:25:54.814]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[08:25:54.814]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[08:25:54.814]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[08:25:54.814]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[08:25:54.814]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[08:25:54.814]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[08:25:54.814]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[08:25:54.814]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[08:25:54.814]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[08:25:54.814]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[08:25:54.814]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[08:25:54.814]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[08:25:54.814]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[08:25:54.814]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[08:25:54.814]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[08:25:54.814]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[08:25:54.814]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[08:25:54.814]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[08:25:54.814]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[08:25:54.814]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[08:25:54.814]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[08:25:54.814]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[08:25:54.814]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[08:25:54.814]                     -1119334354L, -1521015416L, -2041922421L, 
[08:25:54.814]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[08:25:54.814]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[08:25:54.814]                     1232111981L, -1801753084L, -1608606422L, 
[08:25:54.814]                     -1172096363L, 1420874031L, -1210473418L, 
[08:25:54.814]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[08:25:54.814]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[08:25:54.814]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[08:25:54.814]                     679371266L, -591318819L, -104578089L, -172818754L, 
[08:25:54.814]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[08:25:54.814]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[08:25:54.814]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[08:25:54.814]                     -332493318L, -1978392251L, -1691039632L, 
[08:25:54.814]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[08:25:54.814]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[08:25:54.814]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[08:25:54.814]                     87560756L, -87565624L, 426345146L, -699970416L, 
[08:25:54.814]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[08:25:54.814]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[08:25:54.814]                     -1178330196L, -687617348L, -1701912078L, 
[08:25:54.814]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[08:25:54.814]                     -1345416048L, 1816730492L, -1570431212L, 
[08:25:54.814]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[08:25:54.814]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[08:25:54.814]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[08:25:54.814]                     -1493184262L, -1943836976L, -590788308L, 
[08:25:54.814]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[08:25:54.814]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[08:25:54.814]                     1274857340L, -1205842638L, -1938479504L, 
[08:25:54.814]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[08:25:54.814]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[08:25:54.814]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[08:25:54.814]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[08:25:54.814]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[08:25:54.814]                     -1460751252L, 1201879444L, -1459788718L, 
[08:25:54.814]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[08:25:54.814]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[08:25:54.814]                     -420945808L, -1997735900L, -1838404552L, 
[08:25:54.814]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[08:25:54.814]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[08:25:54.814]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[08:25:54.814]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[08:25:54.814]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[08:25:54.814]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[08:25:54.814]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[08:25:54.814]                     942193650L, 751741680L, 689743428L, -18455976L, 
[08:25:54.814]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[08:25:54.814]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[08:25:54.814]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[08:25:54.814]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[08:25:54.814]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[08:25:54.814]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[08:25:54.814]                     -1357570110L, 1896595240L, -2066952276L, 
[08:25:54.814]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[08:25:54.814]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[08:25:54.814]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[08:25:54.814]                     769655120L, 236357794L, 181393736L, -13334772L, 
[08:25:54.814]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[08:25:54.814]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[08:25:54.814]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[08:25:54.814]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[08:25:54.814]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[08:25:54.814]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[08:25:54.814]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[08:25:54.814]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[08:25:54.814]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[08:25:54.814]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[08:25:54.814]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[08:25:54.814]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[08:25:54.814]                     -1365842884L, -438961294L, -1851472272L, 
[08:25:54.814]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[08:25:54.814]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[08:25:54.814]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[08:25:54.814]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[08:25:54.814]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[08:25:54.814]                     -594809770L, -2146766621L, -2013964635L, 
[08:25:54.814]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[08:25:54.814]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[08:25:54.814]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[08:25:54.814]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[08:25:54.814]                     -1426021878L, -1285634264L, 1507547537L, 
[08:25:54.814]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[08:25:54.814]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[08:25:54.814]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[08:25:54.814]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[08:25:54.814]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[08:25:54.814]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[08:25:54.814]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[08:25:54.814]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[08:25:54.814]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[08:25:54.814]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[08:25:54.814]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[08:25:54.814]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[08:25:54.814]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[08:25:54.814]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[08:25:54.814]                     -1604604761L, 1421229008L, -1268333714L, 
[08:25:54.814]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[08:25:54.814]                     -2070476623L, -2099222749L, 1141171236L, 
[08:25:54.814]                     -146426158L, -1797385433L, -1129376399L, 
[08:25:54.814]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[08:25:54.814]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[08:25:54.814]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[08:25:54.814]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[08:25:54.814]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[08:25:54.814]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[08:25:54.814]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[08:25:54.814]                     -1092079724L, -1765622238L, -1882554057L, 
[08:25:54.814]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[08:25:54.814]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[08:25:54.814]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[08:25:54.814]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[08:25:54.814]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[08:25:54.814]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[08:25:54.814]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[08:25:54.814]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[08:25:54.814]                     865377681L, -1127426242L), envir = base::globalenv(), 
[08:25:54.814]                       inherits = FALSE)
[08:25:54.814]                     NULL
[08:25:54.814]                   }
[08:25:54.814]                   options(future.plan = NULL)
[08:25:54.814]                   if (is.na(NA_character_)) 
[08:25:54.814]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.814]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:54.814]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:54.814]                     .init = FALSE)
[08:25:54.814]                 }
[08:25:54.814]             }
[08:25:54.814]         }
[08:25:54.814]     })
[08:25:54.814]     if (TRUE) {
[08:25:54.814]         base::sink(type = "output", split = FALSE)
[08:25:54.814]         if (TRUE) {
[08:25:54.814]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:54.814]         }
[08:25:54.814]         else {
[08:25:54.814]             ...future.result["stdout"] <- base::list(NULL)
[08:25:54.814]         }
[08:25:54.814]         base::close(...future.stdout)
[08:25:54.814]         ...future.stdout <- NULL
[08:25:54.814]     }
[08:25:54.814]     ...future.result$conditions <- ...future.conditions
[08:25:54.814]     ...future.result$finished <- base::Sys.time()
[08:25:54.814]     ...future.result
[08:25:54.814] }
[08:25:54.816] assign_globals() ...
[08:25:54.816] List of 5
[08:25:54.816]  $ ...future.FUN            :function (...)  
[08:25:54.816]  $ future.call.arguments    : list()
[08:25:54.816]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.816]  $ ...future.elements_ii    :List of 5
[08:25:54.816]   ..$ : int 0
[08:25:54.816]   ..$ : int 0
[08:25:54.816]   ..$ : int 0
[08:25:54.816]   ..$ : int 0
[08:25:54.816]   ..$ : int 0
[08:25:54.816]  $ ...future.seeds_ii       :List of 5
[08:25:54.816]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[08:25:54.816]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[08:25:54.816]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[08:25:54.816]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[08:25:54.816]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[08:25:54.816]  $ ...future.globals.maxSize: NULL
[08:25:54.816]  - attr(*, "where")=List of 5
[08:25:54.816]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:54.816]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:54.816]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:54.816]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:54.816]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:54.816]  - attr(*, "resolved")= logi FALSE
[08:25:54.816]  - attr(*, "total_size")= num 7184
[08:25:54.816]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.816]  - attr(*, "already-done")= logi TRUE
[08:25:54.824] - reassign environment for ‘...future.FUN’
[08:25:54.824] - copied ‘...future.FUN’ to environment
[08:25:54.824] - copied ‘future.call.arguments’ to environment
[08:25:54.824] - copied ‘...future.elements_ii’ to environment
[08:25:54.824] - copied ‘...future.seeds_ii’ to environment
[08:25:54.824] - copied ‘...future.globals.maxSize’ to environment
[08:25:54.824] assign_globals() ... done
[08:25:54.824] plan(): Setting new future strategy stack:
[08:25:54.825] List of future strategies:
[08:25:54.825] 1. sequential:
[08:25:54.825]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.825]    - tweaked: FALSE
[08:25:54.825]    - call: NULL
[08:25:54.825] plan(): nbrOfWorkers() = 1
[08:25:54.826] plan(): Setting new future strategy stack:
[08:25:54.826] List of future strategies:
[08:25:54.826] 1. sequential:
[08:25:54.826]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.826]    - tweaked: FALSE
[08:25:54.826]    - call: plan(strategy)
[08:25:54.826] plan(): nbrOfWorkers() = 1
[08:25:54.826] SequentialFuture started (and completed)
[08:25:54.827] - Launch lazy future ... done
[08:25:54.827] run() for ‘SequentialFuture’ ... done
[08:25:54.827] Created future:
[08:25:54.827] SequentialFuture:
[08:25:54.827] Label: ‘future_replicate-1’
[08:25:54.827] Expression:
[08:25:54.827] {
[08:25:54.827]     do.call(function(...) {
[08:25:54.827]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.827]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.827]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.827]             on.exit(options(oopts), add = TRUE)
[08:25:54.827]         }
[08:25:54.827]         {
[08:25:54.827]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.827]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.827]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.827]                   envir = globalenv(), inherits = FALSE)
[08:25:54.827]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.827]             })
[08:25:54.827]         }
[08:25:54.827]     }, args = future.call.arguments)
[08:25:54.827] }
[08:25:54.827] Lazy evaluation: FALSE
[08:25:54.827] Asynchronous evaluation: FALSE
[08:25:54.827] Local evaluation: TRUE
[08:25:54.827] Environment: R_GlobalEnv
[08:25:54.827] Capture standard output: TRUE
[08:25:54.827] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:54.827] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:54.827] Packages: <none>
[08:25:54.827] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:54.827] Resolved: TRUE
[08:25:54.827] Value: 91 bytes of class ‘list’
[08:25:54.827] Early signaling: FALSE
[08:25:54.827] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:54.827] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.828] Chunk #1 of 1 ... DONE
[08:25:54.828] Launching 1 futures (chunks) ... DONE
[08:25:54.828] Resolving 1 futures (chunks) ...
[08:25:54.828] resolve() on list ...
[08:25:54.828]  recursive: 0
[08:25:54.828]  length: 1
[08:25:54.828] 
[08:25:54.828] resolved() for ‘SequentialFuture’ ...
[08:25:54.828] - state: ‘finished’
[08:25:54.829] - run: TRUE
[08:25:54.829] - result: ‘FutureResult’
[08:25:54.829] resolved() for ‘SequentialFuture’ ... done
[08:25:54.829] Future #1
[08:25:54.829] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:54.829] - nx: 1
[08:25:54.829] - relay: TRUE
[08:25:54.829] - stdout: TRUE
[08:25:54.829] - signal: TRUE
[08:25:54.829] - resignal: FALSE
[08:25:54.829] - force: TRUE
[08:25:54.830] - relayed: [n=1] FALSE
[08:25:54.830] - queued futures: [n=1] FALSE
[08:25:54.830]  - until=1
[08:25:54.830]  - relaying element #1
[08:25:54.830] - relayed: [n=1] TRUE
[08:25:54.830] - queued futures: [n=1] TRUE
[08:25:54.830] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:54.830]  length: 0 (resolved future 1)
[08:25:54.830] Relaying remaining futures
[08:25:54.830] signalConditionsASAP(NULL, pos=0) ...
[08:25:54.831] - nx: 1
[08:25:54.831] - relay: TRUE
[08:25:54.831] - stdout: TRUE
[08:25:54.831] - signal: TRUE
[08:25:54.831] - resignal: FALSE
[08:25:54.831] - force: TRUE
[08:25:54.831] - relayed: [n=1] TRUE
[08:25:54.831] - queued futures: [n=1] TRUE
 - flush all
[08:25:54.831] - relayed: [n=1] TRUE
[08:25:54.831] - queued futures: [n=1] TRUE
[08:25:54.831] signalConditionsASAP(NULL, pos=0) ... done
[08:25:54.831] resolve() on list ... DONE
[08:25:54.832]  - Number of value chunks collected: 1
[08:25:54.832] Resolving 1 futures (chunks) ... DONE
[08:25:54.832] Reducing values from 1 chunks ...
[08:25:54.832]  - Number of values collected after concatenation: 5
[08:25:54.832]  - Number of values expected: 5
[08:25:54.832] Reducing values from 1 chunks ... DONE
[08:25:54.832] future_lapply() ... DONE
- example(replicate) ...
[08:25:54.832] future_lapply() ...
[08:25:54.833] Generating random seeds ...
[08:25:54.833] Generating random seed streams for 5 elements ...
[08:25:54.833] Generating random seed streams for 5 elements ... DONE
[08:25:54.833] Generating random seeds ... DONE
[08:25:54.833] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:54.834] Number of chunks: 1
[08:25:54.834] getGlobalsAndPackagesXApply() ...
[08:25:54.834]  - future.globals: TRUE
[08:25:54.834] getGlobalsAndPackages() ...
[08:25:54.834] Searching for globals...
[08:25:54.836] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[08:25:54.836] Searching for globals ... DONE
[08:25:54.836] Resolving globals: FALSE
[08:25:54.837] The total size of the 3 globals is 617 bytes (617 bytes)
[08:25:54.837] The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[08:25:54.837] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[08:25:54.837] 
[08:25:54.837] getGlobalsAndPackages() ... DONE
[08:25:54.837]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[08:25:54.839]  - needed namespaces: [n=0] 
[08:25:54.839] Finding globals ... DONE
[08:25:54.840]  - use_args: TRUE
[08:25:54.840]  - Getting '...' globals ...
[08:25:54.840] resolve() on list ...
[08:25:54.840]  recursive: 0
[08:25:54.840]  length: 1
[08:25:54.840]  elements: ‘...’
[08:25:54.840]  length: 0 (resolved future 1)
[08:25:54.840] resolve() on list ... DONE
[08:25:54.841]    - '...' content: [n=0] 
[08:25:54.841] List of 1
[08:25:54.841]  $ ...: list()
[08:25:54.841]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.841]  - attr(*, "where")=List of 1
[08:25:54.841]   ..$ ...:<environment: 0x55f778016168> 
[08:25:54.841]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.841]  - attr(*, "resolved")= logi TRUE
[08:25:54.841]  - attr(*, "total_size")= num NA
[08:25:54.843]  - Getting '...' globals ... DONE
[08:25:54.843] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[08:25:54.843] List of 4
[08:25:54.843]  $ ...future.FUN:function (...)  
[08:25:54.843]  $ foo          :function (x = 1, y = 2)  
[08:25:54.843]  $ x            : num 3
[08:25:54.843]  $ ...          : list()
[08:25:54.843]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.843]  - attr(*, "where")=List of 4
[08:25:54.843]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:54.843]   ..$ foo          :<environment: R_EmptyEnv> 
[08:25:54.843]   ..$ x            :<environment: R_EmptyEnv> 
[08:25:54.843]   ..$ ...          :<environment: 0x55f778016168> 
[08:25:54.843]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.843]  - attr(*, "resolved")= logi FALSE
[08:25:54.843]  - attr(*, "total_size")= num 7967
[08:25:54.847] Packages to be attached in all futures: [n=0] 
[08:25:54.847] getGlobalsAndPackagesXApply() ... DONE
[08:25:54.847] Number of futures (= number of chunks): 1
[08:25:54.847] Launching 1 futures (chunks) ...
[08:25:54.847] Chunk #1 of 1 ...
[08:25:54.847]  - Finding globals in 'X' for chunk #1 ...
[08:25:54.848] getGlobalsAndPackages() ...
[08:25:54.848] Searching for globals...
[08:25:54.848] 
[08:25:54.848] Searching for globals ... DONE
[08:25:54.848] - globals: [0] <none>
[08:25:54.848] getGlobalsAndPackages() ... DONE
[08:25:54.848]    + additional globals found: [n=0] 
[08:25:54.848]    + additional namespaces needed: [n=0] 
[08:25:54.848]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:54.848]  - seeds: [5] <seeds>
[08:25:54.849]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.849] getGlobalsAndPackages() ...
[08:25:54.849] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.849] Resolving globals: FALSE
[08:25:54.849] Tweak future expression to call with '...' arguments ...
[08:25:54.849] {
[08:25:54.849]     do.call(function(...) {
[08:25:54.849]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.849]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.849]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.849]             on.exit(options(oopts), add = TRUE)
[08:25:54.849]         }
[08:25:54.849]         {
[08:25:54.849]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.849]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.849]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.849]                   envir = globalenv(), inherits = FALSE)
[08:25:54.849]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.849]             })
[08:25:54.849]         }
[08:25:54.849]     }, args = future.call.arguments)
[08:25:54.849] }
[08:25:54.849] Tweak future expression to call with '...' arguments ... DONE
[08:25:54.850] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.850] 
[08:25:54.850] getGlobalsAndPackages() ... DONE
[08:25:54.850] run() for ‘Future’ ...
[08:25:54.850] - state: ‘created’
[08:25:54.850] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:54.851] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.851] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:54.851]   - Field: ‘label’
[08:25:54.851]   - Field: ‘local’
[08:25:54.851]   - Field: ‘owner’
[08:25:54.851]   - Field: ‘envir’
[08:25:54.851]   - Field: ‘packages’
[08:25:54.851]   - Field: ‘gc’
[08:25:54.851]   - Field: ‘conditions’
[08:25:54.852]   - Field: ‘expr’
[08:25:54.852]   - Field: ‘uuid’
[08:25:54.852]   - Field: ‘seed’
[08:25:54.852]   - Field: ‘version’
[08:25:54.852]   - Field: ‘result’
[08:25:54.852]   - Field: ‘asynchronous’
[08:25:54.852]   - Field: ‘calls’
[08:25:54.852]   - Field: ‘globals’
[08:25:54.852]   - Field: ‘stdout’
[08:25:54.852]   - Field: ‘earlySignal’
[08:25:54.852]   - Field: ‘lazy’
[08:25:54.853]   - Field: ‘state’
[08:25:54.853] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:54.853] - Launch lazy future ...
[08:25:54.853] Packages needed by the future expression (n = 0): <none>
[08:25:54.853] Packages needed by future strategies (n = 0): <none>
[08:25:54.853] {
[08:25:54.853]     {
[08:25:54.853]         {
[08:25:54.853]             ...future.startTime <- base::Sys.time()
[08:25:54.853]             {
[08:25:54.853]                 {
[08:25:54.853]                   {
[08:25:54.853]                     base::local({
[08:25:54.853]                       has_future <- base::requireNamespace("future", 
[08:25:54.853]                         quietly = TRUE)
[08:25:54.853]                       if (has_future) {
[08:25:54.853]                         ns <- base::getNamespace("future")
[08:25:54.853]                         version <- ns[[".package"]][["version"]]
[08:25:54.853]                         if (is.null(version)) 
[08:25:54.853]                           version <- utils::packageVersion("future")
[08:25:54.853]                       }
[08:25:54.853]                       else {
[08:25:54.853]                         version <- NULL
[08:25:54.853]                       }
[08:25:54.853]                       if (!has_future || version < "1.8.0") {
[08:25:54.853]                         info <- base::c(r_version = base::gsub("R version ", 
[08:25:54.853]                           "", base::R.version$version.string), 
[08:25:54.853]                           platform = base::sprintf("%s (%s-bit)", 
[08:25:54.853]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:54.853]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:54.853]                             "release", "version")], collapse = " "), 
[08:25:54.853]                           hostname = base::Sys.info()[["nodename"]])
[08:25:54.853]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:25:54.853]                           info)
[08:25:54.853]                         info <- base::paste(info, collapse = "; ")
[08:25:54.853]                         if (!has_future) {
[08:25:54.853]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:54.853]                             info)
[08:25:54.853]                         }
[08:25:54.853]                         else {
[08:25:54.853]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:54.853]                             info, version)
[08:25:54.853]                         }
[08:25:54.853]                         base::stop(msg)
[08:25:54.853]                       }
[08:25:54.853]                     })
[08:25:54.853]                   }
[08:25:54.853]                   ...future.strategy.old <- future::plan("list")
[08:25:54.853]                   options(future.plan = NULL)
[08:25:54.853]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.853]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:54.853]                 }
[08:25:54.853]                 ...future.workdir <- getwd()
[08:25:54.853]             }
[08:25:54.853]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:54.853]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:54.853]         }
[08:25:54.853]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:54.853]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:54.853]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:54.853]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:54.853]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:54.853]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:54.853]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:54.853]             base::names(...future.oldOptions))
[08:25:54.853]     }
[08:25:54.853]     if (FALSE) {
[08:25:54.853]     }
[08:25:54.853]     else {
[08:25:54.853]         if (TRUE) {
[08:25:54.853]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:54.853]                 open = "w")
[08:25:54.853]         }
[08:25:54.853]         else {
[08:25:54.853]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:54.853]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:54.853]         }
[08:25:54.853]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:54.853]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:54.853]             base::sink(type = "output", split = FALSE)
[08:25:54.853]             base::close(...future.stdout)
[08:25:54.853]         }, add = TRUE)
[08:25:54.853]     }
[08:25:54.853]     ...future.frame <- base::sys.nframe()
[08:25:54.853]     ...future.conditions <- base::list()
[08:25:54.853]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:54.853]     if (FALSE) {
[08:25:54.853]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:54.853]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:54.853]     }
[08:25:54.853]     ...future.result <- base::tryCatch({
[08:25:54.853]         base::withCallingHandlers({
[08:25:54.853]             ...future.value <- base::withVisible(base::local({
[08:25:54.853]                 do.call(function(...) {
[08:25:54.853]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.853]                   if (!identical(...future.globals.maxSize.org, 
[08:25:54.853]                     ...future.globals.maxSize)) {
[08:25:54.853]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.853]                     on.exit(options(oopts), add = TRUE)
[08:25:54.853]                   }
[08:25:54.853]                   {
[08:25:54.853]                     lapply(seq_along(...future.elements_ii), 
[08:25:54.853]                       FUN = function(jj) {
[08:25:54.853]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.853]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.853]                           envir = globalenv(), inherits = FALSE)
[08:25:54.853]                         ...future.FUN(...future.X_jj, ...)
[08:25:54.853]                       })
[08:25:54.853]                   }
[08:25:54.853]                 }, args = future.call.arguments)
[08:25:54.853]             }))
[08:25:54.853]             future::FutureResult(value = ...future.value$value, 
[08:25:54.853]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.853]                   ...future.rng), globalenv = if (FALSE) 
[08:25:54.853]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:54.853]                     ...future.globalenv.names))
[08:25:54.853]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:54.853]         }, condition = base::local({
[08:25:54.853]             c <- base::c
[08:25:54.853]             inherits <- base::inherits
[08:25:54.853]             invokeRestart <- base::invokeRestart
[08:25:54.853]             length <- base::length
[08:25:54.853]             list <- base::list
[08:25:54.853]             seq.int <- base::seq.int
[08:25:54.853]             signalCondition <- base::signalCondition
[08:25:54.853]             sys.calls <- base::sys.calls
[08:25:54.853]             `[[` <- base::`[[`
[08:25:54.853]             `+` <- base::`+`
[08:25:54.853]             `<<-` <- base::`<<-`
[08:25:54.853]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:54.853]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:54.853]                   3L)]
[08:25:54.853]             }
[08:25:54.853]             function(cond) {
[08:25:54.853]                 is_error <- inherits(cond, "error")
[08:25:54.853]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:54.853]                   NULL)
[08:25:54.853]                 if (is_error) {
[08:25:54.853]                   sessionInformation <- function() {
[08:25:54.853]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:54.853]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:54.853]                       search = base::search(), system = base::Sys.info())
[08:25:54.853]                   }
[08:25:54.853]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.853]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:54.853]                     cond$call), session = sessionInformation(), 
[08:25:54.853]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:54.853]                   signalCondition(cond)
[08:25:54.853]                 }
[08:25:54.853]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:54.853]                 "immediateCondition"))) {
[08:25:54.853]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:54.853]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.853]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:54.853]                   if (TRUE && !signal) {
[08:25:54.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.853]                     {
[08:25:54.853]                       inherits <- base::inherits
[08:25:54.853]                       invokeRestart <- base::invokeRestart
[08:25:54.853]                       is.null <- base::is.null
[08:25:54.853]                       muffled <- FALSE
[08:25:54.853]                       if (inherits(cond, "message")) {
[08:25:54.853]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.853]                         if (muffled) 
[08:25:54.853]                           invokeRestart("muffleMessage")
[08:25:54.853]                       }
[08:25:54.853]                       else if (inherits(cond, "warning")) {
[08:25:54.853]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.853]                         if (muffled) 
[08:25:54.853]                           invokeRestart("muffleWarning")
[08:25:54.853]                       }
[08:25:54.853]                       else if (inherits(cond, "condition")) {
[08:25:54.853]                         if (!is.null(pattern)) {
[08:25:54.853]                           computeRestarts <- base::computeRestarts
[08:25:54.853]                           grepl <- base::grepl
[08:25:54.853]                           restarts <- computeRestarts(cond)
[08:25:54.853]                           for (restart in restarts) {
[08:25:54.853]                             name <- restart$name
[08:25:54.853]                             if (is.null(name)) 
[08:25:54.853]                               next
[08:25:54.853]                             if (!grepl(pattern, name)) 
[08:25:54.853]                               next
[08:25:54.853]                             invokeRestart(restart)
[08:25:54.853]                             muffled <- TRUE
[08:25:54.853]                             break
[08:25:54.853]                           }
[08:25:54.853]                         }
[08:25:54.853]                       }
[08:25:54.853]                       invisible(muffled)
[08:25:54.853]                     }
[08:25:54.853]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.853]                   }
[08:25:54.853]                 }
[08:25:54.853]                 else {
[08:25:54.853]                   if (TRUE) {
[08:25:54.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.853]                     {
[08:25:54.853]                       inherits <- base::inherits
[08:25:54.853]                       invokeRestart <- base::invokeRestart
[08:25:54.853]                       is.null <- base::is.null
[08:25:54.853]                       muffled <- FALSE
[08:25:54.853]                       if (inherits(cond, "message")) {
[08:25:54.853]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.853]                         if (muffled) 
[08:25:54.853]                           invokeRestart("muffleMessage")
[08:25:54.853]                       }
[08:25:54.853]                       else if (inherits(cond, "warning")) {
[08:25:54.853]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.853]                         if (muffled) 
[08:25:54.853]                           invokeRestart("muffleWarning")
[08:25:54.853]                       }
[08:25:54.853]                       else if (inherits(cond, "condition")) {
[08:25:54.853]                         if (!is.null(pattern)) {
[08:25:54.853]                           computeRestarts <- base::computeRestarts
[08:25:54.853]                           grepl <- base::grepl
[08:25:54.853]                           restarts <- computeRestarts(cond)
[08:25:54.853]                           for (restart in restarts) {
[08:25:54.853]                             name <- restart$name
[08:25:54.853]                             if (is.null(name)) 
[08:25:54.853]                               next
[08:25:54.853]                             if (!grepl(pattern, name)) 
[08:25:54.853]                               next
[08:25:54.853]                             invokeRestart(restart)
[08:25:54.853]                             muffled <- TRUE
[08:25:54.853]                             break
[08:25:54.853]                           }
[08:25:54.853]                         }
[08:25:54.853]                       }
[08:25:54.853]                       invisible(muffled)
[08:25:54.853]                     }
[08:25:54.853]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.853]                   }
[08:25:54.853]                 }
[08:25:54.853]             }
[08:25:54.853]         }))
[08:25:54.853]     }, error = function(ex) {
[08:25:54.853]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:54.853]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.853]                 ...future.rng), started = ...future.startTime, 
[08:25:54.853]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:54.853]             version = "1.8"), class = "FutureResult")
[08:25:54.853]     }, finally = {
[08:25:54.853]         if (!identical(...future.workdir, getwd())) 
[08:25:54.853]             setwd(...future.workdir)
[08:25:54.853]         {
[08:25:54.853]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:54.853]                 ...future.oldOptions$nwarnings <- NULL
[08:25:54.853]             }
[08:25:54.853]             base::options(...future.oldOptions)
[08:25:54.853]             if (.Platform$OS.type == "windows") {
[08:25:54.853]                 old_names <- names(...future.oldEnvVars)
[08:25:54.853]                 envs <- base::Sys.getenv()
[08:25:54.853]                 names <- names(envs)
[08:25:54.853]                 common <- intersect(names, old_names)
[08:25:54.853]                 added <- setdiff(names, old_names)
[08:25:54.853]                 removed <- setdiff(old_names, names)
[08:25:54.853]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:54.853]                   envs[common]]
[08:25:54.853]                 NAMES <- toupper(changed)
[08:25:54.853]                 args <- list()
[08:25:54.853]                 for (kk in seq_along(NAMES)) {
[08:25:54.853]                   name <- changed[[kk]]
[08:25:54.853]                   NAME <- NAMES[[kk]]
[08:25:54.853]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.853]                     next
[08:25:54.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.853]                 }
[08:25:54.853]                 NAMES <- toupper(added)
[08:25:54.853]                 for (kk in seq_along(NAMES)) {
[08:25:54.853]                   name <- added[[kk]]
[08:25:54.853]                   NAME <- NAMES[[kk]]
[08:25:54.853]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.853]                     next
[08:25:54.853]                   args[[name]] <- ""
[08:25:54.853]                 }
[08:25:54.853]                 NAMES <- toupper(removed)
[08:25:54.853]                 for (kk in seq_along(NAMES)) {
[08:25:54.853]                   name <- removed[[kk]]
[08:25:54.853]                   NAME <- NAMES[[kk]]
[08:25:54.853]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.853]                     next
[08:25:54.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.853]                 }
[08:25:54.853]                 if (length(args) > 0) 
[08:25:54.853]                   base::do.call(base::Sys.setenv, args = args)
[08:25:54.853]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:54.853]             }
[08:25:54.853]             else {
[08:25:54.853]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:54.853]             }
[08:25:54.853]             {
[08:25:54.853]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:54.853]                   0L) {
[08:25:54.853]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:54.853]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:54.853]                   base::options(opts)
[08:25:54.853]                 }
[08:25:54.853]                 {
[08:25:54.853]                   {
[08:25:54.853]                     base::assign(".Random.seed", c(10403L, 8L, 
[08:25:54.853]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[08:25:54.853]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[08:25:54.853]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[08:25:54.853]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[08:25:54.853]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[08:25:54.853]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[08:25:54.853]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[08:25:54.853]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[08:25:54.853]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[08:25:54.853]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[08:25:54.853]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[08:25:54.853]                     -1512233174L, -1985955764L, -425390065L, 
[08:25:54.853]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[08:25:54.853]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[08:25:54.853]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[08:25:54.853]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[08:25:54.853]                     1818328109L, -1284085436L, -1981489558L, 
[08:25:54.853]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[08:25:54.853]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[08:25:54.853]                     -1718567047L, -793788661L, -1133789126L, 
[08:25:54.853]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[08:25:54.853]                     -1823521982L, -1345991523L, -1672661737L, 
[08:25:54.853]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[08:25:54.853]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[08:25:54.853]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[08:25:54.853]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[08:25:54.853]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[08:25:54.853]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[08:25:54.853]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[08:25:54.853]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[08:25:54.853]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[08:25:54.853]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[08:25:54.853]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[08:25:54.853]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[08:25:54.853]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[08:25:54.853]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[08:25:54.853]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[08:25:54.853]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[08:25:54.853]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[08:25:54.853]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[08:25:54.853]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[08:25:54.853]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[08:25:54.853]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[08:25:54.853]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[08:25:54.853]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[08:25:54.853]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[08:25:54.853]                     -1119334354L, -1521015416L, -2041922421L, 
[08:25:54.853]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[08:25:54.853]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[08:25:54.853]                     1232111981L, -1801753084L, -1608606422L, 
[08:25:54.853]                     -1172096363L, 1420874031L, -1210473418L, 
[08:25:54.853]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[08:25:54.853]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[08:25:54.853]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[08:25:54.853]                     679371266L, -591318819L, -104578089L, -172818754L, 
[08:25:54.853]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[08:25:54.853]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[08:25:54.853]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[08:25:54.853]                     -332493318L, -1978392251L, -1691039632L, 
[08:25:54.853]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[08:25:54.853]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[08:25:54.853]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[08:25:54.853]                     87560756L, -87565624L, 426345146L, -699970416L, 
[08:25:54.853]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[08:25:54.853]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[08:25:54.853]                     -1178330196L, -687617348L, -1701912078L, 
[08:25:54.853]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[08:25:54.853]                     -1345416048L, 1816730492L, -1570431212L, 
[08:25:54.853]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[08:25:54.853]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[08:25:54.853]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[08:25:54.853]                     -1493184262L, -1943836976L, -590788308L, 
[08:25:54.853]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[08:25:54.853]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[08:25:54.853]                     1274857340L, -1205842638L, -1938479504L, 
[08:25:54.853]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[08:25:54.853]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[08:25:54.853]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[08:25:54.853]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[08:25:54.853]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[08:25:54.853]                     -1460751252L, 1201879444L, -1459788718L, 
[08:25:54.853]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[08:25:54.853]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[08:25:54.853]                     -420945808L, -1997735900L, -1838404552L, 
[08:25:54.853]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[08:25:54.853]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[08:25:54.853]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[08:25:54.853]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[08:25:54.853]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[08:25:54.853]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[08:25:54.853]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[08:25:54.853]                     942193650L, 751741680L, 689743428L, -18455976L, 
[08:25:54.853]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[08:25:54.853]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[08:25:54.853]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[08:25:54.853]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[08:25:54.853]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[08:25:54.853]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[08:25:54.853]                     -1357570110L, 1896595240L, -2066952276L, 
[08:25:54.853]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[08:25:54.853]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[08:25:54.853]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[08:25:54.853]                     769655120L, 236357794L, 181393736L, -13334772L, 
[08:25:54.853]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[08:25:54.853]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[08:25:54.853]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[08:25:54.853]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[08:25:54.853]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[08:25:54.853]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[08:25:54.853]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[08:25:54.853]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[08:25:54.853]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[08:25:54.853]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[08:25:54.853]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[08:25:54.853]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[08:25:54.853]                     -1365842884L, -438961294L, -1851472272L, 
[08:25:54.853]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[08:25:54.853]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[08:25:54.853]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[08:25:54.853]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[08:25:54.853]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[08:25:54.853]                     -594809770L, -2146766621L, -2013964635L, 
[08:25:54.853]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[08:25:54.853]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[08:25:54.853]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[08:25:54.853]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[08:25:54.853]                     -1426021878L, -1285634264L, 1507547537L, 
[08:25:54.853]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[08:25:54.853]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[08:25:54.853]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[08:25:54.853]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[08:25:54.853]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[08:25:54.853]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[08:25:54.853]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[08:25:54.853]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[08:25:54.853]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[08:25:54.853]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[08:25:54.853]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[08:25:54.853]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[08:25:54.853]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[08:25:54.853]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[08:25:54.853]                     -1604604761L, 1421229008L, -1268333714L, 
[08:25:54.853]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[08:25:54.853]                     -2070476623L, -2099222749L, 1141171236L, 
[08:25:54.853]                     -146426158L, -1797385433L, -1129376399L, 
[08:25:54.853]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[08:25:54.853]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[08:25:54.853]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[08:25:54.853]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[08:25:54.853]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[08:25:54.853]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[08:25:54.853]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[08:25:54.853]                     -1092079724L, -1765622238L, -1882554057L, 
[08:25:54.853]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[08:25:54.853]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[08:25:54.853]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[08:25:54.853]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[08:25:54.853]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[08:25:54.853]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[08:25:54.853]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[08:25:54.853]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[08:25:54.853]                     865377681L, -1127426242L), envir = base::globalenv(), 
[08:25:54.853]                       inherits = FALSE)
[08:25:54.853]                     NULL
[08:25:54.853]                   }
[08:25:54.853]                   options(future.plan = NULL)
[08:25:54.853]                   if (is.na(NA_character_)) 
[08:25:54.853]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.853]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:54.853]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:54.853]                     .init = FALSE)
[08:25:54.853]                 }
[08:25:54.853]             }
[08:25:54.853]         }
[08:25:54.853]     })
[08:25:54.853]     if (TRUE) {
[08:25:54.853]         base::sink(type = "output", split = FALSE)
[08:25:54.853]         if (TRUE) {
[08:25:54.853]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:54.853]         }
[08:25:54.853]         else {
[08:25:54.853]             ...future.result["stdout"] <- base::list(NULL)
[08:25:54.853]         }
[08:25:54.853]         base::close(...future.stdout)
[08:25:54.853]         ...future.stdout <- NULL
[08:25:54.853]     }
[08:25:54.853]     ...future.result$conditions <- ...future.conditions
[08:25:54.853]     ...future.result$finished <- base::Sys.time()
[08:25:54.853]     ...future.result
[08:25:54.853] }
[08:25:54.856] assign_globals() ...
[08:25:54.856] List of 7
[08:25:54.856]  $ ...future.FUN            :function (...)  
[08:25:54.856]  $ foo                      :function (x = 1, y = 2)  
[08:25:54.856]  $ x                        : num 3
[08:25:54.856]  $ future.call.arguments    : list()
[08:25:54.856]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.856]  $ ...future.elements_ii    :List of 5
[08:25:54.856]   ..$ : int 0
[08:25:54.856]   ..$ : int 0
[08:25:54.856]   ..$ : int 0
[08:25:54.856]   ..$ : int 0
[08:25:54.856]   ..$ : int 0
[08:25:54.856]  $ ...future.seeds_ii       :List of 5
[08:25:54.856]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[08:25:54.856]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[08:25:54.856]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[08:25:54.856]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[08:25:54.856]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[08:25:54.856]  $ ...future.globals.maxSize: NULL
[08:25:54.856]  - attr(*, "where")=List of 7
[08:25:54.856]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:54.856]   ..$ foo                      :<environment: R_EmptyEnv> 
[08:25:54.856]   ..$ x                        :<environment: R_EmptyEnv> 
[08:25:54.856]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:54.856]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:54.856]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:54.856]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:54.856]  - attr(*, "resolved")= logi FALSE
[08:25:54.856]  - attr(*, "total_size")= num 7967
[08:25:54.856]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.856]  - attr(*, "already-done")= logi TRUE
[08:25:54.866] - reassign environment for ‘...future.FUN’
[08:25:54.867] - copied ‘...future.FUN’ to environment
[08:25:54.867] - reassign environment for ‘foo’
[08:25:54.867] - copied ‘foo’ to environment
[08:25:54.867] - copied ‘x’ to environment
[08:25:54.867] - copied ‘future.call.arguments’ to environment
[08:25:54.867] - copied ‘...future.elements_ii’ to environment
[08:25:54.867] - copied ‘...future.seeds_ii’ to environment
[08:25:54.867] - copied ‘...future.globals.maxSize’ to environment
[08:25:54.867] assign_globals() ... done
[08:25:54.868] plan(): Setting new future strategy stack:
[08:25:54.868] List of future strategies:
[08:25:54.868] 1. sequential:
[08:25:54.868]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.868]    - tweaked: FALSE
[08:25:54.868]    - call: NULL
[08:25:54.868] plan(): nbrOfWorkers() = 1
[08:25:54.869] plan(): Setting new future strategy stack:
[08:25:54.869] List of future strategies:
[08:25:54.869] 1. sequential:
[08:25:54.869]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.869]    - tweaked: FALSE
[08:25:54.869]    - call: plan(strategy)
[08:25:54.870] plan(): nbrOfWorkers() = 1
[08:25:54.870] SequentialFuture started (and completed)
[08:25:54.870] - Launch lazy future ... done
[08:25:54.870] run() for ‘SequentialFuture’ ... done
[08:25:54.870] Created future:
[08:25:54.870] SequentialFuture:
[08:25:54.870] Label: ‘future_replicate-1’
[08:25:54.870] Expression:
[08:25:54.870] {
[08:25:54.870]     do.call(function(...) {
[08:25:54.870]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.870]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.870]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.870]             on.exit(options(oopts), add = TRUE)
[08:25:54.870]         }
[08:25:54.870]         {
[08:25:54.870]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.870]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.870]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.870]                   envir = globalenv(), inherits = FALSE)
[08:25:54.870]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.870]             })
[08:25:54.870]         }
[08:25:54.870]     }, args = future.call.arguments)
[08:25:54.870] }
[08:25:54.870] Lazy evaluation: FALSE
[08:25:54.870] Asynchronous evaluation: FALSE
[08:25:54.870] Local evaluation: TRUE
[08:25:54.870] Environment: 0x55f778013d40
[08:25:54.870] Capture standard output: TRUE
[08:25:54.870] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:54.870] Globals: 7 objects totaling 1.02 KiB (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, ...)
[08:25:54.870] Packages: <none>
[08:25:54.870] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:54.870] Resolved: TRUE
[08:25:54.870] Value: 151 bytes of class ‘list’
[08:25:54.870] Early signaling: FALSE
[08:25:54.870] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:54.870] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:54.871] Chunk #1 of 1 ... DONE
[08:25:54.871] Launching 1 futures (chunks) ... DONE
[08:25:54.871] Resolving 1 futures (chunks) ...
[08:25:54.871] resolve() on list ...
[08:25:54.871]  recursive: 0
[08:25:54.872]  length: 1
[08:25:54.872] 
[08:25:54.872] resolved() for ‘SequentialFuture’ ...
[08:25:54.872] - state: ‘finished’
[08:25:54.872] - run: TRUE
[08:25:54.872] - result: ‘FutureResult’
[08:25:54.872] resolved() for ‘SequentialFuture’ ... done
[08:25:54.872] Future #1
[08:25:54.872] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:54.872] - nx: 1
[08:25:54.872] - relay: TRUE
[08:25:54.873] - stdout: TRUE
[08:25:54.873] - signal: TRUE
[08:25:54.873] - resignal: FALSE
[08:25:54.873] - force: TRUE
[08:25:54.873] - relayed: [n=1] FALSE
[08:25:54.873] - queued futures: [n=1] FALSE
[08:25:54.873]  - until=1
[08:25:54.873]  - relaying element #1
[08:25:54.873] - relayed: [n=1] TRUE
[08:25:54.873] - queued futures: [n=1] TRUE
[08:25:54.873] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:54.874]  length: 0 (resolved future 1)
[08:25:54.874] Relaying remaining futures
[08:25:54.874] signalConditionsASAP(NULL, pos=0) ...
[08:25:54.874] - nx: 1
[08:25:54.874] - relay: TRUE
[08:25:54.874] - stdout: TRUE
[08:25:54.874] - signal: TRUE
[08:25:54.874] - resignal: FALSE
[08:25:54.874] - force: TRUE
[08:25:54.874] - relayed: [n=1] TRUE
[08:25:54.874] - queued futures: [n=1] TRUE
 - flush all
[08:25:54.875] - relayed: [n=1] TRUE
[08:25:54.875] - queued futures: [n=1] TRUE
[08:25:54.875] signalConditionsASAP(NULL, pos=0) ... done
[08:25:54.875] resolve() on list ... DONE
[08:25:54.875]  - Number of value chunks collected: 1
[08:25:54.875] Resolving 1 futures (chunks) ... DONE
[08:25:54.875] Reducing values from 1 chunks ...
[08:25:54.875]  - Number of values collected after concatenation: 5
[08:25:54.875]  - Number of values expected: 5
[08:25:54.875] Reducing values from 1 chunks ... DONE
[08:25:54.875] future_lapply() ... DONE
[08:25:54.876] plan(): Setting new future strategy stack:
[08:25:54.876] List of future strategies:
[08:25:54.876] 1. sequential:
[08:25:54.876]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.876]    - tweaked: FALSE
[08:25:54.876]    - call: plan(sequential)
[08:25:54.877] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[08:25:54.877] plan(): Setting new future strategy stack:
[08:25:54.877] List of future strategies:
[08:25:54.877] 1. multicore:
[08:25:54.877]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:54.877]    - tweaked: FALSE
[08:25:54.877]    - call: plan(strategy)
[08:25:54.879] plan(): nbrOfWorkers() = 2
[08:25:54.879] future_lapply() ...
[08:25:54.880] Generating random seeds ...
[08:25:54.880] Generating random seed streams for 5 elements ...
[08:25:54.880] Generating random seed streams for 5 elements ... DONE
[08:25:54.880] Generating random seeds ... DONE
[08:25:54.880] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:54.883] Number of chunks: 2
[08:25:54.883] getGlobalsAndPackagesXApply() ...
[08:25:54.883]  - future.globals: TRUE
[08:25:54.883] getGlobalsAndPackages() ...
[08:25:54.883] Searching for globals...
[08:25:54.885] - globals found: [2] ‘FUN’, ‘sample’
[08:25:54.885] Searching for globals ... DONE
[08:25:54.885] Resolving globals: FALSE
[08:25:54.885] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:54.885] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:54.886] - globals: [1] ‘FUN’
[08:25:54.886] 
[08:25:54.886] getGlobalsAndPackages() ... DONE
[08:25:54.886]  - globals found/used: [n=1] ‘FUN’
[08:25:54.886]  - needed namespaces: [n=0] 
[08:25:54.886] Finding globals ... DONE
[08:25:54.886]  - use_args: TRUE
[08:25:54.886]  - Getting '...' globals ...
[08:25:54.886] resolve() on list ...
[08:25:54.887]  recursive: 0
[08:25:54.887]  length: 1
[08:25:54.887]  elements: ‘...’
[08:25:54.887]  length: 0 (resolved future 1)
[08:25:54.887] resolve() on list ... DONE
[08:25:54.887]    - '...' content: [n=0] 
[08:25:54.887] List of 1
[08:25:54.887]  $ ...: list()
[08:25:54.887]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.887]  - attr(*, "where")=List of 1
[08:25:54.887]   ..$ ...:<environment: 0x55f777b0b4e0> 
[08:25:54.887]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.887]  - attr(*, "resolved")= logi TRUE
[08:25:54.887]  - attr(*, "total_size")= num NA
[08:25:54.889]  - Getting '...' globals ... DONE
[08:25:54.890] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:54.892] List of 2
[08:25:54.892]  $ ...future.FUN:function (...)  
[08:25:54.892]  $ ...          : list()
[08:25:54.892]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.892]  - attr(*, "where")=List of 2
[08:25:54.892]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:54.892]   ..$ ...          :<environment: 0x55f777b0b4e0> 
[08:25:54.892]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.892]  - attr(*, "resolved")= logi FALSE
[08:25:54.892]  - attr(*, "total_size")= num 7184
[08:25:54.894] Packages to be attached in all futures: [n=0] 
[08:25:54.894] getGlobalsAndPackagesXApply() ... DONE
[08:25:54.895] Number of futures (= number of chunks): 2
[08:25:54.895] Launching 2 futures (chunks) ...
[08:25:54.895] Chunk #1 of 2 ...
[08:25:54.895]  - Finding globals in 'X' for chunk #1 ...
[08:25:54.895] getGlobalsAndPackages() ...
[08:25:54.895] Searching for globals...
[08:25:54.895] 
[08:25:54.895] Searching for globals ... DONE
[08:25:54.896] - globals: [0] <none>
[08:25:54.896] getGlobalsAndPackages() ... DONE
[08:25:54.896]    + additional globals found: [n=0] 
[08:25:54.896]    + additional namespaces needed: [n=0] 
[08:25:54.896]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:54.896]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:54.896]  - seeds: [2] <seeds>
[08:25:54.896]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.896] getGlobalsAndPackages() ...
[08:25:54.896] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.897] Resolving globals: FALSE
[08:25:54.897] Tweak future expression to call with '...' arguments ...
[08:25:54.897] {
[08:25:54.897]     do.call(function(...) {
[08:25:54.897]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.897]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.897]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.897]             on.exit(options(oopts), add = TRUE)
[08:25:54.897]         }
[08:25:54.897]         {
[08:25:54.897]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.897]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.897]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.897]                   envir = globalenv(), inherits = FALSE)
[08:25:54.897]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.897]             })
[08:25:54.897]         }
[08:25:54.897]     }, args = future.call.arguments)
[08:25:54.897] }
[08:25:54.897] Tweak future expression to call with '...' arguments ... DONE
[08:25:54.897] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.897] 
[08:25:54.898] getGlobalsAndPackages() ... DONE
[08:25:54.898] run() for ‘Future’ ...
[08:25:54.898] - state: ‘created’
[08:25:54.898] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:54.900] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:54.900] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:54.900]   - Field: ‘label’
[08:25:54.900]   - Field: ‘local’
[08:25:54.900]   - Field: ‘owner’
[08:25:54.900]   - Field: ‘envir’
[08:25:54.900]   - Field: ‘workers’
[08:25:54.900]   - Field: ‘packages’
[08:25:54.901]   - Field: ‘gc’
[08:25:54.901]   - Field: ‘job’
[08:25:54.901]   - Field: ‘conditions’
[08:25:54.901]   - Field: ‘expr’
[08:25:54.901]   - Field: ‘uuid’
[08:25:54.901]   - Field: ‘seed’
[08:25:54.901]   - Field: ‘version’
[08:25:54.901]   - Field: ‘result’
[08:25:54.901]   - Field: ‘asynchronous’
[08:25:54.901]   - Field: ‘calls’
[08:25:54.901]   - Field: ‘globals’
[08:25:54.902]   - Field: ‘stdout’
[08:25:54.902]   - Field: ‘earlySignal’
[08:25:54.902]   - Field: ‘lazy’
[08:25:54.902]   - Field: ‘state’
[08:25:54.902] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:54.902] - Launch lazy future ...
[08:25:54.903] Packages needed by the future expression (n = 0): <none>
[08:25:54.903] Packages needed by future strategies (n = 0): <none>
[08:25:54.904] {
[08:25:54.904]     {
[08:25:54.904]         {
[08:25:54.904]             ...future.startTime <- base::Sys.time()
[08:25:54.904]             {
[08:25:54.904]                 {
[08:25:54.904]                   {
[08:25:54.904]                     {
[08:25:54.904]                       base::local({
[08:25:54.904]                         has_future <- base::requireNamespace("future", 
[08:25:54.904]                           quietly = TRUE)
[08:25:54.904]                         if (has_future) {
[08:25:54.904]                           ns <- base::getNamespace("future")
[08:25:54.904]                           version <- ns[[".package"]][["version"]]
[08:25:54.904]                           if (is.null(version)) 
[08:25:54.904]                             version <- utils::packageVersion("future")
[08:25:54.904]                         }
[08:25:54.904]                         else {
[08:25:54.904]                           version <- NULL
[08:25:54.904]                         }
[08:25:54.904]                         if (!has_future || version < "1.8.0") {
[08:25:54.904]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:54.904]                             "", base::R.version$version.string), 
[08:25:54.904]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:54.904]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:54.904]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:54.904]                               "release", "version")], collapse = " "), 
[08:25:54.904]                             hostname = base::Sys.info()[["nodename"]])
[08:25:54.904]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:54.904]                             info)
[08:25:54.904]                           info <- base::paste(info, collapse = "; ")
[08:25:54.904]                           if (!has_future) {
[08:25:54.904]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:54.904]                               info)
[08:25:54.904]                           }
[08:25:54.904]                           else {
[08:25:54.904]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:54.904]                               info, version)
[08:25:54.904]                           }
[08:25:54.904]                           base::stop(msg)
[08:25:54.904]                         }
[08:25:54.904]                       })
[08:25:54.904]                     }
[08:25:54.904]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:54.904]                     base::options(mc.cores = 1L)
[08:25:54.904]                   }
[08:25:54.904]                   ...future.strategy.old <- future::plan("list")
[08:25:54.904]                   options(future.plan = NULL)
[08:25:54.904]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.904]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:54.904]                 }
[08:25:54.904]                 ...future.workdir <- getwd()
[08:25:54.904]             }
[08:25:54.904]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:54.904]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:54.904]         }
[08:25:54.904]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:54.904]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:54.904]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:54.904]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:54.904]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:54.904]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:54.904]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:54.904]             base::names(...future.oldOptions))
[08:25:54.904]     }
[08:25:54.904]     if (FALSE) {
[08:25:54.904]     }
[08:25:54.904]     else {
[08:25:54.904]         if (TRUE) {
[08:25:54.904]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:54.904]                 open = "w")
[08:25:54.904]         }
[08:25:54.904]         else {
[08:25:54.904]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:54.904]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:54.904]         }
[08:25:54.904]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:54.904]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:54.904]             base::sink(type = "output", split = FALSE)
[08:25:54.904]             base::close(...future.stdout)
[08:25:54.904]         }, add = TRUE)
[08:25:54.904]     }
[08:25:54.904]     ...future.frame <- base::sys.nframe()
[08:25:54.904]     ...future.conditions <- base::list()
[08:25:54.904]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:54.904]     if (FALSE) {
[08:25:54.904]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:54.904]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:54.904]     }
[08:25:54.904]     ...future.result <- base::tryCatch({
[08:25:54.904]         base::withCallingHandlers({
[08:25:54.904]             ...future.value <- base::withVisible(base::local({
[08:25:54.904]                 withCallingHandlers({
[08:25:54.904]                   {
[08:25:54.904]                     do.call(function(...) {
[08:25:54.904]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.904]                       if (!identical(...future.globals.maxSize.org, 
[08:25:54.904]                         ...future.globals.maxSize)) {
[08:25:54.904]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.904]                         on.exit(options(oopts), add = TRUE)
[08:25:54.904]                       }
[08:25:54.904]                       {
[08:25:54.904]                         lapply(seq_along(...future.elements_ii), 
[08:25:54.904]                           FUN = function(jj) {
[08:25:54.904]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.904]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.904]                               envir = globalenv(), inherits = FALSE)
[08:25:54.904]                             ...future.FUN(...future.X_jj, ...)
[08:25:54.904]                           })
[08:25:54.904]                       }
[08:25:54.904]                     }, args = future.call.arguments)
[08:25:54.904]                   }
[08:25:54.904]                 }, immediateCondition = function(cond) {
[08:25:54.904]                   save_rds <- function (object, pathname, ...) 
[08:25:54.904]                   {
[08:25:54.904]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:54.904]                     if (file_test("-f", pathname_tmp)) {
[08:25:54.904]                       fi_tmp <- file.info(pathname_tmp)
[08:25:54.904]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:54.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:54.904]                         fi_tmp[["mtime"]])
[08:25:54.904]                     }
[08:25:54.904]                     tryCatch({
[08:25:54.904]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:54.904]                     }, error = function(ex) {
[08:25:54.904]                       msg <- conditionMessage(ex)
[08:25:54.904]                       fi_tmp <- file.info(pathname_tmp)
[08:25:54.904]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:54.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:54.904]                         fi_tmp[["mtime"]], msg)
[08:25:54.904]                       ex$message <- msg
[08:25:54.904]                       stop(ex)
[08:25:54.904]                     })
[08:25:54.904]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:54.904]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:54.904]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:54.904]                       fi_tmp <- file.info(pathname_tmp)
[08:25:54.904]                       fi <- file.info(pathname)
[08:25:54.904]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:54.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:54.904]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:54.904]                         fi[["size"]], fi[["mtime"]])
[08:25:54.904]                       stop(msg)
[08:25:54.904]                     }
[08:25:54.904]                     invisible(pathname)
[08:25:54.904]                   }
[08:25:54.904]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:54.904]                     rootPath = tempdir()) 
[08:25:54.904]                   {
[08:25:54.904]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:54.904]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:54.904]                       tmpdir = path, fileext = ".rds")
[08:25:54.904]                     save_rds(obj, file)
[08:25:54.904]                   }
[08:25:54.904]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:54.904]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.904]                   {
[08:25:54.904]                     inherits <- base::inherits
[08:25:54.904]                     invokeRestart <- base::invokeRestart
[08:25:54.904]                     is.null <- base::is.null
[08:25:54.904]                     muffled <- FALSE
[08:25:54.904]                     if (inherits(cond, "message")) {
[08:25:54.904]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:54.904]                       if (muffled) 
[08:25:54.904]                         invokeRestart("muffleMessage")
[08:25:54.904]                     }
[08:25:54.904]                     else if (inherits(cond, "warning")) {
[08:25:54.904]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:54.904]                       if (muffled) 
[08:25:54.904]                         invokeRestart("muffleWarning")
[08:25:54.904]                     }
[08:25:54.904]                     else if (inherits(cond, "condition")) {
[08:25:54.904]                       if (!is.null(pattern)) {
[08:25:54.904]                         computeRestarts <- base::computeRestarts
[08:25:54.904]                         grepl <- base::grepl
[08:25:54.904]                         restarts <- computeRestarts(cond)
[08:25:54.904]                         for (restart in restarts) {
[08:25:54.904]                           name <- restart$name
[08:25:54.904]                           if (is.null(name)) 
[08:25:54.904]                             next
[08:25:54.904]                           if (!grepl(pattern, name)) 
[08:25:54.904]                             next
[08:25:54.904]                           invokeRestart(restart)
[08:25:54.904]                           muffled <- TRUE
[08:25:54.904]                           break
[08:25:54.904]                         }
[08:25:54.904]                       }
[08:25:54.904]                     }
[08:25:54.904]                     invisible(muffled)
[08:25:54.904]                   }
[08:25:54.904]                   muffleCondition(cond)
[08:25:54.904]                 })
[08:25:54.904]             }))
[08:25:54.904]             future::FutureResult(value = ...future.value$value, 
[08:25:54.904]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.904]                   ...future.rng), globalenv = if (FALSE) 
[08:25:54.904]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:54.904]                     ...future.globalenv.names))
[08:25:54.904]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:54.904]         }, condition = base::local({
[08:25:54.904]             c <- base::c
[08:25:54.904]             inherits <- base::inherits
[08:25:54.904]             invokeRestart <- base::invokeRestart
[08:25:54.904]             length <- base::length
[08:25:54.904]             list <- base::list
[08:25:54.904]             seq.int <- base::seq.int
[08:25:54.904]             signalCondition <- base::signalCondition
[08:25:54.904]             sys.calls <- base::sys.calls
[08:25:54.904]             `[[` <- base::`[[`
[08:25:54.904]             `+` <- base::`+`
[08:25:54.904]             `<<-` <- base::`<<-`
[08:25:54.904]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:54.904]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:54.904]                   3L)]
[08:25:54.904]             }
[08:25:54.904]             function(cond) {
[08:25:54.904]                 is_error <- inherits(cond, "error")
[08:25:54.904]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:54.904]                   NULL)
[08:25:54.904]                 if (is_error) {
[08:25:54.904]                   sessionInformation <- function() {
[08:25:54.904]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:54.904]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:54.904]                       search = base::search(), system = base::Sys.info())
[08:25:54.904]                   }
[08:25:54.904]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.904]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:54.904]                     cond$call), session = sessionInformation(), 
[08:25:54.904]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:54.904]                   signalCondition(cond)
[08:25:54.904]                 }
[08:25:54.904]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:54.904]                 "immediateCondition"))) {
[08:25:54.904]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:54.904]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.904]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:54.904]                   if (TRUE && !signal) {
[08:25:54.904]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.904]                     {
[08:25:54.904]                       inherits <- base::inherits
[08:25:54.904]                       invokeRestart <- base::invokeRestart
[08:25:54.904]                       is.null <- base::is.null
[08:25:54.904]                       muffled <- FALSE
[08:25:54.904]                       if (inherits(cond, "message")) {
[08:25:54.904]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.904]                         if (muffled) 
[08:25:54.904]                           invokeRestart("muffleMessage")
[08:25:54.904]                       }
[08:25:54.904]                       else if (inherits(cond, "warning")) {
[08:25:54.904]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.904]                         if (muffled) 
[08:25:54.904]                           invokeRestart("muffleWarning")
[08:25:54.904]                       }
[08:25:54.904]                       else if (inherits(cond, "condition")) {
[08:25:54.904]                         if (!is.null(pattern)) {
[08:25:54.904]                           computeRestarts <- base::computeRestarts
[08:25:54.904]                           grepl <- base::grepl
[08:25:54.904]                           restarts <- computeRestarts(cond)
[08:25:54.904]                           for (restart in restarts) {
[08:25:54.904]                             name <- restart$name
[08:25:54.904]                             if (is.null(name)) 
[08:25:54.904]                               next
[08:25:54.904]                             if (!grepl(pattern, name)) 
[08:25:54.904]                               next
[08:25:54.904]                             invokeRestart(restart)
[08:25:54.904]                             muffled <- TRUE
[08:25:54.904]                             break
[08:25:54.904]                           }
[08:25:54.904]                         }
[08:25:54.904]                       }
[08:25:54.904]                       invisible(muffled)
[08:25:54.904]                     }
[08:25:54.904]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.904]                   }
[08:25:54.904]                 }
[08:25:54.904]                 else {
[08:25:54.904]                   if (TRUE) {
[08:25:54.904]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.904]                     {
[08:25:54.904]                       inherits <- base::inherits
[08:25:54.904]                       invokeRestart <- base::invokeRestart
[08:25:54.904]                       is.null <- base::is.null
[08:25:54.904]                       muffled <- FALSE
[08:25:54.904]                       if (inherits(cond, "message")) {
[08:25:54.904]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.904]                         if (muffled) 
[08:25:54.904]                           invokeRestart("muffleMessage")
[08:25:54.904]                       }
[08:25:54.904]                       else if (inherits(cond, "warning")) {
[08:25:54.904]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.904]                         if (muffled) 
[08:25:54.904]                           invokeRestart("muffleWarning")
[08:25:54.904]                       }
[08:25:54.904]                       else if (inherits(cond, "condition")) {
[08:25:54.904]                         if (!is.null(pattern)) {
[08:25:54.904]                           computeRestarts <- base::computeRestarts
[08:25:54.904]                           grepl <- base::grepl
[08:25:54.904]                           restarts <- computeRestarts(cond)
[08:25:54.904]                           for (restart in restarts) {
[08:25:54.904]                             name <- restart$name
[08:25:54.904]                             if (is.null(name)) 
[08:25:54.904]                               next
[08:25:54.904]                             if (!grepl(pattern, name)) 
[08:25:54.904]                               next
[08:25:54.904]                             invokeRestart(restart)
[08:25:54.904]                             muffled <- TRUE
[08:25:54.904]                             break
[08:25:54.904]                           }
[08:25:54.904]                         }
[08:25:54.904]                       }
[08:25:54.904]                       invisible(muffled)
[08:25:54.904]                     }
[08:25:54.904]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.904]                   }
[08:25:54.904]                 }
[08:25:54.904]             }
[08:25:54.904]         }))
[08:25:54.904]     }, error = function(ex) {
[08:25:54.904]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:54.904]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.904]                 ...future.rng), started = ...future.startTime, 
[08:25:54.904]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:54.904]             version = "1.8"), class = "FutureResult")
[08:25:54.904]     }, finally = {
[08:25:54.904]         if (!identical(...future.workdir, getwd())) 
[08:25:54.904]             setwd(...future.workdir)
[08:25:54.904]         {
[08:25:54.904]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:54.904]                 ...future.oldOptions$nwarnings <- NULL
[08:25:54.904]             }
[08:25:54.904]             base::options(...future.oldOptions)
[08:25:54.904]             if (.Platform$OS.type == "windows") {
[08:25:54.904]                 old_names <- names(...future.oldEnvVars)
[08:25:54.904]                 envs <- base::Sys.getenv()
[08:25:54.904]                 names <- names(envs)
[08:25:54.904]                 common <- intersect(names, old_names)
[08:25:54.904]                 added <- setdiff(names, old_names)
[08:25:54.904]                 removed <- setdiff(old_names, names)
[08:25:54.904]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:54.904]                   envs[common]]
[08:25:54.904]                 NAMES <- toupper(changed)
[08:25:54.904]                 args <- list()
[08:25:54.904]                 for (kk in seq_along(NAMES)) {
[08:25:54.904]                   name <- changed[[kk]]
[08:25:54.904]                   NAME <- NAMES[[kk]]
[08:25:54.904]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.904]                     next
[08:25:54.904]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.904]                 }
[08:25:54.904]                 NAMES <- toupper(added)
[08:25:54.904]                 for (kk in seq_along(NAMES)) {
[08:25:54.904]                   name <- added[[kk]]
[08:25:54.904]                   NAME <- NAMES[[kk]]
[08:25:54.904]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.904]                     next
[08:25:54.904]                   args[[name]] <- ""
[08:25:54.904]                 }
[08:25:54.904]                 NAMES <- toupper(removed)
[08:25:54.904]                 for (kk in seq_along(NAMES)) {
[08:25:54.904]                   name <- removed[[kk]]
[08:25:54.904]                   NAME <- NAMES[[kk]]
[08:25:54.904]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.904]                     next
[08:25:54.904]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.904]                 }
[08:25:54.904]                 if (length(args) > 0) 
[08:25:54.904]                   base::do.call(base::Sys.setenv, args = args)
[08:25:54.904]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:54.904]             }
[08:25:54.904]             else {
[08:25:54.904]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:54.904]             }
[08:25:54.904]             {
[08:25:54.904]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:54.904]                   0L) {
[08:25:54.904]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:54.904]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:54.904]                   base::options(opts)
[08:25:54.904]                 }
[08:25:54.904]                 {
[08:25:54.904]                   {
[08:25:54.904]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:54.904]                     NULL
[08:25:54.904]                   }
[08:25:54.904]                   options(future.plan = NULL)
[08:25:54.904]                   if (is.na(NA_character_)) 
[08:25:54.904]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.904]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:54.904]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:54.904]                     .init = FALSE)
[08:25:54.904]                 }
[08:25:54.904]             }
[08:25:54.904]         }
[08:25:54.904]     })
[08:25:54.904]     if (TRUE) {
[08:25:54.904]         base::sink(type = "output", split = FALSE)
[08:25:54.904]         if (TRUE) {
[08:25:54.904]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:54.904]         }
[08:25:54.904]         else {
[08:25:54.904]             ...future.result["stdout"] <- base::list(NULL)
[08:25:54.904]         }
[08:25:54.904]         base::close(...future.stdout)
[08:25:54.904]         ...future.stdout <- NULL
[08:25:54.904]     }
[08:25:54.904]     ...future.result$conditions <- ...future.conditions
[08:25:54.904]     ...future.result$finished <- base::Sys.time()
[08:25:54.904]     ...future.result
[08:25:54.904] }
[08:25:54.906] assign_globals() ...
[08:25:54.906] List of 5
[08:25:54.906]  $ ...future.FUN            :function (...)  
[08:25:54.906]  $ future.call.arguments    : list()
[08:25:54.906]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.906]  $ ...future.elements_ii    :List of 2
[08:25:54.906]   ..$ : int 0
[08:25:54.906]   ..$ : int 0
[08:25:54.906]  $ ...future.seeds_ii       :List of 2
[08:25:54.906]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[08:25:54.906]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[08:25:54.906]  $ ...future.globals.maxSize: NULL
[08:25:54.906]  - attr(*, "where")=List of 5
[08:25:54.906]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:54.906]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:54.906]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:54.906]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:54.906]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:54.906]  - attr(*, "resolved")= logi FALSE
[08:25:54.906]  - attr(*, "total_size")= num 7184
[08:25:54.906]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.906]  - attr(*, "already-done")= logi TRUE
[08:25:54.912] - reassign environment for ‘...future.FUN’
[08:25:54.912] - copied ‘...future.FUN’ to environment
[08:25:54.912] - copied ‘future.call.arguments’ to environment
[08:25:54.912] - copied ‘...future.elements_ii’ to environment
[08:25:54.912] - copied ‘...future.seeds_ii’ to environment
[08:25:54.912] - copied ‘...future.globals.maxSize’ to environment
[08:25:54.912] assign_globals() ... done
[08:25:54.912] requestCore(): workers = 2
[08:25:54.916] MulticoreFuture started
[08:25:54.916] - Launch lazy future ... done
[08:25:54.916] run() for ‘MulticoreFuture’ ... done
[08:25:54.916] plan(): Setting new future strategy stack:
[08:25:54.917] Created future:
[08:25:54.917] List of future strategies:
[08:25:54.917] 1. sequential:
[08:25:54.917]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.917]    - tweaked: FALSE
[08:25:54.917]    - call: NULL
[08:25:54.918] plan(): nbrOfWorkers() = 1
[08:25:54.920] plan(): Setting new future strategy stack:
[08:25:54.920] List of future strategies:
[08:25:54.920] 1. multicore:
[08:25:54.920]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:54.920]    - tweaked: FALSE
[08:25:54.920]    - call: plan(strategy)
[08:25:54.923] plan(): nbrOfWorkers() = 2
[08:25:54.917] MulticoreFuture:
[08:25:54.917] Label: ‘future_replicate-1’
[08:25:54.917] Expression:
[08:25:54.917] {
[08:25:54.917]     do.call(function(...) {
[08:25:54.917]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.917]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.917]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.917]             on.exit(options(oopts), add = TRUE)
[08:25:54.917]         }
[08:25:54.917]         {
[08:25:54.917]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.917]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.917]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.917]                   envir = globalenv(), inherits = FALSE)
[08:25:54.917]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.917]             })
[08:25:54.917]         }
[08:25:54.917]     }, args = future.call.arguments)
[08:25:54.917] }
[08:25:54.917] Lazy evaluation: FALSE
[08:25:54.917] Asynchronous evaluation: TRUE
[08:25:54.917] Local evaluation: TRUE
[08:25:54.917] Environment: R_GlobalEnv
[08:25:54.917] Capture standard output: TRUE
[08:25:54.917] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:54.917] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:54.917] Packages: <none>
[08:25:54.917] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:54.917] Resolved: TRUE
[08:25:54.917] Value: <not collected>
[08:25:54.917] Conditions captured: <none>
[08:25:54.917] Early signaling: FALSE
[08:25:54.917] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:54.917] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:54.924] Chunk #1 of 2 ... DONE
[08:25:54.925] Chunk #2 of 2 ...
[08:25:54.925]  - Finding globals in 'X' for chunk #2 ...
[08:25:54.925] getGlobalsAndPackages() ...
[08:25:54.925] Searching for globals...
[08:25:54.926] 
[08:25:54.926] Searching for globals ... DONE
[08:25:54.926] - globals: [0] <none>
[08:25:54.926] getGlobalsAndPackages() ... DONE
[08:25:54.926]    + additional globals found: [n=0] 
[08:25:54.926]    + additional namespaces needed: [n=0] 
[08:25:54.926]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:54.931]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:54.931]  - seeds: [3] <seeds>
[08:25:54.931]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.932] getGlobalsAndPackages() ...
[08:25:54.932] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.932] Resolving globals: FALSE
[08:25:54.932] Tweak future expression to call with '...' arguments ...
[08:25:54.932] {
[08:25:54.932]     do.call(function(...) {
[08:25:54.932]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.932]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.932]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.932]             on.exit(options(oopts), add = TRUE)
[08:25:54.932]         }
[08:25:54.932]         {
[08:25:54.932]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.932]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.932]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.932]                   envir = globalenv(), inherits = FALSE)
[08:25:54.932]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.932]             })
[08:25:54.932]         }
[08:25:54.932]     }, args = future.call.arguments)
[08:25:54.932] }
[08:25:54.933] Tweak future expression to call with '...' arguments ... DONE
[08:25:54.933] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:54.934] 
[08:25:54.934] getGlobalsAndPackages() ... DONE
[08:25:54.934] run() for ‘Future’ ...
[08:25:54.935] - state: ‘created’
[08:25:54.935] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:54.938] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:54.938] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:54.938]   - Field: ‘label’
[08:25:54.938]   - Field: ‘local’
[08:25:54.938]   - Field: ‘owner’
[08:25:54.939]   - Field: ‘envir’
[08:25:54.939]   - Field: ‘workers’
[08:25:54.939]   - Field: ‘packages’
[08:25:54.939]   - Field: ‘gc’
[08:25:54.939]   - Field: ‘job’
[08:25:54.939]   - Field: ‘conditions’
[08:25:54.939]   - Field: ‘expr’
[08:25:54.940]   - Field: ‘uuid’
[08:25:54.940]   - Field: ‘seed’
[08:25:54.940]   - Field: ‘version’
[08:25:54.940]   - Field: ‘result’
[08:25:54.940]   - Field: ‘asynchronous’
[08:25:54.940]   - Field: ‘calls’
[08:25:54.940]   - Field: ‘globals’
[08:25:54.941]   - Field: ‘stdout’
[08:25:54.941]   - Field: ‘earlySignal’
[08:25:54.941]   - Field: ‘lazy’
[08:25:54.941]   - Field: ‘state’
[08:25:54.941] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:54.941] - Launch lazy future ...
[08:25:54.942] Packages needed by the future expression (n = 0): <none>
[08:25:54.942] Packages needed by future strategies (n = 0): <none>
[08:25:54.943] {
[08:25:54.943]     {
[08:25:54.943]         {
[08:25:54.943]             ...future.startTime <- base::Sys.time()
[08:25:54.943]             {
[08:25:54.943]                 {
[08:25:54.943]                   {
[08:25:54.943]                     {
[08:25:54.943]                       base::local({
[08:25:54.943]                         has_future <- base::requireNamespace("future", 
[08:25:54.943]                           quietly = TRUE)
[08:25:54.943]                         if (has_future) {
[08:25:54.943]                           ns <- base::getNamespace("future")
[08:25:54.943]                           version <- ns[[".package"]][["version"]]
[08:25:54.943]                           if (is.null(version)) 
[08:25:54.943]                             version <- utils::packageVersion("future")
[08:25:54.943]                         }
[08:25:54.943]                         else {
[08:25:54.943]                           version <- NULL
[08:25:54.943]                         }
[08:25:54.943]                         if (!has_future || version < "1.8.0") {
[08:25:54.943]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:54.943]                             "", base::R.version$version.string), 
[08:25:54.943]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:54.943]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:54.943]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:54.943]                               "release", "version")], collapse = " "), 
[08:25:54.943]                             hostname = base::Sys.info()[["nodename"]])
[08:25:54.943]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:54.943]                             info)
[08:25:54.943]                           info <- base::paste(info, collapse = "; ")
[08:25:54.943]                           if (!has_future) {
[08:25:54.943]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:54.943]                               info)
[08:25:54.943]                           }
[08:25:54.943]                           else {
[08:25:54.943]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:54.943]                               info, version)
[08:25:54.943]                           }
[08:25:54.943]                           base::stop(msg)
[08:25:54.943]                         }
[08:25:54.943]                       })
[08:25:54.943]                     }
[08:25:54.943]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:54.943]                     base::options(mc.cores = 1L)
[08:25:54.943]                   }
[08:25:54.943]                   ...future.strategy.old <- future::plan("list")
[08:25:54.943]                   options(future.plan = NULL)
[08:25:54.943]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.943]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:54.943]                 }
[08:25:54.943]                 ...future.workdir <- getwd()
[08:25:54.943]             }
[08:25:54.943]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:54.943]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:54.943]         }
[08:25:54.943]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:54.943]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:54.943]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:54.943]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:54.943]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:54.943]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:54.943]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:54.943]             base::names(...future.oldOptions))
[08:25:54.943]     }
[08:25:54.943]     if (FALSE) {
[08:25:54.943]     }
[08:25:54.943]     else {
[08:25:54.943]         if (TRUE) {
[08:25:54.943]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:54.943]                 open = "w")
[08:25:54.943]         }
[08:25:54.943]         else {
[08:25:54.943]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:54.943]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:54.943]         }
[08:25:54.943]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:54.943]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:54.943]             base::sink(type = "output", split = FALSE)
[08:25:54.943]             base::close(...future.stdout)
[08:25:54.943]         }, add = TRUE)
[08:25:54.943]     }
[08:25:54.943]     ...future.frame <- base::sys.nframe()
[08:25:54.943]     ...future.conditions <- base::list()
[08:25:54.943]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:54.943]     if (FALSE) {
[08:25:54.943]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:54.943]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:54.943]     }
[08:25:54.943]     ...future.result <- base::tryCatch({
[08:25:54.943]         base::withCallingHandlers({
[08:25:54.943]             ...future.value <- base::withVisible(base::local({
[08:25:54.943]                 withCallingHandlers({
[08:25:54.943]                   {
[08:25:54.943]                     do.call(function(...) {
[08:25:54.943]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.943]                       if (!identical(...future.globals.maxSize.org, 
[08:25:54.943]                         ...future.globals.maxSize)) {
[08:25:54.943]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.943]                         on.exit(options(oopts), add = TRUE)
[08:25:54.943]                       }
[08:25:54.943]                       {
[08:25:54.943]                         lapply(seq_along(...future.elements_ii), 
[08:25:54.943]                           FUN = function(jj) {
[08:25:54.943]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.943]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.943]                               envir = globalenv(), inherits = FALSE)
[08:25:54.943]                             ...future.FUN(...future.X_jj, ...)
[08:25:54.943]                           })
[08:25:54.943]                       }
[08:25:54.943]                     }, args = future.call.arguments)
[08:25:54.943]                   }
[08:25:54.943]                 }, immediateCondition = function(cond) {
[08:25:54.943]                   save_rds <- function (object, pathname, ...) 
[08:25:54.943]                   {
[08:25:54.943]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:54.943]                     if (file_test("-f", pathname_tmp)) {
[08:25:54.943]                       fi_tmp <- file.info(pathname_tmp)
[08:25:54.943]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:54.943]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:54.943]                         fi_tmp[["mtime"]])
[08:25:54.943]                     }
[08:25:54.943]                     tryCatch({
[08:25:54.943]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:54.943]                     }, error = function(ex) {
[08:25:54.943]                       msg <- conditionMessage(ex)
[08:25:54.943]                       fi_tmp <- file.info(pathname_tmp)
[08:25:54.943]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:54.943]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:54.943]                         fi_tmp[["mtime"]], msg)
[08:25:54.943]                       ex$message <- msg
[08:25:54.943]                       stop(ex)
[08:25:54.943]                     })
[08:25:54.943]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:54.943]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:54.943]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:54.943]                       fi_tmp <- file.info(pathname_tmp)
[08:25:54.943]                       fi <- file.info(pathname)
[08:25:54.943]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:54.943]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:54.943]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:54.943]                         fi[["size"]], fi[["mtime"]])
[08:25:54.943]                       stop(msg)
[08:25:54.943]                     }
[08:25:54.943]                     invisible(pathname)
[08:25:54.943]                   }
[08:25:54.943]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:54.943]                     rootPath = tempdir()) 
[08:25:54.943]                   {
[08:25:54.943]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:54.943]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:54.943]                       tmpdir = path, fileext = ".rds")
[08:25:54.943]                     save_rds(obj, file)
[08:25:54.943]                   }
[08:25:54.943]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:54.943]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.943]                   {
[08:25:54.943]                     inherits <- base::inherits
[08:25:54.943]                     invokeRestart <- base::invokeRestart
[08:25:54.943]                     is.null <- base::is.null
[08:25:54.943]                     muffled <- FALSE
[08:25:54.943]                     if (inherits(cond, "message")) {
[08:25:54.943]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:54.943]                       if (muffled) 
[08:25:54.943]                         invokeRestart("muffleMessage")
[08:25:54.943]                     }
[08:25:54.943]                     else if (inherits(cond, "warning")) {
[08:25:54.943]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:54.943]                       if (muffled) 
[08:25:54.943]                         invokeRestart("muffleWarning")
[08:25:54.943]                     }
[08:25:54.943]                     else if (inherits(cond, "condition")) {
[08:25:54.943]                       if (!is.null(pattern)) {
[08:25:54.943]                         computeRestarts <- base::computeRestarts
[08:25:54.943]                         grepl <- base::grepl
[08:25:54.943]                         restarts <- computeRestarts(cond)
[08:25:54.943]                         for (restart in restarts) {
[08:25:54.943]                           name <- restart$name
[08:25:54.943]                           if (is.null(name)) 
[08:25:54.943]                             next
[08:25:54.943]                           if (!grepl(pattern, name)) 
[08:25:54.943]                             next
[08:25:54.943]                           invokeRestart(restart)
[08:25:54.943]                           muffled <- TRUE
[08:25:54.943]                           break
[08:25:54.943]                         }
[08:25:54.943]                       }
[08:25:54.943]                     }
[08:25:54.943]                     invisible(muffled)
[08:25:54.943]                   }
[08:25:54.943]                   muffleCondition(cond)
[08:25:54.943]                 })
[08:25:54.943]             }))
[08:25:54.943]             future::FutureResult(value = ...future.value$value, 
[08:25:54.943]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.943]                   ...future.rng), globalenv = if (FALSE) 
[08:25:54.943]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:54.943]                     ...future.globalenv.names))
[08:25:54.943]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:54.943]         }, condition = base::local({
[08:25:54.943]             c <- base::c
[08:25:54.943]             inherits <- base::inherits
[08:25:54.943]             invokeRestart <- base::invokeRestart
[08:25:54.943]             length <- base::length
[08:25:54.943]             list <- base::list
[08:25:54.943]             seq.int <- base::seq.int
[08:25:54.943]             signalCondition <- base::signalCondition
[08:25:54.943]             sys.calls <- base::sys.calls
[08:25:54.943]             `[[` <- base::`[[`
[08:25:54.943]             `+` <- base::`+`
[08:25:54.943]             `<<-` <- base::`<<-`
[08:25:54.943]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:54.943]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:54.943]                   3L)]
[08:25:54.943]             }
[08:25:54.943]             function(cond) {
[08:25:54.943]                 is_error <- inherits(cond, "error")
[08:25:54.943]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:54.943]                   NULL)
[08:25:54.943]                 if (is_error) {
[08:25:54.943]                   sessionInformation <- function() {
[08:25:54.943]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:54.943]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:54.943]                       search = base::search(), system = base::Sys.info())
[08:25:54.943]                   }
[08:25:54.943]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.943]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:54.943]                     cond$call), session = sessionInformation(), 
[08:25:54.943]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:54.943]                   signalCondition(cond)
[08:25:54.943]                 }
[08:25:54.943]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:54.943]                 "immediateCondition"))) {
[08:25:54.943]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:54.943]                   ...future.conditions[[length(...future.conditions) + 
[08:25:54.943]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:54.943]                   if (TRUE && !signal) {
[08:25:54.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.943]                     {
[08:25:54.943]                       inherits <- base::inherits
[08:25:54.943]                       invokeRestart <- base::invokeRestart
[08:25:54.943]                       is.null <- base::is.null
[08:25:54.943]                       muffled <- FALSE
[08:25:54.943]                       if (inherits(cond, "message")) {
[08:25:54.943]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.943]                         if (muffled) 
[08:25:54.943]                           invokeRestart("muffleMessage")
[08:25:54.943]                       }
[08:25:54.943]                       else if (inherits(cond, "warning")) {
[08:25:54.943]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.943]                         if (muffled) 
[08:25:54.943]                           invokeRestart("muffleWarning")
[08:25:54.943]                       }
[08:25:54.943]                       else if (inherits(cond, "condition")) {
[08:25:54.943]                         if (!is.null(pattern)) {
[08:25:54.943]                           computeRestarts <- base::computeRestarts
[08:25:54.943]                           grepl <- base::grepl
[08:25:54.943]                           restarts <- computeRestarts(cond)
[08:25:54.943]                           for (restart in restarts) {
[08:25:54.943]                             name <- restart$name
[08:25:54.943]                             if (is.null(name)) 
[08:25:54.943]                               next
[08:25:54.943]                             if (!grepl(pattern, name)) 
[08:25:54.943]                               next
[08:25:54.943]                             invokeRestart(restart)
[08:25:54.943]                             muffled <- TRUE
[08:25:54.943]                             break
[08:25:54.943]                           }
[08:25:54.943]                         }
[08:25:54.943]                       }
[08:25:54.943]                       invisible(muffled)
[08:25:54.943]                     }
[08:25:54.943]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.943]                   }
[08:25:54.943]                 }
[08:25:54.943]                 else {
[08:25:54.943]                   if (TRUE) {
[08:25:54.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:54.943]                     {
[08:25:54.943]                       inherits <- base::inherits
[08:25:54.943]                       invokeRestart <- base::invokeRestart
[08:25:54.943]                       is.null <- base::is.null
[08:25:54.943]                       muffled <- FALSE
[08:25:54.943]                       if (inherits(cond, "message")) {
[08:25:54.943]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:54.943]                         if (muffled) 
[08:25:54.943]                           invokeRestart("muffleMessage")
[08:25:54.943]                       }
[08:25:54.943]                       else if (inherits(cond, "warning")) {
[08:25:54.943]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:54.943]                         if (muffled) 
[08:25:54.943]                           invokeRestart("muffleWarning")
[08:25:54.943]                       }
[08:25:54.943]                       else if (inherits(cond, "condition")) {
[08:25:54.943]                         if (!is.null(pattern)) {
[08:25:54.943]                           computeRestarts <- base::computeRestarts
[08:25:54.943]                           grepl <- base::grepl
[08:25:54.943]                           restarts <- computeRestarts(cond)
[08:25:54.943]                           for (restart in restarts) {
[08:25:54.943]                             name <- restart$name
[08:25:54.943]                             if (is.null(name)) 
[08:25:54.943]                               next
[08:25:54.943]                             if (!grepl(pattern, name)) 
[08:25:54.943]                               next
[08:25:54.943]                             invokeRestart(restart)
[08:25:54.943]                             muffled <- TRUE
[08:25:54.943]                             break
[08:25:54.943]                           }
[08:25:54.943]                         }
[08:25:54.943]                       }
[08:25:54.943]                       invisible(muffled)
[08:25:54.943]                     }
[08:25:54.943]                     muffleCondition(cond, pattern = "^muffle")
[08:25:54.943]                   }
[08:25:54.943]                 }
[08:25:54.943]             }
[08:25:54.943]         }))
[08:25:54.943]     }, error = function(ex) {
[08:25:54.943]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:54.943]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:54.943]                 ...future.rng), started = ...future.startTime, 
[08:25:54.943]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:54.943]             version = "1.8"), class = "FutureResult")
[08:25:54.943]     }, finally = {
[08:25:54.943]         if (!identical(...future.workdir, getwd())) 
[08:25:54.943]             setwd(...future.workdir)
[08:25:54.943]         {
[08:25:54.943]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:54.943]                 ...future.oldOptions$nwarnings <- NULL
[08:25:54.943]             }
[08:25:54.943]             base::options(...future.oldOptions)
[08:25:54.943]             if (.Platform$OS.type == "windows") {
[08:25:54.943]                 old_names <- names(...future.oldEnvVars)
[08:25:54.943]                 envs <- base::Sys.getenv()
[08:25:54.943]                 names <- names(envs)
[08:25:54.943]                 common <- intersect(names, old_names)
[08:25:54.943]                 added <- setdiff(names, old_names)
[08:25:54.943]                 removed <- setdiff(old_names, names)
[08:25:54.943]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:54.943]                   envs[common]]
[08:25:54.943]                 NAMES <- toupper(changed)
[08:25:54.943]                 args <- list()
[08:25:54.943]                 for (kk in seq_along(NAMES)) {
[08:25:54.943]                   name <- changed[[kk]]
[08:25:54.943]                   NAME <- NAMES[[kk]]
[08:25:54.943]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.943]                     next
[08:25:54.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.943]                 }
[08:25:54.943]                 NAMES <- toupper(added)
[08:25:54.943]                 for (kk in seq_along(NAMES)) {
[08:25:54.943]                   name <- added[[kk]]
[08:25:54.943]                   NAME <- NAMES[[kk]]
[08:25:54.943]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.943]                     next
[08:25:54.943]                   args[[name]] <- ""
[08:25:54.943]                 }
[08:25:54.943]                 NAMES <- toupper(removed)
[08:25:54.943]                 for (kk in seq_along(NAMES)) {
[08:25:54.943]                   name <- removed[[kk]]
[08:25:54.943]                   NAME <- NAMES[[kk]]
[08:25:54.943]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:54.943]                     next
[08:25:54.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:54.943]                 }
[08:25:54.943]                 if (length(args) > 0) 
[08:25:54.943]                   base::do.call(base::Sys.setenv, args = args)
[08:25:54.943]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:54.943]             }
[08:25:54.943]             else {
[08:25:54.943]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:54.943]             }
[08:25:54.943]             {
[08:25:54.943]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:54.943]                   0L) {
[08:25:54.943]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:54.943]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:54.943]                   base::options(opts)
[08:25:54.943]                 }
[08:25:54.943]                 {
[08:25:54.943]                   {
[08:25:54.943]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:54.943]                     NULL
[08:25:54.943]                   }
[08:25:54.943]                   options(future.plan = NULL)
[08:25:54.943]                   if (is.na(NA_character_)) 
[08:25:54.943]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:54.943]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:54.943]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:54.943]                     .init = FALSE)
[08:25:54.943]                 }
[08:25:54.943]             }
[08:25:54.943]         }
[08:25:54.943]     })
[08:25:54.943]     if (TRUE) {
[08:25:54.943]         base::sink(type = "output", split = FALSE)
[08:25:54.943]         if (TRUE) {
[08:25:54.943]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:54.943]         }
[08:25:54.943]         else {
[08:25:54.943]             ...future.result["stdout"] <- base::list(NULL)
[08:25:54.943]         }
[08:25:54.943]         base::close(...future.stdout)
[08:25:54.943]         ...future.stdout <- NULL
[08:25:54.943]     }
[08:25:54.943]     ...future.result$conditions <- ...future.conditions
[08:25:54.943]     ...future.result$finished <- base::Sys.time()
[08:25:54.943]     ...future.result
[08:25:54.943] }
[08:25:54.945] assign_globals() ...
[08:25:54.945] List of 5
[08:25:54.945]  $ ...future.FUN            :function (...)  
[08:25:54.945]  $ future.call.arguments    : list()
[08:25:54.945]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.945]  $ ...future.elements_ii    :List of 3
[08:25:54.945]   ..$ : int 0
[08:25:54.945]   ..$ : int 0
[08:25:54.945]   ..$ : int 0
[08:25:54.945]  $ ...future.seeds_ii       :List of 3
[08:25:54.945]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[08:25:54.945]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[08:25:54.945]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[08:25:54.945]  $ ...future.globals.maxSize: NULL
[08:25:54.945]  - attr(*, "where")=List of 5
[08:25:54.945]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:54.945]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:54.945]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:54.945]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:54.945]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:54.945]  - attr(*, "resolved")= logi FALSE
[08:25:54.945]  - attr(*, "total_size")= num 7184
[08:25:54.945]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.945]  - attr(*, "already-done")= logi TRUE
[08:25:54.955] - reassign environment for ‘...future.FUN’
[08:25:54.955] - copied ‘...future.FUN’ to environment
[08:25:54.955] - copied ‘future.call.arguments’ to environment
[08:25:54.955] - copied ‘...future.elements_ii’ to environment
[08:25:54.955] - copied ‘...future.seeds_ii’ to environment
[08:25:54.955] - copied ‘...future.globals.maxSize’ to environment
[08:25:54.955] assign_globals() ... done
[08:25:54.956] requestCore(): workers = 2
[08:25:54.962] MulticoreFuture started
[08:25:54.962] - Launch lazy future ... done
[08:25:54.962] run() for ‘MulticoreFuture’ ... done
[08:25:54.962] Created future:
[08:25:54.963] plan(): Setting new future strategy stack:
[08:25:54.963] List of future strategies:
[08:25:54.963] 1. sequential:
[08:25:54.963]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:54.963]    - tweaked: FALSE
[08:25:54.963]    - call: NULL
[08:25:54.964] plan(): nbrOfWorkers() = 1
[08:25:54.966] plan(): Setting new future strategy stack:
[08:25:54.966] List of future strategies:
[08:25:54.966] 1. multicore:
[08:25:54.966]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:54.966]    - tweaked: FALSE
[08:25:54.966]    - call: plan(strategy)
[08:25:54.969] plan(): nbrOfWorkers() = 2
[08:25:54.963] MulticoreFuture:
[08:25:54.963] Label: ‘future_replicate-2’
[08:25:54.963] Expression:
[08:25:54.963] {
[08:25:54.963]     do.call(function(...) {
[08:25:54.963]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:54.963]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:54.963]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:54.963]             on.exit(options(oopts), add = TRUE)
[08:25:54.963]         }
[08:25:54.963]         {
[08:25:54.963]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:54.963]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:54.963]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:54.963]                   envir = globalenv(), inherits = FALSE)
[08:25:54.963]                 ...future.FUN(...future.X_jj, ...)
[08:25:54.963]             })
[08:25:54.963]         }
[08:25:54.963]     }, args = future.call.arguments)
[08:25:54.963] }
[08:25:54.963] Lazy evaluation: FALSE
[08:25:54.963] Asynchronous evaluation: TRUE
[08:25:54.963] Local evaluation: TRUE
[08:25:54.963] Environment: R_GlobalEnv
[08:25:54.963] Capture standard output: TRUE
[08:25:54.963] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:54.963] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:54.963] Packages: <none>
[08:25:54.963] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:54.963] Resolved: TRUE
[08:25:54.963] Value: <not collected>
[08:25:54.963] Conditions captured: <none>
[08:25:54.963] Early signaling: FALSE
[08:25:54.963] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:54.963] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:54.970] Chunk #2 of 2 ... DONE
[08:25:54.971] Launching 2 futures (chunks) ... DONE
[08:25:54.971] Resolving 2 futures (chunks) ...
[08:25:54.971] resolve() on list ...
[08:25:54.971]  recursive: 0
[08:25:54.971]  length: 2
[08:25:54.971] 
[08:25:54.972] Future #1
[08:25:54.972] result() for MulticoreFuture ...
[08:25:54.974] result() for MulticoreFuture ...
[08:25:54.974] result() for MulticoreFuture ... done
[08:25:54.974] result() for MulticoreFuture ... done
[08:25:54.974] result() for MulticoreFuture ...
[08:25:54.974] result() for MulticoreFuture ... done
[08:25:54.975] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:54.975] - nx: 2
[08:25:54.975] - relay: TRUE
[08:25:54.975] - stdout: TRUE
[08:25:54.975] - signal: TRUE
[08:25:54.975] - resignal: FALSE
[08:25:54.975] - force: TRUE
[08:25:54.975] - relayed: [n=2] FALSE, FALSE
[08:25:54.979] - queued futures: [n=2] FALSE, FALSE
[08:25:54.979]  - until=1
[08:25:54.979]  - relaying element #1
[08:25:54.980] result() for MulticoreFuture ...
[08:25:54.980] result() for MulticoreFuture ... done
[08:25:54.980] result() for MulticoreFuture ...
[08:25:54.980] result() for MulticoreFuture ... done
[08:25:54.980] result() for MulticoreFuture ...
[08:25:54.980] result() for MulticoreFuture ... done
[08:25:54.981] result() for MulticoreFuture ...
[08:25:54.981] result() for MulticoreFuture ... done
[08:25:54.981] - relayed: [n=2] TRUE, FALSE
[08:25:54.981] - queued futures: [n=2] TRUE, FALSE
[08:25:54.981] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:54.981]  length: 1 (resolved future 1)
[08:25:54.982] Future #2
[08:25:54.982] result() for MulticoreFuture ...
[08:25:54.983] result() for MulticoreFuture ...
[08:25:54.983] result() for MulticoreFuture ... done
[08:25:54.983] result() for MulticoreFuture ... done
[08:25:54.983] result() for MulticoreFuture ...
[08:25:54.984] result() for MulticoreFuture ... done
[08:25:54.984] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:54.984] - nx: 2
[08:25:54.984] - relay: TRUE
[08:25:54.984] - stdout: TRUE
[08:25:54.984] - signal: TRUE
[08:25:54.984] - resignal: FALSE
[08:25:54.984] - force: TRUE
[08:25:54.985] - relayed: [n=2] TRUE, FALSE
[08:25:54.985] - queued futures: [n=2] TRUE, FALSE
[08:25:54.985]  - until=2
[08:25:54.985]  - relaying element #2
[08:25:54.985] result() for MulticoreFuture ...
[08:25:54.985] result() for MulticoreFuture ... done
[08:25:54.985] result() for MulticoreFuture ...
[08:25:54.985] result() for MulticoreFuture ... done
[08:25:54.986] result() for MulticoreFuture ...
[08:25:54.986] result() for MulticoreFuture ... done
[08:25:54.986] result() for MulticoreFuture ...
[08:25:54.986] result() for MulticoreFuture ... done
[08:25:54.986] - relayed: [n=2] TRUE, TRUE
[08:25:54.986] - queued futures: [n=2] TRUE, TRUE
[08:25:54.986] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:54.986]  length: 0 (resolved future 2)
[08:25:54.987] Relaying remaining futures
[08:25:54.987] signalConditionsASAP(NULL, pos=0) ...
[08:25:54.987] - nx: 2
[08:25:54.987] - relay: TRUE
[08:25:54.987] - stdout: TRUE
[08:25:54.987] - signal: TRUE
[08:25:54.987] - resignal: FALSE
[08:25:54.987] - force: TRUE
[08:25:54.987] - relayed: [n=2] TRUE, TRUE
[08:25:54.987] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:54.988] - relayed: [n=2] TRUE, TRUE
[08:25:54.988] - queued futures: [n=2] TRUE, TRUE
[08:25:54.988] signalConditionsASAP(NULL, pos=0) ... done
[08:25:54.988] resolve() on list ... DONE
[08:25:54.988] result() for MulticoreFuture ...
[08:25:54.988] result() for MulticoreFuture ... done
[08:25:54.988] result() for MulticoreFuture ...
[08:25:54.988] result() for MulticoreFuture ... done
[08:25:54.989] result() for MulticoreFuture ...
[08:25:54.989] result() for MulticoreFuture ... done
[08:25:54.989] result() for MulticoreFuture ...
[08:25:54.989] result() for MulticoreFuture ... done
[08:25:54.989]  - Number of value chunks collected: 2
[08:25:54.989] Resolving 2 futures (chunks) ... DONE
[08:25:54.989] Reducing values from 2 chunks ...
[08:25:54.989]  - Number of values collected after concatenation: 5
[08:25:54.989]  - Number of values expected: 5
[08:25:54.990] Reducing values from 2 chunks ... DONE
[08:25:54.990] future_lapply() ... DONE
[08:25:54.990] future_lapply() ...
[08:25:54.991] Generating random seeds ...
[08:25:54.991] Generating random seed streams for 5 elements ...
[08:25:54.991] Generating random seed streams for 5 elements ... DONE
[08:25:54.991] Generating random seeds ... DONE
[08:25:54.991] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:54.994] Number of chunks: 2
[08:25:54.994] getGlobalsAndPackagesXApply() ...
[08:25:54.994]  - future.globals: TRUE
[08:25:54.994] getGlobalsAndPackages() ...
[08:25:54.994] Searching for globals...
[08:25:54.996] - globals found: [2] ‘FUN’, ‘sample’
[08:25:54.996] Searching for globals ... DONE
[08:25:54.996] Resolving globals: FALSE
[08:25:54.996] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:54.997] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:54.997] - globals: [1] ‘FUN’
[08:25:54.997] 
[08:25:54.997] getGlobalsAndPackages() ... DONE
[08:25:54.997]  - globals found/used: [n=1] ‘FUN’
[08:25:54.997]  - needed namespaces: [n=0] 
[08:25:54.997] Finding globals ... DONE
[08:25:54.998]  - use_args: TRUE
[08:25:54.998]  - Getting '...' globals ...
[08:25:54.998] resolve() on list ...
[08:25:54.998]  recursive: 0
[08:25:54.998]  length: 1
[08:25:54.998]  elements: ‘...’
[08:25:54.999]  length: 0 (resolved future 1)
[08:25:54.999] resolve() on list ... DONE
[08:25:54.999]    - '...' content: [n=0] 
[08:25:54.999] List of 1
[08:25:54.999]  $ ...: list()
[08:25:54.999]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:54.999]  - attr(*, "where")=List of 1
[08:25:54.999]   ..$ ...:<environment: 0x55f776fa1498> 
[08:25:54.999]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:54.999]  - attr(*, "resolved")= logi TRUE
[08:25:54.999]  - attr(*, "total_size")= num NA
[08:25:55.002]  - Getting '...' globals ... DONE
[08:25:55.002] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:55.002] List of 2
[08:25:55.002]  $ ...future.FUN:function (...)  
[08:25:55.002]  $ ...          : list()
[08:25:55.002]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.002]  - attr(*, "where")=List of 2
[08:25:55.002]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:55.002]   ..$ ...          :<environment: 0x55f776fa1498> 
[08:25:55.002]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.002]  - attr(*, "resolved")= logi FALSE
[08:25:55.002]  - attr(*, "total_size")= num 7184
[08:25:55.005] Packages to be attached in all futures: [n=0] 
[08:25:55.005] getGlobalsAndPackagesXApply() ... DONE
[08:25:55.005] Number of futures (= number of chunks): 2
[08:25:55.005] Launching 2 futures (chunks) ...
[08:25:55.005] Chunk #1 of 2 ...
[08:25:55.005]  - Finding globals in 'X' for chunk #1 ...
[08:25:55.006] getGlobalsAndPackages() ...
[08:25:55.006] Searching for globals...
[08:25:55.006] 
[08:25:55.006] Searching for globals ... DONE
[08:25:55.008] - globals: [0] <none>
[08:25:55.008] getGlobalsAndPackages() ... DONE
[08:25:55.008]    + additional globals found: [n=0] 
[08:25:55.008]    + additional namespaces needed: [n=0] 
[08:25:55.008]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:55.008]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.009]  - seeds: [2] <seeds>
[08:25:55.009]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.009] getGlobalsAndPackages() ...
[08:25:55.009] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.009] Resolving globals: FALSE
[08:25:55.009] Tweak future expression to call with '...' arguments ...
[08:25:55.009] {
[08:25:55.009]     do.call(function(...) {
[08:25:55.009]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.009]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.009]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.009]             on.exit(options(oopts), add = TRUE)
[08:25:55.009]         }
[08:25:55.009]         {
[08:25:55.009]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.009]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.009]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.009]                   envir = globalenv(), inherits = FALSE)
[08:25:55.009]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.009]             })
[08:25:55.009]         }
[08:25:55.009]     }, args = future.call.arguments)
[08:25:55.009] }
[08:25:55.010] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.010] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.010] 
[08:25:55.010] getGlobalsAndPackages() ... DONE
[08:25:55.010] run() for ‘Future’ ...
[08:25:55.010] - state: ‘created’
[08:25:55.011] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.012] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.012] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.013]   - Field: ‘label’
[08:25:55.013]   - Field: ‘local’
[08:25:55.013]   - Field: ‘owner’
[08:25:55.013]   - Field: ‘envir’
[08:25:55.013]   - Field: ‘workers’
[08:25:55.013]   - Field: ‘packages’
[08:25:55.013]   - Field: ‘gc’
[08:25:55.013]   - Field: ‘job’
[08:25:55.013]   - Field: ‘conditions’
[08:25:55.013]   - Field: ‘expr’
[08:25:55.013]   - Field: ‘uuid’
[08:25:55.014]   - Field: ‘seed’
[08:25:55.014]   - Field: ‘version’
[08:25:55.014]   - Field: ‘result’
[08:25:55.014]   - Field: ‘asynchronous’
[08:25:55.014]   - Field: ‘calls’
[08:25:55.014]   - Field: ‘globals’
[08:25:55.014]   - Field: ‘stdout’
[08:25:55.014]   - Field: ‘earlySignal’
[08:25:55.014]   - Field: ‘lazy’
[08:25:55.014]   - Field: ‘state’
[08:25:55.014] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.015] - Launch lazy future ...
[08:25:55.015] Packages needed by the future expression (n = 0): <none>
[08:25:55.015] Packages needed by future strategies (n = 0): <none>
[08:25:55.015] {
[08:25:55.015]     {
[08:25:55.015]         {
[08:25:55.015]             ...future.startTime <- base::Sys.time()
[08:25:55.015]             {
[08:25:55.015]                 {
[08:25:55.015]                   {
[08:25:55.015]                     {
[08:25:55.015]                       base::local({
[08:25:55.015]                         has_future <- base::requireNamespace("future", 
[08:25:55.015]                           quietly = TRUE)
[08:25:55.015]                         if (has_future) {
[08:25:55.015]                           ns <- base::getNamespace("future")
[08:25:55.015]                           version <- ns[[".package"]][["version"]]
[08:25:55.015]                           if (is.null(version)) 
[08:25:55.015]                             version <- utils::packageVersion("future")
[08:25:55.015]                         }
[08:25:55.015]                         else {
[08:25:55.015]                           version <- NULL
[08:25:55.015]                         }
[08:25:55.015]                         if (!has_future || version < "1.8.0") {
[08:25:55.015]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.015]                             "", base::R.version$version.string), 
[08:25:55.015]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.015]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.015]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.015]                               "release", "version")], collapse = " "), 
[08:25:55.015]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.015]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.015]                             info)
[08:25:55.015]                           info <- base::paste(info, collapse = "; ")
[08:25:55.015]                           if (!has_future) {
[08:25:55.015]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.015]                               info)
[08:25:55.015]                           }
[08:25:55.015]                           else {
[08:25:55.015]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.015]                               info, version)
[08:25:55.015]                           }
[08:25:55.015]                           base::stop(msg)
[08:25:55.015]                         }
[08:25:55.015]                       })
[08:25:55.015]                     }
[08:25:55.015]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.015]                     base::options(mc.cores = 1L)
[08:25:55.015]                   }
[08:25:55.015]                   ...future.strategy.old <- future::plan("list")
[08:25:55.015]                   options(future.plan = NULL)
[08:25:55.015]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.015]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.015]                 }
[08:25:55.015]                 ...future.workdir <- getwd()
[08:25:55.015]             }
[08:25:55.015]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.015]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.015]         }
[08:25:55.015]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.015]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.015]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.015]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.015]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.015]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.015]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.015]             base::names(...future.oldOptions))
[08:25:55.015]     }
[08:25:55.015]     if (FALSE) {
[08:25:55.015]     }
[08:25:55.015]     else {
[08:25:55.015]         if (TRUE) {
[08:25:55.015]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.015]                 open = "w")
[08:25:55.015]         }
[08:25:55.015]         else {
[08:25:55.015]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.015]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.015]         }
[08:25:55.015]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.015]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.015]             base::sink(type = "output", split = FALSE)
[08:25:55.015]             base::close(...future.stdout)
[08:25:55.015]         }, add = TRUE)
[08:25:55.015]     }
[08:25:55.015]     ...future.frame <- base::sys.nframe()
[08:25:55.015]     ...future.conditions <- base::list()
[08:25:55.015]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.015]     if (FALSE) {
[08:25:55.015]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.015]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.015]     }
[08:25:55.015]     ...future.result <- base::tryCatch({
[08:25:55.015]         base::withCallingHandlers({
[08:25:55.015]             ...future.value <- base::withVisible(base::local({
[08:25:55.015]                 withCallingHandlers({
[08:25:55.015]                   {
[08:25:55.015]                     do.call(function(...) {
[08:25:55.015]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.015]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.015]                         ...future.globals.maxSize)) {
[08:25:55.015]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.015]                         on.exit(options(oopts), add = TRUE)
[08:25:55.015]                       }
[08:25:55.015]                       {
[08:25:55.015]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.015]                           FUN = function(jj) {
[08:25:55.015]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.015]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.015]                               envir = globalenv(), inherits = FALSE)
[08:25:55.015]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.015]                           })
[08:25:55.015]                       }
[08:25:55.015]                     }, args = future.call.arguments)
[08:25:55.015]                   }
[08:25:55.015]                 }, immediateCondition = function(cond) {
[08:25:55.015]                   save_rds <- function (object, pathname, ...) 
[08:25:55.015]                   {
[08:25:55.015]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.015]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.015]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.015]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.015]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.015]                         fi_tmp[["mtime"]])
[08:25:55.015]                     }
[08:25:55.015]                     tryCatch({
[08:25:55.015]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.015]                     }, error = function(ex) {
[08:25:55.015]                       msg <- conditionMessage(ex)
[08:25:55.015]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.015]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.015]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.015]                         fi_tmp[["mtime"]], msg)
[08:25:55.015]                       ex$message <- msg
[08:25:55.015]                       stop(ex)
[08:25:55.015]                     })
[08:25:55.015]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.015]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.015]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.015]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.015]                       fi <- file.info(pathname)
[08:25:55.015]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.015]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.015]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.015]                         fi[["size"]], fi[["mtime"]])
[08:25:55.015]                       stop(msg)
[08:25:55.015]                     }
[08:25:55.015]                     invisible(pathname)
[08:25:55.015]                   }
[08:25:55.015]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.015]                     rootPath = tempdir()) 
[08:25:55.015]                   {
[08:25:55.015]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.015]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.015]                       tmpdir = path, fileext = ".rds")
[08:25:55.015]                     save_rds(obj, file)
[08:25:55.015]                   }
[08:25:55.015]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.015]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.015]                   {
[08:25:55.015]                     inherits <- base::inherits
[08:25:55.015]                     invokeRestart <- base::invokeRestart
[08:25:55.015]                     is.null <- base::is.null
[08:25:55.015]                     muffled <- FALSE
[08:25:55.015]                     if (inherits(cond, "message")) {
[08:25:55.015]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.015]                       if (muffled) 
[08:25:55.015]                         invokeRestart("muffleMessage")
[08:25:55.015]                     }
[08:25:55.015]                     else if (inherits(cond, "warning")) {
[08:25:55.015]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.015]                       if (muffled) 
[08:25:55.015]                         invokeRestart("muffleWarning")
[08:25:55.015]                     }
[08:25:55.015]                     else if (inherits(cond, "condition")) {
[08:25:55.015]                       if (!is.null(pattern)) {
[08:25:55.015]                         computeRestarts <- base::computeRestarts
[08:25:55.015]                         grepl <- base::grepl
[08:25:55.015]                         restarts <- computeRestarts(cond)
[08:25:55.015]                         for (restart in restarts) {
[08:25:55.015]                           name <- restart$name
[08:25:55.015]                           if (is.null(name)) 
[08:25:55.015]                             next
[08:25:55.015]                           if (!grepl(pattern, name)) 
[08:25:55.015]                             next
[08:25:55.015]                           invokeRestart(restart)
[08:25:55.015]                           muffled <- TRUE
[08:25:55.015]                           break
[08:25:55.015]                         }
[08:25:55.015]                       }
[08:25:55.015]                     }
[08:25:55.015]                     invisible(muffled)
[08:25:55.015]                   }
[08:25:55.015]                   muffleCondition(cond)
[08:25:55.015]                 })
[08:25:55.015]             }))
[08:25:55.015]             future::FutureResult(value = ...future.value$value, 
[08:25:55.015]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.015]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.015]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.015]                     ...future.globalenv.names))
[08:25:55.015]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.015]         }, condition = base::local({
[08:25:55.015]             c <- base::c
[08:25:55.015]             inherits <- base::inherits
[08:25:55.015]             invokeRestart <- base::invokeRestart
[08:25:55.015]             length <- base::length
[08:25:55.015]             list <- base::list
[08:25:55.015]             seq.int <- base::seq.int
[08:25:55.015]             signalCondition <- base::signalCondition
[08:25:55.015]             sys.calls <- base::sys.calls
[08:25:55.015]             `[[` <- base::`[[`
[08:25:55.015]             `+` <- base::`+`
[08:25:55.015]             `<<-` <- base::`<<-`
[08:25:55.015]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.015]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.015]                   3L)]
[08:25:55.015]             }
[08:25:55.015]             function(cond) {
[08:25:55.015]                 is_error <- inherits(cond, "error")
[08:25:55.015]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.015]                   NULL)
[08:25:55.015]                 if (is_error) {
[08:25:55.015]                   sessionInformation <- function() {
[08:25:55.015]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.015]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.015]                       search = base::search(), system = base::Sys.info())
[08:25:55.015]                   }
[08:25:55.015]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.015]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.015]                     cond$call), session = sessionInformation(), 
[08:25:55.015]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.015]                   signalCondition(cond)
[08:25:55.015]                 }
[08:25:55.015]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.015]                 "immediateCondition"))) {
[08:25:55.015]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.015]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.015]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.015]                   if (TRUE && !signal) {
[08:25:55.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.015]                     {
[08:25:55.015]                       inherits <- base::inherits
[08:25:55.015]                       invokeRestart <- base::invokeRestart
[08:25:55.015]                       is.null <- base::is.null
[08:25:55.015]                       muffled <- FALSE
[08:25:55.015]                       if (inherits(cond, "message")) {
[08:25:55.015]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.015]                         if (muffled) 
[08:25:55.015]                           invokeRestart("muffleMessage")
[08:25:55.015]                       }
[08:25:55.015]                       else if (inherits(cond, "warning")) {
[08:25:55.015]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.015]                         if (muffled) 
[08:25:55.015]                           invokeRestart("muffleWarning")
[08:25:55.015]                       }
[08:25:55.015]                       else if (inherits(cond, "condition")) {
[08:25:55.015]                         if (!is.null(pattern)) {
[08:25:55.015]                           computeRestarts <- base::computeRestarts
[08:25:55.015]                           grepl <- base::grepl
[08:25:55.015]                           restarts <- computeRestarts(cond)
[08:25:55.015]                           for (restart in restarts) {
[08:25:55.015]                             name <- restart$name
[08:25:55.015]                             if (is.null(name)) 
[08:25:55.015]                               next
[08:25:55.015]                             if (!grepl(pattern, name)) 
[08:25:55.015]                               next
[08:25:55.015]                             invokeRestart(restart)
[08:25:55.015]                             muffled <- TRUE
[08:25:55.015]                             break
[08:25:55.015]                           }
[08:25:55.015]                         }
[08:25:55.015]                       }
[08:25:55.015]                       invisible(muffled)
[08:25:55.015]                     }
[08:25:55.015]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.015]                   }
[08:25:55.015]                 }
[08:25:55.015]                 else {
[08:25:55.015]                   if (TRUE) {
[08:25:55.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.015]                     {
[08:25:55.015]                       inherits <- base::inherits
[08:25:55.015]                       invokeRestart <- base::invokeRestart
[08:25:55.015]                       is.null <- base::is.null
[08:25:55.015]                       muffled <- FALSE
[08:25:55.015]                       if (inherits(cond, "message")) {
[08:25:55.015]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.015]                         if (muffled) 
[08:25:55.015]                           invokeRestart("muffleMessage")
[08:25:55.015]                       }
[08:25:55.015]                       else if (inherits(cond, "warning")) {
[08:25:55.015]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.015]                         if (muffled) 
[08:25:55.015]                           invokeRestart("muffleWarning")
[08:25:55.015]                       }
[08:25:55.015]                       else if (inherits(cond, "condition")) {
[08:25:55.015]                         if (!is.null(pattern)) {
[08:25:55.015]                           computeRestarts <- base::computeRestarts
[08:25:55.015]                           grepl <- base::grepl
[08:25:55.015]                           restarts <- computeRestarts(cond)
[08:25:55.015]                           for (restart in restarts) {
[08:25:55.015]                             name <- restart$name
[08:25:55.015]                             if (is.null(name)) 
[08:25:55.015]                               next
[08:25:55.015]                             if (!grepl(pattern, name)) 
[08:25:55.015]                               next
[08:25:55.015]                             invokeRestart(restart)
[08:25:55.015]                             muffled <- TRUE
[08:25:55.015]                             break
[08:25:55.015]                           }
[08:25:55.015]                         }
[08:25:55.015]                       }
[08:25:55.015]                       invisible(muffled)
[08:25:55.015]                     }
[08:25:55.015]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.015]                   }
[08:25:55.015]                 }
[08:25:55.015]             }
[08:25:55.015]         }))
[08:25:55.015]     }, error = function(ex) {
[08:25:55.015]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.015]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.015]                 ...future.rng), started = ...future.startTime, 
[08:25:55.015]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.015]             version = "1.8"), class = "FutureResult")
[08:25:55.015]     }, finally = {
[08:25:55.015]         if (!identical(...future.workdir, getwd())) 
[08:25:55.015]             setwd(...future.workdir)
[08:25:55.015]         {
[08:25:55.015]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.015]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.015]             }
[08:25:55.015]             base::options(...future.oldOptions)
[08:25:55.015]             if (.Platform$OS.type == "windows") {
[08:25:55.015]                 old_names <- names(...future.oldEnvVars)
[08:25:55.015]                 envs <- base::Sys.getenv()
[08:25:55.015]                 names <- names(envs)
[08:25:55.015]                 common <- intersect(names, old_names)
[08:25:55.015]                 added <- setdiff(names, old_names)
[08:25:55.015]                 removed <- setdiff(old_names, names)
[08:25:55.015]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.015]                   envs[common]]
[08:25:55.015]                 NAMES <- toupper(changed)
[08:25:55.015]                 args <- list()
[08:25:55.015]                 for (kk in seq_along(NAMES)) {
[08:25:55.015]                   name <- changed[[kk]]
[08:25:55.015]                   NAME <- NAMES[[kk]]
[08:25:55.015]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.015]                     next
[08:25:55.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.015]                 }
[08:25:55.015]                 NAMES <- toupper(added)
[08:25:55.015]                 for (kk in seq_along(NAMES)) {
[08:25:55.015]                   name <- added[[kk]]
[08:25:55.015]                   NAME <- NAMES[[kk]]
[08:25:55.015]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.015]                     next
[08:25:55.015]                   args[[name]] <- ""
[08:25:55.015]                 }
[08:25:55.015]                 NAMES <- toupper(removed)
[08:25:55.015]                 for (kk in seq_along(NAMES)) {
[08:25:55.015]                   name <- removed[[kk]]
[08:25:55.015]                   NAME <- NAMES[[kk]]
[08:25:55.015]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.015]                     next
[08:25:55.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.015]                 }
[08:25:55.015]                 if (length(args) > 0) 
[08:25:55.015]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.015]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.015]             }
[08:25:55.015]             else {
[08:25:55.015]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.015]             }
[08:25:55.015]             {
[08:25:55.015]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.015]                   0L) {
[08:25:55.015]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.015]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.015]                   base::options(opts)
[08:25:55.015]                 }
[08:25:55.015]                 {
[08:25:55.015]                   {
[08:25:55.015]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.015]                     NULL
[08:25:55.015]                   }
[08:25:55.015]                   options(future.plan = NULL)
[08:25:55.015]                   if (is.na(NA_character_)) 
[08:25:55.015]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.015]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.015]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.015]                     .init = FALSE)
[08:25:55.015]                 }
[08:25:55.015]             }
[08:25:55.015]         }
[08:25:55.015]     })
[08:25:55.015]     if (TRUE) {
[08:25:55.015]         base::sink(type = "output", split = FALSE)
[08:25:55.015]         if (TRUE) {
[08:25:55.015]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.015]         }
[08:25:55.015]         else {
[08:25:55.015]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.015]         }
[08:25:55.015]         base::close(...future.stdout)
[08:25:55.015]         ...future.stdout <- NULL
[08:25:55.015]     }
[08:25:55.015]     ...future.result$conditions <- ...future.conditions
[08:25:55.015]     ...future.result$finished <- base::Sys.time()
[08:25:55.015]     ...future.result
[08:25:55.015] }
[08:25:55.018] assign_globals() ...
[08:25:55.018] List of 5
[08:25:55.018]  $ ...future.FUN            :function (...)  
[08:25:55.018]  $ future.call.arguments    : list()
[08:25:55.018]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.018]  $ ...future.elements_ii    :List of 2
[08:25:55.018]   ..$ : int 0
[08:25:55.018]   ..$ : int 0
[08:25:55.018]  $ ...future.seeds_ii       :List of 2
[08:25:55.018]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[08:25:55.018]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[08:25:55.018]  $ ...future.globals.maxSize: NULL
[08:25:55.018]  - attr(*, "where")=List of 5
[08:25:55.018]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.018]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.018]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.018]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.018]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.018]  - attr(*, "resolved")= logi FALSE
[08:25:55.018]  - attr(*, "total_size")= num 7184
[08:25:55.018]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.018]  - attr(*, "already-done")= logi TRUE
[08:25:55.023] - reassign environment for ‘...future.FUN’
[08:25:55.024] - copied ‘...future.FUN’ to environment
[08:25:55.024] - copied ‘future.call.arguments’ to environment
[08:25:55.024] - copied ‘...future.elements_ii’ to environment
[08:25:55.024] - copied ‘...future.seeds_ii’ to environment
[08:25:55.024] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.024] assign_globals() ... done
[08:25:55.024] requestCore(): workers = 2
[08:25:55.026] MulticoreFuture started
[08:25:55.027] - Launch lazy future ... done
[08:25:55.027] run() for ‘MulticoreFuture’ ... done
[08:25:55.027] Created future:
[08:25:55.028] plan(): Setting new future strategy stack:
[08:25:55.028] List of future strategies:
[08:25:55.028] 1. sequential:
[08:25:55.028]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.028]    - tweaked: FALSE
[08:25:55.028]    - call: NULL
[08:25:55.029] plan(): nbrOfWorkers() = 1
[08:25:55.031] plan(): Setting new future strategy stack:
[08:25:55.031] List of future strategies:
[08:25:55.031] 1. multicore:
[08:25:55.031]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.031]    - tweaked: FALSE
[08:25:55.031]    - call: plan(strategy)
[08:25:55.034] plan(): nbrOfWorkers() = 2
[08:25:55.028] MulticoreFuture:
[08:25:55.028] Label: ‘future_replicate-1’
[08:25:55.028] Expression:
[08:25:55.028] {
[08:25:55.028]     do.call(function(...) {
[08:25:55.028]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.028]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.028]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.028]             on.exit(options(oopts), add = TRUE)
[08:25:55.028]         }
[08:25:55.028]         {
[08:25:55.028]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.028]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.028]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.028]                   envir = globalenv(), inherits = FALSE)
[08:25:55.028]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.028]             })
[08:25:55.028]         }
[08:25:55.028]     }, args = future.call.arguments)
[08:25:55.028] }
[08:25:55.028] Lazy evaluation: FALSE
[08:25:55.028] Asynchronous evaluation: TRUE
[08:25:55.028] Local evaluation: TRUE
[08:25:55.028] Environment: R_GlobalEnv
[08:25:55.028] Capture standard output: TRUE
[08:25:55.028] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.028] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:55.028] Packages: <none>
[08:25:55.028] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.028] Resolved: TRUE
[08:25:55.028] Value: <not collected>
[08:25:55.028] Conditions captured: <none>
[08:25:55.028] Early signaling: FALSE
[08:25:55.028] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.028] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.035] Chunk #1 of 2 ... DONE
[08:25:55.035] Chunk #2 of 2 ...
[08:25:55.035]  - Finding globals in 'X' for chunk #2 ...
[08:25:55.036] getGlobalsAndPackages() ...
[08:25:55.036] Searching for globals...
[08:25:55.036] 
[08:25:55.036] Searching for globals ... DONE
[08:25:55.036] - globals: [0] <none>
[08:25:55.037] getGlobalsAndPackages() ... DONE
[08:25:55.037]    + additional globals found: [n=0] 
[08:25:55.037]    + additional namespaces needed: [n=0] 
[08:25:55.037]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:55.037]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.037]  - seeds: [3] <seeds>
[08:25:55.037]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.037] getGlobalsAndPackages() ...
[08:25:55.038] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.038] Resolving globals: FALSE
[08:25:55.038] Tweak future expression to call with '...' arguments ...
[08:25:55.038] {
[08:25:55.038]     do.call(function(...) {
[08:25:55.038]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.038]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.038]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.038]             on.exit(options(oopts), add = TRUE)
[08:25:55.038]         }
[08:25:55.038]         {
[08:25:55.038]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.038]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.038]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.038]                   envir = globalenv(), inherits = FALSE)
[08:25:55.038]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.038]             })
[08:25:55.038]         }
[08:25:55.038]     }, args = future.call.arguments)
[08:25:55.038] }
[08:25:55.039] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.039] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.039] 
[08:25:55.039] getGlobalsAndPackages() ... DONE
[08:25:55.040] run() for ‘Future’ ...
[08:25:55.040] - state: ‘created’
[08:25:55.040] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.043] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.043] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.043]   - Field: ‘label’
[08:25:55.043]   - Field: ‘local’
[08:25:55.043]   - Field: ‘owner’
[08:25:55.044]   - Field: ‘envir’
[08:25:55.044]   - Field: ‘workers’
[08:25:55.044]   - Field: ‘packages’
[08:25:55.044]   - Field: ‘gc’
[08:25:55.047]   - Field: ‘job’
[08:25:55.048]   - Field: ‘conditions’
[08:25:55.048]   - Field: ‘expr’
[08:25:55.048]   - Field: ‘uuid’
[08:25:55.048]   - Field: ‘seed’
[08:25:55.048]   - Field: ‘version’
[08:25:55.048]   - Field: ‘result’
[08:25:55.048]   - Field: ‘asynchronous’
[08:25:55.049]   - Field: ‘calls’
[08:25:55.049]   - Field: ‘globals’
[08:25:55.049]   - Field: ‘stdout’
[08:25:55.049]   - Field: ‘earlySignal’
[08:25:55.049]   - Field: ‘lazy’
[08:25:55.049]   - Field: ‘state’
[08:25:55.050] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.050] - Launch lazy future ...
[08:25:55.050] Packages needed by the future expression (n = 0): <none>
[08:25:55.051] Packages needed by future strategies (n = 0): <none>
[08:25:55.052] {
[08:25:55.052]     {
[08:25:55.052]         {
[08:25:55.052]             ...future.startTime <- base::Sys.time()
[08:25:55.052]             {
[08:25:55.052]                 {
[08:25:55.052]                   {
[08:25:55.052]                     {
[08:25:55.052]                       base::local({
[08:25:55.052]                         has_future <- base::requireNamespace("future", 
[08:25:55.052]                           quietly = TRUE)
[08:25:55.052]                         if (has_future) {
[08:25:55.052]                           ns <- base::getNamespace("future")
[08:25:55.052]                           version <- ns[[".package"]][["version"]]
[08:25:55.052]                           if (is.null(version)) 
[08:25:55.052]                             version <- utils::packageVersion("future")
[08:25:55.052]                         }
[08:25:55.052]                         else {
[08:25:55.052]                           version <- NULL
[08:25:55.052]                         }
[08:25:55.052]                         if (!has_future || version < "1.8.0") {
[08:25:55.052]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.052]                             "", base::R.version$version.string), 
[08:25:55.052]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.052]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.052]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.052]                               "release", "version")], collapse = " "), 
[08:25:55.052]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.052]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.052]                             info)
[08:25:55.052]                           info <- base::paste(info, collapse = "; ")
[08:25:55.052]                           if (!has_future) {
[08:25:55.052]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.052]                               info)
[08:25:55.052]                           }
[08:25:55.052]                           else {
[08:25:55.052]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.052]                               info, version)
[08:25:55.052]                           }
[08:25:55.052]                           base::stop(msg)
[08:25:55.052]                         }
[08:25:55.052]                       })
[08:25:55.052]                     }
[08:25:55.052]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.052]                     base::options(mc.cores = 1L)
[08:25:55.052]                   }
[08:25:55.052]                   ...future.strategy.old <- future::plan("list")
[08:25:55.052]                   options(future.plan = NULL)
[08:25:55.052]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.052]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.052]                 }
[08:25:55.052]                 ...future.workdir <- getwd()
[08:25:55.052]             }
[08:25:55.052]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.052]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.052]         }
[08:25:55.052]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.052]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.052]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.052]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.052]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.052]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.052]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.052]             base::names(...future.oldOptions))
[08:25:55.052]     }
[08:25:55.052]     if (FALSE) {
[08:25:55.052]     }
[08:25:55.052]     else {
[08:25:55.052]         if (TRUE) {
[08:25:55.052]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.052]                 open = "w")
[08:25:55.052]         }
[08:25:55.052]         else {
[08:25:55.052]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.052]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.052]         }
[08:25:55.052]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.052]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.052]             base::sink(type = "output", split = FALSE)
[08:25:55.052]             base::close(...future.stdout)
[08:25:55.052]         }, add = TRUE)
[08:25:55.052]     }
[08:25:55.052]     ...future.frame <- base::sys.nframe()
[08:25:55.052]     ...future.conditions <- base::list()
[08:25:55.052]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.052]     if (FALSE) {
[08:25:55.052]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.052]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.052]     }
[08:25:55.052]     ...future.result <- base::tryCatch({
[08:25:55.052]         base::withCallingHandlers({
[08:25:55.052]             ...future.value <- base::withVisible(base::local({
[08:25:55.052]                 withCallingHandlers({
[08:25:55.052]                   {
[08:25:55.052]                     do.call(function(...) {
[08:25:55.052]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.052]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.052]                         ...future.globals.maxSize)) {
[08:25:55.052]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.052]                         on.exit(options(oopts), add = TRUE)
[08:25:55.052]                       }
[08:25:55.052]                       {
[08:25:55.052]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.052]                           FUN = function(jj) {
[08:25:55.052]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.052]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.052]                               envir = globalenv(), inherits = FALSE)
[08:25:55.052]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.052]                           })
[08:25:55.052]                       }
[08:25:55.052]                     }, args = future.call.arguments)
[08:25:55.052]                   }
[08:25:55.052]                 }, immediateCondition = function(cond) {
[08:25:55.052]                   save_rds <- function (object, pathname, ...) 
[08:25:55.052]                   {
[08:25:55.052]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.052]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.052]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.052]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.052]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.052]                         fi_tmp[["mtime"]])
[08:25:55.052]                     }
[08:25:55.052]                     tryCatch({
[08:25:55.052]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.052]                     }, error = function(ex) {
[08:25:55.052]                       msg <- conditionMessage(ex)
[08:25:55.052]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.052]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.052]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.052]                         fi_tmp[["mtime"]], msg)
[08:25:55.052]                       ex$message <- msg
[08:25:55.052]                       stop(ex)
[08:25:55.052]                     })
[08:25:55.052]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.052]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.052]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.052]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.052]                       fi <- file.info(pathname)
[08:25:55.052]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.052]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.052]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.052]                         fi[["size"]], fi[["mtime"]])
[08:25:55.052]                       stop(msg)
[08:25:55.052]                     }
[08:25:55.052]                     invisible(pathname)
[08:25:55.052]                   }
[08:25:55.052]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.052]                     rootPath = tempdir()) 
[08:25:55.052]                   {
[08:25:55.052]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.052]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.052]                       tmpdir = path, fileext = ".rds")
[08:25:55.052]                     save_rds(obj, file)
[08:25:55.052]                   }
[08:25:55.052]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.052]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.052]                   {
[08:25:55.052]                     inherits <- base::inherits
[08:25:55.052]                     invokeRestart <- base::invokeRestart
[08:25:55.052]                     is.null <- base::is.null
[08:25:55.052]                     muffled <- FALSE
[08:25:55.052]                     if (inherits(cond, "message")) {
[08:25:55.052]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.052]                       if (muffled) 
[08:25:55.052]                         invokeRestart("muffleMessage")
[08:25:55.052]                     }
[08:25:55.052]                     else if (inherits(cond, "warning")) {
[08:25:55.052]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.052]                       if (muffled) 
[08:25:55.052]                         invokeRestart("muffleWarning")
[08:25:55.052]                     }
[08:25:55.052]                     else if (inherits(cond, "condition")) {
[08:25:55.052]                       if (!is.null(pattern)) {
[08:25:55.052]                         computeRestarts <- base::computeRestarts
[08:25:55.052]                         grepl <- base::grepl
[08:25:55.052]                         restarts <- computeRestarts(cond)
[08:25:55.052]                         for (restart in restarts) {
[08:25:55.052]                           name <- restart$name
[08:25:55.052]                           if (is.null(name)) 
[08:25:55.052]                             next
[08:25:55.052]                           if (!grepl(pattern, name)) 
[08:25:55.052]                             next
[08:25:55.052]                           invokeRestart(restart)
[08:25:55.052]                           muffled <- TRUE
[08:25:55.052]                           break
[08:25:55.052]                         }
[08:25:55.052]                       }
[08:25:55.052]                     }
[08:25:55.052]                     invisible(muffled)
[08:25:55.052]                   }
[08:25:55.052]                   muffleCondition(cond)
[08:25:55.052]                 })
[08:25:55.052]             }))
[08:25:55.052]             future::FutureResult(value = ...future.value$value, 
[08:25:55.052]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.052]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.052]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.052]                     ...future.globalenv.names))
[08:25:55.052]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.052]         }, condition = base::local({
[08:25:55.052]             c <- base::c
[08:25:55.052]             inherits <- base::inherits
[08:25:55.052]             invokeRestart <- base::invokeRestart
[08:25:55.052]             length <- base::length
[08:25:55.052]             list <- base::list
[08:25:55.052]             seq.int <- base::seq.int
[08:25:55.052]             signalCondition <- base::signalCondition
[08:25:55.052]             sys.calls <- base::sys.calls
[08:25:55.052]             `[[` <- base::`[[`
[08:25:55.052]             `+` <- base::`+`
[08:25:55.052]             `<<-` <- base::`<<-`
[08:25:55.052]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.052]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.052]                   3L)]
[08:25:55.052]             }
[08:25:55.052]             function(cond) {
[08:25:55.052]                 is_error <- inherits(cond, "error")
[08:25:55.052]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.052]                   NULL)
[08:25:55.052]                 if (is_error) {
[08:25:55.052]                   sessionInformation <- function() {
[08:25:55.052]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.052]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.052]                       search = base::search(), system = base::Sys.info())
[08:25:55.052]                   }
[08:25:55.052]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.052]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.052]                     cond$call), session = sessionInformation(), 
[08:25:55.052]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.052]                   signalCondition(cond)
[08:25:55.052]                 }
[08:25:55.052]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.052]                 "immediateCondition"))) {
[08:25:55.052]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.052]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.052]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.052]                   if (TRUE && !signal) {
[08:25:55.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.052]                     {
[08:25:55.052]                       inherits <- base::inherits
[08:25:55.052]                       invokeRestart <- base::invokeRestart
[08:25:55.052]                       is.null <- base::is.null
[08:25:55.052]                       muffled <- FALSE
[08:25:55.052]                       if (inherits(cond, "message")) {
[08:25:55.052]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.052]                         if (muffled) 
[08:25:55.052]                           invokeRestart("muffleMessage")
[08:25:55.052]                       }
[08:25:55.052]                       else if (inherits(cond, "warning")) {
[08:25:55.052]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.052]                         if (muffled) 
[08:25:55.052]                           invokeRestart("muffleWarning")
[08:25:55.052]                       }
[08:25:55.052]                       else if (inherits(cond, "condition")) {
[08:25:55.052]                         if (!is.null(pattern)) {
[08:25:55.052]                           computeRestarts <- base::computeRestarts
[08:25:55.052]                           grepl <- base::grepl
[08:25:55.052]                           restarts <- computeRestarts(cond)
[08:25:55.052]                           for (restart in restarts) {
[08:25:55.052]                             name <- restart$name
[08:25:55.052]                             if (is.null(name)) 
[08:25:55.052]                               next
[08:25:55.052]                             if (!grepl(pattern, name)) 
[08:25:55.052]                               next
[08:25:55.052]                             invokeRestart(restart)
[08:25:55.052]                             muffled <- TRUE
[08:25:55.052]                             break
[08:25:55.052]                           }
[08:25:55.052]                         }
[08:25:55.052]                       }
[08:25:55.052]                       invisible(muffled)
[08:25:55.052]                     }
[08:25:55.052]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.052]                   }
[08:25:55.052]                 }
[08:25:55.052]                 else {
[08:25:55.052]                   if (TRUE) {
[08:25:55.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.052]                     {
[08:25:55.052]                       inherits <- base::inherits
[08:25:55.052]                       invokeRestart <- base::invokeRestart
[08:25:55.052]                       is.null <- base::is.null
[08:25:55.052]                       muffled <- FALSE
[08:25:55.052]                       if (inherits(cond, "message")) {
[08:25:55.052]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.052]                         if (muffled) 
[08:25:55.052]                           invokeRestart("muffleMessage")
[08:25:55.052]                       }
[08:25:55.052]                       else if (inherits(cond, "warning")) {
[08:25:55.052]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.052]                         if (muffled) 
[08:25:55.052]                           invokeRestart("muffleWarning")
[08:25:55.052]                       }
[08:25:55.052]                       else if (inherits(cond, "condition")) {
[08:25:55.052]                         if (!is.null(pattern)) {
[08:25:55.052]                           computeRestarts <- base::computeRestarts
[08:25:55.052]                           grepl <- base::grepl
[08:25:55.052]                           restarts <- computeRestarts(cond)
[08:25:55.052]                           for (restart in restarts) {
[08:25:55.052]                             name <- restart$name
[08:25:55.052]                             if (is.null(name)) 
[08:25:55.052]                               next
[08:25:55.052]                             if (!grepl(pattern, name)) 
[08:25:55.052]                               next
[08:25:55.052]                             invokeRestart(restart)
[08:25:55.052]                             muffled <- TRUE
[08:25:55.052]                             break
[08:25:55.052]                           }
[08:25:55.052]                         }
[08:25:55.052]                       }
[08:25:55.052]                       invisible(muffled)
[08:25:55.052]                     }
[08:25:55.052]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.052]                   }
[08:25:55.052]                 }
[08:25:55.052]             }
[08:25:55.052]         }))
[08:25:55.052]     }, error = function(ex) {
[08:25:55.052]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.052]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.052]                 ...future.rng), started = ...future.startTime, 
[08:25:55.052]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.052]             version = "1.8"), class = "FutureResult")
[08:25:55.052]     }, finally = {
[08:25:55.052]         if (!identical(...future.workdir, getwd())) 
[08:25:55.052]             setwd(...future.workdir)
[08:25:55.052]         {
[08:25:55.052]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.052]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.052]             }
[08:25:55.052]             base::options(...future.oldOptions)
[08:25:55.052]             if (.Platform$OS.type == "windows") {
[08:25:55.052]                 old_names <- names(...future.oldEnvVars)
[08:25:55.052]                 envs <- base::Sys.getenv()
[08:25:55.052]                 names <- names(envs)
[08:25:55.052]                 common <- intersect(names, old_names)
[08:25:55.052]                 added <- setdiff(names, old_names)
[08:25:55.052]                 removed <- setdiff(old_names, names)
[08:25:55.052]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.052]                   envs[common]]
[08:25:55.052]                 NAMES <- toupper(changed)
[08:25:55.052]                 args <- list()
[08:25:55.052]                 for (kk in seq_along(NAMES)) {
[08:25:55.052]                   name <- changed[[kk]]
[08:25:55.052]                   NAME <- NAMES[[kk]]
[08:25:55.052]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.052]                     next
[08:25:55.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.052]                 }
[08:25:55.052]                 NAMES <- toupper(added)
[08:25:55.052]                 for (kk in seq_along(NAMES)) {
[08:25:55.052]                   name <- added[[kk]]
[08:25:55.052]                   NAME <- NAMES[[kk]]
[08:25:55.052]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.052]                     next
[08:25:55.052]                   args[[name]] <- ""
[08:25:55.052]                 }
[08:25:55.052]                 NAMES <- toupper(removed)
[08:25:55.052]                 for (kk in seq_along(NAMES)) {
[08:25:55.052]                   name <- removed[[kk]]
[08:25:55.052]                   NAME <- NAMES[[kk]]
[08:25:55.052]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.052]                     next
[08:25:55.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.052]                 }
[08:25:55.052]                 if (length(args) > 0) 
[08:25:55.052]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.052]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.052]             }
[08:25:55.052]             else {
[08:25:55.052]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.052]             }
[08:25:55.052]             {
[08:25:55.052]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.052]                   0L) {
[08:25:55.052]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.052]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.052]                   base::options(opts)
[08:25:55.052]                 }
[08:25:55.052]                 {
[08:25:55.052]                   {
[08:25:55.052]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.052]                     NULL
[08:25:55.052]                   }
[08:25:55.052]                   options(future.plan = NULL)
[08:25:55.052]                   if (is.na(NA_character_)) 
[08:25:55.052]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.052]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.052]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.052]                     .init = FALSE)
[08:25:55.052]                 }
[08:25:55.052]             }
[08:25:55.052]         }
[08:25:55.052]     })
[08:25:55.052]     if (TRUE) {
[08:25:55.052]         base::sink(type = "output", split = FALSE)
[08:25:55.052]         if (TRUE) {
[08:25:55.052]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.052]         }
[08:25:55.052]         else {
[08:25:55.052]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.052]         }
[08:25:55.052]         base::close(...future.stdout)
[08:25:55.052]         ...future.stdout <- NULL
[08:25:55.052]     }
[08:25:55.052]     ...future.result$conditions <- ...future.conditions
[08:25:55.052]     ...future.result$finished <- base::Sys.time()
[08:25:55.052]     ...future.result
[08:25:55.052] }
[08:25:55.054] assign_globals() ...
[08:25:55.055] List of 5
[08:25:55.055]  $ ...future.FUN            :function (...)  
[08:25:55.055]  $ future.call.arguments    : list()
[08:25:55.055]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.055]  $ ...future.elements_ii    :List of 3
[08:25:55.055]   ..$ : int 0
[08:25:55.055]   ..$ : int 0
[08:25:55.055]   ..$ : int 0
[08:25:55.055]  $ ...future.seeds_ii       :List of 3
[08:25:55.055]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[08:25:55.055]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[08:25:55.055]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[08:25:55.055]  $ ...future.globals.maxSize: NULL
[08:25:55.055]  - attr(*, "where")=List of 5
[08:25:55.055]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.055]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.055]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.055]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.055]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.055]  - attr(*, "resolved")= logi FALSE
[08:25:55.055]  - attr(*, "total_size")= num 7184
[08:25:55.055]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.055]  - attr(*, "already-done")= logi TRUE
[08:25:55.064] - reassign environment for ‘...future.FUN’
[08:25:55.064] - copied ‘...future.FUN’ to environment
[08:25:55.064] - copied ‘future.call.arguments’ to environment
[08:25:55.064] - copied ‘...future.elements_ii’ to environment
[08:25:55.065] - copied ‘...future.seeds_ii’ to environment
[08:25:55.065] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.065] assign_globals() ... done
[08:25:55.065] requestCore(): workers = 2
[08:25:55.067] MulticoreFuture started
[08:25:55.068] - Launch lazy future ... done
[08:25:55.068] run() for ‘MulticoreFuture’ ... done
[08:25:55.068] Created future:
[08:25:55.069] plan(): Setting new future strategy stack:
[08:25:55.069] List of future strategies:
[08:25:55.069] 1. sequential:
[08:25:55.069]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.069]    - tweaked: FALSE
[08:25:55.069]    - call: NULL
[08:25:55.070] plan(): nbrOfWorkers() = 1
[08:25:55.072] plan(): Setting new future strategy stack:
[08:25:55.072] List of future strategies:
[08:25:55.072] 1. multicore:
[08:25:55.072]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.072]    - tweaked: FALSE
[08:25:55.072]    - call: plan(strategy)
[08:25:55.076] plan(): nbrOfWorkers() = 2
[08:25:55.068] MulticoreFuture:
[08:25:55.068] Label: ‘future_replicate-2’
[08:25:55.068] Expression:
[08:25:55.068] {
[08:25:55.068]     do.call(function(...) {
[08:25:55.068]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.068]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.068]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.068]             on.exit(options(oopts), add = TRUE)
[08:25:55.068]         }
[08:25:55.068]         {
[08:25:55.068]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.068]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.068]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.068]                   envir = globalenv(), inherits = FALSE)
[08:25:55.068]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.068]             })
[08:25:55.068]         }
[08:25:55.068]     }, args = future.call.arguments)
[08:25:55.068] }
[08:25:55.068] Lazy evaluation: FALSE
[08:25:55.068] Asynchronous evaluation: TRUE
[08:25:55.068] Local evaluation: TRUE
[08:25:55.068] Environment: R_GlobalEnv
[08:25:55.068] Capture standard output: TRUE
[08:25:55.068] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.068] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:55.068] Packages: <none>
[08:25:55.068] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.068] Resolved: TRUE
[08:25:55.068] Value: <not collected>
[08:25:55.068] Conditions captured: <none>
[08:25:55.068] Early signaling: FALSE
[08:25:55.068] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.068] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.077] Chunk #2 of 2 ... DONE
[08:25:55.077] Launching 2 futures (chunks) ... DONE
[08:25:55.077] Resolving 2 futures (chunks) ...
[08:25:55.077] resolve() on list ...
[08:25:55.077]  recursive: 0
[08:25:55.078]  length: 2
[08:25:55.078] 
[08:25:55.078] Future #1
[08:25:55.078] result() for MulticoreFuture ...
[08:25:55.079] result() for MulticoreFuture ...
[08:25:55.079] result() for MulticoreFuture ... done
[08:25:55.080] result() for MulticoreFuture ... done
[08:25:55.080] result() for MulticoreFuture ...
[08:25:55.080] result() for MulticoreFuture ... done
[08:25:55.080] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:55.080] - nx: 2
[08:25:55.080] - relay: TRUE
[08:25:55.080] - stdout: TRUE
[08:25:55.081] - signal: TRUE
[08:25:55.081] - resignal: FALSE
[08:25:55.081] - force: TRUE
[08:25:55.081] - relayed: [n=2] FALSE, FALSE
[08:25:55.081] - queued futures: [n=2] FALSE, FALSE
[08:25:55.081]  - until=1
[08:25:55.081]  - relaying element #1
[08:25:55.082] result() for MulticoreFuture ...
[08:25:55.082] result() for MulticoreFuture ... done
[08:25:55.082] result() for MulticoreFuture ...
[08:25:55.082] result() for MulticoreFuture ... done
[08:25:55.082] result() for MulticoreFuture ...
[08:25:55.082] result() for MulticoreFuture ... done
[08:25:55.082] result() for MulticoreFuture ...
[08:25:55.083] result() for MulticoreFuture ... done
[08:25:55.083] - relayed: [n=2] TRUE, FALSE
[08:25:55.083] - queued futures: [n=2] TRUE, FALSE
[08:25:55.083] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:55.083]  length: 1 (resolved future 1)
[08:25:55.083] Future #2
[08:25:55.084] result() for MulticoreFuture ...
[08:25:55.084] result() for MulticoreFuture ...
[08:25:55.084] result() for MulticoreFuture ... done
[08:25:55.085] result() for MulticoreFuture ... done
[08:25:55.085] result() for MulticoreFuture ...
[08:25:55.085] result() for MulticoreFuture ... done
[08:25:55.085] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:55.085] - nx: 2
[08:25:55.085] - relay: TRUE
[08:25:55.085] - stdout: TRUE
[08:25:55.085] - signal: TRUE
[08:25:55.086] - resignal: FALSE
[08:25:55.086] - force: TRUE
[08:25:55.086] - relayed: [n=2] TRUE, FALSE
[08:25:55.086] - queued futures: [n=2] TRUE, FALSE
[08:25:55.086]  - until=2
[08:25:55.086]  - relaying element #2
[08:25:55.086] result() for MulticoreFuture ...
[08:25:55.086] result() for MulticoreFuture ... done
[08:25:55.087] result() for MulticoreFuture ...
[08:25:55.087] result() for MulticoreFuture ... done
[08:25:55.087] result() for MulticoreFuture ...
[08:25:55.087] result() for MulticoreFuture ... done
[08:25:55.087] result() for MulticoreFuture ...
[08:25:55.087] result() for MulticoreFuture ... done
[08:25:55.087] - relayed: [n=2] TRUE, TRUE
[08:25:55.087] - queued futures: [n=2] TRUE, TRUE
[08:25:55.087] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:55.088]  length: 0 (resolved future 2)
[08:25:55.088] Relaying remaining futures
[08:25:55.088] signalConditionsASAP(NULL, pos=0) ...
[08:25:55.088] - nx: 2
[08:25:55.088] - relay: TRUE
[08:25:55.088] - stdout: TRUE
[08:25:55.088] - signal: TRUE
[08:25:55.088] - resignal: FALSE
[08:25:55.088] - force: TRUE
[08:25:55.088] - relayed: [n=2] TRUE, TRUE
[08:25:55.089] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:55.089] - relayed: [n=2] TRUE, TRUE
[08:25:55.089] - queued futures: [n=2] TRUE, TRUE
[08:25:55.089] signalConditionsASAP(NULL, pos=0) ... done
[08:25:55.089] resolve() on list ... DONE
[08:25:55.089] result() for MulticoreFuture ...
[08:25:55.089] result() for MulticoreFuture ... done
[08:25:55.092] result() for MulticoreFuture ...
[08:25:55.092] result() for MulticoreFuture ... done
[08:25:55.092] result() for MulticoreFuture ...
[08:25:55.092] result() for MulticoreFuture ... done
[08:25:55.092] result() for MulticoreFuture ...
[08:25:55.093] result() for MulticoreFuture ... done
[08:25:55.093]  - Number of value chunks collected: 2
[08:25:55.093] Resolving 2 futures (chunks) ... DONE
[08:25:55.093] Reducing values from 2 chunks ...
[08:25:55.093]  - Number of values collected after concatenation: 5
[08:25:55.093]  - Number of values expected: 5
[08:25:55.093] Reducing values from 2 chunks ... DONE
[08:25:55.093] future_lapply() ... DONE
[08:25:55.094] future_lapply() ...
[08:25:55.094] Generating random seeds ...
[08:25:55.094] Generating random seed streams for 5 elements ...
[08:25:55.095] Generating random seed streams for 5 elements ... DONE
[08:25:55.095] Generating random seeds ... DONE
[08:25:55.095] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:55.098] Number of chunks: 2
[08:25:55.098] getGlobalsAndPackagesXApply() ...
[08:25:55.098]  - future.globals: TRUE
[08:25:55.098] getGlobalsAndPackages() ...
[08:25:55.098] Searching for globals...
[08:25:55.100] - globals found: [2] ‘FUN’, ‘sample’
[08:25:55.100] Searching for globals ... DONE
[08:25:55.100] Resolving globals: FALSE
[08:25:55.100] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:55.101] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:55.101] - globals: [1] ‘FUN’
[08:25:55.101] 
[08:25:55.101] getGlobalsAndPackages() ... DONE
[08:25:55.101]  - globals found/used: [n=1] ‘FUN’
[08:25:55.101]  - needed namespaces: [n=0] 
[08:25:55.101] Finding globals ... DONE
[08:25:55.101]  - use_args: TRUE
[08:25:55.102]  - Getting '...' globals ...
[08:25:55.102] resolve() on list ...
[08:25:55.102]  recursive: 0
[08:25:55.102]  length: 1
[08:25:55.102]  elements: ‘...’
[08:25:55.102]  length: 0 (resolved future 1)
[08:25:55.103] resolve() on list ... DONE
[08:25:55.103]    - '...' content: [n=0] 
[08:25:55.103] List of 1
[08:25:55.103]  $ ...: list()
[08:25:55.103]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.103]  - attr(*, "where")=List of 1
[08:25:55.103]   ..$ ...:<environment: 0x55f77715baf8> 
[08:25:55.103]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.103]  - attr(*, "resolved")= logi TRUE
[08:25:55.103]  - attr(*, "total_size")= num NA
[08:25:55.106]  - Getting '...' globals ... DONE
[08:25:55.106] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:55.106] List of 2
[08:25:55.106]  $ ...future.FUN:function (...)  
[08:25:55.106]  $ ...          : list()
[08:25:55.106]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.106]  - attr(*, "where")=List of 2
[08:25:55.106]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:55.106]   ..$ ...          :<environment: 0x55f77715baf8> 
[08:25:55.106]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.106]  - attr(*, "resolved")= logi FALSE
[08:25:55.106]  - attr(*, "total_size")= num 7184
[08:25:55.109] Packages to be attached in all futures: [n=0] 
[08:25:55.109] getGlobalsAndPackagesXApply() ... DONE
[08:25:55.109] Number of futures (= number of chunks): 2
[08:25:55.109] Launching 2 futures (chunks) ...
[08:25:55.109] Chunk #1 of 2 ...
[08:25:55.110]  - Finding globals in 'X' for chunk #1 ...
[08:25:55.110] getGlobalsAndPackages() ...
[08:25:55.110] Searching for globals...
[08:25:55.110] 
[08:25:55.110] Searching for globals ... DONE
[08:25:55.110] - globals: [0] <none>
[08:25:55.110] getGlobalsAndPackages() ... DONE
[08:25:55.110]    + additional globals found: [n=0] 
[08:25:55.110]    + additional namespaces needed: [n=0] 
[08:25:55.110]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:55.111]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.111]  - seeds: [2] <seeds>
[08:25:55.111]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.111] getGlobalsAndPackages() ...
[08:25:55.111] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.111] Resolving globals: FALSE
[08:25:55.111] Tweak future expression to call with '...' arguments ...
[08:25:55.111] {
[08:25:55.111]     do.call(function(...) {
[08:25:55.111]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.111]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.111]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.111]             on.exit(options(oopts), add = TRUE)
[08:25:55.111]         }
[08:25:55.111]         {
[08:25:55.111]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.111]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.111]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.111]                   envir = globalenv(), inherits = FALSE)
[08:25:55.111]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.111]             })
[08:25:55.111]         }
[08:25:55.111]     }, args = future.call.arguments)
[08:25:55.111] }
[08:25:55.112] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.112] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.112] 
[08:25:55.112] getGlobalsAndPackages() ... DONE
[08:25:55.112] run() for ‘Future’ ...
[08:25:55.113] - state: ‘created’
[08:25:55.113] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.114] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.115] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.115]   - Field: ‘label’
[08:25:55.115]   - Field: ‘local’
[08:25:55.115]   - Field: ‘owner’
[08:25:55.115]   - Field: ‘envir’
[08:25:55.115]   - Field: ‘workers’
[08:25:55.115]   - Field: ‘packages’
[08:25:55.115]   - Field: ‘gc’
[08:25:55.115]   - Field: ‘job’
[08:25:55.115]   - Field: ‘conditions’
[08:25:55.116]   - Field: ‘expr’
[08:25:55.116]   - Field: ‘uuid’
[08:25:55.116]   - Field: ‘seed’
[08:25:55.116]   - Field: ‘version’
[08:25:55.116]   - Field: ‘result’
[08:25:55.116]   - Field: ‘asynchronous’
[08:25:55.116]   - Field: ‘calls’
[08:25:55.116]   - Field: ‘globals’
[08:25:55.116]   - Field: ‘stdout’
[08:25:55.116]   - Field: ‘earlySignal’
[08:25:55.116]   - Field: ‘lazy’
[08:25:55.117]   - Field: ‘state’
[08:25:55.117] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.117] - Launch lazy future ...
[08:25:55.119] Packages needed by the future expression (n = 0): <none>
[08:25:55.119] Packages needed by future strategies (n = 0): <none>
[08:25:55.119] {
[08:25:55.119]     {
[08:25:55.119]         {
[08:25:55.119]             ...future.startTime <- base::Sys.time()
[08:25:55.119]             {
[08:25:55.119]                 {
[08:25:55.119]                   {
[08:25:55.119]                     {
[08:25:55.119]                       base::local({
[08:25:55.119]                         has_future <- base::requireNamespace("future", 
[08:25:55.119]                           quietly = TRUE)
[08:25:55.119]                         if (has_future) {
[08:25:55.119]                           ns <- base::getNamespace("future")
[08:25:55.119]                           version <- ns[[".package"]][["version"]]
[08:25:55.119]                           if (is.null(version)) 
[08:25:55.119]                             version <- utils::packageVersion("future")
[08:25:55.119]                         }
[08:25:55.119]                         else {
[08:25:55.119]                           version <- NULL
[08:25:55.119]                         }
[08:25:55.119]                         if (!has_future || version < "1.8.0") {
[08:25:55.119]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.119]                             "", base::R.version$version.string), 
[08:25:55.119]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.119]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.119]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.119]                               "release", "version")], collapse = " "), 
[08:25:55.119]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.119]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.119]                             info)
[08:25:55.119]                           info <- base::paste(info, collapse = "; ")
[08:25:55.119]                           if (!has_future) {
[08:25:55.119]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.119]                               info)
[08:25:55.119]                           }
[08:25:55.119]                           else {
[08:25:55.119]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.119]                               info, version)
[08:25:55.119]                           }
[08:25:55.119]                           base::stop(msg)
[08:25:55.119]                         }
[08:25:55.119]                       })
[08:25:55.119]                     }
[08:25:55.119]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.119]                     base::options(mc.cores = 1L)
[08:25:55.119]                   }
[08:25:55.119]                   ...future.strategy.old <- future::plan("list")
[08:25:55.119]                   options(future.plan = NULL)
[08:25:55.119]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.119]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.119]                 }
[08:25:55.119]                 ...future.workdir <- getwd()
[08:25:55.119]             }
[08:25:55.119]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.119]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.119]         }
[08:25:55.119]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.119]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.119]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.119]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.119]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.119]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.119]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.119]             base::names(...future.oldOptions))
[08:25:55.119]     }
[08:25:55.119]     if (FALSE) {
[08:25:55.119]     }
[08:25:55.119]     else {
[08:25:55.119]         if (TRUE) {
[08:25:55.119]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.119]                 open = "w")
[08:25:55.119]         }
[08:25:55.119]         else {
[08:25:55.119]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.119]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.119]         }
[08:25:55.119]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.119]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.119]             base::sink(type = "output", split = FALSE)
[08:25:55.119]             base::close(...future.stdout)
[08:25:55.119]         }, add = TRUE)
[08:25:55.119]     }
[08:25:55.119]     ...future.frame <- base::sys.nframe()
[08:25:55.119]     ...future.conditions <- base::list()
[08:25:55.119]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.119]     if (FALSE) {
[08:25:55.119]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.119]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.119]     }
[08:25:55.119]     ...future.result <- base::tryCatch({
[08:25:55.119]         base::withCallingHandlers({
[08:25:55.119]             ...future.value <- base::withVisible(base::local({
[08:25:55.119]                 withCallingHandlers({
[08:25:55.119]                   {
[08:25:55.119]                     do.call(function(...) {
[08:25:55.119]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.119]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.119]                         ...future.globals.maxSize)) {
[08:25:55.119]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.119]                         on.exit(options(oopts), add = TRUE)
[08:25:55.119]                       }
[08:25:55.119]                       {
[08:25:55.119]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.119]                           FUN = function(jj) {
[08:25:55.119]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.119]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.119]                               envir = globalenv(), inherits = FALSE)
[08:25:55.119]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.119]                           })
[08:25:55.119]                       }
[08:25:55.119]                     }, args = future.call.arguments)
[08:25:55.119]                   }
[08:25:55.119]                 }, immediateCondition = function(cond) {
[08:25:55.119]                   save_rds <- function (object, pathname, ...) 
[08:25:55.119]                   {
[08:25:55.119]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.119]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.119]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.119]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.119]                         fi_tmp[["mtime"]])
[08:25:55.119]                     }
[08:25:55.119]                     tryCatch({
[08:25:55.119]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.119]                     }, error = function(ex) {
[08:25:55.119]                       msg <- conditionMessage(ex)
[08:25:55.119]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.119]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.119]                         fi_tmp[["mtime"]], msg)
[08:25:55.119]                       ex$message <- msg
[08:25:55.119]                       stop(ex)
[08:25:55.119]                     })
[08:25:55.119]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.119]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.119]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.119]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.119]                       fi <- file.info(pathname)
[08:25:55.119]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.119]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.119]                         fi[["size"]], fi[["mtime"]])
[08:25:55.119]                       stop(msg)
[08:25:55.119]                     }
[08:25:55.119]                     invisible(pathname)
[08:25:55.119]                   }
[08:25:55.119]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.119]                     rootPath = tempdir()) 
[08:25:55.119]                   {
[08:25:55.119]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.119]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.119]                       tmpdir = path, fileext = ".rds")
[08:25:55.119]                     save_rds(obj, file)
[08:25:55.119]                   }
[08:25:55.119]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.119]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.119]                   {
[08:25:55.119]                     inherits <- base::inherits
[08:25:55.119]                     invokeRestart <- base::invokeRestart
[08:25:55.119]                     is.null <- base::is.null
[08:25:55.119]                     muffled <- FALSE
[08:25:55.119]                     if (inherits(cond, "message")) {
[08:25:55.119]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.119]                       if (muffled) 
[08:25:55.119]                         invokeRestart("muffleMessage")
[08:25:55.119]                     }
[08:25:55.119]                     else if (inherits(cond, "warning")) {
[08:25:55.119]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.119]                       if (muffled) 
[08:25:55.119]                         invokeRestart("muffleWarning")
[08:25:55.119]                     }
[08:25:55.119]                     else if (inherits(cond, "condition")) {
[08:25:55.119]                       if (!is.null(pattern)) {
[08:25:55.119]                         computeRestarts <- base::computeRestarts
[08:25:55.119]                         grepl <- base::grepl
[08:25:55.119]                         restarts <- computeRestarts(cond)
[08:25:55.119]                         for (restart in restarts) {
[08:25:55.119]                           name <- restart$name
[08:25:55.119]                           if (is.null(name)) 
[08:25:55.119]                             next
[08:25:55.119]                           if (!grepl(pattern, name)) 
[08:25:55.119]                             next
[08:25:55.119]                           invokeRestart(restart)
[08:25:55.119]                           muffled <- TRUE
[08:25:55.119]                           break
[08:25:55.119]                         }
[08:25:55.119]                       }
[08:25:55.119]                     }
[08:25:55.119]                     invisible(muffled)
[08:25:55.119]                   }
[08:25:55.119]                   muffleCondition(cond)
[08:25:55.119]                 })
[08:25:55.119]             }))
[08:25:55.119]             future::FutureResult(value = ...future.value$value, 
[08:25:55.119]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.119]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.119]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.119]                     ...future.globalenv.names))
[08:25:55.119]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.119]         }, condition = base::local({
[08:25:55.119]             c <- base::c
[08:25:55.119]             inherits <- base::inherits
[08:25:55.119]             invokeRestart <- base::invokeRestart
[08:25:55.119]             length <- base::length
[08:25:55.119]             list <- base::list
[08:25:55.119]             seq.int <- base::seq.int
[08:25:55.119]             signalCondition <- base::signalCondition
[08:25:55.119]             sys.calls <- base::sys.calls
[08:25:55.119]             `[[` <- base::`[[`
[08:25:55.119]             `+` <- base::`+`
[08:25:55.119]             `<<-` <- base::`<<-`
[08:25:55.119]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.119]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.119]                   3L)]
[08:25:55.119]             }
[08:25:55.119]             function(cond) {
[08:25:55.119]                 is_error <- inherits(cond, "error")
[08:25:55.119]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.119]                   NULL)
[08:25:55.119]                 if (is_error) {
[08:25:55.119]                   sessionInformation <- function() {
[08:25:55.119]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.119]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.119]                       search = base::search(), system = base::Sys.info())
[08:25:55.119]                   }
[08:25:55.119]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.119]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.119]                     cond$call), session = sessionInformation(), 
[08:25:55.119]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.119]                   signalCondition(cond)
[08:25:55.119]                 }
[08:25:55.119]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.119]                 "immediateCondition"))) {
[08:25:55.119]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.119]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.119]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.119]                   if (TRUE && !signal) {
[08:25:55.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.119]                     {
[08:25:55.119]                       inherits <- base::inherits
[08:25:55.119]                       invokeRestart <- base::invokeRestart
[08:25:55.119]                       is.null <- base::is.null
[08:25:55.119]                       muffled <- FALSE
[08:25:55.119]                       if (inherits(cond, "message")) {
[08:25:55.119]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.119]                         if (muffled) 
[08:25:55.119]                           invokeRestart("muffleMessage")
[08:25:55.119]                       }
[08:25:55.119]                       else if (inherits(cond, "warning")) {
[08:25:55.119]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.119]                         if (muffled) 
[08:25:55.119]                           invokeRestart("muffleWarning")
[08:25:55.119]                       }
[08:25:55.119]                       else if (inherits(cond, "condition")) {
[08:25:55.119]                         if (!is.null(pattern)) {
[08:25:55.119]                           computeRestarts <- base::computeRestarts
[08:25:55.119]                           grepl <- base::grepl
[08:25:55.119]                           restarts <- computeRestarts(cond)
[08:25:55.119]                           for (restart in restarts) {
[08:25:55.119]                             name <- restart$name
[08:25:55.119]                             if (is.null(name)) 
[08:25:55.119]                               next
[08:25:55.119]                             if (!grepl(pattern, name)) 
[08:25:55.119]                               next
[08:25:55.119]                             invokeRestart(restart)
[08:25:55.119]                             muffled <- TRUE
[08:25:55.119]                             break
[08:25:55.119]                           }
[08:25:55.119]                         }
[08:25:55.119]                       }
[08:25:55.119]                       invisible(muffled)
[08:25:55.119]                     }
[08:25:55.119]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.119]                   }
[08:25:55.119]                 }
[08:25:55.119]                 else {
[08:25:55.119]                   if (TRUE) {
[08:25:55.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.119]                     {
[08:25:55.119]                       inherits <- base::inherits
[08:25:55.119]                       invokeRestart <- base::invokeRestart
[08:25:55.119]                       is.null <- base::is.null
[08:25:55.119]                       muffled <- FALSE
[08:25:55.119]                       if (inherits(cond, "message")) {
[08:25:55.119]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.119]                         if (muffled) 
[08:25:55.119]                           invokeRestart("muffleMessage")
[08:25:55.119]                       }
[08:25:55.119]                       else if (inherits(cond, "warning")) {
[08:25:55.119]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.119]                         if (muffled) 
[08:25:55.119]                           invokeRestart("muffleWarning")
[08:25:55.119]                       }
[08:25:55.119]                       else if (inherits(cond, "condition")) {
[08:25:55.119]                         if (!is.null(pattern)) {
[08:25:55.119]                           computeRestarts <- base::computeRestarts
[08:25:55.119]                           grepl <- base::grepl
[08:25:55.119]                           restarts <- computeRestarts(cond)
[08:25:55.119]                           for (restart in restarts) {
[08:25:55.119]                             name <- restart$name
[08:25:55.119]                             if (is.null(name)) 
[08:25:55.119]                               next
[08:25:55.119]                             if (!grepl(pattern, name)) 
[08:25:55.119]                               next
[08:25:55.119]                             invokeRestart(restart)
[08:25:55.119]                             muffled <- TRUE
[08:25:55.119]                             break
[08:25:55.119]                           }
[08:25:55.119]                         }
[08:25:55.119]                       }
[08:25:55.119]                       invisible(muffled)
[08:25:55.119]                     }
[08:25:55.119]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.119]                   }
[08:25:55.119]                 }
[08:25:55.119]             }
[08:25:55.119]         }))
[08:25:55.119]     }, error = function(ex) {
[08:25:55.119]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.119]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.119]                 ...future.rng), started = ...future.startTime, 
[08:25:55.119]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.119]             version = "1.8"), class = "FutureResult")
[08:25:55.119]     }, finally = {
[08:25:55.119]         if (!identical(...future.workdir, getwd())) 
[08:25:55.119]             setwd(...future.workdir)
[08:25:55.119]         {
[08:25:55.119]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.119]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.119]             }
[08:25:55.119]             base::options(...future.oldOptions)
[08:25:55.119]             if (.Platform$OS.type == "windows") {
[08:25:55.119]                 old_names <- names(...future.oldEnvVars)
[08:25:55.119]                 envs <- base::Sys.getenv()
[08:25:55.119]                 names <- names(envs)
[08:25:55.119]                 common <- intersect(names, old_names)
[08:25:55.119]                 added <- setdiff(names, old_names)
[08:25:55.119]                 removed <- setdiff(old_names, names)
[08:25:55.119]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.119]                   envs[common]]
[08:25:55.119]                 NAMES <- toupper(changed)
[08:25:55.119]                 args <- list()
[08:25:55.119]                 for (kk in seq_along(NAMES)) {
[08:25:55.119]                   name <- changed[[kk]]
[08:25:55.119]                   NAME <- NAMES[[kk]]
[08:25:55.119]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.119]                     next
[08:25:55.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.119]                 }
[08:25:55.119]                 NAMES <- toupper(added)
[08:25:55.119]                 for (kk in seq_along(NAMES)) {
[08:25:55.119]                   name <- added[[kk]]
[08:25:55.119]                   NAME <- NAMES[[kk]]
[08:25:55.119]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.119]                     next
[08:25:55.119]                   args[[name]] <- ""
[08:25:55.119]                 }
[08:25:55.119]                 NAMES <- toupper(removed)
[08:25:55.119]                 for (kk in seq_along(NAMES)) {
[08:25:55.119]                   name <- removed[[kk]]
[08:25:55.119]                   NAME <- NAMES[[kk]]
[08:25:55.119]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.119]                     next
[08:25:55.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.119]                 }
[08:25:55.119]                 if (length(args) > 0) 
[08:25:55.119]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.119]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.119]             }
[08:25:55.119]             else {
[08:25:55.119]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.119]             }
[08:25:55.119]             {
[08:25:55.119]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.119]                   0L) {
[08:25:55.119]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.119]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.119]                   base::options(opts)
[08:25:55.119]                 }
[08:25:55.119]                 {
[08:25:55.119]                   {
[08:25:55.119]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.119]                     NULL
[08:25:55.119]                   }
[08:25:55.119]                   options(future.plan = NULL)
[08:25:55.119]                   if (is.na(NA_character_)) 
[08:25:55.119]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.119]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.119]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.119]                     .init = FALSE)
[08:25:55.119]                 }
[08:25:55.119]             }
[08:25:55.119]         }
[08:25:55.119]     })
[08:25:55.119]     if (TRUE) {
[08:25:55.119]         base::sink(type = "output", split = FALSE)
[08:25:55.119]         if (TRUE) {
[08:25:55.119]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.119]         }
[08:25:55.119]         else {
[08:25:55.119]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.119]         }
[08:25:55.119]         base::close(...future.stdout)
[08:25:55.119]         ...future.stdout <- NULL
[08:25:55.119]     }
[08:25:55.119]     ...future.result$conditions <- ...future.conditions
[08:25:55.119]     ...future.result$finished <- base::Sys.time()
[08:25:55.119]     ...future.result
[08:25:55.119] }
[08:25:55.122] assign_globals() ...
[08:25:55.122] List of 5
[08:25:55.122]  $ ...future.FUN            :function (...)  
[08:25:55.122]  $ future.call.arguments    : list()
[08:25:55.122]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.122]  $ ...future.elements_ii    :List of 2
[08:25:55.122]   ..$ : int 0
[08:25:55.122]   ..$ : int 0
[08:25:55.122]  $ ...future.seeds_ii       :List of 2
[08:25:55.122]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[08:25:55.122]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[08:25:55.122]  $ ...future.globals.maxSize: NULL
[08:25:55.122]  - attr(*, "where")=List of 5
[08:25:55.122]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.122]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.122]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.122]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.122]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.122]  - attr(*, "resolved")= logi FALSE
[08:25:55.122]  - attr(*, "total_size")= num 7184
[08:25:55.122]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.122]  - attr(*, "already-done")= logi TRUE
[08:25:55.128] - reassign environment for ‘...future.FUN’
[08:25:55.128] - copied ‘...future.FUN’ to environment
[08:25:55.128] - copied ‘future.call.arguments’ to environment
[08:25:55.128] - copied ‘...future.elements_ii’ to environment
[08:25:55.128] - copied ‘...future.seeds_ii’ to environment
[08:25:55.128] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.128] assign_globals() ... done
[08:25:55.128] requestCore(): workers = 2
[08:25:55.131] MulticoreFuture started
[08:25:55.131] - Launch lazy future ... done
[08:25:55.131] run() for ‘MulticoreFuture’ ... done
[08:25:55.131] Created future:
[08:25:55.132] plan(): Setting new future strategy stack:
[08:25:55.132] List of future strategies:
[08:25:55.132] 1. sequential:
[08:25:55.132]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.132]    - tweaked: FALSE
[08:25:55.132]    - call: NULL
[08:25:55.133] plan(): nbrOfWorkers() = 1
[08:25:55.135] plan(): Setting new future strategy stack:
[08:25:55.135] List of future strategies:
[08:25:55.135] 1. multicore:
[08:25:55.135]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.135]    - tweaked: FALSE
[08:25:55.135]    - call: plan(strategy)
[08:25:55.138] plan(): nbrOfWorkers() = 2
[08:25:55.132] MulticoreFuture:
[08:25:55.132] Label: ‘future_replicate-1’
[08:25:55.132] Expression:
[08:25:55.132] {
[08:25:55.132]     do.call(function(...) {
[08:25:55.132]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.132]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.132]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.132]             on.exit(options(oopts), add = TRUE)
[08:25:55.132]         }
[08:25:55.132]         {
[08:25:55.132]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.132]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.132]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.132]                   envir = globalenv(), inherits = FALSE)
[08:25:55.132]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.132]             })
[08:25:55.132]         }
[08:25:55.132]     }, args = future.call.arguments)
[08:25:55.132] }
[08:25:55.132] Lazy evaluation: FALSE
[08:25:55.132] Asynchronous evaluation: TRUE
[08:25:55.132] Local evaluation: TRUE
[08:25:55.132] Environment: R_GlobalEnv
[08:25:55.132] Capture standard output: TRUE
[08:25:55.132] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.132] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:55.132] Packages: <none>
[08:25:55.132] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.132] Resolved: TRUE
[08:25:55.132] Value: <not collected>
[08:25:55.132] Conditions captured: <none>
[08:25:55.132] Early signaling: FALSE
[08:25:55.132] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.132] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.140] Chunk #1 of 2 ... DONE
[08:25:55.140] Chunk #2 of 2 ...
[08:25:55.140]  - Finding globals in 'X' for chunk #2 ...
[08:25:55.140] getGlobalsAndPackages() ...
[08:25:55.140] Searching for globals...
[08:25:55.141] 
[08:25:55.141] Searching for globals ... DONE
[08:25:55.141] - globals: [0] <none>
[08:25:55.141] getGlobalsAndPackages() ... DONE
[08:25:55.141]    + additional globals found: [n=0] 
[08:25:55.141]    + additional namespaces needed: [n=0] 
[08:25:55.141]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:55.142]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.142]  - seeds: [3] <seeds>
[08:25:55.142]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.142] getGlobalsAndPackages() ...
[08:25:55.142] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.142] Resolving globals: FALSE
[08:25:55.142] Tweak future expression to call with '...' arguments ...
[08:25:55.143] {
[08:25:55.143]     do.call(function(...) {
[08:25:55.143]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.143]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.143]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.143]             on.exit(options(oopts), add = TRUE)
[08:25:55.143]         }
[08:25:55.143]         {
[08:25:55.143]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.143]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.143]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.143]                   envir = globalenv(), inherits = FALSE)
[08:25:55.143]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.143]             })
[08:25:55.143]         }
[08:25:55.143]     }, args = future.call.arguments)
[08:25:55.143] }
[08:25:55.143] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.144] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.144] 
[08:25:55.144] getGlobalsAndPackages() ... DONE
[08:25:55.145] run() for ‘Future’ ...
[08:25:55.145] - state: ‘created’
[08:25:55.145] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.148] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.148] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.148]   - Field: ‘label’
[08:25:55.148]   - Field: ‘local’
[08:25:55.148]   - Field: ‘owner’
[08:25:55.148]   - Field: ‘envir’
[08:25:55.149]   - Field: ‘workers’
[08:25:55.149]   - Field: ‘packages’
[08:25:55.149]   - Field: ‘gc’
[08:25:55.149]   - Field: ‘job’
[08:25:55.149]   - Field: ‘conditions’
[08:25:55.149]   - Field: ‘expr’
[08:25:55.149]   - Field: ‘uuid’
[08:25:55.150]   - Field: ‘seed’
[08:25:55.150]   - Field: ‘version’
[08:25:55.150]   - Field: ‘result’
[08:25:55.150]   - Field: ‘asynchronous’
[08:25:55.150]   - Field: ‘calls’
[08:25:55.150]   - Field: ‘globals’
[08:25:55.150]   - Field: ‘stdout’
[08:25:55.150]   - Field: ‘earlySignal’
[08:25:55.151]   - Field: ‘lazy’
[08:25:55.151]   - Field: ‘state’
[08:25:55.151] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.151] - Launch lazy future ...
[08:25:55.152] Packages needed by the future expression (n = 0): <none>
[08:25:55.152] Packages needed by future strategies (n = 0): <none>
[08:25:55.152] {
[08:25:55.152]     {
[08:25:55.152]         {
[08:25:55.152]             ...future.startTime <- base::Sys.time()
[08:25:55.152]             {
[08:25:55.152]                 {
[08:25:55.152]                   {
[08:25:55.152]                     {
[08:25:55.152]                       base::local({
[08:25:55.152]                         has_future <- base::requireNamespace("future", 
[08:25:55.152]                           quietly = TRUE)
[08:25:55.152]                         if (has_future) {
[08:25:55.152]                           ns <- base::getNamespace("future")
[08:25:55.152]                           version <- ns[[".package"]][["version"]]
[08:25:55.152]                           if (is.null(version)) 
[08:25:55.152]                             version <- utils::packageVersion("future")
[08:25:55.152]                         }
[08:25:55.152]                         else {
[08:25:55.152]                           version <- NULL
[08:25:55.152]                         }
[08:25:55.152]                         if (!has_future || version < "1.8.0") {
[08:25:55.152]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.152]                             "", base::R.version$version.string), 
[08:25:55.152]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.152]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.152]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.152]                               "release", "version")], collapse = " "), 
[08:25:55.152]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.152]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.152]                             info)
[08:25:55.152]                           info <- base::paste(info, collapse = "; ")
[08:25:55.152]                           if (!has_future) {
[08:25:55.152]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.152]                               info)
[08:25:55.152]                           }
[08:25:55.152]                           else {
[08:25:55.152]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.152]                               info, version)
[08:25:55.152]                           }
[08:25:55.152]                           base::stop(msg)
[08:25:55.152]                         }
[08:25:55.152]                       })
[08:25:55.152]                     }
[08:25:55.152]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.152]                     base::options(mc.cores = 1L)
[08:25:55.152]                   }
[08:25:55.152]                   ...future.strategy.old <- future::plan("list")
[08:25:55.152]                   options(future.plan = NULL)
[08:25:55.152]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.152]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.152]                 }
[08:25:55.152]                 ...future.workdir <- getwd()
[08:25:55.152]             }
[08:25:55.152]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.152]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.152]         }
[08:25:55.152]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.152]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.152]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.152]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.152]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.152]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.152]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.152]             base::names(...future.oldOptions))
[08:25:55.152]     }
[08:25:55.152]     if (FALSE) {
[08:25:55.152]     }
[08:25:55.152]     else {
[08:25:55.152]         if (TRUE) {
[08:25:55.152]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.152]                 open = "w")
[08:25:55.152]         }
[08:25:55.152]         else {
[08:25:55.152]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.152]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.152]         }
[08:25:55.152]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.152]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.152]             base::sink(type = "output", split = FALSE)
[08:25:55.152]             base::close(...future.stdout)
[08:25:55.152]         }, add = TRUE)
[08:25:55.152]     }
[08:25:55.152]     ...future.frame <- base::sys.nframe()
[08:25:55.152]     ...future.conditions <- base::list()
[08:25:55.152]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.152]     if (FALSE) {
[08:25:55.152]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.152]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.152]     }
[08:25:55.152]     ...future.result <- base::tryCatch({
[08:25:55.152]         base::withCallingHandlers({
[08:25:55.152]             ...future.value <- base::withVisible(base::local({
[08:25:55.152]                 withCallingHandlers({
[08:25:55.152]                   {
[08:25:55.152]                     do.call(function(...) {
[08:25:55.152]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.152]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.152]                         ...future.globals.maxSize)) {
[08:25:55.152]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.152]                         on.exit(options(oopts), add = TRUE)
[08:25:55.152]                       }
[08:25:55.152]                       {
[08:25:55.152]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.152]                           FUN = function(jj) {
[08:25:55.152]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.152]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.152]                               envir = globalenv(), inherits = FALSE)
[08:25:55.152]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.152]                           })
[08:25:55.152]                       }
[08:25:55.152]                     }, args = future.call.arguments)
[08:25:55.152]                   }
[08:25:55.152]                 }, immediateCondition = function(cond) {
[08:25:55.152]                   save_rds <- function (object, pathname, ...) 
[08:25:55.152]                   {
[08:25:55.152]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.152]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.152]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.152]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.152]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.152]                         fi_tmp[["mtime"]])
[08:25:55.152]                     }
[08:25:55.152]                     tryCatch({
[08:25:55.152]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.152]                     }, error = function(ex) {
[08:25:55.152]                       msg <- conditionMessage(ex)
[08:25:55.152]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.152]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.152]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.152]                         fi_tmp[["mtime"]], msg)
[08:25:55.152]                       ex$message <- msg
[08:25:55.152]                       stop(ex)
[08:25:55.152]                     })
[08:25:55.152]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.152]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.152]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.152]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.152]                       fi <- file.info(pathname)
[08:25:55.152]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.152]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.152]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.152]                         fi[["size"]], fi[["mtime"]])
[08:25:55.152]                       stop(msg)
[08:25:55.152]                     }
[08:25:55.152]                     invisible(pathname)
[08:25:55.152]                   }
[08:25:55.152]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.152]                     rootPath = tempdir()) 
[08:25:55.152]                   {
[08:25:55.152]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.152]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.152]                       tmpdir = path, fileext = ".rds")
[08:25:55.152]                     save_rds(obj, file)
[08:25:55.152]                   }
[08:25:55.152]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.152]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.152]                   {
[08:25:55.152]                     inherits <- base::inherits
[08:25:55.152]                     invokeRestart <- base::invokeRestart
[08:25:55.152]                     is.null <- base::is.null
[08:25:55.152]                     muffled <- FALSE
[08:25:55.152]                     if (inherits(cond, "message")) {
[08:25:55.152]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.152]                       if (muffled) 
[08:25:55.152]                         invokeRestart("muffleMessage")
[08:25:55.152]                     }
[08:25:55.152]                     else if (inherits(cond, "warning")) {
[08:25:55.152]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.152]                       if (muffled) 
[08:25:55.152]                         invokeRestart("muffleWarning")
[08:25:55.152]                     }
[08:25:55.152]                     else if (inherits(cond, "condition")) {
[08:25:55.152]                       if (!is.null(pattern)) {
[08:25:55.152]                         computeRestarts <- base::computeRestarts
[08:25:55.152]                         grepl <- base::grepl
[08:25:55.152]                         restarts <- computeRestarts(cond)
[08:25:55.152]                         for (restart in restarts) {
[08:25:55.152]                           name <- restart$name
[08:25:55.152]                           if (is.null(name)) 
[08:25:55.152]                             next
[08:25:55.152]                           if (!grepl(pattern, name)) 
[08:25:55.152]                             next
[08:25:55.152]                           invokeRestart(restart)
[08:25:55.152]                           muffled <- TRUE
[08:25:55.152]                           break
[08:25:55.152]                         }
[08:25:55.152]                       }
[08:25:55.152]                     }
[08:25:55.152]                     invisible(muffled)
[08:25:55.152]                   }
[08:25:55.152]                   muffleCondition(cond)
[08:25:55.152]                 })
[08:25:55.152]             }))
[08:25:55.152]             future::FutureResult(value = ...future.value$value, 
[08:25:55.152]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.152]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.152]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.152]                     ...future.globalenv.names))
[08:25:55.152]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.152]         }, condition = base::local({
[08:25:55.152]             c <- base::c
[08:25:55.152]             inherits <- base::inherits
[08:25:55.152]             invokeRestart <- base::invokeRestart
[08:25:55.152]             length <- base::length
[08:25:55.152]             list <- base::list
[08:25:55.152]             seq.int <- base::seq.int
[08:25:55.152]             signalCondition <- base::signalCondition
[08:25:55.152]             sys.calls <- base::sys.calls
[08:25:55.152]             `[[` <- base::`[[`
[08:25:55.152]             `+` <- base::`+`
[08:25:55.152]             `<<-` <- base::`<<-`
[08:25:55.152]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.152]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.152]                   3L)]
[08:25:55.152]             }
[08:25:55.152]             function(cond) {
[08:25:55.152]                 is_error <- inherits(cond, "error")
[08:25:55.152]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.152]                   NULL)
[08:25:55.152]                 if (is_error) {
[08:25:55.152]                   sessionInformation <- function() {
[08:25:55.152]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.152]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.152]                       search = base::search(), system = base::Sys.info())
[08:25:55.152]                   }
[08:25:55.152]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.152]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.152]                     cond$call), session = sessionInformation(), 
[08:25:55.152]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.152]                   signalCondition(cond)
[08:25:55.152]                 }
[08:25:55.152]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.152]                 "immediateCondition"))) {
[08:25:55.152]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.152]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.152]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.152]                   if (TRUE && !signal) {
[08:25:55.152]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.152]                     {
[08:25:55.152]                       inherits <- base::inherits
[08:25:55.152]                       invokeRestart <- base::invokeRestart
[08:25:55.152]                       is.null <- base::is.null
[08:25:55.152]                       muffled <- FALSE
[08:25:55.152]                       if (inherits(cond, "message")) {
[08:25:55.152]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.152]                         if (muffled) 
[08:25:55.152]                           invokeRestart("muffleMessage")
[08:25:55.152]                       }
[08:25:55.152]                       else if (inherits(cond, "warning")) {
[08:25:55.152]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.152]                         if (muffled) 
[08:25:55.152]                           invokeRestart("muffleWarning")
[08:25:55.152]                       }
[08:25:55.152]                       else if (inherits(cond, "condition")) {
[08:25:55.152]                         if (!is.null(pattern)) {
[08:25:55.152]                           computeRestarts <- base::computeRestarts
[08:25:55.152]                           grepl <- base::grepl
[08:25:55.152]                           restarts <- computeRestarts(cond)
[08:25:55.152]                           for (restart in restarts) {
[08:25:55.152]                             name <- restart$name
[08:25:55.152]                             if (is.null(name)) 
[08:25:55.152]                               next
[08:25:55.152]                             if (!grepl(pattern, name)) 
[08:25:55.152]                               next
[08:25:55.152]                             invokeRestart(restart)
[08:25:55.152]                             muffled <- TRUE
[08:25:55.152]                             break
[08:25:55.152]                           }
[08:25:55.152]                         }
[08:25:55.152]                       }
[08:25:55.152]                       invisible(muffled)
[08:25:55.152]                     }
[08:25:55.152]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.152]                   }
[08:25:55.152]                 }
[08:25:55.152]                 else {
[08:25:55.152]                   if (TRUE) {
[08:25:55.152]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.152]                     {
[08:25:55.152]                       inherits <- base::inherits
[08:25:55.152]                       invokeRestart <- base::invokeRestart
[08:25:55.152]                       is.null <- base::is.null
[08:25:55.152]                       muffled <- FALSE
[08:25:55.152]                       if (inherits(cond, "message")) {
[08:25:55.152]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.152]                         if (muffled) 
[08:25:55.152]                           invokeRestart("muffleMessage")
[08:25:55.152]                       }
[08:25:55.152]                       else if (inherits(cond, "warning")) {
[08:25:55.152]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.152]                         if (muffled) 
[08:25:55.152]                           invokeRestart("muffleWarning")
[08:25:55.152]                       }
[08:25:55.152]                       else if (inherits(cond, "condition")) {
[08:25:55.152]                         if (!is.null(pattern)) {
[08:25:55.152]                           computeRestarts <- base::computeRestarts
[08:25:55.152]                           grepl <- base::grepl
[08:25:55.152]                           restarts <- computeRestarts(cond)
[08:25:55.152]                           for (restart in restarts) {
[08:25:55.152]                             name <- restart$name
[08:25:55.152]                             if (is.null(name)) 
[08:25:55.152]                               next
[08:25:55.152]                             if (!grepl(pattern, name)) 
[08:25:55.152]                               next
[08:25:55.152]                             invokeRestart(restart)
[08:25:55.152]                             muffled <- TRUE
[08:25:55.152]                             break
[08:25:55.152]                           }
[08:25:55.152]                         }
[08:25:55.152]                       }
[08:25:55.152]                       invisible(muffled)
[08:25:55.152]                     }
[08:25:55.152]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.152]                   }
[08:25:55.152]                 }
[08:25:55.152]             }
[08:25:55.152]         }))
[08:25:55.152]     }, error = function(ex) {
[08:25:55.152]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.152]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.152]                 ...future.rng), started = ...future.startTime, 
[08:25:55.152]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.152]             version = "1.8"), class = "FutureResult")
[08:25:55.152]     }, finally = {
[08:25:55.152]         if (!identical(...future.workdir, getwd())) 
[08:25:55.152]             setwd(...future.workdir)
[08:25:55.152]         {
[08:25:55.152]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.152]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.152]             }
[08:25:55.152]             base::options(...future.oldOptions)
[08:25:55.152]             if (.Platform$OS.type == "windows") {
[08:25:55.152]                 old_names <- names(...future.oldEnvVars)
[08:25:55.152]                 envs <- base::Sys.getenv()
[08:25:55.152]                 names <- names(envs)
[08:25:55.152]                 common <- intersect(names, old_names)
[08:25:55.152]                 added <- setdiff(names, old_names)
[08:25:55.152]                 removed <- setdiff(old_names, names)
[08:25:55.152]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.152]                   envs[common]]
[08:25:55.152]                 NAMES <- toupper(changed)
[08:25:55.152]                 args <- list()
[08:25:55.152]                 for (kk in seq_along(NAMES)) {
[08:25:55.152]                   name <- changed[[kk]]
[08:25:55.152]                   NAME <- NAMES[[kk]]
[08:25:55.152]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.152]                     next
[08:25:55.152]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.152]                 }
[08:25:55.152]                 NAMES <- toupper(added)
[08:25:55.152]                 for (kk in seq_along(NAMES)) {
[08:25:55.152]                   name <- added[[kk]]
[08:25:55.152]                   NAME <- NAMES[[kk]]
[08:25:55.152]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.152]                     next
[08:25:55.152]                   args[[name]] <- ""
[08:25:55.152]                 }
[08:25:55.152]                 NAMES <- toupper(removed)
[08:25:55.152]                 for (kk in seq_along(NAMES)) {
[08:25:55.152]                   name <- removed[[kk]]
[08:25:55.152]                   NAME <- NAMES[[kk]]
[08:25:55.152]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.152]                     next
[08:25:55.152]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.152]                 }
[08:25:55.152]                 if (length(args) > 0) 
[08:25:55.152]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.152]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.152]             }
[08:25:55.152]             else {
[08:25:55.152]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.152]             }
[08:25:55.152]             {
[08:25:55.152]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.152]                   0L) {
[08:25:55.152]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.152]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.152]                   base::options(opts)
[08:25:55.152]                 }
[08:25:55.152]                 {
[08:25:55.152]                   {
[08:25:55.152]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.152]                     NULL
[08:25:55.152]                   }
[08:25:55.152]                   options(future.plan = NULL)
[08:25:55.152]                   if (is.na(NA_character_)) 
[08:25:55.152]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.152]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.152]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.152]                     .init = FALSE)
[08:25:55.152]                 }
[08:25:55.152]             }
[08:25:55.152]         }
[08:25:55.152]     })
[08:25:55.152]     if (TRUE) {
[08:25:55.152]         base::sink(type = "output", split = FALSE)
[08:25:55.152]         if (TRUE) {
[08:25:55.152]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.152]         }
[08:25:55.152]         else {
[08:25:55.152]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.152]         }
[08:25:55.152]         base::close(...future.stdout)
[08:25:55.152]         ...future.stdout <- NULL
[08:25:55.152]     }
[08:25:55.152]     ...future.result$conditions <- ...future.conditions
[08:25:55.152]     ...future.result$finished <- base::Sys.time()
[08:25:55.152]     ...future.result
[08:25:55.152] }
[08:25:55.156] assign_globals() ...
[08:25:55.156] List of 5
[08:25:55.156]  $ ...future.FUN            :function (...)  
[08:25:55.156]  $ future.call.arguments    : list()
[08:25:55.156]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.156]  $ ...future.elements_ii    :List of 3
[08:25:55.156]   ..$ : int 0
[08:25:55.156]   ..$ : int 0
[08:25:55.156]   ..$ : int 0
[08:25:55.156]  $ ...future.seeds_ii       :List of 3
[08:25:55.156]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[08:25:55.156]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[08:25:55.156]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[08:25:55.156]  $ ...future.globals.maxSize: NULL
[08:25:55.156]  - attr(*, "where")=List of 5
[08:25:55.156]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.156]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.156]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.156]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.156]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.156]  - attr(*, "resolved")= logi FALSE
[08:25:55.156]  - attr(*, "total_size")= num 7184
[08:25:55.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.156]  - attr(*, "already-done")= logi TRUE
[08:25:55.169] - reassign environment for ‘...future.FUN’
[08:25:55.169] - copied ‘...future.FUN’ to environment
[08:25:55.169] - copied ‘future.call.arguments’ to environment
[08:25:55.170] - copied ‘...future.elements_ii’ to environment
[08:25:55.170] - copied ‘...future.seeds_ii’ to environment
[08:25:55.170] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.170] assign_globals() ... done
[08:25:55.170] requestCore(): workers = 2
[08:25:55.173] MulticoreFuture started
[08:25:55.174] - Launch lazy future ... done
[08:25:55.174] run() for ‘MulticoreFuture’ ... done
[08:25:55.174] Created future:
[08:25:55.174] plan(): Setting new future strategy stack:
[08:25:55.175] List of future strategies:
[08:25:55.175] 1. sequential:
[08:25:55.175]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.175]    - tweaked: FALSE
[08:25:55.175]    - call: NULL
[08:25:55.176] plan(): nbrOfWorkers() = 1
[08:25:55.178] plan(): Setting new future strategy stack:
[08:25:55.178] List of future strategies:
[08:25:55.178] 1. multicore:
[08:25:55.178]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.178]    - tweaked: FALSE
[08:25:55.178]    - call: plan(strategy)
[08:25:55.181] plan(): nbrOfWorkers() = 2
[08:25:55.174] MulticoreFuture:
[08:25:55.174] Label: ‘future_replicate-2’
[08:25:55.174] Expression:
[08:25:55.174] {
[08:25:55.174]     do.call(function(...) {
[08:25:55.174]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.174]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.174]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.174]             on.exit(options(oopts), add = TRUE)
[08:25:55.174]         }
[08:25:55.174]         {
[08:25:55.174]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.174]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.174]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.174]                   envir = globalenv(), inherits = FALSE)
[08:25:55.174]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.174]             })
[08:25:55.174]         }
[08:25:55.174]     }, args = future.call.arguments)
[08:25:55.174] }
[08:25:55.174] Lazy evaluation: FALSE
[08:25:55.174] Asynchronous evaluation: TRUE
[08:25:55.174] Local evaluation: TRUE
[08:25:55.174] Environment: R_GlobalEnv
[08:25:55.174] Capture standard output: TRUE
[08:25:55.174] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.174] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:55.174] Packages: <none>
[08:25:55.174] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.174] Resolved: TRUE
[08:25:55.174] Value: <not collected>
[08:25:55.174] Conditions captured: <none>
[08:25:55.174] Early signaling: FALSE
[08:25:55.174] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.174] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.182] Chunk #2 of 2 ... DONE
[08:25:55.183] Launching 2 futures (chunks) ... DONE
[08:25:55.183] Resolving 2 futures (chunks) ...
[08:25:55.183] resolve() on list ...
[08:25:55.183]  recursive: 0
[08:25:55.183]  length: 2
[08:25:55.183] 
[08:25:55.184] Future #1
[08:25:55.184] result() for MulticoreFuture ...
[08:25:55.185] result() for MulticoreFuture ...
[08:25:55.185] result() for MulticoreFuture ... done
[08:25:55.185] result() for MulticoreFuture ... done
[08:25:55.185] result() for MulticoreFuture ...
[08:25:55.185] result() for MulticoreFuture ... done
[08:25:55.186] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:55.186] - nx: 2
[08:25:55.186] - relay: TRUE
[08:25:55.186] - stdout: TRUE
[08:25:55.186] - signal: TRUE
[08:25:55.186] - resignal: FALSE
[08:25:55.186] - force: TRUE
[08:25:55.186] - relayed: [n=2] FALSE, FALSE
[08:25:55.187] - queued futures: [n=2] FALSE, FALSE
[08:25:55.187]  - until=1
[08:25:55.187]  - relaying element #1
[08:25:55.187] result() for MulticoreFuture ...
[08:25:55.187] result() for MulticoreFuture ... done
[08:25:55.187] result() for MulticoreFuture ...
[08:25:55.187] result() for MulticoreFuture ... done
[08:25:55.188] result() for MulticoreFuture ...
[08:25:55.188] result() for MulticoreFuture ... done
[08:25:55.188] result() for MulticoreFuture ...
[08:25:55.188] result() for MulticoreFuture ... done
[08:25:55.188] - relayed: [n=2] TRUE, FALSE
[08:25:55.188] - queued futures: [n=2] TRUE, FALSE
[08:25:55.188] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:55.189]  length: 1 (resolved future 1)
[08:25:55.189] Future #2
[08:25:55.189] result() for MulticoreFuture ...
[08:25:55.190] result() for MulticoreFuture ...
[08:25:55.190] result() for MulticoreFuture ... done
[08:25:55.190] result() for MulticoreFuture ... done
[08:25:55.190] result() for MulticoreFuture ...
[08:25:55.190] result() for MulticoreFuture ... done
[08:25:55.191] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:55.191] - nx: 2
[08:25:55.191] - relay: TRUE
[08:25:55.191] - stdout: TRUE
[08:25:55.191] - signal: TRUE
[08:25:55.191] - resignal: FALSE
[08:25:55.191] - force: TRUE
[08:25:55.191] - relayed: [n=2] TRUE, FALSE
[08:25:55.192] - queued futures: [n=2] TRUE, FALSE
[08:25:55.192]  - until=2
[08:25:55.192]  - relaying element #2
[08:25:55.192] result() for MulticoreFuture ...
[08:25:55.192] result() for MulticoreFuture ... done
[08:25:55.192] result() for MulticoreFuture ...
[08:25:55.192] result() for MulticoreFuture ... done
[08:25:55.192] result() for MulticoreFuture ...
[08:25:55.193] result() for MulticoreFuture ... done
[08:25:55.193] result() for MulticoreFuture ...
[08:25:55.193] result() for MulticoreFuture ... done
[08:25:55.193] - relayed: [n=2] TRUE, TRUE
[08:25:55.193] - queued futures: [n=2] TRUE, TRUE
[08:25:55.193] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:55.193]  length: 0 (resolved future 2)
[08:25:55.193] Relaying remaining futures
[08:25:55.193] signalConditionsASAP(NULL, pos=0) ...
[08:25:55.194] - nx: 2
[08:25:55.194] - relay: TRUE
[08:25:55.194] - stdout: TRUE
[08:25:55.194] - signal: TRUE
[08:25:55.194] - resignal: FALSE
[08:25:55.194] - force: TRUE
[08:25:55.194] - relayed: [n=2] TRUE, TRUE
[08:25:55.194] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:55.194] - relayed: [n=2] TRUE, TRUE
[08:25:55.195] - queued futures: [n=2] TRUE, TRUE
[08:25:55.195] signalConditionsASAP(NULL, pos=0) ... done
[08:25:55.195] resolve() on list ... DONE
[08:25:55.195] result() for MulticoreFuture ...
[08:25:55.195] result() for MulticoreFuture ... done
[08:25:55.195] result() for MulticoreFuture ...
[08:25:55.195] result() for MulticoreFuture ... done
[08:25:55.195] result() for MulticoreFuture ...
[08:25:55.195] result() for MulticoreFuture ... done
[08:25:55.196] result() for MulticoreFuture ...
[08:25:55.196] result() for MulticoreFuture ... done
[08:25:55.196]  - Number of value chunks collected: 2
[08:25:55.196] Resolving 2 futures (chunks) ... DONE
[08:25:55.196] Reducing values from 2 chunks ...
[08:25:55.196]  - Number of values collected after concatenation: 5
[08:25:55.196]  - Number of values expected: 5
[08:25:55.196] Reducing values from 2 chunks ... DONE
[08:25:55.196] future_lapply() ... DONE
[08:25:55.197] future_lapply() ...
[08:25:55.197] Generating random seeds ...
[08:25:55.197] Generating random seed streams for 5 elements ...
[08:25:55.198] Generating random seed streams for 5 elements ... DONE
[08:25:55.198] Generating random seeds ... DONE
[08:25:55.198] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:55.201] Number of chunks: 2
[08:25:55.201] getGlobalsAndPackagesXApply() ...
[08:25:55.201]  - future.globals: TRUE
[08:25:55.201] getGlobalsAndPackages() ...
[08:25:55.201] Searching for globals...
[08:25:55.203] - globals found: [2] ‘FUN’, ‘sample’
[08:25:55.203] Searching for globals ... DONE
[08:25:55.203] Resolving globals: FALSE
[08:25:55.242] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:55.243] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:55.243] - globals: [1] ‘FUN’
[08:25:55.243] 
[08:25:55.243] getGlobalsAndPackages() ... DONE
[08:25:55.244]  - globals found/used: [n=1] ‘FUN’
[08:25:55.244]  - needed namespaces: [n=0] 
[08:25:55.244] Finding globals ... DONE
[08:25:55.244]  - use_args: TRUE
[08:25:55.244]  - Getting '...' globals ...
[08:25:55.244] resolve() on list ...
[08:25:55.245]  recursive: 0
[08:25:55.245]  length: 1
[08:25:55.245]  elements: ‘...’
[08:25:55.245]  length: 0 (resolved future 1)
[08:25:55.245] resolve() on list ... DONE
[08:25:55.245]    - '...' content: [n=0] 
[08:25:55.245] List of 1
[08:25:55.245]  $ ...: list()
[08:25:55.245]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.245]  - attr(*, "where")=List of 1
[08:25:55.245]   ..$ ...:<environment: 0x55f777efb768> 
[08:25:55.245]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.245]  - attr(*, "resolved")= logi TRUE
[08:25:55.245]  - attr(*, "total_size")= num NA
[08:25:55.248]  - Getting '...' globals ... DONE
[08:25:55.248] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:55.248] List of 2
[08:25:55.248]  $ ...future.FUN:function (...)  
[08:25:55.248]  $ ...          : list()
[08:25:55.248]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.248]  - attr(*, "where")=List of 2
[08:25:55.248]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:55.248]   ..$ ...          :<environment: 0x55f777efb768> 
[08:25:55.248]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.248]  - attr(*, "resolved")= logi FALSE
[08:25:55.248]  - attr(*, "total_size")= num 7184
[08:25:55.250] Packages to be attached in all futures: [n=0] 
[08:25:55.250] getGlobalsAndPackagesXApply() ... DONE
[08:25:55.251] Number of futures (= number of chunks): 2
[08:25:55.251] Launching 2 futures (chunks) ...
[08:25:55.251] Chunk #1 of 2 ...
[08:25:55.251]  - Finding globals in 'X' for chunk #1 ...
[08:25:55.251] getGlobalsAndPackages() ...
[08:25:55.251] Searching for globals...
[08:25:55.251] 
[08:25:55.251] Searching for globals ... DONE
[08:25:55.252] - globals: [0] <none>
[08:25:55.252] getGlobalsAndPackages() ... DONE
[08:25:55.252]    + additional globals found: [n=0] 
[08:25:55.252]    + additional namespaces needed: [n=0] 
[08:25:55.252]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:55.252]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.252]  - seeds: [2] <seeds>
[08:25:55.252]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.252] getGlobalsAndPackages() ...
[08:25:55.252] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.253] Resolving globals: FALSE
[08:25:55.253] Tweak future expression to call with '...' arguments ...
[08:25:55.253] {
[08:25:55.253]     do.call(function(...) {
[08:25:55.253]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.253]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.253]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.253]             on.exit(options(oopts), add = TRUE)
[08:25:55.253]         }
[08:25:55.253]         {
[08:25:55.253]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.253]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.253]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.253]                   envir = globalenv(), inherits = FALSE)
[08:25:55.253]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.253]             })
[08:25:55.253]         }
[08:25:55.253]     }, args = future.call.arguments)
[08:25:55.253] }
[08:25:55.253] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.253] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.253] 
[08:25:55.254] getGlobalsAndPackages() ... DONE
[08:25:55.254] run() for ‘Future’ ...
[08:25:55.254] - state: ‘created’
[08:25:55.254] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.256] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.256] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.256]   - Field: ‘label’
[08:25:55.256]   - Field: ‘local’
[08:25:55.256]   - Field: ‘owner’
[08:25:55.256]   - Field: ‘envir’
[08:25:55.256]   - Field: ‘workers’
[08:25:55.256]   - Field: ‘packages’
[08:25:55.257]   - Field: ‘gc’
[08:25:55.257]   - Field: ‘job’
[08:25:55.257]   - Field: ‘conditions’
[08:25:55.257]   - Field: ‘expr’
[08:25:55.257]   - Field: ‘uuid’
[08:25:55.257]   - Field: ‘seed’
[08:25:55.257]   - Field: ‘version’
[08:25:55.257]   - Field: ‘result’
[08:25:55.257]   - Field: ‘asynchronous’
[08:25:55.257]   - Field: ‘calls’
[08:25:55.257]   - Field: ‘globals’
[08:25:55.258]   - Field: ‘stdout’
[08:25:55.258]   - Field: ‘earlySignal’
[08:25:55.258]   - Field: ‘lazy’
[08:25:55.258]   - Field: ‘state’
[08:25:55.258] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.258] - Launch lazy future ...
[08:25:55.258] Packages needed by the future expression (n = 0): <none>
[08:25:55.258] Packages needed by future strategies (n = 0): <none>
[08:25:55.259] {
[08:25:55.259]     {
[08:25:55.259]         {
[08:25:55.259]             ...future.startTime <- base::Sys.time()
[08:25:55.259]             {
[08:25:55.259]                 {
[08:25:55.259]                   {
[08:25:55.259]                     {
[08:25:55.259]                       base::local({
[08:25:55.259]                         has_future <- base::requireNamespace("future", 
[08:25:55.259]                           quietly = TRUE)
[08:25:55.259]                         if (has_future) {
[08:25:55.259]                           ns <- base::getNamespace("future")
[08:25:55.259]                           version <- ns[[".package"]][["version"]]
[08:25:55.259]                           if (is.null(version)) 
[08:25:55.259]                             version <- utils::packageVersion("future")
[08:25:55.259]                         }
[08:25:55.259]                         else {
[08:25:55.259]                           version <- NULL
[08:25:55.259]                         }
[08:25:55.259]                         if (!has_future || version < "1.8.0") {
[08:25:55.259]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.259]                             "", base::R.version$version.string), 
[08:25:55.259]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.259]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.259]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.259]                               "release", "version")], collapse = " "), 
[08:25:55.259]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.259]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.259]                             info)
[08:25:55.259]                           info <- base::paste(info, collapse = "; ")
[08:25:55.259]                           if (!has_future) {
[08:25:55.259]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.259]                               info)
[08:25:55.259]                           }
[08:25:55.259]                           else {
[08:25:55.259]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.259]                               info, version)
[08:25:55.259]                           }
[08:25:55.259]                           base::stop(msg)
[08:25:55.259]                         }
[08:25:55.259]                       })
[08:25:55.259]                     }
[08:25:55.259]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.259]                     base::options(mc.cores = 1L)
[08:25:55.259]                   }
[08:25:55.259]                   ...future.strategy.old <- future::plan("list")
[08:25:55.259]                   options(future.plan = NULL)
[08:25:55.259]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.259]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.259]                 }
[08:25:55.259]                 ...future.workdir <- getwd()
[08:25:55.259]             }
[08:25:55.259]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.259]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.259]         }
[08:25:55.259]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.259]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.259]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.259]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.259]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.259]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.259]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.259]             base::names(...future.oldOptions))
[08:25:55.259]     }
[08:25:55.259]     if (FALSE) {
[08:25:55.259]     }
[08:25:55.259]     else {
[08:25:55.259]         if (TRUE) {
[08:25:55.259]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.259]                 open = "w")
[08:25:55.259]         }
[08:25:55.259]         else {
[08:25:55.259]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.259]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.259]         }
[08:25:55.259]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.259]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.259]             base::sink(type = "output", split = FALSE)
[08:25:55.259]             base::close(...future.stdout)
[08:25:55.259]         }, add = TRUE)
[08:25:55.259]     }
[08:25:55.259]     ...future.frame <- base::sys.nframe()
[08:25:55.259]     ...future.conditions <- base::list()
[08:25:55.259]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.259]     if (FALSE) {
[08:25:55.259]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.259]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.259]     }
[08:25:55.259]     ...future.result <- base::tryCatch({
[08:25:55.259]         base::withCallingHandlers({
[08:25:55.259]             ...future.value <- base::withVisible(base::local({
[08:25:55.259]                 withCallingHandlers({
[08:25:55.259]                   {
[08:25:55.259]                     do.call(function(...) {
[08:25:55.259]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.259]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.259]                         ...future.globals.maxSize)) {
[08:25:55.259]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.259]                         on.exit(options(oopts), add = TRUE)
[08:25:55.259]                       }
[08:25:55.259]                       {
[08:25:55.259]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.259]                           FUN = function(jj) {
[08:25:55.259]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.259]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.259]                               envir = globalenv(), inherits = FALSE)
[08:25:55.259]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.259]                           })
[08:25:55.259]                       }
[08:25:55.259]                     }, args = future.call.arguments)
[08:25:55.259]                   }
[08:25:55.259]                 }, immediateCondition = function(cond) {
[08:25:55.259]                   save_rds <- function (object, pathname, ...) 
[08:25:55.259]                   {
[08:25:55.259]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.259]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.259]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.259]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.259]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.259]                         fi_tmp[["mtime"]])
[08:25:55.259]                     }
[08:25:55.259]                     tryCatch({
[08:25:55.259]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.259]                     }, error = function(ex) {
[08:25:55.259]                       msg <- conditionMessage(ex)
[08:25:55.259]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.259]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.259]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.259]                         fi_tmp[["mtime"]], msg)
[08:25:55.259]                       ex$message <- msg
[08:25:55.259]                       stop(ex)
[08:25:55.259]                     })
[08:25:55.259]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.259]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.259]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.259]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.259]                       fi <- file.info(pathname)
[08:25:55.259]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.259]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.259]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.259]                         fi[["size"]], fi[["mtime"]])
[08:25:55.259]                       stop(msg)
[08:25:55.259]                     }
[08:25:55.259]                     invisible(pathname)
[08:25:55.259]                   }
[08:25:55.259]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.259]                     rootPath = tempdir()) 
[08:25:55.259]                   {
[08:25:55.259]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.259]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.259]                       tmpdir = path, fileext = ".rds")
[08:25:55.259]                     save_rds(obj, file)
[08:25:55.259]                   }
[08:25:55.259]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.259]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.259]                   {
[08:25:55.259]                     inherits <- base::inherits
[08:25:55.259]                     invokeRestart <- base::invokeRestart
[08:25:55.259]                     is.null <- base::is.null
[08:25:55.259]                     muffled <- FALSE
[08:25:55.259]                     if (inherits(cond, "message")) {
[08:25:55.259]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.259]                       if (muffled) 
[08:25:55.259]                         invokeRestart("muffleMessage")
[08:25:55.259]                     }
[08:25:55.259]                     else if (inherits(cond, "warning")) {
[08:25:55.259]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.259]                       if (muffled) 
[08:25:55.259]                         invokeRestart("muffleWarning")
[08:25:55.259]                     }
[08:25:55.259]                     else if (inherits(cond, "condition")) {
[08:25:55.259]                       if (!is.null(pattern)) {
[08:25:55.259]                         computeRestarts <- base::computeRestarts
[08:25:55.259]                         grepl <- base::grepl
[08:25:55.259]                         restarts <- computeRestarts(cond)
[08:25:55.259]                         for (restart in restarts) {
[08:25:55.259]                           name <- restart$name
[08:25:55.259]                           if (is.null(name)) 
[08:25:55.259]                             next
[08:25:55.259]                           if (!grepl(pattern, name)) 
[08:25:55.259]                             next
[08:25:55.259]                           invokeRestart(restart)
[08:25:55.259]                           muffled <- TRUE
[08:25:55.259]                           break
[08:25:55.259]                         }
[08:25:55.259]                       }
[08:25:55.259]                     }
[08:25:55.259]                     invisible(muffled)
[08:25:55.259]                   }
[08:25:55.259]                   muffleCondition(cond)
[08:25:55.259]                 })
[08:25:55.259]             }))
[08:25:55.259]             future::FutureResult(value = ...future.value$value, 
[08:25:55.259]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.259]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.259]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.259]                     ...future.globalenv.names))
[08:25:55.259]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.259]         }, condition = base::local({
[08:25:55.259]             c <- base::c
[08:25:55.259]             inherits <- base::inherits
[08:25:55.259]             invokeRestart <- base::invokeRestart
[08:25:55.259]             length <- base::length
[08:25:55.259]             list <- base::list
[08:25:55.259]             seq.int <- base::seq.int
[08:25:55.259]             signalCondition <- base::signalCondition
[08:25:55.259]             sys.calls <- base::sys.calls
[08:25:55.259]             `[[` <- base::`[[`
[08:25:55.259]             `+` <- base::`+`
[08:25:55.259]             `<<-` <- base::`<<-`
[08:25:55.259]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.259]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.259]                   3L)]
[08:25:55.259]             }
[08:25:55.259]             function(cond) {
[08:25:55.259]                 is_error <- inherits(cond, "error")
[08:25:55.259]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.259]                   NULL)
[08:25:55.259]                 if (is_error) {
[08:25:55.259]                   sessionInformation <- function() {
[08:25:55.259]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.259]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.259]                       search = base::search(), system = base::Sys.info())
[08:25:55.259]                   }
[08:25:55.259]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.259]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.259]                     cond$call), session = sessionInformation(), 
[08:25:55.259]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.259]                   signalCondition(cond)
[08:25:55.259]                 }
[08:25:55.259]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.259]                 "immediateCondition"))) {
[08:25:55.259]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.259]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.259]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.259]                   if (TRUE && !signal) {
[08:25:55.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.259]                     {
[08:25:55.259]                       inherits <- base::inherits
[08:25:55.259]                       invokeRestart <- base::invokeRestart
[08:25:55.259]                       is.null <- base::is.null
[08:25:55.259]                       muffled <- FALSE
[08:25:55.259]                       if (inherits(cond, "message")) {
[08:25:55.259]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.259]                         if (muffled) 
[08:25:55.259]                           invokeRestart("muffleMessage")
[08:25:55.259]                       }
[08:25:55.259]                       else if (inherits(cond, "warning")) {
[08:25:55.259]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.259]                         if (muffled) 
[08:25:55.259]                           invokeRestart("muffleWarning")
[08:25:55.259]                       }
[08:25:55.259]                       else if (inherits(cond, "condition")) {
[08:25:55.259]                         if (!is.null(pattern)) {
[08:25:55.259]                           computeRestarts <- base::computeRestarts
[08:25:55.259]                           grepl <- base::grepl
[08:25:55.259]                           restarts <- computeRestarts(cond)
[08:25:55.259]                           for (restart in restarts) {
[08:25:55.259]                             name <- restart$name
[08:25:55.259]                             if (is.null(name)) 
[08:25:55.259]                               next
[08:25:55.259]                             if (!grepl(pattern, name)) 
[08:25:55.259]                               next
[08:25:55.259]                             invokeRestart(restart)
[08:25:55.259]                             muffled <- TRUE
[08:25:55.259]                             break
[08:25:55.259]                           }
[08:25:55.259]                         }
[08:25:55.259]                       }
[08:25:55.259]                       invisible(muffled)
[08:25:55.259]                     }
[08:25:55.259]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.259]                   }
[08:25:55.259]                 }
[08:25:55.259]                 else {
[08:25:55.259]                   if (TRUE) {
[08:25:55.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.259]                     {
[08:25:55.259]                       inherits <- base::inherits
[08:25:55.259]                       invokeRestart <- base::invokeRestart
[08:25:55.259]                       is.null <- base::is.null
[08:25:55.259]                       muffled <- FALSE
[08:25:55.259]                       if (inherits(cond, "message")) {
[08:25:55.259]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.259]                         if (muffled) 
[08:25:55.259]                           invokeRestart("muffleMessage")
[08:25:55.259]                       }
[08:25:55.259]                       else if (inherits(cond, "warning")) {
[08:25:55.259]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.259]                         if (muffled) 
[08:25:55.259]                           invokeRestart("muffleWarning")
[08:25:55.259]                       }
[08:25:55.259]                       else if (inherits(cond, "condition")) {
[08:25:55.259]                         if (!is.null(pattern)) {
[08:25:55.259]                           computeRestarts <- base::computeRestarts
[08:25:55.259]                           grepl <- base::grepl
[08:25:55.259]                           restarts <- computeRestarts(cond)
[08:25:55.259]                           for (restart in restarts) {
[08:25:55.259]                             name <- restart$name
[08:25:55.259]                             if (is.null(name)) 
[08:25:55.259]                               next
[08:25:55.259]                             if (!grepl(pattern, name)) 
[08:25:55.259]                               next
[08:25:55.259]                             invokeRestart(restart)
[08:25:55.259]                             muffled <- TRUE
[08:25:55.259]                             break
[08:25:55.259]                           }
[08:25:55.259]                         }
[08:25:55.259]                       }
[08:25:55.259]                       invisible(muffled)
[08:25:55.259]                     }
[08:25:55.259]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.259]                   }
[08:25:55.259]                 }
[08:25:55.259]             }
[08:25:55.259]         }))
[08:25:55.259]     }, error = function(ex) {
[08:25:55.259]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.259]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.259]                 ...future.rng), started = ...future.startTime, 
[08:25:55.259]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.259]             version = "1.8"), class = "FutureResult")
[08:25:55.259]     }, finally = {
[08:25:55.259]         if (!identical(...future.workdir, getwd())) 
[08:25:55.259]             setwd(...future.workdir)
[08:25:55.259]         {
[08:25:55.259]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.259]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.259]             }
[08:25:55.259]             base::options(...future.oldOptions)
[08:25:55.259]             if (.Platform$OS.type == "windows") {
[08:25:55.259]                 old_names <- names(...future.oldEnvVars)
[08:25:55.259]                 envs <- base::Sys.getenv()
[08:25:55.259]                 names <- names(envs)
[08:25:55.259]                 common <- intersect(names, old_names)
[08:25:55.259]                 added <- setdiff(names, old_names)
[08:25:55.259]                 removed <- setdiff(old_names, names)
[08:25:55.259]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.259]                   envs[common]]
[08:25:55.259]                 NAMES <- toupper(changed)
[08:25:55.259]                 args <- list()
[08:25:55.259]                 for (kk in seq_along(NAMES)) {
[08:25:55.259]                   name <- changed[[kk]]
[08:25:55.259]                   NAME <- NAMES[[kk]]
[08:25:55.259]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.259]                     next
[08:25:55.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.259]                 }
[08:25:55.259]                 NAMES <- toupper(added)
[08:25:55.259]                 for (kk in seq_along(NAMES)) {
[08:25:55.259]                   name <- added[[kk]]
[08:25:55.259]                   NAME <- NAMES[[kk]]
[08:25:55.259]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.259]                     next
[08:25:55.259]                   args[[name]] <- ""
[08:25:55.259]                 }
[08:25:55.259]                 NAMES <- toupper(removed)
[08:25:55.259]                 for (kk in seq_along(NAMES)) {
[08:25:55.259]                   name <- removed[[kk]]
[08:25:55.259]                   NAME <- NAMES[[kk]]
[08:25:55.259]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.259]                     next
[08:25:55.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.259]                 }
[08:25:55.259]                 if (length(args) > 0) 
[08:25:55.259]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.259]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.259]             }
[08:25:55.259]             else {
[08:25:55.259]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.259]             }
[08:25:55.259]             {
[08:25:55.259]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.259]                   0L) {
[08:25:55.259]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.259]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.259]                   base::options(opts)
[08:25:55.259]                 }
[08:25:55.259]                 {
[08:25:55.259]                   {
[08:25:55.259]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.259]                     NULL
[08:25:55.259]                   }
[08:25:55.259]                   options(future.plan = NULL)
[08:25:55.259]                   if (is.na(NA_character_)) 
[08:25:55.259]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.259]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.259]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.259]                     .init = FALSE)
[08:25:55.259]                 }
[08:25:55.259]             }
[08:25:55.259]         }
[08:25:55.259]     })
[08:25:55.259]     if (TRUE) {
[08:25:55.259]         base::sink(type = "output", split = FALSE)
[08:25:55.259]         if (TRUE) {
[08:25:55.259]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.259]         }
[08:25:55.259]         else {
[08:25:55.259]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.259]         }
[08:25:55.259]         base::close(...future.stdout)
[08:25:55.259]         ...future.stdout <- NULL
[08:25:55.259]     }
[08:25:55.259]     ...future.result$conditions <- ...future.conditions
[08:25:55.259]     ...future.result$finished <- base::Sys.time()
[08:25:55.259]     ...future.result
[08:25:55.259] }
[08:25:55.261] assign_globals() ...
[08:25:55.261] List of 5
[08:25:55.261]  $ ...future.FUN            :function (...)  
[08:25:55.261]  $ future.call.arguments    : list()
[08:25:55.261]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.261]  $ ...future.elements_ii    :List of 2
[08:25:55.261]   ..$ : int 0
[08:25:55.261]   ..$ : int 0
[08:25:55.261]  $ ...future.seeds_ii       :List of 2
[08:25:55.261]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[08:25:55.261]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[08:25:55.261]  $ ...future.globals.maxSize: NULL
[08:25:55.261]  - attr(*, "where")=List of 5
[08:25:55.261]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.261]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.261]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.261]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.261]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.261]  - attr(*, "resolved")= logi FALSE
[08:25:55.261]  - attr(*, "total_size")= num 7184
[08:25:55.261]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.261]  - attr(*, "already-done")= logi TRUE
[08:25:55.267] - reassign environment for ‘...future.FUN’
[08:25:55.267] - copied ‘...future.FUN’ to environment
[08:25:55.267] - copied ‘future.call.arguments’ to environment
[08:25:55.267] - copied ‘...future.elements_ii’ to environment
[08:25:55.267] - copied ‘...future.seeds_ii’ to environment
[08:25:55.267] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.267] assign_globals() ... done
[08:25:55.268] requestCore(): workers = 2
[08:25:55.270] MulticoreFuture started
[08:25:55.275] - Launch lazy future ... done
[08:25:55.275] run() for ‘MulticoreFuture’ ... done
[08:25:55.276] plan(): Setting new future strategy stack:
[08:25:55.276] Created future:
[08:25:55.276] List of future strategies:
[08:25:55.276] 1. sequential:
[08:25:55.276]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.276]    - tweaked: FALSE
[08:25:55.276]    - call: NULL
[08:25:55.278] plan(): nbrOfWorkers() = 1
[08:25:55.281] plan(): Setting new future strategy stack:
[08:25:55.281] List of future strategies:
[08:25:55.281] 1. multicore:
[08:25:55.281]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.281]    - tweaked: FALSE
[08:25:55.281]    - call: plan(strategy)
[08:25:55.284] plan(): nbrOfWorkers() = 2
[08:25:55.276] MulticoreFuture:
[08:25:55.276] Label: ‘future_replicate-1’
[08:25:55.276] Expression:
[08:25:55.276] {
[08:25:55.276]     do.call(function(...) {
[08:25:55.276]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.276]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.276]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.276]             on.exit(options(oopts), add = TRUE)
[08:25:55.276]         }
[08:25:55.276]         {
[08:25:55.276]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.276]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.276]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.276]                   envir = globalenv(), inherits = FALSE)
[08:25:55.276]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.276]             })
[08:25:55.276]         }
[08:25:55.276]     }, args = future.call.arguments)
[08:25:55.276] }
[08:25:55.276] Lazy evaluation: FALSE
[08:25:55.276] Asynchronous evaluation: TRUE
[08:25:55.276] Local evaluation: TRUE
[08:25:55.276] Environment: R_GlobalEnv
[08:25:55.276] Capture standard output: TRUE
[08:25:55.276] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.276] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:55.276] Packages: <none>
[08:25:55.276] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.276] Resolved: TRUE
[08:25:55.276] Value: <not collected>
[08:25:55.276] Conditions captured: <none>
[08:25:55.276] Early signaling: FALSE
[08:25:55.276] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.276] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.286] Chunk #1 of 2 ... DONE
[08:25:55.286] Chunk #2 of 2 ...
[08:25:55.286]  - Finding globals in 'X' for chunk #2 ...
[08:25:55.286] getGlobalsAndPackages() ...
[08:25:55.287] Searching for globals...
[08:25:55.287] 
[08:25:55.287] Searching for globals ... DONE
[08:25:55.287] - globals: [0] <none>
[08:25:55.288] getGlobalsAndPackages() ... DONE
[08:25:55.288]    + additional globals found: [n=0] 
[08:25:55.288]    + additional namespaces needed: [n=0] 
[08:25:55.288]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:55.288]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.288]  - seeds: [3] <seeds>
[08:25:55.288]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.288] getGlobalsAndPackages() ...
[08:25:55.289] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.289] Resolving globals: FALSE
[08:25:55.289] Tweak future expression to call with '...' arguments ...
[08:25:55.289] {
[08:25:55.289]     do.call(function(...) {
[08:25:55.289]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.289]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.289]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.289]             on.exit(options(oopts), add = TRUE)
[08:25:55.289]         }
[08:25:55.289]         {
[08:25:55.289]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.289]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.289]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.289]                   envir = globalenv(), inherits = FALSE)
[08:25:55.289]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.289]             })
[08:25:55.289]         }
[08:25:55.289]     }, args = future.call.arguments)
[08:25:55.289] }
[08:25:55.289] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.290] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.290] 
[08:25:55.290] getGlobalsAndPackages() ... DONE
[08:25:55.291] run() for ‘Future’ ...
[08:25:55.291] - state: ‘created’
[08:25:55.291] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.294] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.294] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.294]   - Field: ‘label’
[08:25:55.294]   - Field: ‘local’
[08:25:55.294]   - Field: ‘owner’
[08:25:55.294]   - Field: ‘envir’
[08:25:55.294]   - Field: ‘workers’
[08:25:55.295]   - Field: ‘packages’
[08:25:55.295]   - Field: ‘gc’
[08:25:55.295]   - Field: ‘job’
[08:25:55.295]   - Field: ‘conditions’
[08:25:55.295]   - Field: ‘expr’
[08:25:55.295]   - Field: ‘uuid’
[08:25:55.295]   - Field: ‘seed’
[08:25:55.296]   - Field: ‘version’
[08:25:55.296]   - Field: ‘result’
[08:25:55.296]   - Field: ‘asynchronous’
[08:25:55.296]   - Field: ‘calls’
[08:25:55.296]   - Field: ‘globals’
[08:25:55.296]   - Field: ‘stdout’
[08:25:55.296]   - Field: ‘earlySignal’
[08:25:55.296]   - Field: ‘lazy’
[08:25:55.297]   - Field: ‘state’
[08:25:55.297] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.297] - Launch lazy future ...
[08:25:55.297] Packages needed by the future expression (n = 0): <none>
[08:25:55.297] Packages needed by future strategies (n = 0): <none>
[08:25:55.298] {
[08:25:55.298]     {
[08:25:55.298]         {
[08:25:55.298]             ...future.startTime <- base::Sys.time()
[08:25:55.298]             {
[08:25:55.298]                 {
[08:25:55.298]                   {
[08:25:55.298]                     {
[08:25:55.298]                       base::local({
[08:25:55.298]                         has_future <- base::requireNamespace("future", 
[08:25:55.298]                           quietly = TRUE)
[08:25:55.298]                         if (has_future) {
[08:25:55.298]                           ns <- base::getNamespace("future")
[08:25:55.298]                           version <- ns[[".package"]][["version"]]
[08:25:55.298]                           if (is.null(version)) 
[08:25:55.298]                             version <- utils::packageVersion("future")
[08:25:55.298]                         }
[08:25:55.298]                         else {
[08:25:55.298]                           version <- NULL
[08:25:55.298]                         }
[08:25:55.298]                         if (!has_future || version < "1.8.0") {
[08:25:55.298]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.298]                             "", base::R.version$version.string), 
[08:25:55.298]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.298]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.298]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.298]                               "release", "version")], collapse = " "), 
[08:25:55.298]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.298]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.298]                             info)
[08:25:55.298]                           info <- base::paste(info, collapse = "; ")
[08:25:55.298]                           if (!has_future) {
[08:25:55.298]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.298]                               info)
[08:25:55.298]                           }
[08:25:55.298]                           else {
[08:25:55.298]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.298]                               info, version)
[08:25:55.298]                           }
[08:25:55.298]                           base::stop(msg)
[08:25:55.298]                         }
[08:25:55.298]                       })
[08:25:55.298]                     }
[08:25:55.298]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.298]                     base::options(mc.cores = 1L)
[08:25:55.298]                   }
[08:25:55.298]                   ...future.strategy.old <- future::plan("list")
[08:25:55.298]                   options(future.plan = NULL)
[08:25:55.298]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.298]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.298]                 }
[08:25:55.298]                 ...future.workdir <- getwd()
[08:25:55.298]             }
[08:25:55.298]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.298]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.298]         }
[08:25:55.298]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.298]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.298]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.298]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.298]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.298]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.298]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.298]             base::names(...future.oldOptions))
[08:25:55.298]     }
[08:25:55.298]     if (FALSE) {
[08:25:55.298]     }
[08:25:55.298]     else {
[08:25:55.298]         if (TRUE) {
[08:25:55.298]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.298]                 open = "w")
[08:25:55.298]         }
[08:25:55.298]         else {
[08:25:55.298]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.298]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.298]         }
[08:25:55.298]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.298]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.298]             base::sink(type = "output", split = FALSE)
[08:25:55.298]             base::close(...future.stdout)
[08:25:55.298]         }, add = TRUE)
[08:25:55.298]     }
[08:25:55.298]     ...future.frame <- base::sys.nframe()
[08:25:55.298]     ...future.conditions <- base::list()
[08:25:55.298]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.298]     if (FALSE) {
[08:25:55.298]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.298]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.298]     }
[08:25:55.298]     ...future.result <- base::tryCatch({
[08:25:55.298]         base::withCallingHandlers({
[08:25:55.298]             ...future.value <- base::withVisible(base::local({
[08:25:55.298]                 withCallingHandlers({
[08:25:55.298]                   {
[08:25:55.298]                     do.call(function(...) {
[08:25:55.298]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.298]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.298]                         ...future.globals.maxSize)) {
[08:25:55.298]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.298]                         on.exit(options(oopts), add = TRUE)
[08:25:55.298]                       }
[08:25:55.298]                       {
[08:25:55.298]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.298]                           FUN = function(jj) {
[08:25:55.298]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.298]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.298]                               envir = globalenv(), inherits = FALSE)
[08:25:55.298]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.298]                           })
[08:25:55.298]                       }
[08:25:55.298]                     }, args = future.call.arguments)
[08:25:55.298]                   }
[08:25:55.298]                 }, immediateCondition = function(cond) {
[08:25:55.298]                   save_rds <- function (object, pathname, ...) 
[08:25:55.298]                   {
[08:25:55.298]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.298]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.298]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.298]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.298]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.298]                         fi_tmp[["mtime"]])
[08:25:55.298]                     }
[08:25:55.298]                     tryCatch({
[08:25:55.298]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.298]                     }, error = function(ex) {
[08:25:55.298]                       msg <- conditionMessage(ex)
[08:25:55.298]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.298]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.298]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.298]                         fi_tmp[["mtime"]], msg)
[08:25:55.298]                       ex$message <- msg
[08:25:55.298]                       stop(ex)
[08:25:55.298]                     })
[08:25:55.298]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.298]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.298]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.298]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.298]                       fi <- file.info(pathname)
[08:25:55.298]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.298]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.298]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.298]                         fi[["size"]], fi[["mtime"]])
[08:25:55.298]                       stop(msg)
[08:25:55.298]                     }
[08:25:55.298]                     invisible(pathname)
[08:25:55.298]                   }
[08:25:55.298]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.298]                     rootPath = tempdir()) 
[08:25:55.298]                   {
[08:25:55.298]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.298]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.298]                       tmpdir = path, fileext = ".rds")
[08:25:55.298]                     save_rds(obj, file)
[08:25:55.298]                   }
[08:25:55.298]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.298]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.298]                   {
[08:25:55.298]                     inherits <- base::inherits
[08:25:55.298]                     invokeRestart <- base::invokeRestart
[08:25:55.298]                     is.null <- base::is.null
[08:25:55.298]                     muffled <- FALSE
[08:25:55.298]                     if (inherits(cond, "message")) {
[08:25:55.298]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.298]                       if (muffled) 
[08:25:55.298]                         invokeRestart("muffleMessage")
[08:25:55.298]                     }
[08:25:55.298]                     else if (inherits(cond, "warning")) {
[08:25:55.298]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.298]                       if (muffled) 
[08:25:55.298]                         invokeRestart("muffleWarning")
[08:25:55.298]                     }
[08:25:55.298]                     else if (inherits(cond, "condition")) {
[08:25:55.298]                       if (!is.null(pattern)) {
[08:25:55.298]                         computeRestarts <- base::computeRestarts
[08:25:55.298]                         grepl <- base::grepl
[08:25:55.298]                         restarts <- computeRestarts(cond)
[08:25:55.298]                         for (restart in restarts) {
[08:25:55.298]                           name <- restart$name
[08:25:55.298]                           if (is.null(name)) 
[08:25:55.298]                             next
[08:25:55.298]                           if (!grepl(pattern, name)) 
[08:25:55.298]                             next
[08:25:55.298]                           invokeRestart(restart)
[08:25:55.298]                           muffled <- TRUE
[08:25:55.298]                           break
[08:25:55.298]                         }
[08:25:55.298]                       }
[08:25:55.298]                     }
[08:25:55.298]                     invisible(muffled)
[08:25:55.298]                   }
[08:25:55.298]                   muffleCondition(cond)
[08:25:55.298]                 })
[08:25:55.298]             }))
[08:25:55.298]             future::FutureResult(value = ...future.value$value, 
[08:25:55.298]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.298]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.298]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.298]                     ...future.globalenv.names))
[08:25:55.298]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.298]         }, condition = base::local({
[08:25:55.298]             c <- base::c
[08:25:55.298]             inherits <- base::inherits
[08:25:55.298]             invokeRestart <- base::invokeRestart
[08:25:55.298]             length <- base::length
[08:25:55.298]             list <- base::list
[08:25:55.298]             seq.int <- base::seq.int
[08:25:55.298]             signalCondition <- base::signalCondition
[08:25:55.298]             sys.calls <- base::sys.calls
[08:25:55.298]             `[[` <- base::`[[`
[08:25:55.298]             `+` <- base::`+`
[08:25:55.298]             `<<-` <- base::`<<-`
[08:25:55.298]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.298]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.298]                   3L)]
[08:25:55.298]             }
[08:25:55.298]             function(cond) {
[08:25:55.298]                 is_error <- inherits(cond, "error")
[08:25:55.298]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.298]                   NULL)
[08:25:55.298]                 if (is_error) {
[08:25:55.298]                   sessionInformation <- function() {
[08:25:55.298]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.298]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.298]                       search = base::search(), system = base::Sys.info())
[08:25:55.298]                   }
[08:25:55.298]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.298]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.298]                     cond$call), session = sessionInformation(), 
[08:25:55.298]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.298]                   signalCondition(cond)
[08:25:55.298]                 }
[08:25:55.298]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.298]                 "immediateCondition"))) {
[08:25:55.298]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.298]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.298]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.298]                   if (TRUE && !signal) {
[08:25:55.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.298]                     {
[08:25:55.298]                       inherits <- base::inherits
[08:25:55.298]                       invokeRestart <- base::invokeRestart
[08:25:55.298]                       is.null <- base::is.null
[08:25:55.298]                       muffled <- FALSE
[08:25:55.298]                       if (inherits(cond, "message")) {
[08:25:55.298]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.298]                         if (muffled) 
[08:25:55.298]                           invokeRestart("muffleMessage")
[08:25:55.298]                       }
[08:25:55.298]                       else if (inherits(cond, "warning")) {
[08:25:55.298]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.298]                         if (muffled) 
[08:25:55.298]                           invokeRestart("muffleWarning")
[08:25:55.298]                       }
[08:25:55.298]                       else if (inherits(cond, "condition")) {
[08:25:55.298]                         if (!is.null(pattern)) {
[08:25:55.298]                           computeRestarts <- base::computeRestarts
[08:25:55.298]                           grepl <- base::grepl
[08:25:55.298]                           restarts <- computeRestarts(cond)
[08:25:55.298]                           for (restart in restarts) {
[08:25:55.298]                             name <- restart$name
[08:25:55.298]                             if (is.null(name)) 
[08:25:55.298]                               next
[08:25:55.298]                             if (!grepl(pattern, name)) 
[08:25:55.298]                               next
[08:25:55.298]                             invokeRestart(restart)
[08:25:55.298]                             muffled <- TRUE
[08:25:55.298]                             break
[08:25:55.298]                           }
[08:25:55.298]                         }
[08:25:55.298]                       }
[08:25:55.298]                       invisible(muffled)
[08:25:55.298]                     }
[08:25:55.298]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.298]                   }
[08:25:55.298]                 }
[08:25:55.298]                 else {
[08:25:55.298]                   if (TRUE) {
[08:25:55.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.298]                     {
[08:25:55.298]                       inherits <- base::inherits
[08:25:55.298]                       invokeRestart <- base::invokeRestart
[08:25:55.298]                       is.null <- base::is.null
[08:25:55.298]                       muffled <- FALSE
[08:25:55.298]                       if (inherits(cond, "message")) {
[08:25:55.298]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.298]                         if (muffled) 
[08:25:55.298]                           invokeRestart("muffleMessage")
[08:25:55.298]                       }
[08:25:55.298]                       else if (inherits(cond, "warning")) {
[08:25:55.298]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.298]                         if (muffled) 
[08:25:55.298]                           invokeRestart("muffleWarning")
[08:25:55.298]                       }
[08:25:55.298]                       else if (inherits(cond, "condition")) {
[08:25:55.298]                         if (!is.null(pattern)) {
[08:25:55.298]                           computeRestarts <- base::computeRestarts
[08:25:55.298]                           grepl <- base::grepl
[08:25:55.298]                           restarts <- computeRestarts(cond)
[08:25:55.298]                           for (restart in restarts) {
[08:25:55.298]                             name <- restart$name
[08:25:55.298]                             if (is.null(name)) 
[08:25:55.298]                               next
[08:25:55.298]                             if (!grepl(pattern, name)) 
[08:25:55.298]                               next
[08:25:55.298]                             invokeRestart(restart)
[08:25:55.298]                             muffled <- TRUE
[08:25:55.298]                             break
[08:25:55.298]                           }
[08:25:55.298]                         }
[08:25:55.298]                       }
[08:25:55.298]                       invisible(muffled)
[08:25:55.298]                     }
[08:25:55.298]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.298]                   }
[08:25:55.298]                 }
[08:25:55.298]             }
[08:25:55.298]         }))
[08:25:55.298]     }, error = function(ex) {
[08:25:55.298]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.298]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.298]                 ...future.rng), started = ...future.startTime, 
[08:25:55.298]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.298]             version = "1.8"), class = "FutureResult")
[08:25:55.298]     }, finally = {
[08:25:55.298]         if (!identical(...future.workdir, getwd())) 
[08:25:55.298]             setwd(...future.workdir)
[08:25:55.298]         {
[08:25:55.298]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.298]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.298]             }
[08:25:55.298]             base::options(...future.oldOptions)
[08:25:55.298]             if (.Platform$OS.type == "windows") {
[08:25:55.298]                 old_names <- names(...future.oldEnvVars)
[08:25:55.298]                 envs <- base::Sys.getenv()
[08:25:55.298]                 names <- names(envs)
[08:25:55.298]                 common <- intersect(names, old_names)
[08:25:55.298]                 added <- setdiff(names, old_names)
[08:25:55.298]                 removed <- setdiff(old_names, names)
[08:25:55.298]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.298]                   envs[common]]
[08:25:55.298]                 NAMES <- toupper(changed)
[08:25:55.298]                 args <- list()
[08:25:55.298]                 for (kk in seq_along(NAMES)) {
[08:25:55.298]                   name <- changed[[kk]]
[08:25:55.298]                   NAME <- NAMES[[kk]]
[08:25:55.298]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.298]                     next
[08:25:55.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.298]                 }
[08:25:55.298]                 NAMES <- toupper(added)
[08:25:55.298]                 for (kk in seq_along(NAMES)) {
[08:25:55.298]                   name <- added[[kk]]
[08:25:55.298]                   NAME <- NAMES[[kk]]
[08:25:55.298]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.298]                     next
[08:25:55.298]                   args[[name]] <- ""
[08:25:55.298]                 }
[08:25:55.298]                 NAMES <- toupper(removed)
[08:25:55.298]                 for (kk in seq_along(NAMES)) {
[08:25:55.298]                   name <- removed[[kk]]
[08:25:55.298]                   NAME <- NAMES[[kk]]
[08:25:55.298]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.298]                     next
[08:25:55.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.298]                 }
[08:25:55.298]                 if (length(args) > 0) 
[08:25:55.298]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.298]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.298]             }
[08:25:55.298]             else {
[08:25:55.298]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.298]             }
[08:25:55.298]             {
[08:25:55.298]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.298]                   0L) {
[08:25:55.298]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.298]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.298]                   base::options(opts)
[08:25:55.298]                 }
[08:25:55.298]                 {
[08:25:55.298]                   {
[08:25:55.298]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.298]                     NULL
[08:25:55.298]                   }
[08:25:55.298]                   options(future.plan = NULL)
[08:25:55.298]                   if (is.na(NA_character_)) 
[08:25:55.298]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.298]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.298]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.298]                     .init = FALSE)
[08:25:55.298]                 }
[08:25:55.298]             }
[08:25:55.298]         }
[08:25:55.298]     })
[08:25:55.298]     if (TRUE) {
[08:25:55.298]         base::sink(type = "output", split = FALSE)
[08:25:55.298]         if (TRUE) {
[08:25:55.298]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.298]         }
[08:25:55.298]         else {
[08:25:55.298]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.298]         }
[08:25:55.298]         base::close(...future.stdout)
[08:25:55.298]         ...future.stdout <- NULL
[08:25:55.298]     }
[08:25:55.298]     ...future.result$conditions <- ...future.conditions
[08:25:55.298]     ...future.result$finished <- base::Sys.time()
[08:25:55.298]     ...future.result
[08:25:55.298] }
[08:25:55.301] assign_globals() ...
[08:25:55.301] List of 5
[08:25:55.301]  $ ...future.FUN            :function (...)  
[08:25:55.301]  $ future.call.arguments    : list()
[08:25:55.301]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.301]  $ ...future.elements_ii    :List of 3
[08:25:55.301]   ..$ : int 0
[08:25:55.301]   ..$ : int 0
[08:25:55.301]   ..$ : int 0
[08:25:55.301]  $ ...future.seeds_ii       :List of 3
[08:25:55.301]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[08:25:55.301]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[08:25:55.301]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[08:25:55.301]  $ ...future.globals.maxSize: NULL
[08:25:55.301]  - attr(*, "where")=List of 5
[08:25:55.301]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.301]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.301]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.301]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.301]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.301]  - attr(*, "resolved")= logi FALSE
[08:25:55.301]  - attr(*, "total_size")= num 7184
[08:25:55.301]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.301]  - attr(*, "already-done")= logi TRUE
[08:25:55.309] - reassign environment for ‘...future.FUN’
[08:25:55.309] - copied ‘...future.FUN’ to environment
[08:25:55.309] - copied ‘future.call.arguments’ to environment
[08:25:55.310] - copied ‘...future.elements_ii’ to environment
[08:25:55.310] - copied ‘...future.seeds_ii’ to environment
[08:25:55.310] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.310] assign_globals() ... done
[08:25:55.310] requestCore(): workers = 2
[08:25:55.313] MulticoreFuture started
[08:25:55.313] - Launch lazy future ... done
[08:25:55.313] run() for ‘MulticoreFuture’ ... done
[08:25:55.314] Created future:
[08:25:55.314] plan(): Setting new future strategy stack:
[08:25:55.314] List of future strategies:
[08:25:55.314] 1. sequential:
[08:25:55.314]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.314]    - tweaked: FALSE
[08:25:55.314]    - call: NULL
[08:25:55.315] plan(): nbrOfWorkers() = 1
[08:25:55.318] plan(): Setting new future strategy stack:
[08:25:55.318] List of future strategies:
[08:25:55.318] 1. multicore:
[08:25:55.318]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.318]    - tweaked: FALSE
[08:25:55.318]    - call: plan(strategy)
[08:25:55.321] plan(): nbrOfWorkers() = 2
[08:25:55.314] MulticoreFuture:
[08:25:55.314] Label: ‘future_replicate-2’
[08:25:55.314] Expression:
[08:25:55.314] {
[08:25:55.314]     do.call(function(...) {
[08:25:55.314]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.314]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.314]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.314]             on.exit(options(oopts), add = TRUE)
[08:25:55.314]         }
[08:25:55.314]         {
[08:25:55.314]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.314]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.314]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.314]                   envir = globalenv(), inherits = FALSE)
[08:25:55.314]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.314]             })
[08:25:55.314]         }
[08:25:55.314]     }, args = future.call.arguments)
[08:25:55.314] }
[08:25:55.314] Lazy evaluation: FALSE
[08:25:55.314] Asynchronous evaluation: TRUE
[08:25:55.314] Local evaluation: TRUE
[08:25:55.314] Environment: R_GlobalEnv
[08:25:55.314] Capture standard output: TRUE
[08:25:55.314] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.314] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:55.314] Packages: <none>
[08:25:55.314] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.314] Resolved: TRUE
[08:25:55.314] Value: <not collected>
[08:25:55.314] Conditions captured: <none>
[08:25:55.314] Early signaling: FALSE
[08:25:55.314] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.314] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.322] Chunk #2 of 2 ... DONE
[08:25:55.323] Launching 2 futures (chunks) ... DONE
[08:25:55.323] Resolving 2 futures (chunks) ...
[08:25:55.323] resolve() on list ...
[08:25:55.323]  recursive: 0
[08:25:55.323]  length: 2
[08:25:55.323] 
[08:25:55.324] Future #1
[08:25:55.324] result() for MulticoreFuture ...
[08:25:55.325] result() for MulticoreFuture ...
[08:25:55.325] result() for MulticoreFuture ... done
[08:25:55.325] result() for MulticoreFuture ... done
[08:25:55.325] result() for MulticoreFuture ...
[08:25:55.325] result() for MulticoreFuture ... done
[08:25:55.326] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:55.326] - nx: 2
[08:25:55.326] - relay: TRUE
[08:25:55.326] - stdout: TRUE
[08:25:55.326] - signal: TRUE
[08:25:55.326] - resignal: FALSE
[08:25:55.326] - force: TRUE
[08:25:55.327] - relayed: [n=2] FALSE, FALSE
[08:25:55.327] - queued futures: [n=2] FALSE, FALSE
[08:25:55.327]  - until=1
[08:25:55.327]  - relaying element #1
[08:25:55.327] result() for MulticoreFuture ...
[08:25:55.327] result() for MulticoreFuture ... done
[08:25:55.327] result() for MulticoreFuture ...
[08:25:55.328] result() for MulticoreFuture ... done
[08:25:55.328] result() for MulticoreFuture ...
[08:25:55.328] result() for MulticoreFuture ... done
[08:25:55.328] result() for MulticoreFuture ...
[08:25:55.328] result() for MulticoreFuture ... done
[08:25:55.328] - relayed: [n=2] TRUE, FALSE
[08:25:55.328] - queued futures: [n=2] TRUE, FALSE
[08:25:55.329] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:55.329]  length: 1 (resolved future 1)
[08:25:55.329] Future #2
[08:25:55.329] result() for MulticoreFuture ...
[08:25:55.330] result() for MulticoreFuture ...
[08:25:55.330] result() for MulticoreFuture ... done
[08:25:55.330] result() for MulticoreFuture ... done
[08:25:55.330] result() for MulticoreFuture ...
[08:25:55.330] result() for MulticoreFuture ... done
[08:25:55.331] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:55.331] - nx: 2
[08:25:55.331] - relay: TRUE
[08:25:55.334] - stdout: TRUE
[08:25:55.334] - signal: TRUE
[08:25:55.334] - resignal: FALSE
[08:25:55.334] - force: TRUE
[08:25:55.334] - relayed: [n=2] TRUE, FALSE
[08:25:55.335] - queued futures: [n=2] TRUE, FALSE
[08:25:55.335]  - until=2
[08:25:55.335]  - relaying element #2
[08:25:55.335] result() for MulticoreFuture ...
[08:25:55.335] result() for MulticoreFuture ... done
[08:25:55.336] result() for MulticoreFuture ...
[08:25:55.336] result() for MulticoreFuture ... done
[08:25:55.336] result() for MulticoreFuture ...
[08:25:55.336] result() for MulticoreFuture ... done
[08:25:55.336] result() for MulticoreFuture ...
[08:25:55.336] result() for MulticoreFuture ... done
[08:25:55.337] - relayed: [n=2] TRUE, TRUE
[08:25:55.337] - queued futures: [n=2] TRUE, TRUE
[08:25:55.337] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:55.337]  length: 0 (resolved future 2)
[08:25:55.337] Relaying remaining futures
[08:25:55.337] signalConditionsASAP(NULL, pos=0) ...
[08:25:55.337] - nx: 2
[08:25:55.337] - relay: TRUE
[08:25:55.338] - stdout: TRUE
[08:25:55.338] - signal: TRUE
[08:25:55.338] - resignal: FALSE
[08:25:55.338] - force: TRUE
[08:25:55.338] - relayed: [n=2] TRUE, TRUE
[08:25:55.338] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:55.338] - relayed: [n=2] TRUE, TRUE
[08:25:55.338] - queued futures: [n=2] TRUE, TRUE
[08:25:55.338] signalConditionsASAP(NULL, pos=0) ... done
[08:25:55.338] resolve() on list ... DONE
[08:25:55.339] result() for MulticoreFuture ...
[08:25:55.339] result() for MulticoreFuture ... done
[08:25:55.339] result() for MulticoreFuture ...
[08:25:55.339] result() for MulticoreFuture ... done
[08:25:55.339] result() for MulticoreFuture ...
[08:25:55.339] result() for MulticoreFuture ... done
[08:25:55.339] result() for MulticoreFuture ...
[08:25:55.339] result() for MulticoreFuture ... done
[08:25:55.340]  - Number of value chunks collected: 2
[08:25:55.340] Resolving 2 futures (chunks) ... DONE
[08:25:55.340] Reducing values from 2 chunks ...
[08:25:55.340]  - Number of values collected after concatenation: 5
[08:25:55.340]  - Number of values expected: 5
[08:25:55.340] Reducing values from 2 chunks ... DONE
[08:25:55.340] future_lapply() ... DONE
[08:25:55.340] future_lapply() ...
[08:25:55.341] Generating random seeds ...
[08:25:55.341] Generating random seed streams for 5 elements ...
[08:25:55.341] Generating random seed streams for 5 elements ... DONE
[08:25:55.342] Generating random seeds ... DONE
[08:25:55.342] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:55.344] Number of chunks: 2
[08:25:55.344] getGlobalsAndPackagesXApply() ...
[08:25:55.345]  - future.globals: TRUE
[08:25:55.345] getGlobalsAndPackages() ...
[08:25:55.345] Searching for globals...
[08:25:55.346] - globals found: [2] ‘FUN’, ‘sample’
[08:25:55.346] Searching for globals ... DONE
[08:25:55.346] Resolving globals: FALSE
[08:25:55.347] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:55.347] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:55.347] - globals: [1] ‘FUN’
[08:25:55.347] 
[08:25:55.348] getGlobalsAndPackages() ... DONE
[08:25:55.348]  - globals found/used: [n=1] ‘FUN’
[08:25:55.348]  - needed namespaces: [n=0] 
[08:25:55.348] Finding globals ... DONE
[08:25:55.348]  - use_args: TRUE
[08:25:55.348]  - Getting '...' globals ...
[08:25:55.348] resolve() on list ...
[08:25:55.349]  recursive: 0
[08:25:55.349]  length: 1
[08:25:55.349]  elements: ‘...’
[08:25:55.349]  length: 0 (resolved future 1)
[08:25:55.349] resolve() on list ... DONE
[08:25:55.349]    - '...' content: [n=0] 
[08:25:55.349] List of 1
[08:25:55.349]  $ ...: list()
[08:25:55.349]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.349]  - attr(*, "where")=List of 1
[08:25:55.349]   ..$ ...:<environment: 0x55f77644a730> 
[08:25:55.349]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.349]  - attr(*, "resolved")= logi TRUE
[08:25:55.349]  - attr(*, "total_size")= num NA
[08:25:55.352]  - Getting '...' globals ... DONE
[08:25:55.352] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:55.352] List of 2
[08:25:55.352]  $ ...future.FUN:function (...)  
[08:25:55.352]  $ ...          : list()
[08:25:55.352]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.352]  - attr(*, "where")=List of 2
[08:25:55.352]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:55.352]   ..$ ...          :<environment: 0x55f77644a730> 
[08:25:55.352]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.352]  - attr(*, "resolved")= logi FALSE
[08:25:55.352]  - attr(*, "total_size")= num 7184
[08:25:55.355] Packages to be attached in all futures: [n=0] 
[08:25:55.356] getGlobalsAndPackagesXApply() ... DONE
[08:25:55.356] Number of futures (= number of chunks): 2
[08:25:55.356] Launching 2 futures (chunks) ...
[08:25:55.356] Chunk #1 of 2 ...
[08:25:55.356]  - Finding globals in 'X' for chunk #1 ...
[08:25:55.356] getGlobalsAndPackages() ...
[08:25:55.356] Searching for globals...
[08:25:55.357] 
[08:25:55.357] Searching for globals ... DONE
[08:25:55.357] - globals: [0] <none>
[08:25:55.357] getGlobalsAndPackages() ... DONE
[08:25:55.357]    + additional globals found: [n=0] 
[08:25:55.357]    + additional namespaces needed: [n=0] 
[08:25:55.357]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:55.357]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.357]  - seeds: [2] <seeds>
[08:25:55.357]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.357] getGlobalsAndPackages() ...
[08:25:55.358] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.358] Resolving globals: FALSE
[08:25:55.358] Tweak future expression to call with '...' arguments ...
[08:25:55.358] {
[08:25:55.358]     do.call(function(...) {
[08:25:55.358]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.358]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.358]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.358]             on.exit(options(oopts), add = TRUE)
[08:25:55.358]         }
[08:25:55.358]         {
[08:25:55.358]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.358]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.358]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.358]                   envir = globalenv(), inherits = FALSE)
[08:25:55.358]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.358]             })
[08:25:55.358]         }
[08:25:55.358]     }, args = future.call.arguments)
[08:25:55.358] }
[08:25:55.358] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.359] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.359] 
[08:25:55.359] getGlobalsAndPackages() ... DONE
[08:25:55.359] run() for ‘Future’ ...
[08:25:55.359] - state: ‘created’
[08:25:55.360] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.362] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.362] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.362]   - Field: ‘label’
[08:25:55.362]   - Field: ‘local’
[08:25:55.362]   - Field: ‘owner’
[08:25:55.362]   - Field: ‘envir’
[08:25:55.362]   - Field: ‘workers’
[08:25:55.363]   - Field: ‘packages’
[08:25:55.363]   - Field: ‘gc’
[08:25:55.363]   - Field: ‘job’
[08:25:55.363]   - Field: ‘conditions’
[08:25:55.363]   - Field: ‘expr’
[08:25:55.363]   - Field: ‘uuid’
[08:25:55.363]   - Field: ‘seed’
[08:25:55.363]   - Field: ‘version’
[08:25:55.365]   - Field: ‘result’
[08:25:55.365]   - Field: ‘asynchronous’
[08:25:55.365]   - Field: ‘calls’
[08:25:55.366]   - Field: ‘globals’
[08:25:55.366]   - Field: ‘stdout’
[08:25:55.366]   - Field: ‘earlySignal’
[08:25:55.366]   - Field: ‘lazy’
[08:25:55.366]   - Field: ‘state’
[08:25:55.366] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.366] - Launch lazy future ...
[08:25:55.367] Packages needed by the future expression (n = 0): <none>
[08:25:55.367] Packages needed by future strategies (n = 0): <none>
[08:25:55.367] {
[08:25:55.367]     {
[08:25:55.367]         {
[08:25:55.367]             ...future.startTime <- base::Sys.time()
[08:25:55.367]             {
[08:25:55.367]                 {
[08:25:55.367]                   {
[08:25:55.367]                     {
[08:25:55.367]                       base::local({
[08:25:55.367]                         has_future <- base::requireNamespace("future", 
[08:25:55.367]                           quietly = TRUE)
[08:25:55.367]                         if (has_future) {
[08:25:55.367]                           ns <- base::getNamespace("future")
[08:25:55.367]                           version <- ns[[".package"]][["version"]]
[08:25:55.367]                           if (is.null(version)) 
[08:25:55.367]                             version <- utils::packageVersion("future")
[08:25:55.367]                         }
[08:25:55.367]                         else {
[08:25:55.367]                           version <- NULL
[08:25:55.367]                         }
[08:25:55.367]                         if (!has_future || version < "1.8.0") {
[08:25:55.367]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.367]                             "", base::R.version$version.string), 
[08:25:55.367]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.367]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.367]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.367]                               "release", "version")], collapse = " "), 
[08:25:55.367]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.367]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.367]                             info)
[08:25:55.367]                           info <- base::paste(info, collapse = "; ")
[08:25:55.367]                           if (!has_future) {
[08:25:55.367]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.367]                               info)
[08:25:55.367]                           }
[08:25:55.367]                           else {
[08:25:55.367]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.367]                               info, version)
[08:25:55.367]                           }
[08:25:55.367]                           base::stop(msg)
[08:25:55.367]                         }
[08:25:55.367]                       })
[08:25:55.367]                     }
[08:25:55.367]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.367]                     base::options(mc.cores = 1L)
[08:25:55.367]                   }
[08:25:55.367]                   ...future.strategy.old <- future::plan("list")
[08:25:55.367]                   options(future.plan = NULL)
[08:25:55.367]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.367]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.367]                 }
[08:25:55.367]                 ...future.workdir <- getwd()
[08:25:55.367]             }
[08:25:55.367]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.367]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.367]         }
[08:25:55.367]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.367]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.367]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.367]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.367]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.367]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.367]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.367]             base::names(...future.oldOptions))
[08:25:55.367]     }
[08:25:55.367]     if (FALSE) {
[08:25:55.367]     }
[08:25:55.367]     else {
[08:25:55.367]         if (TRUE) {
[08:25:55.367]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.367]                 open = "w")
[08:25:55.367]         }
[08:25:55.367]         else {
[08:25:55.367]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.367]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.367]         }
[08:25:55.367]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.367]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.367]             base::sink(type = "output", split = FALSE)
[08:25:55.367]             base::close(...future.stdout)
[08:25:55.367]         }, add = TRUE)
[08:25:55.367]     }
[08:25:55.367]     ...future.frame <- base::sys.nframe()
[08:25:55.367]     ...future.conditions <- base::list()
[08:25:55.367]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.367]     if (FALSE) {
[08:25:55.367]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.367]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.367]     }
[08:25:55.367]     ...future.result <- base::tryCatch({
[08:25:55.367]         base::withCallingHandlers({
[08:25:55.367]             ...future.value <- base::withVisible(base::local({
[08:25:55.367]                 withCallingHandlers({
[08:25:55.367]                   {
[08:25:55.367]                     do.call(function(...) {
[08:25:55.367]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.367]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.367]                         ...future.globals.maxSize)) {
[08:25:55.367]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.367]                         on.exit(options(oopts), add = TRUE)
[08:25:55.367]                       }
[08:25:55.367]                       {
[08:25:55.367]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.367]                           FUN = function(jj) {
[08:25:55.367]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.367]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.367]                               envir = globalenv(), inherits = FALSE)
[08:25:55.367]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.367]                           })
[08:25:55.367]                       }
[08:25:55.367]                     }, args = future.call.arguments)
[08:25:55.367]                   }
[08:25:55.367]                 }, immediateCondition = function(cond) {
[08:25:55.367]                   save_rds <- function (object, pathname, ...) 
[08:25:55.367]                   {
[08:25:55.367]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.367]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.367]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.367]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.367]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.367]                         fi_tmp[["mtime"]])
[08:25:55.367]                     }
[08:25:55.367]                     tryCatch({
[08:25:55.367]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.367]                     }, error = function(ex) {
[08:25:55.367]                       msg <- conditionMessage(ex)
[08:25:55.367]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.367]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.367]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.367]                         fi_tmp[["mtime"]], msg)
[08:25:55.367]                       ex$message <- msg
[08:25:55.367]                       stop(ex)
[08:25:55.367]                     })
[08:25:55.367]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.367]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.367]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.367]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.367]                       fi <- file.info(pathname)
[08:25:55.367]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.367]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.367]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.367]                         fi[["size"]], fi[["mtime"]])
[08:25:55.367]                       stop(msg)
[08:25:55.367]                     }
[08:25:55.367]                     invisible(pathname)
[08:25:55.367]                   }
[08:25:55.367]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.367]                     rootPath = tempdir()) 
[08:25:55.367]                   {
[08:25:55.367]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.367]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.367]                       tmpdir = path, fileext = ".rds")
[08:25:55.367]                     save_rds(obj, file)
[08:25:55.367]                   }
[08:25:55.367]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.367]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.367]                   {
[08:25:55.367]                     inherits <- base::inherits
[08:25:55.367]                     invokeRestart <- base::invokeRestart
[08:25:55.367]                     is.null <- base::is.null
[08:25:55.367]                     muffled <- FALSE
[08:25:55.367]                     if (inherits(cond, "message")) {
[08:25:55.367]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.367]                       if (muffled) 
[08:25:55.367]                         invokeRestart("muffleMessage")
[08:25:55.367]                     }
[08:25:55.367]                     else if (inherits(cond, "warning")) {
[08:25:55.367]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.367]                       if (muffled) 
[08:25:55.367]                         invokeRestart("muffleWarning")
[08:25:55.367]                     }
[08:25:55.367]                     else if (inherits(cond, "condition")) {
[08:25:55.367]                       if (!is.null(pattern)) {
[08:25:55.367]                         computeRestarts <- base::computeRestarts
[08:25:55.367]                         grepl <- base::grepl
[08:25:55.367]                         restarts <- computeRestarts(cond)
[08:25:55.367]                         for (restart in restarts) {
[08:25:55.367]                           name <- restart$name
[08:25:55.367]                           if (is.null(name)) 
[08:25:55.367]                             next
[08:25:55.367]                           if (!grepl(pattern, name)) 
[08:25:55.367]                             next
[08:25:55.367]                           invokeRestart(restart)
[08:25:55.367]                           muffled <- TRUE
[08:25:55.367]                           break
[08:25:55.367]                         }
[08:25:55.367]                       }
[08:25:55.367]                     }
[08:25:55.367]                     invisible(muffled)
[08:25:55.367]                   }
[08:25:55.367]                   muffleCondition(cond)
[08:25:55.367]                 })
[08:25:55.367]             }))
[08:25:55.367]             future::FutureResult(value = ...future.value$value, 
[08:25:55.367]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.367]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.367]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.367]                     ...future.globalenv.names))
[08:25:55.367]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.367]         }, condition = base::local({
[08:25:55.367]             c <- base::c
[08:25:55.367]             inherits <- base::inherits
[08:25:55.367]             invokeRestart <- base::invokeRestart
[08:25:55.367]             length <- base::length
[08:25:55.367]             list <- base::list
[08:25:55.367]             seq.int <- base::seq.int
[08:25:55.367]             signalCondition <- base::signalCondition
[08:25:55.367]             sys.calls <- base::sys.calls
[08:25:55.367]             `[[` <- base::`[[`
[08:25:55.367]             `+` <- base::`+`
[08:25:55.367]             `<<-` <- base::`<<-`
[08:25:55.367]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.367]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.367]                   3L)]
[08:25:55.367]             }
[08:25:55.367]             function(cond) {
[08:25:55.367]                 is_error <- inherits(cond, "error")
[08:25:55.367]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.367]                   NULL)
[08:25:55.367]                 if (is_error) {
[08:25:55.367]                   sessionInformation <- function() {
[08:25:55.367]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.367]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.367]                       search = base::search(), system = base::Sys.info())
[08:25:55.367]                   }
[08:25:55.367]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.367]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.367]                     cond$call), session = sessionInformation(), 
[08:25:55.367]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.367]                   signalCondition(cond)
[08:25:55.367]                 }
[08:25:55.367]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.367]                 "immediateCondition"))) {
[08:25:55.367]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.367]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.367]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.367]                   if (TRUE && !signal) {
[08:25:55.367]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.367]                     {
[08:25:55.367]                       inherits <- base::inherits
[08:25:55.367]                       invokeRestart <- base::invokeRestart
[08:25:55.367]                       is.null <- base::is.null
[08:25:55.367]                       muffled <- FALSE
[08:25:55.367]                       if (inherits(cond, "message")) {
[08:25:55.367]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.367]                         if (muffled) 
[08:25:55.367]                           invokeRestart("muffleMessage")
[08:25:55.367]                       }
[08:25:55.367]                       else if (inherits(cond, "warning")) {
[08:25:55.367]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.367]                         if (muffled) 
[08:25:55.367]                           invokeRestart("muffleWarning")
[08:25:55.367]                       }
[08:25:55.367]                       else if (inherits(cond, "condition")) {
[08:25:55.367]                         if (!is.null(pattern)) {
[08:25:55.367]                           computeRestarts <- base::computeRestarts
[08:25:55.367]                           grepl <- base::grepl
[08:25:55.367]                           restarts <- computeRestarts(cond)
[08:25:55.367]                           for (restart in restarts) {
[08:25:55.367]                             name <- restart$name
[08:25:55.367]                             if (is.null(name)) 
[08:25:55.367]                               next
[08:25:55.367]                             if (!grepl(pattern, name)) 
[08:25:55.367]                               next
[08:25:55.367]                             invokeRestart(restart)
[08:25:55.367]                             muffled <- TRUE
[08:25:55.367]                             break
[08:25:55.367]                           }
[08:25:55.367]                         }
[08:25:55.367]                       }
[08:25:55.367]                       invisible(muffled)
[08:25:55.367]                     }
[08:25:55.367]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.367]                   }
[08:25:55.367]                 }
[08:25:55.367]                 else {
[08:25:55.367]                   if (TRUE) {
[08:25:55.367]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.367]                     {
[08:25:55.367]                       inherits <- base::inherits
[08:25:55.367]                       invokeRestart <- base::invokeRestart
[08:25:55.367]                       is.null <- base::is.null
[08:25:55.367]                       muffled <- FALSE
[08:25:55.367]                       if (inherits(cond, "message")) {
[08:25:55.367]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.367]                         if (muffled) 
[08:25:55.367]                           invokeRestart("muffleMessage")
[08:25:55.367]                       }
[08:25:55.367]                       else if (inherits(cond, "warning")) {
[08:25:55.367]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.367]                         if (muffled) 
[08:25:55.367]                           invokeRestart("muffleWarning")
[08:25:55.367]                       }
[08:25:55.367]                       else if (inherits(cond, "condition")) {
[08:25:55.367]                         if (!is.null(pattern)) {
[08:25:55.367]                           computeRestarts <- base::computeRestarts
[08:25:55.367]                           grepl <- base::grepl
[08:25:55.367]                           restarts <- computeRestarts(cond)
[08:25:55.367]                           for (restart in restarts) {
[08:25:55.367]                             name <- restart$name
[08:25:55.367]                             if (is.null(name)) 
[08:25:55.367]                               next
[08:25:55.367]                             if (!grepl(pattern, name)) 
[08:25:55.367]                               next
[08:25:55.367]                             invokeRestart(restart)
[08:25:55.367]                             muffled <- TRUE
[08:25:55.367]                             break
[08:25:55.367]                           }
[08:25:55.367]                         }
[08:25:55.367]                       }
[08:25:55.367]                       invisible(muffled)
[08:25:55.367]                     }
[08:25:55.367]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.367]                   }
[08:25:55.367]                 }
[08:25:55.367]             }
[08:25:55.367]         }))
[08:25:55.367]     }, error = function(ex) {
[08:25:55.367]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.367]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.367]                 ...future.rng), started = ...future.startTime, 
[08:25:55.367]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.367]             version = "1.8"), class = "FutureResult")
[08:25:55.367]     }, finally = {
[08:25:55.367]         if (!identical(...future.workdir, getwd())) 
[08:25:55.367]             setwd(...future.workdir)
[08:25:55.367]         {
[08:25:55.367]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.367]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.367]             }
[08:25:55.367]             base::options(...future.oldOptions)
[08:25:55.367]             if (.Platform$OS.type == "windows") {
[08:25:55.367]                 old_names <- names(...future.oldEnvVars)
[08:25:55.367]                 envs <- base::Sys.getenv()
[08:25:55.367]                 names <- names(envs)
[08:25:55.367]                 common <- intersect(names, old_names)
[08:25:55.367]                 added <- setdiff(names, old_names)
[08:25:55.367]                 removed <- setdiff(old_names, names)
[08:25:55.367]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.367]                   envs[common]]
[08:25:55.367]                 NAMES <- toupper(changed)
[08:25:55.367]                 args <- list()
[08:25:55.367]                 for (kk in seq_along(NAMES)) {
[08:25:55.367]                   name <- changed[[kk]]
[08:25:55.367]                   NAME <- NAMES[[kk]]
[08:25:55.367]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.367]                     next
[08:25:55.367]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.367]                 }
[08:25:55.367]                 NAMES <- toupper(added)
[08:25:55.367]                 for (kk in seq_along(NAMES)) {
[08:25:55.367]                   name <- added[[kk]]
[08:25:55.367]                   NAME <- NAMES[[kk]]
[08:25:55.367]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.367]                     next
[08:25:55.367]                   args[[name]] <- ""
[08:25:55.367]                 }
[08:25:55.367]                 NAMES <- toupper(removed)
[08:25:55.367]                 for (kk in seq_along(NAMES)) {
[08:25:55.367]                   name <- removed[[kk]]
[08:25:55.367]                   NAME <- NAMES[[kk]]
[08:25:55.367]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.367]                     next
[08:25:55.367]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.367]                 }
[08:25:55.367]                 if (length(args) > 0) 
[08:25:55.367]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.367]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.367]             }
[08:25:55.367]             else {
[08:25:55.367]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.367]             }
[08:25:55.367]             {
[08:25:55.367]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.367]                   0L) {
[08:25:55.367]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.367]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.367]                   base::options(opts)
[08:25:55.367]                 }
[08:25:55.367]                 {
[08:25:55.367]                   {
[08:25:55.367]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.367]                     NULL
[08:25:55.367]                   }
[08:25:55.367]                   options(future.plan = NULL)
[08:25:55.367]                   if (is.na(NA_character_)) 
[08:25:55.367]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.367]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.367]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.367]                     .init = FALSE)
[08:25:55.367]                 }
[08:25:55.367]             }
[08:25:55.367]         }
[08:25:55.367]     })
[08:25:55.367]     if (TRUE) {
[08:25:55.367]         base::sink(type = "output", split = FALSE)
[08:25:55.367]         if (TRUE) {
[08:25:55.367]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.367]         }
[08:25:55.367]         else {
[08:25:55.367]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.367]         }
[08:25:55.367]         base::close(...future.stdout)
[08:25:55.367]         ...future.stdout <- NULL
[08:25:55.367]     }
[08:25:55.367]     ...future.result$conditions <- ...future.conditions
[08:25:55.367]     ...future.result$finished <- base::Sys.time()
[08:25:55.367]     ...future.result
[08:25:55.367] }
[08:25:55.370] assign_globals() ...
[08:25:55.370] List of 5
[08:25:55.370]  $ ...future.FUN            :function (...)  
[08:25:55.370]  $ future.call.arguments    : list()
[08:25:55.370]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.370]  $ ...future.elements_ii    :List of 2
[08:25:55.370]   ..$ : int 0
[08:25:55.370]   ..$ : int 0
[08:25:55.370]  $ ...future.seeds_ii       :List of 2
[08:25:55.370]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[08:25:55.370]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[08:25:55.370]  $ ...future.globals.maxSize: NULL
[08:25:55.370]  - attr(*, "where")=List of 5
[08:25:55.370]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.370]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.370]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.370]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.370]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.370]  - attr(*, "resolved")= logi FALSE
[08:25:55.370]  - attr(*, "total_size")= num 7184
[08:25:55.370]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.370]  - attr(*, "already-done")= logi TRUE
[08:25:55.376] - reassign environment for ‘...future.FUN’
[08:25:55.376] - copied ‘...future.FUN’ to environment
[08:25:55.376] - copied ‘future.call.arguments’ to environment
[08:25:55.376] - copied ‘...future.elements_ii’ to environment
[08:25:55.376] - copied ‘...future.seeds_ii’ to environment
[08:25:55.376] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.376] assign_globals() ... done
[08:25:55.377] requestCore(): workers = 2
[08:25:55.379] MulticoreFuture started
[08:25:55.379] - Launch lazy future ... done
[08:25:55.380] run() for ‘MulticoreFuture’ ... done
[08:25:55.380] Created future:
[08:25:55.380] plan(): Setting new future strategy stack:
[08:25:55.381] List of future strategies:
[08:25:55.381] 1. sequential:
[08:25:55.381]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.381]    - tweaked: FALSE
[08:25:55.381]    - call: NULL
[08:25:55.382] plan(): nbrOfWorkers() = 1
[08:25:55.384] plan(): Setting new future strategy stack:
[08:25:55.384] List of future strategies:
[08:25:55.384] 1. multicore:
[08:25:55.384]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.384]    - tweaked: FALSE
[08:25:55.384]    - call: plan(strategy)
[08:25:55.388] plan(): nbrOfWorkers() = 2
[08:25:55.380] MulticoreFuture:
[08:25:55.380] Label: ‘future_replicate-1’
[08:25:55.380] Expression:
[08:25:55.380] {
[08:25:55.380]     do.call(function(...) {
[08:25:55.380]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.380]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.380]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.380]             on.exit(options(oopts), add = TRUE)
[08:25:55.380]         }
[08:25:55.380]         {
[08:25:55.380]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.380]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.380]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.380]                   envir = globalenv(), inherits = FALSE)
[08:25:55.380]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.380]             })
[08:25:55.380]         }
[08:25:55.380]     }, args = future.call.arguments)
[08:25:55.380] }
[08:25:55.380] Lazy evaluation: FALSE
[08:25:55.380] Asynchronous evaluation: TRUE
[08:25:55.380] Local evaluation: TRUE
[08:25:55.380] Environment: R_GlobalEnv
[08:25:55.380] Capture standard output: TRUE
[08:25:55.380] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.380] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:55.380] Packages: <none>
[08:25:55.380] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.380] Resolved: TRUE
[08:25:55.380] Value: <not collected>
[08:25:55.380] Conditions captured: <none>
[08:25:55.380] Early signaling: FALSE
[08:25:55.380] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.380] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.389] Chunk #1 of 2 ... DONE
[08:25:55.389] Chunk #2 of 2 ...
[08:25:55.389]  - Finding globals in 'X' for chunk #2 ...
[08:25:55.390] getGlobalsAndPackages() ...
[08:25:55.390] Searching for globals...
[08:25:55.390] 
[08:25:55.390] Searching for globals ... DONE
[08:25:55.391] - globals: [0] <none>
[08:25:55.391] getGlobalsAndPackages() ... DONE
[08:25:55.391]    + additional globals found: [n=0] 
[08:25:55.391]    + additional namespaces needed: [n=0] 
[08:25:55.391]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:55.391]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.391]  - seeds: [3] <seeds>
[08:25:55.392]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.392] getGlobalsAndPackages() ...
[08:25:55.392] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.392] Resolving globals: FALSE
[08:25:55.392] Tweak future expression to call with '...' arguments ...
[08:25:55.392] {
[08:25:55.392]     do.call(function(...) {
[08:25:55.392]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.392]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.392]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.392]             on.exit(options(oopts), add = TRUE)
[08:25:55.392]         }
[08:25:55.392]         {
[08:25:55.392]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.392]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.392]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.392]                   envir = globalenv(), inherits = FALSE)
[08:25:55.392]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.392]             })
[08:25:55.392]         }
[08:25:55.392]     }, args = future.call.arguments)
[08:25:55.392] }
[08:25:55.393] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.393] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.394] 
[08:25:55.394] getGlobalsAndPackages() ... DONE
[08:25:55.394] run() for ‘Future’ ...
[08:25:55.395] - state: ‘created’
[08:25:55.395] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.398] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.398] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.398]   - Field: ‘label’
[08:25:55.398]   - Field: ‘local’
[08:25:55.398]   - Field: ‘owner’
[08:25:55.399]   - Field: ‘envir’
[08:25:55.399]   - Field: ‘workers’
[08:25:55.399]   - Field: ‘packages’
[08:25:55.399]   - Field: ‘gc’
[08:25:55.399]   - Field: ‘job’
[08:25:55.400]   - Field: ‘conditions’
[08:25:55.400]   - Field: ‘expr’
[08:25:55.400]   - Field: ‘uuid’
[08:25:55.400]   - Field: ‘seed’
[08:25:55.400]   - Field: ‘version’
[08:25:55.400]   - Field: ‘result’
[08:25:55.400]   - Field: ‘asynchronous’
[08:25:55.401]   - Field: ‘calls’
[08:25:55.401]   - Field: ‘globals’
[08:25:55.401]   - Field: ‘stdout’
[08:25:55.401]   - Field: ‘earlySignal’
[08:25:55.401]   - Field: ‘lazy’
[08:25:55.401]   - Field: ‘state’
[08:25:55.401] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.401] - Launch lazy future ...
[08:25:55.402] Packages needed by the future expression (n = 0): <none>
[08:25:55.402] Packages needed by future strategies (n = 0): <none>
[08:25:55.403] {
[08:25:55.403]     {
[08:25:55.403]         {
[08:25:55.403]             ...future.startTime <- base::Sys.time()
[08:25:55.403]             {
[08:25:55.403]                 {
[08:25:55.403]                   {
[08:25:55.403]                     {
[08:25:55.403]                       base::local({
[08:25:55.403]                         has_future <- base::requireNamespace("future", 
[08:25:55.403]                           quietly = TRUE)
[08:25:55.403]                         if (has_future) {
[08:25:55.403]                           ns <- base::getNamespace("future")
[08:25:55.403]                           version <- ns[[".package"]][["version"]]
[08:25:55.403]                           if (is.null(version)) 
[08:25:55.403]                             version <- utils::packageVersion("future")
[08:25:55.403]                         }
[08:25:55.403]                         else {
[08:25:55.403]                           version <- NULL
[08:25:55.403]                         }
[08:25:55.403]                         if (!has_future || version < "1.8.0") {
[08:25:55.403]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.403]                             "", base::R.version$version.string), 
[08:25:55.403]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.403]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.403]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.403]                               "release", "version")], collapse = " "), 
[08:25:55.403]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.403]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.403]                             info)
[08:25:55.403]                           info <- base::paste(info, collapse = "; ")
[08:25:55.403]                           if (!has_future) {
[08:25:55.403]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.403]                               info)
[08:25:55.403]                           }
[08:25:55.403]                           else {
[08:25:55.403]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.403]                               info, version)
[08:25:55.403]                           }
[08:25:55.403]                           base::stop(msg)
[08:25:55.403]                         }
[08:25:55.403]                       })
[08:25:55.403]                     }
[08:25:55.403]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.403]                     base::options(mc.cores = 1L)
[08:25:55.403]                   }
[08:25:55.403]                   ...future.strategy.old <- future::plan("list")
[08:25:55.403]                   options(future.plan = NULL)
[08:25:55.403]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.403]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.403]                 }
[08:25:55.403]                 ...future.workdir <- getwd()
[08:25:55.403]             }
[08:25:55.403]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.403]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.403]         }
[08:25:55.403]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.403]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.403]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.403]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.403]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.403]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.403]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.403]             base::names(...future.oldOptions))
[08:25:55.403]     }
[08:25:55.403]     if (FALSE) {
[08:25:55.403]     }
[08:25:55.403]     else {
[08:25:55.403]         if (TRUE) {
[08:25:55.403]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.403]                 open = "w")
[08:25:55.403]         }
[08:25:55.403]         else {
[08:25:55.403]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.403]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.403]         }
[08:25:55.403]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.403]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.403]             base::sink(type = "output", split = FALSE)
[08:25:55.403]             base::close(...future.stdout)
[08:25:55.403]         }, add = TRUE)
[08:25:55.403]     }
[08:25:55.403]     ...future.frame <- base::sys.nframe()
[08:25:55.403]     ...future.conditions <- base::list()
[08:25:55.403]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.403]     if (FALSE) {
[08:25:55.403]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.403]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.403]     }
[08:25:55.403]     ...future.result <- base::tryCatch({
[08:25:55.403]         base::withCallingHandlers({
[08:25:55.403]             ...future.value <- base::withVisible(base::local({
[08:25:55.403]                 withCallingHandlers({
[08:25:55.403]                   {
[08:25:55.403]                     do.call(function(...) {
[08:25:55.403]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.403]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.403]                         ...future.globals.maxSize)) {
[08:25:55.403]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.403]                         on.exit(options(oopts), add = TRUE)
[08:25:55.403]                       }
[08:25:55.403]                       {
[08:25:55.403]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.403]                           FUN = function(jj) {
[08:25:55.403]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.403]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.403]                               envir = globalenv(), inherits = FALSE)
[08:25:55.403]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.403]                           })
[08:25:55.403]                       }
[08:25:55.403]                     }, args = future.call.arguments)
[08:25:55.403]                   }
[08:25:55.403]                 }, immediateCondition = function(cond) {
[08:25:55.403]                   save_rds <- function (object, pathname, ...) 
[08:25:55.403]                   {
[08:25:55.403]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.403]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.403]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.403]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.403]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.403]                         fi_tmp[["mtime"]])
[08:25:55.403]                     }
[08:25:55.403]                     tryCatch({
[08:25:55.403]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.403]                     }, error = function(ex) {
[08:25:55.403]                       msg <- conditionMessage(ex)
[08:25:55.403]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.403]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.403]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.403]                         fi_tmp[["mtime"]], msg)
[08:25:55.403]                       ex$message <- msg
[08:25:55.403]                       stop(ex)
[08:25:55.403]                     })
[08:25:55.403]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.403]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.403]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.403]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.403]                       fi <- file.info(pathname)
[08:25:55.403]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.403]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.403]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.403]                         fi[["size"]], fi[["mtime"]])
[08:25:55.403]                       stop(msg)
[08:25:55.403]                     }
[08:25:55.403]                     invisible(pathname)
[08:25:55.403]                   }
[08:25:55.403]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.403]                     rootPath = tempdir()) 
[08:25:55.403]                   {
[08:25:55.403]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.403]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.403]                       tmpdir = path, fileext = ".rds")
[08:25:55.403]                     save_rds(obj, file)
[08:25:55.403]                   }
[08:25:55.403]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.403]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.403]                   {
[08:25:55.403]                     inherits <- base::inherits
[08:25:55.403]                     invokeRestart <- base::invokeRestart
[08:25:55.403]                     is.null <- base::is.null
[08:25:55.403]                     muffled <- FALSE
[08:25:55.403]                     if (inherits(cond, "message")) {
[08:25:55.403]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.403]                       if (muffled) 
[08:25:55.403]                         invokeRestart("muffleMessage")
[08:25:55.403]                     }
[08:25:55.403]                     else if (inherits(cond, "warning")) {
[08:25:55.403]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.403]                       if (muffled) 
[08:25:55.403]                         invokeRestart("muffleWarning")
[08:25:55.403]                     }
[08:25:55.403]                     else if (inherits(cond, "condition")) {
[08:25:55.403]                       if (!is.null(pattern)) {
[08:25:55.403]                         computeRestarts <- base::computeRestarts
[08:25:55.403]                         grepl <- base::grepl
[08:25:55.403]                         restarts <- computeRestarts(cond)
[08:25:55.403]                         for (restart in restarts) {
[08:25:55.403]                           name <- restart$name
[08:25:55.403]                           if (is.null(name)) 
[08:25:55.403]                             next
[08:25:55.403]                           if (!grepl(pattern, name)) 
[08:25:55.403]                             next
[08:25:55.403]                           invokeRestart(restart)
[08:25:55.403]                           muffled <- TRUE
[08:25:55.403]                           break
[08:25:55.403]                         }
[08:25:55.403]                       }
[08:25:55.403]                     }
[08:25:55.403]                     invisible(muffled)
[08:25:55.403]                   }
[08:25:55.403]                   muffleCondition(cond)
[08:25:55.403]                 })
[08:25:55.403]             }))
[08:25:55.403]             future::FutureResult(value = ...future.value$value, 
[08:25:55.403]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.403]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.403]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.403]                     ...future.globalenv.names))
[08:25:55.403]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.403]         }, condition = base::local({
[08:25:55.403]             c <- base::c
[08:25:55.403]             inherits <- base::inherits
[08:25:55.403]             invokeRestart <- base::invokeRestart
[08:25:55.403]             length <- base::length
[08:25:55.403]             list <- base::list
[08:25:55.403]             seq.int <- base::seq.int
[08:25:55.403]             signalCondition <- base::signalCondition
[08:25:55.403]             sys.calls <- base::sys.calls
[08:25:55.403]             `[[` <- base::`[[`
[08:25:55.403]             `+` <- base::`+`
[08:25:55.403]             `<<-` <- base::`<<-`
[08:25:55.403]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.403]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.403]                   3L)]
[08:25:55.403]             }
[08:25:55.403]             function(cond) {
[08:25:55.403]                 is_error <- inherits(cond, "error")
[08:25:55.403]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.403]                   NULL)
[08:25:55.403]                 if (is_error) {
[08:25:55.403]                   sessionInformation <- function() {
[08:25:55.403]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.403]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.403]                       search = base::search(), system = base::Sys.info())
[08:25:55.403]                   }
[08:25:55.403]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.403]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.403]                     cond$call), session = sessionInformation(), 
[08:25:55.403]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.403]                   signalCondition(cond)
[08:25:55.403]                 }
[08:25:55.403]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.403]                 "immediateCondition"))) {
[08:25:55.403]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.403]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.403]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.403]                   if (TRUE && !signal) {
[08:25:55.403]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.403]                     {
[08:25:55.403]                       inherits <- base::inherits
[08:25:55.403]                       invokeRestart <- base::invokeRestart
[08:25:55.403]                       is.null <- base::is.null
[08:25:55.403]                       muffled <- FALSE
[08:25:55.403]                       if (inherits(cond, "message")) {
[08:25:55.403]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.403]                         if (muffled) 
[08:25:55.403]                           invokeRestart("muffleMessage")
[08:25:55.403]                       }
[08:25:55.403]                       else if (inherits(cond, "warning")) {
[08:25:55.403]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.403]                         if (muffled) 
[08:25:55.403]                           invokeRestart("muffleWarning")
[08:25:55.403]                       }
[08:25:55.403]                       else if (inherits(cond, "condition")) {
[08:25:55.403]                         if (!is.null(pattern)) {
[08:25:55.403]                           computeRestarts <- base::computeRestarts
[08:25:55.403]                           grepl <- base::grepl
[08:25:55.403]                           restarts <- computeRestarts(cond)
[08:25:55.403]                           for (restart in restarts) {
[08:25:55.403]                             name <- restart$name
[08:25:55.403]                             if (is.null(name)) 
[08:25:55.403]                               next
[08:25:55.403]                             if (!grepl(pattern, name)) 
[08:25:55.403]                               next
[08:25:55.403]                             invokeRestart(restart)
[08:25:55.403]                             muffled <- TRUE
[08:25:55.403]                             break
[08:25:55.403]                           }
[08:25:55.403]                         }
[08:25:55.403]                       }
[08:25:55.403]                       invisible(muffled)
[08:25:55.403]                     }
[08:25:55.403]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.403]                   }
[08:25:55.403]                 }
[08:25:55.403]                 else {
[08:25:55.403]                   if (TRUE) {
[08:25:55.403]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.403]                     {
[08:25:55.403]                       inherits <- base::inherits
[08:25:55.403]                       invokeRestart <- base::invokeRestart
[08:25:55.403]                       is.null <- base::is.null
[08:25:55.403]                       muffled <- FALSE
[08:25:55.403]                       if (inherits(cond, "message")) {
[08:25:55.403]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.403]                         if (muffled) 
[08:25:55.403]                           invokeRestart("muffleMessage")
[08:25:55.403]                       }
[08:25:55.403]                       else if (inherits(cond, "warning")) {
[08:25:55.403]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.403]                         if (muffled) 
[08:25:55.403]                           invokeRestart("muffleWarning")
[08:25:55.403]                       }
[08:25:55.403]                       else if (inherits(cond, "condition")) {
[08:25:55.403]                         if (!is.null(pattern)) {
[08:25:55.403]                           computeRestarts <- base::computeRestarts
[08:25:55.403]                           grepl <- base::grepl
[08:25:55.403]                           restarts <- computeRestarts(cond)
[08:25:55.403]                           for (restart in restarts) {
[08:25:55.403]                             name <- restart$name
[08:25:55.403]                             if (is.null(name)) 
[08:25:55.403]                               next
[08:25:55.403]                             if (!grepl(pattern, name)) 
[08:25:55.403]                               next
[08:25:55.403]                             invokeRestart(restart)
[08:25:55.403]                             muffled <- TRUE
[08:25:55.403]                             break
[08:25:55.403]                           }
[08:25:55.403]                         }
[08:25:55.403]                       }
[08:25:55.403]                       invisible(muffled)
[08:25:55.403]                     }
[08:25:55.403]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.403]                   }
[08:25:55.403]                 }
[08:25:55.403]             }
[08:25:55.403]         }))
[08:25:55.403]     }, error = function(ex) {
[08:25:55.403]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.403]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.403]                 ...future.rng), started = ...future.startTime, 
[08:25:55.403]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.403]             version = "1.8"), class = "FutureResult")
[08:25:55.403]     }, finally = {
[08:25:55.403]         if (!identical(...future.workdir, getwd())) 
[08:25:55.403]             setwd(...future.workdir)
[08:25:55.403]         {
[08:25:55.403]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.403]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.403]             }
[08:25:55.403]             base::options(...future.oldOptions)
[08:25:55.403]             if (.Platform$OS.type == "windows") {
[08:25:55.403]                 old_names <- names(...future.oldEnvVars)
[08:25:55.403]                 envs <- base::Sys.getenv()
[08:25:55.403]                 names <- names(envs)
[08:25:55.403]                 common <- intersect(names, old_names)
[08:25:55.403]                 added <- setdiff(names, old_names)
[08:25:55.403]                 removed <- setdiff(old_names, names)
[08:25:55.403]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.403]                   envs[common]]
[08:25:55.403]                 NAMES <- toupper(changed)
[08:25:55.403]                 args <- list()
[08:25:55.403]                 for (kk in seq_along(NAMES)) {
[08:25:55.403]                   name <- changed[[kk]]
[08:25:55.403]                   NAME <- NAMES[[kk]]
[08:25:55.403]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.403]                     next
[08:25:55.403]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.403]                 }
[08:25:55.403]                 NAMES <- toupper(added)
[08:25:55.403]                 for (kk in seq_along(NAMES)) {
[08:25:55.403]                   name <- added[[kk]]
[08:25:55.403]                   NAME <- NAMES[[kk]]
[08:25:55.403]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.403]                     next
[08:25:55.403]                   args[[name]] <- ""
[08:25:55.403]                 }
[08:25:55.403]                 NAMES <- toupper(removed)
[08:25:55.403]                 for (kk in seq_along(NAMES)) {
[08:25:55.403]                   name <- removed[[kk]]
[08:25:55.403]                   NAME <- NAMES[[kk]]
[08:25:55.403]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.403]                     next
[08:25:55.403]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.403]                 }
[08:25:55.403]                 if (length(args) > 0) 
[08:25:55.403]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.403]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.403]             }
[08:25:55.403]             else {
[08:25:55.403]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.403]             }
[08:25:55.403]             {
[08:25:55.403]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.403]                   0L) {
[08:25:55.403]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.403]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.403]                   base::options(opts)
[08:25:55.403]                 }
[08:25:55.403]                 {
[08:25:55.403]                   {
[08:25:55.403]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.403]                     NULL
[08:25:55.403]                   }
[08:25:55.403]                   options(future.plan = NULL)
[08:25:55.403]                   if (is.na(NA_character_)) 
[08:25:55.403]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.403]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.403]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.403]                     .init = FALSE)
[08:25:55.403]                 }
[08:25:55.403]             }
[08:25:55.403]         }
[08:25:55.403]     })
[08:25:55.403]     if (TRUE) {
[08:25:55.403]         base::sink(type = "output", split = FALSE)
[08:25:55.403]         if (TRUE) {
[08:25:55.403]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.403]         }
[08:25:55.403]         else {
[08:25:55.403]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.403]         }
[08:25:55.403]         base::close(...future.stdout)
[08:25:55.403]         ...future.stdout <- NULL
[08:25:55.403]     }
[08:25:55.403]     ...future.result$conditions <- ...future.conditions
[08:25:55.403]     ...future.result$finished <- base::Sys.time()
[08:25:55.403]     ...future.result
[08:25:55.403] }
[08:25:55.406] assign_globals() ...
[08:25:55.406] List of 5
[08:25:55.406]  $ ...future.FUN            :function (...)  
[08:25:55.406]  $ future.call.arguments    : list()
[08:25:55.406]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.406]  $ ...future.elements_ii    :List of 3
[08:25:55.406]   ..$ : int 0
[08:25:55.406]   ..$ : int 0
[08:25:55.406]   ..$ : int 0
[08:25:55.406]  $ ...future.seeds_ii       :List of 3
[08:25:55.406]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[08:25:55.406]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[08:25:55.406]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[08:25:55.406]  $ ...future.globals.maxSize: NULL
[08:25:55.406]  - attr(*, "where")=List of 5
[08:25:55.406]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.406]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.406]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.406]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.406]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.406]  - attr(*, "resolved")= logi FALSE
[08:25:55.406]  - attr(*, "total_size")= num 7184
[08:25:55.406]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.406]  - attr(*, "already-done")= logi TRUE
[08:25:55.420] - reassign environment for ‘...future.FUN’
[08:25:55.420] - copied ‘...future.FUN’ to environment
[08:25:55.420] - copied ‘future.call.arguments’ to environment
[08:25:55.420] - copied ‘...future.elements_ii’ to environment
[08:25:55.420] - copied ‘...future.seeds_ii’ to environment
[08:25:55.421] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.421] assign_globals() ... done
[08:25:55.421] requestCore(): workers = 2
[08:25:55.423] MulticoreFuture started
[08:25:55.424] - Launch lazy future ... done
[08:25:55.424] run() for ‘MulticoreFuture’ ... done
[08:25:55.424] Created future:
[08:25:55.425] plan(): Setting new future strategy stack:
[08:25:55.425] List of future strategies:
[08:25:55.425] 1. sequential:
[08:25:55.425]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.425]    - tweaked: FALSE
[08:25:55.425]    - call: NULL
[08:25:55.426] plan(): nbrOfWorkers() = 1
[08:25:55.429] plan(): Setting new future strategy stack:
[08:25:55.429] List of future strategies:
[08:25:55.429] 1. multicore:
[08:25:55.429]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.429]    - tweaked: FALSE
[08:25:55.429]    - call: plan(strategy)
[08:25:55.432] plan(): nbrOfWorkers() = 2
[08:25:55.425] MulticoreFuture:
[08:25:55.425] Label: ‘future_replicate-2’
[08:25:55.425] Expression:
[08:25:55.425] {
[08:25:55.425]     do.call(function(...) {
[08:25:55.425]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.425]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.425]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.425]             on.exit(options(oopts), add = TRUE)
[08:25:55.425]         }
[08:25:55.425]         {
[08:25:55.425]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.425]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.425]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.425]                   envir = globalenv(), inherits = FALSE)
[08:25:55.425]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.425]             })
[08:25:55.425]         }
[08:25:55.425]     }, args = future.call.arguments)
[08:25:55.425] }
[08:25:55.425] Lazy evaluation: FALSE
[08:25:55.425] Asynchronous evaluation: TRUE
[08:25:55.425] Local evaluation: TRUE
[08:25:55.425] Environment: R_GlobalEnv
[08:25:55.425] Capture standard output: TRUE
[08:25:55.425] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.425] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:55.425] Packages: <none>
[08:25:55.425] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.425] Resolved: TRUE
[08:25:55.425] Value: <not collected>
[08:25:55.425] Conditions captured: <none>
[08:25:55.425] Early signaling: FALSE
[08:25:55.425] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.425] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.434] Chunk #2 of 2 ... DONE
[08:25:55.434] Launching 2 futures (chunks) ... DONE
[08:25:55.434] Resolving 2 futures (chunks) ...
[08:25:55.434] resolve() on list ...
[08:25:55.434]  recursive: 0
[08:25:55.435]  length: 2
[08:25:55.435] 
[08:25:55.435] Future #1
[08:25:55.435] result() for MulticoreFuture ...
[08:25:55.436] result() for MulticoreFuture ...
[08:25:55.437] result() for MulticoreFuture ... done
[08:25:55.437] result() for MulticoreFuture ... done
[08:25:55.437] result() for MulticoreFuture ...
[08:25:55.437] result() for MulticoreFuture ... done
[08:25:55.437] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:55.437] - nx: 2
[08:25:55.438] - relay: TRUE
[08:25:55.438] - stdout: TRUE
[08:25:55.438] - signal: TRUE
[08:25:55.438] - resignal: FALSE
[08:25:55.438] - force: TRUE
[08:25:55.438] - relayed: [n=2] FALSE, FALSE
[08:25:55.438] - queued futures: [n=2] FALSE, FALSE
[08:25:55.439]  - until=1
[08:25:55.439]  - relaying element #1
[08:25:55.439] result() for MulticoreFuture ...
[08:25:55.439] result() for MulticoreFuture ... done
[08:25:55.439] result() for MulticoreFuture ...
[08:25:55.439] result() for MulticoreFuture ... done
[08:25:55.440] result() for MulticoreFuture ...
[08:25:55.440] result() for MulticoreFuture ... done
[08:25:55.440] result() for MulticoreFuture ...
[08:25:55.440] result() for MulticoreFuture ... done
[08:25:55.440] - relayed: [n=2] TRUE, FALSE
[08:25:55.440] - queued futures: [n=2] TRUE, FALSE
[08:25:55.441] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:55.441]  length: 1 (resolved future 1)
[08:25:55.441] Future #2
[08:25:55.441] result() for MulticoreFuture ...
[08:25:55.442] result() for MulticoreFuture ...
[08:25:55.442] result() for MulticoreFuture ... done
[08:25:55.442] result() for MulticoreFuture ... done
[08:25:55.442] result() for MulticoreFuture ...
[08:25:55.443] result() for MulticoreFuture ... done
[08:25:55.443] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:55.443] - nx: 2
[08:25:55.443] - relay: TRUE
[08:25:55.443] - stdout: TRUE
[08:25:55.443] - signal: TRUE
[08:25:55.443] - resignal: FALSE
[08:25:55.443] - force: TRUE
[08:25:55.444] - relayed: [n=2] TRUE, FALSE
[08:25:55.444] - queued futures: [n=2] TRUE, FALSE
[08:25:55.444]  - until=2
[08:25:55.444]  - relaying element #2
[08:25:55.444] result() for MulticoreFuture ...
[08:25:55.444] result() for MulticoreFuture ... done
[08:25:55.444] result() for MulticoreFuture ...
[08:25:55.444] result() for MulticoreFuture ... done
[08:25:55.444] result() for MulticoreFuture ...
[08:25:55.445] result() for MulticoreFuture ... done
[08:25:55.445] result() for MulticoreFuture ...
[08:25:55.445] result() for MulticoreFuture ... done
[08:25:55.445] - relayed: [n=2] TRUE, TRUE
[08:25:55.445] - queued futures: [n=2] TRUE, TRUE
[08:25:55.445] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:55.445]  length: 0 (resolved future 2)
[08:25:55.445] Relaying remaining futures
[08:25:55.445] signalConditionsASAP(NULL, pos=0) ...
[08:25:55.446] - nx: 2
[08:25:55.446] - relay: TRUE
[08:25:55.446] - stdout: TRUE
[08:25:55.446] - signal: TRUE
[08:25:55.446] - resignal: FALSE
[08:25:55.446] - force: TRUE
[08:25:55.446] - relayed: [n=2] TRUE, TRUE
[08:25:55.446] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:55.446] - relayed: [n=2] TRUE, TRUE
[08:25:55.447] - queued futures: [n=2] TRUE, TRUE
[08:25:55.447] signalConditionsASAP(NULL, pos=0) ... done
[08:25:55.447] resolve() on list ... DONE
[08:25:55.447] result() for MulticoreFuture ...
[08:25:55.447] result() for MulticoreFuture ... done
[08:25:55.447] result() for MulticoreFuture ...
[08:25:55.447] result() for MulticoreFuture ... done
[08:25:55.447] result() for MulticoreFuture ...
[08:25:55.447] result() for MulticoreFuture ... done
[08:25:55.448] result() for MulticoreFuture ...
[08:25:55.448] result() for MulticoreFuture ... done
[08:25:55.448]  - Number of value chunks collected: 2
[08:25:55.448] Resolving 2 futures (chunks) ... DONE
[08:25:55.448] Reducing values from 2 chunks ...
[08:25:55.448]  - Number of values collected after concatenation: 5
[08:25:55.448]  - Number of values expected: 5
[08:25:55.448] Reducing values from 2 chunks ... DONE
[08:25:55.449] future_lapply() ... DONE
- example(replicate) ...
[08:25:55.449] future_lapply() ...
[08:25:55.450] Generating random seeds ...
[08:25:55.450] Generating random seed streams for 5 elements ...
[08:25:55.450] Generating random seed streams for 5 elements ... DONE
[08:25:55.450] Generating random seeds ... DONE
[08:25:55.450] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:55.453] Number of chunks: 2
[08:25:55.453] getGlobalsAndPackagesXApply() ...
[08:25:55.453]  - future.globals: TRUE
[08:25:55.453] getGlobalsAndPackages() ...
[08:25:55.454] Searching for globals...
[08:25:55.456] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[08:25:55.456] Searching for globals ... DONE
[08:25:55.456] Resolving globals: FALSE
[08:25:55.457] The total size of the 3 globals is 617 bytes (617 bytes)
[08:25:55.457] The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[08:25:55.457] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[08:25:55.457] 
[08:25:55.457] getGlobalsAndPackages() ... DONE
[08:25:55.457]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[08:25:55.458]  - needed namespaces: [n=0] 
[08:25:55.458] Finding globals ... DONE
[08:25:55.458]  - use_args: TRUE
[08:25:55.458]  - Getting '...' globals ...
[08:25:55.458] resolve() on list ...
[08:25:55.458]  recursive: 0
[08:25:55.459]  length: 1
[08:25:55.459]  elements: ‘...’
[08:25:55.459]  length: 0 (resolved future 1)
[08:25:55.459] resolve() on list ... DONE
[08:25:55.459]    - '...' content: [n=0] 
[08:25:55.459] List of 1
[08:25:55.459]  $ ...: list()
[08:25:55.459]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.459]  - attr(*, "where")=List of 1
[08:25:55.459]   ..$ ...:<environment: 0x55f777ba3278> 
[08:25:55.459]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.459]  - attr(*, "resolved")= logi TRUE
[08:25:55.459]  - attr(*, "total_size")= num NA
[08:25:55.465]  - Getting '...' globals ... DONE
[08:25:55.465] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[08:25:55.465] List of 4
[08:25:55.465]  $ ...future.FUN:function (...)  
[08:25:55.465]  $ foo          :function (x = 1, y = 2)  
[08:25:55.465]  $ x            : num 3
[08:25:55.465]  $ ...          : list()
[08:25:55.465]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.465]  - attr(*, "where")=List of 4
[08:25:55.465]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:55.465]   ..$ foo          :<environment: R_EmptyEnv> 
[08:25:55.465]   ..$ x            :<environment: R_EmptyEnv> 
[08:25:55.465]   ..$ ...          :<environment: 0x55f777ba3278> 
[08:25:55.465]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.465]  - attr(*, "resolved")= logi FALSE
[08:25:55.465]  - attr(*, "total_size")= num 7967
[08:25:55.469] Packages to be attached in all futures: [n=0] 
[08:25:55.469] getGlobalsAndPackagesXApply() ... DONE
[08:25:55.469] Number of futures (= number of chunks): 2
[08:25:55.469] Launching 2 futures (chunks) ...
[08:25:55.469] Chunk #1 of 2 ...
[08:25:55.469]  - Finding globals in 'X' for chunk #1 ...
[08:25:55.470] getGlobalsAndPackages() ...
[08:25:55.470] Searching for globals...
[08:25:55.470] 
[08:25:55.470] Searching for globals ... DONE
[08:25:55.470] - globals: [0] <none>
[08:25:55.470] getGlobalsAndPackages() ... DONE
[08:25:55.470]    + additional globals found: [n=0] 
[08:25:55.470]    + additional namespaces needed: [n=0] 
[08:25:55.470]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:55.470]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.471]  - seeds: [2] <seeds>
[08:25:55.471]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.471] getGlobalsAndPackages() ...
[08:25:55.471] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.471] Resolving globals: FALSE
[08:25:55.471] Tweak future expression to call with '...' arguments ...
[08:25:55.471] {
[08:25:55.471]     do.call(function(...) {
[08:25:55.471]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.471]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.471]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.471]             on.exit(options(oopts), add = TRUE)
[08:25:55.471]         }
[08:25:55.471]         {
[08:25:55.471]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.471]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.471]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.471]                   envir = globalenv(), inherits = FALSE)
[08:25:55.471]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.471]             })
[08:25:55.471]         }
[08:25:55.471]     }, args = future.call.arguments)
[08:25:55.471] }
[08:25:55.472] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.472] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.472] 
[08:25:55.472] getGlobalsAndPackages() ... DONE
[08:25:55.472] run() for ‘Future’ ...
[08:25:55.473] - state: ‘created’
[08:25:55.473] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.474] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.475] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.475]   - Field: ‘label’
[08:25:55.475]   - Field: ‘local’
[08:25:55.475]   - Field: ‘owner’
[08:25:55.475]   - Field: ‘envir’
[08:25:55.475]   - Field: ‘workers’
[08:25:55.475]   - Field: ‘packages’
[08:25:55.475]   - Field: ‘gc’
[08:25:55.475]   - Field: ‘job’
[08:25:55.475]   - Field: ‘conditions’
[08:25:55.476]   - Field: ‘expr’
[08:25:55.476]   - Field: ‘uuid’
[08:25:55.476]   - Field: ‘seed’
[08:25:55.476]   - Field: ‘version’
[08:25:55.476]   - Field: ‘result’
[08:25:55.476]   - Field: ‘asynchronous’
[08:25:55.476]   - Field: ‘calls’
[08:25:55.476]   - Field: ‘globals’
[08:25:55.476]   - Field: ‘stdout’
[08:25:55.476]   - Field: ‘earlySignal’
[08:25:55.476]   - Field: ‘lazy’
[08:25:55.477]   - Field: ‘state’
[08:25:55.477] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.477] - Launch lazy future ...
[08:25:55.477] Packages needed by the future expression (n = 0): <none>
[08:25:55.477] Packages needed by future strategies (n = 0): <none>
[08:25:55.478] {
[08:25:55.478]     {
[08:25:55.478]         {
[08:25:55.478]             ...future.startTime <- base::Sys.time()
[08:25:55.478]             {
[08:25:55.478]                 {
[08:25:55.478]                   {
[08:25:55.478]                     {
[08:25:55.478]                       base::local({
[08:25:55.478]                         has_future <- base::requireNamespace("future", 
[08:25:55.478]                           quietly = TRUE)
[08:25:55.478]                         if (has_future) {
[08:25:55.478]                           ns <- base::getNamespace("future")
[08:25:55.478]                           version <- ns[[".package"]][["version"]]
[08:25:55.478]                           if (is.null(version)) 
[08:25:55.478]                             version <- utils::packageVersion("future")
[08:25:55.478]                         }
[08:25:55.478]                         else {
[08:25:55.478]                           version <- NULL
[08:25:55.478]                         }
[08:25:55.478]                         if (!has_future || version < "1.8.0") {
[08:25:55.478]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.478]                             "", base::R.version$version.string), 
[08:25:55.478]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.478]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.478]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.478]                               "release", "version")], collapse = " "), 
[08:25:55.478]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.478]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.478]                             info)
[08:25:55.478]                           info <- base::paste(info, collapse = "; ")
[08:25:55.478]                           if (!has_future) {
[08:25:55.478]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.478]                               info)
[08:25:55.478]                           }
[08:25:55.478]                           else {
[08:25:55.478]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.478]                               info, version)
[08:25:55.478]                           }
[08:25:55.478]                           base::stop(msg)
[08:25:55.478]                         }
[08:25:55.478]                       })
[08:25:55.478]                     }
[08:25:55.478]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.478]                     base::options(mc.cores = 1L)
[08:25:55.478]                   }
[08:25:55.478]                   ...future.strategy.old <- future::plan("list")
[08:25:55.478]                   options(future.plan = NULL)
[08:25:55.478]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.478]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.478]                 }
[08:25:55.478]                 ...future.workdir <- getwd()
[08:25:55.478]             }
[08:25:55.478]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.478]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.478]         }
[08:25:55.478]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.478]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.478]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.478]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.478]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.478]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.478]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.478]             base::names(...future.oldOptions))
[08:25:55.478]     }
[08:25:55.478]     if (FALSE) {
[08:25:55.478]     }
[08:25:55.478]     else {
[08:25:55.478]         if (TRUE) {
[08:25:55.478]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.478]                 open = "w")
[08:25:55.478]         }
[08:25:55.478]         else {
[08:25:55.478]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.478]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.478]         }
[08:25:55.478]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.478]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.478]             base::sink(type = "output", split = FALSE)
[08:25:55.478]             base::close(...future.stdout)
[08:25:55.478]         }, add = TRUE)
[08:25:55.478]     }
[08:25:55.478]     ...future.frame <- base::sys.nframe()
[08:25:55.478]     ...future.conditions <- base::list()
[08:25:55.478]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.478]     if (FALSE) {
[08:25:55.478]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.478]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.478]     }
[08:25:55.478]     ...future.result <- base::tryCatch({
[08:25:55.478]         base::withCallingHandlers({
[08:25:55.478]             ...future.value <- base::withVisible(base::local({
[08:25:55.478]                 withCallingHandlers({
[08:25:55.478]                   {
[08:25:55.478]                     do.call(function(...) {
[08:25:55.478]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.478]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.478]                         ...future.globals.maxSize)) {
[08:25:55.478]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.478]                         on.exit(options(oopts), add = TRUE)
[08:25:55.478]                       }
[08:25:55.478]                       {
[08:25:55.478]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.478]                           FUN = function(jj) {
[08:25:55.478]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.478]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.478]                               envir = globalenv(), inherits = FALSE)
[08:25:55.478]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.478]                           })
[08:25:55.478]                       }
[08:25:55.478]                     }, args = future.call.arguments)
[08:25:55.478]                   }
[08:25:55.478]                 }, immediateCondition = function(cond) {
[08:25:55.478]                   save_rds <- function (object, pathname, ...) 
[08:25:55.478]                   {
[08:25:55.478]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.478]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.478]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.478]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.478]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.478]                         fi_tmp[["mtime"]])
[08:25:55.478]                     }
[08:25:55.478]                     tryCatch({
[08:25:55.478]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.478]                     }, error = function(ex) {
[08:25:55.478]                       msg <- conditionMessage(ex)
[08:25:55.478]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.478]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.478]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.478]                         fi_tmp[["mtime"]], msg)
[08:25:55.478]                       ex$message <- msg
[08:25:55.478]                       stop(ex)
[08:25:55.478]                     })
[08:25:55.478]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.478]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.478]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.478]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.478]                       fi <- file.info(pathname)
[08:25:55.478]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.478]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.478]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.478]                         fi[["size"]], fi[["mtime"]])
[08:25:55.478]                       stop(msg)
[08:25:55.478]                     }
[08:25:55.478]                     invisible(pathname)
[08:25:55.478]                   }
[08:25:55.478]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.478]                     rootPath = tempdir()) 
[08:25:55.478]                   {
[08:25:55.478]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.478]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.478]                       tmpdir = path, fileext = ".rds")
[08:25:55.478]                     save_rds(obj, file)
[08:25:55.478]                   }
[08:25:55.478]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.478]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.478]                   {
[08:25:55.478]                     inherits <- base::inherits
[08:25:55.478]                     invokeRestart <- base::invokeRestart
[08:25:55.478]                     is.null <- base::is.null
[08:25:55.478]                     muffled <- FALSE
[08:25:55.478]                     if (inherits(cond, "message")) {
[08:25:55.478]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.478]                       if (muffled) 
[08:25:55.478]                         invokeRestart("muffleMessage")
[08:25:55.478]                     }
[08:25:55.478]                     else if (inherits(cond, "warning")) {
[08:25:55.478]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.478]                       if (muffled) 
[08:25:55.478]                         invokeRestart("muffleWarning")
[08:25:55.478]                     }
[08:25:55.478]                     else if (inherits(cond, "condition")) {
[08:25:55.478]                       if (!is.null(pattern)) {
[08:25:55.478]                         computeRestarts <- base::computeRestarts
[08:25:55.478]                         grepl <- base::grepl
[08:25:55.478]                         restarts <- computeRestarts(cond)
[08:25:55.478]                         for (restart in restarts) {
[08:25:55.478]                           name <- restart$name
[08:25:55.478]                           if (is.null(name)) 
[08:25:55.478]                             next
[08:25:55.478]                           if (!grepl(pattern, name)) 
[08:25:55.478]                             next
[08:25:55.478]                           invokeRestart(restart)
[08:25:55.478]                           muffled <- TRUE
[08:25:55.478]                           break
[08:25:55.478]                         }
[08:25:55.478]                       }
[08:25:55.478]                     }
[08:25:55.478]                     invisible(muffled)
[08:25:55.478]                   }
[08:25:55.478]                   muffleCondition(cond)
[08:25:55.478]                 })
[08:25:55.478]             }))
[08:25:55.478]             future::FutureResult(value = ...future.value$value, 
[08:25:55.478]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.478]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.478]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.478]                     ...future.globalenv.names))
[08:25:55.478]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.478]         }, condition = base::local({
[08:25:55.478]             c <- base::c
[08:25:55.478]             inherits <- base::inherits
[08:25:55.478]             invokeRestart <- base::invokeRestart
[08:25:55.478]             length <- base::length
[08:25:55.478]             list <- base::list
[08:25:55.478]             seq.int <- base::seq.int
[08:25:55.478]             signalCondition <- base::signalCondition
[08:25:55.478]             sys.calls <- base::sys.calls
[08:25:55.478]             `[[` <- base::`[[`
[08:25:55.478]             `+` <- base::`+`
[08:25:55.478]             `<<-` <- base::`<<-`
[08:25:55.478]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.478]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.478]                   3L)]
[08:25:55.478]             }
[08:25:55.478]             function(cond) {
[08:25:55.478]                 is_error <- inherits(cond, "error")
[08:25:55.478]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.478]                   NULL)
[08:25:55.478]                 if (is_error) {
[08:25:55.478]                   sessionInformation <- function() {
[08:25:55.478]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.478]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.478]                       search = base::search(), system = base::Sys.info())
[08:25:55.478]                   }
[08:25:55.478]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.478]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.478]                     cond$call), session = sessionInformation(), 
[08:25:55.478]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.478]                   signalCondition(cond)
[08:25:55.478]                 }
[08:25:55.478]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.478]                 "immediateCondition"))) {
[08:25:55.478]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.478]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.478]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.478]                   if (TRUE && !signal) {
[08:25:55.478]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.478]                     {
[08:25:55.478]                       inherits <- base::inherits
[08:25:55.478]                       invokeRestart <- base::invokeRestart
[08:25:55.478]                       is.null <- base::is.null
[08:25:55.478]                       muffled <- FALSE
[08:25:55.478]                       if (inherits(cond, "message")) {
[08:25:55.478]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.478]                         if (muffled) 
[08:25:55.478]                           invokeRestart("muffleMessage")
[08:25:55.478]                       }
[08:25:55.478]                       else if (inherits(cond, "warning")) {
[08:25:55.478]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.478]                         if (muffled) 
[08:25:55.478]                           invokeRestart("muffleWarning")
[08:25:55.478]                       }
[08:25:55.478]                       else if (inherits(cond, "condition")) {
[08:25:55.478]                         if (!is.null(pattern)) {
[08:25:55.478]                           computeRestarts <- base::computeRestarts
[08:25:55.478]                           grepl <- base::grepl
[08:25:55.478]                           restarts <- computeRestarts(cond)
[08:25:55.478]                           for (restart in restarts) {
[08:25:55.478]                             name <- restart$name
[08:25:55.478]                             if (is.null(name)) 
[08:25:55.478]                               next
[08:25:55.478]                             if (!grepl(pattern, name)) 
[08:25:55.478]                               next
[08:25:55.478]                             invokeRestart(restart)
[08:25:55.478]                             muffled <- TRUE
[08:25:55.478]                             break
[08:25:55.478]                           }
[08:25:55.478]                         }
[08:25:55.478]                       }
[08:25:55.478]                       invisible(muffled)
[08:25:55.478]                     }
[08:25:55.478]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.478]                   }
[08:25:55.478]                 }
[08:25:55.478]                 else {
[08:25:55.478]                   if (TRUE) {
[08:25:55.478]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.478]                     {
[08:25:55.478]                       inherits <- base::inherits
[08:25:55.478]                       invokeRestart <- base::invokeRestart
[08:25:55.478]                       is.null <- base::is.null
[08:25:55.478]                       muffled <- FALSE
[08:25:55.478]                       if (inherits(cond, "message")) {
[08:25:55.478]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.478]                         if (muffled) 
[08:25:55.478]                           invokeRestart("muffleMessage")
[08:25:55.478]                       }
[08:25:55.478]                       else if (inherits(cond, "warning")) {
[08:25:55.478]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.478]                         if (muffled) 
[08:25:55.478]                           invokeRestart("muffleWarning")
[08:25:55.478]                       }
[08:25:55.478]                       else if (inherits(cond, "condition")) {
[08:25:55.478]                         if (!is.null(pattern)) {
[08:25:55.478]                           computeRestarts <- base::computeRestarts
[08:25:55.478]                           grepl <- base::grepl
[08:25:55.478]                           restarts <- computeRestarts(cond)
[08:25:55.478]                           for (restart in restarts) {
[08:25:55.478]                             name <- restart$name
[08:25:55.478]                             if (is.null(name)) 
[08:25:55.478]                               next
[08:25:55.478]                             if (!grepl(pattern, name)) 
[08:25:55.478]                               next
[08:25:55.478]                             invokeRestart(restart)
[08:25:55.478]                             muffled <- TRUE
[08:25:55.478]                             break
[08:25:55.478]                           }
[08:25:55.478]                         }
[08:25:55.478]                       }
[08:25:55.478]                       invisible(muffled)
[08:25:55.478]                     }
[08:25:55.478]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.478]                   }
[08:25:55.478]                 }
[08:25:55.478]             }
[08:25:55.478]         }))
[08:25:55.478]     }, error = function(ex) {
[08:25:55.478]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.478]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.478]                 ...future.rng), started = ...future.startTime, 
[08:25:55.478]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.478]             version = "1.8"), class = "FutureResult")
[08:25:55.478]     }, finally = {
[08:25:55.478]         if (!identical(...future.workdir, getwd())) 
[08:25:55.478]             setwd(...future.workdir)
[08:25:55.478]         {
[08:25:55.478]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.478]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.478]             }
[08:25:55.478]             base::options(...future.oldOptions)
[08:25:55.478]             if (.Platform$OS.type == "windows") {
[08:25:55.478]                 old_names <- names(...future.oldEnvVars)
[08:25:55.478]                 envs <- base::Sys.getenv()
[08:25:55.478]                 names <- names(envs)
[08:25:55.478]                 common <- intersect(names, old_names)
[08:25:55.478]                 added <- setdiff(names, old_names)
[08:25:55.478]                 removed <- setdiff(old_names, names)
[08:25:55.478]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.478]                   envs[common]]
[08:25:55.478]                 NAMES <- toupper(changed)
[08:25:55.478]                 args <- list()
[08:25:55.478]                 for (kk in seq_along(NAMES)) {
[08:25:55.478]                   name <- changed[[kk]]
[08:25:55.478]                   NAME <- NAMES[[kk]]
[08:25:55.478]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.478]                     next
[08:25:55.478]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.478]                 }
[08:25:55.478]                 NAMES <- toupper(added)
[08:25:55.478]                 for (kk in seq_along(NAMES)) {
[08:25:55.478]                   name <- added[[kk]]
[08:25:55.478]                   NAME <- NAMES[[kk]]
[08:25:55.478]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.478]                     next
[08:25:55.478]                   args[[name]] <- ""
[08:25:55.478]                 }
[08:25:55.478]                 NAMES <- toupper(removed)
[08:25:55.478]                 for (kk in seq_along(NAMES)) {
[08:25:55.478]                   name <- removed[[kk]]
[08:25:55.478]                   NAME <- NAMES[[kk]]
[08:25:55.478]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.478]                     next
[08:25:55.478]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.478]                 }
[08:25:55.478]                 if (length(args) > 0) 
[08:25:55.478]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.478]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.478]             }
[08:25:55.478]             else {
[08:25:55.478]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.478]             }
[08:25:55.478]             {
[08:25:55.478]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.478]                   0L) {
[08:25:55.478]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.478]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.478]                   base::options(opts)
[08:25:55.478]                 }
[08:25:55.478]                 {
[08:25:55.478]                   {
[08:25:55.478]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.478]                     NULL
[08:25:55.478]                   }
[08:25:55.478]                   options(future.plan = NULL)
[08:25:55.478]                   if (is.na(NA_character_)) 
[08:25:55.478]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.478]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.478]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.478]                     .init = FALSE)
[08:25:55.478]                 }
[08:25:55.478]             }
[08:25:55.478]         }
[08:25:55.478]     })
[08:25:55.478]     if (TRUE) {
[08:25:55.478]         base::sink(type = "output", split = FALSE)
[08:25:55.478]         if (TRUE) {
[08:25:55.478]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.478]         }
[08:25:55.478]         else {
[08:25:55.478]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.478]         }
[08:25:55.478]         base::close(...future.stdout)
[08:25:55.478]         ...future.stdout <- NULL
[08:25:55.478]     }
[08:25:55.478]     ...future.result$conditions <- ...future.conditions
[08:25:55.478]     ...future.result$finished <- base::Sys.time()
[08:25:55.478]     ...future.result
[08:25:55.478] }
[08:25:55.480] assign_globals() ...
[08:25:55.480] List of 7
[08:25:55.480]  $ ...future.FUN            :function (...)  
[08:25:55.480]  $ foo                      :function (x = 1, y = 2)  
[08:25:55.480]  $ x                        : num 3
[08:25:55.480]  $ future.call.arguments    : list()
[08:25:55.480]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.480]  $ ...future.elements_ii    :List of 2
[08:25:55.480]   ..$ : int 0
[08:25:55.480]   ..$ : int 0
[08:25:55.480]  $ ...future.seeds_ii       :List of 2
[08:25:55.480]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[08:25:55.480]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[08:25:55.480]  $ ...future.globals.maxSize: NULL
[08:25:55.480]  - attr(*, "where")=List of 7
[08:25:55.480]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.480]   ..$ foo                      :<environment: R_EmptyEnv> 
[08:25:55.480]   ..$ x                        :<environment: R_EmptyEnv> 
[08:25:55.480]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.480]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.480]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.480]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.480]  - attr(*, "resolved")= logi FALSE
[08:25:55.480]  - attr(*, "total_size")= num 7967
[08:25:55.480]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.480]  - attr(*, "already-done")= logi TRUE
[08:25:55.487] - reassign environment for ‘...future.FUN’
[08:25:55.487] - copied ‘...future.FUN’ to environment
[08:25:55.487] - reassign environment for ‘foo’
[08:25:55.487] - copied ‘foo’ to environment
[08:25:55.488] - copied ‘x’ to environment
[08:25:55.488] - copied ‘future.call.arguments’ to environment
[08:25:55.488] - copied ‘...future.elements_ii’ to environment
[08:25:55.490] - copied ‘...future.seeds_ii’ to environment
[08:25:55.490] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.490] assign_globals() ... done
[08:25:55.490] requestCore(): workers = 2
[08:25:55.493] MulticoreFuture started
[08:25:55.494] - Launch lazy future ... done
[08:25:55.494] run() for ‘MulticoreFuture’ ... done
[08:25:55.494] plan(): Setting new future strategy stack:
[08:25:55.495] Created future:
[08:25:55.495] List of future strategies:
[08:25:55.495] 1. sequential:
[08:25:55.495]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.495]    - tweaked: FALSE
[08:25:55.495]    - call: NULL
[08:25:55.497] plan(): nbrOfWorkers() = 1
[08:25:55.500] plan(): Setting new future strategy stack:
[08:25:55.500] List of future strategies:
[08:25:55.500] 1. multicore:
[08:25:55.500]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.500]    - tweaked: FALSE
[08:25:55.500]    - call: plan(strategy)
[08:25:55.503] plan(): nbrOfWorkers() = 2
[08:25:55.495] MulticoreFuture:
[08:25:55.495] Label: ‘future_replicate-1’
[08:25:55.495] Expression:
[08:25:55.495] {
[08:25:55.495]     do.call(function(...) {
[08:25:55.495]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.495]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.495]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.495]             on.exit(options(oopts), add = TRUE)
[08:25:55.495]         }
[08:25:55.495]         {
[08:25:55.495]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.495]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.495]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.495]                   envir = globalenv(), inherits = FALSE)
[08:25:55.495]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.495]             })
[08:25:55.495]         }
[08:25:55.495]     }, args = future.call.arguments)
[08:25:55.495] }
[08:25:55.495] Lazy evaluation: FALSE
[08:25:55.495] Asynchronous evaluation: TRUE
[08:25:55.495] Local evaluation: TRUE
[08:25:55.495] Environment: 0x55f777b9ecc8
[08:25:55.495] Capture standard output: TRUE
[08:25:55.495] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.495] Globals: 7 objects totaling 899 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, ...)
[08:25:55.495] Packages: <none>
[08:25:55.495] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.495] Resolved: TRUE
[08:25:55.495] Value: <not collected>
[08:25:55.495] Conditions captured: <none>
[08:25:55.495] Early signaling: FALSE
[08:25:55.495] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.495] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.504] Chunk #1 of 2 ... DONE
[08:25:55.505] Chunk #2 of 2 ...
[08:25:55.505]  - Finding globals in 'X' for chunk #2 ...
[08:25:55.505] getGlobalsAndPackages() ...
[08:25:55.505] Searching for globals...
[08:25:55.506] 
[08:25:55.506] Searching for globals ... DONE
[08:25:55.506] - globals: [0] <none>
[08:25:55.506] getGlobalsAndPackages() ... DONE
[08:25:55.506]    + additional globals found: [n=0] 
[08:25:55.506]    + additional namespaces needed: [n=0] 
[08:25:55.507]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:55.507]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:55.507]  - seeds: [3] <seeds>
[08:25:55.507]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.507] getGlobalsAndPackages() ...
[08:25:55.507] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.508] Resolving globals: FALSE
[08:25:55.508] Tweak future expression to call with '...' arguments ...
[08:25:55.508] {
[08:25:55.508]     do.call(function(...) {
[08:25:55.508]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.508]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.508]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.508]             on.exit(options(oopts), add = TRUE)
[08:25:55.508]         }
[08:25:55.508]         {
[08:25:55.508]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.508]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.508]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.508]                   envir = globalenv(), inherits = FALSE)
[08:25:55.508]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.508]             })
[08:25:55.508]         }
[08:25:55.508]     }, args = future.call.arguments)
[08:25:55.508] }
[08:25:55.509] Tweak future expression to call with '...' arguments ... DONE
[08:25:55.509] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:55.510] 
[08:25:55.510] getGlobalsAndPackages() ... DONE
[08:25:55.510] run() for ‘Future’ ...
[08:25:55.511] - state: ‘created’
[08:25:55.511] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:55.514] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.514] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:55.514]   - Field: ‘label’
[08:25:55.514]   - Field: ‘local’
[08:25:55.514]   - Field: ‘owner’
[08:25:55.514]   - Field: ‘envir’
[08:25:55.515]   - Field: ‘workers’
[08:25:55.515]   - Field: ‘packages’
[08:25:55.515]   - Field: ‘gc’
[08:25:55.515]   - Field: ‘job’
[08:25:55.515]   - Field: ‘conditions’
[08:25:55.515]   - Field: ‘expr’
[08:25:55.515]   - Field: ‘uuid’
[08:25:55.516]   - Field: ‘seed’
[08:25:55.516]   - Field: ‘version’
[08:25:55.516]   - Field: ‘result’
[08:25:55.516]   - Field: ‘asynchronous’
[08:25:55.516]   - Field: ‘calls’
[08:25:55.516]   - Field: ‘globals’
[08:25:55.516]   - Field: ‘stdout’
[08:25:55.517]   - Field: ‘earlySignal’
[08:25:55.517]   - Field: ‘lazy’
[08:25:55.517]   - Field: ‘state’
[08:25:55.517] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:55.517] - Launch lazy future ...
[08:25:55.518] Packages needed by the future expression (n = 0): <none>
[08:25:55.518] Packages needed by future strategies (n = 0): <none>
[08:25:55.518] {
[08:25:55.518]     {
[08:25:55.518]         {
[08:25:55.518]             ...future.startTime <- base::Sys.time()
[08:25:55.518]             {
[08:25:55.518]                 {
[08:25:55.518]                   {
[08:25:55.518]                     {
[08:25:55.518]                       base::local({
[08:25:55.518]                         has_future <- base::requireNamespace("future", 
[08:25:55.518]                           quietly = TRUE)
[08:25:55.518]                         if (has_future) {
[08:25:55.518]                           ns <- base::getNamespace("future")
[08:25:55.518]                           version <- ns[[".package"]][["version"]]
[08:25:55.518]                           if (is.null(version)) 
[08:25:55.518]                             version <- utils::packageVersion("future")
[08:25:55.518]                         }
[08:25:55.518]                         else {
[08:25:55.518]                           version <- NULL
[08:25:55.518]                         }
[08:25:55.518]                         if (!has_future || version < "1.8.0") {
[08:25:55.518]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:55.518]                             "", base::R.version$version.string), 
[08:25:55.518]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:55.518]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:55.518]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:55.518]                               "release", "version")], collapse = " "), 
[08:25:55.518]                             hostname = base::Sys.info()[["nodename"]])
[08:25:55.518]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:55.518]                             info)
[08:25:55.518]                           info <- base::paste(info, collapse = "; ")
[08:25:55.518]                           if (!has_future) {
[08:25:55.518]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:55.518]                               info)
[08:25:55.518]                           }
[08:25:55.518]                           else {
[08:25:55.518]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:55.518]                               info, version)
[08:25:55.518]                           }
[08:25:55.518]                           base::stop(msg)
[08:25:55.518]                         }
[08:25:55.518]                       })
[08:25:55.518]                     }
[08:25:55.518]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:55.518]                     base::options(mc.cores = 1L)
[08:25:55.518]                   }
[08:25:55.518]                   ...future.strategy.old <- future::plan("list")
[08:25:55.518]                   options(future.plan = NULL)
[08:25:55.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:55.518]                 }
[08:25:55.518]                 ...future.workdir <- getwd()
[08:25:55.518]             }
[08:25:55.518]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:55.518]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:55.518]         }
[08:25:55.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:55.518]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:55.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:55.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:55.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:55.518]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:55.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:55.518]             base::names(...future.oldOptions))
[08:25:55.518]     }
[08:25:55.518]     if (FALSE) {
[08:25:55.518]     }
[08:25:55.518]     else {
[08:25:55.518]         if (TRUE) {
[08:25:55.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:55.518]                 open = "w")
[08:25:55.518]         }
[08:25:55.518]         else {
[08:25:55.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:55.518]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:55.518]         }
[08:25:55.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:55.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:55.518]             base::sink(type = "output", split = FALSE)
[08:25:55.518]             base::close(...future.stdout)
[08:25:55.518]         }, add = TRUE)
[08:25:55.518]     }
[08:25:55.518]     ...future.frame <- base::sys.nframe()
[08:25:55.518]     ...future.conditions <- base::list()
[08:25:55.518]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:55.518]     if (FALSE) {
[08:25:55.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:55.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:55.518]     }
[08:25:55.518]     ...future.result <- base::tryCatch({
[08:25:55.518]         base::withCallingHandlers({
[08:25:55.518]             ...future.value <- base::withVisible(base::local({
[08:25:55.518]                 withCallingHandlers({
[08:25:55.518]                   {
[08:25:55.518]                     do.call(function(...) {
[08:25:55.518]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.518]                       if (!identical(...future.globals.maxSize.org, 
[08:25:55.518]                         ...future.globals.maxSize)) {
[08:25:55.518]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.518]                         on.exit(options(oopts), add = TRUE)
[08:25:55.518]                       }
[08:25:55.518]                       {
[08:25:55.518]                         lapply(seq_along(...future.elements_ii), 
[08:25:55.518]                           FUN = function(jj) {
[08:25:55.518]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.518]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.518]                               envir = globalenv(), inherits = FALSE)
[08:25:55.518]                             ...future.FUN(...future.X_jj, ...)
[08:25:55.518]                           })
[08:25:55.518]                       }
[08:25:55.518]                     }, args = future.call.arguments)
[08:25:55.518]                   }
[08:25:55.518]                 }, immediateCondition = function(cond) {
[08:25:55.518]                   save_rds <- function (object, pathname, ...) 
[08:25:55.518]                   {
[08:25:55.518]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:55.518]                     if (file_test("-f", pathname_tmp)) {
[08:25:55.518]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.518]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:55.518]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.518]                         fi_tmp[["mtime"]])
[08:25:55.518]                     }
[08:25:55.518]                     tryCatch({
[08:25:55.518]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:55.518]                     }, error = function(ex) {
[08:25:55.518]                       msg <- conditionMessage(ex)
[08:25:55.518]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.518]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:55.518]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.518]                         fi_tmp[["mtime"]], msg)
[08:25:55.518]                       ex$message <- msg
[08:25:55.518]                       stop(ex)
[08:25:55.518]                     })
[08:25:55.518]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:55.518]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:55.518]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:55.518]                       fi_tmp <- file.info(pathname_tmp)
[08:25:55.518]                       fi <- file.info(pathname)
[08:25:55.518]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:55.518]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:55.518]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:55.518]                         fi[["size"]], fi[["mtime"]])
[08:25:55.518]                       stop(msg)
[08:25:55.518]                     }
[08:25:55.518]                     invisible(pathname)
[08:25:55.518]                   }
[08:25:55.518]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:55.518]                     rootPath = tempdir()) 
[08:25:55.518]                   {
[08:25:55.518]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:55.518]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:55.518]                       tmpdir = path, fileext = ".rds")
[08:25:55.518]                     save_rds(obj, file)
[08:25:55.518]                   }
[08:25:55.518]                   saveImmediateCondition(cond, path = "/tmp/Rtmpr8Lld6/.future/immediateConditions")
[08:25:55.518]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.518]                   {
[08:25:55.518]                     inherits <- base::inherits
[08:25:55.518]                     invokeRestart <- base::invokeRestart
[08:25:55.518]                     is.null <- base::is.null
[08:25:55.518]                     muffled <- FALSE
[08:25:55.518]                     if (inherits(cond, "message")) {
[08:25:55.518]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:55.518]                       if (muffled) 
[08:25:55.518]                         invokeRestart("muffleMessage")
[08:25:55.518]                     }
[08:25:55.518]                     else if (inherits(cond, "warning")) {
[08:25:55.518]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:55.518]                       if (muffled) 
[08:25:55.518]                         invokeRestart("muffleWarning")
[08:25:55.518]                     }
[08:25:55.518]                     else if (inherits(cond, "condition")) {
[08:25:55.518]                       if (!is.null(pattern)) {
[08:25:55.518]                         computeRestarts <- base::computeRestarts
[08:25:55.518]                         grepl <- base::grepl
[08:25:55.518]                         restarts <- computeRestarts(cond)
[08:25:55.518]                         for (restart in restarts) {
[08:25:55.518]                           name <- restart$name
[08:25:55.518]                           if (is.null(name)) 
[08:25:55.518]                             next
[08:25:55.518]                           if (!grepl(pattern, name)) 
[08:25:55.518]                             next
[08:25:55.518]                           invokeRestart(restart)
[08:25:55.518]                           muffled <- TRUE
[08:25:55.518]                           break
[08:25:55.518]                         }
[08:25:55.518]                       }
[08:25:55.518]                     }
[08:25:55.518]                     invisible(muffled)
[08:25:55.518]                   }
[08:25:55.518]                   muffleCondition(cond)
[08:25:55.518]                 })
[08:25:55.518]             }))
[08:25:55.518]             future::FutureResult(value = ...future.value$value, 
[08:25:55.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.518]                   ...future.rng), globalenv = if (FALSE) 
[08:25:55.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:55.518]                     ...future.globalenv.names))
[08:25:55.518]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:55.518]         }, condition = base::local({
[08:25:55.518]             c <- base::c
[08:25:55.518]             inherits <- base::inherits
[08:25:55.518]             invokeRestart <- base::invokeRestart
[08:25:55.518]             length <- base::length
[08:25:55.518]             list <- base::list
[08:25:55.518]             seq.int <- base::seq.int
[08:25:55.518]             signalCondition <- base::signalCondition
[08:25:55.518]             sys.calls <- base::sys.calls
[08:25:55.518]             `[[` <- base::`[[`
[08:25:55.518]             `+` <- base::`+`
[08:25:55.518]             `<<-` <- base::`<<-`
[08:25:55.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:55.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:55.518]                   3L)]
[08:25:55.518]             }
[08:25:55.518]             function(cond) {
[08:25:55.518]                 is_error <- inherits(cond, "error")
[08:25:55.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:55.518]                   NULL)
[08:25:55.518]                 if (is_error) {
[08:25:55.518]                   sessionInformation <- function() {
[08:25:55.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:55.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:55.518]                       search = base::search(), system = base::Sys.info())
[08:25:55.518]                   }
[08:25:55.518]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:55.518]                     cond$call), session = sessionInformation(), 
[08:25:55.518]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:55.518]                   signalCondition(cond)
[08:25:55.518]                 }
[08:25:55.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:55.518]                 "immediateCondition"))) {
[08:25:55.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:55.518]                   ...future.conditions[[length(...future.conditions) + 
[08:25:55.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:55.518]                   if (TRUE && !signal) {
[08:25:55.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.518]                     {
[08:25:55.518]                       inherits <- base::inherits
[08:25:55.518]                       invokeRestart <- base::invokeRestart
[08:25:55.518]                       is.null <- base::is.null
[08:25:55.518]                       muffled <- FALSE
[08:25:55.518]                       if (inherits(cond, "message")) {
[08:25:55.518]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.518]                         if (muffled) 
[08:25:55.518]                           invokeRestart("muffleMessage")
[08:25:55.518]                       }
[08:25:55.518]                       else if (inherits(cond, "warning")) {
[08:25:55.518]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.518]                         if (muffled) 
[08:25:55.518]                           invokeRestart("muffleWarning")
[08:25:55.518]                       }
[08:25:55.518]                       else if (inherits(cond, "condition")) {
[08:25:55.518]                         if (!is.null(pattern)) {
[08:25:55.518]                           computeRestarts <- base::computeRestarts
[08:25:55.518]                           grepl <- base::grepl
[08:25:55.518]                           restarts <- computeRestarts(cond)
[08:25:55.518]                           for (restart in restarts) {
[08:25:55.518]                             name <- restart$name
[08:25:55.518]                             if (is.null(name)) 
[08:25:55.518]                               next
[08:25:55.518]                             if (!grepl(pattern, name)) 
[08:25:55.518]                               next
[08:25:55.518]                             invokeRestart(restart)
[08:25:55.518]                             muffled <- TRUE
[08:25:55.518]                             break
[08:25:55.518]                           }
[08:25:55.518]                         }
[08:25:55.518]                       }
[08:25:55.518]                       invisible(muffled)
[08:25:55.518]                     }
[08:25:55.518]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.518]                   }
[08:25:55.518]                 }
[08:25:55.518]                 else {
[08:25:55.518]                   if (TRUE) {
[08:25:55.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:55.518]                     {
[08:25:55.518]                       inherits <- base::inherits
[08:25:55.518]                       invokeRestart <- base::invokeRestart
[08:25:55.518]                       is.null <- base::is.null
[08:25:55.518]                       muffled <- FALSE
[08:25:55.518]                       if (inherits(cond, "message")) {
[08:25:55.518]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:55.518]                         if (muffled) 
[08:25:55.518]                           invokeRestart("muffleMessage")
[08:25:55.518]                       }
[08:25:55.518]                       else if (inherits(cond, "warning")) {
[08:25:55.518]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:55.518]                         if (muffled) 
[08:25:55.518]                           invokeRestart("muffleWarning")
[08:25:55.518]                       }
[08:25:55.518]                       else if (inherits(cond, "condition")) {
[08:25:55.518]                         if (!is.null(pattern)) {
[08:25:55.518]                           computeRestarts <- base::computeRestarts
[08:25:55.518]                           grepl <- base::grepl
[08:25:55.518]                           restarts <- computeRestarts(cond)
[08:25:55.518]                           for (restart in restarts) {
[08:25:55.518]                             name <- restart$name
[08:25:55.518]                             if (is.null(name)) 
[08:25:55.518]                               next
[08:25:55.518]                             if (!grepl(pattern, name)) 
[08:25:55.518]                               next
[08:25:55.518]                             invokeRestart(restart)
[08:25:55.518]                             muffled <- TRUE
[08:25:55.518]                             break
[08:25:55.518]                           }
[08:25:55.518]                         }
[08:25:55.518]                       }
[08:25:55.518]                       invisible(muffled)
[08:25:55.518]                     }
[08:25:55.518]                     muffleCondition(cond, pattern = "^muffle")
[08:25:55.518]                   }
[08:25:55.518]                 }
[08:25:55.518]             }
[08:25:55.518]         }))
[08:25:55.518]     }, error = function(ex) {
[08:25:55.518]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:55.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:55.518]                 ...future.rng), started = ...future.startTime, 
[08:25:55.518]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:55.518]             version = "1.8"), class = "FutureResult")
[08:25:55.518]     }, finally = {
[08:25:55.518]         if (!identical(...future.workdir, getwd())) 
[08:25:55.518]             setwd(...future.workdir)
[08:25:55.518]         {
[08:25:55.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:55.518]                 ...future.oldOptions$nwarnings <- NULL
[08:25:55.518]             }
[08:25:55.518]             base::options(...future.oldOptions)
[08:25:55.518]             if (.Platform$OS.type == "windows") {
[08:25:55.518]                 old_names <- names(...future.oldEnvVars)
[08:25:55.518]                 envs <- base::Sys.getenv()
[08:25:55.518]                 names <- names(envs)
[08:25:55.518]                 common <- intersect(names, old_names)
[08:25:55.518]                 added <- setdiff(names, old_names)
[08:25:55.518]                 removed <- setdiff(old_names, names)
[08:25:55.518]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:55.518]                   envs[common]]
[08:25:55.518]                 NAMES <- toupper(changed)
[08:25:55.518]                 args <- list()
[08:25:55.518]                 for (kk in seq_along(NAMES)) {
[08:25:55.518]                   name <- changed[[kk]]
[08:25:55.518]                   NAME <- NAMES[[kk]]
[08:25:55.518]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.518]                     next
[08:25:55.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.518]                 }
[08:25:55.518]                 NAMES <- toupper(added)
[08:25:55.518]                 for (kk in seq_along(NAMES)) {
[08:25:55.518]                   name <- added[[kk]]
[08:25:55.518]                   NAME <- NAMES[[kk]]
[08:25:55.518]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.518]                     next
[08:25:55.518]                   args[[name]] <- ""
[08:25:55.518]                 }
[08:25:55.518]                 NAMES <- toupper(removed)
[08:25:55.518]                 for (kk in seq_along(NAMES)) {
[08:25:55.518]                   name <- removed[[kk]]
[08:25:55.518]                   NAME <- NAMES[[kk]]
[08:25:55.518]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:55.518]                     next
[08:25:55.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:55.518]                 }
[08:25:55.518]                 if (length(args) > 0) 
[08:25:55.518]                   base::do.call(base::Sys.setenv, args = args)
[08:25:55.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:55.518]             }
[08:25:55.518]             else {
[08:25:55.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:55.518]             }
[08:25:55.518]             {
[08:25:55.518]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:55.518]                   0L) {
[08:25:55.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:55.518]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:55.518]                   base::options(opts)
[08:25:55.518]                 }
[08:25:55.518]                 {
[08:25:55.518]                   {
[08:25:55.518]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:55.518]                     NULL
[08:25:55.518]                   }
[08:25:55.518]                   options(future.plan = NULL)
[08:25:55.518]                   if (is.na(NA_character_)) 
[08:25:55.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:55.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:55.518]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:55.518]                     .init = FALSE)
[08:25:55.518]                 }
[08:25:55.518]             }
[08:25:55.518]         }
[08:25:55.518]     })
[08:25:55.518]     if (TRUE) {
[08:25:55.518]         base::sink(type = "output", split = FALSE)
[08:25:55.518]         if (TRUE) {
[08:25:55.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:55.518]         }
[08:25:55.518]         else {
[08:25:55.518]             ...future.result["stdout"] <- base::list(NULL)
[08:25:55.518]         }
[08:25:55.518]         base::close(...future.stdout)
[08:25:55.518]         ...future.stdout <- NULL
[08:25:55.518]     }
[08:25:55.518]     ...future.result$conditions <- ...future.conditions
[08:25:55.518]     ...future.result$finished <- base::Sys.time()
[08:25:55.518]     ...future.result
[08:25:55.518] }
[08:25:55.522] assign_globals() ...
[08:25:55.522] List of 7
[08:25:55.522]  $ ...future.FUN            :function (...)  
[08:25:55.522]  $ foo                      :function (x = 1, y = 2)  
[08:25:55.522]  $ x                        : num 3
[08:25:55.522]  $ future.call.arguments    : list()
[08:25:55.522]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:55.522]  $ ...future.elements_ii    :List of 3
[08:25:55.522]   ..$ : int 0
[08:25:55.522]   ..$ : int 0
[08:25:55.522]   ..$ : int 0
[08:25:55.522]  $ ...future.seeds_ii       :List of 3
[08:25:55.522]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[08:25:55.522]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[08:25:55.522]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[08:25:55.522]  $ ...future.globals.maxSize: NULL
[08:25:55.522]  - attr(*, "where")=List of 7
[08:25:55.522]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:55.522]   ..$ foo                      :<environment: R_EmptyEnv> 
[08:25:55.522]   ..$ x                        :<environment: R_EmptyEnv> 
[08:25:55.522]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:55.522]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:55.522]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:55.522]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:55.522]  - attr(*, "resolved")= logi FALSE
[08:25:55.522]  - attr(*, "total_size")= num 7967
[08:25:55.522]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:55.522]  - attr(*, "already-done")= logi TRUE
[08:25:55.533] - reassign environment for ‘...future.FUN’
[08:25:55.533] - copied ‘...future.FUN’ to environment
[08:25:55.533] - reassign environment for ‘foo’
[08:25:55.533] - copied ‘foo’ to environment
[08:25:55.533] - copied ‘x’ to environment
[08:25:55.533] - copied ‘future.call.arguments’ to environment
[08:25:55.534] - copied ‘...future.elements_ii’ to environment
[08:25:55.534] - copied ‘...future.seeds_ii’ to environment
[08:25:55.534] - copied ‘...future.globals.maxSize’ to environment
[08:25:55.534] assign_globals() ... done
[08:25:55.534] requestCore(): workers = 2
[08:25:55.537] MulticoreFuture started
[08:25:55.537] - Launch lazy future ... done
[08:25:55.537] run() for ‘MulticoreFuture’ ... done
[08:25:55.538] Created future:
[08:25:55.538] plan(): Setting new future strategy stack:
[08:25:55.538] List of future strategies:
[08:25:55.538] 1. sequential:
[08:25:55.538]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.538]    - tweaked: FALSE
[08:25:55.538]    - call: NULL
[08:25:55.539] plan(): nbrOfWorkers() = 1
[08:25:55.542] plan(): Setting new future strategy stack:
[08:25:55.542] List of future strategies:
[08:25:55.542] 1. multicore:
[08:25:55.542]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:55.542]    - tweaked: FALSE
[08:25:55.542]    - call: plan(strategy)
[08:25:55.545] plan(): nbrOfWorkers() = 2
[08:25:55.538] MulticoreFuture:
[08:25:55.538] Label: ‘future_replicate-2’
[08:25:55.538] Expression:
[08:25:55.538] {
[08:25:55.538]     do.call(function(...) {
[08:25:55.538]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:55.538]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:55.538]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:55.538]             on.exit(options(oopts), add = TRUE)
[08:25:55.538]         }
[08:25:55.538]         {
[08:25:55.538]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:55.538]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:55.538]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:55.538]                   envir = globalenv(), inherits = FALSE)
[08:25:55.538]                 ...future.FUN(...future.X_jj, ...)
[08:25:55.538]             })
[08:25:55.538]         }
[08:25:55.538]     }, args = future.call.arguments)
[08:25:55.538] }
[08:25:55.538] Lazy evaluation: FALSE
[08:25:55.538] Asynchronous evaluation: TRUE
[08:25:55.538] Local evaluation: TRUE
[08:25:55.538] Environment: 0x55f777b9ecc8
[08:25:55.538] Capture standard output: TRUE
[08:25:55.538] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:55.538] Globals: 7 objects totaling 947 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, ...)
[08:25:55.538] Packages: <none>
[08:25:55.538] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:55.538] Resolved: TRUE
[08:25:55.538] Value: <not collected>
[08:25:55.538] Conditions captured: <none>
[08:25:55.538] Early signaling: FALSE
[08:25:55.538] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:55.538] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:55.546] Chunk #2 of 2 ... DONE
[08:25:55.546] Launching 2 futures (chunks) ... DONE
[08:25:55.546] Resolving 2 futures (chunks) ...
[08:25:55.546] resolve() on list ...
[08:25:55.547]  recursive: 0
[08:25:55.547]  length: 2
[08:25:55.547] 
[08:25:55.547] Future #1
[08:25:55.547] result() for MulticoreFuture ...
[08:25:55.548] result() for MulticoreFuture ...
[08:25:55.548] result() for MulticoreFuture ... done
[08:25:55.549] result() for MulticoreFuture ... done
[08:25:55.549] result() for MulticoreFuture ...
[08:25:55.549] result() for MulticoreFuture ... done
[08:25:55.549] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:55.549] - nx: 2
[08:25:55.549] - relay: TRUE
[08:25:55.553] - stdout: TRUE
[08:25:55.554] - signal: TRUE
[08:25:55.554] - resignal: FALSE
[08:25:55.554] - force: TRUE
[08:25:55.555] - relayed: [n=2] FALSE, FALSE
[08:25:55.555] - queued futures: [n=2] FALSE, FALSE
[08:25:55.555]  - until=1
[08:25:55.556]  - relaying element #1
[08:25:55.556] result() for MulticoreFuture ...
[08:25:55.556] result() for MulticoreFuture ... done
[08:25:55.557] result() for MulticoreFuture ...
[08:25:55.557] result() for MulticoreFuture ... done
[08:25:55.558] result() for MulticoreFuture ...
[08:25:55.558] result() for MulticoreFuture ... done
[08:25:55.558] result() for MulticoreFuture ...
[08:25:55.558] result() for MulticoreFuture ... done
[08:25:55.559] - relayed: [n=2] TRUE, FALSE
[08:25:55.559] - queued futures: [n=2] TRUE, FALSE
[08:25:55.559] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:55.559]  length: 1 (resolved future 1)
[08:25:55.560] Future #2
[08:25:55.560] result() for MulticoreFuture ...
[08:25:55.561] result() for MulticoreFuture ...
[08:25:55.561] result() for MulticoreFuture ... done
[08:25:55.561] result() for MulticoreFuture ... done
[08:25:55.561] result() for MulticoreFuture ...
[08:25:55.561] result() for MulticoreFuture ... done
[08:25:55.561] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:55.561] - nx: 2
[08:25:55.561] - relay: TRUE
[08:25:55.562] - stdout: TRUE
[08:25:55.562] - signal: TRUE
[08:25:55.562] - resignal: FALSE
[08:25:55.562] - force: TRUE
[08:25:55.562] - relayed: [n=2] TRUE, FALSE
[08:25:55.562] - queued futures: [n=2] TRUE, FALSE
[08:25:55.562]  - until=2
[08:25:55.563]  - relaying element #2
[08:25:55.563] result() for MulticoreFuture ...
[08:25:55.563] result() for MulticoreFuture ... done
[08:25:55.563] result() for MulticoreFuture ...
[08:25:55.563] result() for MulticoreFuture ... done
[08:25:55.563] result() for MulticoreFuture ...
[08:25:55.563] result() for MulticoreFuture ... done
[08:25:55.563] result() for MulticoreFuture ...
[08:25:55.564] result() for MulticoreFuture ... done
[08:25:55.564] - relayed: [n=2] TRUE, TRUE
[08:25:55.564] - queued futures: [n=2] TRUE, TRUE
[08:25:55.564] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:55.564]  length: 0 (resolved future 2)
[08:25:55.564] Relaying remaining futures
[08:25:55.564] signalConditionsASAP(NULL, pos=0) ...
[08:25:55.564] - nx: 2
[08:25:55.564] - relay: TRUE
[08:25:55.565] - stdout: TRUE
[08:25:55.565] - signal: TRUE
[08:25:55.565] - resignal: FALSE
[08:25:55.565] - force: TRUE
[08:25:55.565] - relayed: [n=2] TRUE, TRUE
[08:25:55.565] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:55.565] - relayed: [n=2] TRUE, TRUE
[08:25:55.565] - queued futures: [n=2] TRUE, TRUE
[08:25:55.566] signalConditionsASAP(NULL, pos=0) ... done
[08:25:55.566] resolve() on list ... DONE
[08:25:55.566] result() for MulticoreFuture ...
[08:25:55.566] result() for MulticoreFuture ... done
[08:25:55.566] result() for MulticoreFuture ...
[08:25:55.566] result() for MulticoreFuture ... done
[08:25:55.566] result() for MulticoreFuture ...
[08:25:55.566] result() for MulticoreFuture ... done
[08:25:55.567] result() for MulticoreFuture ...
[08:25:55.567] result() for MulticoreFuture ... done
[08:25:55.567]  - Number of value chunks collected: 2
[08:25:55.567] Resolving 2 futures (chunks) ... DONE
[08:25:55.567] Reducing values from 2 chunks ...
[08:25:55.567]  - Number of values collected after concatenation: 5
[08:25:55.567]  - Number of values expected: 5
[08:25:55.567] Reducing values from 2 chunks ... DONE
[08:25:55.567] future_lapply() ... DONE
[08:25:55.568] plan(): Setting new future strategy stack:
[08:25:55.568] List of future strategies:
[08:25:55.568] 1. sequential:
[08:25:55.568]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:55.568]    - tweaked: FALSE
[08:25:55.568]    - call: plan(sequential)
[08:25:55.569] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[08:25:55.569] plan(): Setting new future strategy stack:
[08:25:55.569] List of future strategies:
[08:25:55.569] 1. multisession:
[08:25:55.569]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:25:55.569]    - tweaked: FALSE
[08:25:55.569]    - call: plan(strategy)
[08:25:55.570] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:25:55.570] multisession:
[08:25:55.570] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:25:55.570] - tweaked: FALSE
[08:25:55.570] - call: plan(strategy)
[08:25:55.574] getGlobalsAndPackages() ...
[08:25:55.574] Not searching for globals
[08:25:55.575] - globals: [0] <none>
[08:25:55.575] getGlobalsAndPackages() ... DONE
[08:25:56.074] Packages needed by the future expression (n = 0): <none>
[08:25:56.075] Packages needed by future strategies (n = 0): <none>
[08:25:56.075] {
[08:25:56.075]     {
[08:25:56.075]         {
[08:25:56.075]             ...future.startTime <- base::Sys.time()
[08:25:56.075]             {
[08:25:56.075]                 {
[08:25:56.075]                   {
[08:25:56.075]                     {
[08:25:56.075]                       base::local({
[08:25:56.075]                         has_future <- base::requireNamespace("future", 
[08:25:56.075]                           quietly = TRUE)
[08:25:56.075]                         if (has_future) {
[08:25:56.075]                           ns <- base::getNamespace("future")
[08:25:56.075]                           version <- ns[[".package"]][["version"]]
[08:25:56.075]                           if (is.null(version)) 
[08:25:56.075]                             version <- utils::packageVersion("future")
[08:25:56.075]                         }
[08:25:56.075]                         else {
[08:25:56.075]                           version <- NULL
[08:25:56.075]                         }
[08:25:56.075]                         if (!has_future || version < "1.8.0") {
[08:25:56.075]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.075]                             "", base::R.version$version.string), 
[08:25:56.075]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.075]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.075]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.075]                               "release", "version")], collapse = " "), 
[08:25:56.075]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.075]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.075]                             info)
[08:25:56.075]                           info <- base::paste(info, collapse = "; ")
[08:25:56.075]                           if (!has_future) {
[08:25:56.075]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.075]                               info)
[08:25:56.075]                           }
[08:25:56.075]                           else {
[08:25:56.075]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.075]                               info, version)
[08:25:56.075]                           }
[08:25:56.075]                           base::stop(msg)
[08:25:56.075]                         }
[08:25:56.075]                       })
[08:25:56.075]                     }
[08:25:56.075]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.075]                     base::options(mc.cores = 1L)
[08:25:56.075]                   }
[08:25:56.075]                   ...future.strategy.old <- future::plan("list")
[08:25:56.075]                   options(future.plan = NULL)
[08:25:56.075]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.075]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.075]                 }
[08:25:56.075]                 ...future.workdir <- getwd()
[08:25:56.075]             }
[08:25:56.075]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.075]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.075]         }
[08:25:56.075]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.075]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:56.075]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.075]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.075]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.075]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.075]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.075]             base::names(...future.oldOptions))
[08:25:56.075]     }
[08:25:56.075]     if (FALSE) {
[08:25:56.075]     }
[08:25:56.075]     else {
[08:25:56.075]         if (TRUE) {
[08:25:56.075]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.075]                 open = "w")
[08:25:56.075]         }
[08:25:56.075]         else {
[08:25:56.075]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.075]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.075]         }
[08:25:56.075]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.075]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.075]             base::sink(type = "output", split = FALSE)
[08:25:56.075]             base::close(...future.stdout)
[08:25:56.075]         }, add = TRUE)
[08:25:56.075]     }
[08:25:56.075]     ...future.frame <- base::sys.nframe()
[08:25:56.075]     ...future.conditions <- base::list()
[08:25:56.075]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.075]     if (FALSE) {
[08:25:56.075]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.075]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.075]     }
[08:25:56.075]     ...future.result <- base::tryCatch({
[08:25:56.075]         base::withCallingHandlers({
[08:25:56.075]             ...future.value <- base::withVisible(base::local({
[08:25:56.075]                 ...future.makeSendCondition <- base::local({
[08:25:56.075]                   sendCondition <- NULL
[08:25:56.075]                   function(frame = 1L) {
[08:25:56.075]                     if (is.function(sendCondition)) 
[08:25:56.075]                       return(sendCondition)
[08:25:56.075]                     ns <- getNamespace("parallel")
[08:25:56.075]                     if (exists("sendData", mode = "function", 
[08:25:56.075]                       envir = ns)) {
[08:25:56.075]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.075]                         envir = ns)
[08:25:56.075]                       envir <- sys.frame(frame)
[08:25:56.075]                       master <- NULL
[08:25:56.075]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.075]                         !identical(envir, emptyenv())) {
[08:25:56.075]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.075]                           inherits = FALSE)) {
[08:25:56.075]                           master <- get("master", mode = "list", 
[08:25:56.075]                             envir = envir, inherits = FALSE)
[08:25:56.075]                           if (inherits(master, c("SOCKnode", 
[08:25:56.075]                             "SOCK0node"))) {
[08:25:56.075]                             sendCondition <<- function(cond) {
[08:25:56.075]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.075]                                 success = TRUE)
[08:25:56.075]                               parallel_sendData(master, data)
[08:25:56.075]                             }
[08:25:56.075]                             return(sendCondition)
[08:25:56.075]                           }
[08:25:56.075]                         }
[08:25:56.075]                         frame <- frame + 1L
[08:25:56.075]                         envir <- sys.frame(frame)
[08:25:56.075]                       }
[08:25:56.075]                     }
[08:25:56.075]                     sendCondition <<- function(cond) NULL
[08:25:56.075]                   }
[08:25:56.075]                 })
[08:25:56.075]                 withCallingHandlers({
[08:25:56.075]                   NA
[08:25:56.075]                 }, immediateCondition = function(cond) {
[08:25:56.075]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.075]                   sendCondition(cond)
[08:25:56.075]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.075]                   {
[08:25:56.075]                     inherits <- base::inherits
[08:25:56.075]                     invokeRestart <- base::invokeRestart
[08:25:56.075]                     is.null <- base::is.null
[08:25:56.075]                     muffled <- FALSE
[08:25:56.075]                     if (inherits(cond, "message")) {
[08:25:56.075]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.075]                       if (muffled) 
[08:25:56.075]                         invokeRestart("muffleMessage")
[08:25:56.075]                     }
[08:25:56.075]                     else if (inherits(cond, "warning")) {
[08:25:56.075]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.075]                       if (muffled) 
[08:25:56.075]                         invokeRestart("muffleWarning")
[08:25:56.075]                     }
[08:25:56.075]                     else if (inherits(cond, "condition")) {
[08:25:56.075]                       if (!is.null(pattern)) {
[08:25:56.075]                         computeRestarts <- base::computeRestarts
[08:25:56.075]                         grepl <- base::grepl
[08:25:56.075]                         restarts <- computeRestarts(cond)
[08:25:56.075]                         for (restart in restarts) {
[08:25:56.075]                           name <- restart$name
[08:25:56.075]                           if (is.null(name)) 
[08:25:56.075]                             next
[08:25:56.075]                           if (!grepl(pattern, name)) 
[08:25:56.075]                             next
[08:25:56.075]                           invokeRestart(restart)
[08:25:56.075]                           muffled <- TRUE
[08:25:56.075]                           break
[08:25:56.075]                         }
[08:25:56.075]                       }
[08:25:56.075]                     }
[08:25:56.075]                     invisible(muffled)
[08:25:56.075]                   }
[08:25:56.075]                   muffleCondition(cond)
[08:25:56.075]                 })
[08:25:56.075]             }))
[08:25:56.075]             future::FutureResult(value = ...future.value$value, 
[08:25:56.075]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.075]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.075]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.075]                     ...future.globalenv.names))
[08:25:56.075]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.075]         }, condition = base::local({
[08:25:56.075]             c <- base::c
[08:25:56.075]             inherits <- base::inherits
[08:25:56.075]             invokeRestart <- base::invokeRestart
[08:25:56.075]             length <- base::length
[08:25:56.075]             list <- base::list
[08:25:56.075]             seq.int <- base::seq.int
[08:25:56.075]             signalCondition <- base::signalCondition
[08:25:56.075]             sys.calls <- base::sys.calls
[08:25:56.075]             `[[` <- base::`[[`
[08:25:56.075]             `+` <- base::`+`
[08:25:56.075]             `<<-` <- base::`<<-`
[08:25:56.075]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.075]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.075]                   3L)]
[08:25:56.075]             }
[08:25:56.075]             function(cond) {
[08:25:56.075]                 is_error <- inherits(cond, "error")
[08:25:56.075]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.075]                   NULL)
[08:25:56.075]                 if (is_error) {
[08:25:56.075]                   sessionInformation <- function() {
[08:25:56.075]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.075]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.075]                       search = base::search(), system = base::Sys.info())
[08:25:56.075]                   }
[08:25:56.075]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.075]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.075]                     cond$call), session = sessionInformation(), 
[08:25:56.075]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.075]                   signalCondition(cond)
[08:25:56.075]                 }
[08:25:56.075]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.075]                 "immediateCondition"))) {
[08:25:56.075]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.075]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.075]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.075]                   if (TRUE && !signal) {
[08:25:56.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.075]                     {
[08:25:56.075]                       inherits <- base::inherits
[08:25:56.075]                       invokeRestart <- base::invokeRestart
[08:25:56.075]                       is.null <- base::is.null
[08:25:56.075]                       muffled <- FALSE
[08:25:56.075]                       if (inherits(cond, "message")) {
[08:25:56.075]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.075]                         if (muffled) 
[08:25:56.075]                           invokeRestart("muffleMessage")
[08:25:56.075]                       }
[08:25:56.075]                       else if (inherits(cond, "warning")) {
[08:25:56.075]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.075]                         if (muffled) 
[08:25:56.075]                           invokeRestart("muffleWarning")
[08:25:56.075]                       }
[08:25:56.075]                       else if (inherits(cond, "condition")) {
[08:25:56.075]                         if (!is.null(pattern)) {
[08:25:56.075]                           computeRestarts <- base::computeRestarts
[08:25:56.075]                           grepl <- base::grepl
[08:25:56.075]                           restarts <- computeRestarts(cond)
[08:25:56.075]                           for (restart in restarts) {
[08:25:56.075]                             name <- restart$name
[08:25:56.075]                             if (is.null(name)) 
[08:25:56.075]                               next
[08:25:56.075]                             if (!grepl(pattern, name)) 
[08:25:56.075]                               next
[08:25:56.075]                             invokeRestart(restart)
[08:25:56.075]                             muffled <- TRUE
[08:25:56.075]                             break
[08:25:56.075]                           }
[08:25:56.075]                         }
[08:25:56.075]                       }
[08:25:56.075]                       invisible(muffled)
[08:25:56.075]                     }
[08:25:56.075]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.075]                   }
[08:25:56.075]                 }
[08:25:56.075]                 else {
[08:25:56.075]                   if (TRUE) {
[08:25:56.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.075]                     {
[08:25:56.075]                       inherits <- base::inherits
[08:25:56.075]                       invokeRestart <- base::invokeRestart
[08:25:56.075]                       is.null <- base::is.null
[08:25:56.075]                       muffled <- FALSE
[08:25:56.075]                       if (inherits(cond, "message")) {
[08:25:56.075]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.075]                         if (muffled) 
[08:25:56.075]                           invokeRestart("muffleMessage")
[08:25:56.075]                       }
[08:25:56.075]                       else if (inherits(cond, "warning")) {
[08:25:56.075]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.075]                         if (muffled) 
[08:25:56.075]                           invokeRestart("muffleWarning")
[08:25:56.075]                       }
[08:25:56.075]                       else if (inherits(cond, "condition")) {
[08:25:56.075]                         if (!is.null(pattern)) {
[08:25:56.075]                           computeRestarts <- base::computeRestarts
[08:25:56.075]                           grepl <- base::grepl
[08:25:56.075]                           restarts <- computeRestarts(cond)
[08:25:56.075]                           for (restart in restarts) {
[08:25:56.075]                             name <- restart$name
[08:25:56.075]                             if (is.null(name)) 
[08:25:56.075]                               next
[08:25:56.075]                             if (!grepl(pattern, name)) 
[08:25:56.075]                               next
[08:25:56.075]                             invokeRestart(restart)
[08:25:56.075]                             muffled <- TRUE
[08:25:56.075]                             break
[08:25:56.075]                           }
[08:25:56.075]                         }
[08:25:56.075]                       }
[08:25:56.075]                       invisible(muffled)
[08:25:56.075]                     }
[08:25:56.075]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.075]                   }
[08:25:56.075]                 }
[08:25:56.075]             }
[08:25:56.075]         }))
[08:25:56.075]     }, error = function(ex) {
[08:25:56.075]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.075]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.075]                 ...future.rng), started = ...future.startTime, 
[08:25:56.075]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.075]             version = "1.8"), class = "FutureResult")
[08:25:56.075]     }, finally = {
[08:25:56.075]         if (!identical(...future.workdir, getwd())) 
[08:25:56.075]             setwd(...future.workdir)
[08:25:56.075]         {
[08:25:56.075]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.075]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.075]             }
[08:25:56.075]             base::options(...future.oldOptions)
[08:25:56.075]             if (.Platform$OS.type == "windows") {
[08:25:56.075]                 old_names <- names(...future.oldEnvVars)
[08:25:56.075]                 envs <- base::Sys.getenv()
[08:25:56.075]                 names <- names(envs)
[08:25:56.075]                 common <- intersect(names, old_names)
[08:25:56.075]                 added <- setdiff(names, old_names)
[08:25:56.075]                 removed <- setdiff(old_names, names)
[08:25:56.075]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.075]                   envs[common]]
[08:25:56.075]                 NAMES <- toupper(changed)
[08:25:56.075]                 args <- list()
[08:25:56.075]                 for (kk in seq_along(NAMES)) {
[08:25:56.075]                   name <- changed[[kk]]
[08:25:56.075]                   NAME <- NAMES[[kk]]
[08:25:56.075]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.075]                     next
[08:25:56.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.075]                 }
[08:25:56.075]                 NAMES <- toupper(added)
[08:25:56.075]                 for (kk in seq_along(NAMES)) {
[08:25:56.075]                   name <- added[[kk]]
[08:25:56.075]                   NAME <- NAMES[[kk]]
[08:25:56.075]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.075]                     next
[08:25:56.075]                   args[[name]] <- ""
[08:25:56.075]                 }
[08:25:56.075]                 NAMES <- toupper(removed)
[08:25:56.075]                 for (kk in seq_along(NAMES)) {
[08:25:56.075]                   name <- removed[[kk]]
[08:25:56.075]                   NAME <- NAMES[[kk]]
[08:25:56.075]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.075]                     next
[08:25:56.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.075]                 }
[08:25:56.075]                 if (length(args) > 0) 
[08:25:56.075]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.075]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.075]             }
[08:25:56.075]             else {
[08:25:56.075]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.075]             }
[08:25:56.075]             {
[08:25:56.075]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.075]                   0L) {
[08:25:56.075]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.075]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.075]                   base::options(opts)
[08:25:56.075]                 }
[08:25:56.075]                 {
[08:25:56.075]                   {
[08:25:56.075]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.075]                     NULL
[08:25:56.075]                   }
[08:25:56.075]                   options(future.plan = NULL)
[08:25:56.075]                   if (is.na(NA_character_)) 
[08:25:56.075]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.075]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.075]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.075]                     .init = FALSE)
[08:25:56.075]                 }
[08:25:56.075]             }
[08:25:56.075]         }
[08:25:56.075]     })
[08:25:56.075]     if (TRUE) {
[08:25:56.075]         base::sink(type = "output", split = FALSE)
[08:25:56.075]         if (TRUE) {
[08:25:56.075]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.075]         }
[08:25:56.075]         else {
[08:25:56.075]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.075]         }
[08:25:56.075]         base::close(...future.stdout)
[08:25:56.075]         ...future.stdout <- NULL
[08:25:56.075]     }
[08:25:56.075]     ...future.result$conditions <- ...future.conditions
[08:25:56.075]     ...future.result$finished <- base::Sys.time()
[08:25:56.075]     ...future.result
[08:25:56.075] }
[08:25:56.131] MultisessionFuture started
[08:25:56.131] result() for ClusterFuture ...
[08:25:56.131] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.132] - Validating connection of MultisessionFuture
[08:25:56.163] - received message: FutureResult
[08:25:56.163] - Received FutureResult
[08:25:56.163] - Erased future from FutureRegistry
[08:25:56.163] result() for ClusterFuture ...
[08:25:56.164] - result already collected: FutureResult
[08:25:56.164] result() for ClusterFuture ... done
[08:25:56.164] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.164] result() for ClusterFuture ... done
[08:25:56.164] result() for ClusterFuture ...
[08:25:56.164] - result already collected: FutureResult
[08:25:56.164] result() for ClusterFuture ... done
[08:25:56.164] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:25:56.166] plan(): nbrOfWorkers() = 2
[08:25:56.166] future_lapply() ...
[08:25:56.167] Generating random seeds ...
[08:25:56.167] Generating random seed streams for 5 elements ...
[08:25:56.167] Generating random seed streams for 5 elements ... DONE
[08:25:56.167] Generating random seeds ... DONE
[08:25:56.167] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:56.169] Number of chunks: 2
[08:25:56.169] getGlobalsAndPackagesXApply() ...
[08:25:56.169]  - future.globals: TRUE
[08:25:56.169] getGlobalsAndPackages() ...
[08:25:56.169] Searching for globals...
[08:25:56.171] - globals found: [2] ‘FUN’, ‘sample’
[08:25:56.171] Searching for globals ... DONE
[08:25:56.171] Resolving globals: FALSE
[08:25:56.171] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:56.171] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:56.172] - globals: [1] ‘FUN’
[08:25:56.172] 
[08:25:56.172] getGlobalsAndPackages() ... DONE
[08:25:56.172]  - globals found/used: [n=1] ‘FUN’
[08:25:56.172]  - needed namespaces: [n=0] 
[08:25:56.172] Finding globals ... DONE
[08:25:56.172]  - use_args: TRUE
[08:25:56.172]  - Getting '...' globals ...
[08:25:56.172] resolve() on list ...
[08:25:56.173]  recursive: 0
[08:25:56.173]  length: 1
[08:25:56.173]  elements: ‘...’
[08:25:56.173]  length: 0 (resolved future 1)
[08:25:56.173] resolve() on list ... DONE
[08:25:56.173]    - '...' content: [n=0] 
[08:25:56.173] List of 1
[08:25:56.173]  $ ...: list()
[08:25:56.173]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.173]  - attr(*, "where")=List of 1
[08:25:56.173]   ..$ ...:<environment: 0x55f777ee6878> 
[08:25:56.173]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.173]  - attr(*, "resolved")= logi TRUE
[08:25:56.173]  - attr(*, "total_size")= num NA
[08:25:56.176]  - Getting '...' globals ... DONE
[08:25:56.176] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:56.176] List of 2
[08:25:56.176]  $ ...future.FUN:function (...)  
[08:25:56.176]  $ ...          : list()
[08:25:56.176]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.176]  - attr(*, "where")=List of 2
[08:25:56.176]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:56.176]   ..$ ...          :<environment: 0x55f777ee6878> 
[08:25:56.176]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.176]  - attr(*, "resolved")= logi FALSE
[08:25:56.176]  - attr(*, "total_size")= num 7184
[08:25:56.179] Packages to be attached in all futures: [n=0] 
[08:25:56.179] getGlobalsAndPackagesXApply() ... DONE
[08:25:56.179] Number of futures (= number of chunks): 2
[08:25:56.179] Launching 2 futures (chunks) ...
[08:25:56.179] Chunk #1 of 2 ...
[08:25:56.179]  - Finding globals in 'X' for chunk #1 ...
[08:25:56.179] getGlobalsAndPackages() ...
[08:25:56.179] Searching for globals...
[08:25:56.180] 
[08:25:56.180] Searching for globals ... DONE
[08:25:56.180] - globals: [0] <none>
[08:25:56.180] getGlobalsAndPackages() ... DONE
[08:25:56.180]    + additional globals found: [n=0] 
[08:25:56.180]    + additional namespaces needed: [n=0] 
[08:25:56.180]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:56.180]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.180]  - seeds: [2] <seeds>
[08:25:56.180]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.181] getGlobalsAndPackages() ...
[08:25:56.181] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.181] Resolving globals: FALSE
[08:25:56.181] Tweak future expression to call with '...' arguments ...
[08:25:56.181] {
[08:25:56.181]     do.call(function(...) {
[08:25:56.181]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.181]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.181]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.181]             on.exit(options(oopts), add = TRUE)
[08:25:56.181]         }
[08:25:56.181]         {
[08:25:56.181]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.181]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.181]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.181]                   envir = globalenv(), inherits = FALSE)
[08:25:56.181]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.181]             })
[08:25:56.181]         }
[08:25:56.181]     }, args = future.call.arguments)
[08:25:56.181] }
[08:25:56.181] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.182] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.182] 
[08:25:56.182] getGlobalsAndPackages() ... DONE
[08:25:56.182] run() for ‘Future’ ...
[08:25:56.182] - state: ‘created’
[08:25:56.182] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.197] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.197] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.197]   - Field: ‘node’
[08:25:56.197]   - Field: ‘label’
[08:25:56.198]   - Field: ‘local’
[08:25:56.198]   - Field: ‘owner’
[08:25:56.198]   - Field: ‘envir’
[08:25:56.198]   - Field: ‘workers’
[08:25:56.198]   - Field: ‘packages’
[08:25:56.198]   - Field: ‘gc’
[08:25:56.198]   - Field: ‘conditions’
[08:25:56.198]   - Field: ‘persistent’
[08:25:56.198]   - Field: ‘expr’
[08:25:56.198]   - Field: ‘uuid’
[08:25:56.199]   - Field: ‘seed’
[08:25:56.199]   - Field: ‘version’
[08:25:56.199]   - Field: ‘result’
[08:25:56.199]   - Field: ‘asynchronous’
[08:25:56.199]   - Field: ‘calls’
[08:25:56.199]   - Field: ‘globals’
[08:25:56.199]   - Field: ‘stdout’
[08:25:56.199]   - Field: ‘earlySignal’
[08:25:56.199]   - Field: ‘lazy’
[08:25:56.200]   - Field: ‘state’
[08:25:56.200] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.200] - Launch lazy future ...
[08:25:56.200] Packages needed by the future expression (n = 0): <none>
[08:25:56.200] Packages needed by future strategies (n = 0): <none>
[08:25:56.201] {
[08:25:56.201]     {
[08:25:56.201]         {
[08:25:56.201]             ...future.startTime <- base::Sys.time()
[08:25:56.201]             {
[08:25:56.201]                 {
[08:25:56.201]                   {
[08:25:56.201]                     {
[08:25:56.201]                       base::local({
[08:25:56.201]                         has_future <- base::requireNamespace("future", 
[08:25:56.201]                           quietly = TRUE)
[08:25:56.201]                         if (has_future) {
[08:25:56.201]                           ns <- base::getNamespace("future")
[08:25:56.201]                           version <- ns[[".package"]][["version"]]
[08:25:56.201]                           if (is.null(version)) 
[08:25:56.201]                             version <- utils::packageVersion("future")
[08:25:56.201]                         }
[08:25:56.201]                         else {
[08:25:56.201]                           version <- NULL
[08:25:56.201]                         }
[08:25:56.201]                         if (!has_future || version < "1.8.0") {
[08:25:56.201]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.201]                             "", base::R.version$version.string), 
[08:25:56.201]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.201]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.201]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.201]                               "release", "version")], collapse = " "), 
[08:25:56.201]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.201]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.201]                             info)
[08:25:56.201]                           info <- base::paste(info, collapse = "; ")
[08:25:56.201]                           if (!has_future) {
[08:25:56.201]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.201]                               info)
[08:25:56.201]                           }
[08:25:56.201]                           else {
[08:25:56.201]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.201]                               info, version)
[08:25:56.201]                           }
[08:25:56.201]                           base::stop(msg)
[08:25:56.201]                         }
[08:25:56.201]                       })
[08:25:56.201]                     }
[08:25:56.201]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.201]                     base::options(mc.cores = 1L)
[08:25:56.201]                   }
[08:25:56.201]                   ...future.strategy.old <- future::plan("list")
[08:25:56.201]                   options(future.plan = NULL)
[08:25:56.201]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.201]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.201]                 }
[08:25:56.201]                 ...future.workdir <- getwd()
[08:25:56.201]             }
[08:25:56.201]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.201]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.201]         }
[08:25:56.201]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.201]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.201]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.201]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.201]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.201]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.201]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.201]             base::names(...future.oldOptions))
[08:25:56.201]     }
[08:25:56.201]     if (FALSE) {
[08:25:56.201]     }
[08:25:56.201]     else {
[08:25:56.201]         if (TRUE) {
[08:25:56.201]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.201]                 open = "w")
[08:25:56.201]         }
[08:25:56.201]         else {
[08:25:56.201]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.201]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.201]         }
[08:25:56.201]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.201]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.201]             base::sink(type = "output", split = FALSE)
[08:25:56.201]             base::close(...future.stdout)
[08:25:56.201]         }, add = TRUE)
[08:25:56.201]     }
[08:25:56.201]     ...future.frame <- base::sys.nframe()
[08:25:56.201]     ...future.conditions <- base::list()
[08:25:56.201]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.201]     if (FALSE) {
[08:25:56.201]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.201]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.201]     }
[08:25:56.201]     ...future.result <- base::tryCatch({
[08:25:56.201]         base::withCallingHandlers({
[08:25:56.201]             ...future.value <- base::withVisible(base::local({
[08:25:56.201]                 ...future.makeSendCondition <- base::local({
[08:25:56.201]                   sendCondition <- NULL
[08:25:56.201]                   function(frame = 1L) {
[08:25:56.201]                     if (is.function(sendCondition)) 
[08:25:56.201]                       return(sendCondition)
[08:25:56.201]                     ns <- getNamespace("parallel")
[08:25:56.201]                     if (exists("sendData", mode = "function", 
[08:25:56.201]                       envir = ns)) {
[08:25:56.201]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.201]                         envir = ns)
[08:25:56.201]                       envir <- sys.frame(frame)
[08:25:56.201]                       master <- NULL
[08:25:56.201]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.201]                         !identical(envir, emptyenv())) {
[08:25:56.201]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.201]                           inherits = FALSE)) {
[08:25:56.201]                           master <- get("master", mode = "list", 
[08:25:56.201]                             envir = envir, inherits = FALSE)
[08:25:56.201]                           if (inherits(master, c("SOCKnode", 
[08:25:56.201]                             "SOCK0node"))) {
[08:25:56.201]                             sendCondition <<- function(cond) {
[08:25:56.201]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.201]                                 success = TRUE)
[08:25:56.201]                               parallel_sendData(master, data)
[08:25:56.201]                             }
[08:25:56.201]                             return(sendCondition)
[08:25:56.201]                           }
[08:25:56.201]                         }
[08:25:56.201]                         frame <- frame + 1L
[08:25:56.201]                         envir <- sys.frame(frame)
[08:25:56.201]                       }
[08:25:56.201]                     }
[08:25:56.201]                     sendCondition <<- function(cond) NULL
[08:25:56.201]                   }
[08:25:56.201]                 })
[08:25:56.201]                 withCallingHandlers({
[08:25:56.201]                   {
[08:25:56.201]                     do.call(function(...) {
[08:25:56.201]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.201]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.201]                         ...future.globals.maxSize)) {
[08:25:56.201]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.201]                         on.exit(options(oopts), add = TRUE)
[08:25:56.201]                       }
[08:25:56.201]                       {
[08:25:56.201]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.201]                           FUN = function(jj) {
[08:25:56.201]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.201]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.201]                               envir = globalenv(), inherits = FALSE)
[08:25:56.201]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.201]                           })
[08:25:56.201]                       }
[08:25:56.201]                     }, args = future.call.arguments)
[08:25:56.201]                   }
[08:25:56.201]                 }, immediateCondition = function(cond) {
[08:25:56.201]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.201]                   sendCondition(cond)
[08:25:56.201]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.201]                   {
[08:25:56.201]                     inherits <- base::inherits
[08:25:56.201]                     invokeRestart <- base::invokeRestart
[08:25:56.201]                     is.null <- base::is.null
[08:25:56.201]                     muffled <- FALSE
[08:25:56.201]                     if (inherits(cond, "message")) {
[08:25:56.201]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.201]                       if (muffled) 
[08:25:56.201]                         invokeRestart("muffleMessage")
[08:25:56.201]                     }
[08:25:56.201]                     else if (inherits(cond, "warning")) {
[08:25:56.201]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.201]                       if (muffled) 
[08:25:56.201]                         invokeRestart("muffleWarning")
[08:25:56.201]                     }
[08:25:56.201]                     else if (inherits(cond, "condition")) {
[08:25:56.201]                       if (!is.null(pattern)) {
[08:25:56.201]                         computeRestarts <- base::computeRestarts
[08:25:56.201]                         grepl <- base::grepl
[08:25:56.201]                         restarts <- computeRestarts(cond)
[08:25:56.201]                         for (restart in restarts) {
[08:25:56.201]                           name <- restart$name
[08:25:56.201]                           if (is.null(name)) 
[08:25:56.201]                             next
[08:25:56.201]                           if (!grepl(pattern, name)) 
[08:25:56.201]                             next
[08:25:56.201]                           invokeRestart(restart)
[08:25:56.201]                           muffled <- TRUE
[08:25:56.201]                           break
[08:25:56.201]                         }
[08:25:56.201]                       }
[08:25:56.201]                     }
[08:25:56.201]                     invisible(muffled)
[08:25:56.201]                   }
[08:25:56.201]                   muffleCondition(cond)
[08:25:56.201]                 })
[08:25:56.201]             }))
[08:25:56.201]             future::FutureResult(value = ...future.value$value, 
[08:25:56.201]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.201]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.201]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.201]                     ...future.globalenv.names))
[08:25:56.201]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.201]         }, condition = base::local({
[08:25:56.201]             c <- base::c
[08:25:56.201]             inherits <- base::inherits
[08:25:56.201]             invokeRestart <- base::invokeRestart
[08:25:56.201]             length <- base::length
[08:25:56.201]             list <- base::list
[08:25:56.201]             seq.int <- base::seq.int
[08:25:56.201]             signalCondition <- base::signalCondition
[08:25:56.201]             sys.calls <- base::sys.calls
[08:25:56.201]             `[[` <- base::`[[`
[08:25:56.201]             `+` <- base::`+`
[08:25:56.201]             `<<-` <- base::`<<-`
[08:25:56.201]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.201]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.201]                   3L)]
[08:25:56.201]             }
[08:25:56.201]             function(cond) {
[08:25:56.201]                 is_error <- inherits(cond, "error")
[08:25:56.201]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.201]                   NULL)
[08:25:56.201]                 if (is_error) {
[08:25:56.201]                   sessionInformation <- function() {
[08:25:56.201]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.201]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.201]                       search = base::search(), system = base::Sys.info())
[08:25:56.201]                   }
[08:25:56.201]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.201]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.201]                     cond$call), session = sessionInformation(), 
[08:25:56.201]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.201]                   signalCondition(cond)
[08:25:56.201]                 }
[08:25:56.201]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.201]                 "immediateCondition"))) {
[08:25:56.201]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.201]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.201]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.201]                   if (TRUE && !signal) {
[08:25:56.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.201]                     {
[08:25:56.201]                       inherits <- base::inherits
[08:25:56.201]                       invokeRestart <- base::invokeRestart
[08:25:56.201]                       is.null <- base::is.null
[08:25:56.201]                       muffled <- FALSE
[08:25:56.201]                       if (inherits(cond, "message")) {
[08:25:56.201]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.201]                         if (muffled) 
[08:25:56.201]                           invokeRestart("muffleMessage")
[08:25:56.201]                       }
[08:25:56.201]                       else if (inherits(cond, "warning")) {
[08:25:56.201]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.201]                         if (muffled) 
[08:25:56.201]                           invokeRestart("muffleWarning")
[08:25:56.201]                       }
[08:25:56.201]                       else if (inherits(cond, "condition")) {
[08:25:56.201]                         if (!is.null(pattern)) {
[08:25:56.201]                           computeRestarts <- base::computeRestarts
[08:25:56.201]                           grepl <- base::grepl
[08:25:56.201]                           restarts <- computeRestarts(cond)
[08:25:56.201]                           for (restart in restarts) {
[08:25:56.201]                             name <- restart$name
[08:25:56.201]                             if (is.null(name)) 
[08:25:56.201]                               next
[08:25:56.201]                             if (!grepl(pattern, name)) 
[08:25:56.201]                               next
[08:25:56.201]                             invokeRestart(restart)
[08:25:56.201]                             muffled <- TRUE
[08:25:56.201]                             break
[08:25:56.201]                           }
[08:25:56.201]                         }
[08:25:56.201]                       }
[08:25:56.201]                       invisible(muffled)
[08:25:56.201]                     }
[08:25:56.201]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.201]                   }
[08:25:56.201]                 }
[08:25:56.201]                 else {
[08:25:56.201]                   if (TRUE) {
[08:25:56.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.201]                     {
[08:25:56.201]                       inherits <- base::inherits
[08:25:56.201]                       invokeRestart <- base::invokeRestart
[08:25:56.201]                       is.null <- base::is.null
[08:25:56.201]                       muffled <- FALSE
[08:25:56.201]                       if (inherits(cond, "message")) {
[08:25:56.201]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.201]                         if (muffled) 
[08:25:56.201]                           invokeRestart("muffleMessage")
[08:25:56.201]                       }
[08:25:56.201]                       else if (inherits(cond, "warning")) {
[08:25:56.201]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.201]                         if (muffled) 
[08:25:56.201]                           invokeRestart("muffleWarning")
[08:25:56.201]                       }
[08:25:56.201]                       else if (inherits(cond, "condition")) {
[08:25:56.201]                         if (!is.null(pattern)) {
[08:25:56.201]                           computeRestarts <- base::computeRestarts
[08:25:56.201]                           grepl <- base::grepl
[08:25:56.201]                           restarts <- computeRestarts(cond)
[08:25:56.201]                           for (restart in restarts) {
[08:25:56.201]                             name <- restart$name
[08:25:56.201]                             if (is.null(name)) 
[08:25:56.201]                               next
[08:25:56.201]                             if (!grepl(pattern, name)) 
[08:25:56.201]                               next
[08:25:56.201]                             invokeRestart(restart)
[08:25:56.201]                             muffled <- TRUE
[08:25:56.201]                             break
[08:25:56.201]                           }
[08:25:56.201]                         }
[08:25:56.201]                       }
[08:25:56.201]                       invisible(muffled)
[08:25:56.201]                     }
[08:25:56.201]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.201]                   }
[08:25:56.201]                 }
[08:25:56.201]             }
[08:25:56.201]         }))
[08:25:56.201]     }, error = function(ex) {
[08:25:56.201]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.201]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.201]                 ...future.rng), started = ...future.startTime, 
[08:25:56.201]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.201]             version = "1.8"), class = "FutureResult")
[08:25:56.201]     }, finally = {
[08:25:56.201]         if (!identical(...future.workdir, getwd())) 
[08:25:56.201]             setwd(...future.workdir)
[08:25:56.201]         {
[08:25:56.201]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.201]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.201]             }
[08:25:56.201]             base::options(...future.oldOptions)
[08:25:56.201]             if (.Platform$OS.type == "windows") {
[08:25:56.201]                 old_names <- names(...future.oldEnvVars)
[08:25:56.201]                 envs <- base::Sys.getenv()
[08:25:56.201]                 names <- names(envs)
[08:25:56.201]                 common <- intersect(names, old_names)
[08:25:56.201]                 added <- setdiff(names, old_names)
[08:25:56.201]                 removed <- setdiff(old_names, names)
[08:25:56.201]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.201]                   envs[common]]
[08:25:56.201]                 NAMES <- toupper(changed)
[08:25:56.201]                 args <- list()
[08:25:56.201]                 for (kk in seq_along(NAMES)) {
[08:25:56.201]                   name <- changed[[kk]]
[08:25:56.201]                   NAME <- NAMES[[kk]]
[08:25:56.201]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.201]                     next
[08:25:56.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.201]                 }
[08:25:56.201]                 NAMES <- toupper(added)
[08:25:56.201]                 for (kk in seq_along(NAMES)) {
[08:25:56.201]                   name <- added[[kk]]
[08:25:56.201]                   NAME <- NAMES[[kk]]
[08:25:56.201]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.201]                     next
[08:25:56.201]                   args[[name]] <- ""
[08:25:56.201]                 }
[08:25:56.201]                 NAMES <- toupper(removed)
[08:25:56.201]                 for (kk in seq_along(NAMES)) {
[08:25:56.201]                   name <- removed[[kk]]
[08:25:56.201]                   NAME <- NAMES[[kk]]
[08:25:56.201]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.201]                     next
[08:25:56.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.201]                 }
[08:25:56.201]                 if (length(args) > 0) 
[08:25:56.201]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.201]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.201]             }
[08:25:56.201]             else {
[08:25:56.201]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.201]             }
[08:25:56.201]             {
[08:25:56.201]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.201]                   0L) {
[08:25:56.201]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.201]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.201]                   base::options(opts)
[08:25:56.201]                 }
[08:25:56.201]                 {
[08:25:56.201]                   {
[08:25:56.201]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.201]                     NULL
[08:25:56.201]                   }
[08:25:56.201]                   options(future.plan = NULL)
[08:25:56.201]                   if (is.na(NA_character_)) 
[08:25:56.201]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.201]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.201]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.201]                     .init = FALSE)
[08:25:56.201]                 }
[08:25:56.201]             }
[08:25:56.201]         }
[08:25:56.201]     })
[08:25:56.201]     if (TRUE) {
[08:25:56.201]         base::sink(type = "output", split = FALSE)
[08:25:56.201]         if (TRUE) {
[08:25:56.201]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.201]         }
[08:25:56.201]         else {
[08:25:56.201]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.201]         }
[08:25:56.201]         base::close(...future.stdout)
[08:25:56.201]         ...future.stdout <- NULL
[08:25:56.201]     }
[08:25:56.201]     ...future.result$conditions <- ...future.conditions
[08:25:56.201]     ...future.result$finished <- base::Sys.time()
[08:25:56.201]     ...future.result
[08:25:56.201] }
[08:25:56.204] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[08:25:56.204] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[08:25:56.205] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[08:25:56.205] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:56.205] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:56.205] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[08:25:56.206] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[08:25:56.206] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[08:25:56.206] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[08:25:56.206] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:56.207] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:56.207] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[08:25:56.207] MultisessionFuture started
[08:25:56.208] - Launch lazy future ... done
[08:25:56.208] run() for ‘MultisessionFuture’ ... done
[08:25:56.208] Created future:
[08:25:56.208] MultisessionFuture:
[08:25:56.208] Label: ‘future_replicate-1’
[08:25:56.208] Expression:
[08:25:56.208] {
[08:25:56.208]     do.call(function(...) {
[08:25:56.208]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.208]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.208]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.208]             on.exit(options(oopts), add = TRUE)
[08:25:56.208]         }
[08:25:56.208]         {
[08:25:56.208]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.208]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.208]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.208]                   envir = globalenv(), inherits = FALSE)
[08:25:56.208]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.208]             })
[08:25:56.208]         }
[08:25:56.208]     }, args = future.call.arguments)
[08:25:56.208] }
[08:25:56.208] Lazy evaluation: FALSE
[08:25:56.208] Asynchronous evaluation: TRUE
[08:25:56.208] Local evaluation: TRUE
[08:25:56.208] Environment: R_GlobalEnv
[08:25:56.208] Capture standard output: TRUE
[08:25:56.208] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.208] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.208] Packages: <none>
[08:25:56.208] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.208] Resolved: FALSE
[08:25:56.208] Value: <not collected>
[08:25:56.208] Conditions captured: <none>
[08:25:56.208] Early signaling: FALSE
[08:25:56.208] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.208] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.220] Chunk #1 of 2 ... DONE
[08:25:56.220] Chunk #2 of 2 ...
[08:25:56.220]  - Finding globals in 'X' for chunk #2 ...
[08:25:56.220] getGlobalsAndPackages() ...
[08:25:56.220] Searching for globals...
[08:25:56.221] 
[08:25:56.221] Searching for globals ... DONE
[08:25:56.221] - globals: [0] <none>
[08:25:56.221] getGlobalsAndPackages() ... DONE
[08:25:56.221]    + additional globals found: [n=0] 
[08:25:56.221]    + additional namespaces needed: [n=0] 
[08:25:56.221]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:56.222]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.222]  - seeds: [3] <seeds>
[08:25:56.222]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.222] getGlobalsAndPackages() ...
[08:25:56.222] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.222] Resolving globals: FALSE
[08:25:56.222] Tweak future expression to call with '...' arguments ...
[08:25:56.223] {
[08:25:56.223]     do.call(function(...) {
[08:25:56.223]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.223]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.223]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.223]             on.exit(options(oopts), add = TRUE)
[08:25:56.223]         }
[08:25:56.223]         {
[08:25:56.223]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.223]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.223]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.223]                   envir = globalenv(), inherits = FALSE)
[08:25:56.223]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.223]             })
[08:25:56.223]         }
[08:25:56.223]     }, args = future.call.arguments)
[08:25:56.223] }
[08:25:56.223] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.223] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.223] 
[08:25:56.224] getGlobalsAndPackages() ... DONE
[08:25:56.224] run() for ‘Future’ ...
[08:25:56.224] - state: ‘created’
[08:25:56.224] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.239] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.239] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.239]   - Field: ‘node’
[08:25:56.240]   - Field: ‘label’
[08:25:56.240]   - Field: ‘local’
[08:25:56.240]   - Field: ‘owner’
[08:25:56.240]   - Field: ‘envir’
[08:25:56.240]   - Field: ‘workers’
[08:25:56.240]   - Field: ‘packages’
[08:25:56.240]   - Field: ‘gc’
[08:25:56.240]   - Field: ‘conditions’
[08:25:56.240]   - Field: ‘persistent’
[08:25:56.240]   - Field: ‘expr’
[08:25:56.241]   - Field: ‘uuid’
[08:25:56.241]   - Field: ‘seed’
[08:25:56.241]   - Field: ‘version’
[08:25:56.241]   - Field: ‘result’
[08:25:56.241]   - Field: ‘asynchronous’
[08:25:56.241]   - Field: ‘calls’
[08:25:56.241]   - Field: ‘globals’
[08:25:56.241]   - Field: ‘stdout’
[08:25:56.241]   - Field: ‘earlySignal’
[08:25:56.242]   - Field: ‘lazy’
[08:25:56.242]   - Field: ‘state’
[08:25:56.242] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.242] - Launch lazy future ...
[08:25:56.242] Packages needed by the future expression (n = 0): <none>
[08:25:56.242] Packages needed by future strategies (n = 0): <none>
[08:25:56.243] {
[08:25:56.243]     {
[08:25:56.243]         {
[08:25:56.243]             ...future.startTime <- base::Sys.time()
[08:25:56.243]             {
[08:25:56.243]                 {
[08:25:56.243]                   {
[08:25:56.243]                     {
[08:25:56.243]                       base::local({
[08:25:56.243]                         has_future <- base::requireNamespace("future", 
[08:25:56.243]                           quietly = TRUE)
[08:25:56.243]                         if (has_future) {
[08:25:56.243]                           ns <- base::getNamespace("future")
[08:25:56.243]                           version <- ns[[".package"]][["version"]]
[08:25:56.243]                           if (is.null(version)) 
[08:25:56.243]                             version <- utils::packageVersion("future")
[08:25:56.243]                         }
[08:25:56.243]                         else {
[08:25:56.243]                           version <- NULL
[08:25:56.243]                         }
[08:25:56.243]                         if (!has_future || version < "1.8.0") {
[08:25:56.243]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.243]                             "", base::R.version$version.string), 
[08:25:56.243]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.243]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.243]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.243]                               "release", "version")], collapse = " "), 
[08:25:56.243]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.243]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.243]                             info)
[08:25:56.243]                           info <- base::paste(info, collapse = "; ")
[08:25:56.243]                           if (!has_future) {
[08:25:56.243]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.243]                               info)
[08:25:56.243]                           }
[08:25:56.243]                           else {
[08:25:56.243]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.243]                               info, version)
[08:25:56.243]                           }
[08:25:56.243]                           base::stop(msg)
[08:25:56.243]                         }
[08:25:56.243]                       })
[08:25:56.243]                     }
[08:25:56.243]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.243]                     base::options(mc.cores = 1L)
[08:25:56.243]                   }
[08:25:56.243]                   ...future.strategy.old <- future::plan("list")
[08:25:56.243]                   options(future.plan = NULL)
[08:25:56.243]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.243]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.243]                 }
[08:25:56.243]                 ...future.workdir <- getwd()
[08:25:56.243]             }
[08:25:56.243]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.243]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.243]         }
[08:25:56.243]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.243]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.243]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.243]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.243]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.243]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.243]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.243]             base::names(...future.oldOptions))
[08:25:56.243]     }
[08:25:56.243]     if (FALSE) {
[08:25:56.243]     }
[08:25:56.243]     else {
[08:25:56.243]         if (TRUE) {
[08:25:56.243]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.243]                 open = "w")
[08:25:56.243]         }
[08:25:56.243]         else {
[08:25:56.243]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.243]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.243]         }
[08:25:56.243]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.243]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.243]             base::sink(type = "output", split = FALSE)
[08:25:56.243]             base::close(...future.stdout)
[08:25:56.243]         }, add = TRUE)
[08:25:56.243]     }
[08:25:56.243]     ...future.frame <- base::sys.nframe()
[08:25:56.243]     ...future.conditions <- base::list()
[08:25:56.243]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.243]     if (FALSE) {
[08:25:56.243]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.243]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.243]     }
[08:25:56.243]     ...future.result <- base::tryCatch({
[08:25:56.243]         base::withCallingHandlers({
[08:25:56.243]             ...future.value <- base::withVisible(base::local({
[08:25:56.243]                 ...future.makeSendCondition <- base::local({
[08:25:56.243]                   sendCondition <- NULL
[08:25:56.243]                   function(frame = 1L) {
[08:25:56.243]                     if (is.function(sendCondition)) 
[08:25:56.243]                       return(sendCondition)
[08:25:56.243]                     ns <- getNamespace("parallel")
[08:25:56.243]                     if (exists("sendData", mode = "function", 
[08:25:56.243]                       envir = ns)) {
[08:25:56.243]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.243]                         envir = ns)
[08:25:56.243]                       envir <- sys.frame(frame)
[08:25:56.243]                       master <- NULL
[08:25:56.243]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.243]                         !identical(envir, emptyenv())) {
[08:25:56.243]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.243]                           inherits = FALSE)) {
[08:25:56.243]                           master <- get("master", mode = "list", 
[08:25:56.243]                             envir = envir, inherits = FALSE)
[08:25:56.243]                           if (inherits(master, c("SOCKnode", 
[08:25:56.243]                             "SOCK0node"))) {
[08:25:56.243]                             sendCondition <<- function(cond) {
[08:25:56.243]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.243]                                 success = TRUE)
[08:25:56.243]                               parallel_sendData(master, data)
[08:25:56.243]                             }
[08:25:56.243]                             return(sendCondition)
[08:25:56.243]                           }
[08:25:56.243]                         }
[08:25:56.243]                         frame <- frame + 1L
[08:25:56.243]                         envir <- sys.frame(frame)
[08:25:56.243]                       }
[08:25:56.243]                     }
[08:25:56.243]                     sendCondition <<- function(cond) NULL
[08:25:56.243]                   }
[08:25:56.243]                 })
[08:25:56.243]                 withCallingHandlers({
[08:25:56.243]                   {
[08:25:56.243]                     do.call(function(...) {
[08:25:56.243]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.243]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.243]                         ...future.globals.maxSize)) {
[08:25:56.243]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.243]                         on.exit(options(oopts), add = TRUE)
[08:25:56.243]                       }
[08:25:56.243]                       {
[08:25:56.243]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.243]                           FUN = function(jj) {
[08:25:56.243]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.243]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.243]                               envir = globalenv(), inherits = FALSE)
[08:25:56.243]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.243]                           })
[08:25:56.243]                       }
[08:25:56.243]                     }, args = future.call.arguments)
[08:25:56.243]                   }
[08:25:56.243]                 }, immediateCondition = function(cond) {
[08:25:56.243]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.243]                   sendCondition(cond)
[08:25:56.243]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.243]                   {
[08:25:56.243]                     inherits <- base::inherits
[08:25:56.243]                     invokeRestart <- base::invokeRestart
[08:25:56.243]                     is.null <- base::is.null
[08:25:56.243]                     muffled <- FALSE
[08:25:56.243]                     if (inherits(cond, "message")) {
[08:25:56.243]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.243]                       if (muffled) 
[08:25:56.243]                         invokeRestart("muffleMessage")
[08:25:56.243]                     }
[08:25:56.243]                     else if (inherits(cond, "warning")) {
[08:25:56.243]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.243]                       if (muffled) 
[08:25:56.243]                         invokeRestart("muffleWarning")
[08:25:56.243]                     }
[08:25:56.243]                     else if (inherits(cond, "condition")) {
[08:25:56.243]                       if (!is.null(pattern)) {
[08:25:56.243]                         computeRestarts <- base::computeRestarts
[08:25:56.243]                         grepl <- base::grepl
[08:25:56.243]                         restarts <- computeRestarts(cond)
[08:25:56.243]                         for (restart in restarts) {
[08:25:56.243]                           name <- restart$name
[08:25:56.243]                           if (is.null(name)) 
[08:25:56.243]                             next
[08:25:56.243]                           if (!grepl(pattern, name)) 
[08:25:56.243]                             next
[08:25:56.243]                           invokeRestart(restart)
[08:25:56.243]                           muffled <- TRUE
[08:25:56.243]                           break
[08:25:56.243]                         }
[08:25:56.243]                       }
[08:25:56.243]                     }
[08:25:56.243]                     invisible(muffled)
[08:25:56.243]                   }
[08:25:56.243]                   muffleCondition(cond)
[08:25:56.243]                 })
[08:25:56.243]             }))
[08:25:56.243]             future::FutureResult(value = ...future.value$value, 
[08:25:56.243]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.243]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.243]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.243]                     ...future.globalenv.names))
[08:25:56.243]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.243]         }, condition = base::local({
[08:25:56.243]             c <- base::c
[08:25:56.243]             inherits <- base::inherits
[08:25:56.243]             invokeRestart <- base::invokeRestart
[08:25:56.243]             length <- base::length
[08:25:56.243]             list <- base::list
[08:25:56.243]             seq.int <- base::seq.int
[08:25:56.243]             signalCondition <- base::signalCondition
[08:25:56.243]             sys.calls <- base::sys.calls
[08:25:56.243]             `[[` <- base::`[[`
[08:25:56.243]             `+` <- base::`+`
[08:25:56.243]             `<<-` <- base::`<<-`
[08:25:56.243]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.243]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.243]                   3L)]
[08:25:56.243]             }
[08:25:56.243]             function(cond) {
[08:25:56.243]                 is_error <- inherits(cond, "error")
[08:25:56.243]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.243]                   NULL)
[08:25:56.243]                 if (is_error) {
[08:25:56.243]                   sessionInformation <- function() {
[08:25:56.243]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.243]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.243]                       search = base::search(), system = base::Sys.info())
[08:25:56.243]                   }
[08:25:56.243]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.243]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.243]                     cond$call), session = sessionInformation(), 
[08:25:56.243]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.243]                   signalCondition(cond)
[08:25:56.243]                 }
[08:25:56.243]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.243]                 "immediateCondition"))) {
[08:25:56.243]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.243]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.243]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.243]                   if (TRUE && !signal) {
[08:25:56.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.243]                     {
[08:25:56.243]                       inherits <- base::inherits
[08:25:56.243]                       invokeRestart <- base::invokeRestart
[08:25:56.243]                       is.null <- base::is.null
[08:25:56.243]                       muffled <- FALSE
[08:25:56.243]                       if (inherits(cond, "message")) {
[08:25:56.243]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.243]                         if (muffled) 
[08:25:56.243]                           invokeRestart("muffleMessage")
[08:25:56.243]                       }
[08:25:56.243]                       else if (inherits(cond, "warning")) {
[08:25:56.243]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.243]                         if (muffled) 
[08:25:56.243]                           invokeRestart("muffleWarning")
[08:25:56.243]                       }
[08:25:56.243]                       else if (inherits(cond, "condition")) {
[08:25:56.243]                         if (!is.null(pattern)) {
[08:25:56.243]                           computeRestarts <- base::computeRestarts
[08:25:56.243]                           grepl <- base::grepl
[08:25:56.243]                           restarts <- computeRestarts(cond)
[08:25:56.243]                           for (restart in restarts) {
[08:25:56.243]                             name <- restart$name
[08:25:56.243]                             if (is.null(name)) 
[08:25:56.243]                               next
[08:25:56.243]                             if (!grepl(pattern, name)) 
[08:25:56.243]                               next
[08:25:56.243]                             invokeRestart(restart)
[08:25:56.243]                             muffled <- TRUE
[08:25:56.243]                             break
[08:25:56.243]                           }
[08:25:56.243]                         }
[08:25:56.243]                       }
[08:25:56.243]                       invisible(muffled)
[08:25:56.243]                     }
[08:25:56.243]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.243]                   }
[08:25:56.243]                 }
[08:25:56.243]                 else {
[08:25:56.243]                   if (TRUE) {
[08:25:56.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.243]                     {
[08:25:56.243]                       inherits <- base::inherits
[08:25:56.243]                       invokeRestart <- base::invokeRestart
[08:25:56.243]                       is.null <- base::is.null
[08:25:56.243]                       muffled <- FALSE
[08:25:56.243]                       if (inherits(cond, "message")) {
[08:25:56.243]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.243]                         if (muffled) 
[08:25:56.243]                           invokeRestart("muffleMessage")
[08:25:56.243]                       }
[08:25:56.243]                       else if (inherits(cond, "warning")) {
[08:25:56.243]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.243]                         if (muffled) 
[08:25:56.243]                           invokeRestart("muffleWarning")
[08:25:56.243]                       }
[08:25:56.243]                       else if (inherits(cond, "condition")) {
[08:25:56.243]                         if (!is.null(pattern)) {
[08:25:56.243]                           computeRestarts <- base::computeRestarts
[08:25:56.243]                           grepl <- base::grepl
[08:25:56.243]                           restarts <- computeRestarts(cond)
[08:25:56.243]                           for (restart in restarts) {
[08:25:56.243]                             name <- restart$name
[08:25:56.243]                             if (is.null(name)) 
[08:25:56.243]                               next
[08:25:56.243]                             if (!grepl(pattern, name)) 
[08:25:56.243]                               next
[08:25:56.243]                             invokeRestart(restart)
[08:25:56.243]                             muffled <- TRUE
[08:25:56.243]                             break
[08:25:56.243]                           }
[08:25:56.243]                         }
[08:25:56.243]                       }
[08:25:56.243]                       invisible(muffled)
[08:25:56.243]                     }
[08:25:56.243]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.243]                   }
[08:25:56.243]                 }
[08:25:56.243]             }
[08:25:56.243]         }))
[08:25:56.243]     }, error = function(ex) {
[08:25:56.243]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.243]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.243]                 ...future.rng), started = ...future.startTime, 
[08:25:56.243]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.243]             version = "1.8"), class = "FutureResult")
[08:25:56.243]     }, finally = {
[08:25:56.243]         if (!identical(...future.workdir, getwd())) 
[08:25:56.243]             setwd(...future.workdir)
[08:25:56.243]         {
[08:25:56.243]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.243]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.243]             }
[08:25:56.243]             base::options(...future.oldOptions)
[08:25:56.243]             if (.Platform$OS.type == "windows") {
[08:25:56.243]                 old_names <- names(...future.oldEnvVars)
[08:25:56.243]                 envs <- base::Sys.getenv()
[08:25:56.243]                 names <- names(envs)
[08:25:56.243]                 common <- intersect(names, old_names)
[08:25:56.243]                 added <- setdiff(names, old_names)
[08:25:56.243]                 removed <- setdiff(old_names, names)
[08:25:56.243]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.243]                   envs[common]]
[08:25:56.243]                 NAMES <- toupper(changed)
[08:25:56.243]                 args <- list()
[08:25:56.243]                 for (kk in seq_along(NAMES)) {
[08:25:56.243]                   name <- changed[[kk]]
[08:25:56.243]                   NAME <- NAMES[[kk]]
[08:25:56.243]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.243]                     next
[08:25:56.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.243]                 }
[08:25:56.243]                 NAMES <- toupper(added)
[08:25:56.243]                 for (kk in seq_along(NAMES)) {
[08:25:56.243]                   name <- added[[kk]]
[08:25:56.243]                   NAME <- NAMES[[kk]]
[08:25:56.243]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.243]                     next
[08:25:56.243]                   args[[name]] <- ""
[08:25:56.243]                 }
[08:25:56.243]                 NAMES <- toupper(removed)
[08:25:56.243]                 for (kk in seq_along(NAMES)) {
[08:25:56.243]                   name <- removed[[kk]]
[08:25:56.243]                   NAME <- NAMES[[kk]]
[08:25:56.243]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.243]                     next
[08:25:56.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.243]                 }
[08:25:56.243]                 if (length(args) > 0) 
[08:25:56.243]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.243]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.243]             }
[08:25:56.243]             else {
[08:25:56.243]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.243]             }
[08:25:56.243]             {
[08:25:56.243]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.243]                   0L) {
[08:25:56.243]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.243]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.243]                   base::options(opts)
[08:25:56.243]                 }
[08:25:56.243]                 {
[08:25:56.243]                   {
[08:25:56.243]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.243]                     NULL
[08:25:56.243]                   }
[08:25:56.243]                   options(future.plan = NULL)
[08:25:56.243]                   if (is.na(NA_character_)) 
[08:25:56.243]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.243]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.243]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.243]                     .init = FALSE)
[08:25:56.243]                 }
[08:25:56.243]             }
[08:25:56.243]         }
[08:25:56.243]     })
[08:25:56.243]     if (TRUE) {
[08:25:56.243]         base::sink(type = "output", split = FALSE)
[08:25:56.243]         if (TRUE) {
[08:25:56.243]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.243]         }
[08:25:56.243]         else {
[08:25:56.243]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.243]         }
[08:25:56.243]         base::close(...future.stdout)
[08:25:56.243]         ...future.stdout <- NULL
[08:25:56.243]     }
[08:25:56.243]     ...future.result$conditions <- ...future.conditions
[08:25:56.243]     ...future.result$finished <- base::Sys.time()
[08:25:56.243]     ...future.result
[08:25:56.243] }
[08:25:56.299] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[08:25:56.299] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[08:25:56.300] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[08:25:56.300] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:56.301] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:56.301] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[08:25:56.301] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[08:25:56.301] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[08:25:56.302] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[08:25:56.302] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:56.302] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:56.302] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[08:25:56.303] MultisessionFuture started
[08:25:56.303] - Launch lazy future ... done
[08:25:56.303] run() for ‘MultisessionFuture’ ... done
[08:25:56.303] Created future:
[08:25:56.304] MultisessionFuture:
[08:25:56.304] Label: ‘future_replicate-2’
[08:25:56.304] Expression:
[08:25:56.304] {
[08:25:56.304]     do.call(function(...) {
[08:25:56.304]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.304]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.304]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.304]             on.exit(options(oopts), add = TRUE)
[08:25:56.304]         }
[08:25:56.304]         {
[08:25:56.304]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.304]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.304]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.304]                   envir = globalenv(), inherits = FALSE)
[08:25:56.304]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.304]             })
[08:25:56.304]         }
[08:25:56.304]     }, args = future.call.arguments)
[08:25:56.304] }
[08:25:56.304] Lazy evaluation: FALSE
[08:25:56.304] Asynchronous evaluation: TRUE
[08:25:56.304] Local evaluation: TRUE
[08:25:56.304] Environment: R_GlobalEnv
[08:25:56.304] Capture standard output: TRUE
[08:25:56.304] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.304] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.304] Packages: <none>
[08:25:56.304] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.304] Resolved: FALSE
[08:25:56.304] Value: <not collected>
[08:25:56.304] Conditions captured: <none>
[08:25:56.304] Early signaling: FALSE
[08:25:56.304] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.304] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.315] Chunk #2 of 2 ... DONE
[08:25:56.315] Launching 2 futures (chunks) ... DONE
[08:25:56.316] Resolving 2 futures (chunks) ...
[08:25:56.316] resolve() on list ...
[08:25:56.316]  recursive: 0
[08:25:56.316]  length: 2
[08:25:56.316] 
[08:25:56.317] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.317] - Validating connection of MultisessionFuture
[08:25:56.317] - received message: FutureResult
[08:25:56.317] - Received FutureResult
[08:25:56.317] - Erased future from FutureRegistry
[08:25:56.317] result() for ClusterFuture ...
[08:25:56.318] - result already collected: FutureResult
[08:25:56.318] result() for ClusterFuture ... done
[08:25:56.318] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.318] Future #1
[08:25:56.318] result() for ClusterFuture ...
[08:25:56.318] - result already collected: FutureResult
[08:25:56.318] result() for ClusterFuture ... done
[08:25:56.318] result() for ClusterFuture ...
[08:25:56.318] - result already collected: FutureResult
[08:25:56.319] result() for ClusterFuture ... done
[08:25:56.319] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:56.319] - nx: 2
[08:25:56.319] - relay: TRUE
[08:25:56.319] - stdout: TRUE
[08:25:56.319] - signal: TRUE
[08:25:56.319] - resignal: FALSE
[08:25:56.319] - force: TRUE
[08:25:56.319] - relayed: [n=2] FALSE, FALSE
[08:25:56.319] - queued futures: [n=2] FALSE, FALSE
[08:25:56.320]  - until=1
[08:25:56.320]  - relaying element #1
[08:25:56.320] result() for ClusterFuture ...
[08:25:56.320] - result already collected: FutureResult
[08:25:56.320] result() for ClusterFuture ... done
[08:25:56.320] result() for ClusterFuture ...
[08:25:56.320] - result already collected: FutureResult
[08:25:56.320] result() for ClusterFuture ... done
[08:25:56.320] result() for ClusterFuture ...
[08:25:56.321] - result already collected: FutureResult
[08:25:56.321] result() for ClusterFuture ... done
[08:25:56.321] result() for ClusterFuture ...
[08:25:56.321] - result already collected: FutureResult
[08:25:56.321] result() for ClusterFuture ... done
[08:25:56.321] - relayed: [n=2] TRUE, FALSE
[08:25:56.321] - queued futures: [n=2] TRUE, FALSE
[08:25:56.321] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:56.321]  length: 1 (resolved future 1)
[08:25:56.385] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.385] - Validating connection of MultisessionFuture
[08:25:56.385] - received message: FutureResult
[08:25:56.385] - Received FutureResult
[08:25:56.386] - Erased future from FutureRegistry
[08:25:56.386] result() for ClusterFuture ...
[08:25:56.386] - result already collected: FutureResult
[08:25:56.386] result() for ClusterFuture ... done
[08:25:56.386] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.386] Future #2
[08:25:56.386] result() for ClusterFuture ...
[08:25:56.386] - result already collected: FutureResult
[08:25:56.386] result() for ClusterFuture ... done
[08:25:56.387] result() for ClusterFuture ...
[08:25:56.387] - result already collected: FutureResult
[08:25:56.387] result() for ClusterFuture ... done
[08:25:56.387] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:56.387] - nx: 2
[08:25:56.387] - relay: TRUE
[08:25:56.387] - stdout: TRUE
[08:25:56.387] - signal: TRUE
[08:25:56.387] - resignal: FALSE
[08:25:56.388] - force: TRUE
[08:25:56.388] - relayed: [n=2] TRUE, FALSE
[08:25:56.388] - queued futures: [n=2] TRUE, FALSE
[08:25:56.388]  - until=2
[08:25:56.388]  - relaying element #2
[08:25:56.388] result() for ClusterFuture ...
[08:25:56.388] - result already collected: FutureResult
[08:25:56.388] result() for ClusterFuture ... done
[08:25:56.388] result() for ClusterFuture ...
[08:25:56.388] - result already collected: FutureResult
[08:25:56.389] result() for ClusterFuture ... done
[08:25:56.389] result() for ClusterFuture ...
[08:25:56.389] - result already collected: FutureResult
[08:25:56.389] result() for ClusterFuture ... done
[08:25:56.389] result() for ClusterFuture ...
[08:25:56.389] - result already collected: FutureResult
[08:25:56.389] result() for ClusterFuture ... done
[08:25:56.389] - relayed: [n=2] TRUE, TRUE
[08:25:56.389] - queued futures: [n=2] TRUE, TRUE
[08:25:56.390] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:56.390]  length: 0 (resolved future 2)
[08:25:56.390] Relaying remaining futures
[08:25:56.390] signalConditionsASAP(NULL, pos=0) ...
[08:25:56.390] - nx: 2
[08:25:56.390] - relay: TRUE
[08:25:56.390] - stdout: TRUE
[08:25:56.390] - signal: TRUE
[08:25:56.390] - resignal: FALSE
[08:25:56.390] - force: TRUE
[08:25:56.391] - relayed: [n=2] TRUE, TRUE
[08:25:56.391] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:56.391] - relayed: [n=2] TRUE, TRUE
[08:25:56.391] - queued futures: [n=2] TRUE, TRUE
[08:25:56.391] signalConditionsASAP(NULL, pos=0) ... done
[08:25:56.391] resolve() on list ... DONE
[08:25:56.391] result() for ClusterFuture ...
[08:25:56.391] - result already collected: FutureResult
[08:25:56.392] result() for ClusterFuture ... done
[08:25:56.392] result() for ClusterFuture ...
[08:25:56.392] - result already collected: FutureResult
[08:25:56.392] result() for ClusterFuture ... done
[08:25:56.392] result() for ClusterFuture ...
[08:25:56.392] - result already collected: FutureResult
[08:25:56.392] result() for ClusterFuture ... done
[08:25:56.392] result() for ClusterFuture ...
[08:25:56.392] - result already collected: FutureResult
[08:25:56.392] result() for ClusterFuture ... done
[08:25:56.393]  - Number of value chunks collected: 2
[08:25:56.393] Resolving 2 futures (chunks) ... DONE
[08:25:56.393] Reducing values from 2 chunks ...
[08:25:56.393]  - Number of values collected after concatenation: 5
[08:25:56.393]  - Number of values expected: 5
[08:25:56.393] Reducing values from 2 chunks ... DONE
[08:25:56.393] future_lapply() ... DONE
[08:25:56.393] future_lapply() ...
[08:25:56.394] Generating random seeds ...
[08:25:56.394] Generating random seed streams for 5 elements ...
[08:25:56.394] Generating random seed streams for 5 elements ... DONE
[08:25:56.394] Generating random seeds ... DONE
[08:25:56.395] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:56.397] Number of chunks: 2
[08:25:56.397] getGlobalsAndPackagesXApply() ...
[08:25:56.397]  - future.globals: TRUE
[08:25:56.397] getGlobalsAndPackages() ...
[08:25:56.397] Searching for globals...
[08:25:56.399] - globals found: [2] ‘FUN’, ‘sample’
[08:25:56.399] Searching for globals ... DONE
[08:25:56.399] Resolving globals: FALSE
[08:25:56.399] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:56.400] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:56.400] - globals: [1] ‘FUN’
[08:25:56.400] 
[08:25:56.400] getGlobalsAndPackages() ... DONE
[08:25:56.400]  - globals found/used: [n=1] ‘FUN’
[08:25:56.400]  - needed namespaces: [n=0] 
[08:25:56.401] Finding globals ... DONE
[08:25:56.401]  - use_args: TRUE
[08:25:56.401]  - Getting '...' globals ...
[08:25:56.401] resolve() on list ...
[08:25:56.401]  recursive: 0
[08:25:56.401]  length: 1
[08:25:56.402]  elements: ‘...’
[08:25:56.402]  length: 0 (resolved future 1)
[08:25:56.402] resolve() on list ... DONE
[08:25:56.402]    - '...' content: [n=0] 
[08:25:56.402] List of 1
[08:25:56.402]  $ ...: list()
[08:25:56.402]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.402]  - attr(*, "where")=List of 1
[08:25:56.402]   ..$ ...:<environment: 0x55f77a03f368> 
[08:25:56.402]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.402]  - attr(*, "resolved")= logi TRUE
[08:25:56.402]  - attr(*, "total_size")= num NA
[08:25:56.405]  - Getting '...' globals ... DONE
[08:25:56.405] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:56.405] List of 2
[08:25:56.405]  $ ...future.FUN:function (...)  
[08:25:56.405]  $ ...          : list()
[08:25:56.405]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.405]  - attr(*, "where")=List of 2
[08:25:56.405]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:56.405]   ..$ ...          :<environment: 0x55f77a03f368> 
[08:25:56.405]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.405]  - attr(*, "resolved")= logi FALSE
[08:25:56.405]  - attr(*, "total_size")= num 7184
[08:25:56.409] Packages to be attached in all futures: [n=0] 
[08:25:56.409] getGlobalsAndPackagesXApply() ... DONE
[08:25:56.409] Number of futures (= number of chunks): 2
[08:25:56.409] Launching 2 futures (chunks) ...
[08:25:56.409] Chunk #1 of 2 ...
[08:25:56.410]  - Finding globals in 'X' for chunk #1 ...
[08:25:56.410] getGlobalsAndPackages() ...
[08:25:56.410] Searching for globals...
[08:25:56.410] 
[08:25:56.410] Searching for globals ... DONE
[08:25:56.410] - globals: [0] <none>
[08:25:56.410] getGlobalsAndPackages() ... DONE
[08:25:56.410]    + additional globals found: [n=0] 
[08:25:56.411]    + additional namespaces needed: [n=0] 
[08:25:56.411]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:56.411]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.411]  - seeds: [2] <seeds>
[08:25:56.411]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.414] getGlobalsAndPackages() ...
[08:25:56.414] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.414] Resolving globals: FALSE
[08:25:56.414] Tweak future expression to call with '...' arguments ...
[08:25:56.414] {
[08:25:56.414]     do.call(function(...) {
[08:25:56.414]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.414]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.414]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.414]             on.exit(options(oopts), add = TRUE)
[08:25:56.414]         }
[08:25:56.414]         {
[08:25:56.414]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.414]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.414]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.414]                   envir = globalenv(), inherits = FALSE)
[08:25:56.414]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.414]             })
[08:25:56.414]         }
[08:25:56.414]     }, args = future.call.arguments)
[08:25:56.414] }
[08:25:56.414] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.415] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.415] 
[08:25:56.415] getGlobalsAndPackages() ... DONE
[08:25:56.415] run() for ‘Future’ ...
[08:25:56.415] - state: ‘created’
[08:25:56.415] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.429] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.430] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.430]   - Field: ‘node’
[08:25:56.430]   - Field: ‘label’
[08:25:56.430]   - Field: ‘local’
[08:25:56.430]   - Field: ‘owner’
[08:25:56.430]   - Field: ‘envir’
[08:25:56.430]   - Field: ‘workers’
[08:25:56.430]   - Field: ‘packages’
[08:25:56.430]   - Field: ‘gc’
[08:25:56.430]   - Field: ‘conditions’
[08:25:56.430]   - Field: ‘persistent’
[08:25:56.431]   - Field: ‘expr’
[08:25:56.431]   - Field: ‘uuid’
[08:25:56.431]   - Field: ‘seed’
[08:25:56.431]   - Field: ‘version’
[08:25:56.431]   - Field: ‘result’
[08:25:56.431]   - Field: ‘asynchronous’
[08:25:56.431]   - Field: ‘calls’
[08:25:56.431]   - Field: ‘globals’
[08:25:56.431]   - Field: ‘stdout’
[08:25:56.431]   - Field: ‘earlySignal’
[08:25:56.431]   - Field: ‘lazy’
[08:25:56.431]   - Field: ‘state’
[08:25:56.432] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.432] - Launch lazy future ...
[08:25:56.432] Packages needed by the future expression (n = 0): <none>
[08:25:56.432] Packages needed by future strategies (n = 0): <none>
[08:25:56.432] {
[08:25:56.432]     {
[08:25:56.432]         {
[08:25:56.432]             ...future.startTime <- base::Sys.time()
[08:25:56.432]             {
[08:25:56.432]                 {
[08:25:56.432]                   {
[08:25:56.432]                     {
[08:25:56.432]                       base::local({
[08:25:56.432]                         has_future <- base::requireNamespace("future", 
[08:25:56.432]                           quietly = TRUE)
[08:25:56.432]                         if (has_future) {
[08:25:56.432]                           ns <- base::getNamespace("future")
[08:25:56.432]                           version <- ns[[".package"]][["version"]]
[08:25:56.432]                           if (is.null(version)) 
[08:25:56.432]                             version <- utils::packageVersion("future")
[08:25:56.432]                         }
[08:25:56.432]                         else {
[08:25:56.432]                           version <- NULL
[08:25:56.432]                         }
[08:25:56.432]                         if (!has_future || version < "1.8.0") {
[08:25:56.432]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.432]                             "", base::R.version$version.string), 
[08:25:56.432]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.432]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.432]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.432]                               "release", "version")], collapse = " "), 
[08:25:56.432]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.432]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.432]                             info)
[08:25:56.432]                           info <- base::paste(info, collapse = "; ")
[08:25:56.432]                           if (!has_future) {
[08:25:56.432]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.432]                               info)
[08:25:56.432]                           }
[08:25:56.432]                           else {
[08:25:56.432]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.432]                               info, version)
[08:25:56.432]                           }
[08:25:56.432]                           base::stop(msg)
[08:25:56.432]                         }
[08:25:56.432]                       })
[08:25:56.432]                     }
[08:25:56.432]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.432]                     base::options(mc.cores = 1L)
[08:25:56.432]                   }
[08:25:56.432]                   ...future.strategy.old <- future::plan("list")
[08:25:56.432]                   options(future.plan = NULL)
[08:25:56.432]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.432]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.432]                 }
[08:25:56.432]                 ...future.workdir <- getwd()
[08:25:56.432]             }
[08:25:56.432]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.432]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.432]         }
[08:25:56.432]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.432]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.432]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.432]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.432]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.432]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.432]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.432]             base::names(...future.oldOptions))
[08:25:56.432]     }
[08:25:56.432]     if (FALSE) {
[08:25:56.432]     }
[08:25:56.432]     else {
[08:25:56.432]         if (TRUE) {
[08:25:56.432]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.432]                 open = "w")
[08:25:56.432]         }
[08:25:56.432]         else {
[08:25:56.432]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.432]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.432]         }
[08:25:56.432]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.432]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.432]             base::sink(type = "output", split = FALSE)
[08:25:56.432]             base::close(...future.stdout)
[08:25:56.432]         }, add = TRUE)
[08:25:56.432]     }
[08:25:56.432]     ...future.frame <- base::sys.nframe()
[08:25:56.432]     ...future.conditions <- base::list()
[08:25:56.432]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.432]     if (FALSE) {
[08:25:56.432]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.432]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.432]     }
[08:25:56.432]     ...future.result <- base::tryCatch({
[08:25:56.432]         base::withCallingHandlers({
[08:25:56.432]             ...future.value <- base::withVisible(base::local({
[08:25:56.432]                 ...future.makeSendCondition <- base::local({
[08:25:56.432]                   sendCondition <- NULL
[08:25:56.432]                   function(frame = 1L) {
[08:25:56.432]                     if (is.function(sendCondition)) 
[08:25:56.432]                       return(sendCondition)
[08:25:56.432]                     ns <- getNamespace("parallel")
[08:25:56.432]                     if (exists("sendData", mode = "function", 
[08:25:56.432]                       envir = ns)) {
[08:25:56.432]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.432]                         envir = ns)
[08:25:56.432]                       envir <- sys.frame(frame)
[08:25:56.432]                       master <- NULL
[08:25:56.432]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.432]                         !identical(envir, emptyenv())) {
[08:25:56.432]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.432]                           inherits = FALSE)) {
[08:25:56.432]                           master <- get("master", mode = "list", 
[08:25:56.432]                             envir = envir, inherits = FALSE)
[08:25:56.432]                           if (inherits(master, c("SOCKnode", 
[08:25:56.432]                             "SOCK0node"))) {
[08:25:56.432]                             sendCondition <<- function(cond) {
[08:25:56.432]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.432]                                 success = TRUE)
[08:25:56.432]                               parallel_sendData(master, data)
[08:25:56.432]                             }
[08:25:56.432]                             return(sendCondition)
[08:25:56.432]                           }
[08:25:56.432]                         }
[08:25:56.432]                         frame <- frame + 1L
[08:25:56.432]                         envir <- sys.frame(frame)
[08:25:56.432]                       }
[08:25:56.432]                     }
[08:25:56.432]                     sendCondition <<- function(cond) NULL
[08:25:56.432]                   }
[08:25:56.432]                 })
[08:25:56.432]                 withCallingHandlers({
[08:25:56.432]                   {
[08:25:56.432]                     do.call(function(...) {
[08:25:56.432]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.432]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.432]                         ...future.globals.maxSize)) {
[08:25:56.432]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.432]                         on.exit(options(oopts), add = TRUE)
[08:25:56.432]                       }
[08:25:56.432]                       {
[08:25:56.432]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.432]                           FUN = function(jj) {
[08:25:56.432]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.432]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.432]                               envir = globalenv(), inherits = FALSE)
[08:25:56.432]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.432]                           })
[08:25:56.432]                       }
[08:25:56.432]                     }, args = future.call.arguments)
[08:25:56.432]                   }
[08:25:56.432]                 }, immediateCondition = function(cond) {
[08:25:56.432]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.432]                   sendCondition(cond)
[08:25:56.432]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.432]                   {
[08:25:56.432]                     inherits <- base::inherits
[08:25:56.432]                     invokeRestart <- base::invokeRestart
[08:25:56.432]                     is.null <- base::is.null
[08:25:56.432]                     muffled <- FALSE
[08:25:56.432]                     if (inherits(cond, "message")) {
[08:25:56.432]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.432]                       if (muffled) 
[08:25:56.432]                         invokeRestart("muffleMessage")
[08:25:56.432]                     }
[08:25:56.432]                     else if (inherits(cond, "warning")) {
[08:25:56.432]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.432]                       if (muffled) 
[08:25:56.432]                         invokeRestart("muffleWarning")
[08:25:56.432]                     }
[08:25:56.432]                     else if (inherits(cond, "condition")) {
[08:25:56.432]                       if (!is.null(pattern)) {
[08:25:56.432]                         computeRestarts <- base::computeRestarts
[08:25:56.432]                         grepl <- base::grepl
[08:25:56.432]                         restarts <- computeRestarts(cond)
[08:25:56.432]                         for (restart in restarts) {
[08:25:56.432]                           name <- restart$name
[08:25:56.432]                           if (is.null(name)) 
[08:25:56.432]                             next
[08:25:56.432]                           if (!grepl(pattern, name)) 
[08:25:56.432]                             next
[08:25:56.432]                           invokeRestart(restart)
[08:25:56.432]                           muffled <- TRUE
[08:25:56.432]                           break
[08:25:56.432]                         }
[08:25:56.432]                       }
[08:25:56.432]                     }
[08:25:56.432]                     invisible(muffled)
[08:25:56.432]                   }
[08:25:56.432]                   muffleCondition(cond)
[08:25:56.432]                 })
[08:25:56.432]             }))
[08:25:56.432]             future::FutureResult(value = ...future.value$value, 
[08:25:56.432]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.432]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.432]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.432]                     ...future.globalenv.names))
[08:25:56.432]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.432]         }, condition = base::local({
[08:25:56.432]             c <- base::c
[08:25:56.432]             inherits <- base::inherits
[08:25:56.432]             invokeRestart <- base::invokeRestart
[08:25:56.432]             length <- base::length
[08:25:56.432]             list <- base::list
[08:25:56.432]             seq.int <- base::seq.int
[08:25:56.432]             signalCondition <- base::signalCondition
[08:25:56.432]             sys.calls <- base::sys.calls
[08:25:56.432]             `[[` <- base::`[[`
[08:25:56.432]             `+` <- base::`+`
[08:25:56.432]             `<<-` <- base::`<<-`
[08:25:56.432]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.432]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.432]                   3L)]
[08:25:56.432]             }
[08:25:56.432]             function(cond) {
[08:25:56.432]                 is_error <- inherits(cond, "error")
[08:25:56.432]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.432]                   NULL)
[08:25:56.432]                 if (is_error) {
[08:25:56.432]                   sessionInformation <- function() {
[08:25:56.432]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.432]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.432]                       search = base::search(), system = base::Sys.info())
[08:25:56.432]                   }
[08:25:56.432]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.432]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.432]                     cond$call), session = sessionInformation(), 
[08:25:56.432]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.432]                   signalCondition(cond)
[08:25:56.432]                 }
[08:25:56.432]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.432]                 "immediateCondition"))) {
[08:25:56.432]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.432]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.432]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.432]                   if (TRUE && !signal) {
[08:25:56.432]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.432]                     {
[08:25:56.432]                       inherits <- base::inherits
[08:25:56.432]                       invokeRestart <- base::invokeRestart
[08:25:56.432]                       is.null <- base::is.null
[08:25:56.432]                       muffled <- FALSE
[08:25:56.432]                       if (inherits(cond, "message")) {
[08:25:56.432]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.432]                         if (muffled) 
[08:25:56.432]                           invokeRestart("muffleMessage")
[08:25:56.432]                       }
[08:25:56.432]                       else if (inherits(cond, "warning")) {
[08:25:56.432]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.432]                         if (muffled) 
[08:25:56.432]                           invokeRestart("muffleWarning")
[08:25:56.432]                       }
[08:25:56.432]                       else if (inherits(cond, "condition")) {
[08:25:56.432]                         if (!is.null(pattern)) {
[08:25:56.432]                           computeRestarts <- base::computeRestarts
[08:25:56.432]                           grepl <- base::grepl
[08:25:56.432]                           restarts <- computeRestarts(cond)
[08:25:56.432]                           for (restart in restarts) {
[08:25:56.432]                             name <- restart$name
[08:25:56.432]                             if (is.null(name)) 
[08:25:56.432]                               next
[08:25:56.432]                             if (!grepl(pattern, name)) 
[08:25:56.432]                               next
[08:25:56.432]                             invokeRestart(restart)
[08:25:56.432]                             muffled <- TRUE
[08:25:56.432]                             break
[08:25:56.432]                           }
[08:25:56.432]                         }
[08:25:56.432]                       }
[08:25:56.432]                       invisible(muffled)
[08:25:56.432]                     }
[08:25:56.432]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.432]                   }
[08:25:56.432]                 }
[08:25:56.432]                 else {
[08:25:56.432]                   if (TRUE) {
[08:25:56.432]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.432]                     {
[08:25:56.432]                       inherits <- base::inherits
[08:25:56.432]                       invokeRestart <- base::invokeRestart
[08:25:56.432]                       is.null <- base::is.null
[08:25:56.432]                       muffled <- FALSE
[08:25:56.432]                       if (inherits(cond, "message")) {
[08:25:56.432]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.432]                         if (muffled) 
[08:25:56.432]                           invokeRestart("muffleMessage")
[08:25:56.432]                       }
[08:25:56.432]                       else if (inherits(cond, "warning")) {
[08:25:56.432]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.432]                         if (muffled) 
[08:25:56.432]                           invokeRestart("muffleWarning")
[08:25:56.432]                       }
[08:25:56.432]                       else if (inherits(cond, "condition")) {
[08:25:56.432]                         if (!is.null(pattern)) {
[08:25:56.432]                           computeRestarts <- base::computeRestarts
[08:25:56.432]                           grepl <- base::grepl
[08:25:56.432]                           restarts <- computeRestarts(cond)
[08:25:56.432]                           for (restart in restarts) {
[08:25:56.432]                             name <- restart$name
[08:25:56.432]                             if (is.null(name)) 
[08:25:56.432]                               next
[08:25:56.432]                             if (!grepl(pattern, name)) 
[08:25:56.432]                               next
[08:25:56.432]                             invokeRestart(restart)
[08:25:56.432]                             muffled <- TRUE
[08:25:56.432]                             break
[08:25:56.432]                           }
[08:25:56.432]                         }
[08:25:56.432]                       }
[08:25:56.432]                       invisible(muffled)
[08:25:56.432]                     }
[08:25:56.432]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.432]                   }
[08:25:56.432]                 }
[08:25:56.432]             }
[08:25:56.432]         }))
[08:25:56.432]     }, error = function(ex) {
[08:25:56.432]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.432]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.432]                 ...future.rng), started = ...future.startTime, 
[08:25:56.432]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.432]             version = "1.8"), class = "FutureResult")
[08:25:56.432]     }, finally = {
[08:25:56.432]         if (!identical(...future.workdir, getwd())) 
[08:25:56.432]             setwd(...future.workdir)
[08:25:56.432]         {
[08:25:56.432]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.432]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.432]             }
[08:25:56.432]             base::options(...future.oldOptions)
[08:25:56.432]             if (.Platform$OS.type == "windows") {
[08:25:56.432]                 old_names <- names(...future.oldEnvVars)
[08:25:56.432]                 envs <- base::Sys.getenv()
[08:25:56.432]                 names <- names(envs)
[08:25:56.432]                 common <- intersect(names, old_names)
[08:25:56.432]                 added <- setdiff(names, old_names)
[08:25:56.432]                 removed <- setdiff(old_names, names)
[08:25:56.432]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.432]                   envs[common]]
[08:25:56.432]                 NAMES <- toupper(changed)
[08:25:56.432]                 args <- list()
[08:25:56.432]                 for (kk in seq_along(NAMES)) {
[08:25:56.432]                   name <- changed[[kk]]
[08:25:56.432]                   NAME <- NAMES[[kk]]
[08:25:56.432]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.432]                     next
[08:25:56.432]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.432]                 }
[08:25:56.432]                 NAMES <- toupper(added)
[08:25:56.432]                 for (kk in seq_along(NAMES)) {
[08:25:56.432]                   name <- added[[kk]]
[08:25:56.432]                   NAME <- NAMES[[kk]]
[08:25:56.432]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.432]                     next
[08:25:56.432]                   args[[name]] <- ""
[08:25:56.432]                 }
[08:25:56.432]                 NAMES <- toupper(removed)
[08:25:56.432]                 for (kk in seq_along(NAMES)) {
[08:25:56.432]                   name <- removed[[kk]]
[08:25:56.432]                   NAME <- NAMES[[kk]]
[08:25:56.432]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.432]                     next
[08:25:56.432]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.432]                 }
[08:25:56.432]                 if (length(args) > 0) 
[08:25:56.432]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.432]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.432]             }
[08:25:56.432]             else {
[08:25:56.432]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.432]             }
[08:25:56.432]             {
[08:25:56.432]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.432]                   0L) {
[08:25:56.432]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.432]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.432]                   base::options(opts)
[08:25:56.432]                 }
[08:25:56.432]                 {
[08:25:56.432]                   {
[08:25:56.432]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.432]                     NULL
[08:25:56.432]                   }
[08:25:56.432]                   options(future.plan = NULL)
[08:25:56.432]                   if (is.na(NA_character_)) 
[08:25:56.432]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.432]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.432]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.432]                     .init = FALSE)
[08:25:56.432]                 }
[08:25:56.432]             }
[08:25:56.432]         }
[08:25:56.432]     })
[08:25:56.432]     if (TRUE) {
[08:25:56.432]         base::sink(type = "output", split = FALSE)
[08:25:56.432]         if (TRUE) {
[08:25:56.432]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.432]         }
[08:25:56.432]         else {
[08:25:56.432]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.432]         }
[08:25:56.432]         base::close(...future.stdout)
[08:25:56.432]         ...future.stdout <- NULL
[08:25:56.432]     }
[08:25:56.432]     ...future.result$conditions <- ...future.conditions
[08:25:56.432]     ...future.result$finished <- base::Sys.time()
[08:25:56.432]     ...future.result
[08:25:56.432] }
[08:25:56.435] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[08:25:56.436] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[08:25:56.436] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[08:25:56.436] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:56.437] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:56.437] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[08:25:56.437] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[08:25:56.437] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[08:25:56.437] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[08:25:56.438] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:56.438] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:56.438] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[08:25:56.439] MultisessionFuture started
[08:25:56.439] - Launch lazy future ... done
[08:25:56.439] run() for ‘MultisessionFuture’ ... done
[08:25:56.439] Created future:
[08:25:56.439] MultisessionFuture:
[08:25:56.439] Label: ‘future_replicate-1’
[08:25:56.439] Expression:
[08:25:56.439] {
[08:25:56.439]     do.call(function(...) {
[08:25:56.439]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.439]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.439]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.439]             on.exit(options(oopts), add = TRUE)
[08:25:56.439]         }
[08:25:56.439]         {
[08:25:56.439]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.439]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.439]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.439]                   envir = globalenv(), inherits = FALSE)
[08:25:56.439]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.439]             })
[08:25:56.439]         }
[08:25:56.439]     }, args = future.call.arguments)
[08:25:56.439] }
[08:25:56.439] Lazy evaluation: FALSE
[08:25:56.439] Asynchronous evaluation: TRUE
[08:25:56.439] Local evaluation: TRUE
[08:25:56.439] Environment: R_GlobalEnv
[08:25:56.439] Capture standard output: TRUE
[08:25:56.439] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.439] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.439] Packages: <none>
[08:25:56.439] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.439] Resolved: FALSE
[08:25:56.439] Value: <not collected>
[08:25:56.439] Conditions captured: <none>
[08:25:56.439] Early signaling: FALSE
[08:25:56.439] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.439] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.450] Chunk #1 of 2 ... DONE
[08:25:56.450] Chunk #2 of 2 ...
[08:25:56.451]  - Finding globals in 'X' for chunk #2 ...
[08:25:56.451] getGlobalsAndPackages() ...
[08:25:56.451] Searching for globals...
[08:25:56.451] 
[08:25:56.451] Searching for globals ... DONE
[08:25:56.451] - globals: [0] <none>
[08:25:56.451] getGlobalsAndPackages() ... DONE
[08:25:56.451]    + additional globals found: [n=0] 
[08:25:56.452]    + additional namespaces needed: [n=0] 
[08:25:56.452]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:56.452]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.452]  - seeds: [3] <seeds>
[08:25:56.452]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.452] getGlobalsAndPackages() ...
[08:25:56.452] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.452] Resolving globals: FALSE
[08:25:56.452] Tweak future expression to call with '...' arguments ...
[08:25:56.452] {
[08:25:56.452]     do.call(function(...) {
[08:25:56.452]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.452]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.452]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.452]             on.exit(options(oopts), add = TRUE)
[08:25:56.452]         }
[08:25:56.452]         {
[08:25:56.452]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.452]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.452]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.452]                   envir = globalenv(), inherits = FALSE)
[08:25:56.452]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.452]             })
[08:25:56.452]         }
[08:25:56.452]     }, args = future.call.arguments)
[08:25:56.452] }
[08:25:56.453] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.453] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.453] 
[08:25:56.453] getGlobalsAndPackages() ... DONE
[08:25:56.454] run() for ‘Future’ ...
[08:25:56.454] - state: ‘created’
[08:25:56.454] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.471] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.471] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.471]   - Field: ‘node’
[08:25:56.471]   - Field: ‘label’
[08:25:56.471]   - Field: ‘local’
[08:25:56.472]   - Field: ‘owner’
[08:25:56.472]   - Field: ‘envir’
[08:25:56.472]   - Field: ‘workers’
[08:25:56.472]   - Field: ‘packages’
[08:25:56.472]   - Field: ‘gc’
[08:25:56.472]   - Field: ‘conditions’
[08:25:56.472]   - Field: ‘persistent’
[08:25:56.472]   - Field: ‘expr’
[08:25:56.472]   - Field: ‘uuid’
[08:25:56.472]   - Field: ‘seed’
[08:25:56.472]   - Field: ‘version’
[08:25:56.473]   - Field: ‘result’
[08:25:56.473]   - Field: ‘asynchronous’
[08:25:56.473]   - Field: ‘calls’
[08:25:56.473]   - Field: ‘globals’
[08:25:56.473]   - Field: ‘stdout’
[08:25:56.473]   - Field: ‘earlySignal’
[08:25:56.473]   - Field: ‘lazy’
[08:25:56.473]   - Field: ‘state’
[08:25:56.473] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.473] - Launch lazy future ...
[08:25:56.474] Packages needed by the future expression (n = 0): <none>
[08:25:56.474] Packages needed by future strategies (n = 0): <none>
[08:25:56.474] {
[08:25:56.474]     {
[08:25:56.474]         {
[08:25:56.474]             ...future.startTime <- base::Sys.time()
[08:25:56.474]             {
[08:25:56.474]                 {
[08:25:56.474]                   {
[08:25:56.474]                     {
[08:25:56.474]                       base::local({
[08:25:56.474]                         has_future <- base::requireNamespace("future", 
[08:25:56.474]                           quietly = TRUE)
[08:25:56.474]                         if (has_future) {
[08:25:56.474]                           ns <- base::getNamespace("future")
[08:25:56.474]                           version <- ns[[".package"]][["version"]]
[08:25:56.474]                           if (is.null(version)) 
[08:25:56.474]                             version <- utils::packageVersion("future")
[08:25:56.474]                         }
[08:25:56.474]                         else {
[08:25:56.474]                           version <- NULL
[08:25:56.474]                         }
[08:25:56.474]                         if (!has_future || version < "1.8.0") {
[08:25:56.474]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.474]                             "", base::R.version$version.string), 
[08:25:56.474]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.474]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.474]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.474]                               "release", "version")], collapse = " "), 
[08:25:56.474]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.474]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.474]                             info)
[08:25:56.474]                           info <- base::paste(info, collapse = "; ")
[08:25:56.474]                           if (!has_future) {
[08:25:56.474]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.474]                               info)
[08:25:56.474]                           }
[08:25:56.474]                           else {
[08:25:56.474]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.474]                               info, version)
[08:25:56.474]                           }
[08:25:56.474]                           base::stop(msg)
[08:25:56.474]                         }
[08:25:56.474]                       })
[08:25:56.474]                     }
[08:25:56.474]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.474]                     base::options(mc.cores = 1L)
[08:25:56.474]                   }
[08:25:56.474]                   ...future.strategy.old <- future::plan("list")
[08:25:56.474]                   options(future.plan = NULL)
[08:25:56.474]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.474]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.474]                 }
[08:25:56.474]                 ...future.workdir <- getwd()
[08:25:56.474]             }
[08:25:56.474]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.474]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.474]         }
[08:25:56.474]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.474]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.474]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.474]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.474]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.474]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.474]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.474]             base::names(...future.oldOptions))
[08:25:56.474]     }
[08:25:56.474]     if (FALSE) {
[08:25:56.474]     }
[08:25:56.474]     else {
[08:25:56.474]         if (TRUE) {
[08:25:56.474]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.474]                 open = "w")
[08:25:56.474]         }
[08:25:56.474]         else {
[08:25:56.474]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.474]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.474]         }
[08:25:56.474]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.474]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.474]             base::sink(type = "output", split = FALSE)
[08:25:56.474]             base::close(...future.stdout)
[08:25:56.474]         }, add = TRUE)
[08:25:56.474]     }
[08:25:56.474]     ...future.frame <- base::sys.nframe()
[08:25:56.474]     ...future.conditions <- base::list()
[08:25:56.474]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.474]     if (FALSE) {
[08:25:56.474]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.474]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.474]     }
[08:25:56.474]     ...future.result <- base::tryCatch({
[08:25:56.474]         base::withCallingHandlers({
[08:25:56.474]             ...future.value <- base::withVisible(base::local({
[08:25:56.474]                 ...future.makeSendCondition <- base::local({
[08:25:56.474]                   sendCondition <- NULL
[08:25:56.474]                   function(frame = 1L) {
[08:25:56.474]                     if (is.function(sendCondition)) 
[08:25:56.474]                       return(sendCondition)
[08:25:56.474]                     ns <- getNamespace("parallel")
[08:25:56.474]                     if (exists("sendData", mode = "function", 
[08:25:56.474]                       envir = ns)) {
[08:25:56.474]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.474]                         envir = ns)
[08:25:56.474]                       envir <- sys.frame(frame)
[08:25:56.474]                       master <- NULL
[08:25:56.474]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.474]                         !identical(envir, emptyenv())) {
[08:25:56.474]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.474]                           inherits = FALSE)) {
[08:25:56.474]                           master <- get("master", mode = "list", 
[08:25:56.474]                             envir = envir, inherits = FALSE)
[08:25:56.474]                           if (inherits(master, c("SOCKnode", 
[08:25:56.474]                             "SOCK0node"))) {
[08:25:56.474]                             sendCondition <<- function(cond) {
[08:25:56.474]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.474]                                 success = TRUE)
[08:25:56.474]                               parallel_sendData(master, data)
[08:25:56.474]                             }
[08:25:56.474]                             return(sendCondition)
[08:25:56.474]                           }
[08:25:56.474]                         }
[08:25:56.474]                         frame <- frame + 1L
[08:25:56.474]                         envir <- sys.frame(frame)
[08:25:56.474]                       }
[08:25:56.474]                     }
[08:25:56.474]                     sendCondition <<- function(cond) NULL
[08:25:56.474]                   }
[08:25:56.474]                 })
[08:25:56.474]                 withCallingHandlers({
[08:25:56.474]                   {
[08:25:56.474]                     do.call(function(...) {
[08:25:56.474]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.474]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.474]                         ...future.globals.maxSize)) {
[08:25:56.474]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.474]                         on.exit(options(oopts), add = TRUE)
[08:25:56.474]                       }
[08:25:56.474]                       {
[08:25:56.474]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.474]                           FUN = function(jj) {
[08:25:56.474]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.474]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.474]                               envir = globalenv(), inherits = FALSE)
[08:25:56.474]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.474]                           })
[08:25:56.474]                       }
[08:25:56.474]                     }, args = future.call.arguments)
[08:25:56.474]                   }
[08:25:56.474]                 }, immediateCondition = function(cond) {
[08:25:56.474]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.474]                   sendCondition(cond)
[08:25:56.474]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.474]                   {
[08:25:56.474]                     inherits <- base::inherits
[08:25:56.474]                     invokeRestart <- base::invokeRestart
[08:25:56.474]                     is.null <- base::is.null
[08:25:56.474]                     muffled <- FALSE
[08:25:56.474]                     if (inherits(cond, "message")) {
[08:25:56.474]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.474]                       if (muffled) 
[08:25:56.474]                         invokeRestart("muffleMessage")
[08:25:56.474]                     }
[08:25:56.474]                     else if (inherits(cond, "warning")) {
[08:25:56.474]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.474]                       if (muffled) 
[08:25:56.474]                         invokeRestart("muffleWarning")
[08:25:56.474]                     }
[08:25:56.474]                     else if (inherits(cond, "condition")) {
[08:25:56.474]                       if (!is.null(pattern)) {
[08:25:56.474]                         computeRestarts <- base::computeRestarts
[08:25:56.474]                         grepl <- base::grepl
[08:25:56.474]                         restarts <- computeRestarts(cond)
[08:25:56.474]                         for (restart in restarts) {
[08:25:56.474]                           name <- restart$name
[08:25:56.474]                           if (is.null(name)) 
[08:25:56.474]                             next
[08:25:56.474]                           if (!grepl(pattern, name)) 
[08:25:56.474]                             next
[08:25:56.474]                           invokeRestart(restart)
[08:25:56.474]                           muffled <- TRUE
[08:25:56.474]                           break
[08:25:56.474]                         }
[08:25:56.474]                       }
[08:25:56.474]                     }
[08:25:56.474]                     invisible(muffled)
[08:25:56.474]                   }
[08:25:56.474]                   muffleCondition(cond)
[08:25:56.474]                 })
[08:25:56.474]             }))
[08:25:56.474]             future::FutureResult(value = ...future.value$value, 
[08:25:56.474]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.474]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.474]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.474]                     ...future.globalenv.names))
[08:25:56.474]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.474]         }, condition = base::local({
[08:25:56.474]             c <- base::c
[08:25:56.474]             inherits <- base::inherits
[08:25:56.474]             invokeRestart <- base::invokeRestart
[08:25:56.474]             length <- base::length
[08:25:56.474]             list <- base::list
[08:25:56.474]             seq.int <- base::seq.int
[08:25:56.474]             signalCondition <- base::signalCondition
[08:25:56.474]             sys.calls <- base::sys.calls
[08:25:56.474]             `[[` <- base::`[[`
[08:25:56.474]             `+` <- base::`+`
[08:25:56.474]             `<<-` <- base::`<<-`
[08:25:56.474]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.474]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.474]                   3L)]
[08:25:56.474]             }
[08:25:56.474]             function(cond) {
[08:25:56.474]                 is_error <- inherits(cond, "error")
[08:25:56.474]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.474]                   NULL)
[08:25:56.474]                 if (is_error) {
[08:25:56.474]                   sessionInformation <- function() {
[08:25:56.474]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.474]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.474]                       search = base::search(), system = base::Sys.info())
[08:25:56.474]                   }
[08:25:56.474]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.474]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.474]                     cond$call), session = sessionInformation(), 
[08:25:56.474]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.474]                   signalCondition(cond)
[08:25:56.474]                 }
[08:25:56.474]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.474]                 "immediateCondition"))) {
[08:25:56.474]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.474]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.474]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.474]                   if (TRUE && !signal) {
[08:25:56.474]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.474]                     {
[08:25:56.474]                       inherits <- base::inherits
[08:25:56.474]                       invokeRestart <- base::invokeRestart
[08:25:56.474]                       is.null <- base::is.null
[08:25:56.474]                       muffled <- FALSE
[08:25:56.474]                       if (inherits(cond, "message")) {
[08:25:56.474]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.474]                         if (muffled) 
[08:25:56.474]                           invokeRestart("muffleMessage")
[08:25:56.474]                       }
[08:25:56.474]                       else if (inherits(cond, "warning")) {
[08:25:56.474]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.474]                         if (muffled) 
[08:25:56.474]                           invokeRestart("muffleWarning")
[08:25:56.474]                       }
[08:25:56.474]                       else if (inherits(cond, "condition")) {
[08:25:56.474]                         if (!is.null(pattern)) {
[08:25:56.474]                           computeRestarts <- base::computeRestarts
[08:25:56.474]                           grepl <- base::grepl
[08:25:56.474]                           restarts <- computeRestarts(cond)
[08:25:56.474]                           for (restart in restarts) {
[08:25:56.474]                             name <- restart$name
[08:25:56.474]                             if (is.null(name)) 
[08:25:56.474]                               next
[08:25:56.474]                             if (!grepl(pattern, name)) 
[08:25:56.474]                               next
[08:25:56.474]                             invokeRestart(restart)
[08:25:56.474]                             muffled <- TRUE
[08:25:56.474]                             break
[08:25:56.474]                           }
[08:25:56.474]                         }
[08:25:56.474]                       }
[08:25:56.474]                       invisible(muffled)
[08:25:56.474]                     }
[08:25:56.474]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.474]                   }
[08:25:56.474]                 }
[08:25:56.474]                 else {
[08:25:56.474]                   if (TRUE) {
[08:25:56.474]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.474]                     {
[08:25:56.474]                       inherits <- base::inherits
[08:25:56.474]                       invokeRestart <- base::invokeRestart
[08:25:56.474]                       is.null <- base::is.null
[08:25:56.474]                       muffled <- FALSE
[08:25:56.474]                       if (inherits(cond, "message")) {
[08:25:56.474]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.474]                         if (muffled) 
[08:25:56.474]                           invokeRestart("muffleMessage")
[08:25:56.474]                       }
[08:25:56.474]                       else if (inherits(cond, "warning")) {
[08:25:56.474]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.474]                         if (muffled) 
[08:25:56.474]                           invokeRestart("muffleWarning")
[08:25:56.474]                       }
[08:25:56.474]                       else if (inherits(cond, "condition")) {
[08:25:56.474]                         if (!is.null(pattern)) {
[08:25:56.474]                           computeRestarts <- base::computeRestarts
[08:25:56.474]                           grepl <- base::grepl
[08:25:56.474]                           restarts <- computeRestarts(cond)
[08:25:56.474]                           for (restart in restarts) {
[08:25:56.474]                             name <- restart$name
[08:25:56.474]                             if (is.null(name)) 
[08:25:56.474]                               next
[08:25:56.474]                             if (!grepl(pattern, name)) 
[08:25:56.474]                               next
[08:25:56.474]                             invokeRestart(restart)
[08:25:56.474]                             muffled <- TRUE
[08:25:56.474]                             break
[08:25:56.474]                           }
[08:25:56.474]                         }
[08:25:56.474]                       }
[08:25:56.474]                       invisible(muffled)
[08:25:56.474]                     }
[08:25:56.474]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.474]                   }
[08:25:56.474]                 }
[08:25:56.474]             }
[08:25:56.474]         }))
[08:25:56.474]     }, error = function(ex) {
[08:25:56.474]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.474]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.474]                 ...future.rng), started = ...future.startTime, 
[08:25:56.474]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.474]             version = "1.8"), class = "FutureResult")
[08:25:56.474]     }, finally = {
[08:25:56.474]         if (!identical(...future.workdir, getwd())) 
[08:25:56.474]             setwd(...future.workdir)
[08:25:56.474]         {
[08:25:56.474]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.474]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.474]             }
[08:25:56.474]             base::options(...future.oldOptions)
[08:25:56.474]             if (.Platform$OS.type == "windows") {
[08:25:56.474]                 old_names <- names(...future.oldEnvVars)
[08:25:56.474]                 envs <- base::Sys.getenv()
[08:25:56.474]                 names <- names(envs)
[08:25:56.474]                 common <- intersect(names, old_names)
[08:25:56.474]                 added <- setdiff(names, old_names)
[08:25:56.474]                 removed <- setdiff(old_names, names)
[08:25:56.474]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.474]                   envs[common]]
[08:25:56.474]                 NAMES <- toupper(changed)
[08:25:56.474]                 args <- list()
[08:25:56.474]                 for (kk in seq_along(NAMES)) {
[08:25:56.474]                   name <- changed[[kk]]
[08:25:56.474]                   NAME <- NAMES[[kk]]
[08:25:56.474]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.474]                     next
[08:25:56.474]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.474]                 }
[08:25:56.474]                 NAMES <- toupper(added)
[08:25:56.474]                 for (kk in seq_along(NAMES)) {
[08:25:56.474]                   name <- added[[kk]]
[08:25:56.474]                   NAME <- NAMES[[kk]]
[08:25:56.474]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.474]                     next
[08:25:56.474]                   args[[name]] <- ""
[08:25:56.474]                 }
[08:25:56.474]                 NAMES <- toupper(removed)
[08:25:56.474]                 for (kk in seq_along(NAMES)) {
[08:25:56.474]                   name <- removed[[kk]]
[08:25:56.474]                   NAME <- NAMES[[kk]]
[08:25:56.474]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.474]                     next
[08:25:56.474]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.474]                 }
[08:25:56.474]                 if (length(args) > 0) 
[08:25:56.474]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.474]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.474]             }
[08:25:56.474]             else {
[08:25:56.474]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.474]             }
[08:25:56.474]             {
[08:25:56.474]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.474]                   0L) {
[08:25:56.474]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.474]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.474]                   base::options(opts)
[08:25:56.474]                 }
[08:25:56.474]                 {
[08:25:56.474]                   {
[08:25:56.474]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.474]                     NULL
[08:25:56.474]                   }
[08:25:56.474]                   options(future.plan = NULL)
[08:25:56.474]                   if (is.na(NA_character_)) 
[08:25:56.474]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.474]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.474]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.474]                     .init = FALSE)
[08:25:56.474]                 }
[08:25:56.474]             }
[08:25:56.474]         }
[08:25:56.474]     })
[08:25:56.474]     if (TRUE) {
[08:25:56.474]         base::sink(type = "output", split = FALSE)
[08:25:56.474]         if (TRUE) {
[08:25:56.474]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.474]         }
[08:25:56.474]         else {
[08:25:56.474]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.474]         }
[08:25:56.474]         base::close(...future.stdout)
[08:25:56.474]         ...future.stdout <- NULL
[08:25:56.474]     }
[08:25:56.474]     ...future.result$conditions <- ...future.conditions
[08:25:56.474]     ...future.result$finished <- base::Sys.time()
[08:25:56.474]     ...future.result
[08:25:56.474] }
[08:25:56.477] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[08:25:56.477] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[08:25:56.478] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[08:25:56.478] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:56.478] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:56.478] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[08:25:56.479] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[08:25:56.479] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[08:25:56.480] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[08:25:56.480] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:56.480] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:56.480] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[08:25:56.481] MultisessionFuture started
[08:25:56.481] - Launch lazy future ... done
[08:25:56.481] run() for ‘MultisessionFuture’ ... done
[08:25:56.481] Created future:
[08:25:56.481] MultisessionFuture:
[08:25:56.481] Label: ‘future_replicate-2’
[08:25:56.481] Expression:
[08:25:56.481] {
[08:25:56.481]     do.call(function(...) {
[08:25:56.481]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.481]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.481]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.481]             on.exit(options(oopts), add = TRUE)
[08:25:56.481]         }
[08:25:56.481]         {
[08:25:56.481]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.481]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.481]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.481]                   envir = globalenv(), inherits = FALSE)
[08:25:56.481]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.481]             })
[08:25:56.481]         }
[08:25:56.481]     }, args = future.call.arguments)
[08:25:56.481] }
[08:25:56.481] Lazy evaluation: FALSE
[08:25:56.481] Asynchronous evaluation: TRUE
[08:25:56.481] Local evaluation: TRUE
[08:25:56.481] Environment: R_GlobalEnv
[08:25:56.481] Capture standard output: TRUE
[08:25:56.481] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.481] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.481] Packages: <none>
[08:25:56.481] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.481] Resolved: FALSE
[08:25:56.481] Value: <not collected>
[08:25:56.481] Conditions captured: <none>
[08:25:56.481] Early signaling: FALSE
[08:25:56.481] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.481] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.493] Chunk #2 of 2 ... DONE
[08:25:56.493] Launching 2 futures (chunks) ... DONE
[08:25:56.493] Resolving 2 futures (chunks) ...
[08:25:56.493] resolve() on list ...
[08:25:56.493]  recursive: 0
[08:25:56.493]  length: 2
[08:25:56.493] 
[08:25:56.494] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.494] - Validating connection of MultisessionFuture
[08:25:56.494] - received message: FutureResult
[08:25:56.494] - Received FutureResult
[08:25:56.494] - Erased future from FutureRegistry
[08:25:56.495] result() for ClusterFuture ...
[08:25:56.495] - result already collected: FutureResult
[08:25:56.495] result() for ClusterFuture ... done
[08:25:56.495] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.495] Future #1
[08:25:56.495] result() for ClusterFuture ...
[08:25:56.495] - result already collected: FutureResult
[08:25:56.495] result() for ClusterFuture ... done
[08:25:56.495] result() for ClusterFuture ...
[08:25:56.495] - result already collected: FutureResult
[08:25:56.495] result() for ClusterFuture ... done
[08:25:56.496] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:56.496] - nx: 2
[08:25:56.496] - relay: TRUE
[08:25:56.496] - stdout: TRUE
[08:25:56.496] - signal: TRUE
[08:25:56.496] - resignal: FALSE
[08:25:56.496] - force: TRUE
[08:25:56.496] - relayed: [n=2] FALSE, FALSE
[08:25:56.496] - queued futures: [n=2] FALSE, FALSE
[08:25:56.496]  - until=1
[08:25:56.496]  - relaying element #1
[08:25:56.496] result() for ClusterFuture ...
[08:25:56.497] - result already collected: FutureResult
[08:25:56.497] result() for ClusterFuture ... done
[08:25:56.497] result() for ClusterFuture ...
[08:25:56.497] - result already collected: FutureResult
[08:25:56.497] result() for ClusterFuture ... done
[08:25:56.497] result() for ClusterFuture ...
[08:25:56.497] - result already collected: FutureResult
[08:25:56.497] result() for ClusterFuture ... done
[08:25:56.497] result() for ClusterFuture ...
[08:25:56.497] - result already collected: FutureResult
[08:25:56.497] result() for ClusterFuture ... done
[08:25:56.497] - relayed: [n=2] TRUE, FALSE
[08:25:56.498] - queued futures: [n=2] TRUE, FALSE
[08:25:56.498] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:56.498]  length: 1 (resolved future 1)
[08:25:56.523] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.524] - Validating connection of MultisessionFuture
[08:25:56.524] - received message: FutureResult
[08:25:56.524] - Received FutureResult
[08:25:56.524] - Erased future from FutureRegistry
[08:25:56.524] result() for ClusterFuture ...
[08:25:56.524] - result already collected: FutureResult
[08:25:56.524] result() for ClusterFuture ... done
[08:25:56.524] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.525] Future #2
[08:25:56.525] result() for ClusterFuture ...
[08:25:56.525] - result already collected: FutureResult
[08:25:56.525] result() for ClusterFuture ... done
[08:25:56.525] result() for ClusterFuture ...
[08:25:56.525] - result already collected: FutureResult
[08:25:56.525] result() for ClusterFuture ... done
[08:25:56.525] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:56.525] - nx: 2
[08:25:56.525] - relay: TRUE
[08:25:56.525] - stdout: TRUE
[08:25:56.526] - signal: TRUE
[08:25:56.526] - resignal: FALSE
[08:25:56.526] - force: TRUE
[08:25:56.526] - relayed: [n=2] TRUE, FALSE
[08:25:56.526] - queued futures: [n=2] TRUE, FALSE
[08:25:56.526]  - until=2
[08:25:56.526]  - relaying element #2
[08:25:56.526] result() for ClusterFuture ...
[08:25:56.526] - result already collected: FutureResult
[08:25:56.526] result() for ClusterFuture ... done
[08:25:56.526] result() for ClusterFuture ...
[08:25:56.526] - result already collected: FutureResult
[08:25:56.527] result() for ClusterFuture ... done
[08:25:56.527] result() for ClusterFuture ...
[08:25:56.527] - result already collected: FutureResult
[08:25:56.527] result() for ClusterFuture ... done
[08:25:56.527] result() for ClusterFuture ...
[08:25:56.527] - result already collected: FutureResult
[08:25:56.527] result() for ClusterFuture ... done
[08:25:56.527] - relayed: [n=2] TRUE, TRUE
[08:25:56.527] - queued futures: [n=2] TRUE, TRUE
[08:25:56.527] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:56.527]  length: 0 (resolved future 2)
[08:25:56.528] Relaying remaining futures
[08:25:56.528] signalConditionsASAP(NULL, pos=0) ...
[08:25:56.528] - nx: 2
[08:25:56.528] - relay: TRUE
[08:25:56.528] - stdout: TRUE
[08:25:56.528] - signal: TRUE
[08:25:56.528] - resignal: FALSE
[08:25:56.528] - force: TRUE
[08:25:56.528] - relayed: [n=2] TRUE, TRUE
[08:25:56.528] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:56.528] - relayed: [n=2] TRUE, TRUE
[08:25:56.528] - queued futures: [n=2] TRUE, TRUE
[08:25:56.529] signalConditionsASAP(NULL, pos=0) ... done
[08:25:56.529] resolve() on list ... DONE
[08:25:56.529] result() for ClusterFuture ...
[08:25:56.529] - result already collected: FutureResult
[08:25:56.529] result() for ClusterFuture ... done
[08:25:56.529] result() for ClusterFuture ...
[08:25:56.529] - result already collected: FutureResult
[08:25:56.529] result() for ClusterFuture ... done
[08:25:56.529] result() for ClusterFuture ...
[08:25:56.529] - result already collected: FutureResult
[08:25:56.529] result() for ClusterFuture ... done
[08:25:56.530] result() for ClusterFuture ...
[08:25:56.530] - result already collected: FutureResult
[08:25:56.530] result() for ClusterFuture ... done
[08:25:56.530]  - Number of value chunks collected: 2
[08:25:56.530] Resolving 2 futures (chunks) ... DONE
[08:25:56.530] Reducing values from 2 chunks ...
[08:25:56.530]  - Number of values collected after concatenation: 5
[08:25:56.530]  - Number of values expected: 5
[08:25:56.530] Reducing values from 2 chunks ... DONE
[08:25:56.530] future_lapply() ... DONE
[08:25:56.530] future_lapply() ...
[08:25:56.531] Generating random seeds ...
[08:25:56.531] Generating random seed streams for 5 elements ...
[08:25:56.531] Generating random seed streams for 5 elements ... DONE
[08:25:56.531] Generating random seeds ... DONE
[08:25:56.531] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:56.534] Number of chunks: 2
[08:25:56.534] getGlobalsAndPackagesXApply() ...
[08:25:56.534]  - future.globals: TRUE
[08:25:56.534] getGlobalsAndPackages() ...
[08:25:56.534] Searching for globals...
[08:25:56.535] - globals found: [2] ‘FUN’, ‘sample’
[08:25:56.535] Searching for globals ... DONE
[08:25:56.535] Resolving globals: FALSE
[08:25:56.536] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:56.536] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:56.536] - globals: [1] ‘FUN’
[08:25:56.536] 
[08:25:56.536] getGlobalsAndPackages() ... DONE
[08:25:56.537]  - globals found/used: [n=1] ‘FUN’
[08:25:56.537]  - needed namespaces: [n=0] 
[08:25:56.537] Finding globals ... DONE
[08:25:56.537]  - use_args: TRUE
[08:25:56.537]  - Getting '...' globals ...
[08:25:56.537] resolve() on list ...
[08:25:56.537]  recursive: 0
[08:25:56.537]  length: 1
[08:25:56.537]  elements: ‘...’
[08:25:56.538]  length: 0 (resolved future 1)
[08:25:56.538] resolve() on list ... DONE
[08:25:56.538]    - '...' content: [n=0] 
[08:25:56.538] List of 1
[08:25:56.538]  $ ...: list()
[08:25:56.538]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.538]  - attr(*, "where")=List of 1
[08:25:56.538]   ..$ ...:<environment: 0x55f7793e9ef0> 
[08:25:56.538]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.538]  - attr(*, "resolved")= logi TRUE
[08:25:56.538]  - attr(*, "total_size")= num NA
[08:25:56.540]  - Getting '...' globals ... DONE
[08:25:56.540] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:56.541] List of 2
[08:25:56.541]  $ ...future.FUN:function (...)  
[08:25:56.541]  $ ...          : list()
[08:25:56.541]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.541]  - attr(*, "where")=List of 2
[08:25:56.541]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:56.541]   ..$ ...          :<environment: 0x55f7793e9ef0> 
[08:25:56.541]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.541]  - attr(*, "resolved")= logi FALSE
[08:25:56.541]  - attr(*, "total_size")= num 7184
[08:25:56.543] Packages to be attached in all futures: [n=0] 
[08:25:56.543] getGlobalsAndPackagesXApply() ... DONE
[08:25:56.543] Number of futures (= number of chunks): 2
[08:25:56.544] Launching 2 futures (chunks) ...
[08:25:56.544] Chunk #1 of 2 ...
[08:25:56.544]  - Finding globals in 'X' for chunk #1 ...
[08:25:56.544] getGlobalsAndPackages() ...
[08:25:56.544] Searching for globals...
[08:25:56.544] 
[08:25:56.544] Searching for globals ... DONE
[08:25:56.544] - globals: [0] <none>
[08:25:56.545] getGlobalsAndPackages() ... DONE
[08:25:56.545]    + additional globals found: [n=0] 
[08:25:56.545]    + additional namespaces needed: [n=0] 
[08:25:56.545]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:56.545]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.545]  - seeds: [2] <seeds>
[08:25:56.545]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.545] getGlobalsAndPackages() ...
[08:25:56.545] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.545] Resolving globals: FALSE
[08:25:56.545] Tweak future expression to call with '...' arguments ...
[08:25:56.546] {
[08:25:56.546]     do.call(function(...) {
[08:25:56.546]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.546]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.546]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.546]             on.exit(options(oopts), add = TRUE)
[08:25:56.546]         }
[08:25:56.546]         {
[08:25:56.546]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.546]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.546]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.546]                   envir = globalenv(), inherits = FALSE)
[08:25:56.546]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.546]             })
[08:25:56.546]         }
[08:25:56.546]     }, args = future.call.arguments)
[08:25:56.546] }
[08:25:56.546] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.546] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.546] 
[08:25:56.546] getGlobalsAndPackages() ... DONE
[08:25:56.547] run() for ‘Future’ ...
[08:25:56.547] - state: ‘created’
[08:25:56.547] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.561] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.561] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.561]   - Field: ‘node’
[08:25:56.561]   - Field: ‘label’
[08:25:56.561]   - Field: ‘local’
[08:25:56.562]   - Field: ‘owner’
[08:25:56.562]   - Field: ‘envir’
[08:25:56.562]   - Field: ‘workers’
[08:25:56.562]   - Field: ‘packages’
[08:25:56.562]   - Field: ‘gc’
[08:25:56.562]   - Field: ‘conditions’
[08:25:56.562]   - Field: ‘persistent’
[08:25:56.562]   - Field: ‘expr’
[08:25:56.562]   - Field: ‘uuid’
[08:25:56.562]   - Field: ‘seed’
[08:25:56.562]   - Field: ‘version’
[08:25:56.563]   - Field: ‘result’
[08:25:56.563]   - Field: ‘asynchronous’
[08:25:56.563]   - Field: ‘calls’
[08:25:56.563]   - Field: ‘globals’
[08:25:56.563]   - Field: ‘stdout’
[08:25:56.563]   - Field: ‘earlySignal’
[08:25:56.563]   - Field: ‘lazy’
[08:25:56.563]   - Field: ‘state’
[08:25:56.563] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.563] - Launch lazy future ...
[08:25:56.564] Packages needed by the future expression (n = 0): <none>
[08:25:56.564] Packages needed by future strategies (n = 0): <none>
[08:25:56.564] {
[08:25:56.564]     {
[08:25:56.564]         {
[08:25:56.564]             ...future.startTime <- base::Sys.time()
[08:25:56.564]             {
[08:25:56.564]                 {
[08:25:56.564]                   {
[08:25:56.564]                     {
[08:25:56.564]                       base::local({
[08:25:56.564]                         has_future <- base::requireNamespace("future", 
[08:25:56.564]                           quietly = TRUE)
[08:25:56.564]                         if (has_future) {
[08:25:56.564]                           ns <- base::getNamespace("future")
[08:25:56.564]                           version <- ns[[".package"]][["version"]]
[08:25:56.564]                           if (is.null(version)) 
[08:25:56.564]                             version <- utils::packageVersion("future")
[08:25:56.564]                         }
[08:25:56.564]                         else {
[08:25:56.564]                           version <- NULL
[08:25:56.564]                         }
[08:25:56.564]                         if (!has_future || version < "1.8.0") {
[08:25:56.564]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.564]                             "", base::R.version$version.string), 
[08:25:56.564]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.564]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.564]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.564]                               "release", "version")], collapse = " "), 
[08:25:56.564]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.564]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.564]                             info)
[08:25:56.564]                           info <- base::paste(info, collapse = "; ")
[08:25:56.564]                           if (!has_future) {
[08:25:56.564]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.564]                               info)
[08:25:56.564]                           }
[08:25:56.564]                           else {
[08:25:56.564]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.564]                               info, version)
[08:25:56.564]                           }
[08:25:56.564]                           base::stop(msg)
[08:25:56.564]                         }
[08:25:56.564]                       })
[08:25:56.564]                     }
[08:25:56.564]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.564]                     base::options(mc.cores = 1L)
[08:25:56.564]                   }
[08:25:56.564]                   ...future.strategy.old <- future::plan("list")
[08:25:56.564]                   options(future.plan = NULL)
[08:25:56.564]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.564]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.564]                 }
[08:25:56.564]                 ...future.workdir <- getwd()
[08:25:56.564]             }
[08:25:56.564]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.564]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.564]         }
[08:25:56.564]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.564]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.564]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.564]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.564]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.564]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.564]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.564]             base::names(...future.oldOptions))
[08:25:56.564]     }
[08:25:56.564]     if (FALSE) {
[08:25:56.564]     }
[08:25:56.564]     else {
[08:25:56.564]         if (TRUE) {
[08:25:56.564]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.564]                 open = "w")
[08:25:56.564]         }
[08:25:56.564]         else {
[08:25:56.564]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.564]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.564]         }
[08:25:56.564]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.564]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.564]             base::sink(type = "output", split = FALSE)
[08:25:56.564]             base::close(...future.stdout)
[08:25:56.564]         }, add = TRUE)
[08:25:56.564]     }
[08:25:56.564]     ...future.frame <- base::sys.nframe()
[08:25:56.564]     ...future.conditions <- base::list()
[08:25:56.564]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.564]     if (FALSE) {
[08:25:56.564]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.564]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.564]     }
[08:25:56.564]     ...future.result <- base::tryCatch({
[08:25:56.564]         base::withCallingHandlers({
[08:25:56.564]             ...future.value <- base::withVisible(base::local({
[08:25:56.564]                 ...future.makeSendCondition <- base::local({
[08:25:56.564]                   sendCondition <- NULL
[08:25:56.564]                   function(frame = 1L) {
[08:25:56.564]                     if (is.function(sendCondition)) 
[08:25:56.564]                       return(sendCondition)
[08:25:56.564]                     ns <- getNamespace("parallel")
[08:25:56.564]                     if (exists("sendData", mode = "function", 
[08:25:56.564]                       envir = ns)) {
[08:25:56.564]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.564]                         envir = ns)
[08:25:56.564]                       envir <- sys.frame(frame)
[08:25:56.564]                       master <- NULL
[08:25:56.564]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.564]                         !identical(envir, emptyenv())) {
[08:25:56.564]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.564]                           inherits = FALSE)) {
[08:25:56.564]                           master <- get("master", mode = "list", 
[08:25:56.564]                             envir = envir, inherits = FALSE)
[08:25:56.564]                           if (inherits(master, c("SOCKnode", 
[08:25:56.564]                             "SOCK0node"))) {
[08:25:56.564]                             sendCondition <<- function(cond) {
[08:25:56.564]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.564]                                 success = TRUE)
[08:25:56.564]                               parallel_sendData(master, data)
[08:25:56.564]                             }
[08:25:56.564]                             return(sendCondition)
[08:25:56.564]                           }
[08:25:56.564]                         }
[08:25:56.564]                         frame <- frame + 1L
[08:25:56.564]                         envir <- sys.frame(frame)
[08:25:56.564]                       }
[08:25:56.564]                     }
[08:25:56.564]                     sendCondition <<- function(cond) NULL
[08:25:56.564]                   }
[08:25:56.564]                 })
[08:25:56.564]                 withCallingHandlers({
[08:25:56.564]                   {
[08:25:56.564]                     do.call(function(...) {
[08:25:56.564]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.564]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.564]                         ...future.globals.maxSize)) {
[08:25:56.564]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.564]                         on.exit(options(oopts), add = TRUE)
[08:25:56.564]                       }
[08:25:56.564]                       {
[08:25:56.564]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.564]                           FUN = function(jj) {
[08:25:56.564]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.564]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.564]                               envir = globalenv(), inherits = FALSE)
[08:25:56.564]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.564]                           })
[08:25:56.564]                       }
[08:25:56.564]                     }, args = future.call.arguments)
[08:25:56.564]                   }
[08:25:56.564]                 }, immediateCondition = function(cond) {
[08:25:56.564]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.564]                   sendCondition(cond)
[08:25:56.564]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.564]                   {
[08:25:56.564]                     inherits <- base::inherits
[08:25:56.564]                     invokeRestart <- base::invokeRestart
[08:25:56.564]                     is.null <- base::is.null
[08:25:56.564]                     muffled <- FALSE
[08:25:56.564]                     if (inherits(cond, "message")) {
[08:25:56.564]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.564]                       if (muffled) 
[08:25:56.564]                         invokeRestart("muffleMessage")
[08:25:56.564]                     }
[08:25:56.564]                     else if (inherits(cond, "warning")) {
[08:25:56.564]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.564]                       if (muffled) 
[08:25:56.564]                         invokeRestart("muffleWarning")
[08:25:56.564]                     }
[08:25:56.564]                     else if (inherits(cond, "condition")) {
[08:25:56.564]                       if (!is.null(pattern)) {
[08:25:56.564]                         computeRestarts <- base::computeRestarts
[08:25:56.564]                         grepl <- base::grepl
[08:25:56.564]                         restarts <- computeRestarts(cond)
[08:25:56.564]                         for (restart in restarts) {
[08:25:56.564]                           name <- restart$name
[08:25:56.564]                           if (is.null(name)) 
[08:25:56.564]                             next
[08:25:56.564]                           if (!grepl(pattern, name)) 
[08:25:56.564]                             next
[08:25:56.564]                           invokeRestart(restart)
[08:25:56.564]                           muffled <- TRUE
[08:25:56.564]                           break
[08:25:56.564]                         }
[08:25:56.564]                       }
[08:25:56.564]                     }
[08:25:56.564]                     invisible(muffled)
[08:25:56.564]                   }
[08:25:56.564]                   muffleCondition(cond)
[08:25:56.564]                 })
[08:25:56.564]             }))
[08:25:56.564]             future::FutureResult(value = ...future.value$value, 
[08:25:56.564]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.564]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.564]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.564]                     ...future.globalenv.names))
[08:25:56.564]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.564]         }, condition = base::local({
[08:25:56.564]             c <- base::c
[08:25:56.564]             inherits <- base::inherits
[08:25:56.564]             invokeRestart <- base::invokeRestart
[08:25:56.564]             length <- base::length
[08:25:56.564]             list <- base::list
[08:25:56.564]             seq.int <- base::seq.int
[08:25:56.564]             signalCondition <- base::signalCondition
[08:25:56.564]             sys.calls <- base::sys.calls
[08:25:56.564]             `[[` <- base::`[[`
[08:25:56.564]             `+` <- base::`+`
[08:25:56.564]             `<<-` <- base::`<<-`
[08:25:56.564]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.564]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.564]                   3L)]
[08:25:56.564]             }
[08:25:56.564]             function(cond) {
[08:25:56.564]                 is_error <- inherits(cond, "error")
[08:25:56.564]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.564]                   NULL)
[08:25:56.564]                 if (is_error) {
[08:25:56.564]                   sessionInformation <- function() {
[08:25:56.564]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.564]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.564]                       search = base::search(), system = base::Sys.info())
[08:25:56.564]                   }
[08:25:56.564]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.564]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.564]                     cond$call), session = sessionInformation(), 
[08:25:56.564]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.564]                   signalCondition(cond)
[08:25:56.564]                 }
[08:25:56.564]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.564]                 "immediateCondition"))) {
[08:25:56.564]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.564]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.564]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.564]                   if (TRUE && !signal) {
[08:25:56.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.564]                     {
[08:25:56.564]                       inherits <- base::inherits
[08:25:56.564]                       invokeRestart <- base::invokeRestart
[08:25:56.564]                       is.null <- base::is.null
[08:25:56.564]                       muffled <- FALSE
[08:25:56.564]                       if (inherits(cond, "message")) {
[08:25:56.564]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.564]                         if (muffled) 
[08:25:56.564]                           invokeRestart("muffleMessage")
[08:25:56.564]                       }
[08:25:56.564]                       else if (inherits(cond, "warning")) {
[08:25:56.564]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.564]                         if (muffled) 
[08:25:56.564]                           invokeRestart("muffleWarning")
[08:25:56.564]                       }
[08:25:56.564]                       else if (inherits(cond, "condition")) {
[08:25:56.564]                         if (!is.null(pattern)) {
[08:25:56.564]                           computeRestarts <- base::computeRestarts
[08:25:56.564]                           grepl <- base::grepl
[08:25:56.564]                           restarts <- computeRestarts(cond)
[08:25:56.564]                           for (restart in restarts) {
[08:25:56.564]                             name <- restart$name
[08:25:56.564]                             if (is.null(name)) 
[08:25:56.564]                               next
[08:25:56.564]                             if (!grepl(pattern, name)) 
[08:25:56.564]                               next
[08:25:56.564]                             invokeRestart(restart)
[08:25:56.564]                             muffled <- TRUE
[08:25:56.564]                             break
[08:25:56.564]                           }
[08:25:56.564]                         }
[08:25:56.564]                       }
[08:25:56.564]                       invisible(muffled)
[08:25:56.564]                     }
[08:25:56.564]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.564]                   }
[08:25:56.564]                 }
[08:25:56.564]                 else {
[08:25:56.564]                   if (TRUE) {
[08:25:56.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.564]                     {
[08:25:56.564]                       inherits <- base::inherits
[08:25:56.564]                       invokeRestart <- base::invokeRestart
[08:25:56.564]                       is.null <- base::is.null
[08:25:56.564]                       muffled <- FALSE
[08:25:56.564]                       if (inherits(cond, "message")) {
[08:25:56.564]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.564]                         if (muffled) 
[08:25:56.564]                           invokeRestart("muffleMessage")
[08:25:56.564]                       }
[08:25:56.564]                       else if (inherits(cond, "warning")) {
[08:25:56.564]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.564]                         if (muffled) 
[08:25:56.564]                           invokeRestart("muffleWarning")
[08:25:56.564]                       }
[08:25:56.564]                       else if (inherits(cond, "condition")) {
[08:25:56.564]                         if (!is.null(pattern)) {
[08:25:56.564]                           computeRestarts <- base::computeRestarts
[08:25:56.564]                           grepl <- base::grepl
[08:25:56.564]                           restarts <- computeRestarts(cond)
[08:25:56.564]                           for (restart in restarts) {
[08:25:56.564]                             name <- restart$name
[08:25:56.564]                             if (is.null(name)) 
[08:25:56.564]                               next
[08:25:56.564]                             if (!grepl(pattern, name)) 
[08:25:56.564]                               next
[08:25:56.564]                             invokeRestart(restart)
[08:25:56.564]                             muffled <- TRUE
[08:25:56.564]                             break
[08:25:56.564]                           }
[08:25:56.564]                         }
[08:25:56.564]                       }
[08:25:56.564]                       invisible(muffled)
[08:25:56.564]                     }
[08:25:56.564]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.564]                   }
[08:25:56.564]                 }
[08:25:56.564]             }
[08:25:56.564]         }))
[08:25:56.564]     }, error = function(ex) {
[08:25:56.564]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.564]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.564]                 ...future.rng), started = ...future.startTime, 
[08:25:56.564]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.564]             version = "1.8"), class = "FutureResult")
[08:25:56.564]     }, finally = {
[08:25:56.564]         if (!identical(...future.workdir, getwd())) 
[08:25:56.564]             setwd(...future.workdir)
[08:25:56.564]         {
[08:25:56.564]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.564]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.564]             }
[08:25:56.564]             base::options(...future.oldOptions)
[08:25:56.564]             if (.Platform$OS.type == "windows") {
[08:25:56.564]                 old_names <- names(...future.oldEnvVars)
[08:25:56.564]                 envs <- base::Sys.getenv()
[08:25:56.564]                 names <- names(envs)
[08:25:56.564]                 common <- intersect(names, old_names)
[08:25:56.564]                 added <- setdiff(names, old_names)
[08:25:56.564]                 removed <- setdiff(old_names, names)
[08:25:56.564]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.564]                   envs[common]]
[08:25:56.564]                 NAMES <- toupper(changed)
[08:25:56.564]                 args <- list()
[08:25:56.564]                 for (kk in seq_along(NAMES)) {
[08:25:56.564]                   name <- changed[[kk]]
[08:25:56.564]                   NAME <- NAMES[[kk]]
[08:25:56.564]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.564]                     next
[08:25:56.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.564]                 }
[08:25:56.564]                 NAMES <- toupper(added)
[08:25:56.564]                 for (kk in seq_along(NAMES)) {
[08:25:56.564]                   name <- added[[kk]]
[08:25:56.564]                   NAME <- NAMES[[kk]]
[08:25:56.564]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.564]                     next
[08:25:56.564]                   args[[name]] <- ""
[08:25:56.564]                 }
[08:25:56.564]                 NAMES <- toupper(removed)
[08:25:56.564]                 for (kk in seq_along(NAMES)) {
[08:25:56.564]                   name <- removed[[kk]]
[08:25:56.564]                   NAME <- NAMES[[kk]]
[08:25:56.564]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.564]                     next
[08:25:56.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.564]                 }
[08:25:56.564]                 if (length(args) > 0) 
[08:25:56.564]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.564]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.564]             }
[08:25:56.564]             else {
[08:25:56.564]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.564]             }
[08:25:56.564]             {
[08:25:56.564]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.564]                   0L) {
[08:25:56.564]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.564]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.564]                   base::options(opts)
[08:25:56.564]                 }
[08:25:56.564]                 {
[08:25:56.564]                   {
[08:25:56.564]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.564]                     NULL
[08:25:56.564]                   }
[08:25:56.564]                   options(future.plan = NULL)
[08:25:56.564]                   if (is.na(NA_character_)) 
[08:25:56.564]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.564]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.564]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.564]                     .init = FALSE)
[08:25:56.564]                 }
[08:25:56.564]             }
[08:25:56.564]         }
[08:25:56.564]     })
[08:25:56.564]     if (TRUE) {
[08:25:56.564]         base::sink(type = "output", split = FALSE)
[08:25:56.564]         if (TRUE) {
[08:25:56.564]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.564]         }
[08:25:56.564]         else {
[08:25:56.564]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.564]         }
[08:25:56.564]         base::close(...future.stdout)
[08:25:56.564]         ...future.stdout <- NULL
[08:25:56.564]     }
[08:25:56.564]     ...future.result$conditions <- ...future.conditions
[08:25:56.564]     ...future.result$finished <- base::Sys.time()
[08:25:56.564]     ...future.result
[08:25:56.564] }
[08:25:56.567] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[08:25:56.567] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[08:25:56.568] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[08:25:56.568] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:56.568] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:56.568] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[08:25:56.569] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[08:25:56.569] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[08:25:56.569] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[08:25:56.569] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:56.570] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:56.570] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[08:25:56.570] MultisessionFuture started
[08:25:56.570] - Launch lazy future ... done
[08:25:56.570] run() for ‘MultisessionFuture’ ... done
[08:25:56.570] Created future:
[08:25:56.571] MultisessionFuture:
[08:25:56.571] Label: ‘future_replicate-1’
[08:25:56.571] Expression:
[08:25:56.571] {
[08:25:56.571]     do.call(function(...) {
[08:25:56.571]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.571]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.571]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.571]             on.exit(options(oopts), add = TRUE)
[08:25:56.571]         }
[08:25:56.571]         {
[08:25:56.571]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.571]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.571]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.571]                   envir = globalenv(), inherits = FALSE)
[08:25:56.571]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.571]             })
[08:25:56.571]         }
[08:25:56.571]     }, args = future.call.arguments)
[08:25:56.571] }
[08:25:56.571] Lazy evaluation: FALSE
[08:25:56.571] Asynchronous evaluation: TRUE
[08:25:56.571] Local evaluation: TRUE
[08:25:56.571] Environment: R_GlobalEnv
[08:25:56.571] Capture standard output: TRUE
[08:25:56.571] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.571] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.571] Packages: <none>
[08:25:56.571] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.571] Resolved: FALSE
[08:25:56.571] Value: <not collected>
[08:25:56.571] Conditions captured: <none>
[08:25:56.571] Early signaling: FALSE
[08:25:56.571] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.571] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.582] Chunk #1 of 2 ... DONE
[08:25:56.582] Chunk #2 of 2 ...
[08:25:56.582]  - Finding globals in 'X' for chunk #2 ...
[08:25:56.582] getGlobalsAndPackages() ...
[08:25:56.583] Searching for globals...
[08:25:56.583] 
[08:25:56.583] Searching for globals ... DONE
[08:25:56.583] - globals: [0] <none>
[08:25:56.583] getGlobalsAndPackages() ... DONE
[08:25:56.583]    + additional globals found: [n=0] 
[08:25:56.583]    + additional namespaces needed: [n=0] 
[08:25:56.583]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:56.584]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.584]  - seeds: [3] <seeds>
[08:25:56.584]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.584] getGlobalsAndPackages() ...
[08:25:56.584] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.584] Resolving globals: FALSE
[08:25:56.584] Tweak future expression to call with '...' arguments ...
[08:25:56.584] {
[08:25:56.584]     do.call(function(...) {
[08:25:56.584]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.584]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.584]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.584]             on.exit(options(oopts), add = TRUE)
[08:25:56.584]         }
[08:25:56.584]         {
[08:25:56.584]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.584]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.584]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.584]                   envir = globalenv(), inherits = FALSE)
[08:25:56.584]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.584]             })
[08:25:56.584]         }
[08:25:56.584]     }, args = future.call.arguments)
[08:25:56.584] }
[08:25:56.585] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.585] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.585] 
[08:25:56.585] getGlobalsAndPackages() ... DONE
[08:25:56.585] run() for ‘Future’ ...
[08:25:56.586] - state: ‘created’
[08:25:56.586] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.600] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.600] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.600]   - Field: ‘node’
[08:25:56.600]   - Field: ‘label’
[08:25:56.601]   - Field: ‘local’
[08:25:56.601]   - Field: ‘owner’
[08:25:56.601]   - Field: ‘envir’
[08:25:56.601]   - Field: ‘workers’
[08:25:56.601]   - Field: ‘packages’
[08:25:56.601]   - Field: ‘gc’
[08:25:56.601]   - Field: ‘conditions’
[08:25:56.601]   - Field: ‘persistent’
[08:25:56.601]   - Field: ‘expr’
[08:25:56.601]   - Field: ‘uuid’
[08:25:56.601]   - Field: ‘seed’
[08:25:56.601]   - Field: ‘version’
[08:25:56.602]   - Field: ‘result’
[08:25:56.602]   - Field: ‘asynchronous’
[08:25:56.602]   - Field: ‘calls’
[08:25:56.602]   - Field: ‘globals’
[08:25:56.602]   - Field: ‘stdout’
[08:25:56.602]   - Field: ‘earlySignal’
[08:25:56.602]   - Field: ‘lazy’
[08:25:56.602]   - Field: ‘state’
[08:25:56.602] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.602] - Launch lazy future ...
[08:25:56.603] Packages needed by the future expression (n = 0): <none>
[08:25:56.603] Packages needed by future strategies (n = 0): <none>
[08:25:56.603] {
[08:25:56.603]     {
[08:25:56.603]         {
[08:25:56.603]             ...future.startTime <- base::Sys.time()
[08:25:56.603]             {
[08:25:56.603]                 {
[08:25:56.603]                   {
[08:25:56.603]                     {
[08:25:56.603]                       base::local({
[08:25:56.603]                         has_future <- base::requireNamespace("future", 
[08:25:56.603]                           quietly = TRUE)
[08:25:56.603]                         if (has_future) {
[08:25:56.603]                           ns <- base::getNamespace("future")
[08:25:56.603]                           version <- ns[[".package"]][["version"]]
[08:25:56.603]                           if (is.null(version)) 
[08:25:56.603]                             version <- utils::packageVersion("future")
[08:25:56.603]                         }
[08:25:56.603]                         else {
[08:25:56.603]                           version <- NULL
[08:25:56.603]                         }
[08:25:56.603]                         if (!has_future || version < "1.8.0") {
[08:25:56.603]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.603]                             "", base::R.version$version.string), 
[08:25:56.603]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.603]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.603]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.603]                               "release", "version")], collapse = " "), 
[08:25:56.603]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.603]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.603]                             info)
[08:25:56.603]                           info <- base::paste(info, collapse = "; ")
[08:25:56.603]                           if (!has_future) {
[08:25:56.603]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.603]                               info)
[08:25:56.603]                           }
[08:25:56.603]                           else {
[08:25:56.603]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.603]                               info, version)
[08:25:56.603]                           }
[08:25:56.603]                           base::stop(msg)
[08:25:56.603]                         }
[08:25:56.603]                       })
[08:25:56.603]                     }
[08:25:56.603]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.603]                     base::options(mc.cores = 1L)
[08:25:56.603]                   }
[08:25:56.603]                   ...future.strategy.old <- future::plan("list")
[08:25:56.603]                   options(future.plan = NULL)
[08:25:56.603]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.603]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.603]                 }
[08:25:56.603]                 ...future.workdir <- getwd()
[08:25:56.603]             }
[08:25:56.603]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.603]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.603]         }
[08:25:56.603]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.603]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.603]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.603]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.603]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.603]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.603]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.603]             base::names(...future.oldOptions))
[08:25:56.603]     }
[08:25:56.603]     if (FALSE) {
[08:25:56.603]     }
[08:25:56.603]     else {
[08:25:56.603]         if (TRUE) {
[08:25:56.603]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.603]                 open = "w")
[08:25:56.603]         }
[08:25:56.603]         else {
[08:25:56.603]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.603]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.603]         }
[08:25:56.603]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.603]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.603]             base::sink(type = "output", split = FALSE)
[08:25:56.603]             base::close(...future.stdout)
[08:25:56.603]         }, add = TRUE)
[08:25:56.603]     }
[08:25:56.603]     ...future.frame <- base::sys.nframe()
[08:25:56.603]     ...future.conditions <- base::list()
[08:25:56.603]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.603]     if (FALSE) {
[08:25:56.603]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.603]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.603]     }
[08:25:56.603]     ...future.result <- base::tryCatch({
[08:25:56.603]         base::withCallingHandlers({
[08:25:56.603]             ...future.value <- base::withVisible(base::local({
[08:25:56.603]                 ...future.makeSendCondition <- base::local({
[08:25:56.603]                   sendCondition <- NULL
[08:25:56.603]                   function(frame = 1L) {
[08:25:56.603]                     if (is.function(sendCondition)) 
[08:25:56.603]                       return(sendCondition)
[08:25:56.603]                     ns <- getNamespace("parallel")
[08:25:56.603]                     if (exists("sendData", mode = "function", 
[08:25:56.603]                       envir = ns)) {
[08:25:56.603]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.603]                         envir = ns)
[08:25:56.603]                       envir <- sys.frame(frame)
[08:25:56.603]                       master <- NULL
[08:25:56.603]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.603]                         !identical(envir, emptyenv())) {
[08:25:56.603]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.603]                           inherits = FALSE)) {
[08:25:56.603]                           master <- get("master", mode = "list", 
[08:25:56.603]                             envir = envir, inherits = FALSE)
[08:25:56.603]                           if (inherits(master, c("SOCKnode", 
[08:25:56.603]                             "SOCK0node"))) {
[08:25:56.603]                             sendCondition <<- function(cond) {
[08:25:56.603]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.603]                                 success = TRUE)
[08:25:56.603]                               parallel_sendData(master, data)
[08:25:56.603]                             }
[08:25:56.603]                             return(sendCondition)
[08:25:56.603]                           }
[08:25:56.603]                         }
[08:25:56.603]                         frame <- frame + 1L
[08:25:56.603]                         envir <- sys.frame(frame)
[08:25:56.603]                       }
[08:25:56.603]                     }
[08:25:56.603]                     sendCondition <<- function(cond) NULL
[08:25:56.603]                   }
[08:25:56.603]                 })
[08:25:56.603]                 withCallingHandlers({
[08:25:56.603]                   {
[08:25:56.603]                     do.call(function(...) {
[08:25:56.603]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.603]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.603]                         ...future.globals.maxSize)) {
[08:25:56.603]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.603]                         on.exit(options(oopts), add = TRUE)
[08:25:56.603]                       }
[08:25:56.603]                       {
[08:25:56.603]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.603]                           FUN = function(jj) {
[08:25:56.603]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.603]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.603]                               envir = globalenv(), inherits = FALSE)
[08:25:56.603]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.603]                           })
[08:25:56.603]                       }
[08:25:56.603]                     }, args = future.call.arguments)
[08:25:56.603]                   }
[08:25:56.603]                 }, immediateCondition = function(cond) {
[08:25:56.603]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.603]                   sendCondition(cond)
[08:25:56.603]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.603]                   {
[08:25:56.603]                     inherits <- base::inherits
[08:25:56.603]                     invokeRestart <- base::invokeRestart
[08:25:56.603]                     is.null <- base::is.null
[08:25:56.603]                     muffled <- FALSE
[08:25:56.603]                     if (inherits(cond, "message")) {
[08:25:56.603]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.603]                       if (muffled) 
[08:25:56.603]                         invokeRestart("muffleMessage")
[08:25:56.603]                     }
[08:25:56.603]                     else if (inherits(cond, "warning")) {
[08:25:56.603]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.603]                       if (muffled) 
[08:25:56.603]                         invokeRestart("muffleWarning")
[08:25:56.603]                     }
[08:25:56.603]                     else if (inherits(cond, "condition")) {
[08:25:56.603]                       if (!is.null(pattern)) {
[08:25:56.603]                         computeRestarts <- base::computeRestarts
[08:25:56.603]                         grepl <- base::grepl
[08:25:56.603]                         restarts <- computeRestarts(cond)
[08:25:56.603]                         for (restart in restarts) {
[08:25:56.603]                           name <- restart$name
[08:25:56.603]                           if (is.null(name)) 
[08:25:56.603]                             next
[08:25:56.603]                           if (!grepl(pattern, name)) 
[08:25:56.603]                             next
[08:25:56.603]                           invokeRestart(restart)
[08:25:56.603]                           muffled <- TRUE
[08:25:56.603]                           break
[08:25:56.603]                         }
[08:25:56.603]                       }
[08:25:56.603]                     }
[08:25:56.603]                     invisible(muffled)
[08:25:56.603]                   }
[08:25:56.603]                   muffleCondition(cond)
[08:25:56.603]                 })
[08:25:56.603]             }))
[08:25:56.603]             future::FutureResult(value = ...future.value$value, 
[08:25:56.603]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.603]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.603]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.603]                     ...future.globalenv.names))
[08:25:56.603]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.603]         }, condition = base::local({
[08:25:56.603]             c <- base::c
[08:25:56.603]             inherits <- base::inherits
[08:25:56.603]             invokeRestart <- base::invokeRestart
[08:25:56.603]             length <- base::length
[08:25:56.603]             list <- base::list
[08:25:56.603]             seq.int <- base::seq.int
[08:25:56.603]             signalCondition <- base::signalCondition
[08:25:56.603]             sys.calls <- base::sys.calls
[08:25:56.603]             `[[` <- base::`[[`
[08:25:56.603]             `+` <- base::`+`
[08:25:56.603]             `<<-` <- base::`<<-`
[08:25:56.603]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.603]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.603]                   3L)]
[08:25:56.603]             }
[08:25:56.603]             function(cond) {
[08:25:56.603]                 is_error <- inherits(cond, "error")
[08:25:56.603]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.603]                   NULL)
[08:25:56.603]                 if (is_error) {
[08:25:56.603]                   sessionInformation <- function() {
[08:25:56.603]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.603]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.603]                       search = base::search(), system = base::Sys.info())
[08:25:56.603]                   }
[08:25:56.603]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.603]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.603]                     cond$call), session = sessionInformation(), 
[08:25:56.603]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.603]                   signalCondition(cond)
[08:25:56.603]                 }
[08:25:56.603]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.603]                 "immediateCondition"))) {
[08:25:56.603]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.603]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.603]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.603]                   if (TRUE && !signal) {
[08:25:56.603]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.603]                     {
[08:25:56.603]                       inherits <- base::inherits
[08:25:56.603]                       invokeRestart <- base::invokeRestart
[08:25:56.603]                       is.null <- base::is.null
[08:25:56.603]                       muffled <- FALSE
[08:25:56.603]                       if (inherits(cond, "message")) {
[08:25:56.603]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.603]                         if (muffled) 
[08:25:56.603]                           invokeRestart("muffleMessage")
[08:25:56.603]                       }
[08:25:56.603]                       else if (inherits(cond, "warning")) {
[08:25:56.603]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.603]                         if (muffled) 
[08:25:56.603]                           invokeRestart("muffleWarning")
[08:25:56.603]                       }
[08:25:56.603]                       else if (inherits(cond, "condition")) {
[08:25:56.603]                         if (!is.null(pattern)) {
[08:25:56.603]                           computeRestarts <- base::computeRestarts
[08:25:56.603]                           grepl <- base::grepl
[08:25:56.603]                           restarts <- computeRestarts(cond)
[08:25:56.603]                           for (restart in restarts) {
[08:25:56.603]                             name <- restart$name
[08:25:56.603]                             if (is.null(name)) 
[08:25:56.603]                               next
[08:25:56.603]                             if (!grepl(pattern, name)) 
[08:25:56.603]                               next
[08:25:56.603]                             invokeRestart(restart)
[08:25:56.603]                             muffled <- TRUE
[08:25:56.603]                             break
[08:25:56.603]                           }
[08:25:56.603]                         }
[08:25:56.603]                       }
[08:25:56.603]                       invisible(muffled)
[08:25:56.603]                     }
[08:25:56.603]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.603]                   }
[08:25:56.603]                 }
[08:25:56.603]                 else {
[08:25:56.603]                   if (TRUE) {
[08:25:56.603]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.603]                     {
[08:25:56.603]                       inherits <- base::inherits
[08:25:56.603]                       invokeRestart <- base::invokeRestart
[08:25:56.603]                       is.null <- base::is.null
[08:25:56.603]                       muffled <- FALSE
[08:25:56.603]                       if (inherits(cond, "message")) {
[08:25:56.603]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.603]                         if (muffled) 
[08:25:56.603]                           invokeRestart("muffleMessage")
[08:25:56.603]                       }
[08:25:56.603]                       else if (inherits(cond, "warning")) {
[08:25:56.603]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.603]                         if (muffled) 
[08:25:56.603]                           invokeRestart("muffleWarning")
[08:25:56.603]                       }
[08:25:56.603]                       else if (inherits(cond, "condition")) {
[08:25:56.603]                         if (!is.null(pattern)) {
[08:25:56.603]                           computeRestarts <- base::computeRestarts
[08:25:56.603]                           grepl <- base::grepl
[08:25:56.603]                           restarts <- computeRestarts(cond)
[08:25:56.603]                           for (restart in restarts) {
[08:25:56.603]                             name <- restart$name
[08:25:56.603]                             if (is.null(name)) 
[08:25:56.603]                               next
[08:25:56.603]                             if (!grepl(pattern, name)) 
[08:25:56.603]                               next
[08:25:56.603]                             invokeRestart(restart)
[08:25:56.603]                             muffled <- TRUE
[08:25:56.603]                             break
[08:25:56.603]                           }
[08:25:56.603]                         }
[08:25:56.603]                       }
[08:25:56.603]                       invisible(muffled)
[08:25:56.603]                     }
[08:25:56.603]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.603]                   }
[08:25:56.603]                 }
[08:25:56.603]             }
[08:25:56.603]         }))
[08:25:56.603]     }, error = function(ex) {
[08:25:56.603]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.603]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.603]                 ...future.rng), started = ...future.startTime, 
[08:25:56.603]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.603]             version = "1.8"), class = "FutureResult")
[08:25:56.603]     }, finally = {
[08:25:56.603]         if (!identical(...future.workdir, getwd())) 
[08:25:56.603]             setwd(...future.workdir)
[08:25:56.603]         {
[08:25:56.603]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.603]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.603]             }
[08:25:56.603]             base::options(...future.oldOptions)
[08:25:56.603]             if (.Platform$OS.type == "windows") {
[08:25:56.603]                 old_names <- names(...future.oldEnvVars)
[08:25:56.603]                 envs <- base::Sys.getenv()
[08:25:56.603]                 names <- names(envs)
[08:25:56.603]                 common <- intersect(names, old_names)
[08:25:56.603]                 added <- setdiff(names, old_names)
[08:25:56.603]                 removed <- setdiff(old_names, names)
[08:25:56.603]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.603]                   envs[common]]
[08:25:56.603]                 NAMES <- toupper(changed)
[08:25:56.603]                 args <- list()
[08:25:56.603]                 for (kk in seq_along(NAMES)) {
[08:25:56.603]                   name <- changed[[kk]]
[08:25:56.603]                   NAME <- NAMES[[kk]]
[08:25:56.603]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.603]                     next
[08:25:56.603]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.603]                 }
[08:25:56.603]                 NAMES <- toupper(added)
[08:25:56.603]                 for (kk in seq_along(NAMES)) {
[08:25:56.603]                   name <- added[[kk]]
[08:25:56.603]                   NAME <- NAMES[[kk]]
[08:25:56.603]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.603]                     next
[08:25:56.603]                   args[[name]] <- ""
[08:25:56.603]                 }
[08:25:56.603]                 NAMES <- toupper(removed)
[08:25:56.603]                 for (kk in seq_along(NAMES)) {
[08:25:56.603]                   name <- removed[[kk]]
[08:25:56.603]                   NAME <- NAMES[[kk]]
[08:25:56.603]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.603]                     next
[08:25:56.603]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.603]                 }
[08:25:56.603]                 if (length(args) > 0) 
[08:25:56.603]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.603]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.603]             }
[08:25:56.603]             else {
[08:25:56.603]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.603]             }
[08:25:56.603]             {
[08:25:56.603]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.603]                   0L) {
[08:25:56.603]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.603]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.603]                   base::options(opts)
[08:25:56.603]                 }
[08:25:56.603]                 {
[08:25:56.603]                   {
[08:25:56.603]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.603]                     NULL
[08:25:56.603]                   }
[08:25:56.603]                   options(future.plan = NULL)
[08:25:56.603]                   if (is.na(NA_character_)) 
[08:25:56.603]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.603]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.603]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.603]                     .init = FALSE)
[08:25:56.603]                 }
[08:25:56.603]             }
[08:25:56.603]         }
[08:25:56.603]     })
[08:25:56.603]     if (TRUE) {
[08:25:56.603]         base::sink(type = "output", split = FALSE)
[08:25:56.603]         if (TRUE) {
[08:25:56.603]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.603]         }
[08:25:56.603]         else {
[08:25:56.603]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.603]         }
[08:25:56.603]         base::close(...future.stdout)
[08:25:56.603]         ...future.stdout <- NULL
[08:25:56.603]     }
[08:25:56.603]     ...future.result$conditions <- ...future.conditions
[08:25:56.603]     ...future.result$finished <- base::Sys.time()
[08:25:56.603]     ...future.result
[08:25:56.603] }
[08:25:56.606] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[08:25:56.606] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[08:25:56.607] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[08:25:56.607] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:56.607] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:56.608] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[08:25:56.608] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[08:25:56.608] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[08:25:56.609] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[08:25:56.609] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:56.609] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:56.609] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[08:25:56.610] MultisessionFuture started
[08:25:56.610] - Launch lazy future ... done
[08:25:56.610] run() for ‘MultisessionFuture’ ... done
[08:25:56.610] Created future:
[08:25:56.610] MultisessionFuture:
[08:25:56.610] Label: ‘future_replicate-2’
[08:25:56.610] Expression:
[08:25:56.610] {
[08:25:56.610]     do.call(function(...) {
[08:25:56.610]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.610]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.610]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.610]             on.exit(options(oopts), add = TRUE)
[08:25:56.610]         }
[08:25:56.610]         {
[08:25:56.610]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.610]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.610]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.610]                   envir = globalenv(), inherits = FALSE)
[08:25:56.610]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.610]             })
[08:25:56.610]         }
[08:25:56.610]     }, args = future.call.arguments)
[08:25:56.610] }
[08:25:56.610] Lazy evaluation: FALSE
[08:25:56.610] Asynchronous evaluation: TRUE
[08:25:56.610] Local evaluation: TRUE
[08:25:56.610] Environment: R_GlobalEnv
[08:25:56.610] Capture standard output: TRUE
[08:25:56.610] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.610] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.610] Packages: <none>
[08:25:56.610] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.610] Resolved: FALSE
[08:25:56.610] Value: <not collected>
[08:25:56.610] Conditions captured: <none>
[08:25:56.610] Early signaling: FALSE
[08:25:56.610] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.610] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.622] Chunk #2 of 2 ... DONE
[08:25:56.622] Launching 2 futures (chunks) ... DONE
[08:25:56.622] Resolving 2 futures (chunks) ...
[08:25:56.622] resolve() on list ...
[08:25:56.622]  recursive: 0
[08:25:56.622]  length: 2
[08:25:56.623] 
[08:25:56.625] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.626] - Validating connection of MultisessionFuture
[08:25:56.626] - received message: FutureResult
[08:25:56.626] - Received FutureResult
[08:25:56.626] - Erased future from FutureRegistry
[08:25:56.626] result() for ClusterFuture ...
[08:25:56.626] - result already collected: FutureResult
[08:25:56.626] result() for ClusterFuture ... done
[08:25:56.626] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.627] Future #1
[08:25:56.627] result() for ClusterFuture ...
[08:25:56.627] - result already collected: FutureResult
[08:25:56.627] result() for ClusterFuture ... done
[08:25:56.627] result() for ClusterFuture ...
[08:25:56.627] - result already collected: FutureResult
[08:25:56.627] result() for ClusterFuture ... done
[08:25:56.627] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:56.627] - nx: 2
[08:25:56.627] - relay: TRUE
[08:25:56.627] - stdout: TRUE
[08:25:56.627] - signal: TRUE
[08:25:56.628] - resignal: FALSE
[08:25:56.628] - force: TRUE
[08:25:56.628] - relayed: [n=2] FALSE, FALSE
[08:25:56.628] - queued futures: [n=2] FALSE, FALSE
[08:25:56.628]  - until=1
[08:25:56.628]  - relaying element #1
[08:25:56.628] result() for ClusterFuture ...
[08:25:56.628] - result already collected: FutureResult
[08:25:56.628] result() for ClusterFuture ... done
[08:25:56.628] result() for ClusterFuture ...
[08:25:56.628] - result already collected: FutureResult
[08:25:56.628] result() for ClusterFuture ... done
[08:25:56.629] result() for ClusterFuture ...
[08:25:56.629] - result already collected: FutureResult
[08:25:56.629] result() for ClusterFuture ... done
[08:25:56.629] result() for ClusterFuture ...
[08:25:56.629] - result already collected: FutureResult
[08:25:56.629] result() for ClusterFuture ... done
[08:25:56.629] - relayed: [n=2] TRUE, FALSE
[08:25:56.629] - queued futures: [n=2] TRUE, FALSE
[08:25:56.629] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:56.629]  length: 1 (resolved future 1)
[08:25:56.652] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.653] - Validating connection of MultisessionFuture
[08:25:56.653] - received message: FutureResult
[08:25:56.653] - Received FutureResult
[08:25:56.653] - Erased future from FutureRegistry
[08:25:56.653] result() for ClusterFuture ...
[08:25:56.653] - result already collected: FutureResult
[08:25:56.653] result() for ClusterFuture ... done
[08:25:56.654] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.654] Future #2
[08:25:56.654] result() for ClusterFuture ...
[08:25:56.654] - result already collected: FutureResult
[08:25:56.654] result() for ClusterFuture ... done
[08:25:56.654] result() for ClusterFuture ...
[08:25:56.654] - result already collected: FutureResult
[08:25:56.654] result() for ClusterFuture ... done
[08:25:56.654] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:56.654] - nx: 2
[08:25:56.654] - relay: TRUE
[08:25:56.655] - stdout: TRUE
[08:25:56.655] - signal: TRUE
[08:25:56.655] - resignal: FALSE
[08:25:56.655] - force: TRUE
[08:25:56.655] - relayed: [n=2] TRUE, FALSE
[08:25:56.655] - queued futures: [n=2] TRUE, FALSE
[08:25:56.655]  - until=2
[08:25:56.655]  - relaying element #2
[08:25:56.655] result() for ClusterFuture ...
[08:25:56.655] - result already collected: FutureResult
[08:25:56.655] result() for ClusterFuture ... done
[08:25:56.655] result() for ClusterFuture ...
[08:25:56.656] - result already collected: FutureResult
[08:25:56.656] result() for ClusterFuture ... done
[08:25:56.656] result() for ClusterFuture ...
[08:25:56.656] - result already collected: FutureResult
[08:25:56.656] result() for ClusterFuture ... done
[08:25:56.656] result() for ClusterFuture ...
[08:25:56.656] - result already collected: FutureResult
[08:25:56.656] result() for ClusterFuture ... done
[08:25:56.656] - relayed: [n=2] TRUE, TRUE
[08:25:56.656] - queued futures: [n=2] TRUE, TRUE
[08:25:56.656] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:56.657]  length: 0 (resolved future 2)
[08:25:56.657] Relaying remaining futures
[08:25:56.657] signalConditionsASAP(NULL, pos=0) ...
[08:25:56.657] - nx: 2
[08:25:56.657] - relay: TRUE
[08:25:56.657] - stdout: TRUE
[08:25:56.657] - signal: TRUE
[08:25:56.657] - resignal: FALSE
[08:25:56.657] - force: TRUE
[08:25:56.657] - relayed: [n=2] TRUE, TRUE
[08:25:56.657] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:56.657] - relayed: [n=2] TRUE, TRUE
[08:25:56.658] - queued futures: [n=2] TRUE, TRUE
[08:25:56.658] signalConditionsASAP(NULL, pos=0) ... done
[08:25:56.658] resolve() on list ... DONE
[08:25:56.658] result() for ClusterFuture ...
[08:25:56.658] - result already collected: FutureResult
[08:25:56.658] result() for ClusterFuture ... done
[08:25:56.658] result() for ClusterFuture ...
[08:25:56.658] - result already collected: FutureResult
[08:25:56.658] result() for ClusterFuture ... done
[08:25:56.658] result() for ClusterFuture ...
[08:25:56.658] - result already collected: FutureResult
[08:25:56.658] result() for ClusterFuture ... done
[08:25:56.659] result() for ClusterFuture ...
[08:25:56.659] - result already collected: FutureResult
[08:25:56.659] result() for ClusterFuture ... done
[08:25:56.659]  - Number of value chunks collected: 2
[08:25:56.659] Resolving 2 futures (chunks) ... DONE
[08:25:56.659] Reducing values from 2 chunks ...
[08:25:56.659]  - Number of values collected after concatenation: 5
[08:25:56.659]  - Number of values expected: 5
[08:25:56.659] Reducing values from 2 chunks ... DONE
[08:25:56.659] future_lapply() ... DONE
[08:25:56.660] future_lapply() ...
[08:25:56.660] Generating random seeds ...
[08:25:56.660] Generating random seed streams for 5 elements ...
[08:25:56.660] Generating random seed streams for 5 elements ... DONE
[08:25:56.660] Generating random seeds ... DONE
[08:25:56.660] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:56.663] Number of chunks: 2
[08:25:56.663] getGlobalsAndPackagesXApply() ...
[08:25:56.663]  - future.globals: TRUE
[08:25:56.663] getGlobalsAndPackages() ...
[08:25:56.663] Searching for globals...
[08:25:56.664] - globals found: [2] ‘FUN’, ‘sample’
[08:25:56.664] Searching for globals ... DONE
[08:25:56.665] Resolving globals: FALSE
[08:25:56.665] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:56.665] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:56.665] - globals: [1] ‘FUN’
[08:25:56.665] 
[08:25:56.666] getGlobalsAndPackages() ... DONE
[08:25:56.666]  - globals found/used: [n=1] ‘FUN’
[08:25:56.666]  - needed namespaces: [n=0] 
[08:25:56.666] Finding globals ... DONE
[08:25:56.666]  - use_args: TRUE
[08:25:56.666]  - Getting '...' globals ...
[08:25:56.666] resolve() on list ...
[08:25:56.666]  recursive: 0
[08:25:56.666]  length: 1
[08:25:56.667]  elements: ‘...’
[08:25:56.667]  length: 0 (resolved future 1)
[08:25:56.667] resolve() on list ... DONE
[08:25:56.667]    - '...' content: [n=0] 
[08:25:56.667] List of 1
[08:25:56.667]  $ ...: list()
[08:25:56.667]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.667]  - attr(*, "where")=List of 1
[08:25:56.667]   ..$ ...:<environment: 0x55f777cea220> 
[08:25:56.667]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.667]  - attr(*, "resolved")= logi TRUE
[08:25:56.667]  - attr(*, "total_size")= num NA
[08:25:56.669]  - Getting '...' globals ... DONE
[08:25:56.670] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:56.670] List of 2
[08:25:56.670]  $ ...future.FUN:function (...)  
[08:25:56.670]  $ ...          : list()
[08:25:56.670]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.670]  - attr(*, "where")=List of 2
[08:25:56.670]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:56.670]   ..$ ...          :<environment: 0x55f777cea220> 
[08:25:56.670]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.670]  - attr(*, "resolved")= logi FALSE
[08:25:56.670]  - attr(*, "total_size")= num 7184
[08:25:56.672] Packages to be attached in all futures: [n=0] 
[08:25:56.673] getGlobalsAndPackagesXApply() ... DONE
[08:25:56.673] Number of futures (= number of chunks): 2
[08:25:56.673] Launching 2 futures (chunks) ...
[08:25:56.673] Chunk #1 of 2 ...
[08:25:56.673]  - Finding globals in 'X' for chunk #1 ...
[08:25:56.673] getGlobalsAndPackages() ...
[08:25:56.673] Searching for globals...
[08:25:56.674] 
[08:25:56.674] Searching for globals ... DONE
[08:25:56.674] - globals: [0] <none>
[08:25:56.674] getGlobalsAndPackages() ... DONE
[08:25:56.674]    + additional globals found: [n=0] 
[08:25:56.674]    + additional namespaces needed: [n=0] 
[08:25:56.674]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:56.674]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.674]  - seeds: [2] <seeds>
[08:25:56.674]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.674] getGlobalsAndPackages() ...
[08:25:56.675] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.675] Resolving globals: FALSE
[08:25:56.675] Tweak future expression to call with '...' arguments ...
[08:25:56.675] {
[08:25:56.675]     do.call(function(...) {
[08:25:56.675]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.675]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.675]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.675]             on.exit(options(oopts), add = TRUE)
[08:25:56.675]         }
[08:25:56.675]         {
[08:25:56.675]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.675]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.675]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.675]                   envir = globalenv(), inherits = FALSE)
[08:25:56.675]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.675]             })
[08:25:56.675]         }
[08:25:56.675]     }, args = future.call.arguments)
[08:25:56.675] }
[08:25:56.675] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.675] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.676] 
[08:25:56.676] getGlobalsAndPackages() ... DONE
[08:25:56.676] run() for ‘Future’ ...
[08:25:56.676] - state: ‘created’
[08:25:56.676] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.690] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.691] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.691]   - Field: ‘node’
[08:25:56.691]   - Field: ‘label’
[08:25:56.691]   - Field: ‘local’
[08:25:56.691]   - Field: ‘owner’
[08:25:56.691]   - Field: ‘envir’
[08:25:56.691]   - Field: ‘workers’
[08:25:56.691]   - Field: ‘packages’
[08:25:56.691]   - Field: ‘gc’
[08:25:56.691]   - Field: ‘conditions’
[08:25:56.692]   - Field: ‘persistent’
[08:25:56.692]   - Field: ‘expr’
[08:25:56.692]   - Field: ‘uuid’
[08:25:56.692]   - Field: ‘seed’
[08:25:56.692]   - Field: ‘version’
[08:25:56.692]   - Field: ‘result’
[08:25:56.692]   - Field: ‘asynchronous’
[08:25:56.692]   - Field: ‘calls’
[08:25:56.692]   - Field: ‘globals’
[08:25:56.692]   - Field: ‘stdout’
[08:25:56.692]   - Field: ‘earlySignal’
[08:25:56.693]   - Field: ‘lazy’
[08:25:56.693]   - Field: ‘state’
[08:25:56.693] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.693] - Launch lazy future ...
[08:25:56.693] Packages needed by the future expression (n = 0): <none>
[08:25:56.693] Packages needed by future strategies (n = 0): <none>
[08:25:56.694] {
[08:25:56.694]     {
[08:25:56.694]         {
[08:25:56.694]             ...future.startTime <- base::Sys.time()
[08:25:56.694]             {
[08:25:56.694]                 {
[08:25:56.694]                   {
[08:25:56.694]                     {
[08:25:56.694]                       base::local({
[08:25:56.694]                         has_future <- base::requireNamespace("future", 
[08:25:56.694]                           quietly = TRUE)
[08:25:56.694]                         if (has_future) {
[08:25:56.694]                           ns <- base::getNamespace("future")
[08:25:56.694]                           version <- ns[[".package"]][["version"]]
[08:25:56.694]                           if (is.null(version)) 
[08:25:56.694]                             version <- utils::packageVersion("future")
[08:25:56.694]                         }
[08:25:56.694]                         else {
[08:25:56.694]                           version <- NULL
[08:25:56.694]                         }
[08:25:56.694]                         if (!has_future || version < "1.8.0") {
[08:25:56.694]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.694]                             "", base::R.version$version.string), 
[08:25:56.694]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.694]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.694]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.694]                               "release", "version")], collapse = " "), 
[08:25:56.694]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.694]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.694]                             info)
[08:25:56.694]                           info <- base::paste(info, collapse = "; ")
[08:25:56.694]                           if (!has_future) {
[08:25:56.694]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.694]                               info)
[08:25:56.694]                           }
[08:25:56.694]                           else {
[08:25:56.694]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.694]                               info, version)
[08:25:56.694]                           }
[08:25:56.694]                           base::stop(msg)
[08:25:56.694]                         }
[08:25:56.694]                       })
[08:25:56.694]                     }
[08:25:56.694]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.694]                     base::options(mc.cores = 1L)
[08:25:56.694]                   }
[08:25:56.694]                   ...future.strategy.old <- future::plan("list")
[08:25:56.694]                   options(future.plan = NULL)
[08:25:56.694]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.694]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.694]                 }
[08:25:56.694]                 ...future.workdir <- getwd()
[08:25:56.694]             }
[08:25:56.694]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.694]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.694]         }
[08:25:56.694]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.694]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.694]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.694]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.694]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.694]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.694]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.694]             base::names(...future.oldOptions))
[08:25:56.694]     }
[08:25:56.694]     if (FALSE) {
[08:25:56.694]     }
[08:25:56.694]     else {
[08:25:56.694]         if (TRUE) {
[08:25:56.694]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.694]                 open = "w")
[08:25:56.694]         }
[08:25:56.694]         else {
[08:25:56.694]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.694]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.694]         }
[08:25:56.694]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.694]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.694]             base::sink(type = "output", split = FALSE)
[08:25:56.694]             base::close(...future.stdout)
[08:25:56.694]         }, add = TRUE)
[08:25:56.694]     }
[08:25:56.694]     ...future.frame <- base::sys.nframe()
[08:25:56.694]     ...future.conditions <- base::list()
[08:25:56.694]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.694]     if (FALSE) {
[08:25:56.694]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.694]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.694]     }
[08:25:56.694]     ...future.result <- base::tryCatch({
[08:25:56.694]         base::withCallingHandlers({
[08:25:56.694]             ...future.value <- base::withVisible(base::local({
[08:25:56.694]                 ...future.makeSendCondition <- base::local({
[08:25:56.694]                   sendCondition <- NULL
[08:25:56.694]                   function(frame = 1L) {
[08:25:56.694]                     if (is.function(sendCondition)) 
[08:25:56.694]                       return(sendCondition)
[08:25:56.694]                     ns <- getNamespace("parallel")
[08:25:56.694]                     if (exists("sendData", mode = "function", 
[08:25:56.694]                       envir = ns)) {
[08:25:56.694]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.694]                         envir = ns)
[08:25:56.694]                       envir <- sys.frame(frame)
[08:25:56.694]                       master <- NULL
[08:25:56.694]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.694]                         !identical(envir, emptyenv())) {
[08:25:56.694]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.694]                           inherits = FALSE)) {
[08:25:56.694]                           master <- get("master", mode = "list", 
[08:25:56.694]                             envir = envir, inherits = FALSE)
[08:25:56.694]                           if (inherits(master, c("SOCKnode", 
[08:25:56.694]                             "SOCK0node"))) {
[08:25:56.694]                             sendCondition <<- function(cond) {
[08:25:56.694]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.694]                                 success = TRUE)
[08:25:56.694]                               parallel_sendData(master, data)
[08:25:56.694]                             }
[08:25:56.694]                             return(sendCondition)
[08:25:56.694]                           }
[08:25:56.694]                         }
[08:25:56.694]                         frame <- frame + 1L
[08:25:56.694]                         envir <- sys.frame(frame)
[08:25:56.694]                       }
[08:25:56.694]                     }
[08:25:56.694]                     sendCondition <<- function(cond) NULL
[08:25:56.694]                   }
[08:25:56.694]                 })
[08:25:56.694]                 withCallingHandlers({
[08:25:56.694]                   {
[08:25:56.694]                     do.call(function(...) {
[08:25:56.694]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.694]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.694]                         ...future.globals.maxSize)) {
[08:25:56.694]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.694]                         on.exit(options(oopts), add = TRUE)
[08:25:56.694]                       }
[08:25:56.694]                       {
[08:25:56.694]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.694]                           FUN = function(jj) {
[08:25:56.694]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.694]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.694]                               envir = globalenv(), inherits = FALSE)
[08:25:56.694]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.694]                           })
[08:25:56.694]                       }
[08:25:56.694]                     }, args = future.call.arguments)
[08:25:56.694]                   }
[08:25:56.694]                 }, immediateCondition = function(cond) {
[08:25:56.694]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.694]                   sendCondition(cond)
[08:25:56.694]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.694]                   {
[08:25:56.694]                     inherits <- base::inherits
[08:25:56.694]                     invokeRestart <- base::invokeRestart
[08:25:56.694]                     is.null <- base::is.null
[08:25:56.694]                     muffled <- FALSE
[08:25:56.694]                     if (inherits(cond, "message")) {
[08:25:56.694]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.694]                       if (muffled) 
[08:25:56.694]                         invokeRestart("muffleMessage")
[08:25:56.694]                     }
[08:25:56.694]                     else if (inherits(cond, "warning")) {
[08:25:56.694]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.694]                       if (muffled) 
[08:25:56.694]                         invokeRestart("muffleWarning")
[08:25:56.694]                     }
[08:25:56.694]                     else if (inherits(cond, "condition")) {
[08:25:56.694]                       if (!is.null(pattern)) {
[08:25:56.694]                         computeRestarts <- base::computeRestarts
[08:25:56.694]                         grepl <- base::grepl
[08:25:56.694]                         restarts <- computeRestarts(cond)
[08:25:56.694]                         for (restart in restarts) {
[08:25:56.694]                           name <- restart$name
[08:25:56.694]                           if (is.null(name)) 
[08:25:56.694]                             next
[08:25:56.694]                           if (!grepl(pattern, name)) 
[08:25:56.694]                             next
[08:25:56.694]                           invokeRestart(restart)
[08:25:56.694]                           muffled <- TRUE
[08:25:56.694]                           break
[08:25:56.694]                         }
[08:25:56.694]                       }
[08:25:56.694]                     }
[08:25:56.694]                     invisible(muffled)
[08:25:56.694]                   }
[08:25:56.694]                   muffleCondition(cond)
[08:25:56.694]                 })
[08:25:56.694]             }))
[08:25:56.694]             future::FutureResult(value = ...future.value$value, 
[08:25:56.694]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.694]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.694]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.694]                     ...future.globalenv.names))
[08:25:56.694]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.694]         }, condition = base::local({
[08:25:56.694]             c <- base::c
[08:25:56.694]             inherits <- base::inherits
[08:25:56.694]             invokeRestart <- base::invokeRestart
[08:25:56.694]             length <- base::length
[08:25:56.694]             list <- base::list
[08:25:56.694]             seq.int <- base::seq.int
[08:25:56.694]             signalCondition <- base::signalCondition
[08:25:56.694]             sys.calls <- base::sys.calls
[08:25:56.694]             `[[` <- base::`[[`
[08:25:56.694]             `+` <- base::`+`
[08:25:56.694]             `<<-` <- base::`<<-`
[08:25:56.694]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.694]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.694]                   3L)]
[08:25:56.694]             }
[08:25:56.694]             function(cond) {
[08:25:56.694]                 is_error <- inherits(cond, "error")
[08:25:56.694]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.694]                   NULL)
[08:25:56.694]                 if (is_error) {
[08:25:56.694]                   sessionInformation <- function() {
[08:25:56.694]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.694]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.694]                       search = base::search(), system = base::Sys.info())
[08:25:56.694]                   }
[08:25:56.694]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.694]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.694]                     cond$call), session = sessionInformation(), 
[08:25:56.694]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.694]                   signalCondition(cond)
[08:25:56.694]                 }
[08:25:56.694]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.694]                 "immediateCondition"))) {
[08:25:56.694]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.694]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.694]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.694]                   if (TRUE && !signal) {
[08:25:56.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.694]                     {
[08:25:56.694]                       inherits <- base::inherits
[08:25:56.694]                       invokeRestart <- base::invokeRestart
[08:25:56.694]                       is.null <- base::is.null
[08:25:56.694]                       muffled <- FALSE
[08:25:56.694]                       if (inherits(cond, "message")) {
[08:25:56.694]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.694]                         if (muffled) 
[08:25:56.694]                           invokeRestart("muffleMessage")
[08:25:56.694]                       }
[08:25:56.694]                       else if (inherits(cond, "warning")) {
[08:25:56.694]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.694]                         if (muffled) 
[08:25:56.694]                           invokeRestart("muffleWarning")
[08:25:56.694]                       }
[08:25:56.694]                       else if (inherits(cond, "condition")) {
[08:25:56.694]                         if (!is.null(pattern)) {
[08:25:56.694]                           computeRestarts <- base::computeRestarts
[08:25:56.694]                           grepl <- base::grepl
[08:25:56.694]                           restarts <- computeRestarts(cond)
[08:25:56.694]                           for (restart in restarts) {
[08:25:56.694]                             name <- restart$name
[08:25:56.694]                             if (is.null(name)) 
[08:25:56.694]                               next
[08:25:56.694]                             if (!grepl(pattern, name)) 
[08:25:56.694]                               next
[08:25:56.694]                             invokeRestart(restart)
[08:25:56.694]                             muffled <- TRUE
[08:25:56.694]                             break
[08:25:56.694]                           }
[08:25:56.694]                         }
[08:25:56.694]                       }
[08:25:56.694]                       invisible(muffled)
[08:25:56.694]                     }
[08:25:56.694]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.694]                   }
[08:25:56.694]                 }
[08:25:56.694]                 else {
[08:25:56.694]                   if (TRUE) {
[08:25:56.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.694]                     {
[08:25:56.694]                       inherits <- base::inherits
[08:25:56.694]                       invokeRestart <- base::invokeRestart
[08:25:56.694]                       is.null <- base::is.null
[08:25:56.694]                       muffled <- FALSE
[08:25:56.694]                       if (inherits(cond, "message")) {
[08:25:56.694]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.694]                         if (muffled) 
[08:25:56.694]                           invokeRestart("muffleMessage")
[08:25:56.694]                       }
[08:25:56.694]                       else if (inherits(cond, "warning")) {
[08:25:56.694]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.694]                         if (muffled) 
[08:25:56.694]                           invokeRestart("muffleWarning")
[08:25:56.694]                       }
[08:25:56.694]                       else if (inherits(cond, "condition")) {
[08:25:56.694]                         if (!is.null(pattern)) {
[08:25:56.694]                           computeRestarts <- base::computeRestarts
[08:25:56.694]                           grepl <- base::grepl
[08:25:56.694]                           restarts <- computeRestarts(cond)
[08:25:56.694]                           for (restart in restarts) {
[08:25:56.694]                             name <- restart$name
[08:25:56.694]                             if (is.null(name)) 
[08:25:56.694]                               next
[08:25:56.694]                             if (!grepl(pattern, name)) 
[08:25:56.694]                               next
[08:25:56.694]                             invokeRestart(restart)
[08:25:56.694]                             muffled <- TRUE
[08:25:56.694]                             break
[08:25:56.694]                           }
[08:25:56.694]                         }
[08:25:56.694]                       }
[08:25:56.694]                       invisible(muffled)
[08:25:56.694]                     }
[08:25:56.694]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.694]                   }
[08:25:56.694]                 }
[08:25:56.694]             }
[08:25:56.694]         }))
[08:25:56.694]     }, error = function(ex) {
[08:25:56.694]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.694]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.694]                 ...future.rng), started = ...future.startTime, 
[08:25:56.694]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.694]             version = "1.8"), class = "FutureResult")
[08:25:56.694]     }, finally = {
[08:25:56.694]         if (!identical(...future.workdir, getwd())) 
[08:25:56.694]             setwd(...future.workdir)
[08:25:56.694]         {
[08:25:56.694]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.694]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.694]             }
[08:25:56.694]             base::options(...future.oldOptions)
[08:25:56.694]             if (.Platform$OS.type == "windows") {
[08:25:56.694]                 old_names <- names(...future.oldEnvVars)
[08:25:56.694]                 envs <- base::Sys.getenv()
[08:25:56.694]                 names <- names(envs)
[08:25:56.694]                 common <- intersect(names, old_names)
[08:25:56.694]                 added <- setdiff(names, old_names)
[08:25:56.694]                 removed <- setdiff(old_names, names)
[08:25:56.694]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.694]                   envs[common]]
[08:25:56.694]                 NAMES <- toupper(changed)
[08:25:56.694]                 args <- list()
[08:25:56.694]                 for (kk in seq_along(NAMES)) {
[08:25:56.694]                   name <- changed[[kk]]
[08:25:56.694]                   NAME <- NAMES[[kk]]
[08:25:56.694]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.694]                     next
[08:25:56.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.694]                 }
[08:25:56.694]                 NAMES <- toupper(added)
[08:25:56.694]                 for (kk in seq_along(NAMES)) {
[08:25:56.694]                   name <- added[[kk]]
[08:25:56.694]                   NAME <- NAMES[[kk]]
[08:25:56.694]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.694]                     next
[08:25:56.694]                   args[[name]] <- ""
[08:25:56.694]                 }
[08:25:56.694]                 NAMES <- toupper(removed)
[08:25:56.694]                 for (kk in seq_along(NAMES)) {
[08:25:56.694]                   name <- removed[[kk]]
[08:25:56.694]                   NAME <- NAMES[[kk]]
[08:25:56.694]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.694]                     next
[08:25:56.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.694]                 }
[08:25:56.694]                 if (length(args) > 0) 
[08:25:56.694]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.694]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.694]             }
[08:25:56.694]             else {
[08:25:56.694]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.694]             }
[08:25:56.694]             {
[08:25:56.694]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.694]                   0L) {
[08:25:56.694]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.694]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.694]                   base::options(opts)
[08:25:56.694]                 }
[08:25:56.694]                 {
[08:25:56.694]                   {
[08:25:56.694]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.694]                     NULL
[08:25:56.694]                   }
[08:25:56.694]                   options(future.plan = NULL)
[08:25:56.694]                   if (is.na(NA_character_)) 
[08:25:56.694]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.694]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.694]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.694]                     .init = FALSE)
[08:25:56.694]                 }
[08:25:56.694]             }
[08:25:56.694]         }
[08:25:56.694]     })
[08:25:56.694]     if (TRUE) {
[08:25:56.694]         base::sink(type = "output", split = FALSE)
[08:25:56.694]         if (TRUE) {
[08:25:56.694]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.694]         }
[08:25:56.694]         else {
[08:25:56.694]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.694]         }
[08:25:56.694]         base::close(...future.stdout)
[08:25:56.694]         ...future.stdout <- NULL
[08:25:56.694]     }
[08:25:56.694]     ...future.result$conditions <- ...future.conditions
[08:25:56.694]     ...future.result$finished <- base::Sys.time()
[08:25:56.694]     ...future.result
[08:25:56.694] }
[08:25:56.697] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[08:25:56.697] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[08:25:56.697] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[08:25:56.697] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:56.698] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:56.698] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[08:25:56.698] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[08:25:56.698] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[08:25:56.699] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[08:25:56.699] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:56.699] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:56.699] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[08:25:56.700] MultisessionFuture started
[08:25:56.700] - Launch lazy future ... done
[08:25:56.700] run() for ‘MultisessionFuture’ ... done
[08:25:56.700] Created future:
[08:25:56.700] MultisessionFuture:
[08:25:56.700] Label: ‘future_replicate-1’
[08:25:56.700] Expression:
[08:25:56.700] {
[08:25:56.700]     do.call(function(...) {
[08:25:56.700]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.700]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.700]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.700]             on.exit(options(oopts), add = TRUE)
[08:25:56.700]         }
[08:25:56.700]         {
[08:25:56.700]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.700]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.700]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.700]                   envir = globalenv(), inherits = FALSE)
[08:25:56.700]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.700]             })
[08:25:56.700]         }
[08:25:56.700]     }, args = future.call.arguments)
[08:25:56.700] }
[08:25:56.700] Lazy evaluation: FALSE
[08:25:56.700] Asynchronous evaluation: TRUE
[08:25:56.700] Local evaluation: TRUE
[08:25:56.700] Environment: R_GlobalEnv
[08:25:56.700] Capture standard output: TRUE
[08:25:56.700] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.700] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.700] Packages: <none>
[08:25:56.700] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.700] Resolved: FALSE
[08:25:56.700] Value: <not collected>
[08:25:56.700] Conditions captured: <none>
[08:25:56.700] Early signaling: FALSE
[08:25:56.700] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.700] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.712] Chunk #1 of 2 ... DONE
[08:25:56.712] Chunk #2 of 2 ...
[08:25:56.712]  - Finding globals in 'X' for chunk #2 ...
[08:25:56.712] getGlobalsAndPackages() ...
[08:25:56.712] Searching for globals...
[08:25:56.712] 
[08:25:56.713] Searching for globals ... DONE
[08:25:56.713] - globals: [0] <none>
[08:25:56.713] getGlobalsAndPackages() ... DONE
[08:25:56.713]    + additional globals found: [n=0] 
[08:25:56.713]    + additional namespaces needed: [n=0] 
[08:25:56.713]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:56.713]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.713]  - seeds: [3] <seeds>
[08:25:56.713]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.713] getGlobalsAndPackages() ...
[08:25:56.714] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.714] Resolving globals: FALSE
[08:25:56.714] Tweak future expression to call with '...' arguments ...
[08:25:56.714] {
[08:25:56.714]     do.call(function(...) {
[08:25:56.714]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.714]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.714]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.714]             on.exit(options(oopts), add = TRUE)
[08:25:56.714]         }
[08:25:56.714]         {
[08:25:56.714]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.714]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.714]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.714]                   envir = globalenv(), inherits = FALSE)
[08:25:56.714]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.714]             })
[08:25:56.714]         }
[08:25:56.714]     }, args = future.call.arguments)
[08:25:56.714] }
[08:25:56.714] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.715] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.715] 
[08:25:56.715] getGlobalsAndPackages() ... DONE
[08:25:56.715] run() for ‘Future’ ...
[08:25:56.715] - state: ‘created’
[08:25:56.715] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.730] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.730] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.730]   - Field: ‘node’
[08:25:56.730]   - Field: ‘label’
[08:25:56.730]   - Field: ‘local’
[08:25:56.730]   - Field: ‘owner’
[08:25:56.730]   - Field: ‘envir’
[08:25:56.730]   - Field: ‘workers’
[08:25:56.730]   - Field: ‘packages’
[08:25:56.731]   - Field: ‘gc’
[08:25:56.731]   - Field: ‘conditions’
[08:25:56.731]   - Field: ‘persistent’
[08:25:56.731]   - Field: ‘expr’
[08:25:56.731]   - Field: ‘uuid’
[08:25:56.731]   - Field: ‘seed’
[08:25:56.731]   - Field: ‘version’
[08:25:56.731]   - Field: ‘result’
[08:25:56.731]   - Field: ‘asynchronous’
[08:25:56.731]   - Field: ‘calls’
[08:25:56.731]   - Field: ‘globals’
[08:25:56.731]   - Field: ‘stdout’
[08:25:56.732]   - Field: ‘earlySignal’
[08:25:56.732]   - Field: ‘lazy’
[08:25:56.732]   - Field: ‘state’
[08:25:56.732] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.732] - Launch lazy future ...
[08:25:56.732] Packages needed by the future expression (n = 0): <none>
[08:25:56.732] Packages needed by future strategies (n = 0): <none>
[08:25:56.733] {
[08:25:56.733]     {
[08:25:56.733]         {
[08:25:56.733]             ...future.startTime <- base::Sys.time()
[08:25:56.733]             {
[08:25:56.733]                 {
[08:25:56.733]                   {
[08:25:56.733]                     {
[08:25:56.733]                       base::local({
[08:25:56.733]                         has_future <- base::requireNamespace("future", 
[08:25:56.733]                           quietly = TRUE)
[08:25:56.733]                         if (has_future) {
[08:25:56.733]                           ns <- base::getNamespace("future")
[08:25:56.733]                           version <- ns[[".package"]][["version"]]
[08:25:56.733]                           if (is.null(version)) 
[08:25:56.733]                             version <- utils::packageVersion("future")
[08:25:56.733]                         }
[08:25:56.733]                         else {
[08:25:56.733]                           version <- NULL
[08:25:56.733]                         }
[08:25:56.733]                         if (!has_future || version < "1.8.0") {
[08:25:56.733]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.733]                             "", base::R.version$version.string), 
[08:25:56.733]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.733]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.733]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.733]                               "release", "version")], collapse = " "), 
[08:25:56.733]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.733]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.733]                             info)
[08:25:56.733]                           info <- base::paste(info, collapse = "; ")
[08:25:56.733]                           if (!has_future) {
[08:25:56.733]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.733]                               info)
[08:25:56.733]                           }
[08:25:56.733]                           else {
[08:25:56.733]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.733]                               info, version)
[08:25:56.733]                           }
[08:25:56.733]                           base::stop(msg)
[08:25:56.733]                         }
[08:25:56.733]                       })
[08:25:56.733]                     }
[08:25:56.733]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.733]                     base::options(mc.cores = 1L)
[08:25:56.733]                   }
[08:25:56.733]                   ...future.strategy.old <- future::plan("list")
[08:25:56.733]                   options(future.plan = NULL)
[08:25:56.733]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.733]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.733]                 }
[08:25:56.733]                 ...future.workdir <- getwd()
[08:25:56.733]             }
[08:25:56.733]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.733]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.733]         }
[08:25:56.733]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.733]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.733]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.733]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.733]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.733]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.733]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.733]             base::names(...future.oldOptions))
[08:25:56.733]     }
[08:25:56.733]     if (FALSE) {
[08:25:56.733]     }
[08:25:56.733]     else {
[08:25:56.733]         if (TRUE) {
[08:25:56.733]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.733]                 open = "w")
[08:25:56.733]         }
[08:25:56.733]         else {
[08:25:56.733]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.733]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.733]         }
[08:25:56.733]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.733]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.733]             base::sink(type = "output", split = FALSE)
[08:25:56.733]             base::close(...future.stdout)
[08:25:56.733]         }, add = TRUE)
[08:25:56.733]     }
[08:25:56.733]     ...future.frame <- base::sys.nframe()
[08:25:56.733]     ...future.conditions <- base::list()
[08:25:56.733]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.733]     if (FALSE) {
[08:25:56.733]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.733]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.733]     }
[08:25:56.733]     ...future.result <- base::tryCatch({
[08:25:56.733]         base::withCallingHandlers({
[08:25:56.733]             ...future.value <- base::withVisible(base::local({
[08:25:56.733]                 ...future.makeSendCondition <- base::local({
[08:25:56.733]                   sendCondition <- NULL
[08:25:56.733]                   function(frame = 1L) {
[08:25:56.733]                     if (is.function(sendCondition)) 
[08:25:56.733]                       return(sendCondition)
[08:25:56.733]                     ns <- getNamespace("parallel")
[08:25:56.733]                     if (exists("sendData", mode = "function", 
[08:25:56.733]                       envir = ns)) {
[08:25:56.733]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.733]                         envir = ns)
[08:25:56.733]                       envir <- sys.frame(frame)
[08:25:56.733]                       master <- NULL
[08:25:56.733]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.733]                         !identical(envir, emptyenv())) {
[08:25:56.733]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.733]                           inherits = FALSE)) {
[08:25:56.733]                           master <- get("master", mode = "list", 
[08:25:56.733]                             envir = envir, inherits = FALSE)
[08:25:56.733]                           if (inherits(master, c("SOCKnode", 
[08:25:56.733]                             "SOCK0node"))) {
[08:25:56.733]                             sendCondition <<- function(cond) {
[08:25:56.733]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.733]                                 success = TRUE)
[08:25:56.733]                               parallel_sendData(master, data)
[08:25:56.733]                             }
[08:25:56.733]                             return(sendCondition)
[08:25:56.733]                           }
[08:25:56.733]                         }
[08:25:56.733]                         frame <- frame + 1L
[08:25:56.733]                         envir <- sys.frame(frame)
[08:25:56.733]                       }
[08:25:56.733]                     }
[08:25:56.733]                     sendCondition <<- function(cond) NULL
[08:25:56.733]                   }
[08:25:56.733]                 })
[08:25:56.733]                 withCallingHandlers({
[08:25:56.733]                   {
[08:25:56.733]                     do.call(function(...) {
[08:25:56.733]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.733]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.733]                         ...future.globals.maxSize)) {
[08:25:56.733]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.733]                         on.exit(options(oopts), add = TRUE)
[08:25:56.733]                       }
[08:25:56.733]                       {
[08:25:56.733]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.733]                           FUN = function(jj) {
[08:25:56.733]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.733]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.733]                               envir = globalenv(), inherits = FALSE)
[08:25:56.733]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.733]                           })
[08:25:56.733]                       }
[08:25:56.733]                     }, args = future.call.arguments)
[08:25:56.733]                   }
[08:25:56.733]                 }, immediateCondition = function(cond) {
[08:25:56.733]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.733]                   sendCondition(cond)
[08:25:56.733]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.733]                   {
[08:25:56.733]                     inherits <- base::inherits
[08:25:56.733]                     invokeRestart <- base::invokeRestart
[08:25:56.733]                     is.null <- base::is.null
[08:25:56.733]                     muffled <- FALSE
[08:25:56.733]                     if (inherits(cond, "message")) {
[08:25:56.733]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.733]                       if (muffled) 
[08:25:56.733]                         invokeRestart("muffleMessage")
[08:25:56.733]                     }
[08:25:56.733]                     else if (inherits(cond, "warning")) {
[08:25:56.733]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.733]                       if (muffled) 
[08:25:56.733]                         invokeRestart("muffleWarning")
[08:25:56.733]                     }
[08:25:56.733]                     else if (inherits(cond, "condition")) {
[08:25:56.733]                       if (!is.null(pattern)) {
[08:25:56.733]                         computeRestarts <- base::computeRestarts
[08:25:56.733]                         grepl <- base::grepl
[08:25:56.733]                         restarts <- computeRestarts(cond)
[08:25:56.733]                         for (restart in restarts) {
[08:25:56.733]                           name <- restart$name
[08:25:56.733]                           if (is.null(name)) 
[08:25:56.733]                             next
[08:25:56.733]                           if (!grepl(pattern, name)) 
[08:25:56.733]                             next
[08:25:56.733]                           invokeRestart(restart)
[08:25:56.733]                           muffled <- TRUE
[08:25:56.733]                           break
[08:25:56.733]                         }
[08:25:56.733]                       }
[08:25:56.733]                     }
[08:25:56.733]                     invisible(muffled)
[08:25:56.733]                   }
[08:25:56.733]                   muffleCondition(cond)
[08:25:56.733]                 })
[08:25:56.733]             }))
[08:25:56.733]             future::FutureResult(value = ...future.value$value, 
[08:25:56.733]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.733]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.733]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.733]                     ...future.globalenv.names))
[08:25:56.733]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.733]         }, condition = base::local({
[08:25:56.733]             c <- base::c
[08:25:56.733]             inherits <- base::inherits
[08:25:56.733]             invokeRestart <- base::invokeRestart
[08:25:56.733]             length <- base::length
[08:25:56.733]             list <- base::list
[08:25:56.733]             seq.int <- base::seq.int
[08:25:56.733]             signalCondition <- base::signalCondition
[08:25:56.733]             sys.calls <- base::sys.calls
[08:25:56.733]             `[[` <- base::`[[`
[08:25:56.733]             `+` <- base::`+`
[08:25:56.733]             `<<-` <- base::`<<-`
[08:25:56.733]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.733]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.733]                   3L)]
[08:25:56.733]             }
[08:25:56.733]             function(cond) {
[08:25:56.733]                 is_error <- inherits(cond, "error")
[08:25:56.733]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.733]                   NULL)
[08:25:56.733]                 if (is_error) {
[08:25:56.733]                   sessionInformation <- function() {
[08:25:56.733]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.733]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.733]                       search = base::search(), system = base::Sys.info())
[08:25:56.733]                   }
[08:25:56.733]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.733]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.733]                     cond$call), session = sessionInformation(), 
[08:25:56.733]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.733]                   signalCondition(cond)
[08:25:56.733]                 }
[08:25:56.733]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.733]                 "immediateCondition"))) {
[08:25:56.733]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.733]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.733]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.733]                   if (TRUE && !signal) {
[08:25:56.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.733]                     {
[08:25:56.733]                       inherits <- base::inherits
[08:25:56.733]                       invokeRestart <- base::invokeRestart
[08:25:56.733]                       is.null <- base::is.null
[08:25:56.733]                       muffled <- FALSE
[08:25:56.733]                       if (inherits(cond, "message")) {
[08:25:56.733]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.733]                         if (muffled) 
[08:25:56.733]                           invokeRestart("muffleMessage")
[08:25:56.733]                       }
[08:25:56.733]                       else if (inherits(cond, "warning")) {
[08:25:56.733]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.733]                         if (muffled) 
[08:25:56.733]                           invokeRestart("muffleWarning")
[08:25:56.733]                       }
[08:25:56.733]                       else if (inherits(cond, "condition")) {
[08:25:56.733]                         if (!is.null(pattern)) {
[08:25:56.733]                           computeRestarts <- base::computeRestarts
[08:25:56.733]                           grepl <- base::grepl
[08:25:56.733]                           restarts <- computeRestarts(cond)
[08:25:56.733]                           for (restart in restarts) {
[08:25:56.733]                             name <- restart$name
[08:25:56.733]                             if (is.null(name)) 
[08:25:56.733]                               next
[08:25:56.733]                             if (!grepl(pattern, name)) 
[08:25:56.733]                               next
[08:25:56.733]                             invokeRestart(restart)
[08:25:56.733]                             muffled <- TRUE
[08:25:56.733]                             break
[08:25:56.733]                           }
[08:25:56.733]                         }
[08:25:56.733]                       }
[08:25:56.733]                       invisible(muffled)
[08:25:56.733]                     }
[08:25:56.733]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.733]                   }
[08:25:56.733]                 }
[08:25:56.733]                 else {
[08:25:56.733]                   if (TRUE) {
[08:25:56.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.733]                     {
[08:25:56.733]                       inherits <- base::inherits
[08:25:56.733]                       invokeRestart <- base::invokeRestart
[08:25:56.733]                       is.null <- base::is.null
[08:25:56.733]                       muffled <- FALSE
[08:25:56.733]                       if (inherits(cond, "message")) {
[08:25:56.733]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.733]                         if (muffled) 
[08:25:56.733]                           invokeRestart("muffleMessage")
[08:25:56.733]                       }
[08:25:56.733]                       else if (inherits(cond, "warning")) {
[08:25:56.733]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.733]                         if (muffled) 
[08:25:56.733]                           invokeRestart("muffleWarning")
[08:25:56.733]                       }
[08:25:56.733]                       else if (inherits(cond, "condition")) {
[08:25:56.733]                         if (!is.null(pattern)) {
[08:25:56.733]                           computeRestarts <- base::computeRestarts
[08:25:56.733]                           grepl <- base::grepl
[08:25:56.733]                           restarts <- computeRestarts(cond)
[08:25:56.733]                           for (restart in restarts) {
[08:25:56.733]                             name <- restart$name
[08:25:56.733]                             if (is.null(name)) 
[08:25:56.733]                               next
[08:25:56.733]                             if (!grepl(pattern, name)) 
[08:25:56.733]                               next
[08:25:56.733]                             invokeRestart(restart)
[08:25:56.733]                             muffled <- TRUE
[08:25:56.733]                             break
[08:25:56.733]                           }
[08:25:56.733]                         }
[08:25:56.733]                       }
[08:25:56.733]                       invisible(muffled)
[08:25:56.733]                     }
[08:25:56.733]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.733]                   }
[08:25:56.733]                 }
[08:25:56.733]             }
[08:25:56.733]         }))
[08:25:56.733]     }, error = function(ex) {
[08:25:56.733]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.733]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.733]                 ...future.rng), started = ...future.startTime, 
[08:25:56.733]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.733]             version = "1.8"), class = "FutureResult")
[08:25:56.733]     }, finally = {
[08:25:56.733]         if (!identical(...future.workdir, getwd())) 
[08:25:56.733]             setwd(...future.workdir)
[08:25:56.733]         {
[08:25:56.733]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.733]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.733]             }
[08:25:56.733]             base::options(...future.oldOptions)
[08:25:56.733]             if (.Platform$OS.type == "windows") {
[08:25:56.733]                 old_names <- names(...future.oldEnvVars)
[08:25:56.733]                 envs <- base::Sys.getenv()
[08:25:56.733]                 names <- names(envs)
[08:25:56.733]                 common <- intersect(names, old_names)
[08:25:56.733]                 added <- setdiff(names, old_names)
[08:25:56.733]                 removed <- setdiff(old_names, names)
[08:25:56.733]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.733]                   envs[common]]
[08:25:56.733]                 NAMES <- toupper(changed)
[08:25:56.733]                 args <- list()
[08:25:56.733]                 for (kk in seq_along(NAMES)) {
[08:25:56.733]                   name <- changed[[kk]]
[08:25:56.733]                   NAME <- NAMES[[kk]]
[08:25:56.733]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.733]                     next
[08:25:56.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.733]                 }
[08:25:56.733]                 NAMES <- toupper(added)
[08:25:56.733]                 for (kk in seq_along(NAMES)) {
[08:25:56.733]                   name <- added[[kk]]
[08:25:56.733]                   NAME <- NAMES[[kk]]
[08:25:56.733]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.733]                     next
[08:25:56.733]                   args[[name]] <- ""
[08:25:56.733]                 }
[08:25:56.733]                 NAMES <- toupper(removed)
[08:25:56.733]                 for (kk in seq_along(NAMES)) {
[08:25:56.733]                   name <- removed[[kk]]
[08:25:56.733]                   NAME <- NAMES[[kk]]
[08:25:56.733]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.733]                     next
[08:25:56.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.733]                 }
[08:25:56.733]                 if (length(args) > 0) 
[08:25:56.733]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.733]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.733]             }
[08:25:56.733]             else {
[08:25:56.733]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.733]             }
[08:25:56.733]             {
[08:25:56.733]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.733]                   0L) {
[08:25:56.733]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.733]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.733]                   base::options(opts)
[08:25:56.733]                 }
[08:25:56.733]                 {
[08:25:56.733]                   {
[08:25:56.733]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.733]                     NULL
[08:25:56.733]                   }
[08:25:56.733]                   options(future.plan = NULL)
[08:25:56.733]                   if (is.na(NA_character_)) 
[08:25:56.733]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.733]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.733]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.733]                     .init = FALSE)
[08:25:56.733]                 }
[08:25:56.733]             }
[08:25:56.733]         }
[08:25:56.733]     })
[08:25:56.733]     if (TRUE) {
[08:25:56.733]         base::sink(type = "output", split = FALSE)
[08:25:56.733]         if (TRUE) {
[08:25:56.733]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.733]         }
[08:25:56.733]         else {
[08:25:56.733]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.733]         }
[08:25:56.733]         base::close(...future.stdout)
[08:25:56.733]         ...future.stdout <- NULL
[08:25:56.733]     }
[08:25:56.733]     ...future.result$conditions <- ...future.conditions
[08:25:56.733]     ...future.result$finished <- base::Sys.time()
[08:25:56.733]     ...future.result
[08:25:56.733] }
[08:25:56.736] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[08:25:56.736] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[08:25:56.736] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[08:25:56.737] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:56.737] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:56.737] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[08:25:56.738] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[08:25:56.738] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[08:25:56.738] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[08:25:56.738] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:56.739] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:56.739] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[08:25:56.739] MultisessionFuture started
[08:25:56.739] - Launch lazy future ... done
[08:25:56.739] run() for ‘MultisessionFuture’ ... done
[08:25:56.739] Created future:
[08:25:56.740] MultisessionFuture:
[08:25:56.740] Label: ‘future_replicate-2’
[08:25:56.740] Expression:
[08:25:56.740] {
[08:25:56.740]     do.call(function(...) {
[08:25:56.740]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.740]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.740]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.740]             on.exit(options(oopts), add = TRUE)
[08:25:56.740]         }
[08:25:56.740]         {
[08:25:56.740]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.740]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.740]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.740]                   envir = globalenv(), inherits = FALSE)
[08:25:56.740]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.740]             })
[08:25:56.740]         }
[08:25:56.740]     }, args = future.call.arguments)
[08:25:56.740] }
[08:25:56.740] Lazy evaluation: FALSE
[08:25:56.740] Asynchronous evaluation: TRUE
[08:25:56.740] Local evaluation: TRUE
[08:25:56.740] Environment: R_GlobalEnv
[08:25:56.740] Capture standard output: TRUE
[08:25:56.740] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.740] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.740] Packages: <none>
[08:25:56.740] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.740] Resolved: FALSE
[08:25:56.740] Value: <not collected>
[08:25:56.740] Conditions captured: <none>
[08:25:56.740] Early signaling: FALSE
[08:25:56.740] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.740] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.751] Chunk #2 of 2 ... DONE
[08:25:56.751] Launching 2 futures (chunks) ... DONE
[08:25:56.751] Resolving 2 futures (chunks) ...
[08:25:56.752] resolve() on list ...
[08:25:56.752]  recursive: 0
[08:25:56.752]  length: 2
[08:25:56.752] 
[08:25:56.752] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.753] - Validating connection of MultisessionFuture
[08:25:56.753] - received message: FutureResult
[08:25:56.753] - Received FutureResult
[08:25:56.753] - Erased future from FutureRegistry
[08:25:56.753] result() for ClusterFuture ...
[08:25:56.753] - result already collected: FutureResult
[08:25:56.753] result() for ClusterFuture ... done
[08:25:56.753] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.753] Future #1
[08:25:56.753] result() for ClusterFuture ...
[08:25:56.754] - result already collected: FutureResult
[08:25:56.754] result() for ClusterFuture ... done
[08:25:56.754] result() for ClusterFuture ...
[08:25:56.754] - result already collected: FutureResult
[08:25:56.754] result() for ClusterFuture ... done
[08:25:56.754] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:56.754] - nx: 2
[08:25:56.754] - relay: TRUE
[08:25:56.754] - stdout: TRUE
[08:25:56.754] - signal: TRUE
[08:25:56.754] - resignal: FALSE
[08:25:56.754] - force: TRUE
[08:25:56.755] - relayed: [n=2] FALSE, FALSE
[08:25:56.755] - queued futures: [n=2] FALSE, FALSE
[08:25:56.755]  - until=1
[08:25:56.755]  - relaying element #1
[08:25:56.755] result() for ClusterFuture ...
[08:25:56.755] - result already collected: FutureResult
[08:25:56.755] result() for ClusterFuture ... done
[08:25:56.755] result() for ClusterFuture ...
[08:25:56.755] - result already collected: FutureResult
[08:25:56.755] result() for ClusterFuture ... done
[08:25:56.755] result() for ClusterFuture ...
[08:25:56.756] - result already collected: FutureResult
[08:25:56.756] result() for ClusterFuture ... done
[08:25:56.756] result() for ClusterFuture ...
[08:25:56.756] - result already collected: FutureResult
[08:25:56.756] result() for ClusterFuture ... done
[08:25:56.756] - relayed: [n=2] TRUE, FALSE
[08:25:56.756] - queued futures: [n=2] TRUE, FALSE
[08:25:56.756] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:56.756]  length: 1 (resolved future 1)
[08:25:56.781] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.782] - Validating connection of MultisessionFuture
[08:25:56.782] - received message: FutureResult
[08:25:56.782] - Received FutureResult
[08:25:56.782] - Erased future from FutureRegistry
[08:25:56.782] result() for ClusterFuture ...
[08:25:56.782] - result already collected: FutureResult
[08:25:56.782] result() for ClusterFuture ... done
[08:25:56.783] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.783] Future #2
[08:25:56.783] result() for ClusterFuture ...
[08:25:56.783] - result already collected: FutureResult
[08:25:56.783] result() for ClusterFuture ... done
[08:25:56.783] result() for ClusterFuture ...
[08:25:56.783] - result already collected: FutureResult
[08:25:56.783] result() for ClusterFuture ... done
[08:25:56.783] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:56.783] - nx: 2
[08:25:56.783] - relay: TRUE
[08:25:56.783] - stdout: TRUE
[08:25:56.784] - signal: TRUE
[08:25:56.784] - resignal: FALSE
[08:25:56.784] - force: TRUE
[08:25:56.784] - relayed: [n=2] TRUE, FALSE
[08:25:56.784] - queued futures: [n=2] TRUE, FALSE
[08:25:56.784]  - until=2
[08:25:56.784]  - relaying element #2
[08:25:56.784] result() for ClusterFuture ...
[08:25:56.784] - result already collected: FutureResult
[08:25:56.784] result() for ClusterFuture ... done
[08:25:56.784] result() for ClusterFuture ...
[08:25:56.785] - result already collected: FutureResult
[08:25:56.785] result() for ClusterFuture ... done
[08:25:56.785] result() for ClusterFuture ...
[08:25:56.785] - result already collected: FutureResult
[08:25:56.785] result() for ClusterFuture ... done
[08:25:56.785] result() for ClusterFuture ...
[08:25:56.785] - result already collected: FutureResult
[08:25:56.785] result() for ClusterFuture ... done
[08:25:56.785] - relayed: [n=2] TRUE, TRUE
[08:25:56.785] - queued futures: [n=2] TRUE, TRUE
[08:25:56.785] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:56.786]  length: 0 (resolved future 2)
[08:25:56.786] Relaying remaining futures
[08:25:56.786] signalConditionsASAP(NULL, pos=0) ...
[08:25:56.786] - nx: 2
[08:25:56.786] - relay: TRUE
[08:25:56.786] - stdout: TRUE
[08:25:56.786] - signal: TRUE
[08:25:56.786] - resignal: FALSE
[08:25:56.786] - force: TRUE
[08:25:56.786] - relayed: [n=2] TRUE, TRUE
[08:25:56.786] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:56.786] - relayed: [n=2] TRUE, TRUE
[08:25:56.787] - queued futures: [n=2] TRUE, TRUE
[08:25:56.787] signalConditionsASAP(NULL, pos=0) ... done
[08:25:56.787] resolve() on list ... DONE
[08:25:56.787] result() for ClusterFuture ...
[08:25:56.787] - result already collected: FutureResult
[08:25:56.787] result() for ClusterFuture ... done
[08:25:56.787] result() for ClusterFuture ...
[08:25:56.787] - result already collected: FutureResult
[08:25:56.787] result() for ClusterFuture ... done
[08:25:56.787] result() for ClusterFuture ...
[08:25:56.787] - result already collected: FutureResult
[08:25:56.787] result() for ClusterFuture ... done
[08:25:56.788] result() for ClusterFuture ...
[08:25:56.788] - result already collected: FutureResult
[08:25:56.788] result() for ClusterFuture ... done
[08:25:56.788]  - Number of value chunks collected: 2
[08:25:56.788] Resolving 2 futures (chunks) ... DONE
[08:25:56.788] Reducing values from 2 chunks ...
[08:25:56.788]  - Number of values collected after concatenation: 5
[08:25:56.788]  - Number of values expected: 5
[08:25:56.788] Reducing values from 2 chunks ... DONE
[08:25:56.788] future_lapply() ... DONE
[08:25:56.789] future_lapply() ...
[08:25:56.789] Generating random seeds ...
[08:25:56.789] Generating random seed streams for 5 elements ...
[08:25:56.789] Generating random seed streams for 5 elements ... DONE
[08:25:56.789] Generating random seeds ... DONE
[08:25:56.789] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:56.792] Number of chunks: 2
[08:25:56.792] getGlobalsAndPackagesXApply() ...
[08:25:56.792]  - future.globals: TRUE
[08:25:56.792] getGlobalsAndPackages() ...
[08:25:56.792] Searching for globals...
[08:25:56.793] - globals found: [2] ‘FUN’, ‘sample’
[08:25:56.793] Searching for globals ... DONE
[08:25:56.794] Resolving globals: FALSE
[08:25:56.794] The total size of the 1 globals is 132 bytes (132 bytes)
[08:25:56.794] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[08:25:56.794] - globals: [1] ‘FUN’
[08:25:56.794] 
[08:25:56.795] getGlobalsAndPackages() ... DONE
[08:25:56.795]  - globals found/used: [n=1] ‘FUN’
[08:25:56.795]  - needed namespaces: [n=0] 
[08:25:56.795] Finding globals ... DONE
[08:25:56.795]  - use_args: TRUE
[08:25:56.795]  - Getting '...' globals ...
[08:25:56.795] resolve() on list ...
[08:25:56.795]  recursive: 0
[08:25:56.795]  length: 1
[08:25:56.796]  elements: ‘...’
[08:25:56.796]  length: 0 (resolved future 1)
[08:25:56.796] resolve() on list ... DONE
[08:25:56.796]    - '...' content: [n=0] 
[08:25:56.796] List of 1
[08:25:56.796]  $ ...: list()
[08:25:56.796]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.796]  - attr(*, "where")=List of 1
[08:25:56.796]   ..$ ...:<environment: 0x55f77a0ec2f8> 
[08:25:56.796]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.796]  - attr(*, "resolved")= logi TRUE
[08:25:56.796]  - attr(*, "total_size")= num NA
[08:25:56.798]  - Getting '...' globals ... DONE
[08:25:56.799] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:56.799] List of 2
[08:25:56.799]  $ ...future.FUN:function (...)  
[08:25:56.799]  $ ...          : list()
[08:25:56.799]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.799]  - attr(*, "where")=List of 2
[08:25:56.799]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:56.799]   ..$ ...          :<environment: 0x55f77a0ec2f8> 
[08:25:56.799]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.799]  - attr(*, "resolved")= logi FALSE
[08:25:56.799]  - attr(*, "total_size")= num 7184
[08:25:56.801] Packages to be attached in all futures: [n=0] 
[08:25:56.803] getGlobalsAndPackagesXApply() ... DONE
[08:25:56.804] Number of futures (= number of chunks): 2
[08:25:56.804] Launching 2 futures (chunks) ...
[08:25:56.804] Chunk #1 of 2 ...
[08:25:56.804]  - Finding globals in 'X' for chunk #1 ...
[08:25:56.804] getGlobalsAndPackages() ...
[08:25:56.804] Searching for globals...
[08:25:56.804] 
[08:25:56.805] Searching for globals ... DONE
[08:25:56.805] - globals: [0] <none>
[08:25:56.805] getGlobalsAndPackages() ... DONE
[08:25:56.805]    + additional globals found: [n=0] 
[08:25:56.805]    + additional namespaces needed: [n=0] 
[08:25:56.805]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:56.805]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.805]  - seeds: [2] <seeds>
[08:25:56.805]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.805] getGlobalsAndPackages() ...
[08:25:56.805] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.806] Resolving globals: FALSE
[08:25:56.806] Tweak future expression to call with '...' arguments ...
[08:25:56.806] {
[08:25:56.806]     do.call(function(...) {
[08:25:56.806]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.806]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.806]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.806]             on.exit(options(oopts), add = TRUE)
[08:25:56.806]         }
[08:25:56.806]         {
[08:25:56.806]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.806]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.806]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.806]                   envir = globalenv(), inherits = FALSE)
[08:25:56.806]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.806]             })
[08:25:56.806]         }
[08:25:56.806]     }, args = future.call.arguments)
[08:25:56.806] }
[08:25:56.806] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.806] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.806] 
[08:25:56.807] getGlobalsAndPackages() ... DONE
[08:25:56.807] run() for ‘Future’ ...
[08:25:56.807] - state: ‘created’
[08:25:56.807] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.821] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.821] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.821]   - Field: ‘node’
[08:25:56.821]   - Field: ‘label’
[08:25:56.821]   - Field: ‘local’
[08:25:56.822]   - Field: ‘owner’
[08:25:56.822]   - Field: ‘envir’
[08:25:56.822]   - Field: ‘workers’
[08:25:56.822]   - Field: ‘packages’
[08:25:56.822]   - Field: ‘gc’
[08:25:56.822]   - Field: ‘conditions’
[08:25:56.822]   - Field: ‘persistent’
[08:25:56.822]   - Field: ‘expr’
[08:25:56.822]   - Field: ‘uuid’
[08:25:56.822]   - Field: ‘seed’
[08:25:56.822]   - Field: ‘version’
[08:25:56.822]   - Field: ‘result’
[08:25:56.823]   - Field: ‘asynchronous’
[08:25:56.823]   - Field: ‘calls’
[08:25:56.823]   - Field: ‘globals’
[08:25:56.823]   - Field: ‘stdout’
[08:25:56.823]   - Field: ‘earlySignal’
[08:25:56.823]   - Field: ‘lazy’
[08:25:56.823]   - Field: ‘state’
[08:25:56.823] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.823] - Launch lazy future ...
[08:25:56.824] Packages needed by the future expression (n = 0): <none>
[08:25:56.824] Packages needed by future strategies (n = 0): <none>
[08:25:56.824] {
[08:25:56.824]     {
[08:25:56.824]         {
[08:25:56.824]             ...future.startTime <- base::Sys.time()
[08:25:56.824]             {
[08:25:56.824]                 {
[08:25:56.824]                   {
[08:25:56.824]                     {
[08:25:56.824]                       base::local({
[08:25:56.824]                         has_future <- base::requireNamespace("future", 
[08:25:56.824]                           quietly = TRUE)
[08:25:56.824]                         if (has_future) {
[08:25:56.824]                           ns <- base::getNamespace("future")
[08:25:56.824]                           version <- ns[[".package"]][["version"]]
[08:25:56.824]                           if (is.null(version)) 
[08:25:56.824]                             version <- utils::packageVersion("future")
[08:25:56.824]                         }
[08:25:56.824]                         else {
[08:25:56.824]                           version <- NULL
[08:25:56.824]                         }
[08:25:56.824]                         if (!has_future || version < "1.8.0") {
[08:25:56.824]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.824]                             "", base::R.version$version.string), 
[08:25:56.824]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.824]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.824]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.824]                               "release", "version")], collapse = " "), 
[08:25:56.824]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.824]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.824]                             info)
[08:25:56.824]                           info <- base::paste(info, collapse = "; ")
[08:25:56.824]                           if (!has_future) {
[08:25:56.824]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.824]                               info)
[08:25:56.824]                           }
[08:25:56.824]                           else {
[08:25:56.824]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.824]                               info, version)
[08:25:56.824]                           }
[08:25:56.824]                           base::stop(msg)
[08:25:56.824]                         }
[08:25:56.824]                       })
[08:25:56.824]                     }
[08:25:56.824]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.824]                     base::options(mc.cores = 1L)
[08:25:56.824]                   }
[08:25:56.824]                   ...future.strategy.old <- future::plan("list")
[08:25:56.824]                   options(future.plan = NULL)
[08:25:56.824]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.824]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.824]                 }
[08:25:56.824]                 ...future.workdir <- getwd()
[08:25:56.824]             }
[08:25:56.824]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.824]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.824]         }
[08:25:56.824]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.824]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.824]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.824]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.824]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.824]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.824]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.824]             base::names(...future.oldOptions))
[08:25:56.824]     }
[08:25:56.824]     if (FALSE) {
[08:25:56.824]     }
[08:25:56.824]     else {
[08:25:56.824]         if (TRUE) {
[08:25:56.824]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.824]                 open = "w")
[08:25:56.824]         }
[08:25:56.824]         else {
[08:25:56.824]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.824]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.824]         }
[08:25:56.824]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.824]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.824]             base::sink(type = "output", split = FALSE)
[08:25:56.824]             base::close(...future.stdout)
[08:25:56.824]         }, add = TRUE)
[08:25:56.824]     }
[08:25:56.824]     ...future.frame <- base::sys.nframe()
[08:25:56.824]     ...future.conditions <- base::list()
[08:25:56.824]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.824]     if (FALSE) {
[08:25:56.824]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.824]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.824]     }
[08:25:56.824]     ...future.result <- base::tryCatch({
[08:25:56.824]         base::withCallingHandlers({
[08:25:56.824]             ...future.value <- base::withVisible(base::local({
[08:25:56.824]                 ...future.makeSendCondition <- base::local({
[08:25:56.824]                   sendCondition <- NULL
[08:25:56.824]                   function(frame = 1L) {
[08:25:56.824]                     if (is.function(sendCondition)) 
[08:25:56.824]                       return(sendCondition)
[08:25:56.824]                     ns <- getNamespace("parallel")
[08:25:56.824]                     if (exists("sendData", mode = "function", 
[08:25:56.824]                       envir = ns)) {
[08:25:56.824]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.824]                         envir = ns)
[08:25:56.824]                       envir <- sys.frame(frame)
[08:25:56.824]                       master <- NULL
[08:25:56.824]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.824]                         !identical(envir, emptyenv())) {
[08:25:56.824]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.824]                           inherits = FALSE)) {
[08:25:56.824]                           master <- get("master", mode = "list", 
[08:25:56.824]                             envir = envir, inherits = FALSE)
[08:25:56.824]                           if (inherits(master, c("SOCKnode", 
[08:25:56.824]                             "SOCK0node"))) {
[08:25:56.824]                             sendCondition <<- function(cond) {
[08:25:56.824]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.824]                                 success = TRUE)
[08:25:56.824]                               parallel_sendData(master, data)
[08:25:56.824]                             }
[08:25:56.824]                             return(sendCondition)
[08:25:56.824]                           }
[08:25:56.824]                         }
[08:25:56.824]                         frame <- frame + 1L
[08:25:56.824]                         envir <- sys.frame(frame)
[08:25:56.824]                       }
[08:25:56.824]                     }
[08:25:56.824]                     sendCondition <<- function(cond) NULL
[08:25:56.824]                   }
[08:25:56.824]                 })
[08:25:56.824]                 withCallingHandlers({
[08:25:56.824]                   {
[08:25:56.824]                     do.call(function(...) {
[08:25:56.824]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.824]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.824]                         ...future.globals.maxSize)) {
[08:25:56.824]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.824]                         on.exit(options(oopts), add = TRUE)
[08:25:56.824]                       }
[08:25:56.824]                       {
[08:25:56.824]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.824]                           FUN = function(jj) {
[08:25:56.824]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.824]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.824]                               envir = globalenv(), inherits = FALSE)
[08:25:56.824]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.824]                           })
[08:25:56.824]                       }
[08:25:56.824]                     }, args = future.call.arguments)
[08:25:56.824]                   }
[08:25:56.824]                 }, immediateCondition = function(cond) {
[08:25:56.824]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.824]                   sendCondition(cond)
[08:25:56.824]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.824]                   {
[08:25:56.824]                     inherits <- base::inherits
[08:25:56.824]                     invokeRestart <- base::invokeRestart
[08:25:56.824]                     is.null <- base::is.null
[08:25:56.824]                     muffled <- FALSE
[08:25:56.824]                     if (inherits(cond, "message")) {
[08:25:56.824]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.824]                       if (muffled) 
[08:25:56.824]                         invokeRestart("muffleMessage")
[08:25:56.824]                     }
[08:25:56.824]                     else if (inherits(cond, "warning")) {
[08:25:56.824]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.824]                       if (muffled) 
[08:25:56.824]                         invokeRestart("muffleWarning")
[08:25:56.824]                     }
[08:25:56.824]                     else if (inherits(cond, "condition")) {
[08:25:56.824]                       if (!is.null(pattern)) {
[08:25:56.824]                         computeRestarts <- base::computeRestarts
[08:25:56.824]                         grepl <- base::grepl
[08:25:56.824]                         restarts <- computeRestarts(cond)
[08:25:56.824]                         for (restart in restarts) {
[08:25:56.824]                           name <- restart$name
[08:25:56.824]                           if (is.null(name)) 
[08:25:56.824]                             next
[08:25:56.824]                           if (!grepl(pattern, name)) 
[08:25:56.824]                             next
[08:25:56.824]                           invokeRestart(restart)
[08:25:56.824]                           muffled <- TRUE
[08:25:56.824]                           break
[08:25:56.824]                         }
[08:25:56.824]                       }
[08:25:56.824]                     }
[08:25:56.824]                     invisible(muffled)
[08:25:56.824]                   }
[08:25:56.824]                   muffleCondition(cond)
[08:25:56.824]                 })
[08:25:56.824]             }))
[08:25:56.824]             future::FutureResult(value = ...future.value$value, 
[08:25:56.824]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.824]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.824]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.824]                     ...future.globalenv.names))
[08:25:56.824]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.824]         }, condition = base::local({
[08:25:56.824]             c <- base::c
[08:25:56.824]             inherits <- base::inherits
[08:25:56.824]             invokeRestart <- base::invokeRestart
[08:25:56.824]             length <- base::length
[08:25:56.824]             list <- base::list
[08:25:56.824]             seq.int <- base::seq.int
[08:25:56.824]             signalCondition <- base::signalCondition
[08:25:56.824]             sys.calls <- base::sys.calls
[08:25:56.824]             `[[` <- base::`[[`
[08:25:56.824]             `+` <- base::`+`
[08:25:56.824]             `<<-` <- base::`<<-`
[08:25:56.824]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.824]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.824]                   3L)]
[08:25:56.824]             }
[08:25:56.824]             function(cond) {
[08:25:56.824]                 is_error <- inherits(cond, "error")
[08:25:56.824]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.824]                   NULL)
[08:25:56.824]                 if (is_error) {
[08:25:56.824]                   sessionInformation <- function() {
[08:25:56.824]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.824]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.824]                       search = base::search(), system = base::Sys.info())
[08:25:56.824]                   }
[08:25:56.824]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.824]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.824]                     cond$call), session = sessionInformation(), 
[08:25:56.824]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.824]                   signalCondition(cond)
[08:25:56.824]                 }
[08:25:56.824]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.824]                 "immediateCondition"))) {
[08:25:56.824]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.824]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.824]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.824]                   if (TRUE && !signal) {
[08:25:56.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.824]                     {
[08:25:56.824]                       inherits <- base::inherits
[08:25:56.824]                       invokeRestart <- base::invokeRestart
[08:25:56.824]                       is.null <- base::is.null
[08:25:56.824]                       muffled <- FALSE
[08:25:56.824]                       if (inherits(cond, "message")) {
[08:25:56.824]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.824]                         if (muffled) 
[08:25:56.824]                           invokeRestart("muffleMessage")
[08:25:56.824]                       }
[08:25:56.824]                       else if (inherits(cond, "warning")) {
[08:25:56.824]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.824]                         if (muffled) 
[08:25:56.824]                           invokeRestart("muffleWarning")
[08:25:56.824]                       }
[08:25:56.824]                       else if (inherits(cond, "condition")) {
[08:25:56.824]                         if (!is.null(pattern)) {
[08:25:56.824]                           computeRestarts <- base::computeRestarts
[08:25:56.824]                           grepl <- base::grepl
[08:25:56.824]                           restarts <- computeRestarts(cond)
[08:25:56.824]                           for (restart in restarts) {
[08:25:56.824]                             name <- restart$name
[08:25:56.824]                             if (is.null(name)) 
[08:25:56.824]                               next
[08:25:56.824]                             if (!grepl(pattern, name)) 
[08:25:56.824]                               next
[08:25:56.824]                             invokeRestart(restart)
[08:25:56.824]                             muffled <- TRUE
[08:25:56.824]                             break
[08:25:56.824]                           }
[08:25:56.824]                         }
[08:25:56.824]                       }
[08:25:56.824]                       invisible(muffled)
[08:25:56.824]                     }
[08:25:56.824]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.824]                   }
[08:25:56.824]                 }
[08:25:56.824]                 else {
[08:25:56.824]                   if (TRUE) {
[08:25:56.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.824]                     {
[08:25:56.824]                       inherits <- base::inherits
[08:25:56.824]                       invokeRestart <- base::invokeRestart
[08:25:56.824]                       is.null <- base::is.null
[08:25:56.824]                       muffled <- FALSE
[08:25:56.824]                       if (inherits(cond, "message")) {
[08:25:56.824]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.824]                         if (muffled) 
[08:25:56.824]                           invokeRestart("muffleMessage")
[08:25:56.824]                       }
[08:25:56.824]                       else if (inherits(cond, "warning")) {
[08:25:56.824]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.824]                         if (muffled) 
[08:25:56.824]                           invokeRestart("muffleWarning")
[08:25:56.824]                       }
[08:25:56.824]                       else if (inherits(cond, "condition")) {
[08:25:56.824]                         if (!is.null(pattern)) {
[08:25:56.824]                           computeRestarts <- base::computeRestarts
[08:25:56.824]                           grepl <- base::grepl
[08:25:56.824]                           restarts <- computeRestarts(cond)
[08:25:56.824]                           for (restart in restarts) {
[08:25:56.824]                             name <- restart$name
[08:25:56.824]                             if (is.null(name)) 
[08:25:56.824]                               next
[08:25:56.824]                             if (!grepl(pattern, name)) 
[08:25:56.824]                               next
[08:25:56.824]                             invokeRestart(restart)
[08:25:56.824]                             muffled <- TRUE
[08:25:56.824]                             break
[08:25:56.824]                           }
[08:25:56.824]                         }
[08:25:56.824]                       }
[08:25:56.824]                       invisible(muffled)
[08:25:56.824]                     }
[08:25:56.824]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.824]                   }
[08:25:56.824]                 }
[08:25:56.824]             }
[08:25:56.824]         }))
[08:25:56.824]     }, error = function(ex) {
[08:25:56.824]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.824]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.824]                 ...future.rng), started = ...future.startTime, 
[08:25:56.824]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.824]             version = "1.8"), class = "FutureResult")
[08:25:56.824]     }, finally = {
[08:25:56.824]         if (!identical(...future.workdir, getwd())) 
[08:25:56.824]             setwd(...future.workdir)
[08:25:56.824]         {
[08:25:56.824]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.824]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.824]             }
[08:25:56.824]             base::options(...future.oldOptions)
[08:25:56.824]             if (.Platform$OS.type == "windows") {
[08:25:56.824]                 old_names <- names(...future.oldEnvVars)
[08:25:56.824]                 envs <- base::Sys.getenv()
[08:25:56.824]                 names <- names(envs)
[08:25:56.824]                 common <- intersect(names, old_names)
[08:25:56.824]                 added <- setdiff(names, old_names)
[08:25:56.824]                 removed <- setdiff(old_names, names)
[08:25:56.824]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.824]                   envs[common]]
[08:25:56.824]                 NAMES <- toupper(changed)
[08:25:56.824]                 args <- list()
[08:25:56.824]                 for (kk in seq_along(NAMES)) {
[08:25:56.824]                   name <- changed[[kk]]
[08:25:56.824]                   NAME <- NAMES[[kk]]
[08:25:56.824]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.824]                     next
[08:25:56.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.824]                 }
[08:25:56.824]                 NAMES <- toupper(added)
[08:25:56.824]                 for (kk in seq_along(NAMES)) {
[08:25:56.824]                   name <- added[[kk]]
[08:25:56.824]                   NAME <- NAMES[[kk]]
[08:25:56.824]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.824]                     next
[08:25:56.824]                   args[[name]] <- ""
[08:25:56.824]                 }
[08:25:56.824]                 NAMES <- toupper(removed)
[08:25:56.824]                 for (kk in seq_along(NAMES)) {
[08:25:56.824]                   name <- removed[[kk]]
[08:25:56.824]                   NAME <- NAMES[[kk]]
[08:25:56.824]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.824]                     next
[08:25:56.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.824]                 }
[08:25:56.824]                 if (length(args) > 0) 
[08:25:56.824]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.824]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.824]             }
[08:25:56.824]             else {
[08:25:56.824]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.824]             }
[08:25:56.824]             {
[08:25:56.824]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.824]                   0L) {
[08:25:56.824]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.824]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.824]                   base::options(opts)
[08:25:56.824]                 }
[08:25:56.824]                 {
[08:25:56.824]                   {
[08:25:56.824]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.824]                     NULL
[08:25:56.824]                   }
[08:25:56.824]                   options(future.plan = NULL)
[08:25:56.824]                   if (is.na(NA_character_)) 
[08:25:56.824]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.824]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.824]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.824]                     .init = FALSE)
[08:25:56.824]                 }
[08:25:56.824]             }
[08:25:56.824]         }
[08:25:56.824]     })
[08:25:56.824]     if (TRUE) {
[08:25:56.824]         base::sink(type = "output", split = FALSE)
[08:25:56.824]         if (TRUE) {
[08:25:56.824]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.824]         }
[08:25:56.824]         else {
[08:25:56.824]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.824]         }
[08:25:56.824]         base::close(...future.stdout)
[08:25:56.824]         ...future.stdout <- NULL
[08:25:56.824]     }
[08:25:56.824]     ...future.result$conditions <- ...future.conditions
[08:25:56.824]     ...future.result$finished <- base::Sys.time()
[08:25:56.824]     ...future.result
[08:25:56.824] }
[08:25:56.827] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[08:25:56.827] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[08:25:56.828] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[08:25:56.828] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:56.828] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:56.828] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[08:25:56.829] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[08:25:56.829] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[08:25:56.829] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[08:25:56.829] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:56.830] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:56.830] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[08:25:56.830] MultisessionFuture started
[08:25:56.830] - Launch lazy future ... done
[08:25:56.830] run() for ‘MultisessionFuture’ ... done
[08:25:56.830] Created future:
[08:25:56.831] MultisessionFuture:
[08:25:56.831] Label: ‘future_replicate-1’
[08:25:56.831] Expression:
[08:25:56.831] {
[08:25:56.831]     do.call(function(...) {
[08:25:56.831]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.831]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.831]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.831]             on.exit(options(oopts), add = TRUE)
[08:25:56.831]         }
[08:25:56.831]         {
[08:25:56.831]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.831]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.831]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.831]                   envir = globalenv(), inherits = FALSE)
[08:25:56.831]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.831]             })
[08:25:56.831]         }
[08:25:56.831]     }, args = future.call.arguments)
[08:25:56.831] }
[08:25:56.831] Lazy evaluation: FALSE
[08:25:56.831] Asynchronous evaluation: TRUE
[08:25:56.831] Local evaluation: TRUE
[08:25:56.831] Environment: R_GlobalEnv
[08:25:56.831] Capture standard output: TRUE
[08:25:56.831] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.831] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.831] Packages: <none>
[08:25:56.831] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.831] Resolved: FALSE
[08:25:56.831] Value: <not collected>
[08:25:56.831] Conditions captured: <none>
[08:25:56.831] Early signaling: FALSE
[08:25:56.831] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.831] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.842] Chunk #1 of 2 ... DONE
[08:25:56.842] Chunk #2 of 2 ...
[08:25:56.842]  - Finding globals in 'X' for chunk #2 ...
[08:25:56.842] getGlobalsAndPackages() ...
[08:25:56.842] Searching for globals...
[08:25:56.843] 
[08:25:56.843] Searching for globals ... DONE
[08:25:56.843] - globals: [0] <none>
[08:25:56.843] getGlobalsAndPackages() ... DONE
[08:25:56.843]    + additional globals found: [n=0] 
[08:25:56.843]    + additional namespaces needed: [n=0] 
[08:25:56.843]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:56.843]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.843]  - seeds: [3] <seeds>
[08:25:56.844]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.844] getGlobalsAndPackages() ...
[08:25:56.844] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.844] Resolving globals: FALSE
[08:25:56.844] Tweak future expression to call with '...' arguments ...
[08:25:56.844] {
[08:25:56.844]     do.call(function(...) {
[08:25:56.844]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.844]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.844]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.844]             on.exit(options(oopts), add = TRUE)
[08:25:56.844]         }
[08:25:56.844]         {
[08:25:56.844]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.844]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.844]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.844]                   envir = globalenv(), inherits = FALSE)
[08:25:56.844]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.844]             })
[08:25:56.844]         }
[08:25:56.844]     }, args = future.call.arguments)
[08:25:56.844] }
[08:25:56.844] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.845] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.845] 
[08:25:56.845] getGlobalsAndPackages() ... DONE
[08:25:56.845] run() for ‘Future’ ...
[08:25:56.845] - state: ‘created’
[08:25:56.846] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.860] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.860] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.860]   - Field: ‘node’
[08:25:56.860]   - Field: ‘label’
[08:25:56.860]   - Field: ‘local’
[08:25:56.860]   - Field: ‘owner’
[08:25:56.860]   - Field: ‘envir’
[08:25:56.861]   - Field: ‘workers’
[08:25:56.861]   - Field: ‘packages’
[08:25:56.861]   - Field: ‘gc’
[08:25:56.861]   - Field: ‘conditions’
[08:25:56.861]   - Field: ‘persistent’
[08:25:56.861]   - Field: ‘expr’
[08:25:56.861]   - Field: ‘uuid’
[08:25:56.861]   - Field: ‘seed’
[08:25:56.861]   - Field: ‘version’
[08:25:56.861]   - Field: ‘result’
[08:25:56.861]   - Field: ‘asynchronous’
[08:25:56.861]   - Field: ‘calls’
[08:25:56.862]   - Field: ‘globals’
[08:25:56.862]   - Field: ‘stdout’
[08:25:56.862]   - Field: ‘earlySignal’
[08:25:56.862]   - Field: ‘lazy’
[08:25:56.862]   - Field: ‘state’
[08:25:56.862] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.862] - Launch lazy future ...
[08:25:56.862] Packages needed by the future expression (n = 0): <none>
[08:25:56.863] Packages needed by future strategies (n = 0): <none>
[08:25:56.863] {
[08:25:56.863]     {
[08:25:56.863]         {
[08:25:56.863]             ...future.startTime <- base::Sys.time()
[08:25:56.863]             {
[08:25:56.863]                 {
[08:25:56.863]                   {
[08:25:56.863]                     {
[08:25:56.863]                       base::local({
[08:25:56.863]                         has_future <- base::requireNamespace("future", 
[08:25:56.863]                           quietly = TRUE)
[08:25:56.863]                         if (has_future) {
[08:25:56.863]                           ns <- base::getNamespace("future")
[08:25:56.863]                           version <- ns[[".package"]][["version"]]
[08:25:56.863]                           if (is.null(version)) 
[08:25:56.863]                             version <- utils::packageVersion("future")
[08:25:56.863]                         }
[08:25:56.863]                         else {
[08:25:56.863]                           version <- NULL
[08:25:56.863]                         }
[08:25:56.863]                         if (!has_future || version < "1.8.0") {
[08:25:56.863]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.863]                             "", base::R.version$version.string), 
[08:25:56.863]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.863]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.863]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.863]                               "release", "version")], collapse = " "), 
[08:25:56.863]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.863]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.863]                             info)
[08:25:56.863]                           info <- base::paste(info, collapse = "; ")
[08:25:56.863]                           if (!has_future) {
[08:25:56.863]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.863]                               info)
[08:25:56.863]                           }
[08:25:56.863]                           else {
[08:25:56.863]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.863]                               info, version)
[08:25:56.863]                           }
[08:25:56.863]                           base::stop(msg)
[08:25:56.863]                         }
[08:25:56.863]                       })
[08:25:56.863]                     }
[08:25:56.863]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.863]                     base::options(mc.cores = 1L)
[08:25:56.863]                   }
[08:25:56.863]                   ...future.strategy.old <- future::plan("list")
[08:25:56.863]                   options(future.plan = NULL)
[08:25:56.863]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.863]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.863]                 }
[08:25:56.863]                 ...future.workdir <- getwd()
[08:25:56.863]             }
[08:25:56.863]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.863]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.863]         }
[08:25:56.863]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.863]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.863]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.863]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.863]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.863]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.863]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.863]             base::names(...future.oldOptions))
[08:25:56.863]     }
[08:25:56.863]     if (FALSE) {
[08:25:56.863]     }
[08:25:56.863]     else {
[08:25:56.863]         if (TRUE) {
[08:25:56.863]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.863]                 open = "w")
[08:25:56.863]         }
[08:25:56.863]         else {
[08:25:56.863]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.863]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.863]         }
[08:25:56.863]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.863]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.863]             base::sink(type = "output", split = FALSE)
[08:25:56.863]             base::close(...future.stdout)
[08:25:56.863]         }, add = TRUE)
[08:25:56.863]     }
[08:25:56.863]     ...future.frame <- base::sys.nframe()
[08:25:56.863]     ...future.conditions <- base::list()
[08:25:56.863]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.863]     if (FALSE) {
[08:25:56.863]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.863]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.863]     }
[08:25:56.863]     ...future.result <- base::tryCatch({
[08:25:56.863]         base::withCallingHandlers({
[08:25:56.863]             ...future.value <- base::withVisible(base::local({
[08:25:56.863]                 ...future.makeSendCondition <- base::local({
[08:25:56.863]                   sendCondition <- NULL
[08:25:56.863]                   function(frame = 1L) {
[08:25:56.863]                     if (is.function(sendCondition)) 
[08:25:56.863]                       return(sendCondition)
[08:25:56.863]                     ns <- getNamespace("parallel")
[08:25:56.863]                     if (exists("sendData", mode = "function", 
[08:25:56.863]                       envir = ns)) {
[08:25:56.863]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.863]                         envir = ns)
[08:25:56.863]                       envir <- sys.frame(frame)
[08:25:56.863]                       master <- NULL
[08:25:56.863]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.863]                         !identical(envir, emptyenv())) {
[08:25:56.863]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.863]                           inherits = FALSE)) {
[08:25:56.863]                           master <- get("master", mode = "list", 
[08:25:56.863]                             envir = envir, inherits = FALSE)
[08:25:56.863]                           if (inherits(master, c("SOCKnode", 
[08:25:56.863]                             "SOCK0node"))) {
[08:25:56.863]                             sendCondition <<- function(cond) {
[08:25:56.863]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.863]                                 success = TRUE)
[08:25:56.863]                               parallel_sendData(master, data)
[08:25:56.863]                             }
[08:25:56.863]                             return(sendCondition)
[08:25:56.863]                           }
[08:25:56.863]                         }
[08:25:56.863]                         frame <- frame + 1L
[08:25:56.863]                         envir <- sys.frame(frame)
[08:25:56.863]                       }
[08:25:56.863]                     }
[08:25:56.863]                     sendCondition <<- function(cond) NULL
[08:25:56.863]                   }
[08:25:56.863]                 })
[08:25:56.863]                 withCallingHandlers({
[08:25:56.863]                   {
[08:25:56.863]                     do.call(function(...) {
[08:25:56.863]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.863]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.863]                         ...future.globals.maxSize)) {
[08:25:56.863]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.863]                         on.exit(options(oopts), add = TRUE)
[08:25:56.863]                       }
[08:25:56.863]                       {
[08:25:56.863]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.863]                           FUN = function(jj) {
[08:25:56.863]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.863]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.863]                               envir = globalenv(), inherits = FALSE)
[08:25:56.863]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.863]                           })
[08:25:56.863]                       }
[08:25:56.863]                     }, args = future.call.arguments)
[08:25:56.863]                   }
[08:25:56.863]                 }, immediateCondition = function(cond) {
[08:25:56.863]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.863]                   sendCondition(cond)
[08:25:56.863]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.863]                   {
[08:25:56.863]                     inherits <- base::inherits
[08:25:56.863]                     invokeRestart <- base::invokeRestart
[08:25:56.863]                     is.null <- base::is.null
[08:25:56.863]                     muffled <- FALSE
[08:25:56.863]                     if (inherits(cond, "message")) {
[08:25:56.863]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.863]                       if (muffled) 
[08:25:56.863]                         invokeRestart("muffleMessage")
[08:25:56.863]                     }
[08:25:56.863]                     else if (inherits(cond, "warning")) {
[08:25:56.863]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.863]                       if (muffled) 
[08:25:56.863]                         invokeRestart("muffleWarning")
[08:25:56.863]                     }
[08:25:56.863]                     else if (inherits(cond, "condition")) {
[08:25:56.863]                       if (!is.null(pattern)) {
[08:25:56.863]                         computeRestarts <- base::computeRestarts
[08:25:56.863]                         grepl <- base::grepl
[08:25:56.863]                         restarts <- computeRestarts(cond)
[08:25:56.863]                         for (restart in restarts) {
[08:25:56.863]                           name <- restart$name
[08:25:56.863]                           if (is.null(name)) 
[08:25:56.863]                             next
[08:25:56.863]                           if (!grepl(pattern, name)) 
[08:25:56.863]                             next
[08:25:56.863]                           invokeRestart(restart)
[08:25:56.863]                           muffled <- TRUE
[08:25:56.863]                           break
[08:25:56.863]                         }
[08:25:56.863]                       }
[08:25:56.863]                     }
[08:25:56.863]                     invisible(muffled)
[08:25:56.863]                   }
[08:25:56.863]                   muffleCondition(cond)
[08:25:56.863]                 })
[08:25:56.863]             }))
[08:25:56.863]             future::FutureResult(value = ...future.value$value, 
[08:25:56.863]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.863]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.863]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.863]                     ...future.globalenv.names))
[08:25:56.863]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.863]         }, condition = base::local({
[08:25:56.863]             c <- base::c
[08:25:56.863]             inherits <- base::inherits
[08:25:56.863]             invokeRestart <- base::invokeRestart
[08:25:56.863]             length <- base::length
[08:25:56.863]             list <- base::list
[08:25:56.863]             seq.int <- base::seq.int
[08:25:56.863]             signalCondition <- base::signalCondition
[08:25:56.863]             sys.calls <- base::sys.calls
[08:25:56.863]             `[[` <- base::`[[`
[08:25:56.863]             `+` <- base::`+`
[08:25:56.863]             `<<-` <- base::`<<-`
[08:25:56.863]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.863]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.863]                   3L)]
[08:25:56.863]             }
[08:25:56.863]             function(cond) {
[08:25:56.863]                 is_error <- inherits(cond, "error")
[08:25:56.863]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.863]                   NULL)
[08:25:56.863]                 if (is_error) {
[08:25:56.863]                   sessionInformation <- function() {
[08:25:56.863]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.863]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.863]                       search = base::search(), system = base::Sys.info())
[08:25:56.863]                   }
[08:25:56.863]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.863]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.863]                     cond$call), session = sessionInformation(), 
[08:25:56.863]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.863]                   signalCondition(cond)
[08:25:56.863]                 }
[08:25:56.863]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.863]                 "immediateCondition"))) {
[08:25:56.863]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.863]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.863]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.863]                   if (TRUE && !signal) {
[08:25:56.863]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.863]                     {
[08:25:56.863]                       inherits <- base::inherits
[08:25:56.863]                       invokeRestart <- base::invokeRestart
[08:25:56.863]                       is.null <- base::is.null
[08:25:56.863]                       muffled <- FALSE
[08:25:56.863]                       if (inherits(cond, "message")) {
[08:25:56.863]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.863]                         if (muffled) 
[08:25:56.863]                           invokeRestart("muffleMessage")
[08:25:56.863]                       }
[08:25:56.863]                       else if (inherits(cond, "warning")) {
[08:25:56.863]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.863]                         if (muffled) 
[08:25:56.863]                           invokeRestart("muffleWarning")
[08:25:56.863]                       }
[08:25:56.863]                       else if (inherits(cond, "condition")) {
[08:25:56.863]                         if (!is.null(pattern)) {
[08:25:56.863]                           computeRestarts <- base::computeRestarts
[08:25:56.863]                           grepl <- base::grepl
[08:25:56.863]                           restarts <- computeRestarts(cond)
[08:25:56.863]                           for (restart in restarts) {
[08:25:56.863]                             name <- restart$name
[08:25:56.863]                             if (is.null(name)) 
[08:25:56.863]                               next
[08:25:56.863]                             if (!grepl(pattern, name)) 
[08:25:56.863]                               next
[08:25:56.863]                             invokeRestart(restart)
[08:25:56.863]                             muffled <- TRUE
[08:25:56.863]                             break
[08:25:56.863]                           }
[08:25:56.863]                         }
[08:25:56.863]                       }
[08:25:56.863]                       invisible(muffled)
[08:25:56.863]                     }
[08:25:56.863]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.863]                   }
[08:25:56.863]                 }
[08:25:56.863]                 else {
[08:25:56.863]                   if (TRUE) {
[08:25:56.863]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.863]                     {
[08:25:56.863]                       inherits <- base::inherits
[08:25:56.863]                       invokeRestart <- base::invokeRestart
[08:25:56.863]                       is.null <- base::is.null
[08:25:56.863]                       muffled <- FALSE
[08:25:56.863]                       if (inherits(cond, "message")) {
[08:25:56.863]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.863]                         if (muffled) 
[08:25:56.863]                           invokeRestart("muffleMessage")
[08:25:56.863]                       }
[08:25:56.863]                       else if (inherits(cond, "warning")) {
[08:25:56.863]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.863]                         if (muffled) 
[08:25:56.863]                           invokeRestart("muffleWarning")
[08:25:56.863]                       }
[08:25:56.863]                       else if (inherits(cond, "condition")) {
[08:25:56.863]                         if (!is.null(pattern)) {
[08:25:56.863]                           computeRestarts <- base::computeRestarts
[08:25:56.863]                           grepl <- base::grepl
[08:25:56.863]                           restarts <- computeRestarts(cond)
[08:25:56.863]                           for (restart in restarts) {
[08:25:56.863]                             name <- restart$name
[08:25:56.863]                             if (is.null(name)) 
[08:25:56.863]                               next
[08:25:56.863]                             if (!grepl(pattern, name)) 
[08:25:56.863]                               next
[08:25:56.863]                             invokeRestart(restart)
[08:25:56.863]                             muffled <- TRUE
[08:25:56.863]                             break
[08:25:56.863]                           }
[08:25:56.863]                         }
[08:25:56.863]                       }
[08:25:56.863]                       invisible(muffled)
[08:25:56.863]                     }
[08:25:56.863]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.863]                   }
[08:25:56.863]                 }
[08:25:56.863]             }
[08:25:56.863]         }))
[08:25:56.863]     }, error = function(ex) {
[08:25:56.863]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.863]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.863]                 ...future.rng), started = ...future.startTime, 
[08:25:56.863]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.863]             version = "1.8"), class = "FutureResult")
[08:25:56.863]     }, finally = {
[08:25:56.863]         if (!identical(...future.workdir, getwd())) 
[08:25:56.863]             setwd(...future.workdir)
[08:25:56.863]         {
[08:25:56.863]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.863]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.863]             }
[08:25:56.863]             base::options(...future.oldOptions)
[08:25:56.863]             if (.Platform$OS.type == "windows") {
[08:25:56.863]                 old_names <- names(...future.oldEnvVars)
[08:25:56.863]                 envs <- base::Sys.getenv()
[08:25:56.863]                 names <- names(envs)
[08:25:56.863]                 common <- intersect(names, old_names)
[08:25:56.863]                 added <- setdiff(names, old_names)
[08:25:56.863]                 removed <- setdiff(old_names, names)
[08:25:56.863]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.863]                   envs[common]]
[08:25:56.863]                 NAMES <- toupper(changed)
[08:25:56.863]                 args <- list()
[08:25:56.863]                 for (kk in seq_along(NAMES)) {
[08:25:56.863]                   name <- changed[[kk]]
[08:25:56.863]                   NAME <- NAMES[[kk]]
[08:25:56.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.863]                     next
[08:25:56.863]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.863]                 }
[08:25:56.863]                 NAMES <- toupper(added)
[08:25:56.863]                 for (kk in seq_along(NAMES)) {
[08:25:56.863]                   name <- added[[kk]]
[08:25:56.863]                   NAME <- NAMES[[kk]]
[08:25:56.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.863]                     next
[08:25:56.863]                   args[[name]] <- ""
[08:25:56.863]                 }
[08:25:56.863]                 NAMES <- toupper(removed)
[08:25:56.863]                 for (kk in seq_along(NAMES)) {
[08:25:56.863]                   name <- removed[[kk]]
[08:25:56.863]                   NAME <- NAMES[[kk]]
[08:25:56.863]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.863]                     next
[08:25:56.863]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.863]                 }
[08:25:56.863]                 if (length(args) > 0) 
[08:25:56.863]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.863]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.863]             }
[08:25:56.863]             else {
[08:25:56.863]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.863]             }
[08:25:56.863]             {
[08:25:56.863]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.863]                   0L) {
[08:25:56.863]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.863]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.863]                   base::options(opts)
[08:25:56.863]                 }
[08:25:56.863]                 {
[08:25:56.863]                   {
[08:25:56.863]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.863]                     NULL
[08:25:56.863]                   }
[08:25:56.863]                   options(future.plan = NULL)
[08:25:56.863]                   if (is.na(NA_character_)) 
[08:25:56.863]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.863]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.863]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.863]                     .init = FALSE)
[08:25:56.863]                 }
[08:25:56.863]             }
[08:25:56.863]         }
[08:25:56.863]     })
[08:25:56.863]     if (TRUE) {
[08:25:56.863]         base::sink(type = "output", split = FALSE)
[08:25:56.863]         if (TRUE) {
[08:25:56.863]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.863]         }
[08:25:56.863]         else {
[08:25:56.863]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.863]         }
[08:25:56.863]         base::close(...future.stdout)
[08:25:56.863]         ...future.stdout <- NULL
[08:25:56.863]     }
[08:25:56.863]     ...future.result$conditions <- ...future.conditions
[08:25:56.863]     ...future.result$finished <- base::Sys.time()
[08:25:56.863]     ...future.result
[08:25:56.863] }
[08:25:56.866] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[08:25:56.866] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[08:25:56.867] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[08:25:56.867] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:56.867] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:56.867] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[08:25:56.868] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[08:25:56.868] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[08:25:56.868] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[08:25:56.869] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:56.869] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:56.869] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[08:25:56.870] MultisessionFuture started
[08:25:56.870] - Launch lazy future ... done
[08:25:56.870] run() for ‘MultisessionFuture’ ... done
[08:25:56.870] Created future:
[08:25:56.870] MultisessionFuture:
[08:25:56.870] Label: ‘future_replicate-2’
[08:25:56.870] Expression:
[08:25:56.870] {
[08:25:56.870]     do.call(function(...) {
[08:25:56.870]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.870]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.870]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.870]             on.exit(options(oopts), add = TRUE)
[08:25:56.870]         }
[08:25:56.870]         {
[08:25:56.870]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.870]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.870]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.870]                   envir = globalenv(), inherits = FALSE)
[08:25:56.870]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.870]             })
[08:25:56.870]         }
[08:25:56.870]     }, args = future.call.arguments)
[08:25:56.870] }
[08:25:56.870] Lazy evaluation: FALSE
[08:25:56.870] Asynchronous evaluation: TRUE
[08:25:56.870] Local evaluation: TRUE
[08:25:56.870] Environment: R_GlobalEnv
[08:25:56.870] Capture standard output: TRUE
[08:25:56.870] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.870] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:56.870] Packages: <none>
[08:25:56.870] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.870] Resolved: FALSE
[08:25:56.870] Value: <not collected>
[08:25:56.870] Conditions captured: <none>
[08:25:56.870] Early signaling: FALSE
[08:25:56.870] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.870] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.882] Chunk #2 of 2 ... DONE
[08:25:56.882] Launching 2 futures (chunks) ... DONE
[08:25:56.882] Resolving 2 futures (chunks) ...
[08:25:56.882] resolve() on list ...
[08:25:56.882]  recursive: 0
[08:25:56.882]  length: 2
[08:25:56.882] 
[08:25:56.883] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.883] - Validating connection of MultisessionFuture
[08:25:56.883] - received message: FutureResult
[08:25:56.883] - Received FutureResult
[08:25:56.884] - Erased future from FutureRegistry
[08:25:56.884] result() for ClusterFuture ...
[08:25:56.884] - result already collected: FutureResult
[08:25:56.884] result() for ClusterFuture ... done
[08:25:56.884] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.884] Future #1
[08:25:56.884] result() for ClusterFuture ...
[08:25:56.884] - result already collected: FutureResult
[08:25:56.884] result() for ClusterFuture ... done
[08:25:56.884] result() for ClusterFuture ...
[08:25:56.884] - result already collected: FutureResult
[08:25:56.884] result() for ClusterFuture ... done
[08:25:56.885] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:56.885] - nx: 2
[08:25:56.885] - relay: TRUE
[08:25:56.885] - stdout: TRUE
[08:25:56.885] - signal: TRUE
[08:25:56.885] - resignal: FALSE
[08:25:56.885] - force: TRUE
[08:25:56.885] - relayed: [n=2] FALSE, FALSE
[08:25:56.885] - queued futures: [n=2] FALSE, FALSE
[08:25:56.885]  - until=1
[08:25:56.885]  - relaying element #1
[08:25:56.885] result() for ClusterFuture ...
[08:25:56.886] - result already collected: FutureResult
[08:25:56.886] result() for ClusterFuture ... done
[08:25:56.886] result() for ClusterFuture ...
[08:25:56.886] - result already collected: FutureResult
[08:25:56.886] result() for ClusterFuture ... done
[08:25:56.886] result() for ClusterFuture ...
[08:25:56.886] - result already collected: FutureResult
[08:25:56.886] result() for ClusterFuture ... done
[08:25:56.886] result() for ClusterFuture ...
[08:25:56.886] - result already collected: FutureResult
[08:25:56.886] result() for ClusterFuture ... done
[08:25:56.886] - relayed: [n=2] TRUE, FALSE
[08:25:56.887] - queued futures: [n=2] TRUE, FALSE
[08:25:56.887] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:56.887]  length: 1 (resolved future 1)
[08:25:56.912] receiveMessageFromWorker() for ClusterFuture ...
[08:25:56.913] - Validating connection of MultisessionFuture
[08:25:56.913] - received message: FutureResult
[08:25:56.913] - Received FutureResult
[08:25:56.913] - Erased future from FutureRegistry
[08:25:56.913] result() for ClusterFuture ...
[08:25:56.913] - result already collected: FutureResult
[08:25:56.913] result() for ClusterFuture ... done
[08:25:56.913] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:56.913] Future #2
[08:25:56.914] result() for ClusterFuture ...
[08:25:56.914] - result already collected: FutureResult
[08:25:56.914] result() for ClusterFuture ... done
[08:25:56.914] result() for ClusterFuture ...
[08:25:56.914] - result already collected: FutureResult
[08:25:56.914] result() for ClusterFuture ... done
[08:25:56.914] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:56.914] - nx: 2
[08:25:56.914] - relay: TRUE
[08:25:56.914] - stdout: TRUE
[08:25:56.914] - signal: TRUE
[08:25:56.915] - resignal: FALSE
[08:25:56.915] - force: TRUE
[08:25:56.915] - relayed: [n=2] TRUE, FALSE
[08:25:56.915] - queued futures: [n=2] TRUE, FALSE
[08:25:56.915]  - until=2
[08:25:56.915]  - relaying element #2
[08:25:56.915] result() for ClusterFuture ...
[08:25:56.915] - result already collected: FutureResult
[08:25:56.915] result() for ClusterFuture ... done
[08:25:56.915] result() for ClusterFuture ...
[08:25:56.915] - result already collected: FutureResult
[08:25:56.915] result() for ClusterFuture ... done
[08:25:56.916] result() for ClusterFuture ...
[08:25:56.916] - result already collected: FutureResult
[08:25:56.916] result() for ClusterFuture ... done
[08:25:56.916] result() for ClusterFuture ...
[08:25:56.916] - result already collected: FutureResult
[08:25:56.916] result() for ClusterFuture ... done
[08:25:56.916] - relayed: [n=2] TRUE, TRUE
[08:25:56.916] - queued futures: [n=2] TRUE, TRUE
[08:25:56.916] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:56.916]  length: 0 (resolved future 2)
[08:25:56.916] Relaying remaining futures
[08:25:56.917] signalConditionsASAP(NULL, pos=0) ...
[08:25:56.917] - nx: 2
[08:25:56.917] - relay: TRUE
[08:25:56.917] - stdout: TRUE
[08:25:56.917] - signal: TRUE
[08:25:56.917] - resignal: FALSE
[08:25:56.917] - force: TRUE
[08:25:56.917] - relayed: [n=2] TRUE, TRUE
[08:25:56.917] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:56.917] - relayed: [n=2] TRUE, TRUE
[08:25:56.917] - queued futures: [n=2] TRUE, TRUE
[08:25:56.917] signalConditionsASAP(NULL, pos=0) ... done
[08:25:56.917] resolve() on list ... DONE
[08:25:56.918] result() for ClusterFuture ...
[08:25:56.918] - result already collected: FutureResult
[08:25:56.918] result() for ClusterFuture ... done
[08:25:56.918] result() for ClusterFuture ...
[08:25:56.918] - result already collected: FutureResult
[08:25:56.918] result() for ClusterFuture ... done
[08:25:56.918] result() for ClusterFuture ...
[08:25:56.918] - result already collected: FutureResult
[08:25:56.918] result() for ClusterFuture ... done
[08:25:56.918] result() for ClusterFuture ...
[08:25:56.918] - result already collected: FutureResult
[08:25:56.919] result() for ClusterFuture ... done
[08:25:56.919]  - Number of value chunks collected: 2
[08:25:56.919] Resolving 2 futures (chunks) ... DONE
[08:25:56.919] Reducing values from 2 chunks ...
[08:25:56.919]  - Number of values collected after concatenation: 5
[08:25:56.919]  - Number of values expected: 5
[08:25:56.919] Reducing values from 2 chunks ... DONE
[08:25:56.919] future_lapply() ... DONE
- example(replicate) ...
[08:25:56.919] future_lapply() ...
[08:25:56.920] Generating random seeds ...
[08:25:56.920] Generating random seed streams for 5 elements ...
[08:25:56.920] Generating random seed streams for 5 elements ... DONE
[08:25:56.920] Generating random seeds ... DONE
[08:25:56.920] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[08:25:56.923] Number of chunks: 2
[08:25:56.923] getGlobalsAndPackagesXApply() ...
[08:25:56.923]  - future.globals: TRUE
[08:25:56.923] getGlobalsAndPackages() ...
[08:25:56.923] Searching for globals...
[08:25:56.925] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[08:25:56.925] Searching for globals ... DONE
[08:25:56.925] Resolving globals: FALSE
[08:25:56.926] The total size of the 3 globals is 617 bytes (617 bytes)
[08:25:56.926] The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[08:25:56.926] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[08:25:56.926] 
[08:25:56.926] getGlobalsAndPackages() ... DONE
[08:25:56.926]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[08:25:56.926]  - needed namespaces: [n=0] 
[08:25:56.927] Finding globals ... DONE
[08:25:56.927]  - use_args: TRUE
[08:25:56.927]  - Getting '...' globals ...
[08:25:56.927] resolve() on list ...
[08:25:56.927]  recursive: 0
[08:25:56.927]  length: 1
[08:25:56.927]  elements: ‘...’
[08:25:56.927]  length: 0 (resolved future 1)
[08:25:56.928] resolve() on list ... DONE
[08:25:56.928]    - '...' content: [n=0] 
[08:25:56.928] List of 1
[08:25:56.928]  $ ...: list()
[08:25:56.928]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.928]  - attr(*, "where")=List of 1
[08:25:56.928]   ..$ ...:<environment: 0x55f7794d7e48> 
[08:25:56.928]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.928]  - attr(*, "resolved")= logi TRUE
[08:25:56.928]  - attr(*, "total_size")= num NA
[08:25:56.930]  - Getting '...' globals ... DONE
[08:25:56.930] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[08:25:56.931] List of 4
[08:25:56.931]  $ ...future.FUN:function (...)  
[08:25:56.931]  $ foo          :function (x = 1, y = 2)  
[08:25:56.931]  $ x            : num 3
[08:25:56.931]  $ ...          : list()
[08:25:56.931]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:56.931]  - attr(*, "where")=List of 4
[08:25:56.931]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:56.931]   ..$ foo          :<environment: R_EmptyEnv> 
[08:25:56.931]   ..$ x            :<environment: R_EmptyEnv> 
[08:25:56.931]   ..$ ...          :<environment: 0x55f7794d7e48> 
[08:25:56.931]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:56.931]  - attr(*, "resolved")= logi FALSE
[08:25:56.931]  - attr(*, "total_size")= num 7967
[08:25:56.934] Packages to be attached in all futures: [n=0] 
[08:25:56.934] getGlobalsAndPackagesXApply() ... DONE
[08:25:56.934] Number of futures (= number of chunks): 2
[08:25:56.935] Launching 2 futures (chunks) ...
[08:25:56.935] Chunk #1 of 2 ...
[08:25:56.935]  - Finding globals in 'X' for chunk #1 ...
[08:25:56.935] getGlobalsAndPackages() ...
[08:25:56.935] Searching for globals...
[08:25:56.935] 
[08:25:56.935] Searching for globals ... DONE
[08:25:56.935] - globals: [0] <none>
[08:25:56.935] getGlobalsAndPackages() ... DONE
[08:25:56.936]    + additional globals found: [n=0] 
[08:25:56.936]    + additional namespaces needed: [n=0] 
[08:25:56.936]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:56.936]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.936]  - seeds: [2] <seeds>
[08:25:56.936]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.936] getGlobalsAndPackages() ...
[08:25:56.936] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.936] Resolving globals: FALSE
[08:25:56.936] Tweak future expression to call with '...' arguments ...
[08:25:56.937] {
[08:25:56.937]     do.call(function(...) {
[08:25:56.937]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.937]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.937]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.937]             on.exit(options(oopts), add = TRUE)
[08:25:56.937]         }
[08:25:56.937]         {
[08:25:56.937]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.937]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.937]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.937]                   envir = globalenv(), inherits = FALSE)
[08:25:56.937]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.937]             })
[08:25:56.937]         }
[08:25:56.937]     }, args = future.call.arguments)
[08:25:56.937] }
[08:25:56.937] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.937] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.937] 
[08:25:56.937] getGlobalsAndPackages() ... DONE
[08:25:56.938] run() for ‘Future’ ...
[08:25:56.938] - state: ‘created’
[08:25:56.938] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.952] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.952] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.953]   - Field: ‘node’
[08:25:56.953]   - Field: ‘label’
[08:25:56.953]   - Field: ‘local’
[08:25:56.953]   - Field: ‘owner’
[08:25:56.953]   - Field: ‘envir’
[08:25:56.953]   - Field: ‘workers’
[08:25:56.953]   - Field: ‘packages’
[08:25:56.953]   - Field: ‘gc’
[08:25:56.953]   - Field: ‘conditions’
[08:25:56.953]   - Field: ‘persistent’
[08:25:56.954]   - Field: ‘expr’
[08:25:56.954]   - Field: ‘uuid’
[08:25:56.954]   - Field: ‘seed’
[08:25:56.954]   - Field: ‘version’
[08:25:56.954]   - Field: ‘result’
[08:25:56.954]   - Field: ‘asynchronous’
[08:25:56.954]   - Field: ‘calls’
[08:25:56.954]   - Field: ‘globals’
[08:25:56.954]   - Field: ‘stdout’
[08:25:56.954]   - Field: ‘earlySignal’
[08:25:56.954]   - Field: ‘lazy’
[08:25:56.954]   - Field: ‘state’
[08:25:56.955] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.955] - Launch lazy future ...
[08:25:56.955] Packages needed by the future expression (n = 0): <none>
[08:25:56.955] Packages needed by future strategies (n = 0): <none>
[08:25:56.956] {
[08:25:56.956]     {
[08:25:56.956]         {
[08:25:56.956]             ...future.startTime <- base::Sys.time()
[08:25:56.956]             {
[08:25:56.956]                 {
[08:25:56.956]                   {
[08:25:56.956]                     {
[08:25:56.956]                       base::local({
[08:25:56.956]                         has_future <- base::requireNamespace("future", 
[08:25:56.956]                           quietly = TRUE)
[08:25:56.956]                         if (has_future) {
[08:25:56.956]                           ns <- base::getNamespace("future")
[08:25:56.956]                           version <- ns[[".package"]][["version"]]
[08:25:56.956]                           if (is.null(version)) 
[08:25:56.956]                             version <- utils::packageVersion("future")
[08:25:56.956]                         }
[08:25:56.956]                         else {
[08:25:56.956]                           version <- NULL
[08:25:56.956]                         }
[08:25:56.956]                         if (!has_future || version < "1.8.0") {
[08:25:56.956]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.956]                             "", base::R.version$version.string), 
[08:25:56.956]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.956]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.956]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.956]                               "release", "version")], collapse = " "), 
[08:25:56.956]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.956]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.956]                             info)
[08:25:56.956]                           info <- base::paste(info, collapse = "; ")
[08:25:56.956]                           if (!has_future) {
[08:25:56.956]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.956]                               info)
[08:25:56.956]                           }
[08:25:56.956]                           else {
[08:25:56.956]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.956]                               info, version)
[08:25:56.956]                           }
[08:25:56.956]                           base::stop(msg)
[08:25:56.956]                         }
[08:25:56.956]                       })
[08:25:56.956]                     }
[08:25:56.956]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.956]                     base::options(mc.cores = 1L)
[08:25:56.956]                   }
[08:25:56.956]                   ...future.strategy.old <- future::plan("list")
[08:25:56.956]                   options(future.plan = NULL)
[08:25:56.956]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.956]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.956]                 }
[08:25:56.956]                 ...future.workdir <- getwd()
[08:25:56.956]             }
[08:25:56.956]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.956]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.956]         }
[08:25:56.956]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.956]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.956]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.956]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.956]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.956]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.956]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.956]             base::names(...future.oldOptions))
[08:25:56.956]     }
[08:25:56.956]     if (FALSE) {
[08:25:56.956]     }
[08:25:56.956]     else {
[08:25:56.956]         if (TRUE) {
[08:25:56.956]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.956]                 open = "w")
[08:25:56.956]         }
[08:25:56.956]         else {
[08:25:56.956]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.956]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.956]         }
[08:25:56.956]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.956]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.956]             base::sink(type = "output", split = FALSE)
[08:25:56.956]             base::close(...future.stdout)
[08:25:56.956]         }, add = TRUE)
[08:25:56.956]     }
[08:25:56.956]     ...future.frame <- base::sys.nframe()
[08:25:56.956]     ...future.conditions <- base::list()
[08:25:56.956]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.956]     if (FALSE) {
[08:25:56.956]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.956]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.956]     }
[08:25:56.956]     ...future.result <- base::tryCatch({
[08:25:56.956]         base::withCallingHandlers({
[08:25:56.956]             ...future.value <- base::withVisible(base::local({
[08:25:56.956]                 ...future.makeSendCondition <- base::local({
[08:25:56.956]                   sendCondition <- NULL
[08:25:56.956]                   function(frame = 1L) {
[08:25:56.956]                     if (is.function(sendCondition)) 
[08:25:56.956]                       return(sendCondition)
[08:25:56.956]                     ns <- getNamespace("parallel")
[08:25:56.956]                     if (exists("sendData", mode = "function", 
[08:25:56.956]                       envir = ns)) {
[08:25:56.956]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.956]                         envir = ns)
[08:25:56.956]                       envir <- sys.frame(frame)
[08:25:56.956]                       master <- NULL
[08:25:56.956]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.956]                         !identical(envir, emptyenv())) {
[08:25:56.956]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.956]                           inherits = FALSE)) {
[08:25:56.956]                           master <- get("master", mode = "list", 
[08:25:56.956]                             envir = envir, inherits = FALSE)
[08:25:56.956]                           if (inherits(master, c("SOCKnode", 
[08:25:56.956]                             "SOCK0node"))) {
[08:25:56.956]                             sendCondition <<- function(cond) {
[08:25:56.956]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.956]                                 success = TRUE)
[08:25:56.956]                               parallel_sendData(master, data)
[08:25:56.956]                             }
[08:25:56.956]                             return(sendCondition)
[08:25:56.956]                           }
[08:25:56.956]                         }
[08:25:56.956]                         frame <- frame + 1L
[08:25:56.956]                         envir <- sys.frame(frame)
[08:25:56.956]                       }
[08:25:56.956]                     }
[08:25:56.956]                     sendCondition <<- function(cond) NULL
[08:25:56.956]                   }
[08:25:56.956]                 })
[08:25:56.956]                 withCallingHandlers({
[08:25:56.956]                   {
[08:25:56.956]                     do.call(function(...) {
[08:25:56.956]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.956]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.956]                         ...future.globals.maxSize)) {
[08:25:56.956]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.956]                         on.exit(options(oopts), add = TRUE)
[08:25:56.956]                       }
[08:25:56.956]                       {
[08:25:56.956]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.956]                           FUN = function(jj) {
[08:25:56.956]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.956]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.956]                               envir = globalenv(), inherits = FALSE)
[08:25:56.956]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.956]                           })
[08:25:56.956]                       }
[08:25:56.956]                     }, args = future.call.arguments)
[08:25:56.956]                   }
[08:25:56.956]                 }, immediateCondition = function(cond) {
[08:25:56.956]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.956]                   sendCondition(cond)
[08:25:56.956]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.956]                   {
[08:25:56.956]                     inherits <- base::inherits
[08:25:56.956]                     invokeRestart <- base::invokeRestart
[08:25:56.956]                     is.null <- base::is.null
[08:25:56.956]                     muffled <- FALSE
[08:25:56.956]                     if (inherits(cond, "message")) {
[08:25:56.956]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.956]                       if (muffled) 
[08:25:56.956]                         invokeRestart("muffleMessage")
[08:25:56.956]                     }
[08:25:56.956]                     else if (inherits(cond, "warning")) {
[08:25:56.956]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.956]                       if (muffled) 
[08:25:56.956]                         invokeRestart("muffleWarning")
[08:25:56.956]                     }
[08:25:56.956]                     else if (inherits(cond, "condition")) {
[08:25:56.956]                       if (!is.null(pattern)) {
[08:25:56.956]                         computeRestarts <- base::computeRestarts
[08:25:56.956]                         grepl <- base::grepl
[08:25:56.956]                         restarts <- computeRestarts(cond)
[08:25:56.956]                         for (restart in restarts) {
[08:25:56.956]                           name <- restart$name
[08:25:56.956]                           if (is.null(name)) 
[08:25:56.956]                             next
[08:25:56.956]                           if (!grepl(pattern, name)) 
[08:25:56.956]                             next
[08:25:56.956]                           invokeRestart(restart)
[08:25:56.956]                           muffled <- TRUE
[08:25:56.956]                           break
[08:25:56.956]                         }
[08:25:56.956]                       }
[08:25:56.956]                     }
[08:25:56.956]                     invisible(muffled)
[08:25:56.956]                   }
[08:25:56.956]                   muffleCondition(cond)
[08:25:56.956]                 })
[08:25:56.956]             }))
[08:25:56.956]             future::FutureResult(value = ...future.value$value, 
[08:25:56.956]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.956]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.956]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.956]                     ...future.globalenv.names))
[08:25:56.956]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.956]         }, condition = base::local({
[08:25:56.956]             c <- base::c
[08:25:56.956]             inherits <- base::inherits
[08:25:56.956]             invokeRestart <- base::invokeRestart
[08:25:56.956]             length <- base::length
[08:25:56.956]             list <- base::list
[08:25:56.956]             seq.int <- base::seq.int
[08:25:56.956]             signalCondition <- base::signalCondition
[08:25:56.956]             sys.calls <- base::sys.calls
[08:25:56.956]             `[[` <- base::`[[`
[08:25:56.956]             `+` <- base::`+`
[08:25:56.956]             `<<-` <- base::`<<-`
[08:25:56.956]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.956]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.956]                   3L)]
[08:25:56.956]             }
[08:25:56.956]             function(cond) {
[08:25:56.956]                 is_error <- inherits(cond, "error")
[08:25:56.956]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.956]                   NULL)
[08:25:56.956]                 if (is_error) {
[08:25:56.956]                   sessionInformation <- function() {
[08:25:56.956]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.956]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.956]                       search = base::search(), system = base::Sys.info())
[08:25:56.956]                   }
[08:25:56.956]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.956]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.956]                     cond$call), session = sessionInformation(), 
[08:25:56.956]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.956]                   signalCondition(cond)
[08:25:56.956]                 }
[08:25:56.956]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.956]                 "immediateCondition"))) {
[08:25:56.956]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.956]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.956]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.956]                   if (TRUE && !signal) {
[08:25:56.956]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.956]                     {
[08:25:56.956]                       inherits <- base::inherits
[08:25:56.956]                       invokeRestart <- base::invokeRestart
[08:25:56.956]                       is.null <- base::is.null
[08:25:56.956]                       muffled <- FALSE
[08:25:56.956]                       if (inherits(cond, "message")) {
[08:25:56.956]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.956]                         if (muffled) 
[08:25:56.956]                           invokeRestart("muffleMessage")
[08:25:56.956]                       }
[08:25:56.956]                       else if (inherits(cond, "warning")) {
[08:25:56.956]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.956]                         if (muffled) 
[08:25:56.956]                           invokeRestart("muffleWarning")
[08:25:56.956]                       }
[08:25:56.956]                       else if (inherits(cond, "condition")) {
[08:25:56.956]                         if (!is.null(pattern)) {
[08:25:56.956]                           computeRestarts <- base::computeRestarts
[08:25:56.956]                           grepl <- base::grepl
[08:25:56.956]                           restarts <- computeRestarts(cond)
[08:25:56.956]                           for (restart in restarts) {
[08:25:56.956]                             name <- restart$name
[08:25:56.956]                             if (is.null(name)) 
[08:25:56.956]                               next
[08:25:56.956]                             if (!grepl(pattern, name)) 
[08:25:56.956]                               next
[08:25:56.956]                             invokeRestart(restart)
[08:25:56.956]                             muffled <- TRUE
[08:25:56.956]                             break
[08:25:56.956]                           }
[08:25:56.956]                         }
[08:25:56.956]                       }
[08:25:56.956]                       invisible(muffled)
[08:25:56.956]                     }
[08:25:56.956]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.956]                   }
[08:25:56.956]                 }
[08:25:56.956]                 else {
[08:25:56.956]                   if (TRUE) {
[08:25:56.956]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.956]                     {
[08:25:56.956]                       inherits <- base::inherits
[08:25:56.956]                       invokeRestart <- base::invokeRestart
[08:25:56.956]                       is.null <- base::is.null
[08:25:56.956]                       muffled <- FALSE
[08:25:56.956]                       if (inherits(cond, "message")) {
[08:25:56.956]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.956]                         if (muffled) 
[08:25:56.956]                           invokeRestart("muffleMessage")
[08:25:56.956]                       }
[08:25:56.956]                       else if (inherits(cond, "warning")) {
[08:25:56.956]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.956]                         if (muffled) 
[08:25:56.956]                           invokeRestart("muffleWarning")
[08:25:56.956]                       }
[08:25:56.956]                       else if (inherits(cond, "condition")) {
[08:25:56.956]                         if (!is.null(pattern)) {
[08:25:56.956]                           computeRestarts <- base::computeRestarts
[08:25:56.956]                           grepl <- base::grepl
[08:25:56.956]                           restarts <- computeRestarts(cond)
[08:25:56.956]                           for (restart in restarts) {
[08:25:56.956]                             name <- restart$name
[08:25:56.956]                             if (is.null(name)) 
[08:25:56.956]                               next
[08:25:56.956]                             if (!grepl(pattern, name)) 
[08:25:56.956]                               next
[08:25:56.956]                             invokeRestart(restart)
[08:25:56.956]                             muffled <- TRUE
[08:25:56.956]                             break
[08:25:56.956]                           }
[08:25:56.956]                         }
[08:25:56.956]                       }
[08:25:56.956]                       invisible(muffled)
[08:25:56.956]                     }
[08:25:56.956]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.956]                   }
[08:25:56.956]                 }
[08:25:56.956]             }
[08:25:56.956]         }))
[08:25:56.956]     }, error = function(ex) {
[08:25:56.956]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.956]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.956]                 ...future.rng), started = ...future.startTime, 
[08:25:56.956]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.956]             version = "1.8"), class = "FutureResult")
[08:25:56.956]     }, finally = {
[08:25:56.956]         if (!identical(...future.workdir, getwd())) 
[08:25:56.956]             setwd(...future.workdir)
[08:25:56.956]         {
[08:25:56.956]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.956]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.956]             }
[08:25:56.956]             base::options(...future.oldOptions)
[08:25:56.956]             if (.Platform$OS.type == "windows") {
[08:25:56.956]                 old_names <- names(...future.oldEnvVars)
[08:25:56.956]                 envs <- base::Sys.getenv()
[08:25:56.956]                 names <- names(envs)
[08:25:56.956]                 common <- intersect(names, old_names)
[08:25:56.956]                 added <- setdiff(names, old_names)
[08:25:56.956]                 removed <- setdiff(old_names, names)
[08:25:56.956]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.956]                   envs[common]]
[08:25:56.956]                 NAMES <- toupper(changed)
[08:25:56.956]                 args <- list()
[08:25:56.956]                 for (kk in seq_along(NAMES)) {
[08:25:56.956]                   name <- changed[[kk]]
[08:25:56.956]                   NAME <- NAMES[[kk]]
[08:25:56.956]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.956]                     next
[08:25:56.956]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.956]                 }
[08:25:56.956]                 NAMES <- toupper(added)
[08:25:56.956]                 for (kk in seq_along(NAMES)) {
[08:25:56.956]                   name <- added[[kk]]
[08:25:56.956]                   NAME <- NAMES[[kk]]
[08:25:56.956]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.956]                     next
[08:25:56.956]                   args[[name]] <- ""
[08:25:56.956]                 }
[08:25:56.956]                 NAMES <- toupper(removed)
[08:25:56.956]                 for (kk in seq_along(NAMES)) {
[08:25:56.956]                   name <- removed[[kk]]
[08:25:56.956]                   NAME <- NAMES[[kk]]
[08:25:56.956]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.956]                     next
[08:25:56.956]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.956]                 }
[08:25:56.956]                 if (length(args) > 0) 
[08:25:56.956]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.956]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.956]             }
[08:25:56.956]             else {
[08:25:56.956]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.956]             }
[08:25:56.956]             {
[08:25:56.956]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.956]                   0L) {
[08:25:56.956]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.956]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.956]                   base::options(opts)
[08:25:56.956]                 }
[08:25:56.956]                 {
[08:25:56.956]                   {
[08:25:56.956]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.956]                     NULL
[08:25:56.956]                   }
[08:25:56.956]                   options(future.plan = NULL)
[08:25:56.956]                   if (is.na(NA_character_)) 
[08:25:56.956]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.956]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.956]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.956]                     .init = FALSE)
[08:25:56.956]                 }
[08:25:56.956]             }
[08:25:56.956]         }
[08:25:56.956]     })
[08:25:56.956]     if (TRUE) {
[08:25:56.956]         base::sink(type = "output", split = FALSE)
[08:25:56.956]         if (TRUE) {
[08:25:56.956]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.956]         }
[08:25:56.956]         else {
[08:25:56.956]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.956]         }
[08:25:56.956]         base::close(...future.stdout)
[08:25:56.956]         ...future.stdout <- NULL
[08:25:56.956]     }
[08:25:56.956]     ...future.result$conditions <- ...future.conditions
[08:25:56.956]     ...future.result$finished <- base::Sys.time()
[08:25:56.956]     ...future.result
[08:25:56.956] }
[08:25:56.959] Exporting 7 global objects (1.32 KiB) to cluster node #1 ...
[08:25:56.959] Exporting ‘...future.FUN’ (179 bytes) to cluster node #1 ...
[08:25:56.959] Exporting ‘...future.FUN’ (179 bytes) to cluster node #1 ... DONE
[08:25:56.959] Exporting ‘foo’ (399 bytes) to cluster node #1 ...
[08:25:56.960] Exporting ‘foo’ (399 bytes) to cluster node #1 ... DONE
[08:25:56.960] Exporting ‘x’ (39 bytes) to cluster node #1 ...
[08:25:56.960] Exporting ‘x’ (39 bytes) to cluster node #1 ... DONE
[08:25:56.960] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:56.961] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:56.961] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[08:25:56.961] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[08:25:56.961] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[08:25:56.962] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[08:25:56.962] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:56.962] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:56.962] Exporting 7 global objects (1.32 KiB) to cluster node #1 ... DONE
[08:25:56.963] MultisessionFuture started
[08:25:56.963] - Launch lazy future ... done
[08:25:56.963] run() for ‘MultisessionFuture’ ... done
[08:25:56.963] Created future:
[08:25:56.963] MultisessionFuture:
[08:25:56.963] Label: ‘future_replicate-1’
[08:25:56.963] Expression:
[08:25:56.963] {
[08:25:56.963]     do.call(function(...) {
[08:25:56.963]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.963]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.963]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.963]             on.exit(options(oopts), add = TRUE)
[08:25:56.963]         }
[08:25:56.963]         {
[08:25:56.963]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.963]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.963]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.963]                   envir = globalenv(), inherits = FALSE)
[08:25:56.963]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.963]             })
[08:25:56.963]         }
[08:25:56.963]     }, args = future.call.arguments)
[08:25:56.963] }
[08:25:56.963] Lazy evaluation: FALSE
[08:25:56.963] Asynchronous evaluation: TRUE
[08:25:56.963] Local evaluation: TRUE
[08:25:56.963] Environment: 0x55f7794d57b8
[08:25:56.963] Capture standard output: TRUE
[08:25:56.963] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:56.963] Globals: 7 objects totaling 899 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, ...)
[08:25:56.963] Packages: <none>
[08:25:56.963] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:56.963] Resolved: FALSE
[08:25:56.963] Value: <not collected>
[08:25:56.963] Conditions captured: <none>
[08:25:56.963] Early signaling: FALSE
[08:25:56.963] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:56.963] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.975] Chunk #1 of 2 ... DONE
[08:25:56.975] Chunk #2 of 2 ...
[08:25:56.975]  - Finding globals in 'X' for chunk #2 ...
[08:25:56.975] getGlobalsAndPackages() ...
[08:25:56.975] Searching for globals...
[08:25:56.976] 
[08:25:56.976] Searching for globals ... DONE
[08:25:56.976] - globals: [0] <none>
[08:25:56.976] getGlobalsAndPackages() ... DONE
[08:25:56.976]    + additional globals found: [n=0] 
[08:25:56.976]    + additional namespaces needed: [n=0] 
[08:25:56.976]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:56.976]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:56.976]  - seeds: [3] <seeds>
[08:25:56.976]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.976] getGlobalsAndPackages() ...
[08:25:56.977] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.977] Resolving globals: FALSE
[08:25:56.977] Tweak future expression to call with '...' arguments ...
[08:25:56.977] {
[08:25:56.977]     do.call(function(...) {
[08:25:56.977]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.977]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:56.977]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.977]             on.exit(options(oopts), add = TRUE)
[08:25:56.977]         }
[08:25:56.977]         {
[08:25:56.977]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:56.977]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.977]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.977]                   envir = globalenv(), inherits = FALSE)
[08:25:56.977]                 ...future.FUN(...future.X_jj, ...)
[08:25:56.977]             })
[08:25:56.977]         }
[08:25:56.977]     }, args = future.call.arguments)
[08:25:56.977] }
[08:25:56.977] Tweak future expression to call with '...' arguments ... DONE
[08:25:56.978] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:56.978] 
[08:25:56.978] getGlobalsAndPackages() ... DONE
[08:25:56.978] run() for ‘Future’ ...
[08:25:56.978] - state: ‘created’
[08:25:56.978] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:56.993] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:56.993] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:56.993]   - Field: ‘node’
[08:25:56.993]   - Field: ‘label’
[08:25:56.993]   - Field: ‘local’
[08:25:56.993]   - Field: ‘owner’
[08:25:56.993]   - Field: ‘envir’
[08:25:56.993]   - Field: ‘workers’
[08:25:56.993]   - Field: ‘packages’
[08:25:56.994]   - Field: ‘gc’
[08:25:56.994]   - Field: ‘conditions’
[08:25:56.994]   - Field: ‘persistent’
[08:25:56.994]   - Field: ‘expr’
[08:25:56.994]   - Field: ‘uuid’
[08:25:56.994]   - Field: ‘seed’
[08:25:56.994]   - Field: ‘version’
[08:25:56.994]   - Field: ‘result’
[08:25:56.994]   - Field: ‘asynchronous’
[08:25:56.994]   - Field: ‘calls’
[08:25:56.994]   - Field: ‘globals’
[08:25:56.994]   - Field: ‘stdout’
[08:25:56.997]   - Field: ‘earlySignal’
[08:25:56.997]   - Field: ‘lazy’
[08:25:56.997]   - Field: ‘state’
[08:25:56.997] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:56.997] - Launch lazy future ...
[08:25:56.998] Packages needed by the future expression (n = 0): <none>
[08:25:56.998] Packages needed by future strategies (n = 0): <none>
[08:25:56.998] {
[08:25:56.998]     {
[08:25:56.998]         {
[08:25:56.998]             ...future.startTime <- base::Sys.time()
[08:25:56.998]             {
[08:25:56.998]                 {
[08:25:56.998]                   {
[08:25:56.998]                     {
[08:25:56.998]                       base::local({
[08:25:56.998]                         has_future <- base::requireNamespace("future", 
[08:25:56.998]                           quietly = TRUE)
[08:25:56.998]                         if (has_future) {
[08:25:56.998]                           ns <- base::getNamespace("future")
[08:25:56.998]                           version <- ns[[".package"]][["version"]]
[08:25:56.998]                           if (is.null(version)) 
[08:25:56.998]                             version <- utils::packageVersion("future")
[08:25:56.998]                         }
[08:25:56.998]                         else {
[08:25:56.998]                           version <- NULL
[08:25:56.998]                         }
[08:25:56.998]                         if (!has_future || version < "1.8.0") {
[08:25:56.998]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:56.998]                             "", base::R.version$version.string), 
[08:25:56.998]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:56.998]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:56.998]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:56.998]                               "release", "version")], collapse = " "), 
[08:25:56.998]                             hostname = base::Sys.info()[["nodename"]])
[08:25:56.998]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:56.998]                             info)
[08:25:56.998]                           info <- base::paste(info, collapse = "; ")
[08:25:56.998]                           if (!has_future) {
[08:25:56.998]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:56.998]                               info)
[08:25:56.998]                           }
[08:25:56.998]                           else {
[08:25:56.998]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:56.998]                               info, version)
[08:25:56.998]                           }
[08:25:56.998]                           base::stop(msg)
[08:25:56.998]                         }
[08:25:56.998]                       })
[08:25:56.998]                     }
[08:25:56.998]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:56.998]                     base::options(mc.cores = 1L)
[08:25:56.998]                   }
[08:25:56.998]                   ...future.strategy.old <- future::plan("list")
[08:25:56.998]                   options(future.plan = NULL)
[08:25:56.998]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.998]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:56.998]                 }
[08:25:56.998]                 ...future.workdir <- getwd()
[08:25:56.998]             }
[08:25:56.998]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:56.998]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:56.998]         }
[08:25:56.998]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:56.998]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:56.998]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:56.998]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:56.998]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:56.998]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:56.998]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:56.998]             base::names(...future.oldOptions))
[08:25:56.998]     }
[08:25:56.998]     if (FALSE) {
[08:25:56.998]     }
[08:25:56.998]     else {
[08:25:56.998]         if (TRUE) {
[08:25:56.998]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:56.998]                 open = "w")
[08:25:56.998]         }
[08:25:56.998]         else {
[08:25:56.998]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:56.998]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:56.998]         }
[08:25:56.998]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:56.998]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:56.998]             base::sink(type = "output", split = FALSE)
[08:25:56.998]             base::close(...future.stdout)
[08:25:56.998]         }, add = TRUE)
[08:25:56.998]     }
[08:25:56.998]     ...future.frame <- base::sys.nframe()
[08:25:56.998]     ...future.conditions <- base::list()
[08:25:56.998]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:56.998]     if (FALSE) {
[08:25:56.998]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:56.998]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:56.998]     }
[08:25:56.998]     ...future.result <- base::tryCatch({
[08:25:56.998]         base::withCallingHandlers({
[08:25:56.998]             ...future.value <- base::withVisible(base::local({
[08:25:56.998]                 ...future.makeSendCondition <- base::local({
[08:25:56.998]                   sendCondition <- NULL
[08:25:56.998]                   function(frame = 1L) {
[08:25:56.998]                     if (is.function(sendCondition)) 
[08:25:56.998]                       return(sendCondition)
[08:25:56.998]                     ns <- getNamespace("parallel")
[08:25:56.998]                     if (exists("sendData", mode = "function", 
[08:25:56.998]                       envir = ns)) {
[08:25:56.998]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:56.998]                         envir = ns)
[08:25:56.998]                       envir <- sys.frame(frame)
[08:25:56.998]                       master <- NULL
[08:25:56.998]                       while (!identical(envir, .GlobalEnv) && 
[08:25:56.998]                         !identical(envir, emptyenv())) {
[08:25:56.998]                         if (exists("master", mode = "list", envir = envir, 
[08:25:56.998]                           inherits = FALSE)) {
[08:25:56.998]                           master <- get("master", mode = "list", 
[08:25:56.998]                             envir = envir, inherits = FALSE)
[08:25:56.998]                           if (inherits(master, c("SOCKnode", 
[08:25:56.998]                             "SOCK0node"))) {
[08:25:56.998]                             sendCondition <<- function(cond) {
[08:25:56.998]                               data <- list(type = "VALUE", value = cond, 
[08:25:56.998]                                 success = TRUE)
[08:25:56.998]                               parallel_sendData(master, data)
[08:25:56.998]                             }
[08:25:56.998]                             return(sendCondition)
[08:25:56.998]                           }
[08:25:56.998]                         }
[08:25:56.998]                         frame <- frame + 1L
[08:25:56.998]                         envir <- sys.frame(frame)
[08:25:56.998]                       }
[08:25:56.998]                     }
[08:25:56.998]                     sendCondition <<- function(cond) NULL
[08:25:56.998]                   }
[08:25:56.998]                 })
[08:25:56.998]                 withCallingHandlers({
[08:25:56.998]                   {
[08:25:56.998]                     do.call(function(...) {
[08:25:56.998]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:56.998]                       if (!identical(...future.globals.maxSize.org, 
[08:25:56.998]                         ...future.globals.maxSize)) {
[08:25:56.998]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:56.998]                         on.exit(options(oopts), add = TRUE)
[08:25:56.998]                       }
[08:25:56.998]                       {
[08:25:56.998]                         lapply(seq_along(...future.elements_ii), 
[08:25:56.998]                           FUN = function(jj) {
[08:25:56.998]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:56.998]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:56.998]                               envir = globalenv(), inherits = FALSE)
[08:25:56.998]                             ...future.FUN(...future.X_jj, ...)
[08:25:56.998]                           })
[08:25:56.998]                       }
[08:25:56.998]                     }, args = future.call.arguments)
[08:25:56.998]                   }
[08:25:56.998]                 }, immediateCondition = function(cond) {
[08:25:56.998]                   sendCondition <- ...future.makeSendCondition()
[08:25:56.998]                   sendCondition(cond)
[08:25:56.998]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.998]                   {
[08:25:56.998]                     inherits <- base::inherits
[08:25:56.998]                     invokeRestart <- base::invokeRestart
[08:25:56.998]                     is.null <- base::is.null
[08:25:56.998]                     muffled <- FALSE
[08:25:56.998]                     if (inherits(cond, "message")) {
[08:25:56.998]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:56.998]                       if (muffled) 
[08:25:56.998]                         invokeRestart("muffleMessage")
[08:25:56.998]                     }
[08:25:56.998]                     else if (inherits(cond, "warning")) {
[08:25:56.998]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:56.998]                       if (muffled) 
[08:25:56.998]                         invokeRestart("muffleWarning")
[08:25:56.998]                     }
[08:25:56.998]                     else if (inherits(cond, "condition")) {
[08:25:56.998]                       if (!is.null(pattern)) {
[08:25:56.998]                         computeRestarts <- base::computeRestarts
[08:25:56.998]                         grepl <- base::grepl
[08:25:56.998]                         restarts <- computeRestarts(cond)
[08:25:56.998]                         for (restart in restarts) {
[08:25:56.998]                           name <- restart$name
[08:25:56.998]                           if (is.null(name)) 
[08:25:56.998]                             next
[08:25:56.998]                           if (!grepl(pattern, name)) 
[08:25:56.998]                             next
[08:25:56.998]                           invokeRestart(restart)
[08:25:56.998]                           muffled <- TRUE
[08:25:56.998]                           break
[08:25:56.998]                         }
[08:25:56.998]                       }
[08:25:56.998]                     }
[08:25:56.998]                     invisible(muffled)
[08:25:56.998]                   }
[08:25:56.998]                   muffleCondition(cond)
[08:25:56.998]                 })
[08:25:56.998]             }))
[08:25:56.998]             future::FutureResult(value = ...future.value$value, 
[08:25:56.998]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.998]                   ...future.rng), globalenv = if (FALSE) 
[08:25:56.998]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:56.998]                     ...future.globalenv.names))
[08:25:56.998]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:56.998]         }, condition = base::local({
[08:25:56.998]             c <- base::c
[08:25:56.998]             inherits <- base::inherits
[08:25:56.998]             invokeRestart <- base::invokeRestart
[08:25:56.998]             length <- base::length
[08:25:56.998]             list <- base::list
[08:25:56.998]             seq.int <- base::seq.int
[08:25:56.998]             signalCondition <- base::signalCondition
[08:25:56.998]             sys.calls <- base::sys.calls
[08:25:56.998]             `[[` <- base::`[[`
[08:25:56.998]             `+` <- base::`+`
[08:25:56.998]             `<<-` <- base::`<<-`
[08:25:56.998]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:56.998]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:56.998]                   3L)]
[08:25:56.998]             }
[08:25:56.998]             function(cond) {
[08:25:56.998]                 is_error <- inherits(cond, "error")
[08:25:56.998]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:56.998]                   NULL)
[08:25:56.998]                 if (is_error) {
[08:25:56.998]                   sessionInformation <- function() {
[08:25:56.998]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:56.998]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:56.998]                       search = base::search(), system = base::Sys.info())
[08:25:56.998]                   }
[08:25:56.998]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.998]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:56.998]                     cond$call), session = sessionInformation(), 
[08:25:56.998]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:56.998]                   signalCondition(cond)
[08:25:56.998]                 }
[08:25:56.998]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:56.998]                 "immediateCondition"))) {
[08:25:56.998]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:56.998]                   ...future.conditions[[length(...future.conditions) + 
[08:25:56.998]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:56.998]                   if (TRUE && !signal) {
[08:25:56.998]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.998]                     {
[08:25:56.998]                       inherits <- base::inherits
[08:25:56.998]                       invokeRestart <- base::invokeRestart
[08:25:56.998]                       is.null <- base::is.null
[08:25:56.998]                       muffled <- FALSE
[08:25:56.998]                       if (inherits(cond, "message")) {
[08:25:56.998]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.998]                         if (muffled) 
[08:25:56.998]                           invokeRestart("muffleMessage")
[08:25:56.998]                       }
[08:25:56.998]                       else if (inherits(cond, "warning")) {
[08:25:56.998]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.998]                         if (muffled) 
[08:25:56.998]                           invokeRestart("muffleWarning")
[08:25:56.998]                       }
[08:25:56.998]                       else if (inherits(cond, "condition")) {
[08:25:56.998]                         if (!is.null(pattern)) {
[08:25:56.998]                           computeRestarts <- base::computeRestarts
[08:25:56.998]                           grepl <- base::grepl
[08:25:56.998]                           restarts <- computeRestarts(cond)
[08:25:56.998]                           for (restart in restarts) {
[08:25:56.998]                             name <- restart$name
[08:25:56.998]                             if (is.null(name)) 
[08:25:56.998]                               next
[08:25:56.998]                             if (!grepl(pattern, name)) 
[08:25:56.998]                               next
[08:25:56.998]                             invokeRestart(restart)
[08:25:56.998]                             muffled <- TRUE
[08:25:56.998]                             break
[08:25:56.998]                           }
[08:25:56.998]                         }
[08:25:56.998]                       }
[08:25:56.998]                       invisible(muffled)
[08:25:56.998]                     }
[08:25:56.998]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.998]                   }
[08:25:56.998]                 }
[08:25:56.998]                 else {
[08:25:56.998]                   if (TRUE) {
[08:25:56.998]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:56.998]                     {
[08:25:56.998]                       inherits <- base::inherits
[08:25:56.998]                       invokeRestart <- base::invokeRestart
[08:25:56.998]                       is.null <- base::is.null
[08:25:56.998]                       muffled <- FALSE
[08:25:56.998]                       if (inherits(cond, "message")) {
[08:25:56.998]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:56.998]                         if (muffled) 
[08:25:56.998]                           invokeRestart("muffleMessage")
[08:25:56.998]                       }
[08:25:56.998]                       else if (inherits(cond, "warning")) {
[08:25:56.998]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:56.998]                         if (muffled) 
[08:25:56.998]                           invokeRestart("muffleWarning")
[08:25:56.998]                       }
[08:25:56.998]                       else if (inherits(cond, "condition")) {
[08:25:56.998]                         if (!is.null(pattern)) {
[08:25:56.998]                           computeRestarts <- base::computeRestarts
[08:25:56.998]                           grepl <- base::grepl
[08:25:56.998]                           restarts <- computeRestarts(cond)
[08:25:56.998]                           for (restart in restarts) {
[08:25:56.998]                             name <- restart$name
[08:25:56.998]                             if (is.null(name)) 
[08:25:56.998]                               next
[08:25:56.998]                             if (!grepl(pattern, name)) 
[08:25:56.998]                               next
[08:25:56.998]                             invokeRestart(restart)
[08:25:56.998]                             muffled <- TRUE
[08:25:56.998]                             break
[08:25:56.998]                           }
[08:25:56.998]                         }
[08:25:56.998]                       }
[08:25:56.998]                       invisible(muffled)
[08:25:56.998]                     }
[08:25:56.998]                     muffleCondition(cond, pattern = "^muffle")
[08:25:56.998]                   }
[08:25:56.998]                 }
[08:25:56.998]             }
[08:25:56.998]         }))
[08:25:56.998]     }, error = function(ex) {
[08:25:56.998]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:56.998]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:56.998]                 ...future.rng), started = ...future.startTime, 
[08:25:56.998]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:56.998]             version = "1.8"), class = "FutureResult")
[08:25:56.998]     }, finally = {
[08:25:56.998]         if (!identical(...future.workdir, getwd())) 
[08:25:56.998]             setwd(...future.workdir)
[08:25:56.998]         {
[08:25:56.998]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:56.998]                 ...future.oldOptions$nwarnings <- NULL
[08:25:56.998]             }
[08:25:56.998]             base::options(...future.oldOptions)
[08:25:56.998]             if (.Platform$OS.type == "windows") {
[08:25:56.998]                 old_names <- names(...future.oldEnvVars)
[08:25:56.998]                 envs <- base::Sys.getenv()
[08:25:56.998]                 names <- names(envs)
[08:25:56.998]                 common <- intersect(names, old_names)
[08:25:56.998]                 added <- setdiff(names, old_names)
[08:25:56.998]                 removed <- setdiff(old_names, names)
[08:25:56.998]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:56.998]                   envs[common]]
[08:25:56.998]                 NAMES <- toupper(changed)
[08:25:56.998]                 args <- list()
[08:25:56.998]                 for (kk in seq_along(NAMES)) {
[08:25:56.998]                   name <- changed[[kk]]
[08:25:56.998]                   NAME <- NAMES[[kk]]
[08:25:56.998]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.998]                     next
[08:25:56.998]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.998]                 }
[08:25:56.998]                 NAMES <- toupper(added)
[08:25:56.998]                 for (kk in seq_along(NAMES)) {
[08:25:56.998]                   name <- added[[kk]]
[08:25:56.998]                   NAME <- NAMES[[kk]]
[08:25:56.998]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.998]                     next
[08:25:56.998]                   args[[name]] <- ""
[08:25:56.998]                 }
[08:25:56.998]                 NAMES <- toupper(removed)
[08:25:56.998]                 for (kk in seq_along(NAMES)) {
[08:25:56.998]                   name <- removed[[kk]]
[08:25:56.998]                   NAME <- NAMES[[kk]]
[08:25:56.998]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:56.998]                     next
[08:25:56.998]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:56.998]                 }
[08:25:56.998]                 if (length(args) > 0) 
[08:25:56.998]                   base::do.call(base::Sys.setenv, args = args)
[08:25:56.998]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:56.998]             }
[08:25:56.998]             else {
[08:25:56.998]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:56.998]             }
[08:25:56.998]             {
[08:25:56.998]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:56.998]                   0L) {
[08:25:56.998]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:56.998]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:56.998]                   base::options(opts)
[08:25:56.998]                 }
[08:25:56.998]                 {
[08:25:56.998]                   {
[08:25:56.998]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:56.998]                     NULL
[08:25:56.998]                   }
[08:25:56.998]                   options(future.plan = NULL)
[08:25:56.998]                   if (is.na(NA_character_)) 
[08:25:56.998]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:56.998]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:56.998]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:56.998]                     .init = FALSE)
[08:25:56.998]                 }
[08:25:56.998]             }
[08:25:56.998]         }
[08:25:56.998]     })
[08:25:56.998]     if (TRUE) {
[08:25:56.998]         base::sink(type = "output", split = FALSE)
[08:25:56.998]         if (TRUE) {
[08:25:56.998]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:56.998]         }
[08:25:56.998]         else {
[08:25:56.998]             ...future.result["stdout"] <- base::list(NULL)
[08:25:56.998]         }
[08:25:56.998]         base::close(...future.stdout)
[08:25:56.998]         ...future.stdout <- NULL
[08:25:56.998]     }
[08:25:56.998]     ...future.result$conditions <- ...future.conditions
[08:25:56.998]     ...future.result$finished <- base::Sys.time()
[08:25:56.998]     ...future.result
[08:25:56.998] }
[08:25:57.001] Exporting 7 global objects (1.37 KiB) to cluster node #2 ...
[08:25:57.001] Exporting ‘...future.FUN’ (179 bytes) to cluster node #2 ...
[08:25:57.002] Exporting ‘...future.FUN’ (179 bytes) to cluster node #2 ... DONE
[08:25:57.002] Exporting ‘foo’ (399 bytes) to cluster node #2 ...
[08:25:57.002] Exporting ‘foo’ (399 bytes) to cluster node #2 ... DONE
[08:25:57.002] Exporting ‘x’ (39 bytes) to cluster node #2 ...
[08:25:57.003] Exporting ‘x’ (39 bytes) to cluster node #2 ... DONE
[08:25:57.003] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:57.003] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:57.003] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[08:25:57.004] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[08:25:57.004] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[08:25:57.004] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[08:25:57.004] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:57.005] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:57.005] Exporting 7 global objects (1.37 KiB) to cluster node #2 ... DONE
[08:25:57.005] MultisessionFuture started
[08:25:57.006] - Launch lazy future ... done
[08:25:57.006] run() for ‘MultisessionFuture’ ... done
[08:25:57.006] Created future:
[08:25:57.006] MultisessionFuture:
[08:25:57.006] Label: ‘future_replicate-2’
[08:25:57.006] Expression:
[08:25:57.006] {
[08:25:57.006]     do.call(function(...) {
[08:25:57.006]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:57.006]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:57.006]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:57.006]             on.exit(options(oopts), add = TRUE)
[08:25:57.006]         }
[08:25:57.006]         {
[08:25:57.006]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:57.006]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:57.006]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[08:25:57.006]                   envir = globalenv(), inherits = FALSE)
[08:25:57.006]                 ...future.FUN(...future.X_jj, ...)
[08:25:57.006]             })
[08:25:57.006]         }
[08:25:57.006]     }, args = future.call.arguments)
[08:25:57.006] }
[08:25:57.006] Lazy evaluation: FALSE
[08:25:57.006] Asynchronous evaluation: TRUE
[08:25:57.006] Local evaluation: TRUE
[08:25:57.006] Environment: 0x55f7794d57b8
[08:25:57.006] Capture standard output: TRUE
[08:25:57.006] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:57.006] Globals: 7 objects totaling 947 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, ...)
[08:25:57.006] Packages: <none>
[08:25:57.006] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[08:25:57.006] Resolved: FALSE
[08:25:57.006] Value: <not collected>
[08:25:57.006] Conditions captured: <none>
[08:25:57.006] Early signaling: FALSE
[08:25:57.006] Owner process: 7174ebf5-0993-26dd-c6cc-50c79cc17ceb
[08:25:57.006] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:57.017] Chunk #2 of 2 ... DONE
[08:25:57.018] Launching 2 futures (chunks) ... DONE
[08:25:57.018] Resolving 2 futures (chunks) ...
[08:25:57.018] resolve() on list ...
[08:25:57.018]  recursive: 0
[08:25:57.018]  length: 2
[08:25:57.018] 
[08:25:57.018] receiveMessageFromWorker() for ClusterFuture ...
[08:25:57.019] - Validating connection of MultisessionFuture
[08:25:57.019] - received message: FutureResult
[08:25:57.019] - Received FutureResult
[08:25:57.019] - Erased future from FutureRegistry
[08:25:57.019] result() for ClusterFuture ...
[08:25:57.019] - result already collected: FutureResult
[08:25:57.019] result() for ClusterFuture ... done
[08:25:57.019] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:57.019] Future #1
[08:25:57.020] result() for ClusterFuture ...
[08:25:57.020] - result already collected: FutureResult
[08:25:57.020] result() for ClusterFuture ... done
[08:25:57.020] result() for ClusterFuture ...
[08:25:57.020] - result already collected: FutureResult
[08:25:57.020] result() for ClusterFuture ... done
[08:25:57.020] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:57.020] - nx: 2
[08:25:57.020] - relay: TRUE
[08:25:57.020] - stdout: TRUE
[08:25:57.020] - signal: TRUE
[08:25:57.020] - resignal: FALSE
[08:25:57.021] - force: TRUE
[08:25:57.021] - relayed: [n=2] FALSE, FALSE
[08:25:57.021] - queued futures: [n=2] FALSE, FALSE
[08:25:57.021]  - until=1
[08:25:57.021]  - relaying element #1
[08:25:57.021] result() for ClusterFuture ...
[08:25:57.021] - result already collected: FutureResult
[08:25:57.021] result() for ClusterFuture ... done
[08:25:57.021] result() for ClusterFuture ...
[08:25:57.021] - result already collected: FutureResult
[08:25:57.021] result() for ClusterFuture ... done
[08:25:57.021] result() for ClusterFuture ...
[08:25:57.022] - result already collected: FutureResult
[08:25:57.022] result() for ClusterFuture ... done
[08:25:57.022] result() for ClusterFuture ...
[08:25:57.022] - result already collected: FutureResult
[08:25:57.022] result() for ClusterFuture ... done
[08:25:57.022] - relayed: [n=2] TRUE, FALSE
[08:25:57.022] - queued futures: [n=2] TRUE, FALSE
[08:25:57.022] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:57.022]  length: 1 (resolved future 1)
[08:25:57.047] receiveMessageFromWorker() for ClusterFuture ...
[08:25:57.047] - Validating connection of MultisessionFuture
[08:25:57.048] - received message: FutureResult
[08:25:57.048] - Received FutureResult
[08:25:57.048] - Erased future from FutureRegistry
[08:25:57.048] result() for ClusterFuture ...
[08:25:57.048] - result already collected: FutureResult
[08:25:57.048] result() for ClusterFuture ... done
[08:25:57.048] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:57.048] Future #2
[08:25:57.048] result() for ClusterFuture ...
[08:25:57.049] - result already collected: FutureResult
[08:25:57.049] result() for ClusterFuture ... done
[08:25:57.049] result() for ClusterFuture ...
[08:25:57.049] - result already collected: FutureResult
[08:25:57.049] result() for ClusterFuture ... done
[08:25:57.049] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:57.049] - nx: 2
[08:25:57.049] - relay: TRUE
[08:25:57.049] - stdout: TRUE
[08:25:57.049] - signal: TRUE
[08:25:57.049] - resignal: FALSE
[08:25:57.049] - force: TRUE
[08:25:57.050] - relayed: [n=2] TRUE, FALSE
[08:25:57.050] - queued futures: [n=2] TRUE, FALSE
[08:25:57.050]  - until=2
[08:25:57.050]  - relaying element #2
[08:25:57.050] result() for ClusterFuture ...
[08:25:57.050] - result already collected: FutureResult
[08:25:57.050] result() for ClusterFuture ... done
[08:25:57.050] result() for ClusterFuture ...
[08:25:57.050] - result already collected: FutureResult
[08:25:57.050] result() for ClusterFuture ... done
[08:25:57.050] result() for ClusterFuture ...
[08:25:57.051] - result already collected: FutureResult
[08:25:57.051] result() for ClusterFuture ... done
[08:25:57.051] result() for ClusterFuture ...
[08:25:57.051] - result already collected: FutureResult
[08:25:57.051] result() for ClusterFuture ... done
[08:25:57.051] - relayed: [n=2] TRUE, TRUE
[08:25:57.051] - queued futures: [n=2] TRUE, TRUE
[08:25:57.051] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:57.051]  length: 0 (resolved future 2)
[08:25:57.051] Relaying remaining futures
[08:25:57.051] signalConditionsASAP(NULL, pos=0) ...
[08:25:57.052] - nx: 2
[08:25:57.052] - relay: TRUE
[08:25:57.052] - stdout: TRUE
[08:25:57.052] - signal: TRUE
[08:25:57.052] - resignal: FALSE
[08:25:57.052] - force: TRUE
[08:25:57.052] - relayed: [n=2] TRUE, TRUE
[08:25:57.052] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:57.052] - relayed: [n=2] TRUE, TRUE
[08:25:57.052] - queued futures: [n=2] TRUE, TRUE
[08:25:57.052] signalConditionsASAP(NULL, pos=0) ... done
[08:25:57.052] resolve() on list ... DONE
[08:25:57.053] result() for ClusterFuture ...
[08:25:57.053] - result already collected: FutureResult
[08:25:57.053] result() for ClusterFuture ... done
[08:25:57.053] result() for ClusterFuture ...
[08:25:57.053] - result already collected: FutureResult
[08:25:57.053] result() for ClusterFuture ... done
[08:25:57.053] result() for ClusterFuture ...
[08:25:57.053] - result already collected: FutureResult
[08:25:57.053] result() for ClusterFuture ... done
[08:25:57.053] result() for ClusterFuture ...
[08:25:57.053] - result already collected: FutureResult
[08:25:57.054] result() for ClusterFuture ... done
[08:25:57.054]  - Number of value chunks collected: 2
[08:25:57.054] Resolving 2 futures (chunks) ... DONE
[08:25:57.054] Reducing values from 2 chunks ...
[08:25:57.054]  - Number of values collected after concatenation: 5
[08:25:57.054]  - Number of values expected: 5
[08:25:57.054] Reducing values from 2 chunks ... DONE
[08:25:57.054] future_lapply() ... DONE
[08:25:57.055] plan(): Setting new future strategy stack:
[08:25:57.055] List of future strategies:
[08:25:57.055] 1. sequential:
[08:25:57.055]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:57.055]    - tweaked: FALSE
[08:25:57.055]    - call: plan(sequential)
[08:25:57.056] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[08:25:57.057] plan(): Setting new future strategy stack:
[08:25:57.057] List of future strategies:
[08:25:57.057] 1. FutureStrategy:
[08:25:57.057]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:57.057]    - tweaked: FALSE
[08:25:57.057]    - call: future::plan(oplan)
[08:25:57.057] plan(): nbrOfWorkers() = 1
> 
