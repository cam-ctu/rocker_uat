
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:59:37.783] plan(): Setting new future strategy stack:
[10:59:37.783] List of future strategies:
[10:59:37.783] 1. sequential:
[10:59:37.783]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.783]    - tweaked: FALSE
[10:59:37.783]    - call: future::plan("sequential")
[10:59:37.796] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[10:59:37.826] plan(): Setting new future strategy stack:
[10:59:37.826] List of future strategies:
[10:59:37.826] 1. sequential:
[10:59:37.826]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.826]    - tweaked: FALSE
[10:59:37.826]    - call: plan(strategy)
[10:59:37.838] plan(): nbrOfWorkers() = 1
[10:59:37.839] future_lapply() ...
[10:59:37.842] Generating random seeds ...
[10:59:37.842] Generating random seed streams for 5 elements ...
[10:59:37.842] Generating random seed streams for 5 elements ... DONE
[10:59:37.842] Generating random seeds ... DONE
[10:59:37.842] Will set RNG state on exit: 10403, 8, -1620955929, -1890467523, -51694156, 399272474, -1604906651, -2039513089, -2054564218, -897241584, 440399027, 1474465617, 508797696, -756467234, 1326998057, -1399582245, 220364522, -321598324, 2008953807, 1119734661, -366106564, -1537103598, -1008173555, 1430678855, -1787140306, 1828821640, -452129909, -181810327, 115836216, 307169254, -657760383, -1490569453, -237444926, -763954316, 248809335, 128901229, -261341436, 322436650, 2058466197, 1222383663, -2095763146, -759508640, -1569984605, 1810831553, 2134493360, -1484302386, 1377913657, 587121483, -1454720774, 1583899132, 713589311, -1227897067, -1937705940, -1048523518, -1630050851, -936438569, -1084596290, -810632712, 1682931163, 1977619513, 1554257288, 107577654, 160430961, 508459427, 447202546, -184485820, 1578654471, 587545309, -1481890860, -1617632518, 128529989, 1506315935, -1772833754, 1595138224, 253598035, -1095859087, 1312045472, -1431046850, -241200055, -351887109, -1358051126, 1334939180, 1767420463, 1943382757, 834056092, -79574542, 92972141, 1575830951, 1156984782, 611790120, 443961131, 2011968841, -2008221096, -1508166906, -2038079775, 785218163, -600669470, 2003590740, 1363076951, 1817598797, -1451528476, 172076746, -936677579, 933971343, -944004458, -190531008, 1820625667, 116939553, 442276880, -1106801682, 786701209, 11912235, -516497126, -275885092, -1337141793, -6692427, -2057556148, 1676658082, -668089091, 492308983, -21280994, -847169064, 341594939, 1010767065, -722773912, -1084707434, -300190447, -877283645, -126806318, 850677604, 2043097767, -749904899, 681725428, 1513622234, -777843675, 666476863, -823650618, 1971387216, -1514495117, 1162630545, -568461376, 1189822878, 1689922409, -1085136997, -666294614, 2047922380, 1641009551, -1879693883, -1752831620, -1513383470, 873694541, -1708189689, 388085742, -672874808, -1932447285, -582630359, -2132331912, 1173766054, -1837860415, 762973779, 1737491714, 1730405428, -1851640393, 345086381, -2049340, 1201561322, -1088147115, -2117687569, 82613494, -1930124256, 519067107, -487602559, 174158064, 1693216654, 1016062201, -331543925, -1815475526, -1945967172, -782250241, 1290355285, -242977428, -123241022, -709198307, 957613719, 753864702, -2130199624, -745244773, 2067480057, 1893301576, 299874422, -1200290383, -1184691229, -1458808654, -639666940, -469838265, -929857251, -566489196, -2030079174, -1470251131, -1782199201, 1269204710, -187355792, 919475859, 1979125553, -1587391008, -627871106, -670465783, -1680415941, 1495112458, 827437804, 792883055, 1606135973, 1901492828, -1054459342, -552308435, 2027780071, -1990762738, -1478749976, 1683063531, 292047753, 1128838936, -1338951098, -651248991, -1258865357, -1662983006, -1207432300, -2024558057, 1871853069, 444601124, 482604344, -1817224486, 609687440, 197628668, 859856788, -1076225982, 147115264, -1169003460, -1881178800, 234416290, -1593538744, -79423732, -806225188, -65682606, -1241169280, -96819116, -1301595160, 1515714298, 1695852880, -1713028308, 930248564, 2127885202, 960353888, 434880396, 341926752, -86407198, -600543320, 113499340, 1993690620, -1054651470, 1201875440, -991835708, -527781544, 1002055034, 1188983216, 1696812988, -1365913516, 778044354, 2011685920, -1128076100, 875227728, 1519046626, -139692440, -2063250868, -803553028, 2145382386, 1607286016, 250451828, -858562552, -1256688198, 1878244816, -1685060628, 1329209236, -1647555630, 1471788896, -884886196, -1635672800, 1038390146, -1410561304, 2113664236, -1969669572, 972659570, -1002878352, -2015836124, -421300424, 1223277722, 1260696272, -457563972, -1741379948, 1641113218, 1794727104, 1007677756, -1912668016, -1726260702, -1334004216, -1685024500, 554230428, -1291043310, 1601793408, 1419439636, -328800728, 1975063866, -1039341616, -70925716, -177191116, 624718482, -1955235488, 727441740, -1160101920, 1898934178, 1639774120, -203334772, 1725126332, 1450679154, 1227753712, 445732932, -87360168, 2139587642, 1454121840, 885490748, 498547476, 1886489026, 743543008, -1240856708, -146166064, 1395533474, -1645149144, -398817012, -586259524, 612363570, 1529642944, -2140868044, 1111493576, -445872966, 770060176, 753231340, 886120532, 1815096978, 1719622432, -821142068, -1247228960, 734515906, 1468197416, -1339547988, 2122363580, -1809038862, 913361200, 1858469028, -534629704, -1839363238, -199463536, 863953276, 1539546388, 296970562, 212681472, 43826108, 1835395920, 2145378594, 1513262408, 1855043596, -552937380, -1816537902, 1009575936, 77556564, -1712287256, -297039878, 114968272, -602204884, -583206668, -1197787246, -295654304, -1813615348, 990971616, -264958622, 1060799144, 743926348, 369387388, 1167797042, -301371792, 797039940, 1760046040, 845463674, 657970736, 1023630012, 1264998228, -1452049854, -278439008, -324781892, -756698672, -1739176606, -447880216, 1885677516, -681875716, -1278832654, 1835580544, -1604040460, 974787720, 1844983098, 2112914256, -1280922516, 1970958484, 215304530, -1720099104, -1351311156, 1821972640, 1707891074, -379488024, 1843914988, 1152903228, -1635819406, 1590519920, -1423580636, 427934264, -1772553702, 1040408784, -2125789636, 992742548, -567425918, -2001639488, -521994948, -111735152, 1424286754, 312266760, -2021614452, 973836316, -397167470, -554242944, 1703592980, -108395736, 1518818362, -2053051184, -1544792980, 1410328244, 1632038930, 1060618208, -183489588, -1695998496, 2066799650, -636476120, -2066704116, 828542524, -2044660494, 1881409776, -1443969212, 1163104344, 1213006394, -1273874192, 1736099982, 864633531, 1979341469, -1821213110, 1845331048, 954358865, 380249923, 161686084, -719744782, -334504761, -2112764271, 1283069974, -2035555724, 202585349, -695293105, 2005574984, -2059577114, -719565293, 1717203317, 2141979986, 8930720, -1658899319, 1247655099, -1393801460, 1126706842, 1332876303, -156544935, -1468195602, 654808956, 1297777645, 551529623, 1796044640, -1218580674, -954904565, 1959778445, -1697488454, -279220232, -962622559, 1047618899, 910285940, 1214557698, -1946902377, -2019872159, 1924336294, -2125180252, -1922631851, 1955052543, -1385354600, -1744646218, 763667523, 1108671877, 39806498, 366157072, 1627344057, 1415803243, 704847964, -1550135926, -967960193, -653114167, -1336870562, -541853172, -2130467, -321510169, 2113808, -1780899794, -1950263589, 1610985405, 683837738, -1386029624, -1388731663, 900721763, -1795032988, -1951730798, 591353959, -770971599, 1157658998, 1261176468, 1763937445, 482202031, -1277539736, -1324436922, -2114807821, -1736693931, 1146657074, -604705536, -618648087, -1058621349, -1257248084, -1395026758, -1814423953, 1463714809, 1348053646, 1384721244, -842790963, 1420683063, -972884544, -1044030818, -1738845333, 374049517, -881590438, 2062955544, -493776511, 1848305459, 1455758676, -1530898590, -1426428937, -628059071, 485277894, -632852988, -1516435019, 1969944223, 901289720, 1258707670, 1827622755, 1645311781, -2069500734, 795347376, -1317830183, 1177030475, 1067836860, -771320342, -843140577, 1916065961, 1289179198, 55484716, 95882109, 720814535, -1727138640, -1834753330, 313186299, -1989336995, -401741942, 1622796200, -592442095, 930976771, -1010934012, 2046014258, -1852534393, 1756583889, -1825056426, -852633804, 516356677, 691472015, -1667395576, -10013658, 938085587, 492654133, 711550354, -598836896, 457818313, -1819159557, 395826124, 1993764442, 2022175567, 136088089, -708237266, 1677059644, -1415095379, -850865065, -1162583648, 441809662, -1531799093, 402513869, -96259334, 1082714424, 1547580129, -716860013, 354827700, -2101166398, 250602446
[10:59:37.843] Number of chunks: 1
[10:59:37.843] getGlobalsAndPackagesXApply() ...
[10:59:37.843]  - future.globals: TRUE
[10:59:37.844] getGlobalsAndPackages() ...
[10:59:37.844] Searching for globals...
[10:59:37.846] - globals found: [2] ‘FUN’, ‘sample’
[10:59:37.846] Searching for globals ... DONE
[10:59:37.846] Resolving globals: FALSE
[10:59:37.847] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:37.847] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:37.847] - globals: [1] ‘FUN’
[10:59:37.847] 
[10:59:37.847] getGlobalsAndPackages() ... DONE
[10:59:37.848]  - globals found/used: [n=1] ‘FUN’
[10:59:37.848]  - needed namespaces: [n=0] 
[10:59:37.848] Finding globals ... DONE
[10:59:37.848]  - use_args: TRUE
[10:59:37.848]  - Getting '...' globals ...
[10:59:37.849] resolve() on list ...
[10:59:37.849]  recursive: 0
[10:59:37.849]  length: 1
[10:59:37.849]  elements: ‘...’
[10:59:37.849]  length: 0 (resolved future 1)
[10:59:37.849] resolve() on list ... DONE
[10:59:37.849]    - '...' content: [n=0] 
[10:59:37.849] List of 1
[10:59:37.849]  $ ...: list()
[10:59:37.849]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.849]  - attr(*, "where")=List of 1
[10:59:37.849]   ..$ ...:<environment: 0x56262e1bba30> 
[10:59:37.849]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.849]  - attr(*, "resolved")= logi TRUE
[10:59:37.849]  - attr(*, "total_size")= num NA
[10:59:37.853]  - Getting '...' globals ... DONE
[10:59:37.854] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:37.854] List of 2
[10:59:37.854]  $ ...future.FUN:function (...)  
[10:59:37.854]  $ ...          : list()
[10:59:37.854]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.854]  - attr(*, "where")=List of 2
[10:59:37.854]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:37.854]   ..$ ...          :<environment: 0x56262e1bba30> 
[10:59:37.854]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.854]  - attr(*, "resolved")= logi FALSE
[10:59:37.854]  - attr(*, "total_size")= num 7184
[10:59:37.856] Packages to be attached in all futures: [n=0] 
[10:59:37.856] getGlobalsAndPackagesXApply() ... DONE
[10:59:37.857] Number of futures (= number of chunks): 1
[10:59:37.857] Launching 1 futures (chunks) ...
[10:59:37.857] Chunk #1 of 1 ...
[10:59:37.857]  - Finding globals in 'X' for chunk #1 ...
[10:59:37.857] getGlobalsAndPackages() ...
[10:59:37.857] Searching for globals...
[10:59:37.857] 
[10:59:37.857] Searching for globals ... DONE
[10:59:37.858] - globals: [0] <none>
[10:59:37.858] getGlobalsAndPackages() ... DONE
[10:59:37.859]    + additional globals found: [n=0] 
[10:59:37.859]    + additional namespaces needed: [n=0] 
[10:59:37.859]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:37.859]  - seeds: [5] <seeds>
[10:59:37.860]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.860] getGlobalsAndPackages() ...
[10:59:37.860] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.860] Resolving globals: FALSE
[10:59:37.860] Tweak future expression to call with '...' arguments ...
[10:59:37.860] {
[10:59:37.860]     do.call(function(...) {
[10:59:37.860]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.860]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:37.860]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.860]             on.exit(options(oopts), add = TRUE)
[10:59:37.860]         }
[10:59:37.860]         {
[10:59:37.860]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:37.860]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.860]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.860]                   envir = globalenv(), inherits = FALSE)
[10:59:37.860]                 ...future.FUN(...future.X_jj, ...)
[10:59:37.860]             })
[10:59:37.860]         }
[10:59:37.860]     }, args = future.call.arguments)
[10:59:37.860] }
[10:59:37.860] Tweak future expression to call with '...' arguments ... DONE
[10:59:37.861] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.861] 
[10:59:37.861] getGlobalsAndPackages() ... DONE
[10:59:37.862] run() for ‘Future’ ...
[10:59:37.862] - state: ‘created’
[10:59:37.862] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:59:37.862] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:37.862] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:59:37.862]   - Field: ‘label’
[10:59:37.862]   - Field: ‘local’
[10:59:37.863]   - Field: ‘owner’
[10:59:37.863]   - Field: ‘envir’
[10:59:37.863]   - Field: ‘packages’
[10:59:37.863]   - Field: ‘gc’
[10:59:37.863]   - Field: ‘conditions’
[10:59:37.863]   - Field: ‘expr’
[10:59:37.863]   - Field: ‘uuid’
[10:59:37.863]   - Field: ‘seed’
[10:59:37.863]   - Field: ‘version’
[10:59:37.863]   - Field: ‘result’
[10:59:37.863]   - Field: ‘asynchronous’
[10:59:37.863]   - Field: ‘calls’
[10:59:37.863]   - Field: ‘globals’
[10:59:37.864]   - Field: ‘stdout’
[10:59:37.864]   - Field: ‘earlySignal’
[10:59:37.864]   - Field: ‘lazy’
[10:59:37.864]   - Field: ‘state’
[10:59:37.864] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:59:37.864] - Launch lazy future ...
[10:59:37.865] Packages needed by the future expression (n = 0): <none>
[10:59:37.865] Packages needed by future strategies (n = 0): <none>
[10:59:37.865] {
[10:59:37.865]     {
[10:59:37.865]         {
[10:59:37.865]             ...future.startTime <- base::Sys.time()
[10:59:37.865]             {
[10:59:37.865]                 {
[10:59:37.865]                   {
[10:59:37.865]                     base::local({
[10:59:37.865]                       has_future <- base::requireNamespace("future", 
[10:59:37.865]                         quietly = TRUE)
[10:59:37.865]                       if (has_future) {
[10:59:37.865]                         ns <- base::getNamespace("future")
[10:59:37.865]                         version <- ns[[".package"]][["version"]]
[10:59:37.865]                         if (is.null(version)) 
[10:59:37.865]                           version <- utils::packageVersion("future")
[10:59:37.865]                       }
[10:59:37.865]                       else {
[10:59:37.865]                         version <- NULL
[10:59:37.865]                       }
[10:59:37.865]                       if (!has_future || version < "1.8.0") {
[10:59:37.865]                         info <- base::c(r_version = base::gsub("R version ", 
[10:59:37.865]                           "", base::R.version$version.string), 
[10:59:37.865]                           platform = base::sprintf("%s (%s-bit)", 
[10:59:37.865]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:37.865]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:37.865]                             "release", "version")], collapse = " "), 
[10:59:37.865]                           hostname = base::Sys.info()[["nodename"]])
[10:59:37.865]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:59:37.865]                           info)
[10:59:37.865]                         info <- base::paste(info, collapse = "; ")
[10:59:37.865]                         if (!has_future) {
[10:59:37.865]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:37.865]                             info)
[10:59:37.865]                         }
[10:59:37.865]                         else {
[10:59:37.865]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:37.865]                             info, version)
[10:59:37.865]                         }
[10:59:37.865]                         base::stop(msg)
[10:59:37.865]                       }
[10:59:37.865]                     })
[10:59:37.865]                   }
[10:59:37.865]                   ...future.strategy.old <- future::plan("list")
[10:59:37.865]                   options(future.plan = NULL)
[10:59:37.865]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:37.865]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:37.865]                 }
[10:59:37.865]                 ...future.workdir <- getwd()
[10:59:37.865]             }
[10:59:37.865]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:37.865]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:37.865]         }
[10:59:37.865]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:37.865]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:59:37.865]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:37.865]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:37.865]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:37.865]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:37.865]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:37.865]             base::names(...future.oldOptions))
[10:59:37.865]     }
[10:59:37.865]     if (FALSE) {
[10:59:37.865]     }
[10:59:37.865]     else {
[10:59:37.865]         if (TRUE) {
[10:59:37.865]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:37.865]                 open = "w")
[10:59:37.865]         }
[10:59:37.865]         else {
[10:59:37.865]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:37.865]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:37.865]         }
[10:59:37.865]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:37.865]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:37.865]             base::sink(type = "output", split = FALSE)
[10:59:37.865]             base::close(...future.stdout)
[10:59:37.865]         }, add = TRUE)
[10:59:37.865]     }
[10:59:37.865]     ...future.frame <- base::sys.nframe()
[10:59:37.865]     ...future.conditions <- base::list()
[10:59:37.865]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:37.865]     if (FALSE) {
[10:59:37.865]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:37.865]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:37.865]     }
[10:59:37.865]     ...future.result <- base::tryCatch({
[10:59:37.865]         base::withCallingHandlers({
[10:59:37.865]             ...future.value <- base::withVisible(base::local({
[10:59:37.865]                 do.call(function(...) {
[10:59:37.865]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.865]                   if (!identical(...future.globals.maxSize.org, 
[10:59:37.865]                     ...future.globals.maxSize)) {
[10:59:37.865]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.865]                     on.exit(options(oopts), add = TRUE)
[10:59:37.865]                   }
[10:59:37.865]                   {
[10:59:37.865]                     lapply(seq_along(...future.elements_ii), 
[10:59:37.865]                       FUN = function(jj) {
[10:59:37.865]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.865]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.865]                           envir = globalenv(), inherits = FALSE)
[10:59:37.865]                         ...future.FUN(...future.X_jj, ...)
[10:59:37.865]                       })
[10:59:37.865]                   }
[10:59:37.865]                 }, args = future.call.arguments)
[10:59:37.865]             }))
[10:59:37.865]             future::FutureResult(value = ...future.value$value, 
[10:59:37.865]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:37.865]                   ...future.rng), globalenv = if (FALSE) 
[10:59:37.865]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:37.865]                     ...future.globalenv.names))
[10:59:37.865]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:37.865]         }, condition = base::local({
[10:59:37.865]             c <- base::c
[10:59:37.865]             inherits <- base::inherits
[10:59:37.865]             invokeRestart <- base::invokeRestart
[10:59:37.865]             length <- base::length
[10:59:37.865]             list <- base::list
[10:59:37.865]             seq.int <- base::seq.int
[10:59:37.865]             signalCondition <- base::signalCondition
[10:59:37.865]             sys.calls <- base::sys.calls
[10:59:37.865]             `[[` <- base::`[[`
[10:59:37.865]             `+` <- base::`+`
[10:59:37.865]             `<<-` <- base::`<<-`
[10:59:37.865]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:37.865]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:37.865]                   3L)]
[10:59:37.865]             }
[10:59:37.865]             function(cond) {
[10:59:37.865]                 is_error <- inherits(cond, "error")
[10:59:37.865]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:37.865]                   NULL)
[10:59:37.865]                 if (is_error) {
[10:59:37.865]                   sessionInformation <- function() {
[10:59:37.865]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:37.865]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:37.865]                       search = base::search(), system = base::Sys.info())
[10:59:37.865]                   }
[10:59:37.865]                   ...future.conditions[[length(...future.conditions) + 
[10:59:37.865]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:37.865]                     cond$call), session = sessionInformation(), 
[10:59:37.865]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:37.865]                   signalCondition(cond)
[10:59:37.865]                 }
[10:59:37.865]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:37.865]                 "immediateCondition"))) {
[10:59:37.865]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:37.865]                   ...future.conditions[[length(...future.conditions) + 
[10:59:37.865]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:37.865]                   if (TRUE && !signal) {
[10:59:37.865]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:37.865]                     {
[10:59:37.865]                       inherits <- base::inherits
[10:59:37.865]                       invokeRestart <- base::invokeRestart
[10:59:37.865]                       is.null <- base::is.null
[10:59:37.865]                       muffled <- FALSE
[10:59:37.865]                       if (inherits(cond, "message")) {
[10:59:37.865]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:37.865]                         if (muffled) 
[10:59:37.865]                           invokeRestart("muffleMessage")
[10:59:37.865]                       }
[10:59:37.865]                       else if (inherits(cond, "warning")) {
[10:59:37.865]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:37.865]                         if (muffled) 
[10:59:37.865]                           invokeRestart("muffleWarning")
[10:59:37.865]                       }
[10:59:37.865]                       else if (inherits(cond, "condition")) {
[10:59:37.865]                         if (!is.null(pattern)) {
[10:59:37.865]                           computeRestarts <- base::computeRestarts
[10:59:37.865]                           grepl <- base::grepl
[10:59:37.865]                           restarts <- computeRestarts(cond)
[10:59:37.865]                           for (restart in restarts) {
[10:59:37.865]                             name <- restart$name
[10:59:37.865]                             if (is.null(name)) 
[10:59:37.865]                               next
[10:59:37.865]                             if (!grepl(pattern, name)) 
[10:59:37.865]                               next
[10:59:37.865]                             invokeRestart(restart)
[10:59:37.865]                             muffled <- TRUE
[10:59:37.865]                             break
[10:59:37.865]                           }
[10:59:37.865]                         }
[10:59:37.865]                       }
[10:59:37.865]                       invisible(muffled)
[10:59:37.865]                     }
[10:59:37.865]                     muffleCondition(cond, pattern = "^muffle")
[10:59:37.865]                   }
[10:59:37.865]                 }
[10:59:37.865]                 else {
[10:59:37.865]                   if (TRUE) {
[10:59:37.865]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:37.865]                     {
[10:59:37.865]                       inherits <- base::inherits
[10:59:37.865]                       invokeRestart <- base::invokeRestart
[10:59:37.865]                       is.null <- base::is.null
[10:59:37.865]                       muffled <- FALSE
[10:59:37.865]                       if (inherits(cond, "message")) {
[10:59:37.865]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:37.865]                         if (muffled) 
[10:59:37.865]                           invokeRestart("muffleMessage")
[10:59:37.865]                       }
[10:59:37.865]                       else if (inherits(cond, "warning")) {
[10:59:37.865]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:37.865]                         if (muffled) 
[10:59:37.865]                           invokeRestart("muffleWarning")
[10:59:37.865]                       }
[10:59:37.865]                       else if (inherits(cond, "condition")) {
[10:59:37.865]                         if (!is.null(pattern)) {
[10:59:37.865]                           computeRestarts <- base::computeRestarts
[10:59:37.865]                           grepl <- base::grepl
[10:59:37.865]                           restarts <- computeRestarts(cond)
[10:59:37.865]                           for (restart in restarts) {
[10:59:37.865]                             name <- restart$name
[10:59:37.865]                             if (is.null(name)) 
[10:59:37.865]                               next
[10:59:37.865]                             if (!grepl(pattern, name)) 
[10:59:37.865]                               next
[10:59:37.865]                             invokeRestart(restart)
[10:59:37.865]                             muffled <- TRUE
[10:59:37.865]                             break
[10:59:37.865]                           }
[10:59:37.865]                         }
[10:59:37.865]                       }
[10:59:37.865]                       invisible(muffled)
[10:59:37.865]                     }
[10:59:37.865]                     muffleCondition(cond, pattern = "^muffle")
[10:59:37.865]                   }
[10:59:37.865]                 }
[10:59:37.865]             }
[10:59:37.865]         }))
[10:59:37.865]     }, error = function(ex) {
[10:59:37.865]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:37.865]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:37.865]                 ...future.rng), started = ...future.startTime, 
[10:59:37.865]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:37.865]             version = "1.8"), class = "FutureResult")
[10:59:37.865]     }, finally = {
[10:59:37.865]         if (!identical(...future.workdir, getwd())) 
[10:59:37.865]             setwd(...future.workdir)
[10:59:37.865]         {
[10:59:37.865]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:37.865]                 ...future.oldOptions$nwarnings <- NULL
[10:59:37.865]             }
[10:59:37.865]             base::options(...future.oldOptions)
[10:59:37.865]             if (.Platform$OS.type == "windows") {
[10:59:37.865]                 old_names <- names(...future.oldEnvVars)
[10:59:37.865]                 envs <- base::Sys.getenv()
[10:59:37.865]                 names <- names(envs)
[10:59:37.865]                 common <- intersect(names, old_names)
[10:59:37.865]                 added <- setdiff(names, old_names)
[10:59:37.865]                 removed <- setdiff(old_names, names)
[10:59:37.865]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:37.865]                   envs[common]]
[10:59:37.865]                 NAMES <- toupper(changed)
[10:59:37.865]                 args <- list()
[10:59:37.865]                 for (kk in seq_along(NAMES)) {
[10:59:37.865]                   name <- changed[[kk]]
[10:59:37.865]                   NAME <- NAMES[[kk]]
[10:59:37.865]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.865]                     next
[10:59:37.865]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:37.865]                 }
[10:59:37.865]                 NAMES <- toupper(added)
[10:59:37.865]                 for (kk in seq_along(NAMES)) {
[10:59:37.865]                   name <- added[[kk]]
[10:59:37.865]                   NAME <- NAMES[[kk]]
[10:59:37.865]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.865]                     next
[10:59:37.865]                   args[[name]] <- ""
[10:59:37.865]                 }
[10:59:37.865]                 NAMES <- toupper(removed)
[10:59:37.865]                 for (kk in seq_along(NAMES)) {
[10:59:37.865]                   name <- removed[[kk]]
[10:59:37.865]                   NAME <- NAMES[[kk]]
[10:59:37.865]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.865]                     next
[10:59:37.865]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:37.865]                 }
[10:59:37.865]                 if (length(args) > 0) 
[10:59:37.865]                   base::do.call(base::Sys.setenv, args = args)
[10:59:37.865]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:37.865]             }
[10:59:37.865]             else {
[10:59:37.865]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:37.865]             }
[10:59:37.865]             {
[10:59:37.865]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:37.865]                   0L) {
[10:59:37.865]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:37.865]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:37.865]                   base::options(opts)
[10:59:37.865]                 }
[10:59:37.865]                 {
[10:59:37.865]                   {
[10:59:37.865]                     base::assign(".Random.seed", c(10403L, 8L, 
[10:59:37.865]                     -1620955929L, -1890467523L, -51694156L, 399272474L, 
[10:59:37.865]                     -1604906651L, -2039513089L, -2054564218L, 
[10:59:37.865]                     -897241584L, 440399027L, 1474465617L, 508797696L, 
[10:59:37.865]                     -756467234L, 1326998057L, -1399582245L, 220364522L, 
[10:59:37.865]                     -321598324L, 2008953807L, 1119734661L, -366106564L, 
[10:59:37.865]                     -1537103598L, -1008173555L, 1430678855L, 
[10:59:37.865]                     -1787140306L, 1828821640L, -452129909L, -181810327L, 
[10:59:37.865]                     115836216L, 307169254L, -657760383L, -1490569453L, 
[10:59:37.865]                     -237444926L, -763954316L, 248809335L, 128901229L, 
[10:59:37.865]                     -261341436L, 322436650L, 2058466197L, 1222383663L, 
[10:59:37.865]                     -2095763146L, -759508640L, -1569984605L, 
[10:59:37.865]                     1810831553L, 2134493360L, -1484302386L, 1377913657L, 
[10:59:37.865]                     587121483L, -1454720774L, 1583899132L, 713589311L, 
[10:59:37.865]                     -1227897067L, -1937705940L, -1048523518L, 
[10:59:37.865]                     -1630050851L, -936438569L, -1084596290L, 
[10:59:37.865]                     -810632712L, 1682931163L, 1977619513L, 1554257288L, 
[10:59:37.865]                     107577654L, 160430961L, 508459427L, 447202546L, 
[10:59:37.865]                     -184485820L, 1578654471L, 587545309L, -1481890860L, 
[10:59:37.865]                     -1617632518L, 128529989L, 1506315935L, -1772833754L, 
[10:59:37.865]                     1595138224L, 253598035L, -1095859087L, 1312045472L, 
[10:59:37.865]                     -1431046850L, -241200055L, -351887109L, -1358051126L, 
[10:59:37.865]                     1334939180L, 1767420463L, 1943382757L, 834056092L, 
[10:59:37.865]                     -79574542L, 92972141L, 1575830951L, 1156984782L, 
[10:59:37.865]                     611790120L, 443961131L, 2011968841L, -2008221096L, 
[10:59:37.865]                     -1508166906L, -2038079775L, 785218163L, -600669470L, 
[10:59:37.865]                     2003590740L, 1363076951L, 1817598797L, -1451528476L, 
[10:59:37.865]                     172076746L, -936677579L, 933971343L, -944004458L, 
[10:59:37.865]                     -190531008L, 1820625667L, 116939553L, 442276880L, 
[10:59:37.865]                     -1106801682L, 786701209L, 11912235L, -516497126L, 
[10:59:37.865]                     -275885092L, -1337141793L, -6692427L, -2057556148L, 
[10:59:37.865]                     1676658082L, -668089091L, 492308983L, -21280994L, 
[10:59:37.865]                     -847169064L, 341594939L, 1010767065L, -722773912L, 
[10:59:37.865]                     -1084707434L, -300190447L, -877283645L, -126806318L, 
[10:59:37.865]                     850677604L, 2043097767L, -749904899L, 681725428L, 
[10:59:37.865]                     1513622234L, -777843675L, 666476863L, -823650618L, 
[10:59:37.865]                     1971387216L, -1514495117L, 1162630545L, -568461376L, 
[10:59:37.865]                     1189822878L, 1689922409L, -1085136997L, -666294614L, 
[10:59:37.865]                     2047922380L, 1641009551L, -1879693883L, -1752831620L, 
[10:59:37.865]                     -1513383470L, 873694541L, -1708189689L, 388085742L, 
[10:59:37.865]                     -672874808L, -1932447285L, -582630359L, -2132331912L, 
[10:59:37.865]                     1173766054L, -1837860415L, 762973779L, 1737491714L, 
[10:59:37.865]                     1730405428L, -1851640393L, 345086381L, -2049340L, 
[10:59:37.865]                     1201561322L, -1088147115L, -2117687569L, 
[10:59:37.865]                     82613494L, -1930124256L, 519067107L, -487602559L, 
[10:59:37.865]                     174158064L, 1693216654L, 1016062201L, -331543925L, 
[10:59:37.865]                     -1815475526L, -1945967172L, -782250241L, 
[10:59:37.865]                     1290355285L, -242977428L, -123241022L, -709198307L, 
[10:59:37.865]                     957613719L, 753864702L, -2130199624L, -745244773L, 
[10:59:37.865]                     2067480057L, 1893301576L, 299874422L, -1200290383L, 
[10:59:37.865]                     -1184691229L, -1458808654L, -639666940L, 
[10:59:37.865]                     -469838265L, -929857251L, -566489196L, -2030079174L, 
[10:59:37.865]                     -1470251131L, -1782199201L, 1269204710L, 
[10:59:37.865]                     -187355792L, 919475859L, 1979125553L, -1587391008L, 
[10:59:37.865]                     -627871106L, -670465783L, -1680415941L, 1495112458L, 
[10:59:37.865]                     827437804L, 792883055L, 1606135973L, 1901492828L, 
[10:59:37.865]                     -1054459342L, -552308435L, 2027780071L, -1990762738L, 
[10:59:37.865]                     -1478749976L, 1683063531L, 292047753L, 1128838936L, 
[10:59:37.865]                     -1338951098L, -651248991L, -1258865357L, 
[10:59:37.865]                     -1662983006L, -1207432300L, -2024558057L, 
[10:59:37.865]                     1871853069L, 444601124L, 482604344L, -1817224486L, 
[10:59:37.865]                     609687440L, 197628668L, 859856788L, -1076225982L, 
[10:59:37.865]                     147115264L, -1169003460L, -1881178800L, 234416290L, 
[10:59:37.865]                     -1593538744L, -79423732L, -806225188L, -65682606L, 
[10:59:37.865]                     -1241169280L, -96819116L, -1301595160L, 1515714298L, 
[10:59:37.865]                     1695852880L, -1713028308L, 930248564L, 2127885202L, 
[10:59:37.865]                     960353888L, 434880396L, 341926752L, -86407198L, 
[10:59:37.865]                     -600543320L, 113499340L, 1993690620L, -1054651470L, 
[10:59:37.865]                     1201875440L, -991835708L, -527781544L, 1002055034L, 
[10:59:37.865]                     1188983216L, 1696812988L, -1365913516L, 778044354L, 
[10:59:37.865]                     2011685920L, -1128076100L, 875227728L, 1519046626L, 
[10:59:37.865]                     -139692440L, -2063250868L, -803553028L, 2145382386L, 
[10:59:37.865]                     1607286016L, 250451828L, -858562552L, -1256688198L, 
[10:59:37.865]                     1878244816L, -1685060628L, 1329209236L, -1647555630L, 
[10:59:37.865]                     1471788896L, -884886196L, -1635672800L, 1038390146L, 
[10:59:37.865]                     -1410561304L, 2113664236L, -1969669572L, 
[10:59:37.865]                     972659570L, -1002878352L, -2015836124L, -421300424L, 
[10:59:37.865]                     1223277722L, 1260696272L, -457563972L, -1741379948L, 
[10:59:37.865]                     1641113218L, 1794727104L, 1007677756L, -1912668016L, 
[10:59:37.865]                     -1726260702L, -1334004216L, -1685024500L, 
[10:59:37.865]                     554230428L, -1291043310L, 1601793408L, 1419439636L, 
[10:59:37.865]                     -328800728L, 1975063866L, -1039341616L, -70925716L, 
[10:59:37.865]                     -177191116L, 624718482L, -1955235488L, 727441740L, 
[10:59:37.865]                     -1160101920L, 1898934178L, 1639774120L, -203334772L, 
[10:59:37.865]                     1725126332L, 1450679154L, 1227753712L, 445732932L, 
[10:59:37.865]                     -87360168L, 2139587642L, 1454121840L, 885490748L, 
[10:59:37.865]                     498547476L, 1886489026L, 743543008L, -1240856708L, 
[10:59:37.865]                     -146166064L, 1395533474L, -1645149144L, -398817012L, 
[10:59:37.865]                     -586259524L, 612363570L, 1529642944L, -2140868044L, 
[10:59:37.865]                     1111493576L, -445872966L, 770060176L, 753231340L, 
[10:59:37.865]                     886120532L, 1815096978L, 1719622432L, -821142068L, 
[10:59:37.865]                     -1247228960L, 734515906L, 1468197416L, -1339547988L, 
[10:59:37.865]                     2122363580L, -1809038862L, 913361200L, 1858469028L, 
[10:59:37.865]                     -534629704L, -1839363238L, -199463536L, 863953276L, 
[10:59:37.865]                     1539546388L, 296970562L, 212681472L, 43826108L, 
[10:59:37.865]                     1835395920L, 2145378594L, 1513262408L, 1855043596L, 
[10:59:37.865]                     -552937380L, -1816537902L, 1009575936L, 77556564L, 
[10:59:37.865]                     -1712287256L, -297039878L, 114968272L, -602204884L, 
[10:59:37.865]                     -583206668L, -1197787246L, -295654304L, -1813615348L, 
[10:59:37.865]                     990971616L, -264958622L, 1060799144L, 743926348L, 
[10:59:37.865]                     369387388L, 1167797042L, -301371792L, 797039940L, 
[10:59:37.865]                     1760046040L, 845463674L, 657970736L, 1023630012L, 
[10:59:37.865]                     1264998228L, -1452049854L, -278439008L, -324781892L, 
[10:59:37.865]                     -756698672L, -1739176606L, -447880216L, 1885677516L, 
[10:59:37.865]                     -681875716L, -1278832654L, 1835580544L, -1604040460L, 
[10:59:37.865]                     974787720L, 1844983098L, 2112914256L, -1280922516L, 
[10:59:37.865]                     1970958484L, 215304530L, -1720099104L, -1351311156L, 
[10:59:37.865]                     1821972640L, 1707891074L, -379488024L, 1843914988L, 
[10:59:37.865]                     1152903228L, -1635819406L, 1590519920L, -1423580636L, 
[10:59:37.865]                     427934264L, -1772553702L, 1040408784L, -2125789636L, 
[10:59:37.865]                     992742548L, -567425918L, -2001639488L, -521994948L, 
[10:59:37.865]                     -111735152L, 1424286754L, 312266760L, -2021614452L, 
[10:59:37.865]                     973836316L, -397167470L, -554242944L, 1703592980L, 
[10:59:37.865]                     -108395736L, 1518818362L, -2053051184L, -1544792980L, 
[10:59:37.865]                     1410328244L, 1632038930L, 1060618208L, -183489588L, 
[10:59:37.865]                     -1695998496L, 2066799650L, -636476120L, -2066704116L, 
[10:59:37.865]                     828542524L, -2044660494L, 1881409776L, -1443969212L, 
[10:59:37.865]                     1163104344L, 1213006394L, -1273874192L, 1736099982L, 
[10:59:37.865]                     864633531L, 1979341469L, -1821213110L, 1845331048L, 
[10:59:37.865]                     954358865L, 380249923L, 161686084L, -719744782L, 
[10:59:37.865]                     -334504761L, -2112764271L, 1283069974L, -2035555724L, 
[10:59:37.865]                     202585349L, -695293105L, 2005574984L, -2059577114L, 
[10:59:37.865]                     -719565293L, 1717203317L, 2141979986L, 8930720L, 
[10:59:37.865]                     -1658899319L, 1247655099L, -1393801460L, 
[10:59:37.865]                     1126706842L, 1332876303L, -156544935L, -1468195602L, 
[10:59:37.865]                     654808956L, 1297777645L, 551529623L, 1796044640L, 
[10:59:37.865]                     -1218580674L, -954904565L, 1959778445L, -1697488454L, 
[10:59:37.865]                     -279220232L, -962622559L, 1047618899L, 910285940L, 
[10:59:37.865]                     1214557698L, -1946902377L, -2019872159L, 
[10:59:37.865]                     1924336294L, -2125180252L, -1922631851L, 
[10:59:37.865]                     1955052543L, -1385354600L, -1744646218L, 
[10:59:37.865]                     763667523L, 1108671877L, 39806498L, 366157072L, 
[10:59:37.865]                     1627344057L, 1415803243L, 704847964L, -1550135926L, 
[10:59:37.865]                     -967960193L, -653114167L, -1336870562L, -541853172L, 
[10:59:37.865]                     -2130467L, -321510169L, 2113808L, -1780899794L, 
[10:59:37.865]                     -1950263589L, 1610985405L, 683837738L, -1386029624L, 
[10:59:37.865]                     -1388731663L, 900721763L, -1795032988L, -1951730798L, 
[10:59:37.865]                     591353959L, -770971599L, 1157658998L, 1261176468L, 
[10:59:37.865]                     1763937445L, 482202031L, -1277539736L, -1324436922L, 
[10:59:37.865]                     -2114807821L, -1736693931L, 1146657074L, 
[10:59:37.865]                     -604705536L, -618648087L, -1058621349L, -1257248084L, 
[10:59:37.865]                     -1395026758L, -1814423953L, 1463714809L, 
[10:59:37.865]                     1348053646L, 1384721244L, -842790963L, 1420683063L, 
[10:59:37.865]                     -972884544L, -1044030818L, -1738845333L, 
[10:59:37.865]                     374049517L, -881590438L, 2062955544L, -493776511L, 
[10:59:37.865]                     1848305459L, 1455758676L, -1530898590L, -1426428937L, 
[10:59:37.865]                     -628059071L, 485277894L, -632852988L, -1516435019L, 
[10:59:37.865]                     1969944223L, 901289720L, 1258707670L, 1827622755L, 
[10:59:37.865]                     1645311781L, -2069500734L, 795347376L, -1317830183L, 
[10:59:37.865]                     1177030475L, 1067836860L, -771320342L, -843140577L, 
[10:59:37.865]                     1916065961L, 1289179198L, 55484716L, 95882109L, 
[10:59:37.865]                     720814535L, -1727138640L, -1834753330L, 313186299L, 
[10:59:37.865]                     -1989336995L, -401741942L, 1622796200L, -592442095L, 
[10:59:37.865]                     930976771L, -1010934012L, 2046014258L, -1852534393L, 
[10:59:37.865]                     1756583889L, -1825056426L, -852633804L, 516356677L, 
[10:59:37.865]                     691472015L, -1667395576L, -10013658L, 938085587L, 
[10:59:37.865]                     492654133L, 711550354L, -598836896L, 457818313L, 
[10:59:37.865]                     -1819159557L, 395826124L, 1993764442L, 2022175567L, 
[10:59:37.865]                     136088089L, -708237266L, 1677059644L, -1415095379L, 
[10:59:37.865]                     -850865065L, -1162583648L, 441809662L, -1531799093L, 
[10:59:37.865]                     402513869L, -96259334L, 1082714424L, 1547580129L, 
[10:59:37.865]                     -716860013L, 354827700L, -2101166398L, 250602446L
[10:59:37.865]                     ), envir = base::globalenv(), inherits = FALSE)
[10:59:37.865]                     NULL
[10:59:37.865]                   }
[10:59:37.865]                   options(future.plan = NULL)
[10:59:37.865]                   if (is.na(NA_character_)) 
[10:59:37.865]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:37.865]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:37.865]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:37.865]                     .init = FALSE)
[10:59:37.865]                 }
[10:59:37.865]             }
[10:59:37.865]         }
[10:59:37.865]     })
[10:59:37.865]     if (TRUE) {
[10:59:37.865]         base::sink(type = "output", split = FALSE)
[10:59:37.865]         if (TRUE) {
[10:59:37.865]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:37.865]         }
[10:59:37.865]         else {
[10:59:37.865]             ...future.result["stdout"] <- base::list(NULL)
[10:59:37.865]         }
[10:59:37.865]         base::close(...future.stdout)
[10:59:37.865]         ...future.stdout <- NULL
[10:59:37.865]     }
[10:59:37.865]     ...future.result$conditions <- ...future.conditions
[10:59:37.865]     ...future.result$finished <- base::Sys.time()
[10:59:37.865]     ...future.result
[10:59:37.865] }
[10:59:37.868] assign_globals() ...
[10:59:37.868] List of 5
[10:59:37.868]  $ ...future.FUN            :function (...)  
[10:59:37.868]  $ future.call.arguments    : list()
[10:59:37.868]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.868]  $ ...future.elements_ii    :List of 5
[10:59:37.868]   ..$ : int 0
[10:59:37.868]   ..$ : int 0
[10:59:37.868]   ..$ : int 0
[10:59:37.868]   ..$ : int 0
[10:59:37.868]   ..$ : int 0
[10:59:37.868]  $ ...future.seeds_ii       :List of 5
[10:59:37.868]   ..$ : int [1:7] 10407 -1643357586 -1853231333 -1236085106 -608186853 -1730468939 -2083251960
[10:59:37.868]   ..$ : int [1:7] 10407 -927123879 1291253209 1072722501 5824656 -832353155 -1156121888
[10:59:37.868]   ..$ : int [1:7] 10407 -1053143009 1814733941 -642097468 775964553 -755114897 1996811545
[10:59:37.868]   ..$ : int [1:7] 10407 -491700939 -1430955447 -1883371118 30342380 1573908277 -950967606
[10:59:37.868]   ..$ : int [1:7] 10407 59650982 1259947310 827888220 1350718986 -476525823 -223088623
[10:59:37.868]  $ ...future.globals.maxSize: NULL
[10:59:37.868]  - attr(*, "where")=List of 5
[10:59:37.868]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:37.868]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:37.868]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:37.868]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:37.868]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:37.868]  - attr(*, "resolved")= logi FALSE
[10:59:37.868]  - attr(*, "total_size")= num 7184
[10:59:37.868]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.868]  - attr(*, "already-done")= logi TRUE
[10:59:37.875] - reassign environment for ‘...future.FUN’
[10:59:37.875] - copied ‘...future.FUN’ to environment
[10:59:37.875] - copied ‘future.call.arguments’ to environment
[10:59:37.875] - copied ‘...future.elements_ii’ to environment
[10:59:37.875] - copied ‘...future.seeds_ii’ to environment
[10:59:37.875] - copied ‘...future.globals.maxSize’ to environment
[10:59:37.875] assign_globals() ... done
[10:59:37.876] plan(): Setting new future strategy stack:
[10:59:37.876] List of future strategies:
[10:59:37.876] 1. sequential:
[10:59:37.876]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.876]    - tweaked: FALSE
[10:59:37.876]    - call: NULL
[10:59:37.876] plan(): nbrOfWorkers() = 1
[10:59:37.877] plan(): Setting new future strategy stack:
[10:59:37.877] List of future strategies:
[10:59:37.877] 1. sequential:
[10:59:37.877]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.877]    - tweaked: FALSE
[10:59:37.877]    - call: plan(strategy)
[10:59:37.878] plan(): nbrOfWorkers() = 1
[10:59:37.878] SequentialFuture started (and completed)
[10:59:37.878] - Launch lazy future ... done
[10:59:37.878] run() for ‘SequentialFuture’ ... done
[10:59:37.879] Created future:
[10:59:37.879] SequentialFuture:
[10:59:37.879] Label: ‘future_replicate-1’
[10:59:37.879] Expression:
[10:59:37.879] {
[10:59:37.879]     do.call(function(...) {
[10:59:37.879]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.879]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:37.879]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.879]             on.exit(options(oopts), add = TRUE)
[10:59:37.879]         }
[10:59:37.879]         {
[10:59:37.879]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:37.879]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.879]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.879]                   envir = globalenv(), inherits = FALSE)
[10:59:37.879]                 ...future.FUN(...future.X_jj, ...)
[10:59:37.879]             })
[10:59:37.879]         }
[10:59:37.879]     }, args = future.call.arguments)
[10:59:37.879] }
[10:59:37.879] Lazy evaluation: FALSE
[10:59:37.879] Asynchronous evaluation: FALSE
[10:59:37.879] Local evaluation: TRUE
[10:59:37.879] Environment: R_GlobalEnv
[10:59:37.879] Capture standard output: TRUE
[10:59:37.879] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:37.879] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:37.879] Packages: <none>
[10:59:37.879] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:37.879] Resolved: TRUE
[10:59:37.879] Value: 91 bytes of class ‘list’
[10:59:37.879] Early signaling: FALSE
[10:59:37.879] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:37.879] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:37.880] Chunk #1 of 1 ... DONE
[10:59:37.880] Launching 1 futures (chunks) ... DONE
[10:59:37.880] Resolving 1 futures (chunks) ...
[10:59:37.880] resolve() on list ...
[10:59:37.880]  recursive: 0
[10:59:37.880]  length: 1
[10:59:37.880] 
[10:59:37.880] resolved() for ‘SequentialFuture’ ...
[10:59:37.881] - state: ‘finished’
[10:59:37.881] - run: TRUE
[10:59:37.881] - result: ‘FutureResult’
[10:59:37.881] resolved() for ‘SequentialFuture’ ... done
[10:59:37.881] Future #1
[10:59:37.881] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:59:37.881] - nx: 1
[10:59:37.881] - relay: TRUE
[10:59:37.881] - stdout: TRUE
[10:59:37.882] - signal: TRUE
[10:59:37.882] - resignal: FALSE
[10:59:37.882] - force: TRUE
[10:59:37.882] - relayed: [n=1] FALSE
[10:59:37.882] - queued futures: [n=1] FALSE
[10:59:37.882]  - until=1
[10:59:37.882]  - relaying element #1
[10:59:37.882] - relayed: [n=1] TRUE
[10:59:37.882] - queued futures: [n=1] TRUE
[10:59:37.882] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:59:37.883]  length: 0 (resolved future 1)
[10:59:37.883] Relaying remaining futures
[10:59:37.883] signalConditionsASAP(NULL, pos=0) ...
[10:59:37.883] - nx: 1
[10:59:37.883] - relay: TRUE
[10:59:37.883] - stdout: TRUE
[10:59:37.883] - signal: TRUE
[10:59:37.883] - resignal: FALSE
[10:59:37.883] - force: TRUE
[10:59:37.883] - relayed: [n=1] TRUE
[10:59:37.883] - queued futures: [n=1] TRUE
 - flush all
[10:59:37.883] - relayed: [n=1] TRUE
[10:59:37.883] - queued futures: [n=1] TRUE
[10:59:37.884] signalConditionsASAP(NULL, pos=0) ... done
[10:59:37.884] resolve() on list ... DONE
[10:59:37.884]  - Number of value chunks collected: 1
[10:59:37.884] Resolving 1 futures (chunks) ... DONE
[10:59:37.884] Reducing values from 1 chunks ...
[10:59:37.884]  - Number of values collected after concatenation: 5
[10:59:37.884]  - Number of values expected: 5
[10:59:37.884] Reducing values from 1 chunks ... DONE
[10:59:37.884] future_lapply() ... DONE
[10:59:37.884] future_lapply() ...
[10:59:37.885] Generating random seeds ...
[10:59:37.885] Generating random seed streams for 5 elements ...
[10:59:37.885] Generating random seed streams for 5 elements ... DONE
[10:59:37.885] Generating random seeds ... DONE
[10:59:37.885] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:37.886] Number of chunks: 1
[10:59:37.886] getGlobalsAndPackagesXApply() ...
[10:59:37.886]  - future.globals: TRUE
[10:59:37.886] getGlobalsAndPackages() ...
[10:59:37.886] Searching for globals...
[10:59:37.888] - globals found: [2] ‘FUN’, ‘sample’
[10:59:37.888] Searching for globals ... DONE
[10:59:37.888] Resolving globals: FALSE
[10:59:37.889] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:37.889] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:37.889] - globals: [1] ‘FUN’
[10:59:37.889] 
[10:59:37.889] getGlobalsAndPackages() ... DONE
[10:59:37.889]  - globals found/used: [n=1] ‘FUN’
[10:59:37.889]  - needed namespaces: [n=0] 
[10:59:37.890] Finding globals ... DONE
[10:59:37.890]  - use_args: TRUE
[10:59:37.890]  - Getting '...' globals ...
[10:59:37.890] resolve() on list ...
[10:59:37.890]  recursive: 0
[10:59:37.890]  length: 1
[10:59:37.890]  elements: ‘...’
[10:59:37.890]  length: 0 (resolved future 1)
[10:59:37.890] resolve() on list ... DONE
[10:59:37.890]    - '...' content: [n=0] 
[10:59:37.891] List of 1
[10:59:37.891]  $ ...: list()
[10:59:37.891]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.891]  - attr(*, "where")=List of 1
[10:59:37.891]   ..$ ...:<environment: 0x56262ee34eb0> 
[10:59:37.891]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.891]  - attr(*, "resolved")= logi TRUE
[10:59:37.891]  - attr(*, "total_size")= num NA
[10:59:37.893]  - Getting '...' globals ... DONE
[10:59:37.893] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:37.893] List of 2
[10:59:37.893]  $ ...future.FUN:function (...)  
[10:59:37.893]  $ ...          : list()
[10:59:37.893]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.893]  - attr(*, "where")=List of 2
[10:59:37.893]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:37.893]   ..$ ...          :<environment: 0x56262ee34eb0> 
[10:59:37.893]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.893]  - attr(*, "resolved")= logi FALSE
[10:59:37.893]  - attr(*, "total_size")= num 7184
[10:59:37.895] Packages to be attached in all futures: [n=0] 
[10:59:37.895] getGlobalsAndPackagesXApply() ... DONE
[10:59:37.896] Number of futures (= number of chunks): 1
[10:59:37.896] Launching 1 futures (chunks) ...
[10:59:37.896] Chunk #1 of 1 ...
[10:59:37.896]  - Finding globals in 'X' for chunk #1 ...
[10:59:37.896] getGlobalsAndPackages() ...
[10:59:37.896] Searching for globals...
[10:59:37.896] 
[10:59:37.896] Searching for globals ... DONE
[10:59:37.896] - globals: [0] <none>
[10:59:37.897] getGlobalsAndPackages() ... DONE
[10:59:37.897]    + additional globals found: [n=0] 
[10:59:37.897]    + additional namespaces needed: [n=0] 
[10:59:37.897]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:37.897]  - seeds: [5] <seeds>
[10:59:37.897]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.897] getGlobalsAndPackages() ...
[10:59:37.897] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.897] Resolving globals: FALSE
[10:59:37.897] Tweak future expression to call with '...' arguments ...
[10:59:37.897] {
[10:59:37.897]     do.call(function(...) {
[10:59:37.897]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.897]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:37.897]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.897]             on.exit(options(oopts), add = TRUE)
[10:59:37.897]         }
[10:59:37.897]         {
[10:59:37.897]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:37.897]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.897]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.897]                   envir = globalenv(), inherits = FALSE)
[10:59:37.897]                 ...future.FUN(...future.X_jj, ...)
[10:59:37.897]             })
[10:59:37.897]         }
[10:59:37.897]     }, args = future.call.arguments)
[10:59:37.897] }
[10:59:37.898] Tweak future expression to call with '...' arguments ... DONE
[10:59:37.898] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.898] 
[10:59:37.898] getGlobalsAndPackages() ... DONE
[10:59:37.898] run() for ‘Future’ ...
[10:59:37.899] - state: ‘created’
[10:59:37.899] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:59:37.899] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:37.899] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:59:37.899]   - Field: ‘label’
[10:59:37.899]   - Field: ‘local’
[10:59:37.899]   - Field: ‘owner’
[10:59:37.899]   - Field: ‘envir’
[10:59:37.899]   - Field: ‘packages’
[10:59:37.899]   - Field: ‘gc’
[10:59:37.900]   - Field: ‘conditions’
[10:59:37.900]   - Field: ‘expr’
[10:59:37.900]   - Field: ‘uuid’
[10:59:37.900]   - Field: ‘seed’
[10:59:37.900]   - Field: ‘version’
[10:59:37.900]   - Field: ‘result’
[10:59:37.900]   - Field: ‘asynchronous’
[10:59:37.900]   - Field: ‘calls’
[10:59:37.900]   - Field: ‘globals’
[10:59:37.900]   - Field: ‘stdout’
[10:59:37.900]   - Field: ‘earlySignal’
[10:59:37.900]   - Field: ‘lazy’
[10:59:37.900]   - Field: ‘state’
[10:59:37.901] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:59:37.901] - Launch lazy future ...
[10:59:37.901] Packages needed by the future expression (n = 0): <none>
[10:59:37.901] Packages needed by future strategies (n = 0): <none>
[10:59:37.901] {
[10:59:37.901]     {
[10:59:37.901]         {
[10:59:37.901]             ...future.startTime <- base::Sys.time()
[10:59:37.901]             {
[10:59:37.901]                 {
[10:59:37.901]                   {
[10:59:37.901]                     base::local({
[10:59:37.901]                       has_future <- base::requireNamespace("future", 
[10:59:37.901]                         quietly = TRUE)
[10:59:37.901]                       if (has_future) {
[10:59:37.901]                         ns <- base::getNamespace("future")
[10:59:37.901]                         version <- ns[[".package"]][["version"]]
[10:59:37.901]                         if (is.null(version)) 
[10:59:37.901]                           version <- utils::packageVersion("future")
[10:59:37.901]                       }
[10:59:37.901]                       else {
[10:59:37.901]                         version <- NULL
[10:59:37.901]                       }
[10:59:37.901]                       if (!has_future || version < "1.8.0") {
[10:59:37.901]                         info <- base::c(r_version = base::gsub("R version ", 
[10:59:37.901]                           "", base::R.version$version.string), 
[10:59:37.901]                           platform = base::sprintf("%s (%s-bit)", 
[10:59:37.901]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:37.901]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:37.901]                             "release", "version")], collapse = " "), 
[10:59:37.901]                           hostname = base::Sys.info()[["nodename"]])
[10:59:37.901]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:59:37.901]                           info)
[10:59:37.901]                         info <- base::paste(info, collapse = "; ")
[10:59:37.901]                         if (!has_future) {
[10:59:37.901]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:37.901]                             info)
[10:59:37.901]                         }
[10:59:37.901]                         else {
[10:59:37.901]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:37.901]                             info, version)
[10:59:37.901]                         }
[10:59:37.901]                         base::stop(msg)
[10:59:37.901]                       }
[10:59:37.901]                     })
[10:59:37.901]                   }
[10:59:37.901]                   ...future.strategy.old <- future::plan("list")
[10:59:37.901]                   options(future.plan = NULL)
[10:59:37.901]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:37.901]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:37.901]                 }
[10:59:37.901]                 ...future.workdir <- getwd()
[10:59:37.901]             }
[10:59:37.901]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:37.901]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:37.901]         }
[10:59:37.901]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:37.901]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:59:37.901]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:37.901]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:37.901]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:37.901]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:37.901]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:37.901]             base::names(...future.oldOptions))
[10:59:37.901]     }
[10:59:37.901]     if (FALSE) {
[10:59:37.901]     }
[10:59:37.901]     else {
[10:59:37.901]         if (TRUE) {
[10:59:37.901]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:37.901]                 open = "w")
[10:59:37.901]         }
[10:59:37.901]         else {
[10:59:37.901]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:37.901]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:37.901]         }
[10:59:37.901]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:37.901]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:37.901]             base::sink(type = "output", split = FALSE)
[10:59:37.901]             base::close(...future.stdout)
[10:59:37.901]         }, add = TRUE)
[10:59:37.901]     }
[10:59:37.901]     ...future.frame <- base::sys.nframe()
[10:59:37.901]     ...future.conditions <- base::list()
[10:59:37.901]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:37.901]     if (FALSE) {
[10:59:37.901]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:37.901]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:37.901]     }
[10:59:37.901]     ...future.result <- base::tryCatch({
[10:59:37.901]         base::withCallingHandlers({
[10:59:37.901]             ...future.value <- base::withVisible(base::local({
[10:59:37.901]                 do.call(function(...) {
[10:59:37.901]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.901]                   if (!identical(...future.globals.maxSize.org, 
[10:59:37.901]                     ...future.globals.maxSize)) {
[10:59:37.901]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.901]                     on.exit(options(oopts), add = TRUE)
[10:59:37.901]                   }
[10:59:37.901]                   {
[10:59:37.901]                     lapply(seq_along(...future.elements_ii), 
[10:59:37.901]                       FUN = function(jj) {
[10:59:37.901]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.901]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.901]                           envir = globalenv(), inherits = FALSE)
[10:59:37.901]                         ...future.FUN(...future.X_jj, ...)
[10:59:37.901]                       })
[10:59:37.901]                   }
[10:59:37.901]                 }, args = future.call.arguments)
[10:59:37.901]             }))
[10:59:37.901]             future::FutureResult(value = ...future.value$value, 
[10:59:37.901]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:37.901]                   ...future.rng), globalenv = if (FALSE) 
[10:59:37.901]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:37.901]                     ...future.globalenv.names))
[10:59:37.901]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:37.901]         }, condition = base::local({
[10:59:37.901]             c <- base::c
[10:59:37.901]             inherits <- base::inherits
[10:59:37.901]             invokeRestart <- base::invokeRestart
[10:59:37.901]             length <- base::length
[10:59:37.901]             list <- base::list
[10:59:37.901]             seq.int <- base::seq.int
[10:59:37.901]             signalCondition <- base::signalCondition
[10:59:37.901]             sys.calls <- base::sys.calls
[10:59:37.901]             `[[` <- base::`[[`
[10:59:37.901]             `+` <- base::`+`
[10:59:37.901]             `<<-` <- base::`<<-`
[10:59:37.901]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:37.901]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:37.901]                   3L)]
[10:59:37.901]             }
[10:59:37.901]             function(cond) {
[10:59:37.901]                 is_error <- inherits(cond, "error")
[10:59:37.901]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:37.901]                   NULL)
[10:59:37.901]                 if (is_error) {
[10:59:37.901]                   sessionInformation <- function() {
[10:59:37.901]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:37.901]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:37.901]                       search = base::search(), system = base::Sys.info())
[10:59:37.901]                   }
[10:59:37.901]                   ...future.conditions[[length(...future.conditions) + 
[10:59:37.901]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:37.901]                     cond$call), session = sessionInformation(), 
[10:59:37.901]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:37.901]                   signalCondition(cond)
[10:59:37.901]                 }
[10:59:37.901]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:37.901]                 "immediateCondition"))) {
[10:59:37.901]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:37.901]                   ...future.conditions[[length(...future.conditions) + 
[10:59:37.901]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:37.901]                   if (TRUE && !signal) {
[10:59:37.901]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:37.901]                     {
[10:59:37.901]                       inherits <- base::inherits
[10:59:37.901]                       invokeRestart <- base::invokeRestart
[10:59:37.901]                       is.null <- base::is.null
[10:59:37.901]                       muffled <- FALSE
[10:59:37.901]                       if (inherits(cond, "message")) {
[10:59:37.901]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:37.901]                         if (muffled) 
[10:59:37.901]                           invokeRestart("muffleMessage")
[10:59:37.901]                       }
[10:59:37.901]                       else if (inherits(cond, "warning")) {
[10:59:37.901]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:37.901]                         if (muffled) 
[10:59:37.901]                           invokeRestart("muffleWarning")
[10:59:37.901]                       }
[10:59:37.901]                       else if (inherits(cond, "condition")) {
[10:59:37.901]                         if (!is.null(pattern)) {
[10:59:37.901]                           computeRestarts <- base::computeRestarts
[10:59:37.901]                           grepl <- base::grepl
[10:59:37.901]                           restarts <- computeRestarts(cond)
[10:59:37.901]                           for (restart in restarts) {
[10:59:37.901]                             name <- restart$name
[10:59:37.901]                             if (is.null(name)) 
[10:59:37.901]                               next
[10:59:37.901]                             if (!grepl(pattern, name)) 
[10:59:37.901]                               next
[10:59:37.901]                             invokeRestart(restart)
[10:59:37.901]                             muffled <- TRUE
[10:59:37.901]                             break
[10:59:37.901]                           }
[10:59:37.901]                         }
[10:59:37.901]                       }
[10:59:37.901]                       invisible(muffled)
[10:59:37.901]                     }
[10:59:37.901]                     muffleCondition(cond, pattern = "^muffle")
[10:59:37.901]                   }
[10:59:37.901]                 }
[10:59:37.901]                 else {
[10:59:37.901]                   if (TRUE) {
[10:59:37.901]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:37.901]                     {
[10:59:37.901]                       inherits <- base::inherits
[10:59:37.901]                       invokeRestart <- base::invokeRestart
[10:59:37.901]                       is.null <- base::is.null
[10:59:37.901]                       muffled <- FALSE
[10:59:37.901]                       if (inherits(cond, "message")) {
[10:59:37.901]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:37.901]                         if (muffled) 
[10:59:37.901]                           invokeRestart("muffleMessage")
[10:59:37.901]                       }
[10:59:37.901]                       else if (inherits(cond, "warning")) {
[10:59:37.901]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:37.901]                         if (muffled) 
[10:59:37.901]                           invokeRestart("muffleWarning")
[10:59:37.901]                       }
[10:59:37.901]                       else if (inherits(cond, "condition")) {
[10:59:37.901]                         if (!is.null(pattern)) {
[10:59:37.901]                           computeRestarts <- base::computeRestarts
[10:59:37.901]                           grepl <- base::grepl
[10:59:37.901]                           restarts <- computeRestarts(cond)
[10:59:37.901]                           for (restart in restarts) {
[10:59:37.901]                             name <- restart$name
[10:59:37.901]                             if (is.null(name)) 
[10:59:37.901]                               next
[10:59:37.901]                             if (!grepl(pattern, name)) 
[10:59:37.901]                               next
[10:59:37.901]                             invokeRestart(restart)
[10:59:37.901]                             muffled <- TRUE
[10:59:37.901]                             break
[10:59:37.901]                           }
[10:59:37.901]                         }
[10:59:37.901]                       }
[10:59:37.901]                       invisible(muffled)
[10:59:37.901]                     }
[10:59:37.901]                     muffleCondition(cond, pattern = "^muffle")
[10:59:37.901]                   }
[10:59:37.901]                 }
[10:59:37.901]             }
[10:59:37.901]         }))
[10:59:37.901]     }, error = function(ex) {
[10:59:37.901]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:37.901]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:37.901]                 ...future.rng), started = ...future.startTime, 
[10:59:37.901]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:37.901]             version = "1.8"), class = "FutureResult")
[10:59:37.901]     }, finally = {
[10:59:37.901]         if (!identical(...future.workdir, getwd())) 
[10:59:37.901]             setwd(...future.workdir)
[10:59:37.901]         {
[10:59:37.901]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:37.901]                 ...future.oldOptions$nwarnings <- NULL
[10:59:37.901]             }
[10:59:37.901]             base::options(...future.oldOptions)
[10:59:37.901]             if (.Platform$OS.type == "windows") {
[10:59:37.901]                 old_names <- names(...future.oldEnvVars)
[10:59:37.901]                 envs <- base::Sys.getenv()
[10:59:37.901]                 names <- names(envs)
[10:59:37.901]                 common <- intersect(names, old_names)
[10:59:37.901]                 added <- setdiff(names, old_names)
[10:59:37.901]                 removed <- setdiff(old_names, names)
[10:59:37.901]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:37.901]                   envs[common]]
[10:59:37.901]                 NAMES <- toupper(changed)
[10:59:37.901]                 args <- list()
[10:59:37.901]                 for (kk in seq_along(NAMES)) {
[10:59:37.901]                   name <- changed[[kk]]
[10:59:37.901]                   NAME <- NAMES[[kk]]
[10:59:37.901]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.901]                     next
[10:59:37.901]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:37.901]                 }
[10:59:37.901]                 NAMES <- toupper(added)
[10:59:37.901]                 for (kk in seq_along(NAMES)) {
[10:59:37.901]                   name <- added[[kk]]
[10:59:37.901]                   NAME <- NAMES[[kk]]
[10:59:37.901]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.901]                     next
[10:59:37.901]                   args[[name]] <- ""
[10:59:37.901]                 }
[10:59:37.901]                 NAMES <- toupper(removed)
[10:59:37.901]                 for (kk in seq_along(NAMES)) {
[10:59:37.901]                   name <- removed[[kk]]
[10:59:37.901]                   NAME <- NAMES[[kk]]
[10:59:37.901]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.901]                     next
[10:59:37.901]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:37.901]                 }
[10:59:37.901]                 if (length(args) > 0) 
[10:59:37.901]                   base::do.call(base::Sys.setenv, args = args)
[10:59:37.901]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:37.901]             }
[10:59:37.901]             else {
[10:59:37.901]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:37.901]             }
[10:59:37.901]             {
[10:59:37.901]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:37.901]                   0L) {
[10:59:37.901]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:37.901]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:37.901]                   base::options(opts)
[10:59:37.901]                 }
[10:59:37.901]                 {
[10:59:37.901]                   {
[10:59:37.901]                     base::assign(".Random.seed", c(10403L, 2L, 
[10:59:37.901]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:59:37.901]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:59:37.901]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:59:37.901]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:59:37.901]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:59:37.901]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:59:37.901]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:59:37.901]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:59:37.901]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:59:37.901]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:59:37.901]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:59:37.901]                     -1512233174L, -1985955764L, -425390065L, 
[10:59:37.901]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:59:37.901]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:59:37.901]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:59:37.901]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:59:37.901]                     1818328109L, -1284085436L, -1981489558L, 
[10:59:37.901]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:59:37.901]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:59:37.901]                     -1718567047L, -793788661L, -1133789126L, 
[10:59:37.901]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:59:37.901]                     -1823521982L, -1345991523L, -1672661737L, 
[10:59:37.901]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:59:37.901]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:59:37.901]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:59:37.901]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:59:37.901]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:59:37.901]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:59:37.901]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:59:37.901]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:59:37.901]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:59:37.901]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:59:37.901]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:59:37.901]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:59:37.901]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:59:37.901]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:59:37.901]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:59:37.901]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:59:37.901]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:59:37.901]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:59:37.901]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:59:37.901]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:59:37.901]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:59:37.901]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:59:37.901]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:59:37.901]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:59:37.901]                     -1119334354L, -1521015416L, -2041922421L, 
[10:59:37.901]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:59:37.901]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:59:37.901]                     1232111981L, -1801753084L, -1608606422L, 
[10:59:37.901]                     -1172096363L, 1420874031L, -1210473418L, 
[10:59:37.901]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:59:37.901]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:59:37.901]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:59:37.901]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:59:37.901]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:59:37.901]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:59:37.901]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:59:37.901]                     -332493318L, -1978392251L, -1691039632L, 
[10:59:37.901]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:59:37.901]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:59:37.901]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:59:37.901]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:59:37.901]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:59:37.901]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:59:37.901]                     -1178330196L, -687617348L, -1701912078L, 
[10:59:37.901]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:59:37.901]                     -1345416048L, 1816730492L, -1570431212L, 
[10:59:37.901]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:59:37.901]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:59:37.901]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:59:37.901]                     -1493184262L, -1943836976L, -590788308L, 
[10:59:37.901]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:59:37.901]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:59:37.901]                     1274857340L, -1205842638L, -1938479504L, 
[10:59:37.901]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:59:37.901]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:59:37.901]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:59:37.901]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:59:37.901]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:59:37.901]                     -1460751252L, 1201879444L, -1459788718L, 
[10:59:37.901]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:59:37.901]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:59:37.901]                     -420945808L, -1997735900L, -1838404552L, 
[10:59:37.901]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:59:37.901]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:59:37.901]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:59:37.901]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:59:37.901]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:59:37.901]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:59:37.901]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:59:37.901]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:59:37.901]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:59:37.901]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:59:37.901]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:59:37.901]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:59:37.901]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:59:37.901]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:59:37.901]                     -1357570110L, 1896595240L, -2066952276L, 
[10:59:37.901]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:59:37.901]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:59:37.901]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:59:37.901]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:59:37.901]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:59:37.901]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:59:37.901]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:59:37.901]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:59:37.901]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:59:37.901]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:59:37.901]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:59:37.901]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:59:37.901]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:59:37.901]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:59:37.901]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:59:37.901]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:59:37.901]                     -1365842884L, -438961294L, -1851472272L, 
[10:59:37.901]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:59:37.901]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:59:37.901]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:59:37.901]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:59:37.901]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:59:37.901]                     -594809770L, -2146766621L, -2013964635L, 
[10:59:37.901]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:59:37.901]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:59:37.901]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:59:37.901]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:59:37.901]                     -1426021878L, -1285634264L, 1507547537L, 
[10:59:37.901]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:59:37.901]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:59:37.901]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:59:37.901]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:59:37.901]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:59:37.901]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:59:37.901]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:59:37.901]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:59:37.901]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:59:37.901]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:59:37.901]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:59:37.901]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:59:37.901]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:59:37.901]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:59:37.901]                     -1604604761L, 1421229008L, -1268333714L, 
[10:59:37.901]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:59:37.901]                     -2070476623L, -2099222749L, 1141171236L, 
[10:59:37.901]                     -146426158L, -1797385433L, -1129376399L, 
[10:59:37.901]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:59:37.901]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:59:37.901]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:59:37.901]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:59:37.901]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:59:37.901]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:59:37.901]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:59:37.901]                     -1092079724L, -1765622238L, -1882554057L, 
[10:59:37.901]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:59:37.901]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:59:37.901]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:59:37.901]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:59:37.901]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:59:37.901]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:59:37.901]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:59:37.901]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:59:37.901]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:59:37.901]                       inherits = FALSE)
[10:59:37.901]                     NULL
[10:59:37.901]                   }
[10:59:37.901]                   options(future.plan = NULL)
[10:59:37.901]                   if (is.na(NA_character_)) 
[10:59:37.901]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:37.901]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:37.901]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:37.901]                     .init = FALSE)
[10:59:37.901]                 }
[10:59:37.901]             }
[10:59:37.901]         }
[10:59:37.901]     })
[10:59:37.901]     if (TRUE) {
[10:59:37.901]         base::sink(type = "output", split = FALSE)
[10:59:37.901]         if (TRUE) {
[10:59:37.901]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:37.901]         }
[10:59:37.901]         else {
[10:59:37.901]             ...future.result["stdout"] <- base::list(NULL)
[10:59:37.901]         }
[10:59:37.901]         base::close(...future.stdout)
[10:59:37.901]         ...future.stdout <- NULL
[10:59:37.901]     }
[10:59:37.901]     ...future.result$conditions <- ...future.conditions
[10:59:37.901]     ...future.result$finished <- base::Sys.time()
[10:59:37.901]     ...future.result
[10:59:37.901] }
[10:59:37.904] assign_globals() ...
[10:59:37.904] List of 5
[10:59:37.904]  $ ...future.FUN            :function (...)  
[10:59:37.904]  $ future.call.arguments    : list()
[10:59:37.904]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.904]  $ ...future.elements_ii    :List of 5
[10:59:37.904]   ..$ : int 0
[10:59:37.904]   ..$ : int 0
[10:59:37.904]   ..$ : int 0
[10:59:37.904]   ..$ : int 0
[10:59:37.904]   ..$ : int 0
[10:59:37.904]  $ ...future.seeds_ii       :List of 5
[10:59:37.904]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:59:37.904]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:59:37.904]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:59:37.904]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:59:37.904]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:59:37.904]  $ ...future.globals.maxSize: NULL
[10:59:37.904]  - attr(*, "where")=List of 5
[10:59:37.904]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:37.904]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:37.904]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:37.904]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:37.904]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:37.904]  - attr(*, "resolved")= logi FALSE
[10:59:37.904]  - attr(*, "total_size")= num 7184
[10:59:37.904]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.904]  - attr(*, "already-done")= logi TRUE
[10:59:37.912] - reassign environment for ‘...future.FUN’
[10:59:37.912] - copied ‘...future.FUN’ to environment
[10:59:37.912] - copied ‘future.call.arguments’ to environment
[10:59:37.912] - copied ‘...future.elements_ii’ to environment
[10:59:37.912] - copied ‘...future.seeds_ii’ to environment
[10:59:37.912] - copied ‘...future.globals.maxSize’ to environment
[10:59:37.912] assign_globals() ... done
[10:59:37.912] plan(): Setting new future strategy stack:
[10:59:37.912] List of future strategies:
[10:59:37.912] 1. sequential:
[10:59:37.912]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.912]    - tweaked: FALSE
[10:59:37.912]    - call: NULL
[10:59:37.913] plan(): nbrOfWorkers() = 1
[10:59:37.913] plan(): Setting new future strategy stack:
[10:59:37.914] List of future strategies:
[10:59:37.914] 1. sequential:
[10:59:37.914]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.914]    - tweaked: FALSE
[10:59:37.914]    - call: plan(strategy)
[10:59:37.914] plan(): nbrOfWorkers() = 1
[10:59:37.914] SequentialFuture started (and completed)
[10:59:37.914] - Launch lazy future ... done
[10:59:37.914] run() for ‘SequentialFuture’ ... done
[10:59:37.914] Created future:
[10:59:37.914] SequentialFuture:
[10:59:37.914] Label: ‘future_replicate-1’
[10:59:37.914] Expression:
[10:59:37.914] {
[10:59:37.914]     do.call(function(...) {
[10:59:37.914]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.914]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:37.914]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.914]             on.exit(options(oopts), add = TRUE)
[10:59:37.914]         }
[10:59:37.914]         {
[10:59:37.914]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:37.914]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.914]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.914]                   envir = globalenv(), inherits = FALSE)
[10:59:37.914]                 ...future.FUN(...future.X_jj, ...)
[10:59:37.914]             })
[10:59:37.914]         }
[10:59:37.914]     }, args = future.call.arguments)
[10:59:37.914] }
[10:59:37.914] Lazy evaluation: FALSE
[10:59:37.914] Asynchronous evaluation: FALSE
[10:59:37.914] Local evaluation: TRUE
[10:59:37.914] Environment: R_GlobalEnv
[10:59:37.914] Capture standard output: TRUE
[10:59:37.914] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:37.914] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:37.914] Packages: <none>
[10:59:37.914] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:37.914] Resolved: TRUE
[10:59:37.914] Value: 91 bytes of class ‘list’
[10:59:37.914] Early signaling: FALSE
[10:59:37.914] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:37.914] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:37.915] Chunk #1 of 1 ... DONE
[10:59:37.915] Launching 1 futures (chunks) ... DONE
[10:59:37.915] Resolving 1 futures (chunks) ...
[10:59:37.915] resolve() on list ...
[10:59:37.916]  recursive: 0
[10:59:37.916]  length: 1
[10:59:37.916] 
[10:59:37.916] resolved() for ‘SequentialFuture’ ...
[10:59:37.916] - state: ‘finished’
[10:59:37.916] - run: TRUE
[10:59:37.916] - result: ‘FutureResult’
[10:59:37.916] resolved() for ‘SequentialFuture’ ... done
[10:59:37.916] Future #1
[10:59:37.916] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:59:37.916] - nx: 1
[10:59:37.916] - relay: TRUE
[10:59:37.917] - stdout: TRUE
[10:59:37.917] - signal: TRUE
[10:59:37.917] - resignal: FALSE
[10:59:37.917] - force: TRUE
[10:59:37.917] - relayed: [n=1] FALSE
[10:59:37.917] - queued futures: [n=1] FALSE
[10:59:37.917]  - until=1
[10:59:37.917]  - relaying element #1
[10:59:37.917] - relayed: [n=1] TRUE
[10:59:37.917] - queued futures: [n=1] TRUE
[10:59:37.917] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:59:37.917]  length: 0 (resolved future 1)
[10:59:37.918] Relaying remaining futures
[10:59:37.918] signalConditionsASAP(NULL, pos=0) ...
[10:59:37.918] - nx: 1
[10:59:37.918] - relay: TRUE
[10:59:37.918] - stdout: TRUE
[10:59:37.918] - signal: TRUE
[10:59:37.918] - resignal: FALSE
[10:59:37.918] - force: TRUE
[10:59:37.918] - relayed: [n=1] TRUE
[10:59:37.918] - queued futures: [n=1] TRUE
 - flush all
[10:59:37.918] - relayed: [n=1] TRUE
[10:59:37.918] - queued futures: [n=1] TRUE
[10:59:37.918] signalConditionsASAP(NULL, pos=0) ... done
[10:59:37.919] resolve() on list ... DONE
[10:59:37.919]  - Number of value chunks collected: 1
[10:59:37.919] Resolving 1 futures (chunks) ... DONE
[10:59:37.919] Reducing values from 1 chunks ...
[10:59:37.919]  - Number of values collected after concatenation: 5
[10:59:37.919]  - Number of values expected: 5
[10:59:37.919] Reducing values from 1 chunks ... DONE
[10:59:37.919] future_lapply() ... DONE
[10:59:37.919] future_lapply() ...
[10:59:37.920] Generating random seeds ...
[10:59:37.920] Generating random seed streams for 5 elements ...
[10:59:37.920] Generating random seed streams for 5 elements ... DONE
[10:59:37.920] Generating random seeds ... DONE
[10:59:37.920] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:37.921] Number of chunks: 1
[10:59:37.921] getGlobalsAndPackagesXApply() ...
[10:59:37.921]  - future.globals: TRUE
[10:59:37.921] getGlobalsAndPackages() ...
[10:59:37.921] Searching for globals...
[10:59:37.922] - globals found: [2] ‘FUN’, ‘sample’
[10:59:37.922] Searching for globals ... DONE
[10:59:37.922] Resolving globals: FALSE
[10:59:37.922] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:37.923] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:37.923] - globals: [1] ‘FUN’
[10:59:37.923] 
[10:59:37.923] getGlobalsAndPackages() ... DONE
[10:59:37.923]  - globals found/used: [n=1] ‘FUN’
[10:59:37.923]  - needed namespaces: [n=0] 
[10:59:37.923] Finding globals ... DONE
[10:59:37.923]  - use_args: TRUE
[10:59:37.923]  - Getting '...' globals ...
[10:59:37.923] resolve() on list ...
[10:59:37.924]  recursive: 0
[10:59:37.924]  length: 1
[10:59:37.924]  elements: ‘...’
[10:59:37.924]  length: 0 (resolved future 1)
[10:59:37.924] resolve() on list ... DONE
[10:59:37.924]    - '...' content: [n=0] 
[10:59:37.924] List of 1
[10:59:37.924]  $ ...: list()
[10:59:37.924]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.924]  - attr(*, "where")=List of 1
[10:59:37.924]   ..$ ...:<environment: 0x56262cb1e238> 
[10:59:37.924]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.924]  - attr(*, "resolved")= logi TRUE
[10:59:37.924]  - attr(*, "total_size")= num NA
[10:59:37.926]  - Getting '...' globals ... DONE
[10:59:37.926] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:37.926] List of 2
[10:59:37.926]  $ ...future.FUN:function (...)  
[10:59:37.926]  $ ...          : list()
[10:59:37.926]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.926]  - attr(*, "where")=List of 2
[10:59:37.926]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:37.926]   ..$ ...          :<environment: 0x56262cb1e238> 
[10:59:37.926]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.926]  - attr(*, "resolved")= logi FALSE
[10:59:37.926]  - attr(*, "total_size")= num 7184
[10:59:37.929] Packages to be attached in all futures: [n=0] 
[10:59:37.929] getGlobalsAndPackagesXApply() ... DONE
[10:59:37.929] Number of futures (= number of chunks): 1
[10:59:37.929] Launching 1 futures (chunks) ...
[10:59:37.929] Chunk #1 of 1 ...
[10:59:37.929]  - Finding globals in 'X' for chunk #1 ...
[10:59:37.929] getGlobalsAndPackages() ...
[10:59:37.930] Searching for globals...
[10:59:37.930] 
[10:59:37.930] Searching for globals ... DONE
[10:59:37.930] - globals: [0] <none>
[10:59:37.930] getGlobalsAndPackages() ... DONE
[10:59:37.930]    + additional globals found: [n=0] 
[10:59:37.930]    + additional namespaces needed: [n=0] 
[10:59:37.930]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:37.930]  - seeds: [5] <seeds>
[10:59:37.930]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.931] getGlobalsAndPackages() ...
[10:59:37.931] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.931] Resolving globals: FALSE
[10:59:37.931] Tweak future expression to call with '...' arguments ...
[10:59:37.931] {
[10:59:37.931]     do.call(function(...) {
[10:59:37.931]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.931]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:37.931]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.931]             on.exit(options(oopts), add = TRUE)
[10:59:37.931]         }
[10:59:37.931]         {
[10:59:37.931]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:37.931]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.931]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.931]                   envir = globalenv(), inherits = FALSE)
[10:59:37.931]                 ...future.FUN(...future.X_jj, ...)
[10:59:37.931]             })
[10:59:37.931]         }
[10:59:37.931]     }, args = future.call.arguments)
[10:59:37.931] }
[10:59:37.931] Tweak future expression to call with '...' arguments ... DONE
[10:59:37.931] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.932] 
[10:59:37.932] getGlobalsAndPackages() ... DONE
[10:59:37.932] run() for ‘Future’ ...
[10:59:37.932] - state: ‘created’
[10:59:37.932] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:59:37.932] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:37.932] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:59:37.933]   - Field: ‘label’
[10:59:37.933]   - Field: ‘local’
[10:59:37.933]   - Field: ‘owner’
[10:59:37.933]   - Field: ‘envir’
[10:59:37.934]   - Field: ‘packages’
[10:59:37.934]   - Field: ‘gc’
[10:59:37.934]   - Field: ‘conditions’
[10:59:37.934]   - Field: ‘expr’
[10:59:37.934]   - Field: ‘uuid’
[10:59:37.934]   - Field: ‘seed’
[10:59:37.934]   - Field: ‘version’
[10:59:37.934]   - Field: ‘result’
[10:59:37.934]   - Field: ‘asynchronous’
[10:59:37.934]   - Field: ‘calls’
[10:59:37.934]   - Field: ‘globals’
[10:59:37.935]   - Field: ‘stdout’
[10:59:37.935]   - Field: ‘earlySignal’
[10:59:37.935]   - Field: ‘lazy’
[10:59:37.935]   - Field: ‘state’
[10:59:37.935] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:59:37.935] - Launch lazy future ...
[10:59:37.935] Packages needed by the future expression (n = 0): <none>
[10:59:37.935] Packages needed by future strategies (n = 0): <none>
[10:59:37.936] {
[10:59:37.936]     {
[10:59:37.936]         {
[10:59:37.936]             ...future.startTime <- base::Sys.time()
[10:59:37.936]             {
[10:59:37.936]                 {
[10:59:37.936]                   {
[10:59:37.936]                     base::local({
[10:59:37.936]                       has_future <- base::requireNamespace("future", 
[10:59:37.936]                         quietly = TRUE)
[10:59:37.936]                       if (has_future) {
[10:59:37.936]                         ns <- base::getNamespace("future")
[10:59:37.936]                         version <- ns[[".package"]][["version"]]
[10:59:37.936]                         if (is.null(version)) 
[10:59:37.936]                           version <- utils::packageVersion("future")
[10:59:37.936]                       }
[10:59:37.936]                       else {
[10:59:37.936]                         version <- NULL
[10:59:37.936]                       }
[10:59:37.936]                       if (!has_future || version < "1.8.0") {
[10:59:37.936]                         info <- base::c(r_version = base::gsub("R version ", 
[10:59:37.936]                           "", base::R.version$version.string), 
[10:59:37.936]                           platform = base::sprintf("%s (%s-bit)", 
[10:59:37.936]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:37.936]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:37.936]                             "release", "version")], collapse = " "), 
[10:59:37.936]                           hostname = base::Sys.info()[["nodename"]])
[10:59:37.936]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:59:37.936]                           info)
[10:59:37.936]                         info <- base::paste(info, collapse = "; ")
[10:59:37.936]                         if (!has_future) {
[10:59:37.936]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:37.936]                             info)
[10:59:37.936]                         }
[10:59:37.936]                         else {
[10:59:37.936]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:37.936]                             info, version)
[10:59:37.936]                         }
[10:59:37.936]                         base::stop(msg)
[10:59:37.936]                       }
[10:59:37.936]                     })
[10:59:37.936]                   }
[10:59:37.936]                   ...future.strategy.old <- future::plan("list")
[10:59:37.936]                   options(future.plan = NULL)
[10:59:37.936]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:37.936]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:37.936]                 }
[10:59:37.936]                 ...future.workdir <- getwd()
[10:59:37.936]             }
[10:59:37.936]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:37.936]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:37.936]         }
[10:59:37.936]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:37.936]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:59:37.936]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:37.936]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:37.936]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:37.936]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:37.936]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:37.936]             base::names(...future.oldOptions))
[10:59:37.936]     }
[10:59:37.936]     if (FALSE) {
[10:59:37.936]     }
[10:59:37.936]     else {
[10:59:37.936]         if (TRUE) {
[10:59:37.936]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:37.936]                 open = "w")
[10:59:37.936]         }
[10:59:37.936]         else {
[10:59:37.936]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:37.936]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:37.936]         }
[10:59:37.936]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:37.936]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:37.936]             base::sink(type = "output", split = FALSE)
[10:59:37.936]             base::close(...future.stdout)
[10:59:37.936]         }, add = TRUE)
[10:59:37.936]     }
[10:59:37.936]     ...future.frame <- base::sys.nframe()
[10:59:37.936]     ...future.conditions <- base::list()
[10:59:37.936]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:37.936]     if (FALSE) {
[10:59:37.936]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:37.936]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:37.936]     }
[10:59:37.936]     ...future.result <- base::tryCatch({
[10:59:37.936]         base::withCallingHandlers({
[10:59:37.936]             ...future.value <- base::withVisible(base::local({
[10:59:37.936]                 do.call(function(...) {
[10:59:37.936]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.936]                   if (!identical(...future.globals.maxSize.org, 
[10:59:37.936]                     ...future.globals.maxSize)) {
[10:59:37.936]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.936]                     on.exit(options(oopts), add = TRUE)
[10:59:37.936]                   }
[10:59:37.936]                   {
[10:59:37.936]                     lapply(seq_along(...future.elements_ii), 
[10:59:37.936]                       FUN = function(jj) {
[10:59:37.936]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.936]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.936]                           envir = globalenv(), inherits = FALSE)
[10:59:37.936]                         ...future.FUN(...future.X_jj, ...)
[10:59:37.936]                       })
[10:59:37.936]                   }
[10:59:37.936]                 }, args = future.call.arguments)
[10:59:37.936]             }))
[10:59:37.936]             future::FutureResult(value = ...future.value$value, 
[10:59:37.936]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:37.936]                   ...future.rng), globalenv = if (FALSE) 
[10:59:37.936]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:37.936]                     ...future.globalenv.names))
[10:59:37.936]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:37.936]         }, condition = base::local({
[10:59:37.936]             c <- base::c
[10:59:37.936]             inherits <- base::inherits
[10:59:37.936]             invokeRestart <- base::invokeRestart
[10:59:37.936]             length <- base::length
[10:59:37.936]             list <- base::list
[10:59:37.936]             seq.int <- base::seq.int
[10:59:37.936]             signalCondition <- base::signalCondition
[10:59:37.936]             sys.calls <- base::sys.calls
[10:59:37.936]             `[[` <- base::`[[`
[10:59:37.936]             `+` <- base::`+`
[10:59:37.936]             `<<-` <- base::`<<-`
[10:59:37.936]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:37.936]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:37.936]                   3L)]
[10:59:37.936]             }
[10:59:37.936]             function(cond) {
[10:59:37.936]                 is_error <- inherits(cond, "error")
[10:59:37.936]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:37.936]                   NULL)
[10:59:37.936]                 if (is_error) {
[10:59:37.936]                   sessionInformation <- function() {
[10:59:37.936]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:37.936]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:37.936]                       search = base::search(), system = base::Sys.info())
[10:59:37.936]                   }
[10:59:37.936]                   ...future.conditions[[length(...future.conditions) + 
[10:59:37.936]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:37.936]                     cond$call), session = sessionInformation(), 
[10:59:37.936]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:37.936]                   signalCondition(cond)
[10:59:37.936]                 }
[10:59:37.936]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:37.936]                 "immediateCondition"))) {
[10:59:37.936]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:37.936]                   ...future.conditions[[length(...future.conditions) + 
[10:59:37.936]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:37.936]                   if (TRUE && !signal) {
[10:59:37.936]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:37.936]                     {
[10:59:37.936]                       inherits <- base::inherits
[10:59:37.936]                       invokeRestart <- base::invokeRestart
[10:59:37.936]                       is.null <- base::is.null
[10:59:37.936]                       muffled <- FALSE
[10:59:37.936]                       if (inherits(cond, "message")) {
[10:59:37.936]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:37.936]                         if (muffled) 
[10:59:37.936]                           invokeRestart("muffleMessage")
[10:59:37.936]                       }
[10:59:37.936]                       else if (inherits(cond, "warning")) {
[10:59:37.936]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:37.936]                         if (muffled) 
[10:59:37.936]                           invokeRestart("muffleWarning")
[10:59:37.936]                       }
[10:59:37.936]                       else if (inherits(cond, "condition")) {
[10:59:37.936]                         if (!is.null(pattern)) {
[10:59:37.936]                           computeRestarts <- base::computeRestarts
[10:59:37.936]                           grepl <- base::grepl
[10:59:37.936]                           restarts <- computeRestarts(cond)
[10:59:37.936]                           for (restart in restarts) {
[10:59:37.936]                             name <- restart$name
[10:59:37.936]                             if (is.null(name)) 
[10:59:37.936]                               next
[10:59:37.936]                             if (!grepl(pattern, name)) 
[10:59:37.936]                               next
[10:59:37.936]                             invokeRestart(restart)
[10:59:37.936]                             muffled <- TRUE
[10:59:37.936]                             break
[10:59:37.936]                           }
[10:59:37.936]                         }
[10:59:37.936]                       }
[10:59:37.936]                       invisible(muffled)
[10:59:37.936]                     }
[10:59:37.936]                     muffleCondition(cond, pattern = "^muffle")
[10:59:37.936]                   }
[10:59:37.936]                 }
[10:59:37.936]                 else {
[10:59:37.936]                   if (TRUE) {
[10:59:37.936]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:37.936]                     {
[10:59:37.936]                       inherits <- base::inherits
[10:59:37.936]                       invokeRestart <- base::invokeRestart
[10:59:37.936]                       is.null <- base::is.null
[10:59:37.936]                       muffled <- FALSE
[10:59:37.936]                       if (inherits(cond, "message")) {
[10:59:37.936]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:37.936]                         if (muffled) 
[10:59:37.936]                           invokeRestart("muffleMessage")
[10:59:37.936]                       }
[10:59:37.936]                       else if (inherits(cond, "warning")) {
[10:59:37.936]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:37.936]                         if (muffled) 
[10:59:37.936]                           invokeRestart("muffleWarning")
[10:59:37.936]                       }
[10:59:37.936]                       else if (inherits(cond, "condition")) {
[10:59:37.936]                         if (!is.null(pattern)) {
[10:59:37.936]                           computeRestarts <- base::computeRestarts
[10:59:37.936]                           grepl <- base::grepl
[10:59:37.936]                           restarts <- computeRestarts(cond)
[10:59:37.936]                           for (restart in restarts) {
[10:59:37.936]                             name <- restart$name
[10:59:37.936]                             if (is.null(name)) 
[10:59:37.936]                               next
[10:59:37.936]                             if (!grepl(pattern, name)) 
[10:59:37.936]                               next
[10:59:37.936]                             invokeRestart(restart)
[10:59:37.936]                             muffled <- TRUE
[10:59:37.936]                             break
[10:59:37.936]                           }
[10:59:37.936]                         }
[10:59:37.936]                       }
[10:59:37.936]                       invisible(muffled)
[10:59:37.936]                     }
[10:59:37.936]                     muffleCondition(cond, pattern = "^muffle")
[10:59:37.936]                   }
[10:59:37.936]                 }
[10:59:37.936]             }
[10:59:37.936]         }))
[10:59:37.936]     }, error = function(ex) {
[10:59:37.936]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:37.936]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:37.936]                 ...future.rng), started = ...future.startTime, 
[10:59:37.936]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:37.936]             version = "1.8"), class = "FutureResult")
[10:59:37.936]     }, finally = {
[10:59:37.936]         if (!identical(...future.workdir, getwd())) 
[10:59:37.936]             setwd(...future.workdir)
[10:59:37.936]         {
[10:59:37.936]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:37.936]                 ...future.oldOptions$nwarnings <- NULL
[10:59:37.936]             }
[10:59:37.936]             base::options(...future.oldOptions)
[10:59:37.936]             if (.Platform$OS.type == "windows") {
[10:59:37.936]                 old_names <- names(...future.oldEnvVars)
[10:59:37.936]                 envs <- base::Sys.getenv()
[10:59:37.936]                 names <- names(envs)
[10:59:37.936]                 common <- intersect(names, old_names)
[10:59:37.936]                 added <- setdiff(names, old_names)
[10:59:37.936]                 removed <- setdiff(old_names, names)
[10:59:37.936]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:37.936]                   envs[common]]
[10:59:37.936]                 NAMES <- toupper(changed)
[10:59:37.936]                 args <- list()
[10:59:37.936]                 for (kk in seq_along(NAMES)) {
[10:59:37.936]                   name <- changed[[kk]]
[10:59:37.936]                   NAME <- NAMES[[kk]]
[10:59:37.936]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.936]                     next
[10:59:37.936]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:37.936]                 }
[10:59:37.936]                 NAMES <- toupper(added)
[10:59:37.936]                 for (kk in seq_along(NAMES)) {
[10:59:37.936]                   name <- added[[kk]]
[10:59:37.936]                   NAME <- NAMES[[kk]]
[10:59:37.936]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.936]                     next
[10:59:37.936]                   args[[name]] <- ""
[10:59:37.936]                 }
[10:59:37.936]                 NAMES <- toupper(removed)
[10:59:37.936]                 for (kk in seq_along(NAMES)) {
[10:59:37.936]                   name <- removed[[kk]]
[10:59:37.936]                   NAME <- NAMES[[kk]]
[10:59:37.936]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.936]                     next
[10:59:37.936]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:37.936]                 }
[10:59:37.936]                 if (length(args) > 0) 
[10:59:37.936]                   base::do.call(base::Sys.setenv, args = args)
[10:59:37.936]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:37.936]             }
[10:59:37.936]             else {
[10:59:37.936]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:37.936]             }
[10:59:37.936]             {
[10:59:37.936]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:37.936]                   0L) {
[10:59:37.936]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:37.936]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:37.936]                   base::options(opts)
[10:59:37.936]                 }
[10:59:37.936]                 {
[10:59:37.936]                   {
[10:59:37.936]                     base::assign(".Random.seed", c(10403L, 2L, 
[10:59:37.936]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:59:37.936]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:59:37.936]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:59:37.936]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:59:37.936]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:59:37.936]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:59:37.936]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:59:37.936]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:59:37.936]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:59:37.936]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:59:37.936]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:59:37.936]                     -1512233174L, -1985955764L, -425390065L, 
[10:59:37.936]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:59:37.936]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:59:37.936]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:59:37.936]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:59:37.936]                     1818328109L, -1284085436L, -1981489558L, 
[10:59:37.936]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:59:37.936]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:59:37.936]                     -1718567047L, -793788661L, -1133789126L, 
[10:59:37.936]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:59:37.936]                     -1823521982L, -1345991523L, -1672661737L, 
[10:59:37.936]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:59:37.936]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:59:37.936]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:59:37.936]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:59:37.936]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:59:37.936]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:59:37.936]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:59:37.936]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:59:37.936]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:59:37.936]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:59:37.936]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:59:37.936]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:59:37.936]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:59:37.936]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:59:37.936]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:59:37.936]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:59:37.936]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:59:37.936]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:59:37.936]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:59:37.936]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:59:37.936]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:59:37.936]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:59:37.936]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:59:37.936]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:59:37.936]                     -1119334354L, -1521015416L, -2041922421L, 
[10:59:37.936]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:59:37.936]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:59:37.936]                     1232111981L, -1801753084L, -1608606422L, 
[10:59:37.936]                     -1172096363L, 1420874031L, -1210473418L, 
[10:59:37.936]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:59:37.936]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:59:37.936]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:59:37.936]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:59:37.936]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:59:37.936]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:59:37.936]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:59:37.936]                     -332493318L, -1978392251L, -1691039632L, 
[10:59:37.936]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:59:37.936]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:59:37.936]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:59:37.936]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:59:37.936]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:59:37.936]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:59:37.936]                     -1178330196L, -687617348L, -1701912078L, 
[10:59:37.936]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:59:37.936]                     -1345416048L, 1816730492L, -1570431212L, 
[10:59:37.936]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:59:37.936]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:59:37.936]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:59:37.936]                     -1493184262L, -1943836976L, -590788308L, 
[10:59:37.936]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:59:37.936]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:59:37.936]                     1274857340L, -1205842638L, -1938479504L, 
[10:59:37.936]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:59:37.936]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:59:37.936]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:59:37.936]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:59:37.936]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:59:37.936]                     -1460751252L, 1201879444L, -1459788718L, 
[10:59:37.936]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:59:37.936]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:59:37.936]                     -420945808L, -1997735900L, -1838404552L, 
[10:59:37.936]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:59:37.936]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:59:37.936]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:59:37.936]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:59:37.936]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:59:37.936]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:59:37.936]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:59:37.936]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:59:37.936]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:59:37.936]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:59:37.936]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:59:37.936]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:59:37.936]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:59:37.936]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:59:37.936]                     -1357570110L, 1896595240L, -2066952276L, 
[10:59:37.936]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:59:37.936]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:59:37.936]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:59:37.936]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:59:37.936]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:59:37.936]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:59:37.936]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:59:37.936]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:59:37.936]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:59:37.936]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:59:37.936]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:59:37.936]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:59:37.936]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:59:37.936]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:59:37.936]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:59:37.936]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:59:37.936]                     -1365842884L, -438961294L, -1851472272L, 
[10:59:37.936]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:59:37.936]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:59:37.936]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:59:37.936]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:59:37.936]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:59:37.936]                     -594809770L, -2146766621L, -2013964635L, 
[10:59:37.936]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:59:37.936]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:59:37.936]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:59:37.936]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:59:37.936]                     -1426021878L, -1285634264L, 1507547537L, 
[10:59:37.936]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:59:37.936]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:59:37.936]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:59:37.936]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:59:37.936]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:59:37.936]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:59:37.936]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:59:37.936]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:59:37.936]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:59:37.936]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:59:37.936]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:59:37.936]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:59:37.936]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:59:37.936]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:59:37.936]                     -1604604761L, 1421229008L, -1268333714L, 
[10:59:37.936]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:59:37.936]                     -2070476623L, -2099222749L, 1141171236L, 
[10:59:37.936]                     -146426158L, -1797385433L, -1129376399L, 
[10:59:37.936]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:59:37.936]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:59:37.936]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:59:37.936]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:59:37.936]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:59:37.936]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:59:37.936]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:59:37.936]                     -1092079724L, -1765622238L, -1882554057L, 
[10:59:37.936]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:59:37.936]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:59:37.936]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:59:37.936]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:59:37.936]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:59:37.936]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:59:37.936]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:59:37.936]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:59:37.936]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:59:37.936]                       inherits = FALSE)
[10:59:37.936]                     NULL
[10:59:37.936]                   }
[10:59:37.936]                   options(future.plan = NULL)
[10:59:37.936]                   if (is.na(NA_character_)) 
[10:59:37.936]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:37.936]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:37.936]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:37.936]                     .init = FALSE)
[10:59:37.936]                 }
[10:59:37.936]             }
[10:59:37.936]         }
[10:59:37.936]     })
[10:59:37.936]     if (TRUE) {
[10:59:37.936]         base::sink(type = "output", split = FALSE)
[10:59:37.936]         if (TRUE) {
[10:59:37.936]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:37.936]         }
[10:59:37.936]         else {
[10:59:37.936]             ...future.result["stdout"] <- base::list(NULL)
[10:59:37.936]         }
[10:59:37.936]         base::close(...future.stdout)
[10:59:37.936]         ...future.stdout <- NULL
[10:59:37.936]     }
[10:59:37.936]     ...future.result$conditions <- ...future.conditions
[10:59:37.936]     ...future.result$finished <- base::Sys.time()
[10:59:37.936]     ...future.result
[10:59:37.936] }
[10:59:37.938] assign_globals() ...
[10:59:37.938] List of 5
[10:59:37.938]  $ ...future.FUN            :function (...)  
[10:59:37.938]  $ future.call.arguments    : list()
[10:59:37.938]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.938]  $ ...future.elements_ii    :List of 5
[10:59:37.938]   ..$ : int 0
[10:59:37.938]   ..$ : int 0
[10:59:37.938]   ..$ : int 0
[10:59:37.938]   ..$ : int 0
[10:59:37.938]   ..$ : int 0
[10:59:37.938]  $ ...future.seeds_ii       :List of 5
[10:59:37.938]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:59:37.938]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:59:37.938]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:59:37.938]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:59:37.938]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:59:37.938]  $ ...future.globals.maxSize: NULL
[10:59:37.938]  - attr(*, "where")=List of 5
[10:59:37.938]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:37.938]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:37.938]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:37.938]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:37.938]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:37.938]  - attr(*, "resolved")= logi FALSE
[10:59:37.938]  - attr(*, "total_size")= num 7184
[10:59:37.938]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.938]  - attr(*, "already-done")= logi TRUE
[10:59:37.945] - reassign environment for ‘...future.FUN’
[10:59:37.945] - copied ‘...future.FUN’ to environment
[10:59:37.945] - copied ‘future.call.arguments’ to environment
[10:59:37.945] - copied ‘...future.elements_ii’ to environment
[10:59:37.945] - copied ‘...future.seeds_ii’ to environment
[10:59:37.945] - copied ‘...future.globals.maxSize’ to environment
[10:59:37.945] assign_globals() ... done
[10:59:37.946] plan(): Setting new future strategy stack:
[10:59:37.946] List of future strategies:
[10:59:37.946] 1. sequential:
[10:59:37.946]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.946]    - tweaked: FALSE
[10:59:37.946]    - call: NULL
[10:59:37.946] plan(): nbrOfWorkers() = 1
[10:59:37.947] plan(): Setting new future strategy stack:
[10:59:37.947] List of future strategies:
[10:59:37.947] 1. sequential:
[10:59:37.947]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.947]    - tweaked: FALSE
[10:59:37.947]    - call: plan(strategy)
[10:59:37.948] plan(): nbrOfWorkers() = 1
[10:59:37.948] SequentialFuture started (and completed)
[10:59:37.948] - Launch lazy future ... done
[10:59:37.948] run() for ‘SequentialFuture’ ... done
[10:59:37.948] Created future:
[10:59:37.948] SequentialFuture:
[10:59:37.948] Label: ‘future_replicate-1’
[10:59:37.948] Expression:
[10:59:37.948] {
[10:59:37.948]     do.call(function(...) {
[10:59:37.948]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.948]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:37.948]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.948]             on.exit(options(oopts), add = TRUE)
[10:59:37.948]         }
[10:59:37.948]         {
[10:59:37.948]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:37.948]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.948]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.948]                   envir = globalenv(), inherits = FALSE)
[10:59:37.948]                 ...future.FUN(...future.X_jj, ...)
[10:59:37.948]             })
[10:59:37.948]         }
[10:59:37.948]     }, args = future.call.arguments)
[10:59:37.948] }
[10:59:37.948] Lazy evaluation: FALSE
[10:59:37.948] Asynchronous evaluation: FALSE
[10:59:37.948] Local evaluation: TRUE
[10:59:37.948] Environment: R_GlobalEnv
[10:59:37.948] Capture standard output: TRUE
[10:59:37.948] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:37.948] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:37.948] Packages: <none>
[10:59:37.948] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:37.948] Resolved: TRUE
[10:59:37.948] Value: 91 bytes of class ‘list’
[10:59:37.948] Early signaling: FALSE
[10:59:37.948] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:37.948] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:37.949] Chunk #1 of 1 ... DONE
[10:59:37.949] Launching 1 futures (chunks) ... DONE
[10:59:37.949] Resolving 1 futures (chunks) ...
[10:59:37.949] resolve() on list ...
[10:59:37.949]  recursive: 0
[10:59:37.949]  length: 1
[10:59:37.949] 
[10:59:37.949] resolved() for ‘SequentialFuture’ ...
[10:59:37.949] - state: ‘finished’
[10:59:37.950] - run: TRUE
[10:59:37.950] - result: ‘FutureResult’
[10:59:37.950] resolved() for ‘SequentialFuture’ ... done
[10:59:37.950] Future #1
[10:59:37.950] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:59:37.950] - nx: 1
[10:59:37.950] - relay: TRUE
[10:59:37.950] - stdout: TRUE
[10:59:37.950] - signal: TRUE
[10:59:37.950] - resignal: FALSE
[10:59:37.950] - force: TRUE
[10:59:37.950] - relayed: [n=1] FALSE
[10:59:37.950] - queued futures: [n=1] FALSE
[10:59:37.951]  - until=1
[10:59:37.951]  - relaying element #1
[10:59:37.951] - relayed: [n=1] TRUE
[10:59:37.951] - queued futures: [n=1] TRUE
[10:59:37.951] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:59:37.951]  length: 0 (resolved future 1)
[10:59:37.951] Relaying remaining futures
[10:59:37.951] signalConditionsASAP(NULL, pos=0) ...
[10:59:37.951] - nx: 1
[10:59:37.951] - relay: TRUE
[10:59:37.951] - stdout: TRUE
[10:59:37.951] - signal: TRUE
[10:59:37.952] - resignal: FALSE
[10:59:37.952] - force: TRUE
[10:59:37.952] - relayed: [n=1] TRUE
[10:59:37.952] - queued futures: [n=1] TRUE
 - flush all
[10:59:37.952] - relayed: [n=1] TRUE
[10:59:37.952] - queued futures: [n=1] TRUE
[10:59:37.952] signalConditionsASAP(NULL, pos=0) ... done
[10:59:37.952] resolve() on list ... DONE
[10:59:37.952]  - Number of value chunks collected: 1
[10:59:37.952] Resolving 1 futures (chunks) ... DONE
[10:59:37.952] Reducing values from 1 chunks ...
[10:59:37.952]  - Number of values collected after concatenation: 5
[10:59:37.953]  - Number of values expected: 5
[10:59:37.953] Reducing values from 1 chunks ... DONE
[10:59:37.953] future_lapply() ... DONE
[10:59:37.953] future_lapply() ...
[10:59:37.953] Generating random seeds ...
[10:59:37.954] Generating random seed streams for 5 elements ...
[10:59:37.954] Generating random seed streams for 5 elements ... DONE
[10:59:37.954] Generating random seeds ... DONE
[10:59:37.954] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:37.954] Number of chunks: 1
[10:59:37.954] getGlobalsAndPackagesXApply() ...
[10:59:37.954]  - future.globals: TRUE
[10:59:37.955] getGlobalsAndPackages() ...
[10:59:37.955] Searching for globals...
[10:59:37.956] - globals found: [2] ‘FUN’, ‘sample’
[10:59:37.956] Searching for globals ... DONE
[10:59:37.956] Resolving globals: FALSE
[10:59:37.956] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:37.956] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:37.956] - globals: [1] ‘FUN’
[10:59:37.957] 
[10:59:37.957] getGlobalsAndPackages() ... DONE
[10:59:37.957]  - globals found/used: [n=1] ‘FUN’
[10:59:37.957]  - needed namespaces: [n=0] 
[10:59:37.957] Finding globals ... DONE
[10:59:37.957]  - use_args: TRUE
[10:59:37.958]  - Getting '...' globals ...
[10:59:37.958] resolve() on list ...
[10:59:37.958]  recursive: 0
[10:59:37.958]  length: 1
[10:59:37.959]  elements: ‘...’
[10:59:37.959]  length: 0 (resolved future 1)
[10:59:37.959] resolve() on list ... DONE
[10:59:37.959]    - '...' content: [n=0] 
[10:59:37.959] List of 1
[10:59:37.959]  $ ...: list()
[10:59:37.959]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.959]  - attr(*, "where")=List of 1
[10:59:37.959]   ..$ ...:<environment: 0x56262ec82ae0> 
[10:59:37.959]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.959]  - attr(*, "resolved")= logi TRUE
[10:59:37.959]  - attr(*, "total_size")= num NA
[10:59:37.961]  - Getting '...' globals ... DONE
[10:59:37.961] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:37.961] List of 2
[10:59:37.961]  $ ...future.FUN:function (...)  
[10:59:37.961]  $ ...          : list()
[10:59:37.961]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.961]  - attr(*, "where")=List of 2
[10:59:37.961]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:37.961]   ..$ ...          :<environment: 0x56262ec82ae0> 
[10:59:37.961]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.961]  - attr(*, "resolved")= logi FALSE
[10:59:37.961]  - attr(*, "total_size")= num 7184
[10:59:37.964] Packages to be attached in all futures: [n=0] 
[10:59:37.964] getGlobalsAndPackagesXApply() ... DONE
[10:59:37.964] Number of futures (= number of chunks): 1
[10:59:37.964] Launching 1 futures (chunks) ...
[10:59:37.964] Chunk #1 of 1 ...
[10:59:37.964]  - Finding globals in 'X' for chunk #1 ...
[10:59:37.964] getGlobalsAndPackages() ...
[10:59:37.965] Searching for globals...
[10:59:37.965] 
[10:59:37.965] Searching for globals ... DONE
[10:59:37.965] - globals: [0] <none>
[10:59:37.965] getGlobalsAndPackages() ... DONE
[10:59:37.965]    + additional globals found: [n=0] 
[10:59:37.965]    + additional namespaces needed: [n=0] 
[10:59:37.965]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:37.965]  - seeds: [5] <seeds>
[10:59:37.965]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.965] getGlobalsAndPackages() ...
[10:59:37.966] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.966] Resolving globals: FALSE
[10:59:37.966] Tweak future expression to call with '...' arguments ...
[10:59:37.966] {
[10:59:37.966]     do.call(function(...) {
[10:59:37.966]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.966]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:37.966]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.966]             on.exit(options(oopts), add = TRUE)
[10:59:37.966]         }
[10:59:37.966]         {
[10:59:37.966]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:37.966]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.966]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.966]                   envir = globalenv(), inherits = FALSE)
[10:59:37.966]                 ...future.FUN(...future.X_jj, ...)
[10:59:37.966]             })
[10:59:37.966]         }
[10:59:37.966]     }, args = future.call.arguments)
[10:59:37.966] }
[10:59:37.966] Tweak future expression to call with '...' arguments ... DONE
[10:59:37.966] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.967] 
[10:59:37.967] getGlobalsAndPackages() ... DONE
[10:59:37.967] run() for ‘Future’ ...
[10:59:37.967] - state: ‘created’
[10:59:37.967] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:59:37.967] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:37.967] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:59:37.967]   - Field: ‘label’
[10:59:37.968]   - Field: ‘local’
[10:59:37.968]   - Field: ‘owner’
[10:59:37.968]   - Field: ‘envir’
[10:59:37.968]   - Field: ‘packages’
[10:59:37.968]   - Field: ‘gc’
[10:59:37.968]   - Field: ‘conditions’
[10:59:37.968]   - Field: ‘expr’
[10:59:37.968]   - Field: ‘uuid’
[10:59:37.968]   - Field: ‘seed’
[10:59:37.968]   - Field: ‘version’
[10:59:37.968]   - Field: ‘result’
[10:59:37.968]   - Field: ‘asynchronous’
[10:59:37.968]   - Field: ‘calls’
[10:59:37.969]   - Field: ‘globals’
[10:59:37.969]   - Field: ‘stdout’
[10:59:37.969]   - Field: ‘earlySignal’
[10:59:37.969]   - Field: ‘lazy’
[10:59:37.969]   - Field: ‘state’
[10:59:37.969] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:59:37.969] - Launch lazy future ...
[10:59:37.969] Packages needed by the future expression (n = 0): <none>
[10:59:37.969] Packages needed by future strategies (n = 0): <none>
[10:59:37.970] {
[10:59:37.970]     {
[10:59:37.970]         {
[10:59:37.970]             ...future.startTime <- base::Sys.time()
[10:59:37.970]             {
[10:59:37.970]                 {
[10:59:37.970]                   {
[10:59:37.970]                     base::local({
[10:59:37.970]                       has_future <- base::requireNamespace("future", 
[10:59:37.970]                         quietly = TRUE)
[10:59:37.970]                       if (has_future) {
[10:59:37.970]                         ns <- base::getNamespace("future")
[10:59:37.970]                         version <- ns[[".package"]][["version"]]
[10:59:37.970]                         if (is.null(version)) 
[10:59:37.970]                           version <- utils::packageVersion("future")
[10:59:37.970]                       }
[10:59:37.970]                       else {
[10:59:37.970]                         version <- NULL
[10:59:37.970]                       }
[10:59:37.970]                       if (!has_future || version < "1.8.0") {
[10:59:37.970]                         info <- base::c(r_version = base::gsub("R version ", 
[10:59:37.970]                           "", base::R.version$version.string), 
[10:59:37.970]                           platform = base::sprintf("%s (%s-bit)", 
[10:59:37.970]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:37.970]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:37.970]                             "release", "version")], collapse = " "), 
[10:59:37.970]                           hostname = base::Sys.info()[["nodename"]])
[10:59:37.970]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:59:37.970]                           info)
[10:59:37.970]                         info <- base::paste(info, collapse = "; ")
[10:59:37.970]                         if (!has_future) {
[10:59:37.970]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:37.970]                             info)
[10:59:37.970]                         }
[10:59:37.970]                         else {
[10:59:37.970]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:37.970]                             info, version)
[10:59:37.970]                         }
[10:59:37.970]                         base::stop(msg)
[10:59:37.970]                       }
[10:59:37.970]                     })
[10:59:37.970]                   }
[10:59:37.970]                   ...future.strategy.old <- future::plan("list")
[10:59:37.970]                   options(future.plan = NULL)
[10:59:37.970]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:37.970]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:37.970]                 }
[10:59:37.970]                 ...future.workdir <- getwd()
[10:59:37.970]             }
[10:59:37.970]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:37.970]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:37.970]         }
[10:59:37.970]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:37.970]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:59:37.970]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:37.970]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:37.970]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:37.970]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:37.970]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:37.970]             base::names(...future.oldOptions))
[10:59:37.970]     }
[10:59:37.970]     if (FALSE) {
[10:59:37.970]     }
[10:59:37.970]     else {
[10:59:37.970]         if (TRUE) {
[10:59:37.970]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:37.970]                 open = "w")
[10:59:37.970]         }
[10:59:37.970]         else {
[10:59:37.970]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:37.970]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:37.970]         }
[10:59:37.970]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:37.970]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:37.970]             base::sink(type = "output", split = FALSE)
[10:59:37.970]             base::close(...future.stdout)
[10:59:37.970]         }, add = TRUE)
[10:59:37.970]     }
[10:59:37.970]     ...future.frame <- base::sys.nframe()
[10:59:37.970]     ...future.conditions <- base::list()
[10:59:37.970]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:37.970]     if (FALSE) {
[10:59:37.970]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:37.970]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:37.970]     }
[10:59:37.970]     ...future.result <- base::tryCatch({
[10:59:37.970]         base::withCallingHandlers({
[10:59:37.970]             ...future.value <- base::withVisible(base::local({
[10:59:37.970]                 do.call(function(...) {
[10:59:37.970]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.970]                   if (!identical(...future.globals.maxSize.org, 
[10:59:37.970]                     ...future.globals.maxSize)) {
[10:59:37.970]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.970]                     on.exit(options(oopts), add = TRUE)
[10:59:37.970]                   }
[10:59:37.970]                   {
[10:59:37.970]                     lapply(seq_along(...future.elements_ii), 
[10:59:37.970]                       FUN = function(jj) {
[10:59:37.970]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.970]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.970]                           envir = globalenv(), inherits = FALSE)
[10:59:37.970]                         ...future.FUN(...future.X_jj, ...)
[10:59:37.970]                       })
[10:59:37.970]                   }
[10:59:37.970]                 }, args = future.call.arguments)
[10:59:37.970]             }))
[10:59:37.970]             future::FutureResult(value = ...future.value$value, 
[10:59:37.970]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:37.970]                   ...future.rng), globalenv = if (FALSE) 
[10:59:37.970]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:37.970]                     ...future.globalenv.names))
[10:59:37.970]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:37.970]         }, condition = base::local({
[10:59:37.970]             c <- base::c
[10:59:37.970]             inherits <- base::inherits
[10:59:37.970]             invokeRestart <- base::invokeRestart
[10:59:37.970]             length <- base::length
[10:59:37.970]             list <- base::list
[10:59:37.970]             seq.int <- base::seq.int
[10:59:37.970]             signalCondition <- base::signalCondition
[10:59:37.970]             sys.calls <- base::sys.calls
[10:59:37.970]             `[[` <- base::`[[`
[10:59:37.970]             `+` <- base::`+`
[10:59:37.970]             `<<-` <- base::`<<-`
[10:59:37.970]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:37.970]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:37.970]                   3L)]
[10:59:37.970]             }
[10:59:37.970]             function(cond) {
[10:59:37.970]                 is_error <- inherits(cond, "error")
[10:59:37.970]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:37.970]                   NULL)
[10:59:37.970]                 if (is_error) {
[10:59:37.970]                   sessionInformation <- function() {
[10:59:37.970]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:37.970]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:37.970]                       search = base::search(), system = base::Sys.info())
[10:59:37.970]                   }
[10:59:37.970]                   ...future.conditions[[length(...future.conditions) + 
[10:59:37.970]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:37.970]                     cond$call), session = sessionInformation(), 
[10:59:37.970]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:37.970]                   signalCondition(cond)
[10:59:37.970]                 }
[10:59:37.970]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:37.970]                 "immediateCondition"))) {
[10:59:37.970]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:37.970]                   ...future.conditions[[length(...future.conditions) + 
[10:59:37.970]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:37.970]                   if (TRUE && !signal) {
[10:59:37.970]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:37.970]                     {
[10:59:37.970]                       inherits <- base::inherits
[10:59:37.970]                       invokeRestart <- base::invokeRestart
[10:59:37.970]                       is.null <- base::is.null
[10:59:37.970]                       muffled <- FALSE
[10:59:37.970]                       if (inherits(cond, "message")) {
[10:59:37.970]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:37.970]                         if (muffled) 
[10:59:37.970]                           invokeRestart("muffleMessage")
[10:59:37.970]                       }
[10:59:37.970]                       else if (inherits(cond, "warning")) {
[10:59:37.970]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:37.970]                         if (muffled) 
[10:59:37.970]                           invokeRestart("muffleWarning")
[10:59:37.970]                       }
[10:59:37.970]                       else if (inherits(cond, "condition")) {
[10:59:37.970]                         if (!is.null(pattern)) {
[10:59:37.970]                           computeRestarts <- base::computeRestarts
[10:59:37.970]                           grepl <- base::grepl
[10:59:37.970]                           restarts <- computeRestarts(cond)
[10:59:37.970]                           for (restart in restarts) {
[10:59:37.970]                             name <- restart$name
[10:59:37.970]                             if (is.null(name)) 
[10:59:37.970]                               next
[10:59:37.970]                             if (!grepl(pattern, name)) 
[10:59:37.970]                               next
[10:59:37.970]                             invokeRestart(restart)
[10:59:37.970]                             muffled <- TRUE
[10:59:37.970]                             break
[10:59:37.970]                           }
[10:59:37.970]                         }
[10:59:37.970]                       }
[10:59:37.970]                       invisible(muffled)
[10:59:37.970]                     }
[10:59:37.970]                     muffleCondition(cond, pattern = "^muffle")
[10:59:37.970]                   }
[10:59:37.970]                 }
[10:59:37.970]                 else {
[10:59:37.970]                   if (TRUE) {
[10:59:37.970]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:37.970]                     {
[10:59:37.970]                       inherits <- base::inherits
[10:59:37.970]                       invokeRestart <- base::invokeRestart
[10:59:37.970]                       is.null <- base::is.null
[10:59:37.970]                       muffled <- FALSE
[10:59:37.970]                       if (inherits(cond, "message")) {
[10:59:37.970]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:37.970]                         if (muffled) 
[10:59:37.970]                           invokeRestart("muffleMessage")
[10:59:37.970]                       }
[10:59:37.970]                       else if (inherits(cond, "warning")) {
[10:59:37.970]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:37.970]                         if (muffled) 
[10:59:37.970]                           invokeRestart("muffleWarning")
[10:59:37.970]                       }
[10:59:37.970]                       else if (inherits(cond, "condition")) {
[10:59:37.970]                         if (!is.null(pattern)) {
[10:59:37.970]                           computeRestarts <- base::computeRestarts
[10:59:37.970]                           grepl <- base::grepl
[10:59:37.970]                           restarts <- computeRestarts(cond)
[10:59:37.970]                           for (restart in restarts) {
[10:59:37.970]                             name <- restart$name
[10:59:37.970]                             if (is.null(name)) 
[10:59:37.970]                               next
[10:59:37.970]                             if (!grepl(pattern, name)) 
[10:59:37.970]                               next
[10:59:37.970]                             invokeRestart(restart)
[10:59:37.970]                             muffled <- TRUE
[10:59:37.970]                             break
[10:59:37.970]                           }
[10:59:37.970]                         }
[10:59:37.970]                       }
[10:59:37.970]                       invisible(muffled)
[10:59:37.970]                     }
[10:59:37.970]                     muffleCondition(cond, pattern = "^muffle")
[10:59:37.970]                   }
[10:59:37.970]                 }
[10:59:37.970]             }
[10:59:37.970]         }))
[10:59:37.970]     }, error = function(ex) {
[10:59:37.970]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:37.970]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:37.970]                 ...future.rng), started = ...future.startTime, 
[10:59:37.970]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:37.970]             version = "1.8"), class = "FutureResult")
[10:59:37.970]     }, finally = {
[10:59:37.970]         if (!identical(...future.workdir, getwd())) 
[10:59:37.970]             setwd(...future.workdir)
[10:59:37.970]         {
[10:59:37.970]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:37.970]                 ...future.oldOptions$nwarnings <- NULL
[10:59:37.970]             }
[10:59:37.970]             base::options(...future.oldOptions)
[10:59:37.970]             if (.Platform$OS.type == "windows") {
[10:59:37.970]                 old_names <- names(...future.oldEnvVars)
[10:59:37.970]                 envs <- base::Sys.getenv()
[10:59:37.970]                 names <- names(envs)
[10:59:37.970]                 common <- intersect(names, old_names)
[10:59:37.970]                 added <- setdiff(names, old_names)
[10:59:37.970]                 removed <- setdiff(old_names, names)
[10:59:37.970]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:37.970]                   envs[common]]
[10:59:37.970]                 NAMES <- toupper(changed)
[10:59:37.970]                 args <- list()
[10:59:37.970]                 for (kk in seq_along(NAMES)) {
[10:59:37.970]                   name <- changed[[kk]]
[10:59:37.970]                   NAME <- NAMES[[kk]]
[10:59:37.970]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.970]                     next
[10:59:37.970]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:37.970]                 }
[10:59:37.970]                 NAMES <- toupper(added)
[10:59:37.970]                 for (kk in seq_along(NAMES)) {
[10:59:37.970]                   name <- added[[kk]]
[10:59:37.970]                   NAME <- NAMES[[kk]]
[10:59:37.970]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.970]                     next
[10:59:37.970]                   args[[name]] <- ""
[10:59:37.970]                 }
[10:59:37.970]                 NAMES <- toupper(removed)
[10:59:37.970]                 for (kk in seq_along(NAMES)) {
[10:59:37.970]                   name <- removed[[kk]]
[10:59:37.970]                   NAME <- NAMES[[kk]]
[10:59:37.970]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:37.970]                     next
[10:59:37.970]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:37.970]                 }
[10:59:37.970]                 if (length(args) > 0) 
[10:59:37.970]                   base::do.call(base::Sys.setenv, args = args)
[10:59:37.970]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:37.970]             }
[10:59:37.970]             else {
[10:59:37.970]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:37.970]             }
[10:59:37.970]             {
[10:59:37.970]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:37.970]                   0L) {
[10:59:37.970]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:37.970]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:37.970]                   base::options(opts)
[10:59:37.970]                 }
[10:59:37.970]                 {
[10:59:37.970]                   {
[10:59:37.970]                     base::assign(".Random.seed", c(10403L, 4L, 
[10:59:37.970]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:59:37.970]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:59:37.970]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:59:37.970]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:59:37.970]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:59:37.970]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:59:37.970]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:59:37.970]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:59:37.970]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:59:37.970]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:59:37.970]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:59:37.970]                     -1512233174L, -1985955764L, -425390065L, 
[10:59:37.970]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:59:37.970]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:59:37.970]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:59:37.970]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:59:37.970]                     1818328109L, -1284085436L, -1981489558L, 
[10:59:37.970]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:59:37.970]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:59:37.970]                     -1718567047L, -793788661L, -1133789126L, 
[10:59:37.970]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:59:37.970]                     -1823521982L, -1345991523L, -1672661737L, 
[10:59:37.970]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:59:37.970]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:59:37.970]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:59:37.970]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:59:37.970]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:59:37.970]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:59:37.970]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:59:37.970]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:59:37.970]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:59:37.970]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:59:37.970]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:59:37.970]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:59:37.970]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:59:37.970]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:59:37.970]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:59:37.970]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:59:37.970]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:59:37.970]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:59:37.970]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:59:37.970]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:59:37.970]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:59:37.970]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:59:37.970]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:59:37.970]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:59:37.970]                     -1119334354L, -1521015416L, -2041922421L, 
[10:59:37.970]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:59:37.970]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:59:37.970]                     1232111981L, -1801753084L, -1608606422L, 
[10:59:37.970]                     -1172096363L, 1420874031L, -1210473418L, 
[10:59:37.970]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:59:37.970]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:59:37.970]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:59:37.970]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:59:37.970]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:59:37.970]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:59:37.970]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:59:37.970]                     -332493318L, -1978392251L, -1691039632L, 
[10:59:37.970]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:59:37.970]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:59:37.970]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:59:37.970]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:59:37.970]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:59:37.970]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:59:37.970]                     -1178330196L, -687617348L, -1701912078L, 
[10:59:37.970]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:59:37.970]                     -1345416048L, 1816730492L, -1570431212L, 
[10:59:37.970]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:59:37.970]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:59:37.970]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:59:37.970]                     -1493184262L, -1943836976L, -590788308L, 
[10:59:37.970]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:59:37.970]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:59:37.970]                     1274857340L, -1205842638L, -1938479504L, 
[10:59:37.970]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:59:37.970]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:59:37.970]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:59:37.970]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:59:37.970]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:59:37.970]                     -1460751252L, 1201879444L, -1459788718L, 
[10:59:37.970]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:59:37.970]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:59:37.970]                     -420945808L, -1997735900L, -1838404552L, 
[10:59:37.970]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:59:37.970]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:59:37.970]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:59:37.970]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:59:37.970]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:59:37.970]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:59:37.970]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:59:37.970]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:59:37.970]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:59:37.970]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:59:37.970]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:59:37.970]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:59:37.970]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:59:37.970]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:59:37.970]                     -1357570110L, 1896595240L, -2066952276L, 
[10:59:37.970]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:59:37.970]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:59:37.970]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:59:37.970]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:59:37.970]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:59:37.970]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:59:37.970]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:59:37.970]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:59:37.970]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:59:37.970]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:59:37.970]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:59:37.970]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:59:37.970]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:59:37.970]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:59:37.970]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:59:37.970]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:59:37.970]                     -1365842884L, -438961294L, -1851472272L, 
[10:59:37.970]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:59:37.970]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:59:37.970]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:59:37.970]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:59:37.970]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:59:37.970]                     -594809770L, -2146766621L, -2013964635L, 
[10:59:37.970]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:59:37.970]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:59:37.970]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:59:37.970]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:59:37.970]                     -1426021878L, -1285634264L, 1507547537L, 
[10:59:37.970]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:59:37.970]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:59:37.970]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:59:37.970]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:59:37.970]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:59:37.970]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:59:37.970]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:59:37.970]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:59:37.970]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:59:37.970]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:59:37.970]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:59:37.970]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:59:37.970]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:59:37.970]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:59:37.970]                     -1604604761L, 1421229008L, -1268333714L, 
[10:59:37.970]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:59:37.970]                     -2070476623L, -2099222749L, 1141171236L, 
[10:59:37.970]                     -146426158L, -1797385433L, -1129376399L, 
[10:59:37.970]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:59:37.970]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:59:37.970]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:59:37.970]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:59:37.970]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:59:37.970]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:59:37.970]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:59:37.970]                     -1092079724L, -1765622238L, -1882554057L, 
[10:59:37.970]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:59:37.970]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:59:37.970]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:59:37.970]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:59:37.970]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:59:37.970]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:59:37.970]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:59:37.970]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:59:37.970]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:59:37.970]                       inherits = FALSE)
[10:59:37.970]                     NULL
[10:59:37.970]                   }
[10:59:37.970]                   options(future.plan = NULL)
[10:59:37.970]                   if (is.na(NA_character_)) 
[10:59:37.970]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:37.970]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:37.970]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:37.970]                     .init = FALSE)
[10:59:37.970]                 }
[10:59:37.970]             }
[10:59:37.970]         }
[10:59:37.970]     })
[10:59:37.970]     if (TRUE) {
[10:59:37.970]         base::sink(type = "output", split = FALSE)
[10:59:37.970]         if (TRUE) {
[10:59:37.970]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:37.970]         }
[10:59:37.970]         else {
[10:59:37.970]             ...future.result["stdout"] <- base::list(NULL)
[10:59:37.970]         }
[10:59:37.970]         base::close(...future.stdout)
[10:59:37.970]         ...future.stdout <- NULL
[10:59:37.970]     }
[10:59:37.970]     ...future.result$conditions <- ...future.conditions
[10:59:37.970]     ...future.result$finished <- base::Sys.time()
[10:59:37.970]     ...future.result
[10:59:37.970] }
[10:59:37.972] assign_globals() ...
[10:59:37.972] List of 5
[10:59:37.972]  $ ...future.FUN            :function (...)  
[10:59:37.972]  $ future.call.arguments    : list()
[10:59:37.972]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.972]  $ ...future.elements_ii    :List of 5
[10:59:37.972]   ..$ : int 0
[10:59:37.972]   ..$ : int 0
[10:59:37.972]   ..$ : int 0
[10:59:37.972]   ..$ : int 0
[10:59:37.972]   ..$ : int 0
[10:59:37.972]  $ ...future.seeds_ii       :List of 5
[10:59:37.972]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:59:37.972]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:59:37.972]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:59:37.972]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:59:37.972]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:59:37.972]  $ ...future.globals.maxSize: NULL
[10:59:37.972]  - attr(*, "where")=List of 5
[10:59:37.972]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:37.972]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:37.972]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:37.972]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:37.972]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:37.972]  - attr(*, "resolved")= logi FALSE
[10:59:37.972]  - attr(*, "total_size")= num 7184
[10:59:37.972]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.972]  - attr(*, "already-done")= logi TRUE
[10:59:37.979] - reassign environment for ‘...future.FUN’
[10:59:37.979] - copied ‘...future.FUN’ to environment
[10:59:37.979] - copied ‘future.call.arguments’ to environment
[10:59:37.979] - copied ‘...future.elements_ii’ to environment
[10:59:37.979] - copied ‘...future.seeds_ii’ to environment
[10:59:37.979] - copied ‘...future.globals.maxSize’ to environment
[10:59:37.980] assign_globals() ... done
[10:59:37.980] plan(): Setting new future strategy stack:
[10:59:37.980] List of future strategies:
[10:59:37.980] 1. sequential:
[10:59:37.980]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.980]    - tweaked: FALSE
[10:59:37.980]    - call: NULL
[10:59:37.980] plan(): nbrOfWorkers() = 1
[10:59:37.982] plan(): Setting new future strategy stack:
[10:59:37.982] List of future strategies:
[10:59:37.982] 1. sequential:
[10:59:37.982]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:37.982]    - tweaked: FALSE
[10:59:37.982]    - call: plan(strategy)
[10:59:37.982] plan(): nbrOfWorkers() = 1
[10:59:37.983] SequentialFuture started (and completed)
[10:59:37.983] - Launch lazy future ... done
[10:59:37.983] run() for ‘SequentialFuture’ ... done
[10:59:37.983] Created future:
[10:59:37.983] SequentialFuture:
[10:59:37.983] Label: ‘future_replicate-1’
[10:59:37.983] Expression:
[10:59:37.983] {
[10:59:37.983]     do.call(function(...) {
[10:59:37.983]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:37.983]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:37.983]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:37.983]             on.exit(options(oopts), add = TRUE)
[10:59:37.983]         }
[10:59:37.983]         {
[10:59:37.983]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:37.983]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:37.983]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:37.983]                   envir = globalenv(), inherits = FALSE)
[10:59:37.983]                 ...future.FUN(...future.X_jj, ...)
[10:59:37.983]             })
[10:59:37.983]         }
[10:59:37.983]     }, args = future.call.arguments)
[10:59:37.983] }
[10:59:37.983] Lazy evaluation: FALSE
[10:59:37.983] Asynchronous evaluation: FALSE
[10:59:37.983] Local evaluation: TRUE
[10:59:37.983] Environment: R_GlobalEnv
[10:59:37.983] Capture standard output: TRUE
[10:59:37.983] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:37.983] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:37.983] Packages: <none>
[10:59:37.983] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:37.983] Resolved: TRUE
[10:59:37.983] Value: 91 bytes of class ‘list’
[10:59:37.983] Early signaling: FALSE
[10:59:37.983] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:37.983] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:37.984] Chunk #1 of 1 ... DONE
[10:59:37.984] Launching 1 futures (chunks) ... DONE
[10:59:37.984] Resolving 1 futures (chunks) ...
[10:59:37.984] resolve() on list ...
[10:59:37.984]  recursive: 0
[10:59:37.984]  length: 1
[10:59:37.984] 
[10:59:37.984] resolved() for ‘SequentialFuture’ ...
[10:59:37.984] - state: ‘finished’
[10:59:37.984] - run: TRUE
[10:59:37.985] - result: ‘FutureResult’
[10:59:37.985] resolved() for ‘SequentialFuture’ ... done
[10:59:37.985] Future #1
[10:59:37.985] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:59:37.985] - nx: 1
[10:59:37.985] - relay: TRUE
[10:59:37.985] - stdout: TRUE
[10:59:37.985] - signal: TRUE
[10:59:37.985] - resignal: FALSE
[10:59:37.985] - force: TRUE
[10:59:37.985] - relayed: [n=1] FALSE
[10:59:37.985] - queued futures: [n=1] FALSE
[10:59:37.986]  - until=1
[10:59:37.986]  - relaying element #1
[10:59:37.986] - relayed: [n=1] TRUE
[10:59:37.986] - queued futures: [n=1] TRUE
[10:59:37.986] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:59:37.986]  length: 0 (resolved future 1)
[10:59:37.986] Relaying remaining futures
[10:59:37.986] signalConditionsASAP(NULL, pos=0) ...
[10:59:37.986] - nx: 1
[10:59:37.986] - relay: TRUE
[10:59:37.986] - stdout: TRUE
[10:59:37.986] - signal: TRUE
[10:59:37.987] - resignal: FALSE
[10:59:37.987] - force: TRUE
[10:59:37.987] - relayed: [n=1] TRUE
[10:59:37.987] - queued futures: [n=1] TRUE
 - flush all
[10:59:37.987] - relayed: [n=1] TRUE
[10:59:37.987] - queued futures: [n=1] TRUE
[10:59:37.987] signalConditionsASAP(NULL, pos=0) ... done
[10:59:37.987] resolve() on list ... DONE
[10:59:37.987]  - Number of value chunks collected: 1
[10:59:37.987] Resolving 1 futures (chunks) ... DONE
[10:59:37.987] Reducing values from 1 chunks ...
[10:59:37.987]  - Number of values collected after concatenation: 5
[10:59:37.988]  - Number of values expected: 5
[10:59:37.988] Reducing values from 1 chunks ... DONE
[10:59:37.988] future_lapply() ... DONE
[10:59:37.988] future_lapply() ...
[10:59:37.988] Generating random seeds ...
[10:59:37.988] Generating random seed streams for 5 elements ...
[10:59:37.988] Generating random seed streams for 5 elements ... DONE
[10:59:37.988] Generating random seeds ... DONE
[10:59:37.989] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:37.989] Number of chunks: 1
[10:59:37.989] getGlobalsAndPackagesXApply() ...
[10:59:37.989]  - future.globals: TRUE
[10:59:37.989] getGlobalsAndPackages() ...
[10:59:37.989] Searching for globals...
[10:59:37.990] - globals found: [2] ‘FUN’, ‘sample’
[10:59:37.990] Searching for globals ... DONE
[10:59:37.991] Resolving globals: FALSE
[10:59:37.991] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:37.991] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:37.991] - globals: [1] ‘FUN’
[10:59:37.991] 
[10:59:37.991] getGlobalsAndPackages() ... DONE
[10:59:37.991]  - globals found/used: [n=1] ‘FUN’
[10:59:37.992]  - needed namespaces: [n=0] 
[10:59:37.992] Finding globals ... DONE
[10:59:37.992]  - use_args: TRUE
[10:59:37.992]  - Getting '...' globals ...
[10:59:37.992] resolve() on list ...
[10:59:37.992]  recursive: 0
[10:59:37.992]  length: 1
[10:59:37.992]  elements: ‘...’
[10:59:37.992]  length: 0 (resolved future 1)
[10:59:37.993] resolve() on list ... DONE
[10:59:37.993]    - '...' content: [n=0] 
[10:59:37.993] List of 1
[10:59:37.993]  $ ...: list()
[10:59:37.993]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.993]  - attr(*, "where")=List of 1
[10:59:37.993]   ..$ ...:<environment: 0x56262cfd6a60> 
[10:59:37.993]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.993]  - attr(*, "resolved")= logi TRUE
[10:59:37.993]  - attr(*, "total_size")= num NA
[10:59:37.995]  - Getting '...' globals ... DONE
[10:59:37.995] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:37.995] List of 2
[10:59:37.995]  $ ...future.FUN:function (...)  
[10:59:37.995]  $ ...          : list()
[10:59:37.995]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:37.995]  - attr(*, "where")=List of 2
[10:59:37.995]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:37.995]   ..$ ...          :<environment: 0x56262cfd6a60> 
[10:59:37.995]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:37.995]  - attr(*, "resolved")= logi FALSE
[10:59:37.995]  - attr(*, "total_size")= num 7184
[10:59:37.998] Packages to be attached in all futures: [n=0] 
[10:59:37.998] getGlobalsAndPackagesXApply() ... DONE
[10:59:37.998] Number of futures (= number of chunks): 1
[10:59:37.998] Launching 1 futures (chunks) ...
[10:59:37.998] Chunk #1 of 1 ...
[10:59:37.998]  - Finding globals in 'X' for chunk #1 ...
[10:59:37.998] getGlobalsAndPackages() ...
[10:59:37.998] Searching for globals...
[10:59:37.998] 
[10:59:37.999] Searching for globals ... DONE
[10:59:37.999] - globals: [0] <none>
[10:59:37.999] getGlobalsAndPackages() ... DONE
[10:59:37.999]    + additional globals found: [n=0] 
[10:59:37.999]    + additional namespaces needed: [n=0] 
[10:59:37.999]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:37.999]  - seeds: [5] <seeds>
[10:59:37.999]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.999] getGlobalsAndPackages() ...
[10:59:37.999] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:37.999] Resolving globals: FALSE
[10:59:37.999] Tweak future expression to call with '...' arguments ...
[10:59:38.000] {
[10:59:38.000]     do.call(function(...) {
[10:59:38.000]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.000]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.000]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.000]             on.exit(options(oopts), add = TRUE)
[10:59:38.000]         }
[10:59:38.000]         {
[10:59:38.000]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.000]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.000]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.000]                   envir = globalenv(), inherits = FALSE)
[10:59:38.000]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.000]             })
[10:59:38.000]         }
[10:59:38.000]     }, args = future.call.arguments)
[10:59:38.000] }
[10:59:38.000] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.000] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.000] 
[10:59:38.000] getGlobalsAndPackages() ... DONE
[10:59:38.001] run() for ‘Future’ ...
[10:59:38.001] - state: ‘created’
[10:59:38.001] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:59:38.001] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:38.001] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:59:38.001]   - Field: ‘label’
[10:59:38.001]   - Field: ‘local’
[10:59:38.001]   - Field: ‘owner’
[10:59:38.001]   - Field: ‘envir’
[10:59:38.001]   - Field: ‘packages’
[10:59:38.002]   - Field: ‘gc’
[10:59:38.002]   - Field: ‘conditions’
[10:59:38.002]   - Field: ‘expr’
[10:59:38.002]   - Field: ‘uuid’
[10:59:38.002]   - Field: ‘seed’
[10:59:38.002]   - Field: ‘version’
[10:59:38.002]   - Field: ‘result’
[10:59:38.002]   - Field: ‘asynchronous’
[10:59:38.002]   - Field: ‘calls’
[10:59:38.002]   - Field: ‘globals’
[10:59:38.002]   - Field: ‘stdout’
[10:59:38.003]   - Field: ‘earlySignal’
[10:59:38.003]   - Field: ‘lazy’
[10:59:38.003]   - Field: ‘state’
[10:59:38.004] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:59:38.004] - Launch lazy future ...
[10:59:38.004] Packages needed by the future expression (n = 0): <none>
[10:59:38.004] Packages needed by future strategies (n = 0): <none>
[10:59:38.004] {
[10:59:38.004]     {
[10:59:38.004]         {
[10:59:38.004]             ...future.startTime <- base::Sys.time()
[10:59:38.004]             {
[10:59:38.004]                 {
[10:59:38.004]                   {
[10:59:38.004]                     base::local({
[10:59:38.004]                       has_future <- base::requireNamespace("future", 
[10:59:38.004]                         quietly = TRUE)
[10:59:38.004]                       if (has_future) {
[10:59:38.004]                         ns <- base::getNamespace("future")
[10:59:38.004]                         version <- ns[[".package"]][["version"]]
[10:59:38.004]                         if (is.null(version)) 
[10:59:38.004]                           version <- utils::packageVersion("future")
[10:59:38.004]                       }
[10:59:38.004]                       else {
[10:59:38.004]                         version <- NULL
[10:59:38.004]                       }
[10:59:38.004]                       if (!has_future || version < "1.8.0") {
[10:59:38.004]                         info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.004]                           "", base::R.version$version.string), 
[10:59:38.004]                           platform = base::sprintf("%s (%s-bit)", 
[10:59:38.004]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.004]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.004]                             "release", "version")], collapse = " "), 
[10:59:38.004]                           hostname = base::Sys.info()[["nodename"]])
[10:59:38.004]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.004]                           info)
[10:59:38.004]                         info <- base::paste(info, collapse = "; ")
[10:59:38.004]                         if (!has_future) {
[10:59:38.004]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.004]                             info)
[10:59:38.004]                         }
[10:59:38.004]                         else {
[10:59:38.004]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.004]                             info, version)
[10:59:38.004]                         }
[10:59:38.004]                         base::stop(msg)
[10:59:38.004]                       }
[10:59:38.004]                     })
[10:59:38.004]                   }
[10:59:38.004]                   ...future.strategy.old <- future::plan("list")
[10:59:38.004]                   options(future.plan = NULL)
[10:59:38.004]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.004]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.004]                 }
[10:59:38.004]                 ...future.workdir <- getwd()
[10:59:38.004]             }
[10:59:38.004]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.004]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.004]         }
[10:59:38.004]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.004]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:59:38.004]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.004]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.004]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.004]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.004]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.004]             base::names(...future.oldOptions))
[10:59:38.004]     }
[10:59:38.004]     if (FALSE) {
[10:59:38.004]     }
[10:59:38.004]     else {
[10:59:38.004]         if (TRUE) {
[10:59:38.004]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.004]                 open = "w")
[10:59:38.004]         }
[10:59:38.004]         else {
[10:59:38.004]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.004]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.004]         }
[10:59:38.004]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.004]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.004]             base::sink(type = "output", split = FALSE)
[10:59:38.004]             base::close(...future.stdout)
[10:59:38.004]         }, add = TRUE)
[10:59:38.004]     }
[10:59:38.004]     ...future.frame <- base::sys.nframe()
[10:59:38.004]     ...future.conditions <- base::list()
[10:59:38.004]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.004]     if (FALSE) {
[10:59:38.004]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.004]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.004]     }
[10:59:38.004]     ...future.result <- base::tryCatch({
[10:59:38.004]         base::withCallingHandlers({
[10:59:38.004]             ...future.value <- base::withVisible(base::local({
[10:59:38.004]                 do.call(function(...) {
[10:59:38.004]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.004]                   if (!identical(...future.globals.maxSize.org, 
[10:59:38.004]                     ...future.globals.maxSize)) {
[10:59:38.004]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.004]                     on.exit(options(oopts), add = TRUE)
[10:59:38.004]                   }
[10:59:38.004]                   {
[10:59:38.004]                     lapply(seq_along(...future.elements_ii), 
[10:59:38.004]                       FUN = function(jj) {
[10:59:38.004]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.004]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.004]                           envir = globalenv(), inherits = FALSE)
[10:59:38.004]                         ...future.FUN(...future.X_jj, ...)
[10:59:38.004]                       })
[10:59:38.004]                   }
[10:59:38.004]                 }, args = future.call.arguments)
[10:59:38.004]             }))
[10:59:38.004]             future::FutureResult(value = ...future.value$value, 
[10:59:38.004]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.004]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.004]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.004]                     ...future.globalenv.names))
[10:59:38.004]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.004]         }, condition = base::local({
[10:59:38.004]             c <- base::c
[10:59:38.004]             inherits <- base::inherits
[10:59:38.004]             invokeRestart <- base::invokeRestart
[10:59:38.004]             length <- base::length
[10:59:38.004]             list <- base::list
[10:59:38.004]             seq.int <- base::seq.int
[10:59:38.004]             signalCondition <- base::signalCondition
[10:59:38.004]             sys.calls <- base::sys.calls
[10:59:38.004]             `[[` <- base::`[[`
[10:59:38.004]             `+` <- base::`+`
[10:59:38.004]             `<<-` <- base::`<<-`
[10:59:38.004]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.004]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.004]                   3L)]
[10:59:38.004]             }
[10:59:38.004]             function(cond) {
[10:59:38.004]                 is_error <- inherits(cond, "error")
[10:59:38.004]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.004]                   NULL)
[10:59:38.004]                 if (is_error) {
[10:59:38.004]                   sessionInformation <- function() {
[10:59:38.004]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.004]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.004]                       search = base::search(), system = base::Sys.info())
[10:59:38.004]                   }
[10:59:38.004]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.004]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.004]                     cond$call), session = sessionInformation(), 
[10:59:38.004]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.004]                   signalCondition(cond)
[10:59:38.004]                 }
[10:59:38.004]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.004]                 "immediateCondition"))) {
[10:59:38.004]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.004]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.004]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.004]                   if (TRUE && !signal) {
[10:59:38.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.004]                     {
[10:59:38.004]                       inherits <- base::inherits
[10:59:38.004]                       invokeRestart <- base::invokeRestart
[10:59:38.004]                       is.null <- base::is.null
[10:59:38.004]                       muffled <- FALSE
[10:59:38.004]                       if (inherits(cond, "message")) {
[10:59:38.004]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.004]                         if (muffled) 
[10:59:38.004]                           invokeRestart("muffleMessage")
[10:59:38.004]                       }
[10:59:38.004]                       else if (inherits(cond, "warning")) {
[10:59:38.004]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.004]                         if (muffled) 
[10:59:38.004]                           invokeRestart("muffleWarning")
[10:59:38.004]                       }
[10:59:38.004]                       else if (inherits(cond, "condition")) {
[10:59:38.004]                         if (!is.null(pattern)) {
[10:59:38.004]                           computeRestarts <- base::computeRestarts
[10:59:38.004]                           grepl <- base::grepl
[10:59:38.004]                           restarts <- computeRestarts(cond)
[10:59:38.004]                           for (restart in restarts) {
[10:59:38.004]                             name <- restart$name
[10:59:38.004]                             if (is.null(name)) 
[10:59:38.004]                               next
[10:59:38.004]                             if (!grepl(pattern, name)) 
[10:59:38.004]                               next
[10:59:38.004]                             invokeRestart(restart)
[10:59:38.004]                             muffled <- TRUE
[10:59:38.004]                             break
[10:59:38.004]                           }
[10:59:38.004]                         }
[10:59:38.004]                       }
[10:59:38.004]                       invisible(muffled)
[10:59:38.004]                     }
[10:59:38.004]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.004]                   }
[10:59:38.004]                 }
[10:59:38.004]                 else {
[10:59:38.004]                   if (TRUE) {
[10:59:38.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.004]                     {
[10:59:38.004]                       inherits <- base::inherits
[10:59:38.004]                       invokeRestart <- base::invokeRestart
[10:59:38.004]                       is.null <- base::is.null
[10:59:38.004]                       muffled <- FALSE
[10:59:38.004]                       if (inherits(cond, "message")) {
[10:59:38.004]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.004]                         if (muffled) 
[10:59:38.004]                           invokeRestart("muffleMessage")
[10:59:38.004]                       }
[10:59:38.004]                       else if (inherits(cond, "warning")) {
[10:59:38.004]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.004]                         if (muffled) 
[10:59:38.004]                           invokeRestart("muffleWarning")
[10:59:38.004]                       }
[10:59:38.004]                       else if (inherits(cond, "condition")) {
[10:59:38.004]                         if (!is.null(pattern)) {
[10:59:38.004]                           computeRestarts <- base::computeRestarts
[10:59:38.004]                           grepl <- base::grepl
[10:59:38.004]                           restarts <- computeRestarts(cond)
[10:59:38.004]                           for (restart in restarts) {
[10:59:38.004]                             name <- restart$name
[10:59:38.004]                             if (is.null(name)) 
[10:59:38.004]                               next
[10:59:38.004]                             if (!grepl(pattern, name)) 
[10:59:38.004]                               next
[10:59:38.004]                             invokeRestart(restart)
[10:59:38.004]                             muffled <- TRUE
[10:59:38.004]                             break
[10:59:38.004]                           }
[10:59:38.004]                         }
[10:59:38.004]                       }
[10:59:38.004]                       invisible(muffled)
[10:59:38.004]                     }
[10:59:38.004]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.004]                   }
[10:59:38.004]                 }
[10:59:38.004]             }
[10:59:38.004]         }))
[10:59:38.004]     }, error = function(ex) {
[10:59:38.004]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.004]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.004]                 ...future.rng), started = ...future.startTime, 
[10:59:38.004]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.004]             version = "1.8"), class = "FutureResult")
[10:59:38.004]     }, finally = {
[10:59:38.004]         if (!identical(...future.workdir, getwd())) 
[10:59:38.004]             setwd(...future.workdir)
[10:59:38.004]         {
[10:59:38.004]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.004]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.004]             }
[10:59:38.004]             base::options(...future.oldOptions)
[10:59:38.004]             if (.Platform$OS.type == "windows") {
[10:59:38.004]                 old_names <- names(...future.oldEnvVars)
[10:59:38.004]                 envs <- base::Sys.getenv()
[10:59:38.004]                 names <- names(envs)
[10:59:38.004]                 common <- intersect(names, old_names)
[10:59:38.004]                 added <- setdiff(names, old_names)
[10:59:38.004]                 removed <- setdiff(old_names, names)
[10:59:38.004]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.004]                   envs[common]]
[10:59:38.004]                 NAMES <- toupper(changed)
[10:59:38.004]                 args <- list()
[10:59:38.004]                 for (kk in seq_along(NAMES)) {
[10:59:38.004]                   name <- changed[[kk]]
[10:59:38.004]                   NAME <- NAMES[[kk]]
[10:59:38.004]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.004]                     next
[10:59:38.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.004]                 }
[10:59:38.004]                 NAMES <- toupper(added)
[10:59:38.004]                 for (kk in seq_along(NAMES)) {
[10:59:38.004]                   name <- added[[kk]]
[10:59:38.004]                   NAME <- NAMES[[kk]]
[10:59:38.004]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.004]                     next
[10:59:38.004]                   args[[name]] <- ""
[10:59:38.004]                 }
[10:59:38.004]                 NAMES <- toupper(removed)
[10:59:38.004]                 for (kk in seq_along(NAMES)) {
[10:59:38.004]                   name <- removed[[kk]]
[10:59:38.004]                   NAME <- NAMES[[kk]]
[10:59:38.004]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.004]                     next
[10:59:38.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.004]                 }
[10:59:38.004]                 if (length(args) > 0) 
[10:59:38.004]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.004]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.004]             }
[10:59:38.004]             else {
[10:59:38.004]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.004]             }
[10:59:38.004]             {
[10:59:38.004]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.004]                   0L) {
[10:59:38.004]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.004]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.004]                   base::options(opts)
[10:59:38.004]                 }
[10:59:38.004]                 {
[10:59:38.004]                   {
[10:59:38.004]                     base::assign(".Random.seed", c(10403L, 6L, 
[10:59:38.004]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:59:38.004]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:59:38.004]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:59:38.004]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:59:38.004]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:59:38.004]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:59:38.004]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:59:38.004]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:59:38.004]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:59:38.004]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:59:38.004]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:59:38.004]                     -1512233174L, -1985955764L, -425390065L, 
[10:59:38.004]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:59:38.004]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:59:38.004]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:59:38.004]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:59:38.004]                     1818328109L, -1284085436L, -1981489558L, 
[10:59:38.004]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:59:38.004]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:59:38.004]                     -1718567047L, -793788661L, -1133789126L, 
[10:59:38.004]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:59:38.004]                     -1823521982L, -1345991523L, -1672661737L, 
[10:59:38.004]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:59:38.004]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:59:38.004]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:59:38.004]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:59:38.004]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:59:38.004]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:59:38.004]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:59:38.004]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:59:38.004]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:59:38.004]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:59:38.004]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:59:38.004]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:59:38.004]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:59:38.004]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:59:38.004]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:59:38.004]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:59:38.004]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:59:38.004]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:59:38.004]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:59:38.004]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:59:38.004]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:59:38.004]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:59:38.004]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:59:38.004]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:59:38.004]                     -1119334354L, -1521015416L, -2041922421L, 
[10:59:38.004]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:59:38.004]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:59:38.004]                     1232111981L, -1801753084L, -1608606422L, 
[10:59:38.004]                     -1172096363L, 1420874031L, -1210473418L, 
[10:59:38.004]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:59:38.004]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:59:38.004]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:59:38.004]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:59:38.004]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:59:38.004]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:59:38.004]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:59:38.004]                     -332493318L, -1978392251L, -1691039632L, 
[10:59:38.004]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:59:38.004]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:59:38.004]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:59:38.004]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:59:38.004]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:59:38.004]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:59:38.004]                     -1178330196L, -687617348L, -1701912078L, 
[10:59:38.004]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:59:38.004]                     -1345416048L, 1816730492L, -1570431212L, 
[10:59:38.004]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:59:38.004]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:59:38.004]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:59:38.004]                     -1493184262L, -1943836976L, -590788308L, 
[10:59:38.004]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:59:38.004]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:59:38.004]                     1274857340L, -1205842638L, -1938479504L, 
[10:59:38.004]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:59:38.004]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:59:38.004]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:59:38.004]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:59:38.004]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:59:38.004]                     -1460751252L, 1201879444L, -1459788718L, 
[10:59:38.004]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:59:38.004]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:59:38.004]                     -420945808L, -1997735900L, -1838404552L, 
[10:59:38.004]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:59:38.004]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:59:38.004]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:59:38.004]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:59:38.004]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:59:38.004]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:59:38.004]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:59:38.004]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:59:38.004]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:59:38.004]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:59:38.004]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:59:38.004]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:59:38.004]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:59:38.004]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:59:38.004]                     -1357570110L, 1896595240L, -2066952276L, 
[10:59:38.004]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:59:38.004]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:59:38.004]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:59:38.004]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:59:38.004]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:59:38.004]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:59:38.004]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:59:38.004]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:59:38.004]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:59:38.004]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:59:38.004]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:59:38.004]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:59:38.004]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:59:38.004]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:59:38.004]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:59:38.004]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:59:38.004]                     -1365842884L, -438961294L, -1851472272L, 
[10:59:38.004]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:59:38.004]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:59:38.004]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:59:38.004]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:59:38.004]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:59:38.004]                     -594809770L, -2146766621L, -2013964635L, 
[10:59:38.004]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:59:38.004]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:59:38.004]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:59:38.004]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:59:38.004]                     -1426021878L, -1285634264L, 1507547537L, 
[10:59:38.004]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:59:38.004]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:59:38.004]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:59:38.004]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:59:38.004]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:59:38.004]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:59:38.004]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:59:38.004]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:59:38.004]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:59:38.004]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:59:38.004]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:59:38.004]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:59:38.004]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:59:38.004]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:59:38.004]                     -1604604761L, 1421229008L, -1268333714L, 
[10:59:38.004]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:59:38.004]                     -2070476623L, -2099222749L, 1141171236L, 
[10:59:38.004]                     -146426158L, -1797385433L, -1129376399L, 
[10:59:38.004]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:59:38.004]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:59:38.004]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:59:38.004]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:59:38.004]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:59:38.004]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:59:38.004]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:59:38.004]                     -1092079724L, -1765622238L, -1882554057L, 
[10:59:38.004]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:59:38.004]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:59:38.004]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:59:38.004]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:59:38.004]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:59:38.004]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:59:38.004]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:59:38.004]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:59:38.004]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:59:38.004]                       inherits = FALSE)
[10:59:38.004]                     NULL
[10:59:38.004]                   }
[10:59:38.004]                   options(future.plan = NULL)
[10:59:38.004]                   if (is.na(NA_character_)) 
[10:59:38.004]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.004]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.004]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.004]                     .init = FALSE)
[10:59:38.004]                 }
[10:59:38.004]             }
[10:59:38.004]         }
[10:59:38.004]     })
[10:59:38.004]     if (TRUE) {
[10:59:38.004]         base::sink(type = "output", split = FALSE)
[10:59:38.004]         if (TRUE) {
[10:59:38.004]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.004]         }
[10:59:38.004]         else {
[10:59:38.004]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.004]         }
[10:59:38.004]         base::close(...future.stdout)
[10:59:38.004]         ...future.stdout <- NULL
[10:59:38.004]     }
[10:59:38.004]     ...future.result$conditions <- ...future.conditions
[10:59:38.004]     ...future.result$finished <- base::Sys.time()
[10:59:38.004]     ...future.result
[10:59:38.004] }
[10:59:38.007] assign_globals() ...
[10:59:38.007] List of 5
[10:59:38.007]  $ ...future.FUN            :function (...)  
[10:59:38.007]  $ future.call.arguments    : list()
[10:59:38.007]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.007]  $ ...future.elements_ii    :List of 5
[10:59:38.007]   ..$ : int 0
[10:59:38.007]   ..$ : int 0
[10:59:38.007]   ..$ : int 0
[10:59:38.007]   ..$ : int 0
[10:59:38.007]   ..$ : int 0
[10:59:38.007]  $ ...future.seeds_ii       :List of 5
[10:59:38.007]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:59:38.007]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:59:38.007]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:59:38.007]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:59:38.007]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:59:38.007]  $ ...future.globals.maxSize: NULL
[10:59:38.007]  - attr(*, "where")=List of 5
[10:59:38.007]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.007]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.007]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.007]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.007]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.007]  - attr(*, "resolved")= logi FALSE
[10:59:38.007]  - attr(*, "total_size")= num 7184
[10:59:38.007]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.007]  - attr(*, "already-done")= logi TRUE
[10:59:38.014] - reassign environment for ‘...future.FUN’
[10:59:38.014] - copied ‘...future.FUN’ to environment
[10:59:38.014] - copied ‘future.call.arguments’ to environment
[10:59:38.014] - copied ‘...future.elements_ii’ to environment
[10:59:38.014] - copied ‘...future.seeds_ii’ to environment
[10:59:38.014] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.014] assign_globals() ... done
[10:59:38.014] plan(): Setting new future strategy stack:
[10:59:38.014] List of future strategies:
[10:59:38.014] 1. sequential:
[10:59:38.014]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.014]    - tweaked: FALSE
[10:59:38.014]    - call: NULL
[10:59:38.015] plan(): nbrOfWorkers() = 1
[10:59:38.015] plan(): Setting new future strategy stack:
[10:59:38.016] List of future strategies:
[10:59:38.016] 1. sequential:
[10:59:38.016]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.016]    - tweaked: FALSE
[10:59:38.016]    - call: plan(strategy)
[10:59:38.016] plan(): nbrOfWorkers() = 1
[10:59:38.016] SequentialFuture started (and completed)
[10:59:38.016] - Launch lazy future ... done
[10:59:38.016] run() for ‘SequentialFuture’ ... done
[10:59:38.016] Created future:
[10:59:38.016] SequentialFuture:
[10:59:38.016] Label: ‘future_replicate-1’
[10:59:38.016] Expression:
[10:59:38.016] {
[10:59:38.016]     do.call(function(...) {
[10:59:38.016]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.016]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.016]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.016]             on.exit(options(oopts), add = TRUE)
[10:59:38.016]         }
[10:59:38.016]         {
[10:59:38.016]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.016]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.016]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.016]                   envir = globalenv(), inherits = FALSE)
[10:59:38.016]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.016]             })
[10:59:38.016]         }
[10:59:38.016]     }, args = future.call.arguments)
[10:59:38.016] }
[10:59:38.016] Lazy evaluation: FALSE
[10:59:38.016] Asynchronous evaluation: FALSE
[10:59:38.016] Local evaluation: TRUE
[10:59:38.016] Environment: R_GlobalEnv
[10:59:38.016] Capture standard output: TRUE
[10:59:38.016] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.016] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.016] Packages: <none>
[10:59:38.016] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.016] Resolved: TRUE
[10:59:38.016] Value: 91 bytes of class ‘list’
[10:59:38.016] Early signaling: FALSE
[10:59:38.016] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.016] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:38.017] Chunk #1 of 1 ... DONE
[10:59:38.017] Launching 1 futures (chunks) ... DONE
[10:59:38.017] Resolving 1 futures (chunks) ...
[10:59:38.017] resolve() on list ...
[10:59:38.018]  recursive: 0
[10:59:38.018]  length: 1
[10:59:38.018] 
[10:59:38.018] resolved() for ‘SequentialFuture’ ...
[10:59:38.018] - state: ‘finished’
[10:59:38.018] - run: TRUE
[10:59:38.018] - result: ‘FutureResult’
[10:59:38.018] resolved() for ‘SequentialFuture’ ... done
[10:59:38.018] Future #1
[10:59:38.018] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:59:38.018] - nx: 1
[10:59:38.018] - relay: TRUE
[10:59:38.019] - stdout: TRUE
[10:59:38.019] - signal: TRUE
[10:59:38.019] - resignal: FALSE
[10:59:38.019] - force: TRUE
[10:59:38.019] - relayed: [n=1] FALSE
[10:59:38.019] - queued futures: [n=1] FALSE
[10:59:38.019]  - until=1
[10:59:38.019]  - relaying element #1
[10:59:38.019] - relayed: [n=1] TRUE
[10:59:38.019] - queued futures: [n=1] TRUE
[10:59:38.019] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:59:38.019]  length: 0 (resolved future 1)
[10:59:38.020] Relaying remaining futures
[10:59:38.020] signalConditionsASAP(NULL, pos=0) ...
[10:59:38.020] - nx: 1
[10:59:38.020] - relay: TRUE
[10:59:38.020] - stdout: TRUE
[10:59:38.020] - signal: TRUE
[10:59:38.020] - resignal: FALSE
[10:59:38.020] - force: TRUE
[10:59:38.020] - relayed: [n=1] TRUE
[10:59:38.020] - queued futures: [n=1] TRUE
 - flush all
[10:59:38.020] - relayed: [n=1] TRUE
[10:59:38.020] - queued futures: [n=1] TRUE
[10:59:38.020] signalConditionsASAP(NULL, pos=0) ... done
[10:59:38.021] resolve() on list ... DONE
[10:59:38.021]  - Number of value chunks collected: 1
[10:59:38.021] Resolving 1 futures (chunks) ... DONE
[10:59:38.021] Reducing values from 1 chunks ...
[10:59:38.021]  - Number of values collected after concatenation: 5
[10:59:38.021]  - Number of values expected: 5
[10:59:38.021] Reducing values from 1 chunks ... DONE
[10:59:38.021] future_lapply() ... DONE
- example(replicate) ...
[10:59:38.021] future_lapply() ...
[10:59:38.022] Generating random seeds ...
[10:59:38.022] Generating random seed streams for 5 elements ...
[10:59:38.022] Generating random seed streams for 5 elements ... DONE
[10:59:38.022] Generating random seeds ... DONE
[10:59:38.022] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:38.023] Number of chunks: 1
[10:59:38.023] getGlobalsAndPackagesXApply() ...
[10:59:38.023]  - future.globals: TRUE
[10:59:38.023] getGlobalsAndPackages() ...
[10:59:38.023] Searching for globals...
[10:59:38.025] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:59:38.025] Searching for globals ... DONE
[10:59:38.025] Resolving globals: FALSE
[10:59:38.025] The total size of the 3 globals is 617 bytes (617 bytes)
[10:59:38.025] The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[10:59:38.026] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:59:38.026] 
[10:59:38.026] getGlobalsAndPackages() ... DONE
[10:59:38.026]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:59:38.027]  - needed namespaces: [n=0] 
[10:59:38.027] Finding globals ... DONE
[10:59:38.027]  - use_args: TRUE
[10:59:38.027]  - Getting '...' globals ...
[10:59:38.027] resolve() on list ...
[10:59:38.027]  recursive: 0
[10:59:38.028]  length: 1
[10:59:38.028]  elements: ‘...’
[10:59:38.028]  length: 0 (resolved future 1)
[10:59:38.028] resolve() on list ... DONE
[10:59:38.028]    - '...' content: [n=0] 
[10:59:38.028] List of 1
[10:59:38.028]  $ ...: list()
[10:59:38.028]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.028]  - attr(*, "where")=List of 1
[10:59:38.028]   ..$ ...:<environment: 0x56262ebcab18> 
[10:59:38.028]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.028]  - attr(*, "resolved")= logi TRUE
[10:59:38.028]  - attr(*, "total_size")= num NA
[10:59:38.030]  - Getting '...' globals ... DONE
[10:59:38.030] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:59:38.030] List of 4
[10:59:38.030]  $ ...future.FUN:function (...)  
[10:59:38.030]  $ foo          :function (x = 1, y = 2)  
[10:59:38.030]  $ x            : num 3
[10:59:38.030]  $ ...          : list()
[10:59:38.030]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.030]  - attr(*, "where")=List of 4
[10:59:38.030]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:38.030]   ..$ foo          :<environment: R_EmptyEnv> 
[10:59:38.030]   ..$ x            :<environment: R_EmptyEnv> 
[10:59:38.030]   ..$ ...          :<environment: 0x56262ebcab18> 
[10:59:38.030]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.030]  - attr(*, "resolved")= logi FALSE
[10:59:38.030]  - attr(*, "total_size")= num 7967
[10:59:38.034] Packages to be attached in all futures: [n=0] 
[10:59:38.034] getGlobalsAndPackagesXApply() ... DONE
[10:59:38.034] Number of futures (= number of chunks): 1
[10:59:38.034] Launching 1 futures (chunks) ...
[10:59:38.034] Chunk #1 of 1 ...
[10:59:38.034]  - Finding globals in 'X' for chunk #1 ...
[10:59:38.034] getGlobalsAndPackages() ...
[10:59:38.034] Searching for globals...
[10:59:38.035] 
[10:59:38.035] Searching for globals ... DONE
[10:59:38.035] - globals: [0] <none>
[10:59:38.035] getGlobalsAndPackages() ... DONE
[10:59:38.035]    + additional globals found: [n=0] 
[10:59:38.035]    + additional namespaces needed: [n=0] 
[10:59:38.035]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:38.035]  - seeds: [5] <seeds>
[10:59:38.035]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.035] getGlobalsAndPackages() ...
[10:59:38.035] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.036] Resolving globals: FALSE
[10:59:38.036] Tweak future expression to call with '...' arguments ...
[10:59:38.036] {
[10:59:38.036]     do.call(function(...) {
[10:59:38.036]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.036]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.036]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.036]             on.exit(options(oopts), add = TRUE)
[10:59:38.036]         }
[10:59:38.036]         {
[10:59:38.036]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.036]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.036]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.036]                   envir = globalenv(), inherits = FALSE)
[10:59:38.036]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.036]             })
[10:59:38.036]         }
[10:59:38.036]     }, args = future.call.arguments)
[10:59:38.036] }
[10:59:38.036] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.036] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.036] 
[10:59:38.037] getGlobalsAndPackages() ... DONE
[10:59:38.037] run() for ‘Future’ ...
[10:59:38.037] - state: ‘created’
[10:59:38.037] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:59:38.037] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:38.037] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:59:38.037]   - Field: ‘label’
[10:59:38.037]   - Field: ‘local’
[10:59:38.038]   - Field: ‘owner’
[10:59:38.038]   - Field: ‘envir’
[10:59:38.038]   - Field: ‘packages’
[10:59:38.038]   - Field: ‘gc’
[10:59:38.038]   - Field: ‘conditions’
[10:59:38.038]   - Field: ‘expr’
[10:59:38.038]   - Field: ‘uuid’
[10:59:38.038]   - Field: ‘seed’
[10:59:38.038]   - Field: ‘version’
[10:59:38.038]   - Field: ‘result’
[10:59:38.038]   - Field: ‘asynchronous’
[10:59:38.038]   - Field: ‘calls’
[10:59:38.039]   - Field: ‘globals’
[10:59:38.039]   - Field: ‘stdout’
[10:59:38.039]   - Field: ‘earlySignal’
[10:59:38.039]   - Field: ‘lazy’
[10:59:38.039]   - Field: ‘state’
[10:59:38.039] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:59:38.039] - Launch lazy future ...
[10:59:38.039] Packages needed by the future expression (n = 0): <none>
[10:59:38.039] Packages needed by future strategies (n = 0): <none>
[10:59:38.040] {
[10:59:38.040]     {
[10:59:38.040]         {
[10:59:38.040]             ...future.startTime <- base::Sys.time()
[10:59:38.040]             {
[10:59:38.040]                 {
[10:59:38.040]                   {
[10:59:38.040]                     base::local({
[10:59:38.040]                       has_future <- base::requireNamespace("future", 
[10:59:38.040]                         quietly = TRUE)
[10:59:38.040]                       if (has_future) {
[10:59:38.040]                         ns <- base::getNamespace("future")
[10:59:38.040]                         version <- ns[[".package"]][["version"]]
[10:59:38.040]                         if (is.null(version)) 
[10:59:38.040]                           version <- utils::packageVersion("future")
[10:59:38.040]                       }
[10:59:38.040]                       else {
[10:59:38.040]                         version <- NULL
[10:59:38.040]                       }
[10:59:38.040]                       if (!has_future || version < "1.8.0") {
[10:59:38.040]                         info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.040]                           "", base::R.version$version.string), 
[10:59:38.040]                           platform = base::sprintf("%s (%s-bit)", 
[10:59:38.040]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.040]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.040]                             "release", "version")], collapse = " "), 
[10:59:38.040]                           hostname = base::Sys.info()[["nodename"]])
[10:59:38.040]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.040]                           info)
[10:59:38.040]                         info <- base::paste(info, collapse = "; ")
[10:59:38.040]                         if (!has_future) {
[10:59:38.040]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.040]                             info)
[10:59:38.040]                         }
[10:59:38.040]                         else {
[10:59:38.040]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.040]                             info, version)
[10:59:38.040]                         }
[10:59:38.040]                         base::stop(msg)
[10:59:38.040]                       }
[10:59:38.040]                     })
[10:59:38.040]                   }
[10:59:38.040]                   ...future.strategy.old <- future::plan("list")
[10:59:38.040]                   options(future.plan = NULL)
[10:59:38.040]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.040]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.040]                 }
[10:59:38.040]                 ...future.workdir <- getwd()
[10:59:38.040]             }
[10:59:38.040]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.040]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.040]         }
[10:59:38.040]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.040]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:59:38.040]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.040]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.040]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.040]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.040]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.040]             base::names(...future.oldOptions))
[10:59:38.040]     }
[10:59:38.040]     if (FALSE) {
[10:59:38.040]     }
[10:59:38.040]     else {
[10:59:38.040]         if (TRUE) {
[10:59:38.040]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.040]                 open = "w")
[10:59:38.040]         }
[10:59:38.040]         else {
[10:59:38.040]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.040]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.040]         }
[10:59:38.040]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.040]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.040]             base::sink(type = "output", split = FALSE)
[10:59:38.040]             base::close(...future.stdout)
[10:59:38.040]         }, add = TRUE)
[10:59:38.040]     }
[10:59:38.040]     ...future.frame <- base::sys.nframe()
[10:59:38.040]     ...future.conditions <- base::list()
[10:59:38.040]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.040]     if (FALSE) {
[10:59:38.040]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.040]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.040]     }
[10:59:38.040]     ...future.result <- base::tryCatch({
[10:59:38.040]         base::withCallingHandlers({
[10:59:38.040]             ...future.value <- base::withVisible(base::local({
[10:59:38.040]                 do.call(function(...) {
[10:59:38.040]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.040]                   if (!identical(...future.globals.maxSize.org, 
[10:59:38.040]                     ...future.globals.maxSize)) {
[10:59:38.040]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.040]                     on.exit(options(oopts), add = TRUE)
[10:59:38.040]                   }
[10:59:38.040]                   {
[10:59:38.040]                     lapply(seq_along(...future.elements_ii), 
[10:59:38.040]                       FUN = function(jj) {
[10:59:38.040]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.040]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.040]                           envir = globalenv(), inherits = FALSE)
[10:59:38.040]                         ...future.FUN(...future.X_jj, ...)
[10:59:38.040]                       })
[10:59:38.040]                   }
[10:59:38.040]                 }, args = future.call.arguments)
[10:59:38.040]             }))
[10:59:38.040]             future::FutureResult(value = ...future.value$value, 
[10:59:38.040]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.040]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.040]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.040]                     ...future.globalenv.names))
[10:59:38.040]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.040]         }, condition = base::local({
[10:59:38.040]             c <- base::c
[10:59:38.040]             inherits <- base::inherits
[10:59:38.040]             invokeRestart <- base::invokeRestart
[10:59:38.040]             length <- base::length
[10:59:38.040]             list <- base::list
[10:59:38.040]             seq.int <- base::seq.int
[10:59:38.040]             signalCondition <- base::signalCondition
[10:59:38.040]             sys.calls <- base::sys.calls
[10:59:38.040]             `[[` <- base::`[[`
[10:59:38.040]             `+` <- base::`+`
[10:59:38.040]             `<<-` <- base::`<<-`
[10:59:38.040]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.040]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.040]                   3L)]
[10:59:38.040]             }
[10:59:38.040]             function(cond) {
[10:59:38.040]                 is_error <- inherits(cond, "error")
[10:59:38.040]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.040]                   NULL)
[10:59:38.040]                 if (is_error) {
[10:59:38.040]                   sessionInformation <- function() {
[10:59:38.040]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.040]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.040]                       search = base::search(), system = base::Sys.info())
[10:59:38.040]                   }
[10:59:38.040]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.040]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.040]                     cond$call), session = sessionInformation(), 
[10:59:38.040]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.040]                   signalCondition(cond)
[10:59:38.040]                 }
[10:59:38.040]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.040]                 "immediateCondition"))) {
[10:59:38.040]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.040]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.040]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.040]                   if (TRUE && !signal) {
[10:59:38.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.040]                     {
[10:59:38.040]                       inherits <- base::inherits
[10:59:38.040]                       invokeRestart <- base::invokeRestart
[10:59:38.040]                       is.null <- base::is.null
[10:59:38.040]                       muffled <- FALSE
[10:59:38.040]                       if (inherits(cond, "message")) {
[10:59:38.040]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.040]                         if (muffled) 
[10:59:38.040]                           invokeRestart("muffleMessage")
[10:59:38.040]                       }
[10:59:38.040]                       else if (inherits(cond, "warning")) {
[10:59:38.040]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.040]                         if (muffled) 
[10:59:38.040]                           invokeRestart("muffleWarning")
[10:59:38.040]                       }
[10:59:38.040]                       else if (inherits(cond, "condition")) {
[10:59:38.040]                         if (!is.null(pattern)) {
[10:59:38.040]                           computeRestarts <- base::computeRestarts
[10:59:38.040]                           grepl <- base::grepl
[10:59:38.040]                           restarts <- computeRestarts(cond)
[10:59:38.040]                           for (restart in restarts) {
[10:59:38.040]                             name <- restart$name
[10:59:38.040]                             if (is.null(name)) 
[10:59:38.040]                               next
[10:59:38.040]                             if (!grepl(pattern, name)) 
[10:59:38.040]                               next
[10:59:38.040]                             invokeRestart(restart)
[10:59:38.040]                             muffled <- TRUE
[10:59:38.040]                             break
[10:59:38.040]                           }
[10:59:38.040]                         }
[10:59:38.040]                       }
[10:59:38.040]                       invisible(muffled)
[10:59:38.040]                     }
[10:59:38.040]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.040]                   }
[10:59:38.040]                 }
[10:59:38.040]                 else {
[10:59:38.040]                   if (TRUE) {
[10:59:38.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.040]                     {
[10:59:38.040]                       inherits <- base::inherits
[10:59:38.040]                       invokeRestart <- base::invokeRestart
[10:59:38.040]                       is.null <- base::is.null
[10:59:38.040]                       muffled <- FALSE
[10:59:38.040]                       if (inherits(cond, "message")) {
[10:59:38.040]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.040]                         if (muffled) 
[10:59:38.040]                           invokeRestart("muffleMessage")
[10:59:38.040]                       }
[10:59:38.040]                       else if (inherits(cond, "warning")) {
[10:59:38.040]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.040]                         if (muffled) 
[10:59:38.040]                           invokeRestart("muffleWarning")
[10:59:38.040]                       }
[10:59:38.040]                       else if (inherits(cond, "condition")) {
[10:59:38.040]                         if (!is.null(pattern)) {
[10:59:38.040]                           computeRestarts <- base::computeRestarts
[10:59:38.040]                           grepl <- base::grepl
[10:59:38.040]                           restarts <- computeRestarts(cond)
[10:59:38.040]                           for (restart in restarts) {
[10:59:38.040]                             name <- restart$name
[10:59:38.040]                             if (is.null(name)) 
[10:59:38.040]                               next
[10:59:38.040]                             if (!grepl(pattern, name)) 
[10:59:38.040]                               next
[10:59:38.040]                             invokeRestart(restart)
[10:59:38.040]                             muffled <- TRUE
[10:59:38.040]                             break
[10:59:38.040]                           }
[10:59:38.040]                         }
[10:59:38.040]                       }
[10:59:38.040]                       invisible(muffled)
[10:59:38.040]                     }
[10:59:38.040]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.040]                   }
[10:59:38.040]                 }
[10:59:38.040]             }
[10:59:38.040]         }))
[10:59:38.040]     }, error = function(ex) {
[10:59:38.040]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.040]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.040]                 ...future.rng), started = ...future.startTime, 
[10:59:38.040]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.040]             version = "1.8"), class = "FutureResult")
[10:59:38.040]     }, finally = {
[10:59:38.040]         if (!identical(...future.workdir, getwd())) 
[10:59:38.040]             setwd(...future.workdir)
[10:59:38.040]         {
[10:59:38.040]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.040]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.040]             }
[10:59:38.040]             base::options(...future.oldOptions)
[10:59:38.040]             if (.Platform$OS.type == "windows") {
[10:59:38.040]                 old_names <- names(...future.oldEnvVars)
[10:59:38.040]                 envs <- base::Sys.getenv()
[10:59:38.040]                 names <- names(envs)
[10:59:38.040]                 common <- intersect(names, old_names)
[10:59:38.040]                 added <- setdiff(names, old_names)
[10:59:38.040]                 removed <- setdiff(old_names, names)
[10:59:38.040]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.040]                   envs[common]]
[10:59:38.040]                 NAMES <- toupper(changed)
[10:59:38.040]                 args <- list()
[10:59:38.040]                 for (kk in seq_along(NAMES)) {
[10:59:38.040]                   name <- changed[[kk]]
[10:59:38.040]                   NAME <- NAMES[[kk]]
[10:59:38.040]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.040]                     next
[10:59:38.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.040]                 }
[10:59:38.040]                 NAMES <- toupper(added)
[10:59:38.040]                 for (kk in seq_along(NAMES)) {
[10:59:38.040]                   name <- added[[kk]]
[10:59:38.040]                   NAME <- NAMES[[kk]]
[10:59:38.040]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.040]                     next
[10:59:38.040]                   args[[name]] <- ""
[10:59:38.040]                 }
[10:59:38.040]                 NAMES <- toupper(removed)
[10:59:38.040]                 for (kk in seq_along(NAMES)) {
[10:59:38.040]                   name <- removed[[kk]]
[10:59:38.040]                   NAME <- NAMES[[kk]]
[10:59:38.040]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.040]                     next
[10:59:38.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.040]                 }
[10:59:38.040]                 if (length(args) > 0) 
[10:59:38.040]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.040]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.040]             }
[10:59:38.040]             else {
[10:59:38.040]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.040]             }
[10:59:38.040]             {
[10:59:38.040]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.040]                   0L) {
[10:59:38.040]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.040]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.040]                   base::options(opts)
[10:59:38.040]                 }
[10:59:38.040]                 {
[10:59:38.040]                   {
[10:59:38.040]                     base::assign(".Random.seed", c(10403L, 8L, 
[10:59:38.040]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:59:38.040]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:59:38.040]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:59:38.040]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:59:38.040]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:59:38.040]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:59:38.040]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:59:38.040]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:59:38.040]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:59:38.040]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:59:38.040]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:59:38.040]                     -1512233174L, -1985955764L, -425390065L, 
[10:59:38.040]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:59:38.040]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:59:38.040]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:59:38.040]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:59:38.040]                     1818328109L, -1284085436L, -1981489558L, 
[10:59:38.040]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:59:38.040]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:59:38.040]                     -1718567047L, -793788661L, -1133789126L, 
[10:59:38.040]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:59:38.040]                     -1823521982L, -1345991523L, -1672661737L, 
[10:59:38.040]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:59:38.040]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:59:38.040]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:59:38.040]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:59:38.040]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:59:38.040]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:59:38.040]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:59:38.040]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:59:38.040]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:59:38.040]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:59:38.040]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:59:38.040]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:59:38.040]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:59:38.040]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:59:38.040]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:59:38.040]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:59:38.040]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:59:38.040]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:59:38.040]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:59:38.040]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:59:38.040]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:59:38.040]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:59:38.040]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:59:38.040]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:59:38.040]                     -1119334354L, -1521015416L, -2041922421L, 
[10:59:38.040]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:59:38.040]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:59:38.040]                     1232111981L, -1801753084L, -1608606422L, 
[10:59:38.040]                     -1172096363L, 1420874031L, -1210473418L, 
[10:59:38.040]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:59:38.040]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:59:38.040]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:59:38.040]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:59:38.040]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:59:38.040]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:59:38.040]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:59:38.040]                     -332493318L, -1978392251L, -1691039632L, 
[10:59:38.040]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:59:38.040]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:59:38.040]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:59:38.040]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:59:38.040]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:59:38.040]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:59:38.040]                     -1178330196L, -687617348L, -1701912078L, 
[10:59:38.040]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:59:38.040]                     -1345416048L, 1816730492L, -1570431212L, 
[10:59:38.040]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:59:38.040]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:59:38.040]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:59:38.040]                     -1493184262L, -1943836976L, -590788308L, 
[10:59:38.040]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:59:38.040]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:59:38.040]                     1274857340L, -1205842638L, -1938479504L, 
[10:59:38.040]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:59:38.040]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:59:38.040]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:59:38.040]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:59:38.040]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:59:38.040]                     -1460751252L, 1201879444L, -1459788718L, 
[10:59:38.040]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:59:38.040]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:59:38.040]                     -420945808L, -1997735900L, -1838404552L, 
[10:59:38.040]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:59:38.040]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:59:38.040]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:59:38.040]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:59:38.040]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:59:38.040]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:59:38.040]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:59:38.040]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:59:38.040]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:59:38.040]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:59:38.040]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:59:38.040]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:59:38.040]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:59:38.040]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:59:38.040]                     -1357570110L, 1896595240L, -2066952276L, 
[10:59:38.040]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:59:38.040]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:59:38.040]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:59:38.040]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:59:38.040]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:59:38.040]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:59:38.040]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:59:38.040]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:59:38.040]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:59:38.040]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:59:38.040]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:59:38.040]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:59:38.040]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:59:38.040]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:59:38.040]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:59:38.040]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:59:38.040]                     -1365842884L, -438961294L, -1851472272L, 
[10:59:38.040]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:59:38.040]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:59:38.040]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:59:38.040]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:59:38.040]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:59:38.040]                     -594809770L, -2146766621L, -2013964635L, 
[10:59:38.040]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:59:38.040]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:59:38.040]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:59:38.040]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:59:38.040]                     -1426021878L, -1285634264L, 1507547537L, 
[10:59:38.040]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:59:38.040]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:59:38.040]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:59:38.040]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:59:38.040]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:59:38.040]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:59:38.040]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:59:38.040]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:59:38.040]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:59:38.040]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:59:38.040]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:59:38.040]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:59:38.040]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:59:38.040]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:59:38.040]                     -1604604761L, 1421229008L, -1268333714L, 
[10:59:38.040]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:59:38.040]                     -2070476623L, -2099222749L, 1141171236L, 
[10:59:38.040]                     -146426158L, -1797385433L, -1129376399L, 
[10:59:38.040]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:59:38.040]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:59:38.040]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:59:38.040]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:59:38.040]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:59:38.040]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:59:38.040]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:59:38.040]                     -1092079724L, -1765622238L, -1882554057L, 
[10:59:38.040]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:59:38.040]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:59:38.040]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:59:38.040]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:59:38.040]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:59:38.040]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:59:38.040]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:59:38.040]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:59:38.040]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:59:38.040]                       inherits = FALSE)
[10:59:38.040]                     NULL
[10:59:38.040]                   }
[10:59:38.040]                   options(future.plan = NULL)
[10:59:38.040]                   if (is.na(NA_character_)) 
[10:59:38.040]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.040]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.040]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.040]                     .init = FALSE)
[10:59:38.040]                 }
[10:59:38.040]             }
[10:59:38.040]         }
[10:59:38.040]     })
[10:59:38.040]     if (TRUE) {
[10:59:38.040]         base::sink(type = "output", split = FALSE)
[10:59:38.040]         if (TRUE) {
[10:59:38.040]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.040]         }
[10:59:38.040]         else {
[10:59:38.040]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.040]         }
[10:59:38.040]         base::close(...future.stdout)
[10:59:38.040]         ...future.stdout <- NULL
[10:59:38.040]     }
[10:59:38.040]     ...future.result$conditions <- ...future.conditions
[10:59:38.040]     ...future.result$finished <- base::Sys.time()
[10:59:38.040]     ...future.result
[10:59:38.040] }
[10:59:38.042] assign_globals() ...
[10:59:38.042] List of 7
[10:59:38.042]  $ ...future.FUN            :function (...)  
[10:59:38.042]  $ foo                      :function (x = 1, y = 2)  
[10:59:38.042]  $ x                        : num 3
[10:59:38.042]  $ future.call.arguments    : list()
[10:59:38.042]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.042]  $ ...future.elements_ii    :List of 5
[10:59:38.042]   ..$ : int 0
[10:59:38.042]   ..$ : int 0
[10:59:38.042]   ..$ : int 0
[10:59:38.042]   ..$ : int 0
[10:59:38.042]   ..$ : int 0
[10:59:38.042]  $ ...future.seeds_ii       :List of 5
[10:59:38.042]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[10:59:38.042]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[10:59:38.042]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[10:59:38.042]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[10:59:38.042]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[10:59:38.042]  $ ...future.globals.maxSize: NULL
[10:59:38.042]  - attr(*, "where")=List of 7
[10:59:38.042]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.042]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:59:38.042]   ..$ x                        :<environment: R_EmptyEnv> 
[10:59:38.042]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.042]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.042]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.042]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.042]  - attr(*, "resolved")= logi FALSE
[10:59:38.042]  - attr(*, "total_size")= num 7967
[10:59:38.042]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.042]  - attr(*, "already-done")= logi TRUE
[10:59:38.051] - reassign environment for ‘...future.FUN’
[10:59:38.051] - copied ‘...future.FUN’ to environment
[10:59:38.051] - reassign environment for ‘foo’
[10:59:38.051] - copied ‘foo’ to environment
[10:59:38.051] - copied ‘x’ to environment
[10:59:38.051] - copied ‘future.call.arguments’ to environment
[10:59:38.051] - copied ‘...future.elements_ii’ to environment
[10:59:38.051] - copied ‘...future.seeds_ii’ to environment
[10:59:38.051] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.052] assign_globals() ... done
[10:59:38.052] plan(): Setting new future strategy stack:
[10:59:38.052] List of future strategies:
[10:59:38.052] 1. sequential:
[10:59:38.052]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.052]    - tweaked: FALSE
[10:59:38.052]    - call: NULL
[10:59:38.052] plan(): nbrOfWorkers() = 1
[10:59:38.053] plan(): Setting new future strategy stack:
[10:59:38.053] List of future strategies:
[10:59:38.053] 1. sequential:
[10:59:38.053]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.053]    - tweaked: FALSE
[10:59:38.053]    - call: plan(strategy)
[10:59:38.053] plan(): nbrOfWorkers() = 1
[10:59:38.054] SequentialFuture started (and completed)
[10:59:38.054] - Launch lazy future ... done
[10:59:38.054] run() for ‘SequentialFuture’ ... done
[10:59:38.054] Created future:
[10:59:38.054] SequentialFuture:
[10:59:38.054] Label: ‘future_replicate-1’
[10:59:38.054] Expression:
[10:59:38.054] {
[10:59:38.054]     do.call(function(...) {
[10:59:38.054]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.054]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.054]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.054]             on.exit(options(oopts), add = TRUE)
[10:59:38.054]         }
[10:59:38.054]         {
[10:59:38.054]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.054]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.054]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.054]                   envir = globalenv(), inherits = FALSE)
[10:59:38.054]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.054]             })
[10:59:38.054]         }
[10:59:38.054]     }, args = future.call.arguments)
[10:59:38.054] }
[10:59:38.054] Lazy evaluation: FALSE
[10:59:38.054] Asynchronous evaluation: FALSE
[10:59:38.054] Local evaluation: TRUE
[10:59:38.054] Environment: 0x56262ebc8a70
[10:59:38.054] Capture standard output: TRUE
[10:59:38.054] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.054] Globals: 7 objects totaling 1.02 KiB (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, ...)
[10:59:38.054] Packages: <none>
[10:59:38.054] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.054] Resolved: TRUE
[10:59:38.054] Value: 151 bytes of class ‘list’
[10:59:38.054] Early signaling: FALSE
[10:59:38.054] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.054] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:59:38.055] Chunk #1 of 1 ... DONE
[10:59:38.055] Launching 1 futures (chunks) ... DONE
[10:59:38.055] Resolving 1 futures (chunks) ...
[10:59:38.055] resolve() on list ...
[10:59:38.055]  recursive: 0
[10:59:38.055]  length: 1
[10:59:38.055] 
[10:59:38.055] resolved() for ‘SequentialFuture’ ...
[10:59:38.056] - state: ‘finished’
[10:59:38.056] - run: TRUE
[10:59:38.056] - result: ‘FutureResult’
[10:59:38.056] resolved() for ‘SequentialFuture’ ... done
[10:59:38.056] Future #1
[10:59:38.056] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:59:38.056] - nx: 1
[10:59:38.056] - relay: TRUE
[10:59:38.056] - stdout: TRUE
[10:59:38.056] - signal: TRUE
[10:59:38.056] - resignal: FALSE
[10:59:38.056] - force: TRUE
[10:59:38.057] - relayed: [n=1] FALSE
[10:59:38.057] - queued futures: [n=1] FALSE
[10:59:38.057]  - until=1
[10:59:38.057]  - relaying element #1
[10:59:38.057] - relayed: [n=1] TRUE
[10:59:38.057] - queued futures: [n=1] TRUE
[10:59:38.057] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:59:38.057]  length: 0 (resolved future 1)
[10:59:38.057] Relaying remaining futures
[10:59:38.057] signalConditionsASAP(NULL, pos=0) ...
[10:59:38.057] - nx: 1
[10:59:38.057] - relay: TRUE
[10:59:38.058] - stdout: TRUE
[10:59:38.058] - signal: TRUE
[10:59:38.058] - resignal: FALSE
[10:59:38.058] - force: TRUE
[10:59:38.058] - relayed: [n=1] TRUE
[10:59:38.058] - queued futures: [n=1] TRUE
 - flush all
[10:59:38.058] - relayed: [n=1] TRUE
[10:59:38.058] - queued futures: [n=1] TRUE
[10:59:38.058] signalConditionsASAP(NULL, pos=0) ... done
[10:59:38.058] resolve() on list ... DONE
[10:59:38.058]  - Number of value chunks collected: 1
[10:59:38.058] Resolving 1 futures (chunks) ... DONE
[10:59:38.059] Reducing values from 1 chunks ...
[10:59:38.059]  - Number of values collected after concatenation: 5
[10:59:38.059]  - Number of values expected: 5
[10:59:38.059] Reducing values from 1 chunks ... DONE
[10:59:38.059] future_lapply() ... DONE
[10:59:38.059] plan(): Setting new future strategy stack:
[10:59:38.059] List of future strategies:
[10:59:38.059] 1. sequential:
[10:59:38.059]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.059]    - tweaked: FALSE
[10:59:38.059]    - call: plan(sequential)
[10:59:38.060] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[10:59:38.060] plan(): Setting new future strategy stack:
[10:59:38.060] List of future strategies:
[10:59:38.060] 1. multicore:
[10:59:38.060]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.060]    - tweaked: FALSE
[10:59:38.060]    - call: plan(strategy)
[10:59:38.062] plan(): nbrOfWorkers() = 2
[10:59:38.062] future_lapply() ...
[10:59:38.062] Generating random seeds ...
[10:59:38.063] Generating random seed streams for 5 elements ...
[10:59:38.063] Generating random seed streams for 5 elements ... DONE
[10:59:38.063] Generating random seeds ... DONE
[10:59:38.063] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:38.066] Number of chunks: 2
[10:59:38.066] getGlobalsAndPackagesXApply() ...
[10:59:38.066]  - future.globals: TRUE
[10:59:38.066] getGlobalsAndPackages() ...
[10:59:38.066] Searching for globals...
[10:59:38.067] - globals found: [2] ‘FUN’, ‘sample’
[10:59:38.067] Searching for globals ... DONE
[10:59:38.067] Resolving globals: FALSE
[10:59:38.068] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:38.068] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:38.068] - globals: [1] ‘FUN’
[10:59:38.068] 
[10:59:38.068] getGlobalsAndPackages() ... DONE
[10:59:38.068]  - globals found/used: [n=1] ‘FUN’
[10:59:38.068]  - needed namespaces: [n=0] 
[10:59:38.068] Finding globals ... DONE
[10:59:38.069]  - use_args: TRUE
[10:59:38.069]  - Getting '...' globals ...
[10:59:38.069] resolve() on list ...
[10:59:38.069]  recursive: 0
[10:59:38.069]  length: 1
[10:59:38.069]  elements: ‘...’
[10:59:38.069]  length: 0 (resolved future 1)
[10:59:38.069] resolve() on list ... DONE
[10:59:38.069]    - '...' content: [n=0] 
[10:59:38.070] List of 1
[10:59:38.070]  $ ...: list()
[10:59:38.070]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.070]  - attr(*, "where")=List of 1
[10:59:38.070]   ..$ ...:<environment: 0x56262e6bffc0> 
[10:59:38.070]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.070]  - attr(*, "resolved")= logi TRUE
[10:59:38.070]  - attr(*, "total_size")= num NA
[10:59:38.072]  - Getting '...' globals ... DONE
[10:59:38.072] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:38.073] List of 2
[10:59:38.073]  $ ...future.FUN:function (...)  
[10:59:38.073]  $ ...          : list()
[10:59:38.073]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.073]  - attr(*, "where")=List of 2
[10:59:38.073]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:38.073]   ..$ ...          :<environment: 0x56262e6bffc0> 
[10:59:38.073]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.073]  - attr(*, "resolved")= logi FALSE
[10:59:38.073]  - attr(*, "total_size")= num 7184
[10:59:38.076] Packages to be attached in all futures: [n=0] 
[10:59:38.076] getGlobalsAndPackagesXApply() ... DONE
[10:59:38.076] Number of futures (= number of chunks): 2
[10:59:38.076] Launching 2 futures (chunks) ...
[10:59:38.076] Chunk #1 of 2 ...
[10:59:38.076]  - Finding globals in 'X' for chunk #1 ...
[10:59:38.076] getGlobalsAndPackages() ...
[10:59:38.076] Searching for globals...
[10:59:38.077] 
[10:59:38.077] Searching for globals ... DONE
[10:59:38.077] - globals: [0] <none>
[10:59:38.077] getGlobalsAndPackages() ... DONE
[10:59:38.077]    + additional globals found: [n=0] 
[10:59:38.077]    + additional namespaces needed: [n=0] 
[10:59:38.077]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:38.077]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.077]  - seeds: [2] <seeds>
[10:59:38.077]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.077] getGlobalsAndPackages() ...
[10:59:38.077] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.078] Resolving globals: FALSE
[10:59:38.078] Tweak future expression to call with '...' arguments ...
[10:59:38.078] {
[10:59:38.078]     do.call(function(...) {
[10:59:38.078]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.078]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.078]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.078]             on.exit(options(oopts), add = TRUE)
[10:59:38.078]         }
[10:59:38.078]         {
[10:59:38.078]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.078]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.078]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.078]                   envir = globalenv(), inherits = FALSE)
[10:59:38.078]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.078]             })
[10:59:38.078]         }
[10:59:38.078]     }, args = future.call.arguments)
[10:59:38.078] }
[10:59:38.078] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.078] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.078] 
[10:59:38.078] getGlobalsAndPackages() ... DONE
[10:59:38.079] run() for ‘Future’ ...
[10:59:38.079] - state: ‘created’
[10:59:38.079] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.080] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.081] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.081]   - Field: ‘label’
[10:59:38.081]   - Field: ‘local’
[10:59:38.081]   - Field: ‘owner’
[10:59:38.081]   - Field: ‘envir’
[10:59:38.081]   - Field: ‘workers’
[10:59:38.081]   - Field: ‘packages’
[10:59:38.081]   - Field: ‘gc’
[10:59:38.081]   - Field: ‘job’
[10:59:38.081]   - Field: ‘conditions’
[10:59:38.081]   - Field: ‘expr’
[10:59:38.082]   - Field: ‘uuid’
[10:59:38.082]   - Field: ‘seed’
[10:59:38.082]   - Field: ‘version’
[10:59:38.082]   - Field: ‘result’
[10:59:38.082]   - Field: ‘asynchronous’
[10:59:38.082]   - Field: ‘calls’
[10:59:38.082]   - Field: ‘globals’
[10:59:38.082]   - Field: ‘stdout’
[10:59:38.082]   - Field: ‘earlySignal’
[10:59:38.082]   - Field: ‘lazy’
[10:59:38.082]   - Field: ‘state’
[10:59:38.082] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.082] - Launch lazy future ...
[10:59:38.083] Packages needed by the future expression (n = 0): <none>
[10:59:38.083] Packages needed by future strategies (n = 0): <none>
[10:59:38.084] {
[10:59:38.084]     {
[10:59:38.084]         {
[10:59:38.084]             ...future.startTime <- base::Sys.time()
[10:59:38.084]             {
[10:59:38.084]                 {
[10:59:38.084]                   {
[10:59:38.084]                     {
[10:59:38.084]                       base::local({
[10:59:38.084]                         has_future <- base::requireNamespace("future", 
[10:59:38.084]                           quietly = TRUE)
[10:59:38.084]                         if (has_future) {
[10:59:38.084]                           ns <- base::getNamespace("future")
[10:59:38.084]                           version <- ns[[".package"]][["version"]]
[10:59:38.084]                           if (is.null(version)) 
[10:59:38.084]                             version <- utils::packageVersion("future")
[10:59:38.084]                         }
[10:59:38.084]                         else {
[10:59:38.084]                           version <- NULL
[10:59:38.084]                         }
[10:59:38.084]                         if (!has_future || version < "1.8.0") {
[10:59:38.084]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.084]                             "", base::R.version$version.string), 
[10:59:38.084]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.084]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.084]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.084]                               "release", "version")], collapse = " "), 
[10:59:38.084]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.084]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.084]                             info)
[10:59:38.084]                           info <- base::paste(info, collapse = "; ")
[10:59:38.084]                           if (!has_future) {
[10:59:38.084]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.084]                               info)
[10:59:38.084]                           }
[10:59:38.084]                           else {
[10:59:38.084]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.084]                               info, version)
[10:59:38.084]                           }
[10:59:38.084]                           base::stop(msg)
[10:59:38.084]                         }
[10:59:38.084]                       })
[10:59:38.084]                     }
[10:59:38.084]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.084]                     base::options(mc.cores = 1L)
[10:59:38.084]                   }
[10:59:38.084]                   ...future.strategy.old <- future::plan("list")
[10:59:38.084]                   options(future.plan = NULL)
[10:59:38.084]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.084]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.084]                 }
[10:59:38.084]                 ...future.workdir <- getwd()
[10:59:38.084]             }
[10:59:38.084]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.084]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.084]         }
[10:59:38.084]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.084]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.084]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.084]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.084]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.084]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.084]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.084]             base::names(...future.oldOptions))
[10:59:38.084]     }
[10:59:38.084]     if (FALSE) {
[10:59:38.084]     }
[10:59:38.084]     else {
[10:59:38.084]         if (TRUE) {
[10:59:38.084]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.084]                 open = "w")
[10:59:38.084]         }
[10:59:38.084]         else {
[10:59:38.084]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.084]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.084]         }
[10:59:38.084]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.084]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.084]             base::sink(type = "output", split = FALSE)
[10:59:38.084]             base::close(...future.stdout)
[10:59:38.084]         }, add = TRUE)
[10:59:38.084]     }
[10:59:38.084]     ...future.frame <- base::sys.nframe()
[10:59:38.084]     ...future.conditions <- base::list()
[10:59:38.084]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.084]     if (FALSE) {
[10:59:38.084]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.084]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.084]     }
[10:59:38.084]     ...future.result <- base::tryCatch({
[10:59:38.084]         base::withCallingHandlers({
[10:59:38.084]             ...future.value <- base::withVisible(base::local({
[10:59:38.084]                 withCallingHandlers({
[10:59:38.084]                   {
[10:59:38.084]                     do.call(function(...) {
[10:59:38.084]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.084]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.084]                         ...future.globals.maxSize)) {
[10:59:38.084]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.084]                         on.exit(options(oopts), add = TRUE)
[10:59:38.084]                       }
[10:59:38.084]                       {
[10:59:38.084]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.084]                           FUN = function(jj) {
[10:59:38.084]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.084]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.084]                               envir = globalenv(), inherits = FALSE)
[10:59:38.084]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.084]                           })
[10:59:38.084]                       }
[10:59:38.084]                     }, args = future.call.arguments)
[10:59:38.084]                   }
[10:59:38.084]                 }, immediateCondition = function(cond) {
[10:59:38.084]                   save_rds <- function (object, pathname, ...) 
[10:59:38.084]                   {
[10:59:38.084]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.084]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.084]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.084]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.084]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.084]                         fi_tmp[["mtime"]])
[10:59:38.084]                     }
[10:59:38.084]                     tryCatch({
[10:59:38.084]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.084]                     }, error = function(ex) {
[10:59:38.084]                       msg <- conditionMessage(ex)
[10:59:38.084]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.084]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.084]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.084]                         fi_tmp[["mtime"]], msg)
[10:59:38.084]                       ex$message <- msg
[10:59:38.084]                       stop(ex)
[10:59:38.084]                     })
[10:59:38.084]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.084]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.084]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.084]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.084]                       fi <- file.info(pathname)
[10:59:38.084]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.084]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.084]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.084]                         fi[["size"]], fi[["mtime"]])
[10:59:38.084]                       stop(msg)
[10:59:38.084]                     }
[10:59:38.084]                     invisible(pathname)
[10:59:38.084]                   }
[10:59:38.084]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.084]                     rootPath = tempdir()) 
[10:59:38.084]                   {
[10:59:38.084]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.084]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.084]                       tmpdir = path, fileext = ".rds")
[10:59:38.084]                     save_rds(obj, file)
[10:59:38.084]                   }
[10:59:38.084]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.084]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.084]                   {
[10:59:38.084]                     inherits <- base::inherits
[10:59:38.084]                     invokeRestart <- base::invokeRestart
[10:59:38.084]                     is.null <- base::is.null
[10:59:38.084]                     muffled <- FALSE
[10:59:38.084]                     if (inherits(cond, "message")) {
[10:59:38.084]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.084]                       if (muffled) 
[10:59:38.084]                         invokeRestart("muffleMessage")
[10:59:38.084]                     }
[10:59:38.084]                     else if (inherits(cond, "warning")) {
[10:59:38.084]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.084]                       if (muffled) 
[10:59:38.084]                         invokeRestart("muffleWarning")
[10:59:38.084]                     }
[10:59:38.084]                     else if (inherits(cond, "condition")) {
[10:59:38.084]                       if (!is.null(pattern)) {
[10:59:38.084]                         computeRestarts <- base::computeRestarts
[10:59:38.084]                         grepl <- base::grepl
[10:59:38.084]                         restarts <- computeRestarts(cond)
[10:59:38.084]                         for (restart in restarts) {
[10:59:38.084]                           name <- restart$name
[10:59:38.084]                           if (is.null(name)) 
[10:59:38.084]                             next
[10:59:38.084]                           if (!grepl(pattern, name)) 
[10:59:38.084]                             next
[10:59:38.084]                           invokeRestart(restart)
[10:59:38.084]                           muffled <- TRUE
[10:59:38.084]                           break
[10:59:38.084]                         }
[10:59:38.084]                       }
[10:59:38.084]                     }
[10:59:38.084]                     invisible(muffled)
[10:59:38.084]                   }
[10:59:38.084]                   muffleCondition(cond)
[10:59:38.084]                 })
[10:59:38.084]             }))
[10:59:38.084]             future::FutureResult(value = ...future.value$value, 
[10:59:38.084]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.084]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.084]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.084]                     ...future.globalenv.names))
[10:59:38.084]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.084]         }, condition = base::local({
[10:59:38.084]             c <- base::c
[10:59:38.084]             inherits <- base::inherits
[10:59:38.084]             invokeRestart <- base::invokeRestart
[10:59:38.084]             length <- base::length
[10:59:38.084]             list <- base::list
[10:59:38.084]             seq.int <- base::seq.int
[10:59:38.084]             signalCondition <- base::signalCondition
[10:59:38.084]             sys.calls <- base::sys.calls
[10:59:38.084]             `[[` <- base::`[[`
[10:59:38.084]             `+` <- base::`+`
[10:59:38.084]             `<<-` <- base::`<<-`
[10:59:38.084]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.084]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.084]                   3L)]
[10:59:38.084]             }
[10:59:38.084]             function(cond) {
[10:59:38.084]                 is_error <- inherits(cond, "error")
[10:59:38.084]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.084]                   NULL)
[10:59:38.084]                 if (is_error) {
[10:59:38.084]                   sessionInformation <- function() {
[10:59:38.084]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.084]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.084]                       search = base::search(), system = base::Sys.info())
[10:59:38.084]                   }
[10:59:38.084]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.084]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.084]                     cond$call), session = sessionInformation(), 
[10:59:38.084]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.084]                   signalCondition(cond)
[10:59:38.084]                 }
[10:59:38.084]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.084]                 "immediateCondition"))) {
[10:59:38.084]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.084]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.084]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.084]                   if (TRUE && !signal) {
[10:59:38.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.084]                     {
[10:59:38.084]                       inherits <- base::inherits
[10:59:38.084]                       invokeRestart <- base::invokeRestart
[10:59:38.084]                       is.null <- base::is.null
[10:59:38.084]                       muffled <- FALSE
[10:59:38.084]                       if (inherits(cond, "message")) {
[10:59:38.084]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.084]                         if (muffled) 
[10:59:38.084]                           invokeRestart("muffleMessage")
[10:59:38.084]                       }
[10:59:38.084]                       else if (inherits(cond, "warning")) {
[10:59:38.084]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.084]                         if (muffled) 
[10:59:38.084]                           invokeRestart("muffleWarning")
[10:59:38.084]                       }
[10:59:38.084]                       else if (inherits(cond, "condition")) {
[10:59:38.084]                         if (!is.null(pattern)) {
[10:59:38.084]                           computeRestarts <- base::computeRestarts
[10:59:38.084]                           grepl <- base::grepl
[10:59:38.084]                           restarts <- computeRestarts(cond)
[10:59:38.084]                           for (restart in restarts) {
[10:59:38.084]                             name <- restart$name
[10:59:38.084]                             if (is.null(name)) 
[10:59:38.084]                               next
[10:59:38.084]                             if (!grepl(pattern, name)) 
[10:59:38.084]                               next
[10:59:38.084]                             invokeRestart(restart)
[10:59:38.084]                             muffled <- TRUE
[10:59:38.084]                             break
[10:59:38.084]                           }
[10:59:38.084]                         }
[10:59:38.084]                       }
[10:59:38.084]                       invisible(muffled)
[10:59:38.084]                     }
[10:59:38.084]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.084]                   }
[10:59:38.084]                 }
[10:59:38.084]                 else {
[10:59:38.084]                   if (TRUE) {
[10:59:38.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.084]                     {
[10:59:38.084]                       inherits <- base::inherits
[10:59:38.084]                       invokeRestart <- base::invokeRestart
[10:59:38.084]                       is.null <- base::is.null
[10:59:38.084]                       muffled <- FALSE
[10:59:38.084]                       if (inherits(cond, "message")) {
[10:59:38.084]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.084]                         if (muffled) 
[10:59:38.084]                           invokeRestart("muffleMessage")
[10:59:38.084]                       }
[10:59:38.084]                       else if (inherits(cond, "warning")) {
[10:59:38.084]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.084]                         if (muffled) 
[10:59:38.084]                           invokeRestart("muffleWarning")
[10:59:38.084]                       }
[10:59:38.084]                       else if (inherits(cond, "condition")) {
[10:59:38.084]                         if (!is.null(pattern)) {
[10:59:38.084]                           computeRestarts <- base::computeRestarts
[10:59:38.084]                           grepl <- base::grepl
[10:59:38.084]                           restarts <- computeRestarts(cond)
[10:59:38.084]                           for (restart in restarts) {
[10:59:38.084]                             name <- restart$name
[10:59:38.084]                             if (is.null(name)) 
[10:59:38.084]                               next
[10:59:38.084]                             if (!grepl(pattern, name)) 
[10:59:38.084]                               next
[10:59:38.084]                             invokeRestart(restart)
[10:59:38.084]                             muffled <- TRUE
[10:59:38.084]                             break
[10:59:38.084]                           }
[10:59:38.084]                         }
[10:59:38.084]                       }
[10:59:38.084]                       invisible(muffled)
[10:59:38.084]                     }
[10:59:38.084]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.084]                   }
[10:59:38.084]                 }
[10:59:38.084]             }
[10:59:38.084]         }))
[10:59:38.084]     }, error = function(ex) {
[10:59:38.084]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.084]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.084]                 ...future.rng), started = ...future.startTime, 
[10:59:38.084]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.084]             version = "1.8"), class = "FutureResult")
[10:59:38.084]     }, finally = {
[10:59:38.084]         if (!identical(...future.workdir, getwd())) 
[10:59:38.084]             setwd(...future.workdir)
[10:59:38.084]         {
[10:59:38.084]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.084]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.084]             }
[10:59:38.084]             base::options(...future.oldOptions)
[10:59:38.084]             if (.Platform$OS.type == "windows") {
[10:59:38.084]                 old_names <- names(...future.oldEnvVars)
[10:59:38.084]                 envs <- base::Sys.getenv()
[10:59:38.084]                 names <- names(envs)
[10:59:38.084]                 common <- intersect(names, old_names)
[10:59:38.084]                 added <- setdiff(names, old_names)
[10:59:38.084]                 removed <- setdiff(old_names, names)
[10:59:38.084]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.084]                   envs[common]]
[10:59:38.084]                 NAMES <- toupper(changed)
[10:59:38.084]                 args <- list()
[10:59:38.084]                 for (kk in seq_along(NAMES)) {
[10:59:38.084]                   name <- changed[[kk]]
[10:59:38.084]                   NAME <- NAMES[[kk]]
[10:59:38.084]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.084]                     next
[10:59:38.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.084]                 }
[10:59:38.084]                 NAMES <- toupper(added)
[10:59:38.084]                 for (kk in seq_along(NAMES)) {
[10:59:38.084]                   name <- added[[kk]]
[10:59:38.084]                   NAME <- NAMES[[kk]]
[10:59:38.084]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.084]                     next
[10:59:38.084]                   args[[name]] <- ""
[10:59:38.084]                 }
[10:59:38.084]                 NAMES <- toupper(removed)
[10:59:38.084]                 for (kk in seq_along(NAMES)) {
[10:59:38.084]                   name <- removed[[kk]]
[10:59:38.084]                   NAME <- NAMES[[kk]]
[10:59:38.084]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.084]                     next
[10:59:38.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.084]                 }
[10:59:38.084]                 if (length(args) > 0) 
[10:59:38.084]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.084]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.084]             }
[10:59:38.084]             else {
[10:59:38.084]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.084]             }
[10:59:38.084]             {
[10:59:38.084]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.084]                   0L) {
[10:59:38.084]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.084]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.084]                   base::options(opts)
[10:59:38.084]                 }
[10:59:38.084]                 {
[10:59:38.084]                   {
[10:59:38.084]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.084]                     NULL
[10:59:38.084]                   }
[10:59:38.084]                   options(future.plan = NULL)
[10:59:38.084]                   if (is.na(NA_character_)) 
[10:59:38.084]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.084]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.084]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.084]                     .init = FALSE)
[10:59:38.084]                 }
[10:59:38.084]             }
[10:59:38.084]         }
[10:59:38.084]     })
[10:59:38.084]     if (TRUE) {
[10:59:38.084]         base::sink(type = "output", split = FALSE)
[10:59:38.084]         if (TRUE) {
[10:59:38.084]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.084]         }
[10:59:38.084]         else {
[10:59:38.084]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.084]         }
[10:59:38.084]         base::close(...future.stdout)
[10:59:38.084]         ...future.stdout <- NULL
[10:59:38.084]     }
[10:59:38.084]     ...future.result$conditions <- ...future.conditions
[10:59:38.084]     ...future.result$finished <- base::Sys.time()
[10:59:38.084]     ...future.result
[10:59:38.084] }
[10:59:38.086] assign_globals() ...
[10:59:38.086] List of 5
[10:59:38.086]  $ ...future.FUN            :function (...)  
[10:59:38.086]  $ future.call.arguments    : list()
[10:59:38.086]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.086]  $ ...future.elements_ii    :List of 2
[10:59:38.086]   ..$ : int 0
[10:59:38.086]   ..$ : int 0
[10:59:38.086]  $ ...future.seeds_ii       :List of 2
[10:59:38.086]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[10:59:38.086]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[10:59:38.086]  $ ...future.globals.maxSize: NULL
[10:59:38.086]  - attr(*, "where")=List of 5
[10:59:38.086]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.086]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.086]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.086]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.086]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.086]  - attr(*, "resolved")= logi FALSE
[10:59:38.086]  - attr(*, "total_size")= num 7184
[10:59:38.086]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.086]  - attr(*, "already-done")= logi TRUE
[10:59:38.091] - reassign environment for ‘...future.FUN’
[10:59:38.091] - copied ‘...future.FUN’ to environment
[10:59:38.092] - copied ‘future.call.arguments’ to environment
[10:59:38.092] - copied ‘...future.elements_ii’ to environment
[10:59:38.092] - copied ‘...future.seeds_ii’ to environment
[10:59:38.092] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.092] assign_globals() ... done
[10:59:38.092] requestCore(): workers = 2
[10:59:38.095] MulticoreFuture started
[10:59:38.095] - Launch lazy future ... done
[10:59:38.096] run() for ‘MulticoreFuture’ ... done
[10:59:38.096] plan(): Setting new future strategy stack:
[10:59:38.096] Created future:
[10:59:38.096] List of future strategies:
[10:59:38.096] 1. sequential:
[10:59:38.096]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.096]    - tweaked: FALSE
[10:59:38.096]    - call: NULL
[10:59:38.097] plan(): nbrOfWorkers() = 1
[10:59:38.099] plan(): Setting new future strategy stack:
[10:59:38.099] List of future strategies:
[10:59:38.099] 1. multicore:
[10:59:38.099]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.099]    - tweaked: FALSE
[10:59:38.099]    - call: plan(strategy)
[10:59:38.102] plan(): nbrOfWorkers() = 2
[10:59:38.096] MulticoreFuture:
[10:59:38.096] Label: ‘future_replicate-1’
[10:59:38.096] Expression:
[10:59:38.096] {
[10:59:38.096]     do.call(function(...) {
[10:59:38.096]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.096]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.096]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.096]             on.exit(options(oopts), add = TRUE)
[10:59:38.096]         }
[10:59:38.096]         {
[10:59:38.096]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.096]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.096]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.096]                   envir = globalenv(), inherits = FALSE)
[10:59:38.096]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.096]             })
[10:59:38.096]         }
[10:59:38.096]     }, args = future.call.arguments)
[10:59:38.096] }
[10:59:38.096] Lazy evaluation: FALSE
[10:59:38.096] Asynchronous evaluation: TRUE
[10:59:38.096] Local evaluation: TRUE
[10:59:38.096] Environment: R_GlobalEnv
[10:59:38.096] Capture standard output: TRUE
[10:59:38.096] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.096] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.096] Packages: <none>
[10:59:38.096] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.096] Resolved: TRUE
[10:59:38.096] Value: <not collected>
[10:59:38.096] Conditions captured: <none>
[10:59:38.096] Early signaling: FALSE
[10:59:38.096] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.096] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.103] Chunk #1 of 2 ... DONE
[10:59:38.103] Chunk #2 of 2 ...
[10:59:38.104]  - Finding globals in 'X' for chunk #2 ...
[10:59:38.104] getGlobalsAndPackages() ...
[10:59:38.104] Searching for globals...
[10:59:38.104] 
[10:59:38.105] Searching for globals ... DONE
[10:59:38.105] - globals: [0] <none>
[10:59:38.105] getGlobalsAndPackages() ... DONE
[10:59:38.105]    + additional globals found: [n=0] 
[10:59:38.105]    + additional namespaces needed: [n=0] 
[10:59:38.105]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:38.109]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.110]  - seeds: [3] <seeds>
[10:59:38.110]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.110] getGlobalsAndPackages() ...
[10:59:38.110] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.110] Resolving globals: FALSE
[10:59:38.110] Tweak future expression to call with '...' arguments ...
[10:59:38.111] {
[10:59:38.111]     do.call(function(...) {
[10:59:38.111]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.111]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.111]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.111]             on.exit(options(oopts), add = TRUE)
[10:59:38.111]         }
[10:59:38.111]         {
[10:59:38.111]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.111]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.111]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.111]                   envir = globalenv(), inherits = FALSE)
[10:59:38.111]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.111]             })
[10:59:38.111]         }
[10:59:38.111]     }, args = future.call.arguments)
[10:59:38.111] }
[10:59:38.111] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.112] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.112] 
[10:59:38.112] getGlobalsAndPackages() ... DONE
[10:59:38.113] run() for ‘Future’ ...
[10:59:38.113] - state: ‘created’
[10:59:38.113] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.116] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.116] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.116]   - Field: ‘label’
[10:59:38.116]   - Field: ‘local’
[10:59:38.117]   - Field: ‘owner’
[10:59:38.117]   - Field: ‘envir’
[10:59:38.117]   - Field: ‘workers’
[10:59:38.117]   - Field: ‘packages’
[10:59:38.117]   - Field: ‘gc’
[10:59:38.117]   - Field: ‘job’
[10:59:38.117]   - Field: ‘conditions’
[10:59:38.118]   - Field: ‘expr’
[10:59:38.118]   - Field: ‘uuid’
[10:59:38.118]   - Field: ‘seed’
[10:59:38.118]   - Field: ‘version’
[10:59:38.118]   - Field: ‘result’
[10:59:38.118]   - Field: ‘asynchronous’
[10:59:38.118]   - Field: ‘calls’
[10:59:38.119]   - Field: ‘globals’
[10:59:38.119]   - Field: ‘stdout’
[10:59:38.119]   - Field: ‘earlySignal’
[10:59:38.119]   - Field: ‘lazy’
[10:59:38.119]   - Field: ‘state’
[10:59:38.119] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.119] - Launch lazy future ...
[10:59:38.120] Packages needed by the future expression (n = 0): <none>
[10:59:38.120] Packages needed by future strategies (n = 0): <none>
[10:59:38.121] {
[10:59:38.121]     {
[10:59:38.121]         {
[10:59:38.121]             ...future.startTime <- base::Sys.time()
[10:59:38.121]             {
[10:59:38.121]                 {
[10:59:38.121]                   {
[10:59:38.121]                     {
[10:59:38.121]                       base::local({
[10:59:38.121]                         has_future <- base::requireNamespace("future", 
[10:59:38.121]                           quietly = TRUE)
[10:59:38.121]                         if (has_future) {
[10:59:38.121]                           ns <- base::getNamespace("future")
[10:59:38.121]                           version <- ns[[".package"]][["version"]]
[10:59:38.121]                           if (is.null(version)) 
[10:59:38.121]                             version <- utils::packageVersion("future")
[10:59:38.121]                         }
[10:59:38.121]                         else {
[10:59:38.121]                           version <- NULL
[10:59:38.121]                         }
[10:59:38.121]                         if (!has_future || version < "1.8.0") {
[10:59:38.121]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.121]                             "", base::R.version$version.string), 
[10:59:38.121]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.121]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.121]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.121]                               "release", "version")], collapse = " "), 
[10:59:38.121]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.121]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.121]                             info)
[10:59:38.121]                           info <- base::paste(info, collapse = "; ")
[10:59:38.121]                           if (!has_future) {
[10:59:38.121]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.121]                               info)
[10:59:38.121]                           }
[10:59:38.121]                           else {
[10:59:38.121]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.121]                               info, version)
[10:59:38.121]                           }
[10:59:38.121]                           base::stop(msg)
[10:59:38.121]                         }
[10:59:38.121]                       })
[10:59:38.121]                     }
[10:59:38.121]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.121]                     base::options(mc.cores = 1L)
[10:59:38.121]                   }
[10:59:38.121]                   ...future.strategy.old <- future::plan("list")
[10:59:38.121]                   options(future.plan = NULL)
[10:59:38.121]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.121]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.121]                 }
[10:59:38.121]                 ...future.workdir <- getwd()
[10:59:38.121]             }
[10:59:38.121]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.121]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.121]         }
[10:59:38.121]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.121]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.121]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.121]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.121]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.121]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.121]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.121]             base::names(...future.oldOptions))
[10:59:38.121]     }
[10:59:38.121]     if (FALSE) {
[10:59:38.121]     }
[10:59:38.121]     else {
[10:59:38.121]         if (TRUE) {
[10:59:38.121]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.121]                 open = "w")
[10:59:38.121]         }
[10:59:38.121]         else {
[10:59:38.121]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.121]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.121]         }
[10:59:38.121]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.121]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.121]             base::sink(type = "output", split = FALSE)
[10:59:38.121]             base::close(...future.stdout)
[10:59:38.121]         }, add = TRUE)
[10:59:38.121]     }
[10:59:38.121]     ...future.frame <- base::sys.nframe()
[10:59:38.121]     ...future.conditions <- base::list()
[10:59:38.121]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.121]     if (FALSE) {
[10:59:38.121]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.121]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.121]     }
[10:59:38.121]     ...future.result <- base::tryCatch({
[10:59:38.121]         base::withCallingHandlers({
[10:59:38.121]             ...future.value <- base::withVisible(base::local({
[10:59:38.121]                 withCallingHandlers({
[10:59:38.121]                   {
[10:59:38.121]                     do.call(function(...) {
[10:59:38.121]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.121]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.121]                         ...future.globals.maxSize)) {
[10:59:38.121]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.121]                         on.exit(options(oopts), add = TRUE)
[10:59:38.121]                       }
[10:59:38.121]                       {
[10:59:38.121]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.121]                           FUN = function(jj) {
[10:59:38.121]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.121]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.121]                               envir = globalenv(), inherits = FALSE)
[10:59:38.121]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.121]                           })
[10:59:38.121]                       }
[10:59:38.121]                     }, args = future.call.arguments)
[10:59:38.121]                   }
[10:59:38.121]                 }, immediateCondition = function(cond) {
[10:59:38.121]                   save_rds <- function (object, pathname, ...) 
[10:59:38.121]                   {
[10:59:38.121]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.121]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.121]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.121]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.121]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.121]                         fi_tmp[["mtime"]])
[10:59:38.121]                     }
[10:59:38.121]                     tryCatch({
[10:59:38.121]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.121]                     }, error = function(ex) {
[10:59:38.121]                       msg <- conditionMessage(ex)
[10:59:38.121]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.121]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.121]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.121]                         fi_tmp[["mtime"]], msg)
[10:59:38.121]                       ex$message <- msg
[10:59:38.121]                       stop(ex)
[10:59:38.121]                     })
[10:59:38.121]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.121]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.121]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.121]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.121]                       fi <- file.info(pathname)
[10:59:38.121]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.121]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.121]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.121]                         fi[["size"]], fi[["mtime"]])
[10:59:38.121]                       stop(msg)
[10:59:38.121]                     }
[10:59:38.121]                     invisible(pathname)
[10:59:38.121]                   }
[10:59:38.121]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.121]                     rootPath = tempdir()) 
[10:59:38.121]                   {
[10:59:38.121]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.121]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.121]                       tmpdir = path, fileext = ".rds")
[10:59:38.121]                     save_rds(obj, file)
[10:59:38.121]                   }
[10:59:38.121]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.121]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.121]                   {
[10:59:38.121]                     inherits <- base::inherits
[10:59:38.121]                     invokeRestart <- base::invokeRestart
[10:59:38.121]                     is.null <- base::is.null
[10:59:38.121]                     muffled <- FALSE
[10:59:38.121]                     if (inherits(cond, "message")) {
[10:59:38.121]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.121]                       if (muffled) 
[10:59:38.121]                         invokeRestart("muffleMessage")
[10:59:38.121]                     }
[10:59:38.121]                     else if (inherits(cond, "warning")) {
[10:59:38.121]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.121]                       if (muffled) 
[10:59:38.121]                         invokeRestart("muffleWarning")
[10:59:38.121]                     }
[10:59:38.121]                     else if (inherits(cond, "condition")) {
[10:59:38.121]                       if (!is.null(pattern)) {
[10:59:38.121]                         computeRestarts <- base::computeRestarts
[10:59:38.121]                         grepl <- base::grepl
[10:59:38.121]                         restarts <- computeRestarts(cond)
[10:59:38.121]                         for (restart in restarts) {
[10:59:38.121]                           name <- restart$name
[10:59:38.121]                           if (is.null(name)) 
[10:59:38.121]                             next
[10:59:38.121]                           if (!grepl(pattern, name)) 
[10:59:38.121]                             next
[10:59:38.121]                           invokeRestart(restart)
[10:59:38.121]                           muffled <- TRUE
[10:59:38.121]                           break
[10:59:38.121]                         }
[10:59:38.121]                       }
[10:59:38.121]                     }
[10:59:38.121]                     invisible(muffled)
[10:59:38.121]                   }
[10:59:38.121]                   muffleCondition(cond)
[10:59:38.121]                 })
[10:59:38.121]             }))
[10:59:38.121]             future::FutureResult(value = ...future.value$value, 
[10:59:38.121]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.121]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.121]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.121]                     ...future.globalenv.names))
[10:59:38.121]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.121]         }, condition = base::local({
[10:59:38.121]             c <- base::c
[10:59:38.121]             inherits <- base::inherits
[10:59:38.121]             invokeRestart <- base::invokeRestart
[10:59:38.121]             length <- base::length
[10:59:38.121]             list <- base::list
[10:59:38.121]             seq.int <- base::seq.int
[10:59:38.121]             signalCondition <- base::signalCondition
[10:59:38.121]             sys.calls <- base::sys.calls
[10:59:38.121]             `[[` <- base::`[[`
[10:59:38.121]             `+` <- base::`+`
[10:59:38.121]             `<<-` <- base::`<<-`
[10:59:38.121]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.121]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.121]                   3L)]
[10:59:38.121]             }
[10:59:38.121]             function(cond) {
[10:59:38.121]                 is_error <- inherits(cond, "error")
[10:59:38.121]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.121]                   NULL)
[10:59:38.121]                 if (is_error) {
[10:59:38.121]                   sessionInformation <- function() {
[10:59:38.121]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.121]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.121]                       search = base::search(), system = base::Sys.info())
[10:59:38.121]                   }
[10:59:38.121]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.121]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.121]                     cond$call), session = sessionInformation(), 
[10:59:38.121]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.121]                   signalCondition(cond)
[10:59:38.121]                 }
[10:59:38.121]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.121]                 "immediateCondition"))) {
[10:59:38.121]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.121]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.121]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.121]                   if (TRUE && !signal) {
[10:59:38.121]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.121]                     {
[10:59:38.121]                       inherits <- base::inherits
[10:59:38.121]                       invokeRestart <- base::invokeRestart
[10:59:38.121]                       is.null <- base::is.null
[10:59:38.121]                       muffled <- FALSE
[10:59:38.121]                       if (inherits(cond, "message")) {
[10:59:38.121]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.121]                         if (muffled) 
[10:59:38.121]                           invokeRestart("muffleMessage")
[10:59:38.121]                       }
[10:59:38.121]                       else if (inherits(cond, "warning")) {
[10:59:38.121]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.121]                         if (muffled) 
[10:59:38.121]                           invokeRestart("muffleWarning")
[10:59:38.121]                       }
[10:59:38.121]                       else if (inherits(cond, "condition")) {
[10:59:38.121]                         if (!is.null(pattern)) {
[10:59:38.121]                           computeRestarts <- base::computeRestarts
[10:59:38.121]                           grepl <- base::grepl
[10:59:38.121]                           restarts <- computeRestarts(cond)
[10:59:38.121]                           for (restart in restarts) {
[10:59:38.121]                             name <- restart$name
[10:59:38.121]                             if (is.null(name)) 
[10:59:38.121]                               next
[10:59:38.121]                             if (!grepl(pattern, name)) 
[10:59:38.121]                               next
[10:59:38.121]                             invokeRestart(restart)
[10:59:38.121]                             muffled <- TRUE
[10:59:38.121]                             break
[10:59:38.121]                           }
[10:59:38.121]                         }
[10:59:38.121]                       }
[10:59:38.121]                       invisible(muffled)
[10:59:38.121]                     }
[10:59:38.121]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.121]                   }
[10:59:38.121]                 }
[10:59:38.121]                 else {
[10:59:38.121]                   if (TRUE) {
[10:59:38.121]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.121]                     {
[10:59:38.121]                       inherits <- base::inherits
[10:59:38.121]                       invokeRestart <- base::invokeRestart
[10:59:38.121]                       is.null <- base::is.null
[10:59:38.121]                       muffled <- FALSE
[10:59:38.121]                       if (inherits(cond, "message")) {
[10:59:38.121]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.121]                         if (muffled) 
[10:59:38.121]                           invokeRestart("muffleMessage")
[10:59:38.121]                       }
[10:59:38.121]                       else if (inherits(cond, "warning")) {
[10:59:38.121]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.121]                         if (muffled) 
[10:59:38.121]                           invokeRestart("muffleWarning")
[10:59:38.121]                       }
[10:59:38.121]                       else if (inherits(cond, "condition")) {
[10:59:38.121]                         if (!is.null(pattern)) {
[10:59:38.121]                           computeRestarts <- base::computeRestarts
[10:59:38.121]                           grepl <- base::grepl
[10:59:38.121]                           restarts <- computeRestarts(cond)
[10:59:38.121]                           for (restart in restarts) {
[10:59:38.121]                             name <- restart$name
[10:59:38.121]                             if (is.null(name)) 
[10:59:38.121]                               next
[10:59:38.121]                             if (!grepl(pattern, name)) 
[10:59:38.121]                               next
[10:59:38.121]                             invokeRestart(restart)
[10:59:38.121]                             muffled <- TRUE
[10:59:38.121]                             break
[10:59:38.121]                           }
[10:59:38.121]                         }
[10:59:38.121]                       }
[10:59:38.121]                       invisible(muffled)
[10:59:38.121]                     }
[10:59:38.121]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.121]                   }
[10:59:38.121]                 }
[10:59:38.121]             }
[10:59:38.121]         }))
[10:59:38.121]     }, error = function(ex) {
[10:59:38.121]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.121]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.121]                 ...future.rng), started = ...future.startTime, 
[10:59:38.121]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.121]             version = "1.8"), class = "FutureResult")
[10:59:38.121]     }, finally = {
[10:59:38.121]         if (!identical(...future.workdir, getwd())) 
[10:59:38.121]             setwd(...future.workdir)
[10:59:38.121]         {
[10:59:38.121]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.121]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.121]             }
[10:59:38.121]             base::options(...future.oldOptions)
[10:59:38.121]             if (.Platform$OS.type == "windows") {
[10:59:38.121]                 old_names <- names(...future.oldEnvVars)
[10:59:38.121]                 envs <- base::Sys.getenv()
[10:59:38.121]                 names <- names(envs)
[10:59:38.121]                 common <- intersect(names, old_names)
[10:59:38.121]                 added <- setdiff(names, old_names)
[10:59:38.121]                 removed <- setdiff(old_names, names)
[10:59:38.121]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.121]                   envs[common]]
[10:59:38.121]                 NAMES <- toupper(changed)
[10:59:38.121]                 args <- list()
[10:59:38.121]                 for (kk in seq_along(NAMES)) {
[10:59:38.121]                   name <- changed[[kk]]
[10:59:38.121]                   NAME <- NAMES[[kk]]
[10:59:38.121]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.121]                     next
[10:59:38.121]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.121]                 }
[10:59:38.121]                 NAMES <- toupper(added)
[10:59:38.121]                 for (kk in seq_along(NAMES)) {
[10:59:38.121]                   name <- added[[kk]]
[10:59:38.121]                   NAME <- NAMES[[kk]]
[10:59:38.121]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.121]                     next
[10:59:38.121]                   args[[name]] <- ""
[10:59:38.121]                 }
[10:59:38.121]                 NAMES <- toupper(removed)
[10:59:38.121]                 for (kk in seq_along(NAMES)) {
[10:59:38.121]                   name <- removed[[kk]]
[10:59:38.121]                   NAME <- NAMES[[kk]]
[10:59:38.121]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.121]                     next
[10:59:38.121]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.121]                 }
[10:59:38.121]                 if (length(args) > 0) 
[10:59:38.121]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.121]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.121]             }
[10:59:38.121]             else {
[10:59:38.121]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.121]             }
[10:59:38.121]             {
[10:59:38.121]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.121]                   0L) {
[10:59:38.121]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.121]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.121]                   base::options(opts)
[10:59:38.121]                 }
[10:59:38.121]                 {
[10:59:38.121]                   {
[10:59:38.121]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.121]                     NULL
[10:59:38.121]                   }
[10:59:38.121]                   options(future.plan = NULL)
[10:59:38.121]                   if (is.na(NA_character_)) 
[10:59:38.121]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.121]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.121]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.121]                     .init = FALSE)
[10:59:38.121]                 }
[10:59:38.121]             }
[10:59:38.121]         }
[10:59:38.121]     })
[10:59:38.121]     if (TRUE) {
[10:59:38.121]         base::sink(type = "output", split = FALSE)
[10:59:38.121]         if (TRUE) {
[10:59:38.121]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.121]         }
[10:59:38.121]         else {
[10:59:38.121]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.121]         }
[10:59:38.121]         base::close(...future.stdout)
[10:59:38.121]         ...future.stdout <- NULL
[10:59:38.121]     }
[10:59:38.121]     ...future.result$conditions <- ...future.conditions
[10:59:38.121]     ...future.result$finished <- base::Sys.time()
[10:59:38.121]     ...future.result
[10:59:38.121] }
[10:59:38.123] assign_globals() ...
[10:59:38.123] List of 5
[10:59:38.123]  $ ...future.FUN            :function (...)  
[10:59:38.123]  $ future.call.arguments    : list()
[10:59:38.123]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.123]  $ ...future.elements_ii    :List of 3
[10:59:38.123]   ..$ : int 0
[10:59:38.123]   ..$ : int 0
[10:59:38.123]   ..$ : int 0
[10:59:38.123]  $ ...future.seeds_ii       :List of 3
[10:59:38.123]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[10:59:38.123]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[10:59:38.123]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[10:59:38.123]  $ ...future.globals.maxSize: NULL
[10:59:38.123]  - attr(*, "where")=List of 5
[10:59:38.123]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.123]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.123]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.123]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.123]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.123]  - attr(*, "resolved")= logi FALSE
[10:59:38.123]  - attr(*, "total_size")= num 7184
[10:59:38.123]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.123]  - attr(*, "already-done")= logi TRUE
[10:59:38.133] - reassign environment for ‘...future.FUN’
[10:59:38.133] - copied ‘...future.FUN’ to environment
[10:59:38.133] - copied ‘future.call.arguments’ to environment
[10:59:38.133] - copied ‘...future.elements_ii’ to environment
[10:59:38.133] - copied ‘...future.seeds_ii’ to environment
[10:59:38.133] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.133] assign_globals() ... done
[10:59:38.134] requestCore(): workers = 2
[10:59:38.139] MulticoreFuture started
[10:59:38.140] - Launch lazy future ... done
[10:59:38.140] run() for ‘MulticoreFuture’ ... done
[10:59:38.140] Created future:
[10:59:38.141] plan(): Setting new future strategy stack:
[10:59:38.141] List of future strategies:
[10:59:38.141] 1. sequential:
[10:59:38.141]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.141]    - tweaked: FALSE
[10:59:38.141]    - call: NULL
[10:59:38.142] plan(): nbrOfWorkers() = 1
[10:59:38.144] plan(): Setting new future strategy stack:
[10:59:38.144] List of future strategies:
[10:59:38.144] 1. multicore:
[10:59:38.144]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.144]    - tweaked: FALSE
[10:59:38.144]    - call: plan(strategy)
[10:59:38.147] plan(): nbrOfWorkers() = 2
[10:59:38.140] MulticoreFuture:
[10:59:38.140] Label: ‘future_replicate-2’
[10:59:38.140] Expression:
[10:59:38.140] {
[10:59:38.140]     do.call(function(...) {
[10:59:38.140]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.140]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.140]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.140]             on.exit(options(oopts), add = TRUE)
[10:59:38.140]         }
[10:59:38.140]         {
[10:59:38.140]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.140]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.140]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.140]                   envir = globalenv(), inherits = FALSE)
[10:59:38.140]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.140]             })
[10:59:38.140]         }
[10:59:38.140]     }, args = future.call.arguments)
[10:59:38.140] }
[10:59:38.140] Lazy evaluation: FALSE
[10:59:38.140] Asynchronous evaluation: TRUE
[10:59:38.140] Local evaluation: TRUE
[10:59:38.140] Environment: R_GlobalEnv
[10:59:38.140] Capture standard output: TRUE
[10:59:38.140] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.140] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.140] Packages: <none>
[10:59:38.140] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.140] Resolved: TRUE
[10:59:38.140] Value: <not collected>
[10:59:38.140] Conditions captured: <none>
[10:59:38.140] Early signaling: FALSE
[10:59:38.140] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.140] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.148] Chunk #2 of 2 ... DONE
[10:59:38.148] Launching 2 futures (chunks) ... DONE
[10:59:38.148] Resolving 2 futures (chunks) ...
[10:59:38.148] resolve() on list ...
[10:59:38.149]  recursive: 0
[10:59:38.149]  length: 2
[10:59:38.149] 
[10:59:38.149] Future #1
[10:59:38.150] result() for MulticoreFuture ...
[10:59:38.151] result() for MulticoreFuture ...
[10:59:38.151] result() for MulticoreFuture ... done
[10:59:38.151] result() for MulticoreFuture ... done
[10:59:38.152] result() for MulticoreFuture ...
[10:59:38.152] result() for MulticoreFuture ... done
[10:59:38.152] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:59:38.152] - nx: 2
[10:59:38.152] - relay: TRUE
[10:59:38.152] - stdout: TRUE
[10:59:38.152] - signal: TRUE
[10:59:38.152] - resignal: FALSE
[10:59:38.153] - force: TRUE
[10:59:38.153] - relayed: [n=2] FALSE, FALSE
[10:59:38.156] - queued futures: [n=2] FALSE, FALSE
[10:59:38.156]  - until=1
[10:59:38.156]  - relaying element #1
[10:59:38.157] result() for MulticoreFuture ...
[10:59:38.157] result() for MulticoreFuture ... done
[10:59:38.157] result() for MulticoreFuture ...
[10:59:38.157] result() for MulticoreFuture ... done
[10:59:38.157] result() for MulticoreFuture ...
[10:59:38.157] result() for MulticoreFuture ... done
[10:59:38.157] result() for MulticoreFuture ...
[10:59:38.158] result() for MulticoreFuture ... done
[10:59:38.158] - relayed: [n=2] TRUE, FALSE
[10:59:38.158] - queued futures: [n=2] TRUE, FALSE
[10:59:38.158] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:59:38.158]  length: 1 (resolved future 1)
[10:59:38.159] Future #2
[10:59:38.159] result() for MulticoreFuture ...
[10:59:38.160] result() for MulticoreFuture ...
[10:59:38.160] result() for MulticoreFuture ... done
[10:59:38.160] result() for MulticoreFuture ... done
[10:59:38.160] result() for MulticoreFuture ...
[10:59:38.160] result() for MulticoreFuture ... done
[10:59:38.161] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:59:38.161] - nx: 2
[10:59:38.161] - relay: TRUE
[10:59:38.161] - stdout: TRUE
[10:59:38.161] - signal: TRUE
[10:59:38.161] - resignal: FALSE
[10:59:38.161] - force: TRUE
[10:59:38.161] - relayed: [n=2] TRUE, FALSE
[10:59:38.161] - queued futures: [n=2] TRUE, FALSE
[10:59:38.162]  - until=2
[10:59:38.162]  - relaying element #2
[10:59:38.162] result() for MulticoreFuture ...
[10:59:38.162] result() for MulticoreFuture ... done
[10:59:38.162] result() for MulticoreFuture ...
[10:59:38.162] result() for MulticoreFuture ... done
[10:59:38.162] result() for MulticoreFuture ...
[10:59:38.162] result() for MulticoreFuture ... done
[10:59:38.163] result() for MulticoreFuture ...
[10:59:38.163] result() for MulticoreFuture ... done
[10:59:38.163] - relayed: [n=2] TRUE, TRUE
[10:59:38.163] - queued futures: [n=2] TRUE, TRUE
[10:59:38.163] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:59:38.163]  length: 0 (resolved future 2)
[10:59:38.163] Relaying remaining futures
[10:59:38.163] signalConditionsASAP(NULL, pos=0) ...
[10:59:38.163] - nx: 2
[10:59:38.164] - relay: TRUE
[10:59:38.164] - stdout: TRUE
[10:59:38.164] - signal: TRUE
[10:59:38.164] - resignal: FALSE
[10:59:38.164] - force: TRUE
[10:59:38.164] - relayed: [n=2] TRUE, TRUE
[10:59:38.164] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:38.164] - relayed: [n=2] TRUE, TRUE
[10:59:38.164] - queued futures: [n=2] TRUE, TRUE
[10:59:38.165] signalConditionsASAP(NULL, pos=0) ... done
[10:59:38.165] resolve() on list ... DONE
[10:59:38.165] result() for MulticoreFuture ...
[10:59:38.165] result() for MulticoreFuture ... done
[10:59:38.165] result() for MulticoreFuture ...
[10:59:38.165] result() for MulticoreFuture ... done
[10:59:38.165] result() for MulticoreFuture ...
[10:59:38.165] result() for MulticoreFuture ... done
[10:59:38.165] result() for MulticoreFuture ...
[10:59:38.166] result() for MulticoreFuture ... done
[10:59:38.166]  - Number of value chunks collected: 2
[10:59:38.166] Resolving 2 futures (chunks) ... DONE
[10:59:38.166] Reducing values from 2 chunks ...
[10:59:38.166]  - Number of values collected after concatenation: 5
[10:59:38.166]  - Number of values expected: 5
[10:59:38.166] Reducing values from 2 chunks ... DONE
[10:59:38.166] future_lapply() ... DONE
[10:59:38.167] future_lapply() ...
[10:59:38.167] Generating random seeds ...
[10:59:38.167] Generating random seed streams for 5 elements ...
[10:59:38.167] Generating random seed streams for 5 elements ... DONE
[10:59:38.168] Generating random seeds ... DONE
[10:59:38.168] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:38.170] Number of chunks: 2
[10:59:38.170] getGlobalsAndPackagesXApply() ...
[10:59:38.170]  - future.globals: TRUE
[10:59:38.170] getGlobalsAndPackages() ...
[10:59:38.171] Searching for globals...
[10:59:38.172] - globals found: [2] ‘FUN’, ‘sample’
[10:59:38.172] Searching for globals ... DONE
[10:59:38.172] Resolving globals: FALSE
[10:59:38.173] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:38.173] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:38.173] - globals: [1] ‘FUN’
[10:59:38.173] 
[10:59:38.173] getGlobalsAndPackages() ... DONE
[10:59:38.173]  - globals found/used: [n=1] ‘FUN’
[10:59:38.173]  - needed namespaces: [n=0] 
[10:59:38.174] Finding globals ... DONE
[10:59:38.174]  - use_args: TRUE
[10:59:38.174]  - Getting '...' globals ...
[10:59:38.174] resolve() on list ...
[10:59:38.174]  recursive: 0
[10:59:38.174]  length: 1
[10:59:38.175]  elements: ‘...’
[10:59:38.175]  length: 0 (resolved future 1)
[10:59:38.175] resolve() on list ... DONE
[10:59:38.175]    - '...' content: [n=0] 
[10:59:38.175] List of 1
[10:59:38.175]  $ ...: list()
[10:59:38.175]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.175]  - attr(*, "where")=List of 1
[10:59:38.175]   ..$ ...:<environment: 0x56262db577f0> 
[10:59:38.175]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.175]  - attr(*, "resolved")= logi TRUE
[10:59:38.175]  - attr(*, "total_size")= num NA
[10:59:38.178]  - Getting '...' globals ... DONE
[10:59:38.178] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:38.178] List of 2
[10:59:38.178]  $ ...future.FUN:function (...)  
[10:59:38.178]  $ ...          : list()
[10:59:38.178]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.178]  - attr(*, "where")=List of 2
[10:59:38.178]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:38.178]   ..$ ...          :<environment: 0x56262db577f0> 
[10:59:38.178]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.178]  - attr(*, "resolved")= logi FALSE
[10:59:38.178]  - attr(*, "total_size")= num 7184
[10:59:38.181] Packages to be attached in all futures: [n=0] 
[10:59:38.181] getGlobalsAndPackagesXApply() ... DONE
[10:59:38.181] Number of futures (= number of chunks): 2
[10:59:38.181] Launching 2 futures (chunks) ...
[10:59:38.181] Chunk #1 of 2 ...
[10:59:38.181]  - Finding globals in 'X' for chunk #1 ...
[10:59:38.181] getGlobalsAndPackages() ...
[10:59:38.182] Searching for globals...
[10:59:38.182] 
[10:59:38.183] Searching for globals ... DONE
[10:59:38.183] - globals: [0] <none>
[10:59:38.183] getGlobalsAndPackages() ... DONE
[10:59:38.184]    + additional globals found: [n=0] 
[10:59:38.184]    + additional namespaces needed: [n=0] 
[10:59:38.184]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:38.184]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.184]  - seeds: [2] <seeds>
[10:59:38.184]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.184] getGlobalsAndPackages() ...
[10:59:38.184] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.184] Resolving globals: FALSE
[10:59:38.184] Tweak future expression to call with '...' arguments ...
[10:59:38.185] {
[10:59:38.185]     do.call(function(...) {
[10:59:38.185]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.185]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.185]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.185]             on.exit(options(oopts), add = TRUE)
[10:59:38.185]         }
[10:59:38.185]         {
[10:59:38.185]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.185]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.185]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.185]                   envir = globalenv(), inherits = FALSE)
[10:59:38.185]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.185]             })
[10:59:38.185]         }
[10:59:38.185]     }, args = future.call.arguments)
[10:59:38.185] }
[10:59:38.185] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.185] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.185] 
[10:59:38.185] getGlobalsAndPackages() ... DONE
[10:59:38.186] run() for ‘Future’ ...
[10:59:38.186] - state: ‘created’
[10:59:38.186] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.187] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.188] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.188]   - Field: ‘label’
[10:59:38.188]   - Field: ‘local’
[10:59:38.188]   - Field: ‘owner’
[10:59:38.188]   - Field: ‘envir’
[10:59:38.188]   - Field: ‘workers’
[10:59:38.188]   - Field: ‘packages’
[10:59:38.188]   - Field: ‘gc’
[10:59:38.188]   - Field: ‘job’
[10:59:38.188]   - Field: ‘conditions’
[10:59:38.188]   - Field: ‘expr’
[10:59:38.189]   - Field: ‘uuid’
[10:59:38.189]   - Field: ‘seed’
[10:59:38.189]   - Field: ‘version’
[10:59:38.189]   - Field: ‘result’
[10:59:38.189]   - Field: ‘asynchronous’
[10:59:38.189]   - Field: ‘calls’
[10:59:38.189]   - Field: ‘globals’
[10:59:38.189]   - Field: ‘stdout’
[10:59:38.189]   - Field: ‘earlySignal’
[10:59:38.189]   - Field: ‘lazy’
[10:59:38.189]   - Field: ‘state’
[10:59:38.189] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.190] - Launch lazy future ...
[10:59:38.190] Packages needed by the future expression (n = 0): <none>
[10:59:38.190] Packages needed by future strategies (n = 0): <none>
[10:59:38.190] {
[10:59:38.190]     {
[10:59:38.190]         {
[10:59:38.190]             ...future.startTime <- base::Sys.time()
[10:59:38.190]             {
[10:59:38.190]                 {
[10:59:38.190]                   {
[10:59:38.190]                     {
[10:59:38.190]                       base::local({
[10:59:38.190]                         has_future <- base::requireNamespace("future", 
[10:59:38.190]                           quietly = TRUE)
[10:59:38.190]                         if (has_future) {
[10:59:38.190]                           ns <- base::getNamespace("future")
[10:59:38.190]                           version <- ns[[".package"]][["version"]]
[10:59:38.190]                           if (is.null(version)) 
[10:59:38.190]                             version <- utils::packageVersion("future")
[10:59:38.190]                         }
[10:59:38.190]                         else {
[10:59:38.190]                           version <- NULL
[10:59:38.190]                         }
[10:59:38.190]                         if (!has_future || version < "1.8.0") {
[10:59:38.190]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.190]                             "", base::R.version$version.string), 
[10:59:38.190]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.190]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.190]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.190]                               "release", "version")], collapse = " "), 
[10:59:38.190]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.190]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.190]                             info)
[10:59:38.190]                           info <- base::paste(info, collapse = "; ")
[10:59:38.190]                           if (!has_future) {
[10:59:38.190]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.190]                               info)
[10:59:38.190]                           }
[10:59:38.190]                           else {
[10:59:38.190]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.190]                               info, version)
[10:59:38.190]                           }
[10:59:38.190]                           base::stop(msg)
[10:59:38.190]                         }
[10:59:38.190]                       })
[10:59:38.190]                     }
[10:59:38.190]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.190]                     base::options(mc.cores = 1L)
[10:59:38.190]                   }
[10:59:38.190]                   ...future.strategy.old <- future::plan("list")
[10:59:38.190]                   options(future.plan = NULL)
[10:59:38.190]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.190]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.190]                 }
[10:59:38.190]                 ...future.workdir <- getwd()
[10:59:38.190]             }
[10:59:38.190]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.190]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.190]         }
[10:59:38.190]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.190]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.190]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.190]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.190]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.190]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.190]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.190]             base::names(...future.oldOptions))
[10:59:38.190]     }
[10:59:38.190]     if (FALSE) {
[10:59:38.190]     }
[10:59:38.190]     else {
[10:59:38.190]         if (TRUE) {
[10:59:38.190]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.190]                 open = "w")
[10:59:38.190]         }
[10:59:38.190]         else {
[10:59:38.190]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.190]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.190]         }
[10:59:38.190]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.190]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.190]             base::sink(type = "output", split = FALSE)
[10:59:38.190]             base::close(...future.stdout)
[10:59:38.190]         }, add = TRUE)
[10:59:38.190]     }
[10:59:38.190]     ...future.frame <- base::sys.nframe()
[10:59:38.190]     ...future.conditions <- base::list()
[10:59:38.190]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.190]     if (FALSE) {
[10:59:38.190]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.190]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.190]     }
[10:59:38.190]     ...future.result <- base::tryCatch({
[10:59:38.190]         base::withCallingHandlers({
[10:59:38.190]             ...future.value <- base::withVisible(base::local({
[10:59:38.190]                 withCallingHandlers({
[10:59:38.190]                   {
[10:59:38.190]                     do.call(function(...) {
[10:59:38.190]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.190]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.190]                         ...future.globals.maxSize)) {
[10:59:38.190]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.190]                         on.exit(options(oopts), add = TRUE)
[10:59:38.190]                       }
[10:59:38.190]                       {
[10:59:38.190]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.190]                           FUN = function(jj) {
[10:59:38.190]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.190]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.190]                               envir = globalenv(), inherits = FALSE)
[10:59:38.190]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.190]                           })
[10:59:38.190]                       }
[10:59:38.190]                     }, args = future.call.arguments)
[10:59:38.190]                   }
[10:59:38.190]                 }, immediateCondition = function(cond) {
[10:59:38.190]                   save_rds <- function (object, pathname, ...) 
[10:59:38.190]                   {
[10:59:38.190]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.190]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.190]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.190]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.190]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.190]                         fi_tmp[["mtime"]])
[10:59:38.190]                     }
[10:59:38.190]                     tryCatch({
[10:59:38.190]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.190]                     }, error = function(ex) {
[10:59:38.190]                       msg <- conditionMessage(ex)
[10:59:38.190]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.190]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.190]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.190]                         fi_tmp[["mtime"]], msg)
[10:59:38.190]                       ex$message <- msg
[10:59:38.190]                       stop(ex)
[10:59:38.190]                     })
[10:59:38.190]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.190]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.190]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.190]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.190]                       fi <- file.info(pathname)
[10:59:38.190]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.190]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.190]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.190]                         fi[["size"]], fi[["mtime"]])
[10:59:38.190]                       stop(msg)
[10:59:38.190]                     }
[10:59:38.190]                     invisible(pathname)
[10:59:38.190]                   }
[10:59:38.190]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.190]                     rootPath = tempdir()) 
[10:59:38.190]                   {
[10:59:38.190]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.190]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.190]                       tmpdir = path, fileext = ".rds")
[10:59:38.190]                     save_rds(obj, file)
[10:59:38.190]                   }
[10:59:38.190]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.190]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.190]                   {
[10:59:38.190]                     inherits <- base::inherits
[10:59:38.190]                     invokeRestart <- base::invokeRestart
[10:59:38.190]                     is.null <- base::is.null
[10:59:38.190]                     muffled <- FALSE
[10:59:38.190]                     if (inherits(cond, "message")) {
[10:59:38.190]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.190]                       if (muffled) 
[10:59:38.190]                         invokeRestart("muffleMessage")
[10:59:38.190]                     }
[10:59:38.190]                     else if (inherits(cond, "warning")) {
[10:59:38.190]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.190]                       if (muffled) 
[10:59:38.190]                         invokeRestart("muffleWarning")
[10:59:38.190]                     }
[10:59:38.190]                     else if (inherits(cond, "condition")) {
[10:59:38.190]                       if (!is.null(pattern)) {
[10:59:38.190]                         computeRestarts <- base::computeRestarts
[10:59:38.190]                         grepl <- base::grepl
[10:59:38.190]                         restarts <- computeRestarts(cond)
[10:59:38.190]                         for (restart in restarts) {
[10:59:38.190]                           name <- restart$name
[10:59:38.190]                           if (is.null(name)) 
[10:59:38.190]                             next
[10:59:38.190]                           if (!grepl(pattern, name)) 
[10:59:38.190]                             next
[10:59:38.190]                           invokeRestart(restart)
[10:59:38.190]                           muffled <- TRUE
[10:59:38.190]                           break
[10:59:38.190]                         }
[10:59:38.190]                       }
[10:59:38.190]                     }
[10:59:38.190]                     invisible(muffled)
[10:59:38.190]                   }
[10:59:38.190]                   muffleCondition(cond)
[10:59:38.190]                 })
[10:59:38.190]             }))
[10:59:38.190]             future::FutureResult(value = ...future.value$value, 
[10:59:38.190]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.190]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.190]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.190]                     ...future.globalenv.names))
[10:59:38.190]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.190]         }, condition = base::local({
[10:59:38.190]             c <- base::c
[10:59:38.190]             inherits <- base::inherits
[10:59:38.190]             invokeRestart <- base::invokeRestart
[10:59:38.190]             length <- base::length
[10:59:38.190]             list <- base::list
[10:59:38.190]             seq.int <- base::seq.int
[10:59:38.190]             signalCondition <- base::signalCondition
[10:59:38.190]             sys.calls <- base::sys.calls
[10:59:38.190]             `[[` <- base::`[[`
[10:59:38.190]             `+` <- base::`+`
[10:59:38.190]             `<<-` <- base::`<<-`
[10:59:38.190]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.190]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.190]                   3L)]
[10:59:38.190]             }
[10:59:38.190]             function(cond) {
[10:59:38.190]                 is_error <- inherits(cond, "error")
[10:59:38.190]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.190]                   NULL)
[10:59:38.190]                 if (is_error) {
[10:59:38.190]                   sessionInformation <- function() {
[10:59:38.190]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.190]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.190]                       search = base::search(), system = base::Sys.info())
[10:59:38.190]                   }
[10:59:38.190]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.190]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.190]                     cond$call), session = sessionInformation(), 
[10:59:38.190]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.190]                   signalCondition(cond)
[10:59:38.190]                 }
[10:59:38.190]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.190]                 "immediateCondition"))) {
[10:59:38.190]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.190]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.190]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.190]                   if (TRUE && !signal) {
[10:59:38.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.190]                     {
[10:59:38.190]                       inherits <- base::inherits
[10:59:38.190]                       invokeRestart <- base::invokeRestart
[10:59:38.190]                       is.null <- base::is.null
[10:59:38.190]                       muffled <- FALSE
[10:59:38.190]                       if (inherits(cond, "message")) {
[10:59:38.190]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.190]                         if (muffled) 
[10:59:38.190]                           invokeRestart("muffleMessage")
[10:59:38.190]                       }
[10:59:38.190]                       else if (inherits(cond, "warning")) {
[10:59:38.190]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.190]                         if (muffled) 
[10:59:38.190]                           invokeRestart("muffleWarning")
[10:59:38.190]                       }
[10:59:38.190]                       else if (inherits(cond, "condition")) {
[10:59:38.190]                         if (!is.null(pattern)) {
[10:59:38.190]                           computeRestarts <- base::computeRestarts
[10:59:38.190]                           grepl <- base::grepl
[10:59:38.190]                           restarts <- computeRestarts(cond)
[10:59:38.190]                           for (restart in restarts) {
[10:59:38.190]                             name <- restart$name
[10:59:38.190]                             if (is.null(name)) 
[10:59:38.190]                               next
[10:59:38.190]                             if (!grepl(pattern, name)) 
[10:59:38.190]                               next
[10:59:38.190]                             invokeRestart(restart)
[10:59:38.190]                             muffled <- TRUE
[10:59:38.190]                             break
[10:59:38.190]                           }
[10:59:38.190]                         }
[10:59:38.190]                       }
[10:59:38.190]                       invisible(muffled)
[10:59:38.190]                     }
[10:59:38.190]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.190]                   }
[10:59:38.190]                 }
[10:59:38.190]                 else {
[10:59:38.190]                   if (TRUE) {
[10:59:38.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.190]                     {
[10:59:38.190]                       inherits <- base::inherits
[10:59:38.190]                       invokeRestart <- base::invokeRestart
[10:59:38.190]                       is.null <- base::is.null
[10:59:38.190]                       muffled <- FALSE
[10:59:38.190]                       if (inherits(cond, "message")) {
[10:59:38.190]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.190]                         if (muffled) 
[10:59:38.190]                           invokeRestart("muffleMessage")
[10:59:38.190]                       }
[10:59:38.190]                       else if (inherits(cond, "warning")) {
[10:59:38.190]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.190]                         if (muffled) 
[10:59:38.190]                           invokeRestart("muffleWarning")
[10:59:38.190]                       }
[10:59:38.190]                       else if (inherits(cond, "condition")) {
[10:59:38.190]                         if (!is.null(pattern)) {
[10:59:38.190]                           computeRestarts <- base::computeRestarts
[10:59:38.190]                           grepl <- base::grepl
[10:59:38.190]                           restarts <- computeRestarts(cond)
[10:59:38.190]                           for (restart in restarts) {
[10:59:38.190]                             name <- restart$name
[10:59:38.190]                             if (is.null(name)) 
[10:59:38.190]                               next
[10:59:38.190]                             if (!grepl(pattern, name)) 
[10:59:38.190]                               next
[10:59:38.190]                             invokeRestart(restart)
[10:59:38.190]                             muffled <- TRUE
[10:59:38.190]                             break
[10:59:38.190]                           }
[10:59:38.190]                         }
[10:59:38.190]                       }
[10:59:38.190]                       invisible(muffled)
[10:59:38.190]                     }
[10:59:38.190]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.190]                   }
[10:59:38.190]                 }
[10:59:38.190]             }
[10:59:38.190]         }))
[10:59:38.190]     }, error = function(ex) {
[10:59:38.190]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.190]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.190]                 ...future.rng), started = ...future.startTime, 
[10:59:38.190]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.190]             version = "1.8"), class = "FutureResult")
[10:59:38.190]     }, finally = {
[10:59:38.190]         if (!identical(...future.workdir, getwd())) 
[10:59:38.190]             setwd(...future.workdir)
[10:59:38.190]         {
[10:59:38.190]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.190]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.190]             }
[10:59:38.190]             base::options(...future.oldOptions)
[10:59:38.190]             if (.Platform$OS.type == "windows") {
[10:59:38.190]                 old_names <- names(...future.oldEnvVars)
[10:59:38.190]                 envs <- base::Sys.getenv()
[10:59:38.190]                 names <- names(envs)
[10:59:38.190]                 common <- intersect(names, old_names)
[10:59:38.190]                 added <- setdiff(names, old_names)
[10:59:38.190]                 removed <- setdiff(old_names, names)
[10:59:38.190]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.190]                   envs[common]]
[10:59:38.190]                 NAMES <- toupper(changed)
[10:59:38.190]                 args <- list()
[10:59:38.190]                 for (kk in seq_along(NAMES)) {
[10:59:38.190]                   name <- changed[[kk]]
[10:59:38.190]                   NAME <- NAMES[[kk]]
[10:59:38.190]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.190]                     next
[10:59:38.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.190]                 }
[10:59:38.190]                 NAMES <- toupper(added)
[10:59:38.190]                 for (kk in seq_along(NAMES)) {
[10:59:38.190]                   name <- added[[kk]]
[10:59:38.190]                   NAME <- NAMES[[kk]]
[10:59:38.190]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.190]                     next
[10:59:38.190]                   args[[name]] <- ""
[10:59:38.190]                 }
[10:59:38.190]                 NAMES <- toupper(removed)
[10:59:38.190]                 for (kk in seq_along(NAMES)) {
[10:59:38.190]                   name <- removed[[kk]]
[10:59:38.190]                   NAME <- NAMES[[kk]]
[10:59:38.190]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.190]                     next
[10:59:38.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.190]                 }
[10:59:38.190]                 if (length(args) > 0) 
[10:59:38.190]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.190]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.190]             }
[10:59:38.190]             else {
[10:59:38.190]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.190]             }
[10:59:38.190]             {
[10:59:38.190]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.190]                   0L) {
[10:59:38.190]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.190]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.190]                   base::options(opts)
[10:59:38.190]                 }
[10:59:38.190]                 {
[10:59:38.190]                   {
[10:59:38.190]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.190]                     NULL
[10:59:38.190]                   }
[10:59:38.190]                   options(future.plan = NULL)
[10:59:38.190]                   if (is.na(NA_character_)) 
[10:59:38.190]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.190]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.190]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.190]                     .init = FALSE)
[10:59:38.190]                 }
[10:59:38.190]             }
[10:59:38.190]         }
[10:59:38.190]     })
[10:59:38.190]     if (TRUE) {
[10:59:38.190]         base::sink(type = "output", split = FALSE)
[10:59:38.190]         if (TRUE) {
[10:59:38.190]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.190]         }
[10:59:38.190]         else {
[10:59:38.190]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.190]         }
[10:59:38.190]         base::close(...future.stdout)
[10:59:38.190]         ...future.stdout <- NULL
[10:59:38.190]     }
[10:59:38.190]     ...future.result$conditions <- ...future.conditions
[10:59:38.190]     ...future.result$finished <- base::Sys.time()
[10:59:38.190]     ...future.result
[10:59:38.190] }
[10:59:38.193] assign_globals() ...
[10:59:38.193] List of 5
[10:59:38.193]  $ ...future.FUN            :function (...)  
[10:59:38.193]  $ future.call.arguments    : list()
[10:59:38.193]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.193]  $ ...future.elements_ii    :List of 2
[10:59:38.193]   ..$ : int 0
[10:59:38.193]   ..$ : int 0
[10:59:38.193]  $ ...future.seeds_ii       :List of 2
[10:59:38.193]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:59:38.193]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:59:38.193]  $ ...future.globals.maxSize: NULL
[10:59:38.193]  - attr(*, "where")=List of 5
[10:59:38.193]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.193]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.193]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.193]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.193]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.193]  - attr(*, "resolved")= logi FALSE
[10:59:38.193]  - attr(*, "total_size")= num 7184
[10:59:38.193]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.193]  - attr(*, "already-done")= logi TRUE
[10:59:38.198] - reassign environment for ‘...future.FUN’
[10:59:38.198] - copied ‘...future.FUN’ to environment
[10:59:38.198] - copied ‘future.call.arguments’ to environment
[10:59:38.198] - copied ‘...future.elements_ii’ to environment
[10:59:38.198] - copied ‘...future.seeds_ii’ to environment
[10:59:38.199] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.199] assign_globals() ... done
[10:59:38.199] requestCore(): workers = 2
[10:59:38.200] MulticoreFuture started
[10:59:38.201] - Launch lazy future ... done
[10:59:38.201] run() for ‘MulticoreFuture’ ... done
[10:59:38.201] Created future:
[10:59:38.202] plan(): Setting new future strategy stack:
[10:59:38.202] List of future strategies:
[10:59:38.202] 1. sequential:
[10:59:38.202]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.202]    - tweaked: FALSE
[10:59:38.202]    - call: NULL
[10:59:38.203] plan(): nbrOfWorkers() = 1
[10:59:38.205] plan(): Setting new future strategy stack:
[10:59:38.205] List of future strategies:
[10:59:38.205] 1. multicore:
[10:59:38.205]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.205]    - tweaked: FALSE
[10:59:38.205]    - call: plan(strategy)
[10:59:38.208] plan(): nbrOfWorkers() = 2
[10:59:38.201] MulticoreFuture:
[10:59:38.201] Label: ‘future_replicate-1’
[10:59:38.201] Expression:
[10:59:38.201] {
[10:59:38.201]     do.call(function(...) {
[10:59:38.201]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.201]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.201]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.201]             on.exit(options(oopts), add = TRUE)
[10:59:38.201]         }
[10:59:38.201]         {
[10:59:38.201]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.201]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.201]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.201]                   envir = globalenv(), inherits = FALSE)
[10:59:38.201]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.201]             })
[10:59:38.201]         }
[10:59:38.201]     }, args = future.call.arguments)
[10:59:38.201] }
[10:59:38.201] Lazy evaluation: FALSE
[10:59:38.201] Asynchronous evaluation: TRUE
[10:59:38.201] Local evaluation: TRUE
[10:59:38.201] Environment: R_GlobalEnv
[10:59:38.201] Capture standard output: TRUE
[10:59:38.201] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.201] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.201] Packages: <none>
[10:59:38.201] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.201] Resolved: TRUE
[10:59:38.201] Value: <not collected>
[10:59:38.201] Conditions captured: <none>
[10:59:38.201] Early signaling: FALSE
[10:59:38.201] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.201] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.209] Chunk #1 of 2 ... DONE
[10:59:38.209] Chunk #2 of 2 ...
[10:59:38.209]  - Finding globals in 'X' for chunk #2 ...
[10:59:38.209] getGlobalsAndPackages() ...
[10:59:38.209] Searching for globals...
[10:59:38.210] 
[10:59:38.210] Searching for globals ... DONE
[10:59:38.210] - globals: [0] <none>
[10:59:38.210] getGlobalsAndPackages() ... DONE
[10:59:38.210]    + additional globals found: [n=0] 
[10:59:38.210]    + additional namespaces needed: [n=0] 
[10:59:38.211]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:38.211]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.211]  - seeds: [3] <seeds>
[10:59:38.211]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.211] getGlobalsAndPackages() ...
[10:59:38.211] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.211] Resolving globals: FALSE
[10:59:38.212] Tweak future expression to call with '...' arguments ...
[10:59:38.212] {
[10:59:38.212]     do.call(function(...) {
[10:59:38.212]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.212]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.212]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.212]             on.exit(options(oopts), add = TRUE)
[10:59:38.212]         }
[10:59:38.212]         {
[10:59:38.212]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.212]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.212]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.212]                   envir = globalenv(), inherits = FALSE)
[10:59:38.212]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.212]             })
[10:59:38.212]         }
[10:59:38.212]     }, args = future.call.arguments)
[10:59:38.212] }
[10:59:38.212] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.213] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.213] 
[10:59:38.213] getGlobalsAndPackages() ... DONE
[10:59:38.213] run() for ‘Future’ ...
[10:59:38.214] - state: ‘created’
[10:59:38.214] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.216] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.216] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.217]   - Field: ‘label’
[10:59:38.217]   - Field: ‘local’
[10:59:38.217]   - Field: ‘owner’
[10:59:38.217]   - Field: ‘envir’
[10:59:38.217]   - Field: ‘workers’
[10:59:38.217]   - Field: ‘packages’
[10:59:38.220]   - Field: ‘gc’
[10:59:38.220]   - Field: ‘job’
[10:59:38.220]   - Field: ‘conditions’
[10:59:38.220]   - Field: ‘expr’
[10:59:38.221]   - Field: ‘uuid’
[10:59:38.221]   - Field: ‘seed’
[10:59:38.221]   - Field: ‘version’
[10:59:38.221]   - Field: ‘result’
[10:59:38.221]   - Field: ‘asynchronous’
[10:59:38.221]   - Field: ‘calls’
[10:59:38.221]   - Field: ‘globals’
[10:59:38.221]   - Field: ‘stdout’
[10:59:38.222]   - Field: ‘earlySignal’
[10:59:38.222]   - Field: ‘lazy’
[10:59:38.222]   - Field: ‘state’
[10:59:38.222] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.222] - Launch lazy future ...
[10:59:38.223] Packages needed by the future expression (n = 0): <none>
[10:59:38.223] Packages needed by future strategies (n = 0): <none>
[10:59:38.224] {
[10:59:38.224]     {
[10:59:38.224]         {
[10:59:38.224]             ...future.startTime <- base::Sys.time()
[10:59:38.224]             {
[10:59:38.224]                 {
[10:59:38.224]                   {
[10:59:38.224]                     {
[10:59:38.224]                       base::local({
[10:59:38.224]                         has_future <- base::requireNamespace("future", 
[10:59:38.224]                           quietly = TRUE)
[10:59:38.224]                         if (has_future) {
[10:59:38.224]                           ns <- base::getNamespace("future")
[10:59:38.224]                           version <- ns[[".package"]][["version"]]
[10:59:38.224]                           if (is.null(version)) 
[10:59:38.224]                             version <- utils::packageVersion("future")
[10:59:38.224]                         }
[10:59:38.224]                         else {
[10:59:38.224]                           version <- NULL
[10:59:38.224]                         }
[10:59:38.224]                         if (!has_future || version < "1.8.0") {
[10:59:38.224]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.224]                             "", base::R.version$version.string), 
[10:59:38.224]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.224]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.224]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.224]                               "release", "version")], collapse = " "), 
[10:59:38.224]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.224]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.224]                             info)
[10:59:38.224]                           info <- base::paste(info, collapse = "; ")
[10:59:38.224]                           if (!has_future) {
[10:59:38.224]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.224]                               info)
[10:59:38.224]                           }
[10:59:38.224]                           else {
[10:59:38.224]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.224]                               info, version)
[10:59:38.224]                           }
[10:59:38.224]                           base::stop(msg)
[10:59:38.224]                         }
[10:59:38.224]                       })
[10:59:38.224]                     }
[10:59:38.224]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.224]                     base::options(mc.cores = 1L)
[10:59:38.224]                   }
[10:59:38.224]                   ...future.strategy.old <- future::plan("list")
[10:59:38.224]                   options(future.plan = NULL)
[10:59:38.224]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.224]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.224]                 }
[10:59:38.224]                 ...future.workdir <- getwd()
[10:59:38.224]             }
[10:59:38.224]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.224]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.224]         }
[10:59:38.224]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.224]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.224]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.224]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.224]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.224]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.224]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.224]             base::names(...future.oldOptions))
[10:59:38.224]     }
[10:59:38.224]     if (FALSE) {
[10:59:38.224]     }
[10:59:38.224]     else {
[10:59:38.224]         if (TRUE) {
[10:59:38.224]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.224]                 open = "w")
[10:59:38.224]         }
[10:59:38.224]         else {
[10:59:38.224]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.224]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.224]         }
[10:59:38.224]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.224]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.224]             base::sink(type = "output", split = FALSE)
[10:59:38.224]             base::close(...future.stdout)
[10:59:38.224]         }, add = TRUE)
[10:59:38.224]     }
[10:59:38.224]     ...future.frame <- base::sys.nframe()
[10:59:38.224]     ...future.conditions <- base::list()
[10:59:38.224]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.224]     if (FALSE) {
[10:59:38.224]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.224]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.224]     }
[10:59:38.224]     ...future.result <- base::tryCatch({
[10:59:38.224]         base::withCallingHandlers({
[10:59:38.224]             ...future.value <- base::withVisible(base::local({
[10:59:38.224]                 withCallingHandlers({
[10:59:38.224]                   {
[10:59:38.224]                     do.call(function(...) {
[10:59:38.224]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.224]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.224]                         ...future.globals.maxSize)) {
[10:59:38.224]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.224]                         on.exit(options(oopts), add = TRUE)
[10:59:38.224]                       }
[10:59:38.224]                       {
[10:59:38.224]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.224]                           FUN = function(jj) {
[10:59:38.224]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.224]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.224]                               envir = globalenv(), inherits = FALSE)
[10:59:38.224]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.224]                           })
[10:59:38.224]                       }
[10:59:38.224]                     }, args = future.call.arguments)
[10:59:38.224]                   }
[10:59:38.224]                 }, immediateCondition = function(cond) {
[10:59:38.224]                   save_rds <- function (object, pathname, ...) 
[10:59:38.224]                   {
[10:59:38.224]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.224]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.224]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.224]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.224]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.224]                         fi_tmp[["mtime"]])
[10:59:38.224]                     }
[10:59:38.224]                     tryCatch({
[10:59:38.224]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.224]                     }, error = function(ex) {
[10:59:38.224]                       msg <- conditionMessage(ex)
[10:59:38.224]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.224]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.224]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.224]                         fi_tmp[["mtime"]], msg)
[10:59:38.224]                       ex$message <- msg
[10:59:38.224]                       stop(ex)
[10:59:38.224]                     })
[10:59:38.224]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.224]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.224]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.224]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.224]                       fi <- file.info(pathname)
[10:59:38.224]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.224]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.224]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.224]                         fi[["size"]], fi[["mtime"]])
[10:59:38.224]                       stop(msg)
[10:59:38.224]                     }
[10:59:38.224]                     invisible(pathname)
[10:59:38.224]                   }
[10:59:38.224]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.224]                     rootPath = tempdir()) 
[10:59:38.224]                   {
[10:59:38.224]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.224]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.224]                       tmpdir = path, fileext = ".rds")
[10:59:38.224]                     save_rds(obj, file)
[10:59:38.224]                   }
[10:59:38.224]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.224]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.224]                   {
[10:59:38.224]                     inherits <- base::inherits
[10:59:38.224]                     invokeRestart <- base::invokeRestart
[10:59:38.224]                     is.null <- base::is.null
[10:59:38.224]                     muffled <- FALSE
[10:59:38.224]                     if (inherits(cond, "message")) {
[10:59:38.224]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.224]                       if (muffled) 
[10:59:38.224]                         invokeRestart("muffleMessage")
[10:59:38.224]                     }
[10:59:38.224]                     else if (inherits(cond, "warning")) {
[10:59:38.224]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.224]                       if (muffled) 
[10:59:38.224]                         invokeRestart("muffleWarning")
[10:59:38.224]                     }
[10:59:38.224]                     else if (inherits(cond, "condition")) {
[10:59:38.224]                       if (!is.null(pattern)) {
[10:59:38.224]                         computeRestarts <- base::computeRestarts
[10:59:38.224]                         grepl <- base::grepl
[10:59:38.224]                         restarts <- computeRestarts(cond)
[10:59:38.224]                         for (restart in restarts) {
[10:59:38.224]                           name <- restart$name
[10:59:38.224]                           if (is.null(name)) 
[10:59:38.224]                             next
[10:59:38.224]                           if (!grepl(pattern, name)) 
[10:59:38.224]                             next
[10:59:38.224]                           invokeRestart(restart)
[10:59:38.224]                           muffled <- TRUE
[10:59:38.224]                           break
[10:59:38.224]                         }
[10:59:38.224]                       }
[10:59:38.224]                     }
[10:59:38.224]                     invisible(muffled)
[10:59:38.224]                   }
[10:59:38.224]                   muffleCondition(cond)
[10:59:38.224]                 })
[10:59:38.224]             }))
[10:59:38.224]             future::FutureResult(value = ...future.value$value, 
[10:59:38.224]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.224]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.224]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.224]                     ...future.globalenv.names))
[10:59:38.224]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.224]         }, condition = base::local({
[10:59:38.224]             c <- base::c
[10:59:38.224]             inherits <- base::inherits
[10:59:38.224]             invokeRestart <- base::invokeRestart
[10:59:38.224]             length <- base::length
[10:59:38.224]             list <- base::list
[10:59:38.224]             seq.int <- base::seq.int
[10:59:38.224]             signalCondition <- base::signalCondition
[10:59:38.224]             sys.calls <- base::sys.calls
[10:59:38.224]             `[[` <- base::`[[`
[10:59:38.224]             `+` <- base::`+`
[10:59:38.224]             `<<-` <- base::`<<-`
[10:59:38.224]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.224]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.224]                   3L)]
[10:59:38.224]             }
[10:59:38.224]             function(cond) {
[10:59:38.224]                 is_error <- inherits(cond, "error")
[10:59:38.224]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.224]                   NULL)
[10:59:38.224]                 if (is_error) {
[10:59:38.224]                   sessionInformation <- function() {
[10:59:38.224]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.224]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.224]                       search = base::search(), system = base::Sys.info())
[10:59:38.224]                   }
[10:59:38.224]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.224]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.224]                     cond$call), session = sessionInformation(), 
[10:59:38.224]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.224]                   signalCondition(cond)
[10:59:38.224]                 }
[10:59:38.224]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.224]                 "immediateCondition"))) {
[10:59:38.224]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.224]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.224]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.224]                   if (TRUE && !signal) {
[10:59:38.224]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.224]                     {
[10:59:38.224]                       inherits <- base::inherits
[10:59:38.224]                       invokeRestart <- base::invokeRestart
[10:59:38.224]                       is.null <- base::is.null
[10:59:38.224]                       muffled <- FALSE
[10:59:38.224]                       if (inherits(cond, "message")) {
[10:59:38.224]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.224]                         if (muffled) 
[10:59:38.224]                           invokeRestart("muffleMessage")
[10:59:38.224]                       }
[10:59:38.224]                       else if (inherits(cond, "warning")) {
[10:59:38.224]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.224]                         if (muffled) 
[10:59:38.224]                           invokeRestart("muffleWarning")
[10:59:38.224]                       }
[10:59:38.224]                       else if (inherits(cond, "condition")) {
[10:59:38.224]                         if (!is.null(pattern)) {
[10:59:38.224]                           computeRestarts <- base::computeRestarts
[10:59:38.224]                           grepl <- base::grepl
[10:59:38.224]                           restarts <- computeRestarts(cond)
[10:59:38.224]                           for (restart in restarts) {
[10:59:38.224]                             name <- restart$name
[10:59:38.224]                             if (is.null(name)) 
[10:59:38.224]                               next
[10:59:38.224]                             if (!grepl(pattern, name)) 
[10:59:38.224]                               next
[10:59:38.224]                             invokeRestart(restart)
[10:59:38.224]                             muffled <- TRUE
[10:59:38.224]                             break
[10:59:38.224]                           }
[10:59:38.224]                         }
[10:59:38.224]                       }
[10:59:38.224]                       invisible(muffled)
[10:59:38.224]                     }
[10:59:38.224]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.224]                   }
[10:59:38.224]                 }
[10:59:38.224]                 else {
[10:59:38.224]                   if (TRUE) {
[10:59:38.224]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.224]                     {
[10:59:38.224]                       inherits <- base::inherits
[10:59:38.224]                       invokeRestart <- base::invokeRestart
[10:59:38.224]                       is.null <- base::is.null
[10:59:38.224]                       muffled <- FALSE
[10:59:38.224]                       if (inherits(cond, "message")) {
[10:59:38.224]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.224]                         if (muffled) 
[10:59:38.224]                           invokeRestart("muffleMessage")
[10:59:38.224]                       }
[10:59:38.224]                       else if (inherits(cond, "warning")) {
[10:59:38.224]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.224]                         if (muffled) 
[10:59:38.224]                           invokeRestart("muffleWarning")
[10:59:38.224]                       }
[10:59:38.224]                       else if (inherits(cond, "condition")) {
[10:59:38.224]                         if (!is.null(pattern)) {
[10:59:38.224]                           computeRestarts <- base::computeRestarts
[10:59:38.224]                           grepl <- base::grepl
[10:59:38.224]                           restarts <- computeRestarts(cond)
[10:59:38.224]                           for (restart in restarts) {
[10:59:38.224]                             name <- restart$name
[10:59:38.224]                             if (is.null(name)) 
[10:59:38.224]                               next
[10:59:38.224]                             if (!grepl(pattern, name)) 
[10:59:38.224]                               next
[10:59:38.224]                             invokeRestart(restart)
[10:59:38.224]                             muffled <- TRUE
[10:59:38.224]                             break
[10:59:38.224]                           }
[10:59:38.224]                         }
[10:59:38.224]                       }
[10:59:38.224]                       invisible(muffled)
[10:59:38.224]                     }
[10:59:38.224]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.224]                   }
[10:59:38.224]                 }
[10:59:38.224]             }
[10:59:38.224]         }))
[10:59:38.224]     }, error = function(ex) {
[10:59:38.224]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.224]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.224]                 ...future.rng), started = ...future.startTime, 
[10:59:38.224]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.224]             version = "1.8"), class = "FutureResult")
[10:59:38.224]     }, finally = {
[10:59:38.224]         if (!identical(...future.workdir, getwd())) 
[10:59:38.224]             setwd(...future.workdir)
[10:59:38.224]         {
[10:59:38.224]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.224]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.224]             }
[10:59:38.224]             base::options(...future.oldOptions)
[10:59:38.224]             if (.Platform$OS.type == "windows") {
[10:59:38.224]                 old_names <- names(...future.oldEnvVars)
[10:59:38.224]                 envs <- base::Sys.getenv()
[10:59:38.224]                 names <- names(envs)
[10:59:38.224]                 common <- intersect(names, old_names)
[10:59:38.224]                 added <- setdiff(names, old_names)
[10:59:38.224]                 removed <- setdiff(old_names, names)
[10:59:38.224]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.224]                   envs[common]]
[10:59:38.224]                 NAMES <- toupper(changed)
[10:59:38.224]                 args <- list()
[10:59:38.224]                 for (kk in seq_along(NAMES)) {
[10:59:38.224]                   name <- changed[[kk]]
[10:59:38.224]                   NAME <- NAMES[[kk]]
[10:59:38.224]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.224]                     next
[10:59:38.224]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.224]                 }
[10:59:38.224]                 NAMES <- toupper(added)
[10:59:38.224]                 for (kk in seq_along(NAMES)) {
[10:59:38.224]                   name <- added[[kk]]
[10:59:38.224]                   NAME <- NAMES[[kk]]
[10:59:38.224]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.224]                     next
[10:59:38.224]                   args[[name]] <- ""
[10:59:38.224]                 }
[10:59:38.224]                 NAMES <- toupper(removed)
[10:59:38.224]                 for (kk in seq_along(NAMES)) {
[10:59:38.224]                   name <- removed[[kk]]
[10:59:38.224]                   NAME <- NAMES[[kk]]
[10:59:38.224]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.224]                     next
[10:59:38.224]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.224]                 }
[10:59:38.224]                 if (length(args) > 0) 
[10:59:38.224]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.224]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.224]             }
[10:59:38.224]             else {
[10:59:38.224]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.224]             }
[10:59:38.224]             {
[10:59:38.224]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.224]                   0L) {
[10:59:38.224]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.224]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.224]                   base::options(opts)
[10:59:38.224]                 }
[10:59:38.224]                 {
[10:59:38.224]                   {
[10:59:38.224]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.224]                     NULL
[10:59:38.224]                   }
[10:59:38.224]                   options(future.plan = NULL)
[10:59:38.224]                   if (is.na(NA_character_)) 
[10:59:38.224]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.224]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.224]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.224]                     .init = FALSE)
[10:59:38.224]                 }
[10:59:38.224]             }
[10:59:38.224]         }
[10:59:38.224]     })
[10:59:38.224]     if (TRUE) {
[10:59:38.224]         base::sink(type = "output", split = FALSE)
[10:59:38.224]         if (TRUE) {
[10:59:38.224]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.224]         }
[10:59:38.224]         else {
[10:59:38.224]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.224]         }
[10:59:38.224]         base::close(...future.stdout)
[10:59:38.224]         ...future.stdout <- NULL
[10:59:38.224]     }
[10:59:38.224]     ...future.result$conditions <- ...future.conditions
[10:59:38.224]     ...future.result$finished <- base::Sys.time()
[10:59:38.224]     ...future.result
[10:59:38.224] }
[10:59:38.227] assign_globals() ...
[10:59:38.227] List of 5
[10:59:38.227]  $ ...future.FUN            :function (...)  
[10:59:38.227]  $ future.call.arguments    : list()
[10:59:38.227]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.227]  $ ...future.elements_ii    :List of 3
[10:59:38.227]   ..$ : int 0
[10:59:38.227]   ..$ : int 0
[10:59:38.227]   ..$ : int 0
[10:59:38.227]  $ ...future.seeds_ii       :List of 3
[10:59:38.227]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:59:38.227]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:59:38.227]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:59:38.227]  $ ...future.globals.maxSize: NULL
[10:59:38.227]  - attr(*, "where")=List of 5
[10:59:38.227]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.227]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.227]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.227]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.227]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.227]  - attr(*, "resolved")= logi FALSE
[10:59:38.227]  - attr(*, "total_size")= num 7184
[10:59:38.227]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.227]  - attr(*, "already-done")= logi TRUE
[10:59:38.236] - reassign environment for ‘...future.FUN’
[10:59:38.236] - copied ‘...future.FUN’ to environment
[10:59:38.236] - copied ‘future.call.arguments’ to environment
[10:59:38.236] - copied ‘...future.elements_ii’ to environment
[10:59:38.236] - copied ‘...future.seeds_ii’ to environment
[10:59:38.237] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.237] assign_globals() ... done
[10:59:38.237] requestCore(): workers = 2
[10:59:38.239] MulticoreFuture started
[10:59:38.239] - Launch lazy future ... done
[10:59:38.240] run() for ‘MulticoreFuture’ ... done
[10:59:38.240] Created future:
[10:59:38.240] plan(): Setting new future strategy stack:
[10:59:38.240] List of future strategies:
[10:59:38.240] 1. sequential:
[10:59:38.240]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.240]    - tweaked: FALSE
[10:59:38.240]    - call: NULL
[10:59:38.241] plan(): nbrOfWorkers() = 1
[10:59:38.243] plan(): Setting new future strategy stack:
[10:59:38.243] List of future strategies:
[10:59:38.243] 1. multicore:
[10:59:38.243]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.243]    - tweaked: FALSE
[10:59:38.243]    - call: plan(strategy)
[10:59:38.247] plan(): nbrOfWorkers() = 2
[10:59:38.240] MulticoreFuture:
[10:59:38.240] Label: ‘future_replicate-2’
[10:59:38.240] Expression:
[10:59:38.240] {
[10:59:38.240]     do.call(function(...) {
[10:59:38.240]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.240]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.240]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.240]             on.exit(options(oopts), add = TRUE)
[10:59:38.240]         }
[10:59:38.240]         {
[10:59:38.240]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.240]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.240]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.240]                   envir = globalenv(), inherits = FALSE)
[10:59:38.240]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.240]             })
[10:59:38.240]         }
[10:59:38.240]     }, args = future.call.arguments)
[10:59:38.240] }
[10:59:38.240] Lazy evaluation: FALSE
[10:59:38.240] Asynchronous evaluation: TRUE
[10:59:38.240] Local evaluation: TRUE
[10:59:38.240] Environment: R_GlobalEnv
[10:59:38.240] Capture standard output: TRUE
[10:59:38.240] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.240] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.240] Packages: <none>
[10:59:38.240] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.240] Resolved: TRUE
[10:59:38.240] Value: <not collected>
[10:59:38.240] Conditions captured: <none>
[10:59:38.240] Early signaling: FALSE
[10:59:38.240] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.240] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.248] Chunk #2 of 2 ... DONE
[10:59:38.248] Launching 2 futures (chunks) ... DONE
[10:59:38.248] Resolving 2 futures (chunks) ...
[10:59:38.248] resolve() on list ...
[10:59:38.248]  recursive: 0
[10:59:38.249]  length: 2
[10:59:38.249] 
[10:59:38.249] Future #1
[10:59:38.249] result() for MulticoreFuture ...
[10:59:38.250] result() for MulticoreFuture ...
[10:59:38.250] result() for MulticoreFuture ... done
[10:59:38.250] result() for MulticoreFuture ... done
[10:59:38.251] result() for MulticoreFuture ...
[10:59:38.251] result() for MulticoreFuture ... done
[10:59:38.251] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:59:38.251] - nx: 2
[10:59:38.251] - relay: TRUE
[10:59:38.251] - stdout: TRUE
[10:59:38.251] - signal: TRUE
[10:59:38.252] - resignal: FALSE
[10:59:38.252] - force: TRUE
[10:59:38.252] - relayed: [n=2] FALSE, FALSE
[10:59:38.252] - queued futures: [n=2] FALSE, FALSE
[10:59:38.252]  - until=1
[10:59:38.252]  - relaying element #1
[10:59:38.252] result() for MulticoreFuture ...
[10:59:38.253] result() for MulticoreFuture ... done
[10:59:38.253] result() for MulticoreFuture ...
[10:59:38.253] result() for MulticoreFuture ... done
[10:59:38.253] result() for MulticoreFuture ...
[10:59:38.253] result() for MulticoreFuture ... done
[10:59:38.253] result() for MulticoreFuture ...
[10:59:38.253] result() for MulticoreFuture ... done
[10:59:38.253] - relayed: [n=2] TRUE, FALSE
[10:59:38.254] - queued futures: [n=2] TRUE, FALSE
[10:59:38.254] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:59:38.254]  length: 1 (resolved future 1)
[10:59:38.254] Future #2
[10:59:38.254] result() for MulticoreFuture ...
[10:59:38.255] result() for MulticoreFuture ...
[10:59:38.255] result() for MulticoreFuture ... done
[10:59:38.255] result() for MulticoreFuture ... done
[10:59:38.255] result() for MulticoreFuture ...
[10:59:38.256] result() for MulticoreFuture ... done
[10:59:38.256] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:59:38.256] - nx: 2
[10:59:38.256] - relay: TRUE
[10:59:38.256] - stdout: TRUE
[10:59:38.256] - signal: TRUE
[10:59:38.256] - resignal: FALSE
[10:59:38.256] - force: TRUE
[10:59:38.257] - relayed: [n=2] TRUE, FALSE
[10:59:38.257] - queued futures: [n=2] TRUE, FALSE
[10:59:38.257]  - until=2
[10:59:38.257]  - relaying element #2
[10:59:38.257] result() for MulticoreFuture ...
[10:59:38.257] result() for MulticoreFuture ... done
[10:59:38.257] result() for MulticoreFuture ...
[10:59:38.257] result() for MulticoreFuture ... done
[10:59:38.257] result() for MulticoreFuture ...
[10:59:38.258] result() for MulticoreFuture ... done
[10:59:38.258] result() for MulticoreFuture ...
[10:59:38.258] result() for MulticoreFuture ... done
[10:59:38.258] - relayed: [n=2] TRUE, TRUE
[10:59:38.258] - queued futures: [n=2] TRUE, TRUE
[10:59:38.258] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:59:38.258]  length: 0 (resolved future 2)
[10:59:38.258] Relaying remaining futures
[10:59:38.258] signalConditionsASAP(NULL, pos=0) ...
[10:59:38.259] - nx: 2
[10:59:38.259] - relay: TRUE
[10:59:38.259] - stdout: TRUE
[10:59:38.259] - signal: TRUE
[10:59:38.259] - resignal: FALSE
[10:59:38.259] - force: TRUE
[10:59:38.259] - relayed: [n=2] TRUE, TRUE
[10:59:38.259] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:38.259] - relayed: [n=2] TRUE, TRUE
[10:59:38.259] - queued futures: [n=2] TRUE, TRUE
[10:59:38.259] signalConditionsASAP(NULL, pos=0) ... done
[10:59:38.260] resolve() on list ... DONE
[10:59:38.260] result() for MulticoreFuture ...
[10:59:38.260] result() for MulticoreFuture ... done
[10:59:38.262] result() for MulticoreFuture ...
[10:59:38.262] result() for MulticoreFuture ... done
[10:59:38.262] result() for MulticoreFuture ...
[10:59:38.262] result() for MulticoreFuture ... done
[10:59:38.262] result() for MulticoreFuture ...
[10:59:38.263] result() for MulticoreFuture ... done
[10:59:38.263]  - Number of value chunks collected: 2
[10:59:38.263] Resolving 2 futures (chunks) ... DONE
[10:59:38.263] Reducing values from 2 chunks ...
[10:59:38.263]  - Number of values collected after concatenation: 5
[10:59:38.263]  - Number of values expected: 5
[10:59:38.263] Reducing values from 2 chunks ... DONE
[10:59:38.263] future_lapply() ... DONE
[10:59:38.264] future_lapply() ...
[10:59:38.264] Generating random seeds ...
[10:59:38.264] Generating random seed streams for 5 elements ...
[10:59:38.265] Generating random seed streams for 5 elements ... DONE
[10:59:38.265] Generating random seeds ... DONE
[10:59:38.265] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:38.267] Number of chunks: 2
[10:59:38.267] getGlobalsAndPackagesXApply() ...
[10:59:38.268]  - future.globals: TRUE
[10:59:38.268] getGlobalsAndPackages() ...
[10:59:38.268] Searching for globals...
[10:59:38.269] - globals found: [2] ‘FUN’, ‘sample’
[10:59:38.269] Searching for globals ... DONE
[10:59:38.269] Resolving globals: FALSE
[10:59:38.270] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:38.270] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:38.270] - globals: [1] ‘FUN’
[10:59:38.270] 
[10:59:38.271] getGlobalsAndPackages() ... DONE
[10:59:38.271]  - globals found/used: [n=1] ‘FUN’
[10:59:38.271]  - needed namespaces: [n=0] 
[10:59:38.271] Finding globals ... DONE
[10:59:38.271]  - use_args: TRUE
[10:59:38.271]  - Getting '...' globals ...
[10:59:38.272] resolve() on list ...
[10:59:38.272]  recursive: 0
[10:59:38.272]  length: 1
[10:59:38.272]  elements: ‘...’
[10:59:38.272]  length: 0 (resolved future 1)
[10:59:38.272] resolve() on list ... DONE
[10:59:38.272]    - '...' content: [n=0] 
[10:59:38.272] List of 1
[10:59:38.272]  $ ...: list()
[10:59:38.272]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.272]  - attr(*, "where")=List of 1
[10:59:38.272]   ..$ ...:<environment: 0x56262dd0af10> 
[10:59:38.272]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.272]  - attr(*, "resolved")= logi TRUE
[10:59:38.272]  - attr(*, "total_size")= num NA
[10:59:38.275]  - Getting '...' globals ... DONE
[10:59:38.275] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:38.275] List of 2
[10:59:38.275]  $ ...future.FUN:function (...)  
[10:59:38.275]  $ ...          : list()
[10:59:38.275]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.275]  - attr(*, "where")=List of 2
[10:59:38.275]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:38.275]   ..$ ...          :<environment: 0x56262dd0af10> 
[10:59:38.275]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.275]  - attr(*, "resolved")= logi FALSE
[10:59:38.275]  - attr(*, "total_size")= num 7184
[10:59:38.278] Packages to be attached in all futures: [n=0] 
[10:59:38.278] getGlobalsAndPackagesXApply() ... DONE
[10:59:38.278] Number of futures (= number of chunks): 2
[10:59:38.278] Launching 2 futures (chunks) ...
[10:59:38.278] Chunk #1 of 2 ...
[10:59:38.279]  - Finding globals in 'X' for chunk #1 ...
[10:59:38.279] getGlobalsAndPackages() ...
[10:59:38.279] Searching for globals...
[10:59:38.279] 
[10:59:38.279] Searching for globals ... DONE
[10:59:38.279] - globals: [0] <none>
[10:59:38.279] getGlobalsAndPackages() ... DONE
[10:59:38.279]    + additional globals found: [n=0] 
[10:59:38.279]    + additional namespaces needed: [n=0] 
[10:59:38.279]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:38.280]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.280]  - seeds: [2] <seeds>
[10:59:38.280]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.280] getGlobalsAndPackages() ...
[10:59:38.280] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.280] Resolving globals: FALSE
[10:59:38.280] Tweak future expression to call with '...' arguments ...
[10:59:38.280] {
[10:59:38.280]     do.call(function(...) {
[10:59:38.280]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.280]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.280]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.280]             on.exit(options(oopts), add = TRUE)
[10:59:38.280]         }
[10:59:38.280]         {
[10:59:38.280]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.280]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.280]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.280]                   envir = globalenv(), inherits = FALSE)
[10:59:38.280]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.280]             })
[10:59:38.280]         }
[10:59:38.280]     }, args = future.call.arguments)
[10:59:38.280] }
[10:59:38.280] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.281] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.281] 
[10:59:38.281] getGlobalsAndPackages() ... DONE
[10:59:38.281] run() for ‘Future’ ...
[10:59:38.281] - state: ‘created’
[10:59:38.281] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.283] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.283] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.283]   - Field: ‘label’
[10:59:38.283]   - Field: ‘local’
[10:59:38.283]   - Field: ‘owner’
[10:59:38.284]   - Field: ‘envir’
[10:59:38.284]   - Field: ‘workers’
[10:59:38.284]   - Field: ‘packages’
[10:59:38.284]   - Field: ‘gc’
[10:59:38.284]   - Field: ‘job’
[10:59:38.284]   - Field: ‘conditions’
[10:59:38.284]   - Field: ‘expr’
[10:59:38.284]   - Field: ‘uuid’
[10:59:38.284]   - Field: ‘seed’
[10:59:38.284]   - Field: ‘version’
[10:59:38.284]   - Field: ‘result’
[10:59:38.284]   - Field: ‘asynchronous’
[10:59:38.285]   - Field: ‘calls’
[10:59:38.285]   - Field: ‘globals’
[10:59:38.285]   - Field: ‘stdout’
[10:59:38.285]   - Field: ‘earlySignal’
[10:59:38.285]   - Field: ‘lazy’
[10:59:38.285]   - Field: ‘state’
[10:59:38.285] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.285] - Launch lazy future ...
[10:59:38.286] Packages needed by the future expression (n = 0): <none>
[10:59:38.287] Packages needed by future strategies (n = 0): <none>
[10:59:38.287] {
[10:59:38.287]     {
[10:59:38.287]         {
[10:59:38.287]             ...future.startTime <- base::Sys.time()
[10:59:38.287]             {
[10:59:38.287]                 {
[10:59:38.287]                   {
[10:59:38.287]                     {
[10:59:38.287]                       base::local({
[10:59:38.287]                         has_future <- base::requireNamespace("future", 
[10:59:38.287]                           quietly = TRUE)
[10:59:38.287]                         if (has_future) {
[10:59:38.287]                           ns <- base::getNamespace("future")
[10:59:38.287]                           version <- ns[[".package"]][["version"]]
[10:59:38.287]                           if (is.null(version)) 
[10:59:38.287]                             version <- utils::packageVersion("future")
[10:59:38.287]                         }
[10:59:38.287]                         else {
[10:59:38.287]                           version <- NULL
[10:59:38.287]                         }
[10:59:38.287]                         if (!has_future || version < "1.8.0") {
[10:59:38.287]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.287]                             "", base::R.version$version.string), 
[10:59:38.287]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.287]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.287]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.287]                               "release", "version")], collapse = " "), 
[10:59:38.287]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.287]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.287]                             info)
[10:59:38.287]                           info <- base::paste(info, collapse = "; ")
[10:59:38.287]                           if (!has_future) {
[10:59:38.287]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.287]                               info)
[10:59:38.287]                           }
[10:59:38.287]                           else {
[10:59:38.287]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.287]                               info, version)
[10:59:38.287]                           }
[10:59:38.287]                           base::stop(msg)
[10:59:38.287]                         }
[10:59:38.287]                       })
[10:59:38.287]                     }
[10:59:38.287]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.287]                     base::options(mc.cores = 1L)
[10:59:38.287]                   }
[10:59:38.287]                   ...future.strategy.old <- future::plan("list")
[10:59:38.287]                   options(future.plan = NULL)
[10:59:38.287]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.287]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.287]                 }
[10:59:38.287]                 ...future.workdir <- getwd()
[10:59:38.287]             }
[10:59:38.287]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.287]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.287]         }
[10:59:38.287]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.287]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.287]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.287]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.287]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.287]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.287]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.287]             base::names(...future.oldOptions))
[10:59:38.287]     }
[10:59:38.287]     if (FALSE) {
[10:59:38.287]     }
[10:59:38.287]     else {
[10:59:38.287]         if (TRUE) {
[10:59:38.287]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.287]                 open = "w")
[10:59:38.287]         }
[10:59:38.287]         else {
[10:59:38.287]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.287]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.287]         }
[10:59:38.287]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.287]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.287]             base::sink(type = "output", split = FALSE)
[10:59:38.287]             base::close(...future.stdout)
[10:59:38.287]         }, add = TRUE)
[10:59:38.287]     }
[10:59:38.287]     ...future.frame <- base::sys.nframe()
[10:59:38.287]     ...future.conditions <- base::list()
[10:59:38.287]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.287]     if (FALSE) {
[10:59:38.287]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.287]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.287]     }
[10:59:38.287]     ...future.result <- base::tryCatch({
[10:59:38.287]         base::withCallingHandlers({
[10:59:38.287]             ...future.value <- base::withVisible(base::local({
[10:59:38.287]                 withCallingHandlers({
[10:59:38.287]                   {
[10:59:38.287]                     do.call(function(...) {
[10:59:38.287]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.287]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.287]                         ...future.globals.maxSize)) {
[10:59:38.287]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.287]                         on.exit(options(oopts), add = TRUE)
[10:59:38.287]                       }
[10:59:38.287]                       {
[10:59:38.287]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.287]                           FUN = function(jj) {
[10:59:38.287]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.287]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.287]                               envir = globalenv(), inherits = FALSE)
[10:59:38.287]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.287]                           })
[10:59:38.287]                       }
[10:59:38.287]                     }, args = future.call.arguments)
[10:59:38.287]                   }
[10:59:38.287]                 }, immediateCondition = function(cond) {
[10:59:38.287]                   save_rds <- function (object, pathname, ...) 
[10:59:38.287]                   {
[10:59:38.287]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.287]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.287]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.287]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.287]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.287]                         fi_tmp[["mtime"]])
[10:59:38.287]                     }
[10:59:38.287]                     tryCatch({
[10:59:38.287]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.287]                     }, error = function(ex) {
[10:59:38.287]                       msg <- conditionMessage(ex)
[10:59:38.287]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.287]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.287]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.287]                         fi_tmp[["mtime"]], msg)
[10:59:38.287]                       ex$message <- msg
[10:59:38.287]                       stop(ex)
[10:59:38.287]                     })
[10:59:38.287]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.287]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.287]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.287]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.287]                       fi <- file.info(pathname)
[10:59:38.287]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.287]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.287]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.287]                         fi[["size"]], fi[["mtime"]])
[10:59:38.287]                       stop(msg)
[10:59:38.287]                     }
[10:59:38.287]                     invisible(pathname)
[10:59:38.287]                   }
[10:59:38.287]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.287]                     rootPath = tempdir()) 
[10:59:38.287]                   {
[10:59:38.287]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.287]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.287]                       tmpdir = path, fileext = ".rds")
[10:59:38.287]                     save_rds(obj, file)
[10:59:38.287]                   }
[10:59:38.287]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.287]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.287]                   {
[10:59:38.287]                     inherits <- base::inherits
[10:59:38.287]                     invokeRestart <- base::invokeRestart
[10:59:38.287]                     is.null <- base::is.null
[10:59:38.287]                     muffled <- FALSE
[10:59:38.287]                     if (inherits(cond, "message")) {
[10:59:38.287]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.287]                       if (muffled) 
[10:59:38.287]                         invokeRestart("muffleMessage")
[10:59:38.287]                     }
[10:59:38.287]                     else if (inherits(cond, "warning")) {
[10:59:38.287]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.287]                       if (muffled) 
[10:59:38.287]                         invokeRestart("muffleWarning")
[10:59:38.287]                     }
[10:59:38.287]                     else if (inherits(cond, "condition")) {
[10:59:38.287]                       if (!is.null(pattern)) {
[10:59:38.287]                         computeRestarts <- base::computeRestarts
[10:59:38.287]                         grepl <- base::grepl
[10:59:38.287]                         restarts <- computeRestarts(cond)
[10:59:38.287]                         for (restart in restarts) {
[10:59:38.287]                           name <- restart$name
[10:59:38.287]                           if (is.null(name)) 
[10:59:38.287]                             next
[10:59:38.287]                           if (!grepl(pattern, name)) 
[10:59:38.287]                             next
[10:59:38.287]                           invokeRestart(restart)
[10:59:38.287]                           muffled <- TRUE
[10:59:38.287]                           break
[10:59:38.287]                         }
[10:59:38.287]                       }
[10:59:38.287]                     }
[10:59:38.287]                     invisible(muffled)
[10:59:38.287]                   }
[10:59:38.287]                   muffleCondition(cond)
[10:59:38.287]                 })
[10:59:38.287]             }))
[10:59:38.287]             future::FutureResult(value = ...future.value$value, 
[10:59:38.287]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.287]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.287]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.287]                     ...future.globalenv.names))
[10:59:38.287]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.287]         }, condition = base::local({
[10:59:38.287]             c <- base::c
[10:59:38.287]             inherits <- base::inherits
[10:59:38.287]             invokeRestart <- base::invokeRestart
[10:59:38.287]             length <- base::length
[10:59:38.287]             list <- base::list
[10:59:38.287]             seq.int <- base::seq.int
[10:59:38.287]             signalCondition <- base::signalCondition
[10:59:38.287]             sys.calls <- base::sys.calls
[10:59:38.287]             `[[` <- base::`[[`
[10:59:38.287]             `+` <- base::`+`
[10:59:38.287]             `<<-` <- base::`<<-`
[10:59:38.287]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.287]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.287]                   3L)]
[10:59:38.287]             }
[10:59:38.287]             function(cond) {
[10:59:38.287]                 is_error <- inherits(cond, "error")
[10:59:38.287]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.287]                   NULL)
[10:59:38.287]                 if (is_error) {
[10:59:38.287]                   sessionInformation <- function() {
[10:59:38.287]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.287]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.287]                       search = base::search(), system = base::Sys.info())
[10:59:38.287]                   }
[10:59:38.287]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.287]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.287]                     cond$call), session = sessionInformation(), 
[10:59:38.287]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.287]                   signalCondition(cond)
[10:59:38.287]                 }
[10:59:38.287]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.287]                 "immediateCondition"))) {
[10:59:38.287]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.287]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.287]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.287]                   if (TRUE && !signal) {
[10:59:38.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.287]                     {
[10:59:38.287]                       inherits <- base::inherits
[10:59:38.287]                       invokeRestart <- base::invokeRestart
[10:59:38.287]                       is.null <- base::is.null
[10:59:38.287]                       muffled <- FALSE
[10:59:38.287]                       if (inherits(cond, "message")) {
[10:59:38.287]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.287]                         if (muffled) 
[10:59:38.287]                           invokeRestart("muffleMessage")
[10:59:38.287]                       }
[10:59:38.287]                       else if (inherits(cond, "warning")) {
[10:59:38.287]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.287]                         if (muffled) 
[10:59:38.287]                           invokeRestart("muffleWarning")
[10:59:38.287]                       }
[10:59:38.287]                       else if (inherits(cond, "condition")) {
[10:59:38.287]                         if (!is.null(pattern)) {
[10:59:38.287]                           computeRestarts <- base::computeRestarts
[10:59:38.287]                           grepl <- base::grepl
[10:59:38.287]                           restarts <- computeRestarts(cond)
[10:59:38.287]                           for (restart in restarts) {
[10:59:38.287]                             name <- restart$name
[10:59:38.287]                             if (is.null(name)) 
[10:59:38.287]                               next
[10:59:38.287]                             if (!grepl(pattern, name)) 
[10:59:38.287]                               next
[10:59:38.287]                             invokeRestart(restart)
[10:59:38.287]                             muffled <- TRUE
[10:59:38.287]                             break
[10:59:38.287]                           }
[10:59:38.287]                         }
[10:59:38.287]                       }
[10:59:38.287]                       invisible(muffled)
[10:59:38.287]                     }
[10:59:38.287]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.287]                   }
[10:59:38.287]                 }
[10:59:38.287]                 else {
[10:59:38.287]                   if (TRUE) {
[10:59:38.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.287]                     {
[10:59:38.287]                       inherits <- base::inherits
[10:59:38.287]                       invokeRestart <- base::invokeRestart
[10:59:38.287]                       is.null <- base::is.null
[10:59:38.287]                       muffled <- FALSE
[10:59:38.287]                       if (inherits(cond, "message")) {
[10:59:38.287]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.287]                         if (muffled) 
[10:59:38.287]                           invokeRestart("muffleMessage")
[10:59:38.287]                       }
[10:59:38.287]                       else if (inherits(cond, "warning")) {
[10:59:38.287]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.287]                         if (muffled) 
[10:59:38.287]                           invokeRestart("muffleWarning")
[10:59:38.287]                       }
[10:59:38.287]                       else if (inherits(cond, "condition")) {
[10:59:38.287]                         if (!is.null(pattern)) {
[10:59:38.287]                           computeRestarts <- base::computeRestarts
[10:59:38.287]                           grepl <- base::grepl
[10:59:38.287]                           restarts <- computeRestarts(cond)
[10:59:38.287]                           for (restart in restarts) {
[10:59:38.287]                             name <- restart$name
[10:59:38.287]                             if (is.null(name)) 
[10:59:38.287]                               next
[10:59:38.287]                             if (!grepl(pattern, name)) 
[10:59:38.287]                               next
[10:59:38.287]                             invokeRestart(restart)
[10:59:38.287]                             muffled <- TRUE
[10:59:38.287]                             break
[10:59:38.287]                           }
[10:59:38.287]                         }
[10:59:38.287]                       }
[10:59:38.287]                       invisible(muffled)
[10:59:38.287]                     }
[10:59:38.287]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.287]                   }
[10:59:38.287]                 }
[10:59:38.287]             }
[10:59:38.287]         }))
[10:59:38.287]     }, error = function(ex) {
[10:59:38.287]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.287]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.287]                 ...future.rng), started = ...future.startTime, 
[10:59:38.287]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.287]             version = "1.8"), class = "FutureResult")
[10:59:38.287]     }, finally = {
[10:59:38.287]         if (!identical(...future.workdir, getwd())) 
[10:59:38.287]             setwd(...future.workdir)
[10:59:38.287]         {
[10:59:38.287]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.287]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.287]             }
[10:59:38.287]             base::options(...future.oldOptions)
[10:59:38.287]             if (.Platform$OS.type == "windows") {
[10:59:38.287]                 old_names <- names(...future.oldEnvVars)
[10:59:38.287]                 envs <- base::Sys.getenv()
[10:59:38.287]                 names <- names(envs)
[10:59:38.287]                 common <- intersect(names, old_names)
[10:59:38.287]                 added <- setdiff(names, old_names)
[10:59:38.287]                 removed <- setdiff(old_names, names)
[10:59:38.287]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.287]                   envs[common]]
[10:59:38.287]                 NAMES <- toupper(changed)
[10:59:38.287]                 args <- list()
[10:59:38.287]                 for (kk in seq_along(NAMES)) {
[10:59:38.287]                   name <- changed[[kk]]
[10:59:38.287]                   NAME <- NAMES[[kk]]
[10:59:38.287]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.287]                     next
[10:59:38.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.287]                 }
[10:59:38.287]                 NAMES <- toupper(added)
[10:59:38.287]                 for (kk in seq_along(NAMES)) {
[10:59:38.287]                   name <- added[[kk]]
[10:59:38.287]                   NAME <- NAMES[[kk]]
[10:59:38.287]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.287]                     next
[10:59:38.287]                   args[[name]] <- ""
[10:59:38.287]                 }
[10:59:38.287]                 NAMES <- toupper(removed)
[10:59:38.287]                 for (kk in seq_along(NAMES)) {
[10:59:38.287]                   name <- removed[[kk]]
[10:59:38.287]                   NAME <- NAMES[[kk]]
[10:59:38.287]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.287]                     next
[10:59:38.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.287]                 }
[10:59:38.287]                 if (length(args) > 0) 
[10:59:38.287]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.287]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.287]             }
[10:59:38.287]             else {
[10:59:38.287]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.287]             }
[10:59:38.287]             {
[10:59:38.287]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.287]                   0L) {
[10:59:38.287]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.287]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.287]                   base::options(opts)
[10:59:38.287]                 }
[10:59:38.287]                 {
[10:59:38.287]                   {
[10:59:38.287]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.287]                     NULL
[10:59:38.287]                   }
[10:59:38.287]                   options(future.plan = NULL)
[10:59:38.287]                   if (is.na(NA_character_)) 
[10:59:38.287]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.287]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.287]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.287]                     .init = FALSE)
[10:59:38.287]                 }
[10:59:38.287]             }
[10:59:38.287]         }
[10:59:38.287]     })
[10:59:38.287]     if (TRUE) {
[10:59:38.287]         base::sink(type = "output", split = FALSE)
[10:59:38.287]         if (TRUE) {
[10:59:38.287]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.287]         }
[10:59:38.287]         else {
[10:59:38.287]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.287]         }
[10:59:38.287]         base::close(...future.stdout)
[10:59:38.287]         ...future.stdout <- NULL
[10:59:38.287]     }
[10:59:38.287]     ...future.result$conditions <- ...future.conditions
[10:59:38.287]     ...future.result$finished <- base::Sys.time()
[10:59:38.287]     ...future.result
[10:59:38.287] }
[10:59:38.289] assign_globals() ...
[10:59:38.289] List of 5
[10:59:38.289]  $ ...future.FUN            :function (...)  
[10:59:38.289]  $ future.call.arguments    : list()
[10:59:38.289]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.289]  $ ...future.elements_ii    :List of 2
[10:59:38.289]   ..$ : int 0
[10:59:38.289]   ..$ : int 0
[10:59:38.289]  $ ...future.seeds_ii       :List of 2
[10:59:38.289]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:59:38.289]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:59:38.289]  $ ...future.globals.maxSize: NULL
[10:59:38.289]  - attr(*, "where")=List of 5
[10:59:38.289]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.289]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.289]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.289]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.289]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.289]  - attr(*, "resolved")= logi FALSE
[10:59:38.289]  - attr(*, "total_size")= num 7184
[10:59:38.289]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.289]  - attr(*, "already-done")= logi TRUE
[10:59:38.295] - reassign environment for ‘...future.FUN’
[10:59:38.295] - copied ‘...future.FUN’ to environment
[10:59:38.295] - copied ‘future.call.arguments’ to environment
[10:59:38.295] - copied ‘...future.elements_ii’ to environment
[10:59:38.295] - copied ‘...future.seeds_ii’ to environment
[10:59:38.295] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.295] assign_globals() ... done
[10:59:38.295] requestCore(): workers = 2
[10:59:38.297] MulticoreFuture started
[10:59:38.297] - Launch lazy future ... done
[10:59:38.297] run() for ‘MulticoreFuture’ ... done
[10:59:38.298] Created future:
[10:59:38.298] plan(): Setting new future strategy stack:
[10:59:38.298] List of future strategies:
[10:59:38.298] 1. sequential:
[10:59:38.298]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.298]    - tweaked: FALSE
[10:59:38.298]    - call: NULL
[10:59:38.299] plan(): nbrOfWorkers() = 1
[10:59:38.301] plan(): Setting new future strategy stack:
[10:59:38.301] List of future strategies:
[10:59:38.301] 1. multicore:
[10:59:38.301]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.301]    - tweaked: FALSE
[10:59:38.301]    - call: plan(strategy)
[10:59:38.304] plan(): nbrOfWorkers() = 2
[10:59:38.298] MulticoreFuture:
[10:59:38.298] Label: ‘future_replicate-1’
[10:59:38.298] Expression:
[10:59:38.298] {
[10:59:38.298]     do.call(function(...) {
[10:59:38.298]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.298]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.298]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.298]             on.exit(options(oopts), add = TRUE)
[10:59:38.298]         }
[10:59:38.298]         {
[10:59:38.298]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.298]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.298]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.298]                   envir = globalenv(), inherits = FALSE)
[10:59:38.298]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.298]             })
[10:59:38.298]         }
[10:59:38.298]     }, args = future.call.arguments)
[10:59:38.298] }
[10:59:38.298] Lazy evaluation: FALSE
[10:59:38.298] Asynchronous evaluation: TRUE
[10:59:38.298] Local evaluation: TRUE
[10:59:38.298] Environment: R_GlobalEnv
[10:59:38.298] Capture standard output: TRUE
[10:59:38.298] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.298] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.298] Packages: <none>
[10:59:38.298] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.298] Resolved: TRUE
[10:59:38.298] Value: <not collected>
[10:59:38.298] Conditions captured: <none>
[10:59:38.298] Early signaling: FALSE
[10:59:38.298] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.298] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.305] Chunk #1 of 2 ... DONE
[10:59:38.305] Chunk #2 of 2 ...
[10:59:38.306]  - Finding globals in 'X' for chunk #2 ...
[10:59:38.306] getGlobalsAndPackages() ...
[10:59:38.306] Searching for globals...
[10:59:38.306] 
[10:59:38.306] Searching for globals ... DONE
[10:59:38.307] - globals: [0] <none>
[10:59:38.307] getGlobalsAndPackages() ... DONE
[10:59:38.307]    + additional globals found: [n=0] 
[10:59:38.307]    + additional namespaces needed: [n=0] 
[10:59:38.307]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:38.307]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.307]  - seeds: [3] <seeds>
[10:59:38.308]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.308] getGlobalsAndPackages() ...
[10:59:38.308] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.308] Resolving globals: FALSE
[10:59:38.308] Tweak future expression to call with '...' arguments ...
[10:59:38.308] {
[10:59:38.308]     do.call(function(...) {
[10:59:38.308]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.308]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.308]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.308]             on.exit(options(oopts), add = TRUE)
[10:59:38.308]         }
[10:59:38.308]         {
[10:59:38.308]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.308]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.308]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.308]                   envir = globalenv(), inherits = FALSE)
[10:59:38.308]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.308]             })
[10:59:38.308]         }
[10:59:38.308]     }, args = future.call.arguments)
[10:59:38.308] }
[10:59:38.309] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.309] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.310] 
[10:59:38.310] getGlobalsAndPackages() ... DONE
[10:59:38.310] run() for ‘Future’ ...
[10:59:38.310] - state: ‘created’
[10:59:38.311] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.313] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.313] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.313]   - Field: ‘label’
[10:59:38.314]   - Field: ‘local’
[10:59:38.314]   - Field: ‘owner’
[10:59:38.314]   - Field: ‘envir’
[10:59:38.314]   - Field: ‘workers’
[10:59:38.314]   - Field: ‘packages’
[10:59:38.314]   - Field: ‘gc’
[10:59:38.314]   - Field: ‘job’
[10:59:38.315]   - Field: ‘conditions’
[10:59:38.315]   - Field: ‘expr’
[10:59:38.315]   - Field: ‘uuid’
[10:59:38.315]   - Field: ‘seed’
[10:59:38.315]   - Field: ‘version’
[10:59:38.315]   - Field: ‘result’
[10:59:38.315]   - Field: ‘asynchronous’
[10:59:38.316]   - Field: ‘calls’
[10:59:38.316]   - Field: ‘globals’
[10:59:38.316]   - Field: ‘stdout’
[10:59:38.316]   - Field: ‘earlySignal’
[10:59:38.316]   - Field: ‘lazy’
[10:59:38.316]   - Field: ‘state’
[10:59:38.316] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.317] - Launch lazy future ...
[10:59:38.317] Packages needed by the future expression (n = 0): <none>
[10:59:38.317] Packages needed by future strategies (n = 0): <none>
[10:59:38.318] {
[10:59:38.318]     {
[10:59:38.318]         {
[10:59:38.318]             ...future.startTime <- base::Sys.time()
[10:59:38.318]             {
[10:59:38.318]                 {
[10:59:38.318]                   {
[10:59:38.318]                     {
[10:59:38.318]                       base::local({
[10:59:38.318]                         has_future <- base::requireNamespace("future", 
[10:59:38.318]                           quietly = TRUE)
[10:59:38.318]                         if (has_future) {
[10:59:38.318]                           ns <- base::getNamespace("future")
[10:59:38.318]                           version <- ns[[".package"]][["version"]]
[10:59:38.318]                           if (is.null(version)) 
[10:59:38.318]                             version <- utils::packageVersion("future")
[10:59:38.318]                         }
[10:59:38.318]                         else {
[10:59:38.318]                           version <- NULL
[10:59:38.318]                         }
[10:59:38.318]                         if (!has_future || version < "1.8.0") {
[10:59:38.318]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.318]                             "", base::R.version$version.string), 
[10:59:38.318]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.318]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.318]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.318]                               "release", "version")], collapse = " "), 
[10:59:38.318]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.318]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.318]                             info)
[10:59:38.318]                           info <- base::paste(info, collapse = "; ")
[10:59:38.318]                           if (!has_future) {
[10:59:38.318]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.318]                               info)
[10:59:38.318]                           }
[10:59:38.318]                           else {
[10:59:38.318]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.318]                               info, version)
[10:59:38.318]                           }
[10:59:38.318]                           base::stop(msg)
[10:59:38.318]                         }
[10:59:38.318]                       })
[10:59:38.318]                     }
[10:59:38.318]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.318]                     base::options(mc.cores = 1L)
[10:59:38.318]                   }
[10:59:38.318]                   ...future.strategy.old <- future::plan("list")
[10:59:38.318]                   options(future.plan = NULL)
[10:59:38.318]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.318]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.318]                 }
[10:59:38.318]                 ...future.workdir <- getwd()
[10:59:38.318]             }
[10:59:38.318]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.318]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.318]         }
[10:59:38.318]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.318]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.318]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.318]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.318]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.318]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.318]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.318]             base::names(...future.oldOptions))
[10:59:38.318]     }
[10:59:38.318]     if (FALSE) {
[10:59:38.318]     }
[10:59:38.318]     else {
[10:59:38.318]         if (TRUE) {
[10:59:38.318]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.318]                 open = "w")
[10:59:38.318]         }
[10:59:38.318]         else {
[10:59:38.318]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.318]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.318]         }
[10:59:38.318]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.318]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.318]             base::sink(type = "output", split = FALSE)
[10:59:38.318]             base::close(...future.stdout)
[10:59:38.318]         }, add = TRUE)
[10:59:38.318]     }
[10:59:38.318]     ...future.frame <- base::sys.nframe()
[10:59:38.318]     ...future.conditions <- base::list()
[10:59:38.318]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.318]     if (FALSE) {
[10:59:38.318]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.318]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.318]     }
[10:59:38.318]     ...future.result <- base::tryCatch({
[10:59:38.318]         base::withCallingHandlers({
[10:59:38.318]             ...future.value <- base::withVisible(base::local({
[10:59:38.318]                 withCallingHandlers({
[10:59:38.318]                   {
[10:59:38.318]                     do.call(function(...) {
[10:59:38.318]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.318]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.318]                         ...future.globals.maxSize)) {
[10:59:38.318]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.318]                         on.exit(options(oopts), add = TRUE)
[10:59:38.318]                       }
[10:59:38.318]                       {
[10:59:38.318]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.318]                           FUN = function(jj) {
[10:59:38.318]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.318]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.318]                               envir = globalenv(), inherits = FALSE)
[10:59:38.318]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.318]                           })
[10:59:38.318]                       }
[10:59:38.318]                     }, args = future.call.arguments)
[10:59:38.318]                   }
[10:59:38.318]                 }, immediateCondition = function(cond) {
[10:59:38.318]                   save_rds <- function (object, pathname, ...) 
[10:59:38.318]                   {
[10:59:38.318]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.318]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.318]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.318]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.318]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.318]                         fi_tmp[["mtime"]])
[10:59:38.318]                     }
[10:59:38.318]                     tryCatch({
[10:59:38.318]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.318]                     }, error = function(ex) {
[10:59:38.318]                       msg <- conditionMessage(ex)
[10:59:38.318]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.318]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.318]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.318]                         fi_tmp[["mtime"]], msg)
[10:59:38.318]                       ex$message <- msg
[10:59:38.318]                       stop(ex)
[10:59:38.318]                     })
[10:59:38.318]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.318]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.318]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.318]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.318]                       fi <- file.info(pathname)
[10:59:38.318]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.318]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.318]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.318]                         fi[["size"]], fi[["mtime"]])
[10:59:38.318]                       stop(msg)
[10:59:38.318]                     }
[10:59:38.318]                     invisible(pathname)
[10:59:38.318]                   }
[10:59:38.318]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.318]                     rootPath = tempdir()) 
[10:59:38.318]                   {
[10:59:38.318]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.318]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.318]                       tmpdir = path, fileext = ".rds")
[10:59:38.318]                     save_rds(obj, file)
[10:59:38.318]                   }
[10:59:38.318]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.318]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.318]                   {
[10:59:38.318]                     inherits <- base::inherits
[10:59:38.318]                     invokeRestart <- base::invokeRestart
[10:59:38.318]                     is.null <- base::is.null
[10:59:38.318]                     muffled <- FALSE
[10:59:38.318]                     if (inherits(cond, "message")) {
[10:59:38.318]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.318]                       if (muffled) 
[10:59:38.318]                         invokeRestart("muffleMessage")
[10:59:38.318]                     }
[10:59:38.318]                     else if (inherits(cond, "warning")) {
[10:59:38.318]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.318]                       if (muffled) 
[10:59:38.318]                         invokeRestart("muffleWarning")
[10:59:38.318]                     }
[10:59:38.318]                     else if (inherits(cond, "condition")) {
[10:59:38.318]                       if (!is.null(pattern)) {
[10:59:38.318]                         computeRestarts <- base::computeRestarts
[10:59:38.318]                         grepl <- base::grepl
[10:59:38.318]                         restarts <- computeRestarts(cond)
[10:59:38.318]                         for (restart in restarts) {
[10:59:38.318]                           name <- restart$name
[10:59:38.318]                           if (is.null(name)) 
[10:59:38.318]                             next
[10:59:38.318]                           if (!grepl(pattern, name)) 
[10:59:38.318]                             next
[10:59:38.318]                           invokeRestart(restart)
[10:59:38.318]                           muffled <- TRUE
[10:59:38.318]                           break
[10:59:38.318]                         }
[10:59:38.318]                       }
[10:59:38.318]                     }
[10:59:38.318]                     invisible(muffled)
[10:59:38.318]                   }
[10:59:38.318]                   muffleCondition(cond)
[10:59:38.318]                 })
[10:59:38.318]             }))
[10:59:38.318]             future::FutureResult(value = ...future.value$value, 
[10:59:38.318]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.318]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.318]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.318]                     ...future.globalenv.names))
[10:59:38.318]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.318]         }, condition = base::local({
[10:59:38.318]             c <- base::c
[10:59:38.318]             inherits <- base::inherits
[10:59:38.318]             invokeRestart <- base::invokeRestart
[10:59:38.318]             length <- base::length
[10:59:38.318]             list <- base::list
[10:59:38.318]             seq.int <- base::seq.int
[10:59:38.318]             signalCondition <- base::signalCondition
[10:59:38.318]             sys.calls <- base::sys.calls
[10:59:38.318]             `[[` <- base::`[[`
[10:59:38.318]             `+` <- base::`+`
[10:59:38.318]             `<<-` <- base::`<<-`
[10:59:38.318]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.318]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.318]                   3L)]
[10:59:38.318]             }
[10:59:38.318]             function(cond) {
[10:59:38.318]                 is_error <- inherits(cond, "error")
[10:59:38.318]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.318]                   NULL)
[10:59:38.318]                 if (is_error) {
[10:59:38.318]                   sessionInformation <- function() {
[10:59:38.318]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.318]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.318]                       search = base::search(), system = base::Sys.info())
[10:59:38.318]                   }
[10:59:38.318]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.318]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.318]                     cond$call), session = sessionInformation(), 
[10:59:38.318]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.318]                   signalCondition(cond)
[10:59:38.318]                 }
[10:59:38.318]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.318]                 "immediateCondition"))) {
[10:59:38.318]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.318]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.318]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.318]                   if (TRUE && !signal) {
[10:59:38.318]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.318]                     {
[10:59:38.318]                       inherits <- base::inherits
[10:59:38.318]                       invokeRestart <- base::invokeRestart
[10:59:38.318]                       is.null <- base::is.null
[10:59:38.318]                       muffled <- FALSE
[10:59:38.318]                       if (inherits(cond, "message")) {
[10:59:38.318]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.318]                         if (muffled) 
[10:59:38.318]                           invokeRestart("muffleMessage")
[10:59:38.318]                       }
[10:59:38.318]                       else if (inherits(cond, "warning")) {
[10:59:38.318]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.318]                         if (muffled) 
[10:59:38.318]                           invokeRestart("muffleWarning")
[10:59:38.318]                       }
[10:59:38.318]                       else if (inherits(cond, "condition")) {
[10:59:38.318]                         if (!is.null(pattern)) {
[10:59:38.318]                           computeRestarts <- base::computeRestarts
[10:59:38.318]                           grepl <- base::grepl
[10:59:38.318]                           restarts <- computeRestarts(cond)
[10:59:38.318]                           for (restart in restarts) {
[10:59:38.318]                             name <- restart$name
[10:59:38.318]                             if (is.null(name)) 
[10:59:38.318]                               next
[10:59:38.318]                             if (!grepl(pattern, name)) 
[10:59:38.318]                               next
[10:59:38.318]                             invokeRestart(restart)
[10:59:38.318]                             muffled <- TRUE
[10:59:38.318]                             break
[10:59:38.318]                           }
[10:59:38.318]                         }
[10:59:38.318]                       }
[10:59:38.318]                       invisible(muffled)
[10:59:38.318]                     }
[10:59:38.318]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.318]                   }
[10:59:38.318]                 }
[10:59:38.318]                 else {
[10:59:38.318]                   if (TRUE) {
[10:59:38.318]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.318]                     {
[10:59:38.318]                       inherits <- base::inherits
[10:59:38.318]                       invokeRestart <- base::invokeRestart
[10:59:38.318]                       is.null <- base::is.null
[10:59:38.318]                       muffled <- FALSE
[10:59:38.318]                       if (inherits(cond, "message")) {
[10:59:38.318]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.318]                         if (muffled) 
[10:59:38.318]                           invokeRestart("muffleMessage")
[10:59:38.318]                       }
[10:59:38.318]                       else if (inherits(cond, "warning")) {
[10:59:38.318]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.318]                         if (muffled) 
[10:59:38.318]                           invokeRestart("muffleWarning")
[10:59:38.318]                       }
[10:59:38.318]                       else if (inherits(cond, "condition")) {
[10:59:38.318]                         if (!is.null(pattern)) {
[10:59:38.318]                           computeRestarts <- base::computeRestarts
[10:59:38.318]                           grepl <- base::grepl
[10:59:38.318]                           restarts <- computeRestarts(cond)
[10:59:38.318]                           for (restart in restarts) {
[10:59:38.318]                             name <- restart$name
[10:59:38.318]                             if (is.null(name)) 
[10:59:38.318]                               next
[10:59:38.318]                             if (!grepl(pattern, name)) 
[10:59:38.318]                               next
[10:59:38.318]                             invokeRestart(restart)
[10:59:38.318]                             muffled <- TRUE
[10:59:38.318]                             break
[10:59:38.318]                           }
[10:59:38.318]                         }
[10:59:38.318]                       }
[10:59:38.318]                       invisible(muffled)
[10:59:38.318]                     }
[10:59:38.318]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.318]                   }
[10:59:38.318]                 }
[10:59:38.318]             }
[10:59:38.318]         }))
[10:59:38.318]     }, error = function(ex) {
[10:59:38.318]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.318]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.318]                 ...future.rng), started = ...future.startTime, 
[10:59:38.318]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.318]             version = "1.8"), class = "FutureResult")
[10:59:38.318]     }, finally = {
[10:59:38.318]         if (!identical(...future.workdir, getwd())) 
[10:59:38.318]             setwd(...future.workdir)
[10:59:38.318]         {
[10:59:38.318]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.318]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.318]             }
[10:59:38.318]             base::options(...future.oldOptions)
[10:59:38.318]             if (.Platform$OS.type == "windows") {
[10:59:38.318]                 old_names <- names(...future.oldEnvVars)
[10:59:38.318]                 envs <- base::Sys.getenv()
[10:59:38.318]                 names <- names(envs)
[10:59:38.318]                 common <- intersect(names, old_names)
[10:59:38.318]                 added <- setdiff(names, old_names)
[10:59:38.318]                 removed <- setdiff(old_names, names)
[10:59:38.318]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.318]                   envs[common]]
[10:59:38.318]                 NAMES <- toupper(changed)
[10:59:38.318]                 args <- list()
[10:59:38.318]                 for (kk in seq_along(NAMES)) {
[10:59:38.318]                   name <- changed[[kk]]
[10:59:38.318]                   NAME <- NAMES[[kk]]
[10:59:38.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.318]                     next
[10:59:38.318]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.318]                 }
[10:59:38.318]                 NAMES <- toupper(added)
[10:59:38.318]                 for (kk in seq_along(NAMES)) {
[10:59:38.318]                   name <- added[[kk]]
[10:59:38.318]                   NAME <- NAMES[[kk]]
[10:59:38.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.318]                     next
[10:59:38.318]                   args[[name]] <- ""
[10:59:38.318]                 }
[10:59:38.318]                 NAMES <- toupper(removed)
[10:59:38.318]                 for (kk in seq_along(NAMES)) {
[10:59:38.318]                   name <- removed[[kk]]
[10:59:38.318]                   NAME <- NAMES[[kk]]
[10:59:38.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.318]                     next
[10:59:38.318]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.318]                 }
[10:59:38.318]                 if (length(args) > 0) 
[10:59:38.318]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.318]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.318]             }
[10:59:38.318]             else {
[10:59:38.318]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.318]             }
[10:59:38.318]             {
[10:59:38.318]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.318]                   0L) {
[10:59:38.318]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.318]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.318]                   base::options(opts)
[10:59:38.318]                 }
[10:59:38.318]                 {
[10:59:38.318]                   {
[10:59:38.318]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.318]                     NULL
[10:59:38.318]                   }
[10:59:38.318]                   options(future.plan = NULL)
[10:59:38.318]                   if (is.na(NA_character_)) 
[10:59:38.318]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.318]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.318]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.318]                     .init = FALSE)
[10:59:38.318]                 }
[10:59:38.318]             }
[10:59:38.318]         }
[10:59:38.318]     })
[10:59:38.318]     if (TRUE) {
[10:59:38.318]         base::sink(type = "output", split = FALSE)
[10:59:38.318]         if (TRUE) {
[10:59:38.318]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.318]         }
[10:59:38.318]         else {
[10:59:38.318]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.318]         }
[10:59:38.318]         base::close(...future.stdout)
[10:59:38.318]         ...future.stdout <- NULL
[10:59:38.318]     }
[10:59:38.318]     ...future.result$conditions <- ...future.conditions
[10:59:38.318]     ...future.result$finished <- base::Sys.time()
[10:59:38.318]     ...future.result
[10:59:38.318] }
[10:59:38.321] assign_globals() ...
[10:59:38.321] List of 5
[10:59:38.321]  $ ...future.FUN            :function (...)  
[10:59:38.321]  $ future.call.arguments    : list()
[10:59:38.321]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.321]  $ ...future.elements_ii    :List of 3
[10:59:38.321]   ..$ : int 0
[10:59:38.321]   ..$ : int 0
[10:59:38.321]   ..$ : int 0
[10:59:38.321]  $ ...future.seeds_ii       :List of 3
[10:59:38.321]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:59:38.321]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:59:38.321]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:59:38.321]  $ ...future.globals.maxSize: NULL
[10:59:38.321]  - attr(*, "where")=List of 5
[10:59:38.321]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.321]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.321]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.321]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.321]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.321]  - attr(*, "resolved")= logi FALSE
[10:59:38.321]  - attr(*, "total_size")= num 7184
[10:59:38.321]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.321]  - attr(*, "already-done")= logi TRUE
[10:59:38.334] - reassign environment for ‘...future.FUN’
[10:59:38.334] - copied ‘...future.FUN’ to environment
[10:59:38.335] - copied ‘future.call.arguments’ to environment
[10:59:38.335] - copied ‘...future.elements_ii’ to environment
[10:59:38.335] - copied ‘...future.seeds_ii’ to environment
[10:59:38.335] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.335] assign_globals() ... done
[10:59:38.336] requestCore(): workers = 2
[10:59:38.338] MulticoreFuture started
[10:59:38.338] - Launch lazy future ... done
[10:59:38.339] run() for ‘MulticoreFuture’ ... done
[10:59:38.339] plan(): Setting new future strategy stack:
[10:59:38.339] Created future:
[10:59:38.339] List of future strategies:
[10:59:38.339] 1. sequential:
[10:59:38.339]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.339]    - tweaked: FALSE
[10:59:38.339]    - call: NULL
[10:59:38.340] plan(): nbrOfWorkers() = 1
[10:59:38.342] plan(): Setting new future strategy stack:
[10:59:38.343] List of future strategies:
[10:59:38.343] 1. multicore:
[10:59:38.343]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.343]    - tweaked: FALSE
[10:59:38.343]    - call: plan(strategy)
[10:59:38.346] plan(): nbrOfWorkers() = 2
[10:59:38.339] MulticoreFuture:
[10:59:38.339] Label: ‘future_replicate-2’
[10:59:38.339] Expression:
[10:59:38.339] {
[10:59:38.339]     do.call(function(...) {
[10:59:38.339]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.339]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.339]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.339]             on.exit(options(oopts), add = TRUE)
[10:59:38.339]         }
[10:59:38.339]         {
[10:59:38.339]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.339]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.339]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.339]                   envir = globalenv(), inherits = FALSE)
[10:59:38.339]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.339]             })
[10:59:38.339]         }
[10:59:38.339]     }, args = future.call.arguments)
[10:59:38.339] }
[10:59:38.339] Lazy evaluation: FALSE
[10:59:38.339] Asynchronous evaluation: TRUE
[10:59:38.339] Local evaluation: TRUE
[10:59:38.339] Environment: R_GlobalEnv
[10:59:38.339] Capture standard output: TRUE
[10:59:38.339] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.339] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.339] Packages: <none>
[10:59:38.339] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.339] Resolved: TRUE
[10:59:38.339] Value: <not collected>
[10:59:38.339] Conditions captured: <none>
[10:59:38.339] Early signaling: FALSE
[10:59:38.339] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.339] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.347] Chunk #2 of 2 ... DONE
[10:59:38.347] Launching 2 futures (chunks) ... DONE
[10:59:38.347] Resolving 2 futures (chunks) ...
[10:59:38.347] resolve() on list ...
[10:59:38.348]  recursive: 0
[10:59:38.348]  length: 2
[10:59:38.348] 
[10:59:38.348] Future #1
[10:59:38.349] result() for MulticoreFuture ...
[10:59:38.350] result() for MulticoreFuture ...
[10:59:38.350] result() for MulticoreFuture ... done
[10:59:38.350] result() for MulticoreFuture ... done
[10:59:38.350] result() for MulticoreFuture ...
[10:59:38.350] result() for MulticoreFuture ... done
[10:59:38.350] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:59:38.351] - nx: 2
[10:59:38.351] - relay: TRUE
[10:59:38.351] - stdout: TRUE
[10:59:38.351] - signal: TRUE
[10:59:38.351] - resignal: FALSE
[10:59:38.351] - force: TRUE
[10:59:38.352] - relayed: [n=2] FALSE, FALSE
[10:59:38.352] - queued futures: [n=2] FALSE, FALSE
[10:59:38.352]  - until=1
[10:59:38.352]  - relaying element #1
[10:59:38.352] result() for MulticoreFuture ...
[10:59:38.352] result() for MulticoreFuture ... done
[10:59:38.353] result() for MulticoreFuture ...
[10:59:38.353] result() for MulticoreFuture ... done
[10:59:38.353] result() for MulticoreFuture ...
[10:59:38.353] result() for MulticoreFuture ... done
[10:59:38.353] result() for MulticoreFuture ...
[10:59:38.353] result() for MulticoreFuture ... done
[10:59:38.354] - relayed: [n=2] TRUE, FALSE
[10:59:38.354] - queued futures: [n=2] TRUE, FALSE
[10:59:38.354] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:59:38.354]  length: 1 (resolved future 1)
[10:59:38.354] Future #2
[10:59:38.355] result() for MulticoreFuture ...
[10:59:38.355] result() for MulticoreFuture ...
[10:59:38.356] result() for MulticoreFuture ... done
[10:59:38.356] result() for MulticoreFuture ... done
[10:59:38.356] result() for MulticoreFuture ...
[10:59:38.356] result() for MulticoreFuture ... done
[10:59:38.356] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:59:38.357] - nx: 2
[10:59:38.357] - relay: TRUE
[10:59:38.357] - stdout: TRUE
[10:59:38.357] - signal: TRUE
[10:59:38.357] - resignal: FALSE
[10:59:38.357] - force: TRUE
[10:59:38.357] - relayed: [n=2] TRUE, FALSE
[10:59:38.357] - queued futures: [n=2] TRUE, FALSE
[10:59:38.358]  - until=2
[10:59:38.358]  - relaying element #2
[10:59:38.358] result() for MulticoreFuture ...
[10:59:38.358] result() for MulticoreFuture ... done
[10:59:38.358] result() for MulticoreFuture ...
[10:59:38.358] result() for MulticoreFuture ... done
[10:59:38.358] result() for MulticoreFuture ...
[10:59:38.358] result() for MulticoreFuture ... done
[10:59:38.359] result() for MulticoreFuture ...
[10:59:38.359] result() for MulticoreFuture ... done
[10:59:38.359] - relayed: [n=2] TRUE, TRUE
[10:59:38.359] - queued futures: [n=2] TRUE, TRUE
[10:59:38.359] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:59:38.359]  length: 0 (resolved future 2)
[10:59:38.359] Relaying remaining futures
[10:59:38.359] signalConditionsASAP(NULL, pos=0) ...
[10:59:38.359] - nx: 2
[10:59:38.360] - relay: TRUE
[10:59:38.360] - stdout: TRUE
[10:59:38.360] - signal: TRUE
[10:59:38.360] - resignal: FALSE
[10:59:38.360] - force: TRUE
[10:59:38.360] - relayed: [n=2] TRUE, TRUE
[10:59:38.360] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:38.360] - relayed: [n=2] TRUE, TRUE
[10:59:38.360] - queued futures: [n=2] TRUE, TRUE
[10:59:38.360] signalConditionsASAP(NULL, pos=0) ... done
[10:59:38.361] resolve() on list ... DONE
[10:59:38.361] result() for MulticoreFuture ...
[10:59:38.361] result() for MulticoreFuture ... done
[10:59:38.361] result() for MulticoreFuture ...
[10:59:38.361] result() for MulticoreFuture ... done
[10:59:38.361] result() for MulticoreFuture ...
[10:59:38.361] result() for MulticoreFuture ... done
[10:59:38.361] result() for MulticoreFuture ...
[10:59:38.361] result() for MulticoreFuture ... done
[10:59:38.362]  - Number of value chunks collected: 2
[10:59:38.362] Resolving 2 futures (chunks) ... DONE
[10:59:38.362] Reducing values from 2 chunks ...
[10:59:38.362]  - Number of values collected after concatenation: 5
[10:59:38.362]  - Number of values expected: 5
[10:59:38.362] Reducing values from 2 chunks ... DONE
[10:59:38.362] future_lapply() ... DONE
[10:59:38.362] future_lapply() ...
[10:59:38.363] Generating random seeds ...
[10:59:38.363] Generating random seed streams for 5 elements ...
[10:59:38.363] Generating random seed streams for 5 elements ... DONE
[10:59:38.363] Generating random seeds ... DONE
[10:59:38.363] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:38.366] Number of chunks: 2
[10:59:38.366] getGlobalsAndPackagesXApply() ...
[10:59:38.366]  - future.globals: TRUE
[10:59:38.366] getGlobalsAndPackages() ...
[10:59:38.366] Searching for globals...
[10:59:38.368] - globals found: [2] ‘FUN’, ‘sample’
[10:59:38.368] Searching for globals ... DONE
[10:59:38.368] Resolving globals: FALSE
[10:59:38.399] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:38.399] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:38.400] - globals: [1] ‘FUN’
[10:59:38.400] 
[10:59:38.400] getGlobalsAndPackages() ... DONE
[10:59:38.400]  - globals found/used: [n=1] ‘FUN’
[10:59:38.400]  - needed namespaces: [n=0] 
[10:59:38.400] Finding globals ... DONE
[10:59:38.400]  - use_args: TRUE
[10:59:38.400]  - Getting '...' globals ...
[10:59:38.401] resolve() on list ...
[10:59:38.401]  recursive: 0
[10:59:38.401]  length: 1
[10:59:38.401]  elements: ‘...’
[10:59:38.401]  length: 0 (resolved future 1)
[10:59:38.401] resolve() on list ... DONE
[10:59:38.401]    - '...' content: [n=0] 
[10:59:38.401] List of 1
[10:59:38.401]  $ ...: list()
[10:59:38.401]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.401]  - attr(*, "where")=List of 1
[10:59:38.401]   ..$ ...:<environment: 0x56262eab59c0> 
[10:59:38.401]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.401]  - attr(*, "resolved")= logi TRUE
[10:59:38.401]  - attr(*, "total_size")= num NA
[10:59:38.404]  - Getting '...' globals ... DONE
[10:59:38.404] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:38.404] List of 2
[10:59:38.404]  $ ...future.FUN:function (...)  
[10:59:38.404]  $ ...          : list()
[10:59:38.404]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.404]  - attr(*, "where")=List of 2
[10:59:38.404]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:38.404]   ..$ ...          :<environment: 0x56262eab59c0> 
[10:59:38.404]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.404]  - attr(*, "resolved")= logi FALSE
[10:59:38.404]  - attr(*, "total_size")= num 7184
[10:59:38.406] Packages to be attached in all futures: [n=0] 
[10:59:38.406] getGlobalsAndPackagesXApply() ... DONE
[10:59:38.407] Number of futures (= number of chunks): 2
[10:59:38.407] Launching 2 futures (chunks) ...
[10:59:38.407] Chunk #1 of 2 ...
[10:59:38.407]  - Finding globals in 'X' for chunk #1 ...
[10:59:38.407] getGlobalsAndPackages() ...
[10:59:38.407] Searching for globals...
[10:59:38.407] 
[10:59:38.407] Searching for globals ... DONE
[10:59:38.408] - globals: [0] <none>
[10:59:38.408] getGlobalsAndPackages() ... DONE
[10:59:38.408]    + additional globals found: [n=0] 
[10:59:38.408]    + additional namespaces needed: [n=0] 
[10:59:38.408]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:38.408]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.408]  - seeds: [2] <seeds>
[10:59:38.408]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.408] getGlobalsAndPackages() ...
[10:59:38.408] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.408] Resolving globals: FALSE
[10:59:38.409] Tweak future expression to call with '...' arguments ...
[10:59:38.409] {
[10:59:38.409]     do.call(function(...) {
[10:59:38.409]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.409]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.409]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.409]             on.exit(options(oopts), add = TRUE)
[10:59:38.409]         }
[10:59:38.409]         {
[10:59:38.409]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.409]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.409]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.409]                   envir = globalenv(), inherits = FALSE)
[10:59:38.409]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.409]             })
[10:59:38.409]         }
[10:59:38.409]     }, args = future.call.arguments)
[10:59:38.409] }
[10:59:38.409] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.409] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.409] 
[10:59:38.409] getGlobalsAndPackages() ... DONE
[10:59:38.410] run() for ‘Future’ ...
[10:59:38.410] - state: ‘created’
[10:59:38.410] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.411] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.412] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.412]   - Field: ‘label’
[10:59:38.412]   - Field: ‘local’
[10:59:38.412]   - Field: ‘owner’
[10:59:38.412]   - Field: ‘envir’
[10:59:38.412]   - Field: ‘workers’
[10:59:38.412]   - Field: ‘packages’
[10:59:38.412]   - Field: ‘gc’
[10:59:38.412]   - Field: ‘job’
[10:59:38.412]   - Field: ‘conditions’
[10:59:38.412]   - Field: ‘expr’
[10:59:38.412]   - Field: ‘uuid’
[10:59:38.413]   - Field: ‘seed’
[10:59:38.413]   - Field: ‘version’
[10:59:38.413]   - Field: ‘result’
[10:59:38.413]   - Field: ‘asynchronous’
[10:59:38.413]   - Field: ‘calls’
[10:59:38.413]   - Field: ‘globals’
[10:59:38.413]   - Field: ‘stdout’
[10:59:38.413]   - Field: ‘earlySignal’
[10:59:38.413]   - Field: ‘lazy’
[10:59:38.413]   - Field: ‘state’
[10:59:38.413] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.413] - Launch lazy future ...
[10:59:38.414] Packages needed by the future expression (n = 0): <none>
[10:59:38.414] Packages needed by future strategies (n = 0): <none>
[10:59:38.414] {
[10:59:38.414]     {
[10:59:38.414]         {
[10:59:38.414]             ...future.startTime <- base::Sys.time()
[10:59:38.414]             {
[10:59:38.414]                 {
[10:59:38.414]                   {
[10:59:38.414]                     {
[10:59:38.414]                       base::local({
[10:59:38.414]                         has_future <- base::requireNamespace("future", 
[10:59:38.414]                           quietly = TRUE)
[10:59:38.414]                         if (has_future) {
[10:59:38.414]                           ns <- base::getNamespace("future")
[10:59:38.414]                           version <- ns[[".package"]][["version"]]
[10:59:38.414]                           if (is.null(version)) 
[10:59:38.414]                             version <- utils::packageVersion("future")
[10:59:38.414]                         }
[10:59:38.414]                         else {
[10:59:38.414]                           version <- NULL
[10:59:38.414]                         }
[10:59:38.414]                         if (!has_future || version < "1.8.0") {
[10:59:38.414]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.414]                             "", base::R.version$version.string), 
[10:59:38.414]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.414]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.414]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.414]                               "release", "version")], collapse = " "), 
[10:59:38.414]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.414]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.414]                             info)
[10:59:38.414]                           info <- base::paste(info, collapse = "; ")
[10:59:38.414]                           if (!has_future) {
[10:59:38.414]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.414]                               info)
[10:59:38.414]                           }
[10:59:38.414]                           else {
[10:59:38.414]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.414]                               info, version)
[10:59:38.414]                           }
[10:59:38.414]                           base::stop(msg)
[10:59:38.414]                         }
[10:59:38.414]                       })
[10:59:38.414]                     }
[10:59:38.414]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.414]                     base::options(mc.cores = 1L)
[10:59:38.414]                   }
[10:59:38.414]                   ...future.strategy.old <- future::plan("list")
[10:59:38.414]                   options(future.plan = NULL)
[10:59:38.414]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.414]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.414]                 }
[10:59:38.414]                 ...future.workdir <- getwd()
[10:59:38.414]             }
[10:59:38.414]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.414]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.414]         }
[10:59:38.414]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.414]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.414]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.414]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.414]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.414]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.414]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.414]             base::names(...future.oldOptions))
[10:59:38.414]     }
[10:59:38.414]     if (FALSE) {
[10:59:38.414]     }
[10:59:38.414]     else {
[10:59:38.414]         if (TRUE) {
[10:59:38.414]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.414]                 open = "w")
[10:59:38.414]         }
[10:59:38.414]         else {
[10:59:38.414]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.414]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.414]         }
[10:59:38.414]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.414]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.414]             base::sink(type = "output", split = FALSE)
[10:59:38.414]             base::close(...future.stdout)
[10:59:38.414]         }, add = TRUE)
[10:59:38.414]     }
[10:59:38.414]     ...future.frame <- base::sys.nframe()
[10:59:38.414]     ...future.conditions <- base::list()
[10:59:38.414]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.414]     if (FALSE) {
[10:59:38.414]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.414]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.414]     }
[10:59:38.414]     ...future.result <- base::tryCatch({
[10:59:38.414]         base::withCallingHandlers({
[10:59:38.414]             ...future.value <- base::withVisible(base::local({
[10:59:38.414]                 withCallingHandlers({
[10:59:38.414]                   {
[10:59:38.414]                     do.call(function(...) {
[10:59:38.414]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.414]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.414]                         ...future.globals.maxSize)) {
[10:59:38.414]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.414]                         on.exit(options(oopts), add = TRUE)
[10:59:38.414]                       }
[10:59:38.414]                       {
[10:59:38.414]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.414]                           FUN = function(jj) {
[10:59:38.414]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.414]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.414]                               envir = globalenv(), inherits = FALSE)
[10:59:38.414]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.414]                           })
[10:59:38.414]                       }
[10:59:38.414]                     }, args = future.call.arguments)
[10:59:38.414]                   }
[10:59:38.414]                 }, immediateCondition = function(cond) {
[10:59:38.414]                   save_rds <- function (object, pathname, ...) 
[10:59:38.414]                   {
[10:59:38.414]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.414]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.414]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.414]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.414]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.414]                         fi_tmp[["mtime"]])
[10:59:38.414]                     }
[10:59:38.414]                     tryCatch({
[10:59:38.414]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.414]                     }, error = function(ex) {
[10:59:38.414]                       msg <- conditionMessage(ex)
[10:59:38.414]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.414]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.414]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.414]                         fi_tmp[["mtime"]], msg)
[10:59:38.414]                       ex$message <- msg
[10:59:38.414]                       stop(ex)
[10:59:38.414]                     })
[10:59:38.414]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.414]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.414]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.414]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.414]                       fi <- file.info(pathname)
[10:59:38.414]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.414]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.414]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.414]                         fi[["size"]], fi[["mtime"]])
[10:59:38.414]                       stop(msg)
[10:59:38.414]                     }
[10:59:38.414]                     invisible(pathname)
[10:59:38.414]                   }
[10:59:38.414]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.414]                     rootPath = tempdir()) 
[10:59:38.414]                   {
[10:59:38.414]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.414]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.414]                       tmpdir = path, fileext = ".rds")
[10:59:38.414]                     save_rds(obj, file)
[10:59:38.414]                   }
[10:59:38.414]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.414]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.414]                   {
[10:59:38.414]                     inherits <- base::inherits
[10:59:38.414]                     invokeRestart <- base::invokeRestart
[10:59:38.414]                     is.null <- base::is.null
[10:59:38.414]                     muffled <- FALSE
[10:59:38.414]                     if (inherits(cond, "message")) {
[10:59:38.414]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.414]                       if (muffled) 
[10:59:38.414]                         invokeRestart("muffleMessage")
[10:59:38.414]                     }
[10:59:38.414]                     else if (inherits(cond, "warning")) {
[10:59:38.414]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.414]                       if (muffled) 
[10:59:38.414]                         invokeRestart("muffleWarning")
[10:59:38.414]                     }
[10:59:38.414]                     else if (inherits(cond, "condition")) {
[10:59:38.414]                       if (!is.null(pattern)) {
[10:59:38.414]                         computeRestarts <- base::computeRestarts
[10:59:38.414]                         grepl <- base::grepl
[10:59:38.414]                         restarts <- computeRestarts(cond)
[10:59:38.414]                         for (restart in restarts) {
[10:59:38.414]                           name <- restart$name
[10:59:38.414]                           if (is.null(name)) 
[10:59:38.414]                             next
[10:59:38.414]                           if (!grepl(pattern, name)) 
[10:59:38.414]                             next
[10:59:38.414]                           invokeRestart(restart)
[10:59:38.414]                           muffled <- TRUE
[10:59:38.414]                           break
[10:59:38.414]                         }
[10:59:38.414]                       }
[10:59:38.414]                     }
[10:59:38.414]                     invisible(muffled)
[10:59:38.414]                   }
[10:59:38.414]                   muffleCondition(cond)
[10:59:38.414]                 })
[10:59:38.414]             }))
[10:59:38.414]             future::FutureResult(value = ...future.value$value, 
[10:59:38.414]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.414]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.414]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.414]                     ...future.globalenv.names))
[10:59:38.414]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.414]         }, condition = base::local({
[10:59:38.414]             c <- base::c
[10:59:38.414]             inherits <- base::inherits
[10:59:38.414]             invokeRestart <- base::invokeRestart
[10:59:38.414]             length <- base::length
[10:59:38.414]             list <- base::list
[10:59:38.414]             seq.int <- base::seq.int
[10:59:38.414]             signalCondition <- base::signalCondition
[10:59:38.414]             sys.calls <- base::sys.calls
[10:59:38.414]             `[[` <- base::`[[`
[10:59:38.414]             `+` <- base::`+`
[10:59:38.414]             `<<-` <- base::`<<-`
[10:59:38.414]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.414]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.414]                   3L)]
[10:59:38.414]             }
[10:59:38.414]             function(cond) {
[10:59:38.414]                 is_error <- inherits(cond, "error")
[10:59:38.414]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.414]                   NULL)
[10:59:38.414]                 if (is_error) {
[10:59:38.414]                   sessionInformation <- function() {
[10:59:38.414]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.414]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.414]                       search = base::search(), system = base::Sys.info())
[10:59:38.414]                   }
[10:59:38.414]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.414]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.414]                     cond$call), session = sessionInformation(), 
[10:59:38.414]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.414]                   signalCondition(cond)
[10:59:38.414]                 }
[10:59:38.414]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.414]                 "immediateCondition"))) {
[10:59:38.414]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.414]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.414]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.414]                   if (TRUE && !signal) {
[10:59:38.414]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.414]                     {
[10:59:38.414]                       inherits <- base::inherits
[10:59:38.414]                       invokeRestart <- base::invokeRestart
[10:59:38.414]                       is.null <- base::is.null
[10:59:38.414]                       muffled <- FALSE
[10:59:38.414]                       if (inherits(cond, "message")) {
[10:59:38.414]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.414]                         if (muffled) 
[10:59:38.414]                           invokeRestart("muffleMessage")
[10:59:38.414]                       }
[10:59:38.414]                       else if (inherits(cond, "warning")) {
[10:59:38.414]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.414]                         if (muffled) 
[10:59:38.414]                           invokeRestart("muffleWarning")
[10:59:38.414]                       }
[10:59:38.414]                       else if (inherits(cond, "condition")) {
[10:59:38.414]                         if (!is.null(pattern)) {
[10:59:38.414]                           computeRestarts <- base::computeRestarts
[10:59:38.414]                           grepl <- base::grepl
[10:59:38.414]                           restarts <- computeRestarts(cond)
[10:59:38.414]                           for (restart in restarts) {
[10:59:38.414]                             name <- restart$name
[10:59:38.414]                             if (is.null(name)) 
[10:59:38.414]                               next
[10:59:38.414]                             if (!grepl(pattern, name)) 
[10:59:38.414]                               next
[10:59:38.414]                             invokeRestart(restart)
[10:59:38.414]                             muffled <- TRUE
[10:59:38.414]                             break
[10:59:38.414]                           }
[10:59:38.414]                         }
[10:59:38.414]                       }
[10:59:38.414]                       invisible(muffled)
[10:59:38.414]                     }
[10:59:38.414]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.414]                   }
[10:59:38.414]                 }
[10:59:38.414]                 else {
[10:59:38.414]                   if (TRUE) {
[10:59:38.414]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.414]                     {
[10:59:38.414]                       inherits <- base::inherits
[10:59:38.414]                       invokeRestart <- base::invokeRestart
[10:59:38.414]                       is.null <- base::is.null
[10:59:38.414]                       muffled <- FALSE
[10:59:38.414]                       if (inherits(cond, "message")) {
[10:59:38.414]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.414]                         if (muffled) 
[10:59:38.414]                           invokeRestart("muffleMessage")
[10:59:38.414]                       }
[10:59:38.414]                       else if (inherits(cond, "warning")) {
[10:59:38.414]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.414]                         if (muffled) 
[10:59:38.414]                           invokeRestart("muffleWarning")
[10:59:38.414]                       }
[10:59:38.414]                       else if (inherits(cond, "condition")) {
[10:59:38.414]                         if (!is.null(pattern)) {
[10:59:38.414]                           computeRestarts <- base::computeRestarts
[10:59:38.414]                           grepl <- base::grepl
[10:59:38.414]                           restarts <- computeRestarts(cond)
[10:59:38.414]                           for (restart in restarts) {
[10:59:38.414]                             name <- restart$name
[10:59:38.414]                             if (is.null(name)) 
[10:59:38.414]                               next
[10:59:38.414]                             if (!grepl(pattern, name)) 
[10:59:38.414]                               next
[10:59:38.414]                             invokeRestart(restart)
[10:59:38.414]                             muffled <- TRUE
[10:59:38.414]                             break
[10:59:38.414]                           }
[10:59:38.414]                         }
[10:59:38.414]                       }
[10:59:38.414]                       invisible(muffled)
[10:59:38.414]                     }
[10:59:38.414]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.414]                   }
[10:59:38.414]                 }
[10:59:38.414]             }
[10:59:38.414]         }))
[10:59:38.414]     }, error = function(ex) {
[10:59:38.414]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.414]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.414]                 ...future.rng), started = ...future.startTime, 
[10:59:38.414]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.414]             version = "1.8"), class = "FutureResult")
[10:59:38.414]     }, finally = {
[10:59:38.414]         if (!identical(...future.workdir, getwd())) 
[10:59:38.414]             setwd(...future.workdir)
[10:59:38.414]         {
[10:59:38.414]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.414]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.414]             }
[10:59:38.414]             base::options(...future.oldOptions)
[10:59:38.414]             if (.Platform$OS.type == "windows") {
[10:59:38.414]                 old_names <- names(...future.oldEnvVars)
[10:59:38.414]                 envs <- base::Sys.getenv()
[10:59:38.414]                 names <- names(envs)
[10:59:38.414]                 common <- intersect(names, old_names)
[10:59:38.414]                 added <- setdiff(names, old_names)
[10:59:38.414]                 removed <- setdiff(old_names, names)
[10:59:38.414]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.414]                   envs[common]]
[10:59:38.414]                 NAMES <- toupper(changed)
[10:59:38.414]                 args <- list()
[10:59:38.414]                 for (kk in seq_along(NAMES)) {
[10:59:38.414]                   name <- changed[[kk]]
[10:59:38.414]                   NAME <- NAMES[[kk]]
[10:59:38.414]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.414]                     next
[10:59:38.414]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.414]                 }
[10:59:38.414]                 NAMES <- toupper(added)
[10:59:38.414]                 for (kk in seq_along(NAMES)) {
[10:59:38.414]                   name <- added[[kk]]
[10:59:38.414]                   NAME <- NAMES[[kk]]
[10:59:38.414]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.414]                     next
[10:59:38.414]                   args[[name]] <- ""
[10:59:38.414]                 }
[10:59:38.414]                 NAMES <- toupper(removed)
[10:59:38.414]                 for (kk in seq_along(NAMES)) {
[10:59:38.414]                   name <- removed[[kk]]
[10:59:38.414]                   NAME <- NAMES[[kk]]
[10:59:38.414]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.414]                     next
[10:59:38.414]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.414]                 }
[10:59:38.414]                 if (length(args) > 0) 
[10:59:38.414]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.414]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.414]             }
[10:59:38.414]             else {
[10:59:38.414]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.414]             }
[10:59:38.414]             {
[10:59:38.414]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.414]                   0L) {
[10:59:38.414]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.414]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.414]                   base::options(opts)
[10:59:38.414]                 }
[10:59:38.414]                 {
[10:59:38.414]                   {
[10:59:38.414]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.414]                     NULL
[10:59:38.414]                   }
[10:59:38.414]                   options(future.plan = NULL)
[10:59:38.414]                   if (is.na(NA_character_)) 
[10:59:38.414]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.414]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.414]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.414]                     .init = FALSE)
[10:59:38.414]                 }
[10:59:38.414]             }
[10:59:38.414]         }
[10:59:38.414]     })
[10:59:38.414]     if (TRUE) {
[10:59:38.414]         base::sink(type = "output", split = FALSE)
[10:59:38.414]         if (TRUE) {
[10:59:38.414]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.414]         }
[10:59:38.414]         else {
[10:59:38.414]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.414]         }
[10:59:38.414]         base::close(...future.stdout)
[10:59:38.414]         ...future.stdout <- NULL
[10:59:38.414]     }
[10:59:38.414]     ...future.result$conditions <- ...future.conditions
[10:59:38.414]     ...future.result$finished <- base::Sys.time()
[10:59:38.414]     ...future.result
[10:59:38.414] }
[10:59:38.417] assign_globals() ...
[10:59:38.417] List of 5
[10:59:38.417]  $ ...future.FUN            :function (...)  
[10:59:38.417]  $ future.call.arguments    : list()
[10:59:38.417]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.417]  $ ...future.elements_ii    :List of 2
[10:59:38.417]   ..$ : int 0
[10:59:38.417]   ..$ : int 0
[10:59:38.417]  $ ...future.seeds_ii       :List of 2
[10:59:38.417]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:59:38.417]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:59:38.417]  $ ...future.globals.maxSize: NULL
[10:59:38.417]  - attr(*, "where")=List of 5
[10:59:38.417]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.417]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.417]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.417]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.417]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.417]  - attr(*, "resolved")= logi FALSE
[10:59:38.417]  - attr(*, "total_size")= num 7184
[10:59:38.417]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.417]  - attr(*, "already-done")= logi TRUE
[10:59:38.422] - reassign environment for ‘...future.FUN’
[10:59:38.422] - copied ‘...future.FUN’ to environment
[10:59:38.422] - copied ‘future.call.arguments’ to environment
[10:59:38.422] - copied ‘...future.elements_ii’ to environment
[10:59:38.423] - copied ‘...future.seeds_ii’ to environment
[10:59:38.423] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.423] assign_globals() ... done
[10:59:38.423] requestCore(): workers = 2
[10:59:38.429] MulticoreFuture started
[10:59:38.430] - Launch lazy future ... done
[10:59:38.430] plan(): Setting new future strategy stack:
[10:59:38.430] run() for ‘MulticoreFuture’ ... done
[10:59:38.431] Created future:
[10:59:38.431] List of future strategies:
[10:59:38.431] 1. sequential:
[10:59:38.431]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.431]    - tweaked: FALSE
[10:59:38.431]    - call: NULL
[10:59:38.432] plan(): nbrOfWorkers() = 1
[10:59:38.435] plan(): Setting new future strategy stack:
[10:59:38.436] List of future strategies:
[10:59:38.436] 1. multicore:
[10:59:38.436]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.436]    - tweaked: FALSE
[10:59:38.436]    - call: plan(strategy)
[10:59:38.439] plan(): nbrOfWorkers() = 2
[10:59:38.431] MulticoreFuture:
[10:59:38.431] Label: ‘future_replicate-1’
[10:59:38.431] Expression:
[10:59:38.431] {
[10:59:38.431]     do.call(function(...) {
[10:59:38.431]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.431]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.431]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.431]             on.exit(options(oopts), add = TRUE)
[10:59:38.431]         }
[10:59:38.431]         {
[10:59:38.431]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.431]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.431]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.431]                   envir = globalenv(), inherits = FALSE)
[10:59:38.431]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.431]             })
[10:59:38.431]         }
[10:59:38.431]     }, args = future.call.arguments)
[10:59:38.431] }
[10:59:38.431] Lazy evaluation: FALSE
[10:59:38.431] Asynchronous evaluation: TRUE
[10:59:38.431] Local evaluation: TRUE
[10:59:38.431] Environment: R_GlobalEnv
[10:59:38.431] Capture standard output: TRUE
[10:59:38.431] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.431] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.431] Packages: <none>
[10:59:38.431] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.431] Resolved: TRUE
[10:59:38.431] Value: <not collected>
[10:59:38.431] Conditions captured: <none>
[10:59:38.431] Early signaling: FALSE
[10:59:38.431] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.431] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.440] Chunk #1 of 2 ... DONE
[10:59:38.440] Chunk #2 of 2 ...
[10:59:38.440]  - Finding globals in 'X' for chunk #2 ...
[10:59:38.440] getGlobalsAndPackages() ...
[10:59:38.441] Searching for globals...
[10:59:38.441] 
[10:59:38.441] Searching for globals ... DONE
[10:59:38.441] - globals: [0] <none>
[10:59:38.442] getGlobalsAndPackages() ... DONE
[10:59:38.442]    + additional globals found: [n=0] 
[10:59:38.442]    + additional namespaces needed: [n=0] 
[10:59:38.442]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:38.442]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.442]  - seeds: [3] <seeds>
[10:59:38.442]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.442] getGlobalsAndPackages() ...
[10:59:38.442] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.443] Resolving globals: FALSE
[10:59:38.443] Tweak future expression to call with '...' arguments ...
[10:59:38.443] {
[10:59:38.443]     do.call(function(...) {
[10:59:38.443]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.443]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.443]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.443]             on.exit(options(oopts), add = TRUE)
[10:59:38.443]         }
[10:59:38.443]         {
[10:59:38.443]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.443]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.443]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.443]                   envir = globalenv(), inherits = FALSE)
[10:59:38.443]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.443]             })
[10:59:38.443]         }
[10:59:38.443]     }, args = future.call.arguments)
[10:59:38.443] }
[10:59:38.443] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.444] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.444] 
[10:59:38.444] getGlobalsAndPackages() ... DONE
[10:59:38.445] run() for ‘Future’ ...
[10:59:38.445] - state: ‘created’
[10:59:38.445] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.447] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.447] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.448]   - Field: ‘label’
[10:59:38.448]   - Field: ‘local’
[10:59:38.448]   - Field: ‘owner’
[10:59:38.448]   - Field: ‘envir’
[10:59:38.448]   - Field: ‘workers’
[10:59:38.448]   - Field: ‘packages’
[10:59:38.448]   - Field: ‘gc’
[10:59:38.449]   - Field: ‘job’
[10:59:38.449]   - Field: ‘conditions’
[10:59:38.449]   - Field: ‘expr’
[10:59:38.449]   - Field: ‘uuid’
[10:59:38.449]   - Field: ‘seed’
[10:59:38.449]   - Field: ‘version’
[10:59:38.449]   - Field: ‘result’
[10:59:38.449]   - Field: ‘asynchronous’
[10:59:38.450]   - Field: ‘calls’
[10:59:38.450]   - Field: ‘globals’
[10:59:38.450]   - Field: ‘stdout’
[10:59:38.450]   - Field: ‘earlySignal’
[10:59:38.450]   - Field: ‘lazy’
[10:59:38.450]   - Field: ‘state’
[10:59:38.450] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.450] - Launch lazy future ...
[10:59:38.451] Packages needed by the future expression (n = 0): <none>
[10:59:38.451] Packages needed by future strategies (n = 0): <none>
[10:59:38.452] {
[10:59:38.452]     {
[10:59:38.452]         {
[10:59:38.452]             ...future.startTime <- base::Sys.time()
[10:59:38.452]             {
[10:59:38.452]                 {
[10:59:38.452]                   {
[10:59:38.452]                     {
[10:59:38.452]                       base::local({
[10:59:38.452]                         has_future <- base::requireNamespace("future", 
[10:59:38.452]                           quietly = TRUE)
[10:59:38.452]                         if (has_future) {
[10:59:38.452]                           ns <- base::getNamespace("future")
[10:59:38.452]                           version <- ns[[".package"]][["version"]]
[10:59:38.452]                           if (is.null(version)) 
[10:59:38.452]                             version <- utils::packageVersion("future")
[10:59:38.452]                         }
[10:59:38.452]                         else {
[10:59:38.452]                           version <- NULL
[10:59:38.452]                         }
[10:59:38.452]                         if (!has_future || version < "1.8.0") {
[10:59:38.452]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.452]                             "", base::R.version$version.string), 
[10:59:38.452]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.452]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.452]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.452]                               "release", "version")], collapse = " "), 
[10:59:38.452]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.452]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.452]                             info)
[10:59:38.452]                           info <- base::paste(info, collapse = "; ")
[10:59:38.452]                           if (!has_future) {
[10:59:38.452]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.452]                               info)
[10:59:38.452]                           }
[10:59:38.452]                           else {
[10:59:38.452]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.452]                               info, version)
[10:59:38.452]                           }
[10:59:38.452]                           base::stop(msg)
[10:59:38.452]                         }
[10:59:38.452]                       })
[10:59:38.452]                     }
[10:59:38.452]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.452]                     base::options(mc.cores = 1L)
[10:59:38.452]                   }
[10:59:38.452]                   ...future.strategy.old <- future::plan("list")
[10:59:38.452]                   options(future.plan = NULL)
[10:59:38.452]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.452]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.452]                 }
[10:59:38.452]                 ...future.workdir <- getwd()
[10:59:38.452]             }
[10:59:38.452]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.452]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.452]         }
[10:59:38.452]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.452]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.452]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.452]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.452]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.452]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.452]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.452]             base::names(...future.oldOptions))
[10:59:38.452]     }
[10:59:38.452]     if (FALSE) {
[10:59:38.452]     }
[10:59:38.452]     else {
[10:59:38.452]         if (TRUE) {
[10:59:38.452]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.452]                 open = "w")
[10:59:38.452]         }
[10:59:38.452]         else {
[10:59:38.452]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.452]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.452]         }
[10:59:38.452]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.452]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.452]             base::sink(type = "output", split = FALSE)
[10:59:38.452]             base::close(...future.stdout)
[10:59:38.452]         }, add = TRUE)
[10:59:38.452]     }
[10:59:38.452]     ...future.frame <- base::sys.nframe()
[10:59:38.452]     ...future.conditions <- base::list()
[10:59:38.452]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.452]     if (FALSE) {
[10:59:38.452]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.452]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.452]     }
[10:59:38.452]     ...future.result <- base::tryCatch({
[10:59:38.452]         base::withCallingHandlers({
[10:59:38.452]             ...future.value <- base::withVisible(base::local({
[10:59:38.452]                 withCallingHandlers({
[10:59:38.452]                   {
[10:59:38.452]                     do.call(function(...) {
[10:59:38.452]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.452]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.452]                         ...future.globals.maxSize)) {
[10:59:38.452]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.452]                         on.exit(options(oopts), add = TRUE)
[10:59:38.452]                       }
[10:59:38.452]                       {
[10:59:38.452]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.452]                           FUN = function(jj) {
[10:59:38.452]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.452]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.452]                               envir = globalenv(), inherits = FALSE)
[10:59:38.452]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.452]                           })
[10:59:38.452]                       }
[10:59:38.452]                     }, args = future.call.arguments)
[10:59:38.452]                   }
[10:59:38.452]                 }, immediateCondition = function(cond) {
[10:59:38.452]                   save_rds <- function (object, pathname, ...) 
[10:59:38.452]                   {
[10:59:38.452]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.452]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.452]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.452]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.452]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.452]                         fi_tmp[["mtime"]])
[10:59:38.452]                     }
[10:59:38.452]                     tryCatch({
[10:59:38.452]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.452]                     }, error = function(ex) {
[10:59:38.452]                       msg <- conditionMessage(ex)
[10:59:38.452]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.452]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.452]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.452]                         fi_tmp[["mtime"]], msg)
[10:59:38.452]                       ex$message <- msg
[10:59:38.452]                       stop(ex)
[10:59:38.452]                     })
[10:59:38.452]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.452]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.452]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.452]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.452]                       fi <- file.info(pathname)
[10:59:38.452]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.452]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.452]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.452]                         fi[["size"]], fi[["mtime"]])
[10:59:38.452]                       stop(msg)
[10:59:38.452]                     }
[10:59:38.452]                     invisible(pathname)
[10:59:38.452]                   }
[10:59:38.452]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.452]                     rootPath = tempdir()) 
[10:59:38.452]                   {
[10:59:38.452]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.452]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.452]                       tmpdir = path, fileext = ".rds")
[10:59:38.452]                     save_rds(obj, file)
[10:59:38.452]                   }
[10:59:38.452]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.452]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.452]                   {
[10:59:38.452]                     inherits <- base::inherits
[10:59:38.452]                     invokeRestart <- base::invokeRestart
[10:59:38.452]                     is.null <- base::is.null
[10:59:38.452]                     muffled <- FALSE
[10:59:38.452]                     if (inherits(cond, "message")) {
[10:59:38.452]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.452]                       if (muffled) 
[10:59:38.452]                         invokeRestart("muffleMessage")
[10:59:38.452]                     }
[10:59:38.452]                     else if (inherits(cond, "warning")) {
[10:59:38.452]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.452]                       if (muffled) 
[10:59:38.452]                         invokeRestart("muffleWarning")
[10:59:38.452]                     }
[10:59:38.452]                     else if (inherits(cond, "condition")) {
[10:59:38.452]                       if (!is.null(pattern)) {
[10:59:38.452]                         computeRestarts <- base::computeRestarts
[10:59:38.452]                         grepl <- base::grepl
[10:59:38.452]                         restarts <- computeRestarts(cond)
[10:59:38.452]                         for (restart in restarts) {
[10:59:38.452]                           name <- restart$name
[10:59:38.452]                           if (is.null(name)) 
[10:59:38.452]                             next
[10:59:38.452]                           if (!grepl(pattern, name)) 
[10:59:38.452]                             next
[10:59:38.452]                           invokeRestart(restart)
[10:59:38.452]                           muffled <- TRUE
[10:59:38.452]                           break
[10:59:38.452]                         }
[10:59:38.452]                       }
[10:59:38.452]                     }
[10:59:38.452]                     invisible(muffled)
[10:59:38.452]                   }
[10:59:38.452]                   muffleCondition(cond)
[10:59:38.452]                 })
[10:59:38.452]             }))
[10:59:38.452]             future::FutureResult(value = ...future.value$value, 
[10:59:38.452]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.452]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.452]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.452]                     ...future.globalenv.names))
[10:59:38.452]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.452]         }, condition = base::local({
[10:59:38.452]             c <- base::c
[10:59:38.452]             inherits <- base::inherits
[10:59:38.452]             invokeRestart <- base::invokeRestart
[10:59:38.452]             length <- base::length
[10:59:38.452]             list <- base::list
[10:59:38.452]             seq.int <- base::seq.int
[10:59:38.452]             signalCondition <- base::signalCondition
[10:59:38.452]             sys.calls <- base::sys.calls
[10:59:38.452]             `[[` <- base::`[[`
[10:59:38.452]             `+` <- base::`+`
[10:59:38.452]             `<<-` <- base::`<<-`
[10:59:38.452]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.452]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.452]                   3L)]
[10:59:38.452]             }
[10:59:38.452]             function(cond) {
[10:59:38.452]                 is_error <- inherits(cond, "error")
[10:59:38.452]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.452]                   NULL)
[10:59:38.452]                 if (is_error) {
[10:59:38.452]                   sessionInformation <- function() {
[10:59:38.452]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.452]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.452]                       search = base::search(), system = base::Sys.info())
[10:59:38.452]                   }
[10:59:38.452]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.452]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.452]                     cond$call), session = sessionInformation(), 
[10:59:38.452]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.452]                   signalCondition(cond)
[10:59:38.452]                 }
[10:59:38.452]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.452]                 "immediateCondition"))) {
[10:59:38.452]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.452]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.452]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.452]                   if (TRUE && !signal) {
[10:59:38.452]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.452]                     {
[10:59:38.452]                       inherits <- base::inherits
[10:59:38.452]                       invokeRestart <- base::invokeRestart
[10:59:38.452]                       is.null <- base::is.null
[10:59:38.452]                       muffled <- FALSE
[10:59:38.452]                       if (inherits(cond, "message")) {
[10:59:38.452]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.452]                         if (muffled) 
[10:59:38.452]                           invokeRestart("muffleMessage")
[10:59:38.452]                       }
[10:59:38.452]                       else if (inherits(cond, "warning")) {
[10:59:38.452]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.452]                         if (muffled) 
[10:59:38.452]                           invokeRestart("muffleWarning")
[10:59:38.452]                       }
[10:59:38.452]                       else if (inherits(cond, "condition")) {
[10:59:38.452]                         if (!is.null(pattern)) {
[10:59:38.452]                           computeRestarts <- base::computeRestarts
[10:59:38.452]                           grepl <- base::grepl
[10:59:38.452]                           restarts <- computeRestarts(cond)
[10:59:38.452]                           for (restart in restarts) {
[10:59:38.452]                             name <- restart$name
[10:59:38.452]                             if (is.null(name)) 
[10:59:38.452]                               next
[10:59:38.452]                             if (!grepl(pattern, name)) 
[10:59:38.452]                               next
[10:59:38.452]                             invokeRestart(restart)
[10:59:38.452]                             muffled <- TRUE
[10:59:38.452]                             break
[10:59:38.452]                           }
[10:59:38.452]                         }
[10:59:38.452]                       }
[10:59:38.452]                       invisible(muffled)
[10:59:38.452]                     }
[10:59:38.452]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.452]                   }
[10:59:38.452]                 }
[10:59:38.452]                 else {
[10:59:38.452]                   if (TRUE) {
[10:59:38.452]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.452]                     {
[10:59:38.452]                       inherits <- base::inherits
[10:59:38.452]                       invokeRestart <- base::invokeRestart
[10:59:38.452]                       is.null <- base::is.null
[10:59:38.452]                       muffled <- FALSE
[10:59:38.452]                       if (inherits(cond, "message")) {
[10:59:38.452]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.452]                         if (muffled) 
[10:59:38.452]                           invokeRestart("muffleMessage")
[10:59:38.452]                       }
[10:59:38.452]                       else if (inherits(cond, "warning")) {
[10:59:38.452]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.452]                         if (muffled) 
[10:59:38.452]                           invokeRestart("muffleWarning")
[10:59:38.452]                       }
[10:59:38.452]                       else if (inherits(cond, "condition")) {
[10:59:38.452]                         if (!is.null(pattern)) {
[10:59:38.452]                           computeRestarts <- base::computeRestarts
[10:59:38.452]                           grepl <- base::grepl
[10:59:38.452]                           restarts <- computeRestarts(cond)
[10:59:38.452]                           for (restart in restarts) {
[10:59:38.452]                             name <- restart$name
[10:59:38.452]                             if (is.null(name)) 
[10:59:38.452]                               next
[10:59:38.452]                             if (!grepl(pattern, name)) 
[10:59:38.452]                               next
[10:59:38.452]                             invokeRestart(restart)
[10:59:38.452]                             muffled <- TRUE
[10:59:38.452]                             break
[10:59:38.452]                           }
[10:59:38.452]                         }
[10:59:38.452]                       }
[10:59:38.452]                       invisible(muffled)
[10:59:38.452]                     }
[10:59:38.452]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.452]                   }
[10:59:38.452]                 }
[10:59:38.452]             }
[10:59:38.452]         }))
[10:59:38.452]     }, error = function(ex) {
[10:59:38.452]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.452]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.452]                 ...future.rng), started = ...future.startTime, 
[10:59:38.452]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.452]             version = "1.8"), class = "FutureResult")
[10:59:38.452]     }, finally = {
[10:59:38.452]         if (!identical(...future.workdir, getwd())) 
[10:59:38.452]             setwd(...future.workdir)
[10:59:38.452]         {
[10:59:38.452]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.452]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.452]             }
[10:59:38.452]             base::options(...future.oldOptions)
[10:59:38.452]             if (.Platform$OS.type == "windows") {
[10:59:38.452]                 old_names <- names(...future.oldEnvVars)
[10:59:38.452]                 envs <- base::Sys.getenv()
[10:59:38.452]                 names <- names(envs)
[10:59:38.452]                 common <- intersect(names, old_names)
[10:59:38.452]                 added <- setdiff(names, old_names)
[10:59:38.452]                 removed <- setdiff(old_names, names)
[10:59:38.452]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.452]                   envs[common]]
[10:59:38.452]                 NAMES <- toupper(changed)
[10:59:38.452]                 args <- list()
[10:59:38.452]                 for (kk in seq_along(NAMES)) {
[10:59:38.452]                   name <- changed[[kk]]
[10:59:38.452]                   NAME <- NAMES[[kk]]
[10:59:38.452]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.452]                     next
[10:59:38.452]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.452]                 }
[10:59:38.452]                 NAMES <- toupper(added)
[10:59:38.452]                 for (kk in seq_along(NAMES)) {
[10:59:38.452]                   name <- added[[kk]]
[10:59:38.452]                   NAME <- NAMES[[kk]]
[10:59:38.452]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.452]                     next
[10:59:38.452]                   args[[name]] <- ""
[10:59:38.452]                 }
[10:59:38.452]                 NAMES <- toupper(removed)
[10:59:38.452]                 for (kk in seq_along(NAMES)) {
[10:59:38.452]                   name <- removed[[kk]]
[10:59:38.452]                   NAME <- NAMES[[kk]]
[10:59:38.452]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.452]                     next
[10:59:38.452]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.452]                 }
[10:59:38.452]                 if (length(args) > 0) 
[10:59:38.452]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.452]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.452]             }
[10:59:38.452]             else {
[10:59:38.452]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.452]             }
[10:59:38.452]             {
[10:59:38.452]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.452]                   0L) {
[10:59:38.452]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.452]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.452]                   base::options(opts)
[10:59:38.452]                 }
[10:59:38.452]                 {
[10:59:38.452]                   {
[10:59:38.452]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.452]                     NULL
[10:59:38.452]                   }
[10:59:38.452]                   options(future.plan = NULL)
[10:59:38.452]                   if (is.na(NA_character_)) 
[10:59:38.452]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.452]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.452]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.452]                     .init = FALSE)
[10:59:38.452]                 }
[10:59:38.452]             }
[10:59:38.452]         }
[10:59:38.452]     })
[10:59:38.452]     if (TRUE) {
[10:59:38.452]         base::sink(type = "output", split = FALSE)
[10:59:38.452]         if (TRUE) {
[10:59:38.452]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.452]         }
[10:59:38.452]         else {
[10:59:38.452]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.452]         }
[10:59:38.452]         base::close(...future.stdout)
[10:59:38.452]         ...future.stdout <- NULL
[10:59:38.452]     }
[10:59:38.452]     ...future.result$conditions <- ...future.conditions
[10:59:38.452]     ...future.result$finished <- base::Sys.time()
[10:59:38.452]     ...future.result
[10:59:38.452] }
[10:59:38.454] assign_globals() ...
[10:59:38.454] List of 5
[10:59:38.454]  $ ...future.FUN            :function (...)  
[10:59:38.454]  $ future.call.arguments    : list()
[10:59:38.454]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.454]  $ ...future.elements_ii    :List of 3
[10:59:38.454]   ..$ : int 0
[10:59:38.454]   ..$ : int 0
[10:59:38.454]   ..$ : int 0
[10:59:38.454]  $ ...future.seeds_ii       :List of 3
[10:59:38.454]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:59:38.454]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:59:38.454]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:59:38.454]  $ ...future.globals.maxSize: NULL
[10:59:38.454]  - attr(*, "where")=List of 5
[10:59:38.454]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.454]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.454]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.454]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.454]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.454]  - attr(*, "resolved")= logi FALSE
[10:59:38.454]  - attr(*, "total_size")= num 7184
[10:59:38.454]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.454]  - attr(*, "already-done")= logi TRUE
[10:59:38.462] - reassign environment for ‘...future.FUN’
[10:59:38.462] - copied ‘...future.FUN’ to environment
[10:59:38.463] - copied ‘future.call.arguments’ to environment
[10:59:38.463] - copied ‘...future.elements_ii’ to environment
[10:59:38.463] - copied ‘...future.seeds_ii’ to environment
[10:59:38.463] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.463] assign_globals() ... done
[10:59:38.463] requestCore(): workers = 2
[10:59:38.465] MulticoreFuture started
[10:59:38.466] - Launch lazy future ... done
[10:59:38.466] run() for ‘MulticoreFuture’ ... done
[10:59:38.466] Created future:
[10:59:38.467] plan(): Setting new future strategy stack:
[10:59:38.467] List of future strategies:
[10:59:38.467] 1. sequential:
[10:59:38.467]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.467]    - tweaked: FALSE
[10:59:38.467]    - call: NULL
[10:59:38.468] plan(): nbrOfWorkers() = 1
[10:59:38.470] plan(): Setting new future strategy stack:
[10:59:38.471] List of future strategies:
[10:59:38.471] 1. multicore:
[10:59:38.471]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.471]    - tweaked: FALSE
[10:59:38.471]    - call: plan(strategy)
[10:59:38.474] plan(): nbrOfWorkers() = 2
[10:59:38.467] MulticoreFuture:
[10:59:38.467] Label: ‘future_replicate-2’
[10:59:38.467] Expression:
[10:59:38.467] {
[10:59:38.467]     do.call(function(...) {
[10:59:38.467]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.467]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.467]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.467]             on.exit(options(oopts), add = TRUE)
[10:59:38.467]         }
[10:59:38.467]         {
[10:59:38.467]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.467]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.467]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.467]                   envir = globalenv(), inherits = FALSE)
[10:59:38.467]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.467]             })
[10:59:38.467]         }
[10:59:38.467]     }, args = future.call.arguments)
[10:59:38.467] }
[10:59:38.467] Lazy evaluation: FALSE
[10:59:38.467] Asynchronous evaluation: TRUE
[10:59:38.467] Local evaluation: TRUE
[10:59:38.467] Environment: R_GlobalEnv
[10:59:38.467] Capture standard output: TRUE
[10:59:38.467] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.467] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.467] Packages: <none>
[10:59:38.467] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.467] Resolved: TRUE
[10:59:38.467] Value: <not collected>
[10:59:38.467] Conditions captured: <none>
[10:59:38.467] Early signaling: FALSE
[10:59:38.467] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.467] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.475] Chunk #2 of 2 ... DONE
[10:59:38.475] Launching 2 futures (chunks) ... DONE
[10:59:38.475] Resolving 2 futures (chunks) ...
[10:59:38.475] resolve() on list ...
[10:59:38.475]  recursive: 0
[10:59:38.475]  length: 2
[10:59:38.476] 
[10:59:38.476] Future #1
[10:59:38.476] result() for MulticoreFuture ...
[10:59:38.477] result() for MulticoreFuture ...
[10:59:38.477] result() for MulticoreFuture ... done
[10:59:38.477] result() for MulticoreFuture ... done
[10:59:38.477] result() for MulticoreFuture ...
[10:59:38.477] result() for MulticoreFuture ... done
[10:59:38.478] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:59:38.478] - nx: 2
[10:59:38.478] - relay: TRUE
[10:59:38.478] - stdout: TRUE
[10:59:38.478] - signal: TRUE
[10:59:38.478] - resignal: FALSE
[10:59:38.479] - force: TRUE
[10:59:38.479] - relayed: [n=2] FALSE, FALSE
[10:59:38.479] - queued futures: [n=2] FALSE, FALSE
[10:59:38.479]  - until=1
[10:59:38.479]  - relaying element #1
[10:59:38.479] result() for MulticoreFuture ...
[10:59:38.479] result() for MulticoreFuture ... done
[10:59:38.480] result() for MulticoreFuture ...
[10:59:38.480] result() for MulticoreFuture ... done
[10:59:38.480] result() for MulticoreFuture ...
[10:59:38.480] result() for MulticoreFuture ... done
[10:59:38.480] result() for MulticoreFuture ...
[10:59:38.480] result() for MulticoreFuture ... done
[10:59:38.480] - relayed: [n=2] TRUE, FALSE
[10:59:38.481] - queued futures: [n=2] TRUE, FALSE
[10:59:38.481] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:59:38.481]  length: 1 (resolved future 1)
[10:59:38.481] Future #2
[10:59:38.481] result() for MulticoreFuture ...
[10:59:38.482] result() for MulticoreFuture ...
[10:59:38.482] result() for MulticoreFuture ... done
[10:59:38.482] result() for MulticoreFuture ... done
[10:59:38.482] result() for MulticoreFuture ...
[10:59:38.482] result() for MulticoreFuture ... done
[10:59:38.483] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:59:38.483] - nx: 2
[10:59:38.485] - relay: TRUE
[10:59:38.485] - stdout: TRUE
[10:59:38.485] - signal: TRUE
[10:59:38.485] - resignal: FALSE
[10:59:38.486] - force: TRUE
[10:59:38.486] - relayed: [n=2] TRUE, FALSE
[10:59:38.486] - queued futures: [n=2] TRUE, FALSE
[10:59:38.486]  - until=2
[10:59:38.486]  - relaying element #2
[10:59:38.487] result() for MulticoreFuture ...
[10:59:38.487] result() for MulticoreFuture ... done
[10:59:38.487] result() for MulticoreFuture ...
[10:59:38.487] result() for MulticoreFuture ... done
[10:59:38.487] result() for MulticoreFuture ...
[10:59:38.487] result() for MulticoreFuture ... done
[10:59:38.488] result() for MulticoreFuture ...
[10:59:38.488] result() for MulticoreFuture ... done
[10:59:38.488] - relayed: [n=2] TRUE, TRUE
[10:59:38.488] - queued futures: [n=2] TRUE, TRUE
[10:59:38.488] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:59:38.488]  length: 0 (resolved future 2)
[10:59:38.488] Relaying remaining futures
[10:59:38.488] signalConditionsASAP(NULL, pos=0) ...
[10:59:38.488] - nx: 2
[10:59:38.489] - relay: TRUE
[10:59:38.489] - stdout: TRUE
[10:59:38.489] - signal: TRUE
[10:59:38.489] - resignal: FALSE
[10:59:38.489] - force: TRUE
[10:59:38.489] - relayed: [n=2] TRUE, TRUE
[10:59:38.489] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:38.489] - relayed: [n=2] TRUE, TRUE
[10:59:38.489] - queued futures: [n=2] TRUE, TRUE
[10:59:38.489] signalConditionsASAP(NULL, pos=0) ... done
[10:59:38.490] resolve() on list ... DONE
[10:59:38.490] result() for MulticoreFuture ...
[10:59:38.490] result() for MulticoreFuture ... done
[10:59:38.490] result() for MulticoreFuture ...
[10:59:38.490] result() for MulticoreFuture ... done
[10:59:38.490] result() for MulticoreFuture ...
[10:59:38.490] result() for MulticoreFuture ... done
[10:59:38.490] result() for MulticoreFuture ...
[10:59:38.490] result() for MulticoreFuture ... done
[10:59:38.491]  - Number of value chunks collected: 2
[10:59:38.491] Resolving 2 futures (chunks) ... DONE
[10:59:38.491] Reducing values from 2 chunks ...
[10:59:38.491]  - Number of values collected after concatenation: 5
[10:59:38.491]  - Number of values expected: 5
[10:59:38.491] Reducing values from 2 chunks ... DONE
[10:59:38.491] future_lapply() ... DONE
[10:59:38.491] future_lapply() ...
[10:59:38.492] Generating random seeds ...
[10:59:38.492] Generating random seed streams for 5 elements ...
[10:59:38.492] Generating random seed streams for 5 elements ... DONE
[10:59:38.492] Generating random seeds ... DONE
[10:59:38.492] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:38.495] Number of chunks: 2
[10:59:38.495] getGlobalsAndPackagesXApply() ...
[10:59:38.495]  - future.globals: TRUE
[10:59:38.495] getGlobalsAndPackages() ...
[10:59:38.495] Searching for globals...
[10:59:38.497] - globals found: [2] ‘FUN’, ‘sample’
[10:59:38.497] Searching for globals ... DONE
[10:59:38.497] Resolving globals: FALSE
[10:59:38.497] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:38.498] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:38.498] - globals: [1] ‘FUN’
[10:59:38.498] 
[10:59:38.498] getGlobalsAndPackages() ... DONE
[10:59:38.498]  - globals found/used: [n=1] ‘FUN’
[10:59:38.498]  - needed namespaces: [n=0] 
[10:59:38.498] Finding globals ... DONE
[10:59:38.498]  - use_args: TRUE
[10:59:38.499]  - Getting '...' globals ...
[10:59:38.499] resolve() on list ...
[10:59:38.499]  recursive: 0
[10:59:38.499]  length: 1
[10:59:38.499]  elements: ‘...’
[10:59:38.499]  length: 0 (resolved future 1)
[10:59:38.499] resolve() on list ... DONE
[10:59:38.499]    - '...' content: [n=0] 
[10:59:38.500] List of 1
[10:59:38.500]  $ ...: list()
[10:59:38.500]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.500]  - attr(*, "where")=List of 1
[10:59:38.500]   ..$ ...:<environment: 0x56262cfca7f8> 
[10:59:38.500]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.500]  - attr(*, "resolved")= logi TRUE
[10:59:38.500]  - attr(*, "total_size")= num NA
[10:59:38.502]  - Getting '...' globals ... DONE
[10:59:38.502] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:38.503] List of 2
[10:59:38.503]  $ ...future.FUN:function (...)  
[10:59:38.503]  $ ...          : list()
[10:59:38.503]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.503]  - attr(*, "where")=List of 2
[10:59:38.503]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:38.503]   ..$ ...          :<environment: 0x56262cfca7f8> 
[10:59:38.503]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.503]  - attr(*, "resolved")= logi FALSE
[10:59:38.503]  - attr(*, "total_size")= num 7184
[10:59:38.505] Packages to be attached in all futures: [n=0] 
[10:59:38.506] getGlobalsAndPackagesXApply() ... DONE
[10:59:38.506] Number of futures (= number of chunks): 2
[10:59:38.506] Launching 2 futures (chunks) ...
[10:59:38.506] Chunk #1 of 2 ...
[10:59:38.506]  - Finding globals in 'X' for chunk #1 ...
[10:59:38.506] getGlobalsAndPackages() ...
[10:59:38.506] Searching for globals...
[10:59:38.507] 
[10:59:38.507] Searching for globals ... DONE
[10:59:38.507] - globals: [0] <none>
[10:59:38.507] getGlobalsAndPackages() ... DONE
[10:59:38.507]    + additional globals found: [n=0] 
[10:59:38.507]    + additional namespaces needed: [n=0] 
[10:59:38.507]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:38.507]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.507]  - seeds: [2] <seeds>
[10:59:38.507]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.507] getGlobalsAndPackages() ...
[10:59:38.508] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.508] Resolving globals: FALSE
[10:59:38.508] Tweak future expression to call with '...' arguments ...
[10:59:38.508] {
[10:59:38.508]     do.call(function(...) {
[10:59:38.508]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.508]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.508]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.508]             on.exit(options(oopts), add = TRUE)
[10:59:38.508]         }
[10:59:38.508]         {
[10:59:38.508]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.508]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.508]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.508]                   envir = globalenv(), inherits = FALSE)
[10:59:38.508]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.508]             })
[10:59:38.508]         }
[10:59:38.508]     }, args = future.call.arguments)
[10:59:38.508] }
[10:59:38.508] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.508] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.509] 
[10:59:38.509] getGlobalsAndPackages() ... DONE
[10:59:38.509] run() for ‘Future’ ...
[10:59:38.509] - state: ‘created’
[10:59:38.509] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.511] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.511] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.511]   - Field: ‘label’
[10:59:38.511]   - Field: ‘local’
[10:59:38.511]   - Field: ‘owner’
[10:59:38.511]   - Field: ‘envir’
[10:59:38.511]   - Field: ‘workers’
[10:59:38.511]   - Field: ‘packages’
[10:59:38.512]   - Field: ‘gc’
[10:59:38.512]   - Field: ‘job’
[10:59:38.512]   - Field: ‘conditions’
[10:59:38.512]   - Field: ‘expr’
[10:59:38.512]   - Field: ‘uuid’
[10:59:38.512]   - Field: ‘seed’
[10:59:38.512]   - Field: ‘version’
[10:59:38.513]   - Field: ‘result’
[10:59:38.513]   - Field: ‘asynchronous’
[10:59:38.513]   - Field: ‘calls’
[10:59:38.513]   - Field: ‘globals’
[10:59:38.514]   - Field: ‘stdout’
[10:59:38.514]   - Field: ‘earlySignal’
[10:59:38.514]   - Field: ‘lazy’
[10:59:38.514]   - Field: ‘state’
[10:59:38.514] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.514] - Launch lazy future ...
[10:59:38.514] Packages needed by the future expression (n = 0): <none>
[10:59:38.514] Packages needed by future strategies (n = 0): <none>
[10:59:38.515] {
[10:59:38.515]     {
[10:59:38.515]         {
[10:59:38.515]             ...future.startTime <- base::Sys.time()
[10:59:38.515]             {
[10:59:38.515]                 {
[10:59:38.515]                   {
[10:59:38.515]                     {
[10:59:38.515]                       base::local({
[10:59:38.515]                         has_future <- base::requireNamespace("future", 
[10:59:38.515]                           quietly = TRUE)
[10:59:38.515]                         if (has_future) {
[10:59:38.515]                           ns <- base::getNamespace("future")
[10:59:38.515]                           version <- ns[[".package"]][["version"]]
[10:59:38.515]                           if (is.null(version)) 
[10:59:38.515]                             version <- utils::packageVersion("future")
[10:59:38.515]                         }
[10:59:38.515]                         else {
[10:59:38.515]                           version <- NULL
[10:59:38.515]                         }
[10:59:38.515]                         if (!has_future || version < "1.8.0") {
[10:59:38.515]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.515]                             "", base::R.version$version.string), 
[10:59:38.515]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.515]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.515]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.515]                               "release", "version")], collapse = " "), 
[10:59:38.515]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.515]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.515]                             info)
[10:59:38.515]                           info <- base::paste(info, collapse = "; ")
[10:59:38.515]                           if (!has_future) {
[10:59:38.515]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.515]                               info)
[10:59:38.515]                           }
[10:59:38.515]                           else {
[10:59:38.515]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.515]                               info, version)
[10:59:38.515]                           }
[10:59:38.515]                           base::stop(msg)
[10:59:38.515]                         }
[10:59:38.515]                       })
[10:59:38.515]                     }
[10:59:38.515]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.515]                     base::options(mc.cores = 1L)
[10:59:38.515]                   }
[10:59:38.515]                   ...future.strategy.old <- future::plan("list")
[10:59:38.515]                   options(future.plan = NULL)
[10:59:38.515]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.515]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.515]                 }
[10:59:38.515]                 ...future.workdir <- getwd()
[10:59:38.515]             }
[10:59:38.515]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.515]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.515]         }
[10:59:38.515]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.515]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.515]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.515]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.515]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.515]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.515]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.515]             base::names(...future.oldOptions))
[10:59:38.515]     }
[10:59:38.515]     if (FALSE) {
[10:59:38.515]     }
[10:59:38.515]     else {
[10:59:38.515]         if (TRUE) {
[10:59:38.515]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.515]                 open = "w")
[10:59:38.515]         }
[10:59:38.515]         else {
[10:59:38.515]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.515]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.515]         }
[10:59:38.515]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.515]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.515]             base::sink(type = "output", split = FALSE)
[10:59:38.515]             base::close(...future.stdout)
[10:59:38.515]         }, add = TRUE)
[10:59:38.515]     }
[10:59:38.515]     ...future.frame <- base::sys.nframe()
[10:59:38.515]     ...future.conditions <- base::list()
[10:59:38.515]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.515]     if (FALSE) {
[10:59:38.515]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.515]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.515]     }
[10:59:38.515]     ...future.result <- base::tryCatch({
[10:59:38.515]         base::withCallingHandlers({
[10:59:38.515]             ...future.value <- base::withVisible(base::local({
[10:59:38.515]                 withCallingHandlers({
[10:59:38.515]                   {
[10:59:38.515]                     do.call(function(...) {
[10:59:38.515]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.515]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.515]                         ...future.globals.maxSize)) {
[10:59:38.515]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.515]                         on.exit(options(oopts), add = TRUE)
[10:59:38.515]                       }
[10:59:38.515]                       {
[10:59:38.515]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.515]                           FUN = function(jj) {
[10:59:38.515]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.515]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.515]                               envir = globalenv(), inherits = FALSE)
[10:59:38.515]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.515]                           })
[10:59:38.515]                       }
[10:59:38.515]                     }, args = future.call.arguments)
[10:59:38.515]                   }
[10:59:38.515]                 }, immediateCondition = function(cond) {
[10:59:38.515]                   save_rds <- function (object, pathname, ...) 
[10:59:38.515]                   {
[10:59:38.515]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.515]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.515]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.515]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.515]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.515]                         fi_tmp[["mtime"]])
[10:59:38.515]                     }
[10:59:38.515]                     tryCatch({
[10:59:38.515]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.515]                     }, error = function(ex) {
[10:59:38.515]                       msg <- conditionMessage(ex)
[10:59:38.515]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.515]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.515]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.515]                         fi_tmp[["mtime"]], msg)
[10:59:38.515]                       ex$message <- msg
[10:59:38.515]                       stop(ex)
[10:59:38.515]                     })
[10:59:38.515]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.515]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.515]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.515]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.515]                       fi <- file.info(pathname)
[10:59:38.515]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.515]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.515]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.515]                         fi[["size"]], fi[["mtime"]])
[10:59:38.515]                       stop(msg)
[10:59:38.515]                     }
[10:59:38.515]                     invisible(pathname)
[10:59:38.515]                   }
[10:59:38.515]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.515]                     rootPath = tempdir()) 
[10:59:38.515]                   {
[10:59:38.515]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.515]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.515]                       tmpdir = path, fileext = ".rds")
[10:59:38.515]                     save_rds(obj, file)
[10:59:38.515]                   }
[10:59:38.515]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.515]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.515]                   {
[10:59:38.515]                     inherits <- base::inherits
[10:59:38.515]                     invokeRestart <- base::invokeRestart
[10:59:38.515]                     is.null <- base::is.null
[10:59:38.515]                     muffled <- FALSE
[10:59:38.515]                     if (inherits(cond, "message")) {
[10:59:38.515]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.515]                       if (muffled) 
[10:59:38.515]                         invokeRestart("muffleMessage")
[10:59:38.515]                     }
[10:59:38.515]                     else if (inherits(cond, "warning")) {
[10:59:38.515]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.515]                       if (muffled) 
[10:59:38.515]                         invokeRestart("muffleWarning")
[10:59:38.515]                     }
[10:59:38.515]                     else if (inherits(cond, "condition")) {
[10:59:38.515]                       if (!is.null(pattern)) {
[10:59:38.515]                         computeRestarts <- base::computeRestarts
[10:59:38.515]                         grepl <- base::grepl
[10:59:38.515]                         restarts <- computeRestarts(cond)
[10:59:38.515]                         for (restart in restarts) {
[10:59:38.515]                           name <- restart$name
[10:59:38.515]                           if (is.null(name)) 
[10:59:38.515]                             next
[10:59:38.515]                           if (!grepl(pattern, name)) 
[10:59:38.515]                             next
[10:59:38.515]                           invokeRestart(restart)
[10:59:38.515]                           muffled <- TRUE
[10:59:38.515]                           break
[10:59:38.515]                         }
[10:59:38.515]                       }
[10:59:38.515]                     }
[10:59:38.515]                     invisible(muffled)
[10:59:38.515]                   }
[10:59:38.515]                   muffleCondition(cond)
[10:59:38.515]                 })
[10:59:38.515]             }))
[10:59:38.515]             future::FutureResult(value = ...future.value$value, 
[10:59:38.515]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.515]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.515]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.515]                     ...future.globalenv.names))
[10:59:38.515]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.515]         }, condition = base::local({
[10:59:38.515]             c <- base::c
[10:59:38.515]             inherits <- base::inherits
[10:59:38.515]             invokeRestart <- base::invokeRestart
[10:59:38.515]             length <- base::length
[10:59:38.515]             list <- base::list
[10:59:38.515]             seq.int <- base::seq.int
[10:59:38.515]             signalCondition <- base::signalCondition
[10:59:38.515]             sys.calls <- base::sys.calls
[10:59:38.515]             `[[` <- base::`[[`
[10:59:38.515]             `+` <- base::`+`
[10:59:38.515]             `<<-` <- base::`<<-`
[10:59:38.515]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.515]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.515]                   3L)]
[10:59:38.515]             }
[10:59:38.515]             function(cond) {
[10:59:38.515]                 is_error <- inherits(cond, "error")
[10:59:38.515]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.515]                   NULL)
[10:59:38.515]                 if (is_error) {
[10:59:38.515]                   sessionInformation <- function() {
[10:59:38.515]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.515]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.515]                       search = base::search(), system = base::Sys.info())
[10:59:38.515]                   }
[10:59:38.515]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.515]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.515]                     cond$call), session = sessionInformation(), 
[10:59:38.515]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.515]                   signalCondition(cond)
[10:59:38.515]                 }
[10:59:38.515]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.515]                 "immediateCondition"))) {
[10:59:38.515]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.515]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.515]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.515]                   if (TRUE && !signal) {
[10:59:38.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.515]                     {
[10:59:38.515]                       inherits <- base::inherits
[10:59:38.515]                       invokeRestart <- base::invokeRestart
[10:59:38.515]                       is.null <- base::is.null
[10:59:38.515]                       muffled <- FALSE
[10:59:38.515]                       if (inherits(cond, "message")) {
[10:59:38.515]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.515]                         if (muffled) 
[10:59:38.515]                           invokeRestart("muffleMessage")
[10:59:38.515]                       }
[10:59:38.515]                       else if (inherits(cond, "warning")) {
[10:59:38.515]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.515]                         if (muffled) 
[10:59:38.515]                           invokeRestart("muffleWarning")
[10:59:38.515]                       }
[10:59:38.515]                       else if (inherits(cond, "condition")) {
[10:59:38.515]                         if (!is.null(pattern)) {
[10:59:38.515]                           computeRestarts <- base::computeRestarts
[10:59:38.515]                           grepl <- base::grepl
[10:59:38.515]                           restarts <- computeRestarts(cond)
[10:59:38.515]                           for (restart in restarts) {
[10:59:38.515]                             name <- restart$name
[10:59:38.515]                             if (is.null(name)) 
[10:59:38.515]                               next
[10:59:38.515]                             if (!grepl(pattern, name)) 
[10:59:38.515]                               next
[10:59:38.515]                             invokeRestart(restart)
[10:59:38.515]                             muffled <- TRUE
[10:59:38.515]                             break
[10:59:38.515]                           }
[10:59:38.515]                         }
[10:59:38.515]                       }
[10:59:38.515]                       invisible(muffled)
[10:59:38.515]                     }
[10:59:38.515]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.515]                   }
[10:59:38.515]                 }
[10:59:38.515]                 else {
[10:59:38.515]                   if (TRUE) {
[10:59:38.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.515]                     {
[10:59:38.515]                       inherits <- base::inherits
[10:59:38.515]                       invokeRestart <- base::invokeRestart
[10:59:38.515]                       is.null <- base::is.null
[10:59:38.515]                       muffled <- FALSE
[10:59:38.515]                       if (inherits(cond, "message")) {
[10:59:38.515]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.515]                         if (muffled) 
[10:59:38.515]                           invokeRestart("muffleMessage")
[10:59:38.515]                       }
[10:59:38.515]                       else if (inherits(cond, "warning")) {
[10:59:38.515]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.515]                         if (muffled) 
[10:59:38.515]                           invokeRestart("muffleWarning")
[10:59:38.515]                       }
[10:59:38.515]                       else if (inherits(cond, "condition")) {
[10:59:38.515]                         if (!is.null(pattern)) {
[10:59:38.515]                           computeRestarts <- base::computeRestarts
[10:59:38.515]                           grepl <- base::grepl
[10:59:38.515]                           restarts <- computeRestarts(cond)
[10:59:38.515]                           for (restart in restarts) {
[10:59:38.515]                             name <- restart$name
[10:59:38.515]                             if (is.null(name)) 
[10:59:38.515]                               next
[10:59:38.515]                             if (!grepl(pattern, name)) 
[10:59:38.515]                               next
[10:59:38.515]                             invokeRestart(restart)
[10:59:38.515]                             muffled <- TRUE
[10:59:38.515]                             break
[10:59:38.515]                           }
[10:59:38.515]                         }
[10:59:38.515]                       }
[10:59:38.515]                       invisible(muffled)
[10:59:38.515]                     }
[10:59:38.515]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.515]                   }
[10:59:38.515]                 }
[10:59:38.515]             }
[10:59:38.515]         }))
[10:59:38.515]     }, error = function(ex) {
[10:59:38.515]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.515]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.515]                 ...future.rng), started = ...future.startTime, 
[10:59:38.515]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.515]             version = "1.8"), class = "FutureResult")
[10:59:38.515]     }, finally = {
[10:59:38.515]         if (!identical(...future.workdir, getwd())) 
[10:59:38.515]             setwd(...future.workdir)
[10:59:38.515]         {
[10:59:38.515]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.515]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.515]             }
[10:59:38.515]             base::options(...future.oldOptions)
[10:59:38.515]             if (.Platform$OS.type == "windows") {
[10:59:38.515]                 old_names <- names(...future.oldEnvVars)
[10:59:38.515]                 envs <- base::Sys.getenv()
[10:59:38.515]                 names <- names(envs)
[10:59:38.515]                 common <- intersect(names, old_names)
[10:59:38.515]                 added <- setdiff(names, old_names)
[10:59:38.515]                 removed <- setdiff(old_names, names)
[10:59:38.515]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.515]                   envs[common]]
[10:59:38.515]                 NAMES <- toupper(changed)
[10:59:38.515]                 args <- list()
[10:59:38.515]                 for (kk in seq_along(NAMES)) {
[10:59:38.515]                   name <- changed[[kk]]
[10:59:38.515]                   NAME <- NAMES[[kk]]
[10:59:38.515]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.515]                     next
[10:59:38.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.515]                 }
[10:59:38.515]                 NAMES <- toupper(added)
[10:59:38.515]                 for (kk in seq_along(NAMES)) {
[10:59:38.515]                   name <- added[[kk]]
[10:59:38.515]                   NAME <- NAMES[[kk]]
[10:59:38.515]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.515]                     next
[10:59:38.515]                   args[[name]] <- ""
[10:59:38.515]                 }
[10:59:38.515]                 NAMES <- toupper(removed)
[10:59:38.515]                 for (kk in seq_along(NAMES)) {
[10:59:38.515]                   name <- removed[[kk]]
[10:59:38.515]                   NAME <- NAMES[[kk]]
[10:59:38.515]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.515]                     next
[10:59:38.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.515]                 }
[10:59:38.515]                 if (length(args) > 0) 
[10:59:38.515]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.515]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.515]             }
[10:59:38.515]             else {
[10:59:38.515]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.515]             }
[10:59:38.515]             {
[10:59:38.515]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.515]                   0L) {
[10:59:38.515]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.515]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.515]                   base::options(opts)
[10:59:38.515]                 }
[10:59:38.515]                 {
[10:59:38.515]                   {
[10:59:38.515]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.515]                     NULL
[10:59:38.515]                   }
[10:59:38.515]                   options(future.plan = NULL)
[10:59:38.515]                   if (is.na(NA_character_)) 
[10:59:38.515]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.515]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.515]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.515]                     .init = FALSE)
[10:59:38.515]                 }
[10:59:38.515]             }
[10:59:38.515]         }
[10:59:38.515]     })
[10:59:38.515]     if (TRUE) {
[10:59:38.515]         base::sink(type = "output", split = FALSE)
[10:59:38.515]         if (TRUE) {
[10:59:38.515]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.515]         }
[10:59:38.515]         else {
[10:59:38.515]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.515]         }
[10:59:38.515]         base::close(...future.stdout)
[10:59:38.515]         ...future.stdout <- NULL
[10:59:38.515]     }
[10:59:38.515]     ...future.result$conditions <- ...future.conditions
[10:59:38.515]     ...future.result$finished <- base::Sys.time()
[10:59:38.515]     ...future.result
[10:59:38.515] }
[10:59:38.517] assign_globals() ...
[10:59:38.517] List of 5
[10:59:38.517]  $ ...future.FUN            :function (...)  
[10:59:38.517]  $ future.call.arguments    : list()
[10:59:38.517]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.517]  $ ...future.elements_ii    :List of 2
[10:59:38.517]   ..$ : int 0
[10:59:38.517]   ..$ : int 0
[10:59:38.517]  $ ...future.seeds_ii       :List of 2
[10:59:38.517]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:59:38.517]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:59:38.517]  $ ...future.globals.maxSize: NULL
[10:59:38.517]  - attr(*, "where")=List of 5
[10:59:38.517]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.517]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.517]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.517]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.517]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.517]  - attr(*, "resolved")= logi FALSE
[10:59:38.517]  - attr(*, "total_size")= num 7184
[10:59:38.517]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.517]  - attr(*, "already-done")= logi TRUE
[10:59:38.522] - reassign environment for ‘...future.FUN’
[10:59:38.522] - copied ‘...future.FUN’ to environment
[10:59:38.523] - copied ‘future.call.arguments’ to environment
[10:59:38.523] - copied ‘...future.elements_ii’ to environment
[10:59:38.523] - copied ‘...future.seeds_ii’ to environment
[10:59:38.523] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.523] assign_globals() ... done
[10:59:38.523] requestCore(): workers = 2
[10:59:38.525] MulticoreFuture started
[10:59:38.525] - Launch lazy future ... done
[10:59:38.525] run() for ‘MulticoreFuture’ ... done
[10:59:38.526] Created future:
[10:59:38.526] plan(): Setting new future strategy stack:
[10:59:38.526] List of future strategies:
[10:59:38.526] 1. sequential:
[10:59:38.526]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.526]    - tweaked: FALSE
[10:59:38.526]    - call: NULL
[10:59:38.527] plan(): nbrOfWorkers() = 1
[10:59:38.530] plan(): Setting new future strategy stack:
[10:59:38.531] List of future strategies:
[10:59:38.531] 1. multicore:
[10:59:38.531]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.531]    - tweaked: FALSE
[10:59:38.531]    - call: plan(strategy)
[10:59:38.535] plan(): nbrOfWorkers() = 2
[10:59:38.526] MulticoreFuture:
[10:59:38.526] Label: ‘future_replicate-1’
[10:59:38.526] Expression:
[10:59:38.526] {
[10:59:38.526]     do.call(function(...) {
[10:59:38.526]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.526]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.526]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.526]             on.exit(options(oopts), add = TRUE)
[10:59:38.526]         }
[10:59:38.526]         {
[10:59:38.526]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.526]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.526]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.526]                   envir = globalenv(), inherits = FALSE)
[10:59:38.526]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.526]             })
[10:59:38.526]         }
[10:59:38.526]     }, args = future.call.arguments)
[10:59:38.526] }
[10:59:38.526] Lazy evaluation: FALSE
[10:59:38.526] Asynchronous evaluation: TRUE
[10:59:38.526] Local evaluation: TRUE
[10:59:38.526] Environment: R_GlobalEnv
[10:59:38.526] Capture standard output: TRUE
[10:59:38.526] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.526] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.526] Packages: <none>
[10:59:38.526] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.526] Resolved: TRUE
[10:59:38.526] Value: <not collected>
[10:59:38.526] Conditions captured: <none>
[10:59:38.526] Early signaling: FALSE
[10:59:38.526] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.526] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.536] Chunk #1 of 2 ... DONE
[10:59:38.536] Chunk #2 of 2 ...
[10:59:38.536]  - Finding globals in 'X' for chunk #2 ...
[10:59:38.536] getGlobalsAndPackages() ...
[10:59:38.537] Searching for globals...
[10:59:38.537] 
[10:59:38.537] Searching for globals ... DONE
[10:59:38.537] - globals: [0] <none>
[10:59:38.537] getGlobalsAndPackages() ... DONE
[10:59:38.538]    + additional globals found: [n=0] 
[10:59:38.538]    + additional namespaces needed: [n=0] 
[10:59:38.538]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:38.538]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.538]  - seeds: [3] <seeds>
[10:59:38.538]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.538] getGlobalsAndPackages() ...
[10:59:38.539] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.539] Resolving globals: FALSE
[10:59:38.539] Tweak future expression to call with '...' arguments ...
[10:59:38.539] {
[10:59:38.539]     do.call(function(...) {
[10:59:38.539]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.539]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.539]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.539]             on.exit(options(oopts), add = TRUE)
[10:59:38.539]         }
[10:59:38.539]         {
[10:59:38.539]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.539]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.539]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.539]                   envir = globalenv(), inherits = FALSE)
[10:59:38.539]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.539]             })
[10:59:38.539]         }
[10:59:38.539]     }, args = future.call.arguments)
[10:59:38.539] }
[10:59:38.539] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.540] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.540] 
[10:59:38.540] getGlobalsAndPackages() ... DONE
[10:59:38.541] run() for ‘Future’ ...
[10:59:38.541] - state: ‘created’
[10:59:38.541] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.544] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.544] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.544]   - Field: ‘label’
[10:59:38.545]   - Field: ‘local’
[10:59:38.545]   - Field: ‘owner’
[10:59:38.545]   - Field: ‘envir’
[10:59:38.545]   - Field: ‘workers’
[10:59:38.545]   - Field: ‘packages’
[10:59:38.545]   - Field: ‘gc’
[10:59:38.546]   - Field: ‘job’
[10:59:38.546]   - Field: ‘conditions’
[10:59:38.546]   - Field: ‘expr’
[10:59:38.546]   - Field: ‘uuid’
[10:59:38.546]   - Field: ‘seed’
[10:59:38.546]   - Field: ‘version’
[10:59:38.546]   - Field: ‘result’
[10:59:38.546]   - Field: ‘asynchronous’
[10:59:38.547]   - Field: ‘calls’
[10:59:38.547]   - Field: ‘globals’
[10:59:38.547]   - Field: ‘stdout’
[10:59:38.547]   - Field: ‘earlySignal’
[10:59:38.547]   - Field: ‘lazy’
[10:59:38.547]   - Field: ‘state’
[10:59:38.547] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.548] - Launch lazy future ...
[10:59:38.548] Packages needed by the future expression (n = 0): <none>
[10:59:38.548] Packages needed by future strategies (n = 0): <none>
[10:59:38.549] {
[10:59:38.549]     {
[10:59:38.549]         {
[10:59:38.549]             ...future.startTime <- base::Sys.time()
[10:59:38.549]             {
[10:59:38.549]                 {
[10:59:38.549]                   {
[10:59:38.549]                     {
[10:59:38.549]                       base::local({
[10:59:38.549]                         has_future <- base::requireNamespace("future", 
[10:59:38.549]                           quietly = TRUE)
[10:59:38.549]                         if (has_future) {
[10:59:38.549]                           ns <- base::getNamespace("future")
[10:59:38.549]                           version <- ns[[".package"]][["version"]]
[10:59:38.549]                           if (is.null(version)) 
[10:59:38.549]                             version <- utils::packageVersion("future")
[10:59:38.549]                         }
[10:59:38.549]                         else {
[10:59:38.549]                           version <- NULL
[10:59:38.549]                         }
[10:59:38.549]                         if (!has_future || version < "1.8.0") {
[10:59:38.549]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.549]                             "", base::R.version$version.string), 
[10:59:38.549]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.549]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.549]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.549]                               "release", "version")], collapse = " "), 
[10:59:38.549]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.549]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.549]                             info)
[10:59:38.549]                           info <- base::paste(info, collapse = "; ")
[10:59:38.549]                           if (!has_future) {
[10:59:38.549]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.549]                               info)
[10:59:38.549]                           }
[10:59:38.549]                           else {
[10:59:38.549]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.549]                               info, version)
[10:59:38.549]                           }
[10:59:38.549]                           base::stop(msg)
[10:59:38.549]                         }
[10:59:38.549]                       })
[10:59:38.549]                     }
[10:59:38.549]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.549]                     base::options(mc.cores = 1L)
[10:59:38.549]                   }
[10:59:38.549]                   ...future.strategy.old <- future::plan("list")
[10:59:38.549]                   options(future.plan = NULL)
[10:59:38.549]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.549]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.549]                 }
[10:59:38.549]                 ...future.workdir <- getwd()
[10:59:38.549]             }
[10:59:38.549]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.549]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.549]         }
[10:59:38.549]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.549]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.549]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.549]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.549]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.549]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.549]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.549]             base::names(...future.oldOptions))
[10:59:38.549]     }
[10:59:38.549]     if (FALSE) {
[10:59:38.549]     }
[10:59:38.549]     else {
[10:59:38.549]         if (TRUE) {
[10:59:38.549]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.549]                 open = "w")
[10:59:38.549]         }
[10:59:38.549]         else {
[10:59:38.549]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.549]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.549]         }
[10:59:38.549]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.549]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.549]             base::sink(type = "output", split = FALSE)
[10:59:38.549]             base::close(...future.stdout)
[10:59:38.549]         }, add = TRUE)
[10:59:38.549]     }
[10:59:38.549]     ...future.frame <- base::sys.nframe()
[10:59:38.549]     ...future.conditions <- base::list()
[10:59:38.549]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.549]     if (FALSE) {
[10:59:38.549]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.549]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.549]     }
[10:59:38.549]     ...future.result <- base::tryCatch({
[10:59:38.549]         base::withCallingHandlers({
[10:59:38.549]             ...future.value <- base::withVisible(base::local({
[10:59:38.549]                 withCallingHandlers({
[10:59:38.549]                   {
[10:59:38.549]                     do.call(function(...) {
[10:59:38.549]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.549]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.549]                         ...future.globals.maxSize)) {
[10:59:38.549]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.549]                         on.exit(options(oopts), add = TRUE)
[10:59:38.549]                       }
[10:59:38.549]                       {
[10:59:38.549]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.549]                           FUN = function(jj) {
[10:59:38.549]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.549]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.549]                               envir = globalenv(), inherits = FALSE)
[10:59:38.549]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.549]                           })
[10:59:38.549]                       }
[10:59:38.549]                     }, args = future.call.arguments)
[10:59:38.549]                   }
[10:59:38.549]                 }, immediateCondition = function(cond) {
[10:59:38.549]                   save_rds <- function (object, pathname, ...) 
[10:59:38.549]                   {
[10:59:38.549]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.549]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.549]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.549]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.549]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.549]                         fi_tmp[["mtime"]])
[10:59:38.549]                     }
[10:59:38.549]                     tryCatch({
[10:59:38.549]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.549]                     }, error = function(ex) {
[10:59:38.549]                       msg <- conditionMessage(ex)
[10:59:38.549]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.549]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.549]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.549]                         fi_tmp[["mtime"]], msg)
[10:59:38.549]                       ex$message <- msg
[10:59:38.549]                       stop(ex)
[10:59:38.549]                     })
[10:59:38.549]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.549]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.549]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.549]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.549]                       fi <- file.info(pathname)
[10:59:38.549]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.549]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.549]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.549]                         fi[["size"]], fi[["mtime"]])
[10:59:38.549]                       stop(msg)
[10:59:38.549]                     }
[10:59:38.549]                     invisible(pathname)
[10:59:38.549]                   }
[10:59:38.549]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.549]                     rootPath = tempdir()) 
[10:59:38.549]                   {
[10:59:38.549]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.549]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.549]                       tmpdir = path, fileext = ".rds")
[10:59:38.549]                     save_rds(obj, file)
[10:59:38.549]                   }
[10:59:38.549]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.549]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.549]                   {
[10:59:38.549]                     inherits <- base::inherits
[10:59:38.549]                     invokeRestart <- base::invokeRestart
[10:59:38.549]                     is.null <- base::is.null
[10:59:38.549]                     muffled <- FALSE
[10:59:38.549]                     if (inherits(cond, "message")) {
[10:59:38.549]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.549]                       if (muffled) 
[10:59:38.549]                         invokeRestart("muffleMessage")
[10:59:38.549]                     }
[10:59:38.549]                     else if (inherits(cond, "warning")) {
[10:59:38.549]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.549]                       if (muffled) 
[10:59:38.549]                         invokeRestart("muffleWarning")
[10:59:38.549]                     }
[10:59:38.549]                     else if (inherits(cond, "condition")) {
[10:59:38.549]                       if (!is.null(pattern)) {
[10:59:38.549]                         computeRestarts <- base::computeRestarts
[10:59:38.549]                         grepl <- base::grepl
[10:59:38.549]                         restarts <- computeRestarts(cond)
[10:59:38.549]                         for (restart in restarts) {
[10:59:38.549]                           name <- restart$name
[10:59:38.549]                           if (is.null(name)) 
[10:59:38.549]                             next
[10:59:38.549]                           if (!grepl(pattern, name)) 
[10:59:38.549]                             next
[10:59:38.549]                           invokeRestart(restart)
[10:59:38.549]                           muffled <- TRUE
[10:59:38.549]                           break
[10:59:38.549]                         }
[10:59:38.549]                       }
[10:59:38.549]                     }
[10:59:38.549]                     invisible(muffled)
[10:59:38.549]                   }
[10:59:38.549]                   muffleCondition(cond)
[10:59:38.549]                 })
[10:59:38.549]             }))
[10:59:38.549]             future::FutureResult(value = ...future.value$value, 
[10:59:38.549]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.549]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.549]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.549]                     ...future.globalenv.names))
[10:59:38.549]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.549]         }, condition = base::local({
[10:59:38.549]             c <- base::c
[10:59:38.549]             inherits <- base::inherits
[10:59:38.549]             invokeRestart <- base::invokeRestart
[10:59:38.549]             length <- base::length
[10:59:38.549]             list <- base::list
[10:59:38.549]             seq.int <- base::seq.int
[10:59:38.549]             signalCondition <- base::signalCondition
[10:59:38.549]             sys.calls <- base::sys.calls
[10:59:38.549]             `[[` <- base::`[[`
[10:59:38.549]             `+` <- base::`+`
[10:59:38.549]             `<<-` <- base::`<<-`
[10:59:38.549]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.549]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.549]                   3L)]
[10:59:38.549]             }
[10:59:38.549]             function(cond) {
[10:59:38.549]                 is_error <- inherits(cond, "error")
[10:59:38.549]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.549]                   NULL)
[10:59:38.549]                 if (is_error) {
[10:59:38.549]                   sessionInformation <- function() {
[10:59:38.549]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.549]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.549]                       search = base::search(), system = base::Sys.info())
[10:59:38.549]                   }
[10:59:38.549]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.549]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.549]                     cond$call), session = sessionInformation(), 
[10:59:38.549]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.549]                   signalCondition(cond)
[10:59:38.549]                 }
[10:59:38.549]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.549]                 "immediateCondition"))) {
[10:59:38.549]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.549]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.549]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.549]                   if (TRUE && !signal) {
[10:59:38.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.549]                     {
[10:59:38.549]                       inherits <- base::inherits
[10:59:38.549]                       invokeRestart <- base::invokeRestart
[10:59:38.549]                       is.null <- base::is.null
[10:59:38.549]                       muffled <- FALSE
[10:59:38.549]                       if (inherits(cond, "message")) {
[10:59:38.549]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.549]                         if (muffled) 
[10:59:38.549]                           invokeRestart("muffleMessage")
[10:59:38.549]                       }
[10:59:38.549]                       else if (inherits(cond, "warning")) {
[10:59:38.549]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.549]                         if (muffled) 
[10:59:38.549]                           invokeRestart("muffleWarning")
[10:59:38.549]                       }
[10:59:38.549]                       else if (inherits(cond, "condition")) {
[10:59:38.549]                         if (!is.null(pattern)) {
[10:59:38.549]                           computeRestarts <- base::computeRestarts
[10:59:38.549]                           grepl <- base::grepl
[10:59:38.549]                           restarts <- computeRestarts(cond)
[10:59:38.549]                           for (restart in restarts) {
[10:59:38.549]                             name <- restart$name
[10:59:38.549]                             if (is.null(name)) 
[10:59:38.549]                               next
[10:59:38.549]                             if (!grepl(pattern, name)) 
[10:59:38.549]                               next
[10:59:38.549]                             invokeRestart(restart)
[10:59:38.549]                             muffled <- TRUE
[10:59:38.549]                             break
[10:59:38.549]                           }
[10:59:38.549]                         }
[10:59:38.549]                       }
[10:59:38.549]                       invisible(muffled)
[10:59:38.549]                     }
[10:59:38.549]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.549]                   }
[10:59:38.549]                 }
[10:59:38.549]                 else {
[10:59:38.549]                   if (TRUE) {
[10:59:38.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.549]                     {
[10:59:38.549]                       inherits <- base::inherits
[10:59:38.549]                       invokeRestart <- base::invokeRestart
[10:59:38.549]                       is.null <- base::is.null
[10:59:38.549]                       muffled <- FALSE
[10:59:38.549]                       if (inherits(cond, "message")) {
[10:59:38.549]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.549]                         if (muffled) 
[10:59:38.549]                           invokeRestart("muffleMessage")
[10:59:38.549]                       }
[10:59:38.549]                       else if (inherits(cond, "warning")) {
[10:59:38.549]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.549]                         if (muffled) 
[10:59:38.549]                           invokeRestart("muffleWarning")
[10:59:38.549]                       }
[10:59:38.549]                       else if (inherits(cond, "condition")) {
[10:59:38.549]                         if (!is.null(pattern)) {
[10:59:38.549]                           computeRestarts <- base::computeRestarts
[10:59:38.549]                           grepl <- base::grepl
[10:59:38.549]                           restarts <- computeRestarts(cond)
[10:59:38.549]                           for (restart in restarts) {
[10:59:38.549]                             name <- restart$name
[10:59:38.549]                             if (is.null(name)) 
[10:59:38.549]                               next
[10:59:38.549]                             if (!grepl(pattern, name)) 
[10:59:38.549]                               next
[10:59:38.549]                             invokeRestart(restart)
[10:59:38.549]                             muffled <- TRUE
[10:59:38.549]                             break
[10:59:38.549]                           }
[10:59:38.549]                         }
[10:59:38.549]                       }
[10:59:38.549]                       invisible(muffled)
[10:59:38.549]                     }
[10:59:38.549]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.549]                   }
[10:59:38.549]                 }
[10:59:38.549]             }
[10:59:38.549]         }))
[10:59:38.549]     }, error = function(ex) {
[10:59:38.549]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.549]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.549]                 ...future.rng), started = ...future.startTime, 
[10:59:38.549]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.549]             version = "1.8"), class = "FutureResult")
[10:59:38.549]     }, finally = {
[10:59:38.549]         if (!identical(...future.workdir, getwd())) 
[10:59:38.549]             setwd(...future.workdir)
[10:59:38.549]         {
[10:59:38.549]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.549]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.549]             }
[10:59:38.549]             base::options(...future.oldOptions)
[10:59:38.549]             if (.Platform$OS.type == "windows") {
[10:59:38.549]                 old_names <- names(...future.oldEnvVars)
[10:59:38.549]                 envs <- base::Sys.getenv()
[10:59:38.549]                 names <- names(envs)
[10:59:38.549]                 common <- intersect(names, old_names)
[10:59:38.549]                 added <- setdiff(names, old_names)
[10:59:38.549]                 removed <- setdiff(old_names, names)
[10:59:38.549]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.549]                   envs[common]]
[10:59:38.549]                 NAMES <- toupper(changed)
[10:59:38.549]                 args <- list()
[10:59:38.549]                 for (kk in seq_along(NAMES)) {
[10:59:38.549]                   name <- changed[[kk]]
[10:59:38.549]                   NAME <- NAMES[[kk]]
[10:59:38.549]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.549]                     next
[10:59:38.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.549]                 }
[10:59:38.549]                 NAMES <- toupper(added)
[10:59:38.549]                 for (kk in seq_along(NAMES)) {
[10:59:38.549]                   name <- added[[kk]]
[10:59:38.549]                   NAME <- NAMES[[kk]]
[10:59:38.549]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.549]                     next
[10:59:38.549]                   args[[name]] <- ""
[10:59:38.549]                 }
[10:59:38.549]                 NAMES <- toupper(removed)
[10:59:38.549]                 for (kk in seq_along(NAMES)) {
[10:59:38.549]                   name <- removed[[kk]]
[10:59:38.549]                   NAME <- NAMES[[kk]]
[10:59:38.549]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.549]                     next
[10:59:38.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.549]                 }
[10:59:38.549]                 if (length(args) > 0) 
[10:59:38.549]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.549]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.549]             }
[10:59:38.549]             else {
[10:59:38.549]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.549]             }
[10:59:38.549]             {
[10:59:38.549]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.549]                   0L) {
[10:59:38.549]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.549]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.549]                   base::options(opts)
[10:59:38.549]                 }
[10:59:38.549]                 {
[10:59:38.549]                   {
[10:59:38.549]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.549]                     NULL
[10:59:38.549]                   }
[10:59:38.549]                   options(future.plan = NULL)
[10:59:38.549]                   if (is.na(NA_character_)) 
[10:59:38.549]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.549]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.549]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.549]                     .init = FALSE)
[10:59:38.549]                 }
[10:59:38.549]             }
[10:59:38.549]         }
[10:59:38.549]     })
[10:59:38.549]     if (TRUE) {
[10:59:38.549]         base::sink(type = "output", split = FALSE)
[10:59:38.549]         if (TRUE) {
[10:59:38.549]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.549]         }
[10:59:38.549]         else {
[10:59:38.549]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.549]         }
[10:59:38.549]         base::close(...future.stdout)
[10:59:38.549]         ...future.stdout <- NULL
[10:59:38.549]     }
[10:59:38.549]     ...future.result$conditions <- ...future.conditions
[10:59:38.549]     ...future.result$finished <- base::Sys.time()
[10:59:38.549]     ...future.result
[10:59:38.549] }
[10:59:38.552] assign_globals() ...
[10:59:38.552] List of 5
[10:59:38.552]  $ ...future.FUN            :function (...)  
[10:59:38.552]  $ future.call.arguments    : list()
[10:59:38.552]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.552]  $ ...future.elements_ii    :List of 3
[10:59:38.552]   ..$ : int 0
[10:59:38.552]   ..$ : int 0
[10:59:38.552]   ..$ : int 0
[10:59:38.552]  $ ...future.seeds_ii       :List of 3
[10:59:38.552]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:59:38.552]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:59:38.552]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:59:38.552]  $ ...future.globals.maxSize: NULL
[10:59:38.552]  - attr(*, "where")=List of 5
[10:59:38.552]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.552]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.552]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.552]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.552]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.552]  - attr(*, "resolved")= logi FALSE
[10:59:38.552]  - attr(*, "total_size")= num 7184
[10:59:38.552]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.552]  - attr(*, "already-done")= logi TRUE
[10:59:38.566] - reassign environment for ‘...future.FUN’
[10:59:38.566] - copied ‘...future.FUN’ to environment
[10:59:38.566] - copied ‘future.call.arguments’ to environment
[10:59:38.566] - copied ‘...future.elements_ii’ to environment
[10:59:38.566] - copied ‘...future.seeds_ii’ to environment
[10:59:38.567] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.567] assign_globals() ... done
[10:59:38.567] requestCore(): workers = 2
[10:59:38.569] MulticoreFuture started
[10:59:38.569] - Launch lazy future ... done
[10:59:38.570] run() for ‘MulticoreFuture’ ... done
[10:59:38.570] Created future:
[10:59:38.570] plan(): Setting new future strategy stack:
[10:59:38.571] List of future strategies:
[10:59:38.571] 1. sequential:
[10:59:38.571]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.571]    - tweaked: FALSE
[10:59:38.571]    - call: NULL
[10:59:38.572] plan(): nbrOfWorkers() = 1
[10:59:38.574] plan(): Setting new future strategy stack:
[10:59:38.574] List of future strategies:
[10:59:38.574] 1. multicore:
[10:59:38.574]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.574]    - tweaked: FALSE
[10:59:38.574]    - call: plan(strategy)
[10:59:38.577] plan(): nbrOfWorkers() = 2
[10:59:38.570] MulticoreFuture:
[10:59:38.570] Label: ‘future_replicate-2’
[10:59:38.570] Expression:
[10:59:38.570] {
[10:59:38.570]     do.call(function(...) {
[10:59:38.570]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.570]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.570]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.570]             on.exit(options(oopts), add = TRUE)
[10:59:38.570]         }
[10:59:38.570]         {
[10:59:38.570]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.570]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.570]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.570]                   envir = globalenv(), inherits = FALSE)
[10:59:38.570]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.570]             })
[10:59:38.570]         }
[10:59:38.570]     }, args = future.call.arguments)
[10:59:38.570] }
[10:59:38.570] Lazy evaluation: FALSE
[10:59:38.570] Asynchronous evaluation: TRUE
[10:59:38.570] Local evaluation: TRUE
[10:59:38.570] Environment: R_GlobalEnv
[10:59:38.570] Capture standard output: TRUE
[10:59:38.570] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.570] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:38.570] Packages: <none>
[10:59:38.570] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.570] Resolved: TRUE
[10:59:38.570] Value: <not collected>
[10:59:38.570] Conditions captured: <none>
[10:59:38.570] Early signaling: FALSE
[10:59:38.570] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.570] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.579] Chunk #2 of 2 ... DONE
[10:59:38.579] Launching 2 futures (chunks) ... DONE
[10:59:38.579] Resolving 2 futures (chunks) ...
[10:59:38.579] resolve() on list ...
[10:59:38.579]  recursive: 0
[10:59:38.579]  length: 2
[10:59:38.580] 
[10:59:38.580] Future #1
[10:59:38.580] result() for MulticoreFuture ...
[10:59:38.581] result() for MulticoreFuture ...
[10:59:38.581] result() for MulticoreFuture ... done
[10:59:38.581] result() for MulticoreFuture ... done
[10:59:38.582] result() for MulticoreFuture ...
[10:59:38.582] result() for MulticoreFuture ... done
[10:59:38.582] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:59:38.582] - nx: 2
[10:59:38.582] - relay: TRUE
[10:59:38.582] - stdout: TRUE
[10:59:38.582] - signal: TRUE
[10:59:38.583] - resignal: FALSE
[10:59:38.583] - force: TRUE
[10:59:38.583] - relayed: [n=2] FALSE, FALSE
[10:59:38.583] - queued futures: [n=2] FALSE, FALSE
[10:59:38.583]  - until=1
[10:59:38.583]  - relaying element #1
[10:59:38.583] result() for MulticoreFuture ...
[10:59:38.584] result() for MulticoreFuture ... done
[10:59:38.584] result() for MulticoreFuture ...
[10:59:38.584] result() for MulticoreFuture ... done
[10:59:38.584] result() for MulticoreFuture ...
[10:59:38.584] result() for MulticoreFuture ... done
[10:59:38.584] result() for MulticoreFuture ...
[10:59:38.585] result() for MulticoreFuture ... done
[10:59:38.585] - relayed: [n=2] TRUE, FALSE
[10:59:38.585] - queued futures: [n=2] TRUE, FALSE
[10:59:38.585] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:59:38.585]  length: 1 (resolved future 1)
[10:59:38.586] Future #2
[10:59:38.586] result() for MulticoreFuture ...
[10:59:38.586] result() for MulticoreFuture ...
[10:59:38.587] result() for MulticoreFuture ... done
[10:59:38.587] result() for MulticoreFuture ... done
[10:59:38.587] result() for MulticoreFuture ...
[10:59:38.587] result() for MulticoreFuture ... done
[10:59:38.587] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:59:38.587] - nx: 2
[10:59:38.587] - relay: TRUE
[10:59:38.588] - stdout: TRUE
[10:59:38.588] - signal: TRUE
[10:59:38.588] - resignal: FALSE
[10:59:38.588] - force: TRUE
[10:59:38.588] - relayed: [n=2] TRUE, FALSE
[10:59:38.588] - queued futures: [n=2] TRUE, FALSE
[10:59:38.588]  - until=2
[10:59:38.588]  - relaying element #2
[10:59:38.588] result() for MulticoreFuture ...
[10:59:38.588] result() for MulticoreFuture ... done
[10:59:38.589] result() for MulticoreFuture ...
[10:59:38.589] result() for MulticoreFuture ... done
[10:59:38.589] result() for MulticoreFuture ...
[10:59:38.589] result() for MulticoreFuture ... done
[10:59:38.589] result() for MulticoreFuture ...
[10:59:38.589] result() for MulticoreFuture ... done
[10:59:38.589] - relayed: [n=2] TRUE, TRUE
[10:59:38.589] - queued futures: [n=2] TRUE, TRUE
[10:59:38.589] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:59:38.590]  length: 0 (resolved future 2)
[10:59:38.590] Relaying remaining futures
[10:59:38.590] signalConditionsASAP(NULL, pos=0) ...
[10:59:38.590] - nx: 2
[10:59:38.590] - relay: TRUE
[10:59:38.590] - stdout: TRUE
[10:59:38.590] - signal: TRUE
[10:59:38.590] - resignal: FALSE
[10:59:38.590] - force: TRUE
[10:59:38.591] - relayed: [n=2] TRUE, TRUE
[10:59:38.591] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:38.591] - relayed: [n=2] TRUE, TRUE
[10:59:38.591] - queued futures: [n=2] TRUE, TRUE
[10:59:38.591] signalConditionsASAP(NULL, pos=0) ... done
[10:59:38.591] resolve() on list ... DONE
[10:59:38.591] result() for MulticoreFuture ...
[10:59:38.591] result() for MulticoreFuture ... done
[10:59:38.592] result() for MulticoreFuture ...
[10:59:38.592] result() for MulticoreFuture ... done
[10:59:38.592] result() for MulticoreFuture ...
[10:59:38.592] result() for MulticoreFuture ... done
[10:59:38.592] result() for MulticoreFuture ...
[10:59:38.592] result() for MulticoreFuture ... done
[10:59:38.592]  - Number of value chunks collected: 2
[10:59:38.592] Resolving 2 futures (chunks) ... DONE
[10:59:38.592] Reducing values from 2 chunks ...
[10:59:38.593]  - Number of values collected after concatenation: 5
[10:59:38.593]  - Number of values expected: 5
[10:59:38.593] Reducing values from 2 chunks ... DONE
[10:59:38.593] future_lapply() ... DONE
- example(replicate) ...
[10:59:38.593] future_lapply() ...
[10:59:38.594] Generating random seeds ...
[10:59:38.594] Generating random seed streams for 5 elements ...
[10:59:38.594] Generating random seed streams for 5 elements ... DONE
[10:59:38.594] Generating random seeds ... DONE
[10:59:38.594] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:38.597] Number of chunks: 2
[10:59:38.597] getGlobalsAndPackagesXApply() ...
[10:59:38.597]  - future.globals: TRUE
[10:59:38.597] getGlobalsAndPackages() ...
[10:59:38.597] Searching for globals...
[10:59:38.600] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:59:38.600] Searching for globals ... DONE
[10:59:38.600] Resolving globals: FALSE
[10:59:38.600] The total size of the 3 globals is 617 bytes (617 bytes)
[10:59:38.601] The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[10:59:38.601] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:59:38.601] 
[10:59:38.601] getGlobalsAndPackages() ... DONE
[10:59:38.601]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:59:38.601]  - needed namespaces: [n=0] 
[10:59:38.601] Finding globals ... DONE
[10:59:38.602]  - use_args: TRUE
[10:59:38.602]  - Getting '...' globals ...
[10:59:38.602] resolve() on list ...
[10:59:38.602]  recursive: 0
[10:59:38.602]  length: 1
[10:59:38.602]  elements: ‘...’
[10:59:38.603]  length: 0 (resolved future 1)
[10:59:38.603] resolve() on list ... DONE
[10:59:38.603]    - '...' content: [n=0] 
[10:59:38.603] List of 1
[10:59:38.603]  $ ...: list()
[10:59:38.603]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.603]  - attr(*, "where")=List of 1
[10:59:38.603]   ..$ ...:<environment: 0x56262e758040> 
[10:59:38.603]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.603]  - attr(*, "resolved")= logi TRUE
[10:59:38.603]  - attr(*, "total_size")= num NA
[10:59:38.607]  - Getting '...' globals ... DONE
[10:59:38.608] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:59:38.608] List of 4
[10:59:38.608]  $ ...future.FUN:function (...)  
[10:59:38.608]  $ foo          :function (x = 1, y = 2)  
[10:59:38.608]  $ x            : num 3
[10:59:38.608]  $ ...          : list()
[10:59:38.608]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.608]  - attr(*, "where")=List of 4
[10:59:38.608]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:38.608]   ..$ foo          :<environment: R_EmptyEnv> 
[10:59:38.608]   ..$ x            :<environment: R_EmptyEnv> 
[10:59:38.608]   ..$ ...          :<environment: 0x56262e758040> 
[10:59:38.608]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.608]  - attr(*, "resolved")= logi FALSE
[10:59:38.608]  - attr(*, "total_size")= num 7967
[10:59:38.611] Packages to be attached in all futures: [n=0] 
[10:59:38.612] getGlobalsAndPackagesXApply() ... DONE
[10:59:38.612] Number of futures (= number of chunks): 2
[10:59:38.612] Launching 2 futures (chunks) ...
[10:59:38.612] Chunk #1 of 2 ...
[10:59:38.612]  - Finding globals in 'X' for chunk #1 ...
[10:59:38.612] getGlobalsAndPackages() ...
[10:59:38.612] Searching for globals...
[10:59:38.613] 
[10:59:38.613] Searching for globals ... DONE
[10:59:38.613] - globals: [0] <none>
[10:59:38.613] getGlobalsAndPackages() ... DONE
[10:59:38.613]    + additional globals found: [n=0] 
[10:59:38.613]    + additional namespaces needed: [n=0] 
[10:59:38.613]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:38.613]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.613]  - seeds: [2] <seeds>
[10:59:38.613]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.613] getGlobalsAndPackages() ...
[10:59:38.614] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.614] Resolving globals: FALSE
[10:59:38.614] Tweak future expression to call with '...' arguments ...
[10:59:38.614] {
[10:59:38.614]     do.call(function(...) {
[10:59:38.614]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.614]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.614]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.614]             on.exit(options(oopts), add = TRUE)
[10:59:38.614]         }
[10:59:38.614]         {
[10:59:38.614]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.614]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.614]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.614]                   envir = globalenv(), inherits = FALSE)
[10:59:38.614]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.614]             })
[10:59:38.614]         }
[10:59:38.614]     }, args = future.call.arguments)
[10:59:38.614] }
[10:59:38.614] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.614] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.615] 
[10:59:38.615] getGlobalsAndPackages() ... DONE
[10:59:38.615] run() for ‘Future’ ...
[10:59:38.615] - state: ‘created’
[10:59:38.615] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.617] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.617] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.617]   - Field: ‘label’
[10:59:38.617]   - Field: ‘local’
[10:59:38.617]   - Field: ‘owner’
[10:59:38.617]   - Field: ‘envir’
[10:59:38.617]   - Field: ‘workers’
[10:59:38.617]   - Field: ‘packages’
[10:59:38.617]   - Field: ‘gc’
[10:59:38.618]   - Field: ‘job’
[10:59:38.618]   - Field: ‘conditions’
[10:59:38.618]   - Field: ‘expr’
[10:59:38.618]   - Field: ‘uuid’
[10:59:38.618]   - Field: ‘seed’
[10:59:38.618]   - Field: ‘version’
[10:59:38.618]   - Field: ‘result’
[10:59:38.618]   - Field: ‘asynchronous’
[10:59:38.618]   - Field: ‘calls’
[10:59:38.618]   - Field: ‘globals’
[10:59:38.618]   - Field: ‘stdout’
[10:59:38.618]   - Field: ‘earlySignal’
[10:59:38.619]   - Field: ‘lazy’
[10:59:38.619]   - Field: ‘state’
[10:59:38.619] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.619] - Launch lazy future ...
[10:59:38.619] Packages needed by the future expression (n = 0): <none>
[10:59:38.619] Packages needed by future strategies (n = 0): <none>
[10:59:38.620] {
[10:59:38.620]     {
[10:59:38.620]         {
[10:59:38.620]             ...future.startTime <- base::Sys.time()
[10:59:38.620]             {
[10:59:38.620]                 {
[10:59:38.620]                   {
[10:59:38.620]                     {
[10:59:38.620]                       base::local({
[10:59:38.620]                         has_future <- base::requireNamespace("future", 
[10:59:38.620]                           quietly = TRUE)
[10:59:38.620]                         if (has_future) {
[10:59:38.620]                           ns <- base::getNamespace("future")
[10:59:38.620]                           version <- ns[[".package"]][["version"]]
[10:59:38.620]                           if (is.null(version)) 
[10:59:38.620]                             version <- utils::packageVersion("future")
[10:59:38.620]                         }
[10:59:38.620]                         else {
[10:59:38.620]                           version <- NULL
[10:59:38.620]                         }
[10:59:38.620]                         if (!has_future || version < "1.8.0") {
[10:59:38.620]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.620]                             "", base::R.version$version.string), 
[10:59:38.620]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.620]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.620]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.620]                               "release", "version")], collapse = " "), 
[10:59:38.620]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.620]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.620]                             info)
[10:59:38.620]                           info <- base::paste(info, collapse = "; ")
[10:59:38.620]                           if (!has_future) {
[10:59:38.620]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.620]                               info)
[10:59:38.620]                           }
[10:59:38.620]                           else {
[10:59:38.620]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.620]                               info, version)
[10:59:38.620]                           }
[10:59:38.620]                           base::stop(msg)
[10:59:38.620]                         }
[10:59:38.620]                       })
[10:59:38.620]                     }
[10:59:38.620]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.620]                     base::options(mc.cores = 1L)
[10:59:38.620]                   }
[10:59:38.620]                   ...future.strategy.old <- future::plan("list")
[10:59:38.620]                   options(future.plan = NULL)
[10:59:38.620]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.620]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.620]                 }
[10:59:38.620]                 ...future.workdir <- getwd()
[10:59:38.620]             }
[10:59:38.620]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.620]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.620]         }
[10:59:38.620]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.620]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.620]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.620]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.620]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.620]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.620]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.620]             base::names(...future.oldOptions))
[10:59:38.620]     }
[10:59:38.620]     if (FALSE) {
[10:59:38.620]     }
[10:59:38.620]     else {
[10:59:38.620]         if (TRUE) {
[10:59:38.620]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.620]                 open = "w")
[10:59:38.620]         }
[10:59:38.620]         else {
[10:59:38.620]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.620]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.620]         }
[10:59:38.620]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.620]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.620]             base::sink(type = "output", split = FALSE)
[10:59:38.620]             base::close(...future.stdout)
[10:59:38.620]         }, add = TRUE)
[10:59:38.620]     }
[10:59:38.620]     ...future.frame <- base::sys.nframe()
[10:59:38.620]     ...future.conditions <- base::list()
[10:59:38.620]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.620]     if (FALSE) {
[10:59:38.620]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.620]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.620]     }
[10:59:38.620]     ...future.result <- base::tryCatch({
[10:59:38.620]         base::withCallingHandlers({
[10:59:38.620]             ...future.value <- base::withVisible(base::local({
[10:59:38.620]                 withCallingHandlers({
[10:59:38.620]                   {
[10:59:38.620]                     do.call(function(...) {
[10:59:38.620]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.620]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.620]                         ...future.globals.maxSize)) {
[10:59:38.620]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.620]                         on.exit(options(oopts), add = TRUE)
[10:59:38.620]                       }
[10:59:38.620]                       {
[10:59:38.620]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.620]                           FUN = function(jj) {
[10:59:38.620]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.620]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.620]                               envir = globalenv(), inherits = FALSE)
[10:59:38.620]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.620]                           })
[10:59:38.620]                       }
[10:59:38.620]                     }, args = future.call.arguments)
[10:59:38.620]                   }
[10:59:38.620]                 }, immediateCondition = function(cond) {
[10:59:38.620]                   save_rds <- function (object, pathname, ...) 
[10:59:38.620]                   {
[10:59:38.620]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.620]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.620]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.620]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.620]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.620]                         fi_tmp[["mtime"]])
[10:59:38.620]                     }
[10:59:38.620]                     tryCatch({
[10:59:38.620]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.620]                     }, error = function(ex) {
[10:59:38.620]                       msg <- conditionMessage(ex)
[10:59:38.620]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.620]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.620]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.620]                         fi_tmp[["mtime"]], msg)
[10:59:38.620]                       ex$message <- msg
[10:59:38.620]                       stop(ex)
[10:59:38.620]                     })
[10:59:38.620]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.620]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.620]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.620]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.620]                       fi <- file.info(pathname)
[10:59:38.620]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.620]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.620]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.620]                         fi[["size"]], fi[["mtime"]])
[10:59:38.620]                       stop(msg)
[10:59:38.620]                     }
[10:59:38.620]                     invisible(pathname)
[10:59:38.620]                   }
[10:59:38.620]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.620]                     rootPath = tempdir()) 
[10:59:38.620]                   {
[10:59:38.620]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.620]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.620]                       tmpdir = path, fileext = ".rds")
[10:59:38.620]                     save_rds(obj, file)
[10:59:38.620]                   }
[10:59:38.620]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.620]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.620]                   {
[10:59:38.620]                     inherits <- base::inherits
[10:59:38.620]                     invokeRestart <- base::invokeRestart
[10:59:38.620]                     is.null <- base::is.null
[10:59:38.620]                     muffled <- FALSE
[10:59:38.620]                     if (inherits(cond, "message")) {
[10:59:38.620]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.620]                       if (muffled) 
[10:59:38.620]                         invokeRestart("muffleMessage")
[10:59:38.620]                     }
[10:59:38.620]                     else if (inherits(cond, "warning")) {
[10:59:38.620]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.620]                       if (muffled) 
[10:59:38.620]                         invokeRestart("muffleWarning")
[10:59:38.620]                     }
[10:59:38.620]                     else if (inherits(cond, "condition")) {
[10:59:38.620]                       if (!is.null(pattern)) {
[10:59:38.620]                         computeRestarts <- base::computeRestarts
[10:59:38.620]                         grepl <- base::grepl
[10:59:38.620]                         restarts <- computeRestarts(cond)
[10:59:38.620]                         for (restart in restarts) {
[10:59:38.620]                           name <- restart$name
[10:59:38.620]                           if (is.null(name)) 
[10:59:38.620]                             next
[10:59:38.620]                           if (!grepl(pattern, name)) 
[10:59:38.620]                             next
[10:59:38.620]                           invokeRestart(restart)
[10:59:38.620]                           muffled <- TRUE
[10:59:38.620]                           break
[10:59:38.620]                         }
[10:59:38.620]                       }
[10:59:38.620]                     }
[10:59:38.620]                     invisible(muffled)
[10:59:38.620]                   }
[10:59:38.620]                   muffleCondition(cond)
[10:59:38.620]                 })
[10:59:38.620]             }))
[10:59:38.620]             future::FutureResult(value = ...future.value$value, 
[10:59:38.620]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.620]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.620]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.620]                     ...future.globalenv.names))
[10:59:38.620]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.620]         }, condition = base::local({
[10:59:38.620]             c <- base::c
[10:59:38.620]             inherits <- base::inherits
[10:59:38.620]             invokeRestart <- base::invokeRestart
[10:59:38.620]             length <- base::length
[10:59:38.620]             list <- base::list
[10:59:38.620]             seq.int <- base::seq.int
[10:59:38.620]             signalCondition <- base::signalCondition
[10:59:38.620]             sys.calls <- base::sys.calls
[10:59:38.620]             `[[` <- base::`[[`
[10:59:38.620]             `+` <- base::`+`
[10:59:38.620]             `<<-` <- base::`<<-`
[10:59:38.620]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.620]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.620]                   3L)]
[10:59:38.620]             }
[10:59:38.620]             function(cond) {
[10:59:38.620]                 is_error <- inherits(cond, "error")
[10:59:38.620]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.620]                   NULL)
[10:59:38.620]                 if (is_error) {
[10:59:38.620]                   sessionInformation <- function() {
[10:59:38.620]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.620]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.620]                       search = base::search(), system = base::Sys.info())
[10:59:38.620]                   }
[10:59:38.620]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.620]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.620]                     cond$call), session = sessionInformation(), 
[10:59:38.620]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.620]                   signalCondition(cond)
[10:59:38.620]                 }
[10:59:38.620]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.620]                 "immediateCondition"))) {
[10:59:38.620]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.620]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.620]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.620]                   if (TRUE && !signal) {
[10:59:38.620]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.620]                     {
[10:59:38.620]                       inherits <- base::inherits
[10:59:38.620]                       invokeRestart <- base::invokeRestart
[10:59:38.620]                       is.null <- base::is.null
[10:59:38.620]                       muffled <- FALSE
[10:59:38.620]                       if (inherits(cond, "message")) {
[10:59:38.620]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.620]                         if (muffled) 
[10:59:38.620]                           invokeRestart("muffleMessage")
[10:59:38.620]                       }
[10:59:38.620]                       else if (inherits(cond, "warning")) {
[10:59:38.620]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.620]                         if (muffled) 
[10:59:38.620]                           invokeRestart("muffleWarning")
[10:59:38.620]                       }
[10:59:38.620]                       else if (inherits(cond, "condition")) {
[10:59:38.620]                         if (!is.null(pattern)) {
[10:59:38.620]                           computeRestarts <- base::computeRestarts
[10:59:38.620]                           grepl <- base::grepl
[10:59:38.620]                           restarts <- computeRestarts(cond)
[10:59:38.620]                           for (restart in restarts) {
[10:59:38.620]                             name <- restart$name
[10:59:38.620]                             if (is.null(name)) 
[10:59:38.620]                               next
[10:59:38.620]                             if (!grepl(pattern, name)) 
[10:59:38.620]                               next
[10:59:38.620]                             invokeRestart(restart)
[10:59:38.620]                             muffled <- TRUE
[10:59:38.620]                             break
[10:59:38.620]                           }
[10:59:38.620]                         }
[10:59:38.620]                       }
[10:59:38.620]                       invisible(muffled)
[10:59:38.620]                     }
[10:59:38.620]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.620]                   }
[10:59:38.620]                 }
[10:59:38.620]                 else {
[10:59:38.620]                   if (TRUE) {
[10:59:38.620]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.620]                     {
[10:59:38.620]                       inherits <- base::inherits
[10:59:38.620]                       invokeRestart <- base::invokeRestart
[10:59:38.620]                       is.null <- base::is.null
[10:59:38.620]                       muffled <- FALSE
[10:59:38.620]                       if (inherits(cond, "message")) {
[10:59:38.620]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.620]                         if (muffled) 
[10:59:38.620]                           invokeRestart("muffleMessage")
[10:59:38.620]                       }
[10:59:38.620]                       else if (inherits(cond, "warning")) {
[10:59:38.620]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.620]                         if (muffled) 
[10:59:38.620]                           invokeRestart("muffleWarning")
[10:59:38.620]                       }
[10:59:38.620]                       else if (inherits(cond, "condition")) {
[10:59:38.620]                         if (!is.null(pattern)) {
[10:59:38.620]                           computeRestarts <- base::computeRestarts
[10:59:38.620]                           grepl <- base::grepl
[10:59:38.620]                           restarts <- computeRestarts(cond)
[10:59:38.620]                           for (restart in restarts) {
[10:59:38.620]                             name <- restart$name
[10:59:38.620]                             if (is.null(name)) 
[10:59:38.620]                               next
[10:59:38.620]                             if (!grepl(pattern, name)) 
[10:59:38.620]                               next
[10:59:38.620]                             invokeRestart(restart)
[10:59:38.620]                             muffled <- TRUE
[10:59:38.620]                             break
[10:59:38.620]                           }
[10:59:38.620]                         }
[10:59:38.620]                       }
[10:59:38.620]                       invisible(muffled)
[10:59:38.620]                     }
[10:59:38.620]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.620]                   }
[10:59:38.620]                 }
[10:59:38.620]             }
[10:59:38.620]         }))
[10:59:38.620]     }, error = function(ex) {
[10:59:38.620]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.620]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.620]                 ...future.rng), started = ...future.startTime, 
[10:59:38.620]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.620]             version = "1.8"), class = "FutureResult")
[10:59:38.620]     }, finally = {
[10:59:38.620]         if (!identical(...future.workdir, getwd())) 
[10:59:38.620]             setwd(...future.workdir)
[10:59:38.620]         {
[10:59:38.620]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.620]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.620]             }
[10:59:38.620]             base::options(...future.oldOptions)
[10:59:38.620]             if (.Platform$OS.type == "windows") {
[10:59:38.620]                 old_names <- names(...future.oldEnvVars)
[10:59:38.620]                 envs <- base::Sys.getenv()
[10:59:38.620]                 names <- names(envs)
[10:59:38.620]                 common <- intersect(names, old_names)
[10:59:38.620]                 added <- setdiff(names, old_names)
[10:59:38.620]                 removed <- setdiff(old_names, names)
[10:59:38.620]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.620]                   envs[common]]
[10:59:38.620]                 NAMES <- toupper(changed)
[10:59:38.620]                 args <- list()
[10:59:38.620]                 for (kk in seq_along(NAMES)) {
[10:59:38.620]                   name <- changed[[kk]]
[10:59:38.620]                   NAME <- NAMES[[kk]]
[10:59:38.620]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.620]                     next
[10:59:38.620]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.620]                 }
[10:59:38.620]                 NAMES <- toupper(added)
[10:59:38.620]                 for (kk in seq_along(NAMES)) {
[10:59:38.620]                   name <- added[[kk]]
[10:59:38.620]                   NAME <- NAMES[[kk]]
[10:59:38.620]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.620]                     next
[10:59:38.620]                   args[[name]] <- ""
[10:59:38.620]                 }
[10:59:38.620]                 NAMES <- toupper(removed)
[10:59:38.620]                 for (kk in seq_along(NAMES)) {
[10:59:38.620]                   name <- removed[[kk]]
[10:59:38.620]                   NAME <- NAMES[[kk]]
[10:59:38.620]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.620]                     next
[10:59:38.620]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.620]                 }
[10:59:38.620]                 if (length(args) > 0) 
[10:59:38.620]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.620]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.620]             }
[10:59:38.620]             else {
[10:59:38.620]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.620]             }
[10:59:38.620]             {
[10:59:38.620]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.620]                   0L) {
[10:59:38.620]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.620]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.620]                   base::options(opts)
[10:59:38.620]                 }
[10:59:38.620]                 {
[10:59:38.620]                   {
[10:59:38.620]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.620]                     NULL
[10:59:38.620]                   }
[10:59:38.620]                   options(future.plan = NULL)
[10:59:38.620]                   if (is.na(NA_character_)) 
[10:59:38.620]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.620]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.620]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.620]                     .init = FALSE)
[10:59:38.620]                 }
[10:59:38.620]             }
[10:59:38.620]         }
[10:59:38.620]     })
[10:59:38.620]     if (TRUE) {
[10:59:38.620]         base::sink(type = "output", split = FALSE)
[10:59:38.620]         if (TRUE) {
[10:59:38.620]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.620]         }
[10:59:38.620]         else {
[10:59:38.620]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.620]         }
[10:59:38.620]         base::close(...future.stdout)
[10:59:38.620]         ...future.stdout <- NULL
[10:59:38.620]     }
[10:59:38.620]     ...future.result$conditions <- ...future.conditions
[10:59:38.620]     ...future.result$finished <- base::Sys.time()
[10:59:38.620]     ...future.result
[10:59:38.620] }
[10:59:38.622] assign_globals() ...
[10:59:38.622] List of 7
[10:59:38.622]  $ ...future.FUN            :function (...)  
[10:59:38.622]  $ foo                      :function (x = 1, y = 2)  
[10:59:38.622]  $ x                        : num 3
[10:59:38.622]  $ future.call.arguments    : list()
[10:59:38.622]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.622]  $ ...future.elements_ii    :List of 2
[10:59:38.622]   ..$ : int 0
[10:59:38.622]   ..$ : int 0
[10:59:38.622]  $ ...future.seeds_ii       :List of 2
[10:59:38.622]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[10:59:38.622]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[10:59:38.622]  $ ...future.globals.maxSize: NULL
[10:59:38.622]  - attr(*, "where")=List of 7
[10:59:38.622]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.622]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:59:38.622]   ..$ x                        :<environment: R_EmptyEnv> 
[10:59:38.622]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.622]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.622]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.622]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.622]  - attr(*, "resolved")= logi FALSE
[10:59:38.622]  - attr(*, "total_size")= num 7967
[10:59:38.622]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.622]  - attr(*, "already-done")= logi TRUE
[10:59:38.629] - reassign environment for ‘...future.FUN’
[10:59:38.629] - copied ‘...future.FUN’ to environment
[10:59:38.629] - reassign environment for ‘foo’
[10:59:38.629] - copied ‘foo’ to environment
[10:59:38.629] - copied ‘x’ to environment
[10:59:38.629] - copied ‘future.call.arguments’ to environment
[10:59:38.629] - copied ‘...future.elements_ii’ to environment
[10:59:38.630] - copied ‘...future.seeds_ii’ to environment
[10:59:38.630] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.630] assign_globals() ... done
[10:59:38.631] requestCore(): workers = 2
[10:59:38.633] MulticoreFuture started
[10:59:38.633] - Launch lazy future ... done
[10:59:38.634] plan(): Setting new future strategy stack:
[10:59:38.634] run() for ‘MulticoreFuture’ ... done
[10:59:38.634] Created future:
[10:59:38.634] List of future strategies:
[10:59:38.634] 1. sequential:
[10:59:38.634]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.634]    - tweaked: FALSE
[10:59:38.634]    - call: NULL
[10:59:38.636] plan(): nbrOfWorkers() = 1
[10:59:38.639] plan(): Setting new future strategy stack:
[10:59:38.639] List of future strategies:
[10:59:38.639] 1. multicore:
[10:59:38.639]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.639]    - tweaked: FALSE
[10:59:38.639]    - call: plan(strategy)
[10:59:38.642] plan(): nbrOfWorkers() = 2
[10:59:38.635] MulticoreFuture:
[10:59:38.635] Label: ‘future_replicate-1’
[10:59:38.635] Expression:
[10:59:38.635] {
[10:59:38.635]     do.call(function(...) {
[10:59:38.635]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.635]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.635]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.635]             on.exit(options(oopts), add = TRUE)
[10:59:38.635]         }
[10:59:38.635]         {
[10:59:38.635]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.635]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.635]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.635]                   envir = globalenv(), inherits = FALSE)
[10:59:38.635]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.635]             })
[10:59:38.635]         }
[10:59:38.635]     }, args = future.call.arguments)
[10:59:38.635] }
[10:59:38.635] Lazy evaluation: FALSE
[10:59:38.635] Asynchronous evaluation: TRUE
[10:59:38.635] Local evaluation: TRUE
[10:59:38.635] Environment: 0x56262e756a18
[10:59:38.635] Capture standard output: TRUE
[10:59:38.635] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.635] Globals: 7 objects totaling 899 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, ...)
[10:59:38.635] Packages: <none>
[10:59:38.635] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.635] Resolved: TRUE
[10:59:38.635] Value: <not collected>
[10:59:38.635] Conditions captured: <none>
[10:59:38.635] Early signaling: FALSE
[10:59:38.635] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.635] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.643] Chunk #1 of 2 ... DONE
[10:59:38.643] Chunk #2 of 2 ...
[10:59:38.643]  - Finding globals in 'X' for chunk #2 ...
[10:59:38.644] getGlobalsAndPackages() ...
[10:59:38.644] Searching for globals...
[10:59:38.644] 
[10:59:38.644] Searching for globals ... DONE
[10:59:38.644] - globals: [0] <none>
[10:59:38.644] getGlobalsAndPackages() ... DONE
[10:59:38.645]    + additional globals found: [n=0] 
[10:59:38.645]    + additional namespaces needed: [n=0] 
[10:59:38.645]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:38.645]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:38.645]  - seeds: [3] <seeds>
[10:59:38.645]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.645] getGlobalsAndPackages() ...
[10:59:38.646] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.646] Resolving globals: FALSE
[10:59:38.646] Tweak future expression to call with '...' arguments ...
[10:59:38.646] {
[10:59:38.646]     do.call(function(...) {
[10:59:38.646]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.646]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.646]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.646]             on.exit(options(oopts), add = TRUE)
[10:59:38.646]         }
[10:59:38.646]         {
[10:59:38.646]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.646]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.646]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.646]                   envir = globalenv(), inherits = FALSE)
[10:59:38.646]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.646]             })
[10:59:38.646]         }
[10:59:38.646]     }, args = future.call.arguments)
[10:59:38.646] }
[10:59:38.647] Tweak future expression to call with '...' arguments ... DONE
[10:59:38.647] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:38.648] 
[10:59:38.648] getGlobalsAndPackages() ... DONE
[10:59:38.648] run() for ‘Future’ ...
[10:59:38.649] - state: ‘created’
[10:59:38.649] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:59:38.651] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.651] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:59:38.652]   - Field: ‘label’
[10:59:38.652]   - Field: ‘local’
[10:59:38.652]   - Field: ‘owner’
[10:59:38.652]   - Field: ‘envir’
[10:59:38.652]   - Field: ‘workers’
[10:59:38.652]   - Field: ‘packages’
[10:59:38.653]   - Field: ‘gc’
[10:59:38.653]   - Field: ‘job’
[10:59:38.653]   - Field: ‘conditions’
[10:59:38.653]   - Field: ‘expr’
[10:59:38.653]   - Field: ‘uuid’
[10:59:38.653]   - Field: ‘seed’
[10:59:38.653]   - Field: ‘version’
[10:59:38.654]   - Field: ‘result’
[10:59:38.654]   - Field: ‘asynchronous’
[10:59:38.654]   - Field: ‘calls’
[10:59:38.654]   - Field: ‘globals’
[10:59:38.654]   - Field: ‘stdout’
[10:59:38.654]   - Field: ‘earlySignal’
[10:59:38.654]   - Field: ‘lazy’
[10:59:38.655]   - Field: ‘state’
[10:59:38.655] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:59:38.655] - Launch lazy future ...
[10:59:38.655] Packages needed by the future expression (n = 0): <none>
[10:59:38.655] Packages needed by future strategies (n = 0): <none>
[10:59:38.656] {
[10:59:38.656]     {
[10:59:38.656]         {
[10:59:38.656]             ...future.startTime <- base::Sys.time()
[10:59:38.656]             {
[10:59:38.656]                 {
[10:59:38.656]                   {
[10:59:38.656]                     {
[10:59:38.656]                       base::local({
[10:59:38.656]                         has_future <- base::requireNamespace("future", 
[10:59:38.656]                           quietly = TRUE)
[10:59:38.656]                         if (has_future) {
[10:59:38.656]                           ns <- base::getNamespace("future")
[10:59:38.656]                           version <- ns[[".package"]][["version"]]
[10:59:38.656]                           if (is.null(version)) 
[10:59:38.656]                             version <- utils::packageVersion("future")
[10:59:38.656]                         }
[10:59:38.656]                         else {
[10:59:38.656]                           version <- NULL
[10:59:38.656]                         }
[10:59:38.656]                         if (!has_future || version < "1.8.0") {
[10:59:38.656]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:38.656]                             "", base::R.version$version.string), 
[10:59:38.656]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:38.656]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:38.656]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:38.656]                               "release", "version")], collapse = " "), 
[10:59:38.656]                             hostname = base::Sys.info()[["nodename"]])
[10:59:38.656]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:38.656]                             info)
[10:59:38.656]                           info <- base::paste(info, collapse = "; ")
[10:59:38.656]                           if (!has_future) {
[10:59:38.656]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:38.656]                               info)
[10:59:38.656]                           }
[10:59:38.656]                           else {
[10:59:38.656]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:38.656]                               info, version)
[10:59:38.656]                           }
[10:59:38.656]                           base::stop(msg)
[10:59:38.656]                         }
[10:59:38.656]                       })
[10:59:38.656]                     }
[10:59:38.656]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:38.656]                     base::options(mc.cores = 1L)
[10:59:38.656]                   }
[10:59:38.656]                   ...future.strategy.old <- future::plan("list")
[10:59:38.656]                   options(future.plan = NULL)
[10:59:38.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:38.656]                 }
[10:59:38.656]                 ...future.workdir <- getwd()
[10:59:38.656]             }
[10:59:38.656]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:38.656]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:38.656]         }
[10:59:38.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:38.656]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:38.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:38.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:38.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:38.656]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:38.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:38.656]             base::names(...future.oldOptions))
[10:59:38.656]     }
[10:59:38.656]     if (FALSE) {
[10:59:38.656]     }
[10:59:38.656]     else {
[10:59:38.656]         if (TRUE) {
[10:59:38.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:38.656]                 open = "w")
[10:59:38.656]         }
[10:59:38.656]         else {
[10:59:38.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:38.656]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:38.656]         }
[10:59:38.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:38.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:38.656]             base::sink(type = "output", split = FALSE)
[10:59:38.656]             base::close(...future.stdout)
[10:59:38.656]         }, add = TRUE)
[10:59:38.656]     }
[10:59:38.656]     ...future.frame <- base::sys.nframe()
[10:59:38.656]     ...future.conditions <- base::list()
[10:59:38.656]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:38.656]     if (FALSE) {
[10:59:38.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:38.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:38.656]     }
[10:59:38.656]     ...future.result <- base::tryCatch({
[10:59:38.656]         base::withCallingHandlers({
[10:59:38.656]             ...future.value <- base::withVisible(base::local({
[10:59:38.656]                 withCallingHandlers({
[10:59:38.656]                   {
[10:59:38.656]                     do.call(function(...) {
[10:59:38.656]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.656]                       if (!identical(...future.globals.maxSize.org, 
[10:59:38.656]                         ...future.globals.maxSize)) {
[10:59:38.656]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.656]                         on.exit(options(oopts), add = TRUE)
[10:59:38.656]                       }
[10:59:38.656]                       {
[10:59:38.656]                         lapply(seq_along(...future.elements_ii), 
[10:59:38.656]                           FUN = function(jj) {
[10:59:38.656]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.656]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.656]                               envir = globalenv(), inherits = FALSE)
[10:59:38.656]                             ...future.FUN(...future.X_jj, ...)
[10:59:38.656]                           })
[10:59:38.656]                       }
[10:59:38.656]                     }, args = future.call.arguments)
[10:59:38.656]                   }
[10:59:38.656]                 }, immediateCondition = function(cond) {
[10:59:38.656]                   save_rds <- function (object, pathname, ...) 
[10:59:38.656]                   {
[10:59:38.656]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:59:38.656]                     if (file_test("-f", pathname_tmp)) {
[10:59:38.656]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.656]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:59:38.656]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.656]                         fi_tmp[["mtime"]])
[10:59:38.656]                     }
[10:59:38.656]                     tryCatch({
[10:59:38.656]                       saveRDS(object, file = pathname_tmp, ...)
[10:59:38.656]                     }, error = function(ex) {
[10:59:38.656]                       msg <- conditionMessage(ex)
[10:59:38.656]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.656]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:59:38.656]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.656]                         fi_tmp[["mtime"]], msg)
[10:59:38.656]                       ex$message <- msg
[10:59:38.656]                       stop(ex)
[10:59:38.656]                     })
[10:59:38.656]                     stopifnot(file_test("-f", pathname_tmp))
[10:59:38.656]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:59:38.656]                     if (!res || file_test("-f", pathname_tmp)) {
[10:59:38.656]                       fi_tmp <- file.info(pathname_tmp)
[10:59:38.656]                       fi <- file.info(pathname)
[10:59:38.656]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:59:38.656]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:59:38.656]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:59:38.656]                         fi[["size"]], fi[["mtime"]])
[10:59:38.656]                       stop(msg)
[10:59:38.656]                     }
[10:59:38.656]                     invisible(pathname)
[10:59:38.656]                   }
[10:59:38.656]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:59:38.656]                     rootPath = tempdir()) 
[10:59:38.656]                   {
[10:59:38.656]                     obj <- list(time = Sys.time(), condition = cond)
[10:59:38.656]                     file <- tempfile(pattern = class(cond)[1], 
[10:59:38.656]                       tmpdir = path, fileext = ".rds")
[10:59:38.656]                     save_rds(obj, file)
[10:59:38.656]                   }
[10:59:38.656]                   saveImmediateCondition(cond, path = "/tmp/Rtmpn4fsRP/.future/immediateConditions")
[10:59:38.656]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.656]                   {
[10:59:38.656]                     inherits <- base::inherits
[10:59:38.656]                     invokeRestart <- base::invokeRestart
[10:59:38.656]                     is.null <- base::is.null
[10:59:38.656]                     muffled <- FALSE
[10:59:38.656]                     if (inherits(cond, "message")) {
[10:59:38.656]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:38.656]                       if (muffled) 
[10:59:38.656]                         invokeRestart("muffleMessage")
[10:59:38.656]                     }
[10:59:38.656]                     else if (inherits(cond, "warning")) {
[10:59:38.656]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:38.656]                       if (muffled) 
[10:59:38.656]                         invokeRestart("muffleWarning")
[10:59:38.656]                     }
[10:59:38.656]                     else if (inherits(cond, "condition")) {
[10:59:38.656]                       if (!is.null(pattern)) {
[10:59:38.656]                         computeRestarts <- base::computeRestarts
[10:59:38.656]                         grepl <- base::grepl
[10:59:38.656]                         restarts <- computeRestarts(cond)
[10:59:38.656]                         for (restart in restarts) {
[10:59:38.656]                           name <- restart$name
[10:59:38.656]                           if (is.null(name)) 
[10:59:38.656]                             next
[10:59:38.656]                           if (!grepl(pattern, name)) 
[10:59:38.656]                             next
[10:59:38.656]                           invokeRestart(restart)
[10:59:38.656]                           muffled <- TRUE
[10:59:38.656]                           break
[10:59:38.656]                         }
[10:59:38.656]                       }
[10:59:38.656]                     }
[10:59:38.656]                     invisible(muffled)
[10:59:38.656]                   }
[10:59:38.656]                   muffleCondition(cond)
[10:59:38.656]                 })
[10:59:38.656]             }))
[10:59:38.656]             future::FutureResult(value = ...future.value$value, 
[10:59:38.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.656]                   ...future.rng), globalenv = if (FALSE) 
[10:59:38.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:38.656]                     ...future.globalenv.names))
[10:59:38.656]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:38.656]         }, condition = base::local({
[10:59:38.656]             c <- base::c
[10:59:38.656]             inherits <- base::inherits
[10:59:38.656]             invokeRestart <- base::invokeRestart
[10:59:38.656]             length <- base::length
[10:59:38.656]             list <- base::list
[10:59:38.656]             seq.int <- base::seq.int
[10:59:38.656]             signalCondition <- base::signalCondition
[10:59:38.656]             sys.calls <- base::sys.calls
[10:59:38.656]             `[[` <- base::`[[`
[10:59:38.656]             `+` <- base::`+`
[10:59:38.656]             `<<-` <- base::`<<-`
[10:59:38.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:38.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:38.656]                   3L)]
[10:59:38.656]             }
[10:59:38.656]             function(cond) {
[10:59:38.656]                 is_error <- inherits(cond, "error")
[10:59:38.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:38.656]                   NULL)
[10:59:38.656]                 if (is_error) {
[10:59:38.656]                   sessionInformation <- function() {
[10:59:38.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:38.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:38.656]                       search = base::search(), system = base::Sys.info())
[10:59:38.656]                   }
[10:59:38.656]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:38.656]                     cond$call), session = sessionInformation(), 
[10:59:38.656]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:38.656]                   signalCondition(cond)
[10:59:38.656]                 }
[10:59:38.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:38.656]                 "immediateCondition"))) {
[10:59:38.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:38.656]                   ...future.conditions[[length(...future.conditions) + 
[10:59:38.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:38.656]                   if (TRUE && !signal) {
[10:59:38.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.656]                     {
[10:59:38.656]                       inherits <- base::inherits
[10:59:38.656]                       invokeRestart <- base::invokeRestart
[10:59:38.656]                       is.null <- base::is.null
[10:59:38.656]                       muffled <- FALSE
[10:59:38.656]                       if (inherits(cond, "message")) {
[10:59:38.656]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.656]                         if (muffled) 
[10:59:38.656]                           invokeRestart("muffleMessage")
[10:59:38.656]                       }
[10:59:38.656]                       else if (inherits(cond, "warning")) {
[10:59:38.656]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.656]                         if (muffled) 
[10:59:38.656]                           invokeRestart("muffleWarning")
[10:59:38.656]                       }
[10:59:38.656]                       else if (inherits(cond, "condition")) {
[10:59:38.656]                         if (!is.null(pattern)) {
[10:59:38.656]                           computeRestarts <- base::computeRestarts
[10:59:38.656]                           grepl <- base::grepl
[10:59:38.656]                           restarts <- computeRestarts(cond)
[10:59:38.656]                           for (restart in restarts) {
[10:59:38.656]                             name <- restart$name
[10:59:38.656]                             if (is.null(name)) 
[10:59:38.656]                               next
[10:59:38.656]                             if (!grepl(pattern, name)) 
[10:59:38.656]                               next
[10:59:38.656]                             invokeRestart(restart)
[10:59:38.656]                             muffled <- TRUE
[10:59:38.656]                             break
[10:59:38.656]                           }
[10:59:38.656]                         }
[10:59:38.656]                       }
[10:59:38.656]                       invisible(muffled)
[10:59:38.656]                     }
[10:59:38.656]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.656]                   }
[10:59:38.656]                 }
[10:59:38.656]                 else {
[10:59:38.656]                   if (TRUE) {
[10:59:38.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:38.656]                     {
[10:59:38.656]                       inherits <- base::inherits
[10:59:38.656]                       invokeRestart <- base::invokeRestart
[10:59:38.656]                       is.null <- base::is.null
[10:59:38.656]                       muffled <- FALSE
[10:59:38.656]                       if (inherits(cond, "message")) {
[10:59:38.656]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:38.656]                         if (muffled) 
[10:59:38.656]                           invokeRestart("muffleMessage")
[10:59:38.656]                       }
[10:59:38.656]                       else if (inherits(cond, "warning")) {
[10:59:38.656]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:38.656]                         if (muffled) 
[10:59:38.656]                           invokeRestart("muffleWarning")
[10:59:38.656]                       }
[10:59:38.656]                       else if (inherits(cond, "condition")) {
[10:59:38.656]                         if (!is.null(pattern)) {
[10:59:38.656]                           computeRestarts <- base::computeRestarts
[10:59:38.656]                           grepl <- base::grepl
[10:59:38.656]                           restarts <- computeRestarts(cond)
[10:59:38.656]                           for (restart in restarts) {
[10:59:38.656]                             name <- restart$name
[10:59:38.656]                             if (is.null(name)) 
[10:59:38.656]                               next
[10:59:38.656]                             if (!grepl(pattern, name)) 
[10:59:38.656]                               next
[10:59:38.656]                             invokeRestart(restart)
[10:59:38.656]                             muffled <- TRUE
[10:59:38.656]                             break
[10:59:38.656]                           }
[10:59:38.656]                         }
[10:59:38.656]                       }
[10:59:38.656]                       invisible(muffled)
[10:59:38.656]                     }
[10:59:38.656]                     muffleCondition(cond, pattern = "^muffle")
[10:59:38.656]                   }
[10:59:38.656]                 }
[10:59:38.656]             }
[10:59:38.656]         }))
[10:59:38.656]     }, error = function(ex) {
[10:59:38.656]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:38.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:38.656]                 ...future.rng), started = ...future.startTime, 
[10:59:38.656]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:38.656]             version = "1.8"), class = "FutureResult")
[10:59:38.656]     }, finally = {
[10:59:38.656]         if (!identical(...future.workdir, getwd())) 
[10:59:38.656]             setwd(...future.workdir)
[10:59:38.656]         {
[10:59:38.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:38.656]                 ...future.oldOptions$nwarnings <- NULL
[10:59:38.656]             }
[10:59:38.656]             base::options(...future.oldOptions)
[10:59:38.656]             if (.Platform$OS.type == "windows") {
[10:59:38.656]                 old_names <- names(...future.oldEnvVars)
[10:59:38.656]                 envs <- base::Sys.getenv()
[10:59:38.656]                 names <- names(envs)
[10:59:38.656]                 common <- intersect(names, old_names)
[10:59:38.656]                 added <- setdiff(names, old_names)
[10:59:38.656]                 removed <- setdiff(old_names, names)
[10:59:38.656]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:38.656]                   envs[common]]
[10:59:38.656]                 NAMES <- toupper(changed)
[10:59:38.656]                 args <- list()
[10:59:38.656]                 for (kk in seq_along(NAMES)) {
[10:59:38.656]                   name <- changed[[kk]]
[10:59:38.656]                   NAME <- NAMES[[kk]]
[10:59:38.656]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.656]                     next
[10:59:38.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.656]                 }
[10:59:38.656]                 NAMES <- toupper(added)
[10:59:38.656]                 for (kk in seq_along(NAMES)) {
[10:59:38.656]                   name <- added[[kk]]
[10:59:38.656]                   NAME <- NAMES[[kk]]
[10:59:38.656]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.656]                     next
[10:59:38.656]                   args[[name]] <- ""
[10:59:38.656]                 }
[10:59:38.656]                 NAMES <- toupper(removed)
[10:59:38.656]                 for (kk in seq_along(NAMES)) {
[10:59:38.656]                   name <- removed[[kk]]
[10:59:38.656]                   NAME <- NAMES[[kk]]
[10:59:38.656]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:38.656]                     next
[10:59:38.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:38.656]                 }
[10:59:38.656]                 if (length(args) > 0) 
[10:59:38.656]                   base::do.call(base::Sys.setenv, args = args)
[10:59:38.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:38.656]             }
[10:59:38.656]             else {
[10:59:38.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:38.656]             }
[10:59:38.656]             {
[10:59:38.656]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:38.656]                   0L) {
[10:59:38.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:38.656]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:38.656]                   base::options(opts)
[10:59:38.656]                 }
[10:59:38.656]                 {
[10:59:38.656]                   {
[10:59:38.656]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:38.656]                     NULL
[10:59:38.656]                   }
[10:59:38.656]                   options(future.plan = NULL)
[10:59:38.656]                   if (is.na(NA_character_)) 
[10:59:38.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:38.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:38.656]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:38.656]                     .init = FALSE)
[10:59:38.656]                 }
[10:59:38.656]             }
[10:59:38.656]         }
[10:59:38.656]     })
[10:59:38.656]     if (TRUE) {
[10:59:38.656]         base::sink(type = "output", split = FALSE)
[10:59:38.656]         if (TRUE) {
[10:59:38.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:38.656]         }
[10:59:38.656]         else {
[10:59:38.656]             ...future.result["stdout"] <- base::list(NULL)
[10:59:38.656]         }
[10:59:38.656]         base::close(...future.stdout)
[10:59:38.656]         ...future.stdout <- NULL
[10:59:38.656]     }
[10:59:38.656]     ...future.result$conditions <- ...future.conditions
[10:59:38.656]     ...future.result$finished <- base::Sys.time()
[10:59:38.656]     ...future.result
[10:59:38.656] }
[10:59:38.659] assign_globals() ...
[10:59:38.660] List of 7
[10:59:38.660]  $ ...future.FUN            :function (...)  
[10:59:38.660]  $ foo                      :function (x = 1, y = 2)  
[10:59:38.660]  $ x                        : num 3
[10:59:38.660]  $ future.call.arguments    : list()
[10:59:38.660]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:38.660]  $ ...future.elements_ii    :List of 3
[10:59:38.660]   ..$ : int 0
[10:59:38.660]   ..$ : int 0
[10:59:38.660]   ..$ : int 0
[10:59:38.660]  $ ...future.seeds_ii       :List of 3
[10:59:38.660]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[10:59:38.660]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[10:59:38.660]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[10:59:38.660]  $ ...future.globals.maxSize: NULL
[10:59:38.660]  - attr(*, "where")=List of 7
[10:59:38.660]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:59:38.660]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:59:38.660]   ..$ x                        :<environment: R_EmptyEnv> 
[10:59:38.660]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:59:38.660]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:59:38.660]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:59:38.660]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:59:38.660]  - attr(*, "resolved")= logi FALSE
[10:59:38.660]  - attr(*, "total_size")= num 7967
[10:59:38.660]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:38.660]  - attr(*, "already-done")= logi TRUE
[10:59:38.670] - reassign environment for ‘...future.FUN’
[10:59:38.670] - copied ‘...future.FUN’ to environment
[10:59:38.670] - reassign environment for ‘foo’
[10:59:38.670] - copied ‘foo’ to environment
[10:59:38.670] - copied ‘x’ to environment
[10:59:38.670] - copied ‘future.call.arguments’ to environment
[10:59:38.670] - copied ‘...future.elements_ii’ to environment
[10:59:38.670] - copied ‘...future.seeds_ii’ to environment
[10:59:38.671] - copied ‘...future.globals.maxSize’ to environment
[10:59:38.671] assign_globals() ... done
[10:59:38.671] requestCore(): workers = 2
[10:59:38.673] MulticoreFuture started
[10:59:38.673] - Launch lazy future ... done
[10:59:38.674] run() for ‘MulticoreFuture’ ... done
[10:59:38.674] Created future:
[10:59:38.674] plan(): Setting new future strategy stack:
[10:59:38.674] List of future strategies:
[10:59:38.674] 1. sequential:
[10:59:38.674]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.674]    - tweaked: FALSE
[10:59:38.674]    - call: NULL
[10:59:38.675] plan(): nbrOfWorkers() = 1
[10:59:38.678] plan(): Setting new future strategy stack:
[10:59:38.678] List of future strategies:
[10:59:38.678] 1. multicore:
[10:59:38.678]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:59:38.678]    - tweaked: FALSE
[10:59:38.678]    - call: plan(strategy)
[10:59:38.681] plan(): nbrOfWorkers() = 2
[10:59:38.674] MulticoreFuture:
[10:59:38.674] Label: ‘future_replicate-2’
[10:59:38.674] Expression:
[10:59:38.674] {
[10:59:38.674]     do.call(function(...) {
[10:59:38.674]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:38.674]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:38.674]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:38.674]             on.exit(options(oopts), add = TRUE)
[10:59:38.674]         }
[10:59:38.674]         {
[10:59:38.674]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:38.674]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:38.674]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:38.674]                   envir = globalenv(), inherits = FALSE)
[10:59:38.674]                 ...future.FUN(...future.X_jj, ...)
[10:59:38.674]             })
[10:59:38.674]         }
[10:59:38.674]     }, args = future.call.arguments)
[10:59:38.674] }
[10:59:38.674] Lazy evaluation: FALSE
[10:59:38.674] Asynchronous evaluation: TRUE
[10:59:38.674] Local evaluation: TRUE
[10:59:38.674] Environment: 0x56262e756a18
[10:59:38.674] Capture standard output: TRUE
[10:59:38.674] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:38.674] Globals: 7 objects totaling 947 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, ...)
[10:59:38.674] Packages: <none>
[10:59:38.674] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:38.674] Resolved: TRUE
[10:59:38.674] Value: <not collected>
[10:59:38.674] Conditions captured: <none>
[10:59:38.674] Early signaling: FALSE
[10:59:38.674] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:38.674] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:38.682] Chunk #2 of 2 ... DONE
[10:59:38.682] Launching 2 futures (chunks) ... DONE
[10:59:38.682] Resolving 2 futures (chunks) ...
[10:59:38.682] resolve() on list ...
[10:59:38.682]  recursive: 0
[10:59:38.683]  length: 2
[10:59:38.683] 
[10:59:38.683] Future #1
[10:59:38.683] result() for MulticoreFuture ...
[10:59:38.684] result() for MulticoreFuture ...
[10:59:38.684] result() for MulticoreFuture ... done
[10:59:38.684] result() for MulticoreFuture ... done
[10:59:38.684] result() for MulticoreFuture ...
[10:59:38.685] result() for MulticoreFuture ... done
[10:59:38.685] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:59:38.685] - nx: 2
[10:59:38.685] - relay: TRUE
[10:59:38.685] - stdout: TRUE
[10:59:38.689] - signal: TRUE
[10:59:38.689] - resignal: FALSE
[10:59:38.689] - force: TRUE
[10:59:38.690] - relayed: [n=2] FALSE, FALSE
[10:59:38.690] - queued futures: [n=2] FALSE, FALSE
[10:59:38.690]  - until=1
[10:59:38.691]  - relaying element #1
[10:59:38.691] result() for MulticoreFuture ...
[10:59:38.691] result() for MulticoreFuture ... done
[10:59:38.692] result() for MulticoreFuture ...
[10:59:38.692] result() for MulticoreFuture ... done
[10:59:38.692] result() for MulticoreFuture ...
[10:59:38.693] result() for MulticoreFuture ... done
[10:59:38.693] result() for MulticoreFuture ...
[10:59:38.693] result() for MulticoreFuture ... done
[10:59:38.693] - relayed: [n=2] TRUE, FALSE
[10:59:38.694] - queued futures: [n=2] TRUE, FALSE
[10:59:38.694] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:59:38.694]  length: 1 (resolved future 1)
[10:59:38.694] Future #2
[10:59:38.694] result() for MulticoreFuture ...
[10:59:38.695] result() for MulticoreFuture ...
[10:59:38.695] result() for MulticoreFuture ... done
[10:59:38.695] result() for MulticoreFuture ... done
[10:59:38.695] result() for MulticoreFuture ...
[10:59:38.696] result() for MulticoreFuture ... done
[10:59:38.696] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:59:38.696] - nx: 2
[10:59:38.696] - relay: TRUE
[10:59:38.696] - stdout: TRUE
[10:59:38.696] - signal: TRUE
[10:59:38.696] - resignal: FALSE
[10:59:38.696] - force: TRUE
[10:59:38.697] - relayed: [n=2] TRUE, FALSE
[10:59:38.697] - queued futures: [n=2] TRUE, FALSE
[10:59:38.697]  - until=2
[10:59:38.697]  - relaying element #2
[10:59:38.697] result() for MulticoreFuture ...
[10:59:38.697] result() for MulticoreFuture ... done
[10:59:38.697] result() for MulticoreFuture ...
[10:59:38.697] result() for MulticoreFuture ... done
[10:59:38.698] result() for MulticoreFuture ...
[10:59:38.698] result() for MulticoreFuture ... done
[10:59:38.698] result() for MulticoreFuture ...
[10:59:38.698] result() for MulticoreFuture ... done
[10:59:38.698] - relayed: [n=2] TRUE, TRUE
[10:59:38.698] - queued futures: [n=2] TRUE, TRUE
[10:59:38.698] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:59:38.698]  length: 0 (resolved future 2)
[10:59:38.698] Relaying remaining futures
[10:59:38.699] signalConditionsASAP(NULL, pos=0) ...
[10:59:38.699] - nx: 2
[10:59:38.699] - relay: TRUE
[10:59:38.699] - stdout: TRUE
[10:59:38.699] - signal: TRUE
[10:59:38.699] - resignal: FALSE
[10:59:38.699] - force: TRUE
[10:59:38.699] - relayed: [n=2] TRUE, TRUE
[10:59:38.699] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:38.699] - relayed: [n=2] TRUE, TRUE
[10:59:38.700] - queued futures: [n=2] TRUE, TRUE
[10:59:38.700] signalConditionsASAP(NULL, pos=0) ... done
[10:59:38.700] resolve() on list ... DONE
[10:59:38.700] result() for MulticoreFuture ...
[10:59:38.700] result() for MulticoreFuture ... done
[10:59:38.700] result() for MulticoreFuture ...
[10:59:38.700] result() for MulticoreFuture ... done
[10:59:38.700] result() for MulticoreFuture ...
[10:59:38.700] result() for MulticoreFuture ... done
[10:59:38.701] result() for MulticoreFuture ...
[10:59:38.701] result() for MulticoreFuture ... done
[10:59:38.701]  - Number of value chunks collected: 2
[10:59:38.701] Resolving 2 futures (chunks) ... DONE
[10:59:38.701] Reducing values from 2 chunks ...
[10:59:38.701]  - Number of values collected after concatenation: 5
[10:59:38.701]  - Number of values expected: 5
[10:59:38.701] Reducing values from 2 chunks ... DONE
[10:59:38.701] future_lapply() ... DONE
[10:59:38.702] plan(): Setting new future strategy stack:
[10:59:38.702] List of future strategies:
[10:59:38.702] 1. sequential:
[10:59:38.702]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:38.702]    - tweaked: FALSE
[10:59:38.702]    - call: plan(sequential)
[10:59:38.703] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[10:59:38.703] plan(): Setting new future strategy stack:
[10:59:38.703] List of future strategies:
[10:59:38.703] 1. multisession:
[10:59:38.703]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:59:38.703]    - tweaked: FALSE
[10:59:38.703]    - call: plan(strategy)
[10:59:38.703] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:59:38.704] multisession:
[10:59:38.704] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:59:38.704] - tweaked: FALSE
[10:59:38.704] - call: plan(strategy)
[10:59:38.707] getGlobalsAndPackages() ...
[10:59:38.708] Not searching for globals
[10:59:38.708] - globals: [0] <none>
[10:59:38.708] getGlobalsAndPackages() ... DONE
[10:59:39.180] Packages needed by the future expression (n = 0): <none>
[10:59:39.180] Packages needed by future strategies (n = 0): <none>
[10:59:39.181] {
[10:59:39.181]     {
[10:59:39.181]         {
[10:59:39.181]             ...future.startTime <- base::Sys.time()
[10:59:39.181]             {
[10:59:39.181]                 {
[10:59:39.181]                   {
[10:59:39.181]                     {
[10:59:39.181]                       base::local({
[10:59:39.181]                         has_future <- base::requireNamespace("future", 
[10:59:39.181]                           quietly = TRUE)
[10:59:39.181]                         if (has_future) {
[10:59:39.181]                           ns <- base::getNamespace("future")
[10:59:39.181]                           version <- ns[[".package"]][["version"]]
[10:59:39.181]                           if (is.null(version)) 
[10:59:39.181]                             version <- utils::packageVersion("future")
[10:59:39.181]                         }
[10:59:39.181]                         else {
[10:59:39.181]                           version <- NULL
[10:59:39.181]                         }
[10:59:39.181]                         if (!has_future || version < "1.8.0") {
[10:59:39.181]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.181]                             "", base::R.version$version.string), 
[10:59:39.181]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.181]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.181]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.181]                               "release", "version")], collapse = " "), 
[10:59:39.181]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.181]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.181]                             info)
[10:59:39.181]                           info <- base::paste(info, collapse = "; ")
[10:59:39.181]                           if (!has_future) {
[10:59:39.181]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.181]                               info)
[10:59:39.181]                           }
[10:59:39.181]                           else {
[10:59:39.181]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.181]                               info, version)
[10:59:39.181]                           }
[10:59:39.181]                           base::stop(msg)
[10:59:39.181]                         }
[10:59:39.181]                       })
[10:59:39.181]                     }
[10:59:39.181]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.181]                     base::options(mc.cores = 1L)
[10:59:39.181]                   }
[10:59:39.181]                   ...future.strategy.old <- future::plan("list")
[10:59:39.181]                   options(future.plan = NULL)
[10:59:39.181]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.181]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.181]                 }
[10:59:39.181]                 ...future.workdir <- getwd()
[10:59:39.181]             }
[10:59:39.181]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.181]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.181]         }
[10:59:39.181]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.181]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:59:39.181]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.181]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.181]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.181]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.181]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.181]             base::names(...future.oldOptions))
[10:59:39.181]     }
[10:59:39.181]     if (FALSE) {
[10:59:39.181]     }
[10:59:39.181]     else {
[10:59:39.181]         if (TRUE) {
[10:59:39.181]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.181]                 open = "w")
[10:59:39.181]         }
[10:59:39.181]         else {
[10:59:39.181]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.181]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.181]         }
[10:59:39.181]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.181]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.181]             base::sink(type = "output", split = FALSE)
[10:59:39.181]             base::close(...future.stdout)
[10:59:39.181]         }, add = TRUE)
[10:59:39.181]     }
[10:59:39.181]     ...future.frame <- base::sys.nframe()
[10:59:39.181]     ...future.conditions <- base::list()
[10:59:39.181]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.181]     if (FALSE) {
[10:59:39.181]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.181]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.181]     }
[10:59:39.181]     ...future.result <- base::tryCatch({
[10:59:39.181]         base::withCallingHandlers({
[10:59:39.181]             ...future.value <- base::withVisible(base::local({
[10:59:39.181]                 ...future.makeSendCondition <- base::local({
[10:59:39.181]                   sendCondition <- NULL
[10:59:39.181]                   function(frame = 1L) {
[10:59:39.181]                     if (is.function(sendCondition)) 
[10:59:39.181]                       return(sendCondition)
[10:59:39.181]                     ns <- getNamespace("parallel")
[10:59:39.181]                     if (exists("sendData", mode = "function", 
[10:59:39.181]                       envir = ns)) {
[10:59:39.181]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.181]                         envir = ns)
[10:59:39.181]                       envir <- sys.frame(frame)
[10:59:39.181]                       master <- NULL
[10:59:39.181]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.181]                         !identical(envir, emptyenv())) {
[10:59:39.181]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.181]                           inherits = FALSE)) {
[10:59:39.181]                           master <- get("master", mode = "list", 
[10:59:39.181]                             envir = envir, inherits = FALSE)
[10:59:39.181]                           if (inherits(master, c("SOCKnode", 
[10:59:39.181]                             "SOCK0node"))) {
[10:59:39.181]                             sendCondition <<- function(cond) {
[10:59:39.181]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.181]                                 success = TRUE)
[10:59:39.181]                               parallel_sendData(master, data)
[10:59:39.181]                             }
[10:59:39.181]                             return(sendCondition)
[10:59:39.181]                           }
[10:59:39.181]                         }
[10:59:39.181]                         frame <- frame + 1L
[10:59:39.181]                         envir <- sys.frame(frame)
[10:59:39.181]                       }
[10:59:39.181]                     }
[10:59:39.181]                     sendCondition <<- function(cond) NULL
[10:59:39.181]                   }
[10:59:39.181]                 })
[10:59:39.181]                 withCallingHandlers({
[10:59:39.181]                   NA
[10:59:39.181]                 }, immediateCondition = function(cond) {
[10:59:39.181]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.181]                   sendCondition(cond)
[10:59:39.181]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.181]                   {
[10:59:39.181]                     inherits <- base::inherits
[10:59:39.181]                     invokeRestart <- base::invokeRestart
[10:59:39.181]                     is.null <- base::is.null
[10:59:39.181]                     muffled <- FALSE
[10:59:39.181]                     if (inherits(cond, "message")) {
[10:59:39.181]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.181]                       if (muffled) 
[10:59:39.181]                         invokeRestart("muffleMessage")
[10:59:39.181]                     }
[10:59:39.181]                     else if (inherits(cond, "warning")) {
[10:59:39.181]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.181]                       if (muffled) 
[10:59:39.181]                         invokeRestart("muffleWarning")
[10:59:39.181]                     }
[10:59:39.181]                     else if (inherits(cond, "condition")) {
[10:59:39.181]                       if (!is.null(pattern)) {
[10:59:39.181]                         computeRestarts <- base::computeRestarts
[10:59:39.181]                         grepl <- base::grepl
[10:59:39.181]                         restarts <- computeRestarts(cond)
[10:59:39.181]                         for (restart in restarts) {
[10:59:39.181]                           name <- restart$name
[10:59:39.181]                           if (is.null(name)) 
[10:59:39.181]                             next
[10:59:39.181]                           if (!grepl(pattern, name)) 
[10:59:39.181]                             next
[10:59:39.181]                           invokeRestart(restart)
[10:59:39.181]                           muffled <- TRUE
[10:59:39.181]                           break
[10:59:39.181]                         }
[10:59:39.181]                       }
[10:59:39.181]                     }
[10:59:39.181]                     invisible(muffled)
[10:59:39.181]                   }
[10:59:39.181]                   muffleCondition(cond)
[10:59:39.181]                 })
[10:59:39.181]             }))
[10:59:39.181]             future::FutureResult(value = ...future.value$value, 
[10:59:39.181]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.181]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.181]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.181]                     ...future.globalenv.names))
[10:59:39.181]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.181]         }, condition = base::local({
[10:59:39.181]             c <- base::c
[10:59:39.181]             inherits <- base::inherits
[10:59:39.181]             invokeRestart <- base::invokeRestart
[10:59:39.181]             length <- base::length
[10:59:39.181]             list <- base::list
[10:59:39.181]             seq.int <- base::seq.int
[10:59:39.181]             signalCondition <- base::signalCondition
[10:59:39.181]             sys.calls <- base::sys.calls
[10:59:39.181]             `[[` <- base::`[[`
[10:59:39.181]             `+` <- base::`+`
[10:59:39.181]             `<<-` <- base::`<<-`
[10:59:39.181]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.181]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.181]                   3L)]
[10:59:39.181]             }
[10:59:39.181]             function(cond) {
[10:59:39.181]                 is_error <- inherits(cond, "error")
[10:59:39.181]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.181]                   NULL)
[10:59:39.181]                 if (is_error) {
[10:59:39.181]                   sessionInformation <- function() {
[10:59:39.181]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.181]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.181]                       search = base::search(), system = base::Sys.info())
[10:59:39.181]                   }
[10:59:39.181]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.181]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.181]                     cond$call), session = sessionInformation(), 
[10:59:39.181]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.181]                   signalCondition(cond)
[10:59:39.181]                 }
[10:59:39.181]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.181]                 "immediateCondition"))) {
[10:59:39.181]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.181]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.181]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.181]                   if (TRUE && !signal) {
[10:59:39.181]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.181]                     {
[10:59:39.181]                       inherits <- base::inherits
[10:59:39.181]                       invokeRestart <- base::invokeRestart
[10:59:39.181]                       is.null <- base::is.null
[10:59:39.181]                       muffled <- FALSE
[10:59:39.181]                       if (inherits(cond, "message")) {
[10:59:39.181]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.181]                         if (muffled) 
[10:59:39.181]                           invokeRestart("muffleMessage")
[10:59:39.181]                       }
[10:59:39.181]                       else if (inherits(cond, "warning")) {
[10:59:39.181]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.181]                         if (muffled) 
[10:59:39.181]                           invokeRestart("muffleWarning")
[10:59:39.181]                       }
[10:59:39.181]                       else if (inherits(cond, "condition")) {
[10:59:39.181]                         if (!is.null(pattern)) {
[10:59:39.181]                           computeRestarts <- base::computeRestarts
[10:59:39.181]                           grepl <- base::grepl
[10:59:39.181]                           restarts <- computeRestarts(cond)
[10:59:39.181]                           for (restart in restarts) {
[10:59:39.181]                             name <- restart$name
[10:59:39.181]                             if (is.null(name)) 
[10:59:39.181]                               next
[10:59:39.181]                             if (!grepl(pattern, name)) 
[10:59:39.181]                               next
[10:59:39.181]                             invokeRestart(restart)
[10:59:39.181]                             muffled <- TRUE
[10:59:39.181]                             break
[10:59:39.181]                           }
[10:59:39.181]                         }
[10:59:39.181]                       }
[10:59:39.181]                       invisible(muffled)
[10:59:39.181]                     }
[10:59:39.181]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.181]                   }
[10:59:39.181]                 }
[10:59:39.181]                 else {
[10:59:39.181]                   if (TRUE) {
[10:59:39.181]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.181]                     {
[10:59:39.181]                       inherits <- base::inherits
[10:59:39.181]                       invokeRestart <- base::invokeRestart
[10:59:39.181]                       is.null <- base::is.null
[10:59:39.181]                       muffled <- FALSE
[10:59:39.181]                       if (inherits(cond, "message")) {
[10:59:39.181]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.181]                         if (muffled) 
[10:59:39.181]                           invokeRestart("muffleMessage")
[10:59:39.181]                       }
[10:59:39.181]                       else if (inherits(cond, "warning")) {
[10:59:39.181]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.181]                         if (muffled) 
[10:59:39.181]                           invokeRestart("muffleWarning")
[10:59:39.181]                       }
[10:59:39.181]                       else if (inherits(cond, "condition")) {
[10:59:39.181]                         if (!is.null(pattern)) {
[10:59:39.181]                           computeRestarts <- base::computeRestarts
[10:59:39.181]                           grepl <- base::grepl
[10:59:39.181]                           restarts <- computeRestarts(cond)
[10:59:39.181]                           for (restart in restarts) {
[10:59:39.181]                             name <- restart$name
[10:59:39.181]                             if (is.null(name)) 
[10:59:39.181]                               next
[10:59:39.181]                             if (!grepl(pattern, name)) 
[10:59:39.181]                               next
[10:59:39.181]                             invokeRestart(restart)
[10:59:39.181]                             muffled <- TRUE
[10:59:39.181]                             break
[10:59:39.181]                           }
[10:59:39.181]                         }
[10:59:39.181]                       }
[10:59:39.181]                       invisible(muffled)
[10:59:39.181]                     }
[10:59:39.181]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.181]                   }
[10:59:39.181]                 }
[10:59:39.181]             }
[10:59:39.181]         }))
[10:59:39.181]     }, error = function(ex) {
[10:59:39.181]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.181]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.181]                 ...future.rng), started = ...future.startTime, 
[10:59:39.181]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.181]             version = "1.8"), class = "FutureResult")
[10:59:39.181]     }, finally = {
[10:59:39.181]         if (!identical(...future.workdir, getwd())) 
[10:59:39.181]             setwd(...future.workdir)
[10:59:39.181]         {
[10:59:39.181]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.181]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.181]             }
[10:59:39.181]             base::options(...future.oldOptions)
[10:59:39.181]             if (.Platform$OS.type == "windows") {
[10:59:39.181]                 old_names <- names(...future.oldEnvVars)
[10:59:39.181]                 envs <- base::Sys.getenv()
[10:59:39.181]                 names <- names(envs)
[10:59:39.181]                 common <- intersect(names, old_names)
[10:59:39.181]                 added <- setdiff(names, old_names)
[10:59:39.181]                 removed <- setdiff(old_names, names)
[10:59:39.181]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.181]                   envs[common]]
[10:59:39.181]                 NAMES <- toupper(changed)
[10:59:39.181]                 args <- list()
[10:59:39.181]                 for (kk in seq_along(NAMES)) {
[10:59:39.181]                   name <- changed[[kk]]
[10:59:39.181]                   NAME <- NAMES[[kk]]
[10:59:39.181]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.181]                     next
[10:59:39.181]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.181]                 }
[10:59:39.181]                 NAMES <- toupper(added)
[10:59:39.181]                 for (kk in seq_along(NAMES)) {
[10:59:39.181]                   name <- added[[kk]]
[10:59:39.181]                   NAME <- NAMES[[kk]]
[10:59:39.181]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.181]                     next
[10:59:39.181]                   args[[name]] <- ""
[10:59:39.181]                 }
[10:59:39.181]                 NAMES <- toupper(removed)
[10:59:39.181]                 for (kk in seq_along(NAMES)) {
[10:59:39.181]                   name <- removed[[kk]]
[10:59:39.181]                   NAME <- NAMES[[kk]]
[10:59:39.181]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.181]                     next
[10:59:39.181]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.181]                 }
[10:59:39.181]                 if (length(args) > 0) 
[10:59:39.181]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.181]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.181]             }
[10:59:39.181]             else {
[10:59:39.181]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.181]             }
[10:59:39.181]             {
[10:59:39.181]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.181]                   0L) {
[10:59:39.181]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.181]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.181]                   base::options(opts)
[10:59:39.181]                 }
[10:59:39.181]                 {
[10:59:39.181]                   {
[10:59:39.181]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.181]                     NULL
[10:59:39.181]                   }
[10:59:39.181]                   options(future.plan = NULL)
[10:59:39.181]                   if (is.na(NA_character_)) 
[10:59:39.181]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.181]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.181]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.181]                     .init = FALSE)
[10:59:39.181]                 }
[10:59:39.181]             }
[10:59:39.181]         }
[10:59:39.181]     })
[10:59:39.181]     if (TRUE) {
[10:59:39.181]         base::sink(type = "output", split = FALSE)
[10:59:39.181]         if (TRUE) {
[10:59:39.181]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.181]         }
[10:59:39.181]         else {
[10:59:39.181]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.181]         }
[10:59:39.181]         base::close(...future.stdout)
[10:59:39.181]         ...future.stdout <- NULL
[10:59:39.181]     }
[10:59:39.181]     ...future.result$conditions <- ...future.conditions
[10:59:39.181]     ...future.result$finished <- base::Sys.time()
[10:59:39.181]     ...future.result
[10:59:39.181] }
[10:59:39.232] MultisessionFuture started
[10:59:39.232] result() for ClusterFuture ...
[10:59:39.232] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.233] - Validating connection of MultisessionFuture
[10:59:39.262] - received message: FutureResult
[10:59:39.262] - Received FutureResult
[10:59:39.262] - Erased future from FutureRegistry
[10:59:39.262] result() for ClusterFuture ...
[10:59:39.262] - result already collected: FutureResult
[10:59:39.263] result() for ClusterFuture ... done
[10:59:39.263] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.263] result() for ClusterFuture ... done
[10:59:39.263] result() for ClusterFuture ...
[10:59:39.263] - result already collected: FutureResult
[10:59:39.263] result() for ClusterFuture ... done
[10:59:39.263] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:59:39.265] plan(): nbrOfWorkers() = 2
[10:59:39.265] future_lapply() ...
[10:59:39.265] Generating random seeds ...
[10:59:39.266] Generating random seed streams for 5 elements ...
[10:59:39.266] Generating random seed streams for 5 elements ... DONE
[10:59:39.266] Generating random seeds ... DONE
[10:59:39.266] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:39.268] Number of chunks: 2
[10:59:39.268] getGlobalsAndPackagesXApply() ...
[10:59:39.268]  - future.globals: TRUE
[10:59:39.268] getGlobalsAndPackages() ...
[10:59:39.268] Searching for globals...
[10:59:39.269] - globals found: [2] ‘FUN’, ‘sample’
[10:59:39.269] Searching for globals ... DONE
[10:59:39.269] Resolving globals: FALSE
[10:59:39.270] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:39.270] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:39.270] - globals: [1] ‘FUN’
[10:59:39.270] 
[10:59:39.270] getGlobalsAndPackages() ... DONE
[10:59:39.270]  - globals found/used: [n=1] ‘FUN’
[10:59:39.271]  - needed namespaces: [n=0] 
[10:59:39.271] Finding globals ... DONE
[10:59:39.271]  - use_args: TRUE
[10:59:39.271]  - Getting '...' globals ...
[10:59:39.271] resolve() on list ...
[10:59:39.271]  recursive: 0
[10:59:39.271]  length: 1
[10:59:39.271]  elements: ‘...’
[10:59:39.272]  length: 0 (resolved future 1)
[10:59:39.272] resolve() on list ... DONE
[10:59:39.272]    - '...' content: [n=0] 
[10:59:39.272] List of 1
[10:59:39.272]  $ ...: list()
[10:59:39.272]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.272]  - attr(*, "where")=List of 1
[10:59:39.272]   ..$ ...:<environment: 0x56262ea9aa60> 
[10:59:39.272]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.272]  - attr(*, "resolved")= logi TRUE
[10:59:39.272]  - attr(*, "total_size")= num NA
[10:59:39.274]  - Getting '...' globals ... DONE
[10:59:39.274] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:39.274] List of 2
[10:59:39.274]  $ ...future.FUN:function (...)  
[10:59:39.274]  $ ...          : list()
[10:59:39.274]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.274]  - attr(*, "where")=List of 2
[10:59:39.274]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:39.274]   ..$ ...          :<environment: 0x56262ea9aa60> 
[10:59:39.274]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.274]  - attr(*, "resolved")= logi FALSE
[10:59:39.274]  - attr(*, "total_size")= num 7184
[10:59:39.277] Packages to be attached in all futures: [n=0] 
[10:59:39.277] getGlobalsAndPackagesXApply() ... DONE
[10:59:39.277] Number of futures (= number of chunks): 2
[10:59:39.277] Launching 2 futures (chunks) ...
[10:59:39.278] Chunk #1 of 2 ...
[10:59:39.278]  - Finding globals in 'X' for chunk #1 ...
[10:59:39.278] getGlobalsAndPackages() ...
[10:59:39.278] Searching for globals...
[10:59:39.278] 
[10:59:39.278] Searching for globals ... DONE
[10:59:39.278] - globals: [0] <none>
[10:59:39.278] getGlobalsAndPackages() ... DONE
[10:59:39.278]    + additional globals found: [n=0] 
[10:59:39.278]    + additional namespaces needed: [n=0] 
[10:59:39.279]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:39.279]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.279]  - seeds: [2] <seeds>
[10:59:39.279]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.279] getGlobalsAndPackages() ...
[10:59:39.279] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.279] Resolving globals: FALSE
[10:59:39.279] Tweak future expression to call with '...' arguments ...
[10:59:39.279] {
[10:59:39.279]     do.call(function(...) {
[10:59:39.279]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.279]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.279]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.279]             on.exit(options(oopts), add = TRUE)
[10:59:39.279]         }
[10:59:39.279]         {
[10:59:39.279]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.279]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.279]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.279]                   envir = globalenv(), inherits = FALSE)
[10:59:39.279]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.279]             })
[10:59:39.279]         }
[10:59:39.279]     }, args = future.call.arguments)
[10:59:39.279] }
[10:59:39.280] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.280] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.280] 
[10:59:39.280] getGlobalsAndPackages() ... DONE
[10:59:39.280] run() for ‘Future’ ...
[10:59:39.281] - state: ‘created’
[10:59:39.281] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.295] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.295] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.295]   - Field: ‘node’
[10:59:39.295]   - Field: ‘label’
[10:59:39.295]   - Field: ‘local’
[10:59:39.295]   - Field: ‘owner’
[10:59:39.296]   - Field: ‘envir’
[10:59:39.296]   - Field: ‘workers’
[10:59:39.296]   - Field: ‘packages’
[10:59:39.296]   - Field: ‘gc’
[10:59:39.296]   - Field: ‘conditions’
[10:59:39.296]   - Field: ‘persistent’
[10:59:39.296]   - Field: ‘expr’
[10:59:39.296]   - Field: ‘uuid’
[10:59:39.296]   - Field: ‘seed’
[10:59:39.296]   - Field: ‘version’
[10:59:39.297]   - Field: ‘result’
[10:59:39.297]   - Field: ‘asynchronous’
[10:59:39.297]   - Field: ‘calls’
[10:59:39.297]   - Field: ‘globals’
[10:59:39.297]   - Field: ‘stdout’
[10:59:39.297]   - Field: ‘earlySignal’
[10:59:39.297]   - Field: ‘lazy’
[10:59:39.297]   - Field: ‘state’
[10:59:39.297] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.298] - Launch lazy future ...
[10:59:39.298] Packages needed by the future expression (n = 0): <none>
[10:59:39.298] Packages needed by future strategies (n = 0): <none>
[10:59:39.298] {
[10:59:39.298]     {
[10:59:39.298]         {
[10:59:39.298]             ...future.startTime <- base::Sys.time()
[10:59:39.298]             {
[10:59:39.298]                 {
[10:59:39.298]                   {
[10:59:39.298]                     {
[10:59:39.298]                       base::local({
[10:59:39.298]                         has_future <- base::requireNamespace("future", 
[10:59:39.298]                           quietly = TRUE)
[10:59:39.298]                         if (has_future) {
[10:59:39.298]                           ns <- base::getNamespace("future")
[10:59:39.298]                           version <- ns[[".package"]][["version"]]
[10:59:39.298]                           if (is.null(version)) 
[10:59:39.298]                             version <- utils::packageVersion("future")
[10:59:39.298]                         }
[10:59:39.298]                         else {
[10:59:39.298]                           version <- NULL
[10:59:39.298]                         }
[10:59:39.298]                         if (!has_future || version < "1.8.0") {
[10:59:39.298]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.298]                             "", base::R.version$version.string), 
[10:59:39.298]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.298]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.298]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.298]                               "release", "version")], collapse = " "), 
[10:59:39.298]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.298]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.298]                             info)
[10:59:39.298]                           info <- base::paste(info, collapse = "; ")
[10:59:39.298]                           if (!has_future) {
[10:59:39.298]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.298]                               info)
[10:59:39.298]                           }
[10:59:39.298]                           else {
[10:59:39.298]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.298]                               info, version)
[10:59:39.298]                           }
[10:59:39.298]                           base::stop(msg)
[10:59:39.298]                         }
[10:59:39.298]                       })
[10:59:39.298]                     }
[10:59:39.298]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.298]                     base::options(mc.cores = 1L)
[10:59:39.298]                   }
[10:59:39.298]                   ...future.strategy.old <- future::plan("list")
[10:59:39.298]                   options(future.plan = NULL)
[10:59:39.298]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.298]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.298]                 }
[10:59:39.298]                 ...future.workdir <- getwd()
[10:59:39.298]             }
[10:59:39.298]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.298]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.298]         }
[10:59:39.298]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.298]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.298]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.298]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.298]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.298]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.298]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.298]             base::names(...future.oldOptions))
[10:59:39.298]     }
[10:59:39.298]     if (FALSE) {
[10:59:39.298]     }
[10:59:39.298]     else {
[10:59:39.298]         if (TRUE) {
[10:59:39.298]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.298]                 open = "w")
[10:59:39.298]         }
[10:59:39.298]         else {
[10:59:39.298]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.298]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.298]         }
[10:59:39.298]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.298]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.298]             base::sink(type = "output", split = FALSE)
[10:59:39.298]             base::close(...future.stdout)
[10:59:39.298]         }, add = TRUE)
[10:59:39.298]     }
[10:59:39.298]     ...future.frame <- base::sys.nframe()
[10:59:39.298]     ...future.conditions <- base::list()
[10:59:39.298]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.298]     if (FALSE) {
[10:59:39.298]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.298]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.298]     }
[10:59:39.298]     ...future.result <- base::tryCatch({
[10:59:39.298]         base::withCallingHandlers({
[10:59:39.298]             ...future.value <- base::withVisible(base::local({
[10:59:39.298]                 ...future.makeSendCondition <- base::local({
[10:59:39.298]                   sendCondition <- NULL
[10:59:39.298]                   function(frame = 1L) {
[10:59:39.298]                     if (is.function(sendCondition)) 
[10:59:39.298]                       return(sendCondition)
[10:59:39.298]                     ns <- getNamespace("parallel")
[10:59:39.298]                     if (exists("sendData", mode = "function", 
[10:59:39.298]                       envir = ns)) {
[10:59:39.298]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.298]                         envir = ns)
[10:59:39.298]                       envir <- sys.frame(frame)
[10:59:39.298]                       master <- NULL
[10:59:39.298]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.298]                         !identical(envir, emptyenv())) {
[10:59:39.298]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.298]                           inherits = FALSE)) {
[10:59:39.298]                           master <- get("master", mode = "list", 
[10:59:39.298]                             envir = envir, inherits = FALSE)
[10:59:39.298]                           if (inherits(master, c("SOCKnode", 
[10:59:39.298]                             "SOCK0node"))) {
[10:59:39.298]                             sendCondition <<- function(cond) {
[10:59:39.298]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.298]                                 success = TRUE)
[10:59:39.298]                               parallel_sendData(master, data)
[10:59:39.298]                             }
[10:59:39.298]                             return(sendCondition)
[10:59:39.298]                           }
[10:59:39.298]                         }
[10:59:39.298]                         frame <- frame + 1L
[10:59:39.298]                         envir <- sys.frame(frame)
[10:59:39.298]                       }
[10:59:39.298]                     }
[10:59:39.298]                     sendCondition <<- function(cond) NULL
[10:59:39.298]                   }
[10:59:39.298]                 })
[10:59:39.298]                 withCallingHandlers({
[10:59:39.298]                   {
[10:59:39.298]                     do.call(function(...) {
[10:59:39.298]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.298]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.298]                         ...future.globals.maxSize)) {
[10:59:39.298]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.298]                         on.exit(options(oopts), add = TRUE)
[10:59:39.298]                       }
[10:59:39.298]                       {
[10:59:39.298]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.298]                           FUN = function(jj) {
[10:59:39.298]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.298]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.298]                               envir = globalenv(), inherits = FALSE)
[10:59:39.298]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.298]                           })
[10:59:39.298]                       }
[10:59:39.298]                     }, args = future.call.arguments)
[10:59:39.298]                   }
[10:59:39.298]                 }, immediateCondition = function(cond) {
[10:59:39.298]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.298]                   sendCondition(cond)
[10:59:39.298]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.298]                   {
[10:59:39.298]                     inherits <- base::inherits
[10:59:39.298]                     invokeRestart <- base::invokeRestart
[10:59:39.298]                     is.null <- base::is.null
[10:59:39.298]                     muffled <- FALSE
[10:59:39.298]                     if (inherits(cond, "message")) {
[10:59:39.298]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.298]                       if (muffled) 
[10:59:39.298]                         invokeRestart("muffleMessage")
[10:59:39.298]                     }
[10:59:39.298]                     else if (inherits(cond, "warning")) {
[10:59:39.298]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.298]                       if (muffled) 
[10:59:39.298]                         invokeRestart("muffleWarning")
[10:59:39.298]                     }
[10:59:39.298]                     else if (inherits(cond, "condition")) {
[10:59:39.298]                       if (!is.null(pattern)) {
[10:59:39.298]                         computeRestarts <- base::computeRestarts
[10:59:39.298]                         grepl <- base::grepl
[10:59:39.298]                         restarts <- computeRestarts(cond)
[10:59:39.298]                         for (restart in restarts) {
[10:59:39.298]                           name <- restart$name
[10:59:39.298]                           if (is.null(name)) 
[10:59:39.298]                             next
[10:59:39.298]                           if (!grepl(pattern, name)) 
[10:59:39.298]                             next
[10:59:39.298]                           invokeRestart(restart)
[10:59:39.298]                           muffled <- TRUE
[10:59:39.298]                           break
[10:59:39.298]                         }
[10:59:39.298]                       }
[10:59:39.298]                     }
[10:59:39.298]                     invisible(muffled)
[10:59:39.298]                   }
[10:59:39.298]                   muffleCondition(cond)
[10:59:39.298]                 })
[10:59:39.298]             }))
[10:59:39.298]             future::FutureResult(value = ...future.value$value, 
[10:59:39.298]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.298]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.298]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.298]                     ...future.globalenv.names))
[10:59:39.298]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.298]         }, condition = base::local({
[10:59:39.298]             c <- base::c
[10:59:39.298]             inherits <- base::inherits
[10:59:39.298]             invokeRestart <- base::invokeRestart
[10:59:39.298]             length <- base::length
[10:59:39.298]             list <- base::list
[10:59:39.298]             seq.int <- base::seq.int
[10:59:39.298]             signalCondition <- base::signalCondition
[10:59:39.298]             sys.calls <- base::sys.calls
[10:59:39.298]             `[[` <- base::`[[`
[10:59:39.298]             `+` <- base::`+`
[10:59:39.298]             `<<-` <- base::`<<-`
[10:59:39.298]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.298]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.298]                   3L)]
[10:59:39.298]             }
[10:59:39.298]             function(cond) {
[10:59:39.298]                 is_error <- inherits(cond, "error")
[10:59:39.298]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.298]                   NULL)
[10:59:39.298]                 if (is_error) {
[10:59:39.298]                   sessionInformation <- function() {
[10:59:39.298]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.298]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.298]                       search = base::search(), system = base::Sys.info())
[10:59:39.298]                   }
[10:59:39.298]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.298]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.298]                     cond$call), session = sessionInformation(), 
[10:59:39.298]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.298]                   signalCondition(cond)
[10:59:39.298]                 }
[10:59:39.298]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.298]                 "immediateCondition"))) {
[10:59:39.298]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.298]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.298]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.298]                   if (TRUE && !signal) {
[10:59:39.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.298]                     {
[10:59:39.298]                       inherits <- base::inherits
[10:59:39.298]                       invokeRestart <- base::invokeRestart
[10:59:39.298]                       is.null <- base::is.null
[10:59:39.298]                       muffled <- FALSE
[10:59:39.298]                       if (inherits(cond, "message")) {
[10:59:39.298]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.298]                         if (muffled) 
[10:59:39.298]                           invokeRestart("muffleMessage")
[10:59:39.298]                       }
[10:59:39.298]                       else if (inherits(cond, "warning")) {
[10:59:39.298]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.298]                         if (muffled) 
[10:59:39.298]                           invokeRestart("muffleWarning")
[10:59:39.298]                       }
[10:59:39.298]                       else if (inherits(cond, "condition")) {
[10:59:39.298]                         if (!is.null(pattern)) {
[10:59:39.298]                           computeRestarts <- base::computeRestarts
[10:59:39.298]                           grepl <- base::grepl
[10:59:39.298]                           restarts <- computeRestarts(cond)
[10:59:39.298]                           for (restart in restarts) {
[10:59:39.298]                             name <- restart$name
[10:59:39.298]                             if (is.null(name)) 
[10:59:39.298]                               next
[10:59:39.298]                             if (!grepl(pattern, name)) 
[10:59:39.298]                               next
[10:59:39.298]                             invokeRestart(restart)
[10:59:39.298]                             muffled <- TRUE
[10:59:39.298]                             break
[10:59:39.298]                           }
[10:59:39.298]                         }
[10:59:39.298]                       }
[10:59:39.298]                       invisible(muffled)
[10:59:39.298]                     }
[10:59:39.298]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.298]                   }
[10:59:39.298]                 }
[10:59:39.298]                 else {
[10:59:39.298]                   if (TRUE) {
[10:59:39.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.298]                     {
[10:59:39.298]                       inherits <- base::inherits
[10:59:39.298]                       invokeRestart <- base::invokeRestart
[10:59:39.298]                       is.null <- base::is.null
[10:59:39.298]                       muffled <- FALSE
[10:59:39.298]                       if (inherits(cond, "message")) {
[10:59:39.298]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.298]                         if (muffled) 
[10:59:39.298]                           invokeRestart("muffleMessage")
[10:59:39.298]                       }
[10:59:39.298]                       else if (inherits(cond, "warning")) {
[10:59:39.298]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.298]                         if (muffled) 
[10:59:39.298]                           invokeRestart("muffleWarning")
[10:59:39.298]                       }
[10:59:39.298]                       else if (inherits(cond, "condition")) {
[10:59:39.298]                         if (!is.null(pattern)) {
[10:59:39.298]                           computeRestarts <- base::computeRestarts
[10:59:39.298]                           grepl <- base::grepl
[10:59:39.298]                           restarts <- computeRestarts(cond)
[10:59:39.298]                           for (restart in restarts) {
[10:59:39.298]                             name <- restart$name
[10:59:39.298]                             if (is.null(name)) 
[10:59:39.298]                               next
[10:59:39.298]                             if (!grepl(pattern, name)) 
[10:59:39.298]                               next
[10:59:39.298]                             invokeRestart(restart)
[10:59:39.298]                             muffled <- TRUE
[10:59:39.298]                             break
[10:59:39.298]                           }
[10:59:39.298]                         }
[10:59:39.298]                       }
[10:59:39.298]                       invisible(muffled)
[10:59:39.298]                     }
[10:59:39.298]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.298]                   }
[10:59:39.298]                 }
[10:59:39.298]             }
[10:59:39.298]         }))
[10:59:39.298]     }, error = function(ex) {
[10:59:39.298]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.298]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.298]                 ...future.rng), started = ...future.startTime, 
[10:59:39.298]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.298]             version = "1.8"), class = "FutureResult")
[10:59:39.298]     }, finally = {
[10:59:39.298]         if (!identical(...future.workdir, getwd())) 
[10:59:39.298]             setwd(...future.workdir)
[10:59:39.298]         {
[10:59:39.298]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.298]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.298]             }
[10:59:39.298]             base::options(...future.oldOptions)
[10:59:39.298]             if (.Platform$OS.type == "windows") {
[10:59:39.298]                 old_names <- names(...future.oldEnvVars)
[10:59:39.298]                 envs <- base::Sys.getenv()
[10:59:39.298]                 names <- names(envs)
[10:59:39.298]                 common <- intersect(names, old_names)
[10:59:39.298]                 added <- setdiff(names, old_names)
[10:59:39.298]                 removed <- setdiff(old_names, names)
[10:59:39.298]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.298]                   envs[common]]
[10:59:39.298]                 NAMES <- toupper(changed)
[10:59:39.298]                 args <- list()
[10:59:39.298]                 for (kk in seq_along(NAMES)) {
[10:59:39.298]                   name <- changed[[kk]]
[10:59:39.298]                   NAME <- NAMES[[kk]]
[10:59:39.298]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.298]                     next
[10:59:39.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.298]                 }
[10:59:39.298]                 NAMES <- toupper(added)
[10:59:39.298]                 for (kk in seq_along(NAMES)) {
[10:59:39.298]                   name <- added[[kk]]
[10:59:39.298]                   NAME <- NAMES[[kk]]
[10:59:39.298]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.298]                     next
[10:59:39.298]                   args[[name]] <- ""
[10:59:39.298]                 }
[10:59:39.298]                 NAMES <- toupper(removed)
[10:59:39.298]                 for (kk in seq_along(NAMES)) {
[10:59:39.298]                   name <- removed[[kk]]
[10:59:39.298]                   NAME <- NAMES[[kk]]
[10:59:39.298]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.298]                     next
[10:59:39.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.298]                 }
[10:59:39.298]                 if (length(args) > 0) 
[10:59:39.298]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.298]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.298]             }
[10:59:39.298]             else {
[10:59:39.298]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.298]             }
[10:59:39.298]             {
[10:59:39.298]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.298]                   0L) {
[10:59:39.298]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.298]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.298]                   base::options(opts)
[10:59:39.298]                 }
[10:59:39.298]                 {
[10:59:39.298]                   {
[10:59:39.298]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.298]                     NULL
[10:59:39.298]                   }
[10:59:39.298]                   options(future.plan = NULL)
[10:59:39.298]                   if (is.na(NA_character_)) 
[10:59:39.298]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.298]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.298]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.298]                     .init = FALSE)
[10:59:39.298]                 }
[10:59:39.298]             }
[10:59:39.298]         }
[10:59:39.298]     })
[10:59:39.298]     if (TRUE) {
[10:59:39.298]         base::sink(type = "output", split = FALSE)
[10:59:39.298]         if (TRUE) {
[10:59:39.298]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.298]         }
[10:59:39.298]         else {
[10:59:39.298]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.298]         }
[10:59:39.298]         base::close(...future.stdout)
[10:59:39.298]         ...future.stdout <- NULL
[10:59:39.298]     }
[10:59:39.298]     ...future.result$conditions <- ...future.conditions
[10:59:39.298]     ...future.result$finished <- base::Sys.time()
[10:59:39.298]     ...future.result
[10:59:39.298] }
[10:59:39.301] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[10:59:39.302] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[10:59:39.302] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[10:59:39.302] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[10:59:39.303] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[10:59:39.303] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[10:59:39.303] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[10:59:39.303] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[10:59:39.304] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[10:59:39.304] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[10:59:39.304] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[10:59:39.304] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[10:59:39.305] MultisessionFuture started
[10:59:39.305] - Launch lazy future ... done
[10:59:39.305] run() for ‘MultisessionFuture’ ... done
[10:59:39.305] Created future:
[10:59:39.305] MultisessionFuture:
[10:59:39.305] Label: ‘future_replicate-1’
[10:59:39.305] Expression:
[10:59:39.305] {
[10:59:39.305]     do.call(function(...) {
[10:59:39.305]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.305]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.305]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.305]             on.exit(options(oopts), add = TRUE)
[10:59:39.305]         }
[10:59:39.305]         {
[10:59:39.305]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.305]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.305]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.305]                   envir = globalenv(), inherits = FALSE)
[10:59:39.305]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.305]             })
[10:59:39.305]         }
[10:59:39.305]     }, args = future.call.arguments)
[10:59:39.305] }
[10:59:39.305] Lazy evaluation: FALSE
[10:59:39.305] Asynchronous evaluation: TRUE
[10:59:39.305] Local evaluation: TRUE
[10:59:39.305] Environment: R_GlobalEnv
[10:59:39.305] Capture standard output: TRUE
[10:59:39.305] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.305] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.305] Packages: <none>
[10:59:39.305] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.305] Resolved: FALSE
[10:59:39.305] Value: <not collected>
[10:59:39.305] Conditions captured: <none>
[10:59:39.305] Early signaling: FALSE
[10:59:39.305] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.305] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.317] Chunk #1 of 2 ... DONE
[10:59:39.317] Chunk #2 of 2 ...
[10:59:39.317]  - Finding globals in 'X' for chunk #2 ...
[10:59:39.317] getGlobalsAndPackages() ...
[10:59:39.318] Searching for globals...
[10:59:39.318] 
[10:59:39.318] Searching for globals ... DONE
[10:59:39.318] - globals: [0] <none>
[10:59:39.318] getGlobalsAndPackages() ... DONE
[10:59:39.318]    + additional globals found: [n=0] 
[10:59:39.318]    + additional namespaces needed: [n=0] 
[10:59:39.319]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:39.319]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.319]  - seeds: [3] <seeds>
[10:59:39.319]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.319] getGlobalsAndPackages() ...
[10:59:39.319] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.319] Resolving globals: FALSE
[10:59:39.319] Tweak future expression to call with '...' arguments ...
[10:59:39.319] {
[10:59:39.319]     do.call(function(...) {
[10:59:39.319]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.319]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.319]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.319]             on.exit(options(oopts), add = TRUE)
[10:59:39.319]         }
[10:59:39.319]         {
[10:59:39.319]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.319]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.319]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.319]                   envir = globalenv(), inherits = FALSE)
[10:59:39.319]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.319]             })
[10:59:39.319]         }
[10:59:39.319]     }, args = future.call.arguments)
[10:59:39.319] }
[10:59:39.320] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.320] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.320] 
[10:59:39.320] getGlobalsAndPackages() ... DONE
[10:59:39.321] run() for ‘Future’ ...
[10:59:39.321] - state: ‘created’
[10:59:39.321] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.335] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.335] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.336]   - Field: ‘node’
[10:59:39.336]   - Field: ‘label’
[10:59:39.336]   - Field: ‘local’
[10:59:39.336]   - Field: ‘owner’
[10:59:39.336]   - Field: ‘envir’
[10:59:39.336]   - Field: ‘workers’
[10:59:39.336]   - Field: ‘packages’
[10:59:39.336]   - Field: ‘gc’
[10:59:39.336]   - Field: ‘conditions’
[10:59:39.336]   - Field: ‘persistent’
[10:59:39.336]   - Field: ‘expr’
[10:59:39.337]   - Field: ‘uuid’
[10:59:39.337]   - Field: ‘seed’
[10:59:39.337]   - Field: ‘version’
[10:59:39.337]   - Field: ‘result’
[10:59:39.337]   - Field: ‘asynchronous’
[10:59:39.337]   - Field: ‘calls’
[10:59:39.337]   - Field: ‘globals’
[10:59:39.337]   - Field: ‘stdout’
[10:59:39.337]   - Field: ‘earlySignal’
[10:59:39.338]   - Field: ‘lazy’
[10:59:39.338]   - Field: ‘state’
[10:59:39.338] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.338] - Launch lazy future ...
[10:59:39.338] Packages needed by the future expression (n = 0): <none>
[10:59:39.338] Packages needed by future strategies (n = 0): <none>
[10:59:39.339] {
[10:59:39.339]     {
[10:59:39.339]         {
[10:59:39.339]             ...future.startTime <- base::Sys.time()
[10:59:39.339]             {
[10:59:39.339]                 {
[10:59:39.339]                   {
[10:59:39.339]                     {
[10:59:39.339]                       base::local({
[10:59:39.339]                         has_future <- base::requireNamespace("future", 
[10:59:39.339]                           quietly = TRUE)
[10:59:39.339]                         if (has_future) {
[10:59:39.339]                           ns <- base::getNamespace("future")
[10:59:39.339]                           version <- ns[[".package"]][["version"]]
[10:59:39.339]                           if (is.null(version)) 
[10:59:39.339]                             version <- utils::packageVersion("future")
[10:59:39.339]                         }
[10:59:39.339]                         else {
[10:59:39.339]                           version <- NULL
[10:59:39.339]                         }
[10:59:39.339]                         if (!has_future || version < "1.8.0") {
[10:59:39.339]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.339]                             "", base::R.version$version.string), 
[10:59:39.339]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.339]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.339]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.339]                               "release", "version")], collapse = " "), 
[10:59:39.339]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.339]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.339]                             info)
[10:59:39.339]                           info <- base::paste(info, collapse = "; ")
[10:59:39.339]                           if (!has_future) {
[10:59:39.339]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.339]                               info)
[10:59:39.339]                           }
[10:59:39.339]                           else {
[10:59:39.339]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.339]                               info, version)
[10:59:39.339]                           }
[10:59:39.339]                           base::stop(msg)
[10:59:39.339]                         }
[10:59:39.339]                       })
[10:59:39.339]                     }
[10:59:39.339]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.339]                     base::options(mc.cores = 1L)
[10:59:39.339]                   }
[10:59:39.339]                   ...future.strategy.old <- future::plan("list")
[10:59:39.339]                   options(future.plan = NULL)
[10:59:39.339]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.339]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.339]                 }
[10:59:39.339]                 ...future.workdir <- getwd()
[10:59:39.339]             }
[10:59:39.339]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.339]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.339]         }
[10:59:39.339]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.339]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.339]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.339]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.339]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.339]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.339]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.339]             base::names(...future.oldOptions))
[10:59:39.339]     }
[10:59:39.339]     if (FALSE) {
[10:59:39.339]     }
[10:59:39.339]     else {
[10:59:39.339]         if (TRUE) {
[10:59:39.339]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.339]                 open = "w")
[10:59:39.339]         }
[10:59:39.339]         else {
[10:59:39.339]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.339]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.339]         }
[10:59:39.339]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.339]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.339]             base::sink(type = "output", split = FALSE)
[10:59:39.339]             base::close(...future.stdout)
[10:59:39.339]         }, add = TRUE)
[10:59:39.339]     }
[10:59:39.339]     ...future.frame <- base::sys.nframe()
[10:59:39.339]     ...future.conditions <- base::list()
[10:59:39.339]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.339]     if (FALSE) {
[10:59:39.339]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.339]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.339]     }
[10:59:39.339]     ...future.result <- base::tryCatch({
[10:59:39.339]         base::withCallingHandlers({
[10:59:39.339]             ...future.value <- base::withVisible(base::local({
[10:59:39.339]                 ...future.makeSendCondition <- base::local({
[10:59:39.339]                   sendCondition <- NULL
[10:59:39.339]                   function(frame = 1L) {
[10:59:39.339]                     if (is.function(sendCondition)) 
[10:59:39.339]                       return(sendCondition)
[10:59:39.339]                     ns <- getNamespace("parallel")
[10:59:39.339]                     if (exists("sendData", mode = "function", 
[10:59:39.339]                       envir = ns)) {
[10:59:39.339]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.339]                         envir = ns)
[10:59:39.339]                       envir <- sys.frame(frame)
[10:59:39.339]                       master <- NULL
[10:59:39.339]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.339]                         !identical(envir, emptyenv())) {
[10:59:39.339]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.339]                           inherits = FALSE)) {
[10:59:39.339]                           master <- get("master", mode = "list", 
[10:59:39.339]                             envir = envir, inherits = FALSE)
[10:59:39.339]                           if (inherits(master, c("SOCKnode", 
[10:59:39.339]                             "SOCK0node"))) {
[10:59:39.339]                             sendCondition <<- function(cond) {
[10:59:39.339]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.339]                                 success = TRUE)
[10:59:39.339]                               parallel_sendData(master, data)
[10:59:39.339]                             }
[10:59:39.339]                             return(sendCondition)
[10:59:39.339]                           }
[10:59:39.339]                         }
[10:59:39.339]                         frame <- frame + 1L
[10:59:39.339]                         envir <- sys.frame(frame)
[10:59:39.339]                       }
[10:59:39.339]                     }
[10:59:39.339]                     sendCondition <<- function(cond) NULL
[10:59:39.339]                   }
[10:59:39.339]                 })
[10:59:39.339]                 withCallingHandlers({
[10:59:39.339]                   {
[10:59:39.339]                     do.call(function(...) {
[10:59:39.339]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.339]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.339]                         ...future.globals.maxSize)) {
[10:59:39.339]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.339]                         on.exit(options(oopts), add = TRUE)
[10:59:39.339]                       }
[10:59:39.339]                       {
[10:59:39.339]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.339]                           FUN = function(jj) {
[10:59:39.339]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.339]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.339]                               envir = globalenv(), inherits = FALSE)
[10:59:39.339]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.339]                           })
[10:59:39.339]                       }
[10:59:39.339]                     }, args = future.call.arguments)
[10:59:39.339]                   }
[10:59:39.339]                 }, immediateCondition = function(cond) {
[10:59:39.339]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.339]                   sendCondition(cond)
[10:59:39.339]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.339]                   {
[10:59:39.339]                     inherits <- base::inherits
[10:59:39.339]                     invokeRestart <- base::invokeRestart
[10:59:39.339]                     is.null <- base::is.null
[10:59:39.339]                     muffled <- FALSE
[10:59:39.339]                     if (inherits(cond, "message")) {
[10:59:39.339]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.339]                       if (muffled) 
[10:59:39.339]                         invokeRestart("muffleMessage")
[10:59:39.339]                     }
[10:59:39.339]                     else if (inherits(cond, "warning")) {
[10:59:39.339]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.339]                       if (muffled) 
[10:59:39.339]                         invokeRestart("muffleWarning")
[10:59:39.339]                     }
[10:59:39.339]                     else if (inherits(cond, "condition")) {
[10:59:39.339]                       if (!is.null(pattern)) {
[10:59:39.339]                         computeRestarts <- base::computeRestarts
[10:59:39.339]                         grepl <- base::grepl
[10:59:39.339]                         restarts <- computeRestarts(cond)
[10:59:39.339]                         for (restart in restarts) {
[10:59:39.339]                           name <- restart$name
[10:59:39.339]                           if (is.null(name)) 
[10:59:39.339]                             next
[10:59:39.339]                           if (!grepl(pattern, name)) 
[10:59:39.339]                             next
[10:59:39.339]                           invokeRestart(restart)
[10:59:39.339]                           muffled <- TRUE
[10:59:39.339]                           break
[10:59:39.339]                         }
[10:59:39.339]                       }
[10:59:39.339]                     }
[10:59:39.339]                     invisible(muffled)
[10:59:39.339]                   }
[10:59:39.339]                   muffleCondition(cond)
[10:59:39.339]                 })
[10:59:39.339]             }))
[10:59:39.339]             future::FutureResult(value = ...future.value$value, 
[10:59:39.339]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.339]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.339]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.339]                     ...future.globalenv.names))
[10:59:39.339]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.339]         }, condition = base::local({
[10:59:39.339]             c <- base::c
[10:59:39.339]             inherits <- base::inherits
[10:59:39.339]             invokeRestart <- base::invokeRestart
[10:59:39.339]             length <- base::length
[10:59:39.339]             list <- base::list
[10:59:39.339]             seq.int <- base::seq.int
[10:59:39.339]             signalCondition <- base::signalCondition
[10:59:39.339]             sys.calls <- base::sys.calls
[10:59:39.339]             `[[` <- base::`[[`
[10:59:39.339]             `+` <- base::`+`
[10:59:39.339]             `<<-` <- base::`<<-`
[10:59:39.339]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.339]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.339]                   3L)]
[10:59:39.339]             }
[10:59:39.339]             function(cond) {
[10:59:39.339]                 is_error <- inherits(cond, "error")
[10:59:39.339]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.339]                   NULL)
[10:59:39.339]                 if (is_error) {
[10:59:39.339]                   sessionInformation <- function() {
[10:59:39.339]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.339]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.339]                       search = base::search(), system = base::Sys.info())
[10:59:39.339]                   }
[10:59:39.339]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.339]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.339]                     cond$call), session = sessionInformation(), 
[10:59:39.339]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.339]                   signalCondition(cond)
[10:59:39.339]                 }
[10:59:39.339]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.339]                 "immediateCondition"))) {
[10:59:39.339]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.339]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.339]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.339]                   if (TRUE && !signal) {
[10:59:39.339]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.339]                     {
[10:59:39.339]                       inherits <- base::inherits
[10:59:39.339]                       invokeRestart <- base::invokeRestart
[10:59:39.339]                       is.null <- base::is.null
[10:59:39.339]                       muffled <- FALSE
[10:59:39.339]                       if (inherits(cond, "message")) {
[10:59:39.339]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.339]                         if (muffled) 
[10:59:39.339]                           invokeRestart("muffleMessage")
[10:59:39.339]                       }
[10:59:39.339]                       else if (inherits(cond, "warning")) {
[10:59:39.339]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.339]                         if (muffled) 
[10:59:39.339]                           invokeRestart("muffleWarning")
[10:59:39.339]                       }
[10:59:39.339]                       else if (inherits(cond, "condition")) {
[10:59:39.339]                         if (!is.null(pattern)) {
[10:59:39.339]                           computeRestarts <- base::computeRestarts
[10:59:39.339]                           grepl <- base::grepl
[10:59:39.339]                           restarts <- computeRestarts(cond)
[10:59:39.339]                           for (restart in restarts) {
[10:59:39.339]                             name <- restart$name
[10:59:39.339]                             if (is.null(name)) 
[10:59:39.339]                               next
[10:59:39.339]                             if (!grepl(pattern, name)) 
[10:59:39.339]                               next
[10:59:39.339]                             invokeRestart(restart)
[10:59:39.339]                             muffled <- TRUE
[10:59:39.339]                             break
[10:59:39.339]                           }
[10:59:39.339]                         }
[10:59:39.339]                       }
[10:59:39.339]                       invisible(muffled)
[10:59:39.339]                     }
[10:59:39.339]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.339]                   }
[10:59:39.339]                 }
[10:59:39.339]                 else {
[10:59:39.339]                   if (TRUE) {
[10:59:39.339]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.339]                     {
[10:59:39.339]                       inherits <- base::inherits
[10:59:39.339]                       invokeRestart <- base::invokeRestart
[10:59:39.339]                       is.null <- base::is.null
[10:59:39.339]                       muffled <- FALSE
[10:59:39.339]                       if (inherits(cond, "message")) {
[10:59:39.339]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.339]                         if (muffled) 
[10:59:39.339]                           invokeRestart("muffleMessage")
[10:59:39.339]                       }
[10:59:39.339]                       else if (inherits(cond, "warning")) {
[10:59:39.339]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.339]                         if (muffled) 
[10:59:39.339]                           invokeRestart("muffleWarning")
[10:59:39.339]                       }
[10:59:39.339]                       else if (inherits(cond, "condition")) {
[10:59:39.339]                         if (!is.null(pattern)) {
[10:59:39.339]                           computeRestarts <- base::computeRestarts
[10:59:39.339]                           grepl <- base::grepl
[10:59:39.339]                           restarts <- computeRestarts(cond)
[10:59:39.339]                           for (restart in restarts) {
[10:59:39.339]                             name <- restart$name
[10:59:39.339]                             if (is.null(name)) 
[10:59:39.339]                               next
[10:59:39.339]                             if (!grepl(pattern, name)) 
[10:59:39.339]                               next
[10:59:39.339]                             invokeRestart(restart)
[10:59:39.339]                             muffled <- TRUE
[10:59:39.339]                             break
[10:59:39.339]                           }
[10:59:39.339]                         }
[10:59:39.339]                       }
[10:59:39.339]                       invisible(muffled)
[10:59:39.339]                     }
[10:59:39.339]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.339]                   }
[10:59:39.339]                 }
[10:59:39.339]             }
[10:59:39.339]         }))
[10:59:39.339]     }, error = function(ex) {
[10:59:39.339]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.339]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.339]                 ...future.rng), started = ...future.startTime, 
[10:59:39.339]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.339]             version = "1.8"), class = "FutureResult")
[10:59:39.339]     }, finally = {
[10:59:39.339]         if (!identical(...future.workdir, getwd())) 
[10:59:39.339]             setwd(...future.workdir)
[10:59:39.339]         {
[10:59:39.339]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.339]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.339]             }
[10:59:39.339]             base::options(...future.oldOptions)
[10:59:39.339]             if (.Platform$OS.type == "windows") {
[10:59:39.339]                 old_names <- names(...future.oldEnvVars)
[10:59:39.339]                 envs <- base::Sys.getenv()
[10:59:39.339]                 names <- names(envs)
[10:59:39.339]                 common <- intersect(names, old_names)
[10:59:39.339]                 added <- setdiff(names, old_names)
[10:59:39.339]                 removed <- setdiff(old_names, names)
[10:59:39.339]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.339]                   envs[common]]
[10:59:39.339]                 NAMES <- toupper(changed)
[10:59:39.339]                 args <- list()
[10:59:39.339]                 for (kk in seq_along(NAMES)) {
[10:59:39.339]                   name <- changed[[kk]]
[10:59:39.339]                   NAME <- NAMES[[kk]]
[10:59:39.339]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.339]                     next
[10:59:39.339]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.339]                 }
[10:59:39.339]                 NAMES <- toupper(added)
[10:59:39.339]                 for (kk in seq_along(NAMES)) {
[10:59:39.339]                   name <- added[[kk]]
[10:59:39.339]                   NAME <- NAMES[[kk]]
[10:59:39.339]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.339]                     next
[10:59:39.339]                   args[[name]] <- ""
[10:59:39.339]                 }
[10:59:39.339]                 NAMES <- toupper(removed)
[10:59:39.339]                 for (kk in seq_along(NAMES)) {
[10:59:39.339]                   name <- removed[[kk]]
[10:59:39.339]                   NAME <- NAMES[[kk]]
[10:59:39.339]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.339]                     next
[10:59:39.339]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.339]                 }
[10:59:39.339]                 if (length(args) > 0) 
[10:59:39.339]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.339]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.339]             }
[10:59:39.339]             else {
[10:59:39.339]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.339]             }
[10:59:39.339]             {
[10:59:39.339]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.339]                   0L) {
[10:59:39.339]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.339]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.339]                   base::options(opts)
[10:59:39.339]                 }
[10:59:39.339]                 {
[10:59:39.339]                   {
[10:59:39.339]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.339]                     NULL
[10:59:39.339]                   }
[10:59:39.339]                   options(future.plan = NULL)
[10:59:39.339]                   if (is.na(NA_character_)) 
[10:59:39.339]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.339]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.339]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.339]                     .init = FALSE)
[10:59:39.339]                 }
[10:59:39.339]             }
[10:59:39.339]         }
[10:59:39.339]     })
[10:59:39.339]     if (TRUE) {
[10:59:39.339]         base::sink(type = "output", split = FALSE)
[10:59:39.339]         if (TRUE) {
[10:59:39.339]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.339]         }
[10:59:39.339]         else {
[10:59:39.339]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.339]         }
[10:59:39.339]         base::close(...future.stdout)
[10:59:39.339]         ...future.stdout <- NULL
[10:59:39.339]     }
[10:59:39.339]     ...future.result$conditions <- ...future.conditions
[10:59:39.339]     ...future.result$finished <- base::Sys.time()
[10:59:39.339]     ...future.result
[10:59:39.339] }
[10:59:39.390] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[10:59:39.390] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[10:59:39.391] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[10:59:39.391] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[10:59:39.392] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[10:59:39.392] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[10:59:39.392] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[10:59:39.392] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[10:59:39.393] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[10:59:39.393] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[10:59:39.393] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[10:59:39.393] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[10:59:39.394] MultisessionFuture started
[10:59:39.394] - Launch lazy future ... done
[10:59:39.394] run() for ‘MultisessionFuture’ ... done
[10:59:39.394] Created future:
[10:59:39.395] MultisessionFuture:
[10:59:39.395] Label: ‘future_replicate-2’
[10:59:39.395] Expression:
[10:59:39.395] {
[10:59:39.395]     do.call(function(...) {
[10:59:39.395]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.395]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.395]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.395]             on.exit(options(oopts), add = TRUE)
[10:59:39.395]         }
[10:59:39.395]         {
[10:59:39.395]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.395]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.395]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.395]                   envir = globalenv(), inherits = FALSE)
[10:59:39.395]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.395]             })
[10:59:39.395]         }
[10:59:39.395]     }, args = future.call.arguments)
[10:59:39.395] }
[10:59:39.395] Lazy evaluation: FALSE
[10:59:39.395] Asynchronous evaluation: TRUE
[10:59:39.395] Local evaluation: TRUE
[10:59:39.395] Environment: R_GlobalEnv
[10:59:39.395] Capture standard output: TRUE
[10:59:39.395] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.395] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.395] Packages: <none>
[10:59:39.395] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.395] Resolved: FALSE
[10:59:39.395] Value: <not collected>
[10:59:39.395] Conditions captured: <none>
[10:59:39.395] Early signaling: FALSE
[10:59:39.395] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.395] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.406] Chunk #2 of 2 ... DONE
[10:59:39.406] Launching 2 futures (chunks) ... DONE
[10:59:39.407] Resolving 2 futures (chunks) ...
[10:59:39.407] resolve() on list ...
[10:59:39.407]  recursive: 0
[10:59:39.407]  length: 2
[10:59:39.407] 
[10:59:39.407] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.408] - Validating connection of MultisessionFuture
[10:59:39.408] - received message: FutureResult
[10:59:39.408] - Received FutureResult
[10:59:39.408] - Erased future from FutureRegistry
[10:59:39.408] result() for ClusterFuture ...
[10:59:39.408] - result already collected: FutureResult
[10:59:39.408] result() for ClusterFuture ... done
[10:59:39.409] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.409] Future #1
[10:59:39.409] result() for ClusterFuture ...
[10:59:39.409] - result already collected: FutureResult
[10:59:39.409] result() for ClusterFuture ... done
[10:59:39.409] result() for ClusterFuture ...
[10:59:39.409] - result already collected: FutureResult
[10:59:39.409] result() for ClusterFuture ... done
[10:59:39.409] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:59:39.409] - nx: 2
[10:59:39.410] - relay: TRUE
[10:59:39.410] - stdout: TRUE
[10:59:39.410] - signal: TRUE
[10:59:39.410] - resignal: FALSE
[10:59:39.410] - force: TRUE
[10:59:39.410] - relayed: [n=2] FALSE, FALSE
[10:59:39.410] - queued futures: [n=2] FALSE, FALSE
[10:59:39.410]  - until=1
[10:59:39.410]  - relaying element #1
[10:59:39.411] result() for ClusterFuture ...
[10:59:39.411] - result already collected: FutureResult
[10:59:39.411] result() for ClusterFuture ... done
[10:59:39.411] result() for ClusterFuture ...
[10:59:39.411] - result already collected: FutureResult
[10:59:39.411] result() for ClusterFuture ... done
[10:59:39.411] result() for ClusterFuture ...
[10:59:39.411] - result already collected: FutureResult
[10:59:39.411] result() for ClusterFuture ... done
[10:59:39.411] result() for ClusterFuture ...
[10:59:39.412] - result already collected: FutureResult
[10:59:39.412] result() for ClusterFuture ... done
[10:59:39.412] - relayed: [n=2] TRUE, FALSE
[10:59:39.412] - queued futures: [n=2] TRUE, FALSE
[10:59:39.412] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:59:39.412]  length: 1 (resolved future 1)
[10:59:39.475] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.475] - Validating connection of MultisessionFuture
[10:59:39.476] - received message: FutureResult
[10:59:39.476] - Received FutureResult
[10:59:39.476] - Erased future from FutureRegistry
[10:59:39.476] result() for ClusterFuture ...
[10:59:39.476] - result already collected: FutureResult
[10:59:39.476] result() for ClusterFuture ... done
[10:59:39.476] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.476] Future #2
[10:59:39.477] result() for ClusterFuture ...
[10:59:39.477] - result already collected: FutureResult
[10:59:39.477] result() for ClusterFuture ... done
[10:59:39.477] result() for ClusterFuture ...
[10:59:39.477] - result already collected: FutureResult
[10:59:39.477] result() for ClusterFuture ... done
[10:59:39.477] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:59:39.477] - nx: 2
[10:59:39.477] - relay: TRUE
[10:59:39.477] - stdout: TRUE
[10:59:39.478] - signal: TRUE
[10:59:39.478] - resignal: FALSE
[10:59:39.478] - force: TRUE
[10:59:39.478] - relayed: [n=2] TRUE, FALSE
[10:59:39.478] - queued futures: [n=2] TRUE, FALSE
[10:59:39.478]  - until=2
[10:59:39.478]  - relaying element #2
[10:59:39.478] result() for ClusterFuture ...
[10:59:39.478] - result already collected: FutureResult
[10:59:39.478] result() for ClusterFuture ... done
[10:59:39.479] result() for ClusterFuture ...
[10:59:39.479] - result already collected: FutureResult
[10:59:39.479] result() for ClusterFuture ... done
[10:59:39.479] result() for ClusterFuture ...
[10:59:39.479] - result already collected: FutureResult
[10:59:39.479] result() for ClusterFuture ... done
[10:59:39.479] result() for ClusterFuture ...
[10:59:39.479] - result already collected: FutureResult
[10:59:39.479] result() for ClusterFuture ... done
[10:59:39.480] - relayed: [n=2] TRUE, TRUE
[10:59:39.480] - queued futures: [n=2] TRUE, TRUE
[10:59:39.480] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:59:39.480]  length: 0 (resolved future 2)
[10:59:39.480] Relaying remaining futures
[10:59:39.480] signalConditionsASAP(NULL, pos=0) ...
[10:59:39.480] - nx: 2
[10:59:39.480] - relay: TRUE
[10:59:39.480] - stdout: TRUE
[10:59:39.480] - signal: TRUE
[10:59:39.481] - resignal: FALSE
[10:59:39.481] - force: TRUE
[10:59:39.481] - relayed: [n=2] TRUE, TRUE
[10:59:39.481] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:39.481] - relayed: [n=2] TRUE, TRUE
[10:59:39.481] - queued futures: [n=2] TRUE, TRUE
[10:59:39.481] signalConditionsASAP(NULL, pos=0) ... done
[10:59:39.481] resolve() on list ... DONE
[10:59:39.482] result() for ClusterFuture ...
[10:59:39.482] - result already collected: FutureResult
[10:59:39.482] result() for ClusterFuture ... done
[10:59:39.482] result() for ClusterFuture ...
[10:59:39.482] - result already collected: FutureResult
[10:59:39.482] result() for ClusterFuture ... done
[10:59:39.482] result() for ClusterFuture ...
[10:59:39.482] - result already collected: FutureResult
[10:59:39.482] result() for ClusterFuture ... done
[10:59:39.483] result() for ClusterFuture ...
[10:59:39.483] - result already collected: FutureResult
[10:59:39.483] result() for ClusterFuture ... done
[10:59:39.483]  - Number of value chunks collected: 2
[10:59:39.483] Resolving 2 futures (chunks) ... DONE
[10:59:39.483] Reducing values from 2 chunks ...
[10:59:39.483]  - Number of values collected after concatenation: 5
[10:59:39.483]  - Number of values expected: 5
[10:59:39.483] Reducing values from 2 chunks ... DONE
[10:59:39.484] future_lapply() ... DONE
[10:59:39.484] future_lapply() ...
[10:59:39.484] Generating random seeds ...
[10:59:39.484] Generating random seed streams for 5 elements ...
[10:59:39.485] Generating random seed streams for 5 elements ... DONE
[10:59:39.485] Generating random seeds ... DONE
[10:59:39.485] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:39.487] Number of chunks: 2
[10:59:39.487] getGlobalsAndPackagesXApply() ...
[10:59:39.487]  - future.globals: TRUE
[10:59:39.487] getGlobalsAndPackages() ...
[10:59:39.488] Searching for globals...
[10:59:39.489] - globals found: [2] ‘FUN’, ‘sample’
[10:59:39.489] Searching for globals ... DONE
[10:59:39.489] Resolving globals: FALSE
[10:59:39.490] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:39.490] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:39.490] - globals: [1] ‘FUN’
[10:59:39.490] 
[10:59:39.490] getGlobalsAndPackages() ... DONE
[10:59:39.490]  - globals found/used: [n=1] ‘FUN’
[10:59:39.491]  - needed namespaces: [n=0] 
[10:59:39.491] Finding globals ... DONE
[10:59:39.491]  - use_args: TRUE
[10:59:39.491]  - Getting '...' globals ...
[10:59:39.491] resolve() on list ...
[10:59:39.491]  recursive: 0
[10:59:39.492]  length: 1
[10:59:39.492]  elements: ‘...’
[10:59:39.492]  length: 0 (resolved future 1)
[10:59:39.492] resolve() on list ... DONE
[10:59:39.492]    - '...' content: [n=0] 
[10:59:39.492] List of 1
[10:59:39.492]  $ ...: list()
[10:59:39.492]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.492]  - attr(*, "where")=List of 1
[10:59:39.492]   ..$ ...:<environment: 0x562630bf2bf8> 
[10:59:39.492]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.492]  - attr(*, "resolved")= logi TRUE
[10:59:39.492]  - attr(*, "total_size")= num NA
[10:59:39.495]  - Getting '...' globals ... DONE
[10:59:39.495] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:39.495] List of 2
[10:59:39.495]  $ ...future.FUN:function (...)  
[10:59:39.495]  $ ...          : list()
[10:59:39.495]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.495]  - attr(*, "where")=List of 2
[10:59:39.495]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:39.495]   ..$ ...          :<environment: 0x562630bf2bf8> 
[10:59:39.495]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.495]  - attr(*, "resolved")= logi FALSE
[10:59:39.495]  - attr(*, "total_size")= num 7184
[10:59:39.499] Packages to be attached in all futures: [n=0] 
[10:59:39.499] getGlobalsAndPackagesXApply() ... DONE
[10:59:39.499] Number of futures (= number of chunks): 2
[10:59:39.499] Launching 2 futures (chunks) ...
[10:59:39.499] Chunk #1 of 2 ...
[10:59:39.499]  - Finding globals in 'X' for chunk #1 ...
[10:59:39.500] getGlobalsAndPackages() ...
[10:59:39.500] Searching for globals...
[10:59:39.500] 
[10:59:39.500] Searching for globals ... DONE
[10:59:39.500] - globals: [0] <none>
[10:59:39.500] getGlobalsAndPackages() ... DONE
[10:59:39.500]    + additional globals found: [n=0] 
[10:59:39.501]    + additional namespaces needed: [n=0] 
[10:59:39.501]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:39.501]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.501]  - seeds: [2] <seeds>
[10:59:39.501]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.503] getGlobalsAndPackages() ...
[10:59:39.503] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.503] Resolving globals: FALSE
[10:59:39.503] Tweak future expression to call with '...' arguments ...
[10:59:39.503] {
[10:59:39.503]     do.call(function(...) {
[10:59:39.503]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.503]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.503]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.503]             on.exit(options(oopts), add = TRUE)
[10:59:39.503]         }
[10:59:39.503]         {
[10:59:39.503]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.503]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.503]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.503]                   envir = globalenv(), inherits = FALSE)
[10:59:39.503]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.503]             })
[10:59:39.503]         }
[10:59:39.503]     }, args = future.call.arguments)
[10:59:39.503] }
[10:59:39.504] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.504] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.504] 
[10:59:39.504] getGlobalsAndPackages() ... DONE
[10:59:39.505] run() for ‘Future’ ...
[10:59:39.505] - state: ‘created’
[10:59:39.505] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.519] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.519] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.519]   - Field: ‘node’
[10:59:39.519]   - Field: ‘label’
[10:59:39.519]   - Field: ‘local’
[10:59:39.519]   - Field: ‘owner’
[10:59:39.519]   - Field: ‘envir’
[10:59:39.519]   - Field: ‘workers’
[10:59:39.519]   - Field: ‘packages’
[10:59:39.519]   - Field: ‘gc’
[10:59:39.519]   - Field: ‘conditions’
[10:59:39.520]   - Field: ‘persistent’
[10:59:39.520]   - Field: ‘expr’
[10:59:39.520]   - Field: ‘uuid’
[10:59:39.520]   - Field: ‘seed’
[10:59:39.520]   - Field: ‘version’
[10:59:39.520]   - Field: ‘result’
[10:59:39.520]   - Field: ‘asynchronous’
[10:59:39.520]   - Field: ‘calls’
[10:59:39.520]   - Field: ‘globals’
[10:59:39.520]   - Field: ‘stdout’
[10:59:39.520]   - Field: ‘earlySignal’
[10:59:39.520]   - Field: ‘lazy’
[10:59:39.521]   - Field: ‘state’
[10:59:39.521] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.521] - Launch lazy future ...
[10:59:39.521] Packages needed by the future expression (n = 0): <none>
[10:59:39.521] Packages needed by future strategies (n = 0): <none>
[10:59:39.521] {
[10:59:39.521]     {
[10:59:39.521]         {
[10:59:39.521]             ...future.startTime <- base::Sys.time()
[10:59:39.521]             {
[10:59:39.521]                 {
[10:59:39.521]                   {
[10:59:39.521]                     {
[10:59:39.521]                       base::local({
[10:59:39.521]                         has_future <- base::requireNamespace("future", 
[10:59:39.521]                           quietly = TRUE)
[10:59:39.521]                         if (has_future) {
[10:59:39.521]                           ns <- base::getNamespace("future")
[10:59:39.521]                           version <- ns[[".package"]][["version"]]
[10:59:39.521]                           if (is.null(version)) 
[10:59:39.521]                             version <- utils::packageVersion("future")
[10:59:39.521]                         }
[10:59:39.521]                         else {
[10:59:39.521]                           version <- NULL
[10:59:39.521]                         }
[10:59:39.521]                         if (!has_future || version < "1.8.0") {
[10:59:39.521]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.521]                             "", base::R.version$version.string), 
[10:59:39.521]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.521]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.521]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.521]                               "release", "version")], collapse = " "), 
[10:59:39.521]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.521]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.521]                             info)
[10:59:39.521]                           info <- base::paste(info, collapse = "; ")
[10:59:39.521]                           if (!has_future) {
[10:59:39.521]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.521]                               info)
[10:59:39.521]                           }
[10:59:39.521]                           else {
[10:59:39.521]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.521]                               info, version)
[10:59:39.521]                           }
[10:59:39.521]                           base::stop(msg)
[10:59:39.521]                         }
[10:59:39.521]                       })
[10:59:39.521]                     }
[10:59:39.521]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.521]                     base::options(mc.cores = 1L)
[10:59:39.521]                   }
[10:59:39.521]                   ...future.strategy.old <- future::plan("list")
[10:59:39.521]                   options(future.plan = NULL)
[10:59:39.521]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.521]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.521]                 }
[10:59:39.521]                 ...future.workdir <- getwd()
[10:59:39.521]             }
[10:59:39.521]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.521]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.521]         }
[10:59:39.521]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.521]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.521]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.521]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.521]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.521]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.521]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.521]             base::names(...future.oldOptions))
[10:59:39.521]     }
[10:59:39.521]     if (FALSE) {
[10:59:39.521]     }
[10:59:39.521]     else {
[10:59:39.521]         if (TRUE) {
[10:59:39.521]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.521]                 open = "w")
[10:59:39.521]         }
[10:59:39.521]         else {
[10:59:39.521]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.521]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.521]         }
[10:59:39.521]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.521]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.521]             base::sink(type = "output", split = FALSE)
[10:59:39.521]             base::close(...future.stdout)
[10:59:39.521]         }, add = TRUE)
[10:59:39.521]     }
[10:59:39.521]     ...future.frame <- base::sys.nframe()
[10:59:39.521]     ...future.conditions <- base::list()
[10:59:39.521]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.521]     if (FALSE) {
[10:59:39.521]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.521]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.521]     }
[10:59:39.521]     ...future.result <- base::tryCatch({
[10:59:39.521]         base::withCallingHandlers({
[10:59:39.521]             ...future.value <- base::withVisible(base::local({
[10:59:39.521]                 ...future.makeSendCondition <- base::local({
[10:59:39.521]                   sendCondition <- NULL
[10:59:39.521]                   function(frame = 1L) {
[10:59:39.521]                     if (is.function(sendCondition)) 
[10:59:39.521]                       return(sendCondition)
[10:59:39.521]                     ns <- getNamespace("parallel")
[10:59:39.521]                     if (exists("sendData", mode = "function", 
[10:59:39.521]                       envir = ns)) {
[10:59:39.521]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.521]                         envir = ns)
[10:59:39.521]                       envir <- sys.frame(frame)
[10:59:39.521]                       master <- NULL
[10:59:39.521]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.521]                         !identical(envir, emptyenv())) {
[10:59:39.521]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.521]                           inherits = FALSE)) {
[10:59:39.521]                           master <- get("master", mode = "list", 
[10:59:39.521]                             envir = envir, inherits = FALSE)
[10:59:39.521]                           if (inherits(master, c("SOCKnode", 
[10:59:39.521]                             "SOCK0node"))) {
[10:59:39.521]                             sendCondition <<- function(cond) {
[10:59:39.521]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.521]                                 success = TRUE)
[10:59:39.521]                               parallel_sendData(master, data)
[10:59:39.521]                             }
[10:59:39.521]                             return(sendCondition)
[10:59:39.521]                           }
[10:59:39.521]                         }
[10:59:39.521]                         frame <- frame + 1L
[10:59:39.521]                         envir <- sys.frame(frame)
[10:59:39.521]                       }
[10:59:39.521]                     }
[10:59:39.521]                     sendCondition <<- function(cond) NULL
[10:59:39.521]                   }
[10:59:39.521]                 })
[10:59:39.521]                 withCallingHandlers({
[10:59:39.521]                   {
[10:59:39.521]                     do.call(function(...) {
[10:59:39.521]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.521]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.521]                         ...future.globals.maxSize)) {
[10:59:39.521]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.521]                         on.exit(options(oopts), add = TRUE)
[10:59:39.521]                       }
[10:59:39.521]                       {
[10:59:39.521]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.521]                           FUN = function(jj) {
[10:59:39.521]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.521]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.521]                               envir = globalenv(), inherits = FALSE)
[10:59:39.521]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.521]                           })
[10:59:39.521]                       }
[10:59:39.521]                     }, args = future.call.arguments)
[10:59:39.521]                   }
[10:59:39.521]                 }, immediateCondition = function(cond) {
[10:59:39.521]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.521]                   sendCondition(cond)
[10:59:39.521]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.521]                   {
[10:59:39.521]                     inherits <- base::inherits
[10:59:39.521]                     invokeRestart <- base::invokeRestart
[10:59:39.521]                     is.null <- base::is.null
[10:59:39.521]                     muffled <- FALSE
[10:59:39.521]                     if (inherits(cond, "message")) {
[10:59:39.521]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.521]                       if (muffled) 
[10:59:39.521]                         invokeRestart("muffleMessage")
[10:59:39.521]                     }
[10:59:39.521]                     else if (inherits(cond, "warning")) {
[10:59:39.521]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.521]                       if (muffled) 
[10:59:39.521]                         invokeRestart("muffleWarning")
[10:59:39.521]                     }
[10:59:39.521]                     else if (inherits(cond, "condition")) {
[10:59:39.521]                       if (!is.null(pattern)) {
[10:59:39.521]                         computeRestarts <- base::computeRestarts
[10:59:39.521]                         grepl <- base::grepl
[10:59:39.521]                         restarts <- computeRestarts(cond)
[10:59:39.521]                         for (restart in restarts) {
[10:59:39.521]                           name <- restart$name
[10:59:39.521]                           if (is.null(name)) 
[10:59:39.521]                             next
[10:59:39.521]                           if (!grepl(pattern, name)) 
[10:59:39.521]                             next
[10:59:39.521]                           invokeRestart(restart)
[10:59:39.521]                           muffled <- TRUE
[10:59:39.521]                           break
[10:59:39.521]                         }
[10:59:39.521]                       }
[10:59:39.521]                     }
[10:59:39.521]                     invisible(muffled)
[10:59:39.521]                   }
[10:59:39.521]                   muffleCondition(cond)
[10:59:39.521]                 })
[10:59:39.521]             }))
[10:59:39.521]             future::FutureResult(value = ...future.value$value, 
[10:59:39.521]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.521]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.521]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.521]                     ...future.globalenv.names))
[10:59:39.521]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.521]         }, condition = base::local({
[10:59:39.521]             c <- base::c
[10:59:39.521]             inherits <- base::inherits
[10:59:39.521]             invokeRestart <- base::invokeRestart
[10:59:39.521]             length <- base::length
[10:59:39.521]             list <- base::list
[10:59:39.521]             seq.int <- base::seq.int
[10:59:39.521]             signalCondition <- base::signalCondition
[10:59:39.521]             sys.calls <- base::sys.calls
[10:59:39.521]             `[[` <- base::`[[`
[10:59:39.521]             `+` <- base::`+`
[10:59:39.521]             `<<-` <- base::`<<-`
[10:59:39.521]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.521]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.521]                   3L)]
[10:59:39.521]             }
[10:59:39.521]             function(cond) {
[10:59:39.521]                 is_error <- inherits(cond, "error")
[10:59:39.521]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.521]                   NULL)
[10:59:39.521]                 if (is_error) {
[10:59:39.521]                   sessionInformation <- function() {
[10:59:39.521]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.521]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.521]                       search = base::search(), system = base::Sys.info())
[10:59:39.521]                   }
[10:59:39.521]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.521]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.521]                     cond$call), session = sessionInformation(), 
[10:59:39.521]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.521]                   signalCondition(cond)
[10:59:39.521]                 }
[10:59:39.521]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.521]                 "immediateCondition"))) {
[10:59:39.521]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.521]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.521]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.521]                   if (TRUE && !signal) {
[10:59:39.521]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.521]                     {
[10:59:39.521]                       inherits <- base::inherits
[10:59:39.521]                       invokeRestart <- base::invokeRestart
[10:59:39.521]                       is.null <- base::is.null
[10:59:39.521]                       muffled <- FALSE
[10:59:39.521]                       if (inherits(cond, "message")) {
[10:59:39.521]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.521]                         if (muffled) 
[10:59:39.521]                           invokeRestart("muffleMessage")
[10:59:39.521]                       }
[10:59:39.521]                       else if (inherits(cond, "warning")) {
[10:59:39.521]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.521]                         if (muffled) 
[10:59:39.521]                           invokeRestart("muffleWarning")
[10:59:39.521]                       }
[10:59:39.521]                       else if (inherits(cond, "condition")) {
[10:59:39.521]                         if (!is.null(pattern)) {
[10:59:39.521]                           computeRestarts <- base::computeRestarts
[10:59:39.521]                           grepl <- base::grepl
[10:59:39.521]                           restarts <- computeRestarts(cond)
[10:59:39.521]                           for (restart in restarts) {
[10:59:39.521]                             name <- restart$name
[10:59:39.521]                             if (is.null(name)) 
[10:59:39.521]                               next
[10:59:39.521]                             if (!grepl(pattern, name)) 
[10:59:39.521]                               next
[10:59:39.521]                             invokeRestart(restart)
[10:59:39.521]                             muffled <- TRUE
[10:59:39.521]                             break
[10:59:39.521]                           }
[10:59:39.521]                         }
[10:59:39.521]                       }
[10:59:39.521]                       invisible(muffled)
[10:59:39.521]                     }
[10:59:39.521]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.521]                   }
[10:59:39.521]                 }
[10:59:39.521]                 else {
[10:59:39.521]                   if (TRUE) {
[10:59:39.521]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.521]                     {
[10:59:39.521]                       inherits <- base::inherits
[10:59:39.521]                       invokeRestart <- base::invokeRestart
[10:59:39.521]                       is.null <- base::is.null
[10:59:39.521]                       muffled <- FALSE
[10:59:39.521]                       if (inherits(cond, "message")) {
[10:59:39.521]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.521]                         if (muffled) 
[10:59:39.521]                           invokeRestart("muffleMessage")
[10:59:39.521]                       }
[10:59:39.521]                       else if (inherits(cond, "warning")) {
[10:59:39.521]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.521]                         if (muffled) 
[10:59:39.521]                           invokeRestart("muffleWarning")
[10:59:39.521]                       }
[10:59:39.521]                       else if (inherits(cond, "condition")) {
[10:59:39.521]                         if (!is.null(pattern)) {
[10:59:39.521]                           computeRestarts <- base::computeRestarts
[10:59:39.521]                           grepl <- base::grepl
[10:59:39.521]                           restarts <- computeRestarts(cond)
[10:59:39.521]                           for (restart in restarts) {
[10:59:39.521]                             name <- restart$name
[10:59:39.521]                             if (is.null(name)) 
[10:59:39.521]                               next
[10:59:39.521]                             if (!grepl(pattern, name)) 
[10:59:39.521]                               next
[10:59:39.521]                             invokeRestart(restart)
[10:59:39.521]                             muffled <- TRUE
[10:59:39.521]                             break
[10:59:39.521]                           }
[10:59:39.521]                         }
[10:59:39.521]                       }
[10:59:39.521]                       invisible(muffled)
[10:59:39.521]                     }
[10:59:39.521]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.521]                   }
[10:59:39.521]                 }
[10:59:39.521]             }
[10:59:39.521]         }))
[10:59:39.521]     }, error = function(ex) {
[10:59:39.521]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.521]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.521]                 ...future.rng), started = ...future.startTime, 
[10:59:39.521]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.521]             version = "1.8"), class = "FutureResult")
[10:59:39.521]     }, finally = {
[10:59:39.521]         if (!identical(...future.workdir, getwd())) 
[10:59:39.521]             setwd(...future.workdir)
[10:59:39.521]         {
[10:59:39.521]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.521]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.521]             }
[10:59:39.521]             base::options(...future.oldOptions)
[10:59:39.521]             if (.Platform$OS.type == "windows") {
[10:59:39.521]                 old_names <- names(...future.oldEnvVars)
[10:59:39.521]                 envs <- base::Sys.getenv()
[10:59:39.521]                 names <- names(envs)
[10:59:39.521]                 common <- intersect(names, old_names)
[10:59:39.521]                 added <- setdiff(names, old_names)
[10:59:39.521]                 removed <- setdiff(old_names, names)
[10:59:39.521]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.521]                   envs[common]]
[10:59:39.521]                 NAMES <- toupper(changed)
[10:59:39.521]                 args <- list()
[10:59:39.521]                 for (kk in seq_along(NAMES)) {
[10:59:39.521]                   name <- changed[[kk]]
[10:59:39.521]                   NAME <- NAMES[[kk]]
[10:59:39.521]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.521]                     next
[10:59:39.521]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.521]                 }
[10:59:39.521]                 NAMES <- toupper(added)
[10:59:39.521]                 for (kk in seq_along(NAMES)) {
[10:59:39.521]                   name <- added[[kk]]
[10:59:39.521]                   NAME <- NAMES[[kk]]
[10:59:39.521]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.521]                     next
[10:59:39.521]                   args[[name]] <- ""
[10:59:39.521]                 }
[10:59:39.521]                 NAMES <- toupper(removed)
[10:59:39.521]                 for (kk in seq_along(NAMES)) {
[10:59:39.521]                   name <- removed[[kk]]
[10:59:39.521]                   NAME <- NAMES[[kk]]
[10:59:39.521]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.521]                     next
[10:59:39.521]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.521]                 }
[10:59:39.521]                 if (length(args) > 0) 
[10:59:39.521]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.521]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.521]             }
[10:59:39.521]             else {
[10:59:39.521]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.521]             }
[10:59:39.521]             {
[10:59:39.521]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.521]                   0L) {
[10:59:39.521]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.521]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.521]                   base::options(opts)
[10:59:39.521]                 }
[10:59:39.521]                 {
[10:59:39.521]                   {
[10:59:39.521]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.521]                     NULL
[10:59:39.521]                   }
[10:59:39.521]                   options(future.plan = NULL)
[10:59:39.521]                   if (is.na(NA_character_)) 
[10:59:39.521]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.521]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.521]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.521]                     .init = FALSE)
[10:59:39.521]                 }
[10:59:39.521]             }
[10:59:39.521]         }
[10:59:39.521]     })
[10:59:39.521]     if (TRUE) {
[10:59:39.521]         base::sink(type = "output", split = FALSE)
[10:59:39.521]         if (TRUE) {
[10:59:39.521]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.521]         }
[10:59:39.521]         else {
[10:59:39.521]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.521]         }
[10:59:39.521]         base::close(...future.stdout)
[10:59:39.521]         ...future.stdout <- NULL
[10:59:39.521]     }
[10:59:39.521]     ...future.result$conditions <- ...future.conditions
[10:59:39.521]     ...future.result$finished <- base::Sys.time()
[10:59:39.521]     ...future.result
[10:59:39.521] }
[10:59:39.524] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[10:59:39.524] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[10:59:39.525] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[10:59:39.525] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[10:59:39.525] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[10:59:39.525] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[10:59:39.525] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[10:59:39.526] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[10:59:39.526] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[10:59:39.526] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[10:59:39.526] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[10:59:39.526] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[10:59:39.527] MultisessionFuture started
[10:59:39.527] - Launch lazy future ... done
[10:59:39.527] run() for ‘MultisessionFuture’ ... done
[10:59:39.527] Created future:
[10:59:39.527] MultisessionFuture:
[10:59:39.527] Label: ‘future_replicate-1’
[10:59:39.527] Expression:
[10:59:39.527] {
[10:59:39.527]     do.call(function(...) {
[10:59:39.527]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.527]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.527]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.527]             on.exit(options(oopts), add = TRUE)
[10:59:39.527]         }
[10:59:39.527]         {
[10:59:39.527]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.527]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.527]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.527]                   envir = globalenv(), inherits = FALSE)
[10:59:39.527]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.527]             })
[10:59:39.527]         }
[10:59:39.527]     }, args = future.call.arguments)
[10:59:39.527] }
[10:59:39.527] Lazy evaluation: FALSE
[10:59:39.527] Asynchronous evaluation: TRUE
[10:59:39.527] Local evaluation: TRUE
[10:59:39.527] Environment: R_GlobalEnv
[10:59:39.527] Capture standard output: TRUE
[10:59:39.527] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.527] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.527] Packages: <none>
[10:59:39.527] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.527] Resolved: FALSE
[10:59:39.527] Value: <not collected>
[10:59:39.527] Conditions captured: <none>
[10:59:39.527] Early signaling: FALSE
[10:59:39.527] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.527] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.538] Chunk #1 of 2 ... DONE
[10:59:39.538] Chunk #2 of 2 ...
[10:59:39.539]  - Finding globals in 'X' for chunk #2 ...
[10:59:39.539] getGlobalsAndPackages() ...
[10:59:39.539] Searching for globals...
[10:59:39.539] 
[10:59:39.539] Searching for globals ... DONE
[10:59:39.539] - globals: [0] <none>
[10:59:39.539] getGlobalsAndPackages() ... DONE
[10:59:39.539]    + additional globals found: [n=0] 
[10:59:39.539]    + additional namespaces needed: [n=0] 
[10:59:39.540]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:39.540]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.540]  - seeds: [3] <seeds>
[10:59:39.540]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.540] getGlobalsAndPackages() ...
[10:59:39.540] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.540] Resolving globals: FALSE
[10:59:39.540] Tweak future expression to call with '...' arguments ...
[10:59:39.540] {
[10:59:39.540]     do.call(function(...) {
[10:59:39.540]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.540]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.540]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.540]             on.exit(options(oopts), add = TRUE)
[10:59:39.540]         }
[10:59:39.540]         {
[10:59:39.540]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.540]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.540]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.540]                   envir = globalenv(), inherits = FALSE)
[10:59:39.540]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.540]             })
[10:59:39.540]         }
[10:59:39.540]     }, args = future.call.arguments)
[10:59:39.540] }
[10:59:39.541] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.541] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.541] 
[10:59:39.541] getGlobalsAndPackages() ... DONE
[10:59:39.541] run() for ‘Future’ ...
[10:59:39.541] - state: ‘created’
[10:59:39.541] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.556] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.556] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.556]   - Field: ‘node’
[10:59:39.557]   - Field: ‘label’
[10:59:39.557]   - Field: ‘local’
[10:59:39.557]   - Field: ‘owner’
[10:59:39.557]   - Field: ‘envir’
[10:59:39.557]   - Field: ‘workers’
[10:59:39.557]   - Field: ‘packages’
[10:59:39.557]   - Field: ‘gc’
[10:59:39.557]   - Field: ‘conditions’
[10:59:39.557]   - Field: ‘persistent’
[10:59:39.557]   - Field: ‘expr’
[10:59:39.557]   - Field: ‘uuid’
[10:59:39.557]   - Field: ‘seed’
[10:59:39.558]   - Field: ‘version’
[10:59:39.558]   - Field: ‘result’
[10:59:39.558]   - Field: ‘asynchronous’
[10:59:39.558]   - Field: ‘calls’
[10:59:39.558]   - Field: ‘globals’
[10:59:39.558]   - Field: ‘stdout’
[10:59:39.558]   - Field: ‘earlySignal’
[10:59:39.558]   - Field: ‘lazy’
[10:59:39.558]   - Field: ‘state’
[10:59:39.558] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.558] - Launch lazy future ...
[10:59:39.559] Packages needed by the future expression (n = 0): <none>
[10:59:39.559] Packages needed by future strategies (n = 0): <none>
[10:59:39.559] {
[10:59:39.559]     {
[10:59:39.559]         {
[10:59:39.559]             ...future.startTime <- base::Sys.time()
[10:59:39.559]             {
[10:59:39.559]                 {
[10:59:39.559]                   {
[10:59:39.559]                     {
[10:59:39.559]                       base::local({
[10:59:39.559]                         has_future <- base::requireNamespace("future", 
[10:59:39.559]                           quietly = TRUE)
[10:59:39.559]                         if (has_future) {
[10:59:39.559]                           ns <- base::getNamespace("future")
[10:59:39.559]                           version <- ns[[".package"]][["version"]]
[10:59:39.559]                           if (is.null(version)) 
[10:59:39.559]                             version <- utils::packageVersion("future")
[10:59:39.559]                         }
[10:59:39.559]                         else {
[10:59:39.559]                           version <- NULL
[10:59:39.559]                         }
[10:59:39.559]                         if (!has_future || version < "1.8.0") {
[10:59:39.559]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.559]                             "", base::R.version$version.string), 
[10:59:39.559]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.559]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.559]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.559]                               "release", "version")], collapse = " "), 
[10:59:39.559]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.559]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.559]                             info)
[10:59:39.559]                           info <- base::paste(info, collapse = "; ")
[10:59:39.559]                           if (!has_future) {
[10:59:39.559]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.559]                               info)
[10:59:39.559]                           }
[10:59:39.559]                           else {
[10:59:39.559]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.559]                               info, version)
[10:59:39.559]                           }
[10:59:39.559]                           base::stop(msg)
[10:59:39.559]                         }
[10:59:39.559]                       })
[10:59:39.559]                     }
[10:59:39.559]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.559]                     base::options(mc.cores = 1L)
[10:59:39.559]                   }
[10:59:39.559]                   ...future.strategy.old <- future::plan("list")
[10:59:39.559]                   options(future.plan = NULL)
[10:59:39.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.559]                 }
[10:59:39.559]                 ...future.workdir <- getwd()
[10:59:39.559]             }
[10:59:39.559]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.559]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.559]         }
[10:59:39.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.559]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.559]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.559]             base::names(...future.oldOptions))
[10:59:39.559]     }
[10:59:39.559]     if (FALSE) {
[10:59:39.559]     }
[10:59:39.559]     else {
[10:59:39.559]         if (TRUE) {
[10:59:39.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.559]                 open = "w")
[10:59:39.559]         }
[10:59:39.559]         else {
[10:59:39.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.559]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.559]         }
[10:59:39.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.559]             base::sink(type = "output", split = FALSE)
[10:59:39.559]             base::close(...future.stdout)
[10:59:39.559]         }, add = TRUE)
[10:59:39.559]     }
[10:59:39.559]     ...future.frame <- base::sys.nframe()
[10:59:39.559]     ...future.conditions <- base::list()
[10:59:39.559]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.559]     if (FALSE) {
[10:59:39.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.559]     }
[10:59:39.559]     ...future.result <- base::tryCatch({
[10:59:39.559]         base::withCallingHandlers({
[10:59:39.559]             ...future.value <- base::withVisible(base::local({
[10:59:39.559]                 ...future.makeSendCondition <- base::local({
[10:59:39.559]                   sendCondition <- NULL
[10:59:39.559]                   function(frame = 1L) {
[10:59:39.559]                     if (is.function(sendCondition)) 
[10:59:39.559]                       return(sendCondition)
[10:59:39.559]                     ns <- getNamespace("parallel")
[10:59:39.559]                     if (exists("sendData", mode = "function", 
[10:59:39.559]                       envir = ns)) {
[10:59:39.559]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.559]                         envir = ns)
[10:59:39.559]                       envir <- sys.frame(frame)
[10:59:39.559]                       master <- NULL
[10:59:39.559]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.559]                         !identical(envir, emptyenv())) {
[10:59:39.559]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.559]                           inherits = FALSE)) {
[10:59:39.559]                           master <- get("master", mode = "list", 
[10:59:39.559]                             envir = envir, inherits = FALSE)
[10:59:39.559]                           if (inherits(master, c("SOCKnode", 
[10:59:39.559]                             "SOCK0node"))) {
[10:59:39.559]                             sendCondition <<- function(cond) {
[10:59:39.559]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.559]                                 success = TRUE)
[10:59:39.559]                               parallel_sendData(master, data)
[10:59:39.559]                             }
[10:59:39.559]                             return(sendCondition)
[10:59:39.559]                           }
[10:59:39.559]                         }
[10:59:39.559]                         frame <- frame + 1L
[10:59:39.559]                         envir <- sys.frame(frame)
[10:59:39.559]                       }
[10:59:39.559]                     }
[10:59:39.559]                     sendCondition <<- function(cond) NULL
[10:59:39.559]                   }
[10:59:39.559]                 })
[10:59:39.559]                 withCallingHandlers({
[10:59:39.559]                   {
[10:59:39.559]                     do.call(function(...) {
[10:59:39.559]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.559]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.559]                         ...future.globals.maxSize)) {
[10:59:39.559]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.559]                         on.exit(options(oopts), add = TRUE)
[10:59:39.559]                       }
[10:59:39.559]                       {
[10:59:39.559]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.559]                           FUN = function(jj) {
[10:59:39.559]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.559]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.559]                               envir = globalenv(), inherits = FALSE)
[10:59:39.559]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.559]                           })
[10:59:39.559]                       }
[10:59:39.559]                     }, args = future.call.arguments)
[10:59:39.559]                   }
[10:59:39.559]                 }, immediateCondition = function(cond) {
[10:59:39.559]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.559]                   sendCondition(cond)
[10:59:39.559]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.559]                   {
[10:59:39.559]                     inherits <- base::inherits
[10:59:39.559]                     invokeRestart <- base::invokeRestart
[10:59:39.559]                     is.null <- base::is.null
[10:59:39.559]                     muffled <- FALSE
[10:59:39.559]                     if (inherits(cond, "message")) {
[10:59:39.559]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.559]                       if (muffled) 
[10:59:39.559]                         invokeRestart("muffleMessage")
[10:59:39.559]                     }
[10:59:39.559]                     else if (inherits(cond, "warning")) {
[10:59:39.559]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.559]                       if (muffled) 
[10:59:39.559]                         invokeRestart("muffleWarning")
[10:59:39.559]                     }
[10:59:39.559]                     else if (inherits(cond, "condition")) {
[10:59:39.559]                       if (!is.null(pattern)) {
[10:59:39.559]                         computeRestarts <- base::computeRestarts
[10:59:39.559]                         grepl <- base::grepl
[10:59:39.559]                         restarts <- computeRestarts(cond)
[10:59:39.559]                         for (restart in restarts) {
[10:59:39.559]                           name <- restart$name
[10:59:39.559]                           if (is.null(name)) 
[10:59:39.559]                             next
[10:59:39.559]                           if (!grepl(pattern, name)) 
[10:59:39.559]                             next
[10:59:39.559]                           invokeRestart(restart)
[10:59:39.559]                           muffled <- TRUE
[10:59:39.559]                           break
[10:59:39.559]                         }
[10:59:39.559]                       }
[10:59:39.559]                     }
[10:59:39.559]                     invisible(muffled)
[10:59:39.559]                   }
[10:59:39.559]                   muffleCondition(cond)
[10:59:39.559]                 })
[10:59:39.559]             }))
[10:59:39.559]             future::FutureResult(value = ...future.value$value, 
[10:59:39.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.559]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.559]                     ...future.globalenv.names))
[10:59:39.559]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.559]         }, condition = base::local({
[10:59:39.559]             c <- base::c
[10:59:39.559]             inherits <- base::inherits
[10:59:39.559]             invokeRestart <- base::invokeRestart
[10:59:39.559]             length <- base::length
[10:59:39.559]             list <- base::list
[10:59:39.559]             seq.int <- base::seq.int
[10:59:39.559]             signalCondition <- base::signalCondition
[10:59:39.559]             sys.calls <- base::sys.calls
[10:59:39.559]             `[[` <- base::`[[`
[10:59:39.559]             `+` <- base::`+`
[10:59:39.559]             `<<-` <- base::`<<-`
[10:59:39.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.559]                   3L)]
[10:59:39.559]             }
[10:59:39.559]             function(cond) {
[10:59:39.559]                 is_error <- inherits(cond, "error")
[10:59:39.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.559]                   NULL)
[10:59:39.559]                 if (is_error) {
[10:59:39.559]                   sessionInformation <- function() {
[10:59:39.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.559]                       search = base::search(), system = base::Sys.info())
[10:59:39.559]                   }
[10:59:39.559]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.559]                     cond$call), session = sessionInformation(), 
[10:59:39.559]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.559]                   signalCondition(cond)
[10:59:39.559]                 }
[10:59:39.559]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.559]                 "immediateCondition"))) {
[10:59:39.559]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.559]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.559]                   if (TRUE && !signal) {
[10:59:39.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.559]                     {
[10:59:39.559]                       inherits <- base::inherits
[10:59:39.559]                       invokeRestart <- base::invokeRestart
[10:59:39.559]                       is.null <- base::is.null
[10:59:39.559]                       muffled <- FALSE
[10:59:39.559]                       if (inherits(cond, "message")) {
[10:59:39.559]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.559]                         if (muffled) 
[10:59:39.559]                           invokeRestart("muffleMessage")
[10:59:39.559]                       }
[10:59:39.559]                       else if (inherits(cond, "warning")) {
[10:59:39.559]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.559]                         if (muffled) 
[10:59:39.559]                           invokeRestart("muffleWarning")
[10:59:39.559]                       }
[10:59:39.559]                       else if (inherits(cond, "condition")) {
[10:59:39.559]                         if (!is.null(pattern)) {
[10:59:39.559]                           computeRestarts <- base::computeRestarts
[10:59:39.559]                           grepl <- base::grepl
[10:59:39.559]                           restarts <- computeRestarts(cond)
[10:59:39.559]                           for (restart in restarts) {
[10:59:39.559]                             name <- restart$name
[10:59:39.559]                             if (is.null(name)) 
[10:59:39.559]                               next
[10:59:39.559]                             if (!grepl(pattern, name)) 
[10:59:39.559]                               next
[10:59:39.559]                             invokeRestart(restart)
[10:59:39.559]                             muffled <- TRUE
[10:59:39.559]                             break
[10:59:39.559]                           }
[10:59:39.559]                         }
[10:59:39.559]                       }
[10:59:39.559]                       invisible(muffled)
[10:59:39.559]                     }
[10:59:39.559]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.559]                   }
[10:59:39.559]                 }
[10:59:39.559]                 else {
[10:59:39.559]                   if (TRUE) {
[10:59:39.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.559]                     {
[10:59:39.559]                       inherits <- base::inherits
[10:59:39.559]                       invokeRestart <- base::invokeRestart
[10:59:39.559]                       is.null <- base::is.null
[10:59:39.559]                       muffled <- FALSE
[10:59:39.559]                       if (inherits(cond, "message")) {
[10:59:39.559]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.559]                         if (muffled) 
[10:59:39.559]                           invokeRestart("muffleMessage")
[10:59:39.559]                       }
[10:59:39.559]                       else if (inherits(cond, "warning")) {
[10:59:39.559]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.559]                         if (muffled) 
[10:59:39.559]                           invokeRestart("muffleWarning")
[10:59:39.559]                       }
[10:59:39.559]                       else if (inherits(cond, "condition")) {
[10:59:39.559]                         if (!is.null(pattern)) {
[10:59:39.559]                           computeRestarts <- base::computeRestarts
[10:59:39.559]                           grepl <- base::grepl
[10:59:39.559]                           restarts <- computeRestarts(cond)
[10:59:39.559]                           for (restart in restarts) {
[10:59:39.559]                             name <- restart$name
[10:59:39.559]                             if (is.null(name)) 
[10:59:39.559]                               next
[10:59:39.559]                             if (!grepl(pattern, name)) 
[10:59:39.559]                               next
[10:59:39.559]                             invokeRestart(restart)
[10:59:39.559]                             muffled <- TRUE
[10:59:39.559]                             break
[10:59:39.559]                           }
[10:59:39.559]                         }
[10:59:39.559]                       }
[10:59:39.559]                       invisible(muffled)
[10:59:39.559]                     }
[10:59:39.559]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.559]                   }
[10:59:39.559]                 }
[10:59:39.559]             }
[10:59:39.559]         }))
[10:59:39.559]     }, error = function(ex) {
[10:59:39.559]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.559]                 ...future.rng), started = ...future.startTime, 
[10:59:39.559]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.559]             version = "1.8"), class = "FutureResult")
[10:59:39.559]     }, finally = {
[10:59:39.559]         if (!identical(...future.workdir, getwd())) 
[10:59:39.559]             setwd(...future.workdir)
[10:59:39.559]         {
[10:59:39.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.559]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.559]             }
[10:59:39.559]             base::options(...future.oldOptions)
[10:59:39.559]             if (.Platform$OS.type == "windows") {
[10:59:39.559]                 old_names <- names(...future.oldEnvVars)
[10:59:39.559]                 envs <- base::Sys.getenv()
[10:59:39.559]                 names <- names(envs)
[10:59:39.559]                 common <- intersect(names, old_names)
[10:59:39.559]                 added <- setdiff(names, old_names)
[10:59:39.559]                 removed <- setdiff(old_names, names)
[10:59:39.559]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.559]                   envs[common]]
[10:59:39.559]                 NAMES <- toupper(changed)
[10:59:39.559]                 args <- list()
[10:59:39.559]                 for (kk in seq_along(NAMES)) {
[10:59:39.559]                   name <- changed[[kk]]
[10:59:39.559]                   NAME <- NAMES[[kk]]
[10:59:39.559]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.559]                     next
[10:59:39.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.559]                 }
[10:59:39.559]                 NAMES <- toupper(added)
[10:59:39.559]                 for (kk in seq_along(NAMES)) {
[10:59:39.559]                   name <- added[[kk]]
[10:59:39.559]                   NAME <- NAMES[[kk]]
[10:59:39.559]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.559]                     next
[10:59:39.559]                   args[[name]] <- ""
[10:59:39.559]                 }
[10:59:39.559]                 NAMES <- toupper(removed)
[10:59:39.559]                 for (kk in seq_along(NAMES)) {
[10:59:39.559]                   name <- removed[[kk]]
[10:59:39.559]                   NAME <- NAMES[[kk]]
[10:59:39.559]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.559]                     next
[10:59:39.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.559]                 }
[10:59:39.559]                 if (length(args) > 0) 
[10:59:39.559]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.559]             }
[10:59:39.559]             else {
[10:59:39.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.559]             }
[10:59:39.559]             {
[10:59:39.559]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.559]                   0L) {
[10:59:39.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.559]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.559]                   base::options(opts)
[10:59:39.559]                 }
[10:59:39.559]                 {
[10:59:39.559]                   {
[10:59:39.559]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.559]                     NULL
[10:59:39.559]                   }
[10:59:39.559]                   options(future.plan = NULL)
[10:59:39.559]                   if (is.na(NA_character_)) 
[10:59:39.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.559]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.559]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.559]                     .init = FALSE)
[10:59:39.559]                 }
[10:59:39.559]             }
[10:59:39.559]         }
[10:59:39.559]     })
[10:59:39.559]     if (TRUE) {
[10:59:39.559]         base::sink(type = "output", split = FALSE)
[10:59:39.559]         if (TRUE) {
[10:59:39.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.559]         }
[10:59:39.559]         else {
[10:59:39.559]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.559]         }
[10:59:39.559]         base::close(...future.stdout)
[10:59:39.559]         ...future.stdout <- NULL
[10:59:39.559]     }
[10:59:39.559]     ...future.result$conditions <- ...future.conditions
[10:59:39.559]     ...future.result$finished <- base::Sys.time()
[10:59:39.559]     ...future.result
[10:59:39.559] }
[10:59:39.562] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[10:59:39.562] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[10:59:39.562] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[10:59:39.563] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[10:59:39.563] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[10:59:39.563] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[10:59:39.563] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[10:59:39.564] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[10:59:39.564] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[10:59:39.564] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[10:59:39.565] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[10:59:39.565] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[10:59:39.565] MultisessionFuture started
[10:59:39.565] - Launch lazy future ... done
[10:59:39.565] run() for ‘MultisessionFuture’ ... done
[10:59:39.565] Created future:
[10:59:39.566] MultisessionFuture:
[10:59:39.566] Label: ‘future_replicate-2’
[10:59:39.566] Expression:
[10:59:39.566] {
[10:59:39.566]     do.call(function(...) {
[10:59:39.566]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.566]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.566]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.566]             on.exit(options(oopts), add = TRUE)
[10:59:39.566]         }
[10:59:39.566]         {
[10:59:39.566]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.566]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.566]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.566]                   envir = globalenv(), inherits = FALSE)
[10:59:39.566]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.566]             })
[10:59:39.566]         }
[10:59:39.566]     }, args = future.call.arguments)
[10:59:39.566] }
[10:59:39.566] Lazy evaluation: FALSE
[10:59:39.566] Asynchronous evaluation: TRUE
[10:59:39.566] Local evaluation: TRUE
[10:59:39.566] Environment: R_GlobalEnv
[10:59:39.566] Capture standard output: TRUE
[10:59:39.566] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.566] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.566] Packages: <none>
[10:59:39.566] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.566] Resolved: FALSE
[10:59:39.566] Value: <not collected>
[10:59:39.566] Conditions captured: <none>
[10:59:39.566] Early signaling: FALSE
[10:59:39.566] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.566] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.577] Chunk #2 of 2 ... DONE
[10:59:39.577] Launching 2 futures (chunks) ... DONE
[10:59:39.577] Resolving 2 futures (chunks) ...
[10:59:39.577] resolve() on list ...
[10:59:39.577]  recursive: 0
[10:59:39.577]  length: 2
[10:59:39.578] 
[10:59:39.578] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.578] - Validating connection of MultisessionFuture
[10:59:39.578] - received message: FutureResult
[10:59:39.578] - Received FutureResult
[10:59:39.578] - Erased future from FutureRegistry
[10:59:39.579] result() for ClusterFuture ...
[10:59:39.579] - result already collected: FutureResult
[10:59:39.579] result() for ClusterFuture ... done
[10:59:39.579] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.579] Future #1
[10:59:39.579] result() for ClusterFuture ...
[10:59:39.579] - result already collected: FutureResult
[10:59:39.579] result() for ClusterFuture ... done
[10:59:39.579] result() for ClusterFuture ...
[10:59:39.579] - result already collected: FutureResult
[10:59:39.579] result() for ClusterFuture ... done
[10:59:39.579] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:59:39.580] - nx: 2
[10:59:39.580] - relay: TRUE
[10:59:39.580] - stdout: TRUE
[10:59:39.580] - signal: TRUE
[10:59:39.580] - resignal: FALSE
[10:59:39.580] - force: TRUE
[10:59:39.580] - relayed: [n=2] FALSE, FALSE
[10:59:39.580] - queued futures: [n=2] FALSE, FALSE
[10:59:39.580]  - until=1
[10:59:39.580]  - relaying element #1
[10:59:39.580] result() for ClusterFuture ...
[10:59:39.580] - result already collected: FutureResult
[10:59:39.580] result() for ClusterFuture ... done
[10:59:39.581] result() for ClusterFuture ...
[10:59:39.581] - result already collected: FutureResult
[10:59:39.581] result() for ClusterFuture ... done
[10:59:39.581] result() for ClusterFuture ...
[10:59:39.581] - result already collected: FutureResult
[10:59:39.581] result() for ClusterFuture ... done
[10:59:39.581] result() for ClusterFuture ...
[10:59:39.581] - result already collected: FutureResult
[10:59:39.581] result() for ClusterFuture ... done
[10:59:39.581] - relayed: [n=2] TRUE, FALSE
[10:59:39.581] - queued futures: [n=2] TRUE, FALSE
[10:59:39.582] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:59:39.582]  length: 1 (resolved future 1)
[10:59:39.607] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.607] - Validating connection of MultisessionFuture
[10:59:39.608] - received message: FutureResult
[10:59:39.608] - Received FutureResult
[10:59:39.608] - Erased future from FutureRegistry
[10:59:39.608] result() for ClusterFuture ...
[10:59:39.608] - result already collected: FutureResult
[10:59:39.608] result() for ClusterFuture ... done
[10:59:39.608] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.608] Future #2
[10:59:39.608] result() for ClusterFuture ...
[10:59:39.609] - result already collected: FutureResult
[10:59:39.609] result() for ClusterFuture ... done
[10:59:39.609] result() for ClusterFuture ...
[10:59:39.609] - result already collected: FutureResult
[10:59:39.609] result() for ClusterFuture ... done
[10:59:39.609] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:59:39.609] - nx: 2
[10:59:39.609] - relay: TRUE
[10:59:39.609] - stdout: TRUE
[10:59:39.609] - signal: TRUE
[10:59:39.609] - resignal: FALSE
[10:59:39.609] - force: TRUE
[10:59:39.610] - relayed: [n=2] TRUE, FALSE
[10:59:39.610] - queued futures: [n=2] TRUE, FALSE
[10:59:39.610]  - until=2
[10:59:39.610]  - relaying element #2
[10:59:39.610] result() for ClusterFuture ...
[10:59:39.610] - result already collected: FutureResult
[10:59:39.610] result() for ClusterFuture ... done
[10:59:39.610] result() for ClusterFuture ...
[10:59:39.610] - result already collected: FutureResult
[10:59:39.610] result() for ClusterFuture ... done
[10:59:39.610] result() for ClusterFuture ...
[10:59:39.610] - result already collected: FutureResult
[10:59:39.610] result() for ClusterFuture ... done
[10:59:39.611] result() for ClusterFuture ...
[10:59:39.611] - result already collected: FutureResult
[10:59:39.611] result() for ClusterFuture ... done
[10:59:39.611] - relayed: [n=2] TRUE, TRUE
[10:59:39.611] - queued futures: [n=2] TRUE, TRUE
[10:59:39.611] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:59:39.611]  length: 0 (resolved future 2)
[10:59:39.611] Relaying remaining futures
[10:59:39.611] signalConditionsASAP(NULL, pos=0) ...
[10:59:39.611] - nx: 2
[10:59:39.611] - relay: TRUE
[10:59:39.611] - stdout: TRUE
[10:59:39.612] - signal: TRUE
[10:59:39.612] - resignal: FALSE
[10:59:39.612] - force: TRUE
[10:59:39.612] - relayed: [n=2] TRUE, TRUE
[10:59:39.612] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:39.612] - relayed: [n=2] TRUE, TRUE
[10:59:39.612] - queued futures: [n=2] TRUE, TRUE
[10:59:39.612] signalConditionsASAP(NULL, pos=0) ... done
[10:59:39.612] resolve() on list ... DONE
[10:59:39.612] result() for ClusterFuture ...
[10:59:39.612] - result already collected: FutureResult
[10:59:39.612] result() for ClusterFuture ... done
[10:59:39.613] result() for ClusterFuture ...
[10:59:39.613] - result already collected: FutureResult
[10:59:39.613] result() for ClusterFuture ... done
[10:59:39.613] result() for ClusterFuture ...
[10:59:39.613] - result already collected: FutureResult
[10:59:39.613] result() for ClusterFuture ... done
[10:59:39.613] result() for ClusterFuture ...
[10:59:39.613] - result already collected: FutureResult
[10:59:39.613] result() for ClusterFuture ... done
[10:59:39.613]  - Number of value chunks collected: 2
[10:59:39.613] Resolving 2 futures (chunks) ... DONE
[10:59:39.613] Reducing values from 2 chunks ...
[10:59:39.614]  - Number of values collected after concatenation: 5
[10:59:39.614]  - Number of values expected: 5
[10:59:39.614] Reducing values from 2 chunks ... DONE
[10:59:39.614] future_lapply() ... DONE
[10:59:39.614] future_lapply() ...
[10:59:39.614] Generating random seeds ...
[10:59:39.614] Generating random seed streams for 5 elements ...
[10:59:39.615] Generating random seed streams for 5 elements ... DONE
[10:59:39.615] Generating random seeds ... DONE
[10:59:39.615] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:39.617] Number of chunks: 2
[10:59:39.617] getGlobalsAndPackagesXApply() ...
[10:59:39.617]  - future.globals: TRUE
[10:59:39.617] getGlobalsAndPackages() ...
[10:59:39.617] Searching for globals...
[10:59:39.618] - globals found: [2] ‘FUN’, ‘sample’
[10:59:39.618] Searching for globals ... DONE
[10:59:39.618] Resolving globals: FALSE
[10:59:39.619] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:39.619] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:39.619] - globals: [1] ‘FUN’
[10:59:39.619] 
[10:59:39.619] getGlobalsAndPackages() ... DONE
[10:59:39.619]  - globals found/used: [n=1] ‘FUN’
[10:59:39.619]  - needed namespaces: [n=0] 
[10:59:39.619] Finding globals ... DONE
[10:59:39.620]  - use_args: TRUE
[10:59:39.620]  - Getting '...' globals ...
[10:59:39.620] resolve() on list ...
[10:59:39.620]  recursive: 0
[10:59:39.620]  length: 1
[10:59:39.620]  elements: ‘...’
[10:59:39.620]  length: 0 (resolved future 1)
[10:59:39.620] resolve() on list ... DONE
[10:59:39.620]    - '...' content: [n=0] 
[10:59:39.621] List of 1
[10:59:39.621]  $ ...: list()
[10:59:39.621]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.621]  - attr(*, "where")=List of 1
[10:59:39.621]   ..$ ...:<environment: 0x56262ffa9e60> 
[10:59:39.621]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.621]  - attr(*, "resolved")= logi TRUE
[10:59:39.621]  - attr(*, "total_size")= num NA
[10:59:39.623]  - Getting '...' globals ... DONE
[10:59:39.623] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:39.623] List of 2
[10:59:39.623]  $ ...future.FUN:function (...)  
[10:59:39.623]  $ ...          : list()
[10:59:39.623]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.623]  - attr(*, "where")=List of 2
[10:59:39.623]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:39.623]   ..$ ...          :<environment: 0x56262ffa9e60> 
[10:59:39.623]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.623]  - attr(*, "resolved")= logi FALSE
[10:59:39.623]  - attr(*, "total_size")= num 7184
[10:59:39.626] Packages to be attached in all futures: [n=0] 
[10:59:39.626] getGlobalsAndPackagesXApply() ... DONE
[10:59:39.626] Number of futures (= number of chunks): 2
[10:59:39.626] Launching 2 futures (chunks) ...
[10:59:39.626] Chunk #1 of 2 ...
[10:59:39.626]  - Finding globals in 'X' for chunk #1 ...
[10:59:39.626] getGlobalsAndPackages() ...
[10:59:39.626] Searching for globals...
[10:59:39.627] 
[10:59:39.627] Searching for globals ... DONE
[10:59:39.627] - globals: [0] <none>
[10:59:39.627] getGlobalsAndPackages() ... DONE
[10:59:39.627]    + additional globals found: [n=0] 
[10:59:39.627]    + additional namespaces needed: [n=0] 
[10:59:39.627]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:39.627]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.627]  - seeds: [2] <seeds>
[10:59:39.627]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.628] getGlobalsAndPackages() ...
[10:59:39.628] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.628] Resolving globals: FALSE
[10:59:39.628] Tweak future expression to call with '...' arguments ...
[10:59:39.628] {
[10:59:39.628]     do.call(function(...) {
[10:59:39.628]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.628]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.628]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.628]             on.exit(options(oopts), add = TRUE)
[10:59:39.628]         }
[10:59:39.628]         {
[10:59:39.628]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.628]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.628]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.628]                   envir = globalenv(), inherits = FALSE)
[10:59:39.628]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.628]             })
[10:59:39.628]         }
[10:59:39.628]     }, args = future.call.arguments)
[10:59:39.628] }
[10:59:39.628] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.629] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.629] 
[10:59:39.629] getGlobalsAndPackages() ... DONE
[10:59:39.629] run() for ‘Future’ ...
[10:59:39.629] - state: ‘created’
[10:59:39.629] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.643] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.643] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.643]   - Field: ‘node’
[10:59:39.643]   - Field: ‘label’
[10:59:39.643]   - Field: ‘local’
[10:59:39.643]   - Field: ‘owner’
[10:59:39.643]   - Field: ‘envir’
[10:59:39.644]   - Field: ‘workers’
[10:59:39.644]   - Field: ‘packages’
[10:59:39.644]   - Field: ‘gc’
[10:59:39.644]   - Field: ‘conditions’
[10:59:39.644]   - Field: ‘persistent’
[10:59:39.644]   - Field: ‘expr’
[10:59:39.644]   - Field: ‘uuid’
[10:59:39.644]   - Field: ‘seed’
[10:59:39.644]   - Field: ‘version’
[10:59:39.644]   - Field: ‘result’
[10:59:39.644]   - Field: ‘asynchronous’
[10:59:39.644]   - Field: ‘calls’
[10:59:39.645]   - Field: ‘globals’
[10:59:39.645]   - Field: ‘stdout’
[10:59:39.645]   - Field: ‘earlySignal’
[10:59:39.645]   - Field: ‘lazy’
[10:59:39.645]   - Field: ‘state’
[10:59:39.645] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.645] - Launch lazy future ...
[10:59:39.645] Packages needed by the future expression (n = 0): <none>
[10:59:39.645] Packages needed by future strategies (n = 0): <none>
[10:59:39.646] {
[10:59:39.646]     {
[10:59:39.646]         {
[10:59:39.646]             ...future.startTime <- base::Sys.time()
[10:59:39.646]             {
[10:59:39.646]                 {
[10:59:39.646]                   {
[10:59:39.646]                     {
[10:59:39.646]                       base::local({
[10:59:39.646]                         has_future <- base::requireNamespace("future", 
[10:59:39.646]                           quietly = TRUE)
[10:59:39.646]                         if (has_future) {
[10:59:39.646]                           ns <- base::getNamespace("future")
[10:59:39.646]                           version <- ns[[".package"]][["version"]]
[10:59:39.646]                           if (is.null(version)) 
[10:59:39.646]                             version <- utils::packageVersion("future")
[10:59:39.646]                         }
[10:59:39.646]                         else {
[10:59:39.646]                           version <- NULL
[10:59:39.646]                         }
[10:59:39.646]                         if (!has_future || version < "1.8.0") {
[10:59:39.646]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.646]                             "", base::R.version$version.string), 
[10:59:39.646]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.646]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.646]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.646]                               "release", "version")], collapse = " "), 
[10:59:39.646]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.646]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.646]                             info)
[10:59:39.646]                           info <- base::paste(info, collapse = "; ")
[10:59:39.646]                           if (!has_future) {
[10:59:39.646]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.646]                               info)
[10:59:39.646]                           }
[10:59:39.646]                           else {
[10:59:39.646]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.646]                               info, version)
[10:59:39.646]                           }
[10:59:39.646]                           base::stop(msg)
[10:59:39.646]                         }
[10:59:39.646]                       })
[10:59:39.646]                     }
[10:59:39.646]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.646]                     base::options(mc.cores = 1L)
[10:59:39.646]                   }
[10:59:39.646]                   ...future.strategy.old <- future::plan("list")
[10:59:39.646]                   options(future.plan = NULL)
[10:59:39.646]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.646]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.646]                 }
[10:59:39.646]                 ...future.workdir <- getwd()
[10:59:39.646]             }
[10:59:39.646]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.646]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.646]         }
[10:59:39.646]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.646]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.646]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.646]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.646]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.646]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.646]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.646]             base::names(...future.oldOptions))
[10:59:39.646]     }
[10:59:39.646]     if (FALSE) {
[10:59:39.646]     }
[10:59:39.646]     else {
[10:59:39.646]         if (TRUE) {
[10:59:39.646]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.646]                 open = "w")
[10:59:39.646]         }
[10:59:39.646]         else {
[10:59:39.646]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.646]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.646]         }
[10:59:39.646]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.646]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.646]             base::sink(type = "output", split = FALSE)
[10:59:39.646]             base::close(...future.stdout)
[10:59:39.646]         }, add = TRUE)
[10:59:39.646]     }
[10:59:39.646]     ...future.frame <- base::sys.nframe()
[10:59:39.646]     ...future.conditions <- base::list()
[10:59:39.646]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.646]     if (FALSE) {
[10:59:39.646]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.646]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.646]     }
[10:59:39.646]     ...future.result <- base::tryCatch({
[10:59:39.646]         base::withCallingHandlers({
[10:59:39.646]             ...future.value <- base::withVisible(base::local({
[10:59:39.646]                 ...future.makeSendCondition <- base::local({
[10:59:39.646]                   sendCondition <- NULL
[10:59:39.646]                   function(frame = 1L) {
[10:59:39.646]                     if (is.function(sendCondition)) 
[10:59:39.646]                       return(sendCondition)
[10:59:39.646]                     ns <- getNamespace("parallel")
[10:59:39.646]                     if (exists("sendData", mode = "function", 
[10:59:39.646]                       envir = ns)) {
[10:59:39.646]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.646]                         envir = ns)
[10:59:39.646]                       envir <- sys.frame(frame)
[10:59:39.646]                       master <- NULL
[10:59:39.646]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.646]                         !identical(envir, emptyenv())) {
[10:59:39.646]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.646]                           inherits = FALSE)) {
[10:59:39.646]                           master <- get("master", mode = "list", 
[10:59:39.646]                             envir = envir, inherits = FALSE)
[10:59:39.646]                           if (inherits(master, c("SOCKnode", 
[10:59:39.646]                             "SOCK0node"))) {
[10:59:39.646]                             sendCondition <<- function(cond) {
[10:59:39.646]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.646]                                 success = TRUE)
[10:59:39.646]                               parallel_sendData(master, data)
[10:59:39.646]                             }
[10:59:39.646]                             return(sendCondition)
[10:59:39.646]                           }
[10:59:39.646]                         }
[10:59:39.646]                         frame <- frame + 1L
[10:59:39.646]                         envir <- sys.frame(frame)
[10:59:39.646]                       }
[10:59:39.646]                     }
[10:59:39.646]                     sendCondition <<- function(cond) NULL
[10:59:39.646]                   }
[10:59:39.646]                 })
[10:59:39.646]                 withCallingHandlers({
[10:59:39.646]                   {
[10:59:39.646]                     do.call(function(...) {
[10:59:39.646]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.646]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.646]                         ...future.globals.maxSize)) {
[10:59:39.646]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.646]                         on.exit(options(oopts), add = TRUE)
[10:59:39.646]                       }
[10:59:39.646]                       {
[10:59:39.646]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.646]                           FUN = function(jj) {
[10:59:39.646]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.646]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.646]                               envir = globalenv(), inherits = FALSE)
[10:59:39.646]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.646]                           })
[10:59:39.646]                       }
[10:59:39.646]                     }, args = future.call.arguments)
[10:59:39.646]                   }
[10:59:39.646]                 }, immediateCondition = function(cond) {
[10:59:39.646]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.646]                   sendCondition(cond)
[10:59:39.646]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.646]                   {
[10:59:39.646]                     inherits <- base::inherits
[10:59:39.646]                     invokeRestart <- base::invokeRestart
[10:59:39.646]                     is.null <- base::is.null
[10:59:39.646]                     muffled <- FALSE
[10:59:39.646]                     if (inherits(cond, "message")) {
[10:59:39.646]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.646]                       if (muffled) 
[10:59:39.646]                         invokeRestart("muffleMessage")
[10:59:39.646]                     }
[10:59:39.646]                     else if (inherits(cond, "warning")) {
[10:59:39.646]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.646]                       if (muffled) 
[10:59:39.646]                         invokeRestart("muffleWarning")
[10:59:39.646]                     }
[10:59:39.646]                     else if (inherits(cond, "condition")) {
[10:59:39.646]                       if (!is.null(pattern)) {
[10:59:39.646]                         computeRestarts <- base::computeRestarts
[10:59:39.646]                         grepl <- base::grepl
[10:59:39.646]                         restarts <- computeRestarts(cond)
[10:59:39.646]                         for (restart in restarts) {
[10:59:39.646]                           name <- restart$name
[10:59:39.646]                           if (is.null(name)) 
[10:59:39.646]                             next
[10:59:39.646]                           if (!grepl(pattern, name)) 
[10:59:39.646]                             next
[10:59:39.646]                           invokeRestart(restart)
[10:59:39.646]                           muffled <- TRUE
[10:59:39.646]                           break
[10:59:39.646]                         }
[10:59:39.646]                       }
[10:59:39.646]                     }
[10:59:39.646]                     invisible(muffled)
[10:59:39.646]                   }
[10:59:39.646]                   muffleCondition(cond)
[10:59:39.646]                 })
[10:59:39.646]             }))
[10:59:39.646]             future::FutureResult(value = ...future.value$value, 
[10:59:39.646]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.646]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.646]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.646]                     ...future.globalenv.names))
[10:59:39.646]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.646]         }, condition = base::local({
[10:59:39.646]             c <- base::c
[10:59:39.646]             inherits <- base::inherits
[10:59:39.646]             invokeRestart <- base::invokeRestart
[10:59:39.646]             length <- base::length
[10:59:39.646]             list <- base::list
[10:59:39.646]             seq.int <- base::seq.int
[10:59:39.646]             signalCondition <- base::signalCondition
[10:59:39.646]             sys.calls <- base::sys.calls
[10:59:39.646]             `[[` <- base::`[[`
[10:59:39.646]             `+` <- base::`+`
[10:59:39.646]             `<<-` <- base::`<<-`
[10:59:39.646]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.646]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.646]                   3L)]
[10:59:39.646]             }
[10:59:39.646]             function(cond) {
[10:59:39.646]                 is_error <- inherits(cond, "error")
[10:59:39.646]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.646]                   NULL)
[10:59:39.646]                 if (is_error) {
[10:59:39.646]                   sessionInformation <- function() {
[10:59:39.646]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.646]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.646]                       search = base::search(), system = base::Sys.info())
[10:59:39.646]                   }
[10:59:39.646]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.646]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.646]                     cond$call), session = sessionInformation(), 
[10:59:39.646]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.646]                   signalCondition(cond)
[10:59:39.646]                 }
[10:59:39.646]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.646]                 "immediateCondition"))) {
[10:59:39.646]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.646]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.646]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.646]                   if (TRUE && !signal) {
[10:59:39.646]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.646]                     {
[10:59:39.646]                       inherits <- base::inherits
[10:59:39.646]                       invokeRestart <- base::invokeRestart
[10:59:39.646]                       is.null <- base::is.null
[10:59:39.646]                       muffled <- FALSE
[10:59:39.646]                       if (inherits(cond, "message")) {
[10:59:39.646]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.646]                         if (muffled) 
[10:59:39.646]                           invokeRestart("muffleMessage")
[10:59:39.646]                       }
[10:59:39.646]                       else if (inherits(cond, "warning")) {
[10:59:39.646]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.646]                         if (muffled) 
[10:59:39.646]                           invokeRestart("muffleWarning")
[10:59:39.646]                       }
[10:59:39.646]                       else if (inherits(cond, "condition")) {
[10:59:39.646]                         if (!is.null(pattern)) {
[10:59:39.646]                           computeRestarts <- base::computeRestarts
[10:59:39.646]                           grepl <- base::grepl
[10:59:39.646]                           restarts <- computeRestarts(cond)
[10:59:39.646]                           for (restart in restarts) {
[10:59:39.646]                             name <- restart$name
[10:59:39.646]                             if (is.null(name)) 
[10:59:39.646]                               next
[10:59:39.646]                             if (!grepl(pattern, name)) 
[10:59:39.646]                               next
[10:59:39.646]                             invokeRestart(restart)
[10:59:39.646]                             muffled <- TRUE
[10:59:39.646]                             break
[10:59:39.646]                           }
[10:59:39.646]                         }
[10:59:39.646]                       }
[10:59:39.646]                       invisible(muffled)
[10:59:39.646]                     }
[10:59:39.646]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.646]                   }
[10:59:39.646]                 }
[10:59:39.646]                 else {
[10:59:39.646]                   if (TRUE) {
[10:59:39.646]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.646]                     {
[10:59:39.646]                       inherits <- base::inherits
[10:59:39.646]                       invokeRestart <- base::invokeRestart
[10:59:39.646]                       is.null <- base::is.null
[10:59:39.646]                       muffled <- FALSE
[10:59:39.646]                       if (inherits(cond, "message")) {
[10:59:39.646]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.646]                         if (muffled) 
[10:59:39.646]                           invokeRestart("muffleMessage")
[10:59:39.646]                       }
[10:59:39.646]                       else if (inherits(cond, "warning")) {
[10:59:39.646]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.646]                         if (muffled) 
[10:59:39.646]                           invokeRestart("muffleWarning")
[10:59:39.646]                       }
[10:59:39.646]                       else if (inherits(cond, "condition")) {
[10:59:39.646]                         if (!is.null(pattern)) {
[10:59:39.646]                           computeRestarts <- base::computeRestarts
[10:59:39.646]                           grepl <- base::grepl
[10:59:39.646]                           restarts <- computeRestarts(cond)
[10:59:39.646]                           for (restart in restarts) {
[10:59:39.646]                             name <- restart$name
[10:59:39.646]                             if (is.null(name)) 
[10:59:39.646]                               next
[10:59:39.646]                             if (!grepl(pattern, name)) 
[10:59:39.646]                               next
[10:59:39.646]                             invokeRestart(restart)
[10:59:39.646]                             muffled <- TRUE
[10:59:39.646]                             break
[10:59:39.646]                           }
[10:59:39.646]                         }
[10:59:39.646]                       }
[10:59:39.646]                       invisible(muffled)
[10:59:39.646]                     }
[10:59:39.646]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.646]                   }
[10:59:39.646]                 }
[10:59:39.646]             }
[10:59:39.646]         }))
[10:59:39.646]     }, error = function(ex) {
[10:59:39.646]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.646]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.646]                 ...future.rng), started = ...future.startTime, 
[10:59:39.646]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.646]             version = "1.8"), class = "FutureResult")
[10:59:39.646]     }, finally = {
[10:59:39.646]         if (!identical(...future.workdir, getwd())) 
[10:59:39.646]             setwd(...future.workdir)
[10:59:39.646]         {
[10:59:39.646]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.646]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.646]             }
[10:59:39.646]             base::options(...future.oldOptions)
[10:59:39.646]             if (.Platform$OS.type == "windows") {
[10:59:39.646]                 old_names <- names(...future.oldEnvVars)
[10:59:39.646]                 envs <- base::Sys.getenv()
[10:59:39.646]                 names <- names(envs)
[10:59:39.646]                 common <- intersect(names, old_names)
[10:59:39.646]                 added <- setdiff(names, old_names)
[10:59:39.646]                 removed <- setdiff(old_names, names)
[10:59:39.646]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.646]                   envs[common]]
[10:59:39.646]                 NAMES <- toupper(changed)
[10:59:39.646]                 args <- list()
[10:59:39.646]                 for (kk in seq_along(NAMES)) {
[10:59:39.646]                   name <- changed[[kk]]
[10:59:39.646]                   NAME <- NAMES[[kk]]
[10:59:39.646]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.646]                     next
[10:59:39.646]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.646]                 }
[10:59:39.646]                 NAMES <- toupper(added)
[10:59:39.646]                 for (kk in seq_along(NAMES)) {
[10:59:39.646]                   name <- added[[kk]]
[10:59:39.646]                   NAME <- NAMES[[kk]]
[10:59:39.646]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.646]                     next
[10:59:39.646]                   args[[name]] <- ""
[10:59:39.646]                 }
[10:59:39.646]                 NAMES <- toupper(removed)
[10:59:39.646]                 for (kk in seq_along(NAMES)) {
[10:59:39.646]                   name <- removed[[kk]]
[10:59:39.646]                   NAME <- NAMES[[kk]]
[10:59:39.646]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.646]                     next
[10:59:39.646]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.646]                 }
[10:59:39.646]                 if (length(args) > 0) 
[10:59:39.646]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.646]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.646]             }
[10:59:39.646]             else {
[10:59:39.646]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.646]             }
[10:59:39.646]             {
[10:59:39.646]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.646]                   0L) {
[10:59:39.646]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.646]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.646]                   base::options(opts)
[10:59:39.646]                 }
[10:59:39.646]                 {
[10:59:39.646]                   {
[10:59:39.646]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.646]                     NULL
[10:59:39.646]                   }
[10:59:39.646]                   options(future.plan = NULL)
[10:59:39.646]                   if (is.na(NA_character_)) 
[10:59:39.646]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.646]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.646]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.646]                     .init = FALSE)
[10:59:39.646]                 }
[10:59:39.646]             }
[10:59:39.646]         }
[10:59:39.646]     })
[10:59:39.646]     if (TRUE) {
[10:59:39.646]         base::sink(type = "output", split = FALSE)
[10:59:39.646]         if (TRUE) {
[10:59:39.646]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.646]         }
[10:59:39.646]         else {
[10:59:39.646]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.646]         }
[10:59:39.646]         base::close(...future.stdout)
[10:59:39.646]         ...future.stdout <- NULL
[10:59:39.646]     }
[10:59:39.646]     ...future.result$conditions <- ...future.conditions
[10:59:39.646]     ...future.result$finished <- base::Sys.time()
[10:59:39.646]     ...future.result
[10:59:39.646] }
[10:59:39.649] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[10:59:39.649] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[10:59:39.649] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[10:59:39.649] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[10:59:39.649] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[10:59:39.650] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[10:59:39.650] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[10:59:39.650] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[10:59:39.650] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[10:59:39.650] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[10:59:39.651] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[10:59:39.651] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[10:59:39.651] MultisessionFuture started
[10:59:39.651] - Launch lazy future ... done
[10:59:39.651] run() for ‘MultisessionFuture’ ... done
[10:59:39.652] Created future:
[10:59:39.652] MultisessionFuture:
[10:59:39.652] Label: ‘future_replicate-1’
[10:59:39.652] Expression:
[10:59:39.652] {
[10:59:39.652]     do.call(function(...) {
[10:59:39.652]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.652]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.652]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.652]             on.exit(options(oopts), add = TRUE)
[10:59:39.652]         }
[10:59:39.652]         {
[10:59:39.652]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.652]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.652]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.652]                   envir = globalenv(), inherits = FALSE)
[10:59:39.652]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.652]             })
[10:59:39.652]         }
[10:59:39.652]     }, args = future.call.arguments)
[10:59:39.652] }
[10:59:39.652] Lazy evaluation: FALSE
[10:59:39.652] Asynchronous evaluation: TRUE
[10:59:39.652] Local evaluation: TRUE
[10:59:39.652] Environment: R_GlobalEnv
[10:59:39.652] Capture standard output: TRUE
[10:59:39.652] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.652] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.652] Packages: <none>
[10:59:39.652] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.652] Resolved: FALSE
[10:59:39.652] Value: <not collected>
[10:59:39.652] Conditions captured: <none>
[10:59:39.652] Early signaling: FALSE
[10:59:39.652] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.652] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.663] Chunk #1 of 2 ... DONE
[10:59:39.663] Chunk #2 of 2 ...
[10:59:39.663]  - Finding globals in 'X' for chunk #2 ...
[10:59:39.663] getGlobalsAndPackages() ...
[10:59:39.663] Searching for globals...
[10:59:39.664] 
[10:59:39.664] Searching for globals ... DONE
[10:59:39.664] - globals: [0] <none>
[10:59:39.664] getGlobalsAndPackages() ... DONE
[10:59:39.664]    + additional globals found: [n=0] 
[10:59:39.664]    + additional namespaces needed: [n=0] 
[10:59:39.664]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:39.664]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.664]  - seeds: [3] <seeds>
[10:59:39.664]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.665] getGlobalsAndPackages() ...
[10:59:39.665] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.665] Resolving globals: FALSE
[10:59:39.665] Tweak future expression to call with '...' arguments ...
[10:59:39.665] {
[10:59:39.665]     do.call(function(...) {
[10:59:39.665]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.665]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.665]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.665]             on.exit(options(oopts), add = TRUE)
[10:59:39.665]         }
[10:59:39.665]         {
[10:59:39.665]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.665]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.665]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.665]                   envir = globalenv(), inherits = FALSE)
[10:59:39.665]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.665]             })
[10:59:39.665]         }
[10:59:39.665]     }, args = future.call.arguments)
[10:59:39.665] }
[10:59:39.665] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.665] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.666] 
[10:59:39.666] getGlobalsAndPackages() ... DONE
[10:59:39.666] run() for ‘Future’ ...
[10:59:39.666] - state: ‘created’
[10:59:39.666] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.680] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.680] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.680]   - Field: ‘node’
[10:59:39.680]   - Field: ‘label’
[10:59:39.680]   - Field: ‘local’
[10:59:39.680]   - Field: ‘owner’
[10:59:39.680]   - Field: ‘envir’
[10:59:39.680]   - Field: ‘workers’
[10:59:39.681]   - Field: ‘packages’
[10:59:39.681]   - Field: ‘gc’
[10:59:39.681]   - Field: ‘conditions’
[10:59:39.681]   - Field: ‘persistent’
[10:59:39.681]   - Field: ‘expr’
[10:59:39.681]   - Field: ‘uuid’
[10:59:39.681]   - Field: ‘seed’
[10:59:39.681]   - Field: ‘version’
[10:59:39.681]   - Field: ‘result’
[10:59:39.681]   - Field: ‘asynchronous’
[10:59:39.681]   - Field: ‘calls’
[10:59:39.681]   - Field: ‘globals’
[10:59:39.682]   - Field: ‘stdout’
[10:59:39.682]   - Field: ‘earlySignal’
[10:59:39.682]   - Field: ‘lazy’
[10:59:39.682]   - Field: ‘state’
[10:59:39.682] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.682] - Launch lazy future ...
[10:59:39.682] Packages needed by the future expression (n = 0): <none>
[10:59:39.682] Packages needed by future strategies (n = 0): <none>
[10:59:39.683] {
[10:59:39.683]     {
[10:59:39.683]         {
[10:59:39.683]             ...future.startTime <- base::Sys.time()
[10:59:39.683]             {
[10:59:39.683]                 {
[10:59:39.683]                   {
[10:59:39.683]                     {
[10:59:39.683]                       base::local({
[10:59:39.683]                         has_future <- base::requireNamespace("future", 
[10:59:39.683]                           quietly = TRUE)
[10:59:39.683]                         if (has_future) {
[10:59:39.683]                           ns <- base::getNamespace("future")
[10:59:39.683]                           version <- ns[[".package"]][["version"]]
[10:59:39.683]                           if (is.null(version)) 
[10:59:39.683]                             version <- utils::packageVersion("future")
[10:59:39.683]                         }
[10:59:39.683]                         else {
[10:59:39.683]                           version <- NULL
[10:59:39.683]                         }
[10:59:39.683]                         if (!has_future || version < "1.8.0") {
[10:59:39.683]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.683]                             "", base::R.version$version.string), 
[10:59:39.683]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.683]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.683]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.683]                               "release", "version")], collapse = " "), 
[10:59:39.683]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.683]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.683]                             info)
[10:59:39.683]                           info <- base::paste(info, collapse = "; ")
[10:59:39.683]                           if (!has_future) {
[10:59:39.683]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.683]                               info)
[10:59:39.683]                           }
[10:59:39.683]                           else {
[10:59:39.683]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.683]                               info, version)
[10:59:39.683]                           }
[10:59:39.683]                           base::stop(msg)
[10:59:39.683]                         }
[10:59:39.683]                       })
[10:59:39.683]                     }
[10:59:39.683]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.683]                     base::options(mc.cores = 1L)
[10:59:39.683]                   }
[10:59:39.683]                   ...future.strategy.old <- future::plan("list")
[10:59:39.683]                   options(future.plan = NULL)
[10:59:39.683]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.683]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.683]                 }
[10:59:39.683]                 ...future.workdir <- getwd()
[10:59:39.683]             }
[10:59:39.683]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.683]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.683]         }
[10:59:39.683]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.683]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.683]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.683]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.683]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.683]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.683]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.683]             base::names(...future.oldOptions))
[10:59:39.683]     }
[10:59:39.683]     if (FALSE) {
[10:59:39.683]     }
[10:59:39.683]     else {
[10:59:39.683]         if (TRUE) {
[10:59:39.683]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.683]                 open = "w")
[10:59:39.683]         }
[10:59:39.683]         else {
[10:59:39.683]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.683]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.683]         }
[10:59:39.683]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.683]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.683]             base::sink(type = "output", split = FALSE)
[10:59:39.683]             base::close(...future.stdout)
[10:59:39.683]         }, add = TRUE)
[10:59:39.683]     }
[10:59:39.683]     ...future.frame <- base::sys.nframe()
[10:59:39.683]     ...future.conditions <- base::list()
[10:59:39.683]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.683]     if (FALSE) {
[10:59:39.683]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.683]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.683]     }
[10:59:39.683]     ...future.result <- base::tryCatch({
[10:59:39.683]         base::withCallingHandlers({
[10:59:39.683]             ...future.value <- base::withVisible(base::local({
[10:59:39.683]                 ...future.makeSendCondition <- base::local({
[10:59:39.683]                   sendCondition <- NULL
[10:59:39.683]                   function(frame = 1L) {
[10:59:39.683]                     if (is.function(sendCondition)) 
[10:59:39.683]                       return(sendCondition)
[10:59:39.683]                     ns <- getNamespace("parallel")
[10:59:39.683]                     if (exists("sendData", mode = "function", 
[10:59:39.683]                       envir = ns)) {
[10:59:39.683]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.683]                         envir = ns)
[10:59:39.683]                       envir <- sys.frame(frame)
[10:59:39.683]                       master <- NULL
[10:59:39.683]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.683]                         !identical(envir, emptyenv())) {
[10:59:39.683]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.683]                           inherits = FALSE)) {
[10:59:39.683]                           master <- get("master", mode = "list", 
[10:59:39.683]                             envir = envir, inherits = FALSE)
[10:59:39.683]                           if (inherits(master, c("SOCKnode", 
[10:59:39.683]                             "SOCK0node"))) {
[10:59:39.683]                             sendCondition <<- function(cond) {
[10:59:39.683]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.683]                                 success = TRUE)
[10:59:39.683]                               parallel_sendData(master, data)
[10:59:39.683]                             }
[10:59:39.683]                             return(sendCondition)
[10:59:39.683]                           }
[10:59:39.683]                         }
[10:59:39.683]                         frame <- frame + 1L
[10:59:39.683]                         envir <- sys.frame(frame)
[10:59:39.683]                       }
[10:59:39.683]                     }
[10:59:39.683]                     sendCondition <<- function(cond) NULL
[10:59:39.683]                   }
[10:59:39.683]                 })
[10:59:39.683]                 withCallingHandlers({
[10:59:39.683]                   {
[10:59:39.683]                     do.call(function(...) {
[10:59:39.683]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.683]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.683]                         ...future.globals.maxSize)) {
[10:59:39.683]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.683]                         on.exit(options(oopts), add = TRUE)
[10:59:39.683]                       }
[10:59:39.683]                       {
[10:59:39.683]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.683]                           FUN = function(jj) {
[10:59:39.683]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.683]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.683]                               envir = globalenv(), inherits = FALSE)
[10:59:39.683]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.683]                           })
[10:59:39.683]                       }
[10:59:39.683]                     }, args = future.call.arguments)
[10:59:39.683]                   }
[10:59:39.683]                 }, immediateCondition = function(cond) {
[10:59:39.683]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.683]                   sendCondition(cond)
[10:59:39.683]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.683]                   {
[10:59:39.683]                     inherits <- base::inherits
[10:59:39.683]                     invokeRestart <- base::invokeRestart
[10:59:39.683]                     is.null <- base::is.null
[10:59:39.683]                     muffled <- FALSE
[10:59:39.683]                     if (inherits(cond, "message")) {
[10:59:39.683]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.683]                       if (muffled) 
[10:59:39.683]                         invokeRestart("muffleMessage")
[10:59:39.683]                     }
[10:59:39.683]                     else if (inherits(cond, "warning")) {
[10:59:39.683]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.683]                       if (muffled) 
[10:59:39.683]                         invokeRestart("muffleWarning")
[10:59:39.683]                     }
[10:59:39.683]                     else if (inherits(cond, "condition")) {
[10:59:39.683]                       if (!is.null(pattern)) {
[10:59:39.683]                         computeRestarts <- base::computeRestarts
[10:59:39.683]                         grepl <- base::grepl
[10:59:39.683]                         restarts <- computeRestarts(cond)
[10:59:39.683]                         for (restart in restarts) {
[10:59:39.683]                           name <- restart$name
[10:59:39.683]                           if (is.null(name)) 
[10:59:39.683]                             next
[10:59:39.683]                           if (!grepl(pattern, name)) 
[10:59:39.683]                             next
[10:59:39.683]                           invokeRestart(restart)
[10:59:39.683]                           muffled <- TRUE
[10:59:39.683]                           break
[10:59:39.683]                         }
[10:59:39.683]                       }
[10:59:39.683]                     }
[10:59:39.683]                     invisible(muffled)
[10:59:39.683]                   }
[10:59:39.683]                   muffleCondition(cond)
[10:59:39.683]                 })
[10:59:39.683]             }))
[10:59:39.683]             future::FutureResult(value = ...future.value$value, 
[10:59:39.683]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.683]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.683]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.683]                     ...future.globalenv.names))
[10:59:39.683]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.683]         }, condition = base::local({
[10:59:39.683]             c <- base::c
[10:59:39.683]             inherits <- base::inherits
[10:59:39.683]             invokeRestart <- base::invokeRestart
[10:59:39.683]             length <- base::length
[10:59:39.683]             list <- base::list
[10:59:39.683]             seq.int <- base::seq.int
[10:59:39.683]             signalCondition <- base::signalCondition
[10:59:39.683]             sys.calls <- base::sys.calls
[10:59:39.683]             `[[` <- base::`[[`
[10:59:39.683]             `+` <- base::`+`
[10:59:39.683]             `<<-` <- base::`<<-`
[10:59:39.683]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.683]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.683]                   3L)]
[10:59:39.683]             }
[10:59:39.683]             function(cond) {
[10:59:39.683]                 is_error <- inherits(cond, "error")
[10:59:39.683]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.683]                   NULL)
[10:59:39.683]                 if (is_error) {
[10:59:39.683]                   sessionInformation <- function() {
[10:59:39.683]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.683]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.683]                       search = base::search(), system = base::Sys.info())
[10:59:39.683]                   }
[10:59:39.683]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.683]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.683]                     cond$call), session = sessionInformation(), 
[10:59:39.683]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.683]                   signalCondition(cond)
[10:59:39.683]                 }
[10:59:39.683]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.683]                 "immediateCondition"))) {
[10:59:39.683]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.683]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.683]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.683]                   if (TRUE && !signal) {
[10:59:39.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.683]                     {
[10:59:39.683]                       inherits <- base::inherits
[10:59:39.683]                       invokeRestart <- base::invokeRestart
[10:59:39.683]                       is.null <- base::is.null
[10:59:39.683]                       muffled <- FALSE
[10:59:39.683]                       if (inherits(cond, "message")) {
[10:59:39.683]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.683]                         if (muffled) 
[10:59:39.683]                           invokeRestart("muffleMessage")
[10:59:39.683]                       }
[10:59:39.683]                       else if (inherits(cond, "warning")) {
[10:59:39.683]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.683]                         if (muffled) 
[10:59:39.683]                           invokeRestart("muffleWarning")
[10:59:39.683]                       }
[10:59:39.683]                       else if (inherits(cond, "condition")) {
[10:59:39.683]                         if (!is.null(pattern)) {
[10:59:39.683]                           computeRestarts <- base::computeRestarts
[10:59:39.683]                           grepl <- base::grepl
[10:59:39.683]                           restarts <- computeRestarts(cond)
[10:59:39.683]                           for (restart in restarts) {
[10:59:39.683]                             name <- restart$name
[10:59:39.683]                             if (is.null(name)) 
[10:59:39.683]                               next
[10:59:39.683]                             if (!grepl(pattern, name)) 
[10:59:39.683]                               next
[10:59:39.683]                             invokeRestart(restart)
[10:59:39.683]                             muffled <- TRUE
[10:59:39.683]                             break
[10:59:39.683]                           }
[10:59:39.683]                         }
[10:59:39.683]                       }
[10:59:39.683]                       invisible(muffled)
[10:59:39.683]                     }
[10:59:39.683]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.683]                   }
[10:59:39.683]                 }
[10:59:39.683]                 else {
[10:59:39.683]                   if (TRUE) {
[10:59:39.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.683]                     {
[10:59:39.683]                       inherits <- base::inherits
[10:59:39.683]                       invokeRestart <- base::invokeRestart
[10:59:39.683]                       is.null <- base::is.null
[10:59:39.683]                       muffled <- FALSE
[10:59:39.683]                       if (inherits(cond, "message")) {
[10:59:39.683]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.683]                         if (muffled) 
[10:59:39.683]                           invokeRestart("muffleMessage")
[10:59:39.683]                       }
[10:59:39.683]                       else if (inherits(cond, "warning")) {
[10:59:39.683]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.683]                         if (muffled) 
[10:59:39.683]                           invokeRestart("muffleWarning")
[10:59:39.683]                       }
[10:59:39.683]                       else if (inherits(cond, "condition")) {
[10:59:39.683]                         if (!is.null(pattern)) {
[10:59:39.683]                           computeRestarts <- base::computeRestarts
[10:59:39.683]                           grepl <- base::grepl
[10:59:39.683]                           restarts <- computeRestarts(cond)
[10:59:39.683]                           for (restart in restarts) {
[10:59:39.683]                             name <- restart$name
[10:59:39.683]                             if (is.null(name)) 
[10:59:39.683]                               next
[10:59:39.683]                             if (!grepl(pattern, name)) 
[10:59:39.683]                               next
[10:59:39.683]                             invokeRestart(restart)
[10:59:39.683]                             muffled <- TRUE
[10:59:39.683]                             break
[10:59:39.683]                           }
[10:59:39.683]                         }
[10:59:39.683]                       }
[10:59:39.683]                       invisible(muffled)
[10:59:39.683]                     }
[10:59:39.683]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.683]                   }
[10:59:39.683]                 }
[10:59:39.683]             }
[10:59:39.683]         }))
[10:59:39.683]     }, error = function(ex) {
[10:59:39.683]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.683]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.683]                 ...future.rng), started = ...future.startTime, 
[10:59:39.683]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.683]             version = "1.8"), class = "FutureResult")
[10:59:39.683]     }, finally = {
[10:59:39.683]         if (!identical(...future.workdir, getwd())) 
[10:59:39.683]             setwd(...future.workdir)
[10:59:39.683]         {
[10:59:39.683]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.683]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.683]             }
[10:59:39.683]             base::options(...future.oldOptions)
[10:59:39.683]             if (.Platform$OS.type == "windows") {
[10:59:39.683]                 old_names <- names(...future.oldEnvVars)
[10:59:39.683]                 envs <- base::Sys.getenv()
[10:59:39.683]                 names <- names(envs)
[10:59:39.683]                 common <- intersect(names, old_names)
[10:59:39.683]                 added <- setdiff(names, old_names)
[10:59:39.683]                 removed <- setdiff(old_names, names)
[10:59:39.683]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.683]                   envs[common]]
[10:59:39.683]                 NAMES <- toupper(changed)
[10:59:39.683]                 args <- list()
[10:59:39.683]                 for (kk in seq_along(NAMES)) {
[10:59:39.683]                   name <- changed[[kk]]
[10:59:39.683]                   NAME <- NAMES[[kk]]
[10:59:39.683]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.683]                     next
[10:59:39.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.683]                 }
[10:59:39.683]                 NAMES <- toupper(added)
[10:59:39.683]                 for (kk in seq_along(NAMES)) {
[10:59:39.683]                   name <- added[[kk]]
[10:59:39.683]                   NAME <- NAMES[[kk]]
[10:59:39.683]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.683]                     next
[10:59:39.683]                   args[[name]] <- ""
[10:59:39.683]                 }
[10:59:39.683]                 NAMES <- toupper(removed)
[10:59:39.683]                 for (kk in seq_along(NAMES)) {
[10:59:39.683]                   name <- removed[[kk]]
[10:59:39.683]                   NAME <- NAMES[[kk]]
[10:59:39.683]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.683]                     next
[10:59:39.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.683]                 }
[10:59:39.683]                 if (length(args) > 0) 
[10:59:39.683]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.683]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.683]             }
[10:59:39.683]             else {
[10:59:39.683]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.683]             }
[10:59:39.683]             {
[10:59:39.683]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.683]                   0L) {
[10:59:39.683]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.683]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.683]                   base::options(opts)
[10:59:39.683]                 }
[10:59:39.683]                 {
[10:59:39.683]                   {
[10:59:39.683]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.683]                     NULL
[10:59:39.683]                   }
[10:59:39.683]                   options(future.plan = NULL)
[10:59:39.683]                   if (is.na(NA_character_)) 
[10:59:39.683]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.683]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.683]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.683]                     .init = FALSE)
[10:59:39.683]                 }
[10:59:39.683]             }
[10:59:39.683]         }
[10:59:39.683]     })
[10:59:39.683]     if (TRUE) {
[10:59:39.683]         base::sink(type = "output", split = FALSE)
[10:59:39.683]         if (TRUE) {
[10:59:39.683]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.683]         }
[10:59:39.683]         else {
[10:59:39.683]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.683]         }
[10:59:39.683]         base::close(...future.stdout)
[10:59:39.683]         ...future.stdout <- NULL
[10:59:39.683]     }
[10:59:39.683]     ...future.result$conditions <- ...future.conditions
[10:59:39.683]     ...future.result$finished <- base::Sys.time()
[10:59:39.683]     ...future.result
[10:59:39.683] }
[10:59:39.685] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[10:59:39.686] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[10:59:39.686] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[10:59:39.686] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[10:59:39.686] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[10:59:39.687] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[10:59:39.687] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[10:59:39.687] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[10:59:39.687] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[10:59:39.688] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[10:59:39.688] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[10:59:39.688] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[10:59:39.689] MultisessionFuture started
[10:59:39.689] - Launch lazy future ... done
[10:59:39.689] run() for ‘MultisessionFuture’ ... done
[10:59:39.689] Created future:
[10:59:39.689] MultisessionFuture:
[10:59:39.689] Label: ‘future_replicate-2’
[10:59:39.689] Expression:
[10:59:39.689] {
[10:59:39.689]     do.call(function(...) {
[10:59:39.689]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.689]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.689]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.689]             on.exit(options(oopts), add = TRUE)
[10:59:39.689]         }
[10:59:39.689]         {
[10:59:39.689]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.689]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.689]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.689]                   envir = globalenv(), inherits = FALSE)
[10:59:39.689]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.689]             })
[10:59:39.689]         }
[10:59:39.689]     }, args = future.call.arguments)
[10:59:39.689] }
[10:59:39.689] Lazy evaluation: FALSE
[10:59:39.689] Asynchronous evaluation: TRUE
[10:59:39.689] Local evaluation: TRUE
[10:59:39.689] Environment: R_GlobalEnv
[10:59:39.689] Capture standard output: TRUE
[10:59:39.689] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.689] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.689] Packages: <none>
[10:59:39.689] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.689] Resolved: FALSE
[10:59:39.689] Value: <not collected>
[10:59:39.689] Conditions captured: <none>
[10:59:39.689] Early signaling: FALSE
[10:59:39.689] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.689] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.700] Chunk #2 of 2 ... DONE
[10:59:39.701] Launching 2 futures (chunks) ... DONE
[10:59:39.701] Resolving 2 futures (chunks) ...
[10:59:39.701] resolve() on list ...
[10:59:39.701]  recursive: 0
[10:59:39.701]  length: 2
[10:59:39.701] 
[10:59:39.703] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.703] - Validating connection of MultisessionFuture
[10:59:39.704] - received message: FutureResult
[10:59:39.704] - Received FutureResult
[10:59:39.704] - Erased future from FutureRegistry
[10:59:39.704] result() for ClusterFuture ...
[10:59:39.704] - result already collected: FutureResult
[10:59:39.704] result() for ClusterFuture ... done
[10:59:39.704] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.704] Future #1
[10:59:39.704] result() for ClusterFuture ...
[10:59:39.704] - result already collected: FutureResult
[10:59:39.704] result() for ClusterFuture ... done
[10:59:39.705] result() for ClusterFuture ...
[10:59:39.705] - result already collected: FutureResult
[10:59:39.705] result() for ClusterFuture ... done
[10:59:39.705] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:59:39.705] - nx: 2
[10:59:39.705] - relay: TRUE
[10:59:39.705] - stdout: TRUE
[10:59:39.705] - signal: TRUE
[10:59:39.705] - resignal: FALSE
[10:59:39.705] - force: TRUE
[10:59:39.705] - relayed: [n=2] FALSE, FALSE
[10:59:39.705] - queued futures: [n=2] FALSE, FALSE
[10:59:39.705]  - until=1
[10:59:39.706]  - relaying element #1
[10:59:39.706] result() for ClusterFuture ...
[10:59:39.706] - result already collected: FutureResult
[10:59:39.706] result() for ClusterFuture ... done
[10:59:39.706] result() for ClusterFuture ...
[10:59:39.706] - result already collected: FutureResult
[10:59:39.706] result() for ClusterFuture ... done
[10:59:39.706] result() for ClusterFuture ...
[10:59:39.706] - result already collected: FutureResult
[10:59:39.706] result() for ClusterFuture ... done
[10:59:39.706] result() for ClusterFuture ...
[10:59:39.706] - result already collected: FutureResult
[10:59:39.707] result() for ClusterFuture ... done
[10:59:39.707] - relayed: [n=2] TRUE, FALSE
[10:59:39.707] - queued futures: [n=2] TRUE, FALSE
[10:59:39.707] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:59:39.707]  length: 1 (resolved future 1)
[10:59:39.730] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.730] - Validating connection of MultisessionFuture
[10:59:39.730] - received message: FutureResult
[10:59:39.730] - Received FutureResult
[10:59:39.731] - Erased future from FutureRegistry
[10:59:39.731] result() for ClusterFuture ...
[10:59:39.731] - result already collected: FutureResult
[10:59:39.731] result() for ClusterFuture ... done
[10:59:39.731] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.731] Future #2
[10:59:39.731] result() for ClusterFuture ...
[10:59:39.731] - result already collected: FutureResult
[10:59:39.731] result() for ClusterFuture ... done
[10:59:39.731] result() for ClusterFuture ...
[10:59:39.731] - result already collected: FutureResult
[10:59:39.731] result() for ClusterFuture ... done
[10:59:39.732] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:59:39.732] - nx: 2
[10:59:39.732] - relay: TRUE
[10:59:39.732] - stdout: TRUE
[10:59:39.732] - signal: TRUE
[10:59:39.732] - resignal: FALSE
[10:59:39.732] - force: TRUE
[10:59:39.732] - relayed: [n=2] TRUE, FALSE
[10:59:39.732] - queued futures: [n=2] TRUE, FALSE
[10:59:39.732]  - until=2
[10:59:39.732]  - relaying element #2
[10:59:39.732] result() for ClusterFuture ...
[10:59:39.732] - result already collected: FutureResult
[10:59:39.733] result() for ClusterFuture ... done
[10:59:39.733] result() for ClusterFuture ...
[10:59:39.733] - result already collected: FutureResult
[10:59:39.733] result() for ClusterFuture ... done
[10:59:39.733] result() for ClusterFuture ...
[10:59:39.733] - result already collected: FutureResult
[10:59:39.733] result() for ClusterFuture ... done
[10:59:39.733] result() for ClusterFuture ...
[10:59:39.733] - result already collected: FutureResult
[10:59:39.733] result() for ClusterFuture ... done
[10:59:39.733] - relayed: [n=2] TRUE, TRUE
[10:59:39.733] - queued futures: [n=2] TRUE, TRUE
[10:59:39.734] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:59:39.734]  length: 0 (resolved future 2)
[10:59:39.734] Relaying remaining futures
[10:59:39.734] signalConditionsASAP(NULL, pos=0) ...
[10:59:39.734] - nx: 2
[10:59:39.734] - relay: TRUE
[10:59:39.734] - stdout: TRUE
[10:59:39.734] - signal: TRUE
[10:59:39.734] - resignal: FALSE
[10:59:39.734] - force: TRUE
[10:59:39.734] - relayed: [n=2] TRUE, TRUE
[10:59:39.734] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:39.735] - relayed: [n=2] TRUE, TRUE
[10:59:39.735] - queued futures: [n=2] TRUE, TRUE
[10:59:39.735] signalConditionsASAP(NULL, pos=0) ... done
[10:59:39.735] resolve() on list ... DONE
[10:59:39.735] result() for ClusterFuture ...
[10:59:39.735] - result already collected: FutureResult
[10:59:39.735] result() for ClusterFuture ... done
[10:59:39.735] result() for ClusterFuture ...
[10:59:39.735] - result already collected: FutureResult
[10:59:39.735] result() for ClusterFuture ... done
[10:59:39.735] result() for ClusterFuture ...
[10:59:39.735] - result already collected: FutureResult
[10:59:39.735] result() for ClusterFuture ... done
[10:59:39.736] result() for ClusterFuture ...
[10:59:39.736] - result already collected: FutureResult
[10:59:39.736] result() for ClusterFuture ... done
[10:59:39.736]  - Number of value chunks collected: 2
[10:59:39.736] Resolving 2 futures (chunks) ... DONE
[10:59:39.736] Reducing values from 2 chunks ...
[10:59:39.736]  - Number of values collected after concatenation: 5
[10:59:39.736]  - Number of values expected: 5
[10:59:39.736] Reducing values from 2 chunks ... DONE
[10:59:39.736] future_lapply() ... DONE
[10:59:39.736] future_lapply() ...
[10:59:39.737] Generating random seeds ...
[10:59:39.737] Generating random seed streams for 5 elements ...
[10:59:39.737] Generating random seed streams for 5 elements ... DONE
[10:59:39.737] Generating random seeds ... DONE
[10:59:39.737] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:39.739] Number of chunks: 2
[10:59:39.739] getGlobalsAndPackagesXApply() ...
[10:59:39.739]  - future.globals: TRUE
[10:59:39.739] getGlobalsAndPackages() ...
[10:59:39.740] Searching for globals...
[10:59:39.741] - globals found: [2] ‘FUN’, ‘sample’
[10:59:39.741] Searching for globals ... DONE
[10:59:39.741] Resolving globals: FALSE
[10:59:39.741] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:39.741] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:39.741] - globals: [1] ‘FUN’
[10:59:39.742] 
[10:59:39.742] getGlobalsAndPackages() ... DONE
[10:59:39.742]  - globals found/used: [n=1] ‘FUN’
[10:59:39.742]  - needed namespaces: [n=0] 
[10:59:39.742] Finding globals ... DONE
[10:59:39.742]  - use_args: TRUE
[10:59:39.742]  - Getting '...' globals ...
[10:59:39.742] resolve() on list ...
[10:59:39.742]  recursive: 0
[10:59:39.743]  length: 1
[10:59:39.743]  elements: ‘...’
[10:59:39.743]  length: 0 (resolved future 1)
[10:59:39.743] resolve() on list ... DONE
[10:59:39.743]    - '...' content: [n=0] 
[10:59:39.743] List of 1
[10:59:39.743]  $ ...: list()
[10:59:39.743]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.743]  - attr(*, "where")=List of 1
[10:59:39.743]   ..$ ...:<environment: 0x56262e89e168> 
[10:59:39.743]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.743]  - attr(*, "resolved")= logi TRUE
[10:59:39.743]  - attr(*, "total_size")= num NA
[10:59:39.745]  - Getting '...' globals ... DONE
[10:59:39.745] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:39.746] List of 2
[10:59:39.746]  $ ...future.FUN:function (...)  
[10:59:39.746]  $ ...          : list()
[10:59:39.746]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.746]  - attr(*, "where")=List of 2
[10:59:39.746]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:39.746]   ..$ ...          :<environment: 0x56262e89e168> 
[10:59:39.746]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.746]  - attr(*, "resolved")= logi FALSE
[10:59:39.746]  - attr(*, "total_size")= num 7184
[10:59:39.748] Packages to be attached in all futures: [n=0] 
[10:59:39.748] getGlobalsAndPackagesXApply() ... DONE
[10:59:39.748] Number of futures (= number of chunks): 2
[10:59:39.748] Launching 2 futures (chunks) ...
[10:59:39.749] Chunk #1 of 2 ...
[10:59:39.749]  - Finding globals in 'X' for chunk #1 ...
[10:59:39.749] getGlobalsAndPackages() ...
[10:59:39.749] Searching for globals...
[10:59:39.749] 
[10:59:39.749] Searching for globals ... DONE
[10:59:39.749] - globals: [0] <none>
[10:59:39.749] getGlobalsAndPackages() ... DONE
[10:59:39.749]    + additional globals found: [n=0] 
[10:59:39.749]    + additional namespaces needed: [n=0] 
[10:59:39.750]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:39.750]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.750]  - seeds: [2] <seeds>
[10:59:39.750]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.750] getGlobalsAndPackages() ...
[10:59:39.750] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.750] Resolving globals: FALSE
[10:59:39.750] Tweak future expression to call with '...' arguments ...
[10:59:39.750] {
[10:59:39.750]     do.call(function(...) {
[10:59:39.750]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.750]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.750]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.750]             on.exit(options(oopts), add = TRUE)
[10:59:39.750]         }
[10:59:39.750]         {
[10:59:39.750]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.750]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.750]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.750]                   envir = globalenv(), inherits = FALSE)
[10:59:39.750]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.750]             })
[10:59:39.750]         }
[10:59:39.750]     }, args = future.call.arguments)
[10:59:39.750] }
[10:59:39.751] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.751] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.751] 
[10:59:39.751] getGlobalsAndPackages() ... DONE
[10:59:39.751] run() for ‘Future’ ...
[10:59:39.751] - state: ‘created’
[10:59:39.752] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.765] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.765] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.765]   - Field: ‘node’
[10:59:39.765]   - Field: ‘label’
[10:59:39.765]   - Field: ‘local’
[10:59:39.766]   - Field: ‘owner’
[10:59:39.766]   - Field: ‘envir’
[10:59:39.766]   - Field: ‘workers’
[10:59:39.766]   - Field: ‘packages’
[10:59:39.766]   - Field: ‘gc’
[10:59:39.766]   - Field: ‘conditions’
[10:59:39.766]   - Field: ‘persistent’
[10:59:39.766]   - Field: ‘expr’
[10:59:39.766]   - Field: ‘uuid’
[10:59:39.766]   - Field: ‘seed’
[10:59:39.766]   - Field: ‘version’
[10:59:39.766]   - Field: ‘result’
[10:59:39.767]   - Field: ‘asynchronous’
[10:59:39.767]   - Field: ‘calls’
[10:59:39.767]   - Field: ‘globals’
[10:59:39.767]   - Field: ‘stdout’
[10:59:39.767]   - Field: ‘earlySignal’
[10:59:39.767]   - Field: ‘lazy’
[10:59:39.767]   - Field: ‘state’
[10:59:39.767] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.767] - Launch lazy future ...
[10:59:39.767] Packages needed by the future expression (n = 0): <none>
[10:59:39.768] Packages needed by future strategies (n = 0): <none>
[10:59:39.768] {
[10:59:39.768]     {
[10:59:39.768]         {
[10:59:39.768]             ...future.startTime <- base::Sys.time()
[10:59:39.768]             {
[10:59:39.768]                 {
[10:59:39.768]                   {
[10:59:39.768]                     {
[10:59:39.768]                       base::local({
[10:59:39.768]                         has_future <- base::requireNamespace("future", 
[10:59:39.768]                           quietly = TRUE)
[10:59:39.768]                         if (has_future) {
[10:59:39.768]                           ns <- base::getNamespace("future")
[10:59:39.768]                           version <- ns[[".package"]][["version"]]
[10:59:39.768]                           if (is.null(version)) 
[10:59:39.768]                             version <- utils::packageVersion("future")
[10:59:39.768]                         }
[10:59:39.768]                         else {
[10:59:39.768]                           version <- NULL
[10:59:39.768]                         }
[10:59:39.768]                         if (!has_future || version < "1.8.0") {
[10:59:39.768]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.768]                             "", base::R.version$version.string), 
[10:59:39.768]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.768]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.768]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.768]                               "release", "version")], collapse = " "), 
[10:59:39.768]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.768]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.768]                             info)
[10:59:39.768]                           info <- base::paste(info, collapse = "; ")
[10:59:39.768]                           if (!has_future) {
[10:59:39.768]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.768]                               info)
[10:59:39.768]                           }
[10:59:39.768]                           else {
[10:59:39.768]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.768]                               info, version)
[10:59:39.768]                           }
[10:59:39.768]                           base::stop(msg)
[10:59:39.768]                         }
[10:59:39.768]                       })
[10:59:39.768]                     }
[10:59:39.768]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.768]                     base::options(mc.cores = 1L)
[10:59:39.768]                   }
[10:59:39.768]                   ...future.strategy.old <- future::plan("list")
[10:59:39.768]                   options(future.plan = NULL)
[10:59:39.768]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.768]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.768]                 }
[10:59:39.768]                 ...future.workdir <- getwd()
[10:59:39.768]             }
[10:59:39.768]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.768]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.768]         }
[10:59:39.768]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.768]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.768]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.768]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.768]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.768]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.768]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.768]             base::names(...future.oldOptions))
[10:59:39.768]     }
[10:59:39.768]     if (FALSE) {
[10:59:39.768]     }
[10:59:39.768]     else {
[10:59:39.768]         if (TRUE) {
[10:59:39.768]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.768]                 open = "w")
[10:59:39.768]         }
[10:59:39.768]         else {
[10:59:39.768]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.768]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.768]         }
[10:59:39.768]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.768]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.768]             base::sink(type = "output", split = FALSE)
[10:59:39.768]             base::close(...future.stdout)
[10:59:39.768]         }, add = TRUE)
[10:59:39.768]     }
[10:59:39.768]     ...future.frame <- base::sys.nframe()
[10:59:39.768]     ...future.conditions <- base::list()
[10:59:39.768]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.768]     if (FALSE) {
[10:59:39.768]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.768]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.768]     }
[10:59:39.768]     ...future.result <- base::tryCatch({
[10:59:39.768]         base::withCallingHandlers({
[10:59:39.768]             ...future.value <- base::withVisible(base::local({
[10:59:39.768]                 ...future.makeSendCondition <- base::local({
[10:59:39.768]                   sendCondition <- NULL
[10:59:39.768]                   function(frame = 1L) {
[10:59:39.768]                     if (is.function(sendCondition)) 
[10:59:39.768]                       return(sendCondition)
[10:59:39.768]                     ns <- getNamespace("parallel")
[10:59:39.768]                     if (exists("sendData", mode = "function", 
[10:59:39.768]                       envir = ns)) {
[10:59:39.768]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.768]                         envir = ns)
[10:59:39.768]                       envir <- sys.frame(frame)
[10:59:39.768]                       master <- NULL
[10:59:39.768]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.768]                         !identical(envir, emptyenv())) {
[10:59:39.768]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.768]                           inherits = FALSE)) {
[10:59:39.768]                           master <- get("master", mode = "list", 
[10:59:39.768]                             envir = envir, inherits = FALSE)
[10:59:39.768]                           if (inherits(master, c("SOCKnode", 
[10:59:39.768]                             "SOCK0node"))) {
[10:59:39.768]                             sendCondition <<- function(cond) {
[10:59:39.768]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.768]                                 success = TRUE)
[10:59:39.768]                               parallel_sendData(master, data)
[10:59:39.768]                             }
[10:59:39.768]                             return(sendCondition)
[10:59:39.768]                           }
[10:59:39.768]                         }
[10:59:39.768]                         frame <- frame + 1L
[10:59:39.768]                         envir <- sys.frame(frame)
[10:59:39.768]                       }
[10:59:39.768]                     }
[10:59:39.768]                     sendCondition <<- function(cond) NULL
[10:59:39.768]                   }
[10:59:39.768]                 })
[10:59:39.768]                 withCallingHandlers({
[10:59:39.768]                   {
[10:59:39.768]                     do.call(function(...) {
[10:59:39.768]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.768]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.768]                         ...future.globals.maxSize)) {
[10:59:39.768]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.768]                         on.exit(options(oopts), add = TRUE)
[10:59:39.768]                       }
[10:59:39.768]                       {
[10:59:39.768]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.768]                           FUN = function(jj) {
[10:59:39.768]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.768]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.768]                               envir = globalenv(), inherits = FALSE)
[10:59:39.768]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.768]                           })
[10:59:39.768]                       }
[10:59:39.768]                     }, args = future.call.arguments)
[10:59:39.768]                   }
[10:59:39.768]                 }, immediateCondition = function(cond) {
[10:59:39.768]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.768]                   sendCondition(cond)
[10:59:39.768]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.768]                   {
[10:59:39.768]                     inherits <- base::inherits
[10:59:39.768]                     invokeRestart <- base::invokeRestart
[10:59:39.768]                     is.null <- base::is.null
[10:59:39.768]                     muffled <- FALSE
[10:59:39.768]                     if (inherits(cond, "message")) {
[10:59:39.768]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.768]                       if (muffled) 
[10:59:39.768]                         invokeRestart("muffleMessage")
[10:59:39.768]                     }
[10:59:39.768]                     else if (inherits(cond, "warning")) {
[10:59:39.768]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.768]                       if (muffled) 
[10:59:39.768]                         invokeRestart("muffleWarning")
[10:59:39.768]                     }
[10:59:39.768]                     else if (inherits(cond, "condition")) {
[10:59:39.768]                       if (!is.null(pattern)) {
[10:59:39.768]                         computeRestarts <- base::computeRestarts
[10:59:39.768]                         grepl <- base::grepl
[10:59:39.768]                         restarts <- computeRestarts(cond)
[10:59:39.768]                         for (restart in restarts) {
[10:59:39.768]                           name <- restart$name
[10:59:39.768]                           if (is.null(name)) 
[10:59:39.768]                             next
[10:59:39.768]                           if (!grepl(pattern, name)) 
[10:59:39.768]                             next
[10:59:39.768]                           invokeRestart(restart)
[10:59:39.768]                           muffled <- TRUE
[10:59:39.768]                           break
[10:59:39.768]                         }
[10:59:39.768]                       }
[10:59:39.768]                     }
[10:59:39.768]                     invisible(muffled)
[10:59:39.768]                   }
[10:59:39.768]                   muffleCondition(cond)
[10:59:39.768]                 })
[10:59:39.768]             }))
[10:59:39.768]             future::FutureResult(value = ...future.value$value, 
[10:59:39.768]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.768]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.768]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.768]                     ...future.globalenv.names))
[10:59:39.768]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.768]         }, condition = base::local({
[10:59:39.768]             c <- base::c
[10:59:39.768]             inherits <- base::inherits
[10:59:39.768]             invokeRestart <- base::invokeRestart
[10:59:39.768]             length <- base::length
[10:59:39.768]             list <- base::list
[10:59:39.768]             seq.int <- base::seq.int
[10:59:39.768]             signalCondition <- base::signalCondition
[10:59:39.768]             sys.calls <- base::sys.calls
[10:59:39.768]             `[[` <- base::`[[`
[10:59:39.768]             `+` <- base::`+`
[10:59:39.768]             `<<-` <- base::`<<-`
[10:59:39.768]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.768]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.768]                   3L)]
[10:59:39.768]             }
[10:59:39.768]             function(cond) {
[10:59:39.768]                 is_error <- inherits(cond, "error")
[10:59:39.768]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.768]                   NULL)
[10:59:39.768]                 if (is_error) {
[10:59:39.768]                   sessionInformation <- function() {
[10:59:39.768]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.768]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.768]                       search = base::search(), system = base::Sys.info())
[10:59:39.768]                   }
[10:59:39.768]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.768]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.768]                     cond$call), session = sessionInformation(), 
[10:59:39.768]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.768]                   signalCondition(cond)
[10:59:39.768]                 }
[10:59:39.768]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.768]                 "immediateCondition"))) {
[10:59:39.768]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.768]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.768]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.768]                   if (TRUE && !signal) {
[10:59:39.768]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.768]                     {
[10:59:39.768]                       inherits <- base::inherits
[10:59:39.768]                       invokeRestart <- base::invokeRestart
[10:59:39.768]                       is.null <- base::is.null
[10:59:39.768]                       muffled <- FALSE
[10:59:39.768]                       if (inherits(cond, "message")) {
[10:59:39.768]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.768]                         if (muffled) 
[10:59:39.768]                           invokeRestart("muffleMessage")
[10:59:39.768]                       }
[10:59:39.768]                       else if (inherits(cond, "warning")) {
[10:59:39.768]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.768]                         if (muffled) 
[10:59:39.768]                           invokeRestart("muffleWarning")
[10:59:39.768]                       }
[10:59:39.768]                       else if (inherits(cond, "condition")) {
[10:59:39.768]                         if (!is.null(pattern)) {
[10:59:39.768]                           computeRestarts <- base::computeRestarts
[10:59:39.768]                           grepl <- base::grepl
[10:59:39.768]                           restarts <- computeRestarts(cond)
[10:59:39.768]                           for (restart in restarts) {
[10:59:39.768]                             name <- restart$name
[10:59:39.768]                             if (is.null(name)) 
[10:59:39.768]                               next
[10:59:39.768]                             if (!grepl(pattern, name)) 
[10:59:39.768]                               next
[10:59:39.768]                             invokeRestart(restart)
[10:59:39.768]                             muffled <- TRUE
[10:59:39.768]                             break
[10:59:39.768]                           }
[10:59:39.768]                         }
[10:59:39.768]                       }
[10:59:39.768]                       invisible(muffled)
[10:59:39.768]                     }
[10:59:39.768]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.768]                   }
[10:59:39.768]                 }
[10:59:39.768]                 else {
[10:59:39.768]                   if (TRUE) {
[10:59:39.768]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.768]                     {
[10:59:39.768]                       inherits <- base::inherits
[10:59:39.768]                       invokeRestart <- base::invokeRestart
[10:59:39.768]                       is.null <- base::is.null
[10:59:39.768]                       muffled <- FALSE
[10:59:39.768]                       if (inherits(cond, "message")) {
[10:59:39.768]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.768]                         if (muffled) 
[10:59:39.768]                           invokeRestart("muffleMessage")
[10:59:39.768]                       }
[10:59:39.768]                       else if (inherits(cond, "warning")) {
[10:59:39.768]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.768]                         if (muffled) 
[10:59:39.768]                           invokeRestart("muffleWarning")
[10:59:39.768]                       }
[10:59:39.768]                       else if (inherits(cond, "condition")) {
[10:59:39.768]                         if (!is.null(pattern)) {
[10:59:39.768]                           computeRestarts <- base::computeRestarts
[10:59:39.768]                           grepl <- base::grepl
[10:59:39.768]                           restarts <- computeRestarts(cond)
[10:59:39.768]                           for (restart in restarts) {
[10:59:39.768]                             name <- restart$name
[10:59:39.768]                             if (is.null(name)) 
[10:59:39.768]                               next
[10:59:39.768]                             if (!grepl(pattern, name)) 
[10:59:39.768]                               next
[10:59:39.768]                             invokeRestart(restart)
[10:59:39.768]                             muffled <- TRUE
[10:59:39.768]                             break
[10:59:39.768]                           }
[10:59:39.768]                         }
[10:59:39.768]                       }
[10:59:39.768]                       invisible(muffled)
[10:59:39.768]                     }
[10:59:39.768]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.768]                   }
[10:59:39.768]                 }
[10:59:39.768]             }
[10:59:39.768]         }))
[10:59:39.768]     }, error = function(ex) {
[10:59:39.768]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.768]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.768]                 ...future.rng), started = ...future.startTime, 
[10:59:39.768]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.768]             version = "1.8"), class = "FutureResult")
[10:59:39.768]     }, finally = {
[10:59:39.768]         if (!identical(...future.workdir, getwd())) 
[10:59:39.768]             setwd(...future.workdir)
[10:59:39.768]         {
[10:59:39.768]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.768]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.768]             }
[10:59:39.768]             base::options(...future.oldOptions)
[10:59:39.768]             if (.Platform$OS.type == "windows") {
[10:59:39.768]                 old_names <- names(...future.oldEnvVars)
[10:59:39.768]                 envs <- base::Sys.getenv()
[10:59:39.768]                 names <- names(envs)
[10:59:39.768]                 common <- intersect(names, old_names)
[10:59:39.768]                 added <- setdiff(names, old_names)
[10:59:39.768]                 removed <- setdiff(old_names, names)
[10:59:39.768]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.768]                   envs[common]]
[10:59:39.768]                 NAMES <- toupper(changed)
[10:59:39.768]                 args <- list()
[10:59:39.768]                 for (kk in seq_along(NAMES)) {
[10:59:39.768]                   name <- changed[[kk]]
[10:59:39.768]                   NAME <- NAMES[[kk]]
[10:59:39.768]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.768]                     next
[10:59:39.768]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.768]                 }
[10:59:39.768]                 NAMES <- toupper(added)
[10:59:39.768]                 for (kk in seq_along(NAMES)) {
[10:59:39.768]                   name <- added[[kk]]
[10:59:39.768]                   NAME <- NAMES[[kk]]
[10:59:39.768]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.768]                     next
[10:59:39.768]                   args[[name]] <- ""
[10:59:39.768]                 }
[10:59:39.768]                 NAMES <- toupper(removed)
[10:59:39.768]                 for (kk in seq_along(NAMES)) {
[10:59:39.768]                   name <- removed[[kk]]
[10:59:39.768]                   NAME <- NAMES[[kk]]
[10:59:39.768]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.768]                     next
[10:59:39.768]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.768]                 }
[10:59:39.768]                 if (length(args) > 0) 
[10:59:39.768]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.768]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.768]             }
[10:59:39.768]             else {
[10:59:39.768]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.768]             }
[10:59:39.768]             {
[10:59:39.768]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.768]                   0L) {
[10:59:39.768]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.768]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.768]                   base::options(opts)
[10:59:39.768]                 }
[10:59:39.768]                 {
[10:59:39.768]                   {
[10:59:39.768]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.768]                     NULL
[10:59:39.768]                   }
[10:59:39.768]                   options(future.plan = NULL)
[10:59:39.768]                   if (is.na(NA_character_)) 
[10:59:39.768]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.768]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.768]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.768]                     .init = FALSE)
[10:59:39.768]                 }
[10:59:39.768]             }
[10:59:39.768]         }
[10:59:39.768]     })
[10:59:39.768]     if (TRUE) {
[10:59:39.768]         base::sink(type = "output", split = FALSE)
[10:59:39.768]         if (TRUE) {
[10:59:39.768]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.768]         }
[10:59:39.768]         else {
[10:59:39.768]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.768]         }
[10:59:39.768]         base::close(...future.stdout)
[10:59:39.768]         ...future.stdout <- NULL
[10:59:39.768]     }
[10:59:39.768]     ...future.result$conditions <- ...future.conditions
[10:59:39.768]     ...future.result$finished <- base::Sys.time()
[10:59:39.768]     ...future.result
[10:59:39.768] }
[10:59:39.771] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[10:59:39.771] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[10:59:39.771] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[10:59:39.771] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[10:59:39.772] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[10:59:39.772] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[10:59:39.772] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[10:59:39.772] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[10:59:39.773] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[10:59:39.773] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[10:59:39.773] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[10:59:39.773] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[10:59:39.774] MultisessionFuture started
[10:59:39.774] - Launch lazy future ... done
[10:59:39.774] run() for ‘MultisessionFuture’ ... done
[10:59:39.774] Created future:
[10:59:39.774] MultisessionFuture:
[10:59:39.774] Label: ‘future_replicate-1’
[10:59:39.774] Expression:
[10:59:39.774] {
[10:59:39.774]     do.call(function(...) {
[10:59:39.774]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.774]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.774]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.774]             on.exit(options(oopts), add = TRUE)
[10:59:39.774]         }
[10:59:39.774]         {
[10:59:39.774]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.774]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.774]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.774]                   envir = globalenv(), inherits = FALSE)
[10:59:39.774]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.774]             })
[10:59:39.774]         }
[10:59:39.774]     }, args = future.call.arguments)
[10:59:39.774] }
[10:59:39.774] Lazy evaluation: FALSE
[10:59:39.774] Asynchronous evaluation: TRUE
[10:59:39.774] Local evaluation: TRUE
[10:59:39.774] Environment: R_GlobalEnv
[10:59:39.774] Capture standard output: TRUE
[10:59:39.774] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.774] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.774] Packages: <none>
[10:59:39.774] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.774] Resolved: FALSE
[10:59:39.774] Value: <not collected>
[10:59:39.774] Conditions captured: <none>
[10:59:39.774] Early signaling: FALSE
[10:59:39.774] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.774] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.785] Chunk #1 of 2 ... DONE
[10:59:39.785] Chunk #2 of 2 ...
[10:59:39.786]  - Finding globals in 'X' for chunk #2 ...
[10:59:39.786] getGlobalsAndPackages() ...
[10:59:39.786] Searching for globals...
[10:59:39.786] 
[10:59:39.786] Searching for globals ... DONE
[10:59:39.786] - globals: [0] <none>
[10:59:39.786] getGlobalsAndPackages() ... DONE
[10:59:39.786]    + additional globals found: [n=0] 
[10:59:39.787]    + additional namespaces needed: [n=0] 
[10:59:39.787]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:39.787]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.787]  - seeds: [3] <seeds>
[10:59:39.787]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.787] getGlobalsAndPackages() ...
[10:59:39.787] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.787] Resolving globals: FALSE
[10:59:39.787] Tweak future expression to call with '...' arguments ...
[10:59:39.787] {
[10:59:39.787]     do.call(function(...) {
[10:59:39.787]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.787]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.787]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.787]             on.exit(options(oopts), add = TRUE)
[10:59:39.787]         }
[10:59:39.787]         {
[10:59:39.787]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.787]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.787]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.787]                   envir = globalenv(), inherits = FALSE)
[10:59:39.787]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.787]             })
[10:59:39.787]         }
[10:59:39.787]     }, args = future.call.arguments)
[10:59:39.787] }
[10:59:39.788] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.788] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.788] 
[10:59:39.788] getGlobalsAndPackages() ... DONE
[10:59:39.788] run() for ‘Future’ ...
[10:59:39.788] - state: ‘created’
[10:59:39.789] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.802] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.802] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.802]   - Field: ‘node’
[10:59:39.802]   - Field: ‘label’
[10:59:39.802]   - Field: ‘local’
[10:59:39.802]   - Field: ‘owner’
[10:59:39.803]   - Field: ‘envir’
[10:59:39.803]   - Field: ‘workers’
[10:59:39.803]   - Field: ‘packages’
[10:59:39.803]   - Field: ‘gc’
[10:59:39.803]   - Field: ‘conditions’
[10:59:39.803]   - Field: ‘persistent’
[10:59:39.803]   - Field: ‘expr’
[10:59:39.803]   - Field: ‘uuid’
[10:59:39.803]   - Field: ‘seed’
[10:59:39.803]   - Field: ‘version’
[10:59:39.803]   - Field: ‘result’
[10:59:39.804]   - Field: ‘asynchronous’
[10:59:39.804]   - Field: ‘calls’
[10:59:39.804]   - Field: ‘globals’
[10:59:39.804]   - Field: ‘stdout’
[10:59:39.804]   - Field: ‘earlySignal’
[10:59:39.804]   - Field: ‘lazy’
[10:59:39.804]   - Field: ‘state’
[10:59:39.804] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.804] - Launch lazy future ...
[10:59:39.804] Packages needed by the future expression (n = 0): <none>
[10:59:39.805] Packages needed by future strategies (n = 0): <none>
[10:59:39.805] {
[10:59:39.805]     {
[10:59:39.805]         {
[10:59:39.805]             ...future.startTime <- base::Sys.time()
[10:59:39.805]             {
[10:59:39.805]                 {
[10:59:39.805]                   {
[10:59:39.805]                     {
[10:59:39.805]                       base::local({
[10:59:39.805]                         has_future <- base::requireNamespace("future", 
[10:59:39.805]                           quietly = TRUE)
[10:59:39.805]                         if (has_future) {
[10:59:39.805]                           ns <- base::getNamespace("future")
[10:59:39.805]                           version <- ns[[".package"]][["version"]]
[10:59:39.805]                           if (is.null(version)) 
[10:59:39.805]                             version <- utils::packageVersion("future")
[10:59:39.805]                         }
[10:59:39.805]                         else {
[10:59:39.805]                           version <- NULL
[10:59:39.805]                         }
[10:59:39.805]                         if (!has_future || version < "1.8.0") {
[10:59:39.805]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.805]                             "", base::R.version$version.string), 
[10:59:39.805]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.805]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.805]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.805]                               "release", "version")], collapse = " "), 
[10:59:39.805]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.805]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.805]                             info)
[10:59:39.805]                           info <- base::paste(info, collapse = "; ")
[10:59:39.805]                           if (!has_future) {
[10:59:39.805]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.805]                               info)
[10:59:39.805]                           }
[10:59:39.805]                           else {
[10:59:39.805]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.805]                               info, version)
[10:59:39.805]                           }
[10:59:39.805]                           base::stop(msg)
[10:59:39.805]                         }
[10:59:39.805]                       })
[10:59:39.805]                     }
[10:59:39.805]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.805]                     base::options(mc.cores = 1L)
[10:59:39.805]                   }
[10:59:39.805]                   ...future.strategy.old <- future::plan("list")
[10:59:39.805]                   options(future.plan = NULL)
[10:59:39.805]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.805]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.805]                 }
[10:59:39.805]                 ...future.workdir <- getwd()
[10:59:39.805]             }
[10:59:39.805]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.805]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.805]         }
[10:59:39.805]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.805]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.805]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.805]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.805]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.805]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.805]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.805]             base::names(...future.oldOptions))
[10:59:39.805]     }
[10:59:39.805]     if (FALSE) {
[10:59:39.805]     }
[10:59:39.805]     else {
[10:59:39.805]         if (TRUE) {
[10:59:39.805]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.805]                 open = "w")
[10:59:39.805]         }
[10:59:39.805]         else {
[10:59:39.805]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.805]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.805]         }
[10:59:39.805]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.805]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.805]             base::sink(type = "output", split = FALSE)
[10:59:39.805]             base::close(...future.stdout)
[10:59:39.805]         }, add = TRUE)
[10:59:39.805]     }
[10:59:39.805]     ...future.frame <- base::sys.nframe()
[10:59:39.805]     ...future.conditions <- base::list()
[10:59:39.805]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.805]     if (FALSE) {
[10:59:39.805]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.805]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.805]     }
[10:59:39.805]     ...future.result <- base::tryCatch({
[10:59:39.805]         base::withCallingHandlers({
[10:59:39.805]             ...future.value <- base::withVisible(base::local({
[10:59:39.805]                 ...future.makeSendCondition <- base::local({
[10:59:39.805]                   sendCondition <- NULL
[10:59:39.805]                   function(frame = 1L) {
[10:59:39.805]                     if (is.function(sendCondition)) 
[10:59:39.805]                       return(sendCondition)
[10:59:39.805]                     ns <- getNamespace("parallel")
[10:59:39.805]                     if (exists("sendData", mode = "function", 
[10:59:39.805]                       envir = ns)) {
[10:59:39.805]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.805]                         envir = ns)
[10:59:39.805]                       envir <- sys.frame(frame)
[10:59:39.805]                       master <- NULL
[10:59:39.805]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.805]                         !identical(envir, emptyenv())) {
[10:59:39.805]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.805]                           inherits = FALSE)) {
[10:59:39.805]                           master <- get("master", mode = "list", 
[10:59:39.805]                             envir = envir, inherits = FALSE)
[10:59:39.805]                           if (inherits(master, c("SOCKnode", 
[10:59:39.805]                             "SOCK0node"))) {
[10:59:39.805]                             sendCondition <<- function(cond) {
[10:59:39.805]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.805]                                 success = TRUE)
[10:59:39.805]                               parallel_sendData(master, data)
[10:59:39.805]                             }
[10:59:39.805]                             return(sendCondition)
[10:59:39.805]                           }
[10:59:39.805]                         }
[10:59:39.805]                         frame <- frame + 1L
[10:59:39.805]                         envir <- sys.frame(frame)
[10:59:39.805]                       }
[10:59:39.805]                     }
[10:59:39.805]                     sendCondition <<- function(cond) NULL
[10:59:39.805]                   }
[10:59:39.805]                 })
[10:59:39.805]                 withCallingHandlers({
[10:59:39.805]                   {
[10:59:39.805]                     do.call(function(...) {
[10:59:39.805]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.805]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.805]                         ...future.globals.maxSize)) {
[10:59:39.805]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.805]                         on.exit(options(oopts), add = TRUE)
[10:59:39.805]                       }
[10:59:39.805]                       {
[10:59:39.805]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.805]                           FUN = function(jj) {
[10:59:39.805]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.805]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.805]                               envir = globalenv(), inherits = FALSE)
[10:59:39.805]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.805]                           })
[10:59:39.805]                       }
[10:59:39.805]                     }, args = future.call.arguments)
[10:59:39.805]                   }
[10:59:39.805]                 }, immediateCondition = function(cond) {
[10:59:39.805]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.805]                   sendCondition(cond)
[10:59:39.805]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.805]                   {
[10:59:39.805]                     inherits <- base::inherits
[10:59:39.805]                     invokeRestart <- base::invokeRestart
[10:59:39.805]                     is.null <- base::is.null
[10:59:39.805]                     muffled <- FALSE
[10:59:39.805]                     if (inherits(cond, "message")) {
[10:59:39.805]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.805]                       if (muffled) 
[10:59:39.805]                         invokeRestart("muffleMessage")
[10:59:39.805]                     }
[10:59:39.805]                     else if (inherits(cond, "warning")) {
[10:59:39.805]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.805]                       if (muffled) 
[10:59:39.805]                         invokeRestart("muffleWarning")
[10:59:39.805]                     }
[10:59:39.805]                     else if (inherits(cond, "condition")) {
[10:59:39.805]                       if (!is.null(pattern)) {
[10:59:39.805]                         computeRestarts <- base::computeRestarts
[10:59:39.805]                         grepl <- base::grepl
[10:59:39.805]                         restarts <- computeRestarts(cond)
[10:59:39.805]                         for (restart in restarts) {
[10:59:39.805]                           name <- restart$name
[10:59:39.805]                           if (is.null(name)) 
[10:59:39.805]                             next
[10:59:39.805]                           if (!grepl(pattern, name)) 
[10:59:39.805]                             next
[10:59:39.805]                           invokeRestart(restart)
[10:59:39.805]                           muffled <- TRUE
[10:59:39.805]                           break
[10:59:39.805]                         }
[10:59:39.805]                       }
[10:59:39.805]                     }
[10:59:39.805]                     invisible(muffled)
[10:59:39.805]                   }
[10:59:39.805]                   muffleCondition(cond)
[10:59:39.805]                 })
[10:59:39.805]             }))
[10:59:39.805]             future::FutureResult(value = ...future.value$value, 
[10:59:39.805]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.805]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.805]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.805]                     ...future.globalenv.names))
[10:59:39.805]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.805]         }, condition = base::local({
[10:59:39.805]             c <- base::c
[10:59:39.805]             inherits <- base::inherits
[10:59:39.805]             invokeRestart <- base::invokeRestart
[10:59:39.805]             length <- base::length
[10:59:39.805]             list <- base::list
[10:59:39.805]             seq.int <- base::seq.int
[10:59:39.805]             signalCondition <- base::signalCondition
[10:59:39.805]             sys.calls <- base::sys.calls
[10:59:39.805]             `[[` <- base::`[[`
[10:59:39.805]             `+` <- base::`+`
[10:59:39.805]             `<<-` <- base::`<<-`
[10:59:39.805]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.805]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.805]                   3L)]
[10:59:39.805]             }
[10:59:39.805]             function(cond) {
[10:59:39.805]                 is_error <- inherits(cond, "error")
[10:59:39.805]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.805]                   NULL)
[10:59:39.805]                 if (is_error) {
[10:59:39.805]                   sessionInformation <- function() {
[10:59:39.805]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.805]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.805]                       search = base::search(), system = base::Sys.info())
[10:59:39.805]                   }
[10:59:39.805]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.805]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.805]                     cond$call), session = sessionInformation(), 
[10:59:39.805]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.805]                   signalCondition(cond)
[10:59:39.805]                 }
[10:59:39.805]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.805]                 "immediateCondition"))) {
[10:59:39.805]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.805]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.805]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.805]                   if (TRUE && !signal) {
[10:59:39.805]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.805]                     {
[10:59:39.805]                       inherits <- base::inherits
[10:59:39.805]                       invokeRestart <- base::invokeRestart
[10:59:39.805]                       is.null <- base::is.null
[10:59:39.805]                       muffled <- FALSE
[10:59:39.805]                       if (inherits(cond, "message")) {
[10:59:39.805]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.805]                         if (muffled) 
[10:59:39.805]                           invokeRestart("muffleMessage")
[10:59:39.805]                       }
[10:59:39.805]                       else if (inherits(cond, "warning")) {
[10:59:39.805]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.805]                         if (muffled) 
[10:59:39.805]                           invokeRestart("muffleWarning")
[10:59:39.805]                       }
[10:59:39.805]                       else if (inherits(cond, "condition")) {
[10:59:39.805]                         if (!is.null(pattern)) {
[10:59:39.805]                           computeRestarts <- base::computeRestarts
[10:59:39.805]                           grepl <- base::grepl
[10:59:39.805]                           restarts <- computeRestarts(cond)
[10:59:39.805]                           for (restart in restarts) {
[10:59:39.805]                             name <- restart$name
[10:59:39.805]                             if (is.null(name)) 
[10:59:39.805]                               next
[10:59:39.805]                             if (!grepl(pattern, name)) 
[10:59:39.805]                               next
[10:59:39.805]                             invokeRestart(restart)
[10:59:39.805]                             muffled <- TRUE
[10:59:39.805]                             break
[10:59:39.805]                           }
[10:59:39.805]                         }
[10:59:39.805]                       }
[10:59:39.805]                       invisible(muffled)
[10:59:39.805]                     }
[10:59:39.805]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.805]                   }
[10:59:39.805]                 }
[10:59:39.805]                 else {
[10:59:39.805]                   if (TRUE) {
[10:59:39.805]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.805]                     {
[10:59:39.805]                       inherits <- base::inherits
[10:59:39.805]                       invokeRestart <- base::invokeRestart
[10:59:39.805]                       is.null <- base::is.null
[10:59:39.805]                       muffled <- FALSE
[10:59:39.805]                       if (inherits(cond, "message")) {
[10:59:39.805]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.805]                         if (muffled) 
[10:59:39.805]                           invokeRestart("muffleMessage")
[10:59:39.805]                       }
[10:59:39.805]                       else if (inherits(cond, "warning")) {
[10:59:39.805]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.805]                         if (muffled) 
[10:59:39.805]                           invokeRestart("muffleWarning")
[10:59:39.805]                       }
[10:59:39.805]                       else if (inherits(cond, "condition")) {
[10:59:39.805]                         if (!is.null(pattern)) {
[10:59:39.805]                           computeRestarts <- base::computeRestarts
[10:59:39.805]                           grepl <- base::grepl
[10:59:39.805]                           restarts <- computeRestarts(cond)
[10:59:39.805]                           for (restart in restarts) {
[10:59:39.805]                             name <- restart$name
[10:59:39.805]                             if (is.null(name)) 
[10:59:39.805]                               next
[10:59:39.805]                             if (!grepl(pattern, name)) 
[10:59:39.805]                               next
[10:59:39.805]                             invokeRestart(restart)
[10:59:39.805]                             muffled <- TRUE
[10:59:39.805]                             break
[10:59:39.805]                           }
[10:59:39.805]                         }
[10:59:39.805]                       }
[10:59:39.805]                       invisible(muffled)
[10:59:39.805]                     }
[10:59:39.805]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.805]                   }
[10:59:39.805]                 }
[10:59:39.805]             }
[10:59:39.805]         }))
[10:59:39.805]     }, error = function(ex) {
[10:59:39.805]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.805]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.805]                 ...future.rng), started = ...future.startTime, 
[10:59:39.805]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.805]             version = "1.8"), class = "FutureResult")
[10:59:39.805]     }, finally = {
[10:59:39.805]         if (!identical(...future.workdir, getwd())) 
[10:59:39.805]             setwd(...future.workdir)
[10:59:39.805]         {
[10:59:39.805]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.805]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.805]             }
[10:59:39.805]             base::options(...future.oldOptions)
[10:59:39.805]             if (.Platform$OS.type == "windows") {
[10:59:39.805]                 old_names <- names(...future.oldEnvVars)
[10:59:39.805]                 envs <- base::Sys.getenv()
[10:59:39.805]                 names <- names(envs)
[10:59:39.805]                 common <- intersect(names, old_names)
[10:59:39.805]                 added <- setdiff(names, old_names)
[10:59:39.805]                 removed <- setdiff(old_names, names)
[10:59:39.805]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.805]                   envs[common]]
[10:59:39.805]                 NAMES <- toupper(changed)
[10:59:39.805]                 args <- list()
[10:59:39.805]                 for (kk in seq_along(NAMES)) {
[10:59:39.805]                   name <- changed[[kk]]
[10:59:39.805]                   NAME <- NAMES[[kk]]
[10:59:39.805]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.805]                     next
[10:59:39.805]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.805]                 }
[10:59:39.805]                 NAMES <- toupper(added)
[10:59:39.805]                 for (kk in seq_along(NAMES)) {
[10:59:39.805]                   name <- added[[kk]]
[10:59:39.805]                   NAME <- NAMES[[kk]]
[10:59:39.805]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.805]                     next
[10:59:39.805]                   args[[name]] <- ""
[10:59:39.805]                 }
[10:59:39.805]                 NAMES <- toupper(removed)
[10:59:39.805]                 for (kk in seq_along(NAMES)) {
[10:59:39.805]                   name <- removed[[kk]]
[10:59:39.805]                   NAME <- NAMES[[kk]]
[10:59:39.805]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.805]                     next
[10:59:39.805]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.805]                 }
[10:59:39.805]                 if (length(args) > 0) 
[10:59:39.805]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.805]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.805]             }
[10:59:39.805]             else {
[10:59:39.805]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.805]             }
[10:59:39.805]             {
[10:59:39.805]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.805]                   0L) {
[10:59:39.805]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.805]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.805]                   base::options(opts)
[10:59:39.805]                 }
[10:59:39.805]                 {
[10:59:39.805]                   {
[10:59:39.805]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.805]                     NULL
[10:59:39.805]                   }
[10:59:39.805]                   options(future.plan = NULL)
[10:59:39.805]                   if (is.na(NA_character_)) 
[10:59:39.805]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.805]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.805]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.805]                     .init = FALSE)
[10:59:39.805]                 }
[10:59:39.805]             }
[10:59:39.805]         }
[10:59:39.805]     })
[10:59:39.805]     if (TRUE) {
[10:59:39.805]         base::sink(type = "output", split = FALSE)
[10:59:39.805]         if (TRUE) {
[10:59:39.805]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.805]         }
[10:59:39.805]         else {
[10:59:39.805]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.805]         }
[10:59:39.805]         base::close(...future.stdout)
[10:59:39.805]         ...future.stdout <- NULL
[10:59:39.805]     }
[10:59:39.805]     ...future.result$conditions <- ...future.conditions
[10:59:39.805]     ...future.result$finished <- base::Sys.time()
[10:59:39.805]     ...future.result
[10:59:39.805] }
[10:59:39.808] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[10:59:39.808] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[10:59:39.808] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[10:59:39.808] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[10:59:39.809] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[10:59:39.809] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[10:59:39.809] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[10:59:39.809] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[10:59:39.810] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[10:59:39.810] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[10:59:39.810] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[10:59:39.810] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[10:59:39.811] MultisessionFuture started
[10:59:39.811] - Launch lazy future ... done
[10:59:39.811] run() for ‘MultisessionFuture’ ... done
[10:59:39.811] Created future:
[10:59:39.811] MultisessionFuture:
[10:59:39.811] Label: ‘future_replicate-2’
[10:59:39.811] Expression:
[10:59:39.811] {
[10:59:39.811]     do.call(function(...) {
[10:59:39.811]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.811]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.811]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.811]             on.exit(options(oopts), add = TRUE)
[10:59:39.811]         }
[10:59:39.811]         {
[10:59:39.811]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.811]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.811]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.811]                   envir = globalenv(), inherits = FALSE)
[10:59:39.811]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.811]             })
[10:59:39.811]         }
[10:59:39.811]     }, args = future.call.arguments)
[10:59:39.811] }
[10:59:39.811] Lazy evaluation: FALSE
[10:59:39.811] Asynchronous evaluation: TRUE
[10:59:39.811] Local evaluation: TRUE
[10:59:39.811] Environment: R_GlobalEnv
[10:59:39.811] Capture standard output: TRUE
[10:59:39.811] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.811] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.811] Packages: <none>
[10:59:39.811] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.811] Resolved: FALSE
[10:59:39.811] Value: <not collected>
[10:59:39.811] Conditions captured: <none>
[10:59:39.811] Early signaling: FALSE
[10:59:39.811] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.811] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.822] Chunk #2 of 2 ... DONE
[10:59:39.822] Launching 2 futures (chunks) ... DONE
[10:59:39.823] Resolving 2 futures (chunks) ...
[10:59:39.823] resolve() on list ...
[10:59:39.823]  recursive: 0
[10:59:39.823]  length: 2
[10:59:39.823] 
[10:59:39.823] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.824] - Validating connection of MultisessionFuture
[10:59:39.824] - received message: FutureResult
[10:59:39.824] - Received FutureResult
[10:59:39.824] - Erased future from FutureRegistry
[10:59:39.824] result() for ClusterFuture ...
[10:59:39.824] - result already collected: FutureResult
[10:59:39.824] result() for ClusterFuture ... done
[10:59:39.824] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.824] Future #1
[10:59:39.824] result() for ClusterFuture ...
[10:59:39.824] - result already collected: FutureResult
[10:59:39.825] result() for ClusterFuture ... done
[10:59:39.825] result() for ClusterFuture ...
[10:59:39.825] - result already collected: FutureResult
[10:59:39.825] result() for ClusterFuture ... done
[10:59:39.825] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:59:39.825] - nx: 2
[10:59:39.825] - relay: TRUE
[10:59:39.825] - stdout: TRUE
[10:59:39.825] - signal: TRUE
[10:59:39.825] - resignal: FALSE
[10:59:39.825] - force: TRUE
[10:59:39.825] - relayed: [n=2] FALSE, FALSE
[10:59:39.826] - queued futures: [n=2] FALSE, FALSE
[10:59:39.826]  - until=1
[10:59:39.826]  - relaying element #1
[10:59:39.826] result() for ClusterFuture ...
[10:59:39.826] - result already collected: FutureResult
[10:59:39.826] result() for ClusterFuture ... done
[10:59:39.826] result() for ClusterFuture ...
[10:59:39.826] - result already collected: FutureResult
[10:59:39.826] result() for ClusterFuture ... done
[10:59:39.826] result() for ClusterFuture ...
[10:59:39.826] - result already collected: FutureResult
[10:59:39.826] result() for ClusterFuture ... done
[10:59:39.827] result() for ClusterFuture ...
[10:59:39.827] - result already collected: FutureResult
[10:59:39.827] result() for ClusterFuture ... done
[10:59:39.827] - relayed: [n=2] TRUE, FALSE
[10:59:39.827] - queued futures: [n=2] TRUE, FALSE
[10:59:39.827] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:59:39.827]  length: 1 (resolved future 1)
[10:59:39.852] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.852] - Validating connection of MultisessionFuture
[10:59:39.852] - received message: FutureResult
[10:59:39.853] - Received FutureResult
[10:59:39.853] - Erased future from FutureRegistry
[10:59:39.853] result() for ClusterFuture ...
[10:59:39.853] - result already collected: FutureResult
[10:59:39.853] result() for ClusterFuture ... done
[10:59:39.853] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.853] Future #2
[10:59:39.853] result() for ClusterFuture ...
[10:59:39.853] - result already collected: FutureResult
[10:59:39.853] result() for ClusterFuture ... done
[10:59:39.853] result() for ClusterFuture ...
[10:59:39.853] - result already collected: FutureResult
[10:59:39.854] result() for ClusterFuture ... done
[10:59:39.854] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:59:39.854] - nx: 2
[10:59:39.854] - relay: TRUE
[10:59:39.854] - stdout: TRUE
[10:59:39.854] - signal: TRUE
[10:59:39.854] - resignal: FALSE
[10:59:39.854] - force: TRUE
[10:59:39.854] - relayed: [n=2] TRUE, FALSE
[10:59:39.854] - queued futures: [n=2] TRUE, FALSE
[10:59:39.854]  - until=2
[10:59:39.854]  - relaying element #2
[10:59:39.855] result() for ClusterFuture ...
[10:59:39.855] - result already collected: FutureResult
[10:59:39.855] result() for ClusterFuture ... done
[10:59:39.855] result() for ClusterFuture ...
[10:59:39.855] - result already collected: FutureResult
[10:59:39.855] result() for ClusterFuture ... done
[10:59:39.855] result() for ClusterFuture ...
[10:59:39.855] - result already collected: FutureResult
[10:59:39.855] result() for ClusterFuture ... done
[10:59:39.855] result() for ClusterFuture ...
[10:59:39.855] - result already collected: FutureResult
[10:59:39.855] result() for ClusterFuture ... done
[10:59:39.856] - relayed: [n=2] TRUE, TRUE
[10:59:39.856] - queued futures: [n=2] TRUE, TRUE
[10:59:39.856] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:59:39.856]  length: 0 (resolved future 2)
[10:59:39.856] Relaying remaining futures
[10:59:39.856] signalConditionsASAP(NULL, pos=0) ...
[10:59:39.856] - nx: 2
[10:59:39.856] - relay: TRUE
[10:59:39.856] - stdout: TRUE
[10:59:39.856] - signal: TRUE
[10:59:39.856] - resignal: FALSE
[10:59:39.856] - force: TRUE
[10:59:39.856] - relayed: [n=2] TRUE, TRUE
[10:59:39.857] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:39.857] - relayed: [n=2] TRUE, TRUE
[10:59:39.857] - queued futures: [n=2] TRUE, TRUE
[10:59:39.857] signalConditionsASAP(NULL, pos=0) ... done
[10:59:39.857] resolve() on list ... DONE
[10:59:39.857] result() for ClusterFuture ...
[10:59:39.857] - result already collected: FutureResult
[10:59:39.857] result() for ClusterFuture ... done
[10:59:39.857] result() for ClusterFuture ...
[10:59:39.857] - result already collected: FutureResult
[10:59:39.857] result() for ClusterFuture ... done
[10:59:39.858] result() for ClusterFuture ...
[10:59:39.858] - result already collected: FutureResult
[10:59:39.858] result() for ClusterFuture ... done
[10:59:39.858] result() for ClusterFuture ...
[10:59:39.858] - result already collected: FutureResult
[10:59:39.858] result() for ClusterFuture ... done
[10:59:39.858]  - Number of value chunks collected: 2
[10:59:39.858] Resolving 2 futures (chunks) ... DONE
[10:59:39.858] Reducing values from 2 chunks ...
[10:59:39.858]  - Number of values collected after concatenation: 5
[10:59:39.858]  - Number of values expected: 5
[10:59:39.858] Reducing values from 2 chunks ... DONE
[10:59:39.858] future_lapply() ... DONE
[10:59:39.859] future_lapply() ...
[10:59:39.859] Generating random seeds ...
[10:59:39.859] Generating random seed streams for 5 elements ...
[10:59:39.859] Generating random seed streams for 5 elements ... DONE
[10:59:39.859] Generating random seeds ... DONE
[10:59:39.859] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:39.861] Number of chunks: 2
[10:59:39.861] getGlobalsAndPackagesXApply() ...
[10:59:39.861]  - future.globals: TRUE
[10:59:39.862] getGlobalsAndPackages() ...
[10:59:39.862] Searching for globals...
[10:59:39.863] - globals found: [2] ‘FUN’, ‘sample’
[10:59:39.863] Searching for globals ... DONE
[10:59:39.863] Resolving globals: FALSE
[10:59:39.863] The total size of the 1 globals is 132 bytes (132 bytes)
[10:59:39.863] The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:59:39.864] - globals: [1] ‘FUN’
[10:59:39.864] 
[10:59:39.864] getGlobalsAndPackages() ... DONE
[10:59:39.864]  - globals found/used: [n=1] ‘FUN’
[10:59:39.864]  - needed namespaces: [n=0] 
[10:59:39.864] Finding globals ... DONE
[10:59:39.864]  - use_args: TRUE
[10:59:39.864]  - Getting '...' globals ...
[10:59:39.864] resolve() on list ...
[10:59:39.865]  recursive: 0
[10:59:39.865]  length: 1
[10:59:39.865]  elements: ‘...’
[10:59:39.865]  length: 0 (resolved future 1)
[10:59:39.865] resolve() on list ... DONE
[10:59:39.865]    - '...' content: [n=0] 
[10:59:39.865] List of 1
[10:59:39.865]  $ ...: list()
[10:59:39.865]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.865]  - attr(*, "where")=List of 1
[10:59:39.865]   ..$ ...:<environment: 0x562630ca00a8> 
[10:59:39.865]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.865]  - attr(*, "resolved")= logi TRUE
[10:59:39.865]  - attr(*, "total_size")= num NA
[10:59:39.867]  - Getting '...' globals ... DONE
[10:59:39.868] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:59:39.868] List of 2
[10:59:39.868]  $ ...future.FUN:function (...)  
[10:59:39.868]  $ ...          : list()
[10:59:39.868]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.868]  - attr(*, "where")=List of 2
[10:59:39.868]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:39.868]   ..$ ...          :<environment: 0x562630ca00a8> 
[10:59:39.868]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.868]  - attr(*, "resolved")= logi FALSE
[10:59:39.868]  - attr(*, "total_size")= num 7184
[10:59:39.870] Packages to be attached in all futures: [n=0] 
[10:59:39.872] getGlobalsAndPackagesXApply() ... DONE
[10:59:39.872] Number of futures (= number of chunks): 2
[10:59:39.872] Launching 2 futures (chunks) ...
[10:59:39.872] Chunk #1 of 2 ...
[10:59:39.872]  - Finding globals in 'X' for chunk #1 ...
[10:59:39.872] getGlobalsAndPackages() ...
[10:59:39.872] Searching for globals...
[10:59:39.873] 
[10:59:39.873] Searching for globals ... DONE
[10:59:39.873] - globals: [0] <none>
[10:59:39.873] getGlobalsAndPackages() ... DONE
[10:59:39.873]    + additional globals found: [n=0] 
[10:59:39.873]    + additional namespaces needed: [n=0] 
[10:59:39.873]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:39.873]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.873]  - seeds: [2] <seeds>
[10:59:39.873]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.874] getGlobalsAndPackages() ...
[10:59:39.874] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.874] Resolving globals: FALSE
[10:59:39.874] Tweak future expression to call with '...' arguments ...
[10:59:39.874] {
[10:59:39.874]     do.call(function(...) {
[10:59:39.874]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.874]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.874]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.874]             on.exit(options(oopts), add = TRUE)
[10:59:39.874]         }
[10:59:39.874]         {
[10:59:39.874]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.874]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.874]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.874]                   envir = globalenv(), inherits = FALSE)
[10:59:39.874]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.874]             })
[10:59:39.874]         }
[10:59:39.874]     }, args = future.call.arguments)
[10:59:39.874] }
[10:59:39.874] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.875] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.875] 
[10:59:39.875] getGlobalsAndPackages() ... DONE
[10:59:39.875] run() for ‘Future’ ...
[10:59:39.875] - state: ‘created’
[10:59:39.875] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.889] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.889] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.889]   - Field: ‘node’
[10:59:39.889]   - Field: ‘label’
[10:59:39.889]   - Field: ‘local’
[10:59:39.889]   - Field: ‘owner’
[10:59:39.889]   - Field: ‘envir’
[10:59:39.889]   - Field: ‘workers’
[10:59:39.890]   - Field: ‘packages’
[10:59:39.890]   - Field: ‘gc’
[10:59:39.890]   - Field: ‘conditions’
[10:59:39.890]   - Field: ‘persistent’
[10:59:39.890]   - Field: ‘expr’
[10:59:39.890]   - Field: ‘uuid’
[10:59:39.890]   - Field: ‘seed’
[10:59:39.890]   - Field: ‘version’
[10:59:39.890]   - Field: ‘result’
[10:59:39.890]   - Field: ‘asynchronous’
[10:59:39.890]   - Field: ‘calls’
[10:59:39.890]   - Field: ‘globals’
[10:59:39.891]   - Field: ‘stdout’
[10:59:39.891]   - Field: ‘earlySignal’
[10:59:39.891]   - Field: ‘lazy’
[10:59:39.891]   - Field: ‘state’
[10:59:39.891] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.891] - Launch lazy future ...
[10:59:39.891] Packages needed by the future expression (n = 0): <none>
[10:59:39.891] Packages needed by future strategies (n = 0): <none>
[10:59:39.892] {
[10:59:39.892]     {
[10:59:39.892]         {
[10:59:39.892]             ...future.startTime <- base::Sys.time()
[10:59:39.892]             {
[10:59:39.892]                 {
[10:59:39.892]                   {
[10:59:39.892]                     {
[10:59:39.892]                       base::local({
[10:59:39.892]                         has_future <- base::requireNamespace("future", 
[10:59:39.892]                           quietly = TRUE)
[10:59:39.892]                         if (has_future) {
[10:59:39.892]                           ns <- base::getNamespace("future")
[10:59:39.892]                           version <- ns[[".package"]][["version"]]
[10:59:39.892]                           if (is.null(version)) 
[10:59:39.892]                             version <- utils::packageVersion("future")
[10:59:39.892]                         }
[10:59:39.892]                         else {
[10:59:39.892]                           version <- NULL
[10:59:39.892]                         }
[10:59:39.892]                         if (!has_future || version < "1.8.0") {
[10:59:39.892]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.892]                             "", base::R.version$version.string), 
[10:59:39.892]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.892]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.892]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.892]                               "release", "version")], collapse = " "), 
[10:59:39.892]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.892]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.892]                             info)
[10:59:39.892]                           info <- base::paste(info, collapse = "; ")
[10:59:39.892]                           if (!has_future) {
[10:59:39.892]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.892]                               info)
[10:59:39.892]                           }
[10:59:39.892]                           else {
[10:59:39.892]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.892]                               info, version)
[10:59:39.892]                           }
[10:59:39.892]                           base::stop(msg)
[10:59:39.892]                         }
[10:59:39.892]                       })
[10:59:39.892]                     }
[10:59:39.892]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.892]                     base::options(mc.cores = 1L)
[10:59:39.892]                   }
[10:59:39.892]                   ...future.strategy.old <- future::plan("list")
[10:59:39.892]                   options(future.plan = NULL)
[10:59:39.892]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.892]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.892]                 }
[10:59:39.892]                 ...future.workdir <- getwd()
[10:59:39.892]             }
[10:59:39.892]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.892]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.892]         }
[10:59:39.892]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.892]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.892]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.892]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.892]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.892]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.892]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.892]             base::names(...future.oldOptions))
[10:59:39.892]     }
[10:59:39.892]     if (FALSE) {
[10:59:39.892]     }
[10:59:39.892]     else {
[10:59:39.892]         if (TRUE) {
[10:59:39.892]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.892]                 open = "w")
[10:59:39.892]         }
[10:59:39.892]         else {
[10:59:39.892]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.892]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.892]         }
[10:59:39.892]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.892]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.892]             base::sink(type = "output", split = FALSE)
[10:59:39.892]             base::close(...future.stdout)
[10:59:39.892]         }, add = TRUE)
[10:59:39.892]     }
[10:59:39.892]     ...future.frame <- base::sys.nframe()
[10:59:39.892]     ...future.conditions <- base::list()
[10:59:39.892]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.892]     if (FALSE) {
[10:59:39.892]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.892]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.892]     }
[10:59:39.892]     ...future.result <- base::tryCatch({
[10:59:39.892]         base::withCallingHandlers({
[10:59:39.892]             ...future.value <- base::withVisible(base::local({
[10:59:39.892]                 ...future.makeSendCondition <- base::local({
[10:59:39.892]                   sendCondition <- NULL
[10:59:39.892]                   function(frame = 1L) {
[10:59:39.892]                     if (is.function(sendCondition)) 
[10:59:39.892]                       return(sendCondition)
[10:59:39.892]                     ns <- getNamespace("parallel")
[10:59:39.892]                     if (exists("sendData", mode = "function", 
[10:59:39.892]                       envir = ns)) {
[10:59:39.892]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.892]                         envir = ns)
[10:59:39.892]                       envir <- sys.frame(frame)
[10:59:39.892]                       master <- NULL
[10:59:39.892]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.892]                         !identical(envir, emptyenv())) {
[10:59:39.892]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.892]                           inherits = FALSE)) {
[10:59:39.892]                           master <- get("master", mode = "list", 
[10:59:39.892]                             envir = envir, inherits = FALSE)
[10:59:39.892]                           if (inherits(master, c("SOCKnode", 
[10:59:39.892]                             "SOCK0node"))) {
[10:59:39.892]                             sendCondition <<- function(cond) {
[10:59:39.892]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.892]                                 success = TRUE)
[10:59:39.892]                               parallel_sendData(master, data)
[10:59:39.892]                             }
[10:59:39.892]                             return(sendCondition)
[10:59:39.892]                           }
[10:59:39.892]                         }
[10:59:39.892]                         frame <- frame + 1L
[10:59:39.892]                         envir <- sys.frame(frame)
[10:59:39.892]                       }
[10:59:39.892]                     }
[10:59:39.892]                     sendCondition <<- function(cond) NULL
[10:59:39.892]                   }
[10:59:39.892]                 })
[10:59:39.892]                 withCallingHandlers({
[10:59:39.892]                   {
[10:59:39.892]                     do.call(function(...) {
[10:59:39.892]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.892]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.892]                         ...future.globals.maxSize)) {
[10:59:39.892]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.892]                         on.exit(options(oopts), add = TRUE)
[10:59:39.892]                       }
[10:59:39.892]                       {
[10:59:39.892]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.892]                           FUN = function(jj) {
[10:59:39.892]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.892]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.892]                               envir = globalenv(), inherits = FALSE)
[10:59:39.892]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.892]                           })
[10:59:39.892]                       }
[10:59:39.892]                     }, args = future.call.arguments)
[10:59:39.892]                   }
[10:59:39.892]                 }, immediateCondition = function(cond) {
[10:59:39.892]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.892]                   sendCondition(cond)
[10:59:39.892]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.892]                   {
[10:59:39.892]                     inherits <- base::inherits
[10:59:39.892]                     invokeRestart <- base::invokeRestart
[10:59:39.892]                     is.null <- base::is.null
[10:59:39.892]                     muffled <- FALSE
[10:59:39.892]                     if (inherits(cond, "message")) {
[10:59:39.892]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.892]                       if (muffled) 
[10:59:39.892]                         invokeRestart("muffleMessage")
[10:59:39.892]                     }
[10:59:39.892]                     else if (inherits(cond, "warning")) {
[10:59:39.892]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.892]                       if (muffled) 
[10:59:39.892]                         invokeRestart("muffleWarning")
[10:59:39.892]                     }
[10:59:39.892]                     else if (inherits(cond, "condition")) {
[10:59:39.892]                       if (!is.null(pattern)) {
[10:59:39.892]                         computeRestarts <- base::computeRestarts
[10:59:39.892]                         grepl <- base::grepl
[10:59:39.892]                         restarts <- computeRestarts(cond)
[10:59:39.892]                         for (restart in restarts) {
[10:59:39.892]                           name <- restart$name
[10:59:39.892]                           if (is.null(name)) 
[10:59:39.892]                             next
[10:59:39.892]                           if (!grepl(pattern, name)) 
[10:59:39.892]                             next
[10:59:39.892]                           invokeRestart(restart)
[10:59:39.892]                           muffled <- TRUE
[10:59:39.892]                           break
[10:59:39.892]                         }
[10:59:39.892]                       }
[10:59:39.892]                     }
[10:59:39.892]                     invisible(muffled)
[10:59:39.892]                   }
[10:59:39.892]                   muffleCondition(cond)
[10:59:39.892]                 })
[10:59:39.892]             }))
[10:59:39.892]             future::FutureResult(value = ...future.value$value, 
[10:59:39.892]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.892]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.892]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.892]                     ...future.globalenv.names))
[10:59:39.892]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.892]         }, condition = base::local({
[10:59:39.892]             c <- base::c
[10:59:39.892]             inherits <- base::inherits
[10:59:39.892]             invokeRestart <- base::invokeRestart
[10:59:39.892]             length <- base::length
[10:59:39.892]             list <- base::list
[10:59:39.892]             seq.int <- base::seq.int
[10:59:39.892]             signalCondition <- base::signalCondition
[10:59:39.892]             sys.calls <- base::sys.calls
[10:59:39.892]             `[[` <- base::`[[`
[10:59:39.892]             `+` <- base::`+`
[10:59:39.892]             `<<-` <- base::`<<-`
[10:59:39.892]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.892]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.892]                   3L)]
[10:59:39.892]             }
[10:59:39.892]             function(cond) {
[10:59:39.892]                 is_error <- inherits(cond, "error")
[10:59:39.892]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.892]                   NULL)
[10:59:39.892]                 if (is_error) {
[10:59:39.892]                   sessionInformation <- function() {
[10:59:39.892]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.892]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.892]                       search = base::search(), system = base::Sys.info())
[10:59:39.892]                   }
[10:59:39.892]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.892]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.892]                     cond$call), session = sessionInformation(), 
[10:59:39.892]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.892]                   signalCondition(cond)
[10:59:39.892]                 }
[10:59:39.892]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.892]                 "immediateCondition"))) {
[10:59:39.892]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.892]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.892]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.892]                   if (TRUE && !signal) {
[10:59:39.892]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.892]                     {
[10:59:39.892]                       inherits <- base::inherits
[10:59:39.892]                       invokeRestart <- base::invokeRestart
[10:59:39.892]                       is.null <- base::is.null
[10:59:39.892]                       muffled <- FALSE
[10:59:39.892]                       if (inherits(cond, "message")) {
[10:59:39.892]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.892]                         if (muffled) 
[10:59:39.892]                           invokeRestart("muffleMessage")
[10:59:39.892]                       }
[10:59:39.892]                       else if (inherits(cond, "warning")) {
[10:59:39.892]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.892]                         if (muffled) 
[10:59:39.892]                           invokeRestart("muffleWarning")
[10:59:39.892]                       }
[10:59:39.892]                       else if (inherits(cond, "condition")) {
[10:59:39.892]                         if (!is.null(pattern)) {
[10:59:39.892]                           computeRestarts <- base::computeRestarts
[10:59:39.892]                           grepl <- base::grepl
[10:59:39.892]                           restarts <- computeRestarts(cond)
[10:59:39.892]                           for (restart in restarts) {
[10:59:39.892]                             name <- restart$name
[10:59:39.892]                             if (is.null(name)) 
[10:59:39.892]                               next
[10:59:39.892]                             if (!grepl(pattern, name)) 
[10:59:39.892]                               next
[10:59:39.892]                             invokeRestart(restart)
[10:59:39.892]                             muffled <- TRUE
[10:59:39.892]                             break
[10:59:39.892]                           }
[10:59:39.892]                         }
[10:59:39.892]                       }
[10:59:39.892]                       invisible(muffled)
[10:59:39.892]                     }
[10:59:39.892]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.892]                   }
[10:59:39.892]                 }
[10:59:39.892]                 else {
[10:59:39.892]                   if (TRUE) {
[10:59:39.892]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.892]                     {
[10:59:39.892]                       inherits <- base::inherits
[10:59:39.892]                       invokeRestart <- base::invokeRestart
[10:59:39.892]                       is.null <- base::is.null
[10:59:39.892]                       muffled <- FALSE
[10:59:39.892]                       if (inherits(cond, "message")) {
[10:59:39.892]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.892]                         if (muffled) 
[10:59:39.892]                           invokeRestart("muffleMessage")
[10:59:39.892]                       }
[10:59:39.892]                       else if (inherits(cond, "warning")) {
[10:59:39.892]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.892]                         if (muffled) 
[10:59:39.892]                           invokeRestart("muffleWarning")
[10:59:39.892]                       }
[10:59:39.892]                       else if (inherits(cond, "condition")) {
[10:59:39.892]                         if (!is.null(pattern)) {
[10:59:39.892]                           computeRestarts <- base::computeRestarts
[10:59:39.892]                           grepl <- base::grepl
[10:59:39.892]                           restarts <- computeRestarts(cond)
[10:59:39.892]                           for (restart in restarts) {
[10:59:39.892]                             name <- restart$name
[10:59:39.892]                             if (is.null(name)) 
[10:59:39.892]                               next
[10:59:39.892]                             if (!grepl(pattern, name)) 
[10:59:39.892]                               next
[10:59:39.892]                             invokeRestart(restart)
[10:59:39.892]                             muffled <- TRUE
[10:59:39.892]                             break
[10:59:39.892]                           }
[10:59:39.892]                         }
[10:59:39.892]                       }
[10:59:39.892]                       invisible(muffled)
[10:59:39.892]                     }
[10:59:39.892]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.892]                   }
[10:59:39.892]                 }
[10:59:39.892]             }
[10:59:39.892]         }))
[10:59:39.892]     }, error = function(ex) {
[10:59:39.892]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.892]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.892]                 ...future.rng), started = ...future.startTime, 
[10:59:39.892]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.892]             version = "1.8"), class = "FutureResult")
[10:59:39.892]     }, finally = {
[10:59:39.892]         if (!identical(...future.workdir, getwd())) 
[10:59:39.892]             setwd(...future.workdir)
[10:59:39.892]         {
[10:59:39.892]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.892]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.892]             }
[10:59:39.892]             base::options(...future.oldOptions)
[10:59:39.892]             if (.Platform$OS.type == "windows") {
[10:59:39.892]                 old_names <- names(...future.oldEnvVars)
[10:59:39.892]                 envs <- base::Sys.getenv()
[10:59:39.892]                 names <- names(envs)
[10:59:39.892]                 common <- intersect(names, old_names)
[10:59:39.892]                 added <- setdiff(names, old_names)
[10:59:39.892]                 removed <- setdiff(old_names, names)
[10:59:39.892]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.892]                   envs[common]]
[10:59:39.892]                 NAMES <- toupper(changed)
[10:59:39.892]                 args <- list()
[10:59:39.892]                 for (kk in seq_along(NAMES)) {
[10:59:39.892]                   name <- changed[[kk]]
[10:59:39.892]                   NAME <- NAMES[[kk]]
[10:59:39.892]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.892]                     next
[10:59:39.892]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.892]                 }
[10:59:39.892]                 NAMES <- toupper(added)
[10:59:39.892]                 for (kk in seq_along(NAMES)) {
[10:59:39.892]                   name <- added[[kk]]
[10:59:39.892]                   NAME <- NAMES[[kk]]
[10:59:39.892]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.892]                     next
[10:59:39.892]                   args[[name]] <- ""
[10:59:39.892]                 }
[10:59:39.892]                 NAMES <- toupper(removed)
[10:59:39.892]                 for (kk in seq_along(NAMES)) {
[10:59:39.892]                   name <- removed[[kk]]
[10:59:39.892]                   NAME <- NAMES[[kk]]
[10:59:39.892]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.892]                     next
[10:59:39.892]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.892]                 }
[10:59:39.892]                 if (length(args) > 0) 
[10:59:39.892]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.892]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.892]             }
[10:59:39.892]             else {
[10:59:39.892]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.892]             }
[10:59:39.892]             {
[10:59:39.892]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.892]                   0L) {
[10:59:39.892]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.892]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.892]                   base::options(opts)
[10:59:39.892]                 }
[10:59:39.892]                 {
[10:59:39.892]                   {
[10:59:39.892]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.892]                     NULL
[10:59:39.892]                   }
[10:59:39.892]                   options(future.plan = NULL)
[10:59:39.892]                   if (is.na(NA_character_)) 
[10:59:39.892]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.892]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.892]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.892]                     .init = FALSE)
[10:59:39.892]                 }
[10:59:39.892]             }
[10:59:39.892]         }
[10:59:39.892]     })
[10:59:39.892]     if (TRUE) {
[10:59:39.892]         base::sink(type = "output", split = FALSE)
[10:59:39.892]         if (TRUE) {
[10:59:39.892]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.892]         }
[10:59:39.892]         else {
[10:59:39.892]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.892]         }
[10:59:39.892]         base::close(...future.stdout)
[10:59:39.892]         ...future.stdout <- NULL
[10:59:39.892]     }
[10:59:39.892]     ...future.result$conditions <- ...future.conditions
[10:59:39.892]     ...future.result$finished <- base::Sys.time()
[10:59:39.892]     ...future.result
[10:59:39.892] }
[10:59:39.894] Exporting 5 global objects (890 bytes) to cluster node #1 ...
[10:59:39.894] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ...
[10:59:39.895] Exporting ‘...future.FUN’ (132 bytes) to cluster node #1 ... DONE
[10:59:39.895] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[10:59:39.895] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[10:59:39.895] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[10:59:39.896] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[10:59:39.896] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[10:59:39.896] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[10:59:39.896] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[10:59:39.897] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[10:59:39.897] Exporting 5 global objects (890 bytes) to cluster node #1 ... DONE
[10:59:39.897] MultisessionFuture started
[10:59:39.897] - Launch lazy future ... done
[10:59:39.897] run() for ‘MultisessionFuture’ ... done
[10:59:39.897] Created future:
[10:59:39.898] MultisessionFuture:
[10:59:39.898] Label: ‘future_replicate-1’
[10:59:39.898] Expression:
[10:59:39.898] {
[10:59:39.898]     do.call(function(...) {
[10:59:39.898]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.898]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.898]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.898]             on.exit(options(oopts), add = TRUE)
[10:59:39.898]         }
[10:59:39.898]         {
[10:59:39.898]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.898]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.898]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.898]                   envir = globalenv(), inherits = FALSE)
[10:59:39.898]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.898]             })
[10:59:39.898]         }
[10:59:39.898]     }, args = future.call.arguments)
[10:59:39.898] }
[10:59:39.898] Lazy evaluation: FALSE
[10:59:39.898] Asynchronous evaluation: TRUE
[10:59:39.898] Local evaluation: TRUE
[10:59:39.898] Environment: R_GlobalEnv
[10:59:39.898] Capture standard output: TRUE
[10:59:39.898] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.898] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.898] Packages: <none>
[10:59:39.898] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.898] Resolved: FALSE
[10:59:39.898] Value: <not collected>
[10:59:39.898] Conditions captured: <none>
[10:59:39.898] Early signaling: FALSE
[10:59:39.898] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.898] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.909] Chunk #1 of 2 ... DONE
[10:59:39.909] Chunk #2 of 2 ...
[10:59:39.909]  - Finding globals in 'X' for chunk #2 ...
[10:59:39.909] getGlobalsAndPackages() ...
[10:59:39.909] Searching for globals...
[10:59:39.910] 
[10:59:39.910] Searching for globals ... DONE
[10:59:39.910] - globals: [0] <none>
[10:59:39.910] getGlobalsAndPackages() ... DONE
[10:59:39.910]    + additional globals found: [n=0] 
[10:59:39.910]    + additional namespaces needed: [n=0] 
[10:59:39.910]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:39.910]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.910]  - seeds: [3] <seeds>
[10:59:39.910]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.911] getGlobalsAndPackages() ...
[10:59:39.911] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.911] Resolving globals: FALSE
[10:59:39.911] Tweak future expression to call with '...' arguments ...
[10:59:39.911] {
[10:59:39.911]     do.call(function(...) {
[10:59:39.911]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.911]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.911]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.911]             on.exit(options(oopts), add = TRUE)
[10:59:39.911]         }
[10:59:39.911]         {
[10:59:39.911]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.911]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.911]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.911]                   envir = globalenv(), inherits = FALSE)
[10:59:39.911]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.911]             })
[10:59:39.911]         }
[10:59:39.911]     }, args = future.call.arguments)
[10:59:39.911] }
[10:59:39.911] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.911] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.912] 
[10:59:39.912] getGlobalsAndPackages() ... DONE
[10:59:39.912] run() for ‘Future’ ...
[10:59:39.912] - state: ‘created’
[10:59:39.912] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:39.926] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.926] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:39.926]   - Field: ‘node’
[10:59:39.926]   - Field: ‘label’
[10:59:39.926]   - Field: ‘local’
[10:59:39.926]   - Field: ‘owner’
[10:59:39.926]   - Field: ‘envir’
[10:59:39.926]   - Field: ‘workers’
[10:59:39.927]   - Field: ‘packages’
[10:59:39.927]   - Field: ‘gc’
[10:59:39.927]   - Field: ‘conditions’
[10:59:39.927]   - Field: ‘persistent’
[10:59:39.927]   - Field: ‘expr’
[10:59:39.927]   - Field: ‘uuid’
[10:59:39.927]   - Field: ‘seed’
[10:59:39.927]   - Field: ‘version’
[10:59:39.927]   - Field: ‘result’
[10:59:39.927]   - Field: ‘asynchronous’
[10:59:39.927]   - Field: ‘calls’
[10:59:39.927]   - Field: ‘globals’
[10:59:39.928]   - Field: ‘stdout’
[10:59:39.928]   - Field: ‘earlySignal’
[10:59:39.928]   - Field: ‘lazy’
[10:59:39.928]   - Field: ‘state’
[10:59:39.928] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:39.928] - Launch lazy future ...
[10:59:39.928] Packages needed by the future expression (n = 0): <none>
[10:59:39.928] Packages needed by future strategies (n = 0): <none>
[10:59:39.929] {
[10:59:39.929]     {
[10:59:39.929]         {
[10:59:39.929]             ...future.startTime <- base::Sys.time()
[10:59:39.929]             {
[10:59:39.929]                 {
[10:59:39.929]                   {
[10:59:39.929]                     {
[10:59:39.929]                       base::local({
[10:59:39.929]                         has_future <- base::requireNamespace("future", 
[10:59:39.929]                           quietly = TRUE)
[10:59:39.929]                         if (has_future) {
[10:59:39.929]                           ns <- base::getNamespace("future")
[10:59:39.929]                           version <- ns[[".package"]][["version"]]
[10:59:39.929]                           if (is.null(version)) 
[10:59:39.929]                             version <- utils::packageVersion("future")
[10:59:39.929]                         }
[10:59:39.929]                         else {
[10:59:39.929]                           version <- NULL
[10:59:39.929]                         }
[10:59:39.929]                         if (!has_future || version < "1.8.0") {
[10:59:39.929]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:39.929]                             "", base::R.version$version.string), 
[10:59:39.929]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:39.929]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:39.929]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:39.929]                               "release", "version")], collapse = " "), 
[10:59:39.929]                             hostname = base::Sys.info()[["nodename"]])
[10:59:39.929]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:39.929]                             info)
[10:59:39.929]                           info <- base::paste(info, collapse = "; ")
[10:59:39.929]                           if (!has_future) {
[10:59:39.929]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:39.929]                               info)
[10:59:39.929]                           }
[10:59:39.929]                           else {
[10:59:39.929]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:39.929]                               info, version)
[10:59:39.929]                           }
[10:59:39.929]                           base::stop(msg)
[10:59:39.929]                         }
[10:59:39.929]                       })
[10:59:39.929]                     }
[10:59:39.929]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:39.929]                     base::options(mc.cores = 1L)
[10:59:39.929]                   }
[10:59:39.929]                   ...future.strategy.old <- future::plan("list")
[10:59:39.929]                   options(future.plan = NULL)
[10:59:39.929]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.929]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:39.929]                 }
[10:59:39.929]                 ...future.workdir <- getwd()
[10:59:39.929]             }
[10:59:39.929]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:39.929]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:39.929]         }
[10:59:39.929]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:39.929]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:39.929]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:39.929]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:39.929]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:39.929]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:39.929]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:39.929]             base::names(...future.oldOptions))
[10:59:39.929]     }
[10:59:39.929]     if (FALSE) {
[10:59:39.929]     }
[10:59:39.929]     else {
[10:59:39.929]         if (TRUE) {
[10:59:39.929]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:39.929]                 open = "w")
[10:59:39.929]         }
[10:59:39.929]         else {
[10:59:39.929]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:39.929]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:39.929]         }
[10:59:39.929]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:39.929]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:39.929]             base::sink(type = "output", split = FALSE)
[10:59:39.929]             base::close(...future.stdout)
[10:59:39.929]         }, add = TRUE)
[10:59:39.929]     }
[10:59:39.929]     ...future.frame <- base::sys.nframe()
[10:59:39.929]     ...future.conditions <- base::list()
[10:59:39.929]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:39.929]     if (FALSE) {
[10:59:39.929]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:39.929]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:39.929]     }
[10:59:39.929]     ...future.result <- base::tryCatch({
[10:59:39.929]         base::withCallingHandlers({
[10:59:39.929]             ...future.value <- base::withVisible(base::local({
[10:59:39.929]                 ...future.makeSendCondition <- base::local({
[10:59:39.929]                   sendCondition <- NULL
[10:59:39.929]                   function(frame = 1L) {
[10:59:39.929]                     if (is.function(sendCondition)) 
[10:59:39.929]                       return(sendCondition)
[10:59:39.929]                     ns <- getNamespace("parallel")
[10:59:39.929]                     if (exists("sendData", mode = "function", 
[10:59:39.929]                       envir = ns)) {
[10:59:39.929]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:39.929]                         envir = ns)
[10:59:39.929]                       envir <- sys.frame(frame)
[10:59:39.929]                       master <- NULL
[10:59:39.929]                       while (!identical(envir, .GlobalEnv) && 
[10:59:39.929]                         !identical(envir, emptyenv())) {
[10:59:39.929]                         if (exists("master", mode = "list", envir = envir, 
[10:59:39.929]                           inherits = FALSE)) {
[10:59:39.929]                           master <- get("master", mode = "list", 
[10:59:39.929]                             envir = envir, inherits = FALSE)
[10:59:39.929]                           if (inherits(master, c("SOCKnode", 
[10:59:39.929]                             "SOCK0node"))) {
[10:59:39.929]                             sendCondition <<- function(cond) {
[10:59:39.929]                               data <- list(type = "VALUE", value = cond, 
[10:59:39.929]                                 success = TRUE)
[10:59:39.929]                               parallel_sendData(master, data)
[10:59:39.929]                             }
[10:59:39.929]                             return(sendCondition)
[10:59:39.929]                           }
[10:59:39.929]                         }
[10:59:39.929]                         frame <- frame + 1L
[10:59:39.929]                         envir <- sys.frame(frame)
[10:59:39.929]                       }
[10:59:39.929]                     }
[10:59:39.929]                     sendCondition <<- function(cond) NULL
[10:59:39.929]                   }
[10:59:39.929]                 })
[10:59:39.929]                 withCallingHandlers({
[10:59:39.929]                   {
[10:59:39.929]                     do.call(function(...) {
[10:59:39.929]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.929]                       if (!identical(...future.globals.maxSize.org, 
[10:59:39.929]                         ...future.globals.maxSize)) {
[10:59:39.929]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.929]                         on.exit(options(oopts), add = TRUE)
[10:59:39.929]                       }
[10:59:39.929]                       {
[10:59:39.929]                         lapply(seq_along(...future.elements_ii), 
[10:59:39.929]                           FUN = function(jj) {
[10:59:39.929]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.929]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.929]                               envir = globalenv(), inherits = FALSE)
[10:59:39.929]                             ...future.FUN(...future.X_jj, ...)
[10:59:39.929]                           })
[10:59:39.929]                       }
[10:59:39.929]                     }, args = future.call.arguments)
[10:59:39.929]                   }
[10:59:39.929]                 }, immediateCondition = function(cond) {
[10:59:39.929]                   sendCondition <- ...future.makeSendCondition()
[10:59:39.929]                   sendCondition(cond)
[10:59:39.929]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.929]                   {
[10:59:39.929]                     inherits <- base::inherits
[10:59:39.929]                     invokeRestart <- base::invokeRestart
[10:59:39.929]                     is.null <- base::is.null
[10:59:39.929]                     muffled <- FALSE
[10:59:39.929]                     if (inherits(cond, "message")) {
[10:59:39.929]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:39.929]                       if (muffled) 
[10:59:39.929]                         invokeRestart("muffleMessage")
[10:59:39.929]                     }
[10:59:39.929]                     else if (inherits(cond, "warning")) {
[10:59:39.929]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:39.929]                       if (muffled) 
[10:59:39.929]                         invokeRestart("muffleWarning")
[10:59:39.929]                     }
[10:59:39.929]                     else if (inherits(cond, "condition")) {
[10:59:39.929]                       if (!is.null(pattern)) {
[10:59:39.929]                         computeRestarts <- base::computeRestarts
[10:59:39.929]                         grepl <- base::grepl
[10:59:39.929]                         restarts <- computeRestarts(cond)
[10:59:39.929]                         for (restart in restarts) {
[10:59:39.929]                           name <- restart$name
[10:59:39.929]                           if (is.null(name)) 
[10:59:39.929]                             next
[10:59:39.929]                           if (!grepl(pattern, name)) 
[10:59:39.929]                             next
[10:59:39.929]                           invokeRestart(restart)
[10:59:39.929]                           muffled <- TRUE
[10:59:39.929]                           break
[10:59:39.929]                         }
[10:59:39.929]                       }
[10:59:39.929]                     }
[10:59:39.929]                     invisible(muffled)
[10:59:39.929]                   }
[10:59:39.929]                   muffleCondition(cond)
[10:59:39.929]                 })
[10:59:39.929]             }))
[10:59:39.929]             future::FutureResult(value = ...future.value$value, 
[10:59:39.929]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.929]                   ...future.rng), globalenv = if (FALSE) 
[10:59:39.929]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:39.929]                     ...future.globalenv.names))
[10:59:39.929]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:39.929]         }, condition = base::local({
[10:59:39.929]             c <- base::c
[10:59:39.929]             inherits <- base::inherits
[10:59:39.929]             invokeRestart <- base::invokeRestart
[10:59:39.929]             length <- base::length
[10:59:39.929]             list <- base::list
[10:59:39.929]             seq.int <- base::seq.int
[10:59:39.929]             signalCondition <- base::signalCondition
[10:59:39.929]             sys.calls <- base::sys.calls
[10:59:39.929]             `[[` <- base::`[[`
[10:59:39.929]             `+` <- base::`+`
[10:59:39.929]             `<<-` <- base::`<<-`
[10:59:39.929]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:39.929]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:39.929]                   3L)]
[10:59:39.929]             }
[10:59:39.929]             function(cond) {
[10:59:39.929]                 is_error <- inherits(cond, "error")
[10:59:39.929]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:39.929]                   NULL)
[10:59:39.929]                 if (is_error) {
[10:59:39.929]                   sessionInformation <- function() {
[10:59:39.929]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:39.929]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:39.929]                       search = base::search(), system = base::Sys.info())
[10:59:39.929]                   }
[10:59:39.929]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.929]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:39.929]                     cond$call), session = sessionInformation(), 
[10:59:39.929]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:39.929]                   signalCondition(cond)
[10:59:39.929]                 }
[10:59:39.929]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:39.929]                 "immediateCondition"))) {
[10:59:39.929]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:39.929]                   ...future.conditions[[length(...future.conditions) + 
[10:59:39.929]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:39.929]                   if (TRUE && !signal) {
[10:59:39.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.929]                     {
[10:59:39.929]                       inherits <- base::inherits
[10:59:39.929]                       invokeRestart <- base::invokeRestart
[10:59:39.929]                       is.null <- base::is.null
[10:59:39.929]                       muffled <- FALSE
[10:59:39.929]                       if (inherits(cond, "message")) {
[10:59:39.929]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.929]                         if (muffled) 
[10:59:39.929]                           invokeRestart("muffleMessage")
[10:59:39.929]                       }
[10:59:39.929]                       else if (inherits(cond, "warning")) {
[10:59:39.929]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.929]                         if (muffled) 
[10:59:39.929]                           invokeRestart("muffleWarning")
[10:59:39.929]                       }
[10:59:39.929]                       else if (inherits(cond, "condition")) {
[10:59:39.929]                         if (!is.null(pattern)) {
[10:59:39.929]                           computeRestarts <- base::computeRestarts
[10:59:39.929]                           grepl <- base::grepl
[10:59:39.929]                           restarts <- computeRestarts(cond)
[10:59:39.929]                           for (restart in restarts) {
[10:59:39.929]                             name <- restart$name
[10:59:39.929]                             if (is.null(name)) 
[10:59:39.929]                               next
[10:59:39.929]                             if (!grepl(pattern, name)) 
[10:59:39.929]                               next
[10:59:39.929]                             invokeRestart(restart)
[10:59:39.929]                             muffled <- TRUE
[10:59:39.929]                             break
[10:59:39.929]                           }
[10:59:39.929]                         }
[10:59:39.929]                       }
[10:59:39.929]                       invisible(muffled)
[10:59:39.929]                     }
[10:59:39.929]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.929]                   }
[10:59:39.929]                 }
[10:59:39.929]                 else {
[10:59:39.929]                   if (TRUE) {
[10:59:39.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:39.929]                     {
[10:59:39.929]                       inherits <- base::inherits
[10:59:39.929]                       invokeRestart <- base::invokeRestart
[10:59:39.929]                       is.null <- base::is.null
[10:59:39.929]                       muffled <- FALSE
[10:59:39.929]                       if (inherits(cond, "message")) {
[10:59:39.929]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:39.929]                         if (muffled) 
[10:59:39.929]                           invokeRestart("muffleMessage")
[10:59:39.929]                       }
[10:59:39.929]                       else if (inherits(cond, "warning")) {
[10:59:39.929]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:39.929]                         if (muffled) 
[10:59:39.929]                           invokeRestart("muffleWarning")
[10:59:39.929]                       }
[10:59:39.929]                       else if (inherits(cond, "condition")) {
[10:59:39.929]                         if (!is.null(pattern)) {
[10:59:39.929]                           computeRestarts <- base::computeRestarts
[10:59:39.929]                           grepl <- base::grepl
[10:59:39.929]                           restarts <- computeRestarts(cond)
[10:59:39.929]                           for (restart in restarts) {
[10:59:39.929]                             name <- restart$name
[10:59:39.929]                             if (is.null(name)) 
[10:59:39.929]                               next
[10:59:39.929]                             if (!grepl(pattern, name)) 
[10:59:39.929]                               next
[10:59:39.929]                             invokeRestart(restart)
[10:59:39.929]                             muffled <- TRUE
[10:59:39.929]                             break
[10:59:39.929]                           }
[10:59:39.929]                         }
[10:59:39.929]                       }
[10:59:39.929]                       invisible(muffled)
[10:59:39.929]                     }
[10:59:39.929]                     muffleCondition(cond, pattern = "^muffle")
[10:59:39.929]                   }
[10:59:39.929]                 }
[10:59:39.929]             }
[10:59:39.929]         }))
[10:59:39.929]     }, error = function(ex) {
[10:59:39.929]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:39.929]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:39.929]                 ...future.rng), started = ...future.startTime, 
[10:59:39.929]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:39.929]             version = "1.8"), class = "FutureResult")
[10:59:39.929]     }, finally = {
[10:59:39.929]         if (!identical(...future.workdir, getwd())) 
[10:59:39.929]             setwd(...future.workdir)
[10:59:39.929]         {
[10:59:39.929]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:39.929]                 ...future.oldOptions$nwarnings <- NULL
[10:59:39.929]             }
[10:59:39.929]             base::options(...future.oldOptions)
[10:59:39.929]             if (.Platform$OS.type == "windows") {
[10:59:39.929]                 old_names <- names(...future.oldEnvVars)
[10:59:39.929]                 envs <- base::Sys.getenv()
[10:59:39.929]                 names <- names(envs)
[10:59:39.929]                 common <- intersect(names, old_names)
[10:59:39.929]                 added <- setdiff(names, old_names)
[10:59:39.929]                 removed <- setdiff(old_names, names)
[10:59:39.929]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:39.929]                   envs[common]]
[10:59:39.929]                 NAMES <- toupper(changed)
[10:59:39.929]                 args <- list()
[10:59:39.929]                 for (kk in seq_along(NAMES)) {
[10:59:39.929]                   name <- changed[[kk]]
[10:59:39.929]                   NAME <- NAMES[[kk]]
[10:59:39.929]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.929]                     next
[10:59:39.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.929]                 }
[10:59:39.929]                 NAMES <- toupper(added)
[10:59:39.929]                 for (kk in seq_along(NAMES)) {
[10:59:39.929]                   name <- added[[kk]]
[10:59:39.929]                   NAME <- NAMES[[kk]]
[10:59:39.929]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.929]                     next
[10:59:39.929]                   args[[name]] <- ""
[10:59:39.929]                 }
[10:59:39.929]                 NAMES <- toupper(removed)
[10:59:39.929]                 for (kk in seq_along(NAMES)) {
[10:59:39.929]                   name <- removed[[kk]]
[10:59:39.929]                   NAME <- NAMES[[kk]]
[10:59:39.929]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:39.929]                     next
[10:59:39.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:39.929]                 }
[10:59:39.929]                 if (length(args) > 0) 
[10:59:39.929]                   base::do.call(base::Sys.setenv, args = args)
[10:59:39.929]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:39.929]             }
[10:59:39.929]             else {
[10:59:39.929]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:39.929]             }
[10:59:39.929]             {
[10:59:39.929]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:39.929]                   0L) {
[10:59:39.929]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:39.929]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:39.929]                   base::options(opts)
[10:59:39.929]                 }
[10:59:39.929]                 {
[10:59:39.929]                   {
[10:59:39.929]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:39.929]                     NULL
[10:59:39.929]                   }
[10:59:39.929]                   options(future.plan = NULL)
[10:59:39.929]                   if (is.na(NA_character_)) 
[10:59:39.929]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:39.929]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:39.929]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:39.929]                     .init = FALSE)
[10:59:39.929]                 }
[10:59:39.929]             }
[10:59:39.929]         }
[10:59:39.929]     })
[10:59:39.929]     if (TRUE) {
[10:59:39.929]         base::sink(type = "output", split = FALSE)
[10:59:39.929]         if (TRUE) {
[10:59:39.929]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:39.929]         }
[10:59:39.929]         else {
[10:59:39.929]             ...future.result["stdout"] <- base::list(NULL)
[10:59:39.929]         }
[10:59:39.929]         base::close(...future.stdout)
[10:59:39.929]         ...future.stdout <- NULL
[10:59:39.929]     }
[10:59:39.929]     ...future.result$conditions <- ...future.conditions
[10:59:39.929]     ...future.result$finished <- base::Sys.time()
[10:59:39.929]     ...future.result
[10:59:39.929] }
[10:59:39.931] Exporting 5 global objects (938 bytes) to cluster node #2 ...
[10:59:39.932] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ...
[10:59:39.932] Exporting ‘...future.FUN’ (132 bytes) to cluster node #2 ... DONE
[10:59:39.932] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[10:59:39.932] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[10:59:39.933] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[10:59:39.933] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[10:59:39.933] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[10:59:39.933] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[10:59:39.934] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[10:59:39.934] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[10:59:39.934] Exporting 5 global objects (938 bytes) to cluster node #2 ... DONE
[10:59:39.934] MultisessionFuture started
[10:59:39.935] - Launch lazy future ... done
[10:59:39.935] run() for ‘MultisessionFuture’ ... done
[10:59:39.935] Created future:
[10:59:39.935] MultisessionFuture:
[10:59:39.935] Label: ‘future_replicate-2’
[10:59:39.935] Expression:
[10:59:39.935] {
[10:59:39.935]     do.call(function(...) {
[10:59:39.935]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.935]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.935]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.935]             on.exit(options(oopts), add = TRUE)
[10:59:39.935]         }
[10:59:39.935]         {
[10:59:39.935]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.935]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.935]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.935]                   envir = globalenv(), inherits = FALSE)
[10:59:39.935]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.935]             })
[10:59:39.935]         }
[10:59:39.935]     }, args = future.call.arguments)
[10:59:39.935] }
[10:59:39.935] Lazy evaluation: FALSE
[10:59:39.935] Asynchronous evaluation: TRUE
[10:59:39.935] Local evaluation: TRUE
[10:59:39.935] Environment: R_GlobalEnv
[10:59:39.935] Capture standard output: TRUE
[10:59:39.935] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:39.935] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:59:39.935] Packages: <none>
[10:59:39.935] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:39.935] Resolved: FALSE
[10:59:39.935] Value: <not collected>
[10:59:39.935] Conditions captured: <none>
[10:59:39.935] Early signaling: FALSE
[10:59:39.935] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:39.935] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:39.946] Chunk #2 of 2 ... DONE
[10:59:39.946] Launching 2 futures (chunks) ... DONE
[10:59:39.946] Resolving 2 futures (chunks) ...
[10:59:39.946] resolve() on list ...
[10:59:39.946]  recursive: 0
[10:59:39.947]  length: 2
[10:59:39.947] 
[10:59:39.947] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.947] - Validating connection of MultisessionFuture
[10:59:39.947] - received message: FutureResult
[10:59:39.947] - Received FutureResult
[10:59:39.948] - Erased future from FutureRegistry
[10:59:39.948] result() for ClusterFuture ...
[10:59:39.948] - result already collected: FutureResult
[10:59:39.948] result() for ClusterFuture ... done
[10:59:39.948] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.948] Future #1
[10:59:39.948] result() for ClusterFuture ...
[10:59:39.948] - result already collected: FutureResult
[10:59:39.948] result() for ClusterFuture ... done
[10:59:39.948] result() for ClusterFuture ...
[10:59:39.948] - result already collected: FutureResult
[10:59:39.949] result() for ClusterFuture ... done
[10:59:39.949] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:59:39.949] - nx: 2
[10:59:39.949] - relay: TRUE
[10:59:39.949] - stdout: TRUE
[10:59:39.949] - signal: TRUE
[10:59:39.949] - resignal: FALSE
[10:59:39.949] - force: TRUE
[10:59:39.949] - relayed: [n=2] FALSE, FALSE
[10:59:39.949] - queued futures: [n=2] FALSE, FALSE
[10:59:39.949]  - until=1
[10:59:39.949]  - relaying element #1
[10:59:39.950] result() for ClusterFuture ...
[10:59:39.950] - result already collected: FutureResult
[10:59:39.950] result() for ClusterFuture ... done
[10:59:39.950] result() for ClusterFuture ...
[10:59:39.950] - result already collected: FutureResult
[10:59:39.950] result() for ClusterFuture ... done
[10:59:39.950] result() for ClusterFuture ...
[10:59:39.950] - result already collected: FutureResult
[10:59:39.950] result() for ClusterFuture ... done
[10:59:39.950] result() for ClusterFuture ...
[10:59:39.950] - result already collected: FutureResult
[10:59:39.950] result() for ClusterFuture ... done
[10:59:39.951] - relayed: [n=2] TRUE, FALSE
[10:59:39.951] - queued futures: [n=2] TRUE, FALSE
[10:59:39.951] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:59:39.951]  length: 1 (resolved future 1)
[10:59:39.976] receiveMessageFromWorker() for ClusterFuture ...
[10:59:39.976] - Validating connection of MultisessionFuture
[10:59:39.977] - received message: FutureResult
[10:59:39.977] - Received FutureResult
[10:59:39.977] - Erased future from FutureRegistry
[10:59:39.977] result() for ClusterFuture ...
[10:59:39.977] - result already collected: FutureResult
[10:59:39.977] result() for ClusterFuture ... done
[10:59:39.977] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:39.977] Future #2
[10:59:39.977] result() for ClusterFuture ...
[10:59:39.977] - result already collected: FutureResult
[10:59:39.977] result() for ClusterFuture ... done
[10:59:39.978] result() for ClusterFuture ...
[10:59:39.978] - result already collected: FutureResult
[10:59:39.978] result() for ClusterFuture ... done
[10:59:39.978] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:59:39.978] - nx: 2
[10:59:39.978] - relay: TRUE
[10:59:39.978] - stdout: TRUE
[10:59:39.978] - signal: TRUE
[10:59:39.978] - resignal: FALSE
[10:59:39.978] - force: TRUE
[10:59:39.978] - relayed: [n=2] TRUE, FALSE
[10:59:39.978] - queued futures: [n=2] TRUE, FALSE
[10:59:39.979]  - until=2
[10:59:39.979]  - relaying element #2
[10:59:39.979] result() for ClusterFuture ...
[10:59:39.979] - result already collected: FutureResult
[10:59:39.979] result() for ClusterFuture ... done
[10:59:39.979] result() for ClusterFuture ...
[10:59:39.979] - result already collected: FutureResult
[10:59:39.979] result() for ClusterFuture ... done
[10:59:39.979] result() for ClusterFuture ...
[10:59:39.979] - result already collected: FutureResult
[10:59:39.979] result() for ClusterFuture ... done
[10:59:39.979] result() for ClusterFuture ...
[10:59:39.980] - result already collected: FutureResult
[10:59:39.980] result() for ClusterFuture ... done
[10:59:39.980] - relayed: [n=2] TRUE, TRUE
[10:59:39.980] - queued futures: [n=2] TRUE, TRUE
[10:59:39.980] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:59:39.980]  length: 0 (resolved future 2)
[10:59:39.980] Relaying remaining futures
[10:59:39.980] signalConditionsASAP(NULL, pos=0) ...
[10:59:39.980] - nx: 2
[10:59:39.980] - relay: TRUE
[10:59:39.980] - stdout: TRUE
[10:59:39.980] - signal: TRUE
[10:59:39.980] - resignal: FALSE
[10:59:39.981] - force: TRUE
[10:59:39.981] - relayed: [n=2] TRUE, TRUE
[10:59:39.981] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:39.981] - relayed: [n=2] TRUE, TRUE
[10:59:39.981] - queued futures: [n=2] TRUE, TRUE
[10:59:39.981] signalConditionsASAP(NULL, pos=0) ... done
[10:59:39.981] resolve() on list ... DONE
[10:59:39.981] result() for ClusterFuture ...
[10:59:39.981] - result already collected: FutureResult
[10:59:39.981] result() for ClusterFuture ... done
[10:59:39.981] result() for ClusterFuture ...
[10:59:39.981] - result already collected: FutureResult
[10:59:39.982] result() for ClusterFuture ... done
[10:59:39.982] result() for ClusterFuture ...
[10:59:39.982] - result already collected: FutureResult
[10:59:39.982] result() for ClusterFuture ... done
[10:59:39.982] result() for ClusterFuture ...
[10:59:39.982] - result already collected: FutureResult
[10:59:39.982] result() for ClusterFuture ... done
[10:59:39.982]  - Number of value chunks collected: 2
[10:59:39.982] Resolving 2 futures (chunks) ... DONE
[10:59:39.982] Reducing values from 2 chunks ...
[10:59:39.982]  - Number of values collected after concatenation: 5
[10:59:39.982]  - Number of values expected: 5
[10:59:39.983] Reducing values from 2 chunks ... DONE
[10:59:39.983] future_lapply() ... DONE
- example(replicate) ...
[10:59:39.983] future_lapply() ...
[10:59:39.983] Generating random seeds ...
[10:59:39.983] Generating random seed streams for 5 elements ...
[10:59:39.984] Generating random seed streams for 5 elements ... DONE
[10:59:39.984] Generating random seeds ... DONE
[10:59:39.984] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:59:39.986] Number of chunks: 2
[10:59:39.986] getGlobalsAndPackagesXApply() ...
[10:59:39.986]  - future.globals: TRUE
[10:59:39.986] getGlobalsAndPackages() ...
[10:59:39.986] Searching for globals...
[10:59:39.988] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:59:39.988] Searching for globals ... DONE
[10:59:39.988] Resolving globals: FALSE
[10:59:39.988] The total size of the 3 globals is 617 bytes (617 bytes)
[10:59:39.989] The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[10:59:39.989] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:59:39.989] 
[10:59:39.989] getGlobalsAndPackages() ... DONE
[10:59:39.989]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:59:39.989]  - needed namespaces: [n=0] 
[10:59:39.989] Finding globals ... DONE
[10:59:39.989]  - use_args: TRUE
[10:59:39.989]  - Getting '...' globals ...
[10:59:39.990] resolve() on list ...
[10:59:39.990]  recursive: 0
[10:59:39.990]  length: 1
[10:59:39.990]  elements: ‘...’
[10:59:39.990]  length: 0 (resolved future 1)
[10:59:39.990] resolve() on list ... DONE
[10:59:39.990]    - '...' content: [n=0] 
[10:59:39.990] List of 1
[10:59:39.990]  $ ...: list()
[10:59:39.990]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.990]  - attr(*, "where")=List of 1
[10:59:39.990]   ..$ ...:<environment: 0x562630097f90> 
[10:59:39.990]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.990]  - attr(*, "resolved")= logi TRUE
[10:59:39.990]  - attr(*, "total_size")= num NA
[10:59:39.993]  - Getting '...' globals ... DONE
[10:59:39.993] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:59:39.993] List of 4
[10:59:39.993]  $ ...future.FUN:function (...)  
[10:59:39.993]  $ foo          :function (x = 1, y = 2)  
[10:59:39.993]  $ x            : num 3
[10:59:39.993]  $ ...          : list()
[10:59:39.993]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:59:39.993]  - attr(*, "where")=List of 4
[10:59:39.993]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:59:39.993]   ..$ foo          :<environment: R_EmptyEnv> 
[10:59:39.993]   ..$ x            :<environment: R_EmptyEnv> 
[10:59:39.993]   ..$ ...          :<environment: 0x562630097f90> 
[10:59:39.993]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:59:39.993]  - attr(*, "resolved")= logi FALSE
[10:59:39.993]  - attr(*, "total_size")= num 7967
[10:59:39.996] Packages to be attached in all futures: [n=0] 
[10:59:39.996] getGlobalsAndPackagesXApply() ... DONE
[10:59:39.997] Number of futures (= number of chunks): 2
[10:59:39.997] Launching 2 futures (chunks) ...
[10:59:39.997] Chunk #1 of 2 ...
[10:59:39.997]  - Finding globals in 'X' for chunk #1 ...
[10:59:39.997] getGlobalsAndPackages() ...
[10:59:39.997] Searching for globals...
[10:59:39.997] 
[10:59:39.997] Searching for globals ... DONE
[10:59:39.998] - globals: [0] <none>
[10:59:39.998] getGlobalsAndPackages() ... DONE
[10:59:39.998]    + additional globals found: [n=0] 
[10:59:39.998]    + additional namespaces needed: [n=0] 
[10:59:39.998]  - Finding globals in 'X' for chunk #1 ... DONE
[10:59:39.998]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:39.998]  - seeds: [2] <seeds>
[10:59:39.998]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.998] getGlobalsAndPackages() ...
[10:59:39.998] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.998] Resolving globals: FALSE
[10:59:39.999] Tweak future expression to call with '...' arguments ...
[10:59:39.999] {
[10:59:39.999]     do.call(function(...) {
[10:59:39.999]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:39.999]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:39.999]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:39.999]             on.exit(options(oopts), add = TRUE)
[10:59:39.999]         }
[10:59:39.999]         {
[10:59:39.999]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:39.999]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:39.999]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:39.999]                   envir = globalenv(), inherits = FALSE)
[10:59:39.999]                 ...future.FUN(...future.X_jj, ...)
[10:59:39.999]             })
[10:59:39.999]         }
[10:59:39.999]     }, args = future.call.arguments)
[10:59:39.999] }
[10:59:39.999] Tweak future expression to call with '...' arguments ... DONE
[10:59:39.999] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:39.999] 
[10:59:39.999] getGlobalsAndPackages() ... DONE
[10:59:40.000] run() for ‘Future’ ...
[10:59:40.000] - state: ‘created’
[10:59:40.000] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:40.013] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:40.014] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:40.014]   - Field: ‘node’
[10:59:40.014]   - Field: ‘label’
[10:59:40.014]   - Field: ‘local’
[10:59:40.014]   - Field: ‘owner’
[10:59:40.014]   - Field: ‘envir’
[10:59:40.014]   - Field: ‘workers’
[10:59:40.014]   - Field: ‘packages’
[10:59:40.014]   - Field: ‘gc’
[10:59:40.014]   - Field: ‘conditions’
[10:59:40.014]   - Field: ‘persistent’
[10:59:40.015]   - Field: ‘expr’
[10:59:40.015]   - Field: ‘uuid’
[10:59:40.015]   - Field: ‘seed’
[10:59:40.015]   - Field: ‘version’
[10:59:40.015]   - Field: ‘result’
[10:59:40.015]   - Field: ‘asynchronous’
[10:59:40.015]   - Field: ‘calls’
[10:59:40.015]   - Field: ‘globals’
[10:59:40.015]   - Field: ‘stdout’
[10:59:40.015]   - Field: ‘earlySignal’
[10:59:40.015]   - Field: ‘lazy’
[10:59:40.015]   - Field: ‘state’
[10:59:40.016] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:40.016] - Launch lazy future ...
[10:59:40.016] Packages needed by the future expression (n = 0): <none>
[10:59:40.016] Packages needed by future strategies (n = 0): <none>
[10:59:40.016] {
[10:59:40.016]     {
[10:59:40.016]         {
[10:59:40.016]             ...future.startTime <- base::Sys.time()
[10:59:40.016]             {
[10:59:40.016]                 {
[10:59:40.016]                   {
[10:59:40.016]                     {
[10:59:40.016]                       base::local({
[10:59:40.016]                         has_future <- base::requireNamespace("future", 
[10:59:40.016]                           quietly = TRUE)
[10:59:40.016]                         if (has_future) {
[10:59:40.016]                           ns <- base::getNamespace("future")
[10:59:40.016]                           version <- ns[[".package"]][["version"]]
[10:59:40.016]                           if (is.null(version)) 
[10:59:40.016]                             version <- utils::packageVersion("future")
[10:59:40.016]                         }
[10:59:40.016]                         else {
[10:59:40.016]                           version <- NULL
[10:59:40.016]                         }
[10:59:40.016]                         if (!has_future || version < "1.8.0") {
[10:59:40.016]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:40.016]                             "", base::R.version$version.string), 
[10:59:40.016]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:40.016]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:40.016]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:40.016]                               "release", "version")], collapse = " "), 
[10:59:40.016]                             hostname = base::Sys.info()[["nodename"]])
[10:59:40.016]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:40.016]                             info)
[10:59:40.016]                           info <- base::paste(info, collapse = "; ")
[10:59:40.016]                           if (!has_future) {
[10:59:40.016]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:40.016]                               info)
[10:59:40.016]                           }
[10:59:40.016]                           else {
[10:59:40.016]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:40.016]                               info, version)
[10:59:40.016]                           }
[10:59:40.016]                           base::stop(msg)
[10:59:40.016]                         }
[10:59:40.016]                       })
[10:59:40.016]                     }
[10:59:40.016]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:40.016]                     base::options(mc.cores = 1L)
[10:59:40.016]                   }
[10:59:40.016]                   ...future.strategy.old <- future::plan("list")
[10:59:40.016]                   options(future.plan = NULL)
[10:59:40.016]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:40.016]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:40.016]                 }
[10:59:40.016]                 ...future.workdir <- getwd()
[10:59:40.016]             }
[10:59:40.016]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:40.016]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:40.016]         }
[10:59:40.016]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:40.016]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:40.016]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:40.016]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:40.016]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:40.016]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:40.016]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:40.016]             base::names(...future.oldOptions))
[10:59:40.016]     }
[10:59:40.016]     if (FALSE) {
[10:59:40.016]     }
[10:59:40.016]     else {
[10:59:40.016]         if (TRUE) {
[10:59:40.016]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:40.016]                 open = "w")
[10:59:40.016]         }
[10:59:40.016]         else {
[10:59:40.016]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:40.016]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:40.016]         }
[10:59:40.016]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:40.016]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:40.016]             base::sink(type = "output", split = FALSE)
[10:59:40.016]             base::close(...future.stdout)
[10:59:40.016]         }, add = TRUE)
[10:59:40.016]     }
[10:59:40.016]     ...future.frame <- base::sys.nframe()
[10:59:40.016]     ...future.conditions <- base::list()
[10:59:40.016]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:40.016]     if (FALSE) {
[10:59:40.016]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:40.016]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:40.016]     }
[10:59:40.016]     ...future.result <- base::tryCatch({
[10:59:40.016]         base::withCallingHandlers({
[10:59:40.016]             ...future.value <- base::withVisible(base::local({
[10:59:40.016]                 ...future.makeSendCondition <- base::local({
[10:59:40.016]                   sendCondition <- NULL
[10:59:40.016]                   function(frame = 1L) {
[10:59:40.016]                     if (is.function(sendCondition)) 
[10:59:40.016]                       return(sendCondition)
[10:59:40.016]                     ns <- getNamespace("parallel")
[10:59:40.016]                     if (exists("sendData", mode = "function", 
[10:59:40.016]                       envir = ns)) {
[10:59:40.016]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:40.016]                         envir = ns)
[10:59:40.016]                       envir <- sys.frame(frame)
[10:59:40.016]                       master <- NULL
[10:59:40.016]                       while (!identical(envir, .GlobalEnv) && 
[10:59:40.016]                         !identical(envir, emptyenv())) {
[10:59:40.016]                         if (exists("master", mode = "list", envir = envir, 
[10:59:40.016]                           inherits = FALSE)) {
[10:59:40.016]                           master <- get("master", mode = "list", 
[10:59:40.016]                             envir = envir, inherits = FALSE)
[10:59:40.016]                           if (inherits(master, c("SOCKnode", 
[10:59:40.016]                             "SOCK0node"))) {
[10:59:40.016]                             sendCondition <<- function(cond) {
[10:59:40.016]                               data <- list(type = "VALUE", value = cond, 
[10:59:40.016]                                 success = TRUE)
[10:59:40.016]                               parallel_sendData(master, data)
[10:59:40.016]                             }
[10:59:40.016]                             return(sendCondition)
[10:59:40.016]                           }
[10:59:40.016]                         }
[10:59:40.016]                         frame <- frame + 1L
[10:59:40.016]                         envir <- sys.frame(frame)
[10:59:40.016]                       }
[10:59:40.016]                     }
[10:59:40.016]                     sendCondition <<- function(cond) NULL
[10:59:40.016]                   }
[10:59:40.016]                 })
[10:59:40.016]                 withCallingHandlers({
[10:59:40.016]                   {
[10:59:40.016]                     do.call(function(...) {
[10:59:40.016]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:40.016]                       if (!identical(...future.globals.maxSize.org, 
[10:59:40.016]                         ...future.globals.maxSize)) {
[10:59:40.016]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:40.016]                         on.exit(options(oopts), add = TRUE)
[10:59:40.016]                       }
[10:59:40.016]                       {
[10:59:40.016]                         lapply(seq_along(...future.elements_ii), 
[10:59:40.016]                           FUN = function(jj) {
[10:59:40.016]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:40.016]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:40.016]                               envir = globalenv(), inherits = FALSE)
[10:59:40.016]                             ...future.FUN(...future.X_jj, ...)
[10:59:40.016]                           })
[10:59:40.016]                       }
[10:59:40.016]                     }, args = future.call.arguments)
[10:59:40.016]                   }
[10:59:40.016]                 }, immediateCondition = function(cond) {
[10:59:40.016]                   sendCondition <- ...future.makeSendCondition()
[10:59:40.016]                   sendCondition(cond)
[10:59:40.016]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:40.016]                   {
[10:59:40.016]                     inherits <- base::inherits
[10:59:40.016]                     invokeRestart <- base::invokeRestart
[10:59:40.016]                     is.null <- base::is.null
[10:59:40.016]                     muffled <- FALSE
[10:59:40.016]                     if (inherits(cond, "message")) {
[10:59:40.016]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:40.016]                       if (muffled) 
[10:59:40.016]                         invokeRestart("muffleMessage")
[10:59:40.016]                     }
[10:59:40.016]                     else if (inherits(cond, "warning")) {
[10:59:40.016]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:40.016]                       if (muffled) 
[10:59:40.016]                         invokeRestart("muffleWarning")
[10:59:40.016]                     }
[10:59:40.016]                     else if (inherits(cond, "condition")) {
[10:59:40.016]                       if (!is.null(pattern)) {
[10:59:40.016]                         computeRestarts <- base::computeRestarts
[10:59:40.016]                         grepl <- base::grepl
[10:59:40.016]                         restarts <- computeRestarts(cond)
[10:59:40.016]                         for (restart in restarts) {
[10:59:40.016]                           name <- restart$name
[10:59:40.016]                           if (is.null(name)) 
[10:59:40.016]                             next
[10:59:40.016]                           if (!grepl(pattern, name)) 
[10:59:40.016]                             next
[10:59:40.016]                           invokeRestart(restart)
[10:59:40.016]                           muffled <- TRUE
[10:59:40.016]                           break
[10:59:40.016]                         }
[10:59:40.016]                       }
[10:59:40.016]                     }
[10:59:40.016]                     invisible(muffled)
[10:59:40.016]                   }
[10:59:40.016]                   muffleCondition(cond)
[10:59:40.016]                 })
[10:59:40.016]             }))
[10:59:40.016]             future::FutureResult(value = ...future.value$value, 
[10:59:40.016]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:40.016]                   ...future.rng), globalenv = if (FALSE) 
[10:59:40.016]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:40.016]                     ...future.globalenv.names))
[10:59:40.016]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:40.016]         }, condition = base::local({
[10:59:40.016]             c <- base::c
[10:59:40.016]             inherits <- base::inherits
[10:59:40.016]             invokeRestart <- base::invokeRestart
[10:59:40.016]             length <- base::length
[10:59:40.016]             list <- base::list
[10:59:40.016]             seq.int <- base::seq.int
[10:59:40.016]             signalCondition <- base::signalCondition
[10:59:40.016]             sys.calls <- base::sys.calls
[10:59:40.016]             `[[` <- base::`[[`
[10:59:40.016]             `+` <- base::`+`
[10:59:40.016]             `<<-` <- base::`<<-`
[10:59:40.016]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:40.016]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:40.016]                   3L)]
[10:59:40.016]             }
[10:59:40.016]             function(cond) {
[10:59:40.016]                 is_error <- inherits(cond, "error")
[10:59:40.016]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:40.016]                   NULL)
[10:59:40.016]                 if (is_error) {
[10:59:40.016]                   sessionInformation <- function() {
[10:59:40.016]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:40.016]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:40.016]                       search = base::search(), system = base::Sys.info())
[10:59:40.016]                   }
[10:59:40.016]                   ...future.conditions[[length(...future.conditions) + 
[10:59:40.016]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:40.016]                     cond$call), session = sessionInformation(), 
[10:59:40.016]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:40.016]                   signalCondition(cond)
[10:59:40.016]                 }
[10:59:40.016]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:40.016]                 "immediateCondition"))) {
[10:59:40.016]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:40.016]                   ...future.conditions[[length(...future.conditions) + 
[10:59:40.016]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:40.016]                   if (TRUE && !signal) {
[10:59:40.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:40.016]                     {
[10:59:40.016]                       inherits <- base::inherits
[10:59:40.016]                       invokeRestart <- base::invokeRestart
[10:59:40.016]                       is.null <- base::is.null
[10:59:40.016]                       muffled <- FALSE
[10:59:40.016]                       if (inherits(cond, "message")) {
[10:59:40.016]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:40.016]                         if (muffled) 
[10:59:40.016]                           invokeRestart("muffleMessage")
[10:59:40.016]                       }
[10:59:40.016]                       else if (inherits(cond, "warning")) {
[10:59:40.016]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:40.016]                         if (muffled) 
[10:59:40.016]                           invokeRestart("muffleWarning")
[10:59:40.016]                       }
[10:59:40.016]                       else if (inherits(cond, "condition")) {
[10:59:40.016]                         if (!is.null(pattern)) {
[10:59:40.016]                           computeRestarts <- base::computeRestarts
[10:59:40.016]                           grepl <- base::grepl
[10:59:40.016]                           restarts <- computeRestarts(cond)
[10:59:40.016]                           for (restart in restarts) {
[10:59:40.016]                             name <- restart$name
[10:59:40.016]                             if (is.null(name)) 
[10:59:40.016]                               next
[10:59:40.016]                             if (!grepl(pattern, name)) 
[10:59:40.016]                               next
[10:59:40.016]                             invokeRestart(restart)
[10:59:40.016]                             muffled <- TRUE
[10:59:40.016]                             break
[10:59:40.016]                           }
[10:59:40.016]                         }
[10:59:40.016]                       }
[10:59:40.016]                       invisible(muffled)
[10:59:40.016]                     }
[10:59:40.016]                     muffleCondition(cond, pattern = "^muffle")
[10:59:40.016]                   }
[10:59:40.016]                 }
[10:59:40.016]                 else {
[10:59:40.016]                   if (TRUE) {
[10:59:40.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:40.016]                     {
[10:59:40.016]                       inherits <- base::inherits
[10:59:40.016]                       invokeRestart <- base::invokeRestart
[10:59:40.016]                       is.null <- base::is.null
[10:59:40.016]                       muffled <- FALSE
[10:59:40.016]                       if (inherits(cond, "message")) {
[10:59:40.016]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:40.016]                         if (muffled) 
[10:59:40.016]                           invokeRestart("muffleMessage")
[10:59:40.016]                       }
[10:59:40.016]                       else if (inherits(cond, "warning")) {
[10:59:40.016]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:40.016]                         if (muffled) 
[10:59:40.016]                           invokeRestart("muffleWarning")
[10:59:40.016]                       }
[10:59:40.016]                       else if (inherits(cond, "condition")) {
[10:59:40.016]                         if (!is.null(pattern)) {
[10:59:40.016]                           computeRestarts <- base::computeRestarts
[10:59:40.016]                           grepl <- base::grepl
[10:59:40.016]                           restarts <- computeRestarts(cond)
[10:59:40.016]                           for (restart in restarts) {
[10:59:40.016]                             name <- restart$name
[10:59:40.016]                             if (is.null(name)) 
[10:59:40.016]                               next
[10:59:40.016]                             if (!grepl(pattern, name)) 
[10:59:40.016]                               next
[10:59:40.016]                             invokeRestart(restart)
[10:59:40.016]                             muffled <- TRUE
[10:59:40.016]                             break
[10:59:40.016]                           }
[10:59:40.016]                         }
[10:59:40.016]                       }
[10:59:40.016]                       invisible(muffled)
[10:59:40.016]                     }
[10:59:40.016]                     muffleCondition(cond, pattern = "^muffle")
[10:59:40.016]                   }
[10:59:40.016]                 }
[10:59:40.016]             }
[10:59:40.016]         }))
[10:59:40.016]     }, error = function(ex) {
[10:59:40.016]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:40.016]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:40.016]                 ...future.rng), started = ...future.startTime, 
[10:59:40.016]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:40.016]             version = "1.8"), class = "FutureResult")
[10:59:40.016]     }, finally = {
[10:59:40.016]         if (!identical(...future.workdir, getwd())) 
[10:59:40.016]             setwd(...future.workdir)
[10:59:40.016]         {
[10:59:40.016]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:40.016]                 ...future.oldOptions$nwarnings <- NULL
[10:59:40.016]             }
[10:59:40.016]             base::options(...future.oldOptions)
[10:59:40.016]             if (.Platform$OS.type == "windows") {
[10:59:40.016]                 old_names <- names(...future.oldEnvVars)
[10:59:40.016]                 envs <- base::Sys.getenv()
[10:59:40.016]                 names <- names(envs)
[10:59:40.016]                 common <- intersect(names, old_names)
[10:59:40.016]                 added <- setdiff(names, old_names)
[10:59:40.016]                 removed <- setdiff(old_names, names)
[10:59:40.016]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:40.016]                   envs[common]]
[10:59:40.016]                 NAMES <- toupper(changed)
[10:59:40.016]                 args <- list()
[10:59:40.016]                 for (kk in seq_along(NAMES)) {
[10:59:40.016]                   name <- changed[[kk]]
[10:59:40.016]                   NAME <- NAMES[[kk]]
[10:59:40.016]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:40.016]                     next
[10:59:40.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:40.016]                 }
[10:59:40.016]                 NAMES <- toupper(added)
[10:59:40.016]                 for (kk in seq_along(NAMES)) {
[10:59:40.016]                   name <- added[[kk]]
[10:59:40.016]                   NAME <- NAMES[[kk]]
[10:59:40.016]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:40.016]                     next
[10:59:40.016]                   args[[name]] <- ""
[10:59:40.016]                 }
[10:59:40.016]                 NAMES <- toupper(removed)
[10:59:40.016]                 for (kk in seq_along(NAMES)) {
[10:59:40.016]                   name <- removed[[kk]]
[10:59:40.016]                   NAME <- NAMES[[kk]]
[10:59:40.016]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:40.016]                     next
[10:59:40.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:40.016]                 }
[10:59:40.016]                 if (length(args) > 0) 
[10:59:40.016]                   base::do.call(base::Sys.setenv, args = args)
[10:59:40.016]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:40.016]             }
[10:59:40.016]             else {
[10:59:40.016]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:40.016]             }
[10:59:40.016]             {
[10:59:40.016]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:40.016]                   0L) {
[10:59:40.016]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:40.016]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:40.016]                   base::options(opts)
[10:59:40.016]                 }
[10:59:40.016]                 {
[10:59:40.016]                   {
[10:59:40.016]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:40.016]                     NULL
[10:59:40.016]                   }
[10:59:40.016]                   options(future.plan = NULL)
[10:59:40.016]                   if (is.na(NA_character_)) 
[10:59:40.016]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:40.016]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:40.016]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:40.016]                     .init = FALSE)
[10:59:40.016]                 }
[10:59:40.016]             }
[10:59:40.016]         }
[10:59:40.016]     })
[10:59:40.016]     if (TRUE) {
[10:59:40.016]         base::sink(type = "output", split = FALSE)
[10:59:40.016]         if (TRUE) {
[10:59:40.016]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:40.016]         }
[10:59:40.016]         else {
[10:59:40.016]             ...future.result["stdout"] <- base::list(NULL)
[10:59:40.016]         }
[10:59:40.016]         base::close(...future.stdout)
[10:59:40.016]         ...future.stdout <- NULL
[10:59:40.016]     }
[10:59:40.016]     ...future.result$conditions <- ...future.conditions
[10:59:40.016]     ...future.result$finished <- base::Sys.time()
[10:59:40.016]     ...future.result
[10:59:40.016] }
[10:59:40.019] Exporting 7 global objects (1.32 KiB) to cluster node #1 ...
[10:59:40.019] Exporting ‘...future.FUN’ (179 bytes) to cluster node #1 ...
[10:59:40.020] Exporting ‘...future.FUN’ (179 bytes) to cluster node #1 ... DONE
[10:59:40.020] Exporting ‘foo’ (399 bytes) to cluster node #1 ...
[10:59:40.020] Exporting ‘foo’ (399 bytes) to cluster node #1 ... DONE
[10:59:40.020] Exporting ‘x’ (39 bytes) to cluster node #1 ...
[10:59:40.020] Exporting ‘x’ (39 bytes) to cluster node #1 ... DONE
[10:59:40.021] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[10:59:40.021] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[10:59:40.021] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[10:59:40.021] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[10:59:40.022] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ...
[10:59:40.022] Exporting ‘...future.seeds_ii’ (103 bytes) to cluster node #1 ... DONE
[10:59:40.022] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[10:59:40.022] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[10:59:40.022] Exporting 7 global objects (1.32 KiB) to cluster node #1 ... DONE
[10:59:40.023] MultisessionFuture started
[10:59:40.023] - Launch lazy future ... done
[10:59:40.023] run() for ‘MultisessionFuture’ ... done
[10:59:40.023] Created future:
[10:59:40.023] MultisessionFuture:
[10:59:40.023] Label: ‘future_replicate-1’
[10:59:40.023] Expression:
[10:59:40.023] {
[10:59:40.023]     do.call(function(...) {
[10:59:40.023]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:40.023]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:40.023]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:40.023]             on.exit(options(oopts), add = TRUE)
[10:59:40.023]         }
[10:59:40.023]         {
[10:59:40.023]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:40.023]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:40.023]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:40.023]                   envir = globalenv(), inherits = FALSE)
[10:59:40.023]                 ...future.FUN(...future.X_jj, ...)
[10:59:40.023]             })
[10:59:40.023]         }
[10:59:40.023]     }, args = future.call.arguments)
[10:59:40.023] }
[10:59:40.023] Lazy evaluation: FALSE
[10:59:40.023] Asynchronous evaluation: TRUE
[10:59:40.023] Local evaluation: TRUE
[10:59:40.023] Environment: 0x562630095900
[10:59:40.023] Capture standard output: TRUE
[10:59:40.023] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:40.023] Globals: 7 objects totaling 899 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, ...)
[10:59:40.023] Packages: <none>
[10:59:40.023] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:40.023] Resolved: FALSE
[10:59:40.023] Value: <not collected>
[10:59:40.023] Conditions captured: <none>
[10:59:40.023] Early signaling: FALSE
[10:59:40.023] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:40.023] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:40.035] Chunk #1 of 2 ... DONE
[10:59:40.035] Chunk #2 of 2 ...
[10:59:40.035]  - Finding globals in 'X' for chunk #2 ...
[10:59:40.035] getGlobalsAndPackages() ...
[10:59:40.035] Searching for globals...
[10:59:40.035] 
[10:59:40.036] Searching for globals ... DONE
[10:59:40.036] - globals: [0] <none>
[10:59:40.036] getGlobalsAndPackages() ... DONE
[10:59:40.036]    + additional globals found: [n=0] 
[10:59:40.036]    + additional namespaces needed: [n=0] 
[10:59:40.036]  - Finding globals in 'X' for chunk #2 ... DONE
[10:59:40.036]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:59:40.036]  - seeds: [3] <seeds>
[10:59:40.036]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:40.036] getGlobalsAndPackages() ...
[10:59:40.037] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:40.037] Resolving globals: FALSE
[10:59:40.037] Tweak future expression to call with '...' arguments ...
[10:59:40.037] {
[10:59:40.037]     do.call(function(...) {
[10:59:40.037]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:40.037]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:40.037]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:40.037]             on.exit(options(oopts), add = TRUE)
[10:59:40.037]         }
[10:59:40.037]         {
[10:59:40.037]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:40.037]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:40.037]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:40.037]                   envir = globalenv(), inherits = FALSE)
[10:59:40.037]                 ...future.FUN(...future.X_jj, ...)
[10:59:40.037]             })
[10:59:40.037]         }
[10:59:40.037]     }, args = future.call.arguments)
[10:59:40.037] }
[10:59:40.037] Tweak future expression to call with '...' arguments ... DONE
[10:59:40.037] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:59:40.038] 
[10:59:40.038] getGlobalsAndPackages() ... DONE
[10:59:40.038] run() for ‘Future’ ...
[10:59:40.038] - state: ‘created’
[10:59:40.038] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:59:40.052] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:40.052] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:59:40.052]   - Field: ‘node’
[10:59:40.052]   - Field: ‘label’
[10:59:40.052]   - Field: ‘local’
[10:59:40.052]   - Field: ‘owner’
[10:59:40.052]   - Field: ‘envir’
[10:59:40.052]   - Field: ‘workers’
[10:59:40.052]   - Field: ‘packages’
[10:59:40.053]   - Field: ‘gc’
[10:59:40.053]   - Field: ‘conditions’
[10:59:40.053]   - Field: ‘persistent’
[10:59:40.053]   - Field: ‘expr’
[10:59:40.053]   - Field: ‘uuid’
[10:59:40.053]   - Field: ‘seed’
[10:59:40.053]   - Field: ‘version’
[10:59:40.053]   - Field: ‘result’
[10:59:40.053]   - Field: ‘asynchronous’
[10:59:40.053]   - Field: ‘calls’
[10:59:40.053]   - Field: ‘globals’
[10:59:40.054]   - Field: ‘stdout’
[10:59:40.056]   - Field: ‘earlySignal’
[10:59:40.056]   - Field: ‘lazy’
[10:59:40.056]   - Field: ‘state’
[10:59:40.056] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:59:40.056] - Launch lazy future ...
[10:59:40.056] Packages needed by the future expression (n = 0): <none>
[10:59:40.056] Packages needed by future strategies (n = 0): <none>
[10:59:40.057] {
[10:59:40.057]     {
[10:59:40.057]         {
[10:59:40.057]             ...future.startTime <- base::Sys.time()
[10:59:40.057]             {
[10:59:40.057]                 {
[10:59:40.057]                   {
[10:59:40.057]                     {
[10:59:40.057]                       base::local({
[10:59:40.057]                         has_future <- base::requireNamespace("future", 
[10:59:40.057]                           quietly = TRUE)
[10:59:40.057]                         if (has_future) {
[10:59:40.057]                           ns <- base::getNamespace("future")
[10:59:40.057]                           version <- ns[[".package"]][["version"]]
[10:59:40.057]                           if (is.null(version)) 
[10:59:40.057]                             version <- utils::packageVersion("future")
[10:59:40.057]                         }
[10:59:40.057]                         else {
[10:59:40.057]                           version <- NULL
[10:59:40.057]                         }
[10:59:40.057]                         if (!has_future || version < "1.8.0") {
[10:59:40.057]                           info <- base::c(r_version = base::gsub("R version ", 
[10:59:40.057]                             "", base::R.version$version.string), 
[10:59:40.057]                             platform = base::sprintf("%s (%s-bit)", 
[10:59:40.057]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:59:40.057]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:59:40.057]                               "release", "version")], collapse = " "), 
[10:59:40.057]                             hostname = base::Sys.info()[["nodename"]])
[10:59:40.057]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:59:40.057]                             info)
[10:59:40.057]                           info <- base::paste(info, collapse = "; ")
[10:59:40.057]                           if (!has_future) {
[10:59:40.057]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:59:40.057]                               info)
[10:59:40.057]                           }
[10:59:40.057]                           else {
[10:59:40.057]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:59:40.057]                               info, version)
[10:59:40.057]                           }
[10:59:40.057]                           base::stop(msg)
[10:59:40.057]                         }
[10:59:40.057]                       })
[10:59:40.057]                     }
[10:59:40.057]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:59:40.057]                     base::options(mc.cores = 1L)
[10:59:40.057]                   }
[10:59:40.057]                   ...future.strategy.old <- future::plan("list")
[10:59:40.057]                   options(future.plan = NULL)
[10:59:40.057]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:59:40.057]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:59:40.057]                 }
[10:59:40.057]                 ...future.workdir <- getwd()
[10:59:40.057]             }
[10:59:40.057]             ...future.oldOptions <- base::as.list(base::.Options)
[10:59:40.057]             ...future.oldEnvVars <- base::Sys.getenv()
[10:59:40.057]         }
[10:59:40.057]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:59:40.057]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:59:40.057]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:59:40.057]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:59:40.057]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:59:40.057]             future.stdout.windows.reencode = NULL, width = 80L)
[10:59:40.057]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:59:40.057]             base::names(...future.oldOptions))
[10:59:40.057]     }
[10:59:40.057]     if (FALSE) {
[10:59:40.057]     }
[10:59:40.057]     else {
[10:59:40.057]         if (TRUE) {
[10:59:40.057]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:59:40.057]                 open = "w")
[10:59:40.057]         }
[10:59:40.057]         else {
[10:59:40.057]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:59:40.057]                 windows = "NUL", "/dev/null"), open = "w")
[10:59:40.057]         }
[10:59:40.057]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:59:40.057]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:59:40.057]             base::sink(type = "output", split = FALSE)
[10:59:40.057]             base::close(...future.stdout)
[10:59:40.057]         }, add = TRUE)
[10:59:40.057]     }
[10:59:40.057]     ...future.frame <- base::sys.nframe()
[10:59:40.057]     ...future.conditions <- base::list()
[10:59:40.057]     ...future.rng <- base::globalenv()$.Random.seed
[10:59:40.057]     if (FALSE) {
[10:59:40.057]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:59:40.057]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:59:40.057]     }
[10:59:40.057]     ...future.result <- base::tryCatch({
[10:59:40.057]         base::withCallingHandlers({
[10:59:40.057]             ...future.value <- base::withVisible(base::local({
[10:59:40.057]                 ...future.makeSendCondition <- base::local({
[10:59:40.057]                   sendCondition <- NULL
[10:59:40.057]                   function(frame = 1L) {
[10:59:40.057]                     if (is.function(sendCondition)) 
[10:59:40.057]                       return(sendCondition)
[10:59:40.057]                     ns <- getNamespace("parallel")
[10:59:40.057]                     if (exists("sendData", mode = "function", 
[10:59:40.057]                       envir = ns)) {
[10:59:40.057]                       parallel_sendData <- get("sendData", mode = "function", 
[10:59:40.057]                         envir = ns)
[10:59:40.057]                       envir <- sys.frame(frame)
[10:59:40.057]                       master <- NULL
[10:59:40.057]                       while (!identical(envir, .GlobalEnv) && 
[10:59:40.057]                         !identical(envir, emptyenv())) {
[10:59:40.057]                         if (exists("master", mode = "list", envir = envir, 
[10:59:40.057]                           inherits = FALSE)) {
[10:59:40.057]                           master <- get("master", mode = "list", 
[10:59:40.057]                             envir = envir, inherits = FALSE)
[10:59:40.057]                           if (inherits(master, c("SOCKnode", 
[10:59:40.057]                             "SOCK0node"))) {
[10:59:40.057]                             sendCondition <<- function(cond) {
[10:59:40.057]                               data <- list(type = "VALUE", value = cond, 
[10:59:40.057]                                 success = TRUE)
[10:59:40.057]                               parallel_sendData(master, data)
[10:59:40.057]                             }
[10:59:40.057]                             return(sendCondition)
[10:59:40.057]                           }
[10:59:40.057]                         }
[10:59:40.057]                         frame <- frame + 1L
[10:59:40.057]                         envir <- sys.frame(frame)
[10:59:40.057]                       }
[10:59:40.057]                     }
[10:59:40.057]                     sendCondition <<- function(cond) NULL
[10:59:40.057]                   }
[10:59:40.057]                 })
[10:59:40.057]                 withCallingHandlers({
[10:59:40.057]                   {
[10:59:40.057]                     do.call(function(...) {
[10:59:40.057]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:40.057]                       if (!identical(...future.globals.maxSize.org, 
[10:59:40.057]                         ...future.globals.maxSize)) {
[10:59:40.057]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:40.057]                         on.exit(options(oopts), add = TRUE)
[10:59:40.057]                       }
[10:59:40.057]                       {
[10:59:40.057]                         lapply(seq_along(...future.elements_ii), 
[10:59:40.057]                           FUN = function(jj) {
[10:59:40.057]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:40.057]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:40.057]                               envir = globalenv(), inherits = FALSE)
[10:59:40.057]                             ...future.FUN(...future.X_jj, ...)
[10:59:40.057]                           })
[10:59:40.057]                       }
[10:59:40.057]                     }, args = future.call.arguments)
[10:59:40.057]                   }
[10:59:40.057]                 }, immediateCondition = function(cond) {
[10:59:40.057]                   sendCondition <- ...future.makeSendCondition()
[10:59:40.057]                   sendCondition(cond)
[10:59:40.057]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:40.057]                   {
[10:59:40.057]                     inherits <- base::inherits
[10:59:40.057]                     invokeRestart <- base::invokeRestart
[10:59:40.057]                     is.null <- base::is.null
[10:59:40.057]                     muffled <- FALSE
[10:59:40.057]                     if (inherits(cond, "message")) {
[10:59:40.057]                       muffled <- grepl(pattern, "muffleMessage")
[10:59:40.057]                       if (muffled) 
[10:59:40.057]                         invokeRestart("muffleMessage")
[10:59:40.057]                     }
[10:59:40.057]                     else if (inherits(cond, "warning")) {
[10:59:40.057]                       muffled <- grepl(pattern, "muffleWarning")
[10:59:40.057]                       if (muffled) 
[10:59:40.057]                         invokeRestart("muffleWarning")
[10:59:40.057]                     }
[10:59:40.057]                     else if (inherits(cond, "condition")) {
[10:59:40.057]                       if (!is.null(pattern)) {
[10:59:40.057]                         computeRestarts <- base::computeRestarts
[10:59:40.057]                         grepl <- base::grepl
[10:59:40.057]                         restarts <- computeRestarts(cond)
[10:59:40.057]                         for (restart in restarts) {
[10:59:40.057]                           name <- restart$name
[10:59:40.057]                           if (is.null(name)) 
[10:59:40.057]                             next
[10:59:40.057]                           if (!grepl(pattern, name)) 
[10:59:40.057]                             next
[10:59:40.057]                           invokeRestart(restart)
[10:59:40.057]                           muffled <- TRUE
[10:59:40.057]                           break
[10:59:40.057]                         }
[10:59:40.057]                       }
[10:59:40.057]                     }
[10:59:40.057]                     invisible(muffled)
[10:59:40.057]                   }
[10:59:40.057]                   muffleCondition(cond)
[10:59:40.057]                 })
[10:59:40.057]             }))
[10:59:40.057]             future::FutureResult(value = ...future.value$value, 
[10:59:40.057]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:40.057]                   ...future.rng), globalenv = if (FALSE) 
[10:59:40.057]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:59:40.057]                     ...future.globalenv.names))
[10:59:40.057]                 else NULL, started = ...future.startTime, version = "1.8")
[10:59:40.057]         }, condition = base::local({
[10:59:40.057]             c <- base::c
[10:59:40.057]             inherits <- base::inherits
[10:59:40.057]             invokeRestart <- base::invokeRestart
[10:59:40.057]             length <- base::length
[10:59:40.057]             list <- base::list
[10:59:40.057]             seq.int <- base::seq.int
[10:59:40.057]             signalCondition <- base::signalCondition
[10:59:40.057]             sys.calls <- base::sys.calls
[10:59:40.057]             `[[` <- base::`[[`
[10:59:40.057]             `+` <- base::`+`
[10:59:40.057]             `<<-` <- base::`<<-`
[10:59:40.057]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:59:40.057]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:59:40.057]                   3L)]
[10:59:40.057]             }
[10:59:40.057]             function(cond) {
[10:59:40.057]                 is_error <- inherits(cond, "error")
[10:59:40.057]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:59:40.057]                   NULL)
[10:59:40.057]                 if (is_error) {
[10:59:40.057]                   sessionInformation <- function() {
[10:59:40.057]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:59:40.057]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:59:40.057]                       search = base::search(), system = base::Sys.info())
[10:59:40.057]                   }
[10:59:40.057]                   ...future.conditions[[length(...future.conditions) + 
[10:59:40.057]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:59:40.057]                     cond$call), session = sessionInformation(), 
[10:59:40.057]                     timestamp = base::Sys.time(), signaled = 0L)
[10:59:40.057]                   signalCondition(cond)
[10:59:40.057]                 }
[10:59:40.057]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:59:40.057]                 "immediateCondition"))) {
[10:59:40.057]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:59:40.057]                   ...future.conditions[[length(...future.conditions) + 
[10:59:40.057]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:59:40.057]                   if (TRUE && !signal) {
[10:59:40.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:40.057]                     {
[10:59:40.057]                       inherits <- base::inherits
[10:59:40.057]                       invokeRestart <- base::invokeRestart
[10:59:40.057]                       is.null <- base::is.null
[10:59:40.057]                       muffled <- FALSE
[10:59:40.057]                       if (inherits(cond, "message")) {
[10:59:40.057]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:40.057]                         if (muffled) 
[10:59:40.057]                           invokeRestart("muffleMessage")
[10:59:40.057]                       }
[10:59:40.057]                       else if (inherits(cond, "warning")) {
[10:59:40.057]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:40.057]                         if (muffled) 
[10:59:40.057]                           invokeRestart("muffleWarning")
[10:59:40.057]                       }
[10:59:40.057]                       else if (inherits(cond, "condition")) {
[10:59:40.057]                         if (!is.null(pattern)) {
[10:59:40.057]                           computeRestarts <- base::computeRestarts
[10:59:40.057]                           grepl <- base::grepl
[10:59:40.057]                           restarts <- computeRestarts(cond)
[10:59:40.057]                           for (restart in restarts) {
[10:59:40.057]                             name <- restart$name
[10:59:40.057]                             if (is.null(name)) 
[10:59:40.057]                               next
[10:59:40.057]                             if (!grepl(pattern, name)) 
[10:59:40.057]                               next
[10:59:40.057]                             invokeRestart(restart)
[10:59:40.057]                             muffled <- TRUE
[10:59:40.057]                             break
[10:59:40.057]                           }
[10:59:40.057]                         }
[10:59:40.057]                       }
[10:59:40.057]                       invisible(muffled)
[10:59:40.057]                     }
[10:59:40.057]                     muffleCondition(cond, pattern = "^muffle")
[10:59:40.057]                   }
[10:59:40.057]                 }
[10:59:40.057]                 else {
[10:59:40.057]                   if (TRUE) {
[10:59:40.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:59:40.057]                     {
[10:59:40.057]                       inherits <- base::inherits
[10:59:40.057]                       invokeRestart <- base::invokeRestart
[10:59:40.057]                       is.null <- base::is.null
[10:59:40.057]                       muffled <- FALSE
[10:59:40.057]                       if (inherits(cond, "message")) {
[10:59:40.057]                         muffled <- grepl(pattern, "muffleMessage")
[10:59:40.057]                         if (muffled) 
[10:59:40.057]                           invokeRestart("muffleMessage")
[10:59:40.057]                       }
[10:59:40.057]                       else if (inherits(cond, "warning")) {
[10:59:40.057]                         muffled <- grepl(pattern, "muffleWarning")
[10:59:40.057]                         if (muffled) 
[10:59:40.057]                           invokeRestart("muffleWarning")
[10:59:40.057]                       }
[10:59:40.057]                       else if (inherits(cond, "condition")) {
[10:59:40.057]                         if (!is.null(pattern)) {
[10:59:40.057]                           computeRestarts <- base::computeRestarts
[10:59:40.057]                           grepl <- base::grepl
[10:59:40.057]                           restarts <- computeRestarts(cond)
[10:59:40.057]                           for (restart in restarts) {
[10:59:40.057]                             name <- restart$name
[10:59:40.057]                             if (is.null(name)) 
[10:59:40.057]                               next
[10:59:40.057]                             if (!grepl(pattern, name)) 
[10:59:40.057]                               next
[10:59:40.057]                             invokeRestart(restart)
[10:59:40.057]                             muffled <- TRUE
[10:59:40.057]                             break
[10:59:40.057]                           }
[10:59:40.057]                         }
[10:59:40.057]                       }
[10:59:40.057]                       invisible(muffled)
[10:59:40.057]                     }
[10:59:40.057]                     muffleCondition(cond, pattern = "^muffle")
[10:59:40.057]                   }
[10:59:40.057]                 }
[10:59:40.057]             }
[10:59:40.057]         }))
[10:59:40.057]     }, error = function(ex) {
[10:59:40.057]         base::structure(base::list(value = NULL, visible = NULL, 
[10:59:40.057]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:59:40.057]                 ...future.rng), started = ...future.startTime, 
[10:59:40.057]             finished = Sys.time(), session_uuid = NA_character_, 
[10:59:40.057]             version = "1.8"), class = "FutureResult")
[10:59:40.057]     }, finally = {
[10:59:40.057]         if (!identical(...future.workdir, getwd())) 
[10:59:40.057]             setwd(...future.workdir)
[10:59:40.057]         {
[10:59:40.057]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:59:40.057]                 ...future.oldOptions$nwarnings <- NULL
[10:59:40.057]             }
[10:59:40.057]             base::options(...future.oldOptions)
[10:59:40.057]             if (.Platform$OS.type == "windows") {
[10:59:40.057]                 old_names <- names(...future.oldEnvVars)
[10:59:40.057]                 envs <- base::Sys.getenv()
[10:59:40.057]                 names <- names(envs)
[10:59:40.057]                 common <- intersect(names, old_names)
[10:59:40.057]                 added <- setdiff(names, old_names)
[10:59:40.057]                 removed <- setdiff(old_names, names)
[10:59:40.057]                 changed <- common[...future.oldEnvVars[common] != 
[10:59:40.057]                   envs[common]]
[10:59:40.057]                 NAMES <- toupper(changed)
[10:59:40.057]                 args <- list()
[10:59:40.057]                 for (kk in seq_along(NAMES)) {
[10:59:40.057]                   name <- changed[[kk]]
[10:59:40.057]                   NAME <- NAMES[[kk]]
[10:59:40.057]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:40.057]                     next
[10:59:40.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:40.057]                 }
[10:59:40.057]                 NAMES <- toupper(added)
[10:59:40.057]                 for (kk in seq_along(NAMES)) {
[10:59:40.057]                   name <- added[[kk]]
[10:59:40.057]                   NAME <- NAMES[[kk]]
[10:59:40.057]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:40.057]                     next
[10:59:40.057]                   args[[name]] <- ""
[10:59:40.057]                 }
[10:59:40.057]                 NAMES <- toupper(removed)
[10:59:40.057]                 for (kk in seq_along(NAMES)) {
[10:59:40.057]                   name <- removed[[kk]]
[10:59:40.057]                   NAME <- NAMES[[kk]]
[10:59:40.057]                   if (name != NAME && is.element(NAME, old_names)) 
[10:59:40.057]                     next
[10:59:40.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:59:40.057]                 }
[10:59:40.057]                 if (length(args) > 0) 
[10:59:40.057]                   base::do.call(base::Sys.setenv, args = args)
[10:59:40.057]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:59:40.057]             }
[10:59:40.057]             else {
[10:59:40.057]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:59:40.057]             }
[10:59:40.057]             {
[10:59:40.057]                 if (base::length(...future.futureOptionsAdded) > 
[10:59:40.057]                   0L) {
[10:59:40.057]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:59:40.057]                   base::names(opts) <- ...future.futureOptionsAdded
[10:59:40.057]                   base::options(opts)
[10:59:40.057]                 }
[10:59:40.057]                 {
[10:59:40.057]                   {
[10:59:40.057]                     base::options(mc.cores = ...future.mc.cores.old)
[10:59:40.057]                     NULL
[10:59:40.057]                   }
[10:59:40.057]                   options(future.plan = NULL)
[10:59:40.057]                   if (is.na(NA_character_)) 
[10:59:40.057]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:59:40.057]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:59:40.057]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:59:40.057]                     .init = FALSE)
[10:59:40.057]                 }
[10:59:40.057]             }
[10:59:40.057]         }
[10:59:40.057]     })
[10:59:40.057]     if (TRUE) {
[10:59:40.057]         base::sink(type = "output", split = FALSE)
[10:59:40.057]         if (TRUE) {
[10:59:40.057]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:59:40.057]         }
[10:59:40.057]         else {
[10:59:40.057]             ...future.result["stdout"] <- base::list(NULL)
[10:59:40.057]         }
[10:59:40.057]         base::close(...future.stdout)
[10:59:40.057]         ...future.stdout <- NULL
[10:59:40.057]     }
[10:59:40.057]     ...future.result$conditions <- ...future.conditions
[10:59:40.057]     ...future.result$finished <- base::Sys.time()
[10:59:40.057]     ...future.result
[10:59:40.057] }
[10:59:40.059] Exporting 7 global objects (1.37 KiB) to cluster node #2 ...
[10:59:40.059] Exporting ‘...future.FUN’ (179 bytes) to cluster node #2 ...
[10:59:40.060] Exporting ‘...future.FUN’ (179 bytes) to cluster node #2 ... DONE
[10:59:40.060] Exporting ‘foo’ (399 bytes) to cluster node #2 ...
[10:59:40.060] Exporting ‘foo’ (399 bytes) to cluster node #2 ... DONE
[10:59:40.060] Exporting ‘x’ (39 bytes) to cluster node #2 ...
[10:59:40.061] Exporting ‘x’ (39 bytes) to cluster node #2 ... DONE
[10:59:40.061] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[10:59:40.061] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[10:59:40.061] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ...
[10:59:40.062] Exporting ‘...future.elements_ii’ (67 bytes) to cluster node #2 ... DONE
[10:59:40.062] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ...
[10:59:40.062] Exporting ‘...future.seeds_ii’ (139 bytes) to cluster node #2 ... DONE
[10:59:40.062] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[10:59:40.063] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[10:59:40.063] Exporting 7 global objects (1.37 KiB) to cluster node #2 ... DONE
[10:59:40.063] MultisessionFuture started
[10:59:40.063] - Launch lazy future ... done
[10:59:40.063] run() for ‘MultisessionFuture’ ... done
[10:59:40.064] Created future:
[10:59:40.064] MultisessionFuture:
[10:59:40.064] Label: ‘future_replicate-2’
[10:59:40.064] Expression:
[10:59:40.064] {
[10:59:40.064]     do.call(function(...) {
[10:59:40.064]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:59:40.064]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:59:40.064]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:59:40.064]             on.exit(options(oopts), add = TRUE)
[10:59:40.064]         }
[10:59:40.064]         {
[10:59:40.064]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:59:40.064]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:59:40.064]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:59:40.064]                   envir = globalenv(), inherits = FALSE)
[10:59:40.064]                 ...future.FUN(...future.X_jj, ...)
[10:59:40.064]             })
[10:59:40.064]         }
[10:59:40.064]     }, args = future.call.arguments)
[10:59:40.064] }
[10:59:40.064] Lazy evaluation: FALSE
[10:59:40.064] Asynchronous evaluation: TRUE
[10:59:40.064] Local evaluation: TRUE
[10:59:40.064] Environment: 0x562630095900
[10:59:40.064] Capture standard output: TRUE
[10:59:40.064] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:59:40.064] Globals: 7 objects totaling 947 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, ...)
[10:59:40.064] Packages: <none>
[10:59:40.064] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:59:40.064] Resolved: FALSE
[10:59:40.064] Value: <not collected>
[10:59:40.064] Conditions captured: <none>
[10:59:40.064] Early signaling: FALSE
[10:59:40.064] Owner process: d183e242-fcbf-c380-537c-e25f7426d033
[10:59:40.064] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:59:40.075] Chunk #2 of 2 ... DONE
[10:59:40.075] Launching 2 futures (chunks) ... DONE
[10:59:40.075] Resolving 2 futures (chunks) ...
[10:59:40.075] resolve() on list ...
[10:59:40.076]  recursive: 0
[10:59:40.076]  length: 2
[10:59:40.076] 
[10:59:40.076] receiveMessageFromWorker() for ClusterFuture ...
[10:59:40.076] - Validating connection of MultisessionFuture
[10:59:40.076] - received message: FutureResult
[10:59:40.076] - Received FutureResult
[10:59:40.077] - Erased future from FutureRegistry
[10:59:40.077] result() for ClusterFuture ...
[10:59:40.077] - result already collected: FutureResult
[10:59:40.077] result() for ClusterFuture ... done
[10:59:40.077] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:40.077] Future #1
[10:59:40.077] result() for ClusterFuture ...
[10:59:40.077] - result already collected: FutureResult
[10:59:40.077] result() for ClusterFuture ... done
[10:59:40.077] result() for ClusterFuture ...
[10:59:40.077] - result already collected: FutureResult
[10:59:40.077] result() for ClusterFuture ... done
[10:59:40.078] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:59:40.078] - nx: 2
[10:59:40.078] - relay: TRUE
[10:59:40.078] - stdout: TRUE
[10:59:40.078] - signal: TRUE
[10:59:40.078] - resignal: FALSE
[10:59:40.078] - force: TRUE
[10:59:40.078] - relayed: [n=2] FALSE, FALSE
[10:59:40.078] - queued futures: [n=2] FALSE, FALSE
[10:59:40.078]  - until=1
[10:59:40.078]  - relaying element #1
[10:59:40.078] result() for ClusterFuture ...
[10:59:40.078] - result already collected: FutureResult
[10:59:40.079] result() for ClusterFuture ... done
[10:59:40.079] result() for ClusterFuture ...
[10:59:40.079] - result already collected: FutureResult
[10:59:40.079] result() for ClusterFuture ... done
[10:59:40.079] result() for ClusterFuture ...
[10:59:40.079] - result already collected: FutureResult
[10:59:40.079] result() for ClusterFuture ... done
[10:59:40.079] result() for ClusterFuture ...
[10:59:40.079] - result already collected: FutureResult
[10:59:40.079] result() for ClusterFuture ... done
[10:59:40.079] - relayed: [n=2] TRUE, FALSE
[10:59:40.079] - queued futures: [n=2] TRUE, FALSE
[10:59:40.080] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:59:40.080]  length: 1 (resolved future 1)
[10:59:40.105] receiveMessageFromWorker() for ClusterFuture ...
[10:59:40.105] - Validating connection of MultisessionFuture
[10:59:40.106] - received message: FutureResult
[10:59:40.106] - Received FutureResult
[10:59:40.106] - Erased future from FutureRegistry
[10:59:40.106] result() for ClusterFuture ...
[10:59:40.106] - result already collected: FutureResult
[10:59:40.106] result() for ClusterFuture ... done
[10:59:40.106] receiveMessageFromWorker() for ClusterFuture ... done
[10:59:40.106] Future #2
[10:59:40.106] result() for ClusterFuture ...
[10:59:40.106] - result already collected: FutureResult
[10:59:40.106] result() for ClusterFuture ... done
[10:59:40.107] result() for ClusterFuture ...
[10:59:40.107] - result already collected: FutureResult
[10:59:40.107] result() for ClusterFuture ... done
[10:59:40.107] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:59:40.107] - nx: 2
[10:59:40.107] - relay: TRUE
[10:59:40.107] - stdout: TRUE
[10:59:40.107] - signal: TRUE
[10:59:40.107] - resignal: FALSE
[10:59:40.107] - force: TRUE
[10:59:40.107] - relayed: [n=2] TRUE, FALSE
[10:59:40.107] - queued futures: [n=2] TRUE, FALSE
[10:59:40.107]  - until=2
[10:59:40.108]  - relaying element #2
[10:59:40.108] result() for ClusterFuture ...
[10:59:40.108] - result already collected: FutureResult
[10:59:40.108] result() for ClusterFuture ... done
[10:59:40.108] result() for ClusterFuture ...
[10:59:40.108] - result already collected: FutureResult
[10:59:40.108] result() for ClusterFuture ... done
[10:59:40.108] result() for ClusterFuture ...
[10:59:40.108] - result already collected: FutureResult
[10:59:40.108] result() for ClusterFuture ... done
[10:59:40.108] result() for ClusterFuture ...
[10:59:40.109] - result already collected: FutureResult
[10:59:40.109] result() for ClusterFuture ... done
[10:59:40.109] - relayed: [n=2] TRUE, TRUE
[10:59:40.109] - queued futures: [n=2] TRUE, TRUE
[10:59:40.109] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:59:40.109]  length: 0 (resolved future 2)
[10:59:40.109] Relaying remaining futures
[10:59:40.109] signalConditionsASAP(NULL, pos=0) ...
[10:59:40.109] - nx: 2
[10:59:40.109] - relay: TRUE
[10:59:40.109] - stdout: TRUE
[10:59:40.109] - signal: TRUE
[10:59:40.109] - resignal: FALSE
[10:59:40.110] - force: TRUE
[10:59:40.110] - relayed: [n=2] TRUE, TRUE
[10:59:40.110] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:59:40.110] - relayed: [n=2] TRUE, TRUE
[10:59:40.110] - queued futures: [n=2] TRUE, TRUE
[10:59:40.110] signalConditionsASAP(NULL, pos=0) ... done
[10:59:40.110] resolve() on list ... DONE
[10:59:40.110] result() for ClusterFuture ...
[10:59:40.110] - result already collected: FutureResult
[10:59:40.110] result() for ClusterFuture ... done
[10:59:40.110] result() for ClusterFuture ...
[10:59:40.111] - result already collected: FutureResult
[10:59:40.111] result() for ClusterFuture ... done
[10:59:40.111] result() for ClusterFuture ...
[10:59:40.111] - result already collected: FutureResult
[10:59:40.111] result() for ClusterFuture ... done
[10:59:40.111] result() for ClusterFuture ...
[10:59:40.111] - result already collected: FutureResult
[10:59:40.111] result() for ClusterFuture ... done
[10:59:40.111]  - Number of value chunks collected: 2
[10:59:40.111] Resolving 2 futures (chunks) ... DONE
[10:59:40.111] Reducing values from 2 chunks ...
[10:59:40.112]  - Number of values collected after concatenation: 5
[10:59:40.112]  - Number of values expected: 5
[10:59:40.112] Reducing values from 2 chunks ... DONE
[10:59:40.112] future_lapply() ... DONE
[10:59:40.112] plan(): Setting new future strategy stack:
[10:59:40.112] List of future strategies:
[10:59:40.112] 1. sequential:
[10:59:40.112]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:40.112]    - tweaked: FALSE
[10:59:40.112]    - call: plan(sequential)
[10:59:40.113] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[10:59:40.114] plan(): Setting new future strategy stack:
[10:59:40.114] List of future strategies:
[10:59:40.114] 1. FutureStrategy:
[10:59:40.114]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:59:40.114]    - tweaked: FALSE
[10:59:40.114]    - call: future::plan(oplan)
[10:59:40.114] plan(): nbrOfWorkers() = 1
> 
