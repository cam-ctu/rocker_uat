
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:58:48.236] plan(): Setting new future strategy stack:
[10:58:48.236] List of future strategies:
[10:58:48.236] 1. sequential:
[10:58:48.236]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[10:58:48.236]    - tweaked: FALSE
[10:58:48.236]    - call: future::plan("sequential")
[10:58:48.249] plan(): nbrOfWorkers() = 1
> library("tools") ## toTitleCase()
> 
> options(future.debug = FALSE)
> options(future.apply.debug = TRUE)
> 
> message("*** future_lapply() - globals ...")
*** future_lapply() - globals ...
> 
> plan(cluster, workers = "localhost")
> 
> a <- 1
> b <- 2
> 
> globals_set <- list(
+   A = FALSE,
+   B = TRUE,
+   C = c("a", "b"),
+   D = list(a = 2, b = 3)
+ )
> 
> x <- list(1)
> y_truth <- list(A = NULL, B = list(1), C = list(1), D = list(2))
> str(y_truth)
List of 4
 $ A: NULL
 $ B:List of 1
  ..$ : num 1
 $ C:List of 1
  ..$ : num 1
 $ D:List of 1
  ..$ : num 2
> 
> for (name in names(globals_set)) {
+   globals <- globals_set[[name]]
+   message("Globals set ", sQuote(name))
+   y <- tryCatch({
+     future_lapply(x, FUN = function(x) {
+       median(c(x, a, b))
+     }, future.globals = globals, future.packages = "utils")
+   }, error = identity)
+   print(y)
+   stopifnot((name == "A" && inherits(y, "error")) || 
+              identical(y, y_truth[[name]]))
+ }
Globals set ‘A’
[10:58:48.766] future_lapply() ...
[10:58:48.770] Number of chunks: 1
[10:58:48.770] getGlobalsAndPackagesXApply() ...
[10:58:48.770]  - future.globals: FALSE
[10:58:48.772]  - globals found/used: [n=2] ‘FUN’, ‘future.call.arguments’
[10:58:48.772]  - needed namespaces: [n=0] 
[10:58:48.772] Finding globals ... DONE
[10:58:48.772]  - use_args: TRUE
[10:58:48.773]  - Getting '...' globals ...
[10:58:48.774]    - '...' content: [n=0] 
[10:58:48.774] List of 1
[10:58:48.774]  $ ...: list()
[10:58:48.774]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:48.774]  - attr(*, "where")=List of 1
[10:58:48.774]   ..$ ...:<environment: 0x55d3057146c8> 
[10:58:48.774]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:48.774]  - attr(*, "resolved")= logi TRUE
[10:58:48.774]  - attr(*, "total_size")= num NA
[10:58:48.776]  - Getting '...' globals ... DONE
[10:58:48.776] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[10:58:48.777] List of 3
[10:58:48.777]  $ ...future.FUN        :function (x)  
[10:58:48.777]  $ future.call.arguments: list()
[10:58:48.777]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:48.777]  $ ...                  : list()
[10:58:48.777]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:48.777]  - attr(*, "where")=List of 3
[10:58:48.777]   ..$ ...future.FUN        :<environment: R_EmptyEnv> 
[10:58:48.777]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:58:48.777]   ..$ ...                  :<environment: 0x55d3057146c8> 
[10:58:48.777]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:48.777]  - attr(*, "resolved")= logi FALSE
[10:58:48.777]  - attr(*, "total_size")= num 5070
[10:58:48.780] Packages to be attached in all futures: [n=1] ‘utils’
[10:58:48.780] getGlobalsAndPackagesXApply() ... DONE
[10:58:48.781] Number of futures (= number of chunks): 1
[10:58:48.781] Launching 1 futures (chunks) ...
[10:58:48.781] Chunk #1 of 1 ...
[10:58:48.781]  - seeds: <none>
[10:58:48.781]  - All globals exported: [n=6] ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:48.792] Created future:
[10:58:48.792] ClusterFuture:
[10:58:48.792] Label: ‘future_lapply-1’
[10:58:48.792] Expression:
[10:58:48.792] {
[10:58:48.792]     do.call(function(...) {
[10:58:48.792]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:48.792]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:48.792]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:48.792]             on.exit(options(oopts), add = TRUE)
[10:58:48.792]         }
[10:58:48.792]         {
[10:58:48.792]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:48.792]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:48.792]                 ...future.FUN(...future.X_jj, ...)
[10:58:48.792]             })
[10:58:48.792]         }
[10:58:48.792]     }, args = future.call.arguments)
[10:58:48.792] }
[10:58:48.792] Lazy evaluation: FALSE
[10:58:48.792] Asynchronous evaluation: TRUE
[10:58:48.792] Local evaluation: TRUE
[10:58:48.792] Environment: R_GlobalEnv
[10:58:48.792] Capture standard output: TRUE
[10:58:48.792] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:48.792] Globals: 5 objects totaling 881 bytes (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:48.792] Packages: 1 packages (‘utils’)
[10:58:48.792] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:48.792] Resolved: FALSE
[10:58:48.792] Value: <not collected>
[10:58:48.792] Conditions captured: <none>
[10:58:48.792] Early signaling: FALSE
[10:58:48.792] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:48.792] Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:48.805] Chunk #1 of 1 ... DONE
[10:58:48.805] Launching 1 futures (chunks) ... DONE
[10:58:48.805] Resolving 1 futures (chunks) ...
<simpleError in ...future.FUN(...future.X_jj, ...): object 'a' not found>
Globals set ‘B’
[10:58:48.848] future_lapply() ...
[10:58:48.849] Number of chunks: 1
[10:58:48.849] getGlobalsAndPackagesXApply() ...
[10:58:48.849]  - future.globals: TRUE
[10:58:48.852]  - globals found/used: [n=3] ‘FUN’, ‘a’, ‘b’
[10:58:48.852]  - needed namespaces: [n=1] ‘stats’
[10:58:48.853] Finding globals ... DONE
[10:58:48.853]  - use_args: TRUE
[10:58:48.853]  - Getting '...' globals ...
[10:58:48.853]    - '...' content: [n=0] 
[10:58:48.853] List of 1
[10:58:48.853]  $ ...: list()
[10:58:48.853]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:48.853]  - attr(*, "where")=List of 1
[10:58:48.853]   ..$ ...:<environment: 0x55d308906460> 
[10:58:48.853]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:48.853]  - attr(*, "resolved")= logi TRUE
[10:58:48.853]  - attr(*, "total_size")= num NA
[10:58:48.856]  - Getting '...' globals ... DONE
[10:58:48.856] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘a’, ‘b’, ‘...’
[10:58:48.857] List of 4
[10:58:48.857]  $ ...future.FUN:function (x)  
[10:58:48.857]  $ a            : num 1
[10:58:48.857]  $ b            : num 2
[10:58:48.857]  $ ...          : list()
[10:58:48.857]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:48.857]  - attr(*, "where")=List of 4
[10:58:48.857]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:48.857]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:48.857]   ..$ b            :<environment: R_EmptyEnv> 
[10:58:48.857]   ..$ ...          :<environment: 0x55d308906460> 
[10:58:48.857]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:48.857]  - attr(*, "resolved")= logi FALSE
[10:58:48.857]  - attr(*, "total_size")= num 5051
[10:58:48.861] Packages to be attached in all futures: [n=2] ‘stats’, ‘utils’
[10:58:48.861] getGlobalsAndPackagesXApply() ... DONE
[10:58:48.861] Number of futures (= number of chunks): 1
[10:58:48.862] Launching 1 futures (chunks) ...
[10:58:48.862] Chunk #1 of 1 ...
[10:58:48.862]  - Finding globals in 'X' for chunk #1 ...
[10:58:48.862]    + additional globals found: [n=0] 
[10:58:48.862]    + additional namespaces needed: [n=0] 
[10:58:48.862]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:48.863]  - seeds: <none>
[10:58:48.863]  - All globals exported: [n=7] ‘...future.FUN’, ‘a’, ‘b’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:48.876] Created future:
[10:58:48.876] ClusterFuture:
[10:58:48.876] Label: ‘future_lapply-1’
[10:58:48.876] Expression:
[10:58:48.876] {
[10:58:48.876]     do.call(function(...) {
[10:58:48.876]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:48.876]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:48.876]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:48.876]             on.exit(options(oopts), add = TRUE)
[10:58:48.876]         }
[10:58:48.876]         {
[10:58:48.876]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:48.876]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:48.876]                 ...future.FUN(...future.X_jj, ...)
[10:58:48.876]             })
[10:58:48.876]         }
[10:58:48.876]     }, args = future.call.arguments)
[10:58:48.876] }
[10:58:48.876] Lazy evaluation: FALSE
[10:58:48.876] Asynchronous evaluation: TRUE
[10:58:48.876] Local evaluation: TRUE
[10:58:48.876] Environment: R_GlobalEnv
[10:58:48.876] Capture standard output: TRUE
[10:58:48.876] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:48.876] Globals: 7 objects totaling 959 bytes (function ‘...future.FUN’ of 683 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, ...)
[10:58:48.876] Packages: 2 packages (‘stats’, ‘utils’)
[10:58:48.876] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:48.876] Resolved: FALSE
[10:58:48.876] Value: <not collected>
[10:58:48.876] Conditions captured: <none>
[10:58:48.876] Early signaling: FALSE
[10:58:48.876] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:48.876] Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:48.887] Chunk #1 of 1 ... DONE
[10:58:48.887] Launching 1 futures (chunks) ... DONE
[10:58:48.887] Resolving 1 futures (chunks) ...
[10:58:48.919]  - Number of value chunks collected: 1
[10:58:48.919] Resolving 1 futures (chunks) ... DONE
[10:58:48.919] Reducing values from 1 chunks ...
[10:58:48.919]  - Number of values collected after concatenation: 1
[10:58:48.919]  - Number of values expected: 1
[10:58:48.919] Reducing values from 1 chunks ... DONE
[10:58:48.920] future_lapply() ... DONE
[[1]]
[1] 1

Globals set ‘C’
[10:58:48.920] future_lapply() ...
[10:58:48.920] Number of chunks: 1
[10:58:48.920] getGlobalsAndPackagesXApply() ...
[10:58:48.921]  - future.globals: ‘a’, ‘b’
[10:58:48.921]  - use_args: TRUE
[10:58:48.921] Globals to be used in all futures (chunks): [n=4] ‘a’, ‘b’, ‘...future.FUN’, ‘...’
[10:58:48.921] List of 4
[10:58:48.921]  $ a            : num 1
[10:58:48.921]  $ b            : num 2
[10:58:48.921]  $ ...future.FUN:function (x)  
[10:58:48.921]  $ ...          : list()
[10:58:48.921]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:48.921]  - attr(*, "where")=List of 4
[10:58:48.921]   ..$ a            :<environment: R_GlobalEnv> 
[10:58:48.921]   ..$ b            :<environment: R_GlobalEnv> 
[10:58:48.921]   ..$ ...future.FUN:<environment: 0x55d307b98918> 
[10:58:48.921]   ..$ ...          :<environment: 0x55d307b98918> 
[10:58:48.921]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:48.921]  - attr(*, "resolved")= logi FALSE
[10:58:48.921]  - attr(*, "total_size")= num NA
[10:58:48.925] Packages to be attached in all futures: [n=1] ‘utils’
[10:58:48.925] getGlobalsAndPackagesXApply() ... DONE
[10:58:48.925] Number of futures (= number of chunks): 1
[10:58:48.925] Launching 1 futures (chunks) ...
[10:58:48.925] Chunk #1 of 1 ...
[10:58:48.925]  - seeds: <none>
[10:58:48.925]  - All globals exported: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:48.935] Created future:
[10:58:48.935] ClusterFuture:
[10:58:48.935] Label: ‘future_lapply-1’
[10:58:48.935] Expression:
[10:58:48.935] {
[10:58:48.935]     do.call(function(...) {
[10:58:48.935]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:48.935]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:48.935]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:48.935]             on.exit(options(oopts), add = TRUE)
[10:58:48.935]         }
[10:58:48.935]         {
[10:58:48.935]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:48.935]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:48.935]                 ...future.FUN(...future.X_jj, ...)
[10:58:48.935]             })
[10:58:48.935]         }
[10:58:48.935]     }, args = future.call.arguments)
[10:58:48.935] }
[10:58:48.935] Lazy evaluation: FALSE
[10:58:48.935] Asynchronous evaluation: TRUE
[10:58:48.935] Local evaluation: TRUE
[10:58:48.935] Environment: R_GlobalEnv
[10:58:48.935] Capture standard output: TRUE
[10:58:48.935] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:48.935] Globals: 7 objects totaling 959 bytes (numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, ...)
[10:58:48.935] Packages: 1 packages (‘utils’)
[10:58:48.935] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:48.935] Resolved: FALSE
[10:58:48.935] Value: <not collected>
[10:58:48.935] Conditions captured: <none>
[10:58:48.935] Early signaling: FALSE
[10:58:48.935] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:48.935] Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:48.946] Chunk #1 of 1 ... DONE
[10:58:48.947] Launching 1 futures (chunks) ... DONE
[10:58:48.947] Resolving 1 futures (chunks) ...
[10:58:48.977]  - Number of value chunks collected: 1
[10:58:48.977] Resolving 1 futures (chunks) ... DONE
[10:58:48.978] Reducing values from 1 chunks ...
[10:58:48.978]  - Number of values collected after concatenation: 1
[10:58:48.978]  - Number of values expected: 1
[10:58:48.978] Reducing values from 1 chunks ... DONE
[10:58:48.978] future_lapply() ... DONE
[[1]]
[1] 1

Globals set ‘D’
[10:58:48.978] future_lapply() ...
[10:58:48.979] Number of chunks: 1
[10:58:48.979] getGlobalsAndPackagesXApply() ...
[10:58:48.979]  - future.globals: <name-value list> with names ‘2’, ‘3’
[10:58:48.979]  - use_args: TRUE
[10:58:48.979]  - Getting '...' globals ...
[10:58:48.979]    - '...' content: [n=0] 
[10:58:48.980] List of 1
[10:58:48.980]  $ ...: list()
[10:58:48.980]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:48.980]  - attr(*, "where")=List of 1
[10:58:48.980]   ..$ ...:<environment: 0x55d307032e20> 
[10:58:48.980]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:48.980]  - attr(*, "resolved")= logi TRUE
[10:58:48.980]  - attr(*, "total_size")= num NA
[10:58:48.982]  - Getting '...' globals ... DONE
[10:58:48.982] Globals to be used in all futures (chunks): [n=4] ‘a’, ‘b’, ‘...future.FUN’, ‘...’
[10:58:48.982] List of 4
[10:58:48.982]  $ a            : num 2
[10:58:48.982]  $ b            : num 3
[10:58:48.982]  $ ...future.FUN:function (x)  
[10:58:48.982]  $ ...          : list()
[10:58:48.982]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:48.982]  - attr(*, "where")=List of 4
[10:58:48.982]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:48.982]   ..$ b            :<environment: R_EmptyEnv> 
[10:58:48.982]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:58:48.982]   ..$ ...          :<environment: 0x55d307032e20> 
[10:58:48.982]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:48.982]  - attr(*, "resolved")= logi FALSE
[10:58:48.982]  - attr(*, "total_size")= num NA
[10:58:48.986] Packages to be attached in all futures: [n=1] ‘utils’
[10:58:48.986] getGlobalsAndPackagesXApply() ... DONE
[10:58:48.986] Number of futures (= number of chunks): 1
[10:58:48.986] Launching 1 futures (chunks) ...
[10:58:48.986] Chunk #1 of 1 ...
[10:58:48.986]  - seeds: <none>
[10:58:48.986]  - All globals exported: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:48.997] Created future:
[10:58:48.997] ClusterFuture:
[10:58:48.997] Label: ‘future_lapply-1’
[10:58:48.997] Expression:
[10:58:48.997] {
[10:58:48.997]     do.call(function(...) {
[10:58:48.997]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:48.997]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:48.997]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:48.997]             on.exit(options(oopts), add = TRUE)
[10:58:48.997]         }
[10:58:48.997]         {
[10:58:48.997]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:48.997]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:48.997]                 ...future.FUN(...future.X_jj, ...)
[10:58:48.997]             })
[10:58:48.997]         }
[10:58:48.997]     }, args = future.call.arguments)
[10:58:48.997] }
[10:58:48.997] Lazy evaluation: FALSE
[10:58:48.997] Asynchronous evaluation: TRUE
[10:58:48.997] Local evaluation: TRUE
[10:58:48.997] Environment: R_GlobalEnv
[10:58:48.997] Capture standard output: TRUE
[10:58:48.997] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:48.997] Globals: 7 objects totaling 959 bytes (numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, ...)
[10:58:48.997] Packages: 1 packages (‘utils’)
[10:58:48.997] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:48.997] Resolved: FALSE
[10:58:48.997] Value: <not collected>
[10:58:48.997] Conditions captured: <none>
[10:58:48.997] Early signaling: FALSE
[10:58:48.997] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:48.997] Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.008] Chunk #1 of 1 ... DONE
[10:58:49.008] Launching 1 futures (chunks) ... DONE
[10:58:49.008] Resolving 1 futures (chunks) ...
[10:58:49.039]  - Number of value chunks collected: 1
[10:58:49.040] Resolving 1 futures (chunks) ... DONE
[10:58:49.040] Reducing values from 1 chunks ...
[10:58:49.040]  - Number of values collected after concatenation: 1
[10:58:49.040]  - Number of values expected: 1
[10:58:49.040] Reducing values from 1 chunks ... DONE
[10:58:49.040] future_lapply() ... DONE
[[1]]
[1] 2

> 
> message("*** future_lapply() - globals ... DONE")
*** future_lapply() - globals ... DONE
> 
> 
> message("*** future_lapply() - manual globals ...")
*** future_lapply() - manual globals ...
> 
> d <- 42
> y <- future_lapply(1:2, FUN = function(x) { x * d },
+                    future.globals = structure(FALSE, add = "d"))
[10:58:49.040] future_lapply() ...
[10:58:49.041] Number of chunks: 1
[10:58:49.041] getGlobalsAndPackagesXApply() ...
[10:58:49.041]  - future.globals: FALSE
[10:58:49.042]  - globals found/used: [n=3] ‘d’, ‘FUN’, ‘future.call.arguments’
[10:58:49.042]  - needed namespaces: [n=0] 
[10:58:49.042] Finding globals ... DONE
[10:58:49.042]  - use_args: TRUE
[10:58:49.042]  - Getting '...' globals ...
[10:58:49.043]    - '...' content: [n=0] 
[10:58:49.043] List of 1
[10:58:49.043]  $ ...: list()
[10:58:49.043]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.043]  - attr(*, "where")=List of 1
[10:58:49.043]   ..$ ...:<environment: 0x55d3085e19a0> 
[10:58:49.043]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.043]  - attr(*, "resolved")= logi TRUE
[10:58:49.043]  - attr(*, "total_size")= num NA
[10:58:49.045]  - Getting '...' globals ... DONE
[10:58:49.045] Globals to be used in all futures (chunks): [n=4] ‘d’, ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[10:58:49.045] List of 4
[10:58:49.045]  $ d                    : num 42
[10:58:49.045]  $ ...future.FUN        :function (x)  
[10:58:49.045]  $ future.call.arguments: list()
[10:58:49.045]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.045]  $ ...                  : list()
[10:58:49.045]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.045]  - attr(*, "where")=List of 4
[10:58:49.045]   ..$ d                    :<environment: R_EmptyEnv> 
[10:58:49.045]   ..$ ...future.FUN        :<environment: R_EmptyEnv> 
[10:58:49.045]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:58:49.045]   ..$ ...                  :<environment: 0x55d3085e19a0> 
[10:58:49.045]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.045]  - attr(*, "resolved")= logi FALSE
[10:58:49.045]  - attr(*, "total_size")= num 3368
[10:58:49.049] Packages to be attached in all futures: [n=0] 
[10:58:49.049] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.049] Number of futures (= number of chunks): 1
[10:58:49.049] Launching 1 futures (chunks) ...
[10:58:49.049] Chunk #1 of 1 ...
[10:58:49.049]  - seeds: <none>
[10:58:49.049]  - All globals exported: [n=7] ‘d’, ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.059] Created future:
[10:58:49.059] ClusterFuture:
[10:58:49.059] Label: ‘future_lapply-1’
[10:58:49.059] Expression:
[10:58:49.059] {
[10:58:49.059]     do.call(function(...) {
[10:58:49.059]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.059]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.059]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.059]             on.exit(options(oopts), add = TRUE)
[10:58:49.059]         }
[10:58:49.059]         {
[10:58:49.059]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.059]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.059]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.059]             })
[10:58:49.059]         }
[10:58:49.059]     }, args = future.call.arguments)
[10:58:49.059] }
[10:58:49.059] Lazy evaluation: FALSE
[10:58:49.059] Asynchronous evaluation: TRUE
[10:58:49.059] Local evaluation: TRUE
[10:58:49.059] Environment: R_GlobalEnv
[10:58:49.059] Capture standard output: TRUE
[10:58:49.059] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.059] Globals: 6 objects totaling 372 bytes (numeric ‘d’ of 39 bytes, function ‘...future.FUN’ of 127 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:49.059] Packages: <none>
[10:58:49.059] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.059] Resolved: FALSE
[10:58:49.059] Value: <not collected>
[10:58:49.059] Conditions captured: <none>
[10:58:49.059] Early signaling: FALSE
[10:58:49.059] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.059] Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.070] Chunk #1 of 1 ... DONE
[10:58:49.070] Launching 1 futures (chunks) ... DONE
[10:58:49.070] Resolving 1 futures (chunks) ...
[10:58:49.102]  - Number of value chunks collected: 1
[10:58:49.102] Resolving 1 futures (chunks) ... DONE
[10:58:49.102] Reducing values from 1 chunks ...
[10:58:49.102]  - Number of values collected after concatenation: 2
[10:58:49.102]  - Number of values expected: 2
[10:58:49.103] Reducing values from 1 chunks ... DONE
[10:58:49.103] future_lapply() ... DONE
> stopifnot(identical(y, list(42, 84)))
> 
> e <- 42
> res <- tryCatch({
+   future_lapply(1:2, FUN = function(x) { 2 * e },
+                 future.globals = structure(TRUE, ignore = "e"))
+ }, error = identity)
[10:58:49.103] future_lapply() ...
[10:58:49.103] Number of chunks: 1
[10:58:49.103] getGlobalsAndPackagesXApply() ...
[10:58:49.104]  - future.globals: TRUE
[10:58:49.105]  - globals found/used: [n=1] ‘FUN’
[10:58:49.105]  - needed namespaces: [n=0] 
[10:58:49.107] Finding globals ... DONE
[10:58:49.107]  - use_args: TRUE
[10:58:49.107]  - Getting '...' globals ...
[10:58:49.107]    - '...' content: [n=0] 
[10:58:49.107] List of 1
[10:58:49.107]  $ ...: list()
[10:58:49.107]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.107]  - attr(*, "where")=List of 1
[10:58:49.107]   ..$ ...:<environment: 0x55d308e63200> 
[10:58:49.107]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.107]  - attr(*, "resolved")= logi TRUE
[10:58:49.107]  - attr(*, "total_size")= num NA
[10:58:49.109]  - Getting '...' globals ... DONE
[10:58:49.110] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.110] List of 2
[10:58:49.110]  $ ...future.FUN:function (x)  
[10:58:49.110]  $ ...          : list()
[10:58:49.110]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.110]  - attr(*, "where")=List of 2
[10:58:49.110]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.110]   ..$ ...          :<environment: 0x55d308e63200> 
[10:58:49.110]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.110]  - attr(*, "resolved")= logi FALSE
[10:58:49.110]  - attr(*, "total_size")= num 3259
[10:58:49.112] Packages to be attached in all futures: [n=0] 
[10:58:49.112] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.112] Number of futures (= number of chunks): 1
[10:58:49.113] Launching 1 futures (chunks) ...
[10:58:49.113] Chunk #1 of 1 ...
[10:58:49.113]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.113]    + additional globals found: [n=0] 
[10:58:49.113]    + additional namespaces needed: [n=0] 
[10:58:49.113]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.113]  - seeds: <none>
[10:58:49.113]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.123] Created future:
[10:58:49.123] ClusterFuture:
[10:58:49.123] Label: ‘future_lapply-1’
[10:58:49.123] Expression:
[10:58:49.123] {
[10:58:49.123]     do.call(function(...) {
[10:58:49.123]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.123]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.123]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.123]             on.exit(options(oopts), add = TRUE)
[10:58:49.123]         }
[10:58:49.123]         {
[10:58:49.123]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.123]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.123]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.123]             })
[10:58:49.123]         }
[10:58:49.123]     }, args = future.call.arguments)
[10:58:49.123] }
[10:58:49.123] Lazy evaluation: FALSE
[10:58:49.123] Asynchronous evaluation: TRUE
[10:58:49.123] Local evaluation: TRUE
[10:58:49.123] Environment: R_GlobalEnv
[10:58:49.123] Capture standard output: TRUE
[10:58:49.123] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.123] Globals: 5 objects totaling 345 bytes (function ‘...future.FUN’ of 139 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.123] Packages: <none>
[10:58:49.123] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.123] Resolved: FALSE
[10:58:49.123] Value: <not collected>
[10:58:49.123] Conditions captured: <none>
[10:58:49.123] Early signaling: FALSE
[10:58:49.123] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.123] Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.134] Chunk #1 of 1 ... DONE
[10:58:49.134] Launching 1 futures (chunks) ... DONE
[10:58:49.134] Resolving 1 futures (chunks) ...
> stopifnot(inherits(res, "error"))
> 
> message("*** future_lapply() - manual globals ... DONE")
*** future_lapply() - manual globals ... DONE
> 
> 
> 
> ## Test adopted from http://stackoverflow.com/questions/42561088/nested-do-call-within-a-foreach-dopar-environment-cant-find-function-passed-w
> 
> message("*** future_lapply() - tricky globals ...")
*** future_lapply() - tricky globals ...
> 
> my_add <- function(a, b) a + b
> 
> call_my_add <- function(a, b) {
+   do.call(my_add, args = list(a = a, b = b))
+ }
> 
> call_my_add_caller <- function(a, b, FUN = call_my_add) {
+   do.call(FUN, args = list(a = a, b = b))
+ }
> 
> main <- function(x = 1:2, caller = call_my_add_caller,
+                  args = list(FUN = call_my_add)) {
+   results <- future_lapply(x, FUN = function(i) {
+     do.call(caller, args = c(list(a = i, b = i + 1L), args))
+   })
+   results
+ }
> 
> x <- list(list(1:2))
> z_length <- lapply(x, FUN = do.call, what = length)
> fun <- function(...) sum(...)
> z_fun <- lapply(x, FUN = do.call, what = fun)
> 
> y0 <- NULL
> for (strategy in supportedStrategies()) {
+   plan(strategy)
+ 
+   y <- main(1:3)
+   if (is.null(y0)) y0 <- y
+   stopifnot(identical(y, y0))
+ 
+   message("- future_lapply(x, FUN = do.call, ...) ...")
+   z <- future_lapply(x, FUN = do.call, what = length)
+   stopifnot(identical(z, z_length))
+   z <- future_lapply(x, FUN = do.call, what = fun)
+   stopifnot(identical(z, z_fun))
+ 
+   message("- future_lapply(x, ...) - passing arguments via '...' ...")
+   ## typeof() == "list"
+   obj <- data.frame(a = 1:2)
+   stopifnot(typeof(obj) == "list")
+   y <- future_lapply(1L, function(a, b) typeof(b), b = obj)
+   stopifnot(identical(y[[1]], typeof(obj)))
+ 
+   ## typeof() == "environment"
+   obj <- new.env()
+   stopifnot(typeof(obj) == "environment")
+   y <- future_lapply(1L, function(a, b) typeof(b), b = obj)
+   stopifnot(identical(y[[1]], typeof(obj)))
+ 
+   ## typeof() == "S4"
+   if (requireNamespace("methods")) {
+     obj <- methods::getClass("MethodDefinition")
+     stopifnot(typeof(obj) == "S4")
+     y <- future_lapply(1L, function(a, b) typeof(b), b = obj)
+     stopifnot(identical(y[[1]], typeof(obj)))
+   }
+ 
+   message("- future_lapply(X, ...) - 'X' containing globals ...")
+   ## From https://github.com/futureverse/future.apply/issues/12
+   a <- 42
+   b <- 21
+   X <- list(
+     function(b) 2 * a,
+     function() b / 2,
+     function() a + b,
+     function() nchar(toTitleCase("hello world"))
+   )
+   z0 <- lapply(X, FUN = function(f) f())
+   str(z0)
+   z1 <- future_lapply(X, FUN = function(f) f())
+   str(z1)
+   stopifnot(identical(z1, z0))
+ 
+   message("- future_lapply(x, ...) - passing '...' as a global ...")
+   ## https://github.com/HenrikBengtsson/future/issues/417
+   fcn0 <- function(...) { lapply(1, FUN = function(x) list(...)) }
+   z0 <- fcn0(a = 1)
+   str(list(z0 = z0))
+   stopifnot(identical(z0, list(list(a = 1))))
+   fcn <- function(...) { future_lapply(1, FUN = function(x) list(...)) }
+   z1 <- fcn(a = 1)
+   str(list(z1 = z1))
+   stopifnot(identical(z1, z0))
+ 
+   ## https://github.com/futureverse/future.apply/issues/47
+   message("- future_lapply(X, ...) - '{ a <- a + 1; a }' ...")
+   a <- 1
+   z0 <- lapply(1, function(ii) {
+     a <- a + 1
+     a
+   })
+   z1 <- future_lapply(1, function(ii) {
+     a <- a + 1
+     a
+   })
+   stopifnot(identical(z1, z0))
+ 
+   ## https://github.com/futureverse/future.apply/issues/47
+   message("- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...")
+   z2 <- tryCatch(future_lapply(1, function(ii) {
+     a
+     a <- a + 1
+   }), error = identity)
+   stopifnot(identical(z2, z0))
+ 
+   ## https://github.com/futureverse/future.apply/issues/85
+   message("- future_lapply(..., future.globals = <list>) ...")
+   a <- 0
+   y <- future_lapply(1, FUN = function(x) a, future.globals = list(a = 42))
+   str(y)
+   stopifnot(y[[1]] == 42)
+ } ## for (strategy ...)
[10:58:49.214] future_lapply() ...
[10:58:49.215] Number of chunks: 1
[10:58:49.215] getGlobalsAndPackagesXApply() ...
[10:58:49.215]  - future.globals: TRUE
[10:58:49.219]  - globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[10:58:49.220]  - needed namespaces: [n=0] 
[10:58:49.220] Finding globals ... DONE
[10:58:49.220]  - use_args: TRUE
[10:58:49.220]  - Getting '...' globals ...
[10:58:49.220]    - '...' content: [n=0] 
[10:58:49.220] List of 1
[10:58:49.220]  $ ...: list()
[10:58:49.220]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.220]  - attr(*, "where")=List of 1
[10:58:49.220]   ..$ ...:<environment: 0x55d305811ad0> 
[10:58:49.220]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.220]  - attr(*, "resolved")= logi TRUE
[10:58:49.220]  - attr(*, "total_size")= num NA
[10:58:49.223]  - Getting '...' globals ... DONE
[10:58:49.223] Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[10:58:49.223] List of 6
[10:58:49.223]  $ ...future.FUN:function (i)  
[10:58:49.223]  $ caller       :function (a, b, FUN = call_my_add)  
[10:58:49.223]  $ args         :List of 1
[10:58:49.223]   ..$ FUN:function (a, b)  
[10:58:49.223]  $ call_my_add  :function (a, b)  
[10:58:49.223]  $ my_add       :function (a, b)  
[10:58:49.223]  $ ...          : list()
[10:58:49.223]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.223]  - attr(*, "where")=List of 6
[10:58:49.223]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.223]   ..$ caller       :<environment: R_EmptyEnv> 
[10:58:49.223]   ..$ args         :<environment: R_EmptyEnv> 
[10:58:49.223]   ..$ call_my_add  :<environment: R_EmptyEnv> 
[10:58:49.223]   ..$ my_add       :<environment: R_EmptyEnv> 
[10:58:49.223]   ..$ ...          :<environment: 0x55d305811ad0> 
[10:58:49.223]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.223]  - attr(*, "resolved")= logi FALSE
[10:58:49.223]  - attr(*, "total_size")= num 6021
[10:58:49.227] Packages to be attached in all futures: [n=0] 
[10:58:49.227] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.228] Number of futures (= number of chunks): 1
[10:58:49.228] Launching 1 futures (chunks) ...
[10:58:49.228] Chunk #1 of 1 ...
[10:58:49.228]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.228]    + additional globals found: [n=0] 
[10:58:49.228]    + additional namespaces needed: [n=0] 
[10:58:49.228]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.228]  - seeds: <none>
[10:58:49.229]  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.234] Created future:
[10:58:49.234] SequentialFuture:
[10:58:49.234] Label: ‘future_lapply-1’
[10:58:49.234] Expression:
[10:58:49.234] {
[10:58:49.234]     do.call(function(...) {
[10:58:49.234]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.234]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.234]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.234]             on.exit(options(oopts), add = TRUE)
[10:58:49.234]         }
[10:58:49.234]         {
[10:58:49.234]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.234]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.234]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.234]             })
[10:58:49.234]         }
[10:58:49.234]     }, args = future.call.arguments)
[10:58:49.234] }
[10:58:49.234] Lazy evaluation: FALSE
[10:58:49.234] Asynchronous evaluation: FALSE
[10:58:49.234] Local evaluation: TRUE
[10:58:49.234] Environment: 0x55d3058115c8
[10:58:49.234] Capture standard output: TRUE
[10:58:49.234] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.234] Globals: 9 objects totaling 4.33 KiB (function ‘...future.FUN’ of 1.81 KiB, function ‘caller’ of 247 bytes, list ‘args’ of 928 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 311 bytes, ...)
[10:58:49.234] Packages: <none>
[10:58:49.234] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.234] Resolved: TRUE
[10:58:49.234] Value: 67 bytes of class ‘list’
[10:58:49.234] Early signaling: FALSE
[10:58:49.234] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.234] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.235] Chunk #1 of 1 ... DONE
[10:58:49.235] Launching 1 futures (chunks) ... DONE
[10:58:49.235] Resolving 1 futures (chunks) ...
[10:58:49.236]  - Number of value chunks collected: 1
[10:58:49.236] Resolving 1 futures (chunks) ... DONE
[10:58:49.236] Reducing values from 1 chunks ...
[10:58:49.236]  - Number of values collected after concatenation: 3
[10:58:49.236]  - Number of values expected: 3
[10:58:49.236] Reducing values from 1 chunks ... DONE
[10:58:49.236] future_lapply() ... DONE
- future_lapply(x, FUN = do.call, ...) ...
[10:58:49.236] future_lapply() ...
[10:58:49.241] Number of chunks: 1
[10:58:49.241] getGlobalsAndPackagesXApply() ...
[10:58:49.241]  - future.globals: TRUE
[10:58:49.243]  - globals found/used: [n=1] ‘FUN’
[10:58:49.243]  - needed namespaces: [n=0] 
[10:58:49.244] Finding globals ... DONE
[10:58:49.244]  - use_args: TRUE
[10:58:49.244]  - Getting '...' globals ...
[10:58:49.244]    - '...' content: [n=1] ‘what’
[10:58:49.244] List of 1
[10:58:49.244]  $ ...:List of 1
[10:58:49.244]   ..$ what:function (x)  
[10:58:49.244]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.244]  - attr(*, "where")=List of 1
[10:58:49.244]   ..$ ...:<environment: 0x55d308f4d608> 
[10:58:49.244]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.244]  - attr(*, "resolved")= logi TRUE
[10:58:49.244]  - attr(*, "total_size")= num NA
[10:58:49.247]  - Getting '...' globals ... DONE
[10:58:49.247] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.247] List of 2
[10:58:49.247]  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[10:58:49.247]  $ ...          :List of 1
[10:58:49.247]   ..$ what:function (x)  
[10:58:49.247]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.247]  - attr(*, "where")=List of 2
[10:58:49.247]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.247]   ..$ ...          :<environment: 0x55d308f4d608> 
[10:58:49.247]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.247]  - attr(*, "resolved")= logi FALSE
[10:58:49.247]  - attr(*, "total_size")= num 6909
[10:58:49.250] Packages to be attached in all futures: [n=0] 
[10:58:49.250] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.250] Number of futures (= number of chunks): 1
[10:58:49.250] Launching 1 futures (chunks) ...
[10:58:49.250] Chunk #1 of 1 ...
[10:58:49.250]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.250]    + additional globals found: [n=0] 
[10:58:49.251]    + additional namespaces needed: [n=0] 
[10:58:49.251]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.251]  - seeds: <none>
[10:58:49.251]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.253] Created future:
[10:58:49.253] SequentialFuture:
[10:58:49.253] Label: ‘future_lapply-1’
[10:58:49.253] Expression:
[10:58:49.253] {
[10:58:49.253]     do.call(function(...) {
[10:58:49.253]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.253]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.253]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.253]             on.exit(options(oopts), add = TRUE)
[10:58:49.253]         }
[10:58:49.253]         {
[10:58:49.253]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.253]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.253]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.253]             })
[10:58:49.253]         }
[10:58:49.253]     }, args = future.call.arguments)
[10:58:49.253] }
[10:58:49.253] Lazy evaluation: FALSE
[10:58:49.253] Asynchronous evaluation: FALSE
[10:58:49.253] Local evaluation: TRUE
[10:58:49.253] Environment: R_GlobalEnv
[10:58:49.253] Capture standard output: TRUE
[10:58:49.253] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.253] Globals: 5 objects totaling 2.13 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.253] Packages: <none>
[10:58:49.253] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.253] Resolved: TRUE
[10:58:49.253] Value: 43 bytes of class ‘list’
[10:58:49.253] Early signaling: FALSE
[10:58:49.253] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.253] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.254] Chunk #1 of 1 ... DONE
[10:58:49.254] Launching 1 futures (chunks) ... DONE
[10:58:49.254] Resolving 1 futures (chunks) ...
[10:58:49.254]  - Number of value chunks collected: 1
[10:58:49.254] Resolving 1 futures (chunks) ... DONE
[10:58:49.255] Reducing values from 1 chunks ...
[10:58:49.255]  - Number of values collected after concatenation: 1
[10:58:49.255]  - Number of values expected: 1
[10:58:49.255] Reducing values from 1 chunks ... DONE
[10:58:49.255] future_lapply() ... DONE
[10:58:49.255] future_lapply() ...
[10:58:49.256] Number of chunks: 1
[10:58:49.256] getGlobalsAndPackagesXApply() ...
[10:58:49.256]  - future.globals: TRUE
[10:58:49.259]  - globals found/used: [n=1] ‘FUN’
[10:58:49.259]  - needed namespaces: [n=0] 
[10:58:49.259] Finding globals ... DONE
[10:58:49.259]  - use_args: TRUE
[10:58:49.259]  - Getting '...' globals ...
[10:58:49.259]    - '...' content: [n=1] ‘what’
[10:58:49.259] List of 1
[10:58:49.259]  $ ...:List of 1
[10:58:49.259]   ..$ what:function (...)  
[10:58:49.259]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.259]  - attr(*, "where")=List of 1
[10:58:49.259]   ..$ ...:<environment: 0x55d306b92738> 
[10:58:49.259]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.259]  - attr(*, "resolved")= logi TRUE
[10:58:49.259]  - attr(*, "total_size")= num NA
[10:58:49.262]  - Getting '...' globals ... DONE
[10:58:49.262] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.262] List of 2
[10:58:49.262]  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[10:58:49.262]  $ ...          :List of 1
[10:58:49.262]   ..$ what:function (...)  
[10:58:49.262]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.262]  - attr(*, "where")=List of 2
[10:58:49.262]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.262]   ..$ ...          :<environment: 0x55d306b92738> 
[10:58:49.262]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.262]  - attr(*, "resolved")= logi FALSE
[10:58:49.262]  - attr(*, "total_size")= num 6977
[10:58:49.265] Packages to be attached in all futures: [n=0] 
[10:58:49.265] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.265] Number of futures (= number of chunks): 1
[10:58:49.265] Launching 1 futures (chunks) ...
[10:58:49.266] Chunk #1 of 1 ...
[10:58:49.266]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.266]    + additional globals found: [n=0] 
[10:58:49.266]    + additional namespaces needed: [n=0] 
[10:58:49.266]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.266]  - seeds: <none>
[10:58:49.266]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.269] Created future:
[10:58:49.269] SequentialFuture:
[10:58:49.269] Label: ‘future_lapply-1’
[10:58:49.269] Expression:
[10:58:49.269] {
[10:58:49.269]     do.call(function(...) {
[10:58:49.269]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.269]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.269]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.269]             on.exit(options(oopts), add = TRUE)
[10:58:49.269]         }
[10:58:49.269]         {
[10:58:49.269]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.269]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.269]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.269]             })
[10:58:49.269]         }
[10:58:49.269]     }, args = future.call.arguments)
[10:58:49.269] }
[10:58:49.269] Lazy evaluation: FALSE
[10:58:49.269] Asynchronous evaluation: FALSE
[10:58:49.269] Local evaluation: TRUE
[10:58:49.269] Environment: R_GlobalEnv
[10:58:49.269] Capture standard output: TRUE
[10:58:49.269] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.269] Globals: 5 objects totaling 2.36 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.269] Packages: <none>
[10:58:49.269] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.269] Resolved: TRUE
[10:58:49.269] Value: 43 bytes of class ‘list’
[10:58:49.269] Early signaling: FALSE
[10:58:49.269] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.269] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.270] Chunk #1 of 1 ... DONE
[10:58:49.270] Launching 1 futures (chunks) ... DONE
[10:58:49.270] Resolving 1 futures (chunks) ...
[10:58:49.271]  - Number of value chunks collected: 1
[10:58:49.271] Resolving 1 futures (chunks) ... DONE
[10:58:49.271] Reducing values from 1 chunks ...
[10:58:49.271]  - Number of values collected after concatenation: 1
[10:58:49.271]  - Number of values expected: 1
[10:58:49.271] Reducing values from 1 chunks ... DONE
[10:58:49.271] future_lapply() ... DONE
- future_lapply(x, ...) - passing arguments via '...' ...
[10:58:49.271] future_lapply() ...
[10:58:49.272] Number of chunks: 1
[10:58:49.272] getGlobalsAndPackagesXApply() ...
[10:58:49.272]  - future.globals: TRUE
[10:58:49.273]  - globals found/used: [n=1] ‘FUN’
[10:58:49.273]  - needed namespaces: [n=0] 
[10:58:49.274] Finding globals ... DONE
[10:58:49.274]  - use_args: TRUE
[10:58:49.274]  - Getting '...' globals ...
[10:58:49.274]    - '...' content: [n=1] ‘b’
[10:58:49.274] List of 1
[10:58:49.274]  $ ...:List of 1
[10:58:49.274]   ..$ b:'data.frame':	2 obs. of  1 variable:
[10:58:49.274]   .. ..$ a: int [1:2] 1 2
[10:58:49.274]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.274]  - attr(*, "where")=List of 1
[10:58:49.274]   ..$ ...:<environment: 0x55d308896050> 
[10:58:49.274]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.274]  - attr(*, "resolved")= logi TRUE
[10:58:49.274]  - attr(*, "total_size")= num NA
[10:58:49.277]  - Getting '...' globals ... DONE
[10:58:49.277] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.277] List of 2
[10:58:49.277]  $ ...future.FUN:function (a, b)  
[10:58:49.277]  $ ...          :List of 1
[10:58:49.277]   ..$ b:'data.frame':	2 obs. of  1 variable:
[10:58:49.277]   .. ..$ a: int [1:2] 1 2
[10:58:49.277]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.277]  - attr(*, "where")=List of 2
[10:58:49.277]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.277]   ..$ ...          :<environment: 0x55d308896050> 
[10:58:49.277]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.277]  - attr(*, "resolved")= logi FALSE
[10:58:49.277]  - attr(*, "total_size")= num 4163
[10:58:49.281] Packages to be attached in all futures: [n=0] 
[10:58:49.281] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.281] Number of futures (= number of chunks): 1
[10:58:49.281] Launching 1 futures (chunks) ...
[10:58:49.281] Chunk #1 of 1 ...
[10:58:49.281]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.281]    + additional globals found: [n=0] 
[10:58:49.281]    + additional namespaces needed: [n=0] 
[10:58:49.281]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.282]  - seeds: <none>
[10:58:49.282]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.284] Created future:
[10:58:49.284] SequentialFuture:
[10:58:49.284] Label: ‘future_lapply-1’
[10:58:49.284] Expression:
[10:58:49.284] {
[10:58:49.284]     do.call(function(...) {
[10:58:49.284]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.284]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.284]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.284]             on.exit(options(oopts), add = TRUE)
[10:58:49.284]         }
[10:58:49.284]         {
[10:58:49.284]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.284]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.284]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.284]             })
[10:58:49.284]         }
[10:58:49.284]     }, args = future.call.arguments)
[10:58:49.284] }
[10:58:49.284] Lazy evaluation: FALSE
[10:58:49.284] Asynchronous evaluation: FALSE
[10:58:49.284] Local evaluation: TRUE
[10:58:49.284] Environment: R_GlobalEnv
[10:58:49.284] Capture standard output: TRUE
[10:58:49.284] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.284] Globals: 5 objects totaling 786 bytes (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 357 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.284] Packages: <none>
[10:58:49.284] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.284] Resolved: TRUE
[10:58:49.284] Value: 51 bytes of class ‘list’
[10:58:49.284] Early signaling: FALSE
[10:58:49.284] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.284] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.286] Chunk #1 of 1 ... DONE
[10:58:49.286] Launching 1 futures (chunks) ... DONE
[10:58:49.286] Resolving 1 futures (chunks) ...
[10:58:49.286]  - Number of value chunks collected: 1
[10:58:49.286] Resolving 1 futures (chunks) ... DONE
[10:58:49.286] Reducing values from 1 chunks ...
[10:58:49.287]  - Number of values collected after concatenation: 1
[10:58:49.287]  - Number of values expected: 1
[10:58:49.287] Reducing values from 1 chunks ... DONE
[10:58:49.287] future_lapply() ... DONE
[10:58:49.287] future_lapply() ...
[10:58:49.287] Number of chunks: 1
[10:58:49.287] getGlobalsAndPackagesXApply() ...
[10:58:49.287]  - future.globals: TRUE
[10:58:49.289]  - globals found/used: [n=1] ‘FUN’
[10:58:49.289]  - needed namespaces: [n=0] 
[10:58:49.289] Finding globals ... DONE
[10:58:49.289]  - use_args: TRUE
[10:58:49.289]  - Getting '...' globals ...
[10:58:49.290]    - '...' content: [n=1] ‘b’
[10:58:49.290] List of 1
[10:58:49.290]  $ ...:List of 1
[10:58:49.290]   ..$ b:<environment: 0x55d307d2df68> 
[10:58:49.290]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.290]  - attr(*, "where")=List of 1
[10:58:49.290]   ..$ ...:<environment: 0x55d307d29cf0> 
[10:58:49.290]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.290]  - attr(*, "resolved")= logi TRUE
[10:58:49.290]  - attr(*, "total_size")= num NA
[10:58:49.292]  - Getting '...' globals ... DONE
[10:58:49.292] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.292] List of 2
[10:58:49.292]  $ ...future.FUN:function (a, b)  
[10:58:49.292]  $ ...          :List of 1
[10:58:49.292]   ..$ b:<environment: 0x55d307d2df68> 
[10:58:49.292]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.292]  - attr(*, "where")=List of 2
[10:58:49.292]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.292]   ..$ ...          :<environment: 0x55d307d29cf0> 
[10:58:49.292]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.292]  - attr(*, "resolved")= logi FALSE
[10:58:49.292]  - attr(*, "total_size")= num 3918
[10:58:49.295] Packages to be attached in all futures: [n=0] 
[10:58:49.295] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.295] Number of futures (= number of chunks): 1
[10:58:49.296] Launching 1 futures (chunks) ...
[10:58:49.296] Chunk #1 of 1 ...
[10:58:49.296]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.296]    + additional globals found: [n=0] 
[10:58:49.296]    + additional namespaces needed: [n=0] 
[10:58:49.296]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.296]  - seeds: <none>
[10:58:49.296]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.298] Created future:
[10:58:49.298] SequentialFuture:
[10:58:49.298] Label: ‘future_lapply-1’
[10:58:49.298] Expression:
[10:58:49.298] {
[10:58:49.298]     do.call(function(...) {
[10:58:49.298]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.298]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.298]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.298]             on.exit(options(oopts), add = TRUE)
[10:58:49.298]         }
[10:58:49.298]         {
[10:58:49.298]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.298]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.298]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.298]             })
[10:58:49.298]         }
[10:58:49.298]     }, args = future.call.arguments)
[10:58:49.298] }
[10:58:49.298] Lazy evaluation: FALSE
[10:58:49.298] Asynchronous evaluation: FALSE
[10:58:49.298] Local evaluation: TRUE
[10:58:49.298] Environment: R_GlobalEnv
[10:58:49.298] Capture standard output: TRUE
[10:58:49.298] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.298] Globals: 5 objects totaling 708 bytes (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.298] Packages: <none>
[10:58:49.298] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.298] Resolved: TRUE
[10:58:49.298] Value: 58 bytes of class ‘list’
[10:58:49.298] Early signaling: FALSE
[10:58:49.298] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.298] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.299] Chunk #1 of 1 ... DONE
[10:58:49.299] Launching 1 futures (chunks) ... DONE
[10:58:49.299] Resolving 1 futures (chunks) ...
[10:58:49.300]  - Number of value chunks collected: 1
[10:58:49.300] Resolving 1 futures (chunks) ... DONE
[10:58:49.300] Reducing values from 1 chunks ...
[10:58:49.300]  - Number of values collected after concatenation: 1
[10:58:49.300]  - Number of values expected: 1
[10:58:49.300] Reducing values from 1 chunks ... DONE
[10:58:49.300] future_lapply() ... DONE
[10:58:49.300] future_lapply() ...
[10:58:49.301] Number of chunks: 1
[10:58:49.301] getGlobalsAndPackagesXApply() ...
[10:58:49.301]  - future.globals: TRUE
[10:58:49.303]  - globals found/used: [n=1] ‘FUN’
[10:58:49.303]  - needed namespaces: [n=0] 
[10:58:49.303] Finding globals ... DONE
[10:58:49.303]  - use_args: TRUE
[10:58:49.303]  - Getting '...' globals ...
[10:58:49.304]    - '...' content: [n=1] ‘b’
[10:58:49.304] List of 1
[10:58:49.304]  $ ...:List of 1
[10:58:49.304]   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[10:58:49.304]   .. .. ..@ slots     :List of 4
[10:58:49.304]   .. .. .. ..$ .Data  : chr "function"
[10:58:49.304]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. ..$ target : chr "signature"
[10:58:49.304]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. ..$ defined: chr "signature"
[10:58:49.304]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. ..$ generic: chr "character"
[10:58:49.304]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. ..@ contains  :List of 3
[10:58:49.304]   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "function"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.304]   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.304]   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr "function"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.304]   .. .. ..@ virtual   : logi FALSE
[10:58:49.304]   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[10:58:49.304]  list()
[10:58:49.304]   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[10:58:49.304]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:49.304]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:49.304]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:49.304]   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[10:58:49.304]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:49.304]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:49.304]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:49.304]   .. .. .. .. ..$ generic: chr(0) 
[10:58:49.304]   .. .. ..@ validity  : NULL
[10:58:49.304]   .. .. ..@ access    : list()
[10:58:49.304]   .. .. ..@ className : chr "MethodDefinition"
[10:58:49.304]   .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. ..@ subclasses:List of 7
[10:58:49.304]   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.304]   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.304]   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.304]   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.304]   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.304]   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.304]   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.304]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.304]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.304]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.304]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.304]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:49.304]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.304]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.304]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.304]   .. .. ..@ versionKey:<externalptr> 
[10:58:49.304]   .. .. ..@ sealed    : logi TRUE
[10:58:49.304]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.304]  - attr(*, "where")=List of 1
[10:58:49.304]   ..$ ...:<environment: 0x55d307036640> 
[10:58:49.304]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.304]  - attr(*, "resolved")= logi TRUE
[10:58:49.304]  - attr(*, "total_size")= num NA
[10:58:49.348]  - Getting '...' globals ... DONE
[10:58:49.349] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.349] List of 2
[10:58:49.349]  $ ...future.FUN:function (a, b)  
[10:58:49.349]  $ ...          :List of 1
[10:58:49.349]   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[10:58:49.349]   .. .. ..@ slots     :List of 4
[10:58:49.349]   .. .. .. ..$ .Data  : chr "function"
[10:58:49.349]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. ..$ target : chr "signature"
[10:58:49.349]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. ..$ defined: chr "signature"
[10:58:49.349]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. ..$ generic: chr "character"
[10:58:49.349]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. ..@ contains  :List of 3
[10:58:49.349]   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "function"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.349]   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.349]   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr "function"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.349]   .. .. ..@ virtual   : logi FALSE
[10:58:49.349]   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[10:58:49.349]  list()
[10:58:49.349]   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[10:58:49.349]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:49.349]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:49.349]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:49.349]   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[10:58:49.349]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:49.349]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:49.349]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:49.349]   .. .. .. .. ..$ generic: chr(0) 
[10:58:49.349]   .. .. ..@ validity  : NULL
[10:58:49.349]   .. .. ..@ access    : list()
[10:58:49.349]   .. .. ..@ className : chr "MethodDefinition"
[10:58:49.349]   .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. ..@ subclasses:List of 7
[10:58:49.349]   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.349]   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.349]   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.349]   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.349]   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.349]   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.349]   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.349]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.349]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.349]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.349]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.349]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:49.349]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.349]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.349]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.349]   .. .. ..@ versionKey:<externalptr> 
[10:58:49.349]   .. .. ..@ sealed    : logi TRUE
[10:58:49.349]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.349]  - attr(*, "where")=List of 2
[10:58:49.349]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.349]   ..$ ...          :<environment: 0x55d307036640> 
[10:58:49.349]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.349]  - attr(*, "resolved")= logi FALSE
[10:58:49.349]  - attr(*, "total_size")= num 97748
[10:58:49.392] Packages to be attached in all futures: [n=0] 
[10:58:49.392] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.393] Number of futures (= number of chunks): 1
[10:58:49.393] Launching 1 futures (chunks) ...
[10:58:49.393] Chunk #1 of 1 ...
[10:58:49.393]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.393]    + additional globals found: [n=0] 
[10:58:49.393]    + additional namespaces needed: [n=0] 
[10:58:49.393]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.393]  - seeds: <none>
[10:58:49.394]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.396] Created future:
[10:58:49.396] SequentialFuture:
[10:58:49.396] Label: ‘future_lapply-1’
[10:58:49.396] Expression:
[10:58:49.396] {
[10:58:49.396]     do.call(function(...) {
[10:58:49.396]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.396]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.396]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.396]             on.exit(options(oopts), add = TRUE)
[10:58:49.396]         }
[10:58:49.396]         {
[10:58:49.396]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.396]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.396]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.396]             })
[10:58:49.396]         }
[10:58:49.396]     }, args = future.call.arguments)
[10:58:49.396] }
[10:58:49.396] Lazy evaluation: FALSE
[10:58:49.396] Asynchronous evaluation: FALSE
[10:58:49.396] Local evaluation: TRUE
[10:58:49.396] Environment: R_GlobalEnv
[10:58:49.396] Capture standard output: TRUE
[10:58:49.396] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.396] Globals: 5 objects totaling 46.83 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 46.42 KiB, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.396] Packages: <none>
[10:58:49.396] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.396] Resolved: TRUE
[10:58:49.396] Value: 49 bytes of class ‘list’
[10:58:49.396] Early signaling: FALSE
[10:58:49.396] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.396] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.397] Chunk #1 of 1 ... DONE
[10:58:49.397] Launching 1 futures (chunks) ... DONE
[10:58:49.397] Resolving 1 futures (chunks) ...
[10:58:49.397]  - Number of value chunks collected: 1
[10:58:49.397] Resolving 1 futures (chunks) ... DONE
[10:58:49.398] Reducing values from 1 chunks ...
[10:58:49.398]  - Number of values collected after concatenation: 1
[10:58:49.398]  - Number of values expected: 1
[10:58:49.398] Reducing values from 1 chunks ... DONE
[10:58:49.398] future_lapply() ... DONE
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[10:58:49.400] future_lapply() ...
[10:58:49.400] Number of chunks: 1
[10:58:49.400] getGlobalsAndPackagesXApply() ...
[10:58:49.400]  - future.globals: TRUE
[10:58:49.401]  - globals found/used: [n=1] ‘FUN’
[10:58:49.402]  - needed namespaces: [n=0] 
[10:58:49.402] Finding globals ... DONE
[10:58:49.402]  - use_args: TRUE
[10:58:49.402]  - Getting '...' globals ...
[10:58:49.402]    - '...' content: [n=0] 
[10:58:49.402] List of 1
[10:58:49.402]  $ ...: list()
[10:58:49.402]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.402]  - attr(*, "where")=List of 1
[10:58:49.402]   ..$ ...:<environment: 0x55d3089fa878> 
[10:58:49.402]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.402]  - attr(*, "resolved")= logi TRUE
[10:58:49.402]  - attr(*, "total_size")= num NA
[10:58:49.404]  - Getting '...' globals ... DONE
[10:58:49.404] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.405] List of 2
[10:58:49.405]  $ ...future.FUN:function (f)  
[10:58:49.405]  $ ...          : list()
[10:58:49.405]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.405]  - attr(*, "where")=List of 2
[10:58:49.405]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.405]   ..$ ...          :<environment: 0x55d3089fa878> 
[10:58:49.405]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.405]  - attr(*, "resolved")= logi FALSE
[10:58:49.405]  - attr(*, "total_size")= num 4837
[10:58:49.407] Packages to be attached in all futures: [n=0] 
[10:58:49.407] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.407] Number of futures (= number of chunks): 1
[10:58:49.407] Launching 1 futures (chunks) ...
[10:58:49.407] Chunk #1 of 1 ...
[10:58:49.408]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.410]    + additional globals found: [n=2] ‘a’, ‘b’
[10:58:49.410]    + additional namespaces needed: [n=1] ‘tools’
[10:58:49.410]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.410]  - seeds: <none>
[10:58:49.411]  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[10:58:49.414] Created future:
[10:58:49.414] SequentialFuture:
[10:58:49.414] Label: ‘future_lapply-1’
[10:58:49.414] Expression:
[10:58:49.414] {
[10:58:49.414]     do.call(function(...) {
[10:58:49.414]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.414]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.414]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.414]             on.exit(options(oopts), add = TRUE)
[10:58:49.414]         }
[10:58:49.414]         {
[10:58:49.414]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.414]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.414]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.414]             })
[10:58:49.414]         }
[10:58:49.414]     }, args = future.call.arguments)
[10:58:49.414] }
[10:58:49.414] Lazy evaluation: FALSE
[10:58:49.414] Asynchronous evaluation: FALSE
[10:58:49.414] Local evaluation: TRUE
[10:58:49.414] Environment: R_GlobalEnv
[10:58:49.414] Capture standard output: TRUE
[10:58:49.414] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.414] Globals: 7 objects totaling 1.84 KiB (function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 1.40 KiB, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes, ...)
[10:58:49.414] Packages: 1 packages (‘tools’)
[10:58:49.414] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.414] Resolved: TRUE
[10:58:49.414] Value: 91 bytes of class ‘list’
[10:58:49.414] Early signaling: FALSE
[10:58:49.414] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.414] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.415] Chunk #1 of 1 ... DONE
[10:58:49.415] Launching 1 futures (chunks) ... DONE
[10:58:49.415] Resolving 1 futures (chunks) ...
[10:58:49.415]  - Number of value chunks collected: 1
[10:58:49.415] Resolving 1 futures (chunks) ... DONE
[10:58:49.415] Reducing values from 1 chunks ...
[10:58:49.415]  - Number of values collected after concatenation: 4
[10:58:49.415]  - Number of values expected: 4
[10:58:49.416] Reducing values from 1 chunks ... DONE
[10:58:49.416] future_lapply() ... DONE
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(x, ...) - passing '...' as a global ...
List of 1
 $ z0:List of 1
  ..$ :List of 1
  .. ..$ a: num 1
[10:58:49.418] future_lapply() ...
[10:58:49.419] Number of chunks: 1
[10:58:49.419] getGlobalsAndPackagesXApply() ...
[10:58:49.419]  - future.globals: TRUE
[10:58:49.421]  - globals found/used: [n=2] ‘FUN’, ‘future.call.arguments’
[10:58:49.421]  - needed namespaces: [n=0] 
[10:58:49.421] Finding globals ... DONE
[10:58:49.421]  - use_args: TRUE
[10:58:49.421]  - Getting '...' globals ...
[10:58:49.421]    - '...' content: [n=0] 
[10:58:49.422] List of 1
[10:58:49.422]  $ ...: list()
[10:58:49.422]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.422]  - attr(*, "where")=List of 1
[10:58:49.422]   ..$ ...:<environment: 0x55d3076d04b8> 
[10:58:49.422]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.422]  - attr(*, "resolved")= logi TRUE
[10:58:49.422]  - attr(*, "total_size")= num NA
[10:58:49.424]  - Getting '...' globals ... DONE
[10:58:49.424] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[10:58:49.424] List of 3
[10:58:49.424]  $ ...future.FUN        :function (x)  
[10:58:49.424]  $ future.call.arguments:List of 1
[10:58:49.424]   ..$ a: num 1
[10:58:49.424]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.424]  $ ...                  : list()
[10:58:49.424]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.424]  - attr(*, "where")=List of 3
[10:58:49.424]   ..$ ...future.FUN        :<environment: R_EmptyEnv> 
[10:58:49.424]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:58:49.424]   ..$ ...                  :<environment: 0x55d3076d04b8> 
[10:58:49.424]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.424]  - attr(*, "resolved")= logi FALSE
[10:58:49.424]  - attr(*, "total_size")= num 3563
[10:58:49.427] Packages to be attached in all futures: [n=0] 
[10:58:49.428] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.428] Number of futures (= number of chunks): 1
[10:58:49.428] Launching 1 futures (chunks) ...
[10:58:49.428] Chunk #1 of 1 ...
[10:58:49.428]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.428]    + additional globals found: [n=0] 
[10:58:49.428]    + additional namespaces needed: [n=0] 
[10:58:49.428]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.428]  - seeds: <none>
[10:58:49.429]  - All globals exported: [n=6] ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.431] Created future:
[10:58:49.431] SequentialFuture:
[10:58:49.431] Label: ‘future_lapply-1’
[10:58:49.431] Expression:
[10:58:49.431] {
[10:58:49.431]     do.call(function(...) {
[10:58:49.431]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.431]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.431]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.431]             on.exit(options(oopts), add = TRUE)
[10:58:49.431]         }
[10:58:49.431]         {
[10:58:49.431]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.431]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.431]                 ...future.FUN(...future.X_jj)
[10:58:49.431]             })
[10:58:49.431]         }
[10:58:49.431]     }, args = future.call.arguments)
[10:58:49.431] }
[10:58:49.431] Lazy evaluation: FALSE
[10:58:49.431] Asynchronous evaluation: FALSE
[10:58:49.431] Local evaluation: TRUE
[10:58:49.431] Environment: 0x55d3076d0138
[10:58:49.431] Capture standard output: TRUE
[10:58:49.431] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.431] Globals: 5 objects totaling 613 bytes (function ‘...future.FUN’ of 361 bytes, DotDotDotList ‘future.call.arguments’ of 151 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.431] Packages: <none>
[10:58:49.431] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.431] Resolved: TRUE
[10:58:49.431] Value: 97 bytes of class ‘list’
[10:58:49.431] Early signaling: FALSE
[10:58:49.431] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.431] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.432] Chunk #1 of 1 ... DONE
[10:58:49.432] Launching 1 futures (chunks) ... DONE
[10:58:49.432] Resolving 1 futures (chunks) ...
[10:58:49.432]  - Number of value chunks collected: 1
[10:58:49.432] Resolving 1 futures (chunks) ... DONE
[10:58:49.432] Reducing values from 1 chunks ...
[10:58:49.433]  - Number of values collected after concatenation: 1
[10:58:49.433]  - Number of values expected: 1
[10:58:49.433] Reducing values from 1 chunks ... DONE
[10:58:49.433] future_lapply() ... DONE
List of 1
 $ z1:List of 1
  ..$ :List of 1
  .. ..$ a: num 1
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[10:58:49.434] future_lapply() ...
[10:58:49.435] Number of chunks: 1
[10:58:49.435] getGlobalsAndPackagesXApply() ...
[10:58:49.435]  - future.globals: TRUE
[10:58:49.437]  - globals found/used: [n=2] ‘FUN’, ‘a’
[10:58:49.437]  - needed namespaces: [n=0] 
[10:58:49.437] Finding globals ... DONE
[10:58:49.437]  - use_args: TRUE
[10:58:49.437]  - Getting '...' globals ...
[10:58:49.437]    - '...' content: [n=0] 
[10:58:49.438] List of 1
[10:58:49.438]  $ ...: list()
[10:58:49.438]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.438]  - attr(*, "where")=List of 1
[10:58:49.438]   ..$ ...:<environment: 0x55d3058f1f90> 
[10:58:49.438]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.438]  - attr(*, "resolved")= logi TRUE
[10:58:49.438]  - attr(*, "total_size")= num NA
[10:58:49.440]  - Getting '...' globals ... DONE
[10:58:49.440] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[10:58:49.440] List of 3
[10:58:49.440]  $ ...future.FUN:function (ii)  
[10:58:49.440]  $ a            : num 1
[10:58:49.440]  $ ...          : list()
[10:58:49.440]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.440]  - attr(*, "where")=List of 3
[10:58:49.440]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.440]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:49.440]   ..$ ...          :<environment: 0x55d3058f1f90> 
[10:58:49.440]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.440]  - attr(*, "resolved")= logi FALSE
[10:58:49.440]  - attr(*, "total_size")= num 3759
[10:58:49.443] Packages to be attached in all futures: [n=0] 
[10:58:49.443] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.443] Number of futures (= number of chunks): 1
[10:58:49.443] Launching 1 futures (chunks) ...
[10:58:49.443] Chunk #1 of 1 ...
[10:58:49.444]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.444]    + additional globals found: [n=0] 
[10:58:49.444]    + additional namespaces needed: [n=0] 
[10:58:49.444]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.444]  - seeds: <none>
[10:58:49.444]  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.446] Created future:
[10:58:49.446] SequentialFuture:
[10:58:49.446] Label: ‘future_lapply-1’
[10:58:49.446] Expression:
[10:58:49.446] {
[10:58:49.446]     do.call(function(...) {
[10:58:49.446]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.446]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.446]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.446]             on.exit(options(oopts), add = TRUE)
[10:58:49.446]         }
[10:58:49.446]         {
[10:58:49.446]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.446]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.446]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.446]             })
[10:58:49.446]         }
[10:58:49.446]     }, args = future.call.arguments)
[10:58:49.446] }
[10:58:49.446] Lazy evaluation: FALSE
[10:58:49.446] Asynchronous evaluation: FALSE
[10:58:49.446] Local evaluation: TRUE
[10:58:49.446] Environment: R_GlobalEnv
[10:58:49.446] Capture standard output: TRUE
[10:58:49.446] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.446] Globals: 6 objects totaling 748 bytes (function ‘...future.FUN’ of 511 bytes, numeric ‘a’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:49.446] Packages: <none>
[10:58:49.446] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.446] Resolved: TRUE
[10:58:49.446] Value: 47 bytes of class ‘list’
[10:58:49.446] Early signaling: FALSE
[10:58:49.446] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.446] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.447] Chunk #1 of 1 ... DONE
[10:58:49.447] Launching 1 futures (chunks) ... DONE
[10:58:49.447] Resolving 1 futures (chunks) ...
[10:58:49.448]  - Number of value chunks collected: 1
[10:58:49.448] Resolving 1 futures (chunks) ... DONE
[10:58:49.448] Reducing values from 1 chunks ...
[10:58:49.448]  - Number of values collected after concatenation: 1
[10:58:49.448]  - Number of values expected: 1
[10:58:49.448] Reducing values from 1 chunks ... DONE
[10:58:49.448] future_lapply() ... DONE
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[10:58:49.448] future_lapply() ...
[10:58:49.449] Number of chunks: 1
[10:58:49.449] getGlobalsAndPackagesXApply() ...
[10:58:49.449]  - future.globals: TRUE
[10:58:49.451]  - globals found/used: [n=2] ‘FUN’, ‘a’
[10:58:49.451]  - needed namespaces: [n=0] 
[10:58:49.451] Finding globals ... DONE
[10:58:49.451]  - use_args: TRUE
[10:58:49.451]  - Getting '...' globals ...
[10:58:49.452]    - '...' content: [n=0] 
[10:58:49.452] List of 1
[10:58:49.452]  $ ...: list()
[10:58:49.452]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.452]  - attr(*, "where")=List of 1
[10:58:49.452]   ..$ ...:<environment: 0x55d308b37680> 
[10:58:49.452]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.452]  - attr(*, "resolved")= logi TRUE
[10:58:49.452]  - attr(*, "total_size")= num NA
[10:58:49.454]  - Getting '...' globals ... DONE
[10:58:49.454] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[10:58:49.454] List of 3
[10:58:49.454]  $ ...future.FUN:function (ii)  
[10:58:49.454]  $ a            : num 1
[10:58:49.454]  $ ...          : list()
[10:58:49.454]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.454]  - attr(*, "where")=List of 3
[10:58:49.454]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.454]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:49.454]   ..$ ...          :<environment: 0x55d308b37680> 
[10:58:49.454]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.454]  - attr(*, "resolved")= logi FALSE
[10:58:49.454]  - attr(*, "total_size")= num 3775
[10:58:49.459] Packages to be attached in all futures: [n=0] 
[10:58:49.459] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.459] Number of futures (= number of chunks): 1
[10:58:49.459] Launching 1 futures (chunks) ...
[10:58:49.459] Chunk #1 of 1 ...
[10:58:49.459]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.459]    + additional globals found: [n=0] 
[10:58:49.460]    + additional namespaces needed: [n=0] 
[10:58:49.460]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.460]  - seeds: <none>
[10:58:49.460]  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.462] Created future:
[10:58:49.462] SequentialFuture:
[10:58:49.462] Label: ‘future_lapply-1’
[10:58:49.462] Expression:
[10:58:49.462] {
[10:58:49.462]     do.call(function(...) {
[10:58:49.462]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.462]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.462]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.462]             on.exit(options(oopts), add = TRUE)
[10:58:49.462]         }
[10:58:49.462]         {
[10:58:49.462]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.462]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.462]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.462]             })
[10:58:49.462]         }
[10:58:49.462]     }, args = future.call.arguments)
[10:58:49.462] }
[10:58:49.462] Lazy evaluation: FALSE
[10:58:49.462] Asynchronous evaluation: FALSE
[10:58:49.462] Local evaluation: TRUE
[10:58:49.462] Environment: R_GlobalEnv
[10:58:49.462] Capture standard output: TRUE
[10:58:49.462] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.462] Globals: 6 objects totaling 756 bytes (function ‘...future.FUN’ of 519 bytes, numeric ‘a’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:49.462] Packages: <none>
[10:58:49.462] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.462] Resolved: TRUE
[10:58:49.462] Value: 47 bytes of class ‘list’
[10:58:49.462] Early signaling: FALSE
[10:58:49.462] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.462] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.463] Chunk #1 of 1 ... DONE
[10:58:49.463] Launching 1 futures (chunks) ... DONE
[10:58:49.463] Resolving 1 futures (chunks) ...
[10:58:49.463]  - Number of value chunks collected: 1
[10:58:49.463] Resolving 1 futures (chunks) ... DONE
[10:58:49.464] Reducing values from 1 chunks ...
[10:58:49.464]  - Number of values collected after concatenation: 1
[10:58:49.464]  - Number of values expected: 1
[10:58:49.464] Reducing values from 1 chunks ... DONE
[10:58:49.464] future_lapply() ... DONE
- future_lapply(..., future.globals = <list>) ...
[10:58:49.464] future_lapply() ...
[10:58:49.464] Number of chunks: 1
[10:58:49.464] getGlobalsAndPackagesXApply() ...
[10:58:49.465]  - future.globals: <name-value list> with names ‘42’
[10:58:49.465]  - use_args: TRUE
[10:58:49.465]  - Getting '...' globals ...
[10:58:49.465]    - '...' content: [n=0] 
[10:58:49.465] List of 1
[10:58:49.465]  $ ...: list()
[10:58:49.465]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.465]  - attr(*, "where")=List of 1
[10:58:49.465]   ..$ ...:<environment: 0x55d3076dc000> 
[10:58:49.465]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.465]  - attr(*, "resolved")= logi TRUE
[10:58:49.465]  - attr(*, "total_size")= num NA
[10:58:49.467]  - Getting '...' globals ... DONE
[10:58:49.467] Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[10:58:49.468] List of 3
[10:58:49.468]  $ a            : num 42
[10:58:49.468]  $ ...future.FUN:function (x)  
[10:58:49.468]  $ ...          : list()
[10:58:49.468]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.468]  - attr(*, "where")=List of 3
[10:58:49.468]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:49.468]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:58:49.468]   ..$ ...          :<environment: 0x55d3076dc000> 
[10:58:49.468]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.468]  - attr(*, "resolved")= logi FALSE
[10:58:49.468]  - attr(*, "total_size")= num NA
[10:58:49.470] Packages to be attached in all futures: [n=0] 
[10:58:49.471] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.471] Number of futures (= number of chunks): 1
[10:58:49.471] Launching 1 futures (chunks) ...
[10:58:49.471] Chunk #1 of 1 ...
[10:58:49.471]  - seeds: <none>
[10:58:49.471]  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.474] Created future:
[10:58:49.474] SequentialFuture:
[10:58:49.474] Label: ‘future_lapply-1’
[10:58:49.474] Expression:
[10:58:49.474] {
[10:58:49.474]     do.call(function(...) {
[10:58:49.474]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.474]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.474]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.474]             on.exit(options(oopts), add = TRUE)
[10:58:49.474]         }
[10:58:49.474]         {
[10:58:49.474]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.474]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.474]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.474]             })
[10:58:49.474]         }
[10:58:49.474]     }, args = future.call.arguments)
[10:58:49.474] }
[10:58:49.474] Lazy evaluation: FALSE
[10:58:49.474] Asynchronous evaluation: FALSE
[10:58:49.474] Local evaluation: TRUE
[10:58:49.474] Environment: R_GlobalEnv
[10:58:49.474] Capture standard output: TRUE
[10:58:49.474] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.474] Globals: 6 objects totaling 535 bytes (numeric ‘a’ of 39 bytes, function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:49.474] Packages: <none>
[10:58:49.474] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.474] Resolved: TRUE
[10:58:49.474] Value: 47 bytes of class ‘list’
[10:58:49.474] Early signaling: FALSE
[10:58:49.474] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.474] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:58:49.474] Chunk #1 of 1 ... DONE
[10:58:49.475] Launching 1 futures (chunks) ... DONE
[10:58:49.475] Resolving 1 futures (chunks) ...
[10:58:49.475]  - Number of value chunks collected: 1
[10:58:49.475] Resolving 1 futures (chunks) ... DONE
[10:58:49.475] Reducing values from 1 chunks ...
[10:58:49.475]  - Number of values collected after concatenation: 1
[10:58:49.475]  - Number of values expected: 1
[10:58:49.475] Reducing values from 1 chunks ... DONE
[10:58:49.475] future_lapply() ... DONE
List of 1
 $ : num 42
[10:58:49.480] future_lapply() ...
[10:58:49.483] Number of chunks: 2
[10:58:49.483] getGlobalsAndPackagesXApply() ...
[10:58:49.484]  - future.globals: TRUE
[10:58:49.488]  - globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[10:58:49.488]  - needed namespaces: [n=0] 
[10:58:49.488] Finding globals ... DONE
[10:58:49.488]  - use_args: TRUE
[10:58:49.488]  - Getting '...' globals ...
[10:58:49.488]    - '...' content: [n=0] 
[10:58:49.489] List of 1
[10:58:49.489]  $ ...: list()
[10:58:49.489]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.489]  - attr(*, "where")=List of 1
[10:58:49.489]   ..$ ...:<environment: 0x55d305280f00> 
[10:58:49.489]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.489]  - attr(*, "resolved")= logi TRUE
[10:58:49.489]  - attr(*, "total_size")= num NA
[10:58:49.491]  - Getting '...' globals ... DONE
[10:58:49.491] Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[10:58:49.491] List of 6
[10:58:49.491]  $ ...future.FUN:function (i)  
[10:58:49.491]  $ caller       :function (a, b, FUN = call_my_add)  
[10:58:49.491]  $ args         :List of 1
[10:58:49.491]   ..$ FUN:function (a, b)  
[10:58:49.491]  $ call_my_add  :function (a, b)  
[10:58:49.491]  $ my_add       :function (a, b)  
[10:58:49.491]  $ ...          : list()
[10:58:49.491]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.491]  - attr(*, "where")=List of 6
[10:58:49.491]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.491]   ..$ caller       :<environment: R_EmptyEnv> 
[10:58:49.491]   ..$ args         :<environment: R_EmptyEnv> 
[10:58:49.491]   ..$ call_my_add  :<environment: R_EmptyEnv> 
[10:58:49.491]   ..$ my_add       :<environment: R_EmptyEnv> 
[10:58:49.491]   ..$ ...          :<environment: 0x55d305280f00> 
[10:58:49.491]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.491]  - attr(*, "resolved")= logi FALSE
[10:58:49.491]  - attr(*, "total_size")= num 11089
[10:58:49.495] Packages to be attached in all futures: [n=0] 
[10:58:49.495] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.496] Number of futures (= number of chunks): 2
[10:58:49.496] Launching 2 futures (chunks) ...
[10:58:49.496] Chunk #1 of 2 ...
[10:58:49.496]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.496]    + additional globals found: [n=0] 
[10:58:49.496]    + additional namespaces needed: [n=0] 
[10:58:49.496]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.496]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:49.496]  - seeds: <none>
[10:58:49.497]  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.503] Created future:
[10:58:49.504] MulticoreFuture:
[10:58:49.504] Label: ‘future_lapply-1’
[10:58:49.504] Expression:
[10:58:49.504] {
[10:58:49.504]     do.call(function(...) {
[10:58:49.504]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.504]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.504]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.504]             on.exit(options(oopts), add = TRUE)
[10:58:49.504]         }
[10:58:49.504]         {
[10:58:49.504]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.504]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.504]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.504]             })
[10:58:49.504]         }
[10:58:49.504]     }, args = future.call.arguments)
[10:58:49.504] }
[10:58:49.504] Lazy evaluation: FALSE
[10:58:49.504] Asynchronous evaluation: TRUE
[10:58:49.504] Local evaluation: TRUE
[10:58:49.504] Environment: 0x55d30593d018
[10:58:49.504] Capture standard output: TRUE
[10:58:49.504] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.504] Globals: 9 objects totaling 5.17 KiB (function ‘...future.FUN’ of 2.67 KiB, function ‘caller’ of 247 bytes, list ‘args’ of 928 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 311 bytes, ...)
[10:58:49.504] Packages: <none>
[10:58:49.504] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.504] Resolved: TRUE
[10:58:49.504] Value: <not collected>
[10:58:49.504] Conditions captured: <none>
[10:58:49.504] Early signaling: FALSE
[10:58:49.504] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.504] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.510] Chunk #1 of 2 ... DONE
[10:58:49.510] Chunk #2 of 2 ...
[10:58:49.510]  - Finding globals in 'X' for chunk #2 ...
[10:58:49.511]    + additional globals found: [n=0] 
[10:58:49.511]    + additional namespaces needed: [n=0] 
[10:58:49.517]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:49.517]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:49.517]  - seeds: <none>
[10:58:49.517]  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.525] Created future:
[10:58:49.526] MulticoreFuture:
[10:58:49.526] Label: ‘future_lapply-2’
[10:58:49.526] Expression:
[10:58:49.526] {
[10:58:49.526]     do.call(function(...) {
[10:58:49.526]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.526]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.526]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.526]             on.exit(options(oopts), add = TRUE)
[10:58:49.526]         }
[10:58:49.526]         {
[10:58:49.526]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.526]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.526]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.526]             })
[10:58:49.526]         }
[10:58:49.526]     }, args = future.call.arguments)
[10:58:49.526] }
[10:58:49.526] Lazy evaluation: FALSE
[10:58:49.526] Asynchronous evaluation: TRUE
[10:58:49.526] Local evaluation: TRUE
[10:58:49.526] Environment: 0x55d30593d018
[10:58:49.526] Capture standard output: TRUE
[10:58:49.526] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.526] Globals: 9 objects totaling 5.18 KiB (function ‘...future.FUN’ of 2.67 KiB, function ‘caller’ of 247 bytes, list ‘args’ of 928 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 311 bytes, ...)
[10:58:49.526] Packages: <none>
[10:58:49.526] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.526] Resolved: TRUE
[10:58:49.526] Value: <not collected>
[10:58:49.526] Conditions captured: <none>
[10:58:49.526] Early signaling: FALSE
[10:58:49.526] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.526] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.532] Chunk #2 of 2 ... DONE
[10:58:49.532] Launching 2 futures (chunks) ... DONE
[10:58:49.532] Resolving 2 futures (chunks) ...
[10:58:49.536]  - Number of value chunks collected: 2
[10:58:49.537] Resolving 2 futures (chunks) ... DONE
[10:58:49.537] Reducing values from 2 chunks ...
[10:58:49.537]  - Number of values collected after concatenation: 3
[10:58:49.537]  - Number of values expected: 3
[10:58:49.537] Reducing values from 2 chunks ... DONE
[10:58:49.537] future_lapply() ... DONE
- future_lapply(x, FUN = do.call, ...) ...
[10:58:49.538] future_lapply() ...
[10:58:49.542] Number of chunks: 1
[10:58:49.542] getGlobalsAndPackagesXApply() ...
[10:58:49.542]  - future.globals: TRUE
[10:58:49.545]  - globals found/used: [n=1] ‘FUN’
[10:58:49.545]  - needed namespaces: [n=0] 
[10:58:49.545] Finding globals ... DONE
[10:58:49.546]  - use_args: TRUE
[10:58:49.546]  - Getting '...' globals ...
[10:58:49.546]    - '...' content: [n=1] ‘what’
[10:58:49.546] List of 1
[10:58:49.546]  $ ...:List of 1
[10:58:49.546]   ..$ what:function (x)  
[10:58:49.546]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.546]  - attr(*, "where")=List of 1
[10:58:49.546]   ..$ ...:<environment: 0x55d307721d58> 
[10:58:49.546]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.546]  - attr(*, "resolved")= logi TRUE
[10:58:49.546]  - attr(*, "total_size")= num NA
[10:58:49.550]  - Getting '...' globals ... DONE
[10:58:49.550] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.550] List of 2
[10:58:49.550]  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[10:58:49.550]  $ ...          :List of 1
[10:58:49.550]   ..$ what:function (x)  
[10:58:49.550]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.550]  - attr(*, "where")=List of 2
[10:58:49.550]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.550]   ..$ ...          :<environment: 0x55d307721d58> 
[10:58:49.550]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.550]  - attr(*, "resolved")= logi FALSE
[10:58:49.550]  - attr(*, "total_size")= num 6909
[10:58:49.553] Packages to be attached in all futures: [n=0] 
[10:58:49.554] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.554] Number of futures (= number of chunks): 1
[10:58:49.554] Launching 1 futures (chunks) ...
[10:58:49.554] Chunk #1 of 1 ...
[10:58:49.554]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.555]    + additional globals found: [n=0] 
[10:58:49.555]    + additional namespaces needed: [n=0] 
[10:58:49.555]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.555]  - seeds: <none>
[10:58:49.555]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.560] Created future:
[10:58:49.561] MulticoreFuture:
[10:58:49.561] Label: ‘future_lapply-1’
[10:58:49.561] Expression:
[10:58:49.561] {
[10:58:49.561]     do.call(function(...) {
[10:58:49.561]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.561]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.561]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.561]             on.exit(options(oopts), add = TRUE)
[10:58:49.561]         }
[10:58:49.561]         {
[10:58:49.561]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.561]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.561]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.561]             })
[10:58:49.561]         }
[10:58:49.561]     }, args = future.call.arguments)
[10:58:49.561] }
[10:58:49.561] Lazy evaluation: FALSE
[10:58:49.561] Asynchronous evaluation: TRUE
[10:58:49.561] Local evaluation: TRUE
[10:58:49.561] Environment: R_GlobalEnv
[10:58:49.561] Capture standard output: TRUE
[10:58:49.561] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.561] Globals: 5 objects totaling 2.13 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.561] Packages: <none>
[10:58:49.561] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.561] Resolved: TRUE
[10:58:49.561] Value: <not collected>
[10:58:49.561] Conditions captured: <none>
[10:58:49.561] Early signaling: FALSE
[10:58:49.561] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.561] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.567] Chunk #1 of 1 ... DONE
[10:58:49.567] Launching 1 futures (chunks) ... DONE
[10:58:49.567] Resolving 1 futures (chunks) ...
[10:58:49.568]  - Number of value chunks collected: 1
[10:58:49.569] Resolving 1 futures (chunks) ... DONE
[10:58:49.569] Reducing values from 1 chunks ...
[10:58:49.569]  - Number of values collected after concatenation: 1
[10:58:49.569]  - Number of values expected: 1
[10:58:49.569] Reducing values from 1 chunks ... DONE
[10:58:49.569] future_lapply() ... DONE
[10:58:49.569] future_lapply() ...
[10:58:49.573] Number of chunks: 1
[10:58:49.573] getGlobalsAndPackagesXApply() ...
[10:58:49.573]  - future.globals: TRUE
[10:58:49.576]  - globals found/used: [n=1] ‘FUN’
[10:58:49.577]  - needed namespaces: [n=0] 
[10:58:49.577] Finding globals ... DONE
[10:58:49.577]  - use_args: TRUE
[10:58:49.577]  - Getting '...' globals ...
[10:58:49.577]    - '...' content: [n=1] ‘what’
[10:58:49.577] List of 1
[10:58:49.577]  $ ...:List of 1
[10:58:49.577]   ..$ what:function (...)  
[10:58:49.577]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.577]  - attr(*, "where")=List of 1
[10:58:49.577]   ..$ ...:<environment: 0x55d305453c70> 
[10:58:49.577]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.577]  - attr(*, "resolved")= logi TRUE
[10:58:49.577]  - attr(*, "total_size")= num NA
[10:58:49.581]  - Getting '...' globals ... DONE
[10:58:49.581] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.581] List of 2
[10:58:49.581]  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[10:58:49.581]  $ ...          :List of 1
[10:58:49.581]   ..$ what:function (...)  
[10:58:49.581]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.581]  - attr(*, "where")=List of 2
[10:58:49.581]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.581]   ..$ ...          :<environment: 0x55d305453c70> 
[10:58:49.581]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.581]  - attr(*, "resolved")= logi FALSE
[10:58:49.581]  - attr(*, "total_size")= num 7345
[10:58:49.584] Packages to be attached in all futures: [n=0] 
[10:58:49.584] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.585] Number of futures (= number of chunks): 1
[10:58:49.585] Launching 1 futures (chunks) ...
[10:58:49.585] Chunk #1 of 1 ...
[10:58:49.585]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.585]    + additional globals found: [n=0] 
[10:58:49.586]    + additional namespaces needed: [n=0] 
[10:58:49.586]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.586]  - seeds: <none>
[10:58:49.586]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.591] Created future:
[10:58:49.591] MulticoreFuture:
[10:58:49.591] Label: ‘future_lapply-1’
[10:58:49.591] Expression:
[10:58:49.591] {
[10:58:49.591]     do.call(function(...) {
[10:58:49.591]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.591]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.591]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.591]             on.exit(options(oopts), add = TRUE)
[10:58:49.591]         }
[10:58:49.591]         {
[10:58:49.591]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.591]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.591]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.591]             })
[10:58:49.591]         }
[10:58:49.591]     }, args = future.call.arguments)
[10:58:49.591] }
[10:58:49.591] Lazy evaluation: FALSE
[10:58:49.591] Asynchronous evaluation: TRUE
[10:58:49.591] Local evaluation: TRUE
[10:58:49.591] Environment: R_GlobalEnv
[10:58:49.591] Capture standard output: TRUE
[10:58:49.591] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.591] Globals: 5 objects totaling 2.36 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.591] Packages: <none>
[10:58:49.591] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.591] Resolved: TRUE
[10:58:49.591] Value: <not collected>
[10:58:49.591] Conditions captured: <none>
[10:58:49.591] Early signaling: FALSE
[10:58:49.591] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.591] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.597] Chunk #1 of 1 ... DONE
[10:58:49.597] Launching 1 futures (chunks) ... DONE
[10:58:49.597] Resolving 1 futures (chunks) ...
[10:58:49.598]  - Number of value chunks collected: 1
[10:58:49.599] Resolving 1 futures (chunks) ... DONE
[10:58:49.599] Reducing values from 1 chunks ...
[10:58:49.599]  - Number of values collected after concatenation: 1
[10:58:49.599]  - Number of values expected: 1
[10:58:49.599] Reducing values from 1 chunks ... DONE
[10:58:49.599] future_lapply() ... DONE
- future_lapply(x, ...) - passing arguments via '...' ...
[10:58:49.600] future_lapply() ...
[10:58:49.602] Number of chunks: 1
[10:58:49.602] getGlobalsAndPackagesXApply() ...
[10:58:49.603]  - future.globals: TRUE
[10:58:49.604]  - globals found/used: [n=1] ‘FUN’
[10:58:49.605]  - needed namespaces: [n=0] 
[10:58:49.605] Finding globals ... DONE
[10:58:49.607]  - use_args: TRUE
[10:58:49.607]  - Getting '...' globals ...
[10:58:49.607]    - '...' content: [n=1] ‘b’
[10:58:49.608] List of 1
[10:58:49.608]  $ ...:List of 1
[10:58:49.608]   ..$ b:'data.frame':	2 obs. of  1 variable:
[10:58:49.608]   .. ..$ a: int [1:2] 1 2
[10:58:49.608]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.608]  - attr(*, "where")=List of 1
[10:58:49.608]   ..$ ...:<environment: 0x55d308d532d8> 
[10:58:49.608]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.608]  - attr(*, "resolved")= logi TRUE
[10:58:49.608]  - attr(*, "total_size")= num NA
[10:58:49.611]  - Getting '...' globals ... DONE
[10:58:49.611] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.612] List of 2
[10:58:49.612]  $ ...future.FUN:function (a, b)  
[10:58:49.612]  $ ...          :List of 1
[10:58:49.612]   ..$ b:'data.frame':	2 obs. of  1 variable:
[10:58:49.612]   .. ..$ a: int [1:2] 1 2
[10:58:49.612]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.612]  - attr(*, "where")=List of 2
[10:58:49.612]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.612]   ..$ ...          :<environment: 0x55d308d532d8> 
[10:58:49.612]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.612]  - attr(*, "resolved")= logi FALSE
[10:58:49.612]  - attr(*, "total_size")= num 4163
[10:58:49.616] Packages to be attached in all futures: [n=0] 
[10:58:49.616] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.616] Number of futures (= number of chunks): 1
[10:58:49.616] Launching 1 futures (chunks) ...
[10:58:49.616] Chunk #1 of 1 ...
[10:58:49.616]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.617]    + additional globals found: [n=0] 
[10:58:49.617]    + additional namespaces needed: [n=0] 
[10:58:49.617]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.617]  - seeds: <none>
[10:58:49.617]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.622] Created future:
[10:58:49.622] MulticoreFuture:
[10:58:49.622] Label: ‘future_lapply-1’
[10:58:49.622] Expression:
[10:58:49.622] {
[10:58:49.622]     do.call(function(...) {
[10:58:49.622]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.622]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.622]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.622]             on.exit(options(oopts), add = TRUE)
[10:58:49.622]         }
[10:58:49.622]         {
[10:58:49.622]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.622]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.622]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.622]             })
[10:58:49.622]         }
[10:58:49.622]     }, args = future.call.arguments)
[10:58:49.622] }
[10:58:49.622] Lazy evaluation: FALSE
[10:58:49.622] Asynchronous evaluation: TRUE
[10:58:49.622] Local evaluation: TRUE
[10:58:49.622] Environment: R_GlobalEnv
[10:58:49.622] Capture standard output: TRUE
[10:58:49.622] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.622] Globals: 5 objects totaling 786 bytes (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 357 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.622] Packages: <none>
[10:58:49.622] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.622] Resolved: TRUE
[10:58:49.622] Value: <not collected>
[10:58:49.622] Conditions captured: <none>
[10:58:49.622] Early signaling: FALSE
[10:58:49.622] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.622] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.628] Chunk #1 of 1 ... DONE
[10:58:49.628] Launching 1 futures (chunks) ... DONE
[10:58:49.628] Resolving 1 futures (chunks) ...
[10:58:49.630]  - Number of value chunks collected: 1
[10:58:49.630] Resolving 1 futures (chunks) ... DONE
[10:58:49.630] Reducing values from 1 chunks ...
[10:58:49.630]  - Number of values collected after concatenation: 1
[10:58:49.630]  - Number of values expected: 1
[10:58:49.631] Reducing values from 1 chunks ... DONE
[10:58:49.631] future_lapply() ... DONE
[10:58:49.631] future_lapply() ...
[10:58:49.633] Number of chunks: 1
[10:58:49.633] getGlobalsAndPackagesXApply() ...
[10:58:49.634]  - future.globals: TRUE
[10:58:49.636]  - globals found/used: [n=1] ‘FUN’
[10:58:49.636]  - needed namespaces: [n=0] 
[10:58:49.636] Finding globals ... DONE
[10:58:49.636]  - use_args: TRUE
[10:58:49.636]  - Getting '...' globals ...
[10:58:49.636]    - '...' content: [n=1] ‘b’
[10:58:49.637] List of 1
[10:58:49.637]  $ ...:List of 1
[10:58:49.637]   ..$ b:<environment: 0x55d3071a48b0> 
[10:58:49.637]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.637]  - attr(*, "where")=List of 1
[10:58:49.637]   ..$ ...:<environment: 0x55d3071a5560> 
[10:58:49.637]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.637]  - attr(*, "resolved")= logi TRUE
[10:58:49.637]  - attr(*, "total_size")= num NA
[10:58:49.640]  - Getting '...' globals ... DONE
[10:58:49.640] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.640] List of 2
[10:58:49.640]  $ ...future.FUN:function (a, b)  
[10:58:49.640]  $ ...          :List of 1
[10:58:49.640]   ..$ b:<environment: 0x55d3071a48b0> 
[10:58:49.640]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.640]  - attr(*, "where")=List of 2
[10:58:49.640]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.640]   ..$ ...          :<environment: 0x55d3071a5560> 
[10:58:49.640]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.640]  - attr(*, "resolved")= logi FALSE
[10:58:49.640]  - attr(*, "total_size")= num 3918
[10:58:49.644] Packages to be attached in all futures: [n=0] 
[10:58:49.644] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.644] Number of futures (= number of chunks): 1
[10:58:49.645] Launching 1 futures (chunks) ...
[10:58:49.645] Chunk #1 of 1 ...
[10:58:49.645]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.645]    + additional globals found: [n=0] 
[10:58:49.645]    + additional namespaces needed: [n=0] 
[10:58:49.645]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.645]  - seeds: <none>
[10:58:49.646]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.651] Created future:
[10:58:49.651] MulticoreFuture:
[10:58:49.651] Label: ‘future_lapply-1’
[10:58:49.651] Expression:
[10:58:49.651] {
[10:58:49.651]     do.call(function(...) {
[10:58:49.651]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.651]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.651]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.651]             on.exit(options(oopts), add = TRUE)
[10:58:49.651]         }
[10:58:49.651]         {
[10:58:49.651]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.651]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.651]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.651]             })
[10:58:49.651]         }
[10:58:49.651]     }, args = future.call.arguments)
[10:58:49.651] }
[10:58:49.651] Lazy evaluation: FALSE
[10:58:49.651] Asynchronous evaluation: TRUE
[10:58:49.651] Local evaluation: TRUE
[10:58:49.651] Environment: R_GlobalEnv
[10:58:49.651] Capture standard output: TRUE
[10:58:49.651] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.651] Globals: 5 objects totaling 708 bytes (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.651] Packages: <none>
[10:58:49.651] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.651] Resolved: TRUE
[10:58:49.651] Value: <not collected>
[10:58:49.651] Conditions captured: <none>
[10:58:49.651] Early signaling: FALSE
[10:58:49.651] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.651] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.657] Chunk #1 of 1 ... DONE
[10:58:49.657] Launching 1 futures (chunks) ... DONE
[10:58:49.657] Resolving 1 futures (chunks) ...
[10:58:49.659]  - Number of value chunks collected: 1
[10:58:49.659] Resolving 1 futures (chunks) ... DONE
[10:58:49.659] Reducing values from 1 chunks ...
[10:58:49.659]  - Number of values collected after concatenation: 1
[10:58:49.659]  - Number of values expected: 1
[10:58:49.659] Reducing values from 1 chunks ... DONE
[10:58:49.659] future_lapply() ... DONE
[10:58:49.660] future_lapply() ...
[10:58:49.662] Number of chunks: 1
[10:58:49.662] getGlobalsAndPackagesXApply() ...
[10:58:49.662]  - future.globals: TRUE
[10:58:49.665]  - globals found/used: [n=1] ‘FUN’
[10:58:49.665]  - needed namespaces: [n=0] 
[10:58:49.665] Finding globals ... DONE
[10:58:49.665]  - use_args: TRUE
[10:58:49.665]  - Getting '...' globals ...
[10:58:49.666]    - '...' content: [n=1] ‘b’
[10:58:49.666] List of 1
[10:58:49.666]  $ ...:List of 1
[10:58:49.666]   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[10:58:49.666]   .. .. ..@ slots     :List of 4
[10:58:49.666]   .. .. .. ..$ .Data  : chr "function"
[10:58:49.666]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. ..$ target : chr "signature"
[10:58:49.666]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. ..$ defined: chr "signature"
[10:58:49.666]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. ..$ generic: chr "character"
[10:58:49.666]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. ..@ contains  :List of 3
[10:58:49.666]   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "function"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.666]   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.666]   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr "function"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.666]   .. .. ..@ virtual   : logi FALSE
[10:58:49.666]   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[10:58:49.666]  list()
[10:58:49.666]   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[10:58:49.666]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:49.666]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:49.666]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:49.666]   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[10:58:49.666]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:49.666]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:49.666]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:49.666]   .. .. .. .. ..$ generic: chr(0) 
[10:58:49.666]   .. .. ..@ validity  : NULL
[10:58:49.666]   .. .. ..@ access    : list()
[10:58:49.666]   .. .. ..@ className : chr "MethodDefinition"
[10:58:49.666]   .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. ..@ subclasses:List of 7
[10:58:49.666]   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.666]   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.666]   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.666]   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.666]   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.666]   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.666]   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.666]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.666]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.666]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.666]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.666]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:49.666]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.666]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.666]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.666]   .. .. ..@ versionKey:<externalptr> 
[10:58:49.666]   .. .. ..@ sealed    : logi TRUE
[10:58:49.666]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.666]  - attr(*, "where")=List of 1
[10:58:49.666]   ..$ ...:<environment: 0x55d3085becf0> 
[10:58:49.666]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.666]  - attr(*, "resolved")= logi TRUE
[10:58:49.666]  - attr(*, "total_size")= num NA
[10:58:49.720]  - Getting '...' globals ... DONE
[10:58:49.720] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.721] List of 2
[10:58:49.721]  $ ...future.FUN:function (a, b)  
[10:58:49.721]  $ ...          :List of 1
[10:58:49.721]   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[10:58:49.721]   .. .. ..@ slots     :List of 4
[10:58:49.721]   .. .. .. ..$ .Data  : chr "function"
[10:58:49.721]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. ..$ target : chr "signature"
[10:58:49.721]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. ..$ defined: chr "signature"
[10:58:49.721]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. ..$ generic: chr "character"
[10:58:49.721]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. ..@ contains  :List of 3
[10:58:49.721]   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "function"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.721]   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.721]   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr "function"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.721]   .. .. ..@ virtual   : logi FALSE
[10:58:49.721]   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[10:58:49.721]  list()
[10:58:49.721]   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[10:58:49.721]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:49.721]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:49.721]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:49.721]   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[10:58:49.721]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:49.721]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:49.721]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:49.721]   .. .. .. .. ..$ generic: chr(0) 
[10:58:49.721]   .. .. ..@ validity  : NULL
[10:58:49.721]   .. .. ..@ access    : list()
[10:58:49.721]   .. .. ..@ className : chr "MethodDefinition"
[10:58:49.721]   .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. ..@ subclasses:List of 7
[10:58:49.721]   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.721]   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.721]   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.721]   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 1
[10:58:49.721]   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.721]   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.721]   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:49.721]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:49.721]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:49.721]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:49.721]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:49.721]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:49.721]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:49.721]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:49.721]   .. .. .. .. .. ..@ distance  : num 2
[10:58:49.721]   .. .. ..@ versionKey:<externalptr> 
[10:58:49.721]   .. .. ..@ sealed    : logi TRUE
[10:58:49.721]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.721]  - attr(*, "where")=List of 2
[10:58:49.721]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.721]   ..$ ...          :<environment: 0x55d3085becf0> 
[10:58:49.721]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.721]  - attr(*, "resolved")= logi FALSE
[10:58:49.721]  - attr(*, "total_size")= num 97748
[10:58:49.768] Packages to be attached in all futures: [n=0] 
[10:58:49.768] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.768] Number of futures (= number of chunks): 1
[10:58:49.769] Launching 1 futures (chunks) ...
[10:58:49.769] Chunk #1 of 1 ...
[10:58:49.769]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.769]    + additional globals found: [n=0] 
[10:58:49.769]    + additional namespaces needed: [n=0] 
[10:58:49.769]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.769]  - seeds: <none>
[10:58:49.769]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.775] Created future:
[10:58:49.775] MulticoreFuture:
[10:58:49.775] Label: ‘future_lapply-1’
[10:58:49.775] Expression:
[10:58:49.775] {
[10:58:49.775]     do.call(function(...) {
[10:58:49.775]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.775]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.775]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.775]             on.exit(options(oopts), add = TRUE)
[10:58:49.775]         }
[10:58:49.775]         {
[10:58:49.775]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.775]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.775]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.775]             })
[10:58:49.775]         }
[10:58:49.775]     }, args = future.call.arguments)
[10:58:49.775] }
[10:58:49.775] Lazy evaluation: FALSE
[10:58:49.775] Asynchronous evaluation: TRUE
[10:58:49.775] Local evaluation: TRUE
[10:58:49.775] Environment: R_GlobalEnv
[10:58:49.775] Capture standard output: TRUE
[10:58:49.775] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.775] Globals: 5 objects totaling 46.83 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 46.42 KiB, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.775] Packages: <none>
[10:58:49.775] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.775] Resolved: TRUE
[10:58:49.775] Value: <not collected>
[10:58:49.775] Conditions captured: <none>
[10:58:49.775] Early signaling: FALSE
[10:58:49.775] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.775] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.781] Chunk #1 of 1 ... DONE
[10:58:49.782] Launching 1 futures (chunks) ... DONE
[10:58:49.782] Resolving 1 futures (chunks) ...
[10:58:49.783]  - Number of value chunks collected: 1
[10:58:49.783] Resolving 1 futures (chunks) ... DONE
[10:58:49.784] Reducing values from 1 chunks ...
[10:58:49.784]  - Number of values collected after concatenation: 1
[10:58:49.784]  - Number of values expected: 1
[10:58:49.784] Reducing values from 1 chunks ... DONE
[10:58:49.784] future_lapply() ... DONE
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[10:58:49.787] future_lapply() ...
[10:58:49.790] Number of chunks: 2
[10:58:49.790] getGlobalsAndPackagesXApply() ...
[10:58:49.790]  - future.globals: TRUE
[10:58:49.792]  - globals found/used: [n=1] ‘FUN’
[10:58:49.792]  - needed namespaces: [n=0] 
[10:58:49.792] Finding globals ... DONE
[10:58:49.792]  - use_args: TRUE
[10:58:49.792]  - Getting '...' globals ...
[10:58:49.793]    - '...' content: [n=0] 
[10:58:49.793] List of 1
[10:58:49.793]  $ ...: list()
[10:58:49.793]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.793]  - attr(*, "where")=List of 1
[10:58:49.793]   ..$ ...:<environment: 0x55d3073415f8> 
[10:58:49.793]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.793]  - attr(*, "resolved")= logi TRUE
[10:58:49.793]  - attr(*, "total_size")= num NA
[10:58:49.795]  - Getting '...' globals ... DONE
[10:58:49.796] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:49.796] List of 2
[10:58:49.796]  $ ...future.FUN:function (f)  
[10:58:49.796]  $ ...          : list()
[10:58:49.796]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.796]  - attr(*, "where")=List of 2
[10:58:49.796]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.796]   ..$ ...          :<environment: 0x55d3073415f8> 
[10:58:49.796]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.796]  - attr(*, "resolved")= logi FALSE
[10:58:49.796]  - attr(*, "total_size")= num 4837
[10:58:49.799] Packages to be attached in all futures: [n=0] 
[10:58:49.799] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.799] Number of futures (= number of chunks): 2
[10:58:49.800] Launching 2 futures (chunks) ...
[10:58:49.800] Chunk #1 of 2 ...
[10:58:49.800]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.802]    + additional globals found: [n=2] ‘a’, ‘b’
[10:58:49.802]    + additional namespaces needed: [n=0] 
[10:58:49.802]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.802]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:49.802]  - seeds: <none>
[10:58:49.802]  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[10:58:49.808] Created future:
[10:58:49.808] MulticoreFuture:
[10:58:49.808] Label: ‘future_lapply-1’
[10:58:49.808] Expression:
[10:58:49.808] {
[10:58:49.808]     do.call(function(...) {
[10:58:49.808]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.808]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.808]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.808]             on.exit(options(oopts), add = TRUE)
[10:58:49.808]         }
[10:58:49.808]         {
[10:58:49.808]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.808]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.808]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.808]             })
[10:58:49.808]         }
[10:58:49.808]     }, args = future.call.arguments)
[10:58:49.808] }
[10:58:49.808] Lazy evaluation: FALSE
[10:58:49.808] Asynchronous evaluation: TRUE
[10:58:49.808] Local evaluation: TRUE
[10:58:49.808] Environment: R_GlobalEnv
[10:58:49.808] Capture standard output: TRUE
[10:58:49.808] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.808] Globals: 7 objects totaling 1.02 KiB (function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 588 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes, ...)
[10:58:49.808] Packages: <none>
[10:58:49.808] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.808] Resolved: TRUE
[10:58:49.808] Value: <not collected>
[10:58:49.808] Conditions captured: <none>
[10:58:49.808] Early signaling: FALSE
[10:58:49.808] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.808] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.815] Chunk #1 of 2 ... DONE
[10:58:49.815] Chunk #2 of 2 ...
[10:58:49.815]  - Finding globals in 'X' for chunk #2 ...
[10:58:49.818]    + additional globals found: [n=2] ‘a’, ‘b’
[10:58:49.818]    + additional namespaces needed: [n=1] ‘tools’
[10:58:49.819]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:49.819]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:49.819]  - seeds: <none>
[10:58:49.819]  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[10:58:49.827] Created future:
[10:58:49.828] MulticoreFuture:
[10:58:49.828] Label: ‘future_lapply-2’
[10:58:49.828] Expression:
[10:58:49.828] {
[10:58:49.828]     do.call(function(...) {
[10:58:49.828]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.828]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.828]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.828]             on.exit(options(oopts), add = TRUE)
[10:58:49.828]         }
[10:58:49.828]         {
[10:58:49.828]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.828]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.828]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.828]             })
[10:58:49.828]         }
[10:58:49.828]     }, args = future.call.arguments)
[10:58:49.828] }
[10:58:49.828] Lazy evaluation: FALSE
[10:58:49.828] Asynchronous evaluation: TRUE
[10:58:49.828] Local evaluation: TRUE
[10:58:49.828] Environment: R_GlobalEnv
[10:58:49.828] Capture standard output: TRUE
[10:58:49.828] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.828] Globals: 7 objects totaling 1.33 KiB (function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 903 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes, ...)
[10:58:49.828] Packages: 1 packages (‘tools’)
[10:58:49.828] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.828] Resolved: TRUE
[10:58:49.828] Value: <not collected>
[10:58:49.828] Conditions captured: <none>
[10:58:49.828] Early signaling: FALSE
[10:58:49.828] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.828] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.835] Chunk #2 of 2 ... DONE
[10:58:49.835] Launching 2 futures (chunks) ... DONE
[10:58:49.835] Resolving 2 futures (chunks) ...
[10:58:49.838]  - Number of value chunks collected: 2
[10:58:49.839] Resolving 2 futures (chunks) ... DONE
[10:58:49.839] Reducing values from 2 chunks ...
[10:58:49.839]  - Number of values collected after concatenation: 4
[10:58:49.839]  - Number of values expected: 4
[10:58:49.839] Reducing values from 2 chunks ... DONE
[10:58:49.840] future_lapply() ... DONE
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(x, ...) - passing '...' as a global ...
List of 1
 $ z0:List of 1
  ..$ :List of 1
  .. ..$ a: num 1
[10:58:49.843] future_lapply() ...
[10:58:49.846] Number of chunks: 1
[10:58:49.846] getGlobalsAndPackagesXApply() ...
[10:58:49.846]  - future.globals: TRUE
[10:58:49.849]  - globals found/used: [n=2] ‘FUN’, ‘future.call.arguments’
[10:58:49.849]  - needed namespaces: [n=0] 
[10:58:49.849] Finding globals ... DONE
[10:58:49.849]  - use_args: TRUE
[10:58:49.849]  - Getting '...' globals ...
[10:58:49.849]    - '...' content: [n=0] 
[10:58:49.850] List of 1
[10:58:49.850]  $ ...: list()
[10:58:49.850]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.850]  - attr(*, "where")=List of 1
[10:58:49.850]   ..$ ...:<environment: 0x55d308a72be8> 
[10:58:49.850]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.850]  - attr(*, "resolved")= logi TRUE
[10:58:49.850]  - attr(*, "total_size")= num NA
[10:58:49.852]  - Getting '...' globals ... DONE
[10:58:49.852] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[10:58:49.853] List of 3
[10:58:49.853]  $ ...future.FUN        :function (x)  
[10:58:49.853]  $ future.call.arguments:List of 1
[10:58:49.853]   ..$ a: num 1
[10:58:49.853]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.853]  $ ...                  : list()
[10:58:49.853]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.853]  - attr(*, "where")=List of 3
[10:58:49.853]   ..$ ...future.FUN        :<environment: R_EmptyEnv> 
[10:58:49.853]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:58:49.853]   ..$ ...                  :<environment: 0x55d308a72be8> 
[10:58:49.853]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.853]  - attr(*, "resolved")= logi FALSE
[10:58:49.853]  - attr(*, "total_size")= num 3563
[10:58:49.859] Packages to be attached in all futures: [n=0] 
[10:58:49.859] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.859] Number of futures (= number of chunks): 1
[10:58:49.859] Launching 1 futures (chunks) ...
[10:58:49.860] Chunk #1 of 1 ...
[10:58:49.860]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.860]    + additional globals found: [n=0] 
[10:58:49.860]    + additional namespaces needed: [n=0] 
[10:58:49.860]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.860]  - seeds: <none>
[10:58:49.860]  - All globals exported: [n=6] ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.866] Created future:
[10:58:49.867] MulticoreFuture:
[10:58:49.867] Label: ‘future_lapply-1’
[10:58:49.867] Expression:
[10:58:49.867] {
[10:58:49.867]     do.call(function(...) {
[10:58:49.867]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.867]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.867]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.867]             on.exit(options(oopts), add = TRUE)
[10:58:49.867]         }
[10:58:49.867]         {
[10:58:49.867]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.867]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.867]                 ...future.FUN(...future.X_jj)
[10:58:49.867]             })
[10:58:49.867]         }
[10:58:49.867]     }, args = future.call.arguments)
[10:58:49.867] }
[10:58:49.867] Lazy evaluation: FALSE
[10:58:49.867] Asynchronous evaluation: TRUE
[10:58:49.867] Local evaluation: TRUE
[10:58:49.867] Environment: 0x55d308a6f170
[10:58:49.867] Capture standard output: TRUE
[10:58:49.867] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.867] Globals: 5 objects totaling 613 bytes (function ‘...future.FUN’ of 361 bytes, DotDotDotList ‘future.call.arguments’ of 151 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:49.867] Packages: <none>
[10:58:49.867] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.867] Resolved: TRUE
[10:58:49.867] Value: <not collected>
[10:58:49.867] Conditions captured: <none>
[10:58:49.867] Early signaling: FALSE
[10:58:49.867] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.867] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.872] Chunk #1 of 1 ... DONE
[10:58:49.872] Launching 1 futures (chunks) ... DONE
[10:58:49.872] Resolving 1 futures (chunks) ...
[10:58:49.874]  - Number of value chunks collected: 1
[10:58:49.874] Resolving 1 futures (chunks) ... DONE
[10:58:49.874] Reducing values from 1 chunks ...
[10:58:49.874]  - Number of values collected after concatenation: 1
[10:58:49.875]  - Number of values expected: 1
[10:58:49.875] Reducing values from 1 chunks ... DONE
[10:58:49.875] future_lapply() ... DONE
List of 1
 $ z1:List of 1
  ..$ :List of 1
  .. ..$ a: num 1
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[10:58:49.876] future_lapply() ...
[10:58:49.879] Number of chunks: 1
[10:58:49.879] getGlobalsAndPackagesXApply() ...
[10:58:49.880]  - future.globals: TRUE
[10:58:49.882]  - globals found/used: [n=2] ‘FUN’, ‘a’
[10:58:49.882]  - needed namespaces: [n=0] 
[10:58:49.882] Finding globals ... DONE
[10:58:49.883]  - use_args: TRUE
[10:58:49.883]  - Getting '...' globals ...
[10:58:49.883]    - '...' content: [n=0] 
[10:58:49.883] List of 1
[10:58:49.883]  $ ...: list()
[10:58:49.883]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.883]  - attr(*, "where")=List of 1
[10:58:49.883]   ..$ ...:<environment: 0x55d30740a2e0> 
[10:58:49.883]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.883]  - attr(*, "resolved")= logi TRUE
[10:58:49.883]  - attr(*, "total_size")= num NA
[10:58:49.886]  - Getting '...' globals ... DONE
[10:58:49.886] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[10:58:49.886] List of 3
[10:58:49.886]  $ ...future.FUN:function (ii)  
[10:58:49.886]  $ a            : num 1
[10:58:49.886]  $ ...          : list()
[10:58:49.886]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.886]  - attr(*, "where")=List of 3
[10:58:49.886]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.886]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:49.886]   ..$ ...          :<environment: 0x55d30740a2e0> 
[10:58:49.886]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.886]  - attr(*, "resolved")= logi FALSE
[10:58:49.886]  - attr(*, "total_size")= num 3759
[10:58:49.890] Packages to be attached in all futures: [n=0] 
[10:58:49.890] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.890] Number of futures (= number of chunks): 1
[10:58:49.891] Launching 1 futures (chunks) ...
[10:58:49.891] Chunk #1 of 1 ...
[10:58:49.891]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.891]    + additional globals found: [n=0] 
[10:58:49.891]    + additional namespaces needed: [n=0] 
[10:58:49.891]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.892]  - seeds: <none>
[10:58:49.892]  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.897] Created future:
[10:58:49.897] MulticoreFuture:
[10:58:49.897] Label: ‘future_lapply-1’
[10:58:49.897] Expression:
[10:58:49.897] {
[10:58:49.897]     do.call(function(...) {
[10:58:49.897]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.897]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.897]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.897]             on.exit(options(oopts), add = TRUE)
[10:58:49.897]         }
[10:58:49.897]         {
[10:58:49.897]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.897]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.897]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.897]             })
[10:58:49.897]         }
[10:58:49.897]     }, args = future.call.arguments)
[10:58:49.897] }
[10:58:49.897] Lazy evaluation: FALSE
[10:58:49.897] Asynchronous evaluation: TRUE
[10:58:49.897] Local evaluation: TRUE
[10:58:49.897] Environment: R_GlobalEnv
[10:58:49.897] Capture standard output: TRUE
[10:58:49.897] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.897] Globals: 6 objects totaling 748 bytes (function ‘...future.FUN’ of 511 bytes, numeric ‘a’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:49.897] Packages: <none>
[10:58:49.897] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.897] Resolved: TRUE
[10:58:49.897] Value: <not collected>
[10:58:49.897] Conditions captured: <none>
[10:58:49.897] Early signaling: FALSE
[10:58:49.897] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.897] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.904] Chunk #1 of 1 ... DONE
[10:58:49.904] Launching 1 futures (chunks) ... DONE
[10:58:49.904] Resolving 1 futures (chunks) ...
[10:58:49.905]  - Number of value chunks collected: 1
[10:58:49.906] Resolving 1 futures (chunks) ... DONE
[10:58:49.906] Reducing values from 1 chunks ...
[10:58:49.906]  - Number of values collected after concatenation: 1
[10:58:49.906]  - Number of values expected: 1
[10:58:49.906] Reducing values from 1 chunks ... DONE
[10:58:49.906] future_lapply() ... DONE
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[10:58:49.907] future_lapply() ...
[10:58:49.909] Number of chunks: 1
[10:58:49.910] getGlobalsAndPackagesXApply() ...
[10:58:49.910]  - future.globals: TRUE
[10:58:49.912]  - globals found/used: [n=2] ‘FUN’, ‘a’
[10:58:49.912]  - needed namespaces: [n=0] 
[10:58:49.912] Finding globals ... DONE
[10:58:49.913]  - use_args: TRUE
[10:58:49.913]  - Getting '...' globals ...
[10:58:49.913]    - '...' content: [n=0] 
[10:58:49.913] List of 1
[10:58:49.913]  $ ...: list()
[10:58:49.913]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.913]  - attr(*, "where")=List of 1
[10:58:49.913]   ..$ ...:<environment: 0x55d30844bba0> 
[10:58:49.913]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.913]  - attr(*, "resolved")= logi TRUE
[10:58:49.913]  - attr(*, "total_size")= num NA
[10:58:49.916]  - Getting '...' globals ... DONE
[10:58:49.916] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[10:58:49.916] List of 3
[10:58:49.916]  $ ...future.FUN:function (ii)  
[10:58:49.916]  $ a            : num 1
[10:58:49.916]  $ ...          : list()
[10:58:49.916]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.916]  - attr(*, "where")=List of 3
[10:58:49.916]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:49.916]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:49.916]   ..$ ...          :<environment: 0x55d30844bba0> 
[10:58:49.916]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.916]  - attr(*, "resolved")= logi FALSE
[10:58:49.916]  - attr(*, "total_size")= num 3775
[10:58:49.920] Packages to be attached in all futures: [n=0] 
[10:58:49.920] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.920] Number of futures (= number of chunks): 1
[10:58:49.921] Launching 1 futures (chunks) ...
[10:58:49.921] Chunk #1 of 1 ...
[10:58:49.921]  - Finding globals in 'X' for chunk #1 ...
[10:58:49.921]    + additional globals found: [n=0] 
[10:58:49.921]    + additional namespaces needed: [n=0] 
[10:58:49.921]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:49.922]  - seeds: <none>
[10:58:49.922]  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.927] Created future:
[10:58:49.927] MulticoreFuture:
[10:58:49.927] Label: ‘future_lapply-1’
[10:58:49.927] Expression:
[10:58:49.927] {
[10:58:49.927]     do.call(function(...) {
[10:58:49.927]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.927]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.927]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.927]             on.exit(options(oopts), add = TRUE)
[10:58:49.927]         }
[10:58:49.927]         {
[10:58:49.927]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.927]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.927]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.927]             })
[10:58:49.927]         }
[10:58:49.927]     }, args = future.call.arguments)
[10:58:49.927] }
[10:58:49.927] Lazy evaluation: FALSE
[10:58:49.927] Asynchronous evaluation: TRUE
[10:58:49.927] Local evaluation: TRUE
[10:58:49.927] Environment: R_GlobalEnv
[10:58:49.927] Capture standard output: TRUE
[10:58:49.927] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.927] Globals: 6 objects totaling 756 bytes (function ‘...future.FUN’ of 519 bytes, numeric ‘a’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:49.927] Packages: <none>
[10:58:49.927] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.927] Resolved: TRUE
[10:58:49.927] Value: <not collected>
[10:58:49.927] Conditions captured: <none>
[10:58:49.927] Early signaling: FALSE
[10:58:49.927] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.927] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.933] Chunk #1 of 1 ... DONE
[10:58:49.933] Launching 1 futures (chunks) ... DONE
[10:58:49.933] Resolving 1 futures (chunks) ...
[10:58:49.935]  - Number of value chunks collected: 1
[10:58:49.935] Resolving 1 futures (chunks) ... DONE
[10:58:49.935] Reducing values from 1 chunks ...
[10:58:49.935]  - Number of values collected after concatenation: 1
[10:58:49.935]  - Number of values expected: 1
[10:58:49.935] Reducing values from 1 chunks ... DONE
[10:58:49.936] future_lapply() ... DONE
- future_lapply(..., future.globals = <list>) ...
[10:58:49.936] future_lapply() ...
[10:58:49.938] Number of chunks: 1
[10:58:49.940] getGlobalsAndPackagesXApply() ...
[10:58:49.940]  - future.globals: <name-value list> with names ‘42’
[10:58:49.941]  - use_args: TRUE
[10:58:49.941]  - Getting '...' globals ...
[10:58:49.941]    - '...' content: [n=0] 
[10:58:49.941] List of 1
[10:58:49.941]  $ ...: list()
[10:58:49.941]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.941]  - attr(*, "where")=List of 1
[10:58:49.941]   ..$ ...:<environment: 0x55d308e39800> 
[10:58:49.941]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.941]  - attr(*, "resolved")= logi TRUE
[10:58:49.941]  - attr(*, "total_size")= num NA
[10:58:49.944]  - Getting '...' globals ... DONE
[10:58:49.944] Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[10:58:49.945] List of 3
[10:58:49.945]  $ a            : num 42
[10:58:49.945]  $ ...future.FUN:function (x)  
[10:58:49.945]  $ ...          : list()
[10:58:49.945]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:49.945]  - attr(*, "where")=List of 3
[10:58:49.945]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:49.945]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:58:49.945]   ..$ ...          :<environment: 0x55d308e39800> 
[10:58:49.945]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:49.945]  - attr(*, "resolved")= logi FALSE
[10:58:49.945]  - attr(*, "total_size")= num NA
[10:58:49.948] Packages to be attached in all futures: [n=0] 
[10:58:49.948] getGlobalsAndPackagesXApply() ... DONE
[10:58:49.949] Number of futures (= number of chunks): 1
[10:58:49.949] Launching 1 futures (chunks) ...
[10:58:49.949] Chunk #1 of 1 ...
[10:58:49.949]  - seeds: <none>
[10:58:49.949]  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:49.955] Created future:
[10:58:49.955] MulticoreFuture:
[10:58:49.955] Label: ‘future_lapply-1’
[10:58:49.955] Expression:
[10:58:49.955] {
[10:58:49.955]     do.call(function(...) {
[10:58:49.955]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:49.955]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:49.955]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:49.955]             on.exit(options(oopts), add = TRUE)
[10:58:49.955]         }
[10:58:49.955]         {
[10:58:49.955]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:49.955]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:49.955]                 ...future.FUN(...future.X_jj, ...)
[10:58:49.955]             })
[10:58:49.955]         }
[10:58:49.955]     }, args = future.call.arguments)
[10:58:49.955] }
[10:58:49.955] Lazy evaluation: FALSE
[10:58:49.955] Asynchronous evaluation: TRUE
[10:58:49.955] Local evaluation: TRUE
[10:58:49.955] Environment: R_GlobalEnv
[10:58:49.955] Capture standard output: TRUE
[10:58:49.955] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:49.955] Globals: 6 objects totaling 535 bytes (numeric ‘a’ of 39 bytes, function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:49.955] Packages: <none>
[10:58:49.955] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:49.955] Resolved: TRUE
[10:58:49.955] Value: <not collected>
[10:58:49.955] Conditions captured: <none>
[10:58:49.955] Early signaling: FALSE
[10:58:49.955] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:49.955] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:49.961] Chunk #1 of 1 ... DONE
[10:58:49.961] Launching 1 futures (chunks) ... DONE
[10:58:49.961] Resolving 1 futures (chunks) ...
[10:58:49.962]  - Number of value chunks collected: 1
[10:58:49.963] Resolving 1 futures (chunks) ... DONE
[10:58:49.963] Reducing values from 1 chunks ...
[10:58:49.963]  - Number of values collected after concatenation: 1
[10:58:49.963]  - Number of values expected: 1
[10:58:49.963] Reducing values from 1 chunks ... DONE
[10:58:49.963] future_lapply() ... DONE
List of 1
 $ : num 42
[10:58:50.310] future_lapply() ...
[10:58:50.313] Number of chunks: 2
[10:58:50.313] getGlobalsAndPackagesXApply() ...
[10:58:50.314]  - future.globals: TRUE
[10:58:50.319]  - globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[10:58:50.319]  - needed namespaces: [n=0] 
[10:58:50.320] Finding globals ... DONE
[10:58:50.320]  - use_args: TRUE
[10:58:50.320]  - Getting '...' globals ...
[10:58:50.320]    - '...' content: [n=0] 
[10:58:50.320] List of 1
[10:58:50.320]  $ ...: list()
[10:58:50.320]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.320]  - attr(*, "where")=List of 1
[10:58:50.320]   ..$ ...:<environment: 0x55d305c9d988> 
[10:58:50.320]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.320]  - attr(*, "resolved")= logi TRUE
[10:58:50.320]  - attr(*, "total_size")= num NA
[10:58:50.323]  - Getting '...' globals ... DONE
[10:58:50.323] Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[10:58:50.323] List of 6
[10:58:50.323]  $ ...future.FUN:function (i)  
[10:58:50.323]  $ caller       :function (a, b, FUN = call_my_add)  
[10:58:50.323]  $ args         :List of 1
[10:58:50.323]   ..$ FUN:function (a, b)  
[10:58:50.323]  $ call_my_add  :function (a, b)  
[10:58:50.323]  $ my_add       :function (a, b)  
[10:58:50.323]  $ ...          : list()
[10:58:50.323]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.323]  - attr(*, "where")=List of 6
[10:58:50.323]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:50.323]   ..$ caller       :<environment: R_EmptyEnv> 
[10:58:50.323]   ..$ args         :<environment: R_EmptyEnv> 
[10:58:50.323]   ..$ call_my_add  :<environment: R_EmptyEnv> 
[10:58:50.323]   ..$ my_add       :<environment: R_EmptyEnv> 
[10:58:50.323]   ..$ ...          :<environment: 0x55d305c9d988> 
[10:58:50.323]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.323]  - attr(*, "resolved")= logi FALSE
[10:58:50.323]  - attr(*, "total_size")= num 11089
[10:58:50.329] Packages to be attached in all futures: [n=0] 
[10:58:50.329] getGlobalsAndPackagesXApply() ... DONE
[10:58:50.329] Number of futures (= number of chunks): 2
[10:58:50.330] Launching 2 futures (chunks) ...
[10:58:50.330] Chunk #1 of 2 ...
[10:58:50.330]  - Finding globals in 'X' for chunk #1 ...
[10:58:50.330]    + additional globals found: [n=0] 
[10:58:50.330]    + additional namespaces needed: [n=0] 
[10:58:50.330]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:50.330]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:50.331]  - seeds: <none>
[10:58:50.331]  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:50.391] Created future:
[10:58:50.391] MultisessionFuture:
[10:58:50.391] Label: ‘future_lapply-1’
[10:58:50.391] Expression:
[10:58:50.391] {
[10:58:50.391]     do.call(function(...) {
[10:58:50.391]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:50.391]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:50.391]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:50.391]             on.exit(options(oopts), add = TRUE)
[10:58:50.391]         }
[10:58:50.391]         {
[10:58:50.391]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:50.391]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:50.391]                 ...future.FUN(...future.X_jj, ...)
[10:58:50.391]             })
[10:58:50.391]         }
[10:58:50.391]     }, args = future.call.arguments)
[10:58:50.391] }
[10:58:50.391] Lazy evaluation: FALSE
[10:58:50.391] Asynchronous evaluation: TRUE
[10:58:50.391] Local evaluation: TRUE
[10:58:50.391] Environment: 0x55d305c9d528
[10:58:50.391] Capture standard output: TRUE
[10:58:50.391] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:50.391] Globals: 9 objects totaling 5.17 KiB (function ‘...future.FUN’ of 2.67 KiB, function ‘caller’ of 247 bytes, list ‘args’ of 928 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 311 bytes, ...)
[10:58:50.391] Packages: <none>
[10:58:50.391] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:50.391] Resolved: FALSE
[10:58:50.391] Value: <not collected>
[10:58:50.391] Conditions captured: <none>
[10:58:50.391] Early signaling: FALSE
[10:58:50.391] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:50.391] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:50.403] Chunk #1 of 2 ... DONE
[10:58:50.404] Chunk #2 of 2 ...
[10:58:50.404]  - Finding globals in 'X' for chunk #2 ...
[10:58:50.404]    + additional globals found: [n=0] 
[10:58:50.404]    + additional namespaces needed: [n=0] 
[10:58:50.404]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:50.404]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:50.404]  - seeds: <none>
[10:58:50.406]  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:50.474] Created future:
[10:58:50.474] MultisessionFuture:
[10:58:50.474] Label: ‘future_lapply-2’
[10:58:50.474] Expression:
[10:58:50.474] {
[10:58:50.474]     do.call(function(...) {
[10:58:50.474]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:50.474]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:50.474]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:50.474]             on.exit(options(oopts), add = TRUE)
[10:58:50.474]         }
[10:58:50.474]         {
[10:58:50.474]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:50.474]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:50.474]                 ...future.FUN(...future.X_jj, ...)
[10:58:50.474]             })
[10:58:50.474]         }
[10:58:50.474]     }, args = future.call.arguments)
[10:58:50.474] }
[10:58:50.474] Lazy evaluation: FALSE
[10:58:50.474] Asynchronous evaluation: TRUE
[10:58:50.474] Local evaluation: TRUE
[10:58:50.474] Environment: 0x55d305c9d528
[10:58:50.474] Capture standard output: TRUE
[10:58:50.474] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:50.474] Globals: 9 objects totaling 5.18 KiB (function ‘...future.FUN’ of 2.67 KiB, function ‘caller’ of 247 bytes, list ‘args’ of 928 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 311 bytes, ...)
[10:58:50.474] Packages: <none>
[10:58:50.474] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:50.474] Resolved: FALSE
[10:58:50.474] Value: <not collected>
[10:58:50.474] Conditions captured: <none>
[10:58:50.474] Early signaling: FALSE
[10:58:50.474] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:50.474] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:50.486] Chunk #2 of 2 ... DONE
[10:58:50.486] Launching 2 futures (chunks) ... DONE
[10:58:50.486] Resolving 2 futures (chunks) ...
[10:58:50.551]  - Number of value chunks collected: 2
[10:58:50.552] Resolving 2 futures (chunks) ... DONE
[10:58:50.552] Reducing values from 2 chunks ...
[10:58:50.552]  - Number of values collected after concatenation: 3
[10:58:50.552]  - Number of values expected: 3
[10:58:50.552] Reducing values from 2 chunks ... DONE
[10:58:50.552] future_lapply() ... DONE
- future_lapply(x, FUN = do.call, ...) ...
[10:58:50.552] future_lapply() ...
[10:58:50.555] Number of chunks: 1
[10:58:50.555] getGlobalsAndPackagesXApply() ...
[10:58:50.555]  - future.globals: TRUE
[10:58:50.558]  - globals found/used: [n=1] ‘FUN’
[10:58:50.558]  - needed namespaces: [n=0] 
[10:58:50.558] Finding globals ... DONE
[10:58:50.558]  - use_args: TRUE
[10:58:50.558]  - Getting '...' globals ...
[10:58:50.559]    - '...' content: [n=1] ‘what’
[10:58:50.559] List of 1
[10:58:50.559]  $ ...:List of 1
[10:58:50.559]   ..$ what:function (x)  
[10:58:50.559]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.559]  - attr(*, "where")=List of 1
[10:58:50.559]   ..$ ...:<environment: 0x55d307489f48> 
[10:58:50.559]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.559]  - attr(*, "resolved")= logi TRUE
[10:58:50.559]  - attr(*, "total_size")= num NA
[10:58:50.561]  - Getting '...' globals ... DONE
[10:58:50.562] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:50.562] List of 2
[10:58:50.562]  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[10:58:50.562]  $ ...          :List of 1
[10:58:50.562]   ..$ what:function (x)  
[10:58:50.562]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.562]  - attr(*, "where")=List of 2
[10:58:50.562]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:50.562]   ..$ ...          :<environment: 0x55d307489f48> 
[10:58:50.562]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.562]  - attr(*, "resolved")= logi FALSE
[10:58:50.562]  - attr(*, "total_size")= num 6909
[10:58:50.565] Packages to be attached in all futures: [n=0] 
[10:58:50.565] getGlobalsAndPackagesXApply() ... DONE
[10:58:50.565] Number of futures (= number of chunks): 1
[10:58:50.565] Launching 1 futures (chunks) ...
[10:58:50.565] Chunk #1 of 1 ...
[10:58:50.565]  - Finding globals in 'X' for chunk #1 ...
[10:58:50.565]    + additional globals found: [n=0] 
[10:58:50.566]    + additional namespaces needed: [n=0] 
[10:58:50.566]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:50.566]  - seeds: <none>
[10:58:50.566]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:50.585] Created future:
[10:58:50.586] MultisessionFuture:
[10:58:50.586] Label: ‘future_lapply-1’
[10:58:50.586] Expression:
[10:58:50.586] {
[10:58:50.586]     do.call(function(...) {
[10:58:50.586]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:50.586]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:50.586]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:50.586]             on.exit(options(oopts), add = TRUE)
[10:58:50.586]         }
[10:58:50.586]         {
[10:58:50.586]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:50.586]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:50.586]                 ...future.FUN(...future.X_jj, ...)
[10:58:50.586]             })
[10:58:50.586]         }
[10:58:50.586]     }, args = future.call.arguments)
[10:58:50.586] }
[10:58:50.586] Lazy evaluation: FALSE
[10:58:50.586] Asynchronous evaluation: TRUE
[10:58:50.586] Local evaluation: TRUE
[10:58:50.586] Environment: R_GlobalEnv
[10:58:50.586] Capture standard output: TRUE
[10:58:50.586] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:50.586] Globals: 5 objects totaling 2.13 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:50.586] Packages: <none>
[10:58:50.586] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:50.586] Resolved: FALSE
[10:58:50.586] Value: <not collected>
[10:58:50.586] Conditions captured: <none>
[10:58:50.586] Early signaling: FALSE
[10:58:50.586] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:50.586] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:50.597] Chunk #1 of 1 ... DONE
[10:58:50.597] Launching 1 futures (chunks) ... DONE
[10:58:50.597] Resolving 1 futures (chunks) ...
[10:58:50.628]  - Number of value chunks collected: 1
[10:58:50.628] Resolving 1 futures (chunks) ... DONE
[10:58:50.628] Reducing values from 1 chunks ...
[10:58:50.628]  - Number of values collected after concatenation: 1
[10:58:50.628]  - Number of values expected: 1
[10:58:50.628] Reducing values from 1 chunks ... DONE
[10:58:50.628] future_lapply() ... DONE
[10:58:50.628] future_lapply() ...
[10:58:50.630] Number of chunks: 1
[10:58:50.631] getGlobalsAndPackagesXApply() ...
[10:58:50.631]  - future.globals: TRUE
[10:58:50.633]  - globals found/used: [n=1] ‘FUN’
[10:58:50.633]  - needed namespaces: [n=0] 
[10:58:50.633] Finding globals ... DONE
[10:58:50.634]  - use_args: TRUE
[10:58:50.634]  - Getting '...' globals ...
[10:58:50.634]    - '...' content: [n=1] ‘what’
[10:58:50.634] List of 1
[10:58:50.634]  $ ...:List of 1
[10:58:50.634]   ..$ what:function (...)  
[10:58:50.634]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.634]  - attr(*, "where")=List of 1
[10:58:50.634]   ..$ ...:<environment: 0x55d308578a38> 
[10:58:50.634]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.634]  - attr(*, "resolved")= logi TRUE
[10:58:50.634]  - attr(*, "total_size")= num NA
[10:58:50.637]  - Getting '...' globals ... DONE
[10:58:50.637] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:50.637] List of 2
[10:58:50.637]  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[10:58:50.637]  $ ...          :List of 1
[10:58:50.637]   ..$ what:function (...)  
[10:58:50.637]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.637]  - attr(*, "where")=List of 2
[10:58:50.637]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:50.637]   ..$ ...          :<environment: 0x55d308578a38> 
[10:58:50.637]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.637]  - attr(*, "resolved")= logi FALSE
[10:58:50.637]  - attr(*, "total_size")= num 7345
[10:58:50.640] Packages to be attached in all futures: [n=0] 
[10:58:50.640] getGlobalsAndPackagesXApply() ... DONE
[10:58:50.640] Number of futures (= number of chunks): 1
[10:58:50.640] Launching 1 futures (chunks) ...
[10:58:50.640] Chunk #1 of 1 ...
[10:58:50.640]  - Finding globals in 'X' for chunk #1 ...
[10:58:50.641]    + additional globals found: [n=0] 
[10:58:50.641]    + additional namespaces needed: [n=0] 
[10:58:50.641]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:50.641]  - seeds: <none>
[10:58:50.641]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:50.659] Created future:
[10:58:50.659] MultisessionFuture:
[10:58:50.659] Label: ‘future_lapply-1’
[10:58:50.659] Expression:
[10:58:50.659] {
[10:58:50.659]     do.call(function(...) {
[10:58:50.659]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:50.659]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:50.659]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:50.659]             on.exit(options(oopts), add = TRUE)
[10:58:50.659]         }
[10:58:50.659]         {
[10:58:50.659]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:50.659]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:50.659]                 ...future.FUN(...future.X_jj, ...)
[10:58:50.659]             })
[10:58:50.659]         }
[10:58:50.659]     }, args = future.call.arguments)
[10:58:50.659] }
[10:58:50.659] Lazy evaluation: FALSE
[10:58:50.659] Asynchronous evaluation: TRUE
[10:58:50.659] Local evaluation: TRUE
[10:58:50.659] Environment: R_GlobalEnv
[10:58:50.659] Capture standard output: TRUE
[10:58:50.659] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:50.659] Globals: 5 objects totaling 2.36 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:50.659] Packages: <none>
[10:58:50.659] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:50.659] Resolved: FALSE
[10:58:50.659] Value: <not collected>
[10:58:50.659] Conditions captured: <none>
[10:58:50.659] Early signaling: FALSE
[10:58:50.659] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:50.659] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:50.670] Chunk #1 of 1 ... DONE
[10:58:50.670] Launching 1 futures (chunks) ... DONE
[10:58:50.671] Resolving 1 futures (chunks) ...
[10:58:50.701]  - Number of value chunks collected: 1
[10:58:50.702] Resolving 1 futures (chunks) ... DONE
[10:58:50.702] Reducing values from 1 chunks ...
[10:58:50.702]  - Number of values collected after concatenation: 1
[10:58:50.702]  - Number of values expected: 1
[10:58:50.702] Reducing values from 1 chunks ... DONE
[10:58:50.702] future_lapply() ... DONE
- future_lapply(x, ...) - passing arguments via '...' ...
[10:58:50.702] future_lapply() ...
[10:58:50.704] Number of chunks: 1
[10:58:50.704] getGlobalsAndPackagesXApply() ...
[10:58:50.704]  - future.globals: TRUE
[10:58:50.705]  - globals found/used: [n=1] ‘FUN’
[10:58:50.706]  - needed namespaces: [n=0] 
[10:58:50.706] Finding globals ... DONE
[10:58:50.706]  - use_args: TRUE
[10:58:50.706]  - Getting '...' globals ...
[10:58:50.706]    - '...' content: [n=1] ‘b’
[10:58:50.706] List of 1
[10:58:50.706]  $ ...:List of 1
[10:58:50.706]   ..$ b:'data.frame':	2 obs. of  1 variable:
[10:58:50.706]   .. ..$ a: int [1:2] 1 2
[10:58:50.706]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.706]  - attr(*, "where")=List of 1
[10:58:50.706]   ..$ ...:<environment: 0x55d3077791f8> 
[10:58:50.706]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.706]  - attr(*, "resolved")= logi TRUE
[10:58:50.706]  - attr(*, "total_size")= num NA
[10:58:50.709]  - Getting '...' globals ... DONE
[10:58:50.709] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:50.709] List of 2
[10:58:50.709]  $ ...future.FUN:function (a, b)  
[10:58:50.709]  $ ...          :List of 1
[10:58:50.709]   ..$ b:'data.frame':	2 obs. of  1 variable:
[10:58:50.709]   .. ..$ a: int [1:2] 1 2
[10:58:50.709]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.709]  - attr(*, "where")=List of 2
[10:58:50.709]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:50.709]   ..$ ...          :<environment: 0x55d3077791f8> 
[10:58:50.709]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.709]  - attr(*, "resolved")= logi FALSE
[10:58:50.709]  - attr(*, "total_size")= num 4163
[10:58:50.713] Packages to be attached in all futures: [n=0] 
[10:58:50.713] getGlobalsAndPackagesXApply() ... DONE
[10:58:50.713] Number of futures (= number of chunks): 1
[10:58:50.713] Launching 1 futures (chunks) ...
[10:58:50.713] Chunk #1 of 1 ...
[10:58:50.713]  - Finding globals in 'X' for chunk #1 ...
[10:58:50.713]    + additional globals found: [n=0] 
[10:58:50.714]    + additional namespaces needed: [n=0] 
[10:58:50.714]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:50.714]  - seeds: <none>
[10:58:50.714]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:50.731] Created future:
[10:58:50.732] MultisessionFuture:
[10:58:50.732] Label: ‘future_lapply-1’
[10:58:50.732] Expression:
[10:58:50.732] {
[10:58:50.732]     do.call(function(...) {
[10:58:50.732]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:50.732]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:50.732]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:50.732]             on.exit(options(oopts), add = TRUE)
[10:58:50.732]         }
[10:58:50.732]         {
[10:58:50.732]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:50.732]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:50.732]                 ...future.FUN(...future.X_jj, ...)
[10:58:50.732]             })
[10:58:50.732]         }
[10:58:50.732]     }, args = future.call.arguments)
[10:58:50.732] }
[10:58:50.732] Lazy evaluation: FALSE
[10:58:50.732] Asynchronous evaluation: TRUE
[10:58:50.732] Local evaluation: TRUE
[10:58:50.732] Environment: R_GlobalEnv
[10:58:50.732] Capture standard output: TRUE
[10:58:50.732] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:50.732] Globals: 5 objects totaling 786 bytes (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 357 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:50.732] Packages: <none>
[10:58:50.732] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:50.732] Resolved: FALSE
[10:58:50.732] Value: <not collected>
[10:58:50.732] Conditions captured: <none>
[10:58:50.732] Early signaling: FALSE
[10:58:50.732] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:50.732] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:50.743] Chunk #1 of 1 ... DONE
[10:58:50.743] Launching 1 futures (chunks) ... DONE
[10:58:50.743] Resolving 1 futures (chunks) ...
[10:58:50.773]  - Number of value chunks collected: 1
[10:58:50.774] Resolving 1 futures (chunks) ... DONE
[10:58:50.774] Reducing values from 1 chunks ...
[10:58:50.774]  - Number of values collected after concatenation: 1
[10:58:50.774]  - Number of values expected: 1
[10:58:50.774] Reducing values from 1 chunks ... DONE
[10:58:50.774] future_lapply() ... DONE
[10:58:50.774] future_lapply() ...
[10:58:50.776] Number of chunks: 1
[10:58:50.776] getGlobalsAndPackagesXApply() ...
[10:58:50.776]  - future.globals: TRUE
[10:58:50.777]  - globals found/used: [n=1] ‘FUN’
[10:58:50.777]  - needed namespaces: [n=0] 
[10:58:50.778] Finding globals ... DONE
[10:58:50.778]  - use_args: TRUE
[10:58:50.778]  - Getting '...' globals ...
[10:58:50.778]    - '...' content: [n=1] ‘b’
[10:58:50.778] List of 1
[10:58:50.778]  $ ...:List of 1
[10:58:50.778]   ..$ b:<environment: 0x55d305080ac8> 
[10:58:50.778]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.778]  - attr(*, "where")=List of 1
[10:58:50.778]   ..$ ...:<environment: 0x55d30507cfe8> 
[10:58:50.778]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.778]  - attr(*, "resolved")= logi TRUE
[10:58:50.778]  - attr(*, "total_size")= num NA
[10:58:50.781]  - Getting '...' globals ... DONE
[10:58:50.781] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:50.781] List of 2
[10:58:50.781]  $ ...future.FUN:function (a, b)  
[10:58:50.781]  $ ...          :List of 1
[10:58:50.781]   ..$ b:<environment: 0x55d305080ac8> 
[10:58:50.781]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.781]  - attr(*, "where")=List of 2
[10:58:50.781]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:50.781]   ..$ ...          :<environment: 0x55d30507cfe8> 
[10:58:50.781]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.781]  - attr(*, "resolved")= logi FALSE
[10:58:50.781]  - attr(*, "total_size")= num 3918
[10:58:50.784] Packages to be attached in all futures: [n=0] 
[10:58:50.784] getGlobalsAndPackagesXApply() ... DONE
[10:58:50.784] Number of futures (= number of chunks): 1
[10:58:50.784] Launching 1 futures (chunks) ...
[10:58:50.784] Chunk #1 of 1 ...
[10:58:50.784]  - Finding globals in 'X' for chunk #1 ...
[10:58:50.785]    + additional globals found: [n=0] 
[10:58:50.785]    + additional namespaces needed: [n=0] 
[10:58:50.785]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:50.785]  - seeds: <none>
[10:58:50.785]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:50.801] Created future:
[10:58:50.802] MultisessionFuture:
[10:58:50.802] Label: ‘future_lapply-1’
[10:58:50.802] Expression:
[10:58:50.802] {
[10:58:50.802]     do.call(function(...) {
[10:58:50.802]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:50.802]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:50.802]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:50.802]             on.exit(options(oopts), add = TRUE)
[10:58:50.802]         }
[10:58:50.802]         {
[10:58:50.802]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:50.802]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:50.802]                 ...future.FUN(...future.X_jj, ...)
[10:58:50.802]             })
[10:58:50.802]         }
[10:58:50.802]     }, args = future.call.arguments)
[10:58:50.802] }
[10:58:50.802] Lazy evaluation: FALSE
[10:58:50.802] Asynchronous evaluation: TRUE
[10:58:50.802] Local evaluation: TRUE
[10:58:50.802] Environment: R_GlobalEnv
[10:58:50.802] Capture standard output: TRUE
[10:58:50.802] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:50.802] Globals: 5 objects totaling 708 bytes (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:50.802] Packages: <none>
[10:58:50.802] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:50.802] Resolved: FALSE
[10:58:50.802] Value: <not collected>
[10:58:50.802] Conditions captured: <none>
[10:58:50.802] Early signaling: FALSE
[10:58:50.802] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:50.802] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:50.813] Chunk #1 of 1 ... DONE
[10:58:50.813] Launching 1 futures (chunks) ... DONE
[10:58:50.813] Resolving 1 futures (chunks) ...
[10:58:50.843]  - Number of value chunks collected: 1
[10:58:50.844] Resolving 1 futures (chunks) ... DONE
[10:58:50.844] Reducing values from 1 chunks ...
[10:58:50.844]  - Number of values collected after concatenation: 1
[10:58:50.844]  - Number of values expected: 1
[10:58:50.844] Reducing values from 1 chunks ... DONE
[10:58:50.844] future_lapply() ... DONE
[10:58:50.844] future_lapply() ...
[10:58:50.846] Number of chunks: 1
[10:58:50.854] getGlobalsAndPackagesXApply() ...
[10:58:50.854]  - future.globals: TRUE
[10:58:50.857]  - globals found/used: [n=1] ‘FUN’
[10:58:50.857]  - needed namespaces: [n=0] 
[10:58:50.857] Finding globals ... DONE
[10:58:50.857]  - use_args: TRUE
[10:58:50.857]  - Getting '...' globals ...
[10:58:50.857]    - '...' content: [n=1] ‘b’
[10:58:50.857] List of 1
[10:58:50.857]  $ ...:List of 1
[10:58:50.857]   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[10:58:50.857]   .. .. ..@ slots     :List of 4
[10:58:50.857]   .. .. .. ..$ .Data  : chr "function"
[10:58:50.857]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. ..$ target : chr "signature"
[10:58:50.857]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. ..$ defined: chr "signature"
[10:58:50.857]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. ..$ generic: chr "character"
[10:58:50.857]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. ..@ contains  :List of 3
[10:58:50.857]   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "function"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.857]   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.857]   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr "function"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 2
[10:58:50.857]   .. .. ..@ virtual   : logi FALSE
[10:58:50.857]   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[10:58:50.857]  list()
[10:58:50.857]   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[10:58:50.857]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:50.857]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:50.857]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:50.857]   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[10:58:50.857]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:50.857]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:50.857]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:50.857]   .. .. .. .. ..$ generic: chr(0) 
[10:58:50.857]   .. .. ..@ validity  : NULL
[10:58:50.857]   .. .. ..@ access    : list()
[10:58:50.857]   .. .. ..@ className : chr "MethodDefinition"
[10:58:50.857]   .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. ..@ subclasses:List of 7
[10:58:50.857]   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.857]   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.857]   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.857]   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.857]   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 2
[10:58:50.857]   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 2
[10:58:50.857]   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.857]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.857]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.857]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.857]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.857]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:50.857]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.857]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.857]   .. .. .. .. .. ..@ distance  : num 2
[10:58:50.857]   .. .. ..@ versionKey:<externalptr> 
[10:58:50.857]   .. .. ..@ sealed    : logi TRUE
[10:58:50.857]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.857]  - attr(*, "where")=List of 1
[10:58:50.857]   ..$ ...:<environment: 0x55d308d74228> 
[10:58:50.857]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.857]  - attr(*, "resolved")= logi TRUE
[10:58:50.857]  - attr(*, "total_size")= num NA
[10:58:50.903]  - Getting '...' globals ... DONE
[10:58:50.903] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:50.903] List of 2
[10:58:50.903]  $ ...future.FUN:function (a, b)  
[10:58:50.903]  $ ...          :List of 1
[10:58:50.903]   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[10:58:50.903]   .. .. ..@ slots     :List of 4
[10:58:50.903]   .. .. .. ..$ .Data  : chr "function"
[10:58:50.903]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. ..$ target : chr "signature"
[10:58:50.903]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. ..$ defined: chr "signature"
[10:58:50.903]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. ..$ generic: chr "character"
[10:58:50.903]   .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. ..@ contains  :List of 3
[10:58:50.903]   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "function"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.903]   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.903]   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr "function"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 2
[10:58:50.903]   .. .. ..@ virtual   : logi FALSE
[10:58:50.903]   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[10:58:50.903]  list()
[10:58:50.903]   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[10:58:50.903]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:50.903]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:50.903]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:50.903]   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[10:58:50.903]   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[10:58:50.903]   .. .. .. .. .. .. ..@ names  : chr(0) 
[10:58:50.903]   .. .. .. .. .. .. ..@ package: chr(0) 
[10:58:50.903]   .. .. .. .. ..$ generic: chr(0) 
[10:58:50.903]   .. .. ..@ validity  : NULL
[10:58:50.903]   .. .. ..@ access    : list()
[10:58:50.903]   .. .. ..@ className : chr "MethodDefinition"
[10:58:50.903]   .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. ..@ subclasses:List of 7
[10:58:50.903]   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.903]   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.903]   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.903]   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr(0) 
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 1
[10:58:50.903]   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 2
[10:58:50.903]   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 2
[10:58:50.903]   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[10:58:50.903]   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ package   : chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[10:58:50.903]   .. .. .. .. .. ..@ test      :function (object)  
[10:58:50.903]   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[10:58:50.903]   .. .. .. .. .. ..@ simple    : logi TRUE
[10:58:50.903]   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[10:58:50.903]   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[10:58:50.903]   .. .. .. .. .. ..@ dataPart  : logi FALSE
[10:58:50.903]   .. .. .. .. .. ..@ distance  : num 2
[10:58:50.903]   .. .. ..@ versionKey:<externalptr> 
[10:58:50.903]   .. .. ..@ sealed    : logi TRUE
[10:58:50.903]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:50.903]  - attr(*, "where")=List of 2
[10:58:50.903]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:50.903]   ..$ ...          :<environment: 0x55d308d74228> 
[10:58:50.903]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:50.903]  - attr(*, "resolved")= logi FALSE
[10:58:50.903]  - attr(*, "total_size")= num 97748
[10:58:50.948] Packages to be attached in all futures: [n=0] 
[10:58:50.948] getGlobalsAndPackagesXApply() ... DONE
[10:58:50.948] Number of futures (= number of chunks): 1
[10:58:50.948] Launching 1 futures (chunks) ...
[10:58:50.948] Chunk #1 of 1 ...
[10:58:50.948]  - Finding globals in 'X' for chunk #1 ...
[10:58:50.949]    + additional globals found: [n=0] 
[10:58:50.949]    + additional namespaces needed: [n=0] 
[10:58:50.949]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:50.949]  - seeds: <none>
[10:58:50.949]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.008] Created future:
[10:58:51.008] MultisessionFuture:
[10:58:51.008] Label: ‘future_lapply-1’
[10:58:51.008] Expression:
[10:58:51.008] {
[10:58:51.008]     do.call(function(...) {
[10:58:51.008]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.008]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.008]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.008]             on.exit(options(oopts), add = TRUE)
[10:58:51.008]         }
[10:58:51.008]         {
[10:58:51.008]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.008]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.008]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.008]             })
[10:58:51.008]         }
[10:58:51.008]     }, args = future.call.arguments)
[10:58:51.008] }
[10:58:51.008] Lazy evaluation: FALSE
[10:58:51.008] Asynchronous evaluation: TRUE
[10:58:51.008] Local evaluation: TRUE
[10:58:51.008] Environment: R_GlobalEnv
[10:58:51.008] Capture standard output: TRUE
[10:58:51.008] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.008] Globals: 5 objects totaling 46.83 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 46.42 KiB, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:51.008] Packages: <none>
[10:58:51.008] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.008] Resolved: FALSE
[10:58:51.008] Value: <not collected>
[10:58:51.008] Conditions captured: <none>
[10:58:51.008] Early signaling: FALSE
[10:58:51.008] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.008] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.020] Chunk #1 of 1 ... DONE
[10:58:51.020] Launching 1 futures (chunks) ... DONE
[10:58:51.020] Resolving 1 futures (chunks) ...
[10:58:51.050]  - Number of value chunks collected: 1
[10:58:51.051] Resolving 1 futures (chunks) ... DONE
[10:58:51.051] Reducing values from 1 chunks ...
[10:58:51.051]  - Number of values collected after concatenation: 1
[10:58:51.051]  - Number of values expected: 1
[10:58:51.051] Reducing values from 1 chunks ... DONE
[10:58:51.051] future_lapply() ... DONE
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[10:58:51.053] future_lapply() ...
[10:58:51.055] Number of chunks: 2
[10:58:51.055] getGlobalsAndPackagesXApply() ...
[10:58:51.055]  - future.globals: TRUE
[10:58:51.056]  - globals found/used: [n=1] ‘FUN’
[10:58:51.056]  - needed namespaces: [n=0] 
[10:58:51.056] Finding globals ... DONE
[10:58:51.056]  - use_args: TRUE
[10:58:51.057]  - Getting '...' globals ...
[10:58:51.057]    - '...' content: [n=0] 
[10:58:51.057] List of 1
[10:58:51.057]  $ ...: list()
[10:58:51.057]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.057]  - attr(*, "where")=List of 1
[10:58:51.057]   ..$ ...:<environment: 0x55d308cc0e60> 
[10:58:51.057]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.057]  - attr(*, "resolved")= logi TRUE
[10:58:51.057]  - attr(*, "total_size")= num NA
[10:58:51.059]  - Getting '...' globals ... DONE
[10:58:51.059] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:51.059] List of 2
[10:58:51.059]  $ ...future.FUN:function (f)  
[10:58:51.059]  $ ...          : list()
[10:58:51.059]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.059]  - attr(*, "where")=List of 2
[10:58:51.059]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:51.059]   ..$ ...          :<environment: 0x55d308cc0e60> 
[10:58:51.059]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.059]  - attr(*, "resolved")= logi FALSE
[10:58:51.059]  - attr(*, "total_size")= num 4837
[10:58:51.062] Packages to be attached in all futures: [n=0] 
[10:58:51.062] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.062] Number of futures (= number of chunks): 2
[10:58:51.062] Launching 2 futures (chunks) ...
[10:58:51.063] Chunk #1 of 2 ...
[10:58:51.063]  - Finding globals in 'X' for chunk #1 ...
[10:58:51.064]    + additional globals found: [n=2] ‘a’, ‘b’
[10:58:51.064]    + additional namespaces needed: [n=0] 
[10:58:51.064]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:51.065]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:51.065]  - seeds: <none>
[10:58:51.065]  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[10:58:51.082] Created future:
[10:58:51.082] MultisessionFuture:
[10:58:51.082] Label: ‘future_lapply-1’
[10:58:51.082] Expression:
[10:58:51.082] {
[10:58:51.082]     do.call(function(...) {
[10:58:51.082]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.082]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.082]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.082]             on.exit(options(oopts), add = TRUE)
[10:58:51.082]         }
[10:58:51.082]         {
[10:58:51.082]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.082]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.082]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.082]             })
[10:58:51.082]         }
[10:58:51.082]     }, args = future.call.arguments)
[10:58:51.082] }
[10:58:51.082] Lazy evaluation: FALSE
[10:58:51.082] Asynchronous evaluation: TRUE
[10:58:51.082] Local evaluation: TRUE
[10:58:51.082] Environment: R_GlobalEnv
[10:58:51.082] Capture standard output: TRUE
[10:58:51.082] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.082] Globals: 7 objects totaling 1.02 KiB (function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 588 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes, ...)
[10:58:51.082] Packages: <none>
[10:58:51.082] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.082] Resolved: FALSE
[10:58:51.082] Value: <not collected>
[10:58:51.082] Conditions captured: <none>
[10:58:51.082] Early signaling: FALSE
[10:58:51.082] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.082] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.093] Chunk #1 of 2 ... DONE
[10:58:51.094] Chunk #2 of 2 ...
[10:58:51.094]  - Finding globals in 'X' for chunk #2 ...
[10:58:51.095]    + additional globals found: [n=2] ‘a’, ‘b’
[10:58:51.095]    + additional namespaces needed: [n=1] ‘tools’
[10:58:51.096]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:51.096]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:51.096]  - seeds: <none>
[10:58:51.096]  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[10:58:51.126] Created future:
[10:58:51.126] MultisessionFuture:
[10:58:51.126] Label: ‘future_lapply-2’
[10:58:51.126] Expression:
[10:58:51.126] {
[10:58:51.126]     do.call(function(...) {
[10:58:51.126]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.126]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.126]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.126]             on.exit(options(oopts), add = TRUE)
[10:58:51.126]         }
[10:58:51.126]         {
[10:58:51.126]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.126]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.126]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.126]             })
[10:58:51.126]         }
[10:58:51.126]     }, args = future.call.arguments)
[10:58:51.126] }
[10:58:51.126] Lazy evaluation: FALSE
[10:58:51.126] Asynchronous evaluation: TRUE
[10:58:51.126] Local evaluation: TRUE
[10:58:51.126] Environment: R_GlobalEnv
[10:58:51.126] Capture standard output: TRUE
[10:58:51.126] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.126] Globals: 7 objects totaling 1.33 KiB (function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 903 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes, ...)
[10:58:51.126] Packages: 1 packages (‘tools’)
[10:58:51.126] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.126] Resolved: FALSE
[10:58:51.126] Value: <not collected>
[10:58:51.126] Conditions captured: <none>
[10:58:51.126] Early signaling: FALSE
[10:58:51.126] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.126] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.138] Chunk #2 of 2 ... DONE
[10:58:51.138] Launching 2 futures (chunks) ... DONE
[10:58:51.138] Resolving 2 futures (chunks) ...
[10:58:51.181]  - Number of value chunks collected: 2
[10:58:51.181] Resolving 2 futures (chunks) ... DONE
[10:58:51.181] Reducing values from 2 chunks ...
[10:58:51.181]  - Number of values collected after concatenation: 4
[10:58:51.181]  - Number of values expected: 4
[10:58:51.181] Reducing values from 2 chunks ... DONE
[10:58:51.182] future_lapply() ... DONE
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(x, ...) - passing '...' as a global ...
List of 1
 $ z0:List of 1
  ..$ :List of 1
  .. ..$ a: num 1
[10:58:51.184] future_lapply() ...
[10:58:51.186] Number of chunks: 1
[10:58:51.186] getGlobalsAndPackagesXApply() ...
[10:58:51.186]  - future.globals: TRUE
[10:58:51.188]  - globals found/used: [n=2] ‘FUN’, ‘future.call.arguments’
[10:58:51.188]  - needed namespaces: [n=0] 
[10:58:51.188] Finding globals ... DONE
[10:58:51.188]  - use_args: TRUE
[10:58:51.189]  - Getting '...' globals ...
[10:58:51.189]    - '...' content: [n=0] 
[10:58:51.189] List of 1
[10:58:51.189]  $ ...: list()
[10:58:51.189]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.189]  - attr(*, "where")=List of 1
[10:58:51.189]   ..$ ...:<environment: 0x55d307361718> 
[10:58:51.189]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.189]  - attr(*, "resolved")= logi TRUE
[10:58:51.189]  - attr(*, "total_size")= num NA
[10:58:51.191]  - Getting '...' globals ... DONE
[10:58:51.191] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[10:58:51.191] List of 3
[10:58:51.191]  $ ...future.FUN        :function (x)  
[10:58:51.191]  $ future.call.arguments:List of 1
[10:58:51.191]   ..$ a: num 1
[10:58:51.191]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.191]  $ ...                  : list()
[10:58:51.191]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.191]  - attr(*, "where")=List of 3
[10:58:51.191]   ..$ ...future.FUN        :<environment: R_EmptyEnv> 
[10:58:51.191]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:58:51.191]   ..$ ...                  :<environment: 0x55d307361718> 
[10:58:51.191]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.191]  - attr(*, "resolved")= logi FALSE
[10:58:51.191]  - attr(*, "total_size")= num 3563
[10:58:51.195] Packages to be attached in all futures: [n=0] 
[10:58:51.195] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.195] Number of futures (= number of chunks): 1
[10:58:51.195] Launching 1 futures (chunks) ...
[10:58:51.196] Chunk #1 of 1 ...
[10:58:51.196]  - Finding globals in 'X' for chunk #1 ...
[10:58:51.196]    + additional globals found: [n=0] 
[10:58:51.196]    + additional namespaces needed: [n=0] 
[10:58:51.196]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:51.196]  - seeds: <none>
[10:58:51.196]  - All globals exported: [n=6] ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.214] Created future:
[10:58:51.214] MultisessionFuture:
[10:58:51.214] Label: ‘future_lapply-1’
[10:58:51.214] Expression:
[10:58:51.214] {
[10:58:51.214]     do.call(function(...) {
[10:58:51.214]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.214]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.214]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.214]             on.exit(options(oopts), add = TRUE)
[10:58:51.214]         }
[10:58:51.214]         {
[10:58:51.214]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.214]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.214]                 ...future.FUN(...future.X_jj)
[10:58:51.214]             })
[10:58:51.214]         }
[10:58:51.214]     }, args = future.call.arguments)
[10:58:51.214] }
[10:58:51.214] Lazy evaluation: FALSE
[10:58:51.214] Asynchronous evaluation: TRUE
[10:58:51.214] Local evaluation: TRUE
[10:58:51.214] Environment: 0x55d307361398
[10:58:51.214] Capture standard output: TRUE
[10:58:51.214] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.214] Globals: 5 objects totaling 613 bytes (function ‘...future.FUN’ of 361 bytes, DotDotDotList ‘future.call.arguments’ of 151 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:51.214] Packages: <none>
[10:58:51.214] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.214] Resolved: FALSE
[10:58:51.214] Value: <not collected>
[10:58:51.214] Conditions captured: <none>
[10:58:51.214] Early signaling: FALSE
[10:58:51.214] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.214] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.225] Chunk #1 of 1 ... DONE
[10:58:51.225] Launching 1 futures (chunks) ... DONE
[10:58:51.226] Resolving 1 futures (chunks) ...
[10:58:51.257]  - Number of value chunks collected: 1
[10:58:51.257] Resolving 1 futures (chunks) ... DONE
[10:58:51.257] Reducing values from 1 chunks ...
[10:58:51.257]  - Number of values collected after concatenation: 1
[10:58:51.257]  - Number of values expected: 1
[10:58:51.257] Reducing values from 1 chunks ... DONE
[10:58:51.257] future_lapply() ... DONE
List of 1
 $ z1:List of 1
  ..$ :List of 1
  .. ..$ a: num 1
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[10:58:51.258] future_lapply() ...
[10:58:51.260] Number of chunks: 1
[10:58:51.260] getGlobalsAndPackagesXApply() ...
[10:58:51.260]  - future.globals: TRUE
[10:58:51.262]  - globals found/used: [n=2] ‘FUN’, ‘a’
[10:58:51.262]  - needed namespaces: [n=0] 
[10:58:51.262] Finding globals ... DONE
[10:58:51.263]  - use_args: TRUE
[10:58:51.263]  - Getting '...' globals ...
[10:58:51.263]    - '...' content: [n=0] 
[10:58:51.263] List of 1
[10:58:51.263]  $ ...: list()
[10:58:51.263]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.263]  - attr(*, "where")=List of 1
[10:58:51.263]   ..$ ...:<environment: 0x55d308c6faf8> 
[10:58:51.263]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.263]  - attr(*, "resolved")= logi TRUE
[10:58:51.263]  - attr(*, "total_size")= num NA
[10:58:51.265]  - Getting '...' globals ... DONE
[10:58:51.265] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[10:58:51.265] List of 3
[10:58:51.265]  $ ...future.FUN:function (ii)  
[10:58:51.265]  $ a            : num 1
[10:58:51.265]  $ ...          : list()
[10:58:51.265]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.265]  - attr(*, "where")=List of 3
[10:58:51.265]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:51.265]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:51.265]   ..$ ...          :<environment: 0x55d308c6faf8> 
[10:58:51.265]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.265]  - attr(*, "resolved")= logi FALSE
[10:58:51.265]  - attr(*, "total_size")= num 3759
[10:58:51.269] Packages to be attached in all futures: [n=0] 
[10:58:51.269] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.269] Number of futures (= number of chunks): 1
[10:58:51.269] Launching 1 futures (chunks) ...
[10:58:51.269] Chunk #1 of 1 ...
[10:58:51.269]  - Finding globals in 'X' for chunk #1 ...
[10:58:51.269]    + additional globals found: [n=0] 
[10:58:51.269]    + additional namespaces needed: [n=0] 
[10:58:51.270]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:51.270]  - seeds: <none>
[10:58:51.270]  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.286] Created future:
[10:58:51.287] MultisessionFuture:
[10:58:51.287] Label: ‘future_lapply-1’
[10:58:51.287] Expression:
[10:58:51.287] {
[10:58:51.287]     do.call(function(...) {
[10:58:51.287]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.287]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.287]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.287]             on.exit(options(oopts), add = TRUE)
[10:58:51.287]         }
[10:58:51.287]         {
[10:58:51.287]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.287]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.287]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.287]             })
[10:58:51.287]         }
[10:58:51.287]     }, args = future.call.arguments)
[10:58:51.287] }
[10:58:51.287] Lazy evaluation: FALSE
[10:58:51.287] Asynchronous evaluation: TRUE
[10:58:51.287] Local evaluation: TRUE
[10:58:51.287] Environment: R_GlobalEnv
[10:58:51.287] Capture standard output: TRUE
[10:58:51.287] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.287] Globals: 6 objects totaling 748 bytes (function ‘...future.FUN’ of 511 bytes, numeric ‘a’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:51.287] Packages: <none>
[10:58:51.287] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.287] Resolved: FALSE
[10:58:51.287] Value: <not collected>
[10:58:51.287] Conditions captured: <none>
[10:58:51.287] Early signaling: FALSE
[10:58:51.287] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.287] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.300] Chunk #1 of 1 ... DONE
[10:58:51.300] Launching 1 futures (chunks) ... DONE
[10:58:51.300] Resolving 1 futures (chunks) ...
[10:58:51.328]  - Number of value chunks collected: 1
[10:58:51.329] Resolving 1 futures (chunks) ... DONE
[10:58:51.329] Reducing values from 1 chunks ...
[10:58:51.329]  - Number of values collected after concatenation: 1
[10:58:51.329]  - Number of values expected: 1
[10:58:51.329] Reducing values from 1 chunks ... DONE
[10:58:51.329] future_lapply() ... DONE
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[10:58:51.329] future_lapply() ...
[10:58:51.331] Number of chunks: 1
[10:58:51.331] getGlobalsAndPackagesXApply() ...
[10:58:51.331]  - future.globals: TRUE
[10:58:51.333]  - globals found/used: [n=2] ‘FUN’, ‘a’
[10:58:51.333]  - needed namespaces: [n=0] 
[10:58:51.333] Finding globals ... DONE
[10:58:51.333]  - use_args: TRUE
[10:58:51.333]  - Getting '...' globals ...
[10:58:51.334]    - '...' content: [n=0] 
[10:58:51.334] List of 1
[10:58:51.334]  $ ...: list()
[10:58:51.334]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.334]  - attr(*, "where")=List of 1
[10:58:51.334]   ..$ ...:<environment: 0x55d307c808e0> 
[10:58:51.334]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.334]  - attr(*, "resolved")= logi TRUE
[10:58:51.334]  - attr(*, "total_size")= num NA
[10:58:51.336]  - Getting '...' globals ... DONE
[10:58:51.336] Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[10:58:51.336] List of 3
[10:58:51.336]  $ ...future.FUN:function (ii)  
[10:58:51.336]  $ a            : num 1
[10:58:51.336]  $ ...          : list()
[10:58:51.336]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.336]  - attr(*, "where")=List of 3
[10:58:51.336]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:51.336]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:51.336]   ..$ ...          :<environment: 0x55d307c808e0> 
[10:58:51.336]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.336]  - attr(*, "resolved")= logi FALSE
[10:58:51.336]  - attr(*, "total_size")= num 3775
[10:58:51.339] Packages to be attached in all futures: [n=0] 
[10:58:51.339] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.340] Number of futures (= number of chunks): 1
[10:58:51.340] Launching 1 futures (chunks) ...
[10:58:51.340] Chunk #1 of 1 ...
[10:58:51.340]  - Finding globals in 'X' for chunk #1 ...
[10:58:51.340]    + additional globals found: [n=0] 
[10:58:51.340]    + additional namespaces needed: [n=0] 
[10:58:51.340]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:51.340]  - seeds: <none>
[10:58:51.341]  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.358] Created future:
[10:58:51.358] MultisessionFuture:
[10:58:51.358] Label: ‘future_lapply-1’
[10:58:51.358] Expression:
[10:58:51.358] {
[10:58:51.358]     do.call(function(...) {
[10:58:51.358]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.358]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.358]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.358]             on.exit(options(oopts), add = TRUE)
[10:58:51.358]         }
[10:58:51.358]         {
[10:58:51.358]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.358]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.358]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.358]             })
[10:58:51.358]         }
[10:58:51.358]     }, args = future.call.arguments)
[10:58:51.358] }
[10:58:51.358] Lazy evaluation: FALSE
[10:58:51.358] Asynchronous evaluation: TRUE
[10:58:51.358] Local evaluation: TRUE
[10:58:51.358] Environment: R_GlobalEnv
[10:58:51.358] Capture standard output: TRUE
[10:58:51.358] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.358] Globals: 6 objects totaling 756 bytes (function ‘...future.FUN’ of 519 bytes, numeric ‘a’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:51.358] Packages: <none>
[10:58:51.358] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.358] Resolved: FALSE
[10:58:51.358] Value: <not collected>
[10:58:51.358] Conditions captured: <none>
[10:58:51.358] Early signaling: FALSE
[10:58:51.358] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.358] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.370] Chunk #1 of 1 ... DONE
[10:58:51.370] Launching 1 futures (chunks) ... DONE
[10:58:51.370] Resolving 1 futures (chunks) ...
[10:58:51.400]  - Number of value chunks collected: 1
[10:58:51.401] Resolving 1 futures (chunks) ... DONE
[10:58:51.401] Reducing values from 1 chunks ...
[10:58:51.401]  - Number of values collected after concatenation: 1
[10:58:51.401]  - Number of values expected: 1
[10:58:51.401] Reducing values from 1 chunks ... DONE
[10:58:51.401] future_lapply() ... DONE
- future_lapply(..., future.globals = <list>) ...
[10:58:51.401] future_lapply() ...
[10:58:51.403] Number of chunks: 1
[10:58:51.403] getGlobalsAndPackagesXApply() ...
[10:58:51.403]  - future.globals: <name-value list> with names ‘42’
[10:58:51.403]  - use_args: TRUE
[10:58:51.403]  - Getting '...' globals ...
[10:58:51.404]    - '...' content: [n=0] 
[10:58:51.404] List of 1
[10:58:51.404]  $ ...: list()
[10:58:51.404]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.404]  - attr(*, "where")=List of 1
[10:58:51.404]   ..$ ...:<environment: 0x55d30503f898> 
[10:58:51.404]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.404]  - attr(*, "resolved")= logi TRUE
[10:58:51.404]  - attr(*, "total_size")= num NA
[10:58:51.406]  - Getting '...' globals ... DONE
[10:58:51.406] Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[10:58:51.406] List of 3
[10:58:51.406]  $ a            : num 42
[10:58:51.406]  $ ...future.FUN:function (x)  
[10:58:51.406]  $ ...          : list()
[10:58:51.406]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.406]  - attr(*, "where")=List of 3
[10:58:51.406]   ..$ a            :<environment: R_EmptyEnv> 
[10:58:51.406]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:58:51.406]   ..$ ...          :<environment: 0x55d30503f898> 
[10:58:51.406]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.406]  - attr(*, "resolved")= logi FALSE
[10:58:51.406]  - attr(*, "total_size")= num NA
[10:58:51.409] Packages to be attached in all futures: [n=0] 
[10:58:51.409] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.409] Number of futures (= number of chunks): 1
[10:58:51.409] Launching 1 futures (chunks) ...
[10:58:51.410] Chunk #1 of 1 ...
[10:58:51.410]  - seeds: <none>
[10:58:51.410]  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.427] Created future:
[10:58:51.427] MultisessionFuture:
[10:58:51.427] Label: ‘future_lapply-1’
[10:58:51.427] Expression:
[10:58:51.427] {
[10:58:51.427]     do.call(function(...) {
[10:58:51.427]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.427]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.427]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.427]             on.exit(options(oopts), add = TRUE)
[10:58:51.427]         }
[10:58:51.427]         {
[10:58:51.427]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.427]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.427]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.427]             })
[10:58:51.427]         }
[10:58:51.427]     }, args = future.call.arguments)
[10:58:51.427] }
[10:58:51.427] Lazy evaluation: FALSE
[10:58:51.427] Asynchronous evaluation: TRUE
[10:58:51.427] Local evaluation: TRUE
[10:58:51.427] Environment: R_GlobalEnv
[10:58:51.427] Capture standard output: TRUE
[10:58:51.427] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.427] Globals: 6 objects totaling 535 bytes (numeric ‘a’ of 39 bytes, function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[10:58:51.427] Packages: <none>
[10:58:51.427] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.427] Resolved: FALSE
[10:58:51.427] Value: <not collected>
[10:58:51.427] Conditions captured: <none>
[10:58:51.427] Early signaling: FALSE
[10:58:51.427] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.427] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.438] Chunk #1 of 1 ... DONE
[10:58:51.438] Launching 1 futures (chunks) ... DONE
[10:58:51.439] Resolving 1 futures (chunks) ...
[10:58:51.469]  - Number of value chunks collected: 1
[10:58:51.470] Resolving 1 futures (chunks) ... DONE
[10:58:51.470] Reducing values from 1 chunks ...
[10:58:51.470]  - Number of values collected after concatenation: 1
[10:58:51.470]  - Number of values expected: 1
[10:58:51.470] Reducing values from 1 chunks ... DONE
[10:58:51.470] future_lapply() ... DONE
List of 1
 $ : num 42
> 
> message("*** future_lapply() - tricky globals ... DONE")
*** future_lapply() - tricky globals ... DONE
> 
> 
> message("*** future_lapply() - missing arguments ...")
*** future_lapply() - missing arguments ...
> 
> ## Here 'abc' becomes missing, i.e. missing(abc) is TRUE
> foo <- function(x, abc) future_lapply(x, FUN = function(y) y)
> y <- foo(1:2)
[10:58:51.471] future_lapply() ...
[10:58:51.472] Number of chunks: 2
[10:58:51.473] getGlobalsAndPackagesXApply() ...
[10:58:51.473]  - future.globals: TRUE
[10:58:51.474]  - globals found/used: [n=1] ‘FUN’
[10:58:51.474]  - needed namespaces: [n=0] 
[10:58:51.474] Finding globals ... DONE
[10:58:51.474]  - use_args: TRUE
[10:58:51.474]  - Getting '...' globals ...
[10:58:51.475]    - '...' content: [n=0] 
[10:58:51.475] List of 1
[10:58:51.475]  $ ...: list()
[10:58:51.475]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.475]  - attr(*, "where")=List of 1
[10:58:51.475]   ..$ ...:<environment: 0x55d308b04820> 
[10:58:51.475]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.475]  - attr(*, "resolved")= logi TRUE
[10:58:51.475]  - attr(*, "total_size")= num NA
[10:58:51.477]  - Getting '...' globals ... DONE
[10:58:51.477] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:51.477] List of 2
[10:58:51.477]  $ ...future.FUN:function (y)  
[10:58:51.477]  $ ...          : list()
[10:58:51.477]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.477]  - attr(*, "where")=List of 2
[10:58:51.477]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:51.477]   ..$ ...          :<environment: 0x55d308b04820> 
[10:58:51.477]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.477]  - attr(*, "resolved")= logi FALSE
[10:58:51.477]  - attr(*, "total_size")= num 3388
[10:58:51.482] Packages to be attached in all futures: [n=0] 
[10:58:51.482] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.482] Number of futures (= number of chunks): 2
[10:58:51.482] Launching 2 futures (chunks) ...
[10:58:51.482] Chunk #1 of 2 ...
[10:58:51.482]  - Finding globals in 'X' for chunk #1 ...
[10:58:51.483]    + additional globals found: [n=0] 
[10:58:51.483]    + additional namespaces needed: [n=0] 
[10:58:51.483]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:51.483]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:51.483]  - seeds: <none>
[10:58:51.483]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.500] Created future:
[10:58:51.500] MultisessionFuture:
[10:58:51.500] Label: ‘future_lapply-1’
[10:58:51.500] Expression:
[10:58:51.500] {
[10:58:51.500]     do.call(function(...) {
[10:58:51.500]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.500]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.500]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.500]             on.exit(options(oopts), add = TRUE)
[10:58:51.500]         }
[10:58:51.500]         {
[10:58:51.500]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.500]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.500]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.500]             })
[10:58:51.500]         }
[10:58:51.500]     }, args = future.call.arguments)
[10:58:51.500] }
[10:58:51.500] Lazy evaluation: FALSE
[10:58:51.500] Asynchronous evaluation: TRUE
[10:58:51.500] Local evaluation: TRUE
[10:58:51.500] Environment: 0x55d308b04c10
[10:58:51.500] Capture standard output: TRUE
[10:58:51.500] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.500] Globals: 5 objects totaling 489 bytes (function ‘...future.FUN’ of 295 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:51.500] Packages: <none>
[10:58:51.500] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.500] Resolved: FALSE
[10:58:51.500] Value: <not collected>
[10:58:51.500] Conditions captured: <none>
[10:58:51.500] Early signaling: FALSE
[10:58:51.500] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.500] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.511] Chunk #1 of 2 ... DONE
[10:58:51.511] Chunk #2 of 2 ...
[10:58:51.511]  - Finding globals in 'X' for chunk #2 ...
[10:58:51.512]    + additional globals found: [n=0] 
[10:58:51.512]    + additional namespaces needed: [n=0] 
[10:58:51.512]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:51.512]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:51.512]  - seeds: <none>
[10:58:51.512]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.529] Created future:
[10:58:51.529] MultisessionFuture:
[10:58:51.529] Label: ‘future_lapply-2’
[10:58:51.529] Expression:
[10:58:51.529] {
[10:58:51.529]     do.call(function(...) {
[10:58:51.529]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.529]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.529]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.529]             on.exit(options(oopts), add = TRUE)
[10:58:51.529]         }
[10:58:51.529]         {
[10:58:51.529]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.529]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.529]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.529]             })
[10:58:51.529]         }
[10:58:51.529]     }, args = future.call.arguments)
[10:58:51.529] }
[10:58:51.529] Lazy evaluation: FALSE
[10:58:51.529] Asynchronous evaluation: TRUE
[10:58:51.529] Local evaluation: TRUE
[10:58:51.529] Environment: 0x55d308b04c10
[10:58:51.529] Capture standard output: TRUE
[10:58:51.529] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.529] Globals: 5 objects totaling 489 bytes (function ‘...future.FUN’ of 295 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:51.529] Packages: <none>
[10:58:51.529] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.529] Resolved: FALSE
[10:58:51.529] Value: <not collected>
[10:58:51.529] Conditions captured: <none>
[10:58:51.529] Early signaling: FALSE
[10:58:51.529] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.529] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.540] Chunk #2 of 2 ... DONE
[10:58:51.541] Launching 2 futures (chunks) ... DONE
[10:58:51.541] Resolving 2 futures (chunks) ...
[10:58:51.572]  - Number of value chunks collected: 2
[10:58:51.572] Resolving 2 futures (chunks) ... DONE
[10:58:51.572] Reducing values from 2 chunks ...
[10:58:51.572]  - Number of values collected after concatenation: 2
[10:58:51.572]  - Number of values expected: 2
[10:58:51.572] Reducing values from 2 chunks ... DONE
[10:58:51.572] future_lapply() ... DONE
> stopifnot(identical(y, as.list(1:2)))
> 
> message("*** future_lapply() - missing arguments ... DONE")
*** future_lapply() - missing arguments ... DONE
> 
> 
> message("*** future_lapply() - false positives ...")
*** future_lapply() - false positives ...
> 
> ## Here 'abc' becomes a promise, which fails to resolve
> ## iff 'xyz' does not exist. (Issue #161)
> suppressWarnings(rm(list = "xyz"))
> foo <- function(x, abc) future_lapply(x, FUN = function(y) y)
> y <- foo(1:2, abc = (xyz >= 3.14))
[10:58:51.573] future_lapply() ...
[10:58:51.575] Number of chunks: 2
[10:58:51.575] getGlobalsAndPackagesXApply() ...
[10:58:51.575]  - future.globals: TRUE
[10:58:51.576]  - globals found/used: [n=1] ‘FUN’
[10:58:51.576]  - needed namespaces: [n=0] 
[10:58:51.576] Finding globals ... DONE
[10:58:51.576]  - use_args: TRUE
[10:58:51.576]  - Getting '...' globals ...
[10:58:51.577]    - '...' content: [n=0] 
[10:58:51.577] List of 1
[10:58:51.577]  $ ...: list()
[10:58:51.577]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.577]  - attr(*, "where")=List of 1
[10:58:51.577]   ..$ ...:<environment: 0x55d3064f0cc8> 
[10:58:51.577]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.577]  - attr(*, "resolved")= logi TRUE
[10:58:51.577]  - attr(*, "total_size")= num NA
[10:58:51.579]  - Getting '...' globals ... DONE
[10:58:51.579] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:51.579] List of 2
[10:58:51.579]  $ ...future.FUN:function (y)  
[10:58:51.579]  $ ...          : list()
[10:58:51.579]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.579]  - attr(*, "where")=List of 2
[10:58:51.579]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:51.579]   ..$ ...          :<environment: 0x55d3064f0cc8> 
[10:58:51.579]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.579]  - attr(*, "resolved")= logi FALSE
[10:58:51.579]  - attr(*, "total_size")= num 3576
[10:58:51.582] Packages to be attached in all futures: [n=0] 
[10:58:51.582] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.582] Number of futures (= number of chunks): 2
[10:58:51.582] Launching 2 futures (chunks) ...
[10:58:51.582] Chunk #1 of 2 ...
[10:58:51.583]  - Finding globals in 'X' for chunk #1 ...
[10:58:51.583]    + additional globals found: [n=0] 
[10:58:51.583]    + additional namespaces needed: [n=0] 
[10:58:51.583]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:51.583]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:51.583]  - seeds: <none>
[10:58:51.583]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.600] Created future:
[10:58:51.600] MultisessionFuture:
[10:58:51.600] Label: ‘future_lapply-1’
[10:58:51.600] Expression:
[10:58:51.600] {
[10:58:51.600]     do.call(function(...) {
[10:58:51.600]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.600]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.600]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.600]             on.exit(options(oopts), add = TRUE)
[10:58:51.600]         }
[10:58:51.600]         {
[10:58:51.600]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.600]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.600]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.600]             })
[10:58:51.600]         }
[10:58:51.600]     }, args = future.call.arguments)
[10:58:51.600] }
[10:58:51.600] Lazy evaluation: FALSE
[10:58:51.600] Asynchronous evaluation: TRUE
[10:58:51.600] Local evaluation: TRUE
[10:58:51.600] Environment: 0x55d3064f08d8
[10:58:51.600] Capture standard output: TRUE
[10:58:51.600] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.600] Globals: 5 objects totaling 583 bytes (function ‘...future.FUN’ of 389 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:51.600] Packages: <none>
[10:58:51.600] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.600] Resolved: FALSE
[10:58:51.600] Value: <not collected>
[10:58:51.600] Conditions captured: <none>
[10:58:51.600] Early signaling: FALSE
[10:58:51.600] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.600] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.611] Chunk #1 of 2 ... DONE
[10:58:51.612] Chunk #2 of 2 ...
[10:58:51.612]  - Finding globals in 'X' for chunk #2 ...
[10:58:51.612]    + additional globals found: [n=0] 
[10:58:51.612]    + additional namespaces needed: [n=0] 
[10:58:51.612]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:51.612]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:51.612]  - seeds: <none>
[10:58:51.612]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.629] Created future:
[10:58:51.629] MultisessionFuture:
[10:58:51.629] Label: ‘future_lapply-2’
[10:58:51.629] Expression:
[10:58:51.629] {
[10:58:51.629]     do.call(function(...) {
[10:58:51.629]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.629]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.629]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.629]             on.exit(options(oopts), add = TRUE)
[10:58:51.629]         }
[10:58:51.629]         {
[10:58:51.629]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.629]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.629]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.629]             })
[10:58:51.629]         }
[10:58:51.629]     }, args = future.call.arguments)
[10:58:51.629] }
[10:58:51.629] Lazy evaluation: FALSE
[10:58:51.629] Asynchronous evaluation: TRUE
[10:58:51.629] Local evaluation: TRUE
[10:58:51.629] Environment: 0x55d3064f08d8
[10:58:51.629] Capture standard output: TRUE
[10:58:51.629] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.629] Globals: 5 objects totaling 583 bytes (function ‘...future.FUN’ of 389 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:51.629] Packages: <none>
[10:58:51.629] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.629] Resolved: FALSE
[10:58:51.629] Value: <not collected>
[10:58:51.629] Conditions captured: <none>
[10:58:51.629] Early signaling: FALSE
[10:58:51.629] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.629] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.641] Chunk #2 of 2 ... DONE
[10:58:51.641] Launching 2 futures (chunks) ... DONE
[10:58:51.641] Resolving 2 futures (chunks) ...
[10:58:51.671]  - Number of value chunks collected: 2
[10:58:51.672] Resolving 2 futures (chunks) ... DONE
[10:58:51.672] Reducing values from 2 chunks ...
[10:58:51.672]  - Number of values collected after concatenation: 2
[10:58:51.672]  - Number of values expected: 2
[10:58:51.672] Reducing values from 2 chunks ... DONE
[10:58:51.672] future_lapply() ... DONE
> stopifnot(identical(y, as.list(1:2)))
> 
> message("*** future_lapply() - false positives ... DONE")
*** future_lapply() - false positives ... DONE
> 
> 
> message("*** future_lapply() - too large ...")
*** future_lapply() - too large ...
> 
> oMaxSize <- getOption("future.globals.maxSize")
> X <- replicate(10L, 1:100, simplify = FALSE)
> FUN <- function(x) {
+   getOption("future.globals.maxSize")
+ }
> 
> y0 <- lapply(X, FUN = FUN)
> stopifnot(all(sapply(y0, FUN = identical, oMaxSize)))
> 
> sizes <- unclass(c(FUN = object.size(FUN), X = object.size(X)))
> cat(sprintf("Baseline size of globals: %.2f KiB\n", sizes[["FUN"]] / 1024))
Baseline size of globals: 1.80 KiB
> 
> message("- true positive ...")
- true positive ...
> options(future.globals.maxSize = 1L)
> res <- tryCatch({
+   y <- future_lapply(X, FUN = FUN)
+ }, error = identity)
[10:58:51.674] future_lapply() ...
[10:58:51.678] Number of chunks: 2
[10:58:51.678] getGlobalsAndPackagesXApply() ...
[10:58:51.678]  - future.globals: TRUE
[10:58:51.680] getGlobalsAndPackagesXApply() ... DONE
> stopifnot(inherits(res, "error"))
> res <- NULL
> options(future.globals.maxSize = oMaxSize)
> 
> maxSize <- getOption("future.globals.maxSize")
> y <- future_lapply(X, FUN = FUN)
[10:58:51.680] future_lapply() ...
[10:58:51.682] Number of chunks: 2
[10:58:51.682] getGlobalsAndPackagesXApply() ...
[10:58:51.682]  - future.globals: TRUE
[10:58:51.683]  - globals found/used: [n=1] ‘FUN’
[10:58:51.683]  - needed namespaces: [n=0] 
[10:58:51.683] Finding globals ... DONE
[10:58:51.684]  - use_args: TRUE
[10:58:51.684]  - Getting '...' globals ...
[10:58:51.684]    - '...' content: [n=0] 
[10:58:51.684] List of 1
[10:58:51.684]  $ ...: list()
[10:58:51.684]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.684]  - attr(*, "where")=List of 1
[10:58:51.684]   ..$ ...:<environment: 0x55d307cc72f0> 
[10:58:51.684]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.684]  - attr(*, "resolved")= logi TRUE
[10:58:51.684]  - attr(*, "total_size")= num NA
[10:58:51.686]  - Getting '...' globals ... DONE
[10:58:51.686] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:51.686] List of 2
[10:58:51.686]  $ ...future.FUN:function (x)  
[10:58:51.686]  $ ...          : list()
[10:58:51.686]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.686]  - attr(*, "where")=List of 2
[10:58:51.686]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:51.686]   ..$ ...          :<environment: 0x55d307cc72f0> 
[10:58:51.686]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.686]  - attr(*, "resolved")= logi FALSE
[10:58:51.686]  - attr(*, "total_size")= num 4316
[10:58:51.689] Packages to be attached in all futures: [n=0] 
[10:58:51.689] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.689] Number of futures (= number of chunks): 2
[10:58:51.689] Launching 2 futures (chunks) ...
[10:58:51.689] Chunk #1 of 2 ...
[10:58:51.690]  - Finding globals in 'X' for chunk #1 ...
[10:58:51.690]    + additional globals found: [n=0] 
[10:58:51.690]    + additional namespaces needed: [n=0] 
[10:58:51.690]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:51.690]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:51.690]  - seeds: <none>
[10:58:51.690]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.707] Created future:
[10:58:51.707] MultisessionFuture:
[10:58:51.707] Label: ‘future_lapply-1’
[10:58:51.707] Expression:
[10:58:51.707] {
[10:58:51.707]     do.call(function(...) {
[10:58:51.707]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.707]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.707]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.707]             on.exit(options(oopts), add = TRUE)
[10:58:51.707]         }
[10:58:51.707]         {
[10:58:51.707]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.707]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.707]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.707]             })
[10:58:51.707]         }
[10:58:51.707]     }, args = future.call.arguments)
[10:58:51.707] }
[10:58:51.707] Lazy evaluation: FALSE
[10:58:51.707] Asynchronous evaluation: TRUE
[10:58:51.707] Local evaluation: TRUE
[10:58:51.707] Environment: R_GlobalEnv
[10:58:51.707] Capture standard output: TRUE
[10:58:51.707] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.707] Globals: 5 objects totaling 0.98 KiB (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 445 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:51.707] Packages: <none>
[10:58:51.707] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.707] Resolved: FALSE
[10:58:51.707] Value: <not collected>
[10:58:51.707] Conditions captured: <none>
[10:58:51.707] Early signaling: FALSE
[10:58:51.707] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.707] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.718] Chunk #1 of 2 ... DONE
[10:58:51.719] Chunk #2 of 2 ...
[10:58:51.719]  - Finding globals in 'X' for chunk #2 ...
[10:58:51.719]    + additional globals found: [n=0] 
[10:58:51.719]    + additional namespaces needed: [n=0] 
[10:58:51.719]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:51.719]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:58:51.719]  - seeds: <none>
[10:58:51.719]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.738] Created future:
[10:58:51.738] MultisessionFuture:
[10:58:51.738] Label: ‘future_lapply-2’
[10:58:51.738] Expression:
[10:58:51.738] {
[10:58:51.738]     do.call(function(...) {
[10:58:51.738]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.738]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.738]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.738]             on.exit(options(oopts), add = TRUE)
[10:58:51.738]         }
[10:58:51.738]         {
[10:58:51.738]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.738]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.738]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.738]             })
[10:58:51.738]         }
[10:58:51.738]     }, args = future.call.arguments)
[10:58:51.738] }
[10:58:51.738] Lazy evaluation: FALSE
[10:58:51.738] Asynchronous evaluation: TRUE
[10:58:51.738] Local evaluation: TRUE
[10:58:51.738] Environment: R_GlobalEnv
[10:58:51.738] Capture standard output: TRUE
[10:58:51.738] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.738] Globals: 5 objects totaling 0.98 KiB (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 445 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:58:51.738] Packages: <none>
[10:58:51.738] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.738] Resolved: FALSE
[10:58:51.738] Value: <not collected>
[10:58:51.738] Conditions captured: <none>
[10:58:51.738] Early signaling: FALSE
[10:58:51.738] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.738] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.749] Chunk #2 of 2 ... DONE
[10:58:51.749] Launching 2 futures (chunks) ... DONE
[10:58:51.749] Resolving 2 futures (chunks) ...
[10:58:51.780]  - Number of value chunks collected: 2
[10:58:51.780] Resolving 2 futures (chunks) ... DONE
[10:58:51.780] Reducing values from 2 chunks ...
[10:58:51.780]  - Number of values collected after concatenation: 10
[10:58:51.780]  - Number of values expected: 10
[10:58:51.780] Reducing values from 2 chunks ... DONE
[10:58:51.780] future_lapply() ... DONE
> str(y)
List of 10
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
> stopifnot(all(sapply(y, FUN = identical, oMaxSize)))
> 
> message("- approximately invariant to chunk size ...")
- approximately invariant to chunk size ...
> maxSize <- sizes[["FUN"]] + sizes[["X"]] / length(X)
> options(future.globals.maxSize = maxSize)
> 
> for (chunk.size in c(1L, 2L, 5L, 10L)) {
+   y <- future_lapply(X, FUN = FUN, future.chunk.size = chunk.size)
+   str(y)
+   stopifnot(all(unlist(y) == maxSize))
+   cat(sprintf("maxSize = %g bytes\nfuture.globals.maxSize = %g bytes\n",
+               maxSize, getOption("future.globals.maxSize")))
+   stopifnot(getOption("future.globals.maxSize") == maxSize)
+ }
[10:58:51.787] future_lapply() ...
[10:58:51.789] Number of chunks: 10
[10:58:51.789] getGlobalsAndPackagesXApply() ...
[10:58:51.789]  - future.globals: TRUE
[10:58:51.790]  - globals found/used: [n=1] ‘FUN’
[10:58:51.791]  - needed namespaces: [n=0] 
[10:58:51.791] Finding globals ... DONE
[10:58:51.791]  - use_args: TRUE
[10:58:51.791]  - Getting '...' globals ...
[10:58:51.791]    - '...' content: [n=0] 
[10:58:51.791] List of 1
[10:58:51.791]  $ ...: list()
[10:58:51.791]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.791]  - attr(*, "where")=List of 1
[10:58:51.791]   ..$ ...:<environment: 0x55d3087bb638> 
[10:58:51.791]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.791]  - attr(*, "resolved")= logi TRUE
[10:58:51.791]  - attr(*, "total_size")= num NA
[10:58:51.793]  - Getting '...' globals ... DONE
[10:58:51.794] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:51.794] List of 2
[10:58:51.794]  $ ...future.FUN:function (x)  
[10:58:51.794]  $ ...          : list()
[10:58:51.794]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:51.794]  - attr(*, "where")=List of 2
[10:58:51.794]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:51.794]   ..$ ...          :<environment: 0x55d3087bb638> 
[10:58:51.794]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:51.794]  - attr(*, "resolved")= logi FALSE
[10:58:51.794]  - attr(*, "total_size")= num 4731
[10:58:51.796] Packages to be attached in all futures: [n=0] 
[10:58:51.798] getGlobalsAndPackagesXApply() ... DONE
[10:58:51.798] Number of futures (= number of chunks): 10
[10:58:51.798] Launching 10 futures (chunks) ...
[10:58:51.798] Chunk #1 of 10 ...
[10:58:51.798]  - Finding globals in 'X' for chunk #1 ...
[10:58:51.799]    + additional globals found: [n=0] 
[10:58:51.799]    + additional namespaces needed: [n=0] 
[10:58:51.799]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:51.799]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:51.799]  - seeds: <none>
[10:58:51.799]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.817] Created future:
[10:58:51.817] MultisessionFuture:
[10:58:51.817] Label: ‘future_lapply-1’
[10:58:51.817] Expression:
[10:58:51.817] {
[10:58:51.817]     do.call(function(...) {
[10:58:51.817]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.817]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.817]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.817]             on.exit(options(oopts), add = TRUE)
[10:58:51.817]         }
[10:58:51.817]         {
[10:58:51.817]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.817]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.817]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.817]             })
[10:58:51.817]         }
[10:58:51.817]     }, args = future.call.arguments)
[10:58:51.817] }
[10:58:51.817] Lazy evaluation: FALSE
[10:58:51.817] Asynchronous evaluation: TRUE
[10:58:51.817] Local evaluation: TRUE
[10:58:51.817] Environment: R_GlobalEnv
[10:58:51.817] Capture standard output: TRUE
[10:58:51.817] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.817] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:51.817] Packages: <none>
[10:58:51.817] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.817] Resolved: FALSE
[10:58:51.817] Value: <not collected>
[10:58:51.817] Conditions captured: <none>
[10:58:51.817] Early signaling: FALSE
[10:58:51.817] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.817] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.828] Chunk #1 of 10 ... DONE
[10:58:51.829] Chunk #2 of 10 ...
[10:58:51.829]  - Finding globals in 'X' for chunk #2 ...
[10:58:51.829]    + additional globals found: [n=0] 
[10:58:51.829]    + additional namespaces needed: [n=0] 
[10:58:51.829]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:51.829]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:51.829]  - seeds: <none>
[10:58:51.830]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.846] Created future:
[10:58:51.847] MultisessionFuture:
[10:58:51.847] Label: ‘future_lapply-2’
[10:58:51.847] Expression:
[10:58:51.847] {
[10:58:51.847]     do.call(function(...) {
[10:58:51.847]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.847]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.847]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.847]             on.exit(options(oopts), add = TRUE)
[10:58:51.847]         }
[10:58:51.847]         {
[10:58:51.847]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.847]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.847]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.847]             })
[10:58:51.847]         }
[10:58:51.847]     }, args = future.call.arguments)
[10:58:51.847] }
[10:58:51.847] Lazy evaluation: FALSE
[10:58:51.847] Asynchronous evaluation: TRUE
[10:58:51.847] Local evaluation: TRUE
[10:58:51.847] Environment: R_GlobalEnv
[10:58:51.847] Capture standard output: TRUE
[10:58:51.847] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.847] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:51.847] Packages: <none>
[10:58:51.847] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.847] Resolved: FALSE
[10:58:51.847] Value: <not collected>
[10:58:51.847] Conditions captured: <none>
[10:58:51.847] Early signaling: FALSE
[10:58:51.847] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.847] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.858] Chunk #2 of 10 ... DONE
[10:58:51.858] Chunk #3 of 10 ...
[10:58:51.858]  - Finding globals in 'X' for chunk #3 ...
[10:58:51.858]    + additional globals found: [n=0] 
[10:58:51.859]    + additional namespaces needed: [n=0] 
[10:58:51.859]  - Finding globals in 'X' for chunk #3 ... DONE
[10:58:51.859]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:51.859]  - seeds: <none>
[10:58:51.859]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.887] Created future:
[10:58:51.887] MultisessionFuture:
[10:58:51.887] Label: ‘future_lapply-3’
[10:58:51.887] Expression:
[10:58:51.887] {
[10:58:51.887]     do.call(function(...) {
[10:58:51.887]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.887]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.887]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.887]             on.exit(options(oopts), add = TRUE)
[10:58:51.887]         }
[10:58:51.887]         {
[10:58:51.887]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.887]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.887]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.887]             })
[10:58:51.887]         }
[10:58:51.887]     }, args = future.call.arguments)
[10:58:51.887] }
[10:58:51.887] Lazy evaluation: FALSE
[10:58:51.887] Asynchronous evaluation: TRUE
[10:58:51.887] Local evaluation: TRUE
[10:58:51.887] Environment: R_GlobalEnv
[10:58:51.887] Capture standard output: TRUE
[10:58:51.887] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.887] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:51.887] Packages: <none>
[10:58:51.887] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.887] Resolved: FALSE
[10:58:51.887] Value: <not collected>
[10:58:51.887] Conditions captured: <none>
[10:58:51.887] Early signaling: FALSE
[10:58:51.887] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.887] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.899] Chunk #3 of 10 ... DONE
[10:58:51.899] Chunk #4 of 10 ...
[10:58:51.899]  - Finding globals in 'X' for chunk #4 ...
[10:58:51.899]    + additional globals found: [n=0] 
[10:58:51.899]    + additional namespaces needed: [n=0] 
[10:58:51.900]  - Finding globals in 'X' for chunk #4 ... DONE
[10:58:51.900]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:51.900]  - seeds: <none>
[10:58:51.900]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.937] Created future:
[10:58:51.937] MultisessionFuture:
[10:58:51.937] Label: ‘future_lapply-4’
[10:58:51.937] Expression:
[10:58:51.937] {
[10:58:51.937]     do.call(function(...) {
[10:58:51.937]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.937]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.937]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.937]             on.exit(options(oopts), add = TRUE)
[10:58:51.937]         }
[10:58:51.937]         {
[10:58:51.937]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.937]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.937]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.937]             })
[10:58:51.937]         }
[10:58:51.937]     }, args = future.call.arguments)
[10:58:51.937] }
[10:58:51.937] Lazy evaluation: FALSE
[10:58:51.937] Asynchronous evaluation: TRUE
[10:58:51.937] Local evaluation: TRUE
[10:58:51.937] Environment: R_GlobalEnv
[10:58:51.937] Capture standard output: TRUE
[10:58:51.937] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.937] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:51.937] Packages: <none>
[10:58:51.937] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.937] Resolved: FALSE
[10:58:51.937] Value: <not collected>
[10:58:51.937] Conditions captured: <none>
[10:58:51.937] Early signaling: FALSE
[10:58:51.937] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.937] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.948] Chunk #4 of 10 ... DONE
[10:58:51.949] Chunk #5 of 10 ...
[10:58:51.949]  - Finding globals in 'X' for chunk #5 ...
[10:58:51.949]    + additional globals found: [n=0] 
[10:58:51.949]    + additional namespaces needed: [n=0] 
[10:58:51.949]  - Finding globals in 'X' for chunk #5 ... DONE
[10:58:51.949]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:51.950]  - seeds: <none>
[10:58:51.950]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:51.977] Created future:
[10:58:51.978] MultisessionFuture:
[10:58:51.978] Label: ‘future_lapply-5’
[10:58:51.978] Expression:
[10:58:51.978] {
[10:58:51.978]     do.call(function(...) {
[10:58:51.978]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:51.978]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:51.978]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:51.978]             on.exit(options(oopts), add = TRUE)
[10:58:51.978]         }
[10:58:51.978]         {
[10:58:51.978]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:51.978]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:51.978]                 ...future.FUN(...future.X_jj, ...)
[10:58:51.978]             })
[10:58:51.978]         }
[10:58:51.978]     }, args = future.call.arguments)
[10:58:51.978] }
[10:58:51.978] Lazy evaluation: FALSE
[10:58:51.978] Asynchronous evaluation: TRUE
[10:58:51.978] Local evaluation: TRUE
[10:58:51.978] Environment: R_GlobalEnv
[10:58:51.978] Capture standard output: TRUE
[10:58:51.978] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:51.978] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:51.978] Packages: <none>
[10:58:51.978] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:51.978] Resolved: FALSE
[10:58:51.978] Value: <not collected>
[10:58:51.978] Conditions captured: <none>
[10:58:51.978] Early signaling: FALSE
[10:58:51.978] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:51.978] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:51.989] Chunk #5 of 10 ... DONE
[10:58:51.990] Chunk #6 of 10 ...
[10:58:51.990]  - Finding globals in 'X' for chunk #6 ...
[10:58:51.990]    + additional globals found: [n=0] 
[10:58:51.990]    + additional namespaces needed: [n=0] 
[10:58:51.990]  - Finding globals in 'X' for chunk #6 ... DONE
[10:58:51.990]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:51.990]  - seeds: <none>
[10:58:51.990]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.027] Created future:
[10:58:52.027] MultisessionFuture:
[10:58:52.027] Label: ‘future_lapply-6’
[10:58:52.027] Expression:
[10:58:52.027] {
[10:58:52.027]     do.call(function(...) {
[10:58:52.027]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.027]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.027]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.027]             on.exit(options(oopts), add = TRUE)
[10:58:52.027]         }
[10:58:52.027]         {
[10:58:52.027]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.027]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.027]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.027]             })
[10:58:52.027]         }
[10:58:52.027]     }, args = future.call.arguments)
[10:58:52.027] }
[10:58:52.027] Lazy evaluation: FALSE
[10:58:52.027] Asynchronous evaluation: TRUE
[10:58:52.027] Local evaluation: TRUE
[10:58:52.027] Environment: R_GlobalEnv
[10:58:52.027] Capture standard output: TRUE
[10:58:52.027] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.027] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.027] Packages: <none>
[10:58:52.027] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.027] Resolved: FALSE
[10:58:52.027] Value: <not collected>
[10:58:52.027] Conditions captured: <none>
[10:58:52.027] Early signaling: FALSE
[10:58:52.027] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.027] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.038] Chunk #6 of 10 ... DONE
[10:58:52.038] Chunk #7 of 10 ...
[10:58:52.038]  - Finding globals in 'X' for chunk #7 ...
[10:58:52.039]    + additional globals found: [n=0] 
[10:58:52.039]    + additional namespaces needed: [n=0] 
[10:58:52.039]  - Finding globals in 'X' for chunk #7 ... DONE
[10:58:52.039]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:52.039]  - seeds: <none>
[10:58:52.039]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.067] Created future:
[10:58:52.067] MultisessionFuture:
[10:58:52.067] Label: ‘future_lapply-7’
[10:58:52.067] Expression:
[10:58:52.067] {
[10:58:52.067]     do.call(function(...) {
[10:58:52.067]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.067]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.067]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.067]             on.exit(options(oopts), add = TRUE)
[10:58:52.067]         }
[10:58:52.067]         {
[10:58:52.067]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.067]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.067]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.067]             })
[10:58:52.067]         }
[10:58:52.067]     }, args = future.call.arguments)
[10:58:52.067] }
[10:58:52.067] Lazy evaluation: FALSE
[10:58:52.067] Asynchronous evaluation: TRUE
[10:58:52.067] Local evaluation: TRUE
[10:58:52.067] Environment: R_GlobalEnv
[10:58:52.067] Capture standard output: TRUE
[10:58:52.067] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.067] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.067] Packages: <none>
[10:58:52.067] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.067] Resolved: FALSE
[10:58:52.067] Value: <not collected>
[10:58:52.067] Conditions captured: <none>
[10:58:52.067] Early signaling: FALSE
[10:58:52.067] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.067] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.079] Chunk #7 of 10 ... DONE
[10:58:52.079] Chunk #8 of 10 ...
[10:58:52.079]  - Finding globals in 'X' for chunk #8 ...
[10:58:52.080]    + additional globals found: [n=0] 
[10:58:52.080]    + additional namespaces needed: [n=0] 
[10:58:52.080]  - Finding globals in 'X' for chunk #8 ... DONE
[10:58:52.080]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:52.080]  - seeds: <none>
[10:58:52.080]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.108] Created future:
[10:58:52.108] MultisessionFuture:
[10:58:52.108] Label: ‘future_lapply-8’
[10:58:52.108] Expression:
[10:58:52.108] {
[10:58:52.108]     do.call(function(...) {
[10:58:52.108]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.108]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.108]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.108]             on.exit(options(oopts), add = TRUE)
[10:58:52.108]         }
[10:58:52.108]         {
[10:58:52.108]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.108]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.108]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.108]             })
[10:58:52.108]         }
[10:58:52.108]     }, args = future.call.arguments)
[10:58:52.108] }
[10:58:52.108] Lazy evaluation: FALSE
[10:58:52.108] Asynchronous evaluation: TRUE
[10:58:52.108] Local evaluation: TRUE
[10:58:52.108] Environment: R_GlobalEnv
[10:58:52.108] Capture standard output: TRUE
[10:58:52.108] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.108] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.108] Packages: <none>
[10:58:52.108] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.108] Resolved: FALSE
[10:58:52.108] Value: <not collected>
[10:58:52.108] Conditions captured: <none>
[10:58:52.108] Early signaling: FALSE
[10:58:52.108] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.108] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.119] Chunk #8 of 10 ... DONE
[10:58:52.119] Chunk #9 of 10 ...
[10:58:52.119]  - Finding globals in 'X' for chunk #9 ...
[10:58:52.120]    + additional globals found: [n=0] 
[10:58:52.120]    + additional namespaces needed: [n=0] 
[10:58:52.120]  - Finding globals in 'X' for chunk #9 ... DONE
[10:58:52.120]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:52.120]  - seeds: <none>
[10:58:52.120]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.150] Created future:
[10:58:52.150] MultisessionFuture:
[10:58:52.150] Label: ‘future_lapply-9’
[10:58:52.150] Expression:
[10:58:52.150] {
[10:58:52.150]     do.call(function(...) {
[10:58:52.150]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.150]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.150]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.150]             on.exit(options(oopts), add = TRUE)
[10:58:52.150]         }
[10:58:52.150]         {
[10:58:52.150]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.150]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.150]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.150]             })
[10:58:52.150]         }
[10:58:52.150]     }, args = future.call.arguments)
[10:58:52.150] }
[10:58:52.150] Lazy evaluation: FALSE
[10:58:52.150] Asynchronous evaluation: TRUE
[10:58:52.150] Local evaluation: TRUE
[10:58:52.150] Environment: R_GlobalEnv
[10:58:52.150] Capture standard output: TRUE
[10:58:52.150] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.150] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.150] Packages: <none>
[10:58:52.150] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.150] Resolved: FALSE
[10:58:52.150] Value: <not collected>
[10:58:52.150] Conditions captured: <none>
[10:58:52.150] Early signaling: FALSE
[10:58:52.150] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.150] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.161] Chunk #9 of 10 ... DONE
[10:58:52.162] Chunk #10 of 10 ...
[10:58:52.162]  - Finding globals in 'X' for chunk #10 ...
[10:58:52.162]    + additional globals found: [n=0] 
[10:58:52.162]    + additional namespaces needed: [n=0] 
[10:58:52.162]  - Finding globals in 'X' for chunk #10 ... DONE
[10:58:52.162]  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[10:58:52.162]  - seeds: <none>
[10:58:52.162]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.191] Created future:
[10:58:52.191] MultisessionFuture:
[10:58:52.191] Label: ‘future_lapply-10’
[10:58:52.191] Expression:
[10:58:52.191] {
[10:58:52.191]     do.call(function(...) {
[10:58:52.191]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.191]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.191]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.191]             on.exit(options(oopts), add = TRUE)
[10:58:52.191]         }
[10:58:52.191]         {
[10:58:52.191]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.191]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.191]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.191]             })
[10:58:52.191]         }
[10:58:52.191]     }, args = future.call.arguments)
[10:58:52.191] }
[10:58:52.191] Lazy evaluation: FALSE
[10:58:52.191] Asynchronous evaluation: TRUE
[10:58:52.191] Local evaluation: TRUE
[10:58:52.191] Environment: R_GlobalEnv
[10:58:52.191] Capture standard output: TRUE
[10:58:52.191] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.191] Globals: 5 objects totaling 711 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 141 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.191] Packages: <none>
[10:58:52.191] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.191] Resolved: FALSE
[10:58:52.191] Value: <not collected>
[10:58:52.191] Conditions captured: <none>
[10:58:52.191] Early signaling: FALSE
[10:58:52.191] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.191] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.202] Chunk #10 of 10 ... DONE
[10:58:52.202] Launching 10 futures (chunks) ... DONE
[10:58:52.202] Resolving 10 futures (chunks) ...
[10:58:52.234]  - Number of value chunks collected: 10
[10:58:52.234] Resolving 10 futures (chunks) ... DONE
[10:58:52.234] Reducing values from 10 chunks ...
[10:58:52.234]  - Number of values collected after concatenation: 10
[10:58:52.234]  - Number of values expected: 10
[10:58:52.234] Reducing values from 10 chunks ... DONE
[10:58:52.234] future_lapply() ... DONE
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[10:58:52.238] future_lapply() ...
[10:58:52.239] Number of chunks: 5
[10:58:52.240] getGlobalsAndPackagesXApply() ...
[10:58:52.240]  - future.globals: TRUE
[10:58:52.241]  - globals found/used: [n=1] ‘FUN’
[10:58:52.241]  - needed namespaces: [n=0] 
[10:58:52.241] Finding globals ... DONE
[10:58:52.242]  - use_args: TRUE
[10:58:52.242]  - Getting '...' globals ...
[10:58:52.242]    - '...' content: [n=0] 
[10:58:52.242] List of 1
[10:58:52.242]  $ ...: list()
[10:58:52.242]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:52.242]  - attr(*, "where")=List of 1
[10:58:52.242]   ..$ ...:<environment: 0x55d30812c000> 
[10:58:52.242]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:52.242]  - attr(*, "resolved")= logi TRUE
[10:58:52.242]  - attr(*, "total_size")= num NA
[10:58:52.246]  - Getting '...' globals ... DONE
[10:58:52.246] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:52.247] List of 2
[10:58:52.247]  $ ...future.FUN:function (x)  
[10:58:52.247]  $ ...          : list()
[10:58:52.247]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:52.247]  - attr(*, "where")=List of 2
[10:58:52.247]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:52.247]   ..$ ...          :<environment: 0x55d30812c000> 
[10:58:52.247]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:52.247]  - attr(*, "resolved")= logi FALSE
[10:58:52.247]  - attr(*, "total_size")= num 4731
[10:58:52.249] Packages to be attached in all futures: [n=0] 
[10:58:52.249] getGlobalsAndPackagesXApply() ... DONE
[10:58:52.249] Number of futures (= number of chunks): 5
[10:58:52.250] Launching 5 futures (chunks) ...
[10:58:52.250] Chunk #1 of 5 ...
[10:58:52.250]  - Finding globals in 'X' for chunk #1 ...
[10:58:52.250]    + additional globals found: [n=0] 
[10:58:52.250]    + additional namespaces needed: [n=0] 
[10:58:52.250]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:52.250]  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[10:58:52.250]  - seeds: <none>
[10:58:52.250]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.268] Created future:
[10:58:52.268] MultisessionFuture:
[10:58:52.268] Label: ‘future_lapply-1’
[10:58:52.268] Expression:
[10:58:52.268] {
[10:58:52.268]     do.call(function(...) {
[10:58:52.268]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.268]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.268]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.268]             on.exit(options(oopts), add = TRUE)
[10:58:52.268]         }
[10:58:52.268]         {
[10:58:52.268]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.268]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.268]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.268]             })
[10:58:52.268]         }
[10:58:52.268]     }, args = future.call.arguments)
[10:58:52.268] }
[10:58:52.268] Lazy evaluation: FALSE
[10:58:52.268] Asynchronous evaluation: TRUE
[10:58:52.268] Local evaluation: TRUE
[10:58:52.268] Environment: R_GlobalEnv
[10:58:52.268] Capture standard output: TRUE
[10:58:52.268] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.268] Globals: 5 objects totaling 787 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 217 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.268] Packages: <none>
[10:58:52.268] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.268] Resolved: FALSE
[10:58:52.268] Value: <not collected>
[10:58:52.268] Conditions captured: <none>
[10:58:52.268] Early signaling: FALSE
[10:58:52.268] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.268] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.279] Chunk #1 of 5 ... DONE
[10:58:52.279] Chunk #2 of 5 ...
[10:58:52.279]  - Finding globals in 'X' for chunk #2 ...
[10:58:52.280]    + additional globals found: [n=0] 
[10:58:52.280]    + additional namespaces needed: [n=0] 
[10:58:52.280]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:52.280]  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[10:58:52.280]  - seeds: <none>
[10:58:52.280]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.298] Created future:
[10:58:52.298] MultisessionFuture:
[10:58:52.298] Label: ‘future_lapply-2’
[10:58:52.298] Expression:
[10:58:52.298] {
[10:58:52.298]     do.call(function(...) {
[10:58:52.298]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.298]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.298]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.298]             on.exit(options(oopts), add = TRUE)
[10:58:52.298]         }
[10:58:52.298]         {
[10:58:52.298]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.298]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.298]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.298]             })
[10:58:52.298]         }
[10:58:52.298]     }, args = future.call.arguments)
[10:58:52.298] }
[10:58:52.298] Lazy evaluation: FALSE
[10:58:52.298] Asynchronous evaluation: TRUE
[10:58:52.298] Local evaluation: TRUE
[10:58:52.298] Environment: R_GlobalEnv
[10:58:52.298] Capture standard output: TRUE
[10:58:52.298] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.298] Globals: 5 objects totaling 787 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 217 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.298] Packages: <none>
[10:58:52.298] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.298] Resolved: FALSE
[10:58:52.298] Value: <not collected>
[10:58:52.298] Conditions captured: <none>
[10:58:52.298] Early signaling: FALSE
[10:58:52.298] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.298] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.309] Chunk #2 of 5 ... DONE
[10:58:52.309] Chunk #3 of 5 ...
[10:58:52.309]  - Finding globals in 'X' for chunk #3 ...
[10:58:52.309]    + additional globals found: [n=0] 
[10:58:52.310]    + additional namespaces needed: [n=0] 
[10:58:52.310]  - Finding globals in 'X' for chunk #3 ... DONE
[10:58:52.310]  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[10:58:52.310]  - seeds: <none>
[10:58:52.310]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.340] Created future:
[10:58:52.340] MultisessionFuture:
[10:58:52.340] Label: ‘future_lapply-3’
[10:58:52.340] Expression:
[10:58:52.340] {
[10:58:52.340]     do.call(function(...) {
[10:58:52.340]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.340]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.340]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.340]             on.exit(options(oopts), add = TRUE)
[10:58:52.340]         }
[10:58:52.340]         {
[10:58:52.340]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.340]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.340]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.340]             })
[10:58:52.340]         }
[10:58:52.340]     }, args = future.call.arguments)
[10:58:52.340] }
[10:58:52.340] Lazy evaluation: FALSE
[10:58:52.340] Asynchronous evaluation: TRUE
[10:58:52.340] Local evaluation: TRUE
[10:58:52.340] Environment: R_GlobalEnv
[10:58:52.340] Capture standard output: TRUE
[10:58:52.340] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.340] Globals: 5 objects totaling 787 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 217 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.340] Packages: <none>
[10:58:52.340] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.340] Resolved: FALSE
[10:58:52.340] Value: <not collected>
[10:58:52.340] Conditions captured: <none>
[10:58:52.340] Early signaling: FALSE
[10:58:52.340] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.340] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.351] Chunk #3 of 5 ... DONE
[10:58:52.351] Chunk #4 of 5 ...
[10:58:52.351]  - Finding globals in 'X' for chunk #4 ...
[10:58:52.352]    + additional globals found: [n=0] 
[10:58:52.352]    + additional namespaces needed: [n=0] 
[10:58:52.352]  - Finding globals in 'X' for chunk #4 ... DONE
[10:58:52.352]  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[10:58:52.352]  - seeds: <none>
[10:58:52.352]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.380] Created future:
[10:58:52.380] MultisessionFuture:
[10:58:52.380] Label: ‘future_lapply-4’
[10:58:52.380] Expression:
[10:58:52.380] {
[10:58:52.380]     do.call(function(...) {
[10:58:52.380]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.380]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.380]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.380]             on.exit(options(oopts), add = TRUE)
[10:58:52.380]         }
[10:58:52.380]         {
[10:58:52.380]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.380]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.380]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.380]             })
[10:58:52.380]         }
[10:58:52.380]     }, args = future.call.arguments)
[10:58:52.380] }
[10:58:52.380] Lazy evaluation: FALSE
[10:58:52.380] Asynchronous evaluation: TRUE
[10:58:52.380] Local evaluation: TRUE
[10:58:52.380] Environment: R_GlobalEnv
[10:58:52.380] Capture standard output: TRUE
[10:58:52.380] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.380] Globals: 5 objects totaling 787 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 217 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.380] Packages: <none>
[10:58:52.380] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.380] Resolved: FALSE
[10:58:52.380] Value: <not collected>
[10:58:52.380] Conditions captured: <none>
[10:58:52.380] Early signaling: FALSE
[10:58:52.380] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.380] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.391] Chunk #4 of 5 ... DONE
[10:58:52.392] Chunk #5 of 5 ...
[10:58:52.392]  - Finding globals in 'X' for chunk #5 ...
[10:58:52.392]    + additional globals found: [n=0] 
[10:58:52.392]    + additional namespaces needed: [n=0] 
[10:58:52.392]  - Finding globals in 'X' for chunk #5 ... DONE
[10:58:52.393]  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[10:58:52.393]  - seeds: <none>
[10:58:52.393]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.420] Created future:
[10:58:52.420] MultisessionFuture:
[10:58:52.420] Label: ‘future_lapply-5’
[10:58:52.420] Expression:
[10:58:52.420] {
[10:58:52.420]     do.call(function(...) {
[10:58:52.420]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.420]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.420]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.420]             on.exit(options(oopts), add = TRUE)
[10:58:52.420]         }
[10:58:52.420]         {
[10:58:52.420]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.420]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.420]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.420]             })
[10:58:52.420]         }
[10:58:52.420]     }, args = future.call.arguments)
[10:58:52.420] }
[10:58:52.420] Lazy evaluation: FALSE
[10:58:52.420] Asynchronous evaluation: TRUE
[10:58:52.420] Local evaluation: TRUE
[10:58:52.420] Environment: R_GlobalEnv
[10:58:52.420] Capture standard output: TRUE
[10:58:52.420] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.420] Globals: 5 objects totaling 787 bytes (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 217 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.420] Packages: <none>
[10:58:52.420] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.420] Resolved: FALSE
[10:58:52.420] Value: <not collected>
[10:58:52.420] Conditions captured: <none>
[10:58:52.420] Early signaling: FALSE
[10:58:52.420] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.420] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.432] Chunk #5 of 5 ... DONE
[10:58:52.432] Launching 5 futures (chunks) ... DONE
[10:58:52.432] Resolving 5 futures (chunks) ...
[10:58:52.463]  - Number of value chunks collected: 5
[10:58:52.463] Resolving 5 futures (chunks) ... DONE
[10:58:52.463] Reducing values from 5 chunks ...
[10:58:52.463]  - Number of values collected after concatenation: 10
[10:58:52.463]  - Number of values expected: 10
[10:58:52.463] Reducing values from 5 chunks ... DONE
[10:58:52.463] future_lapply() ... DONE
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[10:58:52.466] future_lapply() ...
[10:58:52.470] Number of chunks: 2
[10:58:52.470] getGlobalsAndPackagesXApply() ...
[10:58:52.470]  - future.globals: TRUE
[10:58:52.472]  - globals found/used: [n=1] ‘FUN’
[10:58:52.472]  - needed namespaces: [n=0] 
[10:58:52.472] Finding globals ... DONE
[10:58:52.472]  - use_args: TRUE
[10:58:52.472]  - Getting '...' globals ...
[10:58:52.473]    - '...' content: [n=0] 
[10:58:52.473] List of 1
[10:58:52.473]  $ ...: list()
[10:58:52.473]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:52.473]  - attr(*, "where")=List of 1
[10:58:52.473]   ..$ ...:<environment: 0x55d308b5b768> 
[10:58:52.473]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:52.473]  - attr(*, "resolved")= logi TRUE
[10:58:52.473]  - attr(*, "total_size")= num NA
[10:58:52.475]  - Getting '...' globals ... DONE
[10:58:52.475] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:52.475] List of 2
[10:58:52.475]  $ ...future.FUN:function (x)  
[10:58:52.475]  $ ...          : list()
[10:58:52.475]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:52.475]  - attr(*, "where")=List of 2
[10:58:52.475]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:52.475]   ..$ ...          :<environment: 0x55d308b5b768> 
[10:58:52.475]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:52.475]  - attr(*, "resolved")= logi FALSE
[10:58:52.475]  - attr(*, "total_size")= num 4731
[10:58:52.478] Packages to be attached in all futures: [n=0] 
[10:58:52.478] getGlobalsAndPackagesXApply() ... DONE
[10:58:52.478] Number of futures (= number of chunks): 2
[10:58:52.478] Launching 2 futures (chunks) ...
[10:58:52.478] Chunk #1 of 2 ...
[10:58:52.478]  - Finding globals in 'X' for chunk #1 ...
[10:58:52.479]    + additional globals found: [n=0] 
[10:58:52.479]    + additional namespaces needed: [n=0] 
[10:58:52.479]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:52.479]  - Adjusted option 'future.globals.maxSize': 2306 -> 2 * 2306 = 4611 (bytes)
[10:58:52.479]  - seeds: <none>
[10:58:52.479]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.496] Created future:
[10:58:52.496] MultisessionFuture:
[10:58:52.496] Label: ‘future_lapply-1’
[10:58:52.496] Expression:
[10:58:52.496] {
[10:58:52.496]     do.call(function(...) {
[10:58:52.496]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.496]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.496]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.496]             on.exit(options(oopts), add = TRUE)
[10:58:52.496]         }
[10:58:52.496]         {
[10:58:52.496]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.496]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.496]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.496]             })
[10:58:52.496]         }
[10:58:52.496]     }, args = future.call.arguments)
[10:58:52.496] }
[10:58:52.496] Lazy evaluation: FALSE
[10:58:52.496] Asynchronous evaluation: TRUE
[10:58:52.496] Local evaluation: TRUE
[10:58:52.496] Environment: R_GlobalEnv
[10:58:52.496] Capture standard output: TRUE
[10:58:52.496] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.496] Globals: 5 objects totaling 0.99 KiB (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 445 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.496] Packages: <none>
[10:58:52.496] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.496] Resolved: FALSE
[10:58:52.496] Value: <not collected>
[10:58:52.496] Conditions captured: <none>
[10:58:52.496] Early signaling: FALSE
[10:58:52.496] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.496] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.508] Chunk #1 of 2 ... DONE
[10:58:52.508] Chunk #2 of 2 ...
[10:58:52.508]  - Finding globals in 'X' for chunk #2 ...
[10:58:52.508]    + additional globals found: [n=0] 
[10:58:52.508]    + additional namespaces needed: [n=0] 
[10:58:52.508]  - Finding globals in 'X' for chunk #2 ... DONE
[10:58:52.508]  - Adjusted option 'future.globals.maxSize': 2306 -> 2 * 2306 = 4611 (bytes)
[10:58:52.509]  - seeds: <none>
[10:58:52.509]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.527] Created future:
[10:58:52.527] MultisessionFuture:
[10:58:52.527] Label: ‘future_lapply-2’
[10:58:52.527] Expression:
[10:58:52.527] {
[10:58:52.527]     do.call(function(...) {
[10:58:52.527]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.527]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.527]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.527]             on.exit(options(oopts), add = TRUE)
[10:58:52.527]         }
[10:58:52.527]         {
[10:58:52.527]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.527]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.527]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.527]             })
[10:58:52.527]         }
[10:58:52.527]     }, args = future.call.arguments)
[10:58:52.527] }
[10:58:52.527] Lazy evaluation: FALSE
[10:58:52.527] Asynchronous evaluation: TRUE
[10:58:52.527] Local evaluation: TRUE
[10:58:52.527] Environment: R_GlobalEnv
[10:58:52.527] Capture standard output: TRUE
[10:58:52.527] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.527] Globals: 5 objects totaling 0.99 KiB (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 445 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.527] Packages: <none>
[10:58:52.527] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.527] Resolved: FALSE
[10:58:52.527] Value: <not collected>
[10:58:52.527] Conditions captured: <none>
[10:58:52.527] Early signaling: FALSE
[10:58:52.527] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.527] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.538] Chunk #2 of 2 ... DONE
[10:58:52.538] Launching 2 futures (chunks) ... DONE
[10:58:52.538] Resolving 2 futures (chunks) ...
[10:58:52.569]  - Number of value chunks collected: 2
[10:58:52.569] Resolving 2 futures (chunks) ... DONE
[10:58:52.569] Reducing values from 2 chunks ...
[10:58:52.569]  - Number of values collected after concatenation: 10
[10:58:52.569]  - Number of values expected: 10
[10:58:52.569] Reducing values from 2 chunks ... DONE
[10:58:52.569] future_lapply() ... DONE
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[10:58:52.573] future_lapply() ...
[10:58:52.574] Number of chunks: 1
[10:58:52.574] getGlobalsAndPackagesXApply() ...
[10:58:52.574]  - future.globals: TRUE
[10:58:52.576]  - globals found/used: [n=1] ‘FUN’
[10:58:52.576]  - needed namespaces: [n=0] 
[10:58:52.576] Finding globals ... DONE
[10:58:52.576]  - use_args: TRUE
[10:58:52.576]  - Getting '...' globals ...
[10:58:52.577]    - '...' content: [n=0] 
[10:58:52.577] List of 1
[10:58:52.577]  $ ...: list()
[10:58:52.577]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:52.577]  - attr(*, "where")=List of 1
[10:58:52.577]   ..$ ...:<environment: 0x55d307b47468> 
[10:58:52.577]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:52.577]  - attr(*, "resolved")= logi TRUE
[10:58:52.577]  - attr(*, "total_size")= num NA
[10:58:52.579]  - Getting '...' globals ... DONE
[10:58:52.579] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:52.579] List of 2
[10:58:52.579]  $ ...future.FUN:function (x)  
[10:58:52.579]  $ ...          : list()
[10:58:52.579]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:52.579]  - attr(*, "where")=List of 2
[10:58:52.579]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:52.579]   ..$ ...          :<environment: 0x55d307b47468> 
[10:58:52.579]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:52.579]  - attr(*, "resolved")= logi FALSE
[10:58:52.579]  - attr(*, "total_size")= num 4731
[10:58:52.582] Packages to be attached in all futures: [n=0] 
[10:58:52.582] getGlobalsAndPackagesXApply() ... DONE
[10:58:52.582] Number of futures (= number of chunks): 1
[10:58:52.582] Launching 1 futures (chunks) ...
[10:58:52.582] Chunk #1 of 1 ...
[10:58:52.582]  - Finding globals in 'X' for chunk #1 ...
[10:58:52.583]    + additional globals found: [n=0] 
[10:58:52.583]    + additional namespaces needed: [n=0] 
[10:58:52.583]  - Finding globals in 'X' for chunk #1 ... DONE
[10:58:52.583]  - seeds: <none>
[10:58:52.583]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:58:52.600] Created future:
[10:58:52.600] MultisessionFuture:
[10:58:52.600] Label: ‘future_lapply-1’
[10:58:52.600] Expression:
[10:58:52.600] {
[10:58:52.600]     do.call(function(...) {
[10:58:52.600]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:58:52.600]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:58:52.600]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:58:52.600]             on.exit(options(oopts), add = TRUE)
[10:58:52.600]         }
[10:58:52.600]         {
[10:58:52.600]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:58:52.600]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:58:52.600]                 ...future.FUN(...future.X_jj, ...)
[10:58:52.600]             })
[10:58:52.600]         }
[10:58:52.600]     }, args = future.call.arguments)
[10:58:52.600] }
[10:58:52.600] Lazy evaluation: FALSE
[10:58:52.600] Asynchronous evaluation: TRUE
[10:58:52.600] Local evaluation: TRUE
[10:58:52.600] Environment: R_GlobalEnv
[10:58:52.600] Capture standard output: TRUE
[10:58:52.600] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:58:52.600] Globals: 5 objects totaling 1.36 KiB (function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 825 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:58:52.600] Packages: <none>
[10:58:52.600] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:58:52.600] Resolved: FALSE
[10:58:52.600] Value: <not collected>
[10:58:52.600] Conditions captured: <none>
[10:58:52.600] Early signaling: FALSE
[10:58:52.600] Owner process: d9015281-9716-6ade-9859-33c6b1ec8f12
[10:58:52.600] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:58:52.611] Chunk #1 of 1 ... DONE
[10:58:52.611] Launching 1 futures (chunks) ... DONE
[10:58:52.612] Resolving 1 futures (chunks) ...
[10:58:52.656]  - Number of value chunks collected: 1
[10:58:52.656] Resolving 1 futures (chunks) ... DONE
[10:58:52.656] Reducing values from 1 chunks ...
[10:58:52.656]  - Number of values collected after concatenation: 10
[10:58:52.656]  - Number of values expected: 10
[10:58:52.656] Reducing values from 1 chunks ... DONE
[10:58:52.656] future_lapply() ... DONE
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
> y <- NULL
> options(future.globals.maxSize = oMaxSize)
> 
> 
> message("*** future_lapply() - too large ... DONE")
*** future_lapply() - too large ... DONE
> 
> 
> message("*** future_lapply() - globals exceptions ...")
*** future_lapply() - globals exceptions ...
> 
> res <- tryCatch({
+   y <- future_lapply(1, FUN = function(x) x, future.globals = 42)
+ }, error = identity)
[10:58:52.660] future_lapply() ...
[10:58:52.661] Number of chunks: 1
[10:58:52.661] getGlobalsAndPackagesXApply() ...
[10:58:52.662] getGlobalsAndPackagesXApply() ... DONE
> stopifnot(inherits(res, "error"))
> 
> res <- tryCatch({
+   y <- future_lapply(1, FUN = function(x) x, future.globals = list(1))
+ }, error = identity)
[10:58:52.662] future_lapply() ...
[10:58:52.663] Number of chunks: 1
[10:58:52.663] getGlobalsAndPackagesXApply() ...
[10:58:52.663]  - future.globals: <name-value list> with names ‘1’
[10:58:52.664] getGlobalsAndPackagesXApply() ... DONE
> stopifnot(inherits(res, "error"))
> 
> res <- tryCatch({
+   y <- future_lapply(1, FUN = function(x) x, future.globals = "...future.FUN")
+ }, error = identity)
[10:58:52.664] future_lapply() ...
[10:58:52.665] Number of chunks: 1
[10:58:52.665] getGlobalsAndPackagesXApply() ...
[10:58:52.665]  - future.globals: ‘...future.FUN’
[10:58:52.666]  - use_args: TRUE
[10:58:52.666] getGlobalsAndPackagesXApply() ... DONE
> stopifnot(inherits(res, "error"))
> 
> res <- tryCatch({
+   y <- future_lapply(1, FUN = function(x) x, future.globals = "...future.FUN")
+ }, error = identity)
[10:58:52.666] future_lapply() ...
[10:58:52.667] Number of chunks: 1
[10:58:52.667] getGlobalsAndPackagesXApply() ...
[10:58:52.668]  - future.globals: ‘...future.FUN’
[10:58:52.668]  - use_args: TRUE
[10:58:52.668] getGlobalsAndPackagesXApply() ... DONE
> stopifnot(inherits(res, "error"))
> 
> ...future.elements_ii <- 42L
> X <- list(function() 2 * ...future.elements_ii)
> res <- tryCatch({
+   y <- future_lapply(X, FUN = function(f) f())
+ }, error = identity)
[10:58:52.668] future_lapply() ...
[10:58:52.670] Number of chunks: 1
[10:58:52.670] getGlobalsAndPackagesXApply() ...
[10:58:52.670]  - future.globals: TRUE
[10:58:52.671]  - globals found/used: [n=1] ‘FUN’
[10:58:52.671]  - needed namespaces: [n=0] 
[10:58:52.671] Finding globals ... DONE
[10:58:52.671]  - use_args: TRUE
[10:58:52.671]  - Getting '...' globals ...
[10:58:52.672]    - '...' content: [n=0] 
[10:58:52.672] List of 1
[10:58:52.672]  $ ...: list()
[10:58:52.672]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:52.672]  - attr(*, "where")=List of 1
[10:58:52.672]   ..$ ...:<environment: 0x55d3070bce90> 
[10:58:52.672]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:52.672]  - attr(*, "resolved")= logi TRUE
[10:58:52.672]  - attr(*, "total_size")= num NA
[10:58:52.674]  - Getting '...' globals ... DONE
[10:58:52.674] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:58:52.674] List of 2
[10:58:52.674]  $ ...future.FUN:function (f)  
[10:58:52.674]  $ ...          : list()
[10:58:52.674]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:58:52.674]  - attr(*, "where")=List of 2
[10:58:52.674]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:58:52.674]   ..$ ...          :<environment: 0x55d3070bce90> 
[10:58:52.674]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:58:52.674]  - attr(*, "resolved")= logi FALSE
[10:58:52.674]  - attr(*, "total_size")= num 2927
[10:58:52.677] Packages to be attached in all futures: [n=0] 
[10:58:52.677] getGlobalsAndPackagesXApply() ... DONE
[10:58:52.677] Number of futures (= number of chunks): 1
[10:58:52.677] Launching 1 futures (chunks) ...
[10:58:52.677] Chunk #1 of 1 ...
[10:58:52.677]  - Finding globals in 'X' for chunk #1 ...
[10:58:52.678]    + additional globals found: [n=1] ‘...future.elements_ii’
[10:58:52.679]    + additional namespaces needed: [n=0] 
> stopifnot(inherits(res, "error"))
> 
> message("*** future_lapply() - globals exceptions ... DONE")
*** future_lapply() - globals exceptions ... DONE
> 
> source("incl/end.R")
> 
