
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[08:25:00.006] plan(): Setting new future strategy stack:
[08:25:00.006] List of future strategies:
[08:25:00.006] 1. sequential:
[08:25:00.006]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.006]    - tweaked: FALSE
[08:25:00.006]    - call: future::plan("sequential")
[08:25:00.021] plan(): nbrOfWorkers() = 1
> 
> message("*** future_eapply() ...")
*** future_eapply() ...
> 
> message("- From example(eapply) ...")
- From example(eapply) ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   env <- new.env(hash = FALSE)
+   env$a <- 1:10
+   env$beta <- exp(-3:3)
+   env$logic <- c(TRUE, FALSE, FALSE, TRUE)
+   
+   y0 <- unlist(eapply(env, mean, USE.NAMES = FALSE))
+   y1 <- unlist(future_eapply(env, mean, USE.NAMES = FALSE))
+   stopifnot(all.equal(y1, y0))
+   
+   y0 <- eapply(env, quantile, probs = 1:3/4)
+   y1 <- future_eapply(env, quantile, probs = 1:3/4)
+   stopifnot(all.equal(y1, y0))
+   
+   y0 <- eapply(env, quantile)
+   y1 <- future_eapply(env, quantile)
+   stopifnot(all.equal(y1, y0))
+   y2 <- future_eapply(env, "quantile")
+   stopifnot(all.equal(y2, y0))
+ 
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[08:25:00.049] plan(): Setting new future strategy stack:
[08:25:00.050] List of future strategies:
[08:25:00.050] 1. sequential:
[08:25:00.050]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.050]    - tweaked: FALSE
[08:25:00.050]    - call: plan(strategy)
[08:25:00.063] plan(): nbrOfWorkers() = 1
[08:25:00.063] future_lapply() ...
[08:25:00.067] Number of chunks: 1
[08:25:00.068] getGlobalsAndPackagesXApply() ...
[08:25:00.068]  - future.globals: TRUE
[08:25:00.068] getGlobalsAndPackages() ...
[08:25:00.068] Searching for globals...
[08:25:00.071] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:00.071] Searching for globals ... DONE
[08:25:00.071] Resolving globals: FALSE
[08:25:00.072] The total size of the 1 globals is 273 bytes (273 bytes)
[08:25:00.072] The total size of the 1 globals exported for future expression (‘FUN()’) is 273 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (273 bytes of class ‘function’)
[08:25:00.072] - globals: [1] ‘FUN’
[08:25:00.072] 
[08:25:00.072] getGlobalsAndPackages() ... DONE
[08:25:00.073]  - globals found/used: [n=1] ‘FUN’
[08:25:00.073]  - needed namespaces: [n=0] 
[08:25:00.073] Finding globals ... DONE
[08:25:00.073]  - use_args: TRUE
[08:25:00.073]  - Getting '...' globals ...
[08:25:00.074] resolve() on list ...
[08:25:00.074]  recursive: 0
[08:25:00.074]  length: 1
[08:25:00.074]  elements: ‘...’
[08:25:00.074]  length: 0 (resolved future 1)
[08:25:00.074] resolve() on list ... DONE
[08:25:00.074]    - '...' content: [n=0] 
[08:25:00.075] List of 1
[08:25:00.075]  $ ...: list()
[08:25:00.075]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.075]  - attr(*, "where")=List of 1
[08:25:00.075]   ..$ ...:<environment: 0x5577eb2cabe8> 
[08:25:00.075]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.075]  - attr(*, "resolved")= logi TRUE
[08:25:00.075]  - attr(*, "total_size")= num NA
[08:25:00.079]  - Getting '...' globals ... DONE
[08:25:00.079] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:00.079] List of 2
[08:25:00.079]  $ ...future.FUN:function (x, ...)  
[08:25:00.079]  $ ...          : list()
[08:25:00.079]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.079]  - attr(*, "where")=List of 2
[08:25:00.079]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:00.079]   ..$ ...          :<environment: 0x5577eb2cabe8> 
[08:25:00.079]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.079]  - attr(*, "resolved")= logi FALSE
[08:25:00.079]  - attr(*, "total_size")= num 5249
[08:25:00.082] Packages to be attached in all futures: [n=0] 
[08:25:00.082] getGlobalsAndPackagesXApply() ... DONE
[08:25:00.082] Number of futures (= number of chunks): 1
[08:25:00.082] Launching 1 futures (chunks) ...
[08:25:00.082] Chunk #1 of 1 ...
[08:25:00.083]  - Finding globals in 'X' for chunk #1 ...
[08:25:00.083] getGlobalsAndPackages() ...
[08:25:00.083] Searching for globals...
[08:25:00.083] 
[08:25:00.083] Searching for globals ... DONE
[08:25:00.083] - globals: [0] <none>
[08:25:00.083] getGlobalsAndPackages() ... DONE
[08:25:00.083]    + additional globals found: [n=0] 
[08:25:00.084]    + additional namespaces needed: [n=0] 
[08:25:00.084]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:00.084]  - seeds: <none>
[08:25:00.084]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.084] getGlobalsAndPackages() ...
[08:25:00.084] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.084] Resolving globals: FALSE
[08:25:00.084] Tweak future expression to call with '...' arguments ...
[08:25:00.084] {
[08:25:00.084]     do.call(function(...) {
[08:25:00.084]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.084]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.084]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.084]             on.exit(options(oopts), add = TRUE)
[08:25:00.084]         }
[08:25:00.084]         {
[08:25:00.084]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.084]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.084]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.084]             })
[08:25:00.084]         }
[08:25:00.084]     }, args = future.call.arguments)
[08:25:00.084] }
[08:25:00.085] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.085] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.085] 
[08:25:00.085] getGlobalsAndPackages() ... DONE
[08:25:00.086] run() for ‘Future’ ...
[08:25:00.086] - state: ‘created’
[08:25:00.086] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:00.086] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:00.087] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:00.087]   - Field: ‘label’
[08:25:00.087]   - Field: ‘local’
[08:25:00.087]   - Field: ‘owner’
[08:25:00.087]   - Field: ‘envir’
[08:25:00.087]   - Field: ‘packages’
[08:25:00.087]   - Field: ‘gc’
[08:25:00.087]   - Field: ‘conditions’
[08:25:00.087]   - Field: ‘expr’
[08:25:00.087]   - Field: ‘uuid’
[08:25:00.087]   - Field: ‘seed’
[08:25:00.088]   - Field: ‘version’
[08:25:00.088]   - Field: ‘result’
[08:25:00.088]   - Field: ‘asynchronous’
[08:25:00.088]   - Field: ‘calls’
[08:25:00.088]   - Field: ‘globals’
[08:25:00.088]   - Field: ‘stdout’
[08:25:00.088]   - Field: ‘earlySignal’
[08:25:00.091]   - Field: ‘lazy’
[08:25:00.091]   - Field: ‘state’
[08:25:00.091] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:00.091] - Launch lazy future ...
[08:25:00.092] Packages needed by the future expression (n = 0): <none>
[08:25:00.092] Packages needed by future strategies (n = 0): <none>
[08:25:00.093] {
[08:25:00.093]     {
[08:25:00.093]         {
[08:25:00.093]             ...future.startTime <- base::Sys.time()
[08:25:00.093]             {
[08:25:00.093]                 {
[08:25:00.093]                   {
[08:25:00.093]                     base::local({
[08:25:00.093]                       has_future <- base::requireNamespace("future", 
[08:25:00.093]                         quietly = TRUE)
[08:25:00.093]                       if (has_future) {
[08:25:00.093]                         ns <- base::getNamespace("future")
[08:25:00.093]                         version <- ns[[".package"]][["version"]]
[08:25:00.093]                         if (is.null(version)) 
[08:25:00.093]                           version <- utils::packageVersion("future")
[08:25:00.093]                       }
[08:25:00.093]                       else {
[08:25:00.093]                         version <- NULL
[08:25:00.093]                       }
[08:25:00.093]                       if (!has_future || version < "1.8.0") {
[08:25:00.093]                         info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.093]                           "", base::R.version$version.string), 
[08:25:00.093]                           platform = base::sprintf("%s (%s-bit)", 
[08:25:00.093]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:00.093]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.093]                             "release", "version")], collapse = " "), 
[08:25:00.093]                           hostname = base::Sys.info()[["nodename"]])
[08:25:00.093]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.093]                           info)
[08:25:00.093]                         info <- base::paste(info, collapse = "; ")
[08:25:00.093]                         if (!has_future) {
[08:25:00.093]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.093]                             info)
[08:25:00.093]                         }
[08:25:00.093]                         else {
[08:25:00.093]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.093]                             info, version)
[08:25:00.093]                         }
[08:25:00.093]                         base::stop(msg)
[08:25:00.093]                       }
[08:25:00.093]                     })
[08:25:00.093]                   }
[08:25:00.093]                   ...future.strategy.old <- future::plan("list")
[08:25:00.093]                   options(future.plan = NULL)
[08:25:00.093]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.093]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.093]                 }
[08:25:00.093]                 ...future.workdir <- getwd()
[08:25:00.093]             }
[08:25:00.093]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.093]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.093]         }
[08:25:00.093]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.093]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:00.093]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.093]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.093]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.093]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.093]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.093]             base::names(...future.oldOptions))
[08:25:00.093]     }
[08:25:00.093]     if (FALSE) {
[08:25:00.093]     }
[08:25:00.093]     else {
[08:25:00.093]         if (TRUE) {
[08:25:00.093]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.093]                 open = "w")
[08:25:00.093]         }
[08:25:00.093]         else {
[08:25:00.093]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.093]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.093]         }
[08:25:00.093]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.093]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.093]             base::sink(type = "output", split = FALSE)
[08:25:00.093]             base::close(...future.stdout)
[08:25:00.093]         }, add = TRUE)
[08:25:00.093]     }
[08:25:00.093]     ...future.frame <- base::sys.nframe()
[08:25:00.093]     ...future.conditions <- base::list()
[08:25:00.093]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.093]     if (FALSE) {
[08:25:00.093]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.093]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.093]     }
[08:25:00.093]     ...future.result <- base::tryCatch({
[08:25:00.093]         base::withCallingHandlers({
[08:25:00.093]             ...future.value <- base::withVisible(base::local({
[08:25:00.093]                 do.call(function(...) {
[08:25:00.093]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.093]                   if (!identical(...future.globals.maxSize.org, 
[08:25:00.093]                     ...future.globals.maxSize)) {
[08:25:00.093]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.093]                     on.exit(options(oopts), add = TRUE)
[08:25:00.093]                   }
[08:25:00.093]                   {
[08:25:00.093]                     lapply(seq_along(...future.elements_ii), 
[08:25:00.093]                       FUN = function(jj) {
[08:25:00.093]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.093]                         ...future.FUN(...future.X_jj, ...)
[08:25:00.093]                       })
[08:25:00.093]                   }
[08:25:00.093]                 }, args = future.call.arguments)
[08:25:00.093]             }))
[08:25:00.093]             future::FutureResult(value = ...future.value$value, 
[08:25:00.093]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.093]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.093]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.093]                     ...future.globalenv.names))
[08:25:00.093]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.093]         }, condition = base::local({
[08:25:00.093]             c <- base::c
[08:25:00.093]             inherits <- base::inherits
[08:25:00.093]             invokeRestart <- base::invokeRestart
[08:25:00.093]             length <- base::length
[08:25:00.093]             list <- base::list
[08:25:00.093]             seq.int <- base::seq.int
[08:25:00.093]             signalCondition <- base::signalCondition
[08:25:00.093]             sys.calls <- base::sys.calls
[08:25:00.093]             `[[` <- base::`[[`
[08:25:00.093]             `+` <- base::`+`
[08:25:00.093]             `<<-` <- base::`<<-`
[08:25:00.093]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.093]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.093]                   3L)]
[08:25:00.093]             }
[08:25:00.093]             function(cond) {
[08:25:00.093]                 is_error <- inherits(cond, "error")
[08:25:00.093]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.093]                   NULL)
[08:25:00.093]                 if (is_error) {
[08:25:00.093]                   sessionInformation <- function() {
[08:25:00.093]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.093]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.093]                       search = base::search(), system = base::Sys.info())
[08:25:00.093]                   }
[08:25:00.093]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.093]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.093]                     cond$call), session = sessionInformation(), 
[08:25:00.093]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.093]                   signalCondition(cond)
[08:25:00.093]                 }
[08:25:00.093]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.093]                 "immediateCondition"))) {
[08:25:00.093]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.093]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.093]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.093]                   if (TRUE && !signal) {
[08:25:00.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.093]                     {
[08:25:00.093]                       inherits <- base::inherits
[08:25:00.093]                       invokeRestart <- base::invokeRestart
[08:25:00.093]                       is.null <- base::is.null
[08:25:00.093]                       muffled <- FALSE
[08:25:00.093]                       if (inherits(cond, "message")) {
[08:25:00.093]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.093]                         if (muffled) 
[08:25:00.093]                           invokeRestart("muffleMessage")
[08:25:00.093]                       }
[08:25:00.093]                       else if (inherits(cond, "warning")) {
[08:25:00.093]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.093]                         if (muffled) 
[08:25:00.093]                           invokeRestart("muffleWarning")
[08:25:00.093]                       }
[08:25:00.093]                       else if (inherits(cond, "condition")) {
[08:25:00.093]                         if (!is.null(pattern)) {
[08:25:00.093]                           computeRestarts <- base::computeRestarts
[08:25:00.093]                           grepl <- base::grepl
[08:25:00.093]                           restarts <- computeRestarts(cond)
[08:25:00.093]                           for (restart in restarts) {
[08:25:00.093]                             name <- restart$name
[08:25:00.093]                             if (is.null(name)) 
[08:25:00.093]                               next
[08:25:00.093]                             if (!grepl(pattern, name)) 
[08:25:00.093]                               next
[08:25:00.093]                             invokeRestart(restart)
[08:25:00.093]                             muffled <- TRUE
[08:25:00.093]                             break
[08:25:00.093]                           }
[08:25:00.093]                         }
[08:25:00.093]                       }
[08:25:00.093]                       invisible(muffled)
[08:25:00.093]                     }
[08:25:00.093]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.093]                   }
[08:25:00.093]                 }
[08:25:00.093]                 else {
[08:25:00.093]                   if (TRUE) {
[08:25:00.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.093]                     {
[08:25:00.093]                       inherits <- base::inherits
[08:25:00.093]                       invokeRestart <- base::invokeRestart
[08:25:00.093]                       is.null <- base::is.null
[08:25:00.093]                       muffled <- FALSE
[08:25:00.093]                       if (inherits(cond, "message")) {
[08:25:00.093]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.093]                         if (muffled) 
[08:25:00.093]                           invokeRestart("muffleMessage")
[08:25:00.093]                       }
[08:25:00.093]                       else if (inherits(cond, "warning")) {
[08:25:00.093]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.093]                         if (muffled) 
[08:25:00.093]                           invokeRestart("muffleWarning")
[08:25:00.093]                       }
[08:25:00.093]                       else if (inherits(cond, "condition")) {
[08:25:00.093]                         if (!is.null(pattern)) {
[08:25:00.093]                           computeRestarts <- base::computeRestarts
[08:25:00.093]                           grepl <- base::grepl
[08:25:00.093]                           restarts <- computeRestarts(cond)
[08:25:00.093]                           for (restart in restarts) {
[08:25:00.093]                             name <- restart$name
[08:25:00.093]                             if (is.null(name)) 
[08:25:00.093]                               next
[08:25:00.093]                             if (!grepl(pattern, name)) 
[08:25:00.093]                               next
[08:25:00.093]                             invokeRestart(restart)
[08:25:00.093]                             muffled <- TRUE
[08:25:00.093]                             break
[08:25:00.093]                           }
[08:25:00.093]                         }
[08:25:00.093]                       }
[08:25:00.093]                       invisible(muffled)
[08:25:00.093]                     }
[08:25:00.093]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.093]                   }
[08:25:00.093]                 }
[08:25:00.093]             }
[08:25:00.093]         }))
[08:25:00.093]     }, error = function(ex) {
[08:25:00.093]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.093]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.093]                 ...future.rng), started = ...future.startTime, 
[08:25:00.093]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.093]             version = "1.8"), class = "FutureResult")
[08:25:00.093]     }, finally = {
[08:25:00.093]         if (!identical(...future.workdir, getwd())) 
[08:25:00.093]             setwd(...future.workdir)
[08:25:00.093]         {
[08:25:00.093]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.093]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.093]             }
[08:25:00.093]             base::options(...future.oldOptions)
[08:25:00.093]             if (.Platform$OS.type == "windows") {
[08:25:00.093]                 old_names <- names(...future.oldEnvVars)
[08:25:00.093]                 envs <- base::Sys.getenv()
[08:25:00.093]                 names <- names(envs)
[08:25:00.093]                 common <- intersect(names, old_names)
[08:25:00.093]                 added <- setdiff(names, old_names)
[08:25:00.093]                 removed <- setdiff(old_names, names)
[08:25:00.093]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.093]                   envs[common]]
[08:25:00.093]                 NAMES <- toupper(changed)
[08:25:00.093]                 args <- list()
[08:25:00.093]                 for (kk in seq_along(NAMES)) {
[08:25:00.093]                   name <- changed[[kk]]
[08:25:00.093]                   NAME <- NAMES[[kk]]
[08:25:00.093]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.093]                     next
[08:25:00.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.093]                 }
[08:25:00.093]                 NAMES <- toupper(added)
[08:25:00.093]                 for (kk in seq_along(NAMES)) {
[08:25:00.093]                   name <- added[[kk]]
[08:25:00.093]                   NAME <- NAMES[[kk]]
[08:25:00.093]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.093]                     next
[08:25:00.093]                   args[[name]] <- ""
[08:25:00.093]                 }
[08:25:00.093]                 NAMES <- toupper(removed)
[08:25:00.093]                 for (kk in seq_along(NAMES)) {
[08:25:00.093]                   name <- removed[[kk]]
[08:25:00.093]                   NAME <- NAMES[[kk]]
[08:25:00.093]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.093]                     next
[08:25:00.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.093]                 }
[08:25:00.093]                 if (length(args) > 0) 
[08:25:00.093]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.093]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.093]             }
[08:25:00.093]             else {
[08:25:00.093]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.093]             }
[08:25:00.093]             {
[08:25:00.093]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.093]                   0L) {
[08:25:00.093]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.093]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.093]                   base::options(opts)
[08:25:00.093]                 }
[08:25:00.093]                 {
[08:25:00.093]                   {
[08:25:00.093]                     NULL
[08:25:00.093]                     RNGkind("Mersenne-Twister")
[08:25:00.093]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:25:00.093]                       inherits = FALSE)
[08:25:00.093]                   }
[08:25:00.093]                   options(future.plan = NULL)
[08:25:00.093]                   if (is.na(NA_character_)) 
[08:25:00.093]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.093]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.093]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.093]                     .init = FALSE)
[08:25:00.093]                 }
[08:25:00.093]             }
[08:25:00.093]         }
[08:25:00.093]     })
[08:25:00.093]     if (TRUE) {
[08:25:00.093]         base::sink(type = "output", split = FALSE)
[08:25:00.093]         if (TRUE) {
[08:25:00.093]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.093]         }
[08:25:00.093]         else {
[08:25:00.093]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.093]         }
[08:25:00.093]         base::close(...future.stdout)
[08:25:00.093]         ...future.stdout <- NULL
[08:25:00.093]     }
[08:25:00.093]     ...future.result$conditions <- ...future.conditions
[08:25:00.093]     ...future.result$finished <- base::Sys.time()
[08:25:00.093]     ...future.result
[08:25:00.093] }
[08:25:00.095] assign_globals() ...
[08:25:00.095] List of 5
[08:25:00.095]  $ ...future.FUN            :function (x, ...)  
[08:25:00.095]  $ future.call.arguments    : list()
[08:25:00.095]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.095]  $ ...future.elements_ii    :List of 3
[08:25:00.095]   ..$ : logi [1:4] TRUE FALSE FALSE TRUE
[08:25:00.095]   ..$ : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[08:25:00.095]   ..$ : int [1:10] 1 2 3 4 5 6 7 8 9 10
[08:25:00.095]  $ ...future.seeds_ii       : NULL
[08:25:00.095]  $ ...future.globals.maxSize: NULL
[08:25:00.095]  - attr(*, "where")=List of 5
[08:25:00.095]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.095]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.095]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.095]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.095]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.095]  - attr(*, "resolved")= logi FALSE
[08:25:00.095]  - attr(*, "total_size")= num 5249
[08:25:00.095]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.095]  - attr(*, "already-done")= logi TRUE
[08:25:00.100] - copied ‘...future.FUN’ to environment
[08:25:00.100] - copied ‘future.call.arguments’ to environment
[08:25:00.100] - copied ‘...future.elements_ii’ to environment
[08:25:00.100] - copied ‘...future.seeds_ii’ to environment
[08:25:00.100] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.101] assign_globals() ... done
[08:25:00.101] plan(): Setting new future strategy stack:
[08:25:00.101] List of future strategies:
[08:25:00.101] 1. sequential:
[08:25:00.101]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.101]    - tweaked: FALSE
[08:25:00.101]    - call: NULL
[08:25:00.101] plan(): nbrOfWorkers() = 1
[08:25:00.103] plan(): Setting new future strategy stack:
[08:25:00.103] List of future strategies:
[08:25:00.103] 1. sequential:
[08:25:00.103]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.103]    - tweaked: FALSE
[08:25:00.103]    - call: plan(strategy)
[08:25:00.103] plan(): nbrOfWorkers() = 1
[08:25:00.103] SequentialFuture started (and completed)
[08:25:00.104] - Launch lazy future ... done
[08:25:00.104] run() for ‘SequentialFuture’ ... done
[08:25:00.104] Created future:
[08:25:00.104] SequentialFuture:
[08:25:00.104] Label: ‘future_eapply-1’
[08:25:00.104] Expression:
[08:25:00.104] {
[08:25:00.104]     do.call(function(...) {
[08:25:00.104]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.104]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.104]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.104]             on.exit(options(oopts), add = TRUE)
[08:25:00.104]         }
[08:25:00.104]         {
[08:25:00.104]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.104]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.104]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.104]             })
[08:25:00.104]         }
[08:25:00.104]     }, args = future.call.arguments)
[08:25:00.104] }
[08:25:00.104] Lazy evaluation: FALSE
[08:25:00.104] Asynchronous evaluation: FALSE
[08:25:00.104] Local evaluation: TRUE
[08:25:00.104] Environment: R_GlobalEnv
[08:25:00.104] Capture standard output: TRUE
[08:25:00.104] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.104] Globals: 5 objects totaling 653 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 229 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.104] Packages: <none>
[08:25:00.104] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.104] Resolved: TRUE
[08:25:00.104] Value: 79 bytes of class ‘list’
[08:25:00.104] Early signaling: FALSE
[08:25:00.104] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.104] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:00.105] Chunk #1 of 1 ... DONE
[08:25:00.105] Launching 1 futures (chunks) ... DONE
[08:25:00.105] Resolving 1 futures (chunks) ...
[08:25:00.106] resolve() on list ...
[08:25:00.106]  recursive: 0
[08:25:00.106]  length: 1
[08:25:00.106] 
[08:25:00.106] resolved() for ‘SequentialFuture’ ...
[08:25:00.106] - state: ‘finished’
[08:25:00.106] - run: TRUE
[08:25:00.106] - result: ‘FutureResult’
[08:25:00.106] resolved() for ‘SequentialFuture’ ... done
[08:25:00.106] Future #1
[08:25:00.107] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:00.107] - nx: 1
[08:25:00.107] - relay: TRUE
[08:25:00.107] - stdout: TRUE
[08:25:00.107] - signal: TRUE
[08:25:00.107] - resignal: FALSE
[08:25:00.107] - force: TRUE
[08:25:00.107] - relayed: [n=1] FALSE
[08:25:00.107] - queued futures: [n=1] FALSE
[08:25:00.108]  - until=1
[08:25:00.108]  - relaying element #1
[08:25:00.108] - relayed: [n=1] TRUE
[08:25:00.108] - queued futures: [n=1] TRUE
[08:25:00.108] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:00.108]  length: 0 (resolved future 1)
[08:25:00.108] Relaying remaining futures
[08:25:00.108] signalConditionsASAP(NULL, pos=0) ...
[08:25:00.108] - nx: 1
[08:25:00.108] - relay: TRUE
[08:25:00.109] - stdout: TRUE
[08:25:00.109] - signal: TRUE
[08:25:00.109] - resignal: FALSE
[08:25:00.109] - force: TRUE
[08:25:00.109] - relayed: [n=1] TRUE
[08:25:00.109] - queued futures: [n=1] TRUE
 - flush all
[08:25:00.109] - relayed: [n=1] TRUE
[08:25:00.109] - queued futures: [n=1] TRUE
[08:25:00.109] signalConditionsASAP(NULL, pos=0) ... done
[08:25:00.109] resolve() on list ... DONE
[08:25:00.109]  - Number of value chunks collected: 1
[08:25:00.110] Resolving 1 futures (chunks) ... DONE
[08:25:00.110] Reducing values from 1 chunks ...
[08:25:00.110]  - Number of values collected after concatenation: 3
[08:25:00.110]  - Number of values expected: 3
[08:25:00.110] Reducing values from 1 chunks ... DONE
[08:25:00.110] future_lapply() ... DONE
[08:25:00.112] future_lapply() ...
[08:25:00.112] Number of chunks: 1
[08:25:00.112] getGlobalsAndPackagesXApply() ...
[08:25:00.113]  - future.globals: TRUE
[08:25:00.113] getGlobalsAndPackages() ...
[08:25:00.113] Searching for globals...
[08:25:00.114] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:00.114] Searching for globals ... DONE
[08:25:00.114] Resolving globals: FALSE
[08:25:00.114] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:00.115] The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:00.115] - globals: [1] ‘FUN’
[08:25:00.115] - packages: [1] ‘stats’
[08:25:00.115] getGlobalsAndPackages() ... DONE
[08:25:00.115]  - globals found/used: [n=1] ‘FUN’
[08:25:00.115]  - needed namespaces: [n=1] ‘stats’
[08:25:00.115] Finding globals ... DONE
[08:25:00.115]  - use_args: TRUE
[08:25:00.115]  - Getting '...' globals ...
[08:25:00.116] resolve() on list ...
[08:25:00.116]  recursive: 0
[08:25:00.116]  length: 1
[08:25:00.116]  elements: ‘...’
[08:25:00.116]  length: 0 (resolved future 1)
[08:25:00.116] resolve() on list ... DONE
[08:25:00.116]    - '...' content: [n=1] ‘probs’
[08:25:00.116] List of 1
[08:25:00.116]  $ ...:List of 1
[08:25:00.116]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:00.116]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.116]  - attr(*, "where")=List of 1
[08:25:00.116]   ..$ ...:<environment: 0x5577ed2772d0> 
[08:25:00.116]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.116]  - attr(*, "resolved")= logi TRUE
[08:25:00.116]  - attr(*, "total_size")= num NA
[08:25:00.121]  - Getting '...' globals ... DONE
[08:25:00.122] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:00.122] List of 2
[08:25:00.122]  $ ...future.FUN:function (x, ...)  
[08:25:00.122]  $ ...          :List of 1
[08:25:00.122]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:00.122]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.122]  - attr(*, "where")=List of 2
[08:25:00.122]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:00.122]   ..$ ...          :<environment: 0x5577ed2772d0> 
[08:25:00.122]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.122]  - attr(*, "resolved")= logi FALSE
[08:25:00.122]  - attr(*, "total_size")= num 6525
[08:25:00.125] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:00.125] getGlobalsAndPackagesXApply() ... DONE
[08:25:00.125] Number of futures (= number of chunks): 1
[08:25:00.125] Launching 1 futures (chunks) ...
[08:25:00.125] Chunk #1 of 1 ...
[08:25:00.125]  - Finding globals in 'X' for chunk #1 ...
[08:25:00.126] getGlobalsAndPackages() ...
[08:25:00.126] Searching for globals...
[08:25:00.126] 
[08:25:00.126] Searching for globals ... DONE
[08:25:00.126] - globals: [0] <none>
[08:25:00.126] getGlobalsAndPackages() ... DONE
[08:25:00.126]    + additional globals found: [n=0] 
[08:25:00.126]    + additional namespaces needed: [n=0] 
[08:25:00.126]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:00.126]  - seeds: <none>
[08:25:00.127]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.127] getGlobalsAndPackages() ...
[08:25:00.127] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.127] Resolving globals: FALSE
[08:25:00.127] Tweak future expression to call with '...' arguments ...
[08:25:00.127] {
[08:25:00.127]     do.call(function(...) {
[08:25:00.127]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.127]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.127]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.127]             on.exit(options(oopts), add = TRUE)
[08:25:00.127]         }
[08:25:00.127]         {
[08:25:00.127]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.127]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.127]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.127]             })
[08:25:00.127]         }
[08:25:00.127]     }, args = future.call.arguments)
[08:25:00.127] }
[08:25:00.127] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.128] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.128] - packages: [1] ‘stats’
[08:25:00.128] getGlobalsAndPackages() ... DONE
[08:25:00.128] run() for ‘Future’ ...
[08:25:00.128] - state: ‘created’
[08:25:00.128] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:00.129] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:00.129] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:00.129]   - Field: ‘label’
[08:25:00.129]   - Field: ‘local’
[08:25:00.129]   - Field: ‘owner’
[08:25:00.129]   - Field: ‘envir’
[08:25:00.129]   - Field: ‘packages’
[08:25:00.129]   - Field: ‘gc’
[08:25:00.129]   - Field: ‘conditions’
[08:25:00.130]   - Field: ‘expr’
[08:25:00.130]   - Field: ‘uuid’
[08:25:00.130]   - Field: ‘seed’
[08:25:00.130]   - Field: ‘version’
[08:25:00.130]   - Field: ‘result’
[08:25:00.130]   - Field: ‘asynchronous’
[08:25:00.130]   - Field: ‘calls’
[08:25:00.130]   - Field: ‘globals’
[08:25:00.130]   - Field: ‘stdout’
[08:25:00.130]   - Field: ‘earlySignal’
[08:25:00.130]   - Field: ‘lazy’
[08:25:00.130]   - Field: ‘state’
[08:25:00.131] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:00.131] - Launch lazy future ...
[08:25:00.131] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.131] Packages needed by future strategies (n = 0): <none>
[08:25:00.131] {
[08:25:00.131]     {
[08:25:00.131]         {
[08:25:00.131]             ...future.startTime <- base::Sys.time()
[08:25:00.131]             {
[08:25:00.131]                 {
[08:25:00.131]                   {
[08:25:00.131]                     {
[08:25:00.131]                       base::local({
[08:25:00.131]                         has_future <- base::requireNamespace("future", 
[08:25:00.131]                           quietly = TRUE)
[08:25:00.131]                         if (has_future) {
[08:25:00.131]                           ns <- base::getNamespace("future")
[08:25:00.131]                           version <- ns[[".package"]][["version"]]
[08:25:00.131]                           if (is.null(version)) 
[08:25:00.131]                             version <- utils::packageVersion("future")
[08:25:00.131]                         }
[08:25:00.131]                         else {
[08:25:00.131]                           version <- NULL
[08:25:00.131]                         }
[08:25:00.131]                         if (!has_future || version < "1.8.0") {
[08:25:00.131]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.131]                             "", base::R.version$version.string), 
[08:25:00.131]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:00.131]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:00.131]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.131]                               "release", "version")], collapse = " "), 
[08:25:00.131]                             hostname = base::Sys.info()[["nodename"]])
[08:25:00.131]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.131]                             info)
[08:25:00.131]                           info <- base::paste(info, collapse = "; ")
[08:25:00.131]                           if (!has_future) {
[08:25:00.131]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.131]                               info)
[08:25:00.131]                           }
[08:25:00.131]                           else {
[08:25:00.131]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.131]                               info, version)
[08:25:00.131]                           }
[08:25:00.131]                           base::stop(msg)
[08:25:00.131]                         }
[08:25:00.131]                       })
[08:25:00.131]                     }
[08:25:00.131]                     base::local({
[08:25:00.131]                       for (pkg in "stats") {
[08:25:00.131]                         base::loadNamespace(pkg)
[08:25:00.131]                         base::library(pkg, character.only = TRUE)
[08:25:00.131]                       }
[08:25:00.131]                     })
[08:25:00.131]                   }
[08:25:00.131]                   ...future.strategy.old <- future::plan("list")
[08:25:00.131]                   options(future.plan = NULL)
[08:25:00.131]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.131]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.131]                 }
[08:25:00.131]                 ...future.workdir <- getwd()
[08:25:00.131]             }
[08:25:00.131]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.131]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.131]         }
[08:25:00.131]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.131]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:00.131]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.131]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.131]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.131]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.131]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.131]             base::names(...future.oldOptions))
[08:25:00.131]     }
[08:25:00.131]     if (FALSE) {
[08:25:00.131]     }
[08:25:00.131]     else {
[08:25:00.131]         if (TRUE) {
[08:25:00.131]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.131]                 open = "w")
[08:25:00.131]         }
[08:25:00.131]         else {
[08:25:00.131]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.131]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.131]         }
[08:25:00.131]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.131]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.131]             base::sink(type = "output", split = FALSE)
[08:25:00.131]             base::close(...future.stdout)
[08:25:00.131]         }, add = TRUE)
[08:25:00.131]     }
[08:25:00.131]     ...future.frame <- base::sys.nframe()
[08:25:00.131]     ...future.conditions <- base::list()
[08:25:00.131]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.131]     if (FALSE) {
[08:25:00.131]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.131]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.131]     }
[08:25:00.131]     ...future.result <- base::tryCatch({
[08:25:00.131]         base::withCallingHandlers({
[08:25:00.131]             ...future.value <- base::withVisible(base::local({
[08:25:00.131]                 do.call(function(...) {
[08:25:00.131]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.131]                   if (!identical(...future.globals.maxSize.org, 
[08:25:00.131]                     ...future.globals.maxSize)) {
[08:25:00.131]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.131]                     on.exit(options(oopts), add = TRUE)
[08:25:00.131]                   }
[08:25:00.131]                   {
[08:25:00.131]                     lapply(seq_along(...future.elements_ii), 
[08:25:00.131]                       FUN = function(jj) {
[08:25:00.131]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.131]                         ...future.FUN(...future.X_jj, ...)
[08:25:00.131]                       })
[08:25:00.131]                   }
[08:25:00.131]                 }, args = future.call.arguments)
[08:25:00.131]             }))
[08:25:00.131]             future::FutureResult(value = ...future.value$value, 
[08:25:00.131]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.131]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.131]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.131]                     ...future.globalenv.names))
[08:25:00.131]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.131]         }, condition = base::local({
[08:25:00.131]             c <- base::c
[08:25:00.131]             inherits <- base::inherits
[08:25:00.131]             invokeRestart <- base::invokeRestart
[08:25:00.131]             length <- base::length
[08:25:00.131]             list <- base::list
[08:25:00.131]             seq.int <- base::seq.int
[08:25:00.131]             signalCondition <- base::signalCondition
[08:25:00.131]             sys.calls <- base::sys.calls
[08:25:00.131]             `[[` <- base::`[[`
[08:25:00.131]             `+` <- base::`+`
[08:25:00.131]             `<<-` <- base::`<<-`
[08:25:00.131]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.131]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.131]                   3L)]
[08:25:00.131]             }
[08:25:00.131]             function(cond) {
[08:25:00.131]                 is_error <- inherits(cond, "error")
[08:25:00.131]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.131]                   NULL)
[08:25:00.131]                 if (is_error) {
[08:25:00.131]                   sessionInformation <- function() {
[08:25:00.131]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.131]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.131]                       search = base::search(), system = base::Sys.info())
[08:25:00.131]                   }
[08:25:00.131]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.131]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.131]                     cond$call), session = sessionInformation(), 
[08:25:00.131]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.131]                   signalCondition(cond)
[08:25:00.131]                 }
[08:25:00.131]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.131]                 "immediateCondition"))) {
[08:25:00.131]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.131]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.131]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.131]                   if (TRUE && !signal) {
[08:25:00.131]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.131]                     {
[08:25:00.131]                       inherits <- base::inherits
[08:25:00.131]                       invokeRestart <- base::invokeRestart
[08:25:00.131]                       is.null <- base::is.null
[08:25:00.131]                       muffled <- FALSE
[08:25:00.131]                       if (inherits(cond, "message")) {
[08:25:00.131]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.131]                         if (muffled) 
[08:25:00.131]                           invokeRestart("muffleMessage")
[08:25:00.131]                       }
[08:25:00.131]                       else if (inherits(cond, "warning")) {
[08:25:00.131]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.131]                         if (muffled) 
[08:25:00.131]                           invokeRestart("muffleWarning")
[08:25:00.131]                       }
[08:25:00.131]                       else if (inherits(cond, "condition")) {
[08:25:00.131]                         if (!is.null(pattern)) {
[08:25:00.131]                           computeRestarts <- base::computeRestarts
[08:25:00.131]                           grepl <- base::grepl
[08:25:00.131]                           restarts <- computeRestarts(cond)
[08:25:00.131]                           for (restart in restarts) {
[08:25:00.131]                             name <- restart$name
[08:25:00.131]                             if (is.null(name)) 
[08:25:00.131]                               next
[08:25:00.131]                             if (!grepl(pattern, name)) 
[08:25:00.131]                               next
[08:25:00.131]                             invokeRestart(restart)
[08:25:00.131]                             muffled <- TRUE
[08:25:00.131]                             break
[08:25:00.131]                           }
[08:25:00.131]                         }
[08:25:00.131]                       }
[08:25:00.131]                       invisible(muffled)
[08:25:00.131]                     }
[08:25:00.131]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.131]                   }
[08:25:00.131]                 }
[08:25:00.131]                 else {
[08:25:00.131]                   if (TRUE) {
[08:25:00.131]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.131]                     {
[08:25:00.131]                       inherits <- base::inherits
[08:25:00.131]                       invokeRestart <- base::invokeRestart
[08:25:00.131]                       is.null <- base::is.null
[08:25:00.131]                       muffled <- FALSE
[08:25:00.131]                       if (inherits(cond, "message")) {
[08:25:00.131]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.131]                         if (muffled) 
[08:25:00.131]                           invokeRestart("muffleMessage")
[08:25:00.131]                       }
[08:25:00.131]                       else if (inherits(cond, "warning")) {
[08:25:00.131]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.131]                         if (muffled) 
[08:25:00.131]                           invokeRestart("muffleWarning")
[08:25:00.131]                       }
[08:25:00.131]                       else if (inherits(cond, "condition")) {
[08:25:00.131]                         if (!is.null(pattern)) {
[08:25:00.131]                           computeRestarts <- base::computeRestarts
[08:25:00.131]                           grepl <- base::grepl
[08:25:00.131]                           restarts <- computeRestarts(cond)
[08:25:00.131]                           for (restart in restarts) {
[08:25:00.131]                             name <- restart$name
[08:25:00.131]                             if (is.null(name)) 
[08:25:00.131]                               next
[08:25:00.131]                             if (!grepl(pattern, name)) 
[08:25:00.131]                               next
[08:25:00.131]                             invokeRestart(restart)
[08:25:00.131]                             muffled <- TRUE
[08:25:00.131]                             break
[08:25:00.131]                           }
[08:25:00.131]                         }
[08:25:00.131]                       }
[08:25:00.131]                       invisible(muffled)
[08:25:00.131]                     }
[08:25:00.131]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.131]                   }
[08:25:00.131]                 }
[08:25:00.131]             }
[08:25:00.131]         }))
[08:25:00.131]     }, error = function(ex) {
[08:25:00.131]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.131]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.131]                 ...future.rng), started = ...future.startTime, 
[08:25:00.131]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.131]             version = "1.8"), class = "FutureResult")
[08:25:00.131]     }, finally = {
[08:25:00.131]         if (!identical(...future.workdir, getwd())) 
[08:25:00.131]             setwd(...future.workdir)
[08:25:00.131]         {
[08:25:00.131]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.131]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.131]             }
[08:25:00.131]             base::options(...future.oldOptions)
[08:25:00.131]             if (.Platform$OS.type == "windows") {
[08:25:00.131]                 old_names <- names(...future.oldEnvVars)
[08:25:00.131]                 envs <- base::Sys.getenv()
[08:25:00.131]                 names <- names(envs)
[08:25:00.131]                 common <- intersect(names, old_names)
[08:25:00.131]                 added <- setdiff(names, old_names)
[08:25:00.131]                 removed <- setdiff(old_names, names)
[08:25:00.131]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.131]                   envs[common]]
[08:25:00.131]                 NAMES <- toupper(changed)
[08:25:00.131]                 args <- list()
[08:25:00.131]                 for (kk in seq_along(NAMES)) {
[08:25:00.131]                   name <- changed[[kk]]
[08:25:00.131]                   NAME <- NAMES[[kk]]
[08:25:00.131]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.131]                     next
[08:25:00.131]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.131]                 }
[08:25:00.131]                 NAMES <- toupper(added)
[08:25:00.131]                 for (kk in seq_along(NAMES)) {
[08:25:00.131]                   name <- added[[kk]]
[08:25:00.131]                   NAME <- NAMES[[kk]]
[08:25:00.131]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.131]                     next
[08:25:00.131]                   args[[name]] <- ""
[08:25:00.131]                 }
[08:25:00.131]                 NAMES <- toupper(removed)
[08:25:00.131]                 for (kk in seq_along(NAMES)) {
[08:25:00.131]                   name <- removed[[kk]]
[08:25:00.131]                   NAME <- NAMES[[kk]]
[08:25:00.131]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.131]                     next
[08:25:00.131]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.131]                 }
[08:25:00.131]                 if (length(args) > 0) 
[08:25:00.131]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.131]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.131]             }
[08:25:00.131]             else {
[08:25:00.131]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.131]             }
[08:25:00.131]             {
[08:25:00.131]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.131]                   0L) {
[08:25:00.131]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.131]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.131]                   base::options(opts)
[08:25:00.131]                 }
[08:25:00.131]                 {
[08:25:00.131]                   {
[08:25:00.131]                     NULL
[08:25:00.131]                     RNGkind("Mersenne-Twister")
[08:25:00.131]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:25:00.131]                       inherits = FALSE)
[08:25:00.131]                   }
[08:25:00.131]                   options(future.plan = NULL)
[08:25:00.131]                   if (is.na(NA_character_)) 
[08:25:00.131]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.131]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.131]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.131]                     .init = FALSE)
[08:25:00.131]                 }
[08:25:00.131]             }
[08:25:00.131]         }
[08:25:00.131]     })
[08:25:00.131]     if (TRUE) {
[08:25:00.131]         base::sink(type = "output", split = FALSE)
[08:25:00.131]         if (TRUE) {
[08:25:00.131]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.131]         }
[08:25:00.131]         else {
[08:25:00.131]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.131]         }
[08:25:00.131]         base::close(...future.stdout)
[08:25:00.131]         ...future.stdout <- NULL
[08:25:00.131]     }
[08:25:00.131]     ...future.result$conditions <- ...future.conditions
[08:25:00.131]     ...future.result$finished <- base::Sys.time()
[08:25:00.131]     ...future.result
[08:25:00.131] }
[08:25:00.133] assign_globals() ...
[08:25:00.133] List of 5
[08:25:00.133]  $ ...future.FUN            :function (x, ...)  
[08:25:00.133]  $ future.call.arguments    :List of 1
[08:25:00.133]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:00.133]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.133]  $ ...future.elements_ii    :List of 3
[08:25:00.133]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[08:25:00.133]   ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[08:25:00.133]   ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[08:25:00.133]  $ ...future.seeds_ii       : NULL
[08:25:00.133]  $ ...future.globals.maxSize: NULL
[08:25:00.133]  - attr(*, "where")=List of 5
[08:25:00.133]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.133]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.133]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.133]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.133]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.133]  - attr(*, "resolved")= logi FALSE
[08:25:00.133]  - attr(*, "total_size")= num 6525
[08:25:00.133]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.133]  - attr(*, "already-done")= logi TRUE
[08:25:00.139] - copied ‘...future.FUN’ to environment
[08:25:00.139] - copied ‘future.call.arguments’ to environment
[08:25:00.139] - copied ‘...future.elements_ii’ to environment
[08:25:00.139] - copied ‘...future.seeds_ii’ to environment
[08:25:00.139] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.139] assign_globals() ... done
[08:25:00.140] plan(): Setting new future strategy stack:
[08:25:00.140] List of future strategies:
[08:25:00.140] 1. sequential:
[08:25:00.140]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.140]    - tweaked: FALSE
[08:25:00.140]    - call: NULL
[08:25:00.140] plan(): nbrOfWorkers() = 1
[08:25:00.142] plan(): Setting new future strategy stack:
[08:25:00.142] List of future strategies:
[08:25:00.142] 1. sequential:
[08:25:00.142]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.142]    - tweaked: FALSE
[08:25:00.142]    - call: plan(strategy)
[08:25:00.142] plan(): nbrOfWorkers() = 1
[08:25:00.142] SequentialFuture started (and completed)
[08:25:00.142] - Launch lazy future ... done
[08:25:00.143] run() for ‘SequentialFuture’ ... done
[08:25:00.143] Created future:
[08:25:00.143] SequentialFuture:
[08:25:00.143] Label: ‘future_eapply-1’
[08:25:00.143] Expression:
[08:25:00.143] {
[08:25:00.143]     do.call(function(...) {
[08:25:00.143]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.143]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.143]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.143]             on.exit(options(oopts), add = TRUE)
[08:25:00.143]         }
[08:25:00.143]         {
[08:25:00.143]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.143]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.143]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.143]             })
[08:25:00.143]         }
[08:25:00.143]     }, args = future.call.arguments)
[08:25:00.143] }
[08:25:00.143] Lazy evaluation: FALSE
[08:25:00.143] Asynchronous evaluation: FALSE
[08:25:00.143] Local evaluation: TRUE
[08:25:00.143] Environment: R_GlobalEnv
[08:25:00.143] Capture standard output: TRUE
[08:25:00.143] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.143] Globals: 5 objects totaling 832 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 296 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.143] Packages: 1 packages (‘stats’)
[08:25:00.143] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.143] Resolved: TRUE
[08:25:00.143] Value: 299 bytes of class ‘list’
[08:25:00.143] Early signaling: FALSE
[08:25:00.143] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.143] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:00.144] Chunk #1 of 1 ... DONE
[08:25:00.144] Launching 1 futures (chunks) ... DONE
[08:25:00.144] Resolving 1 futures (chunks) ...
[08:25:00.144] resolve() on list ...
[08:25:00.144]  recursive: 0
[08:25:00.144]  length: 1
[08:25:00.144] 
[08:25:00.144] resolved() for ‘SequentialFuture’ ...
[08:25:00.144] - state: ‘finished’
[08:25:00.144] - run: TRUE
[08:25:00.144] - result: ‘FutureResult’
[08:25:00.145] resolved() for ‘SequentialFuture’ ... done
[08:25:00.145] Future #1
[08:25:00.145] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:00.145] - nx: 1
[08:25:00.145] - relay: TRUE
[08:25:00.145] - stdout: TRUE
[08:25:00.145] - signal: TRUE
[08:25:00.145] - resignal: FALSE
[08:25:00.145] - force: TRUE
[08:25:00.145] - relayed: [n=1] FALSE
[08:25:00.145] - queued futures: [n=1] FALSE
[08:25:00.146]  - until=1
[08:25:00.146]  - relaying element #1
[08:25:00.148] - relayed: [n=1] TRUE
[08:25:00.148] - queued futures: [n=1] TRUE
[08:25:00.148] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:00.148]  length: 0 (resolved future 1)
[08:25:00.148] Relaying remaining futures
[08:25:00.148] signalConditionsASAP(NULL, pos=0) ...
[08:25:00.148] - nx: 1
[08:25:00.148] - relay: TRUE
[08:25:00.148] - stdout: TRUE
[08:25:00.148] - signal: TRUE
[08:25:00.148] - resignal: FALSE
[08:25:00.148] - force: TRUE
[08:25:00.149] - relayed: [n=1] TRUE
[08:25:00.149] - queued futures: [n=1] TRUE
 - flush all
[08:25:00.149] - relayed: [n=1] TRUE
[08:25:00.149] - queued futures: [n=1] TRUE
[08:25:00.149] signalConditionsASAP(NULL, pos=0) ... done
[08:25:00.149] resolve() on list ... DONE
[08:25:00.149]  - Number of value chunks collected: 1
[08:25:00.149] Resolving 1 futures (chunks) ... DONE
[08:25:00.149] Reducing values from 1 chunks ...
[08:25:00.149]  - Number of values collected after concatenation: 3
[08:25:00.150]  - Number of values expected: 3
[08:25:00.150] Reducing values from 1 chunks ... DONE
[08:25:00.150] future_lapply() ... DONE
[08:25:00.151] future_lapply() ...
[08:25:00.151] Number of chunks: 1
[08:25:00.152] getGlobalsAndPackagesXApply() ...
[08:25:00.152]  - future.globals: TRUE
[08:25:00.152] getGlobalsAndPackages() ...
[08:25:00.152] Searching for globals...
[08:25:00.153] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:00.153] Searching for globals ... DONE
[08:25:00.153] Resolving globals: FALSE
[08:25:00.153] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:00.154] The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:00.154] - globals: [1] ‘FUN’
[08:25:00.154] - packages: [1] ‘stats’
[08:25:00.154] getGlobalsAndPackages() ... DONE
[08:25:00.154]  - globals found/used: [n=1] ‘FUN’
[08:25:00.154]  - needed namespaces: [n=1] ‘stats’
[08:25:00.154] Finding globals ... DONE
[08:25:00.154]  - use_args: TRUE
[08:25:00.155]  - Getting '...' globals ...
[08:25:00.155] resolve() on list ...
[08:25:00.155]  recursive: 0
[08:25:00.155]  length: 1
[08:25:00.155]  elements: ‘...’
[08:25:00.155]  length: 0 (resolved future 1)
[08:25:00.155] resolve() on list ... DONE
[08:25:00.155]    - '...' content: [n=0] 
[08:25:00.156] List of 1
[08:25:00.156]  $ ...: list()
[08:25:00.156]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.156]  - attr(*, "where")=List of 1
[08:25:00.156]   ..$ ...:<environment: 0x5577eb6cf0f8> 
[08:25:00.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.156]  - attr(*, "resolved")= logi TRUE
[08:25:00.156]  - attr(*, "total_size")= num NA
[08:25:00.158]  - Getting '...' globals ... DONE
[08:25:00.158] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:00.158] List of 2
[08:25:00.158]  $ ...future.FUN:function (x, ...)  
[08:25:00.158]  $ ...          : list()
[08:25:00.158]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.158]  - attr(*, "where")=List of 2
[08:25:00.158]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:00.158]   ..$ ...          :<environment: 0x5577eb6cf0f8> 
[08:25:00.158]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.158]  - attr(*, "resolved")= logi FALSE
[08:25:00.158]  - attr(*, "total_size")= num 5433
[08:25:00.161] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:00.161] getGlobalsAndPackagesXApply() ... DONE
[08:25:00.161] Number of futures (= number of chunks): 1
[08:25:00.161] Launching 1 futures (chunks) ...
[08:25:00.161] Chunk #1 of 1 ...
[08:25:00.161]  - Finding globals in 'X' for chunk #1 ...
[08:25:00.161] getGlobalsAndPackages() ...
[08:25:00.162] Searching for globals...
[08:25:00.162] 
[08:25:00.162] Searching for globals ... DONE
[08:25:00.162] - globals: [0] <none>
[08:25:00.162] getGlobalsAndPackages() ... DONE
[08:25:00.162]    + additional globals found: [n=0] 
[08:25:00.162]    + additional namespaces needed: [n=0] 
[08:25:00.162]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:00.162]  - seeds: <none>
[08:25:00.163]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.163] getGlobalsAndPackages() ...
[08:25:00.163] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.163] Resolving globals: FALSE
[08:25:00.163] Tweak future expression to call with '...' arguments ...
[08:25:00.163] {
[08:25:00.163]     do.call(function(...) {
[08:25:00.163]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.163]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.163]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.163]             on.exit(options(oopts), add = TRUE)
[08:25:00.163]         }
[08:25:00.163]         {
[08:25:00.163]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.163]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.163]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.163]             })
[08:25:00.163]         }
[08:25:00.163]     }, args = future.call.arguments)
[08:25:00.163] }
[08:25:00.163] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.164] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.164] - packages: [1] ‘stats’
[08:25:00.164] getGlobalsAndPackages() ... DONE
[08:25:00.164] run() for ‘Future’ ...
[08:25:00.164] - state: ‘created’
[08:25:00.164] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:00.165] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:00.165] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:00.165]   - Field: ‘label’
[08:25:00.165]   - Field: ‘local’
[08:25:00.165]   - Field: ‘owner’
[08:25:00.165]   - Field: ‘envir’
[08:25:00.165]   - Field: ‘packages’
[08:25:00.165]   - Field: ‘gc’
[08:25:00.165]   - Field: ‘conditions’
[08:25:00.165]   - Field: ‘expr’
[08:25:00.166]   - Field: ‘uuid’
[08:25:00.166]   - Field: ‘seed’
[08:25:00.166]   - Field: ‘version’
[08:25:00.166]   - Field: ‘result’
[08:25:00.166]   - Field: ‘asynchronous’
[08:25:00.166]   - Field: ‘calls’
[08:25:00.166]   - Field: ‘globals’
[08:25:00.166]   - Field: ‘stdout’
[08:25:00.166]   - Field: ‘earlySignal’
[08:25:00.166]   - Field: ‘lazy’
[08:25:00.166]   - Field: ‘state’
[08:25:00.166] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:00.167] - Launch lazy future ...
[08:25:00.167] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.167] Packages needed by future strategies (n = 0): <none>
[08:25:00.167] {
[08:25:00.167]     {
[08:25:00.167]         {
[08:25:00.167]             ...future.startTime <- base::Sys.time()
[08:25:00.167]             {
[08:25:00.167]                 {
[08:25:00.167]                   {
[08:25:00.167]                     {
[08:25:00.167]                       base::local({
[08:25:00.167]                         has_future <- base::requireNamespace("future", 
[08:25:00.167]                           quietly = TRUE)
[08:25:00.167]                         if (has_future) {
[08:25:00.167]                           ns <- base::getNamespace("future")
[08:25:00.167]                           version <- ns[[".package"]][["version"]]
[08:25:00.167]                           if (is.null(version)) 
[08:25:00.167]                             version <- utils::packageVersion("future")
[08:25:00.167]                         }
[08:25:00.167]                         else {
[08:25:00.167]                           version <- NULL
[08:25:00.167]                         }
[08:25:00.167]                         if (!has_future || version < "1.8.0") {
[08:25:00.167]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.167]                             "", base::R.version$version.string), 
[08:25:00.167]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:00.167]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:00.167]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.167]                               "release", "version")], collapse = " "), 
[08:25:00.167]                             hostname = base::Sys.info()[["nodename"]])
[08:25:00.167]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.167]                             info)
[08:25:00.167]                           info <- base::paste(info, collapse = "; ")
[08:25:00.167]                           if (!has_future) {
[08:25:00.167]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.167]                               info)
[08:25:00.167]                           }
[08:25:00.167]                           else {
[08:25:00.167]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.167]                               info, version)
[08:25:00.167]                           }
[08:25:00.167]                           base::stop(msg)
[08:25:00.167]                         }
[08:25:00.167]                       })
[08:25:00.167]                     }
[08:25:00.167]                     base::local({
[08:25:00.167]                       for (pkg in "stats") {
[08:25:00.167]                         base::loadNamespace(pkg)
[08:25:00.167]                         base::library(pkg, character.only = TRUE)
[08:25:00.167]                       }
[08:25:00.167]                     })
[08:25:00.167]                   }
[08:25:00.167]                   ...future.strategy.old <- future::plan("list")
[08:25:00.167]                   options(future.plan = NULL)
[08:25:00.167]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.167]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.167]                 }
[08:25:00.167]                 ...future.workdir <- getwd()
[08:25:00.167]             }
[08:25:00.167]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.167]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.167]         }
[08:25:00.167]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.167]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:00.167]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.167]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.167]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.167]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.167]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.167]             base::names(...future.oldOptions))
[08:25:00.167]     }
[08:25:00.167]     if (FALSE) {
[08:25:00.167]     }
[08:25:00.167]     else {
[08:25:00.167]         if (TRUE) {
[08:25:00.167]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.167]                 open = "w")
[08:25:00.167]         }
[08:25:00.167]         else {
[08:25:00.167]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.167]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.167]         }
[08:25:00.167]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.167]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.167]             base::sink(type = "output", split = FALSE)
[08:25:00.167]             base::close(...future.stdout)
[08:25:00.167]         }, add = TRUE)
[08:25:00.167]     }
[08:25:00.167]     ...future.frame <- base::sys.nframe()
[08:25:00.167]     ...future.conditions <- base::list()
[08:25:00.167]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.167]     if (FALSE) {
[08:25:00.167]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.167]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.167]     }
[08:25:00.167]     ...future.result <- base::tryCatch({
[08:25:00.167]         base::withCallingHandlers({
[08:25:00.167]             ...future.value <- base::withVisible(base::local({
[08:25:00.167]                 do.call(function(...) {
[08:25:00.167]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.167]                   if (!identical(...future.globals.maxSize.org, 
[08:25:00.167]                     ...future.globals.maxSize)) {
[08:25:00.167]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.167]                     on.exit(options(oopts), add = TRUE)
[08:25:00.167]                   }
[08:25:00.167]                   {
[08:25:00.167]                     lapply(seq_along(...future.elements_ii), 
[08:25:00.167]                       FUN = function(jj) {
[08:25:00.167]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.167]                         ...future.FUN(...future.X_jj, ...)
[08:25:00.167]                       })
[08:25:00.167]                   }
[08:25:00.167]                 }, args = future.call.arguments)
[08:25:00.167]             }))
[08:25:00.167]             future::FutureResult(value = ...future.value$value, 
[08:25:00.167]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.167]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.167]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.167]                     ...future.globalenv.names))
[08:25:00.167]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.167]         }, condition = base::local({
[08:25:00.167]             c <- base::c
[08:25:00.167]             inherits <- base::inherits
[08:25:00.167]             invokeRestart <- base::invokeRestart
[08:25:00.167]             length <- base::length
[08:25:00.167]             list <- base::list
[08:25:00.167]             seq.int <- base::seq.int
[08:25:00.167]             signalCondition <- base::signalCondition
[08:25:00.167]             sys.calls <- base::sys.calls
[08:25:00.167]             `[[` <- base::`[[`
[08:25:00.167]             `+` <- base::`+`
[08:25:00.167]             `<<-` <- base::`<<-`
[08:25:00.167]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.167]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.167]                   3L)]
[08:25:00.167]             }
[08:25:00.167]             function(cond) {
[08:25:00.167]                 is_error <- inherits(cond, "error")
[08:25:00.167]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.167]                   NULL)
[08:25:00.167]                 if (is_error) {
[08:25:00.167]                   sessionInformation <- function() {
[08:25:00.167]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.167]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.167]                       search = base::search(), system = base::Sys.info())
[08:25:00.167]                   }
[08:25:00.167]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.167]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.167]                     cond$call), session = sessionInformation(), 
[08:25:00.167]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.167]                   signalCondition(cond)
[08:25:00.167]                 }
[08:25:00.167]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.167]                 "immediateCondition"))) {
[08:25:00.167]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.167]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.167]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.167]                   if (TRUE && !signal) {
[08:25:00.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.167]                     {
[08:25:00.167]                       inherits <- base::inherits
[08:25:00.167]                       invokeRestart <- base::invokeRestart
[08:25:00.167]                       is.null <- base::is.null
[08:25:00.167]                       muffled <- FALSE
[08:25:00.167]                       if (inherits(cond, "message")) {
[08:25:00.167]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.167]                         if (muffled) 
[08:25:00.167]                           invokeRestart("muffleMessage")
[08:25:00.167]                       }
[08:25:00.167]                       else if (inherits(cond, "warning")) {
[08:25:00.167]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.167]                         if (muffled) 
[08:25:00.167]                           invokeRestart("muffleWarning")
[08:25:00.167]                       }
[08:25:00.167]                       else if (inherits(cond, "condition")) {
[08:25:00.167]                         if (!is.null(pattern)) {
[08:25:00.167]                           computeRestarts <- base::computeRestarts
[08:25:00.167]                           grepl <- base::grepl
[08:25:00.167]                           restarts <- computeRestarts(cond)
[08:25:00.167]                           for (restart in restarts) {
[08:25:00.167]                             name <- restart$name
[08:25:00.167]                             if (is.null(name)) 
[08:25:00.167]                               next
[08:25:00.167]                             if (!grepl(pattern, name)) 
[08:25:00.167]                               next
[08:25:00.167]                             invokeRestart(restart)
[08:25:00.167]                             muffled <- TRUE
[08:25:00.167]                             break
[08:25:00.167]                           }
[08:25:00.167]                         }
[08:25:00.167]                       }
[08:25:00.167]                       invisible(muffled)
[08:25:00.167]                     }
[08:25:00.167]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.167]                   }
[08:25:00.167]                 }
[08:25:00.167]                 else {
[08:25:00.167]                   if (TRUE) {
[08:25:00.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.167]                     {
[08:25:00.167]                       inherits <- base::inherits
[08:25:00.167]                       invokeRestart <- base::invokeRestart
[08:25:00.167]                       is.null <- base::is.null
[08:25:00.167]                       muffled <- FALSE
[08:25:00.167]                       if (inherits(cond, "message")) {
[08:25:00.167]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.167]                         if (muffled) 
[08:25:00.167]                           invokeRestart("muffleMessage")
[08:25:00.167]                       }
[08:25:00.167]                       else if (inherits(cond, "warning")) {
[08:25:00.167]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.167]                         if (muffled) 
[08:25:00.167]                           invokeRestart("muffleWarning")
[08:25:00.167]                       }
[08:25:00.167]                       else if (inherits(cond, "condition")) {
[08:25:00.167]                         if (!is.null(pattern)) {
[08:25:00.167]                           computeRestarts <- base::computeRestarts
[08:25:00.167]                           grepl <- base::grepl
[08:25:00.167]                           restarts <- computeRestarts(cond)
[08:25:00.167]                           for (restart in restarts) {
[08:25:00.167]                             name <- restart$name
[08:25:00.167]                             if (is.null(name)) 
[08:25:00.167]                               next
[08:25:00.167]                             if (!grepl(pattern, name)) 
[08:25:00.167]                               next
[08:25:00.167]                             invokeRestart(restart)
[08:25:00.167]                             muffled <- TRUE
[08:25:00.167]                             break
[08:25:00.167]                           }
[08:25:00.167]                         }
[08:25:00.167]                       }
[08:25:00.167]                       invisible(muffled)
[08:25:00.167]                     }
[08:25:00.167]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.167]                   }
[08:25:00.167]                 }
[08:25:00.167]             }
[08:25:00.167]         }))
[08:25:00.167]     }, error = function(ex) {
[08:25:00.167]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.167]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.167]                 ...future.rng), started = ...future.startTime, 
[08:25:00.167]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.167]             version = "1.8"), class = "FutureResult")
[08:25:00.167]     }, finally = {
[08:25:00.167]         if (!identical(...future.workdir, getwd())) 
[08:25:00.167]             setwd(...future.workdir)
[08:25:00.167]         {
[08:25:00.167]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.167]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.167]             }
[08:25:00.167]             base::options(...future.oldOptions)
[08:25:00.167]             if (.Platform$OS.type == "windows") {
[08:25:00.167]                 old_names <- names(...future.oldEnvVars)
[08:25:00.167]                 envs <- base::Sys.getenv()
[08:25:00.167]                 names <- names(envs)
[08:25:00.167]                 common <- intersect(names, old_names)
[08:25:00.167]                 added <- setdiff(names, old_names)
[08:25:00.167]                 removed <- setdiff(old_names, names)
[08:25:00.167]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.167]                   envs[common]]
[08:25:00.167]                 NAMES <- toupper(changed)
[08:25:00.167]                 args <- list()
[08:25:00.167]                 for (kk in seq_along(NAMES)) {
[08:25:00.167]                   name <- changed[[kk]]
[08:25:00.167]                   NAME <- NAMES[[kk]]
[08:25:00.167]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.167]                     next
[08:25:00.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.167]                 }
[08:25:00.167]                 NAMES <- toupper(added)
[08:25:00.167]                 for (kk in seq_along(NAMES)) {
[08:25:00.167]                   name <- added[[kk]]
[08:25:00.167]                   NAME <- NAMES[[kk]]
[08:25:00.167]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.167]                     next
[08:25:00.167]                   args[[name]] <- ""
[08:25:00.167]                 }
[08:25:00.167]                 NAMES <- toupper(removed)
[08:25:00.167]                 for (kk in seq_along(NAMES)) {
[08:25:00.167]                   name <- removed[[kk]]
[08:25:00.167]                   NAME <- NAMES[[kk]]
[08:25:00.167]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.167]                     next
[08:25:00.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.167]                 }
[08:25:00.167]                 if (length(args) > 0) 
[08:25:00.167]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.167]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.167]             }
[08:25:00.167]             else {
[08:25:00.167]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.167]             }
[08:25:00.167]             {
[08:25:00.167]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.167]                   0L) {
[08:25:00.167]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.167]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.167]                   base::options(opts)
[08:25:00.167]                 }
[08:25:00.167]                 {
[08:25:00.167]                   {
[08:25:00.167]                     NULL
[08:25:00.167]                     RNGkind("Mersenne-Twister")
[08:25:00.167]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:25:00.167]                       inherits = FALSE)
[08:25:00.167]                   }
[08:25:00.167]                   options(future.plan = NULL)
[08:25:00.167]                   if (is.na(NA_character_)) 
[08:25:00.167]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.167]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.167]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.167]                     .init = FALSE)
[08:25:00.167]                 }
[08:25:00.167]             }
[08:25:00.167]         }
[08:25:00.167]     })
[08:25:00.167]     if (TRUE) {
[08:25:00.167]         base::sink(type = "output", split = FALSE)
[08:25:00.167]         if (TRUE) {
[08:25:00.167]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.167]         }
[08:25:00.167]         else {
[08:25:00.167]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.167]         }
[08:25:00.167]         base::close(...future.stdout)
[08:25:00.167]         ...future.stdout <- NULL
[08:25:00.167]     }
[08:25:00.167]     ...future.result$conditions <- ...future.conditions
[08:25:00.167]     ...future.result$finished <- base::Sys.time()
[08:25:00.167]     ...future.result
[08:25:00.167] }
[08:25:00.169] assign_globals() ...
[08:25:00.169] List of 5
[08:25:00.169]  $ ...future.FUN            :function (x, ...)  
[08:25:00.169]  $ future.call.arguments    : list()
[08:25:00.169]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.169]  $ ...future.elements_ii    :List of 3
[08:25:00.169]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[08:25:00.169]   ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[08:25:00.169]   ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[08:25:00.169]  $ ...future.seeds_ii       : NULL
[08:25:00.169]  $ ...future.globals.maxSize: NULL
[08:25:00.169]  - attr(*, "where")=List of 5
[08:25:00.169]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.169]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.169]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.169]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.169]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.169]  - attr(*, "resolved")= logi FALSE
[08:25:00.169]  - attr(*, "total_size")= num 5433
[08:25:00.169]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.169]  - attr(*, "already-done")= logi TRUE
[08:25:00.176] - copied ‘...future.FUN’ to environment
[08:25:00.177] - copied ‘future.call.arguments’ to environment
[08:25:00.177] - copied ‘...future.elements_ii’ to environment
[08:25:00.177] - copied ‘...future.seeds_ii’ to environment
[08:25:00.177] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.177] assign_globals() ... done
[08:25:00.177] plan(): Setting new future strategy stack:
[08:25:00.177] List of future strategies:
[08:25:00.177] 1. sequential:
[08:25:00.177]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.177]    - tweaked: FALSE
[08:25:00.177]    - call: NULL
[08:25:00.178] plan(): nbrOfWorkers() = 1
[08:25:00.179] plan(): Setting new future strategy stack:
[08:25:00.179] List of future strategies:
[08:25:00.179] 1. sequential:
[08:25:00.179]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.179]    - tweaked: FALSE
[08:25:00.179]    - call: plan(strategy)
[08:25:00.180] plan(): nbrOfWorkers() = 1
[08:25:00.180] SequentialFuture started (and completed)
[08:25:00.180] - Launch lazy future ... done
[08:25:00.180] run() for ‘SequentialFuture’ ... done
[08:25:00.180] Created future:
[08:25:00.180] SequentialFuture:
[08:25:00.180] Label: ‘future_eapply-1’
[08:25:00.180] Expression:
[08:25:00.180] {
[08:25:00.180]     do.call(function(...) {
[08:25:00.180]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.180]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.180]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.180]             on.exit(options(oopts), add = TRUE)
[08:25:00.180]         }
[08:25:00.180]         {
[08:25:00.180]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.180]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.180]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.180]             })
[08:25:00.180]         }
[08:25:00.180]     }, args = future.call.arguments)
[08:25:00.180] }
[08:25:00.180] Lazy evaluation: FALSE
[08:25:00.180] Asynchronous evaluation: FALSE
[08:25:00.180] Local evaluation: TRUE
[08:25:00.180] Environment: R_GlobalEnv
[08:25:00.180] Capture standard output: TRUE
[08:25:00.180] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.180] Globals: 5 objects totaling 758 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 296 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.180] Packages: 1 packages (‘stats’)
[08:25:00.180] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.180] Resolved: TRUE
[08:25:00.180] Value: 413 bytes of class ‘list’
[08:25:00.180] Early signaling: FALSE
[08:25:00.180] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.180] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:00.181] Chunk #1 of 1 ... DONE
[08:25:00.181] Launching 1 futures (chunks) ... DONE
[08:25:00.181] Resolving 1 futures (chunks) ...
[08:25:00.181] resolve() on list ...
[08:25:00.181]  recursive: 0
[08:25:00.182]  length: 1
[08:25:00.182] 
[08:25:00.182] resolved() for ‘SequentialFuture’ ...
[08:25:00.182] - state: ‘finished’
[08:25:00.182] - run: TRUE
[08:25:00.182] - result: ‘FutureResult’
[08:25:00.182] resolved() for ‘SequentialFuture’ ... done
[08:25:00.182] Future #1
[08:25:00.182] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:00.182] - nx: 1
[08:25:00.182] - relay: TRUE
[08:25:00.183] - stdout: TRUE
[08:25:00.183] - signal: TRUE
[08:25:00.183] - resignal: FALSE
[08:25:00.183] - force: TRUE
[08:25:00.183] - relayed: [n=1] FALSE
[08:25:00.183] - queued futures: [n=1] FALSE
[08:25:00.183]  - until=1
[08:25:00.183]  - relaying element #1
[08:25:00.183] - relayed: [n=1] TRUE
[08:25:00.183] - queued futures: [n=1] TRUE
[08:25:00.183] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:00.184]  length: 0 (resolved future 1)
[08:25:00.184] Relaying remaining futures
[08:25:00.184] signalConditionsASAP(NULL, pos=0) ...
[08:25:00.184] - nx: 1
[08:25:00.184] - relay: TRUE
[08:25:00.184] - stdout: TRUE
[08:25:00.184] - signal: TRUE
[08:25:00.184] - resignal: FALSE
[08:25:00.184] - force: TRUE
[08:25:00.184] - relayed: [n=1] TRUE
[08:25:00.184] - queued futures: [n=1] TRUE
 - flush all
[08:25:00.185] - relayed: [n=1] TRUE
[08:25:00.185] - queued futures: [n=1] TRUE
[08:25:00.185] signalConditionsASAP(NULL, pos=0) ... done
[08:25:00.185] resolve() on list ... DONE
[08:25:00.185]  - Number of value chunks collected: 1
[08:25:00.185] Resolving 1 futures (chunks) ... DONE
[08:25:00.185] Reducing values from 1 chunks ...
[08:25:00.185]  - Number of values collected after concatenation: 3
[08:25:00.185]  - Number of values expected: 3
[08:25:00.185] Reducing values from 1 chunks ... DONE
[08:25:00.185] future_lapply() ... DONE
[08:25:00.186] future_lapply() ...
[08:25:00.186] Number of chunks: 1
[08:25:00.186] getGlobalsAndPackagesXApply() ...
[08:25:00.186]  - future.globals: TRUE
[08:25:00.186] getGlobalsAndPackages() ...
[08:25:00.187] Searching for globals...
[08:25:00.188] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:00.188] Searching for globals ... DONE
[08:25:00.188] Resolving globals: FALSE
[08:25:00.188] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:00.188] The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:00.189] - globals: [1] ‘FUN’
[08:25:00.189] - packages: [1] ‘stats’
[08:25:00.189] getGlobalsAndPackages() ... DONE
[08:25:00.189]  - globals found/used: [n=1] ‘FUN’
[08:25:00.189]  - needed namespaces: [n=1] ‘stats’
[08:25:00.189] Finding globals ... DONE
[08:25:00.189]  - use_args: TRUE
[08:25:00.189]  - Getting '...' globals ...
[08:25:00.190] resolve() on list ...
[08:25:00.190]  recursive: 0
[08:25:00.190]  length: 1
[08:25:00.190]  elements: ‘...’
[08:25:00.190]  length: 0 (resolved future 1)
[08:25:00.190] resolve() on list ... DONE
[08:25:00.190]    - '...' content: [n=0] 
[08:25:00.190] List of 1
[08:25:00.190]  $ ...: list()
[08:25:00.190]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.190]  - attr(*, "where")=List of 1
[08:25:00.190]   ..$ ...:<environment: 0x5577ecf94b00> 
[08:25:00.190]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.190]  - attr(*, "resolved")= logi TRUE
[08:25:00.190]  - attr(*, "total_size")= num NA
[08:25:00.192]  - Getting '...' globals ... DONE
[08:25:00.193] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:00.193] List of 2
[08:25:00.193]  $ ...future.FUN:function (x, ...)  
[08:25:00.193]  $ ...          : list()
[08:25:00.193]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.193]  - attr(*, "where")=List of 2
[08:25:00.193]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:00.193]   ..$ ...          :<environment: 0x5577ecf94b00> 
[08:25:00.193]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.193]  - attr(*, "resolved")= logi FALSE
[08:25:00.193]  - attr(*, "total_size")= num 5437
[08:25:00.195] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:00.195] getGlobalsAndPackagesXApply() ... DONE
[08:25:00.196] Number of futures (= number of chunks): 1
[08:25:00.197] Launching 1 futures (chunks) ...
[08:25:00.197] Chunk #1 of 1 ...
[08:25:00.197]  - Finding globals in 'X' for chunk #1 ...
[08:25:00.198] getGlobalsAndPackages() ...
[08:25:00.198] Searching for globals...
[08:25:00.198] 
[08:25:00.198] Searching for globals ... DONE
[08:25:00.198] - globals: [0] <none>
[08:25:00.198] getGlobalsAndPackages() ... DONE
[08:25:00.198]    + additional globals found: [n=0] 
[08:25:00.198]    + additional namespaces needed: [n=0] 
[08:25:00.198]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:00.199]  - seeds: <none>
[08:25:00.199]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.199] getGlobalsAndPackages() ...
[08:25:00.199] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.199] Resolving globals: FALSE
[08:25:00.199] Tweak future expression to call with '...' arguments ...
[08:25:00.199] {
[08:25:00.199]     do.call(function(...) {
[08:25:00.199]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.199]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.199]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.199]             on.exit(options(oopts), add = TRUE)
[08:25:00.199]         }
[08:25:00.199]         {
[08:25:00.199]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.199]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.199]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.199]             })
[08:25:00.199]         }
[08:25:00.199]     }, args = future.call.arguments)
[08:25:00.199] }
[08:25:00.199] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.200] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.200] - packages: [1] ‘stats’
[08:25:00.200] getGlobalsAndPackages() ... DONE
[08:25:00.200] run() for ‘Future’ ...
[08:25:00.200] - state: ‘created’
[08:25:00.200] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:25:00.201] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:00.201] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:25:00.201]   - Field: ‘label’
[08:25:00.201]   - Field: ‘local’
[08:25:00.201]   - Field: ‘owner’
[08:25:00.201]   - Field: ‘envir’
[08:25:00.201]   - Field: ‘packages’
[08:25:00.201]   - Field: ‘gc’
[08:25:00.201]   - Field: ‘conditions’
[08:25:00.202]   - Field: ‘expr’
[08:25:00.202]   - Field: ‘uuid’
[08:25:00.202]   - Field: ‘seed’
[08:25:00.202]   - Field: ‘version’
[08:25:00.202]   - Field: ‘result’
[08:25:00.202]   - Field: ‘asynchronous’
[08:25:00.202]   - Field: ‘calls’
[08:25:00.202]   - Field: ‘globals’
[08:25:00.202]   - Field: ‘stdout’
[08:25:00.202]   - Field: ‘earlySignal’
[08:25:00.202]   - Field: ‘lazy’
[08:25:00.202]   - Field: ‘state’
[08:25:00.203] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:25:00.203] - Launch lazy future ...
[08:25:00.203] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.203] Packages needed by future strategies (n = 0): <none>
[08:25:00.203] {
[08:25:00.203]     {
[08:25:00.203]         {
[08:25:00.203]             ...future.startTime <- base::Sys.time()
[08:25:00.203]             {
[08:25:00.203]                 {
[08:25:00.203]                   {
[08:25:00.203]                     {
[08:25:00.203]                       base::local({
[08:25:00.203]                         has_future <- base::requireNamespace("future", 
[08:25:00.203]                           quietly = TRUE)
[08:25:00.203]                         if (has_future) {
[08:25:00.203]                           ns <- base::getNamespace("future")
[08:25:00.203]                           version <- ns[[".package"]][["version"]]
[08:25:00.203]                           if (is.null(version)) 
[08:25:00.203]                             version <- utils::packageVersion("future")
[08:25:00.203]                         }
[08:25:00.203]                         else {
[08:25:00.203]                           version <- NULL
[08:25:00.203]                         }
[08:25:00.203]                         if (!has_future || version < "1.8.0") {
[08:25:00.203]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.203]                             "", base::R.version$version.string), 
[08:25:00.203]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:00.203]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:00.203]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.203]                               "release", "version")], collapse = " "), 
[08:25:00.203]                             hostname = base::Sys.info()[["nodename"]])
[08:25:00.203]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.203]                             info)
[08:25:00.203]                           info <- base::paste(info, collapse = "; ")
[08:25:00.203]                           if (!has_future) {
[08:25:00.203]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.203]                               info)
[08:25:00.203]                           }
[08:25:00.203]                           else {
[08:25:00.203]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.203]                               info, version)
[08:25:00.203]                           }
[08:25:00.203]                           base::stop(msg)
[08:25:00.203]                         }
[08:25:00.203]                       })
[08:25:00.203]                     }
[08:25:00.203]                     base::local({
[08:25:00.203]                       for (pkg in "stats") {
[08:25:00.203]                         base::loadNamespace(pkg)
[08:25:00.203]                         base::library(pkg, character.only = TRUE)
[08:25:00.203]                       }
[08:25:00.203]                     })
[08:25:00.203]                   }
[08:25:00.203]                   ...future.strategy.old <- future::plan("list")
[08:25:00.203]                   options(future.plan = NULL)
[08:25:00.203]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.203]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.203]                 }
[08:25:00.203]                 ...future.workdir <- getwd()
[08:25:00.203]             }
[08:25:00.203]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.203]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.203]         }
[08:25:00.203]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.203]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:00.203]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.203]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.203]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.203]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.203]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.203]             base::names(...future.oldOptions))
[08:25:00.203]     }
[08:25:00.203]     if (FALSE) {
[08:25:00.203]     }
[08:25:00.203]     else {
[08:25:00.203]         if (TRUE) {
[08:25:00.203]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.203]                 open = "w")
[08:25:00.203]         }
[08:25:00.203]         else {
[08:25:00.203]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.203]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.203]         }
[08:25:00.203]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.203]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.203]             base::sink(type = "output", split = FALSE)
[08:25:00.203]             base::close(...future.stdout)
[08:25:00.203]         }, add = TRUE)
[08:25:00.203]     }
[08:25:00.203]     ...future.frame <- base::sys.nframe()
[08:25:00.203]     ...future.conditions <- base::list()
[08:25:00.203]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.203]     if (FALSE) {
[08:25:00.203]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.203]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.203]     }
[08:25:00.203]     ...future.result <- base::tryCatch({
[08:25:00.203]         base::withCallingHandlers({
[08:25:00.203]             ...future.value <- base::withVisible(base::local({
[08:25:00.203]                 do.call(function(...) {
[08:25:00.203]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.203]                   if (!identical(...future.globals.maxSize.org, 
[08:25:00.203]                     ...future.globals.maxSize)) {
[08:25:00.203]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.203]                     on.exit(options(oopts), add = TRUE)
[08:25:00.203]                   }
[08:25:00.203]                   {
[08:25:00.203]                     lapply(seq_along(...future.elements_ii), 
[08:25:00.203]                       FUN = function(jj) {
[08:25:00.203]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.203]                         ...future.FUN(...future.X_jj, ...)
[08:25:00.203]                       })
[08:25:00.203]                   }
[08:25:00.203]                 }, args = future.call.arguments)
[08:25:00.203]             }))
[08:25:00.203]             future::FutureResult(value = ...future.value$value, 
[08:25:00.203]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.203]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.203]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.203]                     ...future.globalenv.names))
[08:25:00.203]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.203]         }, condition = base::local({
[08:25:00.203]             c <- base::c
[08:25:00.203]             inherits <- base::inherits
[08:25:00.203]             invokeRestart <- base::invokeRestart
[08:25:00.203]             length <- base::length
[08:25:00.203]             list <- base::list
[08:25:00.203]             seq.int <- base::seq.int
[08:25:00.203]             signalCondition <- base::signalCondition
[08:25:00.203]             sys.calls <- base::sys.calls
[08:25:00.203]             `[[` <- base::`[[`
[08:25:00.203]             `+` <- base::`+`
[08:25:00.203]             `<<-` <- base::`<<-`
[08:25:00.203]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.203]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.203]                   3L)]
[08:25:00.203]             }
[08:25:00.203]             function(cond) {
[08:25:00.203]                 is_error <- inherits(cond, "error")
[08:25:00.203]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.203]                   NULL)
[08:25:00.203]                 if (is_error) {
[08:25:00.203]                   sessionInformation <- function() {
[08:25:00.203]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.203]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.203]                       search = base::search(), system = base::Sys.info())
[08:25:00.203]                   }
[08:25:00.203]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.203]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.203]                     cond$call), session = sessionInformation(), 
[08:25:00.203]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.203]                   signalCondition(cond)
[08:25:00.203]                 }
[08:25:00.203]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.203]                 "immediateCondition"))) {
[08:25:00.203]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.203]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.203]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.203]                   if (TRUE && !signal) {
[08:25:00.203]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.203]                     {
[08:25:00.203]                       inherits <- base::inherits
[08:25:00.203]                       invokeRestart <- base::invokeRestart
[08:25:00.203]                       is.null <- base::is.null
[08:25:00.203]                       muffled <- FALSE
[08:25:00.203]                       if (inherits(cond, "message")) {
[08:25:00.203]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.203]                         if (muffled) 
[08:25:00.203]                           invokeRestart("muffleMessage")
[08:25:00.203]                       }
[08:25:00.203]                       else if (inherits(cond, "warning")) {
[08:25:00.203]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.203]                         if (muffled) 
[08:25:00.203]                           invokeRestart("muffleWarning")
[08:25:00.203]                       }
[08:25:00.203]                       else if (inherits(cond, "condition")) {
[08:25:00.203]                         if (!is.null(pattern)) {
[08:25:00.203]                           computeRestarts <- base::computeRestarts
[08:25:00.203]                           grepl <- base::grepl
[08:25:00.203]                           restarts <- computeRestarts(cond)
[08:25:00.203]                           for (restart in restarts) {
[08:25:00.203]                             name <- restart$name
[08:25:00.203]                             if (is.null(name)) 
[08:25:00.203]                               next
[08:25:00.203]                             if (!grepl(pattern, name)) 
[08:25:00.203]                               next
[08:25:00.203]                             invokeRestart(restart)
[08:25:00.203]                             muffled <- TRUE
[08:25:00.203]                             break
[08:25:00.203]                           }
[08:25:00.203]                         }
[08:25:00.203]                       }
[08:25:00.203]                       invisible(muffled)
[08:25:00.203]                     }
[08:25:00.203]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.203]                   }
[08:25:00.203]                 }
[08:25:00.203]                 else {
[08:25:00.203]                   if (TRUE) {
[08:25:00.203]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.203]                     {
[08:25:00.203]                       inherits <- base::inherits
[08:25:00.203]                       invokeRestart <- base::invokeRestart
[08:25:00.203]                       is.null <- base::is.null
[08:25:00.203]                       muffled <- FALSE
[08:25:00.203]                       if (inherits(cond, "message")) {
[08:25:00.203]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.203]                         if (muffled) 
[08:25:00.203]                           invokeRestart("muffleMessage")
[08:25:00.203]                       }
[08:25:00.203]                       else if (inherits(cond, "warning")) {
[08:25:00.203]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.203]                         if (muffled) 
[08:25:00.203]                           invokeRestart("muffleWarning")
[08:25:00.203]                       }
[08:25:00.203]                       else if (inherits(cond, "condition")) {
[08:25:00.203]                         if (!is.null(pattern)) {
[08:25:00.203]                           computeRestarts <- base::computeRestarts
[08:25:00.203]                           grepl <- base::grepl
[08:25:00.203]                           restarts <- computeRestarts(cond)
[08:25:00.203]                           for (restart in restarts) {
[08:25:00.203]                             name <- restart$name
[08:25:00.203]                             if (is.null(name)) 
[08:25:00.203]                               next
[08:25:00.203]                             if (!grepl(pattern, name)) 
[08:25:00.203]                               next
[08:25:00.203]                             invokeRestart(restart)
[08:25:00.203]                             muffled <- TRUE
[08:25:00.203]                             break
[08:25:00.203]                           }
[08:25:00.203]                         }
[08:25:00.203]                       }
[08:25:00.203]                       invisible(muffled)
[08:25:00.203]                     }
[08:25:00.203]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.203]                   }
[08:25:00.203]                 }
[08:25:00.203]             }
[08:25:00.203]         }))
[08:25:00.203]     }, error = function(ex) {
[08:25:00.203]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.203]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.203]                 ...future.rng), started = ...future.startTime, 
[08:25:00.203]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.203]             version = "1.8"), class = "FutureResult")
[08:25:00.203]     }, finally = {
[08:25:00.203]         if (!identical(...future.workdir, getwd())) 
[08:25:00.203]             setwd(...future.workdir)
[08:25:00.203]         {
[08:25:00.203]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.203]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.203]             }
[08:25:00.203]             base::options(...future.oldOptions)
[08:25:00.203]             if (.Platform$OS.type == "windows") {
[08:25:00.203]                 old_names <- names(...future.oldEnvVars)
[08:25:00.203]                 envs <- base::Sys.getenv()
[08:25:00.203]                 names <- names(envs)
[08:25:00.203]                 common <- intersect(names, old_names)
[08:25:00.203]                 added <- setdiff(names, old_names)
[08:25:00.203]                 removed <- setdiff(old_names, names)
[08:25:00.203]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.203]                   envs[common]]
[08:25:00.203]                 NAMES <- toupper(changed)
[08:25:00.203]                 args <- list()
[08:25:00.203]                 for (kk in seq_along(NAMES)) {
[08:25:00.203]                   name <- changed[[kk]]
[08:25:00.203]                   NAME <- NAMES[[kk]]
[08:25:00.203]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.203]                     next
[08:25:00.203]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.203]                 }
[08:25:00.203]                 NAMES <- toupper(added)
[08:25:00.203]                 for (kk in seq_along(NAMES)) {
[08:25:00.203]                   name <- added[[kk]]
[08:25:00.203]                   NAME <- NAMES[[kk]]
[08:25:00.203]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.203]                     next
[08:25:00.203]                   args[[name]] <- ""
[08:25:00.203]                 }
[08:25:00.203]                 NAMES <- toupper(removed)
[08:25:00.203]                 for (kk in seq_along(NAMES)) {
[08:25:00.203]                   name <- removed[[kk]]
[08:25:00.203]                   NAME <- NAMES[[kk]]
[08:25:00.203]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.203]                     next
[08:25:00.203]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.203]                 }
[08:25:00.203]                 if (length(args) > 0) 
[08:25:00.203]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.203]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.203]             }
[08:25:00.203]             else {
[08:25:00.203]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.203]             }
[08:25:00.203]             {
[08:25:00.203]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.203]                   0L) {
[08:25:00.203]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.203]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.203]                   base::options(opts)
[08:25:00.203]                 }
[08:25:00.203]                 {
[08:25:00.203]                   {
[08:25:00.203]                     NULL
[08:25:00.203]                     RNGkind("Mersenne-Twister")
[08:25:00.203]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:25:00.203]                       inherits = FALSE)
[08:25:00.203]                   }
[08:25:00.203]                   options(future.plan = NULL)
[08:25:00.203]                   if (is.na(NA_character_)) 
[08:25:00.203]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.203]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.203]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.203]                     .init = FALSE)
[08:25:00.203]                 }
[08:25:00.203]             }
[08:25:00.203]         }
[08:25:00.203]     })
[08:25:00.203]     if (TRUE) {
[08:25:00.203]         base::sink(type = "output", split = FALSE)
[08:25:00.203]         if (TRUE) {
[08:25:00.203]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.203]         }
[08:25:00.203]         else {
[08:25:00.203]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.203]         }
[08:25:00.203]         base::close(...future.stdout)
[08:25:00.203]         ...future.stdout <- NULL
[08:25:00.203]     }
[08:25:00.203]     ...future.result$conditions <- ...future.conditions
[08:25:00.203]     ...future.result$finished <- base::Sys.time()
[08:25:00.203]     ...future.result
[08:25:00.203] }
[08:25:00.205] assign_globals() ...
[08:25:00.205] List of 5
[08:25:00.205]  $ ...future.FUN            :function (x, ...)  
[08:25:00.205]  $ future.call.arguments    : list()
[08:25:00.205]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.205]  $ ...future.elements_ii    :List of 3
[08:25:00.205]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[08:25:00.205]   ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[08:25:00.205]   ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[08:25:00.205]  $ ...future.seeds_ii       : NULL
[08:25:00.205]  $ ...future.globals.maxSize: NULL
[08:25:00.205]  - attr(*, "where")=List of 5
[08:25:00.205]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.205]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.205]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.205]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.205]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.205]  - attr(*, "resolved")= logi FALSE
[08:25:00.205]  - attr(*, "total_size")= num 5437
[08:25:00.205]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.205]  - attr(*, "already-done")= logi TRUE
[08:25:00.210] - copied ‘...future.FUN’ to environment
[08:25:00.211] - copied ‘future.call.arguments’ to environment
[08:25:00.211] - copied ‘...future.elements_ii’ to environment
[08:25:00.211] - copied ‘...future.seeds_ii’ to environment
[08:25:00.211] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.211] assign_globals() ... done
[08:25:00.211] plan(): Setting new future strategy stack:
[08:25:00.211] List of future strategies:
[08:25:00.211] 1. sequential:
[08:25:00.211]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.211]    - tweaked: FALSE
[08:25:00.211]    - call: NULL
[08:25:00.212] plan(): nbrOfWorkers() = 1
[08:25:00.213] plan(): Setting new future strategy stack:
[08:25:00.213] List of future strategies:
[08:25:00.213] 1. sequential:
[08:25:00.213]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.213]    - tweaked: FALSE
[08:25:00.213]    - call: plan(strategy)
[08:25:00.214] plan(): nbrOfWorkers() = 1
[08:25:00.214] SequentialFuture started (and completed)
[08:25:00.214] - Launch lazy future ... done
[08:25:00.214] run() for ‘SequentialFuture’ ... done
[08:25:00.214] Created future:
[08:25:00.214] SequentialFuture:
[08:25:00.214] Label: ‘future_eapply-1’
[08:25:00.214] Expression:
[08:25:00.214] {
[08:25:00.214]     do.call(function(...) {
[08:25:00.214]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.214]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.214]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.214]             on.exit(options(oopts), add = TRUE)
[08:25:00.214]         }
[08:25:00.214]         {
[08:25:00.214]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.214]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.214]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.214]             })
[08:25:00.214]         }
[08:25:00.214]     }, args = future.call.arguments)
[08:25:00.214] }
[08:25:00.214] Lazy evaluation: FALSE
[08:25:00.214] Asynchronous evaluation: FALSE
[08:25:00.214] Local evaluation: TRUE
[08:25:00.214] Environment: R_GlobalEnv
[08:25:00.214] Capture standard output: TRUE
[08:25:00.214] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.214] Globals: 5 objects totaling 758 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 296 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.214] Packages: 1 packages (‘stats’)
[08:25:00.214] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.214] Resolved: TRUE
[08:25:00.214] Value: 413 bytes of class ‘list’
[08:25:00.214] Early signaling: FALSE
[08:25:00.214] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.214] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:25:00.215] Chunk #1 of 1 ... DONE
[08:25:00.215] Launching 1 futures (chunks) ... DONE
[08:25:00.215] Resolving 1 futures (chunks) ...
[08:25:00.215] resolve() on list ...
[08:25:00.215]  recursive: 0
[08:25:00.215]  length: 1
[08:25:00.216] 
[08:25:00.216] resolved() for ‘SequentialFuture’ ...
[08:25:00.216] - state: ‘finished’
[08:25:00.216] - run: TRUE
[08:25:00.216] - result: ‘FutureResult’
[08:25:00.216] resolved() for ‘SequentialFuture’ ... done
[08:25:00.216] Future #1
[08:25:00.216] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:25:00.216] - nx: 1
[08:25:00.216] - relay: TRUE
[08:25:00.216] - stdout: TRUE
[08:25:00.217] - signal: TRUE
[08:25:00.217] - resignal: FALSE
[08:25:00.217] - force: TRUE
[08:25:00.217] - relayed: [n=1] FALSE
[08:25:00.217] - queued futures: [n=1] FALSE
[08:25:00.217]  - until=1
[08:25:00.217]  - relaying element #1
[08:25:00.217] - relayed: [n=1] TRUE
[08:25:00.217] - queued futures: [n=1] TRUE
[08:25:00.217] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:25:00.217]  length: 0 (resolved future 1)
[08:25:00.218] Relaying remaining futures
[08:25:00.218] signalConditionsASAP(NULL, pos=0) ...
[08:25:00.218] - nx: 1
[08:25:00.218] - relay: TRUE
[08:25:00.218] - stdout: TRUE
[08:25:00.218] - signal: TRUE
[08:25:00.218] - resignal: FALSE
[08:25:00.218] - force: TRUE
[08:25:00.218] - relayed: [n=1] TRUE
[08:25:00.218] - queued futures: [n=1] TRUE
 - flush all
[08:25:00.218] - relayed: [n=1] TRUE
[08:25:00.218] - queued futures: [n=1] TRUE
[08:25:00.219] signalConditionsASAP(NULL, pos=0) ... done
[08:25:00.219] resolve() on list ... DONE
[08:25:00.219]  - Number of value chunks collected: 1
[08:25:00.219] Resolving 1 futures (chunks) ... DONE
[08:25:00.219] Reducing values from 1 chunks ...
[08:25:00.219]  - Number of values collected after concatenation: 3
[08:25:00.219]  - Number of values expected: 3
[08:25:00.219] Reducing values from 1 chunks ... DONE
[08:25:00.219] future_lapply() ... DONE
[08:25:00.220] plan(): Setting new future strategy stack:
[08:25:00.220] List of future strategies:
[08:25:00.220] 1. sequential:
[08:25:00.220]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.220]    - tweaked: FALSE
[08:25:00.220]    - call: plan(sequential)
[08:25:00.220] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[08:25:00.222] plan(): Setting new future strategy stack:
[08:25:00.222] List of future strategies:
[08:25:00.222] 1. multicore:
[08:25:00.222]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.222]    - tweaked: FALSE
[08:25:00.222]    - call: plan(strategy)
[08:25:00.224] plan(): nbrOfWorkers() = 2
[08:25:00.224] future_lapply() ...
[08:25:00.226] Number of chunks: 2
[08:25:00.226] getGlobalsAndPackagesXApply() ...
[08:25:00.226]  - future.globals: TRUE
[08:25:00.226] getGlobalsAndPackages() ...
[08:25:00.227] Searching for globals...
[08:25:00.228] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:00.228] Searching for globals ... DONE
[08:25:00.228] Resolving globals: FALSE
[08:25:00.228] The total size of the 1 globals is 273 bytes (273 bytes)
[08:25:00.228] The total size of the 1 globals exported for future expression (‘FUN()’) is 273 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (273 bytes of class ‘function’)
[08:25:00.229] - globals: [1] ‘FUN’
[08:25:00.229] 
[08:25:00.229] getGlobalsAndPackages() ... DONE
[08:25:00.229]  - globals found/used: [n=1] ‘FUN’
[08:25:00.229]  - needed namespaces: [n=0] 
[08:25:00.229] Finding globals ... DONE
[08:25:00.229]  - use_args: TRUE
[08:25:00.229]  - Getting '...' globals ...
[08:25:00.229] resolve() on list ...
[08:25:00.230]  recursive: 0
[08:25:00.230]  length: 1
[08:25:00.230]  elements: ‘...’
[08:25:00.230]  length: 0 (resolved future 1)
[08:25:00.230] resolve() on list ... DONE
[08:25:00.230]    - '...' content: [n=0] 
[08:25:00.230] List of 1
[08:25:00.230]  $ ...: list()
[08:25:00.230]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.230]  - attr(*, "where")=List of 1
[08:25:00.230]   ..$ ...:<environment: 0x5577ebc1cab8> 
[08:25:00.230]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.230]  - attr(*, "resolved")= logi TRUE
[08:25:00.230]  - attr(*, "total_size")= num NA
[08:25:00.232]  - Getting '...' globals ... DONE
[08:25:00.233] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:00.233] List of 2
[08:25:00.233]  $ ...future.FUN:function (x, ...)  
[08:25:00.233]  $ ...          : list()
[08:25:00.233]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.233]  - attr(*, "where")=List of 2
[08:25:00.233]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:00.233]   ..$ ...          :<environment: 0x5577ebc1cab8> 
[08:25:00.233]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.233]  - attr(*, "resolved")= logi FALSE
[08:25:00.233]  - attr(*, "total_size")= num 5249
[08:25:00.235] Packages to be attached in all futures: [n=0] 
[08:25:00.235] getGlobalsAndPackagesXApply() ... DONE
[08:25:00.236] Number of futures (= number of chunks): 2
[08:25:00.236] Launching 2 futures (chunks) ...
[08:25:00.236] Chunk #1 of 2 ...
[08:25:00.236]  - Finding globals in 'X' for chunk #1 ...
[08:25:00.236] getGlobalsAndPackages() ...
[08:25:00.236] Searching for globals...
[08:25:00.236] 
[08:25:00.236] Searching for globals ... DONE
[08:25:00.236] - globals: [0] <none>
[08:25:00.237] getGlobalsAndPackages() ... DONE
[08:25:00.237]    + additional globals found: [n=0] 
[08:25:00.237]    + additional namespaces needed: [n=0] 
[08:25:00.237]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:00.237]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:00.237]  - seeds: <none>
[08:25:00.237]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.237] getGlobalsAndPackages() ...
[08:25:00.237] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.237] Resolving globals: FALSE
[08:25:00.237] Tweak future expression to call with '...' arguments ...
[08:25:00.238] {
[08:25:00.238]     do.call(function(...) {
[08:25:00.238]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.238]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.238]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.238]             on.exit(options(oopts), add = TRUE)
[08:25:00.238]         }
[08:25:00.238]         {
[08:25:00.238]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.238]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.238]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.238]             })
[08:25:00.238]         }
[08:25:00.238]     }, args = future.call.arguments)
[08:25:00.238] }
[08:25:00.238] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.238] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.238] 
[08:25:00.238] getGlobalsAndPackages() ... DONE
[08:25:00.239] run() for ‘Future’ ...
[08:25:00.239] - state: ‘created’
[08:25:00.239] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:00.240] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.241] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:00.241]   - Field: ‘label’
[08:25:00.241]   - Field: ‘local’
[08:25:00.241]   - Field: ‘owner’
[08:25:00.241]   - Field: ‘envir’
[08:25:00.241]   - Field: ‘workers’
[08:25:00.241]   - Field: ‘packages’
[08:25:00.241]   - Field: ‘gc’
[08:25:00.241]   - Field: ‘job’
[08:25:00.241]   - Field: ‘conditions’
[08:25:00.241]   - Field: ‘expr’
[08:25:00.242]   - Field: ‘uuid’
[08:25:00.242]   - Field: ‘seed’
[08:25:00.242]   - Field: ‘version’
[08:25:00.242]   - Field: ‘result’
[08:25:00.242]   - Field: ‘asynchronous’
[08:25:00.242]   - Field: ‘calls’
[08:25:00.242]   - Field: ‘globals’
[08:25:00.242]   - Field: ‘stdout’
[08:25:00.242]   - Field: ‘earlySignal’
[08:25:00.242]   - Field: ‘lazy’
[08:25:00.242]   - Field: ‘state’
[08:25:00.242] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:00.243] - Launch lazy future ...
[08:25:00.244] Packages needed by the future expression (n = 0): <none>
[08:25:00.244] Packages needed by future strategies (n = 0): <none>
[08:25:00.244] {
[08:25:00.244]     {
[08:25:00.244]         {
[08:25:00.244]             ...future.startTime <- base::Sys.time()
[08:25:00.244]             {
[08:25:00.244]                 {
[08:25:00.244]                   {
[08:25:00.244]                     {
[08:25:00.244]                       base::local({
[08:25:00.244]                         has_future <- base::requireNamespace("future", 
[08:25:00.244]                           quietly = TRUE)
[08:25:00.244]                         if (has_future) {
[08:25:00.244]                           ns <- base::getNamespace("future")
[08:25:00.244]                           version <- ns[[".package"]][["version"]]
[08:25:00.244]                           if (is.null(version)) 
[08:25:00.244]                             version <- utils::packageVersion("future")
[08:25:00.244]                         }
[08:25:00.244]                         else {
[08:25:00.244]                           version <- NULL
[08:25:00.244]                         }
[08:25:00.244]                         if (!has_future || version < "1.8.0") {
[08:25:00.244]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.244]                             "", base::R.version$version.string), 
[08:25:00.244]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:00.244]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:00.244]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.244]                               "release", "version")], collapse = " "), 
[08:25:00.244]                             hostname = base::Sys.info()[["nodename"]])
[08:25:00.244]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.244]                             info)
[08:25:00.244]                           info <- base::paste(info, collapse = "; ")
[08:25:00.244]                           if (!has_future) {
[08:25:00.244]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.244]                               info)
[08:25:00.244]                           }
[08:25:00.244]                           else {
[08:25:00.244]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.244]                               info, version)
[08:25:00.244]                           }
[08:25:00.244]                           base::stop(msg)
[08:25:00.244]                         }
[08:25:00.244]                       })
[08:25:00.244]                     }
[08:25:00.244]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:00.244]                     base::options(mc.cores = 1L)
[08:25:00.244]                   }
[08:25:00.244]                   ...future.strategy.old <- future::plan("list")
[08:25:00.244]                   options(future.plan = NULL)
[08:25:00.244]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.244]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.244]                 }
[08:25:00.244]                 ...future.workdir <- getwd()
[08:25:00.244]             }
[08:25:00.244]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.244]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.244]         }
[08:25:00.244]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.244]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:00.244]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.244]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.244]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.244]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.244]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.244]             base::names(...future.oldOptions))
[08:25:00.244]     }
[08:25:00.244]     if (FALSE) {
[08:25:00.244]     }
[08:25:00.244]     else {
[08:25:00.244]         if (TRUE) {
[08:25:00.244]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.244]                 open = "w")
[08:25:00.244]         }
[08:25:00.244]         else {
[08:25:00.244]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.244]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.244]         }
[08:25:00.244]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.244]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.244]             base::sink(type = "output", split = FALSE)
[08:25:00.244]             base::close(...future.stdout)
[08:25:00.244]         }, add = TRUE)
[08:25:00.244]     }
[08:25:00.244]     ...future.frame <- base::sys.nframe()
[08:25:00.244]     ...future.conditions <- base::list()
[08:25:00.244]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.244]     if (FALSE) {
[08:25:00.244]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.244]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.244]     }
[08:25:00.244]     ...future.result <- base::tryCatch({
[08:25:00.244]         base::withCallingHandlers({
[08:25:00.244]             ...future.value <- base::withVisible(base::local({
[08:25:00.244]                 withCallingHandlers({
[08:25:00.244]                   {
[08:25:00.244]                     do.call(function(...) {
[08:25:00.244]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.244]                       if (!identical(...future.globals.maxSize.org, 
[08:25:00.244]                         ...future.globals.maxSize)) {
[08:25:00.244]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.244]                         on.exit(options(oopts), add = TRUE)
[08:25:00.244]                       }
[08:25:00.244]                       {
[08:25:00.244]                         lapply(seq_along(...future.elements_ii), 
[08:25:00.244]                           FUN = function(jj) {
[08:25:00.244]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.244]                             ...future.FUN(...future.X_jj, ...)
[08:25:00.244]                           })
[08:25:00.244]                       }
[08:25:00.244]                     }, args = future.call.arguments)
[08:25:00.244]                   }
[08:25:00.244]                 }, immediateCondition = function(cond) {
[08:25:00.244]                   save_rds <- function (object, pathname, ...) 
[08:25:00.244]                   {
[08:25:00.244]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:00.244]                     if (file_test("-f", pathname_tmp)) {
[08:25:00.244]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.244]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:00.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.244]                         fi_tmp[["mtime"]])
[08:25:00.244]                     }
[08:25:00.244]                     tryCatch({
[08:25:00.244]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:00.244]                     }, error = function(ex) {
[08:25:00.244]                       msg <- conditionMessage(ex)
[08:25:00.244]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.244]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:00.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.244]                         fi_tmp[["mtime"]], msg)
[08:25:00.244]                       ex$message <- msg
[08:25:00.244]                       stop(ex)
[08:25:00.244]                     })
[08:25:00.244]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:00.244]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:00.244]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:00.244]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.244]                       fi <- file.info(pathname)
[08:25:00.244]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:00.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.244]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:00.244]                         fi[["size"]], fi[["mtime"]])
[08:25:00.244]                       stop(msg)
[08:25:00.244]                     }
[08:25:00.244]                     invisible(pathname)
[08:25:00.244]                   }
[08:25:00.244]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:00.244]                     rootPath = tempdir()) 
[08:25:00.244]                   {
[08:25:00.244]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:00.244]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:00.244]                       tmpdir = path, fileext = ".rds")
[08:25:00.244]                     save_rds(obj, file)
[08:25:00.244]                   }
[08:25:00.244]                   saveImmediateCondition(cond, path = "/tmp/RtmpC5owVr/.future/immediateConditions")
[08:25:00.244]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.244]                   {
[08:25:00.244]                     inherits <- base::inherits
[08:25:00.244]                     invokeRestart <- base::invokeRestart
[08:25:00.244]                     is.null <- base::is.null
[08:25:00.244]                     muffled <- FALSE
[08:25:00.244]                     if (inherits(cond, "message")) {
[08:25:00.244]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:00.244]                       if (muffled) 
[08:25:00.244]                         invokeRestart("muffleMessage")
[08:25:00.244]                     }
[08:25:00.244]                     else if (inherits(cond, "warning")) {
[08:25:00.244]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:00.244]                       if (muffled) 
[08:25:00.244]                         invokeRestart("muffleWarning")
[08:25:00.244]                     }
[08:25:00.244]                     else if (inherits(cond, "condition")) {
[08:25:00.244]                       if (!is.null(pattern)) {
[08:25:00.244]                         computeRestarts <- base::computeRestarts
[08:25:00.244]                         grepl <- base::grepl
[08:25:00.244]                         restarts <- computeRestarts(cond)
[08:25:00.244]                         for (restart in restarts) {
[08:25:00.244]                           name <- restart$name
[08:25:00.244]                           if (is.null(name)) 
[08:25:00.244]                             next
[08:25:00.244]                           if (!grepl(pattern, name)) 
[08:25:00.244]                             next
[08:25:00.244]                           invokeRestart(restart)
[08:25:00.244]                           muffled <- TRUE
[08:25:00.244]                           break
[08:25:00.244]                         }
[08:25:00.244]                       }
[08:25:00.244]                     }
[08:25:00.244]                     invisible(muffled)
[08:25:00.244]                   }
[08:25:00.244]                   muffleCondition(cond)
[08:25:00.244]                 })
[08:25:00.244]             }))
[08:25:00.244]             future::FutureResult(value = ...future.value$value, 
[08:25:00.244]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.244]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.244]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.244]                     ...future.globalenv.names))
[08:25:00.244]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.244]         }, condition = base::local({
[08:25:00.244]             c <- base::c
[08:25:00.244]             inherits <- base::inherits
[08:25:00.244]             invokeRestart <- base::invokeRestart
[08:25:00.244]             length <- base::length
[08:25:00.244]             list <- base::list
[08:25:00.244]             seq.int <- base::seq.int
[08:25:00.244]             signalCondition <- base::signalCondition
[08:25:00.244]             sys.calls <- base::sys.calls
[08:25:00.244]             `[[` <- base::`[[`
[08:25:00.244]             `+` <- base::`+`
[08:25:00.244]             `<<-` <- base::`<<-`
[08:25:00.244]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.244]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.244]                   3L)]
[08:25:00.244]             }
[08:25:00.244]             function(cond) {
[08:25:00.244]                 is_error <- inherits(cond, "error")
[08:25:00.244]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.244]                   NULL)
[08:25:00.244]                 if (is_error) {
[08:25:00.244]                   sessionInformation <- function() {
[08:25:00.244]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.244]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.244]                       search = base::search(), system = base::Sys.info())
[08:25:00.244]                   }
[08:25:00.244]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.244]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.244]                     cond$call), session = sessionInformation(), 
[08:25:00.244]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.244]                   signalCondition(cond)
[08:25:00.244]                 }
[08:25:00.244]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.244]                 "immediateCondition"))) {
[08:25:00.244]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.244]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.244]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.244]                   if (TRUE && !signal) {
[08:25:00.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.244]                     {
[08:25:00.244]                       inherits <- base::inherits
[08:25:00.244]                       invokeRestart <- base::invokeRestart
[08:25:00.244]                       is.null <- base::is.null
[08:25:00.244]                       muffled <- FALSE
[08:25:00.244]                       if (inherits(cond, "message")) {
[08:25:00.244]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.244]                         if (muffled) 
[08:25:00.244]                           invokeRestart("muffleMessage")
[08:25:00.244]                       }
[08:25:00.244]                       else if (inherits(cond, "warning")) {
[08:25:00.244]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.244]                         if (muffled) 
[08:25:00.244]                           invokeRestart("muffleWarning")
[08:25:00.244]                       }
[08:25:00.244]                       else if (inherits(cond, "condition")) {
[08:25:00.244]                         if (!is.null(pattern)) {
[08:25:00.244]                           computeRestarts <- base::computeRestarts
[08:25:00.244]                           grepl <- base::grepl
[08:25:00.244]                           restarts <- computeRestarts(cond)
[08:25:00.244]                           for (restart in restarts) {
[08:25:00.244]                             name <- restart$name
[08:25:00.244]                             if (is.null(name)) 
[08:25:00.244]                               next
[08:25:00.244]                             if (!grepl(pattern, name)) 
[08:25:00.244]                               next
[08:25:00.244]                             invokeRestart(restart)
[08:25:00.244]                             muffled <- TRUE
[08:25:00.244]                             break
[08:25:00.244]                           }
[08:25:00.244]                         }
[08:25:00.244]                       }
[08:25:00.244]                       invisible(muffled)
[08:25:00.244]                     }
[08:25:00.244]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.244]                   }
[08:25:00.244]                 }
[08:25:00.244]                 else {
[08:25:00.244]                   if (TRUE) {
[08:25:00.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.244]                     {
[08:25:00.244]                       inherits <- base::inherits
[08:25:00.244]                       invokeRestart <- base::invokeRestart
[08:25:00.244]                       is.null <- base::is.null
[08:25:00.244]                       muffled <- FALSE
[08:25:00.244]                       if (inherits(cond, "message")) {
[08:25:00.244]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.244]                         if (muffled) 
[08:25:00.244]                           invokeRestart("muffleMessage")
[08:25:00.244]                       }
[08:25:00.244]                       else if (inherits(cond, "warning")) {
[08:25:00.244]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.244]                         if (muffled) 
[08:25:00.244]                           invokeRestart("muffleWarning")
[08:25:00.244]                       }
[08:25:00.244]                       else if (inherits(cond, "condition")) {
[08:25:00.244]                         if (!is.null(pattern)) {
[08:25:00.244]                           computeRestarts <- base::computeRestarts
[08:25:00.244]                           grepl <- base::grepl
[08:25:00.244]                           restarts <- computeRestarts(cond)
[08:25:00.244]                           for (restart in restarts) {
[08:25:00.244]                             name <- restart$name
[08:25:00.244]                             if (is.null(name)) 
[08:25:00.244]                               next
[08:25:00.244]                             if (!grepl(pattern, name)) 
[08:25:00.244]                               next
[08:25:00.244]                             invokeRestart(restart)
[08:25:00.244]                             muffled <- TRUE
[08:25:00.244]                             break
[08:25:00.244]                           }
[08:25:00.244]                         }
[08:25:00.244]                       }
[08:25:00.244]                       invisible(muffled)
[08:25:00.244]                     }
[08:25:00.244]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.244]                   }
[08:25:00.244]                 }
[08:25:00.244]             }
[08:25:00.244]         }))
[08:25:00.244]     }, error = function(ex) {
[08:25:00.244]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.244]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.244]                 ...future.rng), started = ...future.startTime, 
[08:25:00.244]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.244]             version = "1.8"), class = "FutureResult")
[08:25:00.244]     }, finally = {
[08:25:00.244]         if (!identical(...future.workdir, getwd())) 
[08:25:00.244]             setwd(...future.workdir)
[08:25:00.244]         {
[08:25:00.244]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.244]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.244]             }
[08:25:00.244]             base::options(...future.oldOptions)
[08:25:00.244]             if (.Platform$OS.type == "windows") {
[08:25:00.244]                 old_names <- names(...future.oldEnvVars)
[08:25:00.244]                 envs <- base::Sys.getenv()
[08:25:00.244]                 names <- names(envs)
[08:25:00.244]                 common <- intersect(names, old_names)
[08:25:00.244]                 added <- setdiff(names, old_names)
[08:25:00.244]                 removed <- setdiff(old_names, names)
[08:25:00.244]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.244]                   envs[common]]
[08:25:00.244]                 NAMES <- toupper(changed)
[08:25:00.244]                 args <- list()
[08:25:00.244]                 for (kk in seq_along(NAMES)) {
[08:25:00.244]                   name <- changed[[kk]]
[08:25:00.244]                   NAME <- NAMES[[kk]]
[08:25:00.244]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.244]                     next
[08:25:00.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.244]                 }
[08:25:00.244]                 NAMES <- toupper(added)
[08:25:00.244]                 for (kk in seq_along(NAMES)) {
[08:25:00.244]                   name <- added[[kk]]
[08:25:00.244]                   NAME <- NAMES[[kk]]
[08:25:00.244]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.244]                     next
[08:25:00.244]                   args[[name]] <- ""
[08:25:00.244]                 }
[08:25:00.244]                 NAMES <- toupper(removed)
[08:25:00.244]                 for (kk in seq_along(NAMES)) {
[08:25:00.244]                   name <- removed[[kk]]
[08:25:00.244]                   NAME <- NAMES[[kk]]
[08:25:00.244]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.244]                     next
[08:25:00.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.244]                 }
[08:25:00.244]                 if (length(args) > 0) 
[08:25:00.244]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.244]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.244]             }
[08:25:00.244]             else {
[08:25:00.244]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.244]             }
[08:25:00.244]             {
[08:25:00.244]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.244]                   0L) {
[08:25:00.244]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.244]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.244]                   base::options(opts)
[08:25:00.244]                 }
[08:25:00.244]                 {
[08:25:00.244]                   {
[08:25:00.244]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:00.244]                     NULL
[08:25:00.244]                   }
[08:25:00.244]                   options(future.plan = NULL)
[08:25:00.244]                   if (is.na(NA_character_)) 
[08:25:00.244]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.244]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.244]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.244]                     .init = FALSE)
[08:25:00.244]                 }
[08:25:00.244]             }
[08:25:00.244]         }
[08:25:00.244]     })
[08:25:00.244]     if (TRUE) {
[08:25:00.244]         base::sink(type = "output", split = FALSE)
[08:25:00.244]         if (TRUE) {
[08:25:00.244]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.244]         }
[08:25:00.244]         else {
[08:25:00.244]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.244]         }
[08:25:00.244]         base::close(...future.stdout)
[08:25:00.244]         ...future.stdout <- NULL
[08:25:00.244]     }
[08:25:00.244]     ...future.result$conditions <- ...future.conditions
[08:25:00.244]     ...future.result$finished <- base::Sys.time()
[08:25:00.244]     ...future.result
[08:25:00.244] }
[08:25:00.247] assign_globals() ...
[08:25:00.247] List of 5
[08:25:00.247]  $ ...future.FUN            :function (x, ...)  
[08:25:00.247]  $ future.call.arguments    : list()
[08:25:00.247]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.247]  $ ...future.elements_ii    :List of 1
[08:25:00.247]   ..$ : logi [1:4] TRUE FALSE FALSE TRUE
[08:25:00.247]  $ ...future.seeds_ii       : NULL
[08:25:00.247]  $ ...future.globals.maxSize: NULL
[08:25:00.247]  - attr(*, "where")=List of 5
[08:25:00.247]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.247]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.247]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.247]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.247]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.247]  - attr(*, "resolved")= logi FALSE
[08:25:00.247]  - attr(*, "total_size")= num 5249
[08:25:00.247]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.247]  - attr(*, "already-done")= logi TRUE
[08:25:00.253] - copied ‘...future.FUN’ to environment
[08:25:00.253] - copied ‘future.call.arguments’ to environment
[08:25:00.253] - copied ‘...future.elements_ii’ to environment
[08:25:00.253] - copied ‘...future.seeds_ii’ to environment
[08:25:00.253] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.253] assign_globals() ... done
[08:25:00.254] requestCore(): workers = 2
[08:25:00.257] MulticoreFuture started
[08:25:00.257] - Launch lazy future ... done
[08:25:00.258] plan(): Setting new future strategy stack:
[08:25:00.258] run() for ‘MulticoreFuture’ ... done
[08:25:00.258] Created future:
[08:25:00.258] List of future strategies:
[08:25:00.258] 1. sequential:
[08:25:00.258]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.258]    - tweaked: FALSE
[08:25:00.258]    - call: NULL
[08:25:00.259] plan(): nbrOfWorkers() = 1
[08:25:00.261] plan(): Setting new future strategy stack:
[08:25:00.261] List of future strategies:
[08:25:00.261] 1. multicore:
[08:25:00.261]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.261]    - tweaked: FALSE
[08:25:00.261]    - call: plan(strategy)
[08:25:00.264] plan(): nbrOfWorkers() = 2
[08:25:00.258] MulticoreFuture:
[08:25:00.258] Label: ‘future_eapply-1’
[08:25:00.258] Expression:
[08:25:00.258] {
[08:25:00.258]     do.call(function(...) {
[08:25:00.258]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.258]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.258]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.258]             on.exit(options(oopts), add = TRUE)
[08:25:00.258]         }
[08:25:00.258]         {
[08:25:00.258]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.258]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.258]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.258]             })
[08:25:00.258]         }
[08:25:00.258]     }, args = future.call.arguments)
[08:25:00.258] }
[08:25:00.258] Lazy evaluation: FALSE
[08:25:00.258] Asynchronous evaluation: TRUE
[08:25:00.258] Local evaluation: TRUE
[08:25:00.258] Environment: R_GlobalEnv
[08:25:00.258] Capture standard output: TRUE
[08:25:00.258] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.258] Globals: 5 objects totaling 479 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.258] Packages: <none>
[08:25:00.258] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.258] Resolved: TRUE
[08:25:00.258] Value: <not collected>
[08:25:00.258] Conditions captured: <none>
[08:25:00.258] Early signaling: FALSE
[08:25:00.258] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.258] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.266] Chunk #1 of 2 ... DONE
[08:25:00.266] Chunk #2 of 2 ...
[08:25:00.266]  - Finding globals in 'X' for chunk #2 ...
[08:25:00.267] getGlobalsAndPackages() ...
[08:25:00.267] Searching for globals...
[08:25:00.267] 
[08:25:00.267] Searching for globals ... DONE
[08:25:00.268] - globals: [0] <none>
[08:25:00.268] getGlobalsAndPackages() ... DONE
[08:25:00.268]    + additional globals found: [n=0] 
[08:25:00.268]    + additional namespaces needed: [n=0] 
[08:25:00.268]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:00.268]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:00.268]  - seeds: <none>
[08:25:00.269]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.269] getGlobalsAndPackages() ...
[08:25:00.269] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.269] Resolving globals: FALSE
[08:25:00.269] Tweak future expression to call with '...' arguments ...
[08:25:00.270] {
[08:25:00.270]     do.call(function(...) {
[08:25:00.270]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.270]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.270]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.270]             on.exit(options(oopts), add = TRUE)
[08:25:00.270]         }
[08:25:00.270]         {
[08:25:00.270]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.270]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.270]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.270]             })
[08:25:00.270]         }
[08:25:00.270]     }, args = future.call.arguments)
[08:25:00.270] }
[08:25:00.270] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.271] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.271] 
[08:25:00.271] getGlobalsAndPackages() ... DONE
[08:25:00.272] run() for ‘Future’ ...
[08:25:00.272] - state: ‘created’
[08:25:00.272] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:00.276] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.276] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:00.276]   - Field: ‘label’
[08:25:00.276]   - Field: ‘local’
[08:25:00.276]   - Field: ‘owner’
[08:25:00.277]   - Field: ‘envir’
[08:25:00.277]   - Field: ‘workers’
[08:25:00.277]   - Field: ‘packages’
[08:25:00.277]   - Field: ‘gc’
[08:25:00.277]   - Field: ‘job’
[08:25:00.277]   - Field: ‘conditions’
[08:25:00.278]   - Field: ‘expr’
[08:25:00.278]   - Field: ‘uuid’
[08:25:00.278]   - Field: ‘seed’
[08:25:00.278]   - Field: ‘version’
[08:25:00.278]   - Field: ‘result’
[08:25:00.278]   - Field: ‘asynchronous’
[08:25:00.279]   - Field: ‘calls’
[08:25:00.279]   - Field: ‘globals’
[08:25:00.279]   - Field: ‘stdout’
[08:25:00.279]   - Field: ‘earlySignal’
[08:25:00.279]   - Field: ‘lazy’
[08:25:00.279]   - Field: ‘state’
[08:25:00.280] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:00.280] - Launch lazy future ...
[08:25:00.280] Packages needed by the future expression (n = 0): <none>
[08:25:00.280] Packages needed by future strategies (n = 0): <none>
[08:25:00.281] {
[08:25:00.281]     {
[08:25:00.281]         {
[08:25:00.281]             ...future.startTime <- base::Sys.time()
[08:25:00.281]             {
[08:25:00.281]                 {
[08:25:00.281]                   {
[08:25:00.281]                     {
[08:25:00.281]                       base::local({
[08:25:00.281]                         has_future <- base::requireNamespace("future", 
[08:25:00.281]                           quietly = TRUE)
[08:25:00.281]                         if (has_future) {
[08:25:00.281]                           ns <- base::getNamespace("future")
[08:25:00.281]                           version <- ns[[".package"]][["version"]]
[08:25:00.281]                           if (is.null(version)) 
[08:25:00.281]                             version <- utils::packageVersion("future")
[08:25:00.281]                         }
[08:25:00.281]                         else {
[08:25:00.281]                           version <- NULL
[08:25:00.281]                         }
[08:25:00.281]                         if (!has_future || version < "1.8.0") {
[08:25:00.281]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.281]                             "", base::R.version$version.string), 
[08:25:00.281]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:00.281]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:00.281]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.281]                               "release", "version")], collapse = " "), 
[08:25:00.281]                             hostname = base::Sys.info()[["nodename"]])
[08:25:00.281]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.281]                             info)
[08:25:00.281]                           info <- base::paste(info, collapse = "; ")
[08:25:00.281]                           if (!has_future) {
[08:25:00.281]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.281]                               info)
[08:25:00.281]                           }
[08:25:00.281]                           else {
[08:25:00.281]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.281]                               info, version)
[08:25:00.281]                           }
[08:25:00.281]                           base::stop(msg)
[08:25:00.281]                         }
[08:25:00.281]                       })
[08:25:00.281]                     }
[08:25:00.281]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:00.281]                     base::options(mc.cores = 1L)
[08:25:00.281]                   }
[08:25:00.281]                   ...future.strategy.old <- future::plan("list")
[08:25:00.281]                   options(future.plan = NULL)
[08:25:00.281]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.281]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.281]                 }
[08:25:00.281]                 ...future.workdir <- getwd()
[08:25:00.281]             }
[08:25:00.281]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.281]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.281]         }
[08:25:00.281]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.281]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:00.281]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.281]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.281]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.281]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.281]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.281]             base::names(...future.oldOptions))
[08:25:00.281]     }
[08:25:00.281]     if (FALSE) {
[08:25:00.281]     }
[08:25:00.281]     else {
[08:25:00.281]         if (TRUE) {
[08:25:00.281]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.281]                 open = "w")
[08:25:00.281]         }
[08:25:00.281]         else {
[08:25:00.281]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.281]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.281]         }
[08:25:00.281]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.281]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.281]             base::sink(type = "output", split = FALSE)
[08:25:00.281]             base::close(...future.stdout)
[08:25:00.281]         }, add = TRUE)
[08:25:00.281]     }
[08:25:00.281]     ...future.frame <- base::sys.nframe()
[08:25:00.281]     ...future.conditions <- base::list()
[08:25:00.281]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.281]     if (FALSE) {
[08:25:00.281]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.281]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.281]     }
[08:25:00.281]     ...future.result <- base::tryCatch({
[08:25:00.281]         base::withCallingHandlers({
[08:25:00.281]             ...future.value <- base::withVisible(base::local({
[08:25:00.281]                 withCallingHandlers({
[08:25:00.281]                   {
[08:25:00.281]                     do.call(function(...) {
[08:25:00.281]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.281]                       if (!identical(...future.globals.maxSize.org, 
[08:25:00.281]                         ...future.globals.maxSize)) {
[08:25:00.281]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.281]                         on.exit(options(oopts), add = TRUE)
[08:25:00.281]                       }
[08:25:00.281]                       {
[08:25:00.281]                         lapply(seq_along(...future.elements_ii), 
[08:25:00.281]                           FUN = function(jj) {
[08:25:00.281]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.281]                             ...future.FUN(...future.X_jj, ...)
[08:25:00.281]                           })
[08:25:00.281]                       }
[08:25:00.281]                     }, args = future.call.arguments)
[08:25:00.281]                   }
[08:25:00.281]                 }, immediateCondition = function(cond) {
[08:25:00.281]                   save_rds <- function (object, pathname, ...) 
[08:25:00.281]                   {
[08:25:00.281]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:00.281]                     if (file_test("-f", pathname_tmp)) {
[08:25:00.281]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.281]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:00.281]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.281]                         fi_tmp[["mtime"]])
[08:25:00.281]                     }
[08:25:00.281]                     tryCatch({
[08:25:00.281]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:00.281]                     }, error = function(ex) {
[08:25:00.281]                       msg <- conditionMessage(ex)
[08:25:00.281]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.281]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:00.281]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.281]                         fi_tmp[["mtime"]], msg)
[08:25:00.281]                       ex$message <- msg
[08:25:00.281]                       stop(ex)
[08:25:00.281]                     })
[08:25:00.281]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:00.281]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:00.281]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:00.281]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.281]                       fi <- file.info(pathname)
[08:25:00.281]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:00.281]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.281]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:00.281]                         fi[["size"]], fi[["mtime"]])
[08:25:00.281]                       stop(msg)
[08:25:00.281]                     }
[08:25:00.281]                     invisible(pathname)
[08:25:00.281]                   }
[08:25:00.281]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:00.281]                     rootPath = tempdir()) 
[08:25:00.281]                   {
[08:25:00.281]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:00.281]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:00.281]                       tmpdir = path, fileext = ".rds")
[08:25:00.281]                     save_rds(obj, file)
[08:25:00.281]                   }
[08:25:00.281]                   saveImmediateCondition(cond, path = "/tmp/RtmpC5owVr/.future/immediateConditions")
[08:25:00.281]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.281]                   {
[08:25:00.281]                     inherits <- base::inherits
[08:25:00.281]                     invokeRestart <- base::invokeRestart
[08:25:00.281]                     is.null <- base::is.null
[08:25:00.281]                     muffled <- FALSE
[08:25:00.281]                     if (inherits(cond, "message")) {
[08:25:00.281]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:00.281]                       if (muffled) 
[08:25:00.281]                         invokeRestart("muffleMessage")
[08:25:00.281]                     }
[08:25:00.281]                     else if (inherits(cond, "warning")) {
[08:25:00.281]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:00.281]                       if (muffled) 
[08:25:00.281]                         invokeRestart("muffleWarning")
[08:25:00.281]                     }
[08:25:00.281]                     else if (inherits(cond, "condition")) {
[08:25:00.281]                       if (!is.null(pattern)) {
[08:25:00.281]                         computeRestarts <- base::computeRestarts
[08:25:00.281]                         grepl <- base::grepl
[08:25:00.281]                         restarts <- computeRestarts(cond)
[08:25:00.281]                         for (restart in restarts) {
[08:25:00.281]                           name <- restart$name
[08:25:00.281]                           if (is.null(name)) 
[08:25:00.281]                             next
[08:25:00.281]                           if (!grepl(pattern, name)) 
[08:25:00.281]                             next
[08:25:00.281]                           invokeRestart(restart)
[08:25:00.281]                           muffled <- TRUE
[08:25:00.281]                           break
[08:25:00.281]                         }
[08:25:00.281]                       }
[08:25:00.281]                     }
[08:25:00.281]                     invisible(muffled)
[08:25:00.281]                   }
[08:25:00.281]                   muffleCondition(cond)
[08:25:00.281]                 })
[08:25:00.281]             }))
[08:25:00.281]             future::FutureResult(value = ...future.value$value, 
[08:25:00.281]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.281]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.281]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.281]                     ...future.globalenv.names))
[08:25:00.281]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.281]         }, condition = base::local({
[08:25:00.281]             c <- base::c
[08:25:00.281]             inherits <- base::inherits
[08:25:00.281]             invokeRestart <- base::invokeRestart
[08:25:00.281]             length <- base::length
[08:25:00.281]             list <- base::list
[08:25:00.281]             seq.int <- base::seq.int
[08:25:00.281]             signalCondition <- base::signalCondition
[08:25:00.281]             sys.calls <- base::sys.calls
[08:25:00.281]             `[[` <- base::`[[`
[08:25:00.281]             `+` <- base::`+`
[08:25:00.281]             `<<-` <- base::`<<-`
[08:25:00.281]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.281]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.281]                   3L)]
[08:25:00.281]             }
[08:25:00.281]             function(cond) {
[08:25:00.281]                 is_error <- inherits(cond, "error")
[08:25:00.281]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.281]                   NULL)
[08:25:00.281]                 if (is_error) {
[08:25:00.281]                   sessionInformation <- function() {
[08:25:00.281]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.281]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.281]                       search = base::search(), system = base::Sys.info())
[08:25:00.281]                   }
[08:25:00.281]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.281]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.281]                     cond$call), session = sessionInformation(), 
[08:25:00.281]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.281]                   signalCondition(cond)
[08:25:00.281]                 }
[08:25:00.281]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.281]                 "immediateCondition"))) {
[08:25:00.281]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.281]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.281]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.281]                   if (TRUE && !signal) {
[08:25:00.281]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.281]                     {
[08:25:00.281]                       inherits <- base::inherits
[08:25:00.281]                       invokeRestart <- base::invokeRestart
[08:25:00.281]                       is.null <- base::is.null
[08:25:00.281]                       muffled <- FALSE
[08:25:00.281]                       if (inherits(cond, "message")) {
[08:25:00.281]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.281]                         if (muffled) 
[08:25:00.281]                           invokeRestart("muffleMessage")
[08:25:00.281]                       }
[08:25:00.281]                       else if (inherits(cond, "warning")) {
[08:25:00.281]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.281]                         if (muffled) 
[08:25:00.281]                           invokeRestart("muffleWarning")
[08:25:00.281]                       }
[08:25:00.281]                       else if (inherits(cond, "condition")) {
[08:25:00.281]                         if (!is.null(pattern)) {
[08:25:00.281]                           computeRestarts <- base::computeRestarts
[08:25:00.281]                           grepl <- base::grepl
[08:25:00.281]                           restarts <- computeRestarts(cond)
[08:25:00.281]                           for (restart in restarts) {
[08:25:00.281]                             name <- restart$name
[08:25:00.281]                             if (is.null(name)) 
[08:25:00.281]                               next
[08:25:00.281]                             if (!grepl(pattern, name)) 
[08:25:00.281]                               next
[08:25:00.281]                             invokeRestart(restart)
[08:25:00.281]                             muffled <- TRUE
[08:25:00.281]                             break
[08:25:00.281]                           }
[08:25:00.281]                         }
[08:25:00.281]                       }
[08:25:00.281]                       invisible(muffled)
[08:25:00.281]                     }
[08:25:00.281]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.281]                   }
[08:25:00.281]                 }
[08:25:00.281]                 else {
[08:25:00.281]                   if (TRUE) {
[08:25:00.281]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.281]                     {
[08:25:00.281]                       inherits <- base::inherits
[08:25:00.281]                       invokeRestart <- base::invokeRestart
[08:25:00.281]                       is.null <- base::is.null
[08:25:00.281]                       muffled <- FALSE
[08:25:00.281]                       if (inherits(cond, "message")) {
[08:25:00.281]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.281]                         if (muffled) 
[08:25:00.281]                           invokeRestart("muffleMessage")
[08:25:00.281]                       }
[08:25:00.281]                       else if (inherits(cond, "warning")) {
[08:25:00.281]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.281]                         if (muffled) 
[08:25:00.281]                           invokeRestart("muffleWarning")
[08:25:00.281]                       }
[08:25:00.281]                       else if (inherits(cond, "condition")) {
[08:25:00.281]                         if (!is.null(pattern)) {
[08:25:00.281]                           computeRestarts <- base::computeRestarts
[08:25:00.281]                           grepl <- base::grepl
[08:25:00.281]                           restarts <- computeRestarts(cond)
[08:25:00.281]                           for (restart in restarts) {
[08:25:00.281]                             name <- restart$name
[08:25:00.281]                             if (is.null(name)) 
[08:25:00.281]                               next
[08:25:00.281]                             if (!grepl(pattern, name)) 
[08:25:00.281]                               next
[08:25:00.281]                             invokeRestart(restart)
[08:25:00.281]                             muffled <- TRUE
[08:25:00.281]                             break
[08:25:00.281]                           }
[08:25:00.281]                         }
[08:25:00.281]                       }
[08:25:00.281]                       invisible(muffled)
[08:25:00.281]                     }
[08:25:00.281]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.281]                   }
[08:25:00.281]                 }
[08:25:00.281]             }
[08:25:00.281]         }))
[08:25:00.281]     }, error = function(ex) {
[08:25:00.281]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.281]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.281]                 ...future.rng), started = ...future.startTime, 
[08:25:00.281]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.281]             version = "1.8"), class = "FutureResult")
[08:25:00.281]     }, finally = {
[08:25:00.281]         if (!identical(...future.workdir, getwd())) 
[08:25:00.281]             setwd(...future.workdir)
[08:25:00.281]         {
[08:25:00.281]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.281]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.281]             }
[08:25:00.281]             base::options(...future.oldOptions)
[08:25:00.281]             if (.Platform$OS.type == "windows") {
[08:25:00.281]                 old_names <- names(...future.oldEnvVars)
[08:25:00.281]                 envs <- base::Sys.getenv()
[08:25:00.281]                 names <- names(envs)
[08:25:00.281]                 common <- intersect(names, old_names)
[08:25:00.281]                 added <- setdiff(names, old_names)
[08:25:00.281]                 removed <- setdiff(old_names, names)
[08:25:00.281]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.281]                   envs[common]]
[08:25:00.281]                 NAMES <- toupper(changed)
[08:25:00.281]                 args <- list()
[08:25:00.281]                 for (kk in seq_along(NAMES)) {
[08:25:00.281]                   name <- changed[[kk]]
[08:25:00.281]                   NAME <- NAMES[[kk]]
[08:25:00.281]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.281]                     next
[08:25:00.281]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.281]                 }
[08:25:00.281]                 NAMES <- toupper(added)
[08:25:00.281]                 for (kk in seq_along(NAMES)) {
[08:25:00.281]                   name <- added[[kk]]
[08:25:00.281]                   NAME <- NAMES[[kk]]
[08:25:00.281]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.281]                     next
[08:25:00.281]                   args[[name]] <- ""
[08:25:00.281]                 }
[08:25:00.281]                 NAMES <- toupper(removed)
[08:25:00.281]                 for (kk in seq_along(NAMES)) {
[08:25:00.281]                   name <- removed[[kk]]
[08:25:00.281]                   NAME <- NAMES[[kk]]
[08:25:00.281]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.281]                     next
[08:25:00.281]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.281]                 }
[08:25:00.281]                 if (length(args) > 0) 
[08:25:00.281]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.281]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.281]             }
[08:25:00.281]             else {
[08:25:00.281]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.281]             }
[08:25:00.281]             {
[08:25:00.281]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.281]                   0L) {
[08:25:00.281]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.281]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.281]                   base::options(opts)
[08:25:00.281]                 }
[08:25:00.281]                 {
[08:25:00.281]                   {
[08:25:00.281]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:00.281]                     NULL
[08:25:00.281]                   }
[08:25:00.281]                   options(future.plan = NULL)
[08:25:00.281]                   if (is.na(NA_character_)) 
[08:25:00.281]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.281]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.281]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.281]                     .init = FALSE)
[08:25:00.281]                 }
[08:25:00.281]             }
[08:25:00.281]         }
[08:25:00.281]     })
[08:25:00.281]     if (TRUE) {
[08:25:00.281]         base::sink(type = "output", split = FALSE)
[08:25:00.281]         if (TRUE) {
[08:25:00.281]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.281]         }
[08:25:00.281]         else {
[08:25:00.281]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.281]         }
[08:25:00.281]         base::close(...future.stdout)
[08:25:00.281]         ...future.stdout <- NULL
[08:25:00.281]     }
[08:25:00.281]     ...future.result$conditions <- ...future.conditions
[08:25:00.281]     ...future.result$finished <- base::Sys.time()
[08:25:00.281]     ...future.result
[08:25:00.281] }
[08:25:00.286] assign_globals() ...
[08:25:00.286] List of 5
[08:25:00.286]  $ ...future.FUN            :function (x, ...)  
[08:25:00.286]  $ future.call.arguments    : list()
[08:25:00.286]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.286]  $ ...future.elements_ii    :List of 2
[08:25:00.286]   ..$ : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[08:25:00.286]   ..$ : int [1:10] 1 2 3 4 5 6 7 8 9 10
[08:25:00.286]  $ ...future.seeds_ii       : NULL
[08:25:00.286]  $ ...future.globals.maxSize: NULL
[08:25:00.286]  - attr(*, "where")=List of 5
[08:25:00.286]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.286]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.286]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.286]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.286]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.286]  - attr(*, "resolved")= logi FALSE
[08:25:00.286]  - attr(*, "total_size")= num 5249
[08:25:00.286]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.286]  - attr(*, "already-done")= logi TRUE
[08:25:00.295] - copied ‘...future.FUN’ to environment
[08:25:00.295] - copied ‘future.call.arguments’ to environment
[08:25:00.296] - copied ‘...future.elements_ii’ to environment
[08:25:00.296] - copied ‘...future.seeds_ii’ to environment
[08:25:00.296] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.296] assign_globals() ... done
[08:25:00.296] requestCore(): workers = 2
[08:25:00.307] MulticoreFuture started
[08:25:00.307] - Launch lazy future ... done
[08:25:00.307] run() for ‘MulticoreFuture’ ... done
[08:25:00.308] Created future:
[08:25:00.308] plan(): Setting new future strategy stack:
[08:25:00.308] List of future strategies:
[08:25:00.308] 1. sequential:
[08:25:00.308]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.308]    - tweaked: FALSE
[08:25:00.308]    - call: NULL
[08:25:00.309] plan(): nbrOfWorkers() = 1
[08:25:00.311] plan(): Setting new future strategy stack:
[08:25:00.312] List of future strategies:
[08:25:00.312] 1. multicore:
[08:25:00.312]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.312]    - tweaked: FALSE
[08:25:00.312]    - call: plan(strategy)
[08:25:00.315] plan(): nbrOfWorkers() = 2
[08:25:00.308] MulticoreFuture:
[08:25:00.308] Label: ‘future_eapply-2’
[08:25:00.308] Expression:
[08:25:00.308] {
[08:25:00.308]     do.call(function(...) {
[08:25:00.308]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.308]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.308]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.308]             on.exit(options(oopts), add = TRUE)
[08:25:00.308]         }
[08:25:00.308]         {
[08:25:00.308]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.308]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.308]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.308]             })
[08:25:00.308]         }
[08:25:00.308]     }, args = future.call.arguments)
[08:25:00.308] }
[08:25:00.308] Lazy evaluation: FALSE
[08:25:00.308] Asynchronous evaluation: TRUE
[08:25:00.308] Local evaluation: TRUE
[08:25:00.308] Environment: R_GlobalEnv
[08:25:00.308] Capture standard output: TRUE
[08:25:00.308] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.308] Globals: 5 objects totaling 629 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 205 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.308] Packages: <none>
[08:25:00.308] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.308] Resolved: TRUE
[08:25:00.308] Value: <not collected>
[08:25:00.308] Conditions captured: <none>
[08:25:00.308] Early signaling: FALSE
[08:25:00.308] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.308] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.316] Chunk #2 of 2 ... DONE
[08:25:00.316] Launching 2 futures (chunks) ... DONE
[08:25:00.317] Resolving 2 futures (chunks) ...
[08:25:00.317] resolve() on list ...
[08:25:00.317]  recursive: 0
[08:25:00.317]  length: 2
[08:25:00.317] 
[08:25:00.318] Future #1
[08:25:00.318] result() for MulticoreFuture ...
[08:25:00.320] result() for MulticoreFuture ...
[08:25:00.320] result() for MulticoreFuture ... done
[08:25:00.321] result() for MulticoreFuture ... done
[08:25:00.321] result() for MulticoreFuture ...
[08:25:00.321] result() for MulticoreFuture ... done
[08:25:00.321] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:00.321] - nx: 2
[08:25:00.321] - relay: TRUE
[08:25:00.322] - stdout: TRUE
[08:25:00.322] - signal: TRUE
[08:25:00.322] - resignal: FALSE
[08:25:00.322] - force: TRUE
[08:25:00.322] - relayed: [n=2] FALSE, FALSE
[08:25:00.322] - queued futures: [n=2] FALSE, FALSE
[08:25:00.322]  - until=1
[08:25:00.323]  - relaying element #1
[08:25:00.323] result() for MulticoreFuture ...
[08:25:00.323] result() for MulticoreFuture ... done
[08:25:00.323] result() for MulticoreFuture ...
[08:25:00.323] result() for MulticoreFuture ... done
[08:25:00.323] result() for MulticoreFuture ...
[08:25:00.323] result() for MulticoreFuture ... done
[08:25:00.324] result() for MulticoreFuture ...
[08:25:00.324] result() for MulticoreFuture ... done
[08:25:00.324] - relayed: [n=2] TRUE, FALSE
[08:25:00.324] - queued futures: [n=2] TRUE, FALSE
[08:25:00.324] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:00.324]  length: 1 (resolved future 1)
[08:25:00.325] Future #2
[08:25:00.325] result() for MulticoreFuture ...
[08:25:00.326] result() for MulticoreFuture ...
[08:25:00.326] result() for MulticoreFuture ... done
[08:25:00.326] result() for MulticoreFuture ... done
[08:25:00.326] result() for MulticoreFuture ...
[08:25:00.326] result() for MulticoreFuture ... done
[08:25:00.326] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:00.326] - nx: 2
[08:25:00.326] - relay: TRUE
[08:25:00.327] - stdout: TRUE
[08:25:00.327] - signal: TRUE
[08:25:00.327] - resignal: FALSE
[08:25:00.327] - force: TRUE
[08:25:00.327] - relayed: [n=2] TRUE, FALSE
[08:25:00.327] - queued futures: [n=2] TRUE, FALSE
[08:25:00.327]  - until=2
[08:25:00.327]  - relaying element #2
[08:25:00.328] result() for MulticoreFuture ...
[08:25:00.328] result() for MulticoreFuture ... done
[08:25:00.328] result() for MulticoreFuture ...
[08:25:00.328] result() for MulticoreFuture ... done
[08:25:00.328] result() for MulticoreFuture ...
[08:25:00.328] result() for MulticoreFuture ... done
[08:25:00.328] result() for MulticoreFuture ...
[08:25:00.328] result() for MulticoreFuture ... done
[08:25:00.328] - relayed: [n=2] TRUE, TRUE
[08:25:00.329] - queued futures: [n=2] TRUE, TRUE
[08:25:00.329] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:00.329]  length: 0 (resolved future 2)
[08:25:00.329] Relaying remaining futures
[08:25:00.329] signalConditionsASAP(NULL, pos=0) ...
[08:25:00.329] - nx: 2
[08:25:00.329] - relay: TRUE
[08:25:00.329] - stdout: TRUE
[08:25:00.329] - signal: TRUE
[08:25:00.330] - resignal: FALSE
[08:25:00.330] - force: TRUE
[08:25:00.330] - relayed: [n=2] TRUE, TRUE
[08:25:00.330] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:00.330] - relayed: [n=2] TRUE, TRUE
[08:25:00.330] - queued futures: [n=2] TRUE, TRUE
[08:25:00.330] signalConditionsASAP(NULL, pos=0) ... done
[08:25:00.330] resolve() on list ... DONE
[08:25:00.330] result() for MulticoreFuture ...
[08:25:00.331] result() for MulticoreFuture ... done
[08:25:00.331] result() for MulticoreFuture ...
[08:25:00.331] result() for MulticoreFuture ... done
[08:25:00.331] result() for MulticoreFuture ...
[08:25:00.331] result() for MulticoreFuture ... done
[08:25:00.331] result() for MulticoreFuture ...
[08:25:00.331] result() for MulticoreFuture ... done
[08:25:00.331]  - Number of value chunks collected: 2
[08:25:00.331] Resolving 2 futures (chunks) ... DONE
[08:25:00.332] Reducing values from 2 chunks ...
[08:25:00.332]  - Number of values collected after concatenation: 3
[08:25:00.332]  - Number of values expected: 3
[08:25:00.332] Reducing values from 2 chunks ... DONE
[08:25:00.332] future_lapply() ... DONE
[08:25:00.333] future_lapply() ...
[08:25:00.336] Number of chunks: 2
[08:25:00.336] getGlobalsAndPackagesXApply() ...
[08:25:00.336]  - future.globals: TRUE
[08:25:00.336] getGlobalsAndPackages() ...
[08:25:00.336] Searching for globals...
[08:25:00.337] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:00.338] Searching for globals ... DONE
[08:25:00.338] Resolving globals: FALSE
[08:25:00.338] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:00.339] The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:00.339] - globals: [1] ‘FUN’
[08:25:00.339] - packages: [1] ‘stats’
[08:25:00.339] getGlobalsAndPackages() ... DONE
[08:25:00.339]  - globals found/used: [n=1] ‘FUN’
[08:25:00.339]  - needed namespaces: [n=1] ‘stats’
[08:25:00.339] Finding globals ... DONE
[08:25:00.340]  - use_args: TRUE
[08:25:00.340]  - Getting '...' globals ...
[08:25:00.340] resolve() on list ...
[08:25:00.340]  recursive: 0
[08:25:00.340]  length: 1
[08:25:00.340]  elements: ‘...’
[08:25:00.340]  length: 0 (resolved future 1)
[08:25:00.341] resolve() on list ... DONE
[08:25:00.341]    - '...' content: [n=1] ‘probs’
[08:25:00.341] List of 1
[08:25:00.341]  $ ...:List of 1
[08:25:00.341]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:00.341]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.341]  - attr(*, "where")=List of 1
[08:25:00.341]   ..$ ...:<environment: 0x5577ed0ee610> 
[08:25:00.341]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.341]  - attr(*, "resolved")= logi TRUE
[08:25:00.341]  - attr(*, "total_size")= num NA
[08:25:00.347]  - Getting '...' globals ... DONE
[08:25:00.347] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:00.347] List of 2
[08:25:00.347]  $ ...future.FUN:function (x, ...)  
[08:25:00.347]  $ ...          :List of 1
[08:25:00.347]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:00.347]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.347]  - attr(*, "where")=List of 2
[08:25:00.347]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:00.347]   ..$ ...          :<environment: 0x5577ed0ee610> 
[08:25:00.347]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.347]  - attr(*, "resolved")= logi FALSE
[08:25:00.347]  - attr(*, "total_size")= num 6525
[08:25:00.350] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:00.351] getGlobalsAndPackagesXApply() ... DONE
[08:25:00.351] Number of futures (= number of chunks): 2
[08:25:00.351] Launching 2 futures (chunks) ...
[08:25:00.351] Chunk #1 of 2 ...
[08:25:00.351]  - Finding globals in 'X' for chunk #1 ...
[08:25:00.351] getGlobalsAndPackages() ...
[08:25:00.351] Searching for globals...
[08:25:00.352] 
[08:25:00.352] Searching for globals ... DONE
[08:25:00.352] - globals: [0] <none>
[08:25:00.352] getGlobalsAndPackages() ... DONE
[08:25:00.352]    + additional globals found: [n=0] 
[08:25:00.352]    + additional namespaces needed: [n=0] 
[08:25:00.352]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:00.352]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:00.352]  - seeds: <none>
[08:25:00.352]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.353] getGlobalsAndPackages() ...
[08:25:00.353] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.353] Resolving globals: FALSE
[08:25:00.353] Tweak future expression to call with '...' arguments ...
[08:25:00.353] {
[08:25:00.353]     do.call(function(...) {
[08:25:00.353]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.353]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.353]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.353]             on.exit(options(oopts), add = TRUE)
[08:25:00.353]         }
[08:25:00.353]         {
[08:25:00.353]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.353]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.353]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.353]             })
[08:25:00.353]         }
[08:25:00.353]     }, args = future.call.arguments)
[08:25:00.353] }
[08:25:00.353] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.354] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.354] - packages: [1] ‘stats’
[08:25:00.354] getGlobalsAndPackages() ... DONE
[08:25:00.354] run() for ‘Future’ ...
[08:25:00.354] - state: ‘created’
[08:25:00.354] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:00.356] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.356] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:00.357]   - Field: ‘label’
[08:25:00.357]   - Field: ‘local’
[08:25:00.357]   - Field: ‘owner’
[08:25:00.357]   - Field: ‘envir’
[08:25:00.357]   - Field: ‘workers’
[08:25:00.357]   - Field: ‘packages’
[08:25:00.357]   - Field: ‘gc’
[08:25:00.357]   - Field: ‘job’
[08:25:00.357]   - Field: ‘conditions’
[08:25:00.357]   - Field: ‘expr’
[08:25:00.357]   - Field: ‘uuid’
[08:25:00.358]   - Field: ‘seed’
[08:25:00.358]   - Field: ‘version’
[08:25:00.358]   - Field: ‘result’
[08:25:00.358]   - Field: ‘asynchronous’
[08:25:00.358]   - Field: ‘calls’
[08:25:00.358]   - Field: ‘globals’
[08:25:00.358]   - Field: ‘stdout’
[08:25:00.358]   - Field: ‘earlySignal’
[08:25:00.358]   - Field: ‘lazy’
[08:25:00.358]   - Field: ‘state’
[08:25:00.358] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:00.358] - Launch lazy future ...
[08:25:00.359] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.359] Packages needed by future strategies (n = 0): <none>
[08:25:00.359] {
[08:25:00.359]     {
[08:25:00.359]         {
[08:25:00.359]             ...future.startTime <- base::Sys.time()
[08:25:00.359]             {
[08:25:00.359]                 {
[08:25:00.359]                   {
[08:25:00.359]                     {
[08:25:00.359]                       {
[08:25:00.359]                         base::local({
[08:25:00.359]                           has_future <- base::requireNamespace("future", 
[08:25:00.359]                             quietly = TRUE)
[08:25:00.359]                           if (has_future) {
[08:25:00.359]                             ns <- base::getNamespace("future")
[08:25:00.359]                             version <- ns[[".package"]][["version"]]
[08:25:00.359]                             if (is.null(version)) 
[08:25:00.359]                               version <- utils::packageVersion("future")
[08:25:00.359]                           }
[08:25:00.359]                           else {
[08:25:00.359]                             version <- NULL
[08:25:00.359]                           }
[08:25:00.359]                           if (!has_future || version < "1.8.0") {
[08:25:00.359]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.359]                               "", base::R.version$version.string), 
[08:25:00.359]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:00.359]                                 base::R.version$platform, 8 * 
[08:25:00.359]                                   base::.Machine$sizeof.pointer), 
[08:25:00.359]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.359]                                 "release", "version")], collapse = " "), 
[08:25:00.359]                               hostname = base::Sys.info()[["nodename"]])
[08:25:00.359]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.359]                               info)
[08:25:00.359]                             info <- base::paste(info, collapse = "; ")
[08:25:00.359]                             if (!has_future) {
[08:25:00.359]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.359]                                 info)
[08:25:00.359]                             }
[08:25:00.359]                             else {
[08:25:00.359]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.359]                                 info, version)
[08:25:00.359]                             }
[08:25:00.359]                             base::stop(msg)
[08:25:00.359]                           }
[08:25:00.359]                         })
[08:25:00.359]                       }
[08:25:00.359]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:00.359]                       base::options(mc.cores = 1L)
[08:25:00.359]                     }
[08:25:00.359]                     base::local({
[08:25:00.359]                       for (pkg in "stats") {
[08:25:00.359]                         base::loadNamespace(pkg)
[08:25:00.359]                         base::library(pkg, character.only = TRUE)
[08:25:00.359]                       }
[08:25:00.359]                     })
[08:25:00.359]                   }
[08:25:00.359]                   ...future.strategy.old <- future::plan("list")
[08:25:00.359]                   options(future.plan = NULL)
[08:25:00.359]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.359]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.359]                 }
[08:25:00.359]                 ...future.workdir <- getwd()
[08:25:00.359]             }
[08:25:00.359]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.359]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.359]         }
[08:25:00.359]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.359]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:00.359]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.359]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.359]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.359]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.359]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.359]             base::names(...future.oldOptions))
[08:25:00.359]     }
[08:25:00.359]     if (FALSE) {
[08:25:00.359]     }
[08:25:00.359]     else {
[08:25:00.359]         if (TRUE) {
[08:25:00.359]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.359]                 open = "w")
[08:25:00.359]         }
[08:25:00.359]         else {
[08:25:00.359]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.359]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.359]         }
[08:25:00.359]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.359]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.359]             base::sink(type = "output", split = FALSE)
[08:25:00.359]             base::close(...future.stdout)
[08:25:00.359]         }, add = TRUE)
[08:25:00.359]     }
[08:25:00.359]     ...future.frame <- base::sys.nframe()
[08:25:00.359]     ...future.conditions <- base::list()
[08:25:00.359]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.359]     if (FALSE) {
[08:25:00.359]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.359]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.359]     }
[08:25:00.359]     ...future.result <- base::tryCatch({
[08:25:00.359]         base::withCallingHandlers({
[08:25:00.359]             ...future.value <- base::withVisible(base::local({
[08:25:00.359]                 withCallingHandlers({
[08:25:00.359]                   {
[08:25:00.359]                     do.call(function(...) {
[08:25:00.359]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.359]                       if (!identical(...future.globals.maxSize.org, 
[08:25:00.359]                         ...future.globals.maxSize)) {
[08:25:00.359]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.359]                         on.exit(options(oopts), add = TRUE)
[08:25:00.359]                       }
[08:25:00.359]                       {
[08:25:00.359]                         lapply(seq_along(...future.elements_ii), 
[08:25:00.359]                           FUN = function(jj) {
[08:25:00.359]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.359]                             ...future.FUN(...future.X_jj, ...)
[08:25:00.359]                           })
[08:25:00.359]                       }
[08:25:00.359]                     }, args = future.call.arguments)
[08:25:00.359]                   }
[08:25:00.359]                 }, immediateCondition = function(cond) {
[08:25:00.359]                   save_rds <- function (object, pathname, ...) 
[08:25:00.359]                   {
[08:25:00.359]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:00.359]                     if (file_test("-f", pathname_tmp)) {
[08:25:00.359]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.359]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:00.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.359]                         fi_tmp[["mtime"]])
[08:25:00.359]                     }
[08:25:00.359]                     tryCatch({
[08:25:00.359]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:00.359]                     }, error = function(ex) {
[08:25:00.359]                       msg <- conditionMessage(ex)
[08:25:00.359]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.359]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:00.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.359]                         fi_tmp[["mtime"]], msg)
[08:25:00.359]                       ex$message <- msg
[08:25:00.359]                       stop(ex)
[08:25:00.359]                     })
[08:25:00.359]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:00.359]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:00.359]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:00.359]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.359]                       fi <- file.info(pathname)
[08:25:00.359]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:00.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.359]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:00.359]                         fi[["size"]], fi[["mtime"]])
[08:25:00.359]                       stop(msg)
[08:25:00.359]                     }
[08:25:00.359]                     invisible(pathname)
[08:25:00.359]                   }
[08:25:00.359]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:00.359]                     rootPath = tempdir()) 
[08:25:00.359]                   {
[08:25:00.359]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:00.359]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:00.359]                       tmpdir = path, fileext = ".rds")
[08:25:00.359]                     save_rds(obj, file)
[08:25:00.359]                   }
[08:25:00.359]                   saveImmediateCondition(cond, path = "/tmp/RtmpC5owVr/.future/immediateConditions")
[08:25:00.359]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.359]                   {
[08:25:00.359]                     inherits <- base::inherits
[08:25:00.359]                     invokeRestart <- base::invokeRestart
[08:25:00.359]                     is.null <- base::is.null
[08:25:00.359]                     muffled <- FALSE
[08:25:00.359]                     if (inherits(cond, "message")) {
[08:25:00.359]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:00.359]                       if (muffled) 
[08:25:00.359]                         invokeRestart("muffleMessage")
[08:25:00.359]                     }
[08:25:00.359]                     else if (inherits(cond, "warning")) {
[08:25:00.359]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:00.359]                       if (muffled) 
[08:25:00.359]                         invokeRestart("muffleWarning")
[08:25:00.359]                     }
[08:25:00.359]                     else if (inherits(cond, "condition")) {
[08:25:00.359]                       if (!is.null(pattern)) {
[08:25:00.359]                         computeRestarts <- base::computeRestarts
[08:25:00.359]                         grepl <- base::grepl
[08:25:00.359]                         restarts <- computeRestarts(cond)
[08:25:00.359]                         for (restart in restarts) {
[08:25:00.359]                           name <- restart$name
[08:25:00.359]                           if (is.null(name)) 
[08:25:00.359]                             next
[08:25:00.359]                           if (!grepl(pattern, name)) 
[08:25:00.359]                             next
[08:25:00.359]                           invokeRestart(restart)
[08:25:00.359]                           muffled <- TRUE
[08:25:00.359]                           break
[08:25:00.359]                         }
[08:25:00.359]                       }
[08:25:00.359]                     }
[08:25:00.359]                     invisible(muffled)
[08:25:00.359]                   }
[08:25:00.359]                   muffleCondition(cond)
[08:25:00.359]                 })
[08:25:00.359]             }))
[08:25:00.359]             future::FutureResult(value = ...future.value$value, 
[08:25:00.359]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.359]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.359]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.359]                     ...future.globalenv.names))
[08:25:00.359]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.359]         }, condition = base::local({
[08:25:00.359]             c <- base::c
[08:25:00.359]             inherits <- base::inherits
[08:25:00.359]             invokeRestart <- base::invokeRestart
[08:25:00.359]             length <- base::length
[08:25:00.359]             list <- base::list
[08:25:00.359]             seq.int <- base::seq.int
[08:25:00.359]             signalCondition <- base::signalCondition
[08:25:00.359]             sys.calls <- base::sys.calls
[08:25:00.359]             `[[` <- base::`[[`
[08:25:00.359]             `+` <- base::`+`
[08:25:00.359]             `<<-` <- base::`<<-`
[08:25:00.359]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.359]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.359]                   3L)]
[08:25:00.359]             }
[08:25:00.359]             function(cond) {
[08:25:00.359]                 is_error <- inherits(cond, "error")
[08:25:00.359]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.359]                   NULL)
[08:25:00.359]                 if (is_error) {
[08:25:00.359]                   sessionInformation <- function() {
[08:25:00.359]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.359]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.359]                       search = base::search(), system = base::Sys.info())
[08:25:00.359]                   }
[08:25:00.359]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.359]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.359]                     cond$call), session = sessionInformation(), 
[08:25:00.359]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.359]                   signalCondition(cond)
[08:25:00.359]                 }
[08:25:00.359]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.359]                 "immediateCondition"))) {
[08:25:00.359]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.359]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.359]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.359]                   if (TRUE && !signal) {
[08:25:00.359]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.359]                     {
[08:25:00.359]                       inherits <- base::inherits
[08:25:00.359]                       invokeRestart <- base::invokeRestart
[08:25:00.359]                       is.null <- base::is.null
[08:25:00.359]                       muffled <- FALSE
[08:25:00.359]                       if (inherits(cond, "message")) {
[08:25:00.359]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.359]                         if (muffled) 
[08:25:00.359]                           invokeRestart("muffleMessage")
[08:25:00.359]                       }
[08:25:00.359]                       else if (inherits(cond, "warning")) {
[08:25:00.359]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.359]                         if (muffled) 
[08:25:00.359]                           invokeRestart("muffleWarning")
[08:25:00.359]                       }
[08:25:00.359]                       else if (inherits(cond, "condition")) {
[08:25:00.359]                         if (!is.null(pattern)) {
[08:25:00.359]                           computeRestarts <- base::computeRestarts
[08:25:00.359]                           grepl <- base::grepl
[08:25:00.359]                           restarts <- computeRestarts(cond)
[08:25:00.359]                           for (restart in restarts) {
[08:25:00.359]                             name <- restart$name
[08:25:00.359]                             if (is.null(name)) 
[08:25:00.359]                               next
[08:25:00.359]                             if (!grepl(pattern, name)) 
[08:25:00.359]                               next
[08:25:00.359]                             invokeRestart(restart)
[08:25:00.359]                             muffled <- TRUE
[08:25:00.359]                             break
[08:25:00.359]                           }
[08:25:00.359]                         }
[08:25:00.359]                       }
[08:25:00.359]                       invisible(muffled)
[08:25:00.359]                     }
[08:25:00.359]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.359]                   }
[08:25:00.359]                 }
[08:25:00.359]                 else {
[08:25:00.359]                   if (TRUE) {
[08:25:00.359]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.359]                     {
[08:25:00.359]                       inherits <- base::inherits
[08:25:00.359]                       invokeRestart <- base::invokeRestart
[08:25:00.359]                       is.null <- base::is.null
[08:25:00.359]                       muffled <- FALSE
[08:25:00.359]                       if (inherits(cond, "message")) {
[08:25:00.359]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.359]                         if (muffled) 
[08:25:00.359]                           invokeRestart("muffleMessage")
[08:25:00.359]                       }
[08:25:00.359]                       else if (inherits(cond, "warning")) {
[08:25:00.359]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.359]                         if (muffled) 
[08:25:00.359]                           invokeRestart("muffleWarning")
[08:25:00.359]                       }
[08:25:00.359]                       else if (inherits(cond, "condition")) {
[08:25:00.359]                         if (!is.null(pattern)) {
[08:25:00.359]                           computeRestarts <- base::computeRestarts
[08:25:00.359]                           grepl <- base::grepl
[08:25:00.359]                           restarts <- computeRestarts(cond)
[08:25:00.359]                           for (restart in restarts) {
[08:25:00.359]                             name <- restart$name
[08:25:00.359]                             if (is.null(name)) 
[08:25:00.359]                               next
[08:25:00.359]                             if (!grepl(pattern, name)) 
[08:25:00.359]                               next
[08:25:00.359]                             invokeRestart(restart)
[08:25:00.359]                             muffled <- TRUE
[08:25:00.359]                             break
[08:25:00.359]                           }
[08:25:00.359]                         }
[08:25:00.359]                       }
[08:25:00.359]                       invisible(muffled)
[08:25:00.359]                     }
[08:25:00.359]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.359]                   }
[08:25:00.359]                 }
[08:25:00.359]             }
[08:25:00.359]         }))
[08:25:00.359]     }, error = function(ex) {
[08:25:00.359]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.359]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.359]                 ...future.rng), started = ...future.startTime, 
[08:25:00.359]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.359]             version = "1.8"), class = "FutureResult")
[08:25:00.359]     }, finally = {
[08:25:00.359]         if (!identical(...future.workdir, getwd())) 
[08:25:00.359]             setwd(...future.workdir)
[08:25:00.359]         {
[08:25:00.359]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.359]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.359]             }
[08:25:00.359]             base::options(...future.oldOptions)
[08:25:00.359]             if (.Platform$OS.type == "windows") {
[08:25:00.359]                 old_names <- names(...future.oldEnvVars)
[08:25:00.359]                 envs <- base::Sys.getenv()
[08:25:00.359]                 names <- names(envs)
[08:25:00.359]                 common <- intersect(names, old_names)
[08:25:00.359]                 added <- setdiff(names, old_names)
[08:25:00.359]                 removed <- setdiff(old_names, names)
[08:25:00.359]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.359]                   envs[common]]
[08:25:00.359]                 NAMES <- toupper(changed)
[08:25:00.359]                 args <- list()
[08:25:00.359]                 for (kk in seq_along(NAMES)) {
[08:25:00.359]                   name <- changed[[kk]]
[08:25:00.359]                   NAME <- NAMES[[kk]]
[08:25:00.359]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.359]                     next
[08:25:00.359]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.359]                 }
[08:25:00.359]                 NAMES <- toupper(added)
[08:25:00.359]                 for (kk in seq_along(NAMES)) {
[08:25:00.359]                   name <- added[[kk]]
[08:25:00.359]                   NAME <- NAMES[[kk]]
[08:25:00.359]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.359]                     next
[08:25:00.359]                   args[[name]] <- ""
[08:25:00.359]                 }
[08:25:00.359]                 NAMES <- toupper(removed)
[08:25:00.359]                 for (kk in seq_along(NAMES)) {
[08:25:00.359]                   name <- removed[[kk]]
[08:25:00.359]                   NAME <- NAMES[[kk]]
[08:25:00.359]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.359]                     next
[08:25:00.359]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.359]                 }
[08:25:00.359]                 if (length(args) > 0) 
[08:25:00.359]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.359]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.359]             }
[08:25:00.359]             else {
[08:25:00.359]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.359]             }
[08:25:00.359]             {
[08:25:00.359]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.359]                   0L) {
[08:25:00.359]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.359]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.359]                   base::options(opts)
[08:25:00.359]                 }
[08:25:00.359]                 {
[08:25:00.359]                   {
[08:25:00.359]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:00.359]                     NULL
[08:25:00.359]                   }
[08:25:00.359]                   options(future.plan = NULL)
[08:25:00.359]                   if (is.na(NA_character_)) 
[08:25:00.359]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.359]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.359]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.359]                     .init = FALSE)
[08:25:00.359]                 }
[08:25:00.359]             }
[08:25:00.359]         }
[08:25:00.359]     })
[08:25:00.359]     if (TRUE) {
[08:25:00.359]         base::sink(type = "output", split = FALSE)
[08:25:00.359]         if (TRUE) {
[08:25:00.359]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.359]         }
[08:25:00.359]         else {
[08:25:00.359]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.359]         }
[08:25:00.359]         base::close(...future.stdout)
[08:25:00.359]         ...future.stdout <- NULL
[08:25:00.359]     }
[08:25:00.359]     ...future.result$conditions <- ...future.conditions
[08:25:00.359]     ...future.result$finished <- base::Sys.time()
[08:25:00.359]     ...future.result
[08:25:00.359] }
[08:25:00.362] assign_globals() ...
[08:25:00.362] List of 5
[08:25:00.362]  $ ...future.FUN            :function (x, ...)  
[08:25:00.362]  $ future.call.arguments    :List of 1
[08:25:00.362]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:00.362]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.362]  $ ...future.elements_ii    :List of 1
[08:25:00.362]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[08:25:00.362]  $ ...future.seeds_ii       : NULL
[08:25:00.362]  $ ...future.globals.maxSize: NULL
[08:25:00.362]  - attr(*, "where")=List of 5
[08:25:00.362]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.362]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.362]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.362]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.362]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.362]  - attr(*, "resolved")= logi FALSE
[08:25:00.362]  - attr(*, "total_size")= num 6525
[08:25:00.362]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.362]  - attr(*, "already-done")= logi TRUE
[08:25:00.367] - copied ‘...future.FUN’ to environment
[08:25:00.368] - copied ‘future.call.arguments’ to environment
[08:25:00.368] - copied ‘...future.elements_ii’ to environment
[08:25:00.368] - copied ‘...future.seeds_ii’ to environment
[08:25:00.368] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.368] assign_globals() ... done
[08:25:00.368] requestCore(): workers = 2
[08:25:00.370] MulticoreFuture started
[08:25:00.371] - Launch lazy future ... done
[08:25:00.371] run() for ‘MulticoreFuture’ ... done
[08:25:00.371] Created future:
[08:25:00.372] plan(): Setting new future strategy stack:
[08:25:00.372] List of future strategies:
[08:25:00.372] 1. sequential:
[08:25:00.372]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.372]    - tweaked: FALSE
[08:25:00.372]    - call: NULL
[08:25:00.373] plan(): nbrOfWorkers() = 1
[08:25:00.376] plan(): Setting new future strategy stack:
[08:25:00.376] List of future strategies:
[08:25:00.376] 1. multicore:
[08:25:00.376]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.376]    - tweaked: FALSE
[08:25:00.376]    - call: plan(strategy)
[08:25:00.383] plan(): nbrOfWorkers() = 2
[08:25:00.371] MulticoreFuture:
[08:25:00.371] Label: ‘future_eapply-1’
[08:25:00.371] Expression:
[08:25:00.371] {
[08:25:00.371]     do.call(function(...) {
[08:25:00.371]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.371]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.371]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.371]             on.exit(options(oopts), add = TRUE)
[08:25:00.371]         }
[08:25:00.371]         {
[08:25:00.371]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.371]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.371]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.371]             })
[08:25:00.371]         }
[08:25:00.371]     }, args = future.call.arguments)
[08:25:00.371] }
[08:25:00.371] Lazy evaluation: FALSE
[08:25:00.371] Asynchronous evaluation: TRUE
[08:25:00.371] Local evaluation: TRUE
[08:25:00.371] Environment: R_GlobalEnv
[08:25:00.371] Capture standard output: TRUE
[08:25:00.371] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.371] Globals: 5 objects totaling 637 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.371] Packages: 1 packages (‘stats’)
[08:25:00.371] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.371] Resolved: TRUE
[08:25:00.371] Value: <not collected>
[08:25:00.371] Conditions captured: <none>
[08:25:00.371] Early signaling: FALSE
[08:25:00.371] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.371] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.384] Chunk #1 of 2 ... DONE
[08:25:00.384] Chunk #2 of 2 ...
[08:25:00.384]  - Finding globals in 'X' for chunk #2 ...
[08:25:00.384] getGlobalsAndPackages() ...
[08:25:00.385] Searching for globals...
[08:25:00.385] 
[08:25:00.385] Searching for globals ... DONE
[08:25:00.385] - globals: [0] <none>
[08:25:00.388] getGlobalsAndPackages() ... DONE
[08:25:00.388]    + additional globals found: [n=0] 
[08:25:00.388]    + additional namespaces needed: [n=0] 
[08:25:00.388]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:00.388]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:00.389]  - seeds: <none>
[08:25:00.389]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.389] getGlobalsAndPackages() ...
[08:25:00.389] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.389] Resolving globals: FALSE
[08:25:00.389] Tweak future expression to call with '...' arguments ...
[08:25:00.390] {
[08:25:00.390]     do.call(function(...) {
[08:25:00.390]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.390]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.390]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.390]             on.exit(options(oopts), add = TRUE)
[08:25:00.390]         }
[08:25:00.390]         {
[08:25:00.390]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.390]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.390]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.390]             })
[08:25:00.390]         }
[08:25:00.390]     }, args = future.call.arguments)
[08:25:00.390] }
[08:25:00.390] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.391] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.391] - packages: [1] ‘stats’
[08:25:00.392] getGlobalsAndPackages() ... DONE
[08:25:00.392] run() for ‘Future’ ...
[08:25:00.392] - state: ‘created’
[08:25:00.393] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:00.395] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.396] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:00.396]   - Field: ‘label’
[08:25:00.396]   - Field: ‘local’
[08:25:00.396]   - Field: ‘owner’
[08:25:00.396]   - Field: ‘envir’
[08:25:00.396]   - Field: ‘workers’
[08:25:00.397]   - Field: ‘packages’
[08:25:00.397]   - Field: ‘gc’
[08:25:00.397]   - Field: ‘job’
[08:25:00.397]   - Field: ‘conditions’
[08:25:00.397]   - Field: ‘expr’
[08:25:00.397]   - Field: ‘uuid’
[08:25:00.398]   - Field: ‘seed’
[08:25:00.398]   - Field: ‘version’
[08:25:00.398]   - Field: ‘result’
[08:25:00.398]   - Field: ‘asynchronous’
[08:25:00.398]   - Field: ‘calls’
[08:25:00.398]   - Field: ‘globals’
[08:25:00.398]   - Field: ‘stdout’
[08:25:00.399]   - Field: ‘earlySignal’
[08:25:00.399]   - Field: ‘lazy’
[08:25:00.399]   - Field: ‘state’
[08:25:00.399] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:00.399] - Launch lazy future ...
[08:25:00.400] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.400] Packages needed by future strategies (n = 0): <none>
[08:25:00.401] {
[08:25:00.401]     {
[08:25:00.401]         {
[08:25:00.401]             ...future.startTime <- base::Sys.time()
[08:25:00.401]             {
[08:25:00.401]                 {
[08:25:00.401]                   {
[08:25:00.401]                     {
[08:25:00.401]                       {
[08:25:00.401]                         base::local({
[08:25:00.401]                           has_future <- base::requireNamespace("future", 
[08:25:00.401]                             quietly = TRUE)
[08:25:00.401]                           if (has_future) {
[08:25:00.401]                             ns <- base::getNamespace("future")
[08:25:00.401]                             version <- ns[[".package"]][["version"]]
[08:25:00.401]                             if (is.null(version)) 
[08:25:00.401]                               version <- utils::packageVersion("future")
[08:25:00.401]                           }
[08:25:00.401]                           else {
[08:25:00.401]                             version <- NULL
[08:25:00.401]                           }
[08:25:00.401]                           if (!has_future || version < "1.8.0") {
[08:25:00.401]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.401]                               "", base::R.version$version.string), 
[08:25:00.401]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:00.401]                                 base::R.version$platform, 8 * 
[08:25:00.401]                                   base::.Machine$sizeof.pointer), 
[08:25:00.401]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.401]                                 "release", "version")], collapse = " "), 
[08:25:00.401]                               hostname = base::Sys.info()[["nodename"]])
[08:25:00.401]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.401]                               info)
[08:25:00.401]                             info <- base::paste(info, collapse = "; ")
[08:25:00.401]                             if (!has_future) {
[08:25:00.401]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.401]                                 info)
[08:25:00.401]                             }
[08:25:00.401]                             else {
[08:25:00.401]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.401]                                 info, version)
[08:25:00.401]                             }
[08:25:00.401]                             base::stop(msg)
[08:25:00.401]                           }
[08:25:00.401]                         })
[08:25:00.401]                       }
[08:25:00.401]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:00.401]                       base::options(mc.cores = 1L)
[08:25:00.401]                     }
[08:25:00.401]                     base::local({
[08:25:00.401]                       for (pkg in "stats") {
[08:25:00.401]                         base::loadNamespace(pkg)
[08:25:00.401]                         base::library(pkg, character.only = TRUE)
[08:25:00.401]                       }
[08:25:00.401]                     })
[08:25:00.401]                   }
[08:25:00.401]                   ...future.strategy.old <- future::plan("list")
[08:25:00.401]                   options(future.plan = NULL)
[08:25:00.401]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.401]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.401]                 }
[08:25:00.401]                 ...future.workdir <- getwd()
[08:25:00.401]             }
[08:25:00.401]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.401]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.401]         }
[08:25:00.401]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.401]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:00.401]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.401]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.401]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.401]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.401]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.401]             base::names(...future.oldOptions))
[08:25:00.401]     }
[08:25:00.401]     if (FALSE) {
[08:25:00.401]     }
[08:25:00.401]     else {
[08:25:00.401]         if (TRUE) {
[08:25:00.401]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.401]                 open = "w")
[08:25:00.401]         }
[08:25:00.401]         else {
[08:25:00.401]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.401]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.401]         }
[08:25:00.401]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.401]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.401]             base::sink(type = "output", split = FALSE)
[08:25:00.401]             base::close(...future.stdout)
[08:25:00.401]         }, add = TRUE)
[08:25:00.401]     }
[08:25:00.401]     ...future.frame <- base::sys.nframe()
[08:25:00.401]     ...future.conditions <- base::list()
[08:25:00.401]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.401]     if (FALSE) {
[08:25:00.401]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.401]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.401]     }
[08:25:00.401]     ...future.result <- base::tryCatch({
[08:25:00.401]         base::withCallingHandlers({
[08:25:00.401]             ...future.value <- base::withVisible(base::local({
[08:25:00.401]                 withCallingHandlers({
[08:25:00.401]                   {
[08:25:00.401]                     do.call(function(...) {
[08:25:00.401]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.401]                       if (!identical(...future.globals.maxSize.org, 
[08:25:00.401]                         ...future.globals.maxSize)) {
[08:25:00.401]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.401]                         on.exit(options(oopts), add = TRUE)
[08:25:00.401]                       }
[08:25:00.401]                       {
[08:25:00.401]                         lapply(seq_along(...future.elements_ii), 
[08:25:00.401]                           FUN = function(jj) {
[08:25:00.401]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.401]                             ...future.FUN(...future.X_jj, ...)
[08:25:00.401]                           })
[08:25:00.401]                       }
[08:25:00.401]                     }, args = future.call.arguments)
[08:25:00.401]                   }
[08:25:00.401]                 }, immediateCondition = function(cond) {
[08:25:00.401]                   save_rds <- function (object, pathname, ...) 
[08:25:00.401]                   {
[08:25:00.401]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:00.401]                     if (file_test("-f", pathname_tmp)) {
[08:25:00.401]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.401]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:00.401]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.401]                         fi_tmp[["mtime"]])
[08:25:00.401]                     }
[08:25:00.401]                     tryCatch({
[08:25:00.401]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:00.401]                     }, error = function(ex) {
[08:25:00.401]                       msg <- conditionMessage(ex)
[08:25:00.401]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.401]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:00.401]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.401]                         fi_tmp[["mtime"]], msg)
[08:25:00.401]                       ex$message <- msg
[08:25:00.401]                       stop(ex)
[08:25:00.401]                     })
[08:25:00.401]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:00.401]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:00.401]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:00.401]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.401]                       fi <- file.info(pathname)
[08:25:00.401]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:00.401]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.401]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:00.401]                         fi[["size"]], fi[["mtime"]])
[08:25:00.401]                       stop(msg)
[08:25:00.401]                     }
[08:25:00.401]                     invisible(pathname)
[08:25:00.401]                   }
[08:25:00.401]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:00.401]                     rootPath = tempdir()) 
[08:25:00.401]                   {
[08:25:00.401]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:00.401]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:00.401]                       tmpdir = path, fileext = ".rds")
[08:25:00.401]                     save_rds(obj, file)
[08:25:00.401]                   }
[08:25:00.401]                   saveImmediateCondition(cond, path = "/tmp/RtmpC5owVr/.future/immediateConditions")
[08:25:00.401]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.401]                   {
[08:25:00.401]                     inherits <- base::inherits
[08:25:00.401]                     invokeRestart <- base::invokeRestart
[08:25:00.401]                     is.null <- base::is.null
[08:25:00.401]                     muffled <- FALSE
[08:25:00.401]                     if (inherits(cond, "message")) {
[08:25:00.401]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:00.401]                       if (muffled) 
[08:25:00.401]                         invokeRestart("muffleMessage")
[08:25:00.401]                     }
[08:25:00.401]                     else if (inherits(cond, "warning")) {
[08:25:00.401]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:00.401]                       if (muffled) 
[08:25:00.401]                         invokeRestart("muffleWarning")
[08:25:00.401]                     }
[08:25:00.401]                     else if (inherits(cond, "condition")) {
[08:25:00.401]                       if (!is.null(pattern)) {
[08:25:00.401]                         computeRestarts <- base::computeRestarts
[08:25:00.401]                         grepl <- base::grepl
[08:25:00.401]                         restarts <- computeRestarts(cond)
[08:25:00.401]                         for (restart in restarts) {
[08:25:00.401]                           name <- restart$name
[08:25:00.401]                           if (is.null(name)) 
[08:25:00.401]                             next
[08:25:00.401]                           if (!grepl(pattern, name)) 
[08:25:00.401]                             next
[08:25:00.401]                           invokeRestart(restart)
[08:25:00.401]                           muffled <- TRUE
[08:25:00.401]                           break
[08:25:00.401]                         }
[08:25:00.401]                       }
[08:25:00.401]                     }
[08:25:00.401]                     invisible(muffled)
[08:25:00.401]                   }
[08:25:00.401]                   muffleCondition(cond)
[08:25:00.401]                 })
[08:25:00.401]             }))
[08:25:00.401]             future::FutureResult(value = ...future.value$value, 
[08:25:00.401]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.401]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.401]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.401]                     ...future.globalenv.names))
[08:25:00.401]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.401]         }, condition = base::local({
[08:25:00.401]             c <- base::c
[08:25:00.401]             inherits <- base::inherits
[08:25:00.401]             invokeRestart <- base::invokeRestart
[08:25:00.401]             length <- base::length
[08:25:00.401]             list <- base::list
[08:25:00.401]             seq.int <- base::seq.int
[08:25:00.401]             signalCondition <- base::signalCondition
[08:25:00.401]             sys.calls <- base::sys.calls
[08:25:00.401]             `[[` <- base::`[[`
[08:25:00.401]             `+` <- base::`+`
[08:25:00.401]             `<<-` <- base::`<<-`
[08:25:00.401]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.401]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.401]                   3L)]
[08:25:00.401]             }
[08:25:00.401]             function(cond) {
[08:25:00.401]                 is_error <- inherits(cond, "error")
[08:25:00.401]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.401]                   NULL)
[08:25:00.401]                 if (is_error) {
[08:25:00.401]                   sessionInformation <- function() {
[08:25:00.401]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.401]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.401]                       search = base::search(), system = base::Sys.info())
[08:25:00.401]                   }
[08:25:00.401]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.401]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.401]                     cond$call), session = sessionInformation(), 
[08:25:00.401]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.401]                   signalCondition(cond)
[08:25:00.401]                 }
[08:25:00.401]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.401]                 "immediateCondition"))) {
[08:25:00.401]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.401]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.401]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.401]                   if (TRUE && !signal) {
[08:25:00.401]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.401]                     {
[08:25:00.401]                       inherits <- base::inherits
[08:25:00.401]                       invokeRestart <- base::invokeRestart
[08:25:00.401]                       is.null <- base::is.null
[08:25:00.401]                       muffled <- FALSE
[08:25:00.401]                       if (inherits(cond, "message")) {
[08:25:00.401]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.401]                         if (muffled) 
[08:25:00.401]                           invokeRestart("muffleMessage")
[08:25:00.401]                       }
[08:25:00.401]                       else if (inherits(cond, "warning")) {
[08:25:00.401]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.401]                         if (muffled) 
[08:25:00.401]                           invokeRestart("muffleWarning")
[08:25:00.401]                       }
[08:25:00.401]                       else if (inherits(cond, "condition")) {
[08:25:00.401]                         if (!is.null(pattern)) {
[08:25:00.401]                           computeRestarts <- base::computeRestarts
[08:25:00.401]                           grepl <- base::grepl
[08:25:00.401]                           restarts <- computeRestarts(cond)
[08:25:00.401]                           for (restart in restarts) {
[08:25:00.401]                             name <- restart$name
[08:25:00.401]                             if (is.null(name)) 
[08:25:00.401]                               next
[08:25:00.401]                             if (!grepl(pattern, name)) 
[08:25:00.401]                               next
[08:25:00.401]                             invokeRestart(restart)
[08:25:00.401]                             muffled <- TRUE
[08:25:00.401]                             break
[08:25:00.401]                           }
[08:25:00.401]                         }
[08:25:00.401]                       }
[08:25:00.401]                       invisible(muffled)
[08:25:00.401]                     }
[08:25:00.401]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.401]                   }
[08:25:00.401]                 }
[08:25:00.401]                 else {
[08:25:00.401]                   if (TRUE) {
[08:25:00.401]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.401]                     {
[08:25:00.401]                       inherits <- base::inherits
[08:25:00.401]                       invokeRestart <- base::invokeRestart
[08:25:00.401]                       is.null <- base::is.null
[08:25:00.401]                       muffled <- FALSE
[08:25:00.401]                       if (inherits(cond, "message")) {
[08:25:00.401]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.401]                         if (muffled) 
[08:25:00.401]                           invokeRestart("muffleMessage")
[08:25:00.401]                       }
[08:25:00.401]                       else if (inherits(cond, "warning")) {
[08:25:00.401]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.401]                         if (muffled) 
[08:25:00.401]                           invokeRestart("muffleWarning")
[08:25:00.401]                       }
[08:25:00.401]                       else if (inherits(cond, "condition")) {
[08:25:00.401]                         if (!is.null(pattern)) {
[08:25:00.401]                           computeRestarts <- base::computeRestarts
[08:25:00.401]                           grepl <- base::grepl
[08:25:00.401]                           restarts <- computeRestarts(cond)
[08:25:00.401]                           for (restart in restarts) {
[08:25:00.401]                             name <- restart$name
[08:25:00.401]                             if (is.null(name)) 
[08:25:00.401]                               next
[08:25:00.401]                             if (!grepl(pattern, name)) 
[08:25:00.401]                               next
[08:25:00.401]                             invokeRestart(restart)
[08:25:00.401]                             muffled <- TRUE
[08:25:00.401]                             break
[08:25:00.401]                           }
[08:25:00.401]                         }
[08:25:00.401]                       }
[08:25:00.401]                       invisible(muffled)
[08:25:00.401]                     }
[08:25:00.401]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.401]                   }
[08:25:00.401]                 }
[08:25:00.401]             }
[08:25:00.401]         }))
[08:25:00.401]     }, error = function(ex) {
[08:25:00.401]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.401]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.401]                 ...future.rng), started = ...future.startTime, 
[08:25:00.401]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.401]             version = "1.8"), class = "FutureResult")
[08:25:00.401]     }, finally = {
[08:25:00.401]         if (!identical(...future.workdir, getwd())) 
[08:25:00.401]             setwd(...future.workdir)
[08:25:00.401]         {
[08:25:00.401]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.401]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.401]             }
[08:25:00.401]             base::options(...future.oldOptions)
[08:25:00.401]             if (.Platform$OS.type == "windows") {
[08:25:00.401]                 old_names <- names(...future.oldEnvVars)
[08:25:00.401]                 envs <- base::Sys.getenv()
[08:25:00.401]                 names <- names(envs)
[08:25:00.401]                 common <- intersect(names, old_names)
[08:25:00.401]                 added <- setdiff(names, old_names)
[08:25:00.401]                 removed <- setdiff(old_names, names)
[08:25:00.401]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.401]                   envs[common]]
[08:25:00.401]                 NAMES <- toupper(changed)
[08:25:00.401]                 args <- list()
[08:25:00.401]                 for (kk in seq_along(NAMES)) {
[08:25:00.401]                   name <- changed[[kk]]
[08:25:00.401]                   NAME <- NAMES[[kk]]
[08:25:00.401]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.401]                     next
[08:25:00.401]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.401]                 }
[08:25:00.401]                 NAMES <- toupper(added)
[08:25:00.401]                 for (kk in seq_along(NAMES)) {
[08:25:00.401]                   name <- added[[kk]]
[08:25:00.401]                   NAME <- NAMES[[kk]]
[08:25:00.401]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.401]                     next
[08:25:00.401]                   args[[name]] <- ""
[08:25:00.401]                 }
[08:25:00.401]                 NAMES <- toupper(removed)
[08:25:00.401]                 for (kk in seq_along(NAMES)) {
[08:25:00.401]                   name <- removed[[kk]]
[08:25:00.401]                   NAME <- NAMES[[kk]]
[08:25:00.401]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.401]                     next
[08:25:00.401]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.401]                 }
[08:25:00.401]                 if (length(args) > 0) 
[08:25:00.401]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.401]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.401]             }
[08:25:00.401]             else {
[08:25:00.401]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.401]             }
[08:25:00.401]             {
[08:25:00.401]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.401]                   0L) {
[08:25:00.401]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.401]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.401]                   base::options(opts)
[08:25:00.401]                 }
[08:25:00.401]                 {
[08:25:00.401]                   {
[08:25:00.401]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:00.401]                     NULL
[08:25:00.401]                   }
[08:25:00.401]                   options(future.plan = NULL)
[08:25:00.401]                   if (is.na(NA_character_)) 
[08:25:00.401]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.401]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.401]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.401]                     .init = FALSE)
[08:25:00.401]                 }
[08:25:00.401]             }
[08:25:00.401]         }
[08:25:00.401]     })
[08:25:00.401]     if (TRUE) {
[08:25:00.401]         base::sink(type = "output", split = FALSE)
[08:25:00.401]         if (TRUE) {
[08:25:00.401]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.401]         }
[08:25:00.401]         else {
[08:25:00.401]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.401]         }
[08:25:00.401]         base::close(...future.stdout)
[08:25:00.401]         ...future.stdout <- NULL
[08:25:00.401]     }
[08:25:00.401]     ...future.result$conditions <- ...future.conditions
[08:25:00.401]     ...future.result$finished <- base::Sys.time()
[08:25:00.401]     ...future.result
[08:25:00.401] }
[08:25:00.403] assign_globals() ...
[08:25:00.404] List of 5
[08:25:00.404]  $ ...future.FUN            :function (x, ...)  
[08:25:00.404]  $ future.call.arguments    :List of 1
[08:25:00.404]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:00.404]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.404]  $ ...future.elements_ii    :List of 2
[08:25:00.404]   ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[08:25:00.404]   ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[08:25:00.404]  $ ...future.seeds_ii       : NULL
[08:25:00.404]  $ ...future.globals.maxSize: NULL
[08:25:00.404]  - attr(*, "where")=List of 5
[08:25:00.404]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.404]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.404]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.404]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.404]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.404]  - attr(*, "resolved")= logi FALSE
[08:25:00.404]  - attr(*, "total_size")= num 6525
[08:25:00.404]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.404]  - attr(*, "already-done")= logi TRUE
[08:25:00.412] - copied ‘...future.FUN’ to environment
[08:25:00.412] - copied ‘future.call.arguments’ to environment
[08:25:00.412] - copied ‘...future.elements_ii’ to environment
[08:25:00.412] - copied ‘...future.seeds_ii’ to environment
[08:25:00.412] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.412] assign_globals() ... done
[08:25:00.412] requestCore(): workers = 2
[08:25:00.415] MulticoreFuture started
[08:25:00.415] - Launch lazy future ... done
[08:25:00.415] run() for ‘MulticoreFuture’ ... done
[08:25:00.416] Created future:
[08:25:00.416] plan(): Setting new future strategy stack:
[08:25:00.417] List of future strategies:
[08:25:00.417] 1. sequential:
[08:25:00.417]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.417]    - tweaked: FALSE
[08:25:00.417]    - call: NULL
[08:25:00.418] plan(): nbrOfWorkers() = 1
[08:25:00.420] plan(): Setting new future strategy stack:
[08:25:00.420] List of future strategies:
[08:25:00.420] 1. multicore:
[08:25:00.420]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.420]    - tweaked: FALSE
[08:25:00.420]    - call: plan(strategy)
[08:25:00.424] plan(): nbrOfWorkers() = 2
[08:25:00.416] MulticoreFuture:
[08:25:00.416] Label: ‘future_eapply-2’
[08:25:00.416] Expression:
[08:25:00.416] {
[08:25:00.416]     do.call(function(...) {
[08:25:00.416]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.416]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.416]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.416]             on.exit(options(oopts), add = TRUE)
[08:25:00.416]         }
[08:25:00.416]         {
[08:25:00.416]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.416]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.416]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.416]             })
[08:25:00.416]         }
[08:25:00.416]     }, args = future.call.arguments)
[08:25:00.416] }
[08:25:00.416] Lazy evaluation: FALSE
[08:25:00.416] Asynchronous evaluation: TRUE
[08:25:00.416] Local evaluation: TRUE
[08:25:00.416] Environment: R_GlobalEnv
[08:25:00.416] Capture standard output: TRUE
[08:25:00.416] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.416] Globals: 5 objects totaling 795 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.416] Packages: 1 packages (‘stats’)
[08:25:00.416] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.416] Resolved: TRUE
[08:25:00.416] Value: <not collected>
[08:25:00.416] Conditions captured: <none>
[08:25:00.416] Early signaling: FALSE
[08:25:00.416] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.416] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.425] Chunk #2 of 2 ... DONE
[08:25:00.425] Launching 2 futures (chunks) ... DONE
[08:25:00.425] Resolving 2 futures (chunks) ...
[08:25:00.425] resolve() on list ...
[08:25:00.425]  recursive: 0
[08:25:00.425]  length: 2
[08:25:00.425] 
[08:25:00.426] Future #1
[08:25:00.426] result() for MulticoreFuture ...
[08:25:00.427] result() for MulticoreFuture ...
[08:25:00.427] result() for MulticoreFuture ... done
[08:25:00.427] result() for MulticoreFuture ... done
[08:25:00.427] result() for MulticoreFuture ...
[08:25:00.427] result() for MulticoreFuture ... done
[08:25:00.428] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:00.428] - nx: 2
[08:25:00.428] - relay: TRUE
[08:25:00.428] - stdout: TRUE
[08:25:00.428] - signal: TRUE
[08:25:00.428] - resignal: FALSE
[08:25:00.428] - force: TRUE
[08:25:00.428] - relayed: [n=2] FALSE, FALSE
[08:25:00.429] - queued futures: [n=2] FALSE, FALSE
[08:25:00.429]  - until=1
[08:25:00.429]  - relaying element #1
[08:25:00.429] result() for MulticoreFuture ...
[08:25:00.429] result() for MulticoreFuture ... done
[08:25:00.429] result() for MulticoreFuture ...
[08:25:00.429] result() for MulticoreFuture ... done
[08:25:00.430] result() for MulticoreFuture ...
[08:25:00.430] result() for MulticoreFuture ... done
[08:25:00.430] result() for MulticoreFuture ...
[08:25:00.430] result() for MulticoreFuture ... done
[08:25:00.430] - relayed: [n=2] TRUE, FALSE
[08:25:00.430] - queued futures: [n=2] TRUE, FALSE
[08:25:00.430] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:00.431]  length: 1 (resolved future 1)
[08:25:00.431] Future #2
[08:25:00.431] result() for MulticoreFuture ...
[08:25:00.432] result() for MulticoreFuture ...
[08:25:00.432] result() for MulticoreFuture ... done
[08:25:00.432] result() for MulticoreFuture ... done
[08:25:00.432] result() for MulticoreFuture ...
[08:25:00.432] result() for MulticoreFuture ... done
[08:25:00.432] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:00.432] - nx: 2
[08:25:00.433] - relay: TRUE
[08:25:00.433] - stdout: TRUE
[08:25:00.433] - signal: TRUE
[08:25:00.433] - resignal: FALSE
[08:25:00.433] - force: TRUE
[08:25:00.433] - relayed: [n=2] TRUE, FALSE
[08:25:00.433] - queued futures: [n=2] TRUE, FALSE
[08:25:00.433]  - until=2
[08:25:00.436]  - relaying element #2
[08:25:00.436] result() for MulticoreFuture ...
[08:25:00.436] result() for MulticoreFuture ... done
[08:25:00.436] result() for MulticoreFuture ...
[08:25:00.436] result() for MulticoreFuture ... done
[08:25:00.437] result() for MulticoreFuture ...
[08:25:00.437] result() for MulticoreFuture ... done
[08:25:00.437] result() for MulticoreFuture ...
[08:25:00.437] result() for MulticoreFuture ... done
[08:25:00.437] - relayed: [n=2] TRUE, TRUE
[08:25:00.437] - queued futures: [n=2] TRUE, TRUE
[08:25:00.437] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:00.437]  length: 0 (resolved future 2)
[08:25:00.438] Relaying remaining futures
[08:25:00.438] signalConditionsASAP(NULL, pos=0) ...
[08:25:00.438] - nx: 2
[08:25:00.438] - relay: TRUE
[08:25:00.438] - stdout: TRUE
[08:25:00.438] - signal: TRUE
[08:25:00.438] - resignal: FALSE
[08:25:00.438] - force: TRUE
[08:25:00.438] - relayed: [n=2] TRUE, TRUE
[08:25:00.439] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:00.439] - relayed: [n=2] TRUE, TRUE
[08:25:00.439] - queued futures: [n=2] TRUE, TRUE
[08:25:00.439] signalConditionsASAP(NULL, pos=0) ... done
[08:25:00.439] resolve() on list ... DONE
[08:25:00.439] result() for MulticoreFuture ...
[08:25:00.439] result() for MulticoreFuture ... done
[08:25:00.440] result() for MulticoreFuture ...
[08:25:00.440] result() for MulticoreFuture ... done
[08:25:00.440] result() for MulticoreFuture ...
[08:25:00.440] result() for MulticoreFuture ... done
[08:25:00.440] result() for MulticoreFuture ...
[08:25:00.440] result() for MulticoreFuture ... done
[08:25:00.440]  - Number of value chunks collected: 2
[08:25:00.440] Resolving 2 futures (chunks) ... DONE
[08:25:00.440] Reducing values from 2 chunks ...
[08:25:00.441]  - Number of values collected after concatenation: 3
[08:25:00.441]  - Number of values expected: 3
[08:25:00.441] Reducing values from 2 chunks ... DONE
[08:25:00.441] future_lapply() ... DONE
[08:25:00.442] future_lapply() ...
[08:25:00.445] Number of chunks: 2
[08:25:00.445] getGlobalsAndPackagesXApply() ...
[08:25:00.445]  - future.globals: TRUE
[08:25:00.445] getGlobalsAndPackages() ...
[08:25:00.445] Searching for globals...
[08:25:00.446] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:00.447] Searching for globals ... DONE
[08:25:00.447] Resolving globals: FALSE
[08:25:00.447] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:00.448] The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:00.448] - globals: [1] ‘FUN’
[08:25:00.448] - packages: [1] ‘stats’
[08:25:00.448] getGlobalsAndPackages() ... DONE
[08:25:00.448]  - globals found/used: [n=1] ‘FUN’
[08:25:00.448]  - needed namespaces: [n=1] ‘stats’
[08:25:00.448] Finding globals ... DONE
[08:25:00.448]  - use_args: TRUE
[08:25:00.449]  - Getting '...' globals ...
[08:25:00.449] resolve() on list ...
[08:25:00.449]  recursive: 0
[08:25:00.449]  length: 1
[08:25:00.449]  elements: ‘...’
[08:25:00.449]  length: 0 (resolved future 1)
[08:25:00.450] resolve() on list ... DONE
[08:25:00.450]    - '...' content: [n=0] 
[08:25:00.450] List of 1
[08:25:00.450]  $ ...: list()
[08:25:00.450]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.450]  - attr(*, "where")=List of 1
[08:25:00.450]   ..$ ...:<environment: 0x5577ead3f0d0> 
[08:25:00.450]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.450]  - attr(*, "resolved")= logi TRUE
[08:25:00.450]  - attr(*, "total_size")= num NA
[08:25:00.453]  - Getting '...' globals ... DONE
[08:25:00.453] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:00.453] List of 2
[08:25:00.453]  $ ...future.FUN:function (x, ...)  
[08:25:00.453]  $ ...          : list()
[08:25:00.453]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.453]  - attr(*, "where")=List of 2
[08:25:00.453]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:00.453]   ..$ ...          :<environment: 0x5577ead3f0d0> 
[08:25:00.453]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.453]  - attr(*, "resolved")= logi FALSE
[08:25:00.453]  - attr(*, "total_size")= num 5433
[08:25:00.456] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:00.456] getGlobalsAndPackagesXApply() ... DONE
[08:25:00.456] Number of futures (= number of chunks): 2
[08:25:00.456] Launching 2 futures (chunks) ...
[08:25:00.456] Chunk #1 of 2 ...
[08:25:00.456]  - Finding globals in 'X' for chunk #1 ...
[08:25:00.457] getGlobalsAndPackages() ...
[08:25:00.457] Searching for globals...
[08:25:00.457] 
[08:25:00.457] Searching for globals ... DONE
[08:25:00.457] - globals: [0] <none>
[08:25:00.457] getGlobalsAndPackages() ... DONE
[08:25:00.457]    + additional globals found: [n=0] 
[08:25:00.457]    + additional namespaces needed: [n=0] 
[08:25:00.457]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:00.457]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:00.458]  - seeds: <none>
[08:25:00.458]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.458] getGlobalsAndPackages() ...
[08:25:00.458] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.458] Resolving globals: FALSE
[08:25:00.458] Tweak future expression to call with '...' arguments ...
[08:25:00.458] {
[08:25:00.458]     do.call(function(...) {
[08:25:00.458]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.458]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.458]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.458]             on.exit(options(oopts), add = TRUE)
[08:25:00.458]         }
[08:25:00.458]         {
[08:25:00.458]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.458]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.458]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.458]             })
[08:25:00.458]         }
[08:25:00.458]     }, args = future.call.arguments)
[08:25:00.458] }
[08:25:00.458] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.459] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.459] - packages: [1] ‘stats’
[08:25:00.459] getGlobalsAndPackages() ... DONE
[08:25:00.459] run() for ‘Future’ ...
[08:25:00.459] - state: ‘created’
[08:25:00.460] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:00.463] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.463] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:00.463]   - Field: ‘label’
[08:25:00.463]   - Field: ‘local’
[08:25:00.463]   - Field: ‘owner’
[08:25:00.463]   - Field: ‘envir’
[08:25:00.464]   - Field: ‘workers’
[08:25:00.464]   - Field: ‘packages’
[08:25:00.464]   - Field: ‘gc’
[08:25:00.464]   - Field: ‘job’
[08:25:00.464]   - Field: ‘conditions’
[08:25:00.464]   - Field: ‘expr’
[08:25:00.464]   - Field: ‘uuid’
[08:25:00.464]   - Field: ‘seed’
[08:25:00.464]   - Field: ‘version’
[08:25:00.464]   - Field: ‘result’
[08:25:00.464]   - Field: ‘asynchronous’
[08:25:00.465]   - Field: ‘calls’
[08:25:00.465]   - Field: ‘globals’
[08:25:00.465]   - Field: ‘stdout’
[08:25:00.465]   - Field: ‘earlySignal’
[08:25:00.465]   - Field: ‘lazy’
[08:25:00.465]   - Field: ‘state’
[08:25:00.465] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:00.465] - Launch lazy future ...
[08:25:00.465] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.466] Packages needed by future strategies (n = 0): <none>
[08:25:00.466] {
[08:25:00.466]     {
[08:25:00.466]         {
[08:25:00.466]             ...future.startTime <- base::Sys.time()
[08:25:00.466]             {
[08:25:00.466]                 {
[08:25:00.466]                   {
[08:25:00.466]                     {
[08:25:00.466]                       {
[08:25:00.466]                         base::local({
[08:25:00.466]                           has_future <- base::requireNamespace("future", 
[08:25:00.466]                             quietly = TRUE)
[08:25:00.466]                           if (has_future) {
[08:25:00.466]                             ns <- base::getNamespace("future")
[08:25:00.466]                             version <- ns[[".package"]][["version"]]
[08:25:00.466]                             if (is.null(version)) 
[08:25:00.466]                               version <- utils::packageVersion("future")
[08:25:00.466]                           }
[08:25:00.466]                           else {
[08:25:00.466]                             version <- NULL
[08:25:00.466]                           }
[08:25:00.466]                           if (!has_future || version < "1.8.0") {
[08:25:00.466]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.466]                               "", base::R.version$version.string), 
[08:25:00.466]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:00.466]                                 base::R.version$platform, 8 * 
[08:25:00.466]                                   base::.Machine$sizeof.pointer), 
[08:25:00.466]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.466]                                 "release", "version")], collapse = " "), 
[08:25:00.466]                               hostname = base::Sys.info()[["nodename"]])
[08:25:00.466]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.466]                               info)
[08:25:00.466]                             info <- base::paste(info, collapse = "; ")
[08:25:00.466]                             if (!has_future) {
[08:25:00.466]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.466]                                 info)
[08:25:00.466]                             }
[08:25:00.466]                             else {
[08:25:00.466]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.466]                                 info, version)
[08:25:00.466]                             }
[08:25:00.466]                             base::stop(msg)
[08:25:00.466]                           }
[08:25:00.466]                         })
[08:25:00.466]                       }
[08:25:00.466]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:00.466]                       base::options(mc.cores = 1L)
[08:25:00.466]                     }
[08:25:00.466]                     base::local({
[08:25:00.466]                       for (pkg in "stats") {
[08:25:00.466]                         base::loadNamespace(pkg)
[08:25:00.466]                         base::library(pkg, character.only = TRUE)
[08:25:00.466]                       }
[08:25:00.466]                     })
[08:25:00.466]                   }
[08:25:00.466]                   ...future.strategy.old <- future::plan("list")
[08:25:00.466]                   options(future.plan = NULL)
[08:25:00.466]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.466]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.466]                 }
[08:25:00.466]                 ...future.workdir <- getwd()
[08:25:00.466]             }
[08:25:00.466]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.466]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.466]         }
[08:25:00.466]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.466]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:00.466]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.466]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.466]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.466]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.466]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.466]             base::names(...future.oldOptions))
[08:25:00.466]     }
[08:25:00.466]     if (FALSE) {
[08:25:00.466]     }
[08:25:00.466]     else {
[08:25:00.466]         if (TRUE) {
[08:25:00.466]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.466]                 open = "w")
[08:25:00.466]         }
[08:25:00.466]         else {
[08:25:00.466]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.466]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.466]         }
[08:25:00.466]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.466]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.466]             base::sink(type = "output", split = FALSE)
[08:25:00.466]             base::close(...future.stdout)
[08:25:00.466]         }, add = TRUE)
[08:25:00.466]     }
[08:25:00.466]     ...future.frame <- base::sys.nframe()
[08:25:00.466]     ...future.conditions <- base::list()
[08:25:00.466]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.466]     if (FALSE) {
[08:25:00.466]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.466]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.466]     }
[08:25:00.466]     ...future.result <- base::tryCatch({
[08:25:00.466]         base::withCallingHandlers({
[08:25:00.466]             ...future.value <- base::withVisible(base::local({
[08:25:00.466]                 withCallingHandlers({
[08:25:00.466]                   {
[08:25:00.466]                     do.call(function(...) {
[08:25:00.466]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.466]                       if (!identical(...future.globals.maxSize.org, 
[08:25:00.466]                         ...future.globals.maxSize)) {
[08:25:00.466]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.466]                         on.exit(options(oopts), add = TRUE)
[08:25:00.466]                       }
[08:25:00.466]                       {
[08:25:00.466]                         lapply(seq_along(...future.elements_ii), 
[08:25:00.466]                           FUN = function(jj) {
[08:25:00.466]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.466]                             ...future.FUN(...future.X_jj, ...)
[08:25:00.466]                           })
[08:25:00.466]                       }
[08:25:00.466]                     }, args = future.call.arguments)
[08:25:00.466]                   }
[08:25:00.466]                 }, immediateCondition = function(cond) {
[08:25:00.466]                   save_rds <- function (object, pathname, ...) 
[08:25:00.466]                   {
[08:25:00.466]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:00.466]                     if (file_test("-f", pathname_tmp)) {
[08:25:00.466]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.466]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:00.466]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.466]                         fi_tmp[["mtime"]])
[08:25:00.466]                     }
[08:25:00.466]                     tryCatch({
[08:25:00.466]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:00.466]                     }, error = function(ex) {
[08:25:00.466]                       msg <- conditionMessage(ex)
[08:25:00.466]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.466]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:00.466]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.466]                         fi_tmp[["mtime"]], msg)
[08:25:00.466]                       ex$message <- msg
[08:25:00.466]                       stop(ex)
[08:25:00.466]                     })
[08:25:00.466]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:00.466]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:00.466]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:00.466]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.466]                       fi <- file.info(pathname)
[08:25:00.466]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:00.466]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.466]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:00.466]                         fi[["size"]], fi[["mtime"]])
[08:25:00.466]                       stop(msg)
[08:25:00.466]                     }
[08:25:00.466]                     invisible(pathname)
[08:25:00.466]                   }
[08:25:00.466]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:00.466]                     rootPath = tempdir()) 
[08:25:00.466]                   {
[08:25:00.466]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:00.466]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:00.466]                       tmpdir = path, fileext = ".rds")
[08:25:00.466]                     save_rds(obj, file)
[08:25:00.466]                   }
[08:25:00.466]                   saveImmediateCondition(cond, path = "/tmp/RtmpC5owVr/.future/immediateConditions")
[08:25:00.466]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.466]                   {
[08:25:00.466]                     inherits <- base::inherits
[08:25:00.466]                     invokeRestart <- base::invokeRestart
[08:25:00.466]                     is.null <- base::is.null
[08:25:00.466]                     muffled <- FALSE
[08:25:00.466]                     if (inherits(cond, "message")) {
[08:25:00.466]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:00.466]                       if (muffled) 
[08:25:00.466]                         invokeRestart("muffleMessage")
[08:25:00.466]                     }
[08:25:00.466]                     else if (inherits(cond, "warning")) {
[08:25:00.466]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:00.466]                       if (muffled) 
[08:25:00.466]                         invokeRestart("muffleWarning")
[08:25:00.466]                     }
[08:25:00.466]                     else if (inherits(cond, "condition")) {
[08:25:00.466]                       if (!is.null(pattern)) {
[08:25:00.466]                         computeRestarts <- base::computeRestarts
[08:25:00.466]                         grepl <- base::grepl
[08:25:00.466]                         restarts <- computeRestarts(cond)
[08:25:00.466]                         for (restart in restarts) {
[08:25:00.466]                           name <- restart$name
[08:25:00.466]                           if (is.null(name)) 
[08:25:00.466]                             next
[08:25:00.466]                           if (!grepl(pattern, name)) 
[08:25:00.466]                             next
[08:25:00.466]                           invokeRestart(restart)
[08:25:00.466]                           muffled <- TRUE
[08:25:00.466]                           break
[08:25:00.466]                         }
[08:25:00.466]                       }
[08:25:00.466]                     }
[08:25:00.466]                     invisible(muffled)
[08:25:00.466]                   }
[08:25:00.466]                   muffleCondition(cond)
[08:25:00.466]                 })
[08:25:00.466]             }))
[08:25:00.466]             future::FutureResult(value = ...future.value$value, 
[08:25:00.466]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.466]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.466]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.466]                     ...future.globalenv.names))
[08:25:00.466]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.466]         }, condition = base::local({
[08:25:00.466]             c <- base::c
[08:25:00.466]             inherits <- base::inherits
[08:25:00.466]             invokeRestart <- base::invokeRestart
[08:25:00.466]             length <- base::length
[08:25:00.466]             list <- base::list
[08:25:00.466]             seq.int <- base::seq.int
[08:25:00.466]             signalCondition <- base::signalCondition
[08:25:00.466]             sys.calls <- base::sys.calls
[08:25:00.466]             `[[` <- base::`[[`
[08:25:00.466]             `+` <- base::`+`
[08:25:00.466]             `<<-` <- base::`<<-`
[08:25:00.466]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.466]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.466]                   3L)]
[08:25:00.466]             }
[08:25:00.466]             function(cond) {
[08:25:00.466]                 is_error <- inherits(cond, "error")
[08:25:00.466]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.466]                   NULL)
[08:25:00.466]                 if (is_error) {
[08:25:00.466]                   sessionInformation <- function() {
[08:25:00.466]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.466]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.466]                       search = base::search(), system = base::Sys.info())
[08:25:00.466]                   }
[08:25:00.466]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.466]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.466]                     cond$call), session = sessionInformation(), 
[08:25:00.466]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.466]                   signalCondition(cond)
[08:25:00.466]                 }
[08:25:00.466]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.466]                 "immediateCondition"))) {
[08:25:00.466]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.466]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.466]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.466]                   if (TRUE && !signal) {
[08:25:00.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.466]                     {
[08:25:00.466]                       inherits <- base::inherits
[08:25:00.466]                       invokeRestart <- base::invokeRestart
[08:25:00.466]                       is.null <- base::is.null
[08:25:00.466]                       muffled <- FALSE
[08:25:00.466]                       if (inherits(cond, "message")) {
[08:25:00.466]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.466]                         if (muffled) 
[08:25:00.466]                           invokeRestart("muffleMessage")
[08:25:00.466]                       }
[08:25:00.466]                       else if (inherits(cond, "warning")) {
[08:25:00.466]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.466]                         if (muffled) 
[08:25:00.466]                           invokeRestart("muffleWarning")
[08:25:00.466]                       }
[08:25:00.466]                       else if (inherits(cond, "condition")) {
[08:25:00.466]                         if (!is.null(pattern)) {
[08:25:00.466]                           computeRestarts <- base::computeRestarts
[08:25:00.466]                           grepl <- base::grepl
[08:25:00.466]                           restarts <- computeRestarts(cond)
[08:25:00.466]                           for (restart in restarts) {
[08:25:00.466]                             name <- restart$name
[08:25:00.466]                             if (is.null(name)) 
[08:25:00.466]                               next
[08:25:00.466]                             if (!grepl(pattern, name)) 
[08:25:00.466]                               next
[08:25:00.466]                             invokeRestart(restart)
[08:25:00.466]                             muffled <- TRUE
[08:25:00.466]                             break
[08:25:00.466]                           }
[08:25:00.466]                         }
[08:25:00.466]                       }
[08:25:00.466]                       invisible(muffled)
[08:25:00.466]                     }
[08:25:00.466]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.466]                   }
[08:25:00.466]                 }
[08:25:00.466]                 else {
[08:25:00.466]                   if (TRUE) {
[08:25:00.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.466]                     {
[08:25:00.466]                       inherits <- base::inherits
[08:25:00.466]                       invokeRestart <- base::invokeRestart
[08:25:00.466]                       is.null <- base::is.null
[08:25:00.466]                       muffled <- FALSE
[08:25:00.466]                       if (inherits(cond, "message")) {
[08:25:00.466]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.466]                         if (muffled) 
[08:25:00.466]                           invokeRestart("muffleMessage")
[08:25:00.466]                       }
[08:25:00.466]                       else if (inherits(cond, "warning")) {
[08:25:00.466]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.466]                         if (muffled) 
[08:25:00.466]                           invokeRestart("muffleWarning")
[08:25:00.466]                       }
[08:25:00.466]                       else if (inherits(cond, "condition")) {
[08:25:00.466]                         if (!is.null(pattern)) {
[08:25:00.466]                           computeRestarts <- base::computeRestarts
[08:25:00.466]                           grepl <- base::grepl
[08:25:00.466]                           restarts <- computeRestarts(cond)
[08:25:00.466]                           for (restart in restarts) {
[08:25:00.466]                             name <- restart$name
[08:25:00.466]                             if (is.null(name)) 
[08:25:00.466]                               next
[08:25:00.466]                             if (!grepl(pattern, name)) 
[08:25:00.466]                               next
[08:25:00.466]                             invokeRestart(restart)
[08:25:00.466]                             muffled <- TRUE
[08:25:00.466]                             break
[08:25:00.466]                           }
[08:25:00.466]                         }
[08:25:00.466]                       }
[08:25:00.466]                       invisible(muffled)
[08:25:00.466]                     }
[08:25:00.466]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.466]                   }
[08:25:00.466]                 }
[08:25:00.466]             }
[08:25:00.466]         }))
[08:25:00.466]     }, error = function(ex) {
[08:25:00.466]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.466]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.466]                 ...future.rng), started = ...future.startTime, 
[08:25:00.466]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.466]             version = "1.8"), class = "FutureResult")
[08:25:00.466]     }, finally = {
[08:25:00.466]         if (!identical(...future.workdir, getwd())) 
[08:25:00.466]             setwd(...future.workdir)
[08:25:00.466]         {
[08:25:00.466]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.466]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.466]             }
[08:25:00.466]             base::options(...future.oldOptions)
[08:25:00.466]             if (.Platform$OS.type == "windows") {
[08:25:00.466]                 old_names <- names(...future.oldEnvVars)
[08:25:00.466]                 envs <- base::Sys.getenv()
[08:25:00.466]                 names <- names(envs)
[08:25:00.466]                 common <- intersect(names, old_names)
[08:25:00.466]                 added <- setdiff(names, old_names)
[08:25:00.466]                 removed <- setdiff(old_names, names)
[08:25:00.466]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.466]                   envs[common]]
[08:25:00.466]                 NAMES <- toupper(changed)
[08:25:00.466]                 args <- list()
[08:25:00.466]                 for (kk in seq_along(NAMES)) {
[08:25:00.466]                   name <- changed[[kk]]
[08:25:00.466]                   NAME <- NAMES[[kk]]
[08:25:00.466]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.466]                     next
[08:25:00.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.466]                 }
[08:25:00.466]                 NAMES <- toupper(added)
[08:25:00.466]                 for (kk in seq_along(NAMES)) {
[08:25:00.466]                   name <- added[[kk]]
[08:25:00.466]                   NAME <- NAMES[[kk]]
[08:25:00.466]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.466]                     next
[08:25:00.466]                   args[[name]] <- ""
[08:25:00.466]                 }
[08:25:00.466]                 NAMES <- toupper(removed)
[08:25:00.466]                 for (kk in seq_along(NAMES)) {
[08:25:00.466]                   name <- removed[[kk]]
[08:25:00.466]                   NAME <- NAMES[[kk]]
[08:25:00.466]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.466]                     next
[08:25:00.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.466]                 }
[08:25:00.466]                 if (length(args) > 0) 
[08:25:00.466]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.466]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.466]             }
[08:25:00.466]             else {
[08:25:00.466]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.466]             }
[08:25:00.466]             {
[08:25:00.466]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.466]                   0L) {
[08:25:00.466]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.466]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.466]                   base::options(opts)
[08:25:00.466]                 }
[08:25:00.466]                 {
[08:25:00.466]                   {
[08:25:00.466]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:00.466]                     NULL
[08:25:00.466]                   }
[08:25:00.466]                   options(future.plan = NULL)
[08:25:00.466]                   if (is.na(NA_character_)) 
[08:25:00.466]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.466]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.466]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.466]                     .init = FALSE)
[08:25:00.466]                 }
[08:25:00.466]             }
[08:25:00.466]         }
[08:25:00.466]     })
[08:25:00.466]     if (TRUE) {
[08:25:00.466]         base::sink(type = "output", split = FALSE)
[08:25:00.466]         if (TRUE) {
[08:25:00.466]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.466]         }
[08:25:00.466]         else {
[08:25:00.466]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.466]         }
[08:25:00.466]         base::close(...future.stdout)
[08:25:00.466]         ...future.stdout <- NULL
[08:25:00.466]     }
[08:25:00.466]     ...future.result$conditions <- ...future.conditions
[08:25:00.466]     ...future.result$finished <- base::Sys.time()
[08:25:00.466]     ...future.result
[08:25:00.466] }
[08:25:00.469] assign_globals() ...
[08:25:00.469] List of 5
[08:25:00.469]  $ ...future.FUN            :function (x, ...)  
[08:25:00.469]  $ future.call.arguments    : list()
[08:25:00.469]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.469]  $ ...future.elements_ii    :List of 1
[08:25:00.469]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[08:25:00.469]  $ ...future.seeds_ii       : NULL
[08:25:00.469]  $ ...future.globals.maxSize: NULL
[08:25:00.469]  - attr(*, "where")=List of 5
[08:25:00.469]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.469]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.469]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.469]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.469]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.469]  - attr(*, "resolved")= logi FALSE
[08:25:00.469]  - attr(*, "total_size")= num 5433
[08:25:00.469]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.469]  - attr(*, "already-done")= logi TRUE
[08:25:00.473] - copied ‘...future.FUN’ to environment
[08:25:00.473] - copied ‘future.call.arguments’ to environment
[08:25:00.473] - copied ‘...future.elements_ii’ to environment
[08:25:00.474] - copied ‘...future.seeds_ii’ to environment
[08:25:00.474] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.474] assign_globals() ... done
[08:25:00.474] requestCore(): workers = 2
[08:25:00.476] MulticoreFuture started
[08:25:00.476] - Launch lazy future ... done
[08:25:00.477] run() for ‘MulticoreFuture’ ... done
[08:25:00.477] Created future:
[08:25:00.478] plan(): Setting new future strategy stack:
[08:25:00.478] List of future strategies:
[08:25:00.478] 1. sequential:
[08:25:00.478]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.478]    - tweaked: FALSE
[08:25:00.478]    - call: NULL
[08:25:00.479] plan(): nbrOfWorkers() = 1
[08:25:00.481] plan(): Setting new future strategy stack:
[08:25:00.481] List of future strategies:
[08:25:00.481] 1. multicore:
[08:25:00.481]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.481]    - tweaked: FALSE
[08:25:00.481]    - call: plan(strategy)
[08:25:00.485] plan(): nbrOfWorkers() = 2
[08:25:00.477] MulticoreFuture:
[08:25:00.477] Label: ‘future_eapply-1’
[08:25:00.477] Expression:
[08:25:00.477] {
[08:25:00.477]     do.call(function(...) {
[08:25:00.477]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.477]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.477]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.477]             on.exit(options(oopts), add = TRUE)
[08:25:00.477]         }
[08:25:00.477]         {
[08:25:00.477]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.477]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.477]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.477]             })
[08:25:00.477]         }
[08:25:00.477]     }, args = future.call.arguments)
[08:25:00.477] }
[08:25:00.477] Lazy evaluation: FALSE
[08:25:00.477] Asynchronous evaluation: TRUE
[08:25:00.477] Local evaluation: TRUE
[08:25:00.477] Environment: R_GlobalEnv
[08:25:00.477] Capture standard output: TRUE
[08:25:00.477] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.477] Globals: 5 objects totaling 563 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.477] Packages: 1 packages (‘stats’)
[08:25:00.477] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.477] Resolved: TRUE
[08:25:00.477] Value: <not collected>
[08:25:00.477] Conditions captured: <none>
[08:25:00.477] Early signaling: FALSE
[08:25:00.477] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.477] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.486] Chunk #1 of 2 ... DONE
[08:25:00.486] Chunk #2 of 2 ...
[08:25:00.486]  - Finding globals in 'X' for chunk #2 ...
[08:25:00.486] getGlobalsAndPackages() ...
[08:25:00.486] Searching for globals...
[08:25:00.487] 
[08:25:00.487] Searching for globals ... DONE
[08:25:00.487] - globals: [0] <none>
[08:25:00.487] getGlobalsAndPackages() ... DONE
[08:25:00.487]    + additional globals found: [n=0] 
[08:25:00.487]    + additional namespaces needed: [n=0] 
[08:25:00.488]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:00.488]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:00.488]  - seeds: <none>
[08:25:00.488]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.488] getGlobalsAndPackages() ...
[08:25:00.488] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.488] Resolving globals: FALSE
[08:25:00.489] Tweak future expression to call with '...' arguments ...
[08:25:00.489] {
[08:25:00.489]     do.call(function(...) {
[08:25:00.489]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.489]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.489]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.489]             on.exit(options(oopts), add = TRUE)
[08:25:00.489]         }
[08:25:00.489]         {
[08:25:00.489]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.489]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.489]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.489]             })
[08:25:00.489]         }
[08:25:00.489]     }, args = future.call.arguments)
[08:25:00.489] }
[08:25:00.489] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.490] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.490] - packages: [1] ‘stats’
[08:25:00.490] getGlobalsAndPackages() ... DONE
[08:25:00.491] run() for ‘Future’ ...
[08:25:00.491] - state: ‘created’
[08:25:00.491] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:00.494] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.494] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:00.494]   - Field: ‘label’
[08:25:00.494]   - Field: ‘local’
[08:25:00.494]   - Field: ‘owner’
[08:25:00.495]   - Field: ‘envir’
[08:25:00.495]   - Field: ‘workers’
[08:25:00.495]   - Field: ‘packages’
[08:25:00.495]   - Field: ‘gc’
[08:25:00.495]   - Field: ‘job’
[08:25:00.495]   - Field: ‘conditions’
[08:25:00.495]   - Field: ‘expr’
[08:25:00.495]   - Field: ‘uuid’
[08:25:00.496]   - Field: ‘seed’
[08:25:00.496]   - Field: ‘version’
[08:25:00.496]   - Field: ‘result’
[08:25:00.496]   - Field: ‘asynchronous’
[08:25:00.496]   - Field: ‘calls’
[08:25:00.496]   - Field: ‘globals’
[08:25:00.496]   - Field: ‘stdout’
[08:25:00.496]   - Field: ‘earlySignal’
[08:25:00.497]   - Field: ‘lazy’
[08:25:00.497]   - Field: ‘state’
[08:25:00.497] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:00.497] - Launch lazy future ...
[08:25:00.497] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.497] Packages needed by future strategies (n = 0): <none>
[08:25:00.498] {
[08:25:00.498]     {
[08:25:00.498]         {
[08:25:00.498]             ...future.startTime <- base::Sys.time()
[08:25:00.498]             {
[08:25:00.498]                 {
[08:25:00.498]                   {
[08:25:00.498]                     {
[08:25:00.498]                       {
[08:25:00.498]                         base::local({
[08:25:00.498]                           has_future <- base::requireNamespace("future", 
[08:25:00.498]                             quietly = TRUE)
[08:25:00.498]                           if (has_future) {
[08:25:00.498]                             ns <- base::getNamespace("future")
[08:25:00.498]                             version <- ns[[".package"]][["version"]]
[08:25:00.498]                             if (is.null(version)) 
[08:25:00.498]                               version <- utils::packageVersion("future")
[08:25:00.498]                           }
[08:25:00.498]                           else {
[08:25:00.498]                             version <- NULL
[08:25:00.498]                           }
[08:25:00.498]                           if (!has_future || version < "1.8.0") {
[08:25:00.498]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.498]                               "", base::R.version$version.string), 
[08:25:00.498]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:00.498]                                 base::R.version$platform, 8 * 
[08:25:00.498]                                   base::.Machine$sizeof.pointer), 
[08:25:00.498]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.498]                                 "release", "version")], collapse = " "), 
[08:25:00.498]                               hostname = base::Sys.info()[["nodename"]])
[08:25:00.498]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.498]                               info)
[08:25:00.498]                             info <- base::paste(info, collapse = "; ")
[08:25:00.498]                             if (!has_future) {
[08:25:00.498]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.498]                                 info)
[08:25:00.498]                             }
[08:25:00.498]                             else {
[08:25:00.498]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.498]                                 info, version)
[08:25:00.498]                             }
[08:25:00.498]                             base::stop(msg)
[08:25:00.498]                           }
[08:25:00.498]                         })
[08:25:00.498]                       }
[08:25:00.498]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:00.498]                       base::options(mc.cores = 1L)
[08:25:00.498]                     }
[08:25:00.498]                     base::local({
[08:25:00.498]                       for (pkg in "stats") {
[08:25:00.498]                         base::loadNamespace(pkg)
[08:25:00.498]                         base::library(pkg, character.only = TRUE)
[08:25:00.498]                       }
[08:25:00.498]                     })
[08:25:00.498]                   }
[08:25:00.498]                   ...future.strategy.old <- future::plan("list")
[08:25:00.498]                   options(future.plan = NULL)
[08:25:00.498]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.498]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.498]                 }
[08:25:00.498]                 ...future.workdir <- getwd()
[08:25:00.498]             }
[08:25:00.498]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.498]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.498]         }
[08:25:00.498]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.498]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:00.498]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.498]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.498]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.498]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.498]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.498]             base::names(...future.oldOptions))
[08:25:00.498]     }
[08:25:00.498]     if (FALSE) {
[08:25:00.498]     }
[08:25:00.498]     else {
[08:25:00.498]         if (TRUE) {
[08:25:00.498]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.498]                 open = "w")
[08:25:00.498]         }
[08:25:00.498]         else {
[08:25:00.498]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.498]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.498]         }
[08:25:00.498]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.498]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.498]             base::sink(type = "output", split = FALSE)
[08:25:00.498]             base::close(...future.stdout)
[08:25:00.498]         }, add = TRUE)
[08:25:00.498]     }
[08:25:00.498]     ...future.frame <- base::sys.nframe()
[08:25:00.498]     ...future.conditions <- base::list()
[08:25:00.498]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.498]     if (FALSE) {
[08:25:00.498]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.498]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.498]     }
[08:25:00.498]     ...future.result <- base::tryCatch({
[08:25:00.498]         base::withCallingHandlers({
[08:25:00.498]             ...future.value <- base::withVisible(base::local({
[08:25:00.498]                 withCallingHandlers({
[08:25:00.498]                   {
[08:25:00.498]                     do.call(function(...) {
[08:25:00.498]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.498]                       if (!identical(...future.globals.maxSize.org, 
[08:25:00.498]                         ...future.globals.maxSize)) {
[08:25:00.498]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.498]                         on.exit(options(oopts), add = TRUE)
[08:25:00.498]                       }
[08:25:00.498]                       {
[08:25:00.498]                         lapply(seq_along(...future.elements_ii), 
[08:25:00.498]                           FUN = function(jj) {
[08:25:00.498]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.498]                             ...future.FUN(...future.X_jj, ...)
[08:25:00.498]                           })
[08:25:00.498]                       }
[08:25:00.498]                     }, args = future.call.arguments)
[08:25:00.498]                   }
[08:25:00.498]                 }, immediateCondition = function(cond) {
[08:25:00.498]                   save_rds <- function (object, pathname, ...) 
[08:25:00.498]                   {
[08:25:00.498]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:00.498]                     if (file_test("-f", pathname_tmp)) {
[08:25:00.498]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.498]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:00.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.498]                         fi_tmp[["mtime"]])
[08:25:00.498]                     }
[08:25:00.498]                     tryCatch({
[08:25:00.498]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:00.498]                     }, error = function(ex) {
[08:25:00.498]                       msg <- conditionMessage(ex)
[08:25:00.498]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.498]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:00.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.498]                         fi_tmp[["mtime"]], msg)
[08:25:00.498]                       ex$message <- msg
[08:25:00.498]                       stop(ex)
[08:25:00.498]                     })
[08:25:00.498]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:00.498]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:00.498]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:00.498]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.498]                       fi <- file.info(pathname)
[08:25:00.498]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:00.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.498]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:00.498]                         fi[["size"]], fi[["mtime"]])
[08:25:00.498]                       stop(msg)
[08:25:00.498]                     }
[08:25:00.498]                     invisible(pathname)
[08:25:00.498]                   }
[08:25:00.498]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:00.498]                     rootPath = tempdir()) 
[08:25:00.498]                   {
[08:25:00.498]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:00.498]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:00.498]                       tmpdir = path, fileext = ".rds")
[08:25:00.498]                     save_rds(obj, file)
[08:25:00.498]                   }
[08:25:00.498]                   saveImmediateCondition(cond, path = "/tmp/RtmpC5owVr/.future/immediateConditions")
[08:25:00.498]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.498]                   {
[08:25:00.498]                     inherits <- base::inherits
[08:25:00.498]                     invokeRestart <- base::invokeRestart
[08:25:00.498]                     is.null <- base::is.null
[08:25:00.498]                     muffled <- FALSE
[08:25:00.498]                     if (inherits(cond, "message")) {
[08:25:00.498]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:00.498]                       if (muffled) 
[08:25:00.498]                         invokeRestart("muffleMessage")
[08:25:00.498]                     }
[08:25:00.498]                     else if (inherits(cond, "warning")) {
[08:25:00.498]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:00.498]                       if (muffled) 
[08:25:00.498]                         invokeRestart("muffleWarning")
[08:25:00.498]                     }
[08:25:00.498]                     else if (inherits(cond, "condition")) {
[08:25:00.498]                       if (!is.null(pattern)) {
[08:25:00.498]                         computeRestarts <- base::computeRestarts
[08:25:00.498]                         grepl <- base::grepl
[08:25:00.498]                         restarts <- computeRestarts(cond)
[08:25:00.498]                         for (restart in restarts) {
[08:25:00.498]                           name <- restart$name
[08:25:00.498]                           if (is.null(name)) 
[08:25:00.498]                             next
[08:25:00.498]                           if (!grepl(pattern, name)) 
[08:25:00.498]                             next
[08:25:00.498]                           invokeRestart(restart)
[08:25:00.498]                           muffled <- TRUE
[08:25:00.498]                           break
[08:25:00.498]                         }
[08:25:00.498]                       }
[08:25:00.498]                     }
[08:25:00.498]                     invisible(muffled)
[08:25:00.498]                   }
[08:25:00.498]                   muffleCondition(cond)
[08:25:00.498]                 })
[08:25:00.498]             }))
[08:25:00.498]             future::FutureResult(value = ...future.value$value, 
[08:25:00.498]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.498]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.498]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.498]                     ...future.globalenv.names))
[08:25:00.498]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.498]         }, condition = base::local({
[08:25:00.498]             c <- base::c
[08:25:00.498]             inherits <- base::inherits
[08:25:00.498]             invokeRestart <- base::invokeRestart
[08:25:00.498]             length <- base::length
[08:25:00.498]             list <- base::list
[08:25:00.498]             seq.int <- base::seq.int
[08:25:00.498]             signalCondition <- base::signalCondition
[08:25:00.498]             sys.calls <- base::sys.calls
[08:25:00.498]             `[[` <- base::`[[`
[08:25:00.498]             `+` <- base::`+`
[08:25:00.498]             `<<-` <- base::`<<-`
[08:25:00.498]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.498]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.498]                   3L)]
[08:25:00.498]             }
[08:25:00.498]             function(cond) {
[08:25:00.498]                 is_error <- inherits(cond, "error")
[08:25:00.498]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.498]                   NULL)
[08:25:00.498]                 if (is_error) {
[08:25:00.498]                   sessionInformation <- function() {
[08:25:00.498]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.498]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.498]                       search = base::search(), system = base::Sys.info())
[08:25:00.498]                   }
[08:25:00.498]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.498]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.498]                     cond$call), session = sessionInformation(), 
[08:25:00.498]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.498]                   signalCondition(cond)
[08:25:00.498]                 }
[08:25:00.498]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.498]                 "immediateCondition"))) {
[08:25:00.498]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.498]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.498]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.498]                   if (TRUE && !signal) {
[08:25:00.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.498]                     {
[08:25:00.498]                       inherits <- base::inherits
[08:25:00.498]                       invokeRestart <- base::invokeRestart
[08:25:00.498]                       is.null <- base::is.null
[08:25:00.498]                       muffled <- FALSE
[08:25:00.498]                       if (inherits(cond, "message")) {
[08:25:00.498]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.498]                         if (muffled) 
[08:25:00.498]                           invokeRestart("muffleMessage")
[08:25:00.498]                       }
[08:25:00.498]                       else if (inherits(cond, "warning")) {
[08:25:00.498]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.498]                         if (muffled) 
[08:25:00.498]                           invokeRestart("muffleWarning")
[08:25:00.498]                       }
[08:25:00.498]                       else if (inherits(cond, "condition")) {
[08:25:00.498]                         if (!is.null(pattern)) {
[08:25:00.498]                           computeRestarts <- base::computeRestarts
[08:25:00.498]                           grepl <- base::grepl
[08:25:00.498]                           restarts <- computeRestarts(cond)
[08:25:00.498]                           for (restart in restarts) {
[08:25:00.498]                             name <- restart$name
[08:25:00.498]                             if (is.null(name)) 
[08:25:00.498]                               next
[08:25:00.498]                             if (!grepl(pattern, name)) 
[08:25:00.498]                               next
[08:25:00.498]                             invokeRestart(restart)
[08:25:00.498]                             muffled <- TRUE
[08:25:00.498]                             break
[08:25:00.498]                           }
[08:25:00.498]                         }
[08:25:00.498]                       }
[08:25:00.498]                       invisible(muffled)
[08:25:00.498]                     }
[08:25:00.498]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.498]                   }
[08:25:00.498]                 }
[08:25:00.498]                 else {
[08:25:00.498]                   if (TRUE) {
[08:25:00.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.498]                     {
[08:25:00.498]                       inherits <- base::inherits
[08:25:00.498]                       invokeRestart <- base::invokeRestart
[08:25:00.498]                       is.null <- base::is.null
[08:25:00.498]                       muffled <- FALSE
[08:25:00.498]                       if (inherits(cond, "message")) {
[08:25:00.498]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.498]                         if (muffled) 
[08:25:00.498]                           invokeRestart("muffleMessage")
[08:25:00.498]                       }
[08:25:00.498]                       else if (inherits(cond, "warning")) {
[08:25:00.498]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.498]                         if (muffled) 
[08:25:00.498]                           invokeRestart("muffleWarning")
[08:25:00.498]                       }
[08:25:00.498]                       else if (inherits(cond, "condition")) {
[08:25:00.498]                         if (!is.null(pattern)) {
[08:25:00.498]                           computeRestarts <- base::computeRestarts
[08:25:00.498]                           grepl <- base::grepl
[08:25:00.498]                           restarts <- computeRestarts(cond)
[08:25:00.498]                           for (restart in restarts) {
[08:25:00.498]                             name <- restart$name
[08:25:00.498]                             if (is.null(name)) 
[08:25:00.498]                               next
[08:25:00.498]                             if (!grepl(pattern, name)) 
[08:25:00.498]                               next
[08:25:00.498]                             invokeRestart(restart)
[08:25:00.498]                             muffled <- TRUE
[08:25:00.498]                             break
[08:25:00.498]                           }
[08:25:00.498]                         }
[08:25:00.498]                       }
[08:25:00.498]                       invisible(muffled)
[08:25:00.498]                     }
[08:25:00.498]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.498]                   }
[08:25:00.498]                 }
[08:25:00.498]             }
[08:25:00.498]         }))
[08:25:00.498]     }, error = function(ex) {
[08:25:00.498]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.498]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.498]                 ...future.rng), started = ...future.startTime, 
[08:25:00.498]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.498]             version = "1.8"), class = "FutureResult")
[08:25:00.498]     }, finally = {
[08:25:00.498]         if (!identical(...future.workdir, getwd())) 
[08:25:00.498]             setwd(...future.workdir)
[08:25:00.498]         {
[08:25:00.498]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.498]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.498]             }
[08:25:00.498]             base::options(...future.oldOptions)
[08:25:00.498]             if (.Platform$OS.type == "windows") {
[08:25:00.498]                 old_names <- names(...future.oldEnvVars)
[08:25:00.498]                 envs <- base::Sys.getenv()
[08:25:00.498]                 names <- names(envs)
[08:25:00.498]                 common <- intersect(names, old_names)
[08:25:00.498]                 added <- setdiff(names, old_names)
[08:25:00.498]                 removed <- setdiff(old_names, names)
[08:25:00.498]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.498]                   envs[common]]
[08:25:00.498]                 NAMES <- toupper(changed)
[08:25:00.498]                 args <- list()
[08:25:00.498]                 for (kk in seq_along(NAMES)) {
[08:25:00.498]                   name <- changed[[kk]]
[08:25:00.498]                   NAME <- NAMES[[kk]]
[08:25:00.498]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.498]                     next
[08:25:00.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.498]                 }
[08:25:00.498]                 NAMES <- toupper(added)
[08:25:00.498]                 for (kk in seq_along(NAMES)) {
[08:25:00.498]                   name <- added[[kk]]
[08:25:00.498]                   NAME <- NAMES[[kk]]
[08:25:00.498]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.498]                     next
[08:25:00.498]                   args[[name]] <- ""
[08:25:00.498]                 }
[08:25:00.498]                 NAMES <- toupper(removed)
[08:25:00.498]                 for (kk in seq_along(NAMES)) {
[08:25:00.498]                   name <- removed[[kk]]
[08:25:00.498]                   NAME <- NAMES[[kk]]
[08:25:00.498]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.498]                     next
[08:25:00.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.498]                 }
[08:25:00.498]                 if (length(args) > 0) 
[08:25:00.498]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.498]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.498]             }
[08:25:00.498]             else {
[08:25:00.498]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.498]             }
[08:25:00.498]             {
[08:25:00.498]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.498]                   0L) {
[08:25:00.498]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.498]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.498]                   base::options(opts)
[08:25:00.498]                 }
[08:25:00.498]                 {
[08:25:00.498]                   {
[08:25:00.498]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:00.498]                     NULL
[08:25:00.498]                   }
[08:25:00.498]                   options(future.plan = NULL)
[08:25:00.498]                   if (is.na(NA_character_)) 
[08:25:00.498]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.498]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.498]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.498]                     .init = FALSE)
[08:25:00.498]                 }
[08:25:00.498]             }
[08:25:00.498]         }
[08:25:00.498]     })
[08:25:00.498]     if (TRUE) {
[08:25:00.498]         base::sink(type = "output", split = FALSE)
[08:25:00.498]         if (TRUE) {
[08:25:00.498]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.498]         }
[08:25:00.498]         else {
[08:25:00.498]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.498]         }
[08:25:00.498]         base::close(...future.stdout)
[08:25:00.498]         ...future.stdout <- NULL
[08:25:00.498]     }
[08:25:00.498]     ...future.result$conditions <- ...future.conditions
[08:25:00.498]     ...future.result$finished <- base::Sys.time()
[08:25:00.498]     ...future.result
[08:25:00.498] }
[08:25:00.502] assign_globals() ...
[08:25:00.502] List of 5
[08:25:00.502]  $ ...future.FUN            :function (x, ...)  
[08:25:00.502]  $ future.call.arguments    : list()
[08:25:00.502]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.502]  $ ...future.elements_ii    :List of 2
[08:25:00.502]   ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[08:25:00.502]   ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[08:25:00.502]  $ ...future.seeds_ii       : NULL
[08:25:00.502]  $ ...future.globals.maxSize: NULL
[08:25:00.502]  - attr(*, "where")=List of 5
[08:25:00.502]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.502]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.502]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.502]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.502]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.502]  - attr(*, "resolved")= logi FALSE
[08:25:00.502]  - attr(*, "total_size")= num 5433
[08:25:00.502]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.502]  - attr(*, "already-done")= logi TRUE
[08:25:00.513] - copied ‘...future.FUN’ to environment
[08:25:00.513] - copied ‘future.call.arguments’ to environment
[08:25:00.513] - copied ‘...future.elements_ii’ to environment
[08:25:00.514] - copied ‘...future.seeds_ii’ to environment
[08:25:00.514] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.514] assign_globals() ... done
[08:25:00.514] requestCore(): workers = 2
[08:25:00.516] MulticoreFuture started
[08:25:00.517] - Launch lazy future ... done
[08:25:00.517] run() for ‘MulticoreFuture’ ... done
[08:25:00.517] Created future:
[08:25:00.518] plan(): Setting new future strategy stack:
[08:25:00.518] List of future strategies:
[08:25:00.518] 1. sequential:
[08:25:00.518]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.518]    - tweaked: FALSE
[08:25:00.518]    - call: NULL
[08:25:00.519] plan(): nbrOfWorkers() = 1
[08:25:00.522] plan(): Setting new future strategy stack:
[08:25:00.522] List of future strategies:
[08:25:00.522] 1. multicore:
[08:25:00.522]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.522]    - tweaked: FALSE
[08:25:00.522]    - call: plan(strategy)
[08:25:00.525] plan(): nbrOfWorkers() = 2
[08:25:00.518] MulticoreFuture:
[08:25:00.518] Label: ‘future_eapply-2’
[08:25:00.518] Expression:
[08:25:00.518] {
[08:25:00.518]     do.call(function(...) {
[08:25:00.518]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.518]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.518]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.518]             on.exit(options(oopts), add = TRUE)
[08:25:00.518]         }
[08:25:00.518]         {
[08:25:00.518]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.518]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.518]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.518]             })
[08:25:00.518]         }
[08:25:00.518]     }, args = future.call.arguments)
[08:25:00.518] }
[08:25:00.518] Lazy evaluation: FALSE
[08:25:00.518] Asynchronous evaluation: TRUE
[08:25:00.518] Local evaluation: TRUE
[08:25:00.518] Environment: R_GlobalEnv
[08:25:00.518] Capture standard output: TRUE
[08:25:00.518] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.518] Globals: 5 objects totaling 721 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.518] Packages: 1 packages (‘stats’)
[08:25:00.518] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.518] Resolved: TRUE
[08:25:00.518] Value: <not collected>
[08:25:00.518] Conditions captured: <none>
[08:25:00.518] Early signaling: FALSE
[08:25:00.518] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.518] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.527] Chunk #2 of 2 ... DONE
[08:25:00.527] Launching 2 futures (chunks) ... DONE
[08:25:00.527] Resolving 2 futures (chunks) ...
[08:25:00.527] resolve() on list ...
[08:25:00.527]  recursive: 0
[08:25:00.527]  length: 2
[08:25:00.528] 
[08:25:00.528] Future #1
[08:25:00.528] result() for MulticoreFuture ...
[08:25:00.529] result() for MulticoreFuture ...
[08:25:00.529] result() for MulticoreFuture ... done
[08:25:00.529] result() for MulticoreFuture ... done
[08:25:00.529] result() for MulticoreFuture ...
[08:25:00.530] result() for MulticoreFuture ... done
[08:25:00.530] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:00.530] - nx: 2
[08:25:00.530] - relay: TRUE
[08:25:00.530] - stdout: TRUE
[08:25:00.530] - signal: TRUE
[08:25:00.530] - resignal: FALSE
[08:25:00.531] - force: TRUE
[08:25:00.531] - relayed: [n=2] FALSE, FALSE
[08:25:00.531] - queued futures: [n=2] FALSE, FALSE
[08:25:00.531]  - until=1
[08:25:00.531]  - relaying element #1
[08:25:00.531] result() for MulticoreFuture ...
[08:25:00.531] result() for MulticoreFuture ... done
[08:25:00.532] result() for MulticoreFuture ...
[08:25:00.532] result() for MulticoreFuture ... done
[08:25:00.532] result() for MulticoreFuture ...
[08:25:00.532] result() for MulticoreFuture ... done
[08:25:00.532] result() for MulticoreFuture ...
[08:25:00.532] result() for MulticoreFuture ... done
[08:25:00.532] - relayed: [n=2] TRUE, FALSE
[08:25:00.533] - queued futures: [n=2] TRUE, FALSE
[08:25:00.533] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:00.533]  length: 1 (resolved future 1)
[08:25:00.533] Future #2
[08:25:00.533] result() for MulticoreFuture ...
[08:25:00.534] result() for MulticoreFuture ...
[08:25:00.534] result() for MulticoreFuture ... done
[08:25:00.534] result() for MulticoreFuture ... done
[08:25:00.535] result() for MulticoreFuture ...
[08:25:00.535] result() for MulticoreFuture ... done
[08:25:00.535] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:00.535] - nx: 2
[08:25:00.535] - relay: TRUE
[08:25:00.535] - stdout: TRUE
[08:25:00.535] - signal: TRUE
[08:25:00.535] - resignal: FALSE
[08:25:00.536] - force: TRUE
[08:25:00.536] - relayed: [n=2] TRUE, FALSE
[08:25:00.536] - queued futures: [n=2] TRUE, FALSE
[08:25:00.536]  - until=2
[08:25:00.536]  - relaying element #2
[08:25:00.536] result() for MulticoreFuture ...
[08:25:00.536] result() for MulticoreFuture ... done
[08:25:00.536] result() for MulticoreFuture ...
[08:25:00.536] result() for MulticoreFuture ... done
[08:25:00.537] result() for MulticoreFuture ...
[08:25:00.537] result() for MulticoreFuture ... done
[08:25:00.537] result() for MulticoreFuture ...
[08:25:00.537] result() for MulticoreFuture ... done
[08:25:00.537] - relayed: [n=2] TRUE, TRUE
[08:25:00.537] - queued futures: [n=2] TRUE, TRUE
[08:25:00.537] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:00.537]  length: 0 (resolved future 2)
[08:25:00.538] Relaying remaining futures
[08:25:00.538] signalConditionsASAP(NULL, pos=0) ...
[08:25:00.538] - nx: 2
[08:25:00.538] - relay: TRUE
[08:25:00.538] - stdout: TRUE
[08:25:00.538] - signal: TRUE
[08:25:00.538] - resignal: FALSE
[08:25:00.538] - force: TRUE
[08:25:00.538] - relayed: [n=2] TRUE, TRUE
[08:25:00.538] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:00.539] - relayed: [n=2] TRUE, TRUE
[08:25:00.539] - queued futures: [n=2] TRUE, TRUE
[08:25:00.539] signalConditionsASAP(NULL, pos=0) ... done
[08:25:00.539] resolve() on list ... DONE
[08:25:00.539] result() for MulticoreFuture ...
[08:25:00.539] result() for MulticoreFuture ... done
[08:25:00.539] result() for MulticoreFuture ...
[08:25:00.539] result() for MulticoreFuture ... done
[08:25:00.539] result() for MulticoreFuture ...
[08:25:00.540] result() for MulticoreFuture ... done
[08:25:00.540] result() for MulticoreFuture ...
[08:25:00.540] result() for MulticoreFuture ... done
[08:25:00.540]  - Number of value chunks collected: 2
[08:25:00.540] Resolving 2 futures (chunks) ... DONE
[08:25:00.540] Reducing values from 2 chunks ...
[08:25:00.540]  - Number of values collected after concatenation: 3
[08:25:00.540]  - Number of values expected: 3
[08:25:00.540] Reducing values from 2 chunks ... DONE
[08:25:00.541] future_lapply() ... DONE
[08:25:00.541] future_lapply() ...
[08:25:00.544] Number of chunks: 2
[08:25:00.544] getGlobalsAndPackagesXApply() ...
[08:25:00.544]  - future.globals: TRUE
[08:25:00.544] getGlobalsAndPackages() ...
[08:25:00.544] Searching for globals...
[08:25:00.545] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:00.546] Searching for globals ... DONE
[08:25:00.546] Resolving globals: FALSE
[08:25:00.546] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:00.547] The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:00.547] - globals: [1] ‘FUN’
[08:25:00.547] - packages: [1] ‘stats’
[08:25:00.547] getGlobalsAndPackages() ... DONE
[08:25:00.547]  - globals found/used: [n=1] ‘FUN’
[08:25:00.547]  - needed namespaces: [n=1] ‘stats’
[08:25:00.547] Finding globals ... DONE
[08:25:00.549]  - use_args: TRUE
[08:25:00.549]  - Getting '...' globals ...
[08:25:00.550] resolve() on list ...
[08:25:00.550]  recursive: 0
[08:25:00.550]  length: 1
[08:25:00.550]  elements: ‘...’
[08:25:00.550]  length: 0 (resolved future 1)
[08:25:00.551] resolve() on list ... DONE
[08:25:00.551]    - '...' content: [n=0] 
[08:25:00.551] List of 1
[08:25:00.551]  $ ...: list()
[08:25:00.551]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.551]  - attr(*, "where")=List of 1
[08:25:00.551]   ..$ ...:<environment: 0x5577ed31d3f0> 
[08:25:00.551]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.551]  - attr(*, "resolved")= logi TRUE
[08:25:00.551]  - attr(*, "total_size")= num NA
[08:25:00.554]  - Getting '...' globals ... DONE
[08:25:00.554] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:00.555] List of 2
[08:25:00.555]  $ ...future.FUN:function (x, ...)  
[08:25:00.555]  $ ...          : list()
[08:25:00.555]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.555]  - attr(*, "where")=List of 2
[08:25:00.555]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:00.555]   ..$ ...          :<environment: 0x5577ed31d3f0> 
[08:25:00.555]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.555]  - attr(*, "resolved")= logi FALSE
[08:25:00.555]  - attr(*, "total_size")= num 5437
[08:25:00.557] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:00.557] getGlobalsAndPackagesXApply() ... DONE
[08:25:00.558] Number of futures (= number of chunks): 2
[08:25:00.558] Launching 2 futures (chunks) ...
[08:25:00.558] Chunk #1 of 2 ...
[08:25:00.558]  - Finding globals in 'X' for chunk #1 ...
[08:25:00.558] getGlobalsAndPackages() ...
[08:25:00.558] Searching for globals...
[08:25:00.558] 
[08:25:00.559] Searching for globals ... DONE
[08:25:00.559] - globals: [0] <none>
[08:25:00.559] getGlobalsAndPackages() ... DONE
[08:25:00.559]    + additional globals found: [n=0] 
[08:25:00.559]    + additional namespaces needed: [n=0] 
[08:25:00.559]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:00.559]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:00.559]  - seeds: <none>
[08:25:00.559]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.559] getGlobalsAndPackages() ...
[08:25:00.559] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.560] Resolving globals: FALSE
[08:25:00.560] Tweak future expression to call with '...' arguments ...
[08:25:00.560] {
[08:25:00.560]     do.call(function(...) {
[08:25:00.560]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.560]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.560]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.560]             on.exit(options(oopts), add = TRUE)
[08:25:00.560]         }
[08:25:00.560]         {
[08:25:00.560]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.560]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.560]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.560]             })
[08:25:00.560]         }
[08:25:00.560]     }, args = future.call.arguments)
[08:25:00.560] }
[08:25:00.560] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.560] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.561] - packages: [1] ‘stats’
[08:25:00.561] getGlobalsAndPackages() ... DONE
[08:25:00.561] run() for ‘Future’ ...
[08:25:00.561] - state: ‘created’
[08:25:00.561] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:00.563] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.563] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:00.563]   - Field: ‘label’
[08:25:00.563]   - Field: ‘local’
[08:25:00.564]   - Field: ‘owner’
[08:25:00.564]   - Field: ‘envir’
[08:25:00.564]   - Field: ‘workers’
[08:25:00.564]   - Field: ‘packages’
[08:25:00.564]   - Field: ‘gc’
[08:25:00.564]   - Field: ‘job’
[08:25:00.564]   - Field: ‘conditions’
[08:25:00.564]   - Field: ‘expr’
[08:25:00.564]   - Field: ‘uuid’
[08:25:00.564]   - Field: ‘seed’
[08:25:00.564]   - Field: ‘version’
[08:25:00.565]   - Field: ‘result’
[08:25:00.565]   - Field: ‘asynchronous’
[08:25:00.565]   - Field: ‘calls’
[08:25:00.565]   - Field: ‘globals’
[08:25:00.565]   - Field: ‘stdout’
[08:25:00.565]   - Field: ‘earlySignal’
[08:25:00.565]   - Field: ‘lazy’
[08:25:00.565]   - Field: ‘state’
[08:25:00.565] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:00.565] - Launch lazy future ...
[08:25:00.566] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.566] Packages needed by future strategies (n = 0): <none>
[08:25:00.566] {
[08:25:00.566]     {
[08:25:00.566]         {
[08:25:00.566]             ...future.startTime <- base::Sys.time()
[08:25:00.566]             {
[08:25:00.566]                 {
[08:25:00.566]                   {
[08:25:00.566]                     {
[08:25:00.566]                       {
[08:25:00.566]                         base::local({
[08:25:00.566]                           has_future <- base::requireNamespace("future", 
[08:25:00.566]                             quietly = TRUE)
[08:25:00.566]                           if (has_future) {
[08:25:00.566]                             ns <- base::getNamespace("future")
[08:25:00.566]                             version <- ns[[".package"]][["version"]]
[08:25:00.566]                             if (is.null(version)) 
[08:25:00.566]                               version <- utils::packageVersion("future")
[08:25:00.566]                           }
[08:25:00.566]                           else {
[08:25:00.566]                             version <- NULL
[08:25:00.566]                           }
[08:25:00.566]                           if (!has_future || version < "1.8.0") {
[08:25:00.566]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.566]                               "", base::R.version$version.string), 
[08:25:00.566]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:00.566]                                 base::R.version$platform, 8 * 
[08:25:00.566]                                   base::.Machine$sizeof.pointer), 
[08:25:00.566]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.566]                                 "release", "version")], collapse = " "), 
[08:25:00.566]                               hostname = base::Sys.info()[["nodename"]])
[08:25:00.566]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.566]                               info)
[08:25:00.566]                             info <- base::paste(info, collapse = "; ")
[08:25:00.566]                             if (!has_future) {
[08:25:00.566]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.566]                                 info)
[08:25:00.566]                             }
[08:25:00.566]                             else {
[08:25:00.566]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.566]                                 info, version)
[08:25:00.566]                             }
[08:25:00.566]                             base::stop(msg)
[08:25:00.566]                           }
[08:25:00.566]                         })
[08:25:00.566]                       }
[08:25:00.566]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:00.566]                       base::options(mc.cores = 1L)
[08:25:00.566]                     }
[08:25:00.566]                     base::local({
[08:25:00.566]                       for (pkg in "stats") {
[08:25:00.566]                         base::loadNamespace(pkg)
[08:25:00.566]                         base::library(pkg, character.only = TRUE)
[08:25:00.566]                       }
[08:25:00.566]                     })
[08:25:00.566]                   }
[08:25:00.566]                   ...future.strategy.old <- future::plan("list")
[08:25:00.566]                   options(future.plan = NULL)
[08:25:00.566]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.566]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.566]                 }
[08:25:00.566]                 ...future.workdir <- getwd()
[08:25:00.566]             }
[08:25:00.566]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.566]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.566]         }
[08:25:00.566]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.566]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:00.566]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.566]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.566]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.566]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.566]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.566]             base::names(...future.oldOptions))
[08:25:00.566]     }
[08:25:00.566]     if (FALSE) {
[08:25:00.566]     }
[08:25:00.566]     else {
[08:25:00.566]         if (TRUE) {
[08:25:00.566]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.566]                 open = "w")
[08:25:00.566]         }
[08:25:00.566]         else {
[08:25:00.566]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.566]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.566]         }
[08:25:00.566]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.566]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.566]             base::sink(type = "output", split = FALSE)
[08:25:00.566]             base::close(...future.stdout)
[08:25:00.566]         }, add = TRUE)
[08:25:00.566]     }
[08:25:00.566]     ...future.frame <- base::sys.nframe()
[08:25:00.566]     ...future.conditions <- base::list()
[08:25:00.566]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.566]     if (FALSE) {
[08:25:00.566]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.566]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.566]     }
[08:25:00.566]     ...future.result <- base::tryCatch({
[08:25:00.566]         base::withCallingHandlers({
[08:25:00.566]             ...future.value <- base::withVisible(base::local({
[08:25:00.566]                 withCallingHandlers({
[08:25:00.566]                   {
[08:25:00.566]                     do.call(function(...) {
[08:25:00.566]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.566]                       if (!identical(...future.globals.maxSize.org, 
[08:25:00.566]                         ...future.globals.maxSize)) {
[08:25:00.566]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.566]                         on.exit(options(oopts), add = TRUE)
[08:25:00.566]                       }
[08:25:00.566]                       {
[08:25:00.566]                         lapply(seq_along(...future.elements_ii), 
[08:25:00.566]                           FUN = function(jj) {
[08:25:00.566]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.566]                             ...future.FUN(...future.X_jj, ...)
[08:25:00.566]                           })
[08:25:00.566]                       }
[08:25:00.566]                     }, args = future.call.arguments)
[08:25:00.566]                   }
[08:25:00.566]                 }, immediateCondition = function(cond) {
[08:25:00.566]                   save_rds <- function (object, pathname, ...) 
[08:25:00.566]                   {
[08:25:00.566]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:00.566]                     if (file_test("-f", pathname_tmp)) {
[08:25:00.566]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.566]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:00.566]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.566]                         fi_tmp[["mtime"]])
[08:25:00.566]                     }
[08:25:00.566]                     tryCatch({
[08:25:00.566]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:00.566]                     }, error = function(ex) {
[08:25:00.566]                       msg <- conditionMessage(ex)
[08:25:00.566]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.566]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:00.566]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.566]                         fi_tmp[["mtime"]], msg)
[08:25:00.566]                       ex$message <- msg
[08:25:00.566]                       stop(ex)
[08:25:00.566]                     })
[08:25:00.566]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:00.566]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:00.566]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:00.566]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.566]                       fi <- file.info(pathname)
[08:25:00.566]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:00.566]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.566]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:00.566]                         fi[["size"]], fi[["mtime"]])
[08:25:00.566]                       stop(msg)
[08:25:00.566]                     }
[08:25:00.566]                     invisible(pathname)
[08:25:00.566]                   }
[08:25:00.566]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:00.566]                     rootPath = tempdir()) 
[08:25:00.566]                   {
[08:25:00.566]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:00.566]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:00.566]                       tmpdir = path, fileext = ".rds")
[08:25:00.566]                     save_rds(obj, file)
[08:25:00.566]                   }
[08:25:00.566]                   saveImmediateCondition(cond, path = "/tmp/RtmpC5owVr/.future/immediateConditions")
[08:25:00.566]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.566]                   {
[08:25:00.566]                     inherits <- base::inherits
[08:25:00.566]                     invokeRestart <- base::invokeRestart
[08:25:00.566]                     is.null <- base::is.null
[08:25:00.566]                     muffled <- FALSE
[08:25:00.566]                     if (inherits(cond, "message")) {
[08:25:00.566]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:00.566]                       if (muffled) 
[08:25:00.566]                         invokeRestart("muffleMessage")
[08:25:00.566]                     }
[08:25:00.566]                     else if (inherits(cond, "warning")) {
[08:25:00.566]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:00.566]                       if (muffled) 
[08:25:00.566]                         invokeRestart("muffleWarning")
[08:25:00.566]                     }
[08:25:00.566]                     else if (inherits(cond, "condition")) {
[08:25:00.566]                       if (!is.null(pattern)) {
[08:25:00.566]                         computeRestarts <- base::computeRestarts
[08:25:00.566]                         grepl <- base::grepl
[08:25:00.566]                         restarts <- computeRestarts(cond)
[08:25:00.566]                         for (restart in restarts) {
[08:25:00.566]                           name <- restart$name
[08:25:00.566]                           if (is.null(name)) 
[08:25:00.566]                             next
[08:25:00.566]                           if (!grepl(pattern, name)) 
[08:25:00.566]                             next
[08:25:00.566]                           invokeRestart(restart)
[08:25:00.566]                           muffled <- TRUE
[08:25:00.566]                           break
[08:25:00.566]                         }
[08:25:00.566]                       }
[08:25:00.566]                     }
[08:25:00.566]                     invisible(muffled)
[08:25:00.566]                   }
[08:25:00.566]                   muffleCondition(cond)
[08:25:00.566]                 })
[08:25:00.566]             }))
[08:25:00.566]             future::FutureResult(value = ...future.value$value, 
[08:25:00.566]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.566]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.566]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.566]                     ...future.globalenv.names))
[08:25:00.566]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.566]         }, condition = base::local({
[08:25:00.566]             c <- base::c
[08:25:00.566]             inherits <- base::inherits
[08:25:00.566]             invokeRestart <- base::invokeRestart
[08:25:00.566]             length <- base::length
[08:25:00.566]             list <- base::list
[08:25:00.566]             seq.int <- base::seq.int
[08:25:00.566]             signalCondition <- base::signalCondition
[08:25:00.566]             sys.calls <- base::sys.calls
[08:25:00.566]             `[[` <- base::`[[`
[08:25:00.566]             `+` <- base::`+`
[08:25:00.566]             `<<-` <- base::`<<-`
[08:25:00.566]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.566]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.566]                   3L)]
[08:25:00.566]             }
[08:25:00.566]             function(cond) {
[08:25:00.566]                 is_error <- inherits(cond, "error")
[08:25:00.566]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.566]                   NULL)
[08:25:00.566]                 if (is_error) {
[08:25:00.566]                   sessionInformation <- function() {
[08:25:00.566]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.566]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.566]                       search = base::search(), system = base::Sys.info())
[08:25:00.566]                   }
[08:25:00.566]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.566]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.566]                     cond$call), session = sessionInformation(), 
[08:25:00.566]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.566]                   signalCondition(cond)
[08:25:00.566]                 }
[08:25:00.566]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.566]                 "immediateCondition"))) {
[08:25:00.566]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.566]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.566]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.566]                   if (TRUE && !signal) {
[08:25:00.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.566]                     {
[08:25:00.566]                       inherits <- base::inherits
[08:25:00.566]                       invokeRestart <- base::invokeRestart
[08:25:00.566]                       is.null <- base::is.null
[08:25:00.566]                       muffled <- FALSE
[08:25:00.566]                       if (inherits(cond, "message")) {
[08:25:00.566]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.566]                         if (muffled) 
[08:25:00.566]                           invokeRestart("muffleMessage")
[08:25:00.566]                       }
[08:25:00.566]                       else if (inherits(cond, "warning")) {
[08:25:00.566]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.566]                         if (muffled) 
[08:25:00.566]                           invokeRestart("muffleWarning")
[08:25:00.566]                       }
[08:25:00.566]                       else if (inherits(cond, "condition")) {
[08:25:00.566]                         if (!is.null(pattern)) {
[08:25:00.566]                           computeRestarts <- base::computeRestarts
[08:25:00.566]                           grepl <- base::grepl
[08:25:00.566]                           restarts <- computeRestarts(cond)
[08:25:00.566]                           for (restart in restarts) {
[08:25:00.566]                             name <- restart$name
[08:25:00.566]                             if (is.null(name)) 
[08:25:00.566]                               next
[08:25:00.566]                             if (!grepl(pattern, name)) 
[08:25:00.566]                               next
[08:25:00.566]                             invokeRestart(restart)
[08:25:00.566]                             muffled <- TRUE
[08:25:00.566]                             break
[08:25:00.566]                           }
[08:25:00.566]                         }
[08:25:00.566]                       }
[08:25:00.566]                       invisible(muffled)
[08:25:00.566]                     }
[08:25:00.566]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.566]                   }
[08:25:00.566]                 }
[08:25:00.566]                 else {
[08:25:00.566]                   if (TRUE) {
[08:25:00.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.566]                     {
[08:25:00.566]                       inherits <- base::inherits
[08:25:00.566]                       invokeRestart <- base::invokeRestart
[08:25:00.566]                       is.null <- base::is.null
[08:25:00.566]                       muffled <- FALSE
[08:25:00.566]                       if (inherits(cond, "message")) {
[08:25:00.566]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.566]                         if (muffled) 
[08:25:00.566]                           invokeRestart("muffleMessage")
[08:25:00.566]                       }
[08:25:00.566]                       else if (inherits(cond, "warning")) {
[08:25:00.566]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.566]                         if (muffled) 
[08:25:00.566]                           invokeRestart("muffleWarning")
[08:25:00.566]                       }
[08:25:00.566]                       else if (inherits(cond, "condition")) {
[08:25:00.566]                         if (!is.null(pattern)) {
[08:25:00.566]                           computeRestarts <- base::computeRestarts
[08:25:00.566]                           grepl <- base::grepl
[08:25:00.566]                           restarts <- computeRestarts(cond)
[08:25:00.566]                           for (restart in restarts) {
[08:25:00.566]                             name <- restart$name
[08:25:00.566]                             if (is.null(name)) 
[08:25:00.566]                               next
[08:25:00.566]                             if (!grepl(pattern, name)) 
[08:25:00.566]                               next
[08:25:00.566]                             invokeRestart(restart)
[08:25:00.566]                             muffled <- TRUE
[08:25:00.566]                             break
[08:25:00.566]                           }
[08:25:00.566]                         }
[08:25:00.566]                       }
[08:25:00.566]                       invisible(muffled)
[08:25:00.566]                     }
[08:25:00.566]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.566]                   }
[08:25:00.566]                 }
[08:25:00.566]             }
[08:25:00.566]         }))
[08:25:00.566]     }, error = function(ex) {
[08:25:00.566]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.566]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.566]                 ...future.rng), started = ...future.startTime, 
[08:25:00.566]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.566]             version = "1.8"), class = "FutureResult")
[08:25:00.566]     }, finally = {
[08:25:00.566]         if (!identical(...future.workdir, getwd())) 
[08:25:00.566]             setwd(...future.workdir)
[08:25:00.566]         {
[08:25:00.566]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.566]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.566]             }
[08:25:00.566]             base::options(...future.oldOptions)
[08:25:00.566]             if (.Platform$OS.type == "windows") {
[08:25:00.566]                 old_names <- names(...future.oldEnvVars)
[08:25:00.566]                 envs <- base::Sys.getenv()
[08:25:00.566]                 names <- names(envs)
[08:25:00.566]                 common <- intersect(names, old_names)
[08:25:00.566]                 added <- setdiff(names, old_names)
[08:25:00.566]                 removed <- setdiff(old_names, names)
[08:25:00.566]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.566]                   envs[common]]
[08:25:00.566]                 NAMES <- toupper(changed)
[08:25:00.566]                 args <- list()
[08:25:00.566]                 for (kk in seq_along(NAMES)) {
[08:25:00.566]                   name <- changed[[kk]]
[08:25:00.566]                   NAME <- NAMES[[kk]]
[08:25:00.566]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.566]                     next
[08:25:00.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.566]                 }
[08:25:00.566]                 NAMES <- toupper(added)
[08:25:00.566]                 for (kk in seq_along(NAMES)) {
[08:25:00.566]                   name <- added[[kk]]
[08:25:00.566]                   NAME <- NAMES[[kk]]
[08:25:00.566]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.566]                     next
[08:25:00.566]                   args[[name]] <- ""
[08:25:00.566]                 }
[08:25:00.566]                 NAMES <- toupper(removed)
[08:25:00.566]                 for (kk in seq_along(NAMES)) {
[08:25:00.566]                   name <- removed[[kk]]
[08:25:00.566]                   NAME <- NAMES[[kk]]
[08:25:00.566]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.566]                     next
[08:25:00.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.566]                 }
[08:25:00.566]                 if (length(args) > 0) 
[08:25:00.566]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.566]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.566]             }
[08:25:00.566]             else {
[08:25:00.566]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.566]             }
[08:25:00.566]             {
[08:25:00.566]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.566]                   0L) {
[08:25:00.566]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.566]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.566]                   base::options(opts)
[08:25:00.566]                 }
[08:25:00.566]                 {
[08:25:00.566]                   {
[08:25:00.566]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:00.566]                     NULL
[08:25:00.566]                   }
[08:25:00.566]                   options(future.plan = NULL)
[08:25:00.566]                   if (is.na(NA_character_)) 
[08:25:00.566]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.566]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.566]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.566]                     .init = FALSE)
[08:25:00.566]                 }
[08:25:00.566]             }
[08:25:00.566]         }
[08:25:00.566]     })
[08:25:00.566]     if (TRUE) {
[08:25:00.566]         base::sink(type = "output", split = FALSE)
[08:25:00.566]         if (TRUE) {
[08:25:00.566]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.566]         }
[08:25:00.566]         else {
[08:25:00.566]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.566]         }
[08:25:00.566]         base::close(...future.stdout)
[08:25:00.566]         ...future.stdout <- NULL
[08:25:00.566]     }
[08:25:00.566]     ...future.result$conditions <- ...future.conditions
[08:25:00.566]     ...future.result$finished <- base::Sys.time()
[08:25:00.566]     ...future.result
[08:25:00.566] }
[08:25:00.569] assign_globals() ...
[08:25:00.569] List of 5
[08:25:00.569]  $ ...future.FUN            :function (x, ...)  
[08:25:00.569]  $ future.call.arguments    : list()
[08:25:00.569]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.569]  $ ...future.elements_ii    :List of 1
[08:25:00.569]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[08:25:00.569]  $ ...future.seeds_ii       : NULL
[08:25:00.569]  $ ...future.globals.maxSize: NULL
[08:25:00.569]  - attr(*, "where")=List of 5
[08:25:00.569]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.569]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.569]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.569]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.569]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.569]  - attr(*, "resolved")= logi FALSE
[08:25:00.569]  - attr(*, "total_size")= num 5437
[08:25:00.569]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.569]  - attr(*, "already-done")= logi TRUE
[08:25:00.576] - copied ‘...future.FUN’ to environment
[08:25:00.576] - copied ‘future.call.arguments’ to environment
[08:25:00.576] - copied ‘...future.elements_ii’ to environment
[08:25:00.576] - copied ‘...future.seeds_ii’ to environment
[08:25:00.576] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.576] assign_globals() ... done
[08:25:00.576] requestCore(): workers = 2
[08:25:00.579] MulticoreFuture started
[08:25:00.579] - Launch lazy future ... done
[08:25:00.579] run() for ‘MulticoreFuture’ ... done
[08:25:00.580] Created future:
[08:25:00.580] plan(): Setting new future strategy stack:
[08:25:00.581] List of future strategies:
[08:25:00.581] 1. sequential:
[08:25:00.581]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.581]    - tweaked: FALSE
[08:25:00.581]    - call: NULL
[08:25:00.582] plan(): nbrOfWorkers() = 1
[08:25:00.584] plan(): Setting new future strategy stack:
[08:25:00.585] List of future strategies:
[08:25:00.585] 1. multicore:
[08:25:00.585]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.585]    - tweaked: FALSE
[08:25:00.585]    - call: plan(strategy)
[08:25:00.588] plan(): nbrOfWorkers() = 2
[08:25:00.580] MulticoreFuture:
[08:25:00.580] Label: ‘future_eapply-1’
[08:25:00.580] Expression:
[08:25:00.580] {
[08:25:00.580]     do.call(function(...) {
[08:25:00.580]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.580]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.580]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.580]             on.exit(options(oopts), add = TRUE)
[08:25:00.580]         }
[08:25:00.580]         {
[08:25:00.580]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.580]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.580]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.580]             })
[08:25:00.580]         }
[08:25:00.580]     }, args = future.call.arguments)
[08:25:00.580] }
[08:25:00.580] Lazy evaluation: FALSE
[08:25:00.580] Asynchronous evaluation: TRUE
[08:25:00.580] Local evaluation: TRUE
[08:25:00.580] Environment: R_GlobalEnv
[08:25:00.580] Capture standard output: TRUE
[08:25:00.580] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.580] Globals: 5 objects totaling 563 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.580] Packages: 1 packages (‘stats’)
[08:25:00.580] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.580] Resolved: TRUE
[08:25:00.580] Value: <not collected>
[08:25:00.580] Conditions captured: <none>
[08:25:00.580] Early signaling: FALSE
[08:25:00.580] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.580] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.589] Chunk #1 of 2 ... DONE
[08:25:00.589] Chunk #2 of 2 ...
[08:25:00.590]  - Finding globals in 'X' for chunk #2 ...
[08:25:00.590] getGlobalsAndPackages() ...
[08:25:00.590] Searching for globals...
[08:25:00.591] 
[08:25:00.591] Searching for globals ... DONE
[08:25:00.591] - globals: [0] <none>
[08:25:00.591] getGlobalsAndPackages() ... DONE
[08:25:00.591]    + additional globals found: [n=0] 
[08:25:00.591]    + additional namespaces needed: [n=0] 
[08:25:00.591]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:00.592]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:00.592]  - seeds: <none>
[08:25:00.592]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.592] getGlobalsAndPackages() ...
[08:25:00.592] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.592] Resolving globals: FALSE
[08:25:00.592] Tweak future expression to call with '...' arguments ...
[08:25:00.593] {
[08:25:00.593]     do.call(function(...) {
[08:25:00.593]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.593]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.593]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.593]             on.exit(options(oopts), add = TRUE)
[08:25:00.593]         }
[08:25:00.593]         {
[08:25:00.593]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.593]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.593]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.593]             })
[08:25:00.593]         }
[08:25:00.593]     }, args = future.call.arguments)
[08:25:00.593] }
[08:25:00.593] Tweak future expression to call with '...' arguments ... DONE
[08:25:00.594] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:00.594] - packages: [1] ‘stats’
[08:25:00.594] getGlobalsAndPackages() ... DONE
[08:25:00.595] run() for ‘Future’ ...
[08:25:00.595] - state: ‘created’
[08:25:00.595] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:25:00.598] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.598] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:25:00.598]   - Field: ‘label’
[08:25:00.598]   - Field: ‘local’
[08:25:00.598]   - Field: ‘owner’
[08:25:00.598]   - Field: ‘envir’
[08:25:00.599]   - Field: ‘workers’
[08:25:00.599]   - Field: ‘packages’
[08:25:00.599]   - Field: ‘gc’
[08:25:00.599]   - Field: ‘job’
[08:25:00.599]   - Field: ‘conditions’
[08:25:00.599]   - Field: ‘expr’
[08:25:00.599]   - Field: ‘uuid’
[08:25:00.599]   - Field: ‘seed’
[08:25:00.600]   - Field: ‘version’
[08:25:00.600]   - Field: ‘result’
[08:25:00.600]   - Field: ‘asynchronous’
[08:25:00.600]   - Field: ‘calls’
[08:25:00.600]   - Field: ‘globals’
[08:25:00.600]   - Field: ‘stdout’
[08:25:00.600]   - Field: ‘earlySignal’
[08:25:00.601]   - Field: ‘lazy’
[08:25:00.601]   - Field: ‘state’
[08:25:00.601] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:25:00.601] - Launch lazy future ...
[08:25:00.601] Packages needed by the future expression (n = 1): ‘stats’
[08:25:00.602] Packages needed by future strategies (n = 0): <none>
[08:25:00.602] {
[08:25:00.602]     {
[08:25:00.602]         {
[08:25:00.602]             ...future.startTime <- base::Sys.time()
[08:25:00.602]             {
[08:25:00.602]                 {
[08:25:00.602]                   {
[08:25:00.602]                     {
[08:25:00.602]                       {
[08:25:00.602]                         base::local({
[08:25:00.602]                           has_future <- base::requireNamespace("future", 
[08:25:00.602]                             quietly = TRUE)
[08:25:00.602]                           if (has_future) {
[08:25:00.602]                             ns <- base::getNamespace("future")
[08:25:00.602]                             version <- ns[[".package"]][["version"]]
[08:25:00.602]                             if (is.null(version)) 
[08:25:00.602]                               version <- utils::packageVersion("future")
[08:25:00.602]                           }
[08:25:00.602]                           else {
[08:25:00.602]                             version <- NULL
[08:25:00.602]                           }
[08:25:00.602]                           if (!has_future || version < "1.8.0") {
[08:25:00.602]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:00.602]                               "", base::R.version$version.string), 
[08:25:00.602]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:00.602]                                 base::R.version$platform, 8 * 
[08:25:00.602]                                   base::.Machine$sizeof.pointer), 
[08:25:00.602]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:00.602]                                 "release", "version")], collapse = " "), 
[08:25:00.602]                               hostname = base::Sys.info()[["nodename"]])
[08:25:00.602]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:00.602]                               info)
[08:25:00.602]                             info <- base::paste(info, collapse = "; ")
[08:25:00.602]                             if (!has_future) {
[08:25:00.602]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:00.602]                                 info)
[08:25:00.602]                             }
[08:25:00.602]                             else {
[08:25:00.602]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:00.602]                                 info, version)
[08:25:00.602]                             }
[08:25:00.602]                             base::stop(msg)
[08:25:00.602]                           }
[08:25:00.602]                         })
[08:25:00.602]                       }
[08:25:00.602]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:00.602]                       base::options(mc.cores = 1L)
[08:25:00.602]                     }
[08:25:00.602]                     base::local({
[08:25:00.602]                       for (pkg in "stats") {
[08:25:00.602]                         base::loadNamespace(pkg)
[08:25:00.602]                         base::library(pkg, character.only = TRUE)
[08:25:00.602]                       }
[08:25:00.602]                     })
[08:25:00.602]                   }
[08:25:00.602]                   ...future.strategy.old <- future::plan("list")
[08:25:00.602]                   options(future.plan = NULL)
[08:25:00.602]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.602]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:00.602]                 }
[08:25:00.602]                 ...future.workdir <- getwd()
[08:25:00.602]             }
[08:25:00.602]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:00.602]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:00.602]         }
[08:25:00.602]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:00.602]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:00.602]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:00.602]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:00.602]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:00.602]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:00.602]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:00.602]             base::names(...future.oldOptions))
[08:25:00.602]     }
[08:25:00.602]     if (FALSE) {
[08:25:00.602]     }
[08:25:00.602]     else {
[08:25:00.602]         if (TRUE) {
[08:25:00.602]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:00.602]                 open = "w")
[08:25:00.602]         }
[08:25:00.602]         else {
[08:25:00.602]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:00.602]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:00.602]         }
[08:25:00.602]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:00.602]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:00.602]             base::sink(type = "output", split = FALSE)
[08:25:00.602]             base::close(...future.stdout)
[08:25:00.602]         }, add = TRUE)
[08:25:00.602]     }
[08:25:00.602]     ...future.frame <- base::sys.nframe()
[08:25:00.602]     ...future.conditions <- base::list()
[08:25:00.602]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:00.602]     if (FALSE) {
[08:25:00.602]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:00.602]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:00.602]     }
[08:25:00.602]     ...future.result <- base::tryCatch({
[08:25:00.602]         base::withCallingHandlers({
[08:25:00.602]             ...future.value <- base::withVisible(base::local({
[08:25:00.602]                 withCallingHandlers({
[08:25:00.602]                   {
[08:25:00.602]                     do.call(function(...) {
[08:25:00.602]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.602]                       if (!identical(...future.globals.maxSize.org, 
[08:25:00.602]                         ...future.globals.maxSize)) {
[08:25:00.602]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.602]                         on.exit(options(oopts), add = TRUE)
[08:25:00.602]                       }
[08:25:00.602]                       {
[08:25:00.602]                         lapply(seq_along(...future.elements_ii), 
[08:25:00.602]                           FUN = function(jj) {
[08:25:00.602]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.602]                             ...future.FUN(...future.X_jj, ...)
[08:25:00.602]                           })
[08:25:00.602]                       }
[08:25:00.602]                     }, args = future.call.arguments)
[08:25:00.602]                   }
[08:25:00.602]                 }, immediateCondition = function(cond) {
[08:25:00.602]                   save_rds <- function (object, pathname, ...) 
[08:25:00.602]                   {
[08:25:00.602]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:25:00.602]                     if (file_test("-f", pathname_tmp)) {
[08:25:00.602]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.602]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:25:00.602]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.602]                         fi_tmp[["mtime"]])
[08:25:00.602]                     }
[08:25:00.602]                     tryCatch({
[08:25:00.602]                       saveRDS(object, file = pathname_tmp, ...)
[08:25:00.602]                     }, error = function(ex) {
[08:25:00.602]                       msg <- conditionMessage(ex)
[08:25:00.602]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.602]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:25:00.602]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.602]                         fi_tmp[["mtime"]], msg)
[08:25:00.602]                       ex$message <- msg
[08:25:00.602]                       stop(ex)
[08:25:00.602]                     })
[08:25:00.602]                     stopifnot(file_test("-f", pathname_tmp))
[08:25:00.602]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:25:00.602]                     if (!res || file_test("-f", pathname_tmp)) {
[08:25:00.602]                       fi_tmp <- file.info(pathname_tmp)
[08:25:00.602]                       fi <- file.info(pathname)
[08:25:00.602]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:25:00.602]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:25:00.602]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:25:00.602]                         fi[["size"]], fi[["mtime"]])
[08:25:00.602]                       stop(msg)
[08:25:00.602]                     }
[08:25:00.602]                     invisible(pathname)
[08:25:00.602]                   }
[08:25:00.602]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:25:00.602]                     rootPath = tempdir()) 
[08:25:00.602]                   {
[08:25:00.602]                     obj <- list(time = Sys.time(), condition = cond)
[08:25:00.602]                     file <- tempfile(pattern = class(cond)[1], 
[08:25:00.602]                       tmpdir = path, fileext = ".rds")
[08:25:00.602]                     save_rds(obj, file)
[08:25:00.602]                   }
[08:25:00.602]                   saveImmediateCondition(cond, path = "/tmp/RtmpC5owVr/.future/immediateConditions")
[08:25:00.602]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.602]                   {
[08:25:00.602]                     inherits <- base::inherits
[08:25:00.602]                     invokeRestart <- base::invokeRestart
[08:25:00.602]                     is.null <- base::is.null
[08:25:00.602]                     muffled <- FALSE
[08:25:00.602]                     if (inherits(cond, "message")) {
[08:25:00.602]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:00.602]                       if (muffled) 
[08:25:00.602]                         invokeRestart("muffleMessage")
[08:25:00.602]                     }
[08:25:00.602]                     else if (inherits(cond, "warning")) {
[08:25:00.602]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:00.602]                       if (muffled) 
[08:25:00.602]                         invokeRestart("muffleWarning")
[08:25:00.602]                     }
[08:25:00.602]                     else if (inherits(cond, "condition")) {
[08:25:00.602]                       if (!is.null(pattern)) {
[08:25:00.602]                         computeRestarts <- base::computeRestarts
[08:25:00.602]                         grepl <- base::grepl
[08:25:00.602]                         restarts <- computeRestarts(cond)
[08:25:00.602]                         for (restart in restarts) {
[08:25:00.602]                           name <- restart$name
[08:25:00.602]                           if (is.null(name)) 
[08:25:00.602]                             next
[08:25:00.602]                           if (!grepl(pattern, name)) 
[08:25:00.602]                             next
[08:25:00.602]                           invokeRestart(restart)
[08:25:00.602]                           muffled <- TRUE
[08:25:00.602]                           break
[08:25:00.602]                         }
[08:25:00.602]                       }
[08:25:00.602]                     }
[08:25:00.602]                     invisible(muffled)
[08:25:00.602]                   }
[08:25:00.602]                   muffleCondition(cond)
[08:25:00.602]                 })
[08:25:00.602]             }))
[08:25:00.602]             future::FutureResult(value = ...future.value$value, 
[08:25:00.602]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.602]                   ...future.rng), globalenv = if (FALSE) 
[08:25:00.602]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:00.602]                     ...future.globalenv.names))
[08:25:00.602]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:00.602]         }, condition = base::local({
[08:25:00.602]             c <- base::c
[08:25:00.602]             inherits <- base::inherits
[08:25:00.602]             invokeRestart <- base::invokeRestart
[08:25:00.602]             length <- base::length
[08:25:00.602]             list <- base::list
[08:25:00.602]             seq.int <- base::seq.int
[08:25:00.602]             signalCondition <- base::signalCondition
[08:25:00.602]             sys.calls <- base::sys.calls
[08:25:00.602]             `[[` <- base::`[[`
[08:25:00.602]             `+` <- base::`+`
[08:25:00.602]             `<<-` <- base::`<<-`
[08:25:00.602]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:00.602]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:00.602]                   3L)]
[08:25:00.602]             }
[08:25:00.602]             function(cond) {
[08:25:00.602]                 is_error <- inherits(cond, "error")
[08:25:00.602]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:00.602]                   NULL)
[08:25:00.602]                 if (is_error) {
[08:25:00.602]                   sessionInformation <- function() {
[08:25:00.602]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:00.602]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:00.602]                       search = base::search(), system = base::Sys.info())
[08:25:00.602]                   }
[08:25:00.602]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.602]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:00.602]                     cond$call), session = sessionInformation(), 
[08:25:00.602]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:00.602]                   signalCondition(cond)
[08:25:00.602]                 }
[08:25:00.602]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:00.602]                 "immediateCondition"))) {
[08:25:00.602]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:00.602]                   ...future.conditions[[length(...future.conditions) + 
[08:25:00.602]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:00.602]                   if (TRUE && !signal) {
[08:25:00.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.602]                     {
[08:25:00.602]                       inherits <- base::inherits
[08:25:00.602]                       invokeRestart <- base::invokeRestart
[08:25:00.602]                       is.null <- base::is.null
[08:25:00.602]                       muffled <- FALSE
[08:25:00.602]                       if (inherits(cond, "message")) {
[08:25:00.602]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.602]                         if (muffled) 
[08:25:00.602]                           invokeRestart("muffleMessage")
[08:25:00.602]                       }
[08:25:00.602]                       else if (inherits(cond, "warning")) {
[08:25:00.602]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.602]                         if (muffled) 
[08:25:00.602]                           invokeRestart("muffleWarning")
[08:25:00.602]                       }
[08:25:00.602]                       else if (inherits(cond, "condition")) {
[08:25:00.602]                         if (!is.null(pattern)) {
[08:25:00.602]                           computeRestarts <- base::computeRestarts
[08:25:00.602]                           grepl <- base::grepl
[08:25:00.602]                           restarts <- computeRestarts(cond)
[08:25:00.602]                           for (restart in restarts) {
[08:25:00.602]                             name <- restart$name
[08:25:00.602]                             if (is.null(name)) 
[08:25:00.602]                               next
[08:25:00.602]                             if (!grepl(pattern, name)) 
[08:25:00.602]                               next
[08:25:00.602]                             invokeRestart(restart)
[08:25:00.602]                             muffled <- TRUE
[08:25:00.602]                             break
[08:25:00.602]                           }
[08:25:00.602]                         }
[08:25:00.602]                       }
[08:25:00.602]                       invisible(muffled)
[08:25:00.602]                     }
[08:25:00.602]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.602]                   }
[08:25:00.602]                 }
[08:25:00.602]                 else {
[08:25:00.602]                   if (TRUE) {
[08:25:00.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:00.602]                     {
[08:25:00.602]                       inherits <- base::inherits
[08:25:00.602]                       invokeRestart <- base::invokeRestart
[08:25:00.602]                       is.null <- base::is.null
[08:25:00.602]                       muffled <- FALSE
[08:25:00.602]                       if (inherits(cond, "message")) {
[08:25:00.602]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:00.602]                         if (muffled) 
[08:25:00.602]                           invokeRestart("muffleMessage")
[08:25:00.602]                       }
[08:25:00.602]                       else if (inherits(cond, "warning")) {
[08:25:00.602]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:00.602]                         if (muffled) 
[08:25:00.602]                           invokeRestart("muffleWarning")
[08:25:00.602]                       }
[08:25:00.602]                       else if (inherits(cond, "condition")) {
[08:25:00.602]                         if (!is.null(pattern)) {
[08:25:00.602]                           computeRestarts <- base::computeRestarts
[08:25:00.602]                           grepl <- base::grepl
[08:25:00.602]                           restarts <- computeRestarts(cond)
[08:25:00.602]                           for (restart in restarts) {
[08:25:00.602]                             name <- restart$name
[08:25:00.602]                             if (is.null(name)) 
[08:25:00.602]                               next
[08:25:00.602]                             if (!grepl(pattern, name)) 
[08:25:00.602]                               next
[08:25:00.602]                             invokeRestart(restart)
[08:25:00.602]                             muffled <- TRUE
[08:25:00.602]                             break
[08:25:00.602]                           }
[08:25:00.602]                         }
[08:25:00.602]                       }
[08:25:00.602]                       invisible(muffled)
[08:25:00.602]                     }
[08:25:00.602]                     muffleCondition(cond, pattern = "^muffle")
[08:25:00.602]                   }
[08:25:00.602]                 }
[08:25:00.602]             }
[08:25:00.602]         }))
[08:25:00.602]     }, error = function(ex) {
[08:25:00.602]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:00.602]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:00.602]                 ...future.rng), started = ...future.startTime, 
[08:25:00.602]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:00.602]             version = "1.8"), class = "FutureResult")
[08:25:00.602]     }, finally = {
[08:25:00.602]         if (!identical(...future.workdir, getwd())) 
[08:25:00.602]             setwd(...future.workdir)
[08:25:00.602]         {
[08:25:00.602]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:00.602]                 ...future.oldOptions$nwarnings <- NULL
[08:25:00.602]             }
[08:25:00.602]             base::options(...future.oldOptions)
[08:25:00.602]             if (.Platform$OS.type == "windows") {
[08:25:00.602]                 old_names <- names(...future.oldEnvVars)
[08:25:00.602]                 envs <- base::Sys.getenv()
[08:25:00.602]                 names <- names(envs)
[08:25:00.602]                 common <- intersect(names, old_names)
[08:25:00.602]                 added <- setdiff(names, old_names)
[08:25:00.602]                 removed <- setdiff(old_names, names)
[08:25:00.602]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:00.602]                   envs[common]]
[08:25:00.602]                 NAMES <- toupper(changed)
[08:25:00.602]                 args <- list()
[08:25:00.602]                 for (kk in seq_along(NAMES)) {
[08:25:00.602]                   name <- changed[[kk]]
[08:25:00.602]                   NAME <- NAMES[[kk]]
[08:25:00.602]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.602]                     next
[08:25:00.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.602]                 }
[08:25:00.602]                 NAMES <- toupper(added)
[08:25:00.602]                 for (kk in seq_along(NAMES)) {
[08:25:00.602]                   name <- added[[kk]]
[08:25:00.602]                   NAME <- NAMES[[kk]]
[08:25:00.602]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.602]                     next
[08:25:00.602]                   args[[name]] <- ""
[08:25:00.602]                 }
[08:25:00.602]                 NAMES <- toupper(removed)
[08:25:00.602]                 for (kk in seq_along(NAMES)) {
[08:25:00.602]                   name <- removed[[kk]]
[08:25:00.602]                   NAME <- NAMES[[kk]]
[08:25:00.602]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:00.602]                     next
[08:25:00.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:00.602]                 }
[08:25:00.602]                 if (length(args) > 0) 
[08:25:00.602]                   base::do.call(base::Sys.setenv, args = args)
[08:25:00.602]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:00.602]             }
[08:25:00.602]             else {
[08:25:00.602]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:00.602]             }
[08:25:00.602]             {
[08:25:00.602]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:00.602]                   0L) {
[08:25:00.602]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:00.602]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:00.602]                   base::options(opts)
[08:25:00.602]                 }
[08:25:00.602]                 {
[08:25:00.602]                   {
[08:25:00.602]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:00.602]                     NULL
[08:25:00.602]                   }
[08:25:00.602]                   options(future.plan = NULL)
[08:25:00.602]                   if (is.na(NA_character_)) 
[08:25:00.602]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:00.602]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:00.602]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:00.602]                     .init = FALSE)
[08:25:00.602]                 }
[08:25:00.602]             }
[08:25:00.602]         }
[08:25:00.602]     })
[08:25:00.602]     if (TRUE) {
[08:25:00.602]         base::sink(type = "output", split = FALSE)
[08:25:00.602]         if (TRUE) {
[08:25:00.602]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:00.602]         }
[08:25:00.602]         else {
[08:25:00.602]             ...future.result["stdout"] <- base::list(NULL)
[08:25:00.602]         }
[08:25:00.602]         base::close(...future.stdout)
[08:25:00.602]         ...future.stdout <- NULL
[08:25:00.602]     }
[08:25:00.602]     ...future.result$conditions <- ...future.conditions
[08:25:00.602]     ...future.result$finished <- base::Sys.time()
[08:25:00.602]     ...future.result
[08:25:00.602] }
[08:25:00.606] assign_globals() ...
[08:25:00.606] List of 5
[08:25:00.606]  $ ...future.FUN            :function (x, ...)  
[08:25:00.606]  $ future.call.arguments    : list()
[08:25:00.606]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:00.606]  $ ...future.elements_ii    :List of 2
[08:25:00.606]   ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[08:25:00.606]   ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[08:25:00.606]  $ ...future.seeds_ii       : NULL
[08:25:00.606]  $ ...future.globals.maxSize: NULL
[08:25:00.606]  - attr(*, "where")=List of 5
[08:25:00.606]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[08:25:00.606]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[08:25:00.606]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:25:00.606]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:25:00.606]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:25:00.606]  - attr(*, "resolved")= logi FALSE
[08:25:00.606]  - attr(*, "total_size")= num 5437
[08:25:00.606]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:00.606]  - attr(*, "already-done")= logi TRUE
[08:25:00.614] - copied ‘...future.FUN’ to environment
[08:25:00.614] - copied ‘future.call.arguments’ to environment
[08:25:00.614] - copied ‘...future.elements_ii’ to environment
[08:25:00.614] - copied ‘...future.seeds_ii’ to environment
[08:25:00.614] - copied ‘...future.globals.maxSize’ to environment
[08:25:00.614] assign_globals() ... done
[08:25:00.615] requestCore(): workers = 2
[08:25:00.617] MulticoreFuture started
[08:25:00.617] - Launch lazy future ... done
[08:25:00.617] run() for ‘MulticoreFuture’ ... done
[08:25:00.618] Created future:
[08:25:00.618] plan(): Setting new future strategy stack:
[08:25:00.619] List of future strategies:
[08:25:00.619] 1. sequential:
[08:25:00.619]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.619]    - tweaked: FALSE
[08:25:00.619]    - call: NULL
[08:25:00.620] plan(): nbrOfWorkers() = 1
[08:25:00.622] plan(): Setting new future strategy stack:
[08:25:00.623] List of future strategies:
[08:25:00.623] 1. multicore:
[08:25:00.623]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:25:00.623]    - tweaked: FALSE
[08:25:00.623]    - call: plan(strategy)
[08:25:00.626] plan(): nbrOfWorkers() = 2
[08:25:00.618] MulticoreFuture:
[08:25:00.618] Label: ‘future_eapply-2’
[08:25:00.618] Expression:
[08:25:00.618] {
[08:25:00.618]     do.call(function(...) {
[08:25:00.618]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:00.618]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:00.618]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:00.618]             on.exit(options(oopts), add = TRUE)
[08:25:00.618]         }
[08:25:00.618]         {
[08:25:00.618]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:00.618]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:00.618]                 ...future.FUN(...future.X_jj, ...)
[08:25:00.618]             })
[08:25:00.618]         }
[08:25:00.618]     }, args = future.call.arguments)
[08:25:00.618] }
[08:25:00.618] Lazy evaluation: FALSE
[08:25:00.618] Asynchronous evaluation: TRUE
[08:25:00.618] Local evaluation: TRUE
[08:25:00.618] Environment: R_GlobalEnv
[08:25:00.618] Capture standard output: TRUE
[08:25:00.618] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:00.618] Globals: 5 objects totaling 721 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:00.618] Packages: 1 packages (‘stats’)
[08:25:00.618] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:00.618] Resolved: TRUE
[08:25:00.618] Value: <not collected>
[08:25:00.618] Conditions captured: <none>
[08:25:00.618] Early signaling: FALSE
[08:25:00.618] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:00.618] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:00.627] Chunk #2 of 2 ... DONE
[08:25:00.627] Launching 2 futures (chunks) ... DONE
[08:25:00.627] Resolving 2 futures (chunks) ...
[08:25:00.627] resolve() on list ...
[08:25:00.628]  recursive: 0
[08:25:00.628]  length: 2
[08:25:00.628] 
[08:25:00.628] Future #1
[08:25:00.628] result() for MulticoreFuture ...
[08:25:00.629] result() for MulticoreFuture ...
[08:25:00.630] result() for MulticoreFuture ... done
[08:25:00.630] result() for MulticoreFuture ... done
[08:25:00.630] result() for MulticoreFuture ...
[08:25:00.630] result() for MulticoreFuture ... done
[08:25:00.630] signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:25:00.631] - nx: 2
[08:25:00.631] - relay: TRUE
[08:25:00.631] - stdout: TRUE
[08:25:00.631] - signal: TRUE
[08:25:00.631] - resignal: FALSE
[08:25:00.631] - force: TRUE
[08:25:00.632] - relayed: [n=2] FALSE, FALSE
[08:25:00.632] - queued futures: [n=2] FALSE, FALSE
[08:25:00.636]  - until=1
[08:25:00.636]  - relaying element #1
[08:25:00.637] result() for MulticoreFuture ...
[08:25:00.637] result() for MulticoreFuture ... done
[08:25:00.637] result() for MulticoreFuture ...
[08:25:00.637] result() for MulticoreFuture ... done
[08:25:00.638] result() for MulticoreFuture ...
[08:25:00.638] result() for MulticoreFuture ... done
[08:25:00.638] result() for MulticoreFuture ...
[08:25:00.638] result() for MulticoreFuture ... done
[08:25:00.639] - relayed: [n=2] TRUE, FALSE
[08:25:00.639] - queued futures: [n=2] TRUE, FALSE
[08:25:00.639] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:25:00.640]  length: 1 (resolved future 1)
[08:25:00.640] Future #2
[08:25:00.640] result() for MulticoreFuture ...
[08:25:00.641] result() for MulticoreFuture ...
[08:25:00.642] result() for MulticoreFuture ... done
[08:25:00.642] result() for MulticoreFuture ... done
[08:25:00.642] result() for MulticoreFuture ...
[08:25:00.642] result() for MulticoreFuture ... done
[08:25:00.642] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:25:00.643] - nx: 2
[08:25:00.643] - relay: TRUE
[08:25:00.643] - stdout: TRUE
[08:25:00.643] - signal: TRUE
[08:25:00.643] - resignal: FALSE
[08:25:00.643] - force: TRUE
[08:25:00.643] - relayed: [n=2] TRUE, FALSE
[08:25:00.643] - queued futures: [n=2] TRUE, FALSE
[08:25:00.644]  - until=2
[08:25:00.644]  - relaying element #2
[08:25:00.644] result() for MulticoreFuture ...
[08:25:00.644] result() for MulticoreFuture ... done
[08:25:00.644] result() for MulticoreFuture ...
[08:25:00.644] result() for MulticoreFuture ... done
[08:25:00.644] result() for MulticoreFuture ...
[08:25:00.644] result() for MulticoreFuture ... done
[08:25:00.645] result() for MulticoreFuture ...
[08:25:00.645] result() for MulticoreFuture ... done
[08:25:00.645] - relayed: [n=2] TRUE, TRUE
[08:25:00.645] - queued futures: [n=2] TRUE, TRUE
[08:25:00.645] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:25:00.645]  length: 0 (resolved future 2)
[08:25:00.645] Relaying remaining futures
[08:25:00.645] signalConditionsASAP(NULL, pos=0) ...
[08:25:00.645] - nx: 2
[08:25:00.646] - relay: TRUE
[08:25:00.646] - stdout: TRUE
[08:25:00.646] - signal: TRUE
[08:25:00.646] - resignal: FALSE
[08:25:00.646] - force: TRUE
[08:25:00.646] - relayed: [n=2] TRUE, TRUE
[08:25:00.646] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:00.646] - relayed: [n=2] TRUE, TRUE
[08:25:00.646] - queued futures: [n=2] TRUE, TRUE
[08:25:00.647] signalConditionsASAP(NULL, pos=0) ... done
[08:25:00.647] resolve() on list ... DONE
[08:25:00.647] result() for MulticoreFuture ...
[08:25:00.647] result() for MulticoreFuture ... done
[08:25:00.647] result() for MulticoreFuture ...
[08:25:00.647] result() for MulticoreFuture ... done
[08:25:00.647] result() for MulticoreFuture ...
[08:25:00.647] result() for MulticoreFuture ... done
[08:25:00.647] result() for MulticoreFuture ...
[08:25:00.648] result() for MulticoreFuture ... done
[08:25:00.648]  - Number of value chunks collected: 2
[08:25:00.648] Resolving 2 futures (chunks) ... DONE
[08:25:00.648] Reducing values from 2 chunks ...
[08:25:00.648]  - Number of values collected after concatenation: 3
[08:25:00.648]  - Number of values expected: 3
[08:25:00.648] Reducing values from 2 chunks ... DONE
[08:25:00.648] future_lapply() ... DONE
[08:25:00.649] plan(): Setting new future strategy stack:
[08:25:00.649] List of future strategies:
[08:25:00.649] 1. sequential:
[08:25:00.649]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:00.649]    - tweaked: FALSE
[08:25:00.649]    - call: plan(sequential)
[08:25:00.650] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[08:25:00.650] plan(): Setting new future strategy stack:
[08:25:00.650] List of future strategies:
[08:25:00.650] 1. multisession:
[08:25:00.650]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:25:00.650]    - tweaked: FALSE
[08:25:00.650]    - call: plan(strategy)
[08:25:00.651] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:25:00.651] multisession:
[08:25:00.651] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:25:00.651] - tweaked: FALSE
[08:25:00.651] - call: plan(strategy)
[08:25:00.655] getGlobalsAndPackages() ...
[08:25:00.655] Not searching for globals
[08:25:00.656] - globals: [0] <none>
[08:25:00.656] getGlobalsAndPackages() ... DONE
[08:25:01.145] Packages needed by the future expression (n = 0): <none>
[08:25:01.145] Packages needed by future strategies (n = 0): <none>
[08:25:01.146] {
[08:25:01.146]     {
[08:25:01.146]         {
[08:25:01.146]             ...future.startTime <- base::Sys.time()
[08:25:01.146]             {
[08:25:01.146]                 {
[08:25:01.146]                   {
[08:25:01.146]                     {
[08:25:01.146]                       base::local({
[08:25:01.146]                         has_future <- base::requireNamespace("future", 
[08:25:01.146]                           quietly = TRUE)
[08:25:01.146]                         if (has_future) {
[08:25:01.146]                           ns <- base::getNamespace("future")
[08:25:01.146]                           version <- ns[[".package"]][["version"]]
[08:25:01.146]                           if (is.null(version)) 
[08:25:01.146]                             version <- utils::packageVersion("future")
[08:25:01.146]                         }
[08:25:01.146]                         else {
[08:25:01.146]                           version <- NULL
[08:25:01.146]                         }
[08:25:01.146]                         if (!has_future || version < "1.8.0") {
[08:25:01.146]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.146]                             "", base::R.version$version.string), 
[08:25:01.146]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:01.146]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:01.146]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.146]                               "release", "version")], collapse = " "), 
[08:25:01.146]                             hostname = base::Sys.info()[["nodename"]])
[08:25:01.146]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.146]                             info)
[08:25:01.146]                           info <- base::paste(info, collapse = "; ")
[08:25:01.146]                           if (!has_future) {
[08:25:01.146]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.146]                               info)
[08:25:01.146]                           }
[08:25:01.146]                           else {
[08:25:01.146]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.146]                               info, version)
[08:25:01.146]                           }
[08:25:01.146]                           base::stop(msg)
[08:25:01.146]                         }
[08:25:01.146]                       })
[08:25:01.146]                     }
[08:25:01.146]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.146]                     base::options(mc.cores = 1L)
[08:25:01.146]                   }
[08:25:01.146]                   ...future.strategy.old <- future::plan("list")
[08:25:01.146]                   options(future.plan = NULL)
[08:25:01.146]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.146]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.146]                 }
[08:25:01.146]                 ...future.workdir <- getwd()
[08:25:01.146]             }
[08:25:01.146]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.146]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.146]         }
[08:25:01.146]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.146]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:25:01.146]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.146]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.146]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.146]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.146]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.146]             base::names(...future.oldOptions))
[08:25:01.146]     }
[08:25:01.146]     if (FALSE) {
[08:25:01.146]     }
[08:25:01.146]     else {
[08:25:01.146]         if (TRUE) {
[08:25:01.146]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.146]                 open = "w")
[08:25:01.146]         }
[08:25:01.146]         else {
[08:25:01.146]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.146]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.146]         }
[08:25:01.146]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.146]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.146]             base::sink(type = "output", split = FALSE)
[08:25:01.146]             base::close(...future.stdout)
[08:25:01.146]         }, add = TRUE)
[08:25:01.146]     }
[08:25:01.146]     ...future.frame <- base::sys.nframe()
[08:25:01.146]     ...future.conditions <- base::list()
[08:25:01.146]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.146]     if (FALSE) {
[08:25:01.146]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.146]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.146]     }
[08:25:01.146]     ...future.result <- base::tryCatch({
[08:25:01.146]         base::withCallingHandlers({
[08:25:01.146]             ...future.value <- base::withVisible(base::local({
[08:25:01.146]                 ...future.makeSendCondition <- base::local({
[08:25:01.146]                   sendCondition <- NULL
[08:25:01.146]                   function(frame = 1L) {
[08:25:01.146]                     if (is.function(sendCondition)) 
[08:25:01.146]                       return(sendCondition)
[08:25:01.146]                     ns <- getNamespace("parallel")
[08:25:01.146]                     if (exists("sendData", mode = "function", 
[08:25:01.146]                       envir = ns)) {
[08:25:01.146]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.146]                         envir = ns)
[08:25:01.146]                       envir <- sys.frame(frame)
[08:25:01.146]                       master <- NULL
[08:25:01.146]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.146]                         !identical(envir, emptyenv())) {
[08:25:01.146]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.146]                           inherits = FALSE)) {
[08:25:01.146]                           master <- get("master", mode = "list", 
[08:25:01.146]                             envir = envir, inherits = FALSE)
[08:25:01.146]                           if (inherits(master, c("SOCKnode", 
[08:25:01.146]                             "SOCK0node"))) {
[08:25:01.146]                             sendCondition <<- function(cond) {
[08:25:01.146]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.146]                                 success = TRUE)
[08:25:01.146]                               parallel_sendData(master, data)
[08:25:01.146]                             }
[08:25:01.146]                             return(sendCondition)
[08:25:01.146]                           }
[08:25:01.146]                         }
[08:25:01.146]                         frame <- frame + 1L
[08:25:01.146]                         envir <- sys.frame(frame)
[08:25:01.146]                       }
[08:25:01.146]                     }
[08:25:01.146]                     sendCondition <<- function(cond) NULL
[08:25:01.146]                   }
[08:25:01.146]                 })
[08:25:01.146]                 withCallingHandlers({
[08:25:01.146]                   NA
[08:25:01.146]                 }, immediateCondition = function(cond) {
[08:25:01.146]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.146]                   sendCondition(cond)
[08:25:01.146]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.146]                   {
[08:25:01.146]                     inherits <- base::inherits
[08:25:01.146]                     invokeRestart <- base::invokeRestart
[08:25:01.146]                     is.null <- base::is.null
[08:25:01.146]                     muffled <- FALSE
[08:25:01.146]                     if (inherits(cond, "message")) {
[08:25:01.146]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.146]                       if (muffled) 
[08:25:01.146]                         invokeRestart("muffleMessage")
[08:25:01.146]                     }
[08:25:01.146]                     else if (inherits(cond, "warning")) {
[08:25:01.146]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.146]                       if (muffled) 
[08:25:01.146]                         invokeRestart("muffleWarning")
[08:25:01.146]                     }
[08:25:01.146]                     else if (inherits(cond, "condition")) {
[08:25:01.146]                       if (!is.null(pattern)) {
[08:25:01.146]                         computeRestarts <- base::computeRestarts
[08:25:01.146]                         grepl <- base::grepl
[08:25:01.146]                         restarts <- computeRestarts(cond)
[08:25:01.146]                         for (restart in restarts) {
[08:25:01.146]                           name <- restart$name
[08:25:01.146]                           if (is.null(name)) 
[08:25:01.146]                             next
[08:25:01.146]                           if (!grepl(pattern, name)) 
[08:25:01.146]                             next
[08:25:01.146]                           invokeRestart(restart)
[08:25:01.146]                           muffled <- TRUE
[08:25:01.146]                           break
[08:25:01.146]                         }
[08:25:01.146]                       }
[08:25:01.146]                     }
[08:25:01.146]                     invisible(muffled)
[08:25:01.146]                   }
[08:25:01.146]                   muffleCondition(cond)
[08:25:01.146]                 })
[08:25:01.146]             }))
[08:25:01.146]             future::FutureResult(value = ...future.value$value, 
[08:25:01.146]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.146]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.146]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.146]                     ...future.globalenv.names))
[08:25:01.146]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.146]         }, condition = base::local({
[08:25:01.146]             c <- base::c
[08:25:01.146]             inherits <- base::inherits
[08:25:01.146]             invokeRestart <- base::invokeRestart
[08:25:01.146]             length <- base::length
[08:25:01.146]             list <- base::list
[08:25:01.146]             seq.int <- base::seq.int
[08:25:01.146]             signalCondition <- base::signalCondition
[08:25:01.146]             sys.calls <- base::sys.calls
[08:25:01.146]             `[[` <- base::`[[`
[08:25:01.146]             `+` <- base::`+`
[08:25:01.146]             `<<-` <- base::`<<-`
[08:25:01.146]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.146]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.146]                   3L)]
[08:25:01.146]             }
[08:25:01.146]             function(cond) {
[08:25:01.146]                 is_error <- inherits(cond, "error")
[08:25:01.146]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.146]                   NULL)
[08:25:01.146]                 if (is_error) {
[08:25:01.146]                   sessionInformation <- function() {
[08:25:01.146]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.146]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.146]                       search = base::search(), system = base::Sys.info())
[08:25:01.146]                   }
[08:25:01.146]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.146]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.146]                     cond$call), session = sessionInformation(), 
[08:25:01.146]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.146]                   signalCondition(cond)
[08:25:01.146]                 }
[08:25:01.146]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.146]                 "immediateCondition"))) {
[08:25:01.146]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.146]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.146]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.146]                   if (TRUE && !signal) {
[08:25:01.146]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.146]                     {
[08:25:01.146]                       inherits <- base::inherits
[08:25:01.146]                       invokeRestart <- base::invokeRestart
[08:25:01.146]                       is.null <- base::is.null
[08:25:01.146]                       muffled <- FALSE
[08:25:01.146]                       if (inherits(cond, "message")) {
[08:25:01.146]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.146]                         if (muffled) 
[08:25:01.146]                           invokeRestart("muffleMessage")
[08:25:01.146]                       }
[08:25:01.146]                       else if (inherits(cond, "warning")) {
[08:25:01.146]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.146]                         if (muffled) 
[08:25:01.146]                           invokeRestart("muffleWarning")
[08:25:01.146]                       }
[08:25:01.146]                       else if (inherits(cond, "condition")) {
[08:25:01.146]                         if (!is.null(pattern)) {
[08:25:01.146]                           computeRestarts <- base::computeRestarts
[08:25:01.146]                           grepl <- base::grepl
[08:25:01.146]                           restarts <- computeRestarts(cond)
[08:25:01.146]                           for (restart in restarts) {
[08:25:01.146]                             name <- restart$name
[08:25:01.146]                             if (is.null(name)) 
[08:25:01.146]                               next
[08:25:01.146]                             if (!grepl(pattern, name)) 
[08:25:01.146]                               next
[08:25:01.146]                             invokeRestart(restart)
[08:25:01.146]                             muffled <- TRUE
[08:25:01.146]                             break
[08:25:01.146]                           }
[08:25:01.146]                         }
[08:25:01.146]                       }
[08:25:01.146]                       invisible(muffled)
[08:25:01.146]                     }
[08:25:01.146]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.146]                   }
[08:25:01.146]                 }
[08:25:01.146]                 else {
[08:25:01.146]                   if (TRUE) {
[08:25:01.146]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.146]                     {
[08:25:01.146]                       inherits <- base::inherits
[08:25:01.146]                       invokeRestart <- base::invokeRestart
[08:25:01.146]                       is.null <- base::is.null
[08:25:01.146]                       muffled <- FALSE
[08:25:01.146]                       if (inherits(cond, "message")) {
[08:25:01.146]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.146]                         if (muffled) 
[08:25:01.146]                           invokeRestart("muffleMessage")
[08:25:01.146]                       }
[08:25:01.146]                       else if (inherits(cond, "warning")) {
[08:25:01.146]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.146]                         if (muffled) 
[08:25:01.146]                           invokeRestart("muffleWarning")
[08:25:01.146]                       }
[08:25:01.146]                       else if (inherits(cond, "condition")) {
[08:25:01.146]                         if (!is.null(pattern)) {
[08:25:01.146]                           computeRestarts <- base::computeRestarts
[08:25:01.146]                           grepl <- base::grepl
[08:25:01.146]                           restarts <- computeRestarts(cond)
[08:25:01.146]                           for (restart in restarts) {
[08:25:01.146]                             name <- restart$name
[08:25:01.146]                             if (is.null(name)) 
[08:25:01.146]                               next
[08:25:01.146]                             if (!grepl(pattern, name)) 
[08:25:01.146]                               next
[08:25:01.146]                             invokeRestart(restart)
[08:25:01.146]                             muffled <- TRUE
[08:25:01.146]                             break
[08:25:01.146]                           }
[08:25:01.146]                         }
[08:25:01.146]                       }
[08:25:01.146]                       invisible(muffled)
[08:25:01.146]                     }
[08:25:01.146]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.146]                   }
[08:25:01.146]                 }
[08:25:01.146]             }
[08:25:01.146]         }))
[08:25:01.146]     }, error = function(ex) {
[08:25:01.146]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.146]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.146]                 ...future.rng), started = ...future.startTime, 
[08:25:01.146]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.146]             version = "1.8"), class = "FutureResult")
[08:25:01.146]     }, finally = {
[08:25:01.146]         if (!identical(...future.workdir, getwd())) 
[08:25:01.146]             setwd(...future.workdir)
[08:25:01.146]         {
[08:25:01.146]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.146]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.146]             }
[08:25:01.146]             base::options(...future.oldOptions)
[08:25:01.146]             if (.Platform$OS.type == "windows") {
[08:25:01.146]                 old_names <- names(...future.oldEnvVars)
[08:25:01.146]                 envs <- base::Sys.getenv()
[08:25:01.146]                 names <- names(envs)
[08:25:01.146]                 common <- intersect(names, old_names)
[08:25:01.146]                 added <- setdiff(names, old_names)
[08:25:01.146]                 removed <- setdiff(old_names, names)
[08:25:01.146]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.146]                   envs[common]]
[08:25:01.146]                 NAMES <- toupper(changed)
[08:25:01.146]                 args <- list()
[08:25:01.146]                 for (kk in seq_along(NAMES)) {
[08:25:01.146]                   name <- changed[[kk]]
[08:25:01.146]                   NAME <- NAMES[[kk]]
[08:25:01.146]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.146]                     next
[08:25:01.146]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.146]                 }
[08:25:01.146]                 NAMES <- toupper(added)
[08:25:01.146]                 for (kk in seq_along(NAMES)) {
[08:25:01.146]                   name <- added[[kk]]
[08:25:01.146]                   NAME <- NAMES[[kk]]
[08:25:01.146]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.146]                     next
[08:25:01.146]                   args[[name]] <- ""
[08:25:01.146]                 }
[08:25:01.146]                 NAMES <- toupper(removed)
[08:25:01.146]                 for (kk in seq_along(NAMES)) {
[08:25:01.146]                   name <- removed[[kk]]
[08:25:01.146]                   NAME <- NAMES[[kk]]
[08:25:01.146]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.146]                     next
[08:25:01.146]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.146]                 }
[08:25:01.146]                 if (length(args) > 0) 
[08:25:01.146]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.146]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.146]             }
[08:25:01.146]             else {
[08:25:01.146]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.146]             }
[08:25:01.146]             {
[08:25:01.146]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.146]                   0L) {
[08:25:01.146]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.146]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.146]                   base::options(opts)
[08:25:01.146]                 }
[08:25:01.146]                 {
[08:25:01.146]                   {
[08:25:01.146]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.146]                     NULL
[08:25:01.146]                   }
[08:25:01.146]                   options(future.plan = NULL)
[08:25:01.146]                   if (is.na(NA_character_)) 
[08:25:01.146]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.146]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.146]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.146]                     .init = FALSE)
[08:25:01.146]                 }
[08:25:01.146]             }
[08:25:01.146]         }
[08:25:01.146]     })
[08:25:01.146]     if (TRUE) {
[08:25:01.146]         base::sink(type = "output", split = FALSE)
[08:25:01.146]         if (TRUE) {
[08:25:01.146]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.146]         }
[08:25:01.146]         else {
[08:25:01.146]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.146]         }
[08:25:01.146]         base::close(...future.stdout)
[08:25:01.146]         ...future.stdout <- NULL
[08:25:01.146]     }
[08:25:01.146]     ...future.result$conditions <- ...future.conditions
[08:25:01.146]     ...future.result$finished <- base::Sys.time()
[08:25:01.146]     ...future.result
[08:25:01.146] }
[08:25:01.201] MultisessionFuture started
[08:25:01.202] result() for ClusterFuture ...
[08:25:01.202] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.203] - Validating connection of MultisessionFuture
[08:25:01.234] - received message: FutureResult
[08:25:01.234] - Received FutureResult
[08:25:01.234] - Erased future from FutureRegistry
[08:25:01.234] result() for ClusterFuture ...
[08:25:01.234] - result already collected: FutureResult
[08:25:01.234] result() for ClusterFuture ... done
[08:25:01.234] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.234] result() for ClusterFuture ... done
[08:25:01.235] result() for ClusterFuture ...
[08:25:01.235] - result already collected: FutureResult
[08:25:01.235] result() for ClusterFuture ... done
[08:25:01.235] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:25:01.236] plan(): nbrOfWorkers() = 2
[08:25:01.237] future_lapply() ...
[08:25:01.239] Number of chunks: 2
[08:25:01.239] getGlobalsAndPackagesXApply() ...
[08:25:01.239]  - future.globals: TRUE
[08:25:01.239] getGlobalsAndPackages() ...
[08:25:01.239] Searching for globals...
[08:25:01.240] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:01.240] Searching for globals ... DONE
[08:25:01.240] Resolving globals: FALSE
[08:25:01.241] The total size of the 1 globals is 273 bytes (273 bytes)
[08:25:01.241] The total size of the 1 globals exported for future expression (‘FUN()’) is 273 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (273 bytes of class ‘function’)
[08:25:01.241] - globals: [1] ‘FUN’
[08:25:01.241] 
[08:25:01.241] getGlobalsAndPackages() ... DONE
[08:25:01.241]  - globals found/used: [n=1] ‘FUN’
[08:25:01.241]  - needed namespaces: [n=0] 
[08:25:01.242] Finding globals ... DONE
[08:25:01.242]  - use_args: TRUE
[08:25:01.242]  - Getting '...' globals ...
[08:25:01.242] resolve() on list ...
[08:25:01.242]  recursive: 0
[08:25:01.242]  length: 1
[08:25:01.242]  elements: ‘...’
[08:25:01.242]  length: 0 (resolved future 1)
[08:25:01.243] resolve() on list ... DONE
[08:25:01.243]    - '...' content: [n=0] 
[08:25:01.243] List of 1
[08:25:01.243]  $ ...: list()
[08:25:01.243]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:01.243]  - attr(*, "where")=List of 1
[08:25:01.243]   ..$ ...:<environment: 0x5577ed3233b8> 
[08:25:01.243]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:01.243]  - attr(*, "resolved")= logi TRUE
[08:25:01.243]  - attr(*, "total_size")= num NA
[08:25:01.245]  - Getting '...' globals ... DONE
[08:25:01.245] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:01.246] List of 2
[08:25:01.246]  $ ...future.FUN:function (x, ...)  
[08:25:01.246]  $ ...          : list()
[08:25:01.246]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:01.246]  - attr(*, "where")=List of 2
[08:25:01.246]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:01.246]   ..$ ...          :<environment: 0x5577ed3233b8> 
[08:25:01.246]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:01.246]  - attr(*, "resolved")= logi FALSE
[08:25:01.246]  - attr(*, "total_size")= num 5249
[08:25:01.248] Packages to be attached in all futures: [n=0] 
[08:25:01.248] getGlobalsAndPackagesXApply() ... DONE
[08:25:01.248] Number of futures (= number of chunks): 2
[08:25:01.249] Launching 2 futures (chunks) ...
[08:25:01.249] Chunk #1 of 2 ...
[08:25:01.249]  - Finding globals in 'X' for chunk #1 ...
[08:25:01.249] getGlobalsAndPackages() ...
[08:25:01.249] Searching for globals...
[08:25:01.249] 
[08:25:01.249] Searching for globals ... DONE
[08:25:01.249] - globals: [0] <none>
[08:25:01.249] getGlobalsAndPackages() ... DONE
[08:25:01.250]    + additional globals found: [n=0] 
[08:25:01.250]    + additional namespaces needed: [n=0] 
[08:25:01.250]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:01.250]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:01.250]  - seeds: <none>
[08:25:01.250]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.250] getGlobalsAndPackages() ...
[08:25:01.250] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.250] Resolving globals: FALSE
[08:25:01.250] Tweak future expression to call with '...' arguments ...
[08:25:01.251] {
[08:25:01.251]     do.call(function(...) {
[08:25:01.251]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.251]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.251]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.251]             on.exit(options(oopts), add = TRUE)
[08:25:01.251]         }
[08:25:01.251]         {
[08:25:01.251]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.251]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.251]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.251]             })
[08:25:01.251]         }
[08:25:01.251]     }, args = future.call.arguments)
[08:25:01.251] }
[08:25:01.251] Tweak future expression to call with '...' arguments ... DONE
[08:25:01.251] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.251] 
[08:25:01.251] getGlobalsAndPackages() ... DONE
[08:25:01.252] run() for ‘Future’ ...
[08:25:01.252] - state: ‘created’
[08:25:01.252] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:01.267] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.267] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:01.267]   - Field: ‘node’
[08:25:01.267]   - Field: ‘label’
[08:25:01.267]   - Field: ‘local’
[08:25:01.267]   - Field: ‘owner’
[08:25:01.267]   - Field: ‘envir’
[08:25:01.267]   - Field: ‘workers’
[08:25:01.267]   - Field: ‘packages’
[08:25:01.268]   - Field: ‘gc’
[08:25:01.268]   - Field: ‘conditions’
[08:25:01.268]   - Field: ‘persistent’
[08:25:01.268]   - Field: ‘expr’
[08:25:01.268]   - Field: ‘uuid’
[08:25:01.268]   - Field: ‘seed’
[08:25:01.268]   - Field: ‘version’
[08:25:01.268]   - Field: ‘result’
[08:25:01.268]   - Field: ‘asynchronous’
[08:25:01.269]   - Field: ‘calls’
[08:25:01.269]   - Field: ‘globals’
[08:25:01.269]   - Field: ‘stdout’
[08:25:01.269]   - Field: ‘earlySignal’
[08:25:01.269]   - Field: ‘lazy’
[08:25:01.269]   - Field: ‘state’
[08:25:01.269] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:01.269] - Launch lazy future ...
[08:25:01.270] Packages needed by the future expression (n = 0): <none>
[08:25:01.270] Packages needed by future strategies (n = 0): <none>
[08:25:01.270] {
[08:25:01.270]     {
[08:25:01.270]         {
[08:25:01.270]             ...future.startTime <- base::Sys.time()
[08:25:01.270]             {
[08:25:01.270]                 {
[08:25:01.270]                   {
[08:25:01.270]                     {
[08:25:01.270]                       base::local({
[08:25:01.270]                         has_future <- base::requireNamespace("future", 
[08:25:01.270]                           quietly = TRUE)
[08:25:01.270]                         if (has_future) {
[08:25:01.270]                           ns <- base::getNamespace("future")
[08:25:01.270]                           version <- ns[[".package"]][["version"]]
[08:25:01.270]                           if (is.null(version)) 
[08:25:01.270]                             version <- utils::packageVersion("future")
[08:25:01.270]                         }
[08:25:01.270]                         else {
[08:25:01.270]                           version <- NULL
[08:25:01.270]                         }
[08:25:01.270]                         if (!has_future || version < "1.8.0") {
[08:25:01.270]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.270]                             "", base::R.version$version.string), 
[08:25:01.270]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:01.270]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:01.270]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.270]                               "release", "version")], collapse = " "), 
[08:25:01.270]                             hostname = base::Sys.info()[["nodename"]])
[08:25:01.270]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.270]                             info)
[08:25:01.270]                           info <- base::paste(info, collapse = "; ")
[08:25:01.270]                           if (!has_future) {
[08:25:01.270]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.270]                               info)
[08:25:01.270]                           }
[08:25:01.270]                           else {
[08:25:01.270]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.270]                               info, version)
[08:25:01.270]                           }
[08:25:01.270]                           base::stop(msg)
[08:25:01.270]                         }
[08:25:01.270]                       })
[08:25:01.270]                     }
[08:25:01.270]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.270]                     base::options(mc.cores = 1L)
[08:25:01.270]                   }
[08:25:01.270]                   ...future.strategy.old <- future::plan("list")
[08:25:01.270]                   options(future.plan = NULL)
[08:25:01.270]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.270]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.270]                 }
[08:25:01.270]                 ...future.workdir <- getwd()
[08:25:01.270]             }
[08:25:01.270]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.270]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.270]         }
[08:25:01.270]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.270]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:01.270]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.270]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.270]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.270]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.270]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.270]             base::names(...future.oldOptions))
[08:25:01.270]     }
[08:25:01.270]     if (FALSE) {
[08:25:01.270]     }
[08:25:01.270]     else {
[08:25:01.270]         if (TRUE) {
[08:25:01.270]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.270]                 open = "w")
[08:25:01.270]         }
[08:25:01.270]         else {
[08:25:01.270]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.270]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.270]         }
[08:25:01.270]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.270]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.270]             base::sink(type = "output", split = FALSE)
[08:25:01.270]             base::close(...future.stdout)
[08:25:01.270]         }, add = TRUE)
[08:25:01.270]     }
[08:25:01.270]     ...future.frame <- base::sys.nframe()
[08:25:01.270]     ...future.conditions <- base::list()
[08:25:01.270]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.270]     if (FALSE) {
[08:25:01.270]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.270]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.270]     }
[08:25:01.270]     ...future.result <- base::tryCatch({
[08:25:01.270]         base::withCallingHandlers({
[08:25:01.270]             ...future.value <- base::withVisible(base::local({
[08:25:01.270]                 ...future.makeSendCondition <- base::local({
[08:25:01.270]                   sendCondition <- NULL
[08:25:01.270]                   function(frame = 1L) {
[08:25:01.270]                     if (is.function(sendCondition)) 
[08:25:01.270]                       return(sendCondition)
[08:25:01.270]                     ns <- getNamespace("parallel")
[08:25:01.270]                     if (exists("sendData", mode = "function", 
[08:25:01.270]                       envir = ns)) {
[08:25:01.270]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.270]                         envir = ns)
[08:25:01.270]                       envir <- sys.frame(frame)
[08:25:01.270]                       master <- NULL
[08:25:01.270]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.270]                         !identical(envir, emptyenv())) {
[08:25:01.270]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.270]                           inherits = FALSE)) {
[08:25:01.270]                           master <- get("master", mode = "list", 
[08:25:01.270]                             envir = envir, inherits = FALSE)
[08:25:01.270]                           if (inherits(master, c("SOCKnode", 
[08:25:01.270]                             "SOCK0node"))) {
[08:25:01.270]                             sendCondition <<- function(cond) {
[08:25:01.270]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.270]                                 success = TRUE)
[08:25:01.270]                               parallel_sendData(master, data)
[08:25:01.270]                             }
[08:25:01.270]                             return(sendCondition)
[08:25:01.270]                           }
[08:25:01.270]                         }
[08:25:01.270]                         frame <- frame + 1L
[08:25:01.270]                         envir <- sys.frame(frame)
[08:25:01.270]                       }
[08:25:01.270]                     }
[08:25:01.270]                     sendCondition <<- function(cond) NULL
[08:25:01.270]                   }
[08:25:01.270]                 })
[08:25:01.270]                 withCallingHandlers({
[08:25:01.270]                   {
[08:25:01.270]                     do.call(function(...) {
[08:25:01.270]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.270]                       if (!identical(...future.globals.maxSize.org, 
[08:25:01.270]                         ...future.globals.maxSize)) {
[08:25:01.270]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.270]                         on.exit(options(oopts), add = TRUE)
[08:25:01.270]                       }
[08:25:01.270]                       {
[08:25:01.270]                         lapply(seq_along(...future.elements_ii), 
[08:25:01.270]                           FUN = function(jj) {
[08:25:01.270]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.270]                             ...future.FUN(...future.X_jj, ...)
[08:25:01.270]                           })
[08:25:01.270]                       }
[08:25:01.270]                     }, args = future.call.arguments)
[08:25:01.270]                   }
[08:25:01.270]                 }, immediateCondition = function(cond) {
[08:25:01.270]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.270]                   sendCondition(cond)
[08:25:01.270]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.270]                   {
[08:25:01.270]                     inherits <- base::inherits
[08:25:01.270]                     invokeRestart <- base::invokeRestart
[08:25:01.270]                     is.null <- base::is.null
[08:25:01.270]                     muffled <- FALSE
[08:25:01.270]                     if (inherits(cond, "message")) {
[08:25:01.270]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.270]                       if (muffled) 
[08:25:01.270]                         invokeRestart("muffleMessage")
[08:25:01.270]                     }
[08:25:01.270]                     else if (inherits(cond, "warning")) {
[08:25:01.270]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.270]                       if (muffled) 
[08:25:01.270]                         invokeRestart("muffleWarning")
[08:25:01.270]                     }
[08:25:01.270]                     else if (inherits(cond, "condition")) {
[08:25:01.270]                       if (!is.null(pattern)) {
[08:25:01.270]                         computeRestarts <- base::computeRestarts
[08:25:01.270]                         grepl <- base::grepl
[08:25:01.270]                         restarts <- computeRestarts(cond)
[08:25:01.270]                         for (restart in restarts) {
[08:25:01.270]                           name <- restart$name
[08:25:01.270]                           if (is.null(name)) 
[08:25:01.270]                             next
[08:25:01.270]                           if (!grepl(pattern, name)) 
[08:25:01.270]                             next
[08:25:01.270]                           invokeRestart(restart)
[08:25:01.270]                           muffled <- TRUE
[08:25:01.270]                           break
[08:25:01.270]                         }
[08:25:01.270]                       }
[08:25:01.270]                     }
[08:25:01.270]                     invisible(muffled)
[08:25:01.270]                   }
[08:25:01.270]                   muffleCondition(cond)
[08:25:01.270]                 })
[08:25:01.270]             }))
[08:25:01.270]             future::FutureResult(value = ...future.value$value, 
[08:25:01.270]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.270]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.270]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.270]                     ...future.globalenv.names))
[08:25:01.270]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.270]         }, condition = base::local({
[08:25:01.270]             c <- base::c
[08:25:01.270]             inherits <- base::inherits
[08:25:01.270]             invokeRestart <- base::invokeRestart
[08:25:01.270]             length <- base::length
[08:25:01.270]             list <- base::list
[08:25:01.270]             seq.int <- base::seq.int
[08:25:01.270]             signalCondition <- base::signalCondition
[08:25:01.270]             sys.calls <- base::sys.calls
[08:25:01.270]             `[[` <- base::`[[`
[08:25:01.270]             `+` <- base::`+`
[08:25:01.270]             `<<-` <- base::`<<-`
[08:25:01.270]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.270]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.270]                   3L)]
[08:25:01.270]             }
[08:25:01.270]             function(cond) {
[08:25:01.270]                 is_error <- inherits(cond, "error")
[08:25:01.270]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.270]                   NULL)
[08:25:01.270]                 if (is_error) {
[08:25:01.270]                   sessionInformation <- function() {
[08:25:01.270]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.270]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.270]                       search = base::search(), system = base::Sys.info())
[08:25:01.270]                   }
[08:25:01.270]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.270]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.270]                     cond$call), session = sessionInformation(), 
[08:25:01.270]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.270]                   signalCondition(cond)
[08:25:01.270]                 }
[08:25:01.270]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.270]                 "immediateCondition"))) {
[08:25:01.270]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.270]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.270]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.270]                   if (TRUE && !signal) {
[08:25:01.270]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.270]                     {
[08:25:01.270]                       inherits <- base::inherits
[08:25:01.270]                       invokeRestart <- base::invokeRestart
[08:25:01.270]                       is.null <- base::is.null
[08:25:01.270]                       muffled <- FALSE
[08:25:01.270]                       if (inherits(cond, "message")) {
[08:25:01.270]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.270]                         if (muffled) 
[08:25:01.270]                           invokeRestart("muffleMessage")
[08:25:01.270]                       }
[08:25:01.270]                       else if (inherits(cond, "warning")) {
[08:25:01.270]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.270]                         if (muffled) 
[08:25:01.270]                           invokeRestart("muffleWarning")
[08:25:01.270]                       }
[08:25:01.270]                       else if (inherits(cond, "condition")) {
[08:25:01.270]                         if (!is.null(pattern)) {
[08:25:01.270]                           computeRestarts <- base::computeRestarts
[08:25:01.270]                           grepl <- base::grepl
[08:25:01.270]                           restarts <- computeRestarts(cond)
[08:25:01.270]                           for (restart in restarts) {
[08:25:01.270]                             name <- restart$name
[08:25:01.270]                             if (is.null(name)) 
[08:25:01.270]                               next
[08:25:01.270]                             if (!grepl(pattern, name)) 
[08:25:01.270]                               next
[08:25:01.270]                             invokeRestart(restart)
[08:25:01.270]                             muffled <- TRUE
[08:25:01.270]                             break
[08:25:01.270]                           }
[08:25:01.270]                         }
[08:25:01.270]                       }
[08:25:01.270]                       invisible(muffled)
[08:25:01.270]                     }
[08:25:01.270]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.270]                   }
[08:25:01.270]                 }
[08:25:01.270]                 else {
[08:25:01.270]                   if (TRUE) {
[08:25:01.270]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.270]                     {
[08:25:01.270]                       inherits <- base::inherits
[08:25:01.270]                       invokeRestart <- base::invokeRestart
[08:25:01.270]                       is.null <- base::is.null
[08:25:01.270]                       muffled <- FALSE
[08:25:01.270]                       if (inherits(cond, "message")) {
[08:25:01.270]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.270]                         if (muffled) 
[08:25:01.270]                           invokeRestart("muffleMessage")
[08:25:01.270]                       }
[08:25:01.270]                       else if (inherits(cond, "warning")) {
[08:25:01.270]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.270]                         if (muffled) 
[08:25:01.270]                           invokeRestart("muffleWarning")
[08:25:01.270]                       }
[08:25:01.270]                       else if (inherits(cond, "condition")) {
[08:25:01.270]                         if (!is.null(pattern)) {
[08:25:01.270]                           computeRestarts <- base::computeRestarts
[08:25:01.270]                           grepl <- base::grepl
[08:25:01.270]                           restarts <- computeRestarts(cond)
[08:25:01.270]                           for (restart in restarts) {
[08:25:01.270]                             name <- restart$name
[08:25:01.270]                             if (is.null(name)) 
[08:25:01.270]                               next
[08:25:01.270]                             if (!grepl(pattern, name)) 
[08:25:01.270]                               next
[08:25:01.270]                             invokeRestart(restart)
[08:25:01.270]                             muffled <- TRUE
[08:25:01.270]                             break
[08:25:01.270]                           }
[08:25:01.270]                         }
[08:25:01.270]                       }
[08:25:01.270]                       invisible(muffled)
[08:25:01.270]                     }
[08:25:01.270]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.270]                   }
[08:25:01.270]                 }
[08:25:01.270]             }
[08:25:01.270]         }))
[08:25:01.270]     }, error = function(ex) {
[08:25:01.270]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.270]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.270]                 ...future.rng), started = ...future.startTime, 
[08:25:01.270]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.270]             version = "1.8"), class = "FutureResult")
[08:25:01.270]     }, finally = {
[08:25:01.270]         if (!identical(...future.workdir, getwd())) 
[08:25:01.270]             setwd(...future.workdir)
[08:25:01.270]         {
[08:25:01.270]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.270]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.270]             }
[08:25:01.270]             base::options(...future.oldOptions)
[08:25:01.270]             if (.Platform$OS.type == "windows") {
[08:25:01.270]                 old_names <- names(...future.oldEnvVars)
[08:25:01.270]                 envs <- base::Sys.getenv()
[08:25:01.270]                 names <- names(envs)
[08:25:01.270]                 common <- intersect(names, old_names)
[08:25:01.270]                 added <- setdiff(names, old_names)
[08:25:01.270]                 removed <- setdiff(old_names, names)
[08:25:01.270]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.270]                   envs[common]]
[08:25:01.270]                 NAMES <- toupper(changed)
[08:25:01.270]                 args <- list()
[08:25:01.270]                 for (kk in seq_along(NAMES)) {
[08:25:01.270]                   name <- changed[[kk]]
[08:25:01.270]                   NAME <- NAMES[[kk]]
[08:25:01.270]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.270]                     next
[08:25:01.270]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.270]                 }
[08:25:01.270]                 NAMES <- toupper(added)
[08:25:01.270]                 for (kk in seq_along(NAMES)) {
[08:25:01.270]                   name <- added[[kk]]
[08:25:01.270]                   NAME <- NAMES[[kk]]
[08:25:01.270]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.270]                     next
[08:25:01.270]                   args[[name]] <- ""
[08:25:01.270]                 }
[08:25:01.270]                 NAMES <- toupper(removed)
[08:25:01.270]                 for (kk in seq_along(NAMES)) {
[08:25:01.270]                   name <- removed[[kk]]
[08:25:01.270]                   NAME <- NAMES[[kk]]
[08:25:01.270]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.270]                     next
[08:25:01.270]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.270]                 }
[08:25:01.270]                 if (length(args) > 0) 
[08:25:01.270]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.270]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.270]             }
[08:25:01.270]             else {
[08:25:01.270]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.270]             }
[08:25:01.270]             {
[08:25:01.270]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.270]                   0L) {
[08:25:01.270]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.270]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.270]                   base::options(opts)
[08:25:01.270]                 }
[08:25:01.270]                 {
[08:25:01.270]                   {
[08:25:01.270]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.270]                     NULL
[08:25:01.270]                   }
[08:25:01.270]                   options(future.plan = NULL)
[08:25:01.270]                   if (is.na(NA_character_)) 
[08:25:01.270]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.270]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.270]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.270]                     .init = FALSE)
[08:25:01.270]                 }
[08:25:01.270]             }
[08:25:01.270]         }
[08:25:01.270]     })
[08:25:01.270]     if (TRUE) {
[08:25:01.270]         base::sink(type = "output", split = FALSE)
[08:25:01.270]         if (TRUE) {
[08:25:01.270]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.270]         }
[08:25:01.270]         else {
[08:25:01.270]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.270]         }
[08:25:01.270]         base::close(...future.stdout)
[08:25:01.270]         ...future.stdout <- NULL
[08:25:01.270]     }
[08:25:01.270]     ...future.result$conditions <- ...future.conditions
[08:25:01.270]     ...future.result$finished <- base::Sys.time()
[08:25:01.270]     ...future.result
[08:25:01.270] }
[08:25:01.274] Exporting 5 global objects (942 bytes) to cluster node #1 ...
[08:25:01.274] Exporting ‘...future.FUN’ (273 bytes) to cluster node #1 ...
[08:25:01.275] Exporting ‘...future.FUN’ (273 bytes) to cluster node #1 ... DONE
[08:25:01.275] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:01.275] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:01.275] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ...
[08:25:01.276] Exporting ‘...future.elements_ii’ (55 bytes) to cluster node #1 ... DONE
[08:25:01.276] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #1 ...
[08:25:01.276] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #1 ... DONE
[08:25:01.276] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:01.277] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:01.277] Exporting 5 global objects (942 bytes) to cluster node #1 ... DONE
[08:25:01.278] MultisessionFuture started
[08:25:01.278] - Launch lazy future ... done
[08:25:01.278] run() for ‘MultisessionFuture’ ... done
[08:25:01.278] Created future:
[08:25:01.278] MultisessionFuture:
[08:25:01.278] Label: ‘future_eapply-1’
[08:25:01.278] Expression:
[08:25:01.278] {
[08:25:01.278]     do.call(function(...) {
[08:25:01.278]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.278]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.278]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.278]             on.exit(options(oopts), add = TRUE)
[08:25:01.278]         }
[08:25:01.278]         {
[08:25:01.278]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.278]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.278]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.278]             })
[08:25:01.278]         }
[08:25:01.278]     }, args = future.call.arguments)
[08:25:01.278] }
[08:25:01.278] Lazy evaluation: FALSE
[08:25:01.278] Asynchronous evaluation: TRUE
[08:25:01.278] Local evaluation: TRUE
[08:25:01.278] Environment: R_GlobalEnv
[08:25:01.278] Capture standard output: TRUE
[08:25:01.278] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:01.278] Globals: 5 objects totaling 479 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:01.278] Packages: <none>
[08:25:01.278] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:01.278] Resolved: FALSE
[08:25:01.278] Value: <not collected>
[08:25:01.278] Conditions captured: <none>
[08:25:01.278] Early signaling: FALSE
[08:25:01.278] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:01.278] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.290] Chunk #1 of 2 ... DONE
[08:25:01.290] Chunk #2 of 2 ...
[08:25:01.291]  - Finding globals in 'X' for chunk #2 ...
[08:25:01.291] getGlobalsAndPackages() ...
[08:25:01.291] Searching for globals...
[08:25:01.291] 
[08:25:01.291] Searching for globals ... DONE
[08:25:01.291] - globals: [0] <none>
[08:25:01.291] getGlobalsAndPackages() ... DONE
[08:25:01.292]    + additional globals found: [n=0] 
[08:25:01.292]    + additional namespaces needed: [n=0] 
[08:25:01.292]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:01.292]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:01.292]  - seeds: <none>
[08:25:01.292]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.292] getGlobalsAndPackages() ...
[08:25:01.292] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.293] Resolving globals: FALSE
[08:25:01.293] Tweak future expression to call with '...' arguments ...
[08:25:01.293] {
[08:25:01.293]     do.call(function(...) {
[08:25:01.293]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.293]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.293]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.293]             on.exit(options(oopts), add = TRUE)
[08:25:01.293]         }
[08:25:01.293]         {
[08:25:01.293]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.293]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.293]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.293]             })
[08:25:01.293]         }
[08:25:01.293]     }, args = future.call.arguments)
[08:25:01.293] }
[08:25:01.293] Tweak future expression to call with '...' arguments ... DONE
[08:25:01.294] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.294] 
[08:25:01.294] getGlobalsAndPackages() ... DONE
[08:25:01.294] run() for ‘Future’ ...
[08:25:01.294] - state: ‘created’
[08:25:01.294] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:01.309] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.309] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:01.309]   - Field: ‘node’
[08:25:01.310]   - Field: ‘label’
[08:25:01.310]   - Field: ‘local’
[08:25:01.310]   - Field: ‘owner’
[08:25:01.310]   - Field: ‘envir’
[08:25:01.310]   - Field: ‘workers’
[08:25:01.310]   - Field: ‘packages’
[08:25:01.310]   - Field: ‘gc’
[08:25:01.310]   - Field: ‘conditions’
[08:25:01.310]   - Field: ‘persistent’
[08:25:01.310]   - Field: ‘expr’
[08:25:01.311]   - Field: ‘uuid’
[08:25:01.311]   - Field: ‘seed’
[08:25:01.311]   - Field: ‘version’
[08:25:01.311]   - Field: ‘result’
[08:25:01.311]   - Field: ‘asynchronous’
[08:25:01.311]   - Field: ‘calls’
[08:25:01.311]   - Field: ‘globals’
[08:25:01.311]   - Field: ‘stdout’
[08:25:01.311]   - Field: ‘earlySignal’
[08:25:01.312]   - Field: ‘lazy’
[08:25:01.312]   - Field: ‘state’
[08:25:01.312] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:01.312] - Launch lazy future ...
[08:25:01.312] Packages needed by the future expression (n = 0): <none>
[08:25:01.312] Packages needed by future strategies (n = 0): <none>
[08:25:01.313] {
[08:25:01.313]     {
[08:25:01.313]         {
[08:25:01.313]             ...future.startTime <- base::Sys.time()
[08:25:01.313]             {
[08:25:01.313]                 {
[08:25:01.313]                   {
[08:25:01.313]                     {
[08:25:01.313]                       base::local({
[08:25:01.313]                         has_future <- base::requireNamespace("future", 
[08:25:01.313]                           quietly = TRUE)
[08:25:01.313]                         if (has_future) {
[08:25:01.313]                           ns <- base::getNamespace("future")
[08:25:01.313]                           version <- ns[[".package"]][["version"]]
[08:25:01.313]                           if (is.null(version)) 
[08:25:01.313]                             version <- utils::packageVersion("future")
[08:25:01.313]                         }
[08:25:01.313]                         else {
[08:25:01.313]                           version <- NULL
[08:25:01.313]                         }
[08:25:01.313]                         if (!has_future || version < "1.8.0") {
[08:25:01.313]                           info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.313]                             "", base::R.version$version.string), 
[08:25:01.313]                             platform = base::sprintf("%s (%s-bit)", 
[08:25:01.313]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:25:01.313]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.313]                               "release", "version")], collapse = " "), 
[08:25:01.313]                             hostname = base::Sys.info()[["nodename"]])
[08:25:01.313]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.313]                             info)
[08:25:01.313]                           info <- base::paste(info, collapse = "; ")
[08:25:01.313]                           if (!has_future) {
[08:25:01.313]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.313]                               info)
[08:25:01.313]                           }
[08:25:01.313]                           else {
[08:25:01.313]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.313]                               info, version)
[08:25:01.313]                           }
[08:25:01.313]                           base::stop(msg)
[08:25:01.313]                         }
[08:25:01.313]                       })
[08:25:01.313]                     }
[08:25:01.313]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.313]                     base::options(mc.cores = 1L)
[08:25:01.313]                   }
[08:25:01.313]                   ...future.strategy.old <- future::plan("list")
[08:25:01.313]                   options(future.plan = NULL)
[08:25:01.313]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.313]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.313]                 }
[08:25:01.313]                 ...future.workdir <- getwd()
[08:25:01.313]             }
[08:25:01.313]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.313]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.313]         }
[08:25:01.313]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.313]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:01.313]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.313]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.313]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.313]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.313]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.313]             base::names(...future.oldOptions))
[08:25:01.313]     }
[08:25:01.313]     if (FALSE) {
[08:25:01.313]     }
[08:25:01.313]     else {
[08:25:01.313]         if (TRUE) {
[08:25:01.313]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.313]                 open = "w")
[08:25:01.313]         }
[08:25:01.313]         else {
[08:25:01.313]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.313]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.313]         }
[08:25:01.313]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.313]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.313]             base::sink(type = "output", split = FALSE)
[08:25:01.313]             base::close(...future.stdout)
[08:25:01.313]         }, add = TRUE)
[08:25:01.313]     }
[08:25:01.313]     ...future.frame <- base::sys.nframe()
[08:25:01.313]     ...future.conditions <- base::list()
[08:25:01.313]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.313]     if (FALSE) {
[08:25:01.313]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.313]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.313]     }
[08:25:01.313]     ...future.result <- base::tryCatch({
[08:25:01.313]         base::withCallingHandlers({
[08:25:01.313]             ...future.value <- base::withVisible(base::local({
[08:25:01.313]                 ...future.makeSendCondition <- base::local({
[08:25:01.313]                   sendCondition <- NULL
[08:25:01.313]                   function(frame = 1L) {
[08:25:01.313]                     if (is.function(sendCondition)) 
[08:25:01.313]                       return(sendCondition)
[08:25:01.313]                     ns <- getNamespace("parallel")
[08:25:01.313]                     if (exists("sendData", mode = "function", 
[08:25:01.313]                       envir = ns)) {
[08:25:01.313]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.313]                         envir = ns)
[08:25:01.313]                       envir <- sys.frame(frame)
[08:25:01.313]                       master <- NULL
[08:25:01.313]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.313]                         !identical(envir, emptyenv())) {
[08:25:01.313]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.313]                           inherits = FALSE)) {
[08:25:01.313]                           master <- get("master", mode = "list", 
[08:25:01.313]                             envir = envir, inherits = FALSE)
[08:25:01.313]                           if (inherits(master, c("SOCKnode", 
[08:25:01.313]                             "SOCK0node"))) {
[08:25:01.313]                             sendCondition <<- function(cond) {
[08:25:01.313]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.313]                                 success = TRUE)
[08:25:01.313]                               parallel_sendData(master, data)
[08:25:01.313]                             }
[08:25:01.313]                             return(sendCondition)
[08:25:01.313]                           }
[08:25:01.313]                         }
[08:25:01.313]                         frame <- frame + 1L
[08:25:01.313]                         envir <- sys.frame(frame)
[08:25:01.313]                       }
[08:25:01.313]                     }
[08:25:01.313]                     sendCondition <<- function(cond) NULL
[08:25:01.313]                   }
[08:25:01.313]                 })
[08:25:01.313]                 withCallingHandlers({
[08:25:01.313]                   {
[08:25:01.313]                     do.call(function(...) {
[08:25:01.313]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.313]                       if (!identical(...future.globals.maxSize.org, 
[08:25:01.313]                         ...future.globals.maxSize)) {
[08:25:01.313]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.313]                         on.exit(options(oopts), add = TRUE)
[08:25:01.313]                       }
[08:25:01.313]                       {
[08:25:01.313]                         lapply(seq_along(...future.elements_ii), 
[08:25:01.313]                           FUN = function(jj) {
[08:25:01.313]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.313]                             ...future.FUN(...future.X_jj, ...)
[08:25:01.313]                           })
[08:25:01.313]                       }
[08:25:01.313]                     }, args = future.call.arguments)
[08:25:01.313]                   }
[08:25:01.313]                 }, immediateCondition = function(cond) {
[08:25:01.313]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.313]                   sendCondition(cond)
[08:25:01.313]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.313]                   {
[08:25:01.313]                     inherits <- base::inherits
[08:25:01.313]                     invokeRestart <- base::invokeRestart
[08:25:01.313]                     is.null <- base::is.null
[08:25:01.313]                     muffled <- FALSE
[08:25:01.313]                     if (inherits(cond, "message")) {
[08:25:01.313]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.313]                       if (muffled) 
[08:25:01.313]                         invokeRestart("muffleMessage")
[08:25:01.313]                     }
[08:25:01.313]                     else if (inherits(cond, "warning")) {
[08:25:01.313]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.313]                       if (muffled) 
[08:25:01.313]                         invokeRestart("muffleWarning")
[08:25:01.313]                     }
[08:25:01.313]                     else if (inherits(cond, "condition")) {
[08:25:01.313]                       if (!is.null(pattern)) {
[08:25:01.313]                         computeRestarts <- base::computeRestarts
[08:25:01.313]                         grepl <- base::grepl
[08:25:01.313]                         restarts <- computeRestarts(cond)
[08:25:01.313]                         for (restart in restarts) {
[08:25:01.313]                           name <- restart$name
[08:25:01.313]                           if (is.null(name)) 
[08:25:01.313]                             next
[08:25:01.313]                           if (!grepl(pattern, name)) 
[08:25:01.313]                             next
[08:25:01.313]                           invokeRestart(restart)
[08:25:01.313]                           muffled <- TRUE
[08:25:01.313]                           break
[08:25:01.313]                         }
[08:25:01.313]                       }
[08:25:01.313]                     }
[08:25:01.313]                     invisible(muffled)
[08:25:01.313]                   }
[08:25:01.313]                   muffleCondition(cond)
[08:25:01.313]                 })
[08:25:01.313]             }))
[08:25:01.313]             future::FutureResult(value = ...future.value$value, 
[08:25:01.313]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.313]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.313]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.313]                     ...future.globalenv.names))
[08:25:01.313]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.313]         }, condition = base::local({
[08:25:01.313]             c <- base::c
[08:25:01.313]             inherits <- base::inherits
[08:25:01.313]             invokeRestart <- base::invokeRestart
[08:25:01.313]             length <- base::length
[08:25:01.313]             list <- base::list
[08:25:01.313]             seq.int <- base::seq.int
[08:25:01.313]             signalCondition <- base::signalCondition
[08:25:01.313]             sys.calls <- base::sys.calls
[08:25:01.313]             `[[` <- base::`[[`
[08:25:01.313]             `+` <- base::`+`
[08:25:01.313]             `<<-` <- base::`<<-`
[08:25:01.313]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.313]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.313]                   3L)]
[08:25:01.313]             }
[08:25:01.313]             function(cond) {
[08:25:01.313]                 is_error <- inherits(cond, "error")
[08:25:01.313]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.313]                   NULL)
[08:25:01.313]                 if (is_error) {
[08:25:01.313]                   sessionInformation <- function() {
[08:25:01.313]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.313]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.313]                       search = base::search(), system = base::Sys.info())
[08:25:01.313]                   }
[08:25:01.313]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.313]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.313]                     cond$call), session = sessionInformation(), 
[08:25:01.313]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.313]                   signalCondition(cond)
[08:25:01.313]                 }
[08:25:01.313]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.313]                 "immediateCondition"))) {
[08:25:01.313]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.313]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.313]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.313]                   if (TRUE && !signal) {
[08:25:01.313]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.313]                     {
[08:25:01.313]                       inherits <- base::inherits
[08:25:01.313]                       invokeRestart <- base::invokeRestart
[08:25:01.313]                       is.null <- base::is.null
[08:25:01.313]                       muffled <- FALSE
[08:25:01.313]                       if (inherits(cond, "message")) {
[08:25:01.313]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.313]                         if (muffled) 
[08:25:01.313]                           invokeRestart("muffleMessage")
[08:25:01.313]                       }
[08:25:01.313]                       else if (inherits(cond, "warning")) {
[08:25:01.313]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.313]                         if (muffled) 
[08:25:01.313]                           invokeRestart("muffleWarning")
[08:25:01.313]                       }
[08:25:01.313]                       else if (inherits(cond, "condition")) {
[08:25:01.313]                         if (!is.null(pattern)) {
[08:25:01.313]                           computeRestarts <- base::computeRestarts
[08:25:01.313]                           grepl <- base::grepl
[08:25:01.313]                           restarts <- computeRestarts(cond)
[08:25:01.313]                           for (restart in restarts) {
[08:25:01.313]                             name <- restart$name
[08:25:01.313]                             if (is.null(name)) 
[08:25:01.313]                               next
[08:25:01.313]                             if (!grepl(pattern, name)) 
[08:25:01.313]                               next
[08:25:01.313]                             invokeRestart(restart)
[08:25:01.313]                             muffled <- TRUE
[08:25:01.313]                             break
[08:25:01.313]                           }
[08:25:01.313]                         }
[08:25:01.313]                       }
[08:25:01.313]                       invisible(muffled)
[08:25:01.313]                     }
[08:25:01.313]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.313]                   }
[08:25:01.313]                 }
[08:25:01.313]                 else {
[08:25:01.313]                   if (TRUE) {
[08:25:01.313]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.313]                     {
[08:25:01.313]                       inherits <- base::inherits
[08:25:01.313]                       invokeRestart <- base::invokeRestart
[08:25:01.313]                       is.null <- base::is.null
[08:25:01.313]                       muffled <- FALSE
[08:25:01.313]                       if (inherits(cond, "message")) {
[08:25:01.313]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.313]                         if (muffled) 
[08:25:01.313]                           invokeRestart("muffleMessage")
[08:25:01.313]                       }
[08:25:01.313]                       else if (inherits(cond, "warning")) {
[08:25:01.313]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.313]                         if (muffled) 
[08:25:01.313]                           invokeRestart("muffleWarning")
[08:25:01.313]                       }
[08:25:01.313]                       else if (inherits(cond, "condition")) {
[08:25:01.313]                         if (!is.null(pattern)) {
[08:25:01.313]                           computeRestarts <- base::computeRestarts
[08:25:01.313]                           grepl <- base::grepl
[08:25:01.313]                           restarts <- computeRestarts(cond)
[08:25:01.313]                           for (restart in restarts) {
[08:25:01.313]                             name <- restart$name
[08:25:01.313]                             if (is.null(name)) 
[08:25:01.313]                               next
[08:25:01.313]                             if (!grepl(pattern, name)) 
[08:25:01.313]                               next
[08:25:01.313]                             invokeRestart(restart)
[08:25:01.313]                             muffled <- TRUE
[08:25:01.313]                             break
[08:25:01.313]                           }
[08:25:01.313]                         }
[08:25:01.313]                       }
[08:25:01.313]                       invisible(muffled)
[08:25:01.313]                     }
[08:25:01.313]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.313]                   }
[08:25:01.313]                 }
[08:25:01.313]             }
[08:25:01.313]         }))
[08:25:01.313]     }, error = function(ex) {
[08:25:01.313]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.313]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.313]                 ...future.rng), started = ...future.startTime, 
[08:25:01.313]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.313]             version = "1.8"), class = "FutureResult")
[08:25:01.313]     }, finally = {
[08:25:01.313]         if (!identical(...future.workdir, getwd())) 
[08:25:01.313]             setwd(...future.workdir)
[08:25:01.313]         {
[08:25:01.313]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.313]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.313]             }
[08:25:01.313]             base::options(...future.oldOptions)
[08:25:01.313]             if (.Platform$OS.type == "windows") {
[08:25:01.313]                 old_names <- names(...future.oldEnvVars)
[08:25:01.313]                 envs <- base::Sys.getenv()
[08:25:01.313]                 names <- names(envs)
[08:25:01.313]                 common <- intersect(names, old_names)
[08:25:01.313]                 added <- setdiff(names, old_names)
[08:25:01.313]                 removed <- setdiff(old_names, names)
[08:25:01.313]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.313]                   envs[common]]
[08:25:01.313]                 NAMES <- toupper(changed)
[08:25:01.313]                 args <- list()
[08:25:01.313]                 for (kk in seq_along(NAMES)) {
[08:25:01.313]                   name <- changed[[kk]]
[08:25:01.313]                   NAME <- NAMES[[kk]]
[08:25:01.313]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.313]                     next
[08:25:01.313]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.313]                 }
[08:25:01.313]                 NAMES <- toupper(added)
[08:25:01.313]                 for (kk in seq_along(NAMES)) {
[08:25:01.313]                   name <- added[[kk]]
[08:25:01.313]                   NAME <- NAMES[[kk]]
[08:25:01.313]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.313]                     next
[08:25:01.313]                   args[[name]] <- ""
[08:25:01.313]                 }
[08:25:01.313]                 NAMES <- toupper(removed)
[08:25:01.313]                 for (kk in seq_along(NAMES)) {
[08:25:01.313]                   name <- removed[[kk]]
[08:25:01.313]                   NAME <- NAMES[[kk]]
[08:25:01.313]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.313]                     next
[08:25:01.313]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.313]                 }
[08:25:01.313]                 if (length(args) > 0) 
[08:25:01.313]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.313]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.313]             }
[08:25:01.313]             else {
[08:25:01.313]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.313]             }
[08:25:01.313]             {
[08:25:01.313]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.313]                   0L) {
[08:25:01.313]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.313]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.313]                   base::options(opts)
[08:25:01.313]                 }
[08:25:01.313]                 {
[08:25:01.313]                   {
[08:25:01.313]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.313]                     NULL
[08:25:01.313]                   }
[08:25:01.313]                   options(future.plan = NULL)
[08:25:01.313]                   if (is.na(NA_character_)) 
[08:25:01.313]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.313]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.313]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.313]                     .init = FALSE)
[08:25:01.313]                 }
[08:25:01.313]             }
[08:25:01.313]         }
[08:25:01.313]     })
[08:25:01.313]     if (TRUE) {
[08:25:01.313]         base::sink(type = "output", split = FALSE)
[08:25:01.313]         if (TRUE) {
[08:25:01.313]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.313]         }
[08:25:01.313]         else {
[08:25:01.313]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.313]         }
[08:25:01.313]         base::close(...future.stdout)
[08:25:01.313]         ...future.stdout <- NULL
[08:25:01.313]     }
[08:25:01.313]     ...future.result$conditions <- ...future.conditions
[08:25:01.313]     ...future.result$finished <- base::Sys.time()
[08:25:01.313]     ...future.result
[08:25:01.313] }
[08:25:01.368] Exporting 5 global objects (1.07 KiB) to cluster node #2 ...
[08:25:01.368] Exporting ‘...future.FUN’ (273 bytes) to cluster node #2 ...
[08:25:01.369] Exporting ‘...future.FUN’ (273 bytes) to cluster node #2 ... DONE
[08:25:01.369] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:01.369] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:01.370] Exporting ‘...future.elements_ii’ (205 bytes) to cluster node #2 ...
[08:25:01.370] Exporting ‘...future.elements_ii’ (205 bytes) to cluster node #2 ... DONE
[08:25:01.370] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #2 ...
[08:25:01.370] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #2 ... DONE
[08:25:01.371] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:01.371] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:01.371] Exporting 5 global objects (1.07 KiB) to cluster node #2 ... DONE
[08:25:01.372] MultisessionFuture started
[08:25:01.372] - Launch lazy future ... done
[08:25:01.372] run() for ‘MultisessionFuture’ ... done
[08:25:01.372] Created future:
[08:25:01.372] MultisessionFuture:
[08:25:01.372] Label: ‘future_eapply-2’
[08:25:01.372] Expression:
[08:25:01.372] {
[08:25:01.372]     do.call(function(...) {
[08:25:01.372]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.372]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.372]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.372]             on.exit(options(oopts), add = TRUE)
[08:25:01.372]         }
[08:25:01.372]         {
[08:25:01.372]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.372]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.372]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.372]             })
[08:25:01.372]         }
[08:25:01.372]     }, args = future.call.arguments)
[08:25:01.372] }
[08:25:01.372] Lazy evaluation: FALSE
[08:25:01.372] Asynchronous evaluation: TRUE
[08:25:01.372] Local evaluation: TRUE
[08:25:01.372] Environment: R_GlobalEnv
[08:25:01.372] Capture standard output: TRUE
[08:25:01.372] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:01.372] Globals: 5 objects totaling 629 bytes (function ‘...future.FUN’ of 273 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 205 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:01.372] Packages: <none>
[08:25:01.372] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:01.372] Resolved: FALSE
[08:25:01.372] Value: <not collected>
[08:25:01.372] Conditions captured: <none>
[08:25:01.372] Early signaling: FALSE
[08:25:01.372] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:01.372] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.384] Chunk #2 of 2 ... DONE
[08:25:01.384] Launching 2 futures (chunks) ... DONE
[08:25:01.384] Resolving 2 futures (chunks) ...
[08:25:01.384] resolve() on list ...
[08:25:01.384]  recursive: 0
[08:25:01.385]  length: 2
[08:25:01.385] 
[08:25:01.385] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.385] - Validating connection of MultisessionFuture
[08:25:01.386] - received message: FutureResult
[08:25:01.386] - Received FutureResult
[08:25:01.386] - Erased future from FutureRegistry
[08:25:01.386] result() for ClusterFuture ...
[08:25:01.386] - result already collected: FutureResult
[08:25:01.386] result() for ClusterFuture ... done
[08:25:01.386] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.386] Future #1
[08:25:01.387] result() for ClusterFuture ...
[08:25:01.387] - result already collected: FutureResult
[08:25:01.387] result() for ClusterFuture ... done
[08:25:01.387] result() for ClusterFuture ...
[08:25:01.387] - result already collected: FutureResult
[08:25:01.387] result() for ClusterFuture ... done
[08:25:01.387] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:01.387] - nx: 2
[08:25:01.387] - relay: TRUE
[08:25:01.387] - stdout: TRUE
[08:25:01.388] - signal: TRUE
[08:25:01.388] - resignal: FALSE
[08:25:01.388] - force: TRUE
[08:25:01.388] - relayed: [n=2] FALSE, FALSE
[08:25:01.388] - queued futures: [n=2] FALSE, FALSE
[08:25:01.388]  - until=1
[08:25:01.388]  - relaying element #1
[08:25:01.388] result() for ClusterFuture ...
[08:25:01.388] - result already collected: FutureResult
[08:25:01.389] result() for ClusterFuture ... done
[08:25:01.389] result() for ClusterFuture ...
[08:25:01.389] - result already collected: FutureResult
[08:25:01.389] result() for ClusterFuture ... done
[08:25:01.389] result() for ClusterFuture ...
[08:25:01.389] - result already collected: FutureResult
[08:25:01.389] result() for ClusterFuture ... done
[08:25:01.389] result() for ClusterFuture ...
[08:25:01.389] - result already collected: FutureResult
[08:25:01.389] result() for ClusterFuture ... done
[08:25:01.390] - relayed: [n=2] TRUE, FALSE
[08:25:01.390] - queued futures: [n=2] TRUE, FALSE
[08:25:01.390] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:01.390]  length: 1 (resolved future 1)
[08:25:01.453] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.453] - Validating connection of MultisessionFuture
[08:25:01.453] - received message: FutureResult
[08:25:01.453] - Received FutureResult
[08:25:01.454] - Erased future from FutureRegistry
[08:25:01.454] result() for ClusterFuture ...
[08:25:01.454] - result already collected: FutureResult
[08:25:01.454] result() for ClusterFuture ... done
[08:25:01.454] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.454] Future #2
[08:25:01.454] result() for ClusterFuture ...
[08:25:01.454] - result already collected: FutureResult
[08:25:01.454] result() for ClusterFuture ... done
[08:25:01.455] result() for ClusterFuture ...
[08:25:01.455] - result already collected: FutureResult
[08:25:01.455] result() for ClusterFuture ... done
[08:25:01.455] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:01.455] - nx: 2
[08:25:01.455] - relay: TRUE
[08:25:01.455] - stdout: TRUE
[08:25:01.455] - signal: TRUE
[08:25:01.455] - resignal: FALSE
[08:25:01.455] - force: TRUE
[08:25:01.456] - relayed: [n=2] TRUE, FALSE
[08:25:01.456] - queued futures: [n=2] TRUE, FALSE
[08:25:01.456]  - until=2
[08:25:01.456]  - relaying element #2
[08:25:01.456] result() for ClusterFuture ...
[08:25:01.456] - result already collected: FutureResult
[08:25:01.456] result() for ClusterFuture ... done
[08:25:01.456] result() for ClusterFuture ...
[08:25:01.456] - result already collected: FutureResult
[08:25:01.456] result() for ClusterFuture ... done
[08:25:01.457] result() for ClusterFuture ...
[08:25:01.457] - result already collected: FutureResult
[08:25:01.457] result() for ClusterFuture ... done
[08:25:01.457] result() for ClusterFuture ...
[08:25:01.457] - result already collected: FutureResult
[08:25:01.457] result() for ClusterFuture ... done
[08:25:01.457] - relayed: [n=2] TRUE, TRUE
[08:25:01.457] - queued futures: [n=2] TRUE, TRUE
[08:25:01.457] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:01.458]  length: 0 (resolved future 2)
[08:25:01.458] Relaying remaining futures
[08:25:01.458] signalConditionsASAP(NULL, pos=0) ...
[08:25:01.458] - nx: 2
[08:25:01.458] - relay: TRUE
[08:25:01.458] - stdout: TRUE
[08:25:01.458] - signal: TRUE
[08:25:01.458] - resignal: FALSE
[08:25:01.458] - force: TRUE
[08:25:01.458] - relayed: [n=2] TRUE, TRUE
[08:25:01.459] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:01.459] - relayed: [n=2] TRUE, TRUE
[08:25:01.459] - queued futures: [n=2] TRUE, TRUE
[08:25:01.459] signalConditionsASAP(NULL, pos=0) ... done
[08:25:01.459] resolve() on list ... DONE
[08:25:01.459] result() for ClusterFuture ...
[08:25:01.459] - result already collected: FutureResult
[08:25:01.459] result() for ClusterFuture ... done
[08:25:01.459] result() for ClusterFuture ...
[08:25:01.460] - result already collected: FutureResult
[08:25:01.460] result() for ClusterFuture ... done
[08:25:01.460] result() for ClusterFuture ...
[08:25:01.460] - result already collected: FutureResult
[08:25:01.460] result() for ClusterFuture ... done
[08:25:01.460] result() for ClusterFuture ...
[08:25:01.460] - result already collected: FutureResult
[08:25:01.460] result() for ClusterFuture ... done
[08:25:01.460]  - Number of value chunks collected: 2
[08:25:01.461] Resolving 2 futures (chunks) ... DONE
[08:25:01.461] Reducing values from 2 chunks ...
[08:25:01.461]  - Number of values collected after concatenation: 3
[08:25:01.461]  - Number of values expected: 3
[08:25:01.461] Reducing values from 2 chunks ... DONE
[08:25:01.461] future_lapply() ... DONE
[08:25:01.462] future_lapply() ...
[08:25:01.464] Number of chunks: 2
[08:25:01.464] getGlobalsAndPackagesXApply() ...
[08:25:01.465]  - future.globals: TRUE
[08:25:01.465] getGlobalsAndPackages() ...
[08:25:01.465] Searching for globals...
[08:25:01.466] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:01.466] Searching for globals ... DONE
[08:25:01.466] Resolving globals: FALSE
[08:25:01.467] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:01.467] The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:01.467] - globals: [1] ‘FUN’
[08:25:01.468] - packages: [1] ‘stats’
[08:25:01.468] getGlobalsAndPackages() ... DONE
[08:25:01.468]  - globals found/used: [n=1] ‘FUN’
[08:25:01.468]  - needed namespaces: [n=1] ‘stats’
[08:25:01.468] Finding globals ... DONE
[08:25:01.468]  - use_args: TRUE
[08:25:01.468]  - Getting '...' globals ...
[08:25:01.469] resolve() on list ...
[08:25:01.469]  recursive: 0
[08:25:01.469]  length: 1
[08:25:01.469]  elements: ‘...’
[08:25:01.469]  length: 0 (resolved future 1)
[08:25:01.469] resolve() on list ... DONE
[08:25:01.469]    - '...' content: [n=1] ‘probs’
[08:25:01.469] List of 1
[08:25:01.469]  $ ...:List of 1
[08:25:01.469]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:01.469]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:01.469]  - attr(*, "where")=List of 1
[08:25:01.469]   ..$ ...:<environment: 0x5577ef3ca800> 
[08:25:01.469]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:01.469]  - attr(*, "resolved")= logi TRUE
[08:25:01.469]  - attr(*, "total_size")= num NA
[08:25:01.473]  - Getting '...' globals ... DONE
[08:25:01.473] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:01.473] List of 2
[08:25:01.473]  $ ...future.FUN:function (x, ...)  
[08:25:01.473]  $ ...          :List of 1
[08:25:01.473]   ..$ probs: num [1:3] 0.25 0.5 0.75
[08:25:01.473]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:01.473]  - attr(*, "where")=List of 2
[08:25:01.473]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:01.473]   ..$ ...          :<environment: 0x5577ef3ca800> 
[08:25:01.473]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:01.473]  - attr(*, "resolved")= logi FALSE
[08:25:01.473]  - attr(*, "total_size")= num 6525
[08:25:01.477] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:01.477] getGlobalsAndPackagesXApply() ... DONE
[08:25:01.478] Number of futures (= number of chunks): 2
[08:25:01.478] Launching 2 futures (chunks) ...
[08:25:01.478] Chunk #1 of 2 ...
[08:25:01.478]  - Finding globals in 'X' for chunk #1 ...
[08:25:01.478] getGlobalsAndPackages() ...
[08:25:01.478] Searching for globals...
[08:25:01.479] 
[08:25:01.479] Searching for globals ... DONE
[08:25:01.479] - globals: [0] <none>
[08:25:01.479] getGlobalsAndPackages() ... DONE
[08:25:01.479]    + additional globals found: [n=0] 
[08:25:01.479]    + additional namespaces needed: [n=0] 
[08:25:01.479]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:01.479]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:01.479]  - seeds: <none>
[08:25:01.479]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.480] getGlobalsAndPackages() ...
[08:25:01.482] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.482] Resolving globals: FALSE
[08:25:01.482] Tweak future expression to call with '...' arguments ...
[08:25:01.483] {
[08:25:01.483]     do.call(function(...) {
[08:25:01.483]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.483]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.483]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.483]             on.exit(options(oopts), add = TRUE)
[08:25:01.483]         }
[08:25:01.483]         {
[08:25:01.483]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.483]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.483]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.483]             })
[08:25:01.483]         }
[08:25:01.483]     }, args = future.call.arguments)
[08:25:01.483] }
[08:25:01.483] Tweak future expression to call with '...' arguments ... DONE
[08:25:01.483] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.483] - packages: [1] ‘stats’
[08:25:01.483] getGlobalsAndPackages() ... DONE
[08:25:01.484] run() for ‘Future’ ...
[08:25:01.484] - state: ‘created’
[08:25:01.484] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:01.498] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.498] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:01.498]   - Field: ‘node’
[08:25:01.498]   - Field: ‘label’
[08:25:01.498]   - Field: ‘local’
[08:25:01.498]   - Field: ‘owner’
[08:25:01.499]   - Field: ‘envir’
[08:25:01.499]   - Field: ‘workers’
[08:25:01.499]   - Field: ‘packages’
[08:25:01.499]   - Field: ‘gc’
[08:25:01.499]   - Field: ‘conditions’
[08:25:01.499]   - Field: ‘persistent’
[08:25:01.499]   - Field: ‘expr’
[08:25:01.499]   - Field: ‘uuid’
[08:25:01.499]   - Field: ‘seed’
[08:25:01.499]   - Field: ‘version’
[08:25:01.499]   - Field: ‘result’
[08:25:01.499]   - Field: ‘asynchronous’
[08:25:01.500]   - Field: ‘calls’
[08:25:01.500]   - Field: ‘globals’
[08:25:01.500]   - Field: ‘stdout’
[08:25:01.500]   - Field: ‘earlySignal’
[08:25:01.500]   - Field: ‘lazy’
[08:25:01.500]   - Field: ‘state’
[08:25:01.500] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:01.500] - Launch lazy future ...
[08:25:01.500] Packages needed by the future expression (n = 1): ‘stats’
[08:25:01.501] Packages needed by future strategies (n = 0): <none>
[08:25:01.501] {
[08:25:01.501]     {
[08:25:01.501]         {
[08:25:01.501]             ...future.startTime <- base::Sys.time()
[08:25:01.501]             {
[08:25:01.501]                 {
[08:25:01.501]                   {
[08:25:01.501]                     {
[08:25:01.501]                       {
[08:25:01.501]                         base::local({
[08:25:01.501]                           has_future <- base::requireNamespace("future", 
[08:25:01.501]                             quietly = TRUE)
[08:25:01.501]                           if (has_future) {
[08:25:01.501]                             ns <- base::getNamespace("future")
[08:25:01.501]                             version <- ns[[".package"]][["version"]]
[08:25:01.501]                             if (is.null(version)) 
[08:25:01.501]                               version <- utils::packageVersion("future")
[08:25:01.501]                           }
[08:25:01.501]                           else {
[08:25:01.501]                             version <- NULL
[08:25:01.501]                           }
[08:25:01.501]                           if (!has_future || version < "1.8.0") {
[08:25:01.501]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.501]                               "", base::R.version$version.string), 
[08:25:01.501]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:01.501]                                 base::R.version$platform, 8 * 
[08:25:01.501]                                   base::.Machine$sizeof.pointer), 
[08:25:01.501]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.501]                                 "release", "version")], collapse = " "), 
[08:25:01.501]                               hostname = base::Sys.info()[["nodename"]])
[08:25:01.501]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.501]                               info)
[08:25:01.501]                             info <- base::paste(info, collapse = "; ")
[08:25:01.501]                             if (!has_future) {
[08:25:01.501]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.501]                                 info)
[08:25:01.501]                             }
[08:25:01.501]                             else {
[08:25:01.501]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.501]                                 info, version)
[08:25:01.501]                             }
[08:25:01.501]                             base::stop(msg)
[08:25:01.501]                           }
[08:25:01.501]                         })
[08:25:01.501]                       }
[08:25:01.501]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.501]                       base::options(mc.cores = 1L)
[08:25:01.501]                     }
[08:25:01.501]                     base::local({
[08:25:01.501]                       for (pkg in "stats") {
[08:25:01.501]                         base::loadNamespace(pkg)
[08:25:01.501]                         base::library(pkg, character.only = TRUE)
[08:25:01.501]                       }
[08:25:01.501]                     })
[08:25:01.501]                   }
[08:25:01.501]                   ...future.strategy.old <- future::plan("list")
[08:25:01.501]                   options(future.plan = NULL)
[08:25:01.501]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.501]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.501]                 }
[08:25:01.501]                 ...future.workdir <- getwd()
[08:25:01.501]             }
[08:25:01.501]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.501]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.501]         }
[08:25:01.501]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.501]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:01.501]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.501]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.501]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.501]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.501]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.501]             base::names(...future.oldOptions))
[08:25:01.501]     }
[08:25:01.501]     if (FALSE) {
[08:25:01.501]     }
[08:25:01.501]     else {
[08:25:01.501]         if (TRUE) {
[08:25:01.501]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.501]                 open = "w")
[08:25:01.501]         }
[08:25:01.501]         else {
[08:25:01.501]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.501]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.501]         }
[08:25:01.501]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.501]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.501]             base::sink(type = "output", split = FALSE)
[08:25:01.501]             base::close(...future.stdout)
[08:25:01.501]         }, add = TRUE)
[08:25:01.501]     }
[08:25:01.501]     ...future.frame <- base::sys.nframe()
[08:25:01.501]     ...future.conditions <- base::list()
[08:25:01.501]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.501]     if (FALSE) {
[08:25:01.501]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.501]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.501]     }
[08:25:01.501]     ...future.result <- base::tryCatch({
[08:25:01.501]         base::withCallingHandlers({
[08:25:01.501]             ...future.value <- base::withVisible(base::local({
[08:25:01.501]                 ...future.makeSendCondition <- base::local({
[08:25:01.501]                   sendCondition <- NULL
[08:25:01.501]                   function(frame = 1L) {
[08:25:01.501]                     if (is.function(sendCondition)) 
[08:25:01.501]                       return(sendCondition)
[08:25:01.501]                     ns <- getNamespace("parallel")
[08:25:01.501]                     if (exists("sendData", mode = "function", 
[08:25:01.501]                       envir = ns)) {
[08:25:01.501]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.501]                         envir = ns)
[08:25:01.501]                       envir <- sys.frame(frame)
[08:25:01.501]                       master <- NULL
[08:25:01.501]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.501]                         !identical(envir, emptyenv())) {
[08:25:01.501]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.501]                           inherits = FALSE)) {
[08:25:01.501]                           master <- get("master", mode = "list", 
[08:25:01.501]                             envir = envir, inherits = FALSE)
[08:25:01.501]                           if (inherits(master, c("SOCKnode", 
[08:25:01.501]                             "SOCK0node"))) {
[08:25:01.501]                             sendCondition <<- function(cond) {
[08:25:01.501]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.501]                                 success = TRUE)
[08:25:01.501]                               parallel_sendData(master, data)
[08:25:01.501]                             }
[08:25:01.501]                             return(sendCondition)
[08:25:01.501]                           }
[08:25:01.501]                         }
[08:25:01.501]                         frame <- frame + 1L
[08:25:01.501]                         envir <- sys.frame(frame)
[08:25:01.501]                       }
[08:25:01.501]                     }
[08:25:01.501]                     sendCondition <<- function(cond) NULL
[08:25:01.501]                   }
[08:25:01.501]                 })
[08:25:01.501]                 withCallingHandlers({
[08:25:01.501]                   {
[08:25:01.501]                     do.call(function(...) {
[08:25:01.501]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.501]                       if (!identical(...future.globals.maxSize.org, 
[08:25:01.501]                         ...future.globals.maxSize)) {
[08:25:01.501]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.501]                         on.exit(options(oopts), add = TRUE)
[08:25:01.501]                       }
[08:25:01.501]                       {
[08:25:01.501]                         lapply(seq_along(...future.elements_ii), 
[08:25:01.501]                           FUN = function(jj) {
[08:25:01.501]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.501]                             ...future.FUN(...future.X_jj, ...)
[08:25:01.501]                           })
[08:25:01.501]                       }
[08:25:01.501]                     }, args = future.call.arguments)
[08:25:01.501]                   }
[08:25:01.501]                 }, immediateCondition = function(cond) {
[08:25:01.501]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.501]                   sendCondition(cond)
[08:25:01.501]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.501]                   {
[08:25:01.501]                     inherits <- base::inherits
[08:25:01.501]                     invokeRestart <- base::invokeRestart
[08:25:01.501]                     is.null <- base::is.null
[08:25:01.501]                     muffled <- FALSE
[08:25:01.501]                     if (inherits(cond, "message")) {
[08:25:01.501]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.501]                       if (muffled) 
[08:25:01.501]                         invokeRestart("muffleMessage")
[08:25:01.501]                     }
[08:25:01.501]                     else if (inherits(cond, "warning")) {
[08:25:01.501]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.501]                       if (muffled) 
[08:25:01.501]                         invokeRestart("muffleWarning")
[08:25:01.501]                     }
[08:25:01.501]                     else if (inherits(cond, "condition")) {
[08:25:01.501]                       if (!is.null(pattern)) {
[08:25:01.501]                         computeRestarts <- base::computeRestarts
[08:25:01.501]                         grepl <- base::grepl
[08:25:01.501]                         restarts <- computeRestarts(cond)
[08:25:01.501]                         for (restart in restarts) {
[08:25:01.501]                           name <- restart$name
[08:25:01.501]                           if (is.null(name)) 
[08:25:01.501]                             next
[08:25:01.501]                           if (!grepl(pattern, name)) 
[08:25:01.501]                             next
[08:25:01.501]                           invokeRestart(restart)
[08:25:01.501]                           muffled <- TRUE
[08:25:01.501]                           break
[08:25:01.501]                         }
[08:25:01.501]                       }
[08:25:01.501]                     }
[08:25:01.501]                     invisible(muffled)
[08:25:01.501]                   }
[08:25:01.501]                   muffleCondition(cond)
[08:25:01.501]                 })
[08:25:01.501]             }))
[08:25:01.501]             future::FutureResult(value = ...future.value$value, 
[08:25:01.501]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.501]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.501]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.501]                     ...future.globalenv.names))
[08:25:01.501]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.501]         }, condition = base::local({
[08:25:01.501]             c <- base::c
[08:25:01.501]             inherits <- base::inherits
[08:25:01.501]             invokeRestart <- base::invokeRestart
[08:25:01.501]             length <- base::length
[08:25:01.501]             list <- base::list
[08:25:01.501]             seq.int <- base::seq.int
[08:25:01.501]             signalCondition <- base::signalCondition
[08:25:01.501]             sys.calls <- base::sys.calls
[08:25:01.501]             `[[` <- base::`[[`
[08:25:01.501]             `+` <- base::`+`
[08:25:01.501]             `<<-` <- base::`<<-`
[08:25:01.501]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.501]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.501]                   3L)]
[08:25:01.501]             }
[08:25:01.501]             function(cond) {
[08:25:01.501]                 is_error <- inherits(cond, "error")
[08:25:01.501]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.501]                   NULL)
[08:25:01.501]                 if (is_error) {
[08:25:01.501]                   sessionInformation <- function() {
[08:25:01.501]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.501]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.501]                       search = base::search(), system = base::Sys.info())
[08:25:01.501]                   }
[08:25:01.501]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.501]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.501]                     cond$call), session = sessionInformation(), 
[08:25:01.501]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.501]                   signalCondition(cond)
[08:25:01.501]                 }
[08:25:01.501]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.501]                 "immediateCondition"))) {
[08:25:01.501]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.501]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.501]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.501]                   if (TRUE && !signal) {
[08:25:01.501]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.501]                     {
[08:25:01.501]                       inherits <- base::inherits
[08:25:01.501]                       invokeRestart <- base::invokeRestart
[08:25:01.501]                       is.null <- base::is.null
[08:25:01.501]                       muffled <- FALSE
[08:25:01.501]                       if (inherits(cond, "message")) {
[08:25:01.501]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.501]                         if (muffled) 
[08:25:01.501]                           invokeRestart("muffleMessage")
[08:25:01.501]                       }
[08:25:01.501]                       else if (inherits(cond, "warning")) {
[08:25:01.501]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.501]                         if (muffled) 
[08:25:01.501]                           invokeRestart("muffleWarning")
[08:25:01.501]                       }
[08:25:01.501]                       else if (inherits(cond, "condition")) {
[08:25:01.501]                         if (!is.null(pattern)) {
[08:25:01.501]                           computeRestarts <- base::computeRestarts
[08:25:01.501]                           grepl <- base::grepl
[08:25:01.501]                           restarts <- computeRestarts(cond)
[08:25:01.501]                           for (restart in restarts) {
[08:25:01.501]                             name <- restart$name
[08:25:01.501]                             if (is.null(name)) 
[08:25:01.501]                               next
[08:25:01.501]                             if (!grepl(pattern, name)) 
[08:25:01.501]                               next
[08:25:01.501]                             invokeRestart(restart)
[08:25:01.501]                             muffled <- TRUE
[08:25:01.501]                             break
[08:25:01.501]                           }
[08:25:01.501]                         }
[08:25:01.501]                       }
[08:25:01.501]                       invisible(muffled)
[08:25:01.501]                     }
[08:25:01.501]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.501]                   }
[08:25:01.501]                 }
[08:25:01.501]                 else {
[08:25:01.501]                   if (TRUE) {
[08:25:01.501]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.501]                     {
[08:25:01.501]                       inherits <- base::inherits
[08:25:01.501]                       invokeRestart <- base::invokeRestart
[08:25:01.501]                       is.null <- base::is.null
[08:25:01.501]                       muffled <- FALSE
[08:25:01.501]                       if (inherits(cond, "message")) {
[08:25:01.501]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.501]                         if (muffled) 
[08:25:01.501]                           invokeRestart("muffleMessage")
[08:25:01.501]                       }
[08:25:01.501]                       else if (inherits(cond, "warning")) {
[08:25:01.501]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.501]                         if (muffled) 
[08:25:01.501]                           invokeRestart("muffleWarning")
[08:25:01.501]                       }
[08:25:01.501]                       else if (inherits(cond, "condition")) {
[08:25:01.501]                         if (!is.null(pattern)) {
[08:25:01.501]                           computeRestarts <- base::computeRestarts
[08:25:01.501]                           grepl <- base::grepl
[08:25:01.501]                           restarts <- computeRestarts(cond)
[08:25:01.501]                           for (restart in restarts) {
[08:25:01.501]                             name <- restart$name
[08:25:01.501]                             if (is.null(name)) 
[08:25:01.501]                               next
[08:25:01.501]                             if (!grepl(pattern, name)) 
[08:25:01.501]                               next
[08:25:01.501]                             invokeRestart(restart)
[08:25:01.501]                             muffled <- TRUE
[08:25:01.501]                             break
[08:25:01.501]                           }
[08:25:01.501]                         }
[08:25:01.501]                       }
[08:25:01.501]                       invisible(muffled)
[08:25:01.501]                     }
[08:25:01.501]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.501]                   }
[08:25:01.501]                 }
[08:25:01.501]             }
[08:25:01.501]         }))
[08:25:01.501]     }, error = function(ex) {
[08:25:01.501]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.501]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.501]                 ...future.rng), started = ...future.startTime, 
[08:25:01.501]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.501]             version = "1.8"), class = "FutureResult")
[08:25:01.501]     }, finally = {
[08:25:01.501]         if (!identical(...future.workdir, getwd())) 
[08:25:01.501]             setwd(...future.workdir)
[08:25:01.501]         {
[08:25:01.501]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.501]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.501]             }
[08:25:01.501]             base::options(...future.oldOptions)
[08:25:01.501]             if (.Platform$OS.type == "windows") {
[08:25:01.501]                 old_names <- names(...future.oldEnvVars)
[08:25:01.501]                 envs <- base::Sys.getenv()
[08:25:01.501]                 names <- names(envs)
[08:25:01.501]                 common <- intersect(names, old_names)
[08:25:01.501]                 added <- setdiff(names, old_names)
[08:25:01.501]                 removed <- setdiff(old_names, names)
[08:25:01.501]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.501]                   envs[common]]
[08:25:01.501]                 NAMES <- toupper(changed)
[08:25:01.501]                 args <- list()
[08:25:01.501]                 for (kk in seq_along(NAMES)) {
[08:25:01.501]                   name <- changed[[kk]]
[08:25:01.501]                   NAME <- NAMES[[kk]]
[08:25:01.501]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.501]                     next
[08:25:01.501]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.501]                 }
[08:25:01.501]                 NAMES <- toupper(added)
[08:25:01.501]                 for (kk in seq_along(NAMES)) {
[08:25:01.501]                   name <- added[[kk]]
[08:25:01.501]                   NAME <- NAMES[[kk]]
[08:25:01.501]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.501]                     next
[08:25:01.501]                   args[[name]] <- ""
[08:25:01.501]                 }
[08:25:01.501]                 NAMES <- toupper(removed)
[08:25:01.501]                 for (kk in seq_along(NAMES)) {
[08:25:01.501]                   name <- removed[[kk]]
[08:25:01.501]                   NAME <- NAMES[[kk]]
[08:25:01.501]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.501]                     next
[08:25:01.501]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.501]                 }
[08:25:01.501]                 if (length(args) > 0) 
[08:25:01.501]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.501]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.501]             }
[08:25:01.501]             else {
[08:25:01.501]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.501]             }
[08:25:01.501]             {
[08:25:01.501]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.501]                   0L) {
[08:25:01.501]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.501]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.501]                   base::options(opts)
[08:25:01.501]                 }
[08:25:01.501]                 {
[08:25:01.501]                   {
[08:25:01.501]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.501]                     NULL
[08:25:01.501]                   }
[08:25:01.501]                   options(future.plan = NULL)
[08:25:01.501]                   if (is.na(NA_character_)) 
[08:25:01.501]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.501]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.501]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.501]                     .init = FALSE)
[08:25:01.501]                 }
[08:25:01.501]             }
[08:25:01.501]         }
[08:25:01.501]     })
[08:25:01.501]     if (TRUE) {
[08:25:01.501]         base::sink(type = "output", split = FALSE)
[08:25:01.501]         if (TRUE) {
[08:25:01.501]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.501]         }
[08:25:01.501]         else {
[08:25:01.501]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.501]         }
[08:25:01.501]         base::close(...future.stdout)
[08:25:01.501]         ...future.stdout <- NULL
[08:25:01.501]     }
[08:25:01.501]     ...future.result$conditions <- ...future.conditions
[08:25:01.501]     ...future.result$finished <- base::Sys.time()
[08:25:01.501]     ...future.result
[08:25:01.501] }
[08:25:01.504] Exporting 5 global objects (1.05 KiB) to cluster node #1 ...
[08:25:01.504] Exporting ‘...future.FUN’ (311 bytes) to cluster node #1 ...
[08:25:01.505] Exporting ‘...future.FUN’ (311 bytes) to cluster node #1 ... DONE
[08:25:01.505] Exporting ‘future.call.arguments’ (171 bytes) to cluster node #1 ...
[08:25:01.505] Exporting ‘future.call.arguments’ (171 bytes) to cluster node #1 ... DONE
[08:25:01.505] Exporting ‘...future.elements_ii’ (101 bytes) to cluster node #1 ...
[08:25:01.506] Exporting ‘...future.elements_ii’ (101 bytes) to cluster node #1 ... DONE
[08:25:01.506] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #1 ...
[08:25:01.506] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #1 ... DONE
[08:25:01.506] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:01.507] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:01.507] Exporting 5 global objects (1.05 KiB) to cluster node #1 ... DONE
[08:25:01.507] MultisessionFuture started
[08:25:01.507] - Launch lazy future ... done
[08:25:01.508] run() for ‘MultisessionFuture’ ... done
[08:25:01.508] Created future:
[08:25:01.508] MultisessionFuture:
[08:25:01.508] Label: ‘future_eapply-1’
[08:25:01.508] Expression:
[08:25:01.508] {
[08:25:01.508]     do.call(function(...) {
[08:25:01.508]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.508]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.508]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.508]             on.exit(options(oopts), add = TRUE)
[08:25:01.508]         }
[08:25:01.508]         {
[08:25:01.508]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.508]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.508]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.508]             })
[08:25:01.508]         }
[08:25:01.508]     }, args = future.call.arguments)
[08:25:01.508] }
[08:25:01.508] Lazy evaluation: FALSE
[08:25:01.508] Asynchronous evaluation: TRUE
[08:25:01.508] Local evaluation: TRUE
[08:25:01.508] Environment: R_GlobalEnv
[08:25:01.508] Capture standard output: TRUE
[08:25:01.508] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:01.508] Globals: 5 objects totaling 637 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:01.508] Packages: 1 packages (‘stats’)
[08:25:01.508] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:01.508] Resolved: FALSE
[08:25:01.508] Value: <not collected>
[08:25:01.508] Conditions captured: <none>
[08:25:01.508] Early signaling: FALSE
[08:25:01.508] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:01.508] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.519] Chunk #1 of 2 ... DONE
[08:25:01.519] Chunk #2 of 2 ...
[08:25:01.519]  - Finding globals in 'X' for chunk #2 ...
[08:25:01.519] getGlobalsAndPackages() ...
[08:25:01.520] Searching for globals...
[08:25:01.520] 
[08:25:01.520] Searching for globals ... DONE
[08:25:01.520] - globals: [0] <none>
[08:25:01.520] getGlobalsAndPackages() ... DONE
[08:25:01.520]    + additional globals found: [n=0] 
[08:25:01.520]    + additional namespaces needed: [n=0] 
[08:25:01.520]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:01.520]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:01.521]  - seeds: <none>
[08:25:01.521]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.521] getGlobalsAndPackages() ...
[08:25:01.521] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.521] Resolving globals: FALSE
[08:25:01.521] Tweak future expression to call with '...' arguments ...
[08:25:01.521] {
[08:25:01.521]     do.call(function(...) {
[08:25:01.521]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.521]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.521]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.521]             on.exit(options(oopts), add = TRUE)
[08:25:01.521]         }
[08:25:01.521]         {
[08:25:01.521]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.521]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.521]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.521]             })
[08:25:01.521]         }
[08:25:01.521]     }, args = future.call.arguments)
[08:25:01.521] }
[08:25:01.521] Tweak future expression to call with '...' arguments ... DONE
[08:25:01.522] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.522] - packages: [1] ‘stats’
[08:25:01.522] getGlobalsAndPackages() ... DONE
[08:25:01.522] run() for ‘Future’ ...
[08:25:01.522] - state: ‘created’
[08:25:01.522] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:01.537] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.537] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:01.537]   - Field: ‘node’
[08:25:01.537]   - Field: ‘label’
[08:25:01.538]   - Field: ‘local’
[08:25:01.538]   - Field: ‘owner’
[08:25:01.538]   - Field: ‘envir’
[08:25:01.538]   - Field: ‘workers’
[08:25:01.538]   - Field: ‘packages’
[08:25:01.538]   - Field: ‘gc’
[08:25:01.538]   - Field: ‘conditions’
[08:25:01.538]   - Field: ‘persistent’
[08:25:01.538]   - Field: ‘expr’
[08:25:01.538]   - Field: ‘uuid’
[08:25:01.538]   - Field: ‘seed’
[08:25:01.539]   - Field: ‘version’
[08:25:01.539]   - Field: ‘result’
[08:25:01.539]   - Field: ‘asynchronous’
[08:25:01.539]   - Field: ‘calls’
[08:25:01.539]   - Field: ‘globals’
[08:25:01.539]   - Field: ‘stdout’
[08:25:01.539]   - Field: ‘earlySignal’
[08:25:01.539]   - Field: ‘lazy’
[08:25:01.539]   - Field: ‘state’
[08:25:01.539] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:01.539] - Launch lazy future ...
[08:25:01.540] Packages needed by the future expression (n = 1): ‘stats’
[08:25:01.540] Packages needed by future strategies (n = 0): <none>
[08:25:01.540] {
[08:25:01.540]     {
[08:25:01.540]         {
[08:25:01.540]             ...future.startTime <- base::Sys.time()
[08:25:01.540]             {
[08:25:01.540]                 {
[08:25:01.540]                   {
[08:25:01.540]                     {
[08:25:01.540]                       {
[08:25:01.540]                         base::local({
[08:25:01.540]                           has_future <- base::requireNamespace("future", 
[08:25:01.540]                             quietly = TRUE)
[08:25:01.540]                           if (has_future) {
[08:25:01.540]                             ns <- base::getNamespace("future")
[08:25:01.540]                             version <- ns[[".package"]][["version"]]
[08:25:01.540]                             if (is.null(version)) 
[08:25:01.540]                               version <- utils::packageVersion("future")
[08:25:01.540]                           }
[08:25:01.540]                           else {
[08:25:01.540]                             version <- NULL
[08:25:01.540]                           }
[08:25:01.540]                           if (!has_future || version < "1.8.0") {
[08:25:01.540]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.540]                               "", base::R.version$version.string), 
[08:25:01.540]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:01.540]                                 base::R.version$platform, 8 * 
[08:25:01.540]                                   base::.Machine$sizeof.pointer), 
[08:25:01.540]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.540]                                 "release", "version")], collapse = " "), 
[08:25:01.540]                               hostname = base::Sys.info()[["nodename"]])
[08:25:01.540]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.540]                               info)
[08:25:01.540]                             info <- base::paste(info, collapse = "; ")
[08:25:01.540]                             if (!has_future) {
[08:25:01.540]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.540]                                 info)
[08:25:01.540]                             }
[08:25:01.540]                             else {
[08:25:01.540]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.540]                                 info, version)
[08:25:01.540]                             }
[08:25:01.540]                             base::stop(msg)
[08:25:01.540]                           }
[08:25:01.540]                         })
[08:25:01.540]                       }
[08:25:01.540]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.540]                       base::options(mc.cores = 1L)
[08:25:01.540]                     }
[08:25:01.540]                     base::local({
[08:25:01.540]                       for (pkg in "stats") {
[08:25:01.540]                         base::loadNamespace(pkg)
[08:25:01.540]                         base::library(pkg, character.only = TRUE)
[08:25:01.540]                       }
[08:25:01.540]                     })
[08:25:01.540]                   }
[08:25:01.540]                   ...future.strategy.old <- future::plan("list")
[08:25:01.540]                   options(future.plan = NULL)
[08:25:01.540]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.540]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.540]                 }
[08:25:01.540]                 ...future.workdir <- getwd()
[08:25:01.540]             }
[08:25:01.540]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.540]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.540]         }
[08:25:01.540]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.540]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:01.540]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.540]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.540]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.540]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.540]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.540]             base::names(...future.oldOptions))
[08:25:01.540]     }
[08:25:01.540]     if (FALSE) {
[08:25:01.540]     }
[08:25:01.540]     else {
[08:25:01.540]         if (TRUE) {
[08:25:01.540]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.540]                 open = "w")
[08:25:01.540]         }
[08:25:01.540]         else {
[08:25:01.540]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.540]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.540]         }
[08:25:01.540]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.540]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.540]             base::sink(type = "output", split = FALSE)
[08:25:01.540]             base::close(...future.stdout)
[08:25:01.540]         }, add = TRUE)
[08:25:01.540]     }
[08:25:01.540]     ...future.frame <- base::sys.nframe()
[08:25:01.540]     ...future.conditions <- base::list()
[08:25:01.540]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.540]     if (FALSE) {
[08:25:01.540]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.540]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.540]     }
[08:25:01.540]     ...future.result <- base::tryCatch({
[08:25:01.540]         base::withCallingHandlers({
[08:25:01.540]             ...future.value <- base::withVisible(base::local({
[08:25:01.540]                 ...future.makeSendCondition <- base::local({
[08:25:01.540]                   sendCondition <- NULL
[08:25:01.540]                   function(frame = 1L) {
[08:25:01.540]                     if (is.function(sendCondition)) 
[08:25:01.540]                       return(sendCondition)
[08:25:01.540]                     ns <- getNamespace("parallel")
[08:25:01.540]                     if (exists("sendData", mode = "function", 
[08:25:01.540]                       envir = ns)) {
[08:25:01.540]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.540]                         envir = ns)
[08:25:01.540]                       envir <- sys.frame(frame)
[08:25:01.540]                       master <- NULL
[08:25:01.540]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.540]                         !identical(envir, emptyenv())) {
[08:25:01.540]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.540]                           inherits = FALSE)) {
[08:25:01.540]                           master <- get("master", mode = "list", 
[08:25:01.540]                             envir = envir, inherits = FALSE)
[08:25:01.540]                           if (inherits(master, c("SOCKnode", 
[08:25:01.540]                             "SOCK0node"))) {
[08:25:01.540]                             sendCondition <<- function(cond) {
[08:25:01.540]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.540]                                 success = TRUE)
[08:25:01.540]                               parallel_sendData(master, data)
[08:25:01.540]                             }
[08:25:01.540]                             return(sendCondition)
[08:25:01.540]                           }
[08:25:01.540]                         }
[08:25:01.540]                         frame <- frame + 1L
[08:25:01.540]                         envir <- sys.frame(frame)
[08:25:01.540]                       }
[08:25:01.540]                     }
[08:25:01.540]                     sendCondition <<- function(cond) NULL
[08:25:01.540]                   }
[08:25:01.540]                 })
[08:25:01.540]                 withCallingHandlers({
[08:25:01.540]                   {
[08:25:01.540]                     do.call(function(...) {
[08:25:01.540]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.540]                       if (!identical(...future.globals.maxSize.org, 
[08:25:01.540]                         ...future.globals.maxSize)) {
[08:25:01.540]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.540]                         on.exit(options(oopts), add = TRUE)
[08:25:01.540]                       }
[08:25:01.540]                       {
[08:25:01.540]                         lapply(seq_along(...future.elements_ii), 
[08:25:01.540]                           FUN = function(jj) {
[08:25:01.540]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.540]                             ...future.FUN(...future.X_jj, ...)
[08:25:01.540]                           })
[08:25:01.540]                       }
[08:25:01.540]                     }, args = future.call.arguments)
[08:25:01.540]                   }
[08:25:01.540]                 }, immediateCondition = function(cond) {
[08:25:01.540]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.540]                   sendCondition(cond)
[08:25:01.540]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.540]                   {
[08:25:01.540]                     inherits <- base::inherits
[08:25:01.540]                     invokeRestart <- base::invokeRestart
[08:25:01.540]                     is.null <- base::is.null
[08:25:01.540]                     muffled <- FALSE
[08:25:01.540]                     if (inherits(cond, "message")) {
[08:25:01.540]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.540]                       if (muffled) 
[08:25:01.540]                         invokeRestart("muffleMessage")
[08:25:01.540]                     }
[08:25:01.540]                     else if (inherits(cond, "warning")) {
[08:25:01.540]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.540]                       if (muffled) 
[08:25:01.540]                         invokeRestart("muffleWarning")
[08:25:01.540]                     }
[08:25:01.540]                     else if (inherits(cond, "condition")) {
[08:25:01.540]                       if (!is.null(pattern)) {
[08:25:01.540]                         computeRestarts <- base::computeRestarts
[08:25:01.540]                         grepl <- base::grepl
[08:25:01.540]                         restarts <- computeRestarts(cond)
[08:25:01.540]                         for (restart in restarts) {
[08:25:01.540]                           name <- restart$name
[08:25:01.540]                           if (is.null(name)) 
[08:25:01.540]                             next
[08:25:01.540]                           if (!grepl(pattern, name)) 
[08:25:01.540]                             next
[08:25:01.540]                           invokeRestart(restart)
[08:25:01.540]                           muffled <- TRUE
[08:25:01.540]                           break
[08:25:01.540]                         }
[08:25:01.540]                       }
[08:25:01.540]                     }
[08:25:01.540]                     invisible(muffled)
[08:25:01.540]                   }
[08:25:01.540]                   muffleCondition(cond)
[08:25:01.540]                 })
[08:25:01.540]             }))
[08:25:01.540]             future::FutureResult(value = ...future.value$value, 
[08:25:01.540]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.540]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.540]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.540]                     ...future.globalenv.names))
[08:25:01.540]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.540]         }, condition = base::local({
[08:25:01.540]             c <- base::c
[08:25:01.540]             inherits <- base::inherits
[08:25:01.540]             invokeRestart <- base::invokeRestart
[08:25:01.540]             length <- base::length
[08:25:01.540]             list <- base::list
[08:25:01.540]             seq.int <- base::seq.int
[08:25:01.540]             signalCondition <- base::signalCondition
[08:25:01.540]             sys.calls <- base::sys.calls
[08:25:01.540]             `[[` <- base::`[[`
[08:25:01.540]             `+` <- base::`+`
[08:25:01.540]             `<<-` <- base::`<<-`
[08:25:01.540]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.540]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.540]                   3L)]
[08:25:01.540]             }
[08:25:01.540]             function(cond) {
[08:25:01.540]                 is_error <- inherits(cond, "error")
[08:25:01.540]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.540]                   NULL)
[08:25:01.540]                 if (is_error) {
[08:25:01.540]                   sessionInformation <- function() {
[08:25:01.540]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.540]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.540]                       search = base::search(), system = base::Sys.info())
[08:25:01.540]                   }
[08:25:01.540]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.540]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.540]                     cond$call), session = sessionInformation(), 
[08:25:01.540]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.540]                   signalCondition(cond)
[08:25:01.540]                 }
[08:25:01.540]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.540]                 "immediateCondition"))) {
[08:25:01.540]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.540]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.540]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.540]                   if (TRUE && !signal) {
[08:25:01.540]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.540]                     {
[08:25:01.540]                       inherits <- base::inherits
[08:25:01.540]                       invokeRestart <- base::invokeRestart
[08:25:01.540]                       is.null <- base::is.null
[08:25:01.540]                       muffled <- FALSE
[08:25:01.540]                       if (inherits(cond, "message")) {
[08:25:01.540]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.540]                         if (muffled) 
[08:25:01.540]                           invokeRestart("muffleMessage")
[08:25:01.540]                       }
[08:25:01.540]                       else if (inherits(cond, "warning")) {
[08:25:01.540]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.540]                         if (muffled) 
[08:25:01.540]                           invokeRestart("muffleWarning")
[08:25:01.540]                       }
[08:25:01.540]                       else if (inherits(cond, "condition")) {
[08:25:01.540]                         if (!is.null(pattern)) {
[08:25:01.540]                           computeRestarts <- base::computeRestarts
[08:25:01.540]                           grepl <- base::grepl
[08:25:01.540]                           restarts <- computeRestarts(cond)
[08:25:01.540]                           for (restart in restarts) {
[08:25:01.540]                             name <- restart$name
[08:25:01.540]                             if (is.null(name)) 
[08:25:01.540]                               next
[08:25:01.540]                             if (!grepl(pattern, name)) 
[08:25:01.540]                               next
[08:25:01.540]                             invokeRestart(restart)
[08:25:01.540]                             muffled <- TRUE
[08:25:01.540]                             break
[08:25:01.540]                           }
[08:25:01.540]                         }
[08:25:01.540]                       }
[08:25:01.540]                       invisible(muffled)
[08:25:01.540]                     }
[08:25:01.540]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.540]                   }
[08:25:01.540]                 }
[08:25:01.540]                 else {
[08:25:01.540]                   if (TRUE) {
[08:25:01.540]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.540]                     {
[08:25:01.540]                       inherits <- base::inherits
[08:25:01.540]                       invokeRestart <- base::invokeRestart
[08:25:01.540]                       is.null <- base::is.null
[08:25:01.540]                       muffled <- FALSE
[08:25:01.540]                       if (inherits(cond, "message")) {
[08:25:01.540]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.540]                         if (muffled) 
[08:25:01.540]                           invokeRestart("muffleMessage")
[08:25:01.540]                       }
[08:25:01.540]                       else if (inherits(cond, "warning")) {
[08:25:01.540]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.540]                         if (muffled) 
[08:25:01.540]                           invokeRestart("muffleWarning")
[08:25:01.540]                       }
[08:25:01.540]                       else if (inherits(cond, "condition")) {
[08:25:01.540]                         if (!is.null(pattern)) {
[08:25:01.540]                           computeRestarts <- base::computeRestarts
[08:25:01.540]                           grepl <- base::grepl
[08:25:01.540]                           restarts <- computeRestarts(cond)
[08:25:01.540]                           for (restart in restarts) {
[08:25:01.540]                             name <- restart$name
[08:25:01.540]                             if (is.null(name)) 
[08:25:01.540]                               next
[08:25:01.540]                             if (!grepl(pattern, name)) 
[08:25:01.540]                               next
[08:25:01.540]                             invokeRestart(restart)
[08:25:01.540]                             muffled <- TRUE
[08:25:01.540]                             break
[08:25:01.540]                           }
[08:25:01.540]                         }
[08:25:01.540]                       }
[08:25:01.540]                       invisible(muffled)
[08:25:01.540]                     }
[08:25:01.540]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.540]                   }
[08:25:01.540]                 }
[08:25:01.540]             }
[08:25:01.540]         }))
[08:25:01.540]     }, error = function(ex) {
[08:25:01.540]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.540]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.540]                 ...future.rng), started = ...future.startTime, 
[08:25:01.540]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.540]             version = "1.8"), class = "FutureResult")
[08:25:01.540]     }, finally = {
[08:25:01.540]         if (!identical(...future.workdir, getwd())) 
[08:25:01.540]             setwd(...future.workdir)
[08:25:01.540]         {
[08:25:01.540]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.540]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.540]             }
[08:25:01.540]             base::options(...future.oldOptions)
[08:25:01.540]             if (.Platform$OS.type == "windows") {
[08:25:01.540]                 old_names <- names(...future.oldEnvVars)
[08:25:01.540]                 envs <- base::Sys.getenv()
[08:25:01.540]                 names <- names(envs)
[08:25:01.540]                 common <- intersect(names, old_names)
[08:25:01.540]                 added <- setdiff(names, old_names)
[08:25:01.540]                 removed <- setdiff(old_names, names)
[08:25:01.540]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.540]                   envs[common]]
[08:25:01.540]                 NAMES <- toupper(changed)
[08:25:01.540]                 args <- list()
[08:25:01.540]                 for (kk in seq_along(NAMES)) {
[08:25:01.540]                   name <- changed[[kk]]
[08:25:01.540]                   NAME <- NAMES[[kk]]
[08:25:01.540]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.540]                     next
[08:25:01.540]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.540]                 }
[08:25:01.540]                 NAMES <- toupper(added)
[08:25:01.540]                 for (kk in seq_along(NAMES)) {
[08:25:01.540]                   name <- added[[kk]]
[08:25:01.540]                   NAME <- NAMES[[kk]]
[08:25:01.540]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.540]                     next
[08:25:01.540]                   args[[name]] <- ""
[08:25:01.540]                 }
[08:25:01.540]                 NAMES <- toupper(removed)
[08:25:01.540]                 for (kk in seq_along(NAMES)) {
[08:25:01.540]                   name <- removed[[kk]]
[08:25:01.540]                   NAME <- NAMES[[kk]]
[08:25:01.540]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.540]                     next
[08:25:01.540]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.540]                 }
[08:25:01.540]                 if (length(args) > 0) 
[08:25:01.540]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.540]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.540]             }
[08:25:01.540]             else {
[08:25:01.540]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.540]             }
[08:25:01.540]             {
[08:25:01.540]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.540]                   0L) {
[08:25:01.540]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.540]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.540]                   base::options(opts)
[08:25:01.540]                 }
[08:25:01.540]                 {
[08:25:01.540]                   {
[08:25:01.540]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.540]                     NULL
[08:25:01.540]                   }
[08:25:01.540]                   options(future.plan = NULL)
[08:25:01.540]                   if (is.na(NA_character_)) 
[08:25:01.540]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.540]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.540]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.540]                     .init = FALSE)
[08:25:01.540]                 }
[08:25:01.540]             }
[08:25:01.540]         }
[08:25:01.540]     })
[08:25:01.540]     if (TRUE) {
[08:25:01.540]         base::sink(type = "output", split = FALSE)
[08:25:01.540]         if (TRUE) {
[08:25:01.540]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.540]         }
[08:25:01.540]         else {
[08:25:01.540]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.540]         }
[08:25:01.540]         base::close(...future.stdout)
[08:25:01.540]         ...future.stdout <- NULL
[08:25:01.540]     }
[08:25:01.540]     ...future.result$conditions <- ...future.conditions
[08:25:01.540]     ...future.result$finished <- base::Sys.time()
[08:25:01.540]     ...future.result
[08:25:01.540] }
[08:25:01.543] Exporting 5 global objects (1.20 KiB) to cluster node #2 ...
[08:25:01.543] Exporting ‘...future.FUN’ (311 bytes) to cluster node #2 ...
[08:25:01.544] Exporting ‘...future.FUN’ (311 bytes) to cluster node #2 ... DONE
[08:25:01.544] Exporting ‘future.call.arguments’ (171 bytes) to cluster node #2 ...
[08:25:01.544] Exporting ‘future.call.arguments’ (171 bytes) to cluster node #2 ... DONE
[08:25:01.544] Exporting ‘...future.elements_ii’ (259 bytes) to cluster node #2 ...
[08:25:01.545] Exporting ‘...future.elements_ii’ (259 bytes) to cluster node #2 ... DONE
[08:25:01.545] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #2 ...
[08:25:01.545] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #2 ... DONE
[08:25:01.545] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:01.546] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:01.546] Exporting 5 global objects (1.20 KiB) to cluster node #2 ... DONE
[08:25:01.546] MultisessionFuture started
[08:25:01.546] - Launch lazy future ... done
[08:25:01.546] run() for ‘MultisessionFuture’ ... done
[08:25:01.546] Created future:
[08:25:01.547] MultisessionFuture:
[08:25:01.547] Label: ‘future_eapply-2’
[08:25:01.547] Expression:
[08:25:01.547] {
[08:25:01.547]     do.call(function(...) {
[08:25:01.547]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.547]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.547]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.547]             on.exit(options(oopts), add = TRUE)
[08:25:01.547]         }
[08:25:01.547]         {
[08:25:01.547]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.547]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.547]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.547]             })
[08:25:01.547]         }
[08:25:01.547]     }, args = future.call.arguments)
[08:25:01.547] }
[08:25:01.547] Lazy evaluation: FALSE
[08:25:01.547] Asynchronous evaluation: TRUE
[08:25:01.547] Local evaluation: TRUE
[08:25:01.547] Environment: R_GlobalEnv
[08:25:01.547] Capture standard output: TRUE
[08:25:01.547] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:01.547] Globals: 5 objects totaling 795 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 171 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:01.547] Packages: 1 packages (‘stats’)
[08:25:01.547] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:01.547] Resolved: FALSE
[08:25:01.547] Value: <not collected>
[08:25:01.547] Conditions captured: <none>
[08:25:01.547] Early signaling: FALSE
[08:25:01.547] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:01.547] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.558] Chunk #2 of 2 ... DONE
[08:25:01.558] Launching 2 futures (chunks) ... DONE
[08:25:01.558] Resolving 2 futures (chunks) ...
[08:25:01.559] resolve() on list ...
[08:25:01.559]  recursive: 0
[08:25:01.559]  length: 2
[08:25:01.559] 
[08:25:01.559] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.560] - Validating connection of MultisessionFuture
[08:25:01.560] - received message: FutureResult
[08:25:01.560] - Received FutureResult
[08:25:01.560] - Erased future from FutureRegistry
[08:25:01.560] result() for ClusterFuture ...
[08:25:01.560] - result already collected: FutureResult
[08:25:01.560] result() for ClusterFuture ... done
[08:25:01.560] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.560] Future #1
[08:25:01.561] result() for ClusterFuture ...
[08:25:01.561] - result already collected: FutureResult
[08:25:01.561] result() for ClusterFuture ... done
[08:25:01.561] result() for ClusterFuture ...
[08:25:01.561] - result already collected: FutureResult
[08:25:01.561] result() for ClusterFuture ... done
[08:25:01.561] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:01.561] - nx: 2
[08:25:01.561] - relay: TRUE
[08:25:01.561] - stdout: TRUE
[08:25:01.561] - signal: TRUE
[08:25:01.561] - resignal: FALSE
[08:25:01.562] - force: TRUE
[08:25:01.562] - relayed: [n=2] FALSE, FALSE
[08:25:01.562] - queued futures: [n=2] FALSE, FALSE
[08:25:01.562]  - until=1
[08:25:01.562]  - relaying element #1
[08:25:01.562] result() for ClusterFuture ...
[08:25:01.562] - result already collected: FutureResult
[08:25:01.562] result() for ClusterFuture ... done
[08:25:01.562] result() for ClusterFuture ...
[08:25:01.562] - result already collected: FutureResult
[08:25:01.562] result() for ClusterFuture ... done
[08:25:01.563] result() for ClusterFuture ...
[08:25:01.563] - result already collected: FutureResult
[08:25:01.563] result() for ClusterFuture ... done
[08:25:01.563] result() for ClusterFuture ...
[08:25:01.563] - result already collected: FutureResult
[08:25:01.563] result() for ClusterFuture ... done
[08:25:01.563] - relayed: [n=2] TRUE, FALSE
[08:25:01.563] - queued futures: [n=2] TRUE, FALSE
[08:25:01.563] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:01.563]  length: 1 (resolved future 1)
[08:25:01.594] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.594] - Validating connection of MultisessionFuture
[08:25:01.594] - received message: FutureResult
[08:25:01.594] - Received FutureResult
[08:25:01.594] - Erased future from FutureRegistry
[08:25:01.594] result() for ClusterFuture ...
[08:25:01.595] - result already collected: FutureResult
[08:25:01.595] result() for ClusterFuture ... done
[08:25:01.595] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.595] Future #2
[08:25:01.595] result() for ClusterFuture ...
[08:25:01.595] - result already collected: FutureResult
[08:25:01.595] result() for ClusterFuture ... done
[08:25:01.595] result() for ClusterFuture ...
[08:25:01.595] - result already collected: FutureResult
[08:25:01.595] result() for ClusterFuture ... done
[08:25:01.595] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:01.595] - nx: 2
[08:25:01.596] - relay: TRUE
[08:25:01.596] - stdout: TRUE
[08:25:01.596] - signal: TRUE
[08:25:01.596] - resignal: FALSE
[08:25:01.596] - force: TRUE
[08:25:01.596] - relayed: [n=2] TRUE, FALSE
[08:25:01.596] - queued futures: [n=2] TRUE, FALSE
[08:25:01.596]  - until=2
[08:25:01.596]  - relaying element #2
[08:25:01.596] result() for ClusterFuture ...
[08:25:01.596] - result already collected: FutureResult
[08:25:01.596] result() for ClusterFuture ... done
[08:25:01.597] result() for ClusterFuture ...
[08:25:01.597] - result already collected: FutureResult
[08:25:01.597] result() for ClusterFuture ... done
[08:25:01.597] result() for ClusterFuture ...
[08:25:01.597] - result already collected: FutureResult
[08:25:01.597] result() for ClusterFuture ... done
[08:25:01.597] result() for ClusterFuture ...
[08:25:01.597] - result already collected: FutureResult
[08:25:01.597] result() for ClusterFuture ... done
[08:25:01.597] - relayed: [n=2] TRUE, TRUE
[08:25:01.597] - queued futures: [n=2] TRUE, TRUE
[08:25:01.597] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:01.598]  length: 0 (resolved future 2)
[08:25:01.598] Relaying remaining futures
[08:25:01.598] signalConditionsASAP(NULL, pos=0) ...
[08:25:01.598] - nx: 2
[08:25:01.598] - relay: TRUE
[08:25:01.598] - stdout: TRUE
[08:25:01.598] - signal: TRUE
[08:25:01.598] - resignal: FALSE
[08:25:01.598] - force: TRUE
[08:25:01.598] - relayed: [n=2] TRUE, TRUE
[08:25:01.598] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:01.598] - relayed: [n=2] TRUE, TRUE
[08:25:01.599] - queued futures: [n=2] TRUE, TRUE
[08:25:01.599] signalConditionsASAP(NULL, pos=0) ... done
[08:25:01.599] resolve() on list ... DONE
[08:25:01.599] result() for ClusterFuture ...
[08:25:01.599] - result already collected: FutureResult
[08:25:01.599] result() for ClusterFuture ... done
[08:25:01.599] result() for ClusterFuture ...
[08:25:01.599] - result already collected: FutureResult
[08:25:01.599] result() for ClusterFuture ... done
[08:25:01.599] result() for ClusterFuture ...
[08:25:01.599] - result already collected: FutureResult
[08:25:01.599] result() for ClusterFuture ... done
[08:25:01.600] result() for ClusterFuture ...
[08:25:01.600] - result already collected: FutureResult
[08:25:01.600] result() for ClusterFuture ... done
[08:25:01.600]  - Number of value chunks collected: 2
[08:25:01.600] Resolving 2 futures (chunks) ... DONE
[08:25:01.600] Reducing values from 2 chunks ...
[08:25:01.600]  - Number of values collected after concatenation: 3
[08:25:01.600]  - Number of values expected: 3
[08:25:01.600] Reducing values from 2 chunks ... DONE
[08:25:01.600] future_lapply() ... DONE
[08:25:01.601] future_lapply() ...
[08:25:01.603] Number of chunks: 2
[08:25:01.603] getGlobalsAndPackagesXApply() ...
[08:25:01.603]  - future.globals: TRUE
[08:25:01.603] getGlobalsAndPackages() ...
[08:25:01.604] Searching for globals...
[08:25:01.605] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:01.605] Searching for globals ... DONE
[08:25:01.605] Resolving globals: FALSE
[08:25:01.605] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:01.606] The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:01.606] - globals: [1] ‘FUN’
[08:25:01.606] - packages: [1] ‘stats’
[08:25:01.606] getGlobalsAndPackages() ... DONE
[08:25:01.606]  - globals found/used: [n=1] ‘FUN’
[08:25:01.606]  - needed namespaces: [n=1] ‘stats’
[08:25:01.606] Finding globals ... DONE
[08:25:01.606]  - use_args: TRUE
[08:25:01.606]  - Getting '...' globals ...
[08:25:01.607] resolve() on list ...
[08:25:01.607]  recursive: 0
[08:25:01.607]  length: 1
[08:25:01.607]  elements: ‘...’
[08:25:01.607]  length: 0 (resolved future 1)
[08:25:01.607] resolve() on list ... DONE
[08:25:01.607]    - '...' content: [n=0] 
[08:25:01.607] List of 1
[08:25:01.607]  $ ...: list()
[08:25:01.607]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:01.607]  - attr(*, "where")=List of 1
[08:25:01.607]   ..$ ...:<environment: 0x5577ee81b018> 
[08:25:01.607]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:01.607]  - attr(*, "resolved")= logi TRUE
[08:25:01.607]  - attr(*, "total_size")= num NA
[08:25:01.610]  - Getting '...' globals ... DONE
[08:25:01.610] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:01.610] List of 2
[08:25:01.610]  $ ...future.FUN:function (x, ...)  
[08:25:01.610]  $ ...          : list()
[08:25:01.610]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:01.610]  - attr(*, "where")=List of 2
[08:25:01.610]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:01.610]   ..$ ...          :<environment: 0x5577ee81b018> 
[08:25:01.610]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:01.610]  - attr(*, "resolved")= logi FALSE
[08:25:01.610]  - attr(*, "total_size")= num 5433
[08:25:01.613] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:01.613] getGlobalsAndPackagesXApply() ... DONE
[08:25:01.613] Number of futures (= number of chunks): 2
[08:25:01.613] Launching 2 futures (chunks) ...
[08:25:01.613] Chunk #1 of 2 ...
[08:25:01.613]  - Finding globals in 'X' for chunk #1 ...
[08:25:01.613] getGlobalsAndPackages() ...
[08:25:01.613] Searching for globals...
[08:25:01.614] 
[08:25:01.614] Searching for globals ... DONE
[08:25:01.614] - globals: [0] <none>
[08:25:01.614] getGlobalsAndPackages() ... DONE
[08:25:01.614]    + additional globals found: [n=0] 
[08:25:01.614]    + additional namespaces needed: [n=0] 
[08:25:01.614]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:01.614]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:01.614]  - seeds: <none>
[08:25:01.614]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.615] getGlobalsAndPackages() ...
[08:25:01.615] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.615] Resolving globals: FALSE
[08:25:01.615] Tweak future expression to call with '...' arguments ...
[08:25:01.615] {
[08:25:01.615]     do.call(function(...) {
[08:25:01.615]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.615]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.615]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.615]             on.exit(options(oopts), add = TRUE)
[08:25:01.615]         }
[08:25:01.615]         {
[08:25:01.615]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.615]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.615]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.615]             })
[08:25:01.615]         }
[08:25:01.615]     }, args = future.call.arguments)
[08:25:01.615] }
[08:25:01.615] Tweak future expression to call with '...' arguments ... DONE
[08:25:01.616] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.616] - packages: [1] ‘stats’
[08:25:01.616] getGlobalsAndPackages() ... DONE
[08:25:01.616] run() for ‘Future’ ...
[08:25:01.616] - state: ‘created’
[08:25:01.616] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:01.630] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.630] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:01.630]   - Field: ‘node’
[08:25:01.630]   - Field: ‘label’
[08:25:01.631]   - Field: ‘local’
[08:25:01.631]   - Field: ‘owner’
[08:25:01.631]   - Field: ‘envir’
[08:25:01.631]   - Field: ‘workers’
[08:25:01.631]   - Field: ‘packages’
[08:25:01.631]   - Field: ‘gc’
[08:25:01.631]   - Field: ‘conditions’
[08:25:01.631]   - Field: ‘persistent’
[08:25:01.631]   - Field: ‘expr’
[08:25:01.631]   - Field: ‘uuid’
[08:25:01.631]   - Field: ‘seed’
[08:25:01.631]   - Field: ‘version’
[08:25:01.632]   - Field: ‘result’
[08:25:01.632]   - Field: ‘asynchronous’
[08:25:01.632]   - Field: ‘calls’
[08:25:01.632]   - Field: ‘globals’
[08:25:01.632]   - Field: ‘stdout’
[08:25:01.632]   - Field: ‘earlySignal’
[08:25:01.632]   - Field: ‘lazy’
[08:25:01.632]   - Field: ‘state’
[08:25:01.632] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:01.632] - Launch lazy future ...
[08:25:01.633] Packages needed by the future expression (n = 1): ‘stats’
[08:25:01.633] Packages needed by future strategies (n = 0): <none>
[08:25:01.633] {
[08:25:01.633]     {
[08:25:01.633]         {
[08:25:01.633]             ...future.startTime <- base::Sys.time()
[08:25:01.633]             {
[08:25:01.633]                 {
[08:25:01.633]                   {
[08:25:01.633]                     {
[08:25:01.633]                       {
[08:25:01.633]                         base::local({
[08:25:01.633]                           has_future <- base::requireNamespace("future", 
[08:25:01.633]                             quietly = TRUE)
[08:25:01.633]                           if (has_future) {
[08:25:01.633]                             ns <- base::getNamespace("future")
[08:25:01.633]                             version <- ns[[".package"]][["version"]]
[08:25:01.633]                             if (is.null(version)) 
[08:25:01.633]                               version <- utils::packageVersion("future")
[08:25:01.633]                           }
[08:25:01.633]                           else {
[08:25:01.633]                             version <- NULL
[08:25:01.633]                           }
[08:25:01.633]                           if (!has_future || version < "1.8.0") {
[08:25:01.633]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.633]                               "", base::R.version$version.string), 
[08:25:01.633]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:01.633]                                 base::R.version$platform, 8 * 
[08:25:01.633]                                   base::.Machine$sizeof.pointer), 
[08:25:01.633]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.633]                                 "release", "version")], collapse = " "), 
[08:25:01.633]                               hostname = base::Sys.info()[["nodename"]])
[08:25:01.633]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.633]                               info)
[08:25:01.633]                             info <- base::paste(info, collapse = "; ")
[08:25:01.633]                             if (!has_future) {
[08:25:01.633]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.633]                                 info)
[08:25:01.633]                             }
[08:25:01.633]                             else {
[08:25:01.633]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.633]                                 info, version)
[08:25:01.633]                             }
[08:25:01.633]                             base::stop(msg)
[08:25:01.633]                           }
[08:25:01.633]                         })
[08:25:01.633]                       }
[08:25:01.633]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.633]                       base::options(mc.cores = 1L)
[08:25:01.633]                     }
[08:25:01.633]                     base::local({
[08:25:01.633]                       for (pkg in "stats") {
[08:25:01.633]                         base::loadNamespace(pkg)
[08:25:01.633]                         base::library(pkg, character.only = TRUE)
[08:25:01.633]                       }
[08:25:01.633]                     })
[08:25:01.633]                   }
[08:25:01.633]                   ...future.strategy.old <- future::plan("list")
[08:25:01.633]                   options(future.plan = NULL)
[08:25:01.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.633]                 }
[08:25:01.633]                 ...future.workdir <- getwd()
[08:25:01.633]             }
[08:25:01.633]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.633]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.633]         }
[08:25:01.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.633]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:01.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.633]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.633]             base::names(...future.oldOptions))
[08:25:01.633]     }
[08:25:01.633]     if (FALSE) {
[08:25:01.633]     }
[08:25:01.633]     else {
[08:25:01.633]         if (TRUE) {
[08:25:01.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.633]                 open = "w")
[08:25:01.633]         }
[08:25:01.633]         else {
[08:25:01.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.633]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.633]         }
[08:25:01.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.633]             base::sink(type = "output", split = FALSE)
[08:25:01.633]             base::close(...future.stdout)
[08:25:01.633]         }, add = TRUE)
[08:25:01.633]     }
[08:25:01.633]     ...future.frame <- base::sys.nframe()
[08:25:01.633]     ...future.conditions <- base::list()
[08:25:01.633]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.633]     if (FALSE) {
[08:25:01.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.633]     }
[08:25:01.633]     ...future.result <- base::tryCatch({
[08:25:01.633]         base::withCallingHandlers({
[08:25:01.633]             ...future.value <- base::withVisible(base::local({
[08:25:01.633]                 ...future.makeSendCondition <- base::local({
[08:25:01.633]                   sendCondition <- NULL
[08:25:01.633]                   function(frame = 1L) {
[08:25:01.633]                     if (is.function(sendCondition)) 
[08:25:01.633]                       return(sendCondition)
[08:25:01.633]                     ns <- getNamespace("parallel")
[08:25:01.633]                     if (exists("sendData", mode = "function", 
[08:25:01.633]                       envir = ns)) {
[08:25:01.633]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.633]                         envir = ns)
[08:25:01.633]                       envir <- sys.frame(frame)
[08:25:01.633]                       master <- NULL
[08:25:01.633]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.633]                         !identical(envir, emptyenv())) {
[08:25:01.633]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.633]                           inherits = FALSE)) {
[08:25:01.633]                           master <- get("master", mode = "list", 
[08:25:01.633]                             envir = envir, inherits = FALSE)
[08:25:01.633]                           if (inherits(master, c("SOCKnode", 
[08:25:01.633]                             "SOCK0node"))) {
[08:25:01.633]                             sendCondition <<- function(cond) {
[08:25:01.633]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.633]                                 success = TRUE)
[08:25:01.633]                               parallel_sendData(master, data)
[08:25:01.633]                             }
[08:25:01.633]                             return(sendCondition)
[08:25:01.633]                           }
[08:25:01.633]                         }
[08:25:01.633]                         frame <- frame + 1L
[08:25:01.633]                         envir <- sys.frame(frame)
[08:25:01.633]                       }
[08:25:01.633]                     }
[08:25:01.633]                     sendCondition <<- function(cond) NULL
[08:25:01.633]                   }
[08:25:01.633]                 })
[08:25:01.633]                 withCallingHandlers({
[08:25:01.633]                   {
[08:25:01.633]                     do.call(function(...) {
[08:25:01.633]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.633]                       if (!identical(...future.globals.maxSize.org, 
[08:25:01.633]                         ...future.globals.maxSize)) {
[08:25:01.633]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.633]                         on.exit(options(oopts), add = TRUE)
[08:25:01.633]                       }
[08:25:01.633]                       {
[08:25:01.633]                         lapply(seq_along(...future.elements_ii), 
[08:25:01.633]                           FUN = function(jj) {
[08:25:01.633]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.633]                             ...future.FUN(...future.X_jj, ...)
[08:25:01.633]                           })
[08:25:01.633]                       }
[08:25:01.633]                     }, args = future.call.arguments)
[08:25:01.633]                   }
[08:25:01.633]                 }, immediateCondition = function(cond) {
[08:25:01.633]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.633]                   sendCondition(cond)
[08:25:01.633]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.633]                   {
[08:25:01.633]                     inherits <- base::inherits
[08:25:01.633]                     invokeRestart <- base::invokeRestart
[08:25:01.633]                     is.null <- base::is.null
[08:25:01.633]                     muffled <- FALSE
[08:25:01.633]                     if (inherits(cond, "message")) {
[08:25:01.633]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.633]                       if (muffled) 
[08:25:01.633]                         invokeRestart("muffleMessage")
[08:25:01.633]                     }
[08:25:01.633]                     else if (inherits(cond, "warning")) {
[08:25:01.633]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.633]                       if (muffled) 
[08:25:01.633]                         invokeRestart("muffleWarning")
[08:25:01.633]                     }
[08:25:01.633]                     else if (inherits(cond, "condition")) {
[08:25:01.633]                       if (!is.null(pattern)) {
[08:25:01.633]                         computeRestarts <- base::computeRestarts
[08:25:01.633]                         grepl <- base::grepl
[08:25:01.633]                         restarts <- computeRestarts(cond)
[08:25:01.633]                         for (restart in restarts) {
[08:25:01.633]                           name <- restart$name
[08:25:01.633]                           if (is.null(name)) 
[08:25:01.633]                             next
[08:25:01.633]                           if (!grepl(pattern, name)) 
[08:25:01.633]                             next
[08:25:01.633]                           invokeRestart(restart)
[08:25:01.633]                           muffled <- TRUE
[08:25:01.633]                           break
[08:25:01.633]                         }
[08:25:01.633]                       }
[08:25:01.633]                     }
[08:25:01.633]                     invisible(muffled)
[08:25:01.633]                   }
[08:25:01.633]                   muffleCondition(cond)
[08:25:01.633]                 })
[08:25:01.633]             }))
[08:25:01.633]             future::FutureResult(value = ...future.value$value, 
[08:25:01.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.633]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.633]                     ...future.globalenv.names))
[08:25:01.633]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.633]         }, condition = base::local({
[08:25:01.633]             c <- base::c
[08:25:01.633]             inherits <- base::inherits
[08:25:01.633]             invokeRestart <- base::invokeRestart
[08:25:01.633]             length <- base::length
[08:25:01.633]             list <- base::list
[08:25:01.633]             seq.int <- base::seq.int
[08:25:01.633]             signalCondition <- base::signalCondition
[08:25:01.633]             sys.calls <- base::sys.calls
[08:25:01.633]             `[[` <- base::`[[`
[08:25:01.633]             `+` <- base::`+`
[08:25:01.633]             `<<-` <- base::`<<-`
[08:25:01.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.633]                   3L)]
[08:25:01.633]             }
[08:25:01.633]             function(cond) {
[08:25:01.633]                 is_error <- inherits(cond, "error")
[08:25:01.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.633]                   NULL)
[08:25:01.633]                 if (is_error) {
[08:25:01.633]                   sessionInformation <- function() {
[08:25:01.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.633]                       search = base::search(), system = base::Sys.info())
[08:25:01.633]                   }
[08:25:01.633]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.633]                     cond$call), session = sessionInformation(), 
[08:25:01.633]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.633]                   signalCondition(cond)
[08:25:01.633]                 }
[08:25:01.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.633]                 "immediateCondition"))) {
[08:25:01.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.633]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.633]                   if (TRUE && !signal) {
[08:25:01.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.633]                     {
[08:25:01.633]                       inherits <- base::inherits
[08:25:01.633]                       invokeRestart <- base::invokeRestart
[08:25:01.633]                       is.null <- base::is.null
[08:25:01.633]                       muffled <- FALSE
[08:25:01.633]                       if (inherits(cond, "message")) {
[08:25:01.633]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.633]                         if (muffled) 
[08:25:01.633]                           invokeRestart("muffleMessage")
[08:25:01.633]                       }
[08:25:01.633]                       else if (inherits(cond, "warning")) {
[08:25:01.633]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.633]                         if (muffled) 
[08:25:01.633]                           invokeRestart("muffleWarning")
[08:25:01.633]                       }
[08:25:01.633]                       else if (inherits(cond, "condition")) {
[08:25:01.633]                         if (!is.null(pattern)) {
[08:25:01.633]                           computeRestarts <- base::computeRestarts
[08:25:01.633]                           grepl <- base::grepl
[08:25:01.633]                           restarts <- computeRestarts(cond)
[08:25:01.633]                           for (restart in restarts) {
[08:25:01.633]                             name <- restart$name
[08:25:01.633]                             if (is.null(name)) 
[08:25:01.633]                               next
[08:25:01.633]                             if (!grepl(pattern, name)) 
[08:25:01.633]                               next
[08:25:01.633]                             invokeRestart(restart)
[08:25:01.633]                             muffled <- TRUE
[08:25:01.633]                             break
[08:25:01.633]                           }
[08:25:01.633]                         }
[08:25:01.633]                       }
[08:25:01.633]                       invisible(muffled)
[08:25:01.633]                     }
[08:25:01.633]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.633]                   }
[08:25:01.633]                 }
[08:25:01.633]                 else {
[08:25:01.633]                   if (TRUE) {
[08:25:01.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.633]                     {
[08:25:01.633]                       inherits <- base::inherits
[08:25:01.633]                       invokeRestart <- base::invokeRestart
[08:25:01.633]                       is.null <- base::is.null
[08:25:01.633]                       muffled <- FALSE
[08:25:01.633]                       if (inherits(cond, "message")) {
[08:25:01.633]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.633]                         if (muffled) 
[08:25:01.633]                           invokeRestart("muffleMessage")
[08:25:01.633]                       }
[08:25:01.633]                       else if (inherits(cond, "warning")) {
[08:25:01.633]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.633]                         if (muffled) 
[08:25:01.633]                           invokeRestart("muffleWarning")
[08:25:01.633]                       }
[08:25:01.633]                       else if (inherits(cond, "condition")) {
[08:25:01.633]                         if (!is.null(pattern)) {
[08:25:01.633]                           computeRestarts <- base::computeRestarts
[08:25:01.633]                           grepl <- base::grepl
[08:25:01.633]                           restarts <- computeRestarts(cond)
[08:25:01.633]                           for (restart in restarts) {
[08:25:01.633]                             name <- restart$name
[08:25:01.633]                             if (is.null(name)) 
[08:25:01.633]                               next
[08:25:01.633]                             if (!grepl(pattern, name)) 
[08:25:01.633]                               next
[08:25:01.633]                             invokeRestart(restart)
[08:25:01.633]                             muffled <- TRUE
[08:25:01.633]                             break
[08:25:01.633]                           }
[08:25:01.633]                         }
[08:25:01.633]                       }
[08:25:01.633]                       invisible(muffled)
[08:25:01.633]                     }
[08:25:01.633]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.633]                   }
[08:25:01.633]                 }
[08:25:01.633]             }
[08:25:01.633]         }))
[08:25:01.633]     }, error = function(ex) {
[08:25:01.633]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.633]                 ...future.rng), started = ...future.startTime, 
[08:25:01.633]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.633]             version = "1.8"), class = "FutureResult")
[08:25:01.633]     }, finally = {
[08:25:01.633]         if (!identical(...future.workdir, getwd())) 
[08:25:01.633]             setwd(...future.workdir)
[08:25:01.633]         {
[08:25:01.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.633]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.633]             }
[08:25:01.633]             base::options(...future.oldOptions)
[08:25:01.633]             if (.Platform$OS.type == "windows") {
[08:25:01.633]                 old_names <- names(...future.oldEnvVars)
[08:25:01.633]                 envs <- base::Sys.getenv()
[08:25:01.633]                 names <- names(envs)
[08:25:01.633]                 common <- intersect(names, old_names)
[08:25:01.633]                 added <- setdiff(names, old_names)
[08:25:01.633]                 removed <- setdiff(old_names, names)
[08:25:01.633]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.633]                   envs[common]]
[08:25:01.633]                 NAMES <- toupper(changed)
[08:25:01.633]                 args <- list()
[08:25:01.633]                 for (kk in seq_along(NAMES)) {
[08:25:01.633]                   name <- changed[[kk]]
[08:25:01.633]                   NAME <- NAMES[[kk]]
[08:25:01.633]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.633]                     next
[08:25:01.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.633]                 }
[08:25:01.633]                 NAMES <- toupper(added)
[08:25:01.633]                 for (kk in seq_along(NAMES)) {
[08:25:01.633]                   name <- added[[kk]]
[08:25:01.633]                   NAME <- NAMES[[kk]]
[08:25:01.633]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.633]                     next
[08:25:01.633]                   args[[name]] <- ""
[08:25:01.633]                 }
[08:25:01.633]                 NAMES <- toupper(removed)
[08:25:01.633]                 for (kk in seq_along(NAMES)) {
[08:25:01.633]                   name <- removed[[kk]]
[08:25:01.633]                   NAME <- NAMES[[kk]]
[08:25:01.633]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.633]                     next
[08:25:01.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.633]                 }
[08:25:01.633]                 if (length(args) > 0) 
[08:25:01.633]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.633]             }
[08:25:01.633]             else {
[08:25:01.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.633]             }
[08:25:01.633]             {
[08:25:01.633]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.633]                   0L) {
[08:25:01.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.633]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.633]                   base::options(opts)
[08:25:01.633]                 }
[08:25:01.633]                 {
[08:25:01.633]                   {
[08:25:01.633]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.633]                     NULL
[08:25:01.633]                   }
[08:25:01.633]                   options(future.plan = NULL)
[08:25:01.633]                   if (is.na(NA_character_)) 
[08:25:01.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.633]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.633]                     .init = FALSE)
[08:25:01.633]                 }
[08:25:01.633]             }
[08:25:01.633]         }
[08:25:01.633]     })
[08:25:01.633]     if (TRUE) {
[08:25:01.633]         base::sink(type = "output", split = FALSE)
[08:25:01.633]         if (TRUE) {
[08:25:01.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.633]         }
[08:25:01.633]         else {
[08:25:01.633]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.633]         }
[08:25:01.633]         base::close(...future.stdout)
[08:25:01.633]         ...future.stdout <- NULL
[08:25:01.633]     }
[08:25:01.633]     ...future.result$conditions <- ...future.conditions
[08:25:01.633]     ...future.result$finished <- base::Sys.time()
[08:25:01.633]     ...future.result
[08:25:01.633] }
[08:25:01.636] Exporting 5 global objects (0.99 KiB) to cluster node #1 ...
[08:25:01.636] Exporting ‘...future.FUN’ (311 bytes) to cluster node #1 ...
[08:25:01.637] Exporting ‘...future.FUN’ (311 bytes) to cluster node #1 ... DONE
[08:25:01.637] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:01.637] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:01.637] Exporting ‘...future.elements_ii’ (101 bytes) to cluster node #1 ...
[08:25:01.638] Exporting ‘...future.elements_ii’ (101 bytes) to cluster node #1 ... DONE
[08:25:01.638] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #1 ...
[08:25:01.638] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #1 ... DONE
[08:25:01.638] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:01.639] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:01.639] Exporting 5 global objects (0.99 KiB) to cluster node #1 ... DONE
[08:25:01.639] MultisessionFuture started
[08:25:01.640] - Launch lazy future ... done
[08:25:01.640] run() for ‘MultisessionFuture’ ... done
[08:25:01.640] Created future:
[08:25:01.640] MultisessionFuture:
[08:25:01.640] Label: ‘future_eapply-1’
[08:25:01.640] Expression:
[08:25:01.640] {
[08:25:01.640]     do.call(function(...) {
[08:25:01.640]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.640]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.640]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.640]             on.exit(options(oopts), add = TRUE)
[08:25:01.640]         }
[08:25:01.640]         {
[08:25:01.640]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.640]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.640]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.640]             })
[08:25:01.640]         }
[08:25:01.640]     }, args = future.call.arguments)
[08:25:01.640] }
[08:25:01.640] Lazy evaluation: FALSE
[08:25:01.640] Asynchronous evaluation: TRUE
[08:25:01.640] Local evaluation: TRUE
[08:25:01.640] Environment: R_GlobalEnv
[08:25:01.640] Capture standard output: TRUE
[08:25:01.640] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:01.640] Globals: 5 objects totaling 563 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:01.640] Packages: 1 packages (‘stats’)
[08:25:01.640] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:01.640] Resolved: FALSE
[08:25:01.640] Value: <not collected>
[08:25:01.640] Conditions captured: <none>
[08:25:01.640] Early signaling: FALSE
[08:25:01.640] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:01.640] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.651] Chunk #1 of 2 ... DONE
[08:25:01.651] Chunk #2 of 2 ...
[08:25:01.652]  - Finding globals in 'X' for chunk #2 ...
[08:25:01.652] getGlobalsAndPackages() ...
[08:25:01.652] Searching for globals...
[08:25:01.652] 
[08:25:01.652] Searching for globals ... DONE
[08:25:01.652] - globals: [0] <none>
[08:25:01.652] getGlobalsAndPackages() ... DONE
[08:25:01.652]    + additional globals found: [n=0] 
[08:25:01.652]    + additional namespaces needed: [n=0] 
[08:25:01.653]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:01.653]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:01.653]  - seeds: <none>
[08:25:01.653]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.653] getGlobalsAndPackages() ...
[08:25:01.653] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.653] Resolving globals: FALSE
[08:25:01.653] Tweak future expression to call with '...' arguments ...
[08:25:01.653] {
[08:25:01.653]     do.call(function(...) {
[08:25:01.653]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.653]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.653]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.653]             on.exit(options(oopts), add = TRUE)
[08:25:01.653]         }
[08:25:01.653]         {
[08:25:01.653]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.653]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.653]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.653]             })
[08:25:01.653]         }
[08:25:01.653]     }, args = future.call.arguments)
[08:25:01.653] }
[08:25:01.654] Tweak future expression to call with '...' arguments ... DONE
[08:25:01.654] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.654] - packages: [1] ‘stats’
[08:25:01.654] getGlobalsAndPackages() ... DONE
[08:25:01.655] run() for ‘Future’ ...
[08:25:01.655] - state: ‘created’
[08:25:01.655] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:01.669] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.669] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:01.669]   - Field: ‘node’
[08:25:01.669]   - Field: ‘label’
[08:25:01.669]   - Field: ‘local’
[08:25:01.670]   - Field: ‘owner’
[08:25:01.670]   - Field: ‘envir’
[08:25:01.670]   - Field: ‘workers’
[08:25:01.670]   - Field: ‘packages’
[08:25:01.670]   - Field: ‘gc’
[08:25:01.670]   - Field: ‘conditions’
[08:25:01.670]   - Field: ‘persistent’
[08:25:01.670]   - Field: ‘expr’
[08:25:01.670]   - Field: ‘uuid’
[08:25:01.670]   - Field: ‘seed’
[08:25:01.670]   - Field: ‘version’
[08:25:01.670]   - Field: ‘result’
[08:25:01.671]   - Field: ‘asynchronous’
[08:25:01.671]   - Field: ‘calls’
[08:25:01.671]   - Field: ‘globals’
[08:25:01.671]   - Field: ‘stdout’
[08:25:01.671]   - Field: ‘earlySignal’
[08:25:01.671]   - Field: ‘lazy’
[08:25:01.671]   - Field: ‘state’
[08:25:01.671] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:01.671] - Launch lazy future ...
[08:25:01.671] Packages needed by the future expression (n = 1): ‘stats’
[08:25:01.672] Packages needed by future strategies (n = 0): <none>
[08:25:01.672] {
[08:25:01.672]     {
[08:25:01.672]         {
[08:25:01.672]             ...future.startTime <- base::Sys.time()
[08:25:01.672]             {
[08:25:01.672]                 {
[08:25:01.672]                   {
[08:25:01.672]                     {
[08:25:01.672]                       {
[08:25:01.672]                         base::local({
[08:25:01.672]                           has_future <- base::requireNamespace("future", 
[08:25:01.672]                             quietly = TRUE)
[08:25:01.672]                           if (has_future) {
[08:25:01.672]                             ns <- base::getNamespace("future")
[08:25:01.672]                             version <- ns[[".package"]][["version"]]
[08:25:01.672]                             if (is.null(version)) 
[08:25:01.672]                               version <- utils::packageVersion("future")
[08:25:01.672]                           }
[08:25:01.672]                           else {
[08:25:01.672]                             version <- NULL
[08:25:01.672]                           }
[08:25:01.672]                           if (!has_future || version < "1.8.0") {
[08:25:01.672]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.672]                               "", base::R.version$version.string), 
[08:25:01.672]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:01.672]                                 base::R.version$platform, 8 * 
[08:25:01.672]                                   base::.Machine$sizeof.pointer), 
[08:25:01.672]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.672]                                 "release", "version")], collapse = " "), 
[08:25:01.672]                               hostname = base::Sys.info()[["nodename"]])
[08:25:01.672]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.672]                               info)
[08:25:01.672]                             info <- base::paste(info, collapse = "; ")
[08:25:01.672]                             if (!has_future) {
[08:25:01.672]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.672]                                 info)
[08:25:01.672]                             }
[08:25:01.672]                             else {
[08:25:01.672]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.672]                                 info, version)
[08:25:01.672]                             }
[08:25:01.672]                             base::stop(msg)
[08:25:01.672]                           }
[08:25:01.672]                         })
[08:25:01.672]                       }
[08:25:01.672]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.672]                       base::options(mc.cores = 1L)
[08:25:01.672]                     }
[08:25:01.672]                     base::local({
[08:25:01.672]                       for (pkg in "stats") {
[08:25:01.672]                         base::loadNamespace(pkg)
[08:25:01.672]                         base::library(pkg, character.only = TRUE)
[08:25:01.672]                       }
[08:25:01.672]                     })
[08:25:01.672]                   }
[08:25:01.672]                   ...future.strategy.old <- future::plan("list")
[08:25:01.672]                   options(future.plan = NULL)
[08:25:01.672]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.672]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.672]                 }
[08:25:01.672]                 ...future.workdir <- getwd()
[08:25:01.672]             }
[08:25:01.672]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.672]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.672]         }
[08:25:01.672]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.672]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:01.672]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.672]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.672]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.672]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.672]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.672]             base::names(...future.oldOptions))
[08:25:01.672]     }
[08:25:01.672]     if (FALSE) {
[08:25:01.672]     }
[08:25:01.672]     else {
[08:25:01.672]         if (TRUE) {
[08:25:01.672]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.672]                 open = "w")
[08:25:01.672]         }
[08:25:01.672]         else {
[08:25:01.672]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.672]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.672]         }
[08:25:01.672]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.672]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.672]             base::sink(type = "output", split = FALSE)
[08:25:01.672]             base::close(...future.stdout)
[08:25:01.672]         }, add = TRUE)
[08:25:01.672]     }
[08:25:01.672]     ...future.frame <- base::sys.nframe()
[08:25:01.672]     ...future.conditions <- base::list()
[08:25:01.672]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.672]     if (FALSE) {
[08:25:01.672]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.672]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.672]     }
[08:25:01.672]     ...future.result <- base::tryCatch({
[08:25:01.672]         base::withCallingHandlers({
[08:25:01.672]             ...future.value <- base::withVisible(base::local({
[08:25:01.672]                 ...future.makeSendCondition <- base::local({
[08:25:01.672]                   sendCondition <- NULL
[08:25:01.672]                   function(frame = 1L) {
[08:25:01.672]                     if (is.function(sendCondition)) 
[08:25:01.672]                       return(sendCondition)
[08:25:01.672]                     ns <- getNamespace("parallel")
[08:25:01.672]                     if (exists("sendData", mode = "function", 
[08:25:01.672]                       envir = ns)) {
[08:25:01.672]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.672]                         envir = ns)
[08:25:01.672]                       envir <- sys.frame(frame)
[08:25:01.672]                       master <- NULL
[08:25:01.672]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.672]                         !identical(envir, emptyenv())) {
[08:25:01.672]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.672]                           inherits = FALSE)) {
[08:25:01.672]                           master <- get("master", mode = "list", 
[08:25:01.672]                             envir = envir, inherits = FALSE)
[08:25:01.672]                           if (inherits(master, c("SOCKnode", 
[08:25:01.672]                             "SOCK0node"))) {
[08:25:01.672]                             sendCondition <<- function(cond) {
[08:25:01.672]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.672]                                 success = TRUE)
[08:25:01.672]                               parallel_sendData(master, data)
[08:25:01.672]                             }
[08:25:01.672]                             return(sendCondition)
[08:25:01.672]                           }
[08:25:01.672]                         }
[08:25:01.672]                         frame <- frame + 1L
[08:25:01.672]                         envir <- sys.frame(frame)
[08:25:01.672]                       }
[08:25:01.672]                     }
[08:25:01.672]                     sendCondition <<- function(cond) NULL
[08:25:01.672]                   }
[08:25:01.672]                 })
[08:25:01.672]                 withCallingHandlers({
[08:25:01.672]                   {
[08:25:01.672]                     do.call(function(...) {
[08:25:01.672]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.672]                       if (!identical(...future.globals.maxSize.org, 
[08:25:01.672]                         ...future.globals.maxSize)) {
[08:25:01.672]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.672]                         on.exit(options(oopts), add = TRUE)
[08:25:01.672]                       }
[08:25:01.672]                       {
[08:25:01.672]                         lapply(seq_along(...future.elements_ii), 
[08:25:01.672]                           FUN = function(jj) {
[08:25:01.672]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.672]                             ...future.FUN(...future.X_jj, ...)
[08:25:01.672]                           })
[08:25:01.672]                       }
[08:25:01.672]                     }, args = future.call.arguments)
[08:25:01.672]                   }
[08:25:01.672]                 }, immediateCondition = function(cond) {
[08:25:01.672]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.672]                   sendCondition(cond)
[08:25:01.672]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.672]                   {
[08:25:01.672]                     inherits <- base::inherits
[08:25:01.672]                     invokeRestart <- base::invokeRestart
[08:25:01.672]                     is.null <- base::is.null
[08:25:01.672]                     muffled <- FALSE
[08:25:01.672]                     if (inherits(cond, "message")) {
[08:25:01.672]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.672]                       if (muffled) 
[08:25:01.672]                         invokeRestart("muffleMessage")
[08:25:01.672]                     }
[08:25:01.672]                     else if (inherits(cond, "warning")) {
[08:25:01.672]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.672]                       if (muffled) 
[08:25:01.672]                         invokeRestart("muffleWarning")
[08:25:01.672]                     }
[08:25:01.672]                     else if (inherits(cond, "condition")) {
[08:25:01.672]                       if (!is.null(pattern)) {
[08:25:01.672]                         computeRestarts <- base::computeRestarts
[08:25:01.672]                         grepl <- base::grepl
[08:25:01.672]                         restarts <- computeRestarts(cond)
[08:25:01.672]                         for (restart in restarts) {
[08:25:01.672]                           name <- restart$name
[08:25:01.672]                           if (is.null(name)) 
[08:25:01.672]                             next
[08:25:01.672]                           if (!grepl(pattern, name)) 
[08:25:01.672]                             next
[08:25:01.672]                           invokeRestart(restart)
[08:25:01.672]                           muffled <- TRUE
[08:25:01.672]                           break
[08:25:01.672]                         }
[08:25:01.672]                       }
[08:25:01.672]                     }
[08:25:01.672]                     invisible(muffled)
[08:25:01.672]                   }
[08:25:01.672]                   muffleCondition(cond)
[08:25:01.672]                 })
[08:25:01.672]             }))
[08:25:01.672]             future::FutureResult(value = ...future.value$value, 
[08:25:01.672]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.672]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.672]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.672]                     ...future.globalenv.names))
[08:25:01.672]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.672]         }, condition = base::local({
[08:25:01.672]             c <- base::c
[08:25:01.672]             inherits <- base::inherits
[08:25:01.672]             invokeRestart <- base::invokeRestart
[08:25:01.672]             length <- base::length
[08:25:01.672]             list <- base::list
[08:25:01.672]             seq.int <- base::seq.int
[08:25:01.672]             signalCondition <- base::signalCondition
[08:25:01.672]             sys.calls <- base::sys.calls
[08:25:01.672]             `[[` <- base::`[[`
[08:25:01.672]             `+` <- base::`+`
[08:25:01.672]             `<<-` <- base::`<<-`
[08:25:01.672]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.672]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.672]                   3L)]
[08:25:01.672]             }
[08:25:01.672]             function(cond) {
[08:25:01.672]                 is_error <- inherits(cond, "error")
[08:25:01.672]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.672]                   NULL)
[08:25:01.672]                 if (is_error) {
[08:25:01.672]                   sessionInformation <- function() {
[08:25:01.672]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.672]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.672]                       search = base::search(), system = base::Sys.info())
[08:25:01.672]                   }
[08:25:01.672]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.672]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.672]                     cond$call), session = sessionInformation(), 
[08:25:01.672]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.672]                   signalCondition(cond)
[08:25:01.672]                 }
[08:25:01.672]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.672]                 "immediateCondition"))) {
[08:25:01.672]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.672]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.672]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.672]                   if (TRUE && !signal) {
[08:25:01.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.672]                     {
[08:25:01.672]                       inherits <- base::inherits
[08:25:01.672]                       invokeRestart <- base::invokeRestart
[08:25:01.672]                       is.null <- base::is.null
[08:25:01.672]                       muffled <- FALSE
[08:25:01.672]                       if (inherits(cond, "message")) {
[08:25:01.672]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.672]                         if (muffled) 
[08:25:01.672]                           invokeRestart("muffleMessage")
[08:25:01.672]                       }
[08:25:01.672]                       else if (inherits(cond, "warning")) {
[08:25:01.672]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.672]                         if (muffled) 
[08:25:01.672]                           invokeRestart("muffleWarning")
[08:25:01.672]                       }
[08:25:01.672]                       else if (inherits(cond, "condition")) {
[08:25:01.672]                         if (!is.null(pattern)) {
[08:25:01.672]                           computeRestarts <- base::computeRestarts
[08:25:01.672]                           grepl <- base::grepl
[08:25:01.672]                           restarts <- computeRestarts(cond)
[08:25:01.672]                           for (restart in restarts) {
[08:25:01.672]                             name <- restart$name
[08:25:01.672]                             if (is.null(name)) 
[08:25:01.672]                               next
[08:25:01.672]                             if (!grepl(pattern, name)) 
[08:25:01.672]                               next
[08:25:01.672]                             invokeRestart(restart)
[08:25:01.672]                             muffled <- TRUE
[08:25:01.672]                             break
[08:25:01.672]                           }
[08:25:01.672]                         }
[08:25:01.672]                       }
[08:25:01.672]                       invisible(muffled)
[08:25:01.672]                     }
[08:25:01.672]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.672]                   }
[08:25:01.672]                 }
[08:25:01.672]                 else {
[08:25:01.672]                   if (TRUE) {
[08:25:01.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.672]                     {
[08:25:01.672]                       inherits <- base::inherits
[08:25:01.672]                       invokeRestart <- base::invokeRestart
[08:25:01.672]                       is.null <- base::is.null
[08:25:01.672]                       muffled <- FALSE
[08:25:01.672]                       if (inherits(cond, "message")) {
[08:25:01.672]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.672]                         if (muffled) 
[08:25:01.672]                           invokeRestart("muffleMessage")
[08:25:01.672]                       }
[08:25:01.672]                       else if (inherits(cond, "warning")) {
[08:25:01.672]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.672]                         if (muffled) 
[08:25:01.672]                           invokeRestart("muffleWarning")
[08:25:01.672]                       }
[08:25:01.672]                       else if (inherits(cond, "condition")) {
[08:25:01.672]                         if (!is.null(pattern)) {
[08:25:01.672]                           computeRestarts <- base::computeRestarts
[08:25:01.672]                           grepl <- base::grepl
[08:25:01.672]                           restarts <- computeRestarts(cond)
[08:25:01.672]                           for (restart in restarts) {
[08:25:01.672]                             name <- restart$name
[08:25:01.672]                             if (is.null(name)) 
[08:25:01.672]                               next
[08:25:01.672]                             if (!grepl(pattern, name)) 
[08:25:01.672]                               next
[08:25:01.672]                             invokeRestart(restart)
[08:25:01.672]                             muffled <- TRUE
[08:25:01.672]                             break
[08:25:01.672]                           }
[08:25:01.672]                         }
[08:25:01.672]                       }
[08:25:01.672]                       invisible(muffled)
[08:25:01.672]                     }
[08:25:01.672]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.672]                   }
[08:25:01.672]                 }
[08:25:01.672]             }
[08:25:01.672]         }))
[08:25:01.672]     }, error = function(ex) {
[08:25:01.672]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.672]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.672]                 ...future.rng), started = ...future.startTime, 
[08:25:01.672]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.672]             version = "1.8"), class = "FutureResult")
[08:25:01.672]     }, finally = {
[08:25:01.672]         if (!identical(...future.workdir, getwd())) 
[08:25:01.672]             setwd(...future.workdir)
[08:25:01.672]         {
[08:25:01.672]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.672]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.672]             }
[08:25:01.672]             base::options(...future.oldOptions)
[08:25:01.672]             if (.Platform$OS.type == "windows") {
[08:25:01.672]                 old_names <- names(...future.oldEnvVars)
[08:25:01.672]                 envs <- base::Sys.getenv()
[08:25:01.672]                 names <- names(envs)
[08:25:01.672]                 common <- intersect(names, old_names)
[08:25:01.672]                 added <- setdiff(names, old_names)
[08:25:01.672]                 removed <- setdiff(old_names, names)
[08:25:01.672]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.672]                   envs[common]]
[08:25:01.672]                 NAMES <- toupper(changed)
[08:25:01.672]                 args <- list()
[08:25:01.672]                 for (kk in seq_along(NAMES)) {
[08:25:01.672]                   name <- changed[[kk]]
[08:25:01.672]                   NAME <- NAMES[[kk]]
[08:25:01.672]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.672]                     next
[08:25:01.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.672]                 }
[08:25:01.672]                 NAMES <- toupper(added)
[08:25:01.672]                 for (kk in seq_along(NAMES)) {
[08:25:01.672]                   name <- added[[kk]]
[08:25:01.672]                   NAME <- NAMES[[kk]]
[08:25:01.672]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.672]                     next
[08:25:01.672]                   args[[name]] <- ""
[08:25:01.672]                 }
[08:25:01.672]                 NAMES <- toupper(removed)
[08:25:01.672]                 for (kk in seq_along(NAMES)) {
[08:25:01.672]                   name <- removed[[kk]]
[08:25:01.672]                   NAME <- NAMES[[kk]]
[08:25:01.672]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.672]                     next
[08:25:01.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.672]                 }
[08:25:01.672]                 if (length(args) > 0) 
[08:25:01.672]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.672]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.672]             }
[08:25:01.672]             else {
[08:25:01.672]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.672]             }
[08:25:01.672]             {
[08:25:01.672]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.672]                   0L) {
[08:25:01.672]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.672]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.672]                   base::options(opts)
[08:25:01.672]                 }
[08:25:01.672]                 {
[08:25:01.672]                   {
[08:25:01.672]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.672]                     NULL
[08:25:01.672]                   }
[08:25:01.672]                   options(future.plan = NULL)
[08:25:01.672]                   if (is.na(NA_character_)) 
[08:25:01.672]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.672]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.672]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.672]                     .init = FALSE)
[08:25:01.672]                 }
[08:25:01.672]             }
[08:25:01.672]         }
[08:25:01.672]     })
[08:25:01.672]     if (TRUE) {
[08:25:01.672]         base::sink(type = "output", split = FALSE)
[08:25:01.672]         if (TRUE) {
[08:25:01.672]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.672]         }
[08:25:01.672]         else {
[08:25:01.672]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.672]         }
[08:25:01.672]         base::close(...future.stdout)
[08:25:01.672]         ...future.stdout <- NULL
[08:25:01.672]     }
[08:25:01.672]     ...future.result$conditions <- ...future.conditions
[08:25:01.672]     ...future.result$finished <- base::Sys.time()
[08:25:01.672]     ...future.result
[08:25:01.672] }
[08:25:01.675] Exporting 5 global objects (1.14 KiB) to cluster node #2 ...
[08:25:01.675] Exporting ‘...future.FUN’ (311 bytes) to cluster node #2 ...
[08:25:01.676] Exporting ‘...future.FUN’ (311 bytes) to cluster node #2 ... DONE
[08:25:01.676] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:01.676] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:01.676] Exporting ‘...future.elements_ii’ (259 bytes) to cluster node #2 ...
[08:25:01.676] Exporting ‘...future.elements_ii’ (259 bytes) to cluster node #2 ... DONE
[08:25:01.677] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #2 ...
[08:25:01.677] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #2 ... DONE
[08:25:01.677] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:01.677] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:01.677] Exporting 5 global objects (1.14 KiB) to cluster node #2 ... DONE
[08:25:01.678] MultisessionFuture started
[08:25:01.678] - Launch lazy future ... done
[08:25:01.678] run() for ‘MultisessionFuture’ ... done
[08:25:01.678] Created future:
[08:25:01.678] MultisessionFuture:
[08:25:01.678] Label: ‘future_eapply-2’
[08:25:01.678] Expression:
[08:25:01.678] {
[08:25:01.678]     do.call(function(...) {
[08:25:01.678]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.678]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.678]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.678]             on.exit(options(oopts), add = TRUE)
[08:25:01.678]         }
[08:25:01.678]         {
[08:25:01.678]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.678]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.678]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.678]             })
[08:25:01.678]         }
[08:25:01.678]     }, args = future.call.arguments)
[08:25:01.678] }
[08:25:01.678] Lazy evaluation: FALSE
[08:25:01.678] Asynchronous evaluation: TRUE
[08:25:01.678] Local evaluation: TRUE
[08:25:01.678] Environment: R_GlobalEnv
[08:25:01.678] Capture standard output: TRUE
[08:25:01.678] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:01.678] Globals: 5 objects totaling 721 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:01.678] Packages: 1 packages (‘stats’)
[08:25:01.678] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:01.678] Resolved: FALSE
[08:25:01.678] Value: <not collected>
[08:25:01.678] Conditions captured: <none>
[08:25:01.678] Early signaling: FALSE
[08:25:01.678] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:01.678] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.690] Chunk #2 of 2 ... DONE
[08:25:01.690] Launching 2 futures (chunks) ... DONE
[08:25:01.690] Resolving 2 futures (chunks) ...
[08:25:01.690] resolve() on list ...
[08:25:01.696]  recursive: 0
[08:25:01.696]  length: 2
[08:25:01.696] 
[08:25:01.697] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.697] - Validating connection of MultisessionFuture
[08:25:01.697] - received message: FutureResult
[08:25:01.697] - Received FutureResult
[08:25:01.697] - Erased future from FutureRegistry
[08:25:01.697] result() for ClusterFuture ...
[08:25:01.697] - result already collected: FutureResult
[08:25:01.698] result() for ClusterFuture ... done
[08:25:01.698] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.698] Future #1
[08:25:01.698] result() for ClusterFuture ...
[08:25:01.698] - result already collected: FutureResult
[08:25:01.698] result() for ClusterFuture ... done
[08:25:01.698] result() for ClusterFuture ...
[08:25:01.698] - result already collected: FutureResult
[08:25:01.698] result() for ClusterFuture ... done
[08:25:01.698] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:01.698] - nx: 2
[08:25:01.698] - relay: TRUE
[08:25:01.699] - stdout: TRUE
[08:25:01.699] - signal: TRUE
[08:25:01.699] - resignal: FALSE
[08:25:01.699] - force: TRUE
[08:25:01.699] - relayed: [n=2] FALSE, FALSE
[08:25:01.699] - queued futures: [n=2] FALSE, FALSE
[08:25:01.699]  - until=1
[08:25:01.699]  - relaying element #1
[08:25:01.699] result() for ClusterFuture ...
[08:25:01.699] - result already collected: FutureResult
[08:25:01.699] result() for ClusterFuture ... done
[08:25:01.699] result() for ClusterFuture ...
[08:25:01.699] - result already collected: FutureResult
[08:25:01.700] result() for ClusterFuture ... done
[08:25:01.700] result() for ClusterFuture ...
[08:25:01.700] - result already collected: FutureResult
[08:25:01.700] result() for ClusterFuture ... done
[08:25:01.700] result() for ClusterFuture ...
[08:25:01.700] - result already collected: FutureResult
[08:25:01.700] result() for ClusterFuture ... done
[08:25:01.700] - relayed: [n=2] TRUE, FALSE
[08:25:01.700] - queued futures: [n=2] TRUE, FALSE
[08:25:01.700] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:01.700]  length: 1 (resolved future 1)
[08:25:01.721] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.722] - Validating connection of MultisessionFuture
[08:25:01.722] - received message: FutureResult
[08:25:01.722] - Received FutureResult
[08:25:01.722] - Erased future from FutureRegistry
[08:25:01.722] result() for ClusterFuture ...
[08:25:01.722] - result already collected: FutureResult
[08:25:01.722] result() for ClusterFuture ... done
[08:25:01.722] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.722] Future #2
[08:25:01.723] result() for ClusterFuture ...
[08:25:01.723] - result already collected: FutureResult
[08:25:01.723] result() for ClusterFuture ... done
[08:25:01.723] result() for ClusterFuture ...
[08:25:01.723] - result already collected: FutureResult
[08:25:01.723] result() for ClusterFuture ... done
[08:25:01.723] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:01.723] - nx: 2
[08:25:01.723] - relay: TRUE
[08:25:01.723] - stdout: TRUE
[08:25:01.723] - signal: TRUE
[08:25:01.723] - resignal: FALSE
[08:25:01.724] - force: TRUE
[08:25:01.724] - relayed: [n=2] TRUE, FALSE
[08:25:01.724] - queued futures: [n=2] TRUE, FALSE
[08:25:01.724]  - until=2
[08:25:01.724]  - relaying element #2
[08:25:01.724] result() for ClusterFuture ...
[08:25:01.724] - result already collected: FutureResult
[08:25:01.724] result() for ClusterFuture ... done
[08:25:01.724] result() for ClusterFuture ...
[08:25:01.724] - result already collected: FutureResult
[08:25:01.724] result() for ClusterFuture ... done
[08:25:01.725] result() for ClusterFuture ...
[08:25:01.725] - result already collected: FutureResult
[08:25:01.725] result() for ClusterFuture ... done
[08:25:01.725] result() for ClusterFuture ...
[08:25:01.725] - result already collected: FutureResult
[08:25:01.725] result() for ClusterFuture ... done
[08:25:01.725] - relayed: [n=2] TRUE, TRUE
[08:25:01.725] - queued futures: [n=2] TRUE, TRUE
[08:25:01.725] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:01.725]  length: 0 (resolved future 2)
[08:25:01.725] Relaying remaining futures
[08:25:01.725] signalConditionsASAP(NULL, pos=0) ...
[08:25:01.725] - nx: 2
[08:25:01.726] - relay: TRUE
[08:25:01.726] - stdout: TRUE
[08:25:01.726] - signal: TRUE
[08:25:01.726] - resignal: FALSE
[08:25:01.726] - force: TRUE
[08:25:01.726] - relayed: [n=2] TRUE, TRUE
[08:25:01.726] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:01.726] - relayed: [n=2] TRUE, TRUE
[08:25:01.726] - queued futures: [n=2] TRUE, TRUE
[08:25:01.726] signalConditionsASAP(NULL, pos=0) ... done
[08:25:01.726] resolve() on list ... DONE
[08:25:01.726] result() for ClusterFuture ...
[08:25:01.727] - result already collected: FutureResult
[08:25:01.727] result() for ClusterFuture ... done
[08:25:01.727] result() for ClusterFuture ...
[08:25:01.727] - result already collected: FutureResult
[08:25:01.727] result() for ClusterFuture ... done
[08:25:01.727] result() for ClusterFuture ...
[08:25:01.727] - result already collected: FutureResult
[08:25:01.727] result() for ClusterFuture ... done
[08:25:01.727] result() for ClusterFuture ...
[08:25:01.727] - result already collected: FutureResult
[08:25:01.727] result() for ClusterFuture ... done
[08:25:01.727]  - Number of value chunks collected: 2
[08:25:01.728] Resolving 2 futures (chunks) ... DONE
[08:25:01.728] Reducing values from 2 chunks ...
[08:25:01.728]  - Number of values collected after concatenation: 3
[08:25:01.728]  - Number of values expected: 3
[08:25:01.728] Reducing values from 2 chunks ... DONE
[08:25:01.728] future_lapply() ... DONE
[08:25:01.728] future_lapply() ...
[08:25:01.730] Number of chunks: 2
[08:25:01.730] getGlobalsAndPackagesXApply() ...
[08:25:01.731]  - future.globals: TRUE
[08:25:01.731] getGlobalsAndPackages() ...
[08:25:01.731] Searching for globals...
[08:25:01.732] - globals found: [2] ‘FUN’, ‘UseMethod’
[08:25:01.732] Searching for globals ... DONE
[08:25:01.732] Resolving globals: FALSE
[08:25:01.732] The total size of the 1 globals is 311 bytes (311 bytes)
[08:25:01.733] The total size of the 1 globals exported for future expression (‘FUN()’) is 311 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (311 bytes of class ‘function’)
[08:25:01.733] - globals: [1] ‘FUN’
[08:25:01.733] - packages: [1] ‘stats’
[08:25:01.733] getGlobalsAndPackages() ... DONE
[08:25:01.733]  - globals found/used: [n=1] ‘FUN’
[08:25:01.733]  - needed namespaces: [n=1] ‘stats’
[08:25:01.733] Finding globals ... DONE
[08:25:01.733]  - use_args: TRUE
[08:25:01.734]  - Getting '...' globals ...
[08:25:01.734] resolve() on list ...
[08:25:01.734]  recursive: 0
[08:25:01.734]  length: 1
[08:25:01.734]  elements: ‘...’
[08:25:01.734]  length: 0 (resolved future 1)
[08:25:01.734] resolve() on list ... DONE
[08:25:01.734]    - '...' content: [n=0] 
[08:25:01.735] List of 1
[08:25:01.735]  $ ...: list()
[08:25:01.735]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:01.735]  - attr(*, "where")=List of 1
[08:25:01.735]   ..$ ...:<environment: 0x5577ed190b18> 
[08:25:01.735]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:01.735]  - attr(*, "resolved")= logi TRUE
[08:25:01.735]  - attr(*, "total_size")= num NA
[08:25:01.737]  - Getting '...' globals ... DONE
[08:25:01.737] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:25:01.737] List of 2
[08:25:01.737]  $ ...future.FUN:function (x, ...)  
[08:25:01.737]  $ ...          : list()
[08:25:01.737]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:25:01.737]  - attr(*, "where")=List of 2
[08:25:01.737]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[08:25:01.737]   ..$ ...          :<environment: 0x5577ed190b18> 
[08:25:01.737]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:25:01.737]  - attr(*, "resolved")= logi FALSE
[08:25:01.737]  - attr(*, "total_size")= num 5437
[08:25:01.740] Packages to be attached in all futures: [n=1] ‘stats’
[08:25:01.740] getGlobalsAndPackagesXApply() ... DONE
[08:25:01.740] Number of futures (= number of chunks): 2
[08:25:01.740] Launching 2 futures (chunks) ...
[08:25:01.740] Chunk #1 of 2 ...
[08:25:01.741]  - Finding globals in 'X' for chunk #1 ...
[08:25:01.741] getGlobalsAndPackages() ...
[08:25:01.741] Searching for globals...
[08:25:01.741] 
[08:25:01.741] Searching for globals ... DONE
[08:25:01.741] - globals: [0] <none>
[08:25:01.741] getGlobalsAndPackages() ... DONE
[08:25:01.741]    + additional globals found: [n=0] 
[08:25:01.741]    + additional namespaces needed: [n=0] 
[08:25:01.741]  - Finding globals in 'X' for chunk #1 ... DONE
[08:25:01.742]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:01.742]  - seeds: <none>
[08:25:01.742]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.742] getGlobalsAndPackages() ...
[08:25:01.742] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.742] Resolving globals: FALSE
[08:25:01.742] Tweak future expression to call with '...' arguments ...
[08:25:01.742] {
[08:25:01.742]     do.call(function(...) {
[08:25:01.742]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.742]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.742]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.742]             on.exit(options(oopts), add = TRUE)
[08:25:01.742]         }
[08:25:01.742]         {
[08:25:01.742]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.742]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.742]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.742]             })
[08:25:01.742]         }
[08:25:01.742]     }, args = future.call.arguments)
[08:25:01.742] }
[08:25:01.742] Tweak future expression to call with '...' arguments ... DONE
[08:25:01.743] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.743] - packages: [1] ‘stats’
[08:25:01.743] getGlobalsAndPackages() ... DONE
[08:25:01.743] run() for ‘Future’ ...
[08:25:01.743] - state: ‘created’
[08:25:01.744] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:01.758] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.758] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:01.758]   - Field: ‘node’
[08:25:01.758]   - Field: ‘label’
[08:25:01.759]   - Field: ‘local’
[08:25:01.759]   - Field: ‘owner’
[08:25:01.759]   - Field: ‘envir’
[08:25:01.759]   - Field: ‘workers’
[08:25:01.759]   - Field: ‘packages’
[08:25:01.759]   - Field: ‘gc’
[08:25:01.759]   - Field: ‘conditions’
[08:25:01.759]   - Field: ‘persistent’
[08:25:01.759]   - Field: ‘expr’
[08:25:01.759]   - Field: ‘uuid’
[08:25:01.759]   - Field: ‘seed’
[08:25:01.760]   - Field: ‘version’
[08:25:01.760]   - Field: ‘result’
[08:25:01.760]   - Field: ‘asynchronous’
[08:25:01.760]   - Field: ‘calls’
[08:25:01.760]   - Field: ‘globals’
[08:25:01.760]   - Field: ‘stdout’
[08:25:01.760]   - Field: ‘earlySignal’
[08:25:01.760]   - Field: ‘lazy’
[08:25:01.760]   - Field: ‘state’
[08:25:01.760] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:01.760] - Launch lazy future ...
[08:25:01.761] Packages needed by the future expression (n = 1): ‘stats’
[08:25:01.761] Packages needed by future strategies (n = 0): <none>
[08:25:01.761] {
[08:25:01.761]     {
[08:25:01.761]         {
[08:25:01.761]             ...future.startTime <- base::Sys.time()
[08:25:01.761]             {
[08:25:01.761]                 {
[08:25:01.761]                   {
[08:25:01.761]                     {
[08:25:01.761]                       {
[08:25:01.761]                         base::local({
[08:25:01.761]                           has_future <- base::requireNamespace("future", 
[08:25:01.761]                             quietly = TRUE)
[08:25:01.761]                           if (has_future) {
[08:25:01.761]                             ns <- base::getNamespace("future")
[08:25:01.761]                             version <- ns[[".package"]][["version"]]
[08:25:01.761]                             if (is.null(version)) 
[08:25:01.761]                               version <- utils::packageVersion("future")
[08:25:01.761]                           }
[08:25:01.761]                           else {
[08:25:01.761]                             version <- NULL
[08:25:01.761]                           }
[08:25:01.761]                           if (!has_future || version < "1.8.0") {
[08:25:01.761]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.761]                               "", base::R.version$version.string), 
[08:25:01.761]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:01.761]                                 base::R.version$platform, 8 * 
[08:25:01.761]                                   base::.Machine$sizeof.pointer), 
[08:25:01.761]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.761]                                 "release", "version")], collapse = " "), 
[08:25:01.761]                               hostname = base::Sys.info()[["nodename"]])
[08:25:01.761]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.761]                               info)
[08:25:01.761]                             info <- base::paste(info, collapse = "; ")
[08:25:01.761]                             if (!has_future) {
[08:25:01.761]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.761]                                 info)
[08:25:01.761]                             }
[08:25:01.761]                             else {
[08:25:01.761]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.761]                                 info, version)
[08:25:01.761]                             }
[08:25:01.761]                             base::stop(msg)
[08:25:01.761]                           }
[08:25:01.761]                         })
[08:25:01.761]                       }
[08:25:01.761]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.761]                       base::options(mc.cores = 1L)
[08:25:01.761]                     }
[08:25:01.761]                     base::local({
[08:25:01.761]                       for (pkg in "stats") {
[08:25:01.761]                         base::loadNamespace(pkg)
[08:25:01.761]                         base::library(pkg, character.only = TRUE)
[08:25:01.761]                       }
[08:25:01.761]                     })
[08:25:01.761]                   }
[08:25:01.761]                   ...future.strategy.old <- future::plan("list")
[08:25:01.761]                   options(future.plan = NULL)
[08:25:01.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.761]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.761]                 }
[08:25:01.761]                 ...future.workdir <- getwd()
[08:25:01.761]             }
[08:25:01.761]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.761]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.761]         }
[08:25:01.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.761]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:01.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.761]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.761]             base::names(...future.oldOptions))
[08:25:01.761]     }
[08:25:01.761]     if (FALSE) {
[08:25:01.761]     }
[08:25:01.761]     else {
[08:25:01.761]         if (TRUE) {
[08:25:01.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.761]                 open = "w")
[08:25:01.761]         }
[08:25:01.761]         else {
[08:25:01.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.761]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.761]         }
[08:25:01.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.761]             base::sink(type = "output", split = FALSE)
[08:25:01.761]             base::close(...future.stdout)
[08:25:01.761]         }, add = TRUE)
[08:25:01.761]     }
[08:25:01.761]     ...future.frame <- base::sys.nframe()
[08:25:01.761]     ...future.conditions <- base::list()
[08:25:01.761]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.761]     if (FALSE) {
[08:25:01.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.761]     }
[08:25:01.761]     ...future.result <- base::tryCatch({
[08:25:01.761]         base::withCallingHandlers({
[08:25:01.761]             ...future.value <- base::withVisible(base::local({
[08:25:01.761]                 ...future.makeSendCondition <- base::local({
[08:25:01.761]                   sendCondition <- NULL
[08:25:01.761]                   function(frame = 1L) {
[08:25:01.761]                     if (is.function(sendCondition)) 
[08:25:01.761]                       return(sendCondition)
[08:25:01.761]                     ns <- getNamespace("parallel")
[08:25:01.761]                     if (exists("sendData", mode = "function", 
[08:25:01.761]                       envir = ns)) {
[08:25:01.761]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.761]                         envir = ns)
[08:25:01.761]                       envir <- sys.frame(frame)
[08:25:01.761]                       master <- NULL
[08:25:01.761]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.761]                         !identical(envir, emptyenv())) {
[08:25:01.761]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.761]                           inherits = FALSE)) {
[08:25:01.761]                           master <- get("master", mode = "list", 
[08:25:01.761]                             envir = envir, inherits = FALSE)
[08:25:01.761]                           if (inherits(master, c("SOCKnode", 
[08:25:01.761]                             "SOCK0node"))) {
[08:25:01.761]                             sendCondition <<- function(cond) {
[08:25:01.761]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.761]                                 success = TRUE)
[08:25:01.761]                               parallel_sendData(master, data)
[08:25:01.761]                             }
[08:25:01.761]                             return(sendCondition)
[08:25:01.761]                           }
[08:25:01.761]                         }
[08:25:01.761]                         frame <- frame + 1L
[08:25:01.761]                         envir <- sys.frame(frame)
[08:25:01.761]                       }
[08:25:01.761]                     }
[08:25:01.761]                     sendCondition <<- function(cond) NULL
[08:25:01.761]                   }
[08:25:01.761]                 })
[08:25:01.761]                 withCallingHandlers({
[08:25:01.761]                   {
[08:25:01.761]                     do.call(function(...) {
[08:25:01.761]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.761]                       if (!identical(...future.globals.maxSize.org, 
[08:25:01.761]                         ...future.globals.maxSize)) {
[08:25:01.761]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.761]                         on.exit(options(oopts), add = TRUE)
[08:25:01.761]                       }
[08:25:01.761]                       {
[08:25:01.761]                         lapply(seq_along(...future.elements_ii), 
[08:25:01.761]                           FUN = function(jj) {
[08:25:01.761]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.761]                             ...future.FUN(...future.X_jj, ...)
[08:25:01.761]                           })
[08:25:01.761]                       }
[08:25:01.761]                     }, args = future.call.arguments)
[08:25:01.761]                   }
[08:25:01.761]                 }, immediateCondition = function(cond) {
[08:25:01.761]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.761]                   sendCondition(cond)
[08:25:01.761]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.761]                   {
[08:25:01.761]                     inherits <- base::inherits
[08:25:01.761]                     invokeRestart <- base::invokeRestart
[08:25:01.761]                     is.null <- base::is.null
[08:25:01.761]                     muffled <- FALSE
[08:25:01.761]                     if (inherits(cond, "message")) {
[08:25:01.761]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.761]                       if (muffled) 
[08:25:01.761]                         invokeRestart("muffleMessage")
[08:25:01.761]                     }
[08:25:01.761]                     else if (inherits(cond, "warning")) {
[08:25:01.761]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.761]                       if (muffled) 
[08:25:01.761]                         invokeRestart("muffleWarning")
[08:25:01.761]                     }
[08:25:01.761]                     else if (inherits(cond, "condition")) {
[08:25:01.761]                       if (!is.null(pattern)) {
[08:25:01.761]                         computeRestarts <- base::computeRestarts
[08:25:01.761]                         grepl <- base::grepl
[08:25:01.761]                         restarts <- computeRestarts(cond)
[08:25:01.761]                         for (restart in restarts) {
[08:25:01.761]                           name <- restart$name
[08:25:01.761]                           if (is.null(name)) 
[08:25:01.761]                             next
[08:25:01.761]                           if (!grepl(pattern, name)) 
[08:25:01.761]                             next
[08:25:01.761]                           invokeRestart(restart)
[08:25:01.761]                           muffled <- TRUE
[08:25:01.761]                           break
[08:25:01.761]                         }
[08:25:01.761]                       }
[08:25:01.761]                     }
[08:25:01.761]                     invisible(muffled)
[08:25:01.761]                   }
[08:25:01.761]                   muffleCondition(cond)
[08:25:01.761]                 })
[08:25:01.761]             }))
[08:25:01.761]             future::FutureResult(value = ...future.value$value, 
[08:25:01.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.761]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.761]                     ...future.globalenv.names))
[08:25:01.761]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.761]         }, condition = base::local({
[08:25:01.761]             c <- base::c
[08:25:01.761]             inherits <- base::inherits
[08:25:01.761]             invokeRestart <- base::invokeRestart
[08:25:01.761]             length <- base::length
[08:25:01.761]             list <- base::list
[08:25:01.761]             seq.int <- base::seq.int
[08:25:01.761]             signalCondition <- base::signalCondition
[08:25:01.761]             sys.calls <- base::sys.calls
[08:25:01.761]             `[[` <- base::`[[`
[08:25:01.761]             `+` <- base::`+`
[08:25:01.761]             `<<-` <- base::`<<-`
[08:25:01.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.761]                   3L)]
[08:25:01.761]             }
[08:25:01.761]             function(cond) {
[08:25:01.761]                 is_error <- inherits(cond, "error")
[08:25:01.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.761]                   NULL)
[08:25:01.761]                 if (is_error) {
[08:25:01.761]                   sessionInformation <- function() {
[08:25:01.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.761]                       search = base::search(), system = base::Sys.info())
[08:25:01.761]                   }
[08:25:01.761]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.761]                     cond$call), session = sessionInformation(), 
[08:25:01.761]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.761]                   signalCondition(cond)
[08:25:01.761]                 }
[08:25:01.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.761]                 "immediateCondition"))) {
[08:25:01.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.761]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.761]                   if (TRUE && !signal) {
[08:25:01.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.761]                     {
[08:25:01.761]                       inherits <- base::inherits
[08:25:01.761]                       invokeRestart <- base::invokeRestart
[08:25:01.761]                       is.null <- base::is.null
[08:25:01.761]                       muffled <- FALSE
[08:25:01.761]                       if (inherits(cond, "message")) {
[08:25:01.761]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.761]                         if (muffled) 
[08:25:01.761]                           invokeRestart("muffleMessage")
[08:25:01.761]                       }
[08:25:01.761]                       else if (inherits(cond, "warning")) {
[08:25:01.761]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.761]                         if (muffled) 
[08:25:01.761]                           invokeRestart("muffleWarning")
[08:25:01.761]                       }
[08:25:01.761]                       else if (inherits(cond, "condition")) {
[08:25:01.761]                         if (!is.null(pattern)) {
[08:25:01.761]                           computeRestarts <- base::computeRestarts
[08:25:01.761]                           grepl <- base::grepl
[08:25:01.761]                           restarts <- computeRestarts(cond)
[08:25:01.761]                           for (restart in restarts) {
[08:25:01.761]                             name <- restart$name
[08:25:01.761]                             if (is.null(name)) 
[08:25:01.761]                               next
[08:25:01.761]                             if (!grepl(pattern, name)) 
[08:25:01.761]                               next
[08:25:01.761]                             invokeRestart(restart)
[08:25:01.761]                             muffled <- TRUE
[08:25:01.761]                             break
[08:25:01.761]                           }
[08:25:01.761]                         }
[08:25:01.761]                       }
[08:25:01.761]                       invisible(muffled)
[08:25:01.761]                     }
[08:25:01.761]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.761]                   }
[08:25:01.761]                 }
[08:25:01.761]                 else {
[08:25:01.761]                   if (TRUE) {
[08:25:01.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.761]                     {
[08:25:01.761]                       inherits <- base::inherits
[08:25:01.761]                       invokeRestart <- base::invokeRestart
[08:25:01.761]                       is.null <- base::is.null
[08:25:01.761]                       muffled <- FALSE
[08:25:01.761]                       if (inherits(cond, "message")) {
[08:25:01.761]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.761]                         if (muffled) 
[08:25:01.761]                           invokeRestart("muffleMessage")
[08:25:01.761]                       }
[08:25:01.761]                       else if (inherits(cond, "warning")) {
[08:25:01.761]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.761]                         if (muffled) 
[08:25:01.761]                           invokeRestart("muffleWarning")
[08:25:01.761]                       }
[08:25:01.761]                       else if (inherits(cond, "condition")) {
[08:25:01.761]                         if (!is.null(pattern)) {
[08:25:01.761]                           computeRestarts <- base::computeRestarts
[08:25:01.761]                           grepl <- base::grepl
[08:25:01.761]                           restarts <- computeRestarts(cond)
[08:25:01.761]                           for (restart in restarts) {
[08:25:01.761]                             name <- restart$name
[08:25:01.761]                             if (is.null(name)) 
[08:25:01.761]                               next
[08:25:01.761]                             if (!grepl(pattern, name)) 
[08:25:01.761]                               next
[08:25:01.761]                             invokeRestart(restart)
[08:25:01.761]                             muffled <- TRUE
[08:25:01.761]                             break
[08:25:01.761]                           }
[08:25:01.761]                         }
[08:25:01.761]                       }
[08:25:01.761]                       invisible(muffled)
[08:25:01.761]                     }
[08:25:01.761]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.761]                   }
[08:25:01.761]                 }
[08:25:01.761]             }
[08:25:01.761]         }))
[08:25:01.761]     }, error = function(ex) {
[08:25:01.761]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.761]                 ...future.rng), started = ...future.startTime, 
[08:25:01.761]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.761]             version = "1.8"), class = "FutureResult")
[08:25:01.761]     }, finally = {
[08:25:01.761]         if (!identical(...future.workdir, getwd())) 
[08:25:01.761]             setwd(...future.workdir)
[08:25:01.761]         {
[08:25:01.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.761]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.761]             }
[08:25:01.761]             base::options(...future.oldOptions)
[08:25:01.761]             if (.Platform$OS.type == "windows") {
[08:25:01.761]                 old_names <- names(...future.oldEnvVars)
[08:25:01.761]                 envs <- base::Sys.getenv()
[08:25:01.761]                 names <- names(envs)
[08:25:01.761]                 common <- intersect(names, old_names)
[08:25:01.761]                 added <- setdiff(names, old_names)
[08:25:01.761]                 removed <- setdiff(old_names, names)
[08:25:01.761]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.761]                   envs[common]]
[08:25:01.761]                 NAMES <- toupper(changed)
[08:25:01.761]                 args <- list()
[08:25:01.761]                 for (kk in seq_along(NAMES)) {
[08:25:01.761]                   name <- changed[[kk]]
[08:25:01.761]                   NAME <- NAMES[[kk]]
[08:25:01.761]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.761]                     next
[08:25:01.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.761]                 }
[08:25:01.761]                 NAMES <- toupper(added)
[08:25:01.761]                 for (kk in seq_along(NAMES)) {
[08:25:01.761]                   name <- added[[kk]]
[08:25:01.761]                   NAME <- NAMES[[kk]]
[08:25:01.761]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.761]                     next
[08:25:01.761]                   args[[name]] <- ""
[08:25:01.761]                 }
[08:25:01.761]                 NAMES <- toupper(removed)
[08:25:01.761]                 for (kk in seq_along(NAMES)) {
[08:25:01.761]                   name <- removed[[kk]]
[08:25:01.761]                   NAME <- NAMES[[kk]]
[08:25:01.761]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.761]                     next
[08:25:01.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.761]                 }
[08:25:01.761]                 if (length(args) > 0) 
[08:25:01.761]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.761]             }
[08:25:01.761]             else {
[08:25:01.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.761]             }
[08:25:01.761]             {
[08:25:01.761]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.761]                   0L) {
[08:25:01.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.761]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.761]                   base::options(opts)
[08:25:01.761]                 }
[08:25:01.761]                 {
[08:25:01.761]                   {
[08:25:01.761]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.761]                     NULL
[08:25:01.761]                   }
[08:25:01.761]                   options(future.plan = NULL)
[08:25:01.761]                   if (is.na(NA_character_)) 
[08:25:01.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.761]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.761]                     .init = FALSE)
[08:25:01.761]                 }
[08:25:01.761]             }
[08:25:01.761]         }
[08:25:01.761]     })
[08:25:01.761]     if (TRUE) {
[08:25:01.761]         base::sink(type = "output", split = FALSE)
[08:25:01.761]         if (TRUE) {
[08:25:01.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.761]         }
[08:25:01.761]         else {
[08:25:01.761]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.761]         }
[08:25:01.761]         base::close(...future.stdout)
[08:25:01.761]         ...future.stdout <- NULL
[08:25:01.761]     }
[08:25:01.761]     ...future.result$conditions <- ...future.conditions
[08:25:01.761]     ...future.result$finished <- base::Sys.time()
[08:25:01.761]     ...future.result
[08:25:01.761] }
[08:25:01.764] Exporting 5 global objects (0.99 KiB) to cluster node #1 ...
[08:25:01.764] Exporting ‘...future.FUN’ (311 bytes) to cluster node #1 ...
[08:25:01.765] Exporting ‘...future.FUN’ (311 bytes) to cluster node #1 ... DONE
[08:25:01.765] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ...
[08:25:01.765] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #1 ... DONE
[08:25:01.766] Exporting ‘...future.elements_ii’ (101 bytes) to cluster node #1 ...
[08:25:01.766] Exporting ‘...future.elements_ii’ (101 bytes) to cluster node #1 ... DONE
[08:25:01.766] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #1 ...
[08:25:01.767] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #1 ... DONE
[08:25:01.767] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ...
[08:25:01.767] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #1 ... DONE
[08:25:01.767] Exporting 5 global objects (0.99 KiB) to cluster node #1 ... DONE
[08:25:01.768] MultisessionFuture started
[08:25:01.768] - Launch lazy future ... done
[08:25:01.768] run() for ‘MultisessionFuture’ ... done
[08:25:01.768] Created future:
[08:25:01.768] MultisessionFuture:
[08:25:01.768] Label: ‘future_eapply-1’
[08:25:01.768] Expression:
[08:25:01.768] {
[08:25:01.768]     do.call(function(...) {
[08:25:01.768]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.768]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.768]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.768]             on.exit(options(oopts), add = TRUE)
[08:25:01.768]         }
[08:25:01.768]         {
[08:25:01.768]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.768]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.768]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.768]             })
[08:25:01.768]         }
[08:25:01.768]     }, args = future.call.arguments)
[08:25:01.768] }
[08:25:01.768] Lazy evaluation: FALSE
[08:25:01.768] Asynchronous evaluation: TRUE
[08:25:01.768] Local evaluation: TRUE
[08:25:01.768] Environment: R_GlobalEnv
[08:25:01.768] Capture standard output: TRUE
[08:25:01.768] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:01.768] Globals: 5 objects totaling 563 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 101 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:01.768] Packages: 1 packages (‘stats’)
[08:25:01.768] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:01.768] Resolved: FALSE
[08:25:01.768] Value: <not collected>
[08:25:01.768] Conditions captured: <none>
[08:25:01.768] Early signaling: FALSE
[08:25:01.768] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:01.768] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.780] Chunk #1 of 2 ... DONE
[08:25:01.780] Chunk #2 of 2 ...
[08:25:01.780]  - Finding globals in 'X' for chunk #2 ...
[08:25:01.780] getGlobalsAndPackages() ...
[08:25:01.780] Searching for globals...
[08:25:01.780] 
[08:25:01.780] Searching for globals ... DONE
[08:25:01.780] - globals: [0] <none>
[08:25:01.781] getGlobalsAndPackages() ... DONE
[08:25:01.781]    + additional globals found: [n=0] 
[08:25:01.781]    + additional namespaces needed: [n=0] 
[08:25:01.781]  - Finding globals in 'X' for chunk #2 ... DONE
[08:25:01.781]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:25:01.781]  - seeds: <none>
[08:25:01.781]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.781] getGlobalsAndPackages() ...
[08:25:01.781] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.781] Resolving globals: FALSE
[08:25:01.782] Tweak future expression to call with '...' arguments ...
[08:25:01.782] {
[08:25:01.782]     do.call(function(...) {
[08:25:01.782]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.782]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.782]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.782]             on.exit(options(oopts), add = TRUE)
[08:25:01.782]         }
[08:25:01.782]         {
[08:25:01.782]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.782]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.782]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.782]             })
[08:25:01.782]         }
[08:25:01.782]     }, args = future.call.arguments)
[08:25:01.782] }
[08:25:01.782] Tweak future expression to call with '...' arguments ... DONE
[08:25:01.782] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:25:01.782] - packages: [1] ‘stats’
[08:25:01.783] getGlobalsAndPackages() ... DONE
[08:25:01.783] run() for ‘Future’ ...
[08:25:01.783] - state: ‘created’
[08:25:01.783] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:25:01.797] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.797] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:25:01.797]   - Field: ‘node’
[08:25:01.797]   - Field: ‘label’
[08:25:01.797]   - Field: ‘local’
[08:25:01.798]   - Field: ‘owner’
[08:25:01.798]   - Field: ‘envir’
[08:25:01.798]   - Field: ‘workers’
[08:25:01.798]   - Field: ‘packages’
[08:25:01.798]   - Field: ‘gc’
[08:25:01.798]   - Field: ‘conditions’
[08:25:01.798]   - Field: ‘persistent’
[08:25:01.798]   - Field: ‘expr’
[08:25:01.798]   - Field: ‘uuid’
[08:25:01.798]   - Field: ‘seed’
[08:25:01.798]   - Field: ‘version’
[08:25:01.799]   - Field: ‘result’
[08:25:01.799]   - Field: ‘asynchronous’
[08:25:01.799]   - Field: ‘calls’
[08:25:01.799]   - Field: ‘globals’
[08:25:01.799]   - Field: ‘stdout’
[08:25:01.799]   - Field: ‘earlySignal’
[08:25:01.799]   - Field: ‘lazy’
[08:25:01.799]   - Field: ‘state’
[08:25:01.799] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:25:01.799] - Launch lazy future ...
[08:25:01.800] Packages needed by the future expression (n = 1): ‘stats’
[08:25:01.800] Packages needed by future strategies (n = 0): <none>
[08:25:01.800] {
[08:25:01.800]     {
[08:25:01.800]         {
[08:25:01.800]             ...future.startTime <- base::Sys.time()
[08:25:01.800]             {
[08:25:01.800]                 {
[08:25:01.800]                   {
[08:25:01.800]                     {
[08:25:01.800]                       {
[08:25:01.800]                         base::local({
[08:25:01.800]                           has_future <- base::requireNamespace("future", 
[08:25:01.800]                             quietly = TRUE)
[08:25:01.800]                           if (has_future) {
[08:25:01.800]                             ns <- base::getNamespace("future")
[08:25:01.800]                             version <- ns[[".package"]][["version"]]
[08:25:01.800]                             if (is.null(version)) 
[08:25:01.800]                               version <- utils::packageVersion("future")
[08:25:01.800]                           }
[08:25:01.800]                           else {
[08:25:01.800]                             version <- NULL
[08:25:01.800]                           }
[08:25:01.800]                           if (!has_future || version < "1.8.0") {
[08:25:01.800]                             info <- base::c(r_version = base::gsub("R version ", 
[08:25:01.800]                               "", base::R.version$version.string), 
[08:25:01.800]                               platform = base::sprintf("%s (%s-bit)", 
[08:25:01.800]                                 base::R.version$platform, 8 * 
[08:25:01.800]                                   base::.Machine$sizeof.pointer), 
[08:25:01.800]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:25:01.800]                                 "release", "version")], collapse = " "), 
[08:25:01.800]                               hostname = base::Sys.info()[["nodename"]])
[08:25:01.800]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:25:01.800]                               info)
[08:25:01.800]                             info <- base::paste(info, collapse = "; ")
[08:25:01.800]                             if (!has_future) {
[08:25:01.800]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:25:01.800]                                 info)
[08:25:01.800]                             }
[08:25:01.800]                             else {
[08:25:01.800]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:25:01.800]                                 info, version)
[08:25:01.800]                             }
[08:25:01.800]                             base::stop(msg)
[08:25:01.800]                           }
[08:25:01.800]                         })
[08:25:01.800]                       }
[08:25:01.800]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:25:01.800]                       base::options(mc.cores = 1L)
[08:25:01.800]                     }
[08:25:01.800]                     base::local({
[08:25:01.800]                       for (pkg in "stats") {
[08:25:01.800]                         base::loadNamespace(pkg)
[08:25:01.800]                         base::library(pkg, character.only = TRUE)
[08:25:01.800]                       }
[08:25:01.800]                     })
[08:25:01.800]                   }
[08:25:01.800]                   ...future.strategy.old <- future::plan("list")
[08:25:01.800]                   options(future.plan = NULL)
[08:25:01.800]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.800]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:25:01.800]                 }
[08:25:01.800]                 ...future.workdir <- getwd()
[08:25:01.800]             }
[08:25:01.800]             ...future.oldOptions <- base::as.list(base::.Options)
[08:25:01.800]             ...future.oldEnvVars <- base::Sys.getenv()
[08:25:01.800]         }
[08:25:01.800]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:25:01.800]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[08:25:01.800]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:25:01.800]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:25:01.800]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:25:01.800]             future.stdout.windows.reencode = NULL, width = 80L)
[08:25:01.800]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:25:01.800]             base::names(...future.oldOptions))
[08:25:01.800]     }
[08:25:01.800]     if (FALSE) {
[08:25:01.800]     }
[08:25:01.800]     else {
[08:25:01.800]         if (TRUE) {
[08:25:01.800]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:25:01.800]                 open = "w")
[08:25:01.800]         }
[08:25:01.800]         else {
[08:25:01.800]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:25:01.800]                 windows = "NUL", "/dev/null"), open = "w")
[08:25:01.800]         }
[08:25:01.800]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:25:01.800]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:25:01.800]             base::sink(type = "output", split = FALSE)
[08:25:01.800]             base::close(...future.stdout)
[08:25:01.800]         }, add = TRUE)
[08:25:01.800]     }
[08:25:01.800]     ...future.frame <- base::sys.nframe()
[08:25:01.800]     ...future.conditions <- base::list()
[08:25:01.800]     ...future.rng <- base::globalenv()$.Random.seed
[08:25:01.800]     if (FALSE) {
[08:25:01.800]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:25:01.800]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:25:01.800]     }
[08:25:01.800]     ...future.result <- base::tryCatch({
[08:25:01.800]         base::withCallingHandlers({
[08:25:01.800]             ...future.value <- base::withVisible(base::local({
[08:25:01.800]                 ...future.makeSendCondition <- base::local({
[08:25:01.800]                   sendCondition <- NULL
[08:25:01.800]                   function(frame = 1L) {
[08:25:01.800]                     if (is.function(sendCondition)) 
[08:25:01.800]                       return(sendCondition)
[08:25:01.800]                     ns <- getNamespace("parallel")
[08:25:01.800]                     if (exists("sendData", mode = "function", 
[08:25:01.800]                       envir = ns)) {
[08:25:01.800]                       parallel_sendData <- get("sendData", mode = "function", 
[08:25:01.800]                         envir = ns)
[08:25:01.800]                       envir <- sys.frame(frame)
[08:25:01.800]                       master <- NULL
[08:25:01.800]                       while (!identical(envir, .GlobalEnv) && 
[08:25:01.800]                         !identical(envir, emptyenv())) {
[08:25:01.800]                         if (exists("master", mode = "list", envir = envir, 
[08:25:01.800]                           inherits = FALSE)) {
[08:25:01.800]                           master <- get("master", mode = "list", 
[08:25:01.800]                             envir = envir, inherits = FALSE)
[08:25:01.800]                           if (inherits(master, c("SOCKnode", 
[08:25:01.800]                             "SOCK0node"))) {
[08:25:01.800]                             sendCondition <<- function(cond) {
[08:25:01.800]                               data <- list(type = "VALUE", value = cond, 
[08:25:01.800]                                 success = TRUE)
[08:25:01.800]                               parallel_sendData(master, data)
[08:25:01.800]                             }
[08:25:01.800]                             return(sendCondition)
[08:25:01.800]                           }
[08:25:01.800]                         }
[08:25:01.800]                         frame <- frame + 1L
[08:25:01.800]                         envir <- sys.frame(frame)
[08:25:01.800]                       }
[08:25:01.800]                     }
[08:25:01.800]                     sendCondition <<- function(cond) NULL
[08:25:01.800]                   }
[08:25:01.800]                 })
[08:25:01.800]                 withCallingHandlers({
[08:25:01.800]                   {
[08:25:01.800]                     do.call(function(...) {
[08:25:01.800]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.800]                       if (!identical(...future.globals.maxSize.org, 
[08:25:01.800]                         ...future.globals.maxSize)) {
[08:25:01.800]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.800]                         on.exit(options(oopts), add = TRUE)
[08:25:01.800]                       }
[08:25:01.800]                       {
[08:25:01.800]                         lapply(seq_along(...future.elements_ii), 
[08:25:01.800]                           FUN = function(jj) {
[08:25:01.800]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.800]                             ...future.FUN(...future.X_jj, ...)
[08:25:01.800]                           })
[08:25:01.800]                       }
[08:25:01.800]                     }, args = future.call.arguments)
[08:25:01.800]                   }
[08:25:01.800]                 }, immediateCondition = function(cond) {
[08:25:01.800]                   sendCondition <- ...future.makeSendCondition()
[08:25:01.800]                   sendCondition(cond)
[08:25:01.800]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.800]                   {
[08:25:01.800]                     inherits <- base::inherits
[08:25:01.800]                     invokeRestart <- base::invokeRestart
[08:25:01.800]                     is.null <- base::is.null
[08:25:01.800]                     muffled <- FALSE
[08:25:01.800]                     if (inherits(cond, "message")) {
[08:25:01.800]                       muffled <- grepl(pattern, "muffleMessage")
[08:25:01.800]                       if (muffled) 
[08:25:01.800]                         invokeRestart("muffleMessage")
[08:25:01.800]                     }
[08:25:01.800]                     else if (inherits(cond, "warning")) {
[08:25:01.800]                       muffled <- grepl(pattern, "muffleWarning")
[08:25:01.800]                       if (muffled) 
[08:25:01.800]                         invokeRestart("muffleWarning")
[08:25:01.800]                     }
[08:25:01.800]                     else if (inherits(cond, "condition")) {
[08:25:01.800]                       if (!is.null(pattern)) {
[08:25:01.800]                         computeRestarts <- base::computeRestarts
[08:25:01.800]                         grepl <- base::grepl
[08:25:01.800]                         restarts <- computeRestarts(cond)
[08:25:01.800]                         for (restart in restarts) {
[08:25:01.800]                           name <- restart$name
[08:25:01.800]                           if (is.null(name)) 
[08:25:01.800]                             next
[08:25:01.800]                           if (!grepl(pattern, name)) 
[08:25:01.800]                             next
[08:25:01.800]                           invokeRestart(restart)
[08:25:01.800]                           muffled <- TRUE
[08:25:01.800]                           break
[08:25:01.800]                         }
[08:25:01.800]                       }
[08:25:01.800]                     }
[08:25:01.800]                     invisible(muffled)
[08:25:01.800]                   }
[08:25:01.800]                   muffleCondition(cond)
[08:25:01.800]                 })
[08:25:01.800]             }))
[08:25:01.800]             future::FutureResult(value = ...future.value$value, 
[08:25:01.800]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.800]                   ...future.rng), globalenv = if (FALSE) 
[08:25:01.800]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:25:01.800]                     ...future.globalenv.names))
[08:25:01.800]                 else NULL, started = ...future.startTime, version = "1.8")
[08:25:01.800]         }, condition = base::local({
[08:25:01.800]             c <- base::c
[08:25:01.800]             inherits <- base::inherits
[08:25:01.800]             invokeRestart <- base::invokeRestart
[08:25:01.800]             length <- base::length
[08:25:01.800]             list <- base::list
[08:25:01.800]             seq.int <- base::seq.int
[08:25:01.800]             signalCondition <- base::signalCondition
[08:25:01.800]             sys.calls <- base::sys.calls
[08:25:01.800]             `[[` <- base::`[[`
[08:25:01.800]             `+` <- base::`+`
[08:25:01.800]             `<<-` <- base::`<<-`
[08:25:01.800]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:25:01.800]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:25:01.800]                   3L)]
[08:25:01.800]             }
[08:25:01.800]             function(cond) {
[08:25:01.800]                 is_error <- inherits(cond, "error")
[08:25:01.800]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:25:01.800]                   NULL)
[08:25:01.800]                 if (is_error) {
[08:25:01.800]                   sessionInformation <- function() {
[08:25:01.800]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:25:01.800]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:25:01.800]                       search = base::search(), system = base::Sys.info())
[08:25:01.800]                   }
[08:25:01.800]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.800]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:25:01.800]                     cond$call), session = sessionInformation(), 
[08:25:01.800]                     timestamp = base::Sys.time(), signaled = 0L)
[08:25:01.800]                   signalCondition(cond)
[08:25:01.800]                 }
[08:25:01.800]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:25:01.800]                 "immediateCondition"))) {
[08:25:01.800]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:25:01.800]                   ...future.conditions[[length(...future.conditions) + 
[08:25:01.800]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:25:01.800]                   if (TRUE && !signal) {
[08:25:01.800]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.800]                     {
[08:25:01.800]                       inherits <- base::inherits
[08:25:01.800]                       invokeRestart <- base::invokeRestart
[08:25:01.800]                       is.null <- base::is.null
[08:25:01.800]                       muffled <- FALSE
[08:25:01.800]                       if (inherits(cond, "message")) {
[08:25:01.800]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.800]                         if (muffled) 
[08:25:01.800]                           invokeRestart("muffleMessage")
[08:25:01.800]                       }
[08:25:01.800]                       else if (inherits(cond, "warning")) {
[08:25:01.800]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.800]                         if (muffled) 
[08:25:01.800]                           invokeRestart("muffleWarning")
[08:25:01.800]                       }
[08:25:01.800]                       else if (inherits(cond, "condition")) {
[08:25:01.800]                         if (!is.null(pattern)) {
[08:25:01.800]                           computeRestarts <- base::computeRestarts
[08:25:01.800]                           grepl <- base::grepl
[08:25:01.800]                           restarts <- computeRestarts(cond)
[08:25:01.800]                           for (restart in restarts) {
[08:25:01.800]                             name <- restart$name
[08:25:01.800]                             if (is.null(name)) 
[08:25:01.800]                               next
[08:25:01.800]                             if (!grepl(pattern, name)) 
[08:25:01.800]                               next
[08:25:01.800]                             invokeRestart(restart)
[08:25:01.800]                             muffled <- TRUE
[08:25:01.800]                             break
[08:25:01.800]                           }
[08:25:01.800]                         }
[08:25:01.800]                       }
[08:25:01.800]                       invisible(muffled)
[08:25:01.800]                     }
[08:25:01.800]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.800]                   }
[08:25:01.800]                 }
[08:25:01.800]                 else {
[08:25:01.800]                   if (TRUE) {
[08:25:01.800]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:25:01.800]                     {
[08:25:01.800]                       inherits <- base::inherits
[08:25:01.800]                       invokeRestart <- base::invokeRestart
[08:25:01.800]                       is.null <- base::is.null
[08:25:01.800]                       muffled <- FALSE
[08:25:01.800]                       if (inherits(cond, "message")) {
[08:25:01.800]                         muffled <- grepl(pattern, "muffleMessage")
[08:25:01.800]                         if (muffled) 
[08:25:01.800]                           invokeRestart("muffleMessage")
[08:25:01.800]                       }
[08:25:01.800]                       else if (inherits(cond, "warning")) {
[08:25:01.800]                         muffled <- grepl(pattern, "muffleWarning")
[08:25:01.800]                         if (muffled) 
[08:25:01.800]                           invokeRestart("muffleWarning")
[08:25:01.800]                       }
[08:25:01.800]                       else if (inherits(cond, "condition")) {
[08:25:01.800]                         if (!is.null(pattern)) {
[08:25:01.800]                           computeRestarts <- base::computeRestarts
[08:25:01.800]                           grepl <- base::grepl
[08:25:01.800]                           restarts <- computeRestarts(cond)
[08:25:01.800]                           for (restart in restarts) {
[08:25:01.800]                             name <- restart$name
[08:25:01.800]                             if (is.null(name)) 
[08:25:01.800]                               next
[08:25:01.800]                             if (!grepl(pattern, name)) 
[08:25:01.800]                               next
[08:25:01.800]                             invokeRestart(restart)
[08:25:01.800]                             muffled <- TRUE
[08:25:01.800]                             break
[08:25:01.800]                           }
[08:25:01.800]                         }
[08:25:01.800]                       }
[08:25:01.800]                       invisible(muffled)
[08:25:01.800]                     }
[08:25:01.800]                     muffleCondition(cond, pattern = "^muffle")
[08:25:01.800]                   }
[08:25:01.800]                 }
[08:25:01.800]             }
[08:25:01.800]         }))
[08:25:01.800]     }, error = function(ex) {
[08:25:01.800]         base::structure(base::list(value = NULL, visible = NULL, 
[08:25:01.800]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:25:01.800]                 ...future.rng), started = ...future.startTime, 
[08:25:01.800]             finished = Sys.time(), session_uuid = NA_character_, 
[08:25:01.800]             version = "1.8"), class = "FutureResult")
[08:25:01.800]     }, finally = {
[08:25:01.800]         if (!identical(...future.workdir, getwd())) 
[08:25:01.800]             setwd(...future.workdir)
[08:25:01.800]         {
[08:25:01.800]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:25:01.800]                 ...future.oldOptions$nwarnings <- NULL
[08:25:01.800]             }
[08:25:01.800]             base::options(...future.oldOptions)
[08:25:01.800]             if (.Platform$OS.type == "windows") {
[08:25:01.800]                 old_names <- names(...future.oldEnvVars)
[08:25:01.800]                 envs <- base::Sys.getenv()
[08:25:01.800]                 names <- names(envs)
[08:25:01.800]                 common <- intersect(names, old_names)
[08:25:01.800]                 added <- setdiff(names, old_names)
[08:25:01.800]                 removed <- setdiff(old_names, names)
[08:25:01.800]                 changed <- common[...future.oldEnvVars[common] != 
[08:25:01.800]                   envs[common]]
[08:25:01.800]                 NAMES <- toupper(changed)
[08:25:01.800]                 args <- list()
[08:25:01.800]                 for (kk in seq_along(NAMES)) {
[08:25:01.800]                   name <- changed[[kk]]
[08:25:01.800]                   NAME <- NAMES[[kk]]
[08:25:01.800]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.800]                     next
[08:25:01.800]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.800]                 }
[08:25:01.800]                 NAMES <- toupper(added)
[08:25:01.800]                 for (kk in seq_along(NAMES)) {
[08:25:01.800]                   name <- added[[kk]]
[08:25:01.800]                   NAME <- NAMES[[kk]]
[08:25:01.800]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.800]                     next
[08:25:01.800]                   args[[name]] <- ""
[08:25:01.800]                 }
[08:25:01.800]                 NAMES <- toupper(removed)
[08:25:01.800]                 for (kk in seq_along(NAMES)) {
[08:25:01.800]                   name <- removed[[kk]]
[08:25:01.800]                   NAME <- NAMES[[kk]]
[08:25:01.800]                   if (name != NAME && is.element(NAME, old_names)) 
[08:25:01.800]                     next
[08:25:01.800]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:25:01.800]                 }
[08:25:01.800]                 if (length(args) > 0) 
[08:25:01.800]                   base::do.call(base::Sys.setenv, args = args)
[08:25:01.800]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:25:01.800]             }
[08:25:01.800]             else {
[08:25:01.800]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:25:01.800]             }
[08:25:01.800]             {
[08:25:01.800]                 if (base::length(...future.futureOptionsAdded) > 
[08:25:01.800]                   0L) {
[08:25:01.800]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:25:01.800]                   base::names(opts) <- ...future.futureOptionsAdded
[08:25:01.800]                   base::options(opts)
[08:25:01.800]                 }
[08:25:01.800]                 {
[08:25:01.800]                   {
[08:25:01.800]                     base::options(mc.cores = ...future.mc.cores.old)
[08:25:01.800]                     NULL
[08:25:01.800]                   }
[08:25:01.800]                   options(future.plan = NULL)
[08:25:01.800]                   if (is.na(NA_character_)) 
[08:25:01.800]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:25:01.800]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:25:01.800]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:25:01.800]                     .init = FALSE)
[08:25:01.800]                 }
[08:25:01.800]             }
[08:25:01.800]         }
[08:25:01.800]     })
[08:25:01.800]     if (TRUE) {
[08:25:01.800]         base::sink(type = "output", split = FALSE)
[08:25:01.800]         if (TRUE) {
[08:25:01.800]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:25:01.800]         }
[08:25:01.800]         else {
[08:25:01.800]             ...future.result["stdout"] <- base::list(NULL)
[08:25:01.800]         }
[08:25:01.800]         base::close(...future.stdout)
[08:25:01.800]         ...future.stdout <- NULL
[08:25:01.800]     }
[08:25:01.800]     ...future.result$conditions <- ...future.conditions
[08:25:01.800]     ...future.result$finished <- base::Sys.time()
[08:25:01.800]     ...future.result
[08:25:01.800] }
[08:25:01.803] Exporting 5 global objects (1.14 KiB) to cluster node #2 ...
[08:25:01.803] Exporting ‘...future.FUN’ (311 bytes) to cluster node #2 ...
[08:25:01.804] Exporting ‘...future.FUN’ (311 bytes) to cluster node #2 ... DONE
[08:25:01.804] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ...
[08:25:01.804] Exporting ‘future.call.arguments’ (97 bytes) to cluster node #2 ... DONE
[08:25:01.804] Exporting ‘...future.elements_ii’ (259 bytes) to cluster node #2 ...
[08:25:01.805] Exporting ‘...future.elements_ii’ (259 bytes) to cluster node #2 ... DONE
[08:25:01.805] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #2 ...
[08:25:01.805] Exporting ‘...future.seeds_ii’ (27 bytes) to cluster node #2 ... DONE
[08:25:01.805] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ...
[08:25:01.806] Exporting ‘...future.globals.maxSize’ (27 bytes) to cluster node #2 ... DONE
[08:25:01.806] Exporting 5 global objects (1.14 KiB) to cluster node #2 ... DONE
[08:25:01.806] MultisessionFuture started
[08:25:01.806] - Launch lazy future ... done
[08:25:01.806] run() for ‘MultisessionFuture’ ... done
[08:25:01.807] Created future:
[08:25:01.807] MultisessionFuture:
[08:25:01.807] Label: ‘future_eapply-2’
[08:25:01.807] Expression:
[08:25:01.807] {
[08:25:01.807]     do.call(function(...) {
[08:25:01.807]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:25:01.807]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:25:01.807]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:25:01.807]             on.exit(options(oopts), add = TRUE)
[08:25:01.807]         }
[08:25:01.807]         {
[08:25:01.807]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:25:01.807]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:25:01.807]                 ...future.FUN(...future.X_jj, ...)
[08:25:01.807]             })
[08:25:01.807]         }
[08:25:01.807]     }, args = future.call.arguments)
[08:25:01.807] }
[08:25:01.807] Lazy evaluation: FALSE
[08:25:01.807] Asynchronous evaluation: TRUE
[08:25:01.807] Local evaluation: TRUE
[08:25:01.807] Environment: R_GlobalEnv
[08:25:01.807] Capture standard output: TRUE
[08:25:01.807] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[08:25:01.807] Globals: 5 objects totaling 721 bytes (function ‘...future.FUN’ of 311 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 259 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:25:01.807] Packages: 1 packages (‘stats’)
[08:25:01.807] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:25:01.807] Resolved: FALSE
[08:25:01.807] Value: <not collected>
[08:25:01.807] Conditions captured: <none>
[08:25:01.807] Early signaling: FALSE
[08:25:01.807] Owner process: b8a8461e-719e-e97c-24ff-ba7fb9c02b54
[08:25:01.807] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:25:01.818] Chunk #2 of 2 ... DONE
[08:25:01.818] Launching 2 futures (chunks) ... DONE
[08:25:01.818] Resolving 2 futures (chunks) ...
[08:25:01.818] resolve() on list ...
[08:25:01.819]  recursive: 0
[08:25:01.819]  length: 2
[08:25:01.819] 
[08:25:01.819] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.819] - Validating connection of MultisessionFuture
[08:25:01.820] - received message: FutureResult
[08:25:01.820] - Received FutureResult
[08:25:01.820] - Erased future from FutureRegistry
[08:25:01.820] result() for ClusterFuture ...
[08:25:01.820] - result already collected: FutureResult
[08:25:01.820] result() for ClusterFuture ... done
[08:25:01.820] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.820] Future #1
[08:25:01.820] result() for ClusterFuture ...
[08:25:01.820] - result already collected: FutureResult
[08:25:01.821] result() for ClusterFuture ... done
[08:25:01.821] result() for ClusterFuture ...
[08:25:01.821] - result already collected: FutureResult
[08:25:01.821] result() for ClusterFuture ... done
[08:25:01.821] signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:25:01.821] - nx: 2
[08:25:01.821] - relay: TRUE
[08:25:01.821] - stdout: TRUE
[08:25:01.821] - signal: TRUE
[08:25:01.821] - resignal: FALSE
[08:25:01.821] - force: TRUE
[08:25:01.821] - relayed: [n=2] FALSE, FALSE
[08:25:01.822] - queued futures: [n=2] FALSE, FALSE
[08:25:01.822]  - until=1
[08:25:01.822]  - relaying element #1
[08:25:01.822] result() for ClusterFuture ...
[08:25:01.822] - result already collected: FutureResult
[08:25:01.822] result() for ClusterFuture ... done
[08:25:01.822] result() for ClusterFuture ...
[08:25:01.822] - result already collected: FutureResult
[08:25:01.822] result() for ClusterFuture ... done
[08:25:01.822] result() for ClusterFuture ...
[08:25:01.822] - result already collected: FutureResult
[08:25:01.822] result() for ClusterFuture ... done
[08:25:01.823] result() for ClusterFuture ...
[08:25:01.823] - result already collected: FutureResult
[08:25:01.823] result() for ClusterFuture ... done
[08:25:01.823] - relayed: [n=2] TRUE, FALSE
[08:25:01.823] - queued futures: [n=2] TRUE, FALSE
[08:25:01.823] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:25:01.823]  length: 1 (resolved future 1)
[08:25:01.849] receiveMessageFromWorker() for ClusterFuture ...
[08:25:01.849] - Validating connection of MultisessionFuture
[08:25:01.849] - received message: FutureResult
[08:25:01.849] - Received FutureResult
[08:25:01.849] - Erased future from FutureRegistry
[08:25:01.850] result() for ClusterFuture ...
[08:25:01.850] - result already collected: FutureResult
[08:25:01.850] result() for ClusterFuture ... done
[08:25:01.850] receiveMessageFromWorker() for ClusterFuture ... done
[08:25:01.850] Future #2
[08:25:01.850] result() for ClusterFuture ...
[08:25:01.850] - result already collected: FutureResult
[08:25:01.850] result() for ClusterFuture ... done
[08:25:01.850] result() for ClusterFuture ...
[08:25:01.850] - result already collected: FutureResult
[08:25:01.850] result() for ClusterFuture ... done
[08:25:01.851] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:25:01.851] - nx: 2
[08:25:01.851] - relay: TRUE
[08:25:01.851] - stdout: TRUE
[08:25:01.851] - signal: TRUE
[08:25:01.851] - resignal: FALSE
[08:25:01.851] - force: TRUE
[08:25:01.851] - relayed: [n=2] TRUE, FALSE
[08:25:01.851] - queued futures: [n=2] TRUE, FALSE
[08:25:01.851]  - until=2
[08:25:01.851]  - relaying element #2
[08:25:01.851] result() for ClusterFuture ...
[08:25:01.852] - result already collected: FutureResult
[08:25:01.852] result() for ClusterFuture ... done
[08:25:01.852] result() for ClusterFuture ...
[08:25:01.852] - result already collected: FutureResult
[08:25:01.852] result() for ClusterFuture ... done
[08:25:01.852] result() for ClusterFuture ...
[08:25:01.852] - result already collected: FutureResult
[08:25:01.852] result() for ClusterFuture ... done
[08:25:01.852] result() for ClusterFuture ...
[08:25:01.852] - result already collected: FutureResult
[08:25:01.852] result() for ClusterFuture ... done
[08:25:01.852] - relayed: [n=2] TRUE, TRUE
[08:25:01.853] - queued futures: [n=2] TRUE, TRUE
[08:25:01.853] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:25:01.853]  length: 0 (resolved future 2)
[08:25:01.853] Relaying remaining futures
[08:25:01.853] signalConditionsASAP(NULL, pos=0) ...
[08:25:01.853] - nx: 2
[08:25:01.853] - relay: TRUE
[08:25:01.853] - stdout: TRUE
[08:25:01.853] - signal: TRUE
[08:25:01.853] - resignal: FALSE
[08:25:01.853] - force: TRUE
[08:25:01.853] - relayed: [n=2] TRUE, TRUE
[08:25:01.854] - queued futures: [n=2] TRUE, TRUE
 - flush all
[08:25:01.854] - relayed: [n=2] TRUE, TRUE
[08:25:01.854] - queued futures: [n=2] TRUE, TRUE
[08:25:01.854] signalConditionsASAP(NULL, pos=0) ... done
[08:25:01.854] resolve() on list ... DONE
[08:25:01.854] result() for ClusterFuture ...
[08:25:01.854] - result already collected: FutureResult
[08:25:01.854] result() for ClusterFuture ... done
[08:25:01.854] result() for ClusterFuture ...
[08:25:01.854] - result already collected: FutureResult
[08:25:01.854] result() for ClusterFuture ... done
[08:25:01.855] result() for ClusterFuture ...
[08:25:01.855] - result already collected: FutureResult
[08:25:01.855] result() for ClusterFuture ... done
[08:25:01.855] result() for ClusterFuture ...
[08:25:01.855] - result already collected: FutureResult
[08:25:01.855] result() for ClusterFuture ... done
[08:25:01.855]  - Number of value chunks collected: 2
[08:25:01.855] Resolving 2 futures (chunks) ... DONE
[08:25:01.855] Reducing values from 2 chunks ...
[08:25:01.855]  - Number of values collected after concatenation: 3
[08:25:01.855]  - Number of values expected: 3
[08:25:01.855] Reducing values from 2 chunks ... DONE
[08:25:01.856] future_lapply() ... DONE
[08:25:01.856] plan(): Setting new future strategy stack:
[08:25:01.856] List of future strategies:
[08:25:01.856] 1. sequential:
[08:25:01.856]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:01.856]    - tweaked: FALSE
[08:25:01.856]    - call: plan(sequential)
[08:25:01.857] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_eapply() ... DONE")
*** future_eapply() ... DONE
> 
> source("incl/end.R")
[08:25:01.858] plan(): Setting new future strategy stack:
[08:25:01.858] List of future strategies:
[08:25:01.858] 1. FutureStrategy:
[08:25:01.858]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:25:01.858]    - tweaked: FALSE
[08:25:01.858]    - call: future::plan(oplan)
[08:25:01.858] plan(): nbrOfWorkers() = 1
> 
