
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "litedown"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('litedown')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("crack")
> ### * crack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crack
> ### Title: Parse R Markdown or R scripts
> ### Aliases: crack sieve
> 
> ### ** Examples
> 
> library(litedown)
> # parse R Markdown
> res = crack(c("```{r}\n1+1\n```", "Hello, `pi` = `{r} pi` and `e` = `{r} exp(1)`!"))
> str(res)
List of 2
 $ :List of 6
  ..$ source    : chr "1+1"
  ..$ type      : chr "code_chunk"
  ..$ lines     : int [1:2] 1 3
  ..$ options   :List of 2
  .. ..$ label : chr "chunk-1"
  .. ..$ engine: chr "r"
  ..$ comments  : NULL
  ..$ code_start: int 2
 $ :List of 3
  ..$ source:List of 5
  .. ..$ : chr "Hello, `pi` = "
  .. ..$ :List of 3
  .. .. ..$ source : chr "pi"
  .. .. ..$ pos    : int [1:4] 4 16 4 21
  .. .. ..$ options:List of 1
  .. .. .. ..$ engine: chr "r"
  .. ..$ : chr " and `e` = "
  .. ..$ :List of 3
  .. .. ..$ source : chr "exp(1)"
  .. .. ..$ pos    : int [1:4] 4 35 4 44
  .. .. ..$ options:List of 1
  .. .. .. ..$ engine: chr "r"
  .. ..$ : chr "!"
  ..$ type  : chr "text_block"
  ..$ lines : int [1:2] 4 4
> # evaluate inline code and combine results with text fragments
> txt = lapply(res[[2]]$source, function(x) {
+     if (is.character(x))
+         x else eval(parse(text = x$source))
+ })
> paste(unlist(txt), collapse = "")
[1] "Hello, `pi` = 3.14159265358979 and `e` = 2.71828182845905!"
> 
> # parse R code
> res = sieve(c("#' This is _doc_.", "", "#| eval=TRUE", "# this is code", "1 + 1"))
> str(res)
List of 2
 $ :List of 3
  ..$ source: chr "This is _doc_.\n"
  ..$ type  : chr "text_block"
  ..$ lines : int [1:2] 1 2
 $ :List of 6
  ..$ source    : chr [1:2] "# this is code" "1 + 1"
  ..$ options   :List of 3
  .. ..$ eval  : logi TRUE
  .. ..$ engine: chr "r"
  .. ..$ label : chr "chunk-1"
  ..$ comments  : chr "#| eval=TRUE"
  ..$ code_start: int 4
  ..$ type      : chr "code_chunk"
  ..$ lines     : int [1:2] 3 5
> 
> 
> 
> cleanEx()
> nameEx("engines")
> ### * engines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: engines
> ### Title: Language engines
> ### Aliases: engines
> 
> ### ** Examples
> 
> litedown::engines()  # built-in engines
List of 6
 $ css    :function (x, inline = FALSE, ...)  
 $ embed  :function (x, ...)  
 $ js     :function (x, inline = FALSE, ...)  
 $ md     :function (x, inline = FALSE, ...)  
 $ mermaid:function (x, inline = FALSE, ...)  
 $ r      :function (x, inline = FALSE, ...)  
> 
> 
> 
> cleanEx()
> nameEx("get_context")
> ### * get_context
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_context
> ### Title: Get the 'fuse()' context
> ### Aliases: get_context
> 
> ### ** Examples
> 
> litedown::get_context("input")
NULL
> litedown::get_context("format")
NULL
> names(litedown::get_context())  # all available items
character(0)
> 
> 
> 
> cleanEx()
> nameEx("mark")
> ### * mark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fuse
> ### Title: Render Markdown, R Markdown, and R scripts
> ### Aliases: fuse fiss mark
> 
> ### ** Examples
> 
> library(litedown)
> doc = c("```{r}", "1 + 1", "```", "", "$\\pi$ = `{r} pi`.")
> fuse(doc)
<pre><code class="language-r">1 + 1
</code></pre>
<pre><code>#&gt; [1] 2
</code></pre>
<p>\(\pi\) = 3.14.</p>
> fuse(doc, ".tex")
\begin{verbatim}
1 + 1
\end{verbatim}

\begin{verbatim}
#> [1] 2
\end{verbatim}

\(\pi\) = 3.14.
> fiss(doc)
1 + 1

> 
> mark(c("Hello _World_!", "", "Welcome to **litedown**."))
<p>Hello <em>World</em>!</p>
<p>Welcome to <strong>litedown</strong>.</p>
> # if input appears to be a file path but should be treated as text, use I()
> mark(I("This is *not* a file.md"))
<p>This is <em>not</em> a file.md</p>
> # that's equivalent to
> mark(text = "This is *not* a file.md")
<p>This is <em>not</em> a file.md</p>
> 
> # output to a file
> (mark("_Hello_, **World**!", output = tempfile()))
[1] "/tmp/RtmpIgSrah/file170bc72772c59"
> 
> # convert to other formats
> mark("Hello _World_!", ".tex")
Hello \emph{World}!
> mark("Hello _**`World`**_!", "xml")
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document SYSTEM "CommonMark.dtd">
<document xmlns="http://commonmark.org/xml/1.0">
  <paragraph>
    <text xml:space="preserve">Hello </text>
    <emph>
      <strong>
        <code xml:space="preserve">World</code>
      </strong>
    </emph>
    <text xml:space="preserve">!</text>
  </paragraph>
</document>
> mark("Hello _**`World`**_!", "text")
Hello World!
> 
> 
> 
> cleanEx()
> nameEx("markdown_options")
> ### * markdown_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: markdown_options
> ### Title: Markdown rendering options
> ### Aliases: markdown_options
> 
> ### ** Examples
> 
> # all available options
> litedown::markdown_options()
 [1] "-cleveref"         "-hardbreaks"       "-number_sections" 
 [4] "-offline"          "-smartypants"      "-tagfilter"       
 [7] "-toc"              "+auto_identifiers" "+autolink"        
[10] "+cross_refs"       "+embed_cleanup"    "+embed_resources" 
[13] "+js_highlight"     "+js_math"          "+latex_math"      
[16] "+smart"            "+strikethrough"    "+subscript"       
[19] "+superscript"      "+table"            "+tasklist"        
> 
> 
> 
> cleanEx()
> nameEx("pkg_desc")
> ### * pkg_desc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pkg_desc
> ### Title: Print the package description, news, citation, manual pages, and
> ###   source code
> ### Aliases: pkg_desc pkg_news pkg_code pkg_citation pkg_manual
> 
> ### ** Examples
> 
> ## Not run: 
> ##D litedown::pkg_desc()
> ##D litedown::pkg_news()
> ##D litedown::pkg_citation()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("raw_text")
> ### * raw_text
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raw_text
> ### Title: Mark a character vector as raw output
> ### Aliases: raw_text
> 
> ### ** Examples
> 
> litedown::raw_text(c("**This**", "_is_", "[Markdown](#)."))
**This**
_is_
[Markdown](#).
> litedown::raw_text("<b>Bold</b>", "html")

``` {=html}
<b>Bold</b>
```
> litedown::raw_text("\\textbf{Bold}", "latex")

``` {=latex}
\textbf{Bold}
```
> 
> 
> 
> cleanEx()
> nameEx("reactor")
> ### * reactor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reactor
> ### Title: Get and set chunk options
> ### Aliases: reactor
> 
> ### ** Examples
> 
> # get options
> litedown::reactor("echo")
[1] TRUE
> litedown::reactor(c("echo", "fig.width"))
$echo
[1] TRUE

$fig.width
[1] 7

> 
> # set options
> old = litedown::reactor(echo = FALSE, fig.width = 8)
> litedown::reactor(c("echo", "fig.width"))
$echo
[1] FALSE

$fig.width
[1] 8

> litedown::reactor(old)  # restore options
> 
> # use the environment directly
> opts = litedown::reactor()
> opts$echo
[1] TRUE
> mget(c("echo", "fig.width"), opts)
$echo
[1] TRUE

$fig.width
[1] 7

> ls(opts)  # built-in options
 [1] "attr.chunk"   "attr.error"   "attr.message" "attr.output"  "attr.plot"   
 [6] "attr.source"  "attr.warning" "cache"        "cache.path"   "cap.pos"     
[11] "child"        "code"         "collapse"     "comment"      "dev"         
[16] "dev.args"     "dollar"       "echo"         "engine"       "error"       
[21] "eval"         "fig.alt"      "fig.cap"      "fig.dim"      "fig.env"     
[26] "fig.ext"      "fig.height"   "fig.path"     "fig.width"    "file"        
[31] "fill"         "include"      "label"        "message"      "order"       
[36] "power"        "print"        "print.args"   "purl"         "results"     
[41] "signif"       "strip.white"  "tab.cap"      "tab.env"      "time"        
[46] "warning"      "wd"          
> 
> 
> 
> cleanEx()
> nameEx("vest")
> ### * vest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vest
> ### Title: Add CSS/JS assets to HTML output
> ### Aliases: vest
> 
> ### ** Examples
> 
> litedown:::assets[, -1]
               css               js                     
article        "@article"        "@sidenotes, @appendix"
book           "@book"           NA                     
callout        "@callout"        "@callout"             
center-img     NA                "@center-img"          
chapter-toc    NA                "@chapter-toc"         
copy-button    "@copy-button"    "@copy-button"         
default        "@default"        NA                     
external-link  NA                "@external-link"       
fold-details   NA                "@fold-details"        
heading-anchor "@heading-anchor" "@heading-anchor"      
key-buttons    "@key-buttons"    "@key-buttons"         
pages          "@pages"          "@pages"               
right-quote    NA                "@right-quote"         
snap           "@snap"           "@snap"                
tabsets        "@tabsets"        "@tabsets"             
toc-highlight  NA                "@toc-highlight"       
> # add features
> litedown::vest(c("copy-button", "tabsets"))
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@xiee/utils@1.14.14/css/copy-button.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@xiee/utils@1.14.14/css/tabsets.min.css">
<script src="https://cdn.jsdelivr.net/npm/@xiee/utils@1.14.14/js/copy-button.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/@xiee/utils@1.14.14/js/tabsets.min.js" defer></script>
> # add css/js directly
> litedown::vest(css = "@tabsets", js = c("@tabsets", "@fold-details"))
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@xiee/utils@1.14.14/css/tabsets.min.css">
<script src="https://cdn.jsdelivr.net/npm/@xiee/utils@1.14.14/js/tabsets.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/@xiee/utils@1.14.14/js/fold-details.min.js" defer></script>
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.157 0.014 0.172 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
