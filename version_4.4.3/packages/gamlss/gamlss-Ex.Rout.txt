
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gamlss"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gamlss')
Loading required package: splines
Loading required package: gamlss.data

Attaching package: ‘gamlss.data’

The following object is masked from ‘package:datasets’:

    sleep

Loading required package: gamlss.dist
Loading required package: nlme
Loading required package: parallel
 **********   GAMLSS Version 5.4-22  ********** 
For more on GAMLSS look at https://www.gamlss.com/
Type gamlssNews() to see new features/changes/bug fixes.

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DevianceIncr")
> ### * DevianceIncr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: devianceIncr
> ### Title: The global deviance increment
> ### Aliases: devianceIncr
> ### Keywords: regression
> 
> ### ** Examples
> 
> #-----------------------------------------------------------------
> # Count data set
> # fit Poisson model
> h1 <- gamlss(Claims~L_Population+L_Accidents+L_KI+L_Popdensity, 
+              data=LGAclaims, family=PO)
GAMLSS-RS iteration 1: Global Deviance = 7393.019 
GAMLSS-RS iteration 2: Global Deviance = 7393.019 
> p1<-devianceIncr(h1)
> # fit negative binomial model
> h2 <- gamlss(Claims~L_Population+L_Accidents+L_KI+L_Popdensity, 
+              data=LGAclaims, family=NBI)
GAMLSS-RS iteration 1: Global Deviance = 1920.559 
GAMLSS-RS iteration 2: Global Deviance = 1919.452 
GAMLSS-RS iteration 3: Global Deviance = 1919.452 
> p2<-devianceIncr(h2)
> # comparing using boxplots
> boxplot(cbind(p1,p2))
> # comparing using emphirical cdf
> plot(ecdf(p1))
> lines(ecdf(p2), col=2)
> # comparing agaist the y-values
> plot(p1~LGAclaims$Claims, pch=20, col="gray")
> points(p2~LGAclaims$Claims, pch="-", col="orange")
> #----------------------------------------------------------------
> # Continuous data sets
> ## Not run: 
> ##D m1 <- gamlss(head~pb(age), data=db[1:6000,])
> ##D p1<-devianceIncr(m1)
> ##D m2 <- gamlss(head~pb(age), sigma.fo=~pb(age), nu.fo=~pb(age), 
> ##D       tau.fo=~pb(age), data=db[1:6000,], family=BCT)
> ##D p2<-devianceIncr(m2)
> ##D # comparing using summaries
> ##D summary(p1); summary(p2)
> ##D # comparing using boxplots
> ##D boxplot(cbind(p1,p2))
> ##D # comparing using histograms
> ##D hist(p1, col=rgb(1,0,0,0.5), xlim=c(0,50), breaks=seq(0,50,2))
> ##D hist(p2, col=rgb(0,0,1,0.5), add=T)
> ##D # comparing using emphirical cdf
> ##D plot(ecdf(p1))
> ##D lines(ecdf(p2), col=2)
> ## End(Not run)
> #----------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("IC")
> ### * IC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IC
> ### Title: Gives the GAIC for a GAMLSS Object
> ### Aliases: IC AIC.gamlss GAIC extractAIC.gamlss GAIC.table GAIC.scaled
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> m1 <-  gamlss(y~x, family=NO, data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 5002.453 
GAMLSS-RS iteration 2: Global Deviance = 5002.453 
> IC(m1)
[1] 5008.453
> extractAIC(m1,k=2)
[1]    3.000 5008.453
> m2 <-  gamlss(y~x, sigma.fo=~x, family=NO, data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4878.809 
GAMLSS-RS iteration 2: Global Deviance = 4853.871 
GAMLSS-RS iteration 3: Global Deviance = 4853.199 
GAMLSS-RS iteration 4: Global Deviance = 4853.184 
GAMLSS-RS iteration 5: Global Deviance = 4853.184 
> m3 <-  gamlss(y~pb(x), sigma.fo=~x, family=NO, data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4786.698 
GAMLSS-RS iteration 2: Global Deviance = 4785.696 
GAMLSS-RS iteration 3: Global Deviance = 4785.697 
> m4 <-  gamlss(y~pb(x), sigma.fo=~pb(x), family=NO, data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4786.697 
GAMLSS-RS iteration 2: Global Deviance = 4785.695 
GAMLSS-RS iteration 3: Global Deviance = 4785.696 
> AIC(m1,m2, m3, m4)
         df      AIC
m3 7.679311 4801.055
m4 7.681399 4801.059
m2 4.000000 4861.184
m1 3.000000 5008.453
> AIC(m1,m2, m3, m4, c=TRUE)
         df      AIC
m3 7.679311 4801.277
m4 7.681399 4801.281
m2 4.000000 4861.250
m1 3.000000 5008.492
> AIC(m1,m2, m3, m4, k=3)
         df      AIC
m3 7.679311 4808.735
m4 7.681399 4808.740
m2 4.000000 4865.184
m1 3.000000 5011.453
> GAIC.table(m1,m2, m3, m4)
minimum GAIC(k= 2 ) model: m3 
minimum GAIC(k= 3.84 ) model: m3 
minimum GAIC(k= 6.41 ) model: m3 
         df      k=2   k=3.84   k=6.41
m1 3.000000 5008.453 5013.973 5021.683
m2 4.000000 4861.184 4868.544 4878.824
m3 7.679311 4801.055 4815.185 4834.921
m4 7.681399 4801.059 4815.193 4834.934
> GAIC.scaled(m1,m2, m3, m4)
         df      AIC     delta scaled
m1 3.000000 5008.453 207.39731 0.0000
m2 4.000000 4861.184  60.12853 0.7101
m3 7.679311 4801.055   0.00000 1.0000
m4 7.681399 4801.059   0.00356 1.0000
> ## Not run: 
> ##D MT <- chooseDist(m3)
> ##D GAIC.scaled(MT)
> ##D GAIC.scaled(MT, which=2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("LR.test")
> ### * LR.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LR.test
> ### Title: Likelihood Ratio test for nested GAMLSS models
> ### Aliases: LR.test
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(usair)
> m0<-gamlss(y~x1+x2, data=usair)
GAMLSS-RS iteration 1: Global Deviance = 344.3556 
GAMLSS-RS iteration 2: Global Deviance = 344.3556 
> m1<-gamlss(y~x1+x2+x3+x4, data=usair)
GAMLSS-RS iteration 1: Global Deviance = 333.0341 
GAMLSS-RS iteration 2: Global Deviance = 333.0341 
> LR.test(m0,m1)
 Likelihood Ratio Test for nested GAMLSS models. 
 (No check whether the models are nested is performed). 
 
       Null model: deviance= 344.3556 with  4 deg. of freedom 
 Altenative model: deviance= 333.0341 with  6 deg. of freedom 
 
 LRT = 11.32146 with 2 deg. of freedom and p-value= 0.003479973 
> 
> 
> 
> cleanEx()
> nameEx("Q.stats")
> ### * Q.stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Q.stats
> ### Title: A function to calculate the Q-statistics
> ### Aliases: Q.stats
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> h<-gamlss(y~pb(x), sigma.formula=~pb(x), family=BCT, data=abdom) 
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
GAMLSS-RS iteration 2: Global Deviance = 4771.039 
GAMLSS-RS iteration 3: Global Deviance = 4770.999 
GAMLSS-RS iteration 4: Global Deviance = 4770.994 
GAMLSS-RS iteration 5: Global Deviance = 4770.993 
> Q.stats(h,xvar=abdom$x,n.inter=8)
                           Z1         Z2          Z3          Z4 AgostinoK2   N
12.22 to 16.78     0.22310901  0.2231993 -0.14207277 -0.63976672  0.4294861  79
16.78 to 20.07     0.27619781 -0.3475327 -0.33181836  0.25132726  0.1732688  75
20.07 to 23.50    -0.22343544  0.1657150 -0.05400520 -2.44370381  5.9746049  76
23.50 to 27.07    -0.32920091 -0.9597157  1.71480040  1.78490566  6.1264286  77
27.07 to 30.64    -0.45998199  0.3880878  0.42334888 -0.57489332  0.5097266  74
30.64 to 34.50     0.90144013  0.6861952 -0.09100319  0.86940807  0.7641520  82
34.50 to 38.36    -0.27303391  0.1957162 -0.54304100  0.87362727  1.0581181  71
38.36 to 42.50    -0.07666864 -0.1049906 -0.96398657  1.11959255  2.1827576  76
TOTAL Q stats      1.38896282  1.7899164  4.48541454 12.73312816 17.2185427 610
df for Q stats     2.14336368  5.5475062  7.00000000  7.00000000 14.0000000   0
p-val for Q stats  0.53341430  0.9148632  0.72247289  0.07888387  0.2447187   0
> Q.stats(h,xvar=abdom$x,n.inter=8,zvals=FALSE)
                           Q1         Q2          Q3          Q4 AgostinoK2   N
12.22 to 16.78    0.049777630 0.04981792 0.020184673  0.40930145  0.4294861  79
16.78 to 20.07    0.076285230 0.12077896 0.110103424  0.06316539  0.1732688  75
20.07 to 23.50    0.049923396 0.02746147 0.002916562  5.97168831  5.9746049  76
23.50 to 27.07    0.108373237 0.92105425 2.940540403  3.18588820  6.1264286  77
27.07 to 30.64    0.211583432 0.15061214 0.179224274  0.33050233  0.5097266  74
30.64 to 34.50    0.812594300 0.47086382 0.008281580  0.75587039  0.7641520  82
34.50 to 38.36    0.074547516 0.03830484 0.294893524  0.76322461  1.0581181  71
38.36 to 42.50    0.005878081 0.01102302 0.929270103  1.25348747  2.1827576  76
TOTAL Q stats     1.388962821 1.78991641 4.485414542 12.73312816 17.2185427 610
df for Q stats    2.143363677 5.54750620 7.000000000  7.00000000 14.0000000   0
p-val for Q stats 0.533414302 0.91486315 0.722472891  0.07888387  0.2447187   0
> Q.stats(resid=resid(h),  xvar=abdom$x, n.inter=5)
                        Z1         Z2          Z3         Z4
12.22 to 18.64  0.07734675  0.7014332  0.02580969 -0.7630506
18.64 to 24.36  0.03605875 -1.1360390 -0.54381061 -2.3141338
24.36 to 30.07  0.10135394 -0.3762385  1.33379547  0.9482159
30.07 to 35.93  0.18921748  0.7520341 -0.24155345  0.7297474
35.93 to 42.50 -0.33315001  0.1902541 -0.64448682  0.9865331
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("Rsq")
> ### * Rsq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rsq
> ### Title: Generalised (Pseudo) R-squared for GAMLSS models
> ### Aliases: Rsq
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> m1 <- gamlss(y~x+qrt, data=aids, family=NBI)
GAMLSS-RS iteration 1: Global Deviance = 492.7119 
GAMLSS-RS iteration 2: Global Deviance = 492.6375 
GAMLSS-RS iteration 3: Global Deviance = 492.6373 
> Rsq(m1)
[1] 0.8095829
> Rsq(m1, type="both")
$CoxSnell
[1] 0.8095829

$CraggUhler
[1] 0.8095856

> 
> 
> 
> cleanEx()
> nameEx("VC.test")
> ### * VC.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VC.test
> ### Title: Vuong and Clarke tests
> ### Aliases: VC.test
> ### Keywords: regression
> 
> ### ** Examples
> 
> library(gamlss)
> # fitting different models 
> m0 <- gamlss(y~x+qrt, data=aids, family=PO)
GAMLSS-RS iteration 1: Global Deviance = 1115.458 
GAMLSS-RS iteration 2: Global Deviance = 1115.458 
> m1 <- gamlss(y~pb(x)+qrt, data=aids, family=PO)
GAMLSS-RS iteration 1: Global Deviance = 387.1462 
GAMLSS-RS iteration 2: Global Deviance = 387.1547 
GAMLSS-RS iteration 3: Global Deviance = 387.1547 
> m2 <- gamlss(y~pb(x)+qrt, data=aids, family=NBI)
GAMLSS-RS iteration 1: Global Deviance = 373.1785 
GAMLSS-RS iteration 2: Global Deviance = 366.4869 
GAMLSS-RS iteration 3: Global Deviance = 366.9278 
GAMLSS-RS iteration 4: Global Deviance = 366.9262 
GAMLSS-RS iteration 5: Global Deviance = 366.9258 
> # comparison of the mdels
> VC.test(m0,m2)
 Vuong's test: -6.886 model m2 is preferred over m0 
Clarke's test: 9 p-value= 1e-04 m2 is preferred over m0 
> VC.test(m0,m1)
 Vuong's test: -6.562 model m1 is preferred over m0 
Clarke's test: 8 p-value= 0 m1 is preferred over m0 
> VC.test(m1,m2)
 Vuong's test: -1.216 it is not possible to discriminate between models: m1 and m2 
Clarke's test: 29 p-value= 0.0725 it is not possible to discriminate between models: m1 and m2 
> 
> 
> 
> cleanEx()
> nameEx("acfResid")
> ### * acfResid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: acfResid
> ### Title: ACF plot of the residuals
> ### Aliases: acfResid
> ### Keywords: regresson ts
> 
> ### ** Examples
> 
> library(datasets)
> data(co2)
> m1<- gamlss(co2~pb(as.numeric(time(co2)))+factor(cycle(co2)))
GAMLSS-RS iteration 1: Global Deviance = 294.3422 
GAMLSS-RS iteration 2: Global Deviance = 294.3389 
GAMLSS-RS iteration 3: Global Deviance = 294.3389 
> acfResid(m1)
> 
> 
> 
> cleanEx()
> nameEx("bfp")
> ### * bfp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bfp
> ### Title: Functions to fit fractional polynomials in GAMLSS
> ### Aliases: bfp fp pp
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> #fits polynomials with power 1 and .5 
> mod1<-gamlss(y~bfp(x,c(1,0.5)),data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4948.285 
GAMLSS-RS iteration 2: Global Deviance = 4948.285 
> # fit the best of one fractional polynomial
> m1<-gamlss(y~fp(x,1),data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4967.042 
GAMLSS-RS iteration 2: Global Deviance = 4967.042 
> # fit the best of two fractional polynomials
> m2<-gamlss(y~fp(x,2),data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4941.099 
GAMLSS-RS iteration 2: Global Deviance = 4941.099 
> # fit the best of three fractional polynomials
> m3<-gamlss(y~fp(x,3),data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4933.937 
GAMLSS-RS iteration 2: Global Deviance = 4933.937 
> # get the coefficient for the second model 
> m2$mu.coefSmo
[[1]]

Call:
lm(formula = y ~ x.fp, weights = w)

Coefficients:
(Intercept)        x.fp1        x.fp2  
  -314.2734     123.1273      -0.8205  


> # now power polynomials using the best 2 fp c()
>  m4 <- gamlss(y ~ pp(x, c(1,3)), data = abdom)
GAMLSS-RS iteration 1: Global Deviance = 4924.698 
GAMLSS-RS iteration 2: Global Deviance = 4924.698 
> # This is not good idea in this case because
> # if you look at the fitted values you see what it went wrong
> plot(y~x,data=abdom)
> lines(fitted(m2,"mu")~abdom$x,col="red")
> lines(fitted(m4,"mu")~abdom$x,col="blue")
> 
> 
> 
> cleanEx()
> nameEx("binom")
> ### * binom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .binom
> ### Title: Lists used by GAMLSS
> ### Aliases: .binom .counts .gamlss.bi.list .gamlss.multin.list
> ###   .gamlss.sm.list .real0to1 .realAll .realline .realplus
> ### Keywords: datasets
> 
> ### ** Examples
> 
> .binom
[1] "BI"   "BB"   "DBI"  "ZIBI" "ZABI" "ZIBB" "ZABB"
> .counts
 [1] "PO"       "GEOM"     "GEOMo"    "LG"       "YULE"     "ZIPF"    
 [7] "WARING"   "GPO"      "DPO"      "BNB"      "NBF"      "NBI"     
[13] "NBII"     "PIG"      "ZIP"      "ZIP2"     "ZAP"      "ZALG"    
[19] "DEL"      "ZAZIPF"   "SI"       "SICHEL"   "ZANBI"    "ZAPIG"   
[25] "ZINBI"    "ZIPIG"    "ZINBF"    "ZABNB"    "ZASICHEL" "ZINBF"   
[31] "ZIBNB"    "ZISICHEL"
> .gamlss.bi.list
 [1] "BI"            "Binomial"      "BB"            "Beta Binomial"
 [5] "ZIBI"          "ZIBB"          "ZABI"          "ZABB"         
 [9] "DBI"           "BItr"          "BBtr"          "ZIBItr"       
[13] "ZIBBtr"        "ZABItr"        "ZABBtr"        "DBItr"        
> .gamlss.multin.list
[1] "MULTIN" "MN3"    "MN4"    "MN5"   
> .gamlss.sm.list
 [1] "cs"     "scs"    "ps"     "pb"     "cy"     "tp"     "pvc"    "pbm"   
 [9] "pbj"    "pbo"    "pbz"    "pbc"    "pbts"   "pbp"    "pbf"    "pcat"  
[17] "pba"    "pbq"    "gmrf"   "mrfa"   "mrf"    "so"     "SOP"    "krig"  
[25] "lo"     "random" "re"     "re4"    "fp"     "pp"     "nl"     "ri"    
[33] "boost"  "fk"     "own"    "test"   "test0"  "test1"  "arma"   "rw"    
[41] "ar"     "seas"   "srw"    "sar"    "la"     "plag"   "tr"     "ga"    
[49] "ba"     "mm"     "nn"     "sv"     "ma"     "pcr"    "pc"     "h2o"   
[57] "pa"     "gnet"   "lrs"    "rf1"    "rf2"    "gbo"    "gsel"  
> .real0to1
 [1] "BE"      "BEo"     "BEINF0"  "BEINF1"  "LOGITNO" "SIMPLEX" "BEOI"   
 [8] "BEZI"    "BEINF"   "GB1"    
> .realline
 [1] "NO"      "GU"      "RG"      "LO"      "NET"     "TF"      "TF2"    
 [8] "PE"      "PE2"     "SN1"     "SN2"     "exGAUS"  "SHASH"   "SHASHo" 
[15] "SHASHo2" "EGB2"    "JSU"     "JSUo"    "SEP1"    "SEP2"    "SEP3"   
[22] "SEP4"    "ST1"     "ST2"     "ST3"     "ST4"     "ST5"     "SST"    
[29] "GT"     
> .realplus
 [1] "EXP"      "GA"       "IG"       "LOGNO"    "LOGNO2"   "WEI"     
 [7] "WEI2"     "WEI3"     "IGAMMA"   "PARETO2"  "PARETO2o" "GP"      
[13] "BCCG"     "BCCGo"    "exGAUS"   "GG"       "GIG"      "LNO"     
[19] "BCTo"     "BCT"      "BCPEo"    "BCPE"     "GB2"     
> 
> 
> 
> cleanEx()
> nameEx("bp")
> ### * bp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bp
> ### Title: Bucket plot
> ### Aliases: bp
> ### Keywords: regression
> 
> ### ** Examples
> 
> m1 <- gamlss(R~pb(Fl)+pb(A), data=rent, family=GA)
GAMLSS-RS iteration 1: Global Deviance = 27923.61 
GAMLSS-RS iteration 2: Global Deviance = 27923.61 
> bp(m1)
> 
> 
> 
> cleanEx()
> nameEx("calibration")
> ### * calibration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calibration
> ### Title: Calibrating centile curves
> ### Aliases: calibration
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> m1<-gamlss(y~pb(x), sigma.fo=~pb(x), family=LO, data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4782.6 
GAMLSS-RS iteration 2: Global Deviance = 4779.267 
GAMLSS-RS iteration 3: Global Deviance = 4779.279 
GAMLSS-RS iteration 4: Global Deviance = 4779.279 
> calibration(m1, xvar=abdom$x, fan=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("centiles")
> ### * centiles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centiles
> ### Title: Plots the centile curves for a GAMLSS object
> ### Aliases: centiles centiles.fan
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> h<-gamlss(y~pb(x), sigma.formula=~pb(x), family=BCT, data=abdom) 
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
GAMLSS-RS iteration 2: Global Deviance = 4771.039 
GAMLSS-RS iteration 3: Global Deviance = 4770.999 
GAMLSS-RS iteration 4: Global Deviance = 4770.994 
GAMLSS-RS iteration 5: Global Deviance = 4770.993 
> # default plot
> centiles(h,xvar=abdom$x)
% of cases below  0.4 centile is  0.3278689 
% of cases below  2 centile is  2.459016 
% of cases below  10 centile is  8.688525 
% of cases below  25 centile is  26.22951 
% of cases below  50 centile is  50.16393 
% of cases below  75 centile is  73.77049 
% of cases below  90 centile is  90 
% of cases below  98 centile is  98.03279 
% of cases below  99.6 centile is  99.67213 
> # control of colours and lines
> centiles(h, xvar=abdom$x,  col.cent=c(2,3,4,5,1,5,4,3,2,1), 
+               lwd.cent=c(1,1,1,1,2,1,1,1,1))
% of cases below  0.4 centile is  0.3278689 
% of cases below  2 centile is  2.459016 
% of cases below  10 centile is  8.688525 
% of cases below  25 centile is  26.22951 
% of cases below  50 centile is  50.16393 
% of cases below  75 centile is  73.77049 
% of cases below  90 centile is  90 
% of cases below  98 centile is  98.03279 
% of cases below  99.6 centile is  99.67213 
> #Control line types
> centiles(h, xvar=abdom$x,  col.cent=1, cent=c(.5,2.5,50,97.5,99.5), 
+               lty.centiles=c(3,2,1,2,3),lwd.cent=c(1,1,2,1,1))
% of cases below  0.5 centile is  0.6557377 
% of cases below  2.5 centile is  2.459016 
% of cases below  50 centile is  50.16393 
% of cases below  97.5 centile is  97.70492 
% of cases below  99.5 centile is  99.5082 
> # control of the main title
> centiles(h, xvar=abdom$x,  main="Abdominal data \n @")
% of cases below  0.4 centile is  0.3278689 
% of cases below  2 centile is  2.459016 
% of cases below  10 centile is  8.688525 
% of cases below  25 centile is  26.22951 
% of cases below  50 centile is  50.16393 
% of cases below  75 centile is  73.77049 
% of cases below  90 centile is  90 
% of cases below  98 centile is  98.03279 
% of cases below  99.6 centile is  99.67213 
> # the fan-chart
> centiles.fan(h,xvar=abdom$x, colors="rainbow")
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("centiles.com")
> ### * centiles.com
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centiles.com
> ### Title: Comparing centiles from different GAMLSS models
> ### Aliases: centiles.com
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> h1<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1),family=BCT, data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4776.096 
GAMLSS-RS iteration 2: Global Deviance = 4775.896 
GAMLSS-RS iteration 3: Global Deviance = 4775.875 
GAMLSS-RS iteration 4: Global Deviance = 4775.876 
> h2<-gamlss(y~pb(x), sigma.formula=~pb(x), family=BCT, data=abdom )
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
GAMLSS-RS iteration 2: Global Deviance = 4771.039 
GAMLSS-RS iteration 3: Global Deviance = 4770.999 
GAMLSS-RS iteration 4: Global Deviance = 4770.994 
GAMLSS-RS iteration 5: Global Deviance = 4770.993 
> centiles.com(h1,h2,xvar=abdom$x)
********  Model 1 ******** 
% of cases below  0.4 centile is  0.6557377 
% of cases below  10 centile is  8.688525 
% of cases below  50 centile is  50.32787 
% of cases below  90 centile is  88.68852 
% of cases below  99.6 centile is  99.67213 
********  Model 2 ******** 
% of cases below  0.4 centile is  0.3278689 
% of cases below  10 centile is  8.688525 
% of cases below  50 centile is  50.16393 
% of cases below  90 centile is  90 
% of cases below  99.6 centile is  99.67213 
> rm(h1,h2)
> 
> 
> 
> cleanEx()
> nameEx("centiles.pred")
> ### * centiles.pred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centiles.pred
> ### Title: Creating predictive centiles values
> ### Aliases: centiles.pred
> ### Keywords: regression
> 
> ### ** Examples
> 
> ## bring the data and fit the model
> data(abdom)
> a<-gamlss(y~pb(x),sigma.fo=~pb(x), data=abdom, family=BCT)
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
GAMLSS-RS iteration 2: Global Deviance = 4771.039 
GAMLSS-RS iteration 3: Global Deviance = 4770.999 
GAMLSS-RS iteration 4: Global Deviance = 4770.994 
GAMLSS-RS iteration 5: Global Deviance = 4770.993 
> ## plot the centiles
> centiles(a,xvar=abdom$x)
% of cases below  0.4 centile is  0.3278689 
% of cases below  2 centile is  2.459016 
% of cases below  10 centile is  8.688525 
% of cases below  25 centile is  26.22951 
% of cases below  50 centile is  50.16393 
% of cases below  75 centile is  73.77049 
% of cases below  90 centile is  90 
% of cases below  98 centile is  98.03279 
% of cases below  99.6 centile is  99.67213 
> ##-----------------------------------------------------------------------------
> ## the first use of the function centiles.pred()
> ## to calculate the centiles at new x values
> ##-----------------------------------------------------------------------------
> newx<-seq(12,40,2)
> mat <- centiles.pred(a, xname="x", xvalues=newx )
> mat
    x       0.4         2        10        25        50        75        90
1  12  43.85374  47.01984  50.74981  53.54954  56.68358  60.02206  63.39547
2  14  64.99847  69.26230  74.24949  77.96894  82.10964  86.49528  90.90189
3  16  86.34623  91.48407  97.45352 101.87910 106.78079 111.94504 117.10700
4  18 107.36397 113.15337 119.83864 124.76784 130.20180 135.89910 141.56677
5  20 127.74961 134.02414 141.23116 146.51998 152.32682 158.38963 164.39613
6  22 147.47956 154.16417 161.80999 167.39985 173.51762 179.88399 186.17077
7  24 167.03055 174.15663 182.28328 188.20903 194.67984 201.39796 208.01698
8  26 186.43408 194.11651 202.86341 209.23224 216.17832 223.38070 230.46799
9  28 205.25984 213.65320 223.20618 230.15974 237.74154 245.60093 253.33262
10 30 223.05929 232.30271 242.82961 250.49626 258.85943 267.53296 276.06958
11 32 239.94648 250.14305 261.76914 270.24518 279.49955 289.10620 298.56977
12 34 255.83969 267.02269 279.79078 289.11063 299.29674 309.88185 320.32017
13 36 270.63078 282.78191 296.67371 306.82572 317.93249 329.48630 340.89150
14 38 284.50070 297.58358 312.55868 323.51411 335.51087 348.00232 360.34458
15 40 297.87102 311.82018 327.80182 339.50337 352.32631 365.68783 378.89934
          98      99.6
1   68.59603  73.80262
2   97.64928 104.35232
3  124.96154 132.70885
4  150.14145 158.54397
5  173.43863 182.24991
6  195.59846 204.74447
7  217.91579 227.48904
8  241.05126 251.26909
9  264.87444 276.01361
10 288.82014 301.13376
11 312.72020 326.40256
12 335.94760 351.07956
13 357.98730 374.56407
14 378.86564 396.84720
15 398.74199 418.02565
> ## now plot the centile curves  
>  mat <- centiles.pred(a, xname="x",xvalues=newx, plot=TRUE )
> ##-----------------------------------------------------------------------------
> ## the second use of the function centiles.pred()
> ## to calculate (nornalised) standard-centiles for new x
> ## values using the fitted model
> ##-----------------------------------------------------------------------------
> newx <- seq(12,40,2)
> mat <- centiles.pred(a, xname="x",xvalues=newx, type="standard-centiles" )
> mat
    x        -4        -3        -2        -1         0         1         2
1  12  35.15895  41.84842  47.29014  52.05426  56.68358  61.77326  68.18800
2  14  53.12637  62.28239  69.62499  75.98492  82.10964  88.78588  97.12182
3  16  71.85517  83.05595  91.91962  99.52115 106.78079 114.63156 124.34960
4  18  90.83984 103.63825 113.64261 122.14434 130.20180 138.85213 149.47547
5  20 109.65487 123.69455 134.55293 143.70767 152.32682 161.52221 172.73819
6  22 128.04345 143.14495 154.72632 164.42963 173.51762 183.16524 194.86972
7  24 146.19052 162.39874 174.75499 185.06194 194.67984 204.85446 217.15176
8  26 163.89552 181.43418 194.76105 205.85078 216.17832 227.08281 240.23506
9  28 180.61855 199.79570 214.35725 226.46805 237.74154 249.63991 263.98447
10 30 195.95489 217.04471 233.07831 246.42555 258.85943 271.99194 287.83667
11 32 210.11595 233.31792 250.99914 265.74380 279.49955 294.04831 311.62811
12 34 223.20982 248.57772 267.96226 284.15998 299.29674 315.33167 334.74071
13 36 235.26757 262.74845 283.80351 301.43179 317.93249 335.43951 356.66614
14 38 246.51544 276.02211 298.68419 317.69210 335.51087 354.44325 377.43348
15 40 257.44461 288.83780 312.99423 333.28385 352.32631 372.58122 397.20691
           3         4
1   77.56787  93.78078
2  109.16934 129.64914
3  138.24413 161.50485
4  164.51569 189.34583
5  188.48368 214.16921
6  211.19192 237.56934
7  234.22074 261.62408
8  258.44418 287.57313
9  283.83334 315.56069
10 309.78243 344.90894
11 336.02216 375.16925
12 361.73053 405.17351
13 386.24510 433.99563
14 409.53114 461.48714
15 431.63893 487.49014
> ## now plot the standard centiles  
> mat <- centiles.pred(a, xname="x",xvalues=newx, type="standard-centiles",
+        plot = TRUE )
> ##-----------------------------------------------------------------------------
> ## the third use of the function centiles.pred()
> ##  if we have new x and y values what are their z-scores?
> ##-----------------------------------------------------------------------------
> # create new y and x values and plot them in the previous plot
> newx <- c(20,21.2,23,20.9,24.2,24.1,25)
> newy <- c(130,121,123,125,140,145,150)
> for(i in 1:7) points(newx[i],newy[i],col="blue")
> ## now calculate their z-scores
> znewx <- centiles.pred(a, xname="x",xvalues=newx,yval=newy, type="z-scores" )
> znewx
[1] -2.445938 -3.983711 -4.692154 -3.552482 -4.392778 -4.108256 -4.250223
> ## Not run: 
> ##D ##-----------------------------------------------------------------------------
> ##D ## What we do if the x variables is transformed?
> ##D ##----------------------------------------------------------------------------
> ##D ##  case 1 : transformed x-variable within the formula
> ##D ##----------------------------------------------------------------------------
> ##D ## fit model
> ##D aa <- gamlss(y~pb(x^0.5),sigma.fo=~pb(x^0.5), data=abdom, family=BCT)
> ##D ## centiles is working in this case
> ##D centiles(aa, xvar=abdom$x, legend = FALSE)
> ##D ## get predict for values of x at 12, 14, ..., 40
> ##D mat <- centiles.pred(aa, xname="x", xvalues=seq(12,40,2), plot=TRUE )
> ##D mat
> ##D # plot all prediction points
> ##D xx <- rep(mat[,1],9)
> ##D yy <- unlist(mat[,2:10])
> ##D points(xx,yy,col="red")
> ##D ##----------------------------------------------------------------------------
> ##D ##  case 2 : the x-variable is previously transformed 
> ##D ##----------------------------------------------------------------------------
> ##D nx <- abdom$x^0.5
> ##D aa <- gamlss(y~pb(nx),sigma.fo=~pb(nx), data=abdom, family=BCT)
> ##D centiles(aa, xvar=abdom$x)
> ##D # equivalent to fitting
> ##D newd<-data.frame( abdom, nx=abdom$x^0.5)
> ##D aa1 <- gamlss(y~pb(nx),sigma.fo=~pb(nx), family=BCT, data=newd)
> ##D centiles(aa1, xvar=abdom$x)
> ##D # getting the centiles at x equal to 12, 14, ...40
> ##D mat <-  centiles.pred(aa, xname="nx", xvalues=seq(12,40,2), power=0.5, 
> ##D          data=newd, plot=TRUE)
> ##D # plot all prediction points         
> ##D xxx <- rep(mat[,1],9)
> ##D yyy <- unlist(mat[,2:10])
> ##D points(xxx,yyy,col="red")
> ##D # the idea is that if the transformed x-variable is used in the fit
> ##D # the power argument has to used in centiles.pred()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("centiles.split")
> ### * centiles.split
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centiles.split
> ### Title: Plots centile curves split by x for a GAMLSS object
> ### Aliases: centiles.split
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> h<-gamlss(y~pb(x), sigma.formula=~pb(x), family=BCT, data=abdom) 
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
GAMLSS-RS iteration 2: Global Deviance = 4771.039 
GAMLSS-RS iteration 3: Global Deviance = 4770.999 
GAMLSS-RS iteration 4: Global Deviance = 4770.994 
GAMLSS-RS iteration 5: Global Deviance = 4770.993 
> mout <- centiles.split(h,xvar=abdom$x)
> mout
     12.22 to 20.07 20.07 to 27.07 27.07 to 34.5 34.5 to 42.5
0.4        0.000000       0.000000     0.6410256    0.6802721
2          2.597403       1.307190     2.5641026    3.4013605
10         8.441558       7.189542    10.8974359    8.1632653
25        24.025974      30.718954    24.3589744   25.8503401
50        46.753247      53.594771    50.0000000   50.3401361
75        73.376623      73.202614    73.7179487   74.8299320
90        88.311688      92.156863    88.4615385   91.1564626
98        97.402597      99.346405    97.4358974   97.9591837
99.6     100.000000      99.346405    99.3589744  100.0000000
> rm(h,mout)
> 
> 
> 
> cleanEx()
> nameEx("coef.gamlss")
> ### * coef.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.gamlss
> ### Title: Extract Model Coefficients in a GAMLSS fitted model
> ### Aliases: coef.gamlss coefAll
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=NBI, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 383.4541 
GAMLSS-RS iteration 2: Global Deviance = 381.7155 
GAMLSS-RS iteration 3: Global Deviance = 381.7145 
GAMLSS-RS iteration 4: Global Deviance = 381.7145 
> coef(h)
(Intercept) poly(x, 3)1 poly(x, 3)2 poly(x, 3)3        qrt2        qrt3 
 4.80765788  8.30268979 -3.38783386  0.96224602 -0.16152166  0.03090039 
       qrt4 
-0.12087330 
> coefAll(h)
$mu
(Intercept) poly(x, 3)1 poly(x, 3)2 poly(x, 3)3        qrt2        qrt3 
 4.80765788  8.30268979 -3.38783386  0.96224602 -0.16152166  0.03090039 
       qrt4 
-0.12087330 

$sigma
(Intercept) 
  -4.644633 

> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("cs")
> ### * cs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cs
> ### Title: Specify a Smoothing Cubic Spline Fit in a GAMLSS Formula
> ### Aliases: cs scs cs.control
> ### Keywords: regression
> 
> ### ** Examples
> 
> # cubic splines example
> data(aids)
> # fitting a smoothing cubic spline with 7 degrees of freedom
> # plus the a quarterly  effect  
> aids1<-gamlss(y~cs(x,df=7)+qrt,data=aids,family=PO) # 
GAMLSS-RS iteration 1: Global Deviance = 374.1748 
GAMLSS-RS iteration 2: Global Deviance = 374.1748 
> aids2<-gamlss(y~scs(x,df=5)+qrt,data=aids,family=PO) # 
GAMLSS-RS iteration 1: Global Deviance = 388.1829 
GAMLSS-RS iteration 2: Global Deviance = 388.1829 
> aids3<-gamlss(y~scs(x)+qrt,data=aids,family=PO) # using GCV 
GAMLSS-RS iteration 1: Global Deviance = 295.7922 
GAMLSS-RS iteration 2: Global Deviance = 295.7922 
> with(aids, plot(x,y))
> lines(aids$x,fitted(aids1), col="red")
> lines(aids$x,fitted(aids3), col="green")
> rm(aids1, aids2, aids3)
> 
> 
> 
> cleanEx()
> nameEx("deviance.gamlss")
> ### * deviance.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deviance.gamlss
> ### Title: Global Deviance of a GAMLSS model
> ### Aliases: deviance.gamlss
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> deviance(h)
[1] 416.8014
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("dtop")
> ### * dtop
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dtop
> ### Title: Detrended transformed Owen's plot
> ### Aliases: dtop
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> a<-gamlss(y~pb(x),sigma.fo=~pb(x,1),family=LO,data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4782.108 
GAMLSS-RS iteration 2: Global Deviance = 4778.814 
GAMLSS-RS iteration 3: Global Deviance = 4778.823 
GAMLSS-RS iteration 4: Global Deviance = 4778.823 
> dtop(a)
> dtop(a, xvar=abdom$x)
> rm(a)
> 
> 
> 
> cleanEx()
> nameEx("edf")
> ### * edf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edf
> ### Title: Effective degrees of freedom from gamlss model
> ### Aliases: edf edfAll
> ### Keywords: regression
> 
> ### ** Examples
> 
> library(gamlss.data)
> data(usair)
> m1<- gamlss(y~pb(x1)+pb(x2)+pb(x6), data=usair)
GAMLSS-RS iteration 1: Global Deviance = 340.3973 
GAMLSS-RS iteration 2: Global Deviance = 340.3971 
> edfAll(m1)
$mu
$mu$`pb(x1)`
[1] 2.562967

$mu$`pb(x2)`
[1] 2

$mu$`pb(x6)`
[1] 2


$sigma
[1] 0

> edf(m1)
Effective df for mu model 
$`pb(x1)`
[1] 2.562967

$`pb(x2)`
[1] 2

$`pb(x6)`
[1] 2

> 
> 
> 
> cleanEx()
> nameEx("findhyper")
> ### * findhyper
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find.hyper
> ### Title: A function to select values of hyper-parameters in a GAMLSS
> ###   model
> ### Aliases: find.hyper
> ### Keywords: regression
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(abdom)
> ##D # Example estimating the smoothing parameters for mu and 
> ##D # the transformation parameters for x
> ##D # declare the model
> ##D mod1<-quote(gamlss(y~cs(nx,df=p[1]),family=BCT,data=abdom,
> ##D                         control=gamlss.control(trace=FALSE)))
> ##D # since we want also to find the transformation for x 
> ##D # we use the "other"" option
> ##D op <- find.hyper(model=mod1, other=quote(nx<-x^p[2]), parameters=c(3,0.5), 
> ##D             lower=c(1,0.001), steps=c(0.1,0.001))
> ##D op
> ##D # the optimum parameters found are 
> ##D # p = (p[1],p[2]) = (3.113218 0.001000) = (df for mu, lambda)
> ##D # so it needs df = 3 on top of the constant and linear 
> ##D # in  the cubic spline model for mu since p[1] is approximately  3
> ##D #  and log transformation for x since p[2] is approximately  0 
> ##D # here is an example with no data declaration in define the model
> ##D # we have to attach the data
> ##D attach(abdom)
> ##D mod2 <- quote(gamlss(y~cs(nx,df=p[1]),family=BCT,
> ##D                 control=gamlss.control(trace=FALSE)))
> ##D op2<-find.hyper(model=mod2, other=quote(nx<-x^p[2]), parameters=c(3,0.5), 
> ##D                 lower=c(1,0.001), steps=c(0.1,0.001))
> ##D op2
> ##D detach(abdom)
> ##D #--------------------------------------------------------------
> ##D # showing different ways of estimating the smoothing parameter
> ##D # get the df using local ML (PQL) 
> ##D m0 <- gamlss(y~pb(x), data=abdom)
> ##D # get the df using local GAIC 
> ##D m1<-gamlss(y~pb(x, method="GAIC", k=2), data=abdom)
> ##D # fiiting cubic splines with fixed df's at 3
> ##D m2<-gamlss(y~cs(x, df=3), data=abdom)
> ##D # fitting cubic splines using find hyper (global GAIC)
> ##D mod1 <- quote(gamlss(y~cs(x, df=p[1]),family=BCT,data=abdom,control=gamlss.control(trace=FALSE)))
> ##D op <- find.hyper(model=mod1, parameters=c(3), lower=c(1,0.001), steps=c(0.1,0.001))
> ##D # now fit final model
> ##D m3 <- gamlss(y~cs(x, df=op$par), data=abdom)
> ##D # effetive degrees of fredom for the 4 models
> ##D edf(m0);edf(m1); m2$mu.df; m3$mu.df
> ##D # deviances for the four models
> ##D deviance(m0); deviance(m1); deviance(m2); deviance(m3)
> ##D # their GAIC
> ##D GAIC(m0,m1,m2,m3)
> ##D # plotting  the models
> ##D plot(y~x, data=abdom, type="n")
> ##D lines(fitted(m3)~abdom$x, col="red")
> ##D lines(fitted(m1)~abdom$x, col="green")
> ##D lines(fitted(m0)~abdom$x, col="blue")
> ##D # almost identical
> ## End(Not run)
>  
> 
> 
> 
> cleanEx()
> nameEx("fitDist")
> ### * fitDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitDist
> ### Title: Fitting Different Parametric 'gamlss.family' Distributions.
> ### Aliases: fitDist fitDistPred chooseDist chooseDistPred getOrder
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> y <- rt(100, df=1)
> m1<-fitDist(y, type="realline")
  |                                                                              |                                                                      |   0%  |                                                                              |==                                                                    |   3%  |                                                                              |=====                                                                 |   7%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  14%  |                                                                              |============                                                          |  17%  |                                                                              |==============                                                        |  21%  |                                                                              |=================                                                     |  24%  |                                                                              |===================                                                   |  28%Warning in MLE(ll3, start = list(eta.mu = eta.mu, eta.sigma = eta.sigma,  :
  possible convergence problem: optim gave code=1 false convergence (8)
  |                                                                              |======================                                                |  31%Warning in MLE(ll3, start = list(eta.mu = eta.mu, eta.sigma = eta.sigma,  :
  possible convergence problem: optim gave code=1 false convergence (8)
  |                                                                              |========================                                              |  34%  |                                                                              |===========================                                           |  38%  |                                                                              |=============================                                         |  41%  |                                                                              |===============================                                       |  45%  |                                                                              |==================================                                    |  48%  |                                                                              |====================================                                  |  52%  |                                                                              |=======================================                               |  55%  |                                                                              |=========================================                             |  59%  |                                                                              |===========================================                           |  62%  |                                                                              |==============================================                        |  66%  |                                                                              |================================================                      |  69%  |                                                                              |===================================================                   |  72%Warning in MLE(ll4, start = list(eta.mu = eta.mu, eta.sigma = eta.sigma,  :
  possible convergence problem: optim gave code=1 false convergence (8)
  |                                                                              |=====================================================                 |  76%Warning in MLE(ll4, start = list(eta.mu = eta.mu, eta.sigma = eta.sigma,  :
  possible convergence problem: optim gave code=1 false convergence (8)
  |                                                                              |========================================================              |  79%  |                                                                              |==========================================================            |  83%  |                                                                              |============================================================          |  86%  |                                                                              |===============================================================       |  90%  |                                                                              |=================================================================     |  93%  |                                                                              |====================================================================  |  97%  |                                                                              |======================================================================| 100%Warning in MLE(ll4, start = list(eta.mu = eta.mu, eta.sigma = eta.sigma,  :
  possible convergence problem: optim gave code=1 false convergence (8)

> m1$fits
     PE2     SEP4     SEP3       PE       GT  SHASHo2   SHASHo    SHASH 
457.1255 457.1892 457.7201 457.8005 458.9558 459.8985 459.8985 459.8985 
    SEP2     SEP1     JSUo      JSU       TF      ST1      ST5      ST4 
460.6252 460.9816 462.0448 462.0448 463.6436 464.0165 464.4805 464.5490 
     ST2      ST3      TF2      SST      NET       LO   exGAUS      SN1 
464.6531 464.7289 469.1221 470.0015 475.6728 522.9256 539.9563 566.5557 
     SN2       NO       RG       GU 
573.6284 583.9381 586.9434 693.3284 
> m1$failed
[[1]]
[1] "EGB2"

> # an example of using  extra
> ## Not run: 
> ##D #---------------------------------------  
> ##D # Example of using the argument extra  
> ##D library(gamlss.tr)
> ##D data(tensile)
> ##D gen.trun(par=1,family="GA", type="right")
> ##D gen.trun(par=1,"LOGNO", type="right")
> ##D gen.trun(par=c(0,1),"TF", type="both")
> ##D ma<-fitDist(str, type="real0to1", trace=T,
> ##D        extra=c("GAtr", "LOGNOtr", "TFtr"), 
> ##D      data=tensile) 
> ##D ma$fits
> ##D ma$failed
> ##D #-------------------------------------
> ##D # selecting model using the prediction global deviance
> ##D # Using fitDistPred
> ##D # creating training data
> ##D y <- rt(1000, df=2)
> ##D m1 <- fitDist(y, type="realline")
> ##D m1$fits
> ##D m1$fails
> ##D # create validation data
> ##D yn <- rt(1000, df=2)
> ##D # choose distribution which fits the new data best
> ##D p1 <- fitDistPred(y, type="realline", newdata=yn)
> ##D p1$fits
> ##D p1$failed
> ##D #---------------------------------------
> ##D # using the function chooseDist()
> ##D # fitting normal distribution model
> ##D m1 <- gamlss(y~pb(x), sigma.fo=~pb(x), family=NO, data=abdom)
> ##D # choose a distribution on the real line 
> ##D # and save GAIC(k=c(2,4,6.4),  i.e. AIC, Chi-square and BIC.   
> ##D t1 <- chooseDist(m1, type="realline", parallel="snow", ncpus=4)
> ##D # the GAIC's
> ##D t1
> ##D # the distributions which failed are with NA's 
> ##D # ordering according to  BIC
> ##D getOrder(t1,3)
> ##D fm<-update(m1, family=names(getOrder(t1,3)[1]))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fitted.gamlss")
> ### * fitted.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitted.gamlss
> ### Title: Extract Fitted Values For A GAMLSS Model
> ### Aliases: fitted.gamlss fv
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> fitted(h)
         1          2          3          4          5          6          7 
  3.896026   4.614935   7.422221   8.768654  12.979298  14.411163  21.768152 
         8          9         10         11         12         13         14 
 24.200524  33.775141  35.428204  50.655403  53.411295  70.836914  70.748250 
        15         16         17         18         19         20         21 
 96.504249  97.265284 123.548781 118.412788 155.304275 150.799148 184.898568 
        22         23         24         25         26         27         28 
171.394836 217.839470 205.379020 244.987968 221.367038 274.793082 253.529967 
        29         30         31         32         33         34         35 
296.532272 263.235310 321.655483 292.697106 338.310168 297.365910 360.488934 
        36         37         38         39         40         41         42 
326.079382 375.382385 329.271344 399.124699 361.696170 417.973122 368.750221 
        43         44         45 
450.444031 412.173451 481.879358 
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("fittedPlot")
> ### * fittedPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fittedPlot
> ### Title: Plots The Fitted Values of a GAMLSS Model
> ### Aliases: fittedPlot
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> h1<-gamlss(y~pb(x), sigma.formula=~x, family=BCT, data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4787.156 
GAMLSS-RS iteration 2: Global Deviance = 4785.759 
GAMLSS-RS iteration 3: Global Deviance = 4785.72 
GAMLSS-RS iteration 4: Global Deviance = 4785.714 
GAMLSS-RS iteration 5: Global Deviance = 4785.712 
GAMLSS-RS iteration 6: Global Deviance = 4785.712 
> h2<-gamlss(y~pb(x), sigma.formula=~pb(x), family=BCT, data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
GAMLSS-RS iteration 2: Global Deviance = 4771.039 
GAMLSS-RS iteration 3: Global Deviance = 4770.999 
GAMLSS-RS iteration 4: Global Deviance = 4770.994 
GAMLSS-RS iteration 5: Global Deviance = 4770.993 
> fittedPlot(h1,h2,x=abdom$x)
> rm(h1,h2)
> 
> 
> 
> cleanEx()
> nameEx("formula.gamlss")
> ### * formula.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula.gamlss
> ### Title: Extract the Model Formula in a GAMLSS fitted model
> ### Aliases: formula.gamlss
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> formula(h,"mu")
y ~ poly(x, 3) + qrt
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("gamlss-package")
> ### * gamlss-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlss-package
> ### Title: Generalized Additive Models for Location Scale and Shape
> ### Aliases: gamlss-package
> ### Keywords: package distribution regression
> 
> ### ** Examples
> 
> data(abdom)
> mod<-gamlss(y~pb(x),sigma.fo=~pb(x),family=BCT, data=abdom, method=mixed(1,20))
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
GAMLSS-CG iteration 1: Global Deviance = 4771.013 
GAMLSS-CG iteration 2: Global Deviance = 4770.994 
GAMLSS-CG iteration 3: Global Deviance = 4770.994 
> plot(mod)
******************************************************************
	      Summary of the Quantile Residuals
                           mean   =  0.001237747 
                       variance   =  1.001867 
               coef. of skewness  =  -0.004513695 
               coef. of kurtosis  =  2.994576 
Filliben correlation coefficient  =  0.999324 
******************************************************************
> rm(mod)
> 
> 
> 
> cleanEx()
> nameEx("gamlss")
> ### * gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlss
> ### Title: Generalized Additive Models for Location Scale and Shape
> ### Aliases: gamlss is.gamlss gamlssNews
> ### Keywords: regression
> 
> ### ** Examples
>  
> data(abdom)
> mod<-gamlss(y~pb(x),sigma.fo=~pb(x),family=BCT, data=abdom, method=mixed(1,20))
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
GAMLSS-CG iteration 1: Global Deviance = 4771.013 
GAMLSS-CG iteration 2: Global Deviance = 4770.994 
GAMLSS-CG iteration 3: Global Deviance = 4770.994 
> plot(mod)
******************************************************************
	      Summary of the Quantile Residuals
                           mean   =  0.001237747 
                       variance   =  1.001867 
               coef. of skewness  =  -0.004513695 
               coef. of kurtosis  =  2.994576 
Filliben correlation coefficient  =  0.999324 
******************************************************************
> rm(mod)
> 
> 
> 
> cleanEx()
> nameEx("gamlss.control")
> ### * gamlss.control
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlss.control
> ### Title: Auxiliary for Controlling GAMLSS Fitting
> ### Aliases: gamlss.control
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> con<-gamlss.control(mu.step=0.1)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids, control=con) # 
GAMLSS-RS iteration 1: Global Deviance = 416.835 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
GAMLSS-RS iteration 3: Global Deviance = 416.8014 
> rm(h,con)
> 
> 
> 
> cleanEx()
> nameEx("gamlss.scope")
> ### * gamlss.scope
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlss.scope
> ### Title: Generate a Scope Argument for Stepwise GAMLSS
> ### Aliases: gamlss.scope
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(usair)
> gs1<-gamlss.scope(model.frame(y~x1+x2+x3+x4+x5+x6, data=usair))
> gs2<-gamlss.scope(model.frame(usair))
> gs1
$x1
~1 + x1 + cs(x1)
<environment: 0x55c285c21e98>

$x2
~1 + x2 + cs(x2)
<environment: 0x55c285c21e98>

$x3
~1 + x3 + cs(x3)
<environment: 0x55c285c21e98>

$x4
~1 + x4 + cs(x4)
<environment: 0x55c285c21e98>

$x5
~1 + x5 + cs(x5)
<environment: 0x55c285c21e98>

$x6
~1 + x6 + cs(x6)
<environment: 0x55c285c21e98>

> gs2
$x1
~1 + x1 + cs(x1)
<environment: 0x55c285bd0938>

$x2
~1 + x2 + cs(x2)
<environment: 0x55c285bd0938>

$x3
~1 + x3 + cs(x3)
<environment: 0x55c285bd0938>

$x4
~1 + x4 + cs(x4)
<environment: 0x55c285bd0938>

$x5
~1 + x5 + cs(x5)
<environment: 0x55c285bd0938>

$x6
~1 + x6 + cs(x6)
<environment: 0x55c285bd0938>

> gs3<-gamlss.scope(model.frame(usair), smooth="fp", arg="3")
> gs3 
$x1
~1 + x1 + fp(x1, 3)
<environment: 0x55c285b30e08>

$x2
~1 + x2 + fp(x2, 3)
<environment: 0x55c285b30e08>

$x3
~1 + x3 + fp(x3, 3)
<environment: 0x55c285b30e08>

$x4
~1 + x4 + fp(x4, 3)
<environment: 0x55c285b30e08>

$x5
~1 + x5 + fp(x5, 3)
<environment: 0x55c285b30e08>

$x6
~1 + x6 + fp(x6, 3)
<environment: 0x55c285b30e08>

> 
> 
> 
> cleanEx()
> nameEx("gamlssML")
> ### * gamlssML
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlssML
> ### Title: Maximum Likelihood estimation of a simple GAMLSS model
> ### Aliases: gamlssML gamlssMLpred
> ### Keywords: regression
> 
> ### ** Examples
> 
> #-------- negative binomial 1000 observations
> y<- rNBI(1000)
>   system.time(m1<-gamlss(y~1, family=NBI))
GAMLSS-RS iteration 1: Global Deviance = 2772.092 
GAMLSS-RS iteration 2: Global Deviance = 2772.092 
   user  system elapsed 
  0.013   0.000   0.012 
>   system.time(m1a<-gamlss(y~1, family=NBI, trace=FALSE))
   user  system elapsed 
  0.012   0.000   0.012 
> system.time(m11<-gamlssML(y, family=NBI))
   user  system elapsed 
  0.008   0.000   0.007 
> AIC(m1,m1a,m11, k=0)
    df      AIC
m1   2 2772.092
m1a  2 2772.092
m11  2 2772.092
> # neg. binomial   n=10000
>  y<- rNBI(10000)
>  system.time(m1<-gamlss(y~1, family=NBI))
GAMLSS-RS iteration 1: Global Deviance = 27798.92 
GAMLSS-RS iteration 2: Global Deviance = 27798.92 
   user  system elapsed 
  0.090   0.001   0.091 
>  system.time(m1a<-gamlss(y~1, family=NBI, trace=FALSE))
   user  system elapsed 
  0.089   0.001   0.089 
> system.time(m11<-gamlssML(y, family=NBI))
   user  system elapsed 
  0.063   0.001   0.064 
> AIC(m1,m1a,m11, k=0)
    df      AIC
m11  2 27798.92
m1   2 27798.92
m1a  2 27798.92
> # binomial type data 
> data(aep)
> m1 <- gamlssML(aep$y, family=BB) # ok
> m2 <- gamlssML(y, data=aep, family=BB) # ok
> m3 <- gamlssML(y~1, data=aep, family=BB) # ok 
> m4 <- gamlssML(aep$y~1, family=BB) # ok
> AIC(m1,m2,m3,m4)
   df      AIC
m1  2 4679.678
m2  2 4679.678
m3  2 4679.678
m4  2 4679.678
> ## Not run: 
> ##D #-----------------------------------------------------------
> ##D # neg. binomial   n=10000
> ##D y<- rNBI(10000)
> ##D rand <- sample(2, length(y), replace=TRUE, prob=c(0.6,0.4))
> ##D table(rand)
> ##D    Y <- subset(y, rand==1)
> ##D YVal <- subset(y, rand==2) 
> ##D length(Y)
> ##D length(YVal) 
> ##D da1 <- data.frame(y=y)
> ##D dim(da1)
> ##D da2 <- data.frame(y=Y)
> ##D dim(da2)
> ##D danew <- data.frame(y=YVal)
> ##D # using gamlssVGD to fit the models
> ##D g1 <- gamlssVGD(y~1, rand=rand, family=NBI, data=da1)
> ##D g2 <- gamlssVGD(y~1, family=NBI, data=da2, newdata=dan)
> ##D AIC(g1,g2)
> ##D VGD(g1,g2)
> ##D # using gamlssMLpred to fit the models
> ##D p1 <- gamlssMLpred(y, rand=rand, family=NBI)
> ##D p2 <- gamlssMLpred(Y, family=NBI, newdata=YVal)
> ##D # AIC and VGD should produce identical results
> ##D AIC(p1,p2,g1,g2)
> ##D VGD(p1,p2, g1,g2)
> ##D # the fitted residuals
> ##D wp(p1, ylim.all=1)
> ##D # the prediction residuals 
> ##D wp(resid=p1$residVal, ylim.all=.5)
> ##D #-------------------------------------------------------------
> ##D # chossing between distributions
> ##D p2<-gamlssMLpred(y, rand=rand, family=PO)
> ##D p3<-gamlssMLpred(y, rand=rand, family=PIG)
> ##D p4<-gamlssMLpred(y, rand=rand, family=BNB)
> ##D AIC(p1, p2, p3, p4)
> ##D VGD(p1, p2, p3, p4)
> ##D #--------------------------------------------------
> ## End(Not run)
>  
> 
> 
> cleanEx()
> nameEx("gamlssVGD")
> ### * gamlssVGD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlssVGD
> ### Title: A Set of Functions for selecting Models using Validation or Test
> ###   Data Sets and Cross Validation
> ### Aliases: gamlssVGD VGD getTGD TGD gamlssCV CV drop1TGD add1TGD stepTGD
> ###   stepTGDAll.A
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> # generate the random split of the data
> rand <- sample(2, 610, replace=TRUE, prob=c(0.6,0.4))
> # the proportions in the sample
> table(rand)/610
rand
       1        2 
0.604918 0.395082 
> olddata<-abdom[rand==1,] # training data
> newdata<-abdom[rand==2,] # validation data
> #------------------------------------------------------------------------------
> #  gamlssVGD
> #-------------------------------------------------------------------------------
> # Using rand
> v1 <- gamlssVGD(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=abdom, family=NO, 
+               rand=rand)
> v2 <- gamlssVGD(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=abdom, family=LO, 
+               rand=rand)
> v3 <- gamlssVGD(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=abdom, family=TF, 
+               rand=rand)
> VGD(v1,v2,v3)
    Pred.GD
v1 1924.252
v3 1927.943
v2 1928.431
> #-------------------------------------------------------------------------------
> ## Not run: 
> ##D #-------------------------------------------------------------------------------
> ##D # using two data set
> ##D v11 <- gamlssVGD(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=olddata, 
> ##D                   family=NO, newdata=newdata)
> ##D v12 <- gamlssVGD(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=olddata, 
> ##D                  family=LO, newdata=newdata)
> ##D v13 <- gamlssVGD(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=olddata, 
> ##D                  family=TF, newdata=newdata)
> ##D VGD(v11,v12,v13)
> ##D #-------------------------------------------------------------------------------
> ##D # function getTGD
> ##D #-------------------------------------------------------------------------------
> ##D # fit gamlss models first
> ##D g1 <- gamlss(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=olddata, family=NO)
> ##D g2 <- gamlss(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=olddata, family=LO)
> ##D g3 <- gamlss(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=olddata, family=TF)
> ##D # and then use 
> ##D gg1 <-getTGD(g1, newdata=newdata)
> ##D gg2 <-getTGD(g2, newdata=newdata)
> ##D gg3 <-getTGD(g3, newdata=newdata)
> ##D 
> ##D TGD(gg1,gg2,gg3)
> ##D #-------------------------------------------------------------------------------
> ##D #-------------------------------------------------------------------------------
> ##D # function gamlssCV
> ##D #-------------------------------------------------------------------------------
> ##D set.seed(123)
> ##D rand1 <- sample (10 , 610, replace=TRUE)
> ##D g1 <- gamlssCV(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=abdom, family=NO, 
> ##D                rand=rand1)
> ##D g2 <- gamlssCV(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=abdom, family=LO, 
> ##D                rand=rand1)
> ##D g3 <- gamlssCV(y~pb(x,df=2),sigma.formula=~pb(x,df=1), data=abdom, family=TF, 
> ##D                rand=rand1)
> ##D CV(g1,g2,g3)
> ##D CV(g1)
> ##D # using parallel 
> ##D set.seed(123)
> ##D rand1 <- sample (10 , 610, replace=TRUE)
> ##D nC <- detectCores()
> ##D 
> ##D system.time(g21 <- gamlssCV(y~pb(x,df=2), sigma.formula=~pb(x,df=1), data=abdom,
> ##D              family=NO, rand=rand1,parallel = "no", ncpus = nC ))
> ##D 
> ##D system.time(g22 <- gamlssCV(y~pb(x,df=2), sigma.formula=~pb(x,df=1), data=abdom,
> ##D              family=LO, rand=rand1,parallel = "multicore", ncpus = nC ))
> ##D 
> ##D system.time(g23 <- gamlssCV(y~pb(x,df=2), sigma.formula=~pb(x,df=1), data=abdom,
> ##D              family=TF, rand=rand1,parallel = "snow", ncpus = nC ))
> ##D 
> ##D 
> ##D CV(g21,g22,g23)
> ##D #-------------------------------------------------------------------------------
> ##D # functions add1TGD() drop1TGD() and stepTGD()
> ##D #-------------------------------------------------------------------------------
> ##D # the data
> ##D data(rent)
> ##D rand <- sample(2, dim(rent)[1], replace=TRUE, prob=c(0.6,0.4))
> ##D # the proportions in the sample
> ##D table(rand)/dim(rent)[1]
> ##D oldrent<-rent[rand==1,] # training set
> ##D newrent<-rent[rand==2,] # validation set
> ##D 
> ##D # null model
> ##D v0 <- gamlss(R~1, data=oldrent, family=GA)
> ##D # complete model
> ##D v1 <- gamlss(R~pb(Fl)+pb(A)+H+loc, sigma.fo=~pb(Fl)+pb(A)+H+loc, 
> ##D              data=oldrent, family=GA)
> ##D 
> ##D # drop1TGDP
> ##D system.time(v3<- drop1TGD(v1, newdata=newrent,  parallel="no"))
> ##D system.time(v4<- drop1TGD(v1, newdata=newrent,  parallel="multicore", 
> ##D                           ncpus=nC) )
> ##D system.time(v5<- drop1TGD(v1, newdata=newrent,  parallel="snow", ncpus=nC))
> ##D cbind(v3,v4,v5)
> ##D 
> ##D # add1TGDP
> ##D system.time(d3<- add1TGD(v0,scope=~pb(Fl)+pb(A)+H+loc, newdata=newrent,  
> ##D                        parallel="no"))
> ##D system.time(d4<- add1TGD(v0,scope=~pb(Fl)+pb(A)+H+loc, newdata=newrent,  
> ##D                         parallel="multicore", ncpus=nC) )
> ##D system.time(d5<- add1TGD(v0, scope=~pb(Fl)+pb(A)+H+loc,newdata=newrent,  
> ##D                         parallel="snow", ncpus=nC))
> ##D 
> ##D # stepTGD
> ##D system.time(d6<- stepTGD(v0, scope=~pb(Fl)+pb(A)+H+loc,newdata=newrent))
> ##D system.time(d7<- stepTGD(v0, scope=~pb(Fl)+pb(A)+H+loc,newdata=newrent,
> ##D                          parallel="multicore", ncpus=nC))
> ##D system.time(d8<- stepTGD(v0, scope=~pb(Fl)+pb(A)+H+loc,newdata=newrent,
> ##D                          parallel="snow", ncpus=nC))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gen.likelihood")
> ### * gen.likelihood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gen.likelihood
> ### Title: A function to generate the likelihood function from a GAMLSS
> ###   object
> ### Aliases: gen.likelihood
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> m1 <- gamlss(y~x+qrt, data=aids, family=NBI)
GAMLSS-RS iteration 1: Global Deviance = 492.7119 
GAMLSS-RS iteration 2: Global Deviance = 492.6375 
GAMLSS-RS iteration 3: Global Deviance = 492.6373 
> logL<-gen.likelihood(m1)
> logL()
[1] 246.3187
> logLik(m1)
'log Lik.' -246.3187 (df=6)
> 
> 
> 
> cleanEx()
> nameEx("getPEF")
> ### * getPEF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPEF
> ### Title: Getting the partial effect function from a continuous term in a
> ###   GAMLSS model
> ### Aliases: getPEF
> ### Keywords: regression
> 
> ### ** Examples
> 
> m1 <- gamlss(R~pb(Fl)+pb(A), data=rent, family=GA)
GAMLSS-RS iteration 1: Global Deviance = 27923.61 
GAMLSS-RS iteration 2: Global Deviance = 27923.61 
> # getting the Partial Efect function
> pef <- getPEF(obj=m1,term="A", plot=TRUE)
> # the value at 1980
> pef(1980)
[1] 959.7968
> # the first derivative at 1980
> pef(1980, deriv=1)
[1] 15.78676
> # the second derivative at 1980
> pef(1980, deriv=2)
[1] 0.5825647
> # plotting the first derivative
> curve(pef(x, deriv=1), 1900,2000)
> 
> 
> 
> cleanEx()
> nameEx("getQuantile")
> ### * getQuantile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getQuantile
> ### Title: Getting the partial quantile function for a term
> ### Aliases: getQuantile
> ### Keywords: Statistical Models regression
> 
> ### ** Examples
> 
> library(gamlss)
> data(rent)
> m1 <- gamlss(R~pb(Fl)+pb(A)+B+loc, data=rent, family=GA)
GAMLSS-RS iteration 1: Global Deviance = 27794.29 
GAMLSS-RS iteration 2: Global Deviance = 27794.35 
GAMLSS-RS iteration 3: Global Deviance = 27794.35 
GAMLSS-RS iteration 4: Global Deviance = 27794.35 
> FF<-getQuantile(m1, quantile=0.9, term="A", plot=TRUE)
> FF(1960)
[1] 1124.951
> FF(1060, deriv=1)
[1] 2438.436
> FF(1060, deriv=2)
[1] -5.880155
> ## Not run: 
> ##D # plotting partial quantile
> ##D # .05, 0.25, 0.5, 0.75, 0.95
> ##D # at the default values
> ##D # Fl = median(Fl), B=0, and loc=2
> ##D plot(R~A, data=rent,  col="lightgray", pch=20)
> ##D for (i in c(.05, 0.25, 0.5, 0.75, 0.95))
> ##D {
> ##D   Qua <- getQuantile(m1, quantile=i,term="A")
> ##D   curve(Qua, 1900, 1985,  lwd=1, lty=1, add=T)
> ##D }
> ##D # plotting at values Fl=60, B=1, and loc=1.
> ##D for (i in c(.05, 0.25, 0.5, 0.75, 0.95))
> ##D {
> ##D   Qua <- getQuantile(m1, quantile=i,term="A", 
> ##D             fixed.at=list(Fl=60, B=1, loc=1))
> ##D   curve(Qua, 1900, 1985,  lwd=1, lty=2, col="red", add=T)
> ##D }
> ##D # plotting at Fl=60, B=1 and loc=1.
> ##D for (i in c(.05, 0.25, 0.5, 0.75, 0.95))
> ##D {
> ##D   Qua <- getQuantile(m1, quantile=i,term="A", 
> ##D            fixed.at=list(Fl=120, B=0, loc=3))
> ##D   curve(Qua, 1900, 1985,  lwd=1, lty=3, col="blue", add=T)
> ##D }
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getSmo")
> ### * getSmo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getSmo
> ### Title: Extracting Smoother information from a GAMLSS fitted object
> ### Aliases: getSmo
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(usair)
> t1<-gamlss(y~x1+pb(x5)+pb(x6), data=usair, family=GA)
GAMLSS-RS iteration 1: Global Deviance = 316.8365 
GAMLSS-RS iteration 2: Global Deviance = 316.8308 
GAMLSS-RS iteration 3: Global Deviance = 316.8303 
> # get the value for lambda for the second fitted term in mu
> getSmo(t1, parameter="mu", 2)$lambda
[1] 1e+07
>   
> 
> 
> cleanEx()
> nameEx("glim.control")
> ### * glim.control
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glim.control
> ### Title: Auxiliary for Controlling the inner algorithm in a GAMLSS
> ###   Fitting
> ### Aliases: glim.control
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> con<-glim.control(glm.trace=TRUE)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids, i.control=con) # 
GLIM iteration 1 for mu: Global Deviance = 785.86 
GLIM iteration 2 for mu: Global Deviance = 473.255 
GLIM iteration 3 for mu: Global Deviance = 419.3565 
GLIM iteration 4 for mu: Global Deviance = 416.8088 
GLIM iteration 5 for mu: Global Deviance = 416.8014 
GLIM iteration 6 for mu: Global Deviance = 416.8014 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GLIM iteration 1 for mu: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> rm(h,con)
> 
> 
> 
> 
> cleanEx()
> nameEx("histDist")
> ### * histDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: histDist
> ### Title: This function plots the histogram and a fitted (GAMLSS family)
> ###   distribution to a variable
> ### Aliases: histDist
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> histDist(y,family="NO", data=abdom)

Family:  c("NO", "Normal") 
Fitting method: "nlminb" 

Call:  gamlssML(formula = y, family = "NO", data = abdom) 

Mu Coefficients:
[1]  226.7
Sigma Coefficients:
[1]  4.484

 Degrees of Freedom for the fit: 2 Residual Deg. of Freedom   608 
Global Deviance:     7201.42 
            AIC:     7205.42 
            SBC:     7214.24 
> # use the ylim 
> histDist(y,family="NO", ylim=c(0,0.005), data=abdom)

Family:  c("NO", "Normal") 
Fitting method: "nlminb" 

Call:  gamlssML(formula = y, family = "NO", data = abdom) 

Mu Coefficients:
[1]  226.7
Sigma Coefficients:
[1]  4.484

 Degrees of Freedom for the fit: 2 Residual Deg. of Freedom   608 
Global Deviance:     7201.42 
            AIC:     7205.42 
            SBC:     7214.24 
> # bad fit use PE
> histDist(y,family="PE",ymax=0.005, data=abdom, line.col="blue")

Family:  c("PE", "Power Exponential") 
Fitting method: "nlminb" 

Call:  gamlssML(formula = y, family = "PE", data = abdom) 

Mu Coefficients:
[1]  225.4
Sigma Coefficients:
[1]  4.494
Nu Coefficients:
[1]  2.325

 Degrees of Freedom for the fit: 3 Residual Deg. of Freedom   607 
Global Deviance:     7093 
            AIC:     7099 
            SBC:     7112.24 
> # discere data counts 
> #  Hand at al. p150  Leptinotarsa decemlineata
> y <- c(0,1,2,3,4,6,7,8,10,11)
> freq <- c(33,12,5,6,5,2,2,2,1,2) 
> histDist(y, "NBI", freq=freq)

Family:  c("NBI", "Negative Binomial type I") 
Fitting method: "nlminb" 

Call:  gamlssML(formula = y, family = "NBI", weights = freq) 

Mu Coefficients:
[1]  0.6493
Sigma Coefficients:
[1]  0.7397

 Degrees of Freedom for the fit: 2 Residual Deg. of Freedom   8 
Global Deviance:     255.071 
            AIC:     259.071 
            SBC:     259.676 
> # the same as 
> histDist(rep(y,freq), "NBI")

Family:  c("NBI", "Negative Binomial type I") 
Fitting method: "nlminb" 

Call:  gamlssML(formula = rep(y, freq), family = "NBI") 

Mu Coefficients:
[1]  0.6493
Sigma Coefficients:
[1]  0.7397

 Degrees of Freedom for the fit: 2 Residual Deg. of Freedom   68 
Global Deviance:     255.071 
            AIC:     259.071 
            SBC:     263.568 
> 
> 
> 
> cleanEx()
> nameEx("histSmo")
> ### * histSmo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: histSmo
> ### Title: Density estimation using the Poisson trick
> ### Aliases: histSmo histSmoC histSmoO histSmoP
> ### Keywords: distribution
> 
> ### ** Examples
> 
> # creating data from Pareto 2 distribution
> set.seed(153)
> Y <- rPARETO2(1000) 
> ## Not run: 
> ##D # getting the density 
> ##D histSmo(Y, lower=0, plot=TRUE)
> ##D # more  breaks a bit slower
> ##D histSmo(Y, breaks=200, lower=0, plot=TRUE)
> ##D # quick fit using lambda
> ##D histSmoO(Y, lambda=1, breaks=200, lower=0, plot=TRUE)
> ##D # or 
> ##D histSmo(Y, lambda=1, breaks=200, lower=0, plot=TRUE)
> ##D # quick fit using df
> ##D histSmoC(Y, df=15, breaks=200, lower=0,plot=TRUE)
> ##D # or 
> ##D histSmo(Y, df=15, breaks=200, lower=0)
> ##D # saving results
> ##D m1<- histSmo(Y, lower=0, plot=T)
> ##D plot(m1)
> ##D plot(m1, "cdf")
> ##D plot(m1, "invcdf")
> ##D # using with a histogram
> ##D library(MASS)
> ##D truehist(Y)
> ##D lines(m1, col="red")
> ##D #---------------------------
> ##D # now gererate from SHASH distribution
> ##D YY <- rSHASH(1000)
> ##D m1<- histSmo(YY)
> ##D # calculate Pr(YY>10)
> ##D 1-m1$cdf(10)
> ##D # calculate Pr(-10<YY<10)
> ##D 1-(1-m1$cdf(10))-m1$cdf(-10)
> ##D #---------------------------
> ##D #   from discrete distribution
> ##D YYY <- rNBI(1000, mu=5, sigma=4)
> ##D histSmo(YYY, discrete=TRUE, plot=T)
> ##D #
> ##D YYY <- rPO(1000, mu=5)
> ##D histSmo(YYY, discrete=TRUE, plot=T)
> ##D #
> ##D YYY <- rNBI(1000, mu=5, sigma=.1)
> ##D histSmo(YYY, discrete=TRUE, plot=T)
> ##D # genarating from beta distribution
> ##D YYY <- rBE(1000, mu=.1, sigma=.3)
> ##D histSmo(YYY, lower=0, upper=1, plot=T)
> ##D # from trucated data
> ##D Y <- with(stylo, rep(word,freq))
> ##D histSmo(Y, lower=1, discrete=TRUE, plot=T)
> ##D histSmo(Y, lower=1, discrete=TRUE, plot=T, type="prob")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("lms")
> ### * lms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lms
> ### Title: A function to fit LMS curves for centile estimation
> ### Aliases: lms
> ### Keywords: regression
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(abdom)
> ##D m1 <- lms(y,x , data=abdom, n.cyc=30)
> ##D m2 <- lms(y,x ,data=abdom, method.pb="GAIC", k=log(610))
> ##D # this example takes time
> ##D data(db)
> ##D m1 <- lms(y=head, x=age, data=db, trans.x=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("lo")
> ### * lo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lo
> ### Title: Specify a loess fit in a GAMLSS formula
> ### Aliases: lo lo.control vis.lo
> ### Keywords: regression
> 
> ### ** Examples
> 
> # fitting a loess curve with span=0.4 plus the a quarterly  effect 
> aids1<-gamlss(y~lo(~x,span=0.4)+qrt,data=aids,family=PO) # 
GAMLSS-RS iteration 1: Global Deviance = 375.5136 
GAMLSS-RS iteration 2: Global Deviance = 375.5136 
> term.plot(aids1, page=1)
> ## Not run: 
> ##D r1 <- gamlss(R~lo(~Fl)+lo(~A), data=rent, family=GA)
> ##D  term.plot(r1, pages=1)
> ##D  vis.lo(getSmo(r1, which=1), partial=T)
> ##D r2 <- gamlss(R~lo(~Fl+A), data=rent, family=GA)
> ##D  term.plot(r2, pages=1)
> ##D  vis.lo(getSmo(r2, which=1))
> ##D  vis.lo(getSmo(r2, which=1), se=1.97)
> ##D  vis.lo(getSmo(r2, which=1), partial.res=T)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("loglogSurv")
> ### * loglogSurv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loglogSurv
> ### Title: Survival function plots for checking the tail behaviour of the
> ###   data
> ### Aliases: loglogSurv loglogSurv1 loglogSurv2 loglogSurv3 logSurv
> ###   logSurv0 ECDF loglogplot loglogplot0
> ### Keywords: distribution
> 
> ### ** Examples
> 
> data(film90)
> y <- film90$lborev1
> op<-par(mfrow=c(3,1))
> loglogSurv1(y)
coefficients -27.68429 27.28962 
error sum of squares 0.1028886 
> loglogSurv2(y)
coefficients -26.027 9.447261 
error sum of squares 0.0929632 
> loglogSurv3(y)
coefficients -8.179461 0.5252454 
error sum of squares 0.0749298 
> par(op)
> loglogSurv(y)
Linear regression coefficients 
          Intercept      slope  Error SS
type I   -27.684292  27.289616   0.10289
type II  -26.026996   9.447261   0.09296
type III  -8.179461   0.525245   0.07493
Estimates for parameters k 
          k:2,4,6 k:1,3,5
type I   9.48e-13   27.29
type II  4.97e-12    9.45
type III 2.80e-04    0.53

Family:  c("NO", "Normal") 
Fitting method: RS() 

Call:  gamlss(formula = newY ~ x3, trace = FALSE) 

Mu Coefficients:
(Intercept)           x3  
    -8.1795       0.5252  
Sigma Coefficients:
(Intercept)  
     -4.295  

 Degrees of Freedom for the fit: 3 Residual Deg. of Freedom   400 
Global Deviance:     -2318.16 
            AIC:     -2312.16 
            SBC:     -2300.17 
> 
> logSurv(y)
> 
> loglogplot(y)
> 
> plot(ECDF(y), main="ECDF")
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("lpred")
> ### * lpred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lpred
> ### Title: Extract Linear Predictor Values and Standard Errors For A GAMLSS
> ###   Model
> ### Aliases: lpred lp
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> mod<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> mod.t <- lpred(mod, type = "terms", terms= "qrt")
> mod.t
           qrt
1   0.06406873
2  -0.09231187
3   0.07405488
4  -0.05163616
5   0.06406873
6  -0.09231187
7   0.07405488
8  -0.05163616
9   0.06406873
10 -0.09231187
11  0.07405488
12 -0.05163616
13  0.06406873
14 -0.09231187
15  0.07405488
16 -0.05163616
17  0.06406873
18 -0.09231187
19  0.07405488
20 -0.05163616
21  0.06406873
22 -0.09231187
23  0.07405488
24 -0.05163616
25  0.06406873
26 -0.09231187
27  0.07405488
28 -0.05163616
29  0.06406873
30 -0.09231187
31  0.07405488
32 -0.05163616
33  0.06406873
34 -0.09231187
35  0.07405488
36 -0.05163616
37  0.06406873
38 -0.09231187
39  0.07405488
40 -0.05163616
41  0.06406873
42 -0.09231187
43  0.07405488
44 -0.05163616
45  0.06406873
attr(,"constant")
[1] 4.750404
> mod.lp <- lp(mod)
> mod.lp 
       1        2        3        4        5        6        7        8 
1.359957 1.529298 2.004478 2.171183 2.563356 2.668003 3.080448 3.186374 
       9       10       11       12       13       14       15       16 
3.519725 3.567508 3.925046 3.978022 4.260380 4.259128 4.569587 4.577442 
      17       18       19       20       21       22       23       24 
4.816636 4.774177 5.045386 5.015949 5.219807 5.143970 5.383758 5.324857 
      25       26       27       28       29       30       31       32 
5.501209 5.399822 5.616018 5.535482 5.692156 5.573048 5.773481 5.679138 
      33       34       35       36       37       38       39       40 
5.823963 5.694963 5.887461 5.787141 5.927945 5.796882 5.989274 5.890805 
      41       42       43       44       45 
6.035417 5.910120 6.110234 6.021444 6.177694 
> rm(mod, mod.t,mod.lp)
> 
> 
> 
> cleanEx()
> nameEx("model.frame.gamlss")
> ### * model.frame.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model.frame.gamlss
> ### Title: Extract a model.frame, a model matrix or terms from a GAMLSS
> ###   object for a given distributional parameter
> ### Aliases: model.frame.gamlss terms.gamlss model.matrix.gamlss
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> mod<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> model.frame(mod)
     y  poly(x, 3).1  poly(x, 3).2  poly(x, 3).3 qrt
1    2 -2.525235e-01  3.118254e-01 -3.451275e-01   1
2    6 -2.410452e-01  2.693037e-01 -2.510018e-01   2
3   10 -2.295668e-01  2.287598e-01 -1.678210e-01   3
4    8 -2.180885e-01  1.901937e-01 -9.506380e-02   4
5   12 -2.066101e-01  1.536053e-01 -3.220912e-02   1
6    9 -1.951318e-01  1.189947e-01  2.126427e-02   2
7   28 -1.836535e-01  8.636179e-02  6.587755e-02   3
8   28 -1.721751e-01  5.570665e-02  1.021519e-01   4
9   35 -1.606968e-01  2.702926e-02  1.306085e-01   1
10  32 -1.492184e-01  3.296251e-04  1.517685e-01   2
11  46 -1.377401e-01 -2.439226e-02  1.661532e-01   3
12  47 -1.262617e-01 -4.713640e-02  1.742836e-01   4
13  50 -1.147834e-01 -6.790278e-02  1.766811e-01   1
14  61 -1.033051e-01 -8.669141e-02  1.738667e-01   2
15  99 -9.182673e-02 -1.035023e-01  1.663616e-01   3
16  95 -8.034839e-02 -1.183354e-01  1.546871e-01   4
17 150 -6.887004e-02 -1.311908e-01  1.393644e-01   1
18 143 -5.739170e-02 -1.420684e-01  1.209145e-01   2
19 197 -4.591336e-02 -1.509683e-01  9.985868e-02   3
20 159 -3.443502e-02 -1.578904e-01  7.671815e-02   4
21 204 -2.295668e-02 -1.628348e-01  5.201407e-02   1
22 168 -1.147834e-02 -1.658014e-01  2.626763e-02   2
23 196 -2.075173e-18 -1.667903e-01 -4.845988e-17   3
24 194  1.147834e-02 -1.658014e-01 -2.626763e-02   4
25 210  2.295668e-02 -1.628348e-01 -5.201407e-02   1
26 180  3.443502e-02 -1.578904e-01 -7.671815e-02   2
27 277  4.591336e-02 -1.509683e-01 -9.985868e-02   3
28 181  5.739170e-02 -1.420684e-01 -1.209145e-01   4
29 327  6.887004e-02 -1.311908e-01 -1.393644e-01   1
30 276  8.034839e-02 -1.183354e-01 -1.546871e-01   2
31 365  9.182673e-02 -1.035023e-01 -1.663616e-01   3
32 300  1.033051e-01 -8.669141e-02 -1.738667e-01   4
33 356  1.147834e-01 -6.790278e-02 -1.766811e-01   1
34 304  1.262617e-01 -4.713640e-02 -1.742836e-01   2
35 307  1.377401e-01 -2.439226e-02 -1.661532e-01   3
36 386  1.492184e-01  3.296251e-04 -1.517685e-01   4
37 331  1.606968e-01  2.702926e-02 -1.306085e-01   1
38 358  1.721751e-01  5.570665e-02 -1.021519e-01   2
39 415  1.836535e-01  8.636179e-02 -6.587755e-02   3
40 374  1.951318e-01  1.189947e-01 -2.126427e-02   4
41 412  2.066101e-01  1.536053e-01  3.220912e-02   1
42 358  2.180885e-01  1.901937e-01  9.506380e-02   2
43 416  2.295668e-01  2.287598e-01  1.678210e-01   3
44 414  2.410452e-01  2.693037e-01  2.510018e-01   4
45 496  2.525235e-01  3.118254e-01  3.451275e-01   1
> model.matrix(mod)
   (Intercept)   poly(x, 3)1   poly(x, 3)2   poly(x, 3)3 qrt2 qrt3 qrt4
1            1 -2.525235e-01  0.3118253845 -3.451275e-01    0    0    0
2            1 -2.410452e-01  0.2693037411 -2.510018e-01    1    0    0
3            1 -2.295668e-01  0.2287598487 -1.678210e-01    0    1    0
4            1 -2.180885e-01  0.1901937070 -9.506380e-02    0    0    1
5            1 -2.066101e-01  0.1536053162 -3.220912e-02    0    0    0
6            1 -1.951318e-01  0.1189946763  2.126427e-02    1    0    0
7            1 -1.836535e-01  0.0863617872  6.587755e-02    0    1    0
8            1 -1.721751e-01  0.0557066490  1.021519e-01    0    0    1
9            1 -1.606968e-01  0.0270292617  1.306085e-01    0    0    0
10           1 -1.492184e-01  0.0003296251  1.517685e-01    1    0    0
11           1 -1.377401e-01 -0.0243922605  1.661532e-01    0    1    0
12           1 -1.262617e-01 -0.0471363953  1.742836e-01    0    0    1
13           1 -1.147834e-01 -0.0679027793  1.766811e-01    0    0    0
14           1 -1.033051e-01 -0.0866914124  1.738667e-01    1    0    0
15           1 -9.182673e-02 -0.1035022946  1.663616e-01    0    1    0
16           1 -8.034839e-02 -0.1183354260  1.546871e-01    0    0    1
17           1 -6.887004e-02 -0.1311908066  1.393644e-01    0    0    0
18           1 -5.739170e-02 -0.1420684363  1.209145e-01    1    0    0
19           1 -4.591336e-02 -0.1509683151  9.985868e-02    0    1    0
20           1 -3.443502e-02 -0.1578904431  7.671815e-02    0    0    1
21           1 -2.295668e-02 -0.1628348202  5.201407e-02    0    0    0
22           1 -1.147834e-02 -0.1658014465  2.626763e-02    1    0    0
23           1 -2.075173e-18 -0.1667903219 -4.845988e-17    0    1    0
24           1  1.147834e-02 -0.1658014465 -2.626763e-02    0    0    1
25           1  2.295668e-02 -0.1628348202 -5.201407e-02    0    0    0
26           1  3.443502e-02 -0.1578904431 -7.671815e-02    1    0    0
27           1  4.591336e-02 -0.1509683151 -9.985868e-02    0    1    0
28           1  5.739170e-02 -0.1420684363 -1.209145e-01    0    0    1
29           1  6.887004e-02 -0.1311908066 -1.393644e-01    0    0    0
30           1  8.034839e-02 -0.1183354260 -1.546871e-01    1    0    0
31           1  9.182673e-02 -0.1035022946 -1.663616e-01    0    1    0
32           1  1.033051e-01 -0.0866914124 -1.738667e-01    0    0    1
33           1  1.147834e-01 -0.0679027793 -1.766811e-01    0    0    0
34           1  1.262617e-01 -0.0471363953 -1.742836e-01    1    0    0
35           1  1.377401e-01 -0.0243922605 -1.661532e-01    0    1    0
36           1  1.492184e-01  0.0003296251 -1.517685e-01    0    0    1
37           1  1.606968e-01  0.0270292617 -1.306085e-01    0    0    0
38           1  1.721751e-01  0.0557066490 -1.021519e-01    1    0    0
39           1  1.836535e-01  0.0863617872 -6.587755e-02    0    1    0
40           1  1.951318e-01  0.1189946763 -2.126427e-02    0    0    1
41           1  2.066101e-01  0.1536053162  3.220912e-02    0    0    0
42           1  2.180885e-01  0.1901937070  9.506380e-02    1    0    0
43           1  2.295668e-01  0.2287598487  1.678210e-01    0    1    0
44           1  2.410452e-01  0.2693037411  2.510018e-01    0    0    1
45           1  2.525235e-01  0.3118253845  3.451275e-01    0    0    0
attr(,"assign")
[1] 0 1 1 1 2 2 2
attr(,"contrasts")
attr(,"contrasts")$qrt
[1] "contr.treatment"

> terms(mod, "mu")
y ~ poly(x, 3) + qrt
attr(,"variables")
list(y, poly(x, 3), qrt)
attr(,"factors")
           poly(x, 3) qrt
y                   0   0
poly(x, 3)          1   0
qrt                 0   1
attr(,"term.labels")
[1] "poly(x, 3)" "qrt"       
attr(,"specials")
attr(,"specials")$cs
NULL

attr(,"specials")$scs
NULL

attr(,"specials")$ps
NULL

attr(,"specials")$pb
NULL

attr(,"specials")$cy
NULL

attr(,"specials")$tp
NULL

attr(,"specials")$pvc
NULL

attr(,"specials")$pbm
NULL

attr(,"specials")$pbj
NULL

attr(,"specials")$pbo
NULL

attr(,"specials")$pbz
NULL

attr(,"specials")$pbc
NULL

attr(,"specials")$pbts
NULL

attr(,"specials")$pbp
NULL

attr(,"specials")$pbf
NULL

attr(,"specials")$pcat
NULL

attr(,"specials")$pba
NULL

attr(,"specials")$pbq
NULL

attr(,"specials")$gmrf
NULL

attr(,"specials")$mrfa
NULL

attr(,"specials")$mrf
NULL

attr(,"specials")$so
NULL

attr(,"specials")$SOP
NULL

attr(,"specials")$krig
NULL

attr(,"specials")$lo
NULL

attr(,"specials")$random
NULL

attr(,"specials")$re
NULL

attr(,"specials")$re4
NULL

attr(,"specials")$fp
NULL

attr(,"specials")$pp
NULL

attr(,"specials")$nl
NULL

attr(,"specials")$ri
NULL

attr(,"specials")$boost
NULL

attr(,"specials")$fk
NULL

attr(,"specials")$own
NULL

attr(,"specials")$test
NULL

attr(,"specials")$test0
NULL

attr(,"specials")$test1
NULL

attr(,"specials")$arma
NULL

attr(,"specials")$rw
NULL

attr(,"specials")$ar
NULL

attr(,"specials")$seas
NULL

attr(,"specials")$srw
NULL

attr(,"specials")$sar
NULL

attr(,"specials")$la
NULL

attr(,"specials")$plag
NULL

attr(,"specials")$tr
NULL

attr(,"specials")$ga
NULL

attr(,"specials")$ba
NULL

attr(,"specials")$mm
NULL

attr(,"specials")$nn
NULL

attr(,"specials")$sv
NULL

attr(,"specials")$ma
NULL

attr(,"specials")$pcr
NULL

attr(,"specials")$pc
NULL

attr(,"specials")$h2o
NULL

attr(,"specials")$pa
NULL

attr(,"specials")$gnet
NULL

attr(,"specials")$lrs
NULL

attr(,"specials")$rf1
NULL

attr(,"specials")$rf2
NULL

attr(,"specials")$gbo
NULL

attr(,"specials")$gsel
NULL

attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(y, poly(x, 3, coefs = list(alpha = c(23, 23, 23), norm2 = c(1, 
45, 7590, 1022626, 132532329.6))), qrt)
attr(,"dataClasses")
          y  poly(x, 3)         qrt 
  "numeric" "nmatrix.3"    "factor" 
> rm(mod)
> 
> 
> 
> cleanEx()
> nameEx("par.plot")
> ### * par.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: par.plot
> ### Title: A function to plot parallel plot for repeated measurement data
> ### Aliases: par.plot
> ### Keywords: regression
> 
> ### ** Examples
> 
> 
> library(nlme)
> data(Orthodont)
> par.plot(distance~age,data=Orthodont,subject=Subject)
> par.plot(distance~age|Sex,data=Orthodont,subject=Subject)
> par.plot(distance~age|Subject,data=Orthodont,subject=Subject,show.given=FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("pcat")
> ### * pcat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pcat
> ### Title: Reduction for the Levels of a Factor.
> ### Aliases: pcat gamlss.pcat plotLambda plotDF
> ### Keywords: regeression
> 
> ### ** Examples
> 
> # Simulate data 1
>     n <- 10  # number of levels 
>     m <- 200 # number of observations  
> set.seed(2016)
> level <-  as.factor(floor(runif(m) * n) + 1)
>   a0  <-  rnorm(n)
> sigma <-  0.4
>    mu <-  a0[level]
>    y <-  mu + sigma * rnorm(m)
> plot(y~level)
> points(1:10,a0, col="red")
>  da1 <- data.frame(y, level)
> #------------------
>   mn <- gamlss(y~1,data=da1 ) # null model 
GAMLSS-RS iteration 1: Global Deviance = 665.6181 
GAMLSS-RS iteration 2: Global Deviance = 665.6181 
>   ms <- gamlss(y~level-1, data=da1) # saturated model 
GAMLSS-RS iteration 1: Global Deviance = 217.2095 
GAMLSS-RS iteration 2: Global Deviance = 217.2095 
>   m1 <- gamlss(y~pcat(level), data=da1) # calculating lambda ML
GAMLSS-RS iteration 1: Global Deviance = 217.7802 
GAMLSS-RS iteration 2: Global Deviance = 217.7796 
> AIC(mn, ms, m1)
          df      AIC
m1  9.453897 236.6874
ms 11.000000 239.2095
mn  2.000000 669.6181
> ## Not run: 
> ##D m11 <- gamlss(y~pcat(level, method="GAIC", k=log(200)), data=da1) # GAIC
> ##D AIC(mn, ms, m1, m11) 
> ##D #gettng the fitted object -----------------------------------------------------
> ##D getSmo(m1)
> ##D coef(getSmo(m1))
> ##D fitted(getSmo(m1))[1:10]
> ##D plot(getSmo(m1)) # 
> ##D # After the fit a new factor is created  this factor has the reduced levels
> ##D  levels(getSmo(m1)$factor)
> ##D # -----------------------------------------------------------------------------
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pdf.plot")
> ### * pdf.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdf.plot
> ### Title: Plots Probability Distribution Functions for GAMLSS Family
> ### Aliases: pdf.plot
> ### Keywords: regression
> 
> ### ** Examples
> 
> pdf.plot(family=BCT, min=1, max=20, mu=10, sigma=0.15, nu=-1, tau=c(4,10,20,40) )
> ## Not run: 
> ##D # now using an gamlss object
> ##D data(abdom)
> ##D h<-gamlss(y~pb(x), sigma.formula=~pb(x), family=BCT, data=abdom) # fits 
> ##D pdf.plot(obj=h , obs=c(23,67), min=50, max=150)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.gamlss")
> ### * plot.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.gamlss
> ### Title: Plot Residual Diagnostics for an GAMLSS Object
> ### Aliases: plot.gamlss
> ### Keywords: regression
> 
> ### ** Examples
> 
> 
> data(aids)
> a<-gamlss(y~pb(x)+qrt,family=PO,data=aids)
GAMLSS-RS iteration 1: Global Deviance = 387.1462 
GAMLSS-RS iteration 2: Global Deviance = 387.1547 
GAMLSS-RS iteration 3: Global Deviance = 387.1547 
> plot(a)
******************************************************************
	 Summary of the Randomised Quantile Residuals
                           mean   =  -0.02975977 
                       variance   =  2.077852 
               coef. of skewness  =  -0.5355072 
               coef. of kurtosis  =  3.230075 
Filliben correlation coefficient  =  0.9861299 
******************************************************************
> rm(a)
> 
> 
> 
> cleanEx()
> nameEx("plot.histSmo")
> ### * plot.histSmo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.histSmo
> ### Title: A Plotting Function for density estimator object histSmo
> ### Aliases: plot.histSmo
> ### Keywords: distribution
> 
> ### ** Examples
> 
> Y <- rPARETO2(1000) 
> m1<- histSmo(Y, lower=0, save=TRUE)
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
> plot(m1)
> plot(m1, "cdf")
> plot(m1, "invcdf")
> 
> 
> 
> cleanEx()
> nameEx("plot2way")
> ### * plot2way
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot2way
> ### Title: Function to plot two interaction in a GAMLSS model
> ### Aliases: plot2way
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> ti <- factor(c(rep(1,18),rep(2,27))) 
> m1 <- gamlss(y~x+qrt*ti, data=aids, family=NBI)
GAMLSS-RS iteration 1: Global Deviance = 488.3831 
GAMLSS-RS iteration 2: Global Deviance = 488.2742 
GAMLSS-RS iteration 3: Global Deviance = 488.2741 
> m2 <- gamlss(y~x+qrt*ti, data=aids, family=NO)
GAMLSS-RS iteration 1: Global Deviance = 424.2567 
GAMLSS-RS iteration 2: Global Deviance = 424.2567 
> plot2way(m1, c("qrt","ti")) 
> plot2way(m1, c("ti", "qrt"))
> 
> 
> 
> cleanEx()
> nameEx("predict.gamlss")
> ### * predict.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.gamlss
> ### Title: Extract Predictor Values and Standard Errors For New Data In a
> ###   GAMLSS Model
> ### Aliases: predict.gamlss predictAll
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> a<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> newaids<-data.frame(x=c(45,46,47), qrt=c(2,3,4))
> ap <- predict(a, newdata=newaids, type = "response")
Warning in predict.gamlss(a, newdata = newaids, type = "response") :
  There is a discrepancy  between the original and the re-fit 
 used to achieve 'safe' predictions 
 
> ap
[1] 412.1194 508.9537 471.5216
> # now getting all the parameters
> predictAll(a, newdata=newaids)
Warning in predict.gamlss(object, newdata = newdata, what = "mu", type = type,  :
  There is a discrepancy  between the original and the re-fit 
 used to achieve 'safe' predictions 
 
$mu
[1] 412.1194 508.9537 471.5216

attr(,"family")
[1] "PO"      "Poisson"
> rm(a, ap)
> data(abdom)
> # transform x 
> aa<-gamlss(y~cs(x^.5),data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4936.53 
GAMLSS-RS iteration 2: Global Deviance = 4936.53 
> # predict at old values
> predict(aa)[610]
[1] 371.3931
> # predict at new values 
> predict(aa,newdata=data.frame(x=42.43))
[1] 371.393
> # now transform x first 
> nx<-abdom$x^.5
> aaa<-gamlss(y~cs(nx),data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4936.53 
GAMLSS-RS iteration 2: Global Deviance = 4936.53 
> # create a new data frame 
> newd<-data.frame( abdom, nx=abdom$x^0.5)
> # predict at old values
> predict(aaa)[610]
[1] 371.3931
> # predict at new values 
> predict(aaa,newdata=data.frame(nx=42.43^.5), data=newd)
[1] 371.393
> 
> 
> 
> cleanEx()
> nameEx("print.gamlss")
> ### * print.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.gamlss
> ### Title: Prints a GAMLSS fitted model
> ### Aliases: print.gamlss
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> print(h) # or just h

Family:  c("PO", "Poisson") 
Fitting method: RS() 

Call:  gamlss(formula = y ~ poly(x, 3) + qrt, family = PO,      data = aids) 

Mu Coefficients:
(Intercept)  poly(x, 3)1  poly(x, 3)2  poly(x, 3)3         qrt2         qrt3  
   4.814473     8.256092    -3.353310     0.938816    -0.156381     0.009986  
       qrt4  
  -0.115705  

 Degrees of Freedom for the fit: 7 Residual Deg. of Freedom   38 
Global Deviance:     416.801 
            AIC:     430.801 
            SBC:     443.448 
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("prodist.gamlss")
> ### * prodist.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prodist.gamlss
> ### Title: Extracting Fitted or Predicted Probability Distributions from
> ###   gamlss Models
> ### Aliases: prodist.gamlss
> ### Keywords: distribution
> 
> ### ** Examples
> 
> ## Don't show: 
>  if(!requireNamespace("distributions3")) {
+   if(interactive() || is.na(Sys.getenv("_R_CHECK_PACKAGE_NAME_", NA))) {
+     stop("not all packages required for the example are installed")
+   } else q() }
Loading required namespace: distributions3
> ## End(Don't show)
> ## packages, code, and data
> library("gamlss")
> library("distributions3")

Attaching package: ‘distributions3’

The following object is masked from ‘package:gamlss’:

    random

The following object is masked from ‘package:gamlss.dist’:

    GP

The following object is masked from ‘package:stats’:

    Gamma

The following object is masked from ‘package:grDevices’:

    pdf

> data("cars", package = "datasets")
> 
> ## fit heteroscedastic normal GAMLSS model
> ## stopping distance (ft) explained by speed (mph)
> m <- gamlss(dist ~ pb(speed), ~ pb(speed), data = cars, family = "NO")
GAMLSS-RS iteration 1: Global Deviance = 405.0909 
GAMLSS-RS iteration 2: Global Deviance = 405.5848 
GAMLSS-RS iteration 3: Global Deviance = 405.6121 
GAMLSS-RS iteration 4: Global Deviance = 405.6143 
GAMLSS-RS iteration 5: Global Deviance = 405.6151 
> 
> ## obtain predicted distributions for three levels of speed
> d <- prodist(m, newdata = data.frame(speed = c(10, 20, 30)))
> print(d)
[1] "GAMLSS NO(mu = 23.04, sigma = 10.03)"
[2] "GAMLSS NO(mu = 58.91, sigma = 18.54)"
[3] "GAMLSS NO(mu = 96.44, sigma = 34.28)"
> 
> ## obtain quantiles (works the same for any distribution object 'd' !)
> quantile(d, 0.5)
[1] 23.03774 58.91010 96.44087
> quantile(d, c(0.05, 0.5, 0.95), elementwise = FALSE)
       q_0.05    q_0.5    q_0.95
[1,]  6.54516 23.03774  39.53033
[2,] 28.41281 58.91010  89.40739
[3,] 40.04718 96.44087 152.83456
> quantile(d, c(0.05, 0.5, 0.95), elementwise = TRUE)
[1]   6.54516  58.91010 152.83456
> 
> ## visualization
> plot(dist ~ speed, data = cars)
> nd <- data.frame(speed = 0:240/4)
> nd$dist <- prodist(m, newdata = nd)
> nd$fit <- quantile(nd$dist, c(0.05, 0.5, 0.95))
> matplot(nd$speed, nd$fit, type = "l", lty = 1, col = "slategray", add = TRUE)
> 
> ## moments
> mean(d)
[1] 23.03774 58.91010 96.44087
> variance(d)
[1]  100.5363  343.7700 1175.4562
> 
> ## simulate random numbers
> random(d, 5)
           r_1      r_2       r_3      r_4       r_5
[1,]  23.78539 22.47495  18.24344 22.00711  9.230272
[2,]  22.02546 56.02149  66.65917 66.09793 51.215668
[3,] 117.69155 46.01623 143.02310 94.59617 82.922669
> 
> ## density and distribution
> pdf(d, 50 * -2:2)
           d_-100        d_-50          d_0        d_50        d_100
[1,] 7.993342e-35 1.196174e-13 0.0028406272 0.001070505 6.402020e-15
[2,] 2.408383e-18 6.923852e-10 0.0001382448 0.019170274 1.846234e-03
[3,] 8.651411e-10 1.271130e-06 0.0002226492 0.004649219 1.157355e-02
> cdf(d, 50 * -2:2)
           p_-100        p_-50          p_0       p_50     p_100
[1,] 6.488959e-35 1.617107e-13 0.0107916676 0.99641695 1.0000000
[2,] 5.141843e-18 2.126983e-09 0.0007433125 0.31541429 0.9866597
[3,] 5.031698e-09 9.717270e-06 0.0024546680 0.08777945 0.5413401
> 
> ## Poisson example
> data("FIFA2018", package = "distributions3")
> m2 <- gamlss(goals ~ pb(difference), data = FIFA2018, family = "PO")
GAMLSS-RS iteration 1: Global Deviance = 355.3941 
GAMLSS-RS iteration 2: Global Deviance = 355.3941 
> d2 <- prodist(m2, newdata = data.frame(difference = 0))
> print(d2)
[1] "GAMLSS PO(mu = 1.237)"
> quantile(d2, c(0.05, 0.5, 0.95))
[1] 0 1 3
> 
> ## note that log_pdf() can replicate logLik() value
> sum(log_pdf(prodist(m2), FIFA2018$goals))
[1] -177.697
> logLik(m2)
'log Lik.' -177.697 (df=2.00027)
> 
> 
> 
> cleanEx()

detaching ‘package:distributions3’

> nameEx("prof.dev")
> ### * prof.dev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prof.dev
> ### Title: Plotting the Profile Deviance for one of the Parameters in a
> ###   GAMLSS model
> ### Aliases: prof.dev
> ### Keywords: regression
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(abdom)
> ##D h<-gamlss(y~pb(x), sigma.formula=~pb(x), family=BCT, data=abdom) 
> ##D prof.dev(h,"nu",min=-2.000,max=2)
> ##D rm(h)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("prof.term")
> ### * prof.term
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prof.term
> ### Title: Plotting the Profile: deviance or information criterion for one
> ###   of the terms (or hyper-parameters) in a GAMLSS model
> ### Aliases: prof.term
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> # fitting a linear model
> gamlss(y~x+qrt,family=NBI,data=aids)
GAMLSS-RS iteration 1: Global Deviance = 492.7119 
GAMLSS-RS iteration 2: Global Deviance = 492.6375 
GAMLSS-RS iteration 3: Global Deviance = 492.6373 

Family:  c("NBI", "Negative Binomial type I") 
Fitting method: RS() 

Call:  gamlss(formula = y ~ x + qrt, family = NBI, data = aids) 

Mu Coefficients:
(Intercept)            x         qrt2         qrt3         qrt4  
    2.88546      0.08743     -0.12038      0.11175     -0.07554  
Sigma Coefficients:
(Intercept)  
     -1.603  

 Degrees of Freedom for the fit: 6 Residual Deg. of Freedom   39 
Global Deviance:     492.637 
            AIC:     504.637 
            SBC:     515.477 
> # testing the linear beta parameter
> mod<-quote(gamlss(y ~ offset(this * x) + qrt, data = aids, family = NBI))
> prof.term(mod, min=0.06, max=0.11)
GAMLSS-RS iteration 1: Global Deviance = 508.1867 
GAMLSS-RS iteration 2: Global Deviance = 508.1845 
GAMLSS-RS iteration 3: Global Deviance = 508.1845 
GAMLSS-RS iteration 1: Global Deviance = 500.8052 
GAMLSS-RS iteration 2: Global Deviance = 500.8046 
GAMLSS-RS iteration 1: Global Deviance = 495.352 
GAMLSS-RS iteration 2: Global Deviance = 495.3517 
GAMLSS-RS iteration 1: Global Deviance = 492.7741 
GAMLSS-RS iteration 2: Global Deviance = 492.7741 
GAMLSS-RS iteration 1: Global Deviance = 493.4323 
GAMLSS-RS iteration 2: Global Deviance = 493.4321 
GAMLSS-RS iteration 1: Global Deviance = 496.919 
GAMLSS-RS iteration 2: Global Deviance = 496.9187 
GAMLSS-RS iteration 1: Global Deviance = 502.4451 
GAMLSS-RS iteration 2: Global Deviance = 502.4447 
****************************************************************** 
The Maximum Likelihood estimator is  0.08739487 
with a Global Deviance equal to  492.6384 
A  95 % Confidence interval is: ( 0.07458118 , 0.1008422 ) 
****************************************************************** 
> # find the hyper parameter using cubic splines smoothing
> mod1<-quote(gamlss(y ~ cs(x,df=this) + qrt, data = aids, family = NBI))
> prof.term(mod1, min=1, max=15, step=1, criterion="GAIC", penalty=log(45))
GAMLSS-RS iteration 1: Global Deviance = 419.651 
GAMLSS-RS iteration 2: Global Deviance = 423.8293 
GAMLSS-RS iteration 3: Global Deviance = 425.0032 
GAMLSS-RS iteration 4: Global Deviance = 425.0032 
GAMLSS-RS iteration 1: Global Deviance = 388.6841 
GAMLSS-RS iteration 2: Global Deviance = 391.3464 
GAMLSS-RS iteration 3: Global Deviance = 391.3969 
GAMLSS-RS iteration 4: Global Deviance = 391.3964 
GAMLSS-RS iteration 1: Global Deviance = 379.5593 
GAMLSS-RS iteration 2: Global Deviance = 379.8544 
GAMLSS-RS iteration 3: Global Deviance = 379.8779 
GAMLSS-RS iteration 4: Global Deviance = 379.8779 
GAMLSS-RS iteration 1: Global Deviance = 373.89 
GAMLSS-RS iteration 2: Global Deviance = 373.9232 
GAMLSS-RS iteration 3: Global Deviance = 373.9311 
GAMLSS-RS iteration 4: Global Deviance = 373.9313 
GAMLSS-RS iteration 1: Global Deviance = 369.3946 
GAMLSS-RS iteration 2: Global Deviance = 369.4118 
GAMLSS-RS iteration 3: Global Deviance = 369.4167 
GAMLSS-RS iteration 4: Global Deviance = 369.4169 
GAMLSS-RS iteration 1: Global Deviance = 365.4751 
GAMLSS-RS iteration 2: Global Deviance = 365.5071 
GAMLSS-RS iteration 3: Global Deviance = 365.5113 
GAMLSS-RS iteration 4: Global Deviance = 365.5116 
GAMLSS-RS iteration 1: Global Deviance = 362.0692 
GAMLSS-RS iteration 2: Global Deviance = 362.109 
GAMLSS-RS iteration 3: Global Deviance = 362.1121 
GAMLSS-RS iteration 4: Global Deviance = 362.1124 
GAMLSS-RS iteration 1: Global Deviance = 359.1964 
GAMLSS-RS iteration 2: Global Deviance = 359.2321 
GAMLSS-RS iteration 3: Global Deviance = 359.2344 
GAMLSS-RS iteration 4: Global Deviance = 359.2348 
GAMLSS-RS iteration 1: Global Deviance = 356.8284 
GAMLSS-RS iteration 2: Global Deviance = 356.8543 
GAMLSS-RS iteration 3: Global Deviance = 356.8559 
GAMLSS-RS iteration 4: Global Deviance = 356.8563 
GAMLSS-RS iteration 1: Global Deviance = 354.8884 
GAMLSS-RS iteration 2: Global Deviance = 354.9056 
GAMLSS-RS iteration 3: Global Deviance = 354.9066 
GAMLSS-RS iteration 4: Global Deviance = 354.9069 
GAMLSS-RS iteration 1: Global Deviance = 353.2625 
GAMLSS-RS iteration 2: Global Deviance = 353.2737 
GAMLSS-RS iteration 3: Global Deviance = 353.2744 
GAMLSS-RS iteration 1: Global Deviance = 351.8566 
GAMLSS-RS iteration 2: Global Deviance = 351.8638 
GAMLSS-RS iteration 3: Global Deviance = 351.8643 
GAMLSS-RS iteration 1: Global Deviance = 350.5468 
GAMLSS-RS iteration 2: Global Deviance = 350.551 
GAMLSS-RS iteration 3: Global Deviance = 350.5514 
GAMLSS-RS iteration 1: Global Deviance = 349.2648 
GAMLSS-RS iteration 2: Global Deviance = 349.2661 
GAMLSS-RS iteration 3: Global Deviance = 349.2667 
GAMLSS-RS iteration 1: Global Deviance = 347.9359 
GAMLSS-RS iteration 2: Global Deviance = 347.9333 
GAMLSS-RS iteration 3: Global Deviance = 347.9341 
****************************************************************** 
The Mimimum is  5.728306 
with an an GAIC( 3.806662 ) = 411.169 
****************************************************************** 
> # find a break point in x
> mod2 <- quote(gamlss(y ~ x+I((x>this)*(x-this))+qrt,family=NBI,data=aids))
> prof.term(mod2, min=1, max=45, step=1, criterion="GD")
GAMLSS-RS iteration 1: Global Deviance = 492.7119 
GAMLSS-RS iteration 2: Global Deviance = 492.6375 
GAMLSS-RS iteration 3: Global Deviance = 492.6373 
GAMLSS-RS iteration 1: Global Deviance = 483.1175 
GAMLSS-RS iteration 2: Global Deviance = 483.1128 
GAMLSS-RS iteration 3: Global Deviance = 483.1127 
GAMLSS-RS iteration 1: Global Deviance = 478.249 
GAMLSS-RS iteration 2: Global Deviance = 478.2475 
GAMLSS-RS iteration 3: Global Deviance = 478.2475 
GAMLSS-RS iteration 1: Global Deviance = 474.0472 
GAMLSS-RS iteration 2: Global Deviance = 474.0458 
GAMLSS-RS iteration 3: Global Deviance = 474.0458 
GAMLSS-RS iteration 1: Global Deviance = 469.3261 
GAMLSS-RS iteration 2: Global Deviance = 469.3245 
GAMLSS-RS iteration 3: Global Deviance = 469.3245 
GAMLSS-RS iteration 1: Global Deviance = 463.9904 
GAMLSS-RS iteration 2: Global Deviance = 463.9877 
GAMLSS-RS iteration 3: Global Deviance = 463.9877 
GAMLSS-RS iteration 1: Global Deviance = 457.2532 
GAMLSS-RS iteration 2: Global Deviance = 457.2484 
GAMLSS-RS iteration 3: Global Deviance = 457.2485 
GAMLSS-RS iteration 1: Global Deviance = 450.9158 
GAMLSS-RS iteration 2: Global Deviance = 450.9101 
GAMLSS-RS iteration 3: Global Deviance = 450.9102 
GAMLSS-RS iteration 1: Global Deviance = 445.2548 
GAMLSS-RS iteration 2: Global Deviance = 445.2514 
GAMLSS-RS iteration 3: Global Deviance = 445.2515 
GAMLSS-RS iteration 1: Global Deviance = 439.8398 
GAMLSS-RS iteration 2: Global Deviance = 439.8355 
GAMLSS-RS iteration 3: Global Deviance = 439.8354 
GAMLSS-RS iteration 1: Global Deviance = 434.1987 
GAMLSS-RS iteration 2: Global Deviance = 434.1951 
GAMLSS-RS iteration 3: Global Deviance = 434.1951 
GAMLSS-RS iteration 1: Global Deviance = 427.9561 
GAMLSS-RS iteration 2: Global Deviance = 427.9518 
GAMLSS-RS iteration 3: Global Deviance = 427.9517 
GAMLSS-RS iteration 1: Global Deviance = 421.3125 
GAMLSS-RS iteration 2: Global Deviance = 421.3074 
GAMLSS-RS iteration 3: Global Deviance = 421.3074 
GAMLSS-RS iteration 1: Global Deviance = 412.7375 
GAMLSS-RS iteration 2: Global Deviance = 412.7268 
GAMLSS-RS iteration 3: Global Deviance = 412.7268 
GAMLSS-RS iteration 1: Global Deviance = 402.9311 
GAMLSS-RS iteration 2: Global Deviance = 402.9131 
GAMLSS-RS iteration 3: Global Deviance = 402.9129 
GAMLSS-RS iteration 1: Global Deviance = 392.778 
GAMLSS-RS iteration 2: Global Deviance = 392.7554 
GAMLSS-RS iteration 3: Global Deviance = 392.7553 
GAMLSS-RS iteration 1: Global Deviance = 382.8674 
GAMLSS-RS iteration 2: Global Deviance = 382.848 
GAMLSS-RS iteration 3: Global Deviance = 382.848 
GAMLSS-RS iteration 1: Global Deviance = 377.8746 
GAMLSS-RS iteration 2: Global Deviance = 377.8707 
GAMLSS-RS iteration 3: Global Deviance = 377.8706 
GAMLSS-RS iteration 1: Global Deviance = 378.9361 
GAMLSS-RS iteration 2: Global Deviance = 378.936 
GAMLSS-RS iteration 1: Global Deviance = 385.9809 
GAMLSS-RS iteration 2: Global Deviance = 385.9718 
GAMLSS-RS iteration 3: Global Deviance = 385.9718 
GAMLSS-RS iteration 1: Global Deviance = 394.6293 
GAMLSS-RS iteration 2: Global Deviance = 394.6019 
GAMLSS-RS iteration 3: Global Deviance = 394.6017 
GAMLSS-RS iteration 1: Global Deviance = 404.4438 
GAMLSS-RS iteration 2: Global Deviance = 404.3851 
GAMLSS-RS iteration 3: Global Deviance = 404.3848 
GAMLSS-RS iteration 1: Global Deviance = 413.5801 
GAMLSS-RS iteration 2: Global Deviance = 413.514 
GAMLSS-RS iteration 3: Global Deviance = 413.5135 
GAMLSS-RS iteration 1: Global Deviance = 421.1914 
GAMLSS-RS iteration 2: Global Deviance = 421.1412 
GAMLSS-RS iteration 3: Global Deviance = 421.1408 
GAMLSS-RS iteration 1: Global Deviance = 428.116 
GAMLSS-RS iteration 2: Global Deviance = 428.0718 
GAMLSS-RS iteration 3: Global Deviance = 428.0714 
GAMLSS-RS iteration 1: Global Deviance = 434.0359 
GAMLSS-RS iteration 2: Global Deviance = 434.0053 
GAMLSS-RS iteration 3: Global Deviance = 434.005 
GAMLSS-RS iteration 1: Global Deviance = 439.0664 
GAMLSS-RS iteration 2: Global Deviance = 439.0459 
GAMLSS-RS iteration 3: Global Deviance = 439.0456 
GAMLSS-RS iteration 1: Global Deviance = 443.8416 
GAMLSS-RS iteration 2: Global Deviance = 443.8229 
GAMLSS-RS iteration 3: Global Deviance = 443.8228 
GAMLSS-RS iteration 1: Global Deviance = 447.5496 
GAMLSS-RS iteration 2: Global Deviance = 447.5401 
GAMLSS-RS iteration 3: Global Deviance = 447.54 
GAMLSS-RS iteration 1: Global Deviance = 451.4804 
GAMLSS-RS iteration 2: Global Deviance = 451.4696 
GAMLSS-RS iteration 3: Global Deviance = 451.4695 
GAMLSS-RS iteration 1: Global Deviance = 455.4097 
GAMLSS-RS iteration 2: Global Deviance = 455.3994 
GAMLSS-RS iteration 3: Global Deviance = 455.3994 
GAMLSS-RS iteration 1: Global Deviance = 459.2939 
GAMLSS-RS iteration 2: Global Deviance = 459.2846 
GAMLSS-RS iteration 3: Global Deviance = 459.2845 
GAMLSS-RS iteration 1: Global Deviance = 462.9457 
GAMLSS-RS iteration 2: Global Deviance = 462.9385 
GAMLSS-RS iteration 3: Global Deviance = 462.9384 
GAMLSS-RS iteration 1: Global Deviance = 466.451 
GAMLSS-RS iteration 2: Global Deviance = 466.4452 
GAMLSS-RS iteration 3: Global Deviance = 466.4452 
GAMLSS-RS iteration 1: Global Deviance = 469.7953 
GAMLSS-RS iteration 2: Global Deviance = 469.7907 
GAMLSS-RS iteration 3: Global Deviance = 469.7907 
GAMLSS-RS iteration 1: Global Deviance = 472.6051 
GAMLSS-RS iteration 2: Global Deviance = 472.6025 
GAMLSS-RS iteration 3: Global Deviance = 472.6025 
GAMLSS-RS iteration 1: Global Deviance = 475.4832 
GAMLSS-RS iteration 2: Global Deviance = 475.4808 
GAMLSS-RS iteration 3: Global Deviance = 475.4807 
GAMLSS-RS iteration 1: Global Deviance = 477.9931 
GAMLSS-RS iteration 2: Global Deviance = 477.9915 
GAMLSS-RS iteration 3: Global Deviance = 477.9915 
GAMLSS-RS iteration 1: Global Deviance = 480.5113 
GAMLSS-RS iteration 2: Global Deviance = 480.51 
GAMLSS-RS iteration 3: Global Deviance = 480.51 
GAMLSS-RS iteration 1: Global Deviance = 482.8512 
GAMLSS-RS iteration 2: Global Deviance = 482.8503 
GAMLSS-RS iteration 1: Global Deviance = 485.0938 
GAMLSS-RS iteration 2: Global Deviance = 485.093 
GAMLSS-RS iteration 1: Global Deviance = 487.2029 
GAMLSS-RS iteration 2: Global Deviance = 487.2023 
GAMLSS-RS iteration 1: Global Deviance = 489.2268 
GAMLSS-RS iteration 2: Global Deviance = 489.2263 
GAMLSS-RS iteration 1: Global Deviance = 490.8663 
GAMLSS-RS iteration 2: Global Deviance = 490.866 
GAMLSS-RS iteration 1: Global Deviance = 492.6376 
GAMLSS-RS iteration 2: Global Deviance = 492.6373 
****************************************************************** 
The Maximum Likelihood estimator is  18.3469 
with a Global Deviance equal to  377.5065 
A  95 % Confidence interval is: ( 17.2034 , 19.41171 ) 
****************************************************************** 
> rm(mod,mod1,mod2)
> 
> 
> 
> cleanEx()
> nameEx("ps")
> ### * ps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ps
> ### Title: P-Splines Fits in a GAMLSS Formula
> ### Aliases: ps pb pbo pbp pbc pbc.control pb.control pbo.control
> ###   pbp.control pvc pvc.control cy cy.control pbm pbm.control pbz
> ###   pbz.control getZmatrix .hat.WX
> ### Keywords: regression
> 
> ### ** Examples
> 
> #==============================
> # pb() and ps() functions
> data(aids)
> # fitting a smoothing cubic spline with 7 degrees of freedom
> # plus the a quarterly  effect  
> aids1<-gamlss(y~ps(x,df=7)+qrt,data=aids,family=PO) # fix df's 
GAMLSS-RS iteration 1: Global Deviance = 374.8622 
GAMLSS-RS iteration 2: Global Deviance = 374.8622 
> aids2<-gamlss(y~pb(x,df=7)+qrt,data=aids,family=PO) # fix df's
GAMLSS-RS iteration 1: Global Deviance = 374.8366 
GAMLSS-RS iteration 2: Global Deviance = 374.8366 
> aids3<-gamlss(y~pb(x)+qrt,data=aids,family=PO) # estimate lambda
GAMLSS-RS iteration 1: Global Deviance = 387.1462 
GAMLSS-RS iteration 2: Global Deviance = 387.1547 
GAMLSS-RS iteration 3: Global Deviance = 387.1547 
> with(aids, plot(x,y))
> with(aids, lines(x,fitted(aids1),col="red"))
> with(aids, lines(x,fitted(aids2),col="green"))
> with(aids, lines(x,fitted(aids1),col="yellow"))
> rm(aids1, aids2, aids3)
> #=============================
> ## Not run: 
> ##D # pbc()
> ##D # simulate data
> ##D set.seed(555)
> ##D x = seq(0, 1, length = 100)
> ##D y = sign(cos(1 * x * 2 * pi + pi / 4)) + rnorm(length(x)) * 0.2
> ##D plot(y~x)
> ##D m1<-gamlss(y~pbc(x)) 
> ##D lines(fitted(m1)~x)
> ##D rm(y,x,m1)
> ##D #=============================
> ##D # the pvc() function
> ##D # function to generate data
> ##D genData <- function(n=200)
> ##D  {
> ##D f1 <- function(x)-60+15*x-0.10*x^2
> ##D f2 <- function(x)-120+10*x+0.08*x^2
> ##D set.seed(1441)
> ##D x1 <- runif(n/2, min=0, max=55)
> ##D x2 <- runif(n/2, min=0, max=55)
> ##D y1 <- f1(x1)+rNO(n=n/2,mu=0,sigma=20)
> ##D y2 <- f2(x2)+rNO(n=n/2,mu=0,sigma=30)
> ##D  y <- c(y1,y2)
> ##D  x <- c(x1,x2)
> ##D  f <- gl(2,n/2)
> ##D da<-data.frame(y,x,f)
> ##D da
> ##D }
> ##D da<-genData(500)
> ##D plot(y~x, data=da, pch=21,bg=c("gray","yellow3")[unclass(f)])
> ##D # fitting models
> ##D # smoothing x
> ##D m1 <- gamlss(y~pb(x), data=da)
> ##D # parallel smoothing lines
> ##D m2 <- gamlss(y~pb(x)+f, data=da)
> ##D # linear interaction
> ##D m3 <- gamlss(y~pb(x)+f*x, data=da)
> ##D # varying coefficient model
> ##D m4 <- gamlss(y~pvc(x, by=f), data=da)
> ##D GAIC(m1,m2,m3,m4)
> ##D # plotting the fit
> ##D lines(fitted(m4)[da$f==1][order(da$x[da$f==1])]~da$x[da$f==1]
> ##D          [order(da$x[da$f==1])], col="blue", lwd=2)
> ##D lines(fitted(m4)[da$f==2][order(da$x[da$f==2])]~da$x[da$f==2]
> ##D          [order(da$x[da$f==2])], col="red", lwd=2)
> ##D rm(da,m1,m2,m3,m4)
> ##D #=================================
> ##D # the rent data
> ##D # first with a factor
> ##D data(rent)
> ##D plot(R~Fl, data=rent, pch=21,bg=c("gray","blue")[unclass(rent$B)])
> ##D r1 <- gamlss(R~pb(Fl), data=rent)
> ##D # identical to model
> ##D r11 <- gamlss(R~pvc(Fl), data=rent)
> ##D # now with the factor
> ##D r2 <- gamlss(R~pvc(Fl, by=B), data=rent)
> ##D lines(fitted(r2)[rent$B==1][order(rent$Fl[rent$B==1])]~rent$Fl[rent$B==1]
> ##D                 [order(rent$Fl[rent$B==1])], col="blue", lwd=2)
> ##D lines(fitted(r2)[rent$B==0][order(rent$Fl[rent$B==0])]~rent$Fl[rent$B==0]
> ##D                 [order(rent$Fl[rent$B==0])], col="red", lwd=2)
> ##D # probably not very sensible model
> ##D rm(r1,r11,r2)
> ##D #-----------
> ##D # now with a continuous variable
> ##D # additive model
> ##D  h1 <-gamlss(R~pb(Fl)+pb(A), data=rent)
> ##D # varying-coefficient model
> ##D  h2 <-gamlss(R~pb(Fl)+pb(A)+pvc(A,by=Fl), data=rent)
> ##D AIC(h1,h2)
> ##D rm(h1,h2)
> ##D #-----------
> ##D # monotone function
> ##D set.seed(1334)
> ##D x = seq(0, 1, length = 100)
> ##D p = 0.4
> ##D y = sin(2 * pi * p * x) + rnorm(100) * 0.1
> ##D plot(y~x)
> ##D m1 <- gamlss(y~pbm(x))
> ##D points(fitted(m1)~x, col="red")
> ##D yy <- -y
> ##D plot(yy~x)
> ##D m2 <- gamlss(yy~pbm(x, mono="down"))
> ##D points(fitted(m2)~x, col="red")
> ##D #==========================================
> ##D # the pbz() function
> ##D # creating uncorrelated data
> ##D set.seed(123)
> ##D y<-rNO(100)
> ##D x<-1:100
> ##D plot(y~x)
> ##D #----------------------
> ##D # ML estimation
> ##D m1<-gamlss(y~pbz(x))
> ##D m2 <-gamlss(y~pb(x))
> ##D AIC(m1,m2)
> ##D op <- par( mfrow=c(1,2))
> ##D term.plot(m1, partial=T)
> ##D term.plot(m2, partial=T)
> ##D par(op)
> ##D # GAIC estimation
> ##D m11<-gamlss(y~pbz(x, method="GAIC", k=2))
> ##D m21 <-gamlss(y~pb(x, method="GAIC", k=2))
> ##D AIC(m11,m21)
> ##D op <- par( mfrow=c(1,2))
> ##D term.plot(m11, partial=T)
> ##D term.plot(m21, partial=T)
> ##D par(op)
> ##D # GCV estimation
> ##D m12<-gamlss(y~pbz(x, method="GCV"))
> ##D m22 <-gamlss(y~pb(x, method="GCV"))
> ##D AIC(m12,m22)
> ##D op <- par( mfrow=c(1,2))
> ##D term.plot(m12, partial=T)
> ##D term.plot(m22, partial=T)
> ##D par(op)
> ##D # fixing df is more trycky since df are the extra df 
> ##D m13<-gamlss(y~pbz(x, df=0))
> ##D m23 <-gamlss(y~pb(x, df=0))
> ##D AIC(m13,m23)
> ##D # here the second penalty is not take effect therefore identical results 
> ##D m14<-gamlss(y~pbz(x, df=1))
> ##D m24 <-gamlss(y~pb(x, df=1))
> ##D AIC(m14,m24)
> ##D # fixing lambda
> ##D m15<-gamlss(y~pbz(x, lambda=1000))
> ##D m25 <-gamlss(y~pb(x, lambda=1000))
> ##D AIC(m15,m25)
> ##D #--------------------------------------------------
> ##D # prediction 
> ##D m1<-gamlss(y~pbz(x), data=data.frame(y,x))
> ##D m2 <-gamlss(y~pb(x), data=data.frame(y,x))
> ##D AIC(m1,m2)
> ##D predict(m1, newdata=data.frame(x=c(80, 90, 100, 110)))
> ##D predict(m2, newdata=data.frame(x=c(80, 90, 100, 110)))
> ##D #---------------------------------------------------
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("quantSheets")
> ### * quantSheets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quantSheets
> ### Title: Quantile Sheets
> ### Aliases: quantSheets quantSheets.control findPower z.scoresQS
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> m1 <- quantSheets(y,x, data=abdom)
% of cases below  0.3830381 centile is  2.786885 
% of cases below  2.275013 centile is  3.278689 
% of cases below  9.121122 centile is  5.57377 
% of cases below  25.24925 centile is  24.7541 
% of cases below  50 centile is  49.83607 
% of cases below  74.75075 centile is  76.39344 
% of cases below  90.87888 centile is  92.45902 
% of cases below  97.72499 centile is  96.39344 
% of cases below  99.61696 centile is  98.03279 
> head(fitted(m1))
         0.38     2.28     9.12    25.25       50    74.75    90.88    97.72
[1,] 52.93689 53.37781 54.92823 58.01020 62.02622 67.61530 73.26044 76.00728
[2,] 52.93689 53.37781 54.92823 58.01020 62.02622 67.61530 73.26044 76.00728
[3,] 52.93689 53.37781 54.92823 58.01020 62.02622 67.61530 73.26044 76.00728
[4,] 54.43042 54.88327 56.47607 59.63628 63.70493 69.30113 74.96775 77.72684
[5,] 57.41731 57.89393 59.57124 62.88770 67.06160 72.67239 78.38176 81.16526
[6,] 57.41731 57.89393 59.57124 62.88770 67.06160 72.67239 78.38176 81.16526
        99.62
[1,] 76.78148
[2,] 76.78148
[3,] 76.78148
[4,] 78.50437
[5,] 81.94942
[6,] 81.94942
> p1 <- predict(m1, newdata=c(20,30,40))
> matpoints(c(20,30,40), p1)
> z.scoresQS(m1,y=c(150, 300),x=c(20, 30) )
[1] -0.1738935  3.4552453
> # If we needed a power transformation not appropriate for this data
> findPower(y,x, data=abdom)
*** Checking for transformation for x *** 
*** power parameters  0.4605772 ***  
[1] 0.4605772
> 
> 
> 
> cleanEx()
> nameEx("random")
> ### * random
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: random
> ### Title: Specify a random intercept model in a GAMLSS formula
> ### Aliases: random re
> ### Keywords: regression
> 
> ### ** Examples
> 
> #------------- Example 1 from Pinheiro and Bates (2000) page 15-----------------
> # bring nlme
> library(nlme)
> data(ergoStool)
> # lme model
> l1<-lme(effort~Type, data=ergoStool, random=~1|Subject, method="ML")
> # use random() 
> t1<-gamlss(effort~Type+random(Subject), data=ergoStool )
GAMLSS-RS iteration 1: Global Deviance = 96.155 
GAMLSS-RS iteration 2: Global Deviance = 96.155 
> # use re() with fixed effect within re()
> t2<-gamlss(effort~re(fixed=~Type, random=~1|Subject), data=ergoStool )
GAMLSS-RS iteration 1: Global Deviance = 96.155 
GAMLSS-RS iteration 2: Global Deviance = 96.155 
> # use re() with fixed effect in gamlss formula
> t3<-gamlss(effort~Type+re(random=~1|Subject), data=ergoStool )
GAMLSS-RS iteration 1: Global Deviance = 96.155 
GAMLSS-RS iteration 2: Global Deviance = 96.155 
> # compare lme fitted values with random
> plot(fitted(l1), fitted(t1))
> # compare lme fitted values with random
> plot(fitted(l1), fitted(t2))
> lines(fitted(l1), fitted(t3), col=2)
> # getting the fitted coefficients 
> getSmo(t2)
Linear mixed-effects model fit by maximum likelihood
  Data: Data 
  Log-likelihood: -61.07222
  Fixed: fix.formula 
(Intercept)      TypeT2      TypeT3      TypeT4 
 -1.6944444   3.8888889   2.2222222   0.6666667 

Random effects:
 Formula: ~1 | Subject
        (Intercept) Residual
StdDev:    1.256261 1.127652

Variance function:
 Structure: fixed weights
 Formula: ~W.var 
Number of Observations: 36
Number of Groups: 9 
> #-------------------------------------------------------------------------------
> ## Not run: 
> ##D #-------------Example 2 Hodges data---------------------------------------------
> ##D data(hodges)
> ##D plot(prind~state, data=hodges)
> ##D m1<- gamlss(prind~random(state), sigma.fo=~random(state), nu.fo=~random(state), 
> ##D             tau.fo=~random(state), family=BCT, data=hodges)
> ##D m2<- gamlss(prind~re(random=~1|state), sigma.fo=~re(random=~1|state), 
> ##D             nu.fo=~re(random=~1|state), tau.fo=~re(random=~1|state), family=BCT, 
> ##D             data=hodges)
> ##D # comparing the fitted effective degrees of freedom
> ##D m1$mu.df
> ##D m2$mu.df
> ##D m1$sigma.df
> ##D m2$sigma.df
> ##D m1$nu.df
> ##D m2$nu.df
> ##D m1$tau.df
> ##D m2$tau.df
> ##D # random effect for tau is not needed
> ##D m3<- gamlss(prind~random(state), sigma.fo=~random(state), nu.fo=~random(state),  
> ##D             family=BCT, data=hodges, start.from=m1)
> ##D plot(m3)
> ##D # term plots work for random but not at the moment for re()
> ##D op <- par(mfrow=c(2,2))
> ##D term.plot(m3, se=TRUE)
> ##D term.plot(m3, se=TRUE, what="sigma")
> ##D term.plot(m3, se=TRUE, what="nu")
> ##D par(op)
> ##D # getting information from a fitted lme object
> ##D coef(getSmo(m2))
> ##D ranef(getSmo(m2))
> ##D VarCorr(getSmo(m2))
> ##D summary(getSmo(m2))
> ##D intervals(getSmo(m2))
> ##D fitted(getSmo(m2))
> ##D fixef(getSmo(m2))
> ##D #  plotting 
> ##D plot(getSmo(m2))
> ##D qqnorm(getSmo(m2))
> ##D #----------------Example 3 from Pinheiro and Bates (2000) page 42---------------
> ##D data(Pixel)
> ##D l1 <- lme(pixel~ day+I(day^2), data=Pixel, random=list(Dog=~day, Side=~1),
> ##D           method="ML")
> ##D # this will fail 
> ##D #t1<-gamlss(pixel~re(fixed=~day+I(day^2), random=list(Dog=~day, Side=~1)), 
> ##D #           data=Pixel)
> ##D # but this  is working 
> ##D t1<-gamlss(pixel~re(fixed=~day+I(day^2), random=list(Dog=~day, Side=~1), 
> ##D                     opt="optim"), data=Pixel)
> ##D plot(fitted(l1)~fitted(t1))
> ##D #---------------Example 4 from Pinheiro and Bates (2000)page 146----------------
> ##D data(Orthodont)
> ##D l1 <- lme(distance~ I(age-11), data=Orthodont, random=~I(age-11)|Subject,
> ##D            method="ML")
> ##D 
> ##D t1<-gamlss(distance~I(age-11)+re(random=~I(age-11)|Subject), data=Orthodont)
> ##D plot(fitted(l1)~fitted(t1))
> ##D # checking the model
> ##D plot(t1)
> ##D wp(t1, ylim.all=2)
> ##D # two observation fat try LO
> ##D t2<-gamlss(distance~I(age-11)+re(random=~I(age-11)|Subject,  opt="optim", 
> ##D      numIter=100), data=Orthodont, family=LO)
> ##D plot(t2)
> ##D wp(t2,ylim.all=2)
> ##D # a bit better but not satisfactory Note that  3 paramters distibutions fail
> ##D #------------example 5 from Venable and Ripley (2002)--------------------------
> ##D library(MASS)
> ##D data(bacteria)
> ##D summary(glmmPQL(y ~ trt + I(week > 2), random = ~ 1 | ID,
> ##D                 family = binomial, data = bacteria))
> ##D s1 <- gamlss(y ~ trt + I(week > 2)+random(ID), family = BI, data = bacteria)
> ##D s2 <- gamlss(y ~ trt + I(week > 2)+re(random=~1|ID), family = BI, 
> ##D              data = bacteria)
> ##D s3 <- gamlss(y ~ trt + I(week > 2)+re(random=~1|ID, method="REML"), family = BI, 
> ##D              data = bacteria)
> ##D # the esimate of the random effect sd sigma_b 
> ##D sqrt(getSmo(s1)$tau2)
> ##D getSmo(s2)
> ##D getSmo(s3)
> ##D #-------------Example 6 from Pinheiro and Bates (2000) page 239-244-------------
> ##D # using corAR1()
> ##D data(Ovary)
> ##D # AR1 
> ##D l1 <- lme(follicles~sin(2*pi*Time)+cos(2*pi*Time), data=Ovary, 
> ##D           random=pdDiag(~sin(2*pi*Time)), correlation=corAR1())
> ##D # ARMA
> ##D l2 <- lme(follicles~sin(2*pi*Time)+cos(2*pi*Time), data=Ovary, 
> ##D           random=pdDiag(~sin(2*pi*Time)), correlation=corARMA(q=2))
> ##D # now gamlss
> ##D # AR1 
> ##D t1 <- gamlss(follicles~re(fixed=~sin(2*pi*Time)+cos(2*pi*Time), 
> ##D                          random=pdDiag(~sin(2*pi*Time)),
> ##D                          correlation=corAR1()), data=Ovary)
> ##D plot(fitted(l1)~fitted(t1))
> ##D # ARMA
> ##D t2 <- gamlss(follicles~re(fixed=~sin(2*pi*Time)+cos(2*pi*Time), 
> ##D                           random=pdDiag(~sin(2*pi*Time)),
> ##D                           correlation=corARMA(q=2)), data=Ovary)
> ##D plot(fitted(l2)~fitted(t2))
> ##D AIC(t1,t2)
> ##D wp(t2, ylim.all=1)
> ##D #-------------------------------------------------------------------------------  
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("refit")
> ### * refit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: refit
> ### Title: Refit a GAMLSS model
> ### Aliases: refit
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> refit(h)
GAMLSS-RS iteration 3: Global Deviance = 416.8014 

Family:  c("PO", "Poisson") 
Fitting method: RS() 

Call:  gamlss(formula = y ~ poly(x, 3) + qrt, family = PO,  
    data = aids, start.from = h, iter = 2, n.cyc = 40) 

Mu Coefficients:
(Intercept)  poly(x, 3)1  poly(x, 3)2  poly(x, 3)3         qrt2         qrt3  
   4.814473     8.256092    -3.353310     0.938816    -0.156381     0.009986  
       qrt4  
  -0.115705  

 Degrees of Freedom for the fit: 7 Residual Deg. of Freedom   38 
Global Deviance:     416.801 
            AIC:     430.801 
            SBC:     443.448 
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("residuals.gamlss")
> ### * residuals.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residuals.gamlss
> ### Title: Extract Residuals from GAMLSS model
> ### Aliases: residuals.gamlss
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=NBI, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 383.4541 
GAMLSS-RS iteration 2: Global Deviance = 381.7155 
GAMLSS-RS iteration 3: Global Deviance = 381.7145 
GAMLSS-RS iteration 4: Global Deviance = 381.7145 
> plot(aids$x,resid(h))
> plot(aids$x,resid(h,"sigma") )
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("ri")
> ### * ri
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ri
> ### Title: Specify ridge or lasso Regression within a GAMLSS Formula
> ### Aliases: ri
> ### Keywords: regression
> 
> ### ** Examples
> 
> # USAIR DATA
> # standarise data 1-------------------------------------------------------------
> # ridge
> m1<- gamlss(y~ri(x.vars=c("x1","x2","x3","x4","x5","x6")), 
+             data=usair)
GAMLSS-RS iteration 1: Global Deviance = 333.9989 
GAMLSS-RS iteration 2: Global Deviance = 333.8408 
GAMLSS-RS iteration 3: Global Deviance = 333.8408 
> # lasso
> m2<- gamlss(y~ri(x.vars=c("x1","x2","x3","x4","x5","x6"), Lp=1), 
+      data=usair)
GAMLSS-RS iteration 1: Global Deviance = 330.5822 
GAMLSS-RS iteration 2: Global Deviance = 330.5765 
GAMLSS-RS iteration 3: Global Deviance = 330.5765 
> # best subset
> m3<- gamlss(y~ri(x.vars=c("x1","x2","x3","x4","x5","x6"), Lp=0), 
+      data=usair)
GAMLSS-RS iteration 1: Global Deviance = 344.5041 
GAMLSS-RS iteration 2: Global Deviance = 344.5041 
> #--------  plotting the coefficients
> op <- par(mfrow=c(3,1))
> plot(getSmo(m1)) #
> plot(getSmo(m2))
> plot(getSmo(m3))
> par(op)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("rqres.plot")
> ### * rqres.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rqres.plot
> ### Title: Creating and Plotting Randomized Quantile Residuals
> ### Aliases: rqres.plot get.rqres
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids) # fitting a model from a discrete distribution 
> h<-gamlss(y~pb(x)+qrt, family=NBI, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 373.1785 
GAMLSS-RS iteration 2: Global Deviance = 366.4869 
GAMLSS-RS iteration 3: Global Deviance = 366.9278 
GAMLSS-RS iteration 4: Global Deviance = 366.9262 
GAMLSS-RS iteration 5: Global Deviance = 366.9258 
> plot(h)
******************************************************************
	 Summary of the Randomised Quantile Residuals
                           mean   =  -0.007039848 
                       variance   =  0.9774954 
               coef. of skewness  =  -0.5641557 
               coef. of kurtosis  =  2.835459 
Filliben correlation coefficient  =  0.9842437 
******************************************************************
> # plot qq- plots from 6 realization of the randomized quantile residuals
> rqres.plot(h) 
> # a worm-plot of the medians from 10 realizations
> rqres.plot(h,howmany=40,plot="all") # 
> 
> 
> 
> cleanEx()
> nameEx("rvcov")
> ### * rvcov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvcov
> ### Title: Robust Variance-Covariance matrix of the parameters from a
> ###   fitted GAMLSS model
> ### Aliases: rvcov get.K
> ### Keywords: regression
> 
> ### ** Examples
> 
> # gererate from a gamma distribution 
> Y <- rGA(200, mu=1, sigma=2)
> hist(Y)
> # fitting the wrong model i.e. sigma=1 
> m1 <- gamlss(Y~1, family=EXP) 
GAMLSS-RS iteration 1: Global Deviance = 363.1608 
GAMLSS-RS iteration 2: Global Deviance = 363.1608 
> # the conventinal se is too precise 
> vcov(m1, type="se")
(Intercept) 
 0.07071067 
> # the sandwich se is wider  
> rvcov(m1, type="se") 
(Intercept) 
  0.1346231 
> # fitting the correct model 
>  m2 <- gamlss(Y~1, family=GA)
GAMLSS-RS iteration 1: Global Deviance = 29.4637 
GAMLSS-RS iteration 2: Global Deviance = 29.4637 
>  vcov(m2, type="se")
(Intercept) (Intercept) 
 0.12848391  0.03950732 
>  rvcov(m2, type="se")
(Intercept) (Intercept) 
 0.13496260  0.03799115 
> # similar stadard errors
> # also obtained using 
> vcov(m2, type="se", robust=TRUE)
(Intercept) (Intercept) 
 0.13496260  0.03799115 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("stepGAIC")
> ### * stepGAIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stepGAIC
> ### Title: Choose a model by GAIC in a Stepwise Algorithm
> ### Aliases: stepGAIC stepGAIC.CH stepGAIC.VR stepGAICAll.A stepGAICAll.B
> ###   drop1All add1All
> ### Keywords: regression
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(usair)
> ##D # -----------------------------------------------------------------------------
> ##D #  null model 
> ##D mod0<-gamlss(y~1, data=usair, family=GA)
> ##D #  all the explanatotory variables x1:x6 fitted linearly 
> ##D mod1<-gamlss(y~., data=usair, family=GA)
> ##D #-------------------------------------------------------------------------------
> ##D # droping terms 
> ##D dropterm(mod1)
> ##D # with chi-square information
> ##D drop1(mod1)
> ##D # for parallel computations use something like 
> ##D nC <- detectCores()
> ##D drop1(mod1, parallel="snow",  ncpus=nC)
> ##D drop1(mod1, parallel="multicore",  ncpus=nC)
> ##D #------------------------------------------------------------------------------
> ##D # adding terms
> ##D addterm(mod0, scope=as.formula(paste("~", paste(names(usair[-1]),
> ##D                   collapse="+"),sep="")))
> ##D # with chi-square information
> ##D add1(mod0, scope=as.formula(paste("~", paste(names(usair[-1]),
> ##D                   collapse="+"),sep="")))
> ##D # for parallel computations 
> ##D nC <- detectCores()
> ##D add1(mod0, scope=as.formula(paste("~", paste(names(usair[-1]),
> ##D                   collapse="+"),sep="")), parallel="snow",  ncpus=nC)
> ##D #------------------------------------------------------------------------------
> ##D #------------------------------------------------------------------------------
> ##D # stepGAIC 
> ##D # find the best subset for the mu
> ##D mod2 <- stepGAIC(mod1)
> ##D mod2$anova
> ##D #--------------------------------------------------------------
> ##D # for parallel computations 
> ##D mod21 <- stepGAIC(mod1, , parallel="snow",  ncpus=nC)
> ##D #--------------------------------------------------------------
> ##D # find the best subset for sigma
> ##D mod3<-stepGAIC(mod2, what="sigma", scope=~x1+x2+x3+x4+x5+x6)
> ##D mod3$anova
> ##D #--------------------------------------------------------------
> ##D # find the best model using pb() smoother 
> ##D #only three variables are used here for simplicity
> ##D mod20<-stepGAIC(mod0, scope=list(lower=~1, upper=~pb(x1)+pb(x2)+pb(x5)))
> ##D edf(mod20)
> ##D # note that x1 and x2 enter linearly
> ##D #------------------------------------------------------------------------------
> ##D #------------------------------------------------------------------------------
> ##D # the stepGAIC.CH function (no parallel here)
> ##D # creating a scope from the usair model frame 
> ##D gs<-gamlss.scope(model.frame(y~x1+x2+x3+x4+x5+x6, data=usair))
> ##D gs 
> ##D mod5<-stepGAIC.CH(mod0,gs)
> ##D mod5$anova
> ##D #-----------------------------------------------------------------------------=-
> ##D #------------------------------------------------------------------------------
> ##D # now stepGAICAll.A    
> ##D mod7<-stepGAICAll.A(mod0, scope=list(lower=~1,upper=~x1+x2+x3+x4+x5+x6)) 
> ##D #-----------------------------------------------------------------------------=-
> ##D #------------------------------------------------------------------------------
> ##D # now  stepGAICAll.B
> ##D drop1All(mod1, parallel="snow",  ncpus=nC)
> ##D add1All(mod0, scope=as.formula(paste("~", paste(names(usair[-1]),
> ##D                   collapse="+"))), parallel="snow",  ncpus=nC)
> ##D mod8<-stepGAICAll.B(mod0, scope=list(lower=~1,upper=~x1+x2+x3+x4+x5+x6))
> ##D #-----------------------------------------------------------------------------=-
> ##D #------------------------------------------------------------------------------
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("summary.gamlss")
> ### * summary.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.gamlss
> ### Title: Summarizes a GAMLSS fitted model
> ### Aliases: summary.gamlss
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> h<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids) # 
GAMLSS-RS iteration 1: Global Deviance = 416.8014 
GAMLSS-RS iteration 2: Global Deviance = 416.8014 
> summary(h)
******************************************************************
Family:  c("PO", "Poisson") 

Call:  gamlss(formula = y ~ poly(x, 3) + qrt, family = PO,      data = aids) 

Fitting method: RS() 

------------------------------------------------------------------
Mu link function:  log
Mu Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept)  4.814473   0.028207 170.685  < 2e-16 ***
poly(x, 3)1  8.256092   0.194363  42.478  < 2e-16 ***
poly(x, 3)2 -3.353310   0.167400 -20.032  < 2e-16 ***
poly(x, 3)3  0.938816   0.109370   8.584 1.99e-10 ***
qrt2        -0.156381   0.030597  -5.111 9.38e-06 ***
qrt3         0.009986   0.028680   0.348 0.729615    
qrt4        -0.115705   0.029112  -3.974 0.000305 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

------------------------------------------------------------------
No. of observations in the fit:  45 
Degrees of Freedom for the fit:  7
      Residual Deg. of Freedom:  38 
                      at cycle:  2 
 
Global Deviance:     416.8014 
            AIC:     430.8014 
            SBC:     443.4481 
******************************************************************
> rm(h)
> 
> 
> 
> cleanEx()
> nameEx("term.plot")
> ### * term.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: term.plot
> ### Title: Plot regression terms for a specified parameter of a fitted
> ###   GAMLSS object
> ### Aliases: term.plot
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> a<-gamlss(y~pb(x)+qrt,data=aids,family=NBI)
GAMLSS-RS iteration 1: Global Deviance = 373.1785 
GAMLSS-RS iteration 2: Global Deviance = 366.4869 
GAMLSS-RS iteration 3: Global Deviance = 366.9278 
GAMLSS-RS iteration 4: Global Deviance = 366.9262 
GAMLSS-RS iteration 5: Global Deviance = 366.9258 
> term.plot(a, pages=1)
> rm(a)
> 
> 
> 
> cleanEx()
> nameEx("update.gamlss")
> ### * update.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update.gamlss
> ### Title: Update and Re-fit a GAMLSS Model
> ### Aliases: update.gamlss
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(aids)
> # fit a poisson model
> h.po <-gamlss(y~pb(x)+qrt, family=PO, data=aids) 
GAMLSS-RS iteration 1: Global Deviance = 387.1462 
GAMLSS-RS iteration 2: Global Deviance = 387.1547 
GAMLSS-RS iteration 3: Global Deviance = 387.1547 
> # update with a negative binomial
> h.nb <-update(h.po, family=NBI) 
GAMLSS-RS iteration 1: Global Deviance = 373.1785 
GAMLSS-RS iteration 2: Global Deviance = 366.4869 
GAMLSS-RS iteration 3: Global Deviance = 366.9278 
GAMLSS-RS iteration 4: Global Deviance = 366.9262 
GAMLSS-RS iteration 5: Global Deviance = 366.9258 
> # update the smoothing 
> h.nb1 <-update(h.nb,~cs(x,8)+qrt) 
GAMLSS-RS iteration 1: Global Deviance = 362.9323 
GAMLSS-RS iteration 2: Global Deviance = 359.1328 
GAMLSS-RS iteration 3: Global Deviance = 359.2289 
GAMLSS-RS iteration 4: Global Deviance = 359.2342 
GAMLSS-RS iteration 5: Global Deviance = 359.2348 
> # remove qrt
> h.nb2 <-update(h.nb1,~.-qrt)
GAMLSS-RS iteration 1: Global Deviance = 379.5915 
GAMLSS-RS iteration 2: Global Deviance = 379.5296 
GAMLSS-RS iteration 3: Global Deviance = 379.5628 
GAMLSS-RS iteration 4: Global Deviance = 379.5626 
> # put back qrt take log of y and fit a normal distribution 
> h.nb3 <-update(h.nb1,log(.)~.+qrt, family=NO) 
GAMLSS-RS iteration 1: Global Deviance = -42.3446 
GAMLSS-RS iteration 2: Global Deviance = -42.3446 
> # verify that it is the same 
> h.no<-gamlss(log(y)~cs(x,8)+qrt,data=aids )
GAMLSS-RS iteration 1: Global Deviance = -42.3446 
GAMLSS-RS iteration 2: Global Deviance = -42.3446 
> 
> 
> 
> cleanEx()
> nameEx("wp")
> ### * wp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wp
> ### Title: Worm plot
> ### Aliases: wp
> ### Keywords: regression
> 
> ### ** Examples
> 
> data(abdom)
> # with data
> a<-gamlss(y~pb(x),sigma.fo=~pb(x,1),family=LO,data=abdom)
GAMLSS-RS iteration 1: Global Deviance = 4782.108 
GAMLSS-RS iteration 2: Global Deviance = 4778.814 
GAMLSS-RS iteration 3: Global Deviance = 4778.823 
GAMLSS-RS iteration 4: Global Deviance = 4778.823 
> wp(a)
> coeff1<-wp(a,xvar=x)
number of missing points from plot= 0  out of  154 
number of missing points from plot= 0  out of  153 
number of missing points from plot= 0  out of  156 
number of missing points from plot= 0  out of  147 
> coeff1
$classes
      [,1]  [,2]
[1,] 12.22 20.07
[2,] 20.07 27.07
[3,] 27.07 34.50
[4,] 34.50 42.50

$coef
             [,1]         [,2]        [,3]         [,4]
[1,]  0.024409473  0.042068400 0.017931945 -0.019071435
[2,] -0.073757117  0.009892568 0.051223210 -0.018236217
[3,]  0.014275046  0.058294219 0.031727065 -0.008216481
[4,] -0.009850558 -0.017757455 0.004274613  0.003188090

> ## Not run: 
> ##D # no data argument
> ##D b <- gamlss(abdom$y~pb(abdom$x),sigma.fo=~pb(abdom$x),family=LO)
> ##D wp(b) 
> ##D wp(b, xvar=abdom$x)# not wp(b, xvar=x)
> ##D # using  the argument resid
> ##D # this will work
> ##D wp(resid=resid(a),  xvar=abdom$x)
> ##D # not this
> ##D # wp(resid=resid(a),  xvar=x)
> ##D # this example uses the rent data
> ##D m1 <- gamlss(R~pb(Fl)+pb(A)+loc, sigma.fo=~pb(Fl)+pb(A), data=rent, family=GA)
> ##D # a single worm plot
> ##D wp(m1, ylim.all=0.5)
> ##D # a single continuous x variable 
> ##D wp(m1, xvar=Fl, ylim.worm=.8)
> ##D # a single x variable changing the default number of intervals
> ##D wp(m1, xvar=Fl, ylim.worm=1.5, n.inter=9)
> ##D # different x variable changing the default number of intervals
> ##D B1<-wp(m1, xvar=A, ylim.worm=1.2, n.inter=9) 
> ##D B1
> ##D # the number five plot has intervals 
> ##D # [5,] 1957.5 1957.5 
> ##D # rather disappoining 
> ##D # try formula for xvar
> ##D wp(m1, xvar=~A, ylim.worm=1.2, n.inter=9)
> ##D # better in this case using formula
> ##D # now using a factor included in the model
> ##D wp(m1, xvar=~loc, ylim.worm=1.2, n.inter=9)
> ##D # using a factor notin the model
> ##D wp(m1, xvar=~B, ylim.worm=1.5, n.inter=9)
> ##D # level 2 (with B=1) did not fit well
> ##D # trying two continuous variable 
> ##D wp(m1, xvar=~Fl*A, ylim.worm=1.5, n.inter=4)
> ##D # one continuous and one categorical 
> ##D wp(m1, xvar=~Fl*loc, ylim.worm=1.5, n.inter=4)
> ##D # two categorical
> ##D wp(m1, xvar=~B*loc, ylim.worm=1.5, n.inter=4)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("z.scores")
> ### * z.scores
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: z.scores
> ### Title: Z-scores for lms objects
> ### Aliases: z.scores
> ### Keywords: regression
> 
> ### ** Examples
> 
> ## Not run: 
> ##D IND<-sample.int(7040, 1000, replace=FALSE)
> ##D db1 <- db[IND,]
> ##D plot(head~age, data=db1)
> ##D m0 <-  lms(head, age, data=db1,trans.x=TRUE )
> ##D z.scores(m0, x=c(2,15,30,40),y=c(45,50,56,63))
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  20.97 28.806 17.38 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
