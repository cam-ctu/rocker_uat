
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "cyclocomp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('cyclocomp')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cyclocomp")
> ### * cyclocomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cyclocomp
> ### Title: Cyclomatic Complexity of R Code
> ### Aliases: cyclocomp cyclocomp-package cyclocomp_q
> 
> ### ** Examples
> 
> ## Supply a function
> cyclocomp(
+   function(arg) { calulate(this); and(that) }
+ )
[1] 1
> cyclocomp(ls)
[1] 10
> cyclocomp(cyclocomp)
[1] 1
> 
> ## Or a quoted expression
> cyclocomp(quote( if (condition) "foo" else "bar" ))
[1] 2
> 
> ## cyclocomp_q quotes the expression for you
> cyclocomp_q(while (condition) { loop })
[1] 3
> 
> ## Complexity of individual control flow constructs
> cyclocomp(quote({
+   if (condition) this
+ }))
[1] 2
> 
> cyclocomp(quote({
+   if (condition) this else that
+ }))
[1] 2
> 
> cyclocomp(quote({
+   for (var in seq) expr
+ }))
[1] 3
> 
> cyclocomp(quote({
+   while (cond) expr
+ }))
[1] 3
> 
> cyclocomp(quote({
+   repeat expr
+ }))
[1] 2
> 
> cyclocomp(quote({
+   for (var in seq) {
+     this
+     break
+     that
+   }
+ }))
[1] 4
> 
> cyclocomp(quote({
+   for (var in seq) {
+     this
+     next
+     that
+   }
+ }))
[1] 4
> 
> 
> 
> cleanEx()
> nameEx("cyclocomp_package")
> ### * cyclocomp_package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cyclocomp_package
> ### Title: Cyclomatic complexity of the objects in an installed package
> ### Aliases: cyclocomp_package
> 
> ### ** Examples
> 
> ## They might take a while to run
> ## Not run: 
> ##D cyclocomp_package("grDevices")
> ##D cyclocomp_package("methods")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.13 0.017 0.147 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
