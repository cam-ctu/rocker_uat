
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "minqa"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('minqa')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bobyqa")
> ### * bobyqa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bobyqa
> ### Title: An R interface to the bobyqa implementation of Powell
> ### Aliases: bobyqa
> ### Keywords: nonlinear optimize
> 
> ### ** Examples
> 
> fr <- function(x) {   ## Rosenbrock Banana function
+     100 * (x[2] - x[1]^2)^2 + (1 - x[1])^2
+ }
> (x1 <- bobyqa(c(1, 2), fr, lower = c(0, 0), upper = c(4, 4)))
parameter estimates: 0.999999968901681, 0.999999928305543 
objective: 9.98796325533312e-15 
number of function evaluations: 341 
> ## => optimum at c(1, 1) with fval = 0
> 
> str(x1)  # see that the error code and msg are returned
List of 5
 $ par  : num [1:2] 1 1
 $ fval : num 9.99e-15
 $ feval: int 341
 $ ierr : int 0
 $ msg  : chr "Normal exit from bobyqa"
 - attr(*, "class")= chr [1:2] "bobyqa" "minqa"
> 
> # check the error exits
> # too many iterations
> x1e<-bobyqa(c(1, 2), fr, lower = c(0, 0), upper = c(4, 4), control = list(maxfun=50))
> str(x1e)
List of 5
 $ par  : num [1:2] 1.34 1.81
 $ fval : num 0.121
 $ feval: int 50
 $ ierr : num 1
 $ msg  : chr "bobyqa -- maximum number of function evaluations exceeded"
 - attr(*, "class")= chr [1:2] "bobyqa" "minqa"
> 
> # Throw an error because bounds too tight
> x1b<-bobyqa(c(4,4), fr, lower = c(0, 3.9999999), upper = c(4, 4))
Warning in bobyqa(c(4, 4), fr, lower = c(0, 3.9999999), upper = c(4, 4)) :
  All upper - lower must be >= 2*rhobeg. Changing rhobeg
> str(x1b)
List of 5
 $ par  : num [1:2] 2 4
 $ fval : num 0.999
 $ feval: int 92
 $ ierr : int 0
 $ msg  : chr "Normal exit from bobyqa"
 - attr(*, "class")= chr [1:2] "bobyqa" "minqa"
> 
> # Throw an error because npt is too small -- does NOT work as of 2010-8-10 as 
> #    minqa.R seems to force a reset.
> x1n<-bobyqa(c(2,2), fr, lower = c(0, 0), upper = c(4, 4), control=list(npt=1))
> str(x1n)
List of 5
 $ par  : num [1:2] 1 1
 $ fval : num 3.05e-12
 $ feval: int 484
 $ ierr : int 0
 $ msg  : chr "Normal exit from bobyqa"
 - attr(*, "class")= chr [1:2] "bobyqa" "minqa"
> 
> # To add if we can find them -- examples of ierr = 3 and ierr = 5.
> 
> 
> 
> 
> cleanEx()
> nameEx("newuoa")
> ### * newuoa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: newuoa
> ### Title: An R interface to the NEWUOA implementation of Powell
> ### Aliases: newuoa
> ### Keywords: nonlinear optimize
> 
> ### ** Examples
> 
> fr <- function(x) {   ## Rosenbrock Banana function
+     100 * (x[2] - x[1]^2)^2 + (1 - x[1])^2
+ }
> (x2 <- newuoa(c(1, 2), fr))
parameter estimates: 1.00000116212176, 1.00000231682727 
objective: 1.35602908489591e-12 
number of function evaluations: 136 
> ## => optimum at c(1, 1) with fval = 0
> 
> # check the error exits
> # too many iterations
> x2e<-newuoa(c(1, 2), fr, control = list(maxfun=50))
> str(x2e)
List of 5
 $ par  : num [1:2] 1.37 1.89
 $ fval : num 0.139
 $ feval: int 50
 $ ierr : num 1
 $ msg  : chr "newuoa -- maximum number of function evaluations exceeded"
 - attr(*, "class")= chr [1:2] "newuoa" "minqa"
> 
> # Throw an error because npt is too small -- does NOT work as of 2010-8-10 as 
> #    minqa.R seems to force a reset.
> x2n<-newuoa(c(2,2), fr, control=list(npt=1))
> str(x2n)
List of 5
 $ par  : num [1:2] 1 1
 $ fval : num 1.43e-15
 $ feval: int 193
 $ ierr : int 0
 $ msg  : chr "Normal exit from newuoa"
 - attr(*, "class")= chr [1:2] "newuoa" "minqa"
> 
> # To add if we can find them -- examples of ierr = 3 and ierr = 5.
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("uobyqa")
> ### * uobyqa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: uobyqa
> ### Title: An R interface to the uobyqa implementation of Powell
> ### Aliases: uobyqa
> ### Keywords: nonlinear optimize
> 
> ### ** Examples
> 
> fr <- function(x) {   ## Rosenbrock Banana function
+     100 * (x[2] - x[1]^2)^2 + (1 - x[1])^2
+ }
> (x3 <- uobyqa(c(1, 2), fr))
parameter estimates: 0.999999999966711, 0.999999999942818 
objective: 9.93797513608589e-21 
number of function evaluations: 61 
> ## => optimum at c(1, 1) with fval = 0
> # check the error exits
> # too many iterations
> x3e<-uobyqa(c(1, 2), fr, control = list(maxfun=50))
> str(x3e)
List of 5
 $ par  : num [1:2] 1 1
 $ fval : num 1.79e-08
 $ feval: int 50
 $ ierr : num 1
 $ msg  : chr "uobyqa -- maximum number of function evaluations exceeded"
 - attr(*, "class")= chr [1:2] "uobyqa" "minqa"
> 
> 
> # To add if we can find them -- examples of ierr = 3.
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.141 0.009 0.15 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
