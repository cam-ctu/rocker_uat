
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "readxl"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('readxl')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cell-specification")
> ### * cell-specification
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cell-specification
> ### Title: Specify cells for reading
> ### Aliases: cell-specification cell_limits cell_rows cell_cols anchored
> 
> ### ** Examples
> 
> path <- readxl_example("geometry.xls")
> ## Rows 1 and 2 are empty (as are rows 7 and higher)
> ## Column 1 aka "A" is empty (as are columns 5 of "E" and higher)
> 
> # By default, the populated data cells are "shrink-wrapped" into a
> # minimal data frame
> read_excel(path)
# A tibble: 3 × 3
  B3    C3    D3   
  <chr> <chr> <chr>
1 B4    C4    D4   
2 B5    C5    D5   
3 B6    C6    D6   
> 
> # Specific rectangle that is subset of populated cells, possibly improper
> read_excel(path, range = "B3:D6")
# A tibble: 3 × 3
  B3    C3    D3   
  <chr> <chr> <chr>
1 B4    C4    D4   
2 B5    C5    D5   
3 B6    C6    D6   
> read_excel(path, range = "C3:D5")
# A tibble: 2 × 2
  C3    D3   
  <chr> <chr>
1 C4    D4   
2 C5    D5   
> 
> # Specific rectangle that forces inclusion of unpopulated cells
> read_excel(path, range = "A3:D5")
New names:
• `` -> `...1`
# A tibble: 2 × 4
  ...1  B3    C3    D3   
  <lgl> <chr> <chr> <chr>
1 NA    B4    C4    D4   
2 NA    B5    C5    D5   
> read_excel(path, range = "A4:E5")
New names:
• `` -> `...1`
• `` -> `...5`
# A tibble: 1 × 5
  ...1  B4    C4    D4    ...5 
  <lgl> <chr> <chr> <chr> <lgl>
1 NA    B5    C5    D5    NA   
> read_excel(path, range = "C5:E7")
New names:
• `` -> `...3`
# A tibble: 2 × 3
  C5    D5    ...3 
  <chr> <chr> <lgl>
1 C6    D6    NA   
2 <NA>  <NA>  NA   
> 
> # Anchor a rectangle of specified size at a particular cell
> read_excel(path, range = anchored("C4", dim = c(3, 2)), col_names = FALSE)
New names:
• `` -> `...1`
• `` -> `...2`
# A tibble: 3 × 2
  ...1  ...2 
  <chr> <chr>
1 C4    D4   
2 C5    D5   
3 C6    D6   
> 
> # Specify only the rows
> read_excel(path, range = cell_rows(3:5))
# A tibble: 2 × 3
  B3    C3    D3   
  <chr> <chr> <chr>
1 B4    C4    D4   
2 B5    C5    D5   
> ## is equivalent to
> read_excel(path, range = cell_rows(c(3, 5)))
# A tibble: 2 × 3
  B3    C3    D3   
  <chr> <chr> <chr>
1 B4    C4    D4   
2 B5    C5    D5   
> 
> # Specify only the columns by column number or letter
> read_excel(path, range = cell_cols("C:D"))
# A tibble: 3 × 2
  C3    D3   
  <chr> <chr>
1 C4    D4   
2 C5    D5   
3 C6    D6   
> read_excel(path, range = cell_cols(2))
# A tibble: 3 × 1
  B3   
  <chr>
1 B4   
2 B5   
3 B6   
> 
> # Specify exactly one row or column bound
> read_excel(path, range = cell_rows(c(5, NA)))
# A tibble: 1 × 3
  B5    C5    D5   
  <chr> <chr> <chr>
1 B6    C6    D6   
> read_excel(path, range = cell_rows(c(NA, 4)))
New names:
• `` -> `...1`
• `` -> `...2`
• `` -> `...3`
# A tibble: 3 × 3
  ...1  ...2  ...3 
  <chr> <chr> <chr>
1 <NA>  <NA>  <NA> 
2 B3    C3    D3   
3 B4    C4    D4   
> read_excel(path, range = cell_cols(c("C", NA)))
# A tibble: 3 × 2
  C3    D3   
  <chr> <chr>
1 C4    D4   
2 C5    D5   
3 C6    D6   
> read_excel(path, range = cell_cols(c(NA, 2)))
New names:
• `` -> `...1`
# A tibble: 3 × 2
  ...1  B3   
  <lgl> <chr>
1 NA    B4   
2 NA    B5   
3 NA    B6   
> 
> # General open rectangles
> # upper left = C4, everything else unspecified
> read_excel(path, range = cell_limits(c(4, 3), c(NA, NA)))
# A tibble: 2 × 2
  C4    D4   
  <chr> <chr>
1 C5    D5   
2 C6    D6   
> # upper right = D4, everything else unspecified
> read_excel(path, range = cell_limits(c(4, NA), c(NA, 4)))
New names:
• `` -> `...1`
# A tibble: 2 × 4
  ...1  B4    C4    D4   
  <lgl> <chr> <chr> <chr>
1 NA    B5    C5    D5   
2 NA    B6    C6    D6   
> 
> 
> 
> 
> cleanEx()
> nameEx("excel_format")
> ### * excel_format
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: excel_format
> ### Title: Determine file format
> ### Aliases: excel_format format_from_ext format_from_signature
> 
> ### ** Examples
> 
> files <- c(
+   "a.xlsx",
+   "b.xls",
+   "c.png",
+   file.path(R.home("doc"), "html", "logo.jpg"),
+   readxl_example("clippy.xlsx"),
+   readxl_example("deaths.xls")
+ )
> excel_format(files)
[1] "xlsx" "xls"  NA     NA     "xlsx" "xls" 
> 
> 
> 
> cleanEx()
> nameEx("excel_sheets")
> ### * excel_sheets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: excel_sheets
> ### Title: List all sheets in an excel spreadsheet
> ### Aliases: excel_sheets
> 
> ### ** Examples
> 
> excel_sheets(readxl_example("datasets.xlsx"))
[1] "mtcars"   "chickwts" "quakes"  
> excel_sheets(readxl_example("datasets.xls"))
[1] "mtcars"   "chickwts" "quakes"  
> 
> # To load all sheets in a workbook, use lapply()
> path <- readxl_example("datasets.xls")
> lapply(excel_sheets(path), read_excel, path = path)
[[1]]
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows

[[2]]
# A tibble: 71 × 2
   weight feed     
    <dbl> <chr>    
 1    179 horsebean
 2    160 horsebean
 3    136 horsebean
 4    227 horsebean
 5    217 horsebean
 6    168 horsebean
 7    108 horsebean
 8    124 horsebean
 9    143 horsebean
10    140 horsebean
# ℹ 61 more rows

[[3]]
# A tibble: 1,000 × 5
     lat  long depth   mag stations
   <dbl> <dbl> <dbl> <dbl>    <dbl>
 1 -20.4  182.   562   4.8       41
 2 -20.6  181.   650   4.2       15
 3 -26    184.    42   5.4       43
 4 -18.0  182.   626   4.1       19
 5 -20.4  182.   649   4         11
 6 -19.7  184.   195   4         12
 7 -11.7  166.    82   4.8       43
 8 -28.1  182.   194   4.4       15
 9 -28.7  182.   211   4.7       35
10 -17.5  180.   622   4.3       19
# ℹ 990 more rows

> 
> 
> 
> cleanEx()
> nameEx("read_excel")
> ### * read_excel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_excel
> ### Title: Read xls and xlsx files
> ### Aliases: read_excel read_xls read_xlsx
> 
> ### ** Examples
> 
> datasets <- readxl_example("datasets.xlsx")
> read_excel(datasets)
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> 
> # Specify sheet either by position or by name
> read_excel(datasets, 2)
# A tibble: 71 × 2
   weight feed     
    <dbl> <chr>    
 1    179 horsebean
 2    160 horsebean
 3    136 horsebean
 4    227 horsebean
 5    217 horsebean
 6    168 horsebean
 7    108 horsebean
 8    124 horsebean
 9    143 horsebean
10    140 horsebean
# ℹ 61 more rows
> read_excel(datasets, "mtcars")
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> 
> # Skip rows and use default column names
> read_excel(datasets, skip = 10, col_names = FALSE)
New names:
• `` -> `...1`
• `` -> `...2`
• `` -> `...3`
• `` -> `...4`
• `` -> `...5`
• `` -> `...6`
• `` -> `...7`
• `` -> `...8`
• `` -> `...9`
• `` -> `...10`
• `` -> `...11`
# A tibble: 23 × 11
    ...1  ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9 ...10 ...11
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  19.2     6 168.    123  3.92  3.44  18.3     1     0     4     4
 2  17.8     6 168.    123  3.92  3.44  18.9     1     0     4     4
 3  16.4     8 276.    180  3.07  4.07  17.4     0     0     3     3
 4  17.3     8 276.    180  3.07  3.73  17.6     0     0     3     3
 5  15.2     8 276.    180  3.07  3.78  18       0     0     3     3
 6  10.4     8 472     205  2.93  5.25  18.0     0     0     3     4
 7  10.4     8 460     215  3     5.42  17.8     0     0     3     4
 8  14.7     8 440     230  3.23  5.34  17.4     0     0     3     4
 9  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
10  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
# ℹ 13 more rows
> 
> # Recycle a single column type
> read_excel(datasets, col_types = "text")
# A tibble: 32 × 11
   mpg               cyl   disp  hp    drat  wt    qsec  vs    am    gear  carb 
   <chr>             <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>
 1 21                6     160   110   3.9   2.62  16.46 0     1     4     4    
 2 21                6     160   110   3.9   2.875 17.02 0     1     4     4    
 3 22.8              4     108   93    3.85  2.31… 18.61 1     1     4     1    
 4 21.4              6     258   110   3.08  3.21… 19.4… 1     0     3     1    
 5 18.7              8     360   175   3.15  3.44  17.02 0     0     3     2    
 6 18.1000000000000… 6     225   105   2.76  3.46  20.22 1     0     3     1    
 7 14.3              8     360   245   3.21  3.57  15.84 0     0     3     4    
 8 24.4              4     146.… 62    3.69  3.19  20    1     0     4     2    
 9 22.8              4     140.… 95    3.92  3.15  22.9  1     0     4     2    
10 19.2              6     167.6 123   3.92  3.44  18.3  1     0     4     4    
# ℹ 22 more rows
> 
> # Specify some col_types and guess others
> read_excel(
+   readxl_example("deaths.xlsx"),
+   skip = 4, n_max = 10, col_names = TRUE,
+   col_types = c("text", "text", "guess", "guess", "guess", "guess")
+ )
# A tibble: 10 × 6
   Name      Profession   Age `Has kids` `Date of birth`     `Date of death`    
   <chr>     <chr>      <dbl> <lgl>      <dttm>              <dttm>             
 1 David Bo… musician      69 TRUE       1947-01-08 00:00:00 2016-01-10 00:00:00
 2 Carrie F… actor         60 TRUE       1956-10-21 00:00:00 2016-12-27 00:00:00
 3 Chuck Be… musician      90 TRUE       1926-10-18 00:00:00 2017-03-18 00:00:00
 4 Bill Pax… actor         61 TRUE       1955-05-17 00:00:00 2017-02-25 00:00:00
 5 Prince    musician      57 TRUE       1958-06-07 00:00:00 2016-04-21 00:00:00
 6 Alan Ric… actor         69 FALSE      1946-02-21 00:00:00 2016-01-14 00:00:00
 7 Florence… actor         82 TRUE       1934-02-14 00:00:00 2016-11-24 00:00:00
 8 Harper L… author        89 FALSE      1926-04-28 00:00:00 2016-02-19 00:00:00
 9 Zsa Zsa … actor         99 TRUE       1917-02-06 00:00:00 2016-12-18 00:00:00
10 George M… musician      53 FALSE      1963-06-25 00:00:00 2016-12-25 00:00:00
> 
> # Accomodate a column with disparate types via col_type = "list"
> df <- read_excel(readxl_example("clippy.xlsx"), col_types = c("text", "list"))
> df
# A tibble: 4 × 2
  name                 value     
  <chr>                <list>    
1 Name                 <chr [1]> 
2 Species              <chr [1]> 
3 Approx date of death <dttm [1]>
4 Weight in grams      <dbl [1]> 
> df$value
[[1]]
[1] "Clippy"

[[2]]
[1] "paperclip"

[[3]]
[1] "2007-01-01 UTC"

[[4]]
[1] 0.9

> sapply(df$value, class)
[[1]]
[1] "character"

[[2]]
[1] "character"

[[3]]
[1] "POSIXct" "POSIXt" 

[[4]]
[1] "numeric"

> 
> # Limit the number of data rows read
> read_excel(datasets, n_max = 3)
# A tibble: 3 × 11
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1  21       6   160   110  3.9   2.62  16.5     0     1     4     4
2  21       6   160   110  3.9   2.88  17.0     0     1     4     4
3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1
> 
> # Read from an Excel range using A1 or R1C1 notation
> read_excel(datasets, range = "C1:E7")
# A tibble: 6 × 3
   disp    hp  drat
  <dbl> <dbl> <dbl>
1   160   110  3.9 
2   160   110  3.9 
3   108    93  3.85
4   258   110  3.08
5   360   175  3.15
6   225   105  2.76
> read_excel(datasets, range = "R1C2:R2C5")
# A tibble: 1 × 4
    cyl  disp    hp  drat
  <dbl> <dbl> <dbl> <dbl>
1     6   160   110   3.9
> 
> # Specify the sheet as part of the range
> read_excel(datasets, range = "mtcars!B1:D5")
# A tibble: 4 × 3
    cyl  disp    hp
  <dbl> <dbl> <dbl>
1     6   160   110
2     6   160   110
3     4   108    93
4     6   258   110
> 
> # Read only specific rows or columns
> read_excel(datasets, range = cell_rows(102:151), col_names = FALSE)
# A tibble: 0 × 0
> read_excel(datasets, range = cell_cols("B:D"))
# A tibble: 32 × 3
     cyl  disp    hp
   <dbl> <dbl> <dbl>
 1     6  160    110
 2     6  160    110
 3     4  108     93
 4     6  258    110
 5     8  360    175
 6     6  225    105
 7     8  360    245
 8     4  147.    62
 9     4  141.    95
10     6  168.   123
# ℹ 22 more rows
> 
> # Get a preview of column names
> names(read_excel(readxl_example("datasets.xlsx"), n_max = 0))
 [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear"
[11] "carb"
> 
> # exploit full .name_repair flexibility from tibble
> 
> # "universal" names are unique and syntactic
> read_excel(
+   readxl_example("deaths.xlsx"),
+   range = "arts!A5:F15",
+   .name_repair = "universal"
+ )
New names:
• `Has kids` -> `Has.kids`
• `Date of birth` -> `Date.of.birth`
• `Date of death` -> `Date.of.death`
# A tibble: 10 × 6
   Name        Profession   Age Has.kids Date.of.birth       Date.of.death      
   <chr>       <chr>      <dbl> <lgl>    <dttm>              <dttm>             
 1 David Bowie musician      69 TRUE     1947-01-08 00:00:00 2016-01-10 00:00:00
 2 Carrie Fis… actor         60 TRUE     1956-10-21 00:00:00 2016-12-27 00:00:00
 3 Chuck Berry musician      90 TRUE     1926-10-18 00:00:00 2017-03-18 00:00:00
 4 Bill Paxton actor         61 TRUE     1955-05-17 00:00:00 2017-02-25 00:00:00
 5 Prince      musician      57 TRUE     1958-06-07 00:00:00 2016-04-21 00:00:00
 6 Alan Rickm… actor         69 FALSE    1946-02-21 00:00:00 2016-01-14 00:00:00
 7 Florence H… actor         82 TRUE     1934-02-14 00:00:00 2016-11-24 00:00:00
 8 Harper Lee  author        89 FALSE    1926-04-28 00:00:00 2016-02-19 00:00:00
 9 Zsa Zsa Gá… actor         99 TRUE     1917-02-06 00:00:00 2016-12-18 00:00:00
10 George Mic… musician      53 FALSE    1963-06-25 00:00:00 2016-12-25 00:00:00
> 
> # specify name repair as a built-in function
> read_excel(readxl_example("clippy.xlsx"), .name_repair = toupper)
# A tibble: 4 × 2
  NAME                 VALUE    
  <chr>                <chr>    
1 Name                 Clippy   
2 Species              paperclip
3 Approx date of death 39083    
4 Weight in grams      0.9      
> 
> # specify name repair as a custom function
> my_custom_name_repair <- function(nms) tolower(gsub("[.]", "_", nms))
> read_excel(
+   readxl_example("datasets.xlsx"),
+   .name_repair = my_custom_name_repair
+ )
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> 
> # specify name repair as an anonymous function
> read_excel(
+   readxl_example("datasets.xlsx"),
+   sheet = "chickwts",
+   .name_repair = ~ substr(.x, start = 1, stop = 3)
+ )
# A tibble: 71 × 2
     wei fee      
   <dbl> <chr>    
 1   179 horsebean
 2   160 horsebean
 3   136 horsebean
 4   227 horsebean
 5   217 horsebean
 6   168 horsebean
 7   108 horsebean
 8   124 horsebean
 9   143 horsebean
10   140 horsebean
# ℹ 61 more rows
> 
> 
> 
> cleanEx()
> nameEx("readxl_example")
> ### * readxl_example
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readxl_example
> ### Title: Get path to readxl example
> ### Aliases: readxl_example
> 
> ### ** Examples
> 
> readxl_example()
 [1] "clippy.xls"    "clippy.xlsx"   "datasets.xls"  "datasets.xlsx"
 [5] "deaths.xls"    "deaths.xlsx"   "geometry.xls"  "geometry.xlsx"
 [9] "type-me.xls"   "type-me.xlsx" 
> readxl_example("datasets.xlsx")
[1] "/usr/local/lib/R/site-library/readxl/extdata/datasets.xlsx"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.125 0.074 1.204 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
