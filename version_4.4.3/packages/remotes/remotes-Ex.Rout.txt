
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "remotes"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('remotes')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bioc_install_repos")
> ### * bioc_install_repos
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bioc_version
> ### Title: Tools for Bioconductor repositories
> ### Aliases: bioc_version bioc_install_repos
> ### Keywords: internal
> 
> ### ** Examples
> 
> bioc_version()
[1] ‘3.18’
> bioc_version("3.4")
[1] ‘3.6’
> bioc_install_repos()
                                                BioCsoft 
           "https://bioconductor.org/packages/3.18/bioc" 
                                                 BioCann 
"https://bioconductor.org/packages/3.18/data/annotation" 
                                                 BioCexp 
"https://bioconductor.org/packages/3.18/data/experiment" 
                                           BioCworkflows 
      "https://bioconductor.org/packages/3.18/workflows" 
                                               BioCbooks 
          "https://bioconductor.org/packages/3.18/books" 
> 
> 
> 
> cleanEx()
> nameEx("github_refs")
> ### * github_refs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: github_pull
> ### Title: GitHub references
> ### Aliases: github_pull github_release
> 
> ### ** Examples
> 
> github_pull("42")
[1] "42"
attr(,"class")
[1] "github_pull"
> 
> 
> 
> cleanEx()
> nameEx("install_bioc")
> ### * install_bioc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_bioc
> ### Title: Install a development package from the Bioconductor git
> ###   repository
> ### Aliases: install_bioc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_bioc("SummarizedExperiment")
> ##D install_bioc("devel/SummarizedExperiment")
> ##D install_bioc("3.3/SummarizedExperiment")
> ##D install_bioc("SummarizedExperiment#abc123")
> ##D install_bioc("user:password@release/SummarizedExperiment")
> ##D install_bioc("user:password@devel/SummarizedExperiment")
> ##D install_bioc("user:password@SummarizedExperiment#abc123")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_bitbucket")
> ### * install_bitbucket
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_bitbucket
> ### Title: Install a package directly from Bitbucket
> ### Aliases: install_bitbucket
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_bitbucket("sulab/mygene.r@default")
> ##D install_bitbucket("djnavarro/lsr")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_cran")
> ### * install_cran
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_cran
> ### Title: Attempts to install a package from CRAN.
> ### Aliases: install_cran
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_cran("ggplot2")
> ##D install_cran(c("httpuv", "shiny"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_deps")
> ### * install_deps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_deps
> ### Title: Install package dependencies if needed.
> ### Aliases: install_deps
> 
> ### ** Examples
> 
> ## Not run: install_deps(".")
> 
> 
> 
> cleanEx()
> nameEx("install_dev")
> ### * install_dev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_dev
> ### Title: Install the development version of a package
> ### Aliases: install_dev
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # From GitHub
> ##D install_dev("dplyr")
> ##D 
> ##D # From GitLab
> ##D install_dev("iemiscdata")
> ##D 
> ##D # From Bitbucket
> ##D install_dev("argparser")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_git")
> ### * install_git
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_git
> ### Title: Install a package from a git repository
> ### Aliases: install_git
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_git("https://github.com/hadley/stringr.git")
> ##D install_git("https://github.com/hadley/stringr.git", ref = "stringr-0.2")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_github")
> ### * install_github
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_github
> ### Title: Attempts to install a package directly from GitHub.
> ### Aliases: install_github
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_github("klutometis/roxygen")
> ##D install_github("wch/ggplot2", ref = github_pull("142"))
> ##D install_github(c("rstudio/httpuv", "rstudio/shiny"))
> ##D install_github(c("hadley/httr@v0.4", "klutometis/roxygen#142",
> ##D   "r-lib/roxygen2@*release", "mfrasca/r-logging/pkg"))
> ##D 
> ##D # To install from a private repo, use auth_token with a token
> ##D # from https://github.com/settings/tokens. You only need the
> ##D # repo scope. Best practice is to save your PAT in env var called
> ##D # GITHUB_PAT.
> ##D install_github("hadley/private", auth_token = "abc")
> ##D 
> ##D # To pass option arguments to `R CMD INSTALL` use `INSTALL_opts`. e.g. to
> ##D install a package with source references and tests
> ##D install_github("rstudio/shiny", INSTALL_opts = c("--with-keep.source", "--install-tests"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_gitlab")
> ### * install_gitlab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_gitlab
> ### Title: Install a package from GitLab
> ### Aliases: install_gitlab
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_gitlab("jimhester/covr")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_local")
> ### * install_local
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_local
> ### Title: Install a package from a local file
> ### Aliases: install_local
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dir <- tempfile()
> ##D dir.create(dir)
> ##D pkg <- download.packages("testthat", dir, type = "source")
> ##D install_local(pkg[, 2])
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_svn")
> ### * install_svn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_svn
> ### Title: Install a package from a SVN repository
> ### Aliases: install_svn
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_svn("https://github.com/hadley/stringr/trunk")
> ##D install_svn("https://github.com/hadley/httr/branches/oauth")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_url")
> ### * install_url
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_url
> ### Title: Install a package from a url
> ### Aliases: install_url
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_url("https://github.com/hadley/stringr/archive/HEAD.zip")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_version")
> ### * install_version
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_version
> ### Title: Install specific version of a package.
> ### Aliases: install_version
> 
> ### ** Examples
> 
> ## Not run: 
> ##D install_version("devtools", "1.11.0")
> ##D install_version("devtools", ">= 1.12.0, < 1.14")
> ##D 
> ##D ## Specify search order (e.g. in ~/.Rprofile)
> ##D options(repos = c(
> ##D   prod = "http://mycompany.example.com/r-repo",
> ##D   dev = "http://mycompany.example.com/r-repo-dev",
> ##D   CRAN = "https://cran.revolutionanalytics.com"
> ##D ))
> ##D install_version("mypackage", "1.15") # finds in 'prod'
> ##D install_version("mypackage", "1.16-39487") # finds in 'dev'
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("package_deps")
> ### * package_deps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: package_deps
> ### Title: Find all dependencies of a CRAN or dev package.
> ### Aliases: package_deps local_package_deps dev_package_deps
> ###   update.package_deps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D package_deps("devtools")
> ##D # Use update to update any out-of-date dependencies
> ##D update(package_deps("devtools"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("parse-git-repo")
> ### * parse-git-repo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse-git-repo
> ### Title: Parse a remote git repo specification
> ### Aliases: parse-git-repo parse_repo_spec parse_github_repo_spec
> ###   parse_github_url
> 
> ### ** Examples
> 
> parse_repo_spec("metacran/crandb")
$package
[1] ""

$username
[1] "metacran"

$repo
[1] "crandb"

$subdir
[1] ""

$ref
[1] ""

$pull
[1] ""

$release
[1] ""

> parse_repo_spec("jimhester/covr#47")        ## pull request
$package
[1] ""

$username
[1] "jimhester"

$repo
[1] "covr"

$subdir
[1] ""

$ref
[1] ""

$pull
[1] "47"

$release
[1] ""

> parse_repo_spec("jeroen/curl@v0.9.3")       ## specific tag
$package
[1] ""

$username
[1] "jeroen"

$repo
[1] "curl"

$subdir
[1] ""

$ref
[1] "v0.9.3"

$pull
[1] ""

$release
[1] ""

> parse_repo_spec("tidyverse/dplyr@*release") ## shorthand for latest release
$package
[1] ""

$username
[1] "tidyverse"

$repo
[1] "dplyr"

$subdir
[1] ""

$ref
[1] ""

$pull
[1] ""

$release
[1] "*release"

> parse_repo_spec("r-lib/remotes@550a3c7d3f9e1493a2ba") ## commit SHA
$package
[1] ""

$username
[1] "r-lib"

$repo
[1] "remotes"

$subdir
[1] ""

$ref
[1] "550a3c7d3f9e1493a2ba"

$pull
[1] ""

$release
[1] ""

> parse_repo_spec("igraph=igraph/rigraph") ## Different package name from repo name
$package
[1] "igraph"

$username
[1] "igraph"

$repo
[1] "rigraph"

$subdir
[1] ""

$ref
[1] ""

$pull
[1] ""

$release
[1] ""

> 
> parse_github_url("https://github.com/jeroen/curl.git")
$username
[1] "jeroen"

$repo
[1] "curl"

$ref
[1] ""

$pull
[1] ""

$release
[1] ""

> parse_github_url("git@github.com:metacran/crandb.git")
$username
[1] "metacran"

$repo
[1] "crandb"

$ref
[1] ""

$pull
[1] ""

$release
[1] ""

> parse_github_url("https://github.com/jimhester/covr")
$username
[1] "jimhester"

$repo
[1] "covr"

$ref
[1] ""

$pull
[1] ""

$release
[1] ""

> parse_github_url("https://github.example.com/user/repo.git")
$username
[1] "user"

$repo
[1] "repo"

$ref
[1] ""

$pull
[1] ""

$release
[1] ""

> parse_github_url("git@github.example.com:user/repo.git")
$username
[1] "user"

$repo
[1] "repo"

$ref
[1] ""

$pull
[1] ""

$release
[1] ""

> 
> parse_github_url("https://github.com/r-lib/remotes/pull/108")
$username
[1] "r-lib"

$repo
[1] "remotes"

$ref
[1] ""

$pull
[1] "108"

$release
[1] ""

> parse_github_url("https://github.com/r-lib/remotes/tree/name-of-branch")
$username
[1] "r-lib"

$repo
[1] "remotes"

$ref
[1] "name-of-branch"

$pull
[1] ""

$release
[1] ""

> parse_github_url("https://github.com/r-lib/remotes/commit/1234567")
$username
[1] "r-lib"

$repo
[1] "remotes"

$ref
[1] "1234567"

$pull
[1] ""

$release
[1] ""

> parse_github_url("https://github.com/r-lib/remotes/releases/latest")
$username
[1] "r-lib"

$repo
[1] "remotes"

$ref
[1] ""

$pull
[1] ""

$release
[1] "*release"

> parse_github_url("https://github.com/r-lib/remotes/releases/tag/1.0.0")
$username
[1] "r-lib"

$repo
[1] "remotes"

$ref
[1] "1.0.0"

$pull
[1] ""

$release
[1] ""

> 
> 
> 
> cleanEx()
> nameEx("update_packages")
> ### * update_packages
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update_packages
> ### Title: Update packages that are missing or out-of-date.
> ### Aliases: update_packages
> 
> ### ** Examples
> 
> ## Not run: 
> ##D update_packages("ggplot2")
> ##D update_packages(c("plyr", "ggplot2"))
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.075 0.009 0.084 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
