
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-availableWorkers.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> parallelly:::testme("availableWorkers")
Test ‘availableWorkers’ ...
Sourcing 7 prologue scripts ...
01/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/001.load.R’
02/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/002.record-state.R’
03/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/030.imports.R’
04/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/050.utils.R’
05/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/090.context.R’
06/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/090.options.R’
07/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/091.envvars.R’
Sourcing 7 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/parallelly/testme/test-availableWorkers.R’

> library(parallelly)

> message("*** availableWorkers() ...")
*** availableWorkers() ...

> w <- availableWorkers()

> print(w)
[1] "localhost" "localhost"

> stopifnot(is.character(w), length(w) >= 1)

> print(availableWorkers(which = "min"))
[1] "localhost"

> print(availableWorkers(which = "max"))
[1] "localhost" "localhost" "localhost" "localhost"

> print(availableWorkers(na.rm = FALSE, which = "all"))
$mc.cores
[1] "localhost" "localhost"

$BiocParallel
character(0)

$`_R_CHECK_LIMIT_CORES_`
character(0)

$Bioconductor
character(0)

$LSF
character(0)

$PJM
character(0)

$PBS
character(0)

$SGE
character(0)

$Slurm
character(0)

$custom
character(0)

$cgroups.cpuset
character(0)

$cgroups.cpuquota
character(0)

$cgroups2.cpu.max
character(0)

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"

$fallback
character(0)


> w <- availableWorkers(methods = "system")

> print(w)
[1] "localhost" "localhost" "localhost" "localhost"

> stopifnot(is.character(w), length(w) >= 1)

> print(availableWorkers(methods = "PBS"))
[1] "localhost"

> print(availableWorkers(methods = "SGE"))
[1] "localhost"

> print(availableWorkers(methods = "Slurm"))
[1] "localhost"

> print(availableWorkers(methods = "LSF"))
[1] "localhost"

> print(availableWorkers(methods = "PJM"))
[1] "localhost"

> message("*** HPC related ...")
*** HPC related ...

> sge_expand_node_count_pairs <- parallelly:::sge_expand_node_count_pairs

> read_pbs_nodefile <- parallelly:::read_pbs_nodefile

> read_pjm_nodefile <- parallelly:::read_pjm_nodefile

> read_pe_hostfile <- parallelly:::read_pe_hostfile

> workers0 <- c("n1", "n2", "n3", "n1", "n6", "n3", 
+     "n3", "n5")

> data0 <- as.data.frame(table(workers0), stringsAsFactors = FALSE)

> colnames(data0) <- c("node", "count")

> data0 <- data0[order(data0$node, data0$count), ]

> message("*** LSF ...")
*** LSF ...

> Sys.setenv(LSB_HOSTS = paste(workers0, collapse = " "))

> workers <- availableWorkers(methods = "LSF")

> print(workers)
[1] "n1" "n2" "n3" "n1" "n6" "n3" "n3" "n5"

> stopifnot(length(workers) == length(workers0))

> message("*** LSF ... done")
*** LSF ... done

> message("*** read_pbs_nodefile() ...")
*** read_pbs_nodefile() ...

> workers <- workers0

> pathname <- tempfile()

> writeLines(workers, con = pathname)

> data <- read_pbs_nodefile(pathname)

> str(data)
'data.frame':	8 obs. of  1 variable:
 $ node: chr  "n1" "n1" "n2" "n3" ...

> stopifnot(c("node") %in% colnames(data), is.character(data$node), 
+     !anyNA(data$node), nrow(data$node) == length(workers), all(sort(data$node)  .... [TRUNCATED] 

> Sys.setenv(PBS_NODEFILE = pathname)

> Sys.setenv(PBS_NP = length(workers), PBS_NUM_NODES = length(workers)/2, 
+     PBS_NUM_PPN = 2)

> workers <- availableWorkers(methods = "PBS")

> print(workers)
[1] "n1" "n1" "n2" "n3" "n3" "n3" "n5" "n6"

> stopifnot(length(workers) == length(workers0), all(workers == 
+     sort(workers0)))

> Sys.setenv(PBS_NUM_PPN = 3)

> res <- tryCatch({
+     workers <- availableWorkers(methods = "PBS")
+ }, warning = identity)

> stopifnot(inherits(res, "warning"))

> Sys.setenv(PBS_NP = length(workers) + 1)

> res <- tryCatch({
+     workers <- availableWorkers(methods = "PBS")
+ }, warning = identity)

> stopifnot(inherits(res, "warning"))

> workersE <- c(workers, "n 3")

> pathname <- tempfile()

> writeLines(workersE, con = pathname)

> res <- tryCatch(read_pbs_nodefile(pathname), error = identity)

> print(res)
<simpleError: ‘!any(grepl("[[:space:]]", lines))’ is not TRUE>

> stopifnot(inherits(res, "error"))

> Sys.setenv(PBS_NODEFILE = "<non-existing-file>")

> res <- tryCatch({
+     workers <- availableWorkers(methods = "PBS")
+ }, warning = identity)

> stopifnot(inherits(res, "warning"))

> message("*** read_pbs_nodefile() ... DONE")
*** read_pbs_nodefile() ... DONE

> message("*** read_pjm_nodefile() ...")
*** read_pjm_nodefile() ...

> workersT <- unique(workers0)

> pathname <- tempfile()

> writeLines(workersT, con = pathname)

> data <- read_pjm_nodefile(pathname)

> str(data)
'data.frame':	5 obs. of  1 variable:
 $ node: chr  "n1" "n2" "n3" "n5" ...

> stopifnot(c("node") %in% colnames(data), is.character(data$node), 
+     !anyNA(data$node), nrow(data$node) == length(workersT), all(sort(data$node) .... [TRUNCATED] 

> Sys.setenv(PJM_O_NODEINF = pathname)

> message("- PJM_VNODE_CORE=1")
- PJM_VNODE_CORE=1

> Sys.setenv(PJM_VNODE_CORE = "1")

> workers <- availableWorkers(methods = "PJM")

> print(workers)
[1] "n1" "n2" "n3" "n6" "n5"

> stopifnot(length(workers) == length(workersT), all(sort(workers) == 
+     sort(workersT)))

> message("- PJM_VNODE=", length(workersT))
- PJM_VNODE=5

> message("- PJM_VNODE_CORE=2")
- PJM_VNODE_CORE=2

> Sys.setenv(PJM_VNODE = length(workersT))

> Sys.setenv(PJM_VNODE_CORE = "2")

> workers <- availableWorkers(methods = "PJM")

> print(workers)
 [1] "n1" "n1" "n2" "n2" "n3" "n3" "n6" "n6" "n5" "n5"

> stopifnot(length(workers) == 2 * length(workersT), 
+     all(workers %in% workersT), all(workersT %in% workers))

> message("- PJM_VNODE=1 (incompatible => warning)")
- PJM_VNODE=1 (incompatible => warning)

> message("- PJM_VNODE_CORE=2")
- PJM_VNODE_CORE=2

> Sys.setenv(PJM_VNODE = "1")

> Sys.setenv(PJM_VNODE_CORE = "2")

> workers <- availableWorkers(methods = "PJM")
Warning: Environment variable ‘PJM_VNODE’ does not agree with the number of hosts in file ‘PJM_O_NODEINF’: 1 != 5

> print(workers)
 [1] "n1" "n1" "n2" "n2" "n3" "n3" "n6" "n6" "n5" "n5"

> stopifnot(length(workers) == 2 * length(workersT), 
+     all(workers %in% workersT), all(workersT %in% workers))

> message("- PJM_O_NODEINF = <non-existing-file>")
- PJM_O_NODEINF = <non-existing-file>

> Sys.setenv(PJM_O_NODEINF = "<non-existing-file>")

> res <- tryCatch({
+     workers <- availableWorkers(methods = "PJM")
+ }, warning = identity)

> stopifnot(inherits(res, "warning"))

> message("*** read_pjm_nodefile() ... DONE")
*** read_pjm_nodefile() ... DONE

> message("*** read_pe_hostfile() ...")
*** read_pe_hostfile() ...

> workers <- workers0

> pathname <- tempfile()

> write.table(data0, file = pathname, quote = FALSE, 
+     row.names = FALSE, col.names = FALSE)

> lines <- readLines(pathname)

> print(lines)
[1] "n1 2" "n2 1" "n3 3" "n5 1" "n6 1"

> data <- read_pe_hostfile(pathname, expand = FALSE)

> print(data)
  node count
1   n1     2
2   n2     1
3   n3     3
4   n5     1
5   n6     1

> stopifnot(is.character(data$node), !anyNA(data$node), 
+     is.integer(data$count), !anyNA(data$count), all(is.finite(data$count)), 
+     all(data .... [TRUNCATED] 

> workers <- sge_expand_node_count_pairs(data)

> stopifnot(length(workers) == length(workers0), all(workers == 
+     sort(workers0)))

> Sys.setenv(PE_HOSTFILE = pathname)

> Sys.setenv(NSLOTS = length(workers0))

> workers <- availableWorkers(methods = "SGE")

> print(workers)
[1] "n1" "n1" "n2" "n3" "n3" "n3" "n5" "n6"

> stopifnot(length(workers) == length(workers0), all(workers == 
+     sort(workers0)))

> Sys.setenv(NSLOTS = length(workers0) + 1)

> workers <- tryCatch(availableWorkers(methods = "SGE"), 
+     warning = identity)

> print(workers)
<simpleWarning: Identified 8 workers from the ‘PE_HOSTFILE’ file (‘/tmp/RtmpDTsEI9/file1965c182290e8’), which is less than environment variable ‘NSLOTS’ = 9>

> stopifnot(inherits(workers, "warning"))

> Sys.setenv(PE_HOSTFILE = "<non-existing-file>")

> res <- tryCatch({
+     workers <- availableWorkers(methods = "SGE")
+ }, warning = identity)

> stopifnot(inherits(res, "warning"))

> message("*** read_pe_hostfile() ... DONE")
*** read_pe_hostfile() ... DONE

> message("*** Slurm w/ SLURM_JOB_NODELIST ...")
*** Slurm w/ SLURM_JOB_NODELIST ...

> slurm_expand_nodelist <- parallelly:::slurm_expand_nodelist

> specs <- list(n1 = c("n1"), `  n1` = c("n1"), `n1,,  n3` = c("n1", 
+     "n3"), `n1,  n3` = c("n1", "n3"), `n3  n1` = c("n3", "n1"), 
+     `n[1-13 .... [TRUNCATED] 

> all <- list(unlist(specs, use.names = FALSE))

> names(all) <- paste(names(specs), collapse = ",")

> specs <- c(specs, all)

> all <- list(unlist(rev(specs), use.names = FALSE))

> names(all) <- paste(rev(names(specs)), collapse = ",")

> specs <- c(specs, all)

> for (kk in seq_along(specs)) {
+     message(sprintf("- Specification #%d of %d", kk, length(specs)))
+     nodelist <- names(specs)[kk]
+     truth .... [TRUNCATED] 
- Specification #1 of 10
nodelist: ‘n1’
expanded: c(‘n1’)
truth: c(‘n1’)
SLURM_JOB_NODELIST = ‘n1’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n1’)
SLURM_JOB_NODELIST = ‘n1’
SLURM_JOB_CPUS_PER_NODE = ‘1’
workers: c(‘n1’)
n1 
 1 
n1 
 1 
- Specification #2 of 10
nodelist: ‘  n1’
expanded: c(‘n1’)
truth: c(‘n1’)
SLURM_JOB_NODELIST = ‘  n1’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n1’)
SLURM_JOB_NODELIST = ‘  n1’
SLURM_JOB_CPUS_PER_NODE = ‘7’
workers: c(‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’)
n1 
 7 
n1 
 7 
- Specification #3 of 10
nodelist: ‘n1,,  n3’
expanded: c(‘n1’, ‘n3’)
truth: c(‘n1’, ‘n3’)
SLURM_JOB_NODELIST = ‘n1,,  n3’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n1’, ‘n3’)
SLURM_JOB_NODELIST = ‘n1,,  n3’
SLURM_JOB_CPUS_PER_NODE = ‘6,1’
workers: c(‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n3’)
workers
n1 n3 
 6  1 
expanded2
n1 n3 
 6  1 
- Specification #4 of 10
nodelist: ‘n1,  n3’
expanded: c(‘n1’, ‘n3’)
truth: c(‘n1’, ‘n3’)
SLURM_JOB_NODELIST = ‘n1,  n3’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n1’, ‘n3’)
SLURM_JOB_NODELIST = ‘n1,  n3’
SLURM_JOB_CPUS_PER_NODE = ‘2,8’
workers: c(‘n1’, ‘n1’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’)
workers
n1 n3 
 2  8 
expanded2
n1 n3 
 2  8 
- Specification #5 of 10
nodelist: ‘n3  n1’
expanded: c(‘n3’, ‘n1’)
truth: c(‘n3’, ‘n1’)
SLURM_JOB_NODELIST = ‘n3  n1’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n3’, ‘n1’)
SLURM_JOB_NODELIST = ‘n3  n1’
SLURM_JOB_CPUS_PER_NODE = ‘7,7’
workers: c(‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’)
workers
n3 n1 
 7  7 
expanded2
n3 n1 
 7  7 
- Specification #6 of 10
nodelist: ‘n[1-13]’
expanded: c(‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’)
truth: c(‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’)
SLURM_JOB_NODELIST = ‘n[1-13]’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’)
SLURM_JOB_NODELIST = ‘n[1-13]’
SLURM_JOB_CPUS_PER_NODE = ‘4,4,2,8,2,4,3,1,9,5,9,6,10’
workers: c(‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n2’, ‘n2’, ‘n2’, ‘n2’, ‘n3’, ‘n3’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n5’, ‘n5’, ‘n6’, ‘n6’, ‘n6’, ‘n6’, ‘n7’, ‘n7’, ‘n7’, ‘n8’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n10’, ‘n10’, ‘n10’, ‘n10’, ‘n10’, ‘n11’, ‘n11’, ‘n11’, ‘n11’, ‘n11’, ‘n11’, ‘n11’, ‘n11’, ‘n11’, ‘n12’, ‘n12’, ‘n12’, ‘n12’, ‘n12’, ‘n12’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’)
workers
 n1  n2  n3  n4  n5  n6  n7  n8  n9 n10 n11 n12 n13 
  4   4   2   8   2   4   3   1   9   5   9   6  10 
expanded2
 n1  n2  n3  n4  n5  n6  n7  n8  n9 n10 n11 n12 n13 
  4   4   2   8   2   4   3   1   9   5   9   6  10 
- Specification #7 of 10
nodelist: ‘n[1,3-4,  11-13]’
expanded: c(‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’)
truth: c(‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’)
SLURM_JOB_NODELIST = ‘n[1,3-4,  11-13]’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’)
SLURM_JOB_NODELIST = ‘n[1,3-4,  11-13]’
SLURM_JOB_CPUS_PER_NODE = ‘2,5,6,10,2,2’
workers: c(‘n1’, ‘n1’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0012’, ‘n0012’, ‘n0013’, ‘n0013’)
workers
   n1    n3    n4 n0011 n0012 n0013 
    2     5     6    10     2     2 
expanded2
   n1    n3    n4 n0011 n0012 n0013 
    2     5     6    10     2     2 
- Specification #8 of 10
nodelist: ‘a1,b[   02-04,6-7]’
expanded: c(‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’)
truth: c(‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’)
SLURM_JOB_NODELIST = ‘a1,b[   02-04,6-7]’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’)
SLURM_JOB_NODELIST = ‘a1,b[   02-04,6-7]’
SLURM_JOB_CPUS_PER_NODE = ‘8,6,1,2,7,3’
workers: c(‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b00004’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b7’, ‘b7’, ‘b7’)
workers
    a1 b00002 b00003 b00004     b6     b7 
     8      6      1      2      7      3 
expanded2
    a1 b00002 b00003 b00004     b6     b7 
     8      6      1      2      7      3 
- Specification #9 of 10
nodelist: ‘n1,  n1,n1,,  n3,n1,  n3,n3  n1,n[1-13],n[1,3-4,  11-13],a1,b[   02-04,6-7]’
expanded: c(‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’)
truth: c(‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’)
SLURM_JOB_NODELIST = ‘n1,  n1,n1,,  n3,n1,  n3,n3  n1,n[1-13],n[1,3-4,  11-13],a1,b[   02-04,6-7]’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’)
SLURM_JOB_NODELIST = ‘n1,  n1,n1,,  n3,n1,  n3,n3  n1,n[1-13],n[1,3-4,  11-13],a1,b[   02-04,6-7]’
SLURM_JOB_CPUS_PER_NODE = ‘8,3,8,1,2,6,6,9,7,5,1,1,5,5,7,7,4,6,1,1,1,3,4,3,1,1,3,5,3,6,10,2,5’
workers: c(‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n1’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n2’, ‘n2’, ‘n2’, ‘n2’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n5’, ‘n5’, ‘n5’, ‘n5’, ‘n6’, ‘n6’, ‘n6’, ‘n6’, ‘n6’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n10’, ‘n10’, ‘n10’, ‘n10’, ‘n10’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n4’, ‘n4’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘n0013’, ‘n0013’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00004’, ‘b00004’, ‘b00004’, ‘b00004’, ‘b00004’, ‘b00004’, ‘b00004’, ‘b00004’, ‘b00004’, ‘b00004’, ‘b6’, ‘b6’, ‘b7’, ‘b7’, ‘b7’, ‘b7’, ‘b7’)
workers
    n1     n3     n2     n4     n5     n6     n7     n8     n9    n10    n11 
    40     18      5      4      5      5      7      7      4      6      1 
   n12    n13  n0011  n0012  n0013     a1 b00002 b00003 b00004     b6     b7 
     1      1      1      1      3      5      3      6     10      2      5 
expanded2
    n1     n3     n2     n4     n5     n6     n7     n8     n9    n10    n11 
    40     18      5      4      5      5      7      7      4      6      1 
   n12    n13  n0011  n0012  n0013     a1 b00002 b00003 b00004     b6     b7 
     1      1      1      1      3      5      3      6     10      2      5 
- Specification #10 of 10
nodelist: ‘n1,  n1,n1,,  n3,n1,  n3,n3  n1,n[1-13],n[1,3-4,  11-13],a1,b[   02-04,6-7],a1,b[   02-04,6-7],n[1,3-4,  11-13],n[1-13],n3  n1,n1,  n3,n1,,  n3,  n1,n1’
expanded: c(‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n3’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n1’, ‘n1’)
truth: c(‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n3’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n1’, ‘n1’)
SLURM_JOB_NODELIST = ‘n1,  n1,n1,,  n3,n1,  n3,n3  n1,n[1-13],n[1,3-4,  11-13],a1,b[   02-04,6-7],a1,b[   02-04,6-7],n[1,3-4,  11-13],n[1-13],n3  n1,n1,  n3,n1,,  n3,  n1,n1’
SLURM_JOB_CPUS_PER_NODE = ‘’
Warning in availableWorkersSlurm() :
  Expected either environment variable 'SLURM_JOB_CPUS_PER_NODE' or 'SLURM_TASKS_PER_NODE' to be set. Will assume one core per node.
workers: c(‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’, ‘a1’, ‘b00002’, ‘b00003’, ‘b00004’, ‘b6’, ‘b7’, ‘n1’, ‘n3’, ‘n4’, ‘n0011’, ‘n0012’, ‘n0013’, ‘n1’, ‘n2’, ‘n3’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n8’, ‘n9’, ‘n10’, ‘n11’, ‘n12’, ‘n13’, ‘n3’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n3’, ‘n1’, ‘n1’)
SLURM_JOB_NODELIST = ‘n1,  n1,n1,,  n3,n1,  n3,n3  n1,n[1-13],n[1,3-4,  11-13],a1,b[   02-04,6-7],a1,b[   02-04,6-7],n[1,3-4,  11-13],n[1-13],n3  n1,n1,  n3,n1,,  n3,  n1,n1’
SLURM_JOB_CPUS_PER_NODE = ‘6,7,3,1,9,10,10,1,1,4,2,9,4,3,7,9,8,2,2,5,8,10,7,5,9,1,10,8,10,9,2,7,6,8,7,4,1,5,1,4,1,9,8,6,7,4,1,4,2,1,1,10,7,10,2,4,3,7,8,6,2,1,5,9,7,4’
workers: c(‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n2’, ‘n2’, ‘n2’, ‘n2’, ‘n3’, ‘n3’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n5’, ‘n5’, ‘n5’, ‘n5’, ‘n6’, ‘n6’, ‘n6’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n10’, ‘n10’, ‘n11’, ‘n11’, ‘n12’, ‘n12’, ‘n12’, ‘n12’, ‘n12’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0012’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00004’, ‘b00004’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b7’, ‘b7’, ‘b7’, ‘b7’, ‘b7’, ‘b7’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘a1’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00002’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00003’, ‘b00004’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b6’, ‘b7’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n4’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0011’, ‘n0012’, ‘n0012’, ‘n0012’, ‘n0012’, ‘n0012’, ‘n0012’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n0013’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n2’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n4’, ‘n4’, ‘n5’, ‘n6’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n7’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n8’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n9’, ‘n10’, ‘n10’, ‘n11’, ‘n11’, ‘n11’, ‘n11’, ‘n12’, ‘n12’, ‘n12’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n13’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n3’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’, ‘n1’)
workers
    n1     n3     n2     n4     n5     n6     n7     n8     n9    n10    n11 
    69     53      5     25      5      4     17     16     18      4      6 
   n12    n13  n0011  n0012  n0013     a1 b00002 b00003 b00004     b6     b7 
     8     15     17      7     17     16     17     13      3     12      7 
expanded2
    n1     n3     n2     n4     n5     n6     n7     n8     n9    n10    n11 
    69     53      5     25      5      4     17     16     18      4      6 
   n12    n13  n0011  n0012  n0013     a1 b00002 b00003 b00004     b6     b7 
     8     15     17      7     17     16     17     13      3     12      7 

> message("*** Slurm w/ SLURM_JOB_NODELIST ... DONE")
*** Slurm w/ SLURM_JOB_NODELIST ... DONE

> message("*** Slurm w/ SLURM_TASKS_PER_NODE ...")
*** Slurm w/ SLURM_TASKS_PER_NODE ...

> slurm_expand_nodecounts <- parallelly:::slurm_expand_nodecounts

> specs <- list(`1` = c(1), `1,3` = c(1, 3), `1, 3` = c(1, 
+     3), `2(x3)` = rep(2, times = 3), `2(x3),3,4(x1)` = c(rep(2, 
+     times = 3), 3, 4) .... [TRUNCATED] 

> for (kk in seq_along(specs)) {
+     message(sprintf("- Specification #%d of %d", kk, length(specs)))
+     nodecounts <- names(specs)[kk]
+     tru .... [TRUNCATED] 
- Specification #1 of 5
nodecounts: ‘1’
expanded: c(‘1’)
truth: c(‘1’)
- Specification #2 of 5
nodecounts: ‘1,3’
expanded: c(‘1’, ‘3’)
truth: c(‘1’, ‘3’)
- Specification #3 of 5
nodecounts: ‘1, 3’
expanded: c(‘1’, ‘3’)
truth: c(‘1’, ‘3’)
- Specification #4 of 5
nodecounts: ‘2(x3)’
expanded: c(‘2’, ‘2’, ‘2’)
truth: c(‘2’, ‘2’, ‘2’)
- Specification #5 of 5
nodecounts: ‘2(x3),3,4(x1)’
expanded: c(‘2’, ‘2’, ‘2’, ‘3’, ‘4’)
truth: c(‘2’, ‘2’, ‘2’, ‘3’, ‘4’)

> message("*** Slurm w/ SLURM_TASKS_PER_NODE ... DONE")
*** Slurm w/ SLURM_TASKS_PER_NODE ... DONE

> message("*** HPC related ... DONE")
*** HPC related ... DONE

> print(availableWorkers(methods = c("width", "FOO_BAR_ENV"), 
+     na.rm = FALSE, which = "all"))
$width
[1] "80"

$FOO_BAR_ENV
character(0)


> Sys.setenv(FOO_BAR_ENV = "0")

> res <- tryCatch(availableWorkers(methods = "FOO_BAR_ENV"), 
+     error = identity)

> stopifnot(inherits(res, "error"))

> message("*** availableWorkers() ... DONE")
*** availableWorkers() ... DONE
Sourcing 4 epilogue scripts ...
01/04 epilogue script ‘/usr/local/lib/R/site-library/parallelly/testme/_epilogue/002.undo-state.R’
02/04 epilogue script ‘/usr/local/lib/R/site-library/parallelly/testme/_epilogue/090.gc.R’
03/04 epilogue script ‘/usr/local/lib/R/site-library/parallelly/testme/_epilogue/099.session_info.R’
04/04 epilogue script ‘/usr/local/lib/R/site-library/parallelly/testme/_epilogue/999.detritus.R’
Looking for detritus files generated by test ‘availableWorkers’:
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 4 epilogue scripts ... done
Test time: user.self=0.1s, sys.self=0.009s, elapsed=0.1s, user.child=0s, sys.child=0.003s
Test ‘availableWorkers’ ... success
> 
