
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "R.methodsS3"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('R.methodsS3')
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("setGenericS3")
> ### * setGenericS3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setGenericS3
> ### Title: Creates an S3 generic function
> ### Aliases: setGenericS3.default setGenericS3
> ### Keywords: programming methods
> 
> ### ** Examples
> 
> myCat.matrix <- function(..., sep=", ") {
+   cat("A matrix:\n")
+   cat(..., sep=sep)
+   cat("\n")
+ }
> 
> myCat.default <- function(..., sep=", ") {
+   cat(..., sep=sep)
+   cat("\n")
+ }
> 
> setGenericS3("myCat")
> 
> myCat(1:10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
> mat <- matrix(1:10, ncol=5)
> myCat(mat)
A matrix:
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
> 
> 
> 
> cleanEx()
> nameEx("setMethodS3")
> ### * setMethodS3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setMethodS3
> ### Title: Creates an S3 method
> ### Aliases: setMethodS3.default setMethodS3
> ### Keywords: programming methods
> 
> ### ** Examples
> 
> ######################################################################
> # Example 1
> ######################################################################
> setMethodS3("foo", "default", function(x, ...) {
+   cat("In default foo():\n");
+   print(x, ...);
+ })
> 
> 
> setMethodS3("foo", "character", function(s, ...) {
+   cat("In foo() for class 'character':\n");
+   print(s, ...);
+ })
NULL
> 
> # The generic function is automatically created!
> print(foo)
function (...) 
UseMethod("foo")
attr(,"export")
[1] TRUE
> 
> foo(123)
In default foo():
[1] 123
> foo("123")
In foo() for class 'character':
[1] "123"
> 
> 
> ######################################################################
> # Example 2
> #
> # Assume that in a loaded package there is already a function bar(),
> # but you also want to use the name 'bar' for the character string.
> # It may even be the case that you do not know of the other package,
> # but your users do!
> ######################################################################
> # bar() in other package
> bar <- function(x, y, ...) {
+   cat("In bar() of 'other' package.\n");
+ }
> 
> 
> # Your definition; will redefine bar() above to bar.default().
> setMethodS3("bar", "character", function(object, ...) {
+   cat("In bar() for class 'character':\n");
+   print(object, ...);
+ })
Warning in setGenericS3.default(name, export = exportGeneric, envir = envir,  :
  Renamed the preexisting function bar to bar.default, which was defined in environment R_GlobalEnv.
> 
> bar(123)
In bar() of 'other' package.
> bar("123")
In bar() for class 'character':
[1] "123"
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("throw")
> ### * throw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: throw
> ### Title: Throws an exception
> ### Aliases: throw.default throw
> ### Keywords: error internal
> 
> ### ** Examples
> 
> rbern <- function(n=1, prob=1/2) {
+   if (prob < 0 || prob > 1)
+     throw("Argument 'prob' is out of range: ", prob)
+   rbinom(n=n, size=1, prob=prob)
+ }
> 
> rbern(10, 0.4)
 [1] 0 0 0 1 0 1 1 1 1 0
> # [1] 0 1 0 0 0 1 0 0 1 0
> tryCatch({
+   rbern(10, 10*0.4)
+ }, error=function(ex) {})
Warning in throw.default("Argument 'prob' is out of range: ", prob) :
  R.methodsS3::throw() is deprecated. Use base::stop() instead, or R.oo::throw().
NULL
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.079 0.008 0.088 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
