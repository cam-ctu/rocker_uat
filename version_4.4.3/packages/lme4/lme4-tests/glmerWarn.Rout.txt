
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> if (.Platform$OS.type != "windows") {
+     library(lme4)
+     library(testthat)
+ 
+     ## [glmer(*, gaussian) warns to rather use lmer()]
+     m3 <- suppressWarnings(glmer(Reaction ~ Days + (Days|Subject), sleepstudy))
+     m4 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy)
+     m5 <- suppressWarnings(glmer(Reaction ~ Days + (Days|Subject), sleepstudy,
+                                  family=gaussian))
+     expect_equal(fixef(m3),fixef(m5))
+     ## hack call -- comes out unimportantly different
+     m4@call[[1]] <- quote(lme4::lmer)
+     expect_equal(m3,m4)
+     expect_equal(m3,m5)
+ 
+     ## would like m3==m5 != m4 ??
+     expect_equal(VarCorr(m4), VarCorr(m5), tolerance = 1e-14)
+     print(th4 <- getME(m4,"theta"))
+     expect_equal(th4, getME(m5,"theta"), tolerance = 1e-14)
+ 
+     ## glmer() - poly() + interaction
+     if (requireNamespace("mlmRev")) withAutoprint({
+         data(Contraception, package="mlmRev")
+         ## ch := with child
+         Contraception <- within(Contraception, ch <- livch != "0")
+         ## gmC1 <- glmer(use ~ poly(age,2) + ch + age:ch + urban + (1|district),
+         ##               Contraception, binomial)
+ ### not a 'warning' per se {cannot suppressWarnings(.)}:
+ ###    fixed-effect model matrix is rank deficient so dropping 1 column / coefficient
+ ### also printed with print(): labeled as  "fit warnings"
+ 
+         ## ==> from ../R/modular.R  chkRank.drop.cols()
+         ## --> Use   control = glmerControl(check.rankX = "ignore+drop.cols"))
+         ## because further investigation shows "the problem" is really already
+         ##     in model.matrix():
+         set.seed(101)
+         dd <- data.frame(ch = c("Y","N")[1+rbinom(12, 1, 0.7)], age = rlnorm(12, 16))
+         colnames(mm1 <- model.matrix( ~ poly(age,2) + ch + age:ch, dd))
+         ## "(Int.)" "poly(age, 2)1" "poly(age, 2)2" "chY" "chN:age" "chY:age"      
+         ## If we make the poly() columns to regular variables, can interact:
+         d2 <- within(dd, { p2 <- poly(age,2); ageL <- p2[,1]; ageQ <- p2[,2]; rm(p2)})
+         ## then, we can easily get what want
+         (mm2 <- model.matrix( ~ ageL+ageQ + ch + ageL:ch, d2))
+         ## actually even more compactly now ("drawback": 'ageQ' at end):
+         (mm2. <- model.matrix( ~ ageL*ch + ageQ, d2))
+         cn2 <- colnames(mm2)
+         stopifnot(identical(mm2[,cn2], mm2.[,cn2]))
+     })
+ } ## skip on windows (for speed)
Loading required package: Matrix
     Subject.(Intercept) Subject.Days.(Intercept)             Subject.Days 
              0.96674177               0.01516906               0.23090995 
Loading required namespace: mlmRev
> data(Contraception, package = "mlmRev")
> Contraception <- within(Contraception, ch <- livch != "0")
> set.seed(101)
> dd <- data.frame(ch = c("Y", "N")[1 + rbinom(12, 1, 0.7)], age = rlnorm(12, 
+     16))
> colnames(mm1 <- model.matrix(~poly(age, 2) + ch + age:ch, dd))
[1] "(Intercept)"   "poly(age, 2)1" "poly(age, 2)2" "chY"          
[5] "chN:age"       "chY:age"      
> d2 <- within(dd, {
+     p2 <- poly(age, 2)
+     ageL <- p2[, 1]
+     ageQ <- p2[, 2]
+     rm(p2)
+ })
> (mm2 <- model.matrix(~ageL + ageQ + ch + ageL:ch, d2))
   (Intercept)        ageL         ageQ chY    ageL:chY
1            1  0.14806496 -0.388827296   0  0.00000000
2            1 -0.11194672 -0.066697590   0  0.00000000
3            1  0.32220780 -0.371966048   1  0.32220780
4            1 -0.13717901 -0.013293646   0  0.00000000
5            1  0.10385984 -0.363411569   0  0.00000000
6            1 -0.23118021  0.220142239   0  0.00000000
7            1  0.77229559  0.536016499   0  0.00000000
8            1 -0.29083079  0.396472763   0  0.00000000
9            1 -0.14005803 -0.006951212   0  0.00000000
10           1 -0.13062103 -0.027550342   0  0.00000000
11           1 -0.23769384  0.238332044   1 -0.23769384
12           1 -0.06691856 -0.152265842   1 -0.06691856
attr(,"assign")
[1] 0 1 2 3 4
attr(,"contrasts")
attr(,"contrasts")$ch
[1] "contr.treatment"

> (mm2. <- model.matrix(~ageL * ch + ageQ, d2))
   (Intercept)        ageL chY         ageQ    ageL:chY
1            1  0.14806496   0 -0.388827296  0.00000000
2            1 -0.11194672   0 -0.066697590  0.00000000
3            1  0.32220780   1 -0.371966048  0.32220780
4            1 -0.13717901   0 -0.013293646  0.00000000
5            1  0.10385984   0 -0.363411569  0.00000000
6            1 -0.23118021   0  0.220142239  0.00000000
7            1  0.77229559   0  0.536016499  0.00000000
8            1 -0.29083079   0  0.396472763  0.00000000
9            1 -0.14005803   0 -0.006951212  0.00000000
10           1 -0.13062103   0 -0.027550342  0.00000000
11           1 -0.23769384   1  0.238332044 -0.23769384
12           1 -0.06691856   1 -0.152265842 -0.06691856
attr(,"assign")
[1] 0 1 2 3 4
attr(,"contrasts")
attr(,"contrasts")$ch
[1] "contr.treatment"

> cn2 <- colnames(mm2)
> stopifnot(identical(mm2[, cn2], mm2.[, cn2]))
> 
