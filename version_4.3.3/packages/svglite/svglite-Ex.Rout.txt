
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "svglite"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('svglite')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("editSVG")
> ### * editSVG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: editSVG
> ### Title: Run plotting code and open svg in OS/system default svg viewer
> ###   or editor.
> ### Aliases: editSVG
> ### Keywords: internal
> 
> ### ** Examples
> 
> if (interactive()) {
+   editSVG(plot(1:10))
+   editSVG(contour(volcano))
+ }
> 
> 
> 
> cleanEx()
> nameEx("font_face")
> ### * font_face
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: font_face
> ### Title: Create a font-face specification
> ### Aliases: font_face
> 
> ### ** Examples
> 
> font_face(
+   family = "MyHelvetica",
+   ttf = "MgOpenModernaBold.ttf",
+   local = c("Helvetica Neue Bold", "HelveticaNeue-Bold"),
+   weight = "bold"
+ )
    @font-face {
      font-family: "MyHelvetica";
      src: local("Helvetica Neue Bold"),
           local("HelveticaNeue-Bold"),
           url("MgOpenModernaBold.ttf") format("truetype");
      font-weight: bold;
    }> 
> 
> 
> 
> cleanEx()
> nameEx("htmlSVG")
> ### * htmlSVG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: htmlSVG
> ### Title: Run plotting code and view svg in RStudio Viewer or web browser.
> ### Aliases: htmlSVG
> ### Keywords: internal
> 
> ### ** Examples
> 
> if (interactive() && require("htmltools")) {
+   htmlSVG(plot(1:10))
+   htmlSVG(hist(rnorm(100)))
+ }
> 
> 
> 
> cleanEx()
> nameEx("stringSVG")
> ### * stringSVG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stringSVG
> ### Title: Run plotting code and return svg as string
> ### Aliases: stringSVG
> ### Keywords: internal
> 
> ### ** Examples
> 
> stringSVG(plot(1:10))
Saving 7" x 7" image
<?xml version='1.0' encoding='UTF-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='504.00pt' height='504.00pt' viewBox='0 0 504.00 504.00'>
<defs>
  <style type='text/css'><![CDATA[
    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {
      fill: none;
      stroke: #000000;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-miterlimit: 10.00;
    }
    .svglite text {
      white-space: pre;
    }
  ]]></style>
</defs>
<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>
<defs>
  <clipPath id='cpMC4wMHw1MDQuMDB8MC4wMHw1MDQuMDA='>
    <rect x='0.00' y='0.00' width='504.00' height='504.00' />
  </clipPath>
</defs>
<g clip-path='url(#cpMC4wMHw1MDQuMDB8MC4wMHw1MDQuMDA=)'>
<text transform='translate(499.68,59.04) rotate(-90)' text-anchor='end' style='font-size: 9.60px; font-weight: 0;fill: #DA70D6; font-family: "Nimbus Sans";' textLength='75.07px' lengthAdjust='spacingAndGlyphs'>help("stringSVG")</text>
</g>
<defs>
  <clipPath id='cpNTkuMDR8NDczLjc2fDU5LjA0fDQzMC41Ng=='>
    <rect x='59.04' y='59.04' width='414.72' height='371.52' />
  </clipPath>
</defs>
<g clip-path='url(#cpNTkuMDR8NDczLjc2fDU5LjA0fDQzMC41Ng==)'>
<circle cx='74.40' cy='416.80' r='2.70' style='stroke-width: 0.75;' />
<circle cx='117.07' cy='378.58' r='2.70' style='stroke-width: 0.75;' />
<circle cx='159.73' cy='340.36' r='2.70' style='stroke-width: 0.75;' />
<circle cx='202.40' cy='302.13' r='2.70' style='stroke-width: 0.75;' />
<circle cx='245.07' cy='263.91' r='2.70' style='stroke-width: 0.75;' />
<circle cx='287.73' cy='225.69' r='2.70' style='stroke-width: 0.75;' />
<circle cx='330.40' cy='187.47' r='2.70' style='stroke-width: 0.75;' />
<circle cx='373.07' cy='149.24' r='2.70' style='stroke-width: 0.75;' />
<circle cx='415.73' cy='111.02' r='2.70' style='stroke-width: 0.75;' />
<circle cx='458.40' cy='72.80' r='2.70' style='stroke-width: 0.75;' />
</g>
<g clip-path='url(#cpMC4wMHw1MDQuMDB8MC4wMHw1MDQuMDA=)'>
<line x1='117.07' y1='430.56' x2='458.40' y2='430.56' style='stroke-width: 0.75;' />
<line x1='117.07' y1='430.56' x2='117.07' y2='437.76' style='stroke-width: 0.75;' />
<line x1='202.40' y1='430.56' x2='202.40' y2='437.76' style='stroke-width: 0.75;' />
<line x1='287.73' y1='430.56' x2='287.73' y2='437.76' style='stroke-width: 0.75;' />
<line x1='373.07' y1='430.56' x2='373.07' y2='437.76' style='stroke-width: 0.75;' />
<line x1='458.40' y1='430.56' x2='458.40' y2='437.76' style='stroke-width: 0.75;' />
<text x='117.07' y='456.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='6.67px' lengthAdjust='spacingAndGlyphs'>2</text>
<text x='202.40' y='456.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='6.67px' lengthAdjust='spacingAndGlyphs'>4</text>
<text x='287.73' y='456.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='6.67px' lengthAdjust='spacingAndGlyphs'>6</text>
<text x='373.07' y='456.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='6.67px' lengthAdjust='spacingAndGlyphs'>8</text>
<text x='458.40' y='456.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='13.35px' lengthAdjust='spacingAndGlyphs'>10</text>
<line x1='59.04' y1='378.58' x2='59.04' y2='72.80' style='stroke-width: 0.75;' />
<line x1='59.04' y1='378.58' x2='51.84' y2='378.58' style='stroke-width: 0.75;' />
<line x1='59.04' y1='302.13' x2='51.84' y2='302.13' style='stroke-width: 0.75;' />
<line x1='59.04' y1='225.69' x2='51.84' y2='225.69' style='stroke-width: 0.75;' />
<line x1='59.04' y1='149.24' x2='51.84' y2='149.24' style='stroke-width: 0.75;' />
<line x1='59.04' y1='72.80' x2='51.84' y2='72.80' style='stroke-width: 0.75;' />
<text transform='translate(41.76,378.58) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='6.67px' lengthAdjust='spacingAndGlyphs'>2</text>
<text transform='translate(41.76,302.13) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='6.67px' lengthAdjust='spacingAndGlyphs'>4</text>
<text transform='translate(41.76,225.69) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='6.67px' lengthAdjust='spacingAndGlyphs'>6</text>
<text transform='translate(41.76,149.24) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='6.67px' lengthAdjust='spacingAndGlyphs'>8</text>
<text transform='translate(41.76,72.80) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='13.35px' lengthAdjust='spacingAndGlyphs'>10</text>
<polygon points='59.04,430.56 473.76,430.56 473.76,59.04 59.04,59.04 ' style='stroke-width: 0.75;' />
<text x='266.40' y='485.28' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='29.35px' lengthAdjust='spacingAndGlyphs'>Index</text>
<text transform='translate(12.96,244.80) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='23.36px' lengthAdjust='spacingAndGlyphs'>1:10</text>
</g>
</svg>
> 
> 
> 
> cleanEx()
> nameEx("svglite")
> ### * svglite
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: svglite
> ### Title: An SVG Graphics Driver
> ### Aliases: svglite
> ### Keywords: device
> 
> ### ** Examples
> 
> # Save to file
> svglite(tempfile("Rplots.svg"))
> plot(1:11, (-5:5)^2, type = "b", main = "Simple Example")
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> cleanEx()
> nameEx("svgstring")
> ### * svgstring
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: svgstring
> ### Title: Access current SVG as a string.
> ### Aliases: svgstring
> 
> ### ** Examples
> 
> s <- svgstring()
> s()

> 
> plot.new()
> s()
<?xml version='1.0' encoding='UTF-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>
<defs>
  <style type='text/css'><![CDATA[
    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {
      fill: none;
      stroke: #000000;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-miterlimit: 10.00;
    }
    .svglite text {
      white-space: pre;
    }
  ]]></style>
</defs>
<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>
<defs>
  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>
    <rect x='0.00' y='0.00' width='720.00' height='576.00' />
  </clipPath>
</defs>
<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>
<text transform='translate(715.68,59.04) rotate(-90)' text-anchor='end' style='font-size: 9.60px; font-weight: 0;fill: #DA70D6; font-family: "Nimbus Sans";' textLength='69.72px' lengthAdjust='spacingAndGlyphs'>help("svgstring")</text>
</g>
</svg>
> text(0.5, 0.5, "Hi!")
> s()
<?xml version='1.0' encoding='UTF-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>
<defs>
  <style type='text/css'><![CDATA[
    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {
      fill: none;
      stroke: #000000;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-miterlimit: 10.00;
    }
    .svglite text {
      white-space: pre;
    }
  ]]></style>
</defs>
<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>
<defs>
  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>
    <rect x='0.00' y='0.00' width='720.00' height='576.00' />
  </clipPath>
</defs>
<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>
<text transform='translate(715.68,59.04) rotate(-90)' text-anchor='end' style='font-size: 9.60px; font-weight: 0;fill: #DA70D6; font-family: "Nimbus Sans";' textLength='69.72px' lengthAdjust='spacingAndGlyphs'>help("svgstring")</text>
</g>
<defs>
  <clipPath id='cpNTkuMDR8Njg5Ljc2fDU5LjA0fDUwMi41Ng=='>
    <rect x='59.04' y='59.04' width='630.72' height='443.52' />
  </clipPath>
</defs>
<g clip-path='url(#cpNTkuMDR8Njg5Ljc2fDU5LjA0fDUwMi41Ng==)'>
<text x='374.40' y='285.17' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='14.66px' lengthAdjust='spacingAndGlyphs'>Hi!</text>
</g>
</svg>
> dev.off()
pdf 
  2 
> 
> s <- svgstring()
> plot(rnorm(5), rnorm(5))
> s()
<?xml version='1.0' encoding='UTF-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='720.00pt' height='576.00pt' viewBox='0 0 720.00 576.00'>
<defs>
  <style type='text/css'><![CDATA[
    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {
      fill: none;
      stroke: #000000;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-miterlimit: 10.00;
    }
    .svglite text {
      white-space: pre;
    }
  ]]></style>
</defs>
<rect width='100%' height='100%' style='stroke: none; fill: #FFFFFF;'/>
<defs>
  <clipPath id='cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA='>
    <rect x='0.00' y='0.00' width='720.00' height='576.00' />
  </clipPath>
</defs>
<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>
<text transform='translate(715.68,59.04) rotate(-90)' text-anchor='end' style='font-size: 9.60px; font-weight: 0;fill: #DA70D6; font-family: "Nimbus Sans";' textLength='69.72px' lengthAdjust='spacingAndGlyphs'>help("svgstring")</text>
</g>
<defs>
  <clipPath id='cpNTkuMDR8Njg5Ljc2fDU5LjA0fDUwMi41Ng=='>
    <rect x='59.04' y='59.04' width='630.72' height='443.52' />
  </clipPath>
</defs>
<g clip-path='url(#cpNTkuMDR8Njg5Ljc2fDU5LjA0fDUwMi41Ng==)'>
<circle cx='132.65' cy='486.13' r='2.70' style='stroke-width: 0.75;' />
<circle cx='327.27' cy='141.57' r='2.70' style='stroke-width: 0.75;' />
<circle cx='82.40' cy='75.47' r='2.70' style='stroke-width: 0.75;' />
<circle cx='666.40' cy='118.29' r='2.70' style='stroke-width: 0.75;' />
<circle cx='362.31' cy='350.43' r='2.70' style='stroke-width: 0.75;' />
</g>
<g clip-path='url(#cpMC4wMHw3MjAuMDB8MC4wMHw1NzYuMDA=)'>
<line x1='163.03' y1='502.56' x2='643.51' y2='502.56' style='stroke-width: 0.75;' />
<line x1='163.03' y1='502.56' x2='163.03' y2='509.76' style='stroke-width: 0.75;' />
<line x1='283.15' y1='502.56' x2='283.15' y2='509.76' style='stroke-width: 0.75;' />
<line x1='403.27' y1='502.56' x2='403.27' y2='509.76' style='stroke-width: 0.75;' />
<line x1='523.39' y1='502.56' x2='523.39' y2='509.76' style='stroke-width: 0.75;' />
<line x1='643.51' y1='502.56' x2='643.51' y2='509.76' style='stroke-width: 0.75;' />
<text x='163.03' y='528.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='20.68px' lengthAdjust='spacingAndGlyphs'>-0.5</text>
<text x='283.15' y='528.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='16.68px' lengthAdjust='spacingAndGlyphs'>0.0</text>
<text x='403.27' y='528.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='16.68px' lengthAdjust='spacingAndGlyphs'>0.5</text>
<text x='523.39' y='528.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='16.68px' lengthAdjust='spacingAndGlyphs'>1.0</text>
<text x='643.51' y='528.48' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='16.68px' lengthAdjust='spacingAndGlyphs'>1.5</text>
<line x1='59.04' y1='401.71' x2='59.04' y2='138.25' style='stroke-width: 0.75;' />
<line x1='59.04' y1='401.71' x2='51.84' y2='401.71' style='stroke-width: 0.75;' />
<line x1='59.04' y1='269.98' x2='51.84' y2='269.98' style='stroke-width: 0.75;' />
<line x1='59.04' y1='138.25' x2='51.84' y2='138.25' style='stroke-width: 0.75;' />
<text transform='translate(41.76,401.71) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='20.68px' lengthAdjust='spacingAndGlyphs'>-0.5</text>
<text transform='translate(41.76,269.98) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='16.68px' lengthAdjust='spacingAndGlyphs'>0.0</text>
<text transform='translate(41.76,138.25) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='16.68px' lengthAdjust='spacingAndGlyphs'>0.5</text>
<polygon points='59.04,502.56 689.76,502.56 689.76,59.04 59.04,59.04 ' style='stroke-width: 0.75;' />
<text x='374.40' y='557.28' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='46.00px' lengthAdjust='spacingAndGlyphs'>rnorm(5)</text>
<text transform='translate(12.96,280.80) rotate(-90)' text-anchor='middle' style='font-size: 12.00px; font-weight: 0; font-family: "Nimbus Sans";' textLength='46.00px' lengthAdjust='spacingAndGlyphs'>rnorm(5)</text>
</g>
</svg>
> dev.off()
pdf 
  2 
> 
> 
> 
> cleanEx()
> nameEx("xmlSVG")
> ### * xmlSVG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xmlSVG
> ### Title: Run plotting code and return svg
> ### Aliases: xmlSVG
> ### Keywords: internal
> 
> ### ** Examples
> 
> if (require("xml2")) {
+   x <- xmlSVG(plot(1, axes = FALSE))
+   x
+   xml_find_all(x, ".//text")
+ }
Loading required package: xml2
{xml_nodeset (3)}
[1] <text transform="translate(499.68,59.04) rotate(-90)" text-anchor="end" s ...
[2] <text x="266.40" y="485.28" text-anchor="middle" style="font-size: 12.00p ...
[3] <text transform="translate(12.96,244.80) rotate(-90)" text-anchor="middle ...
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:xml2’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.172 0.032 0.204 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
