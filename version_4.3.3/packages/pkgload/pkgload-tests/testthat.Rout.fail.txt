
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(pkgload)
> 
> # Needed so that install.packages works correctly
> Sys.setenv("R_TESTS" = "")
> 
> test_check("pkgload")
Starting 2 test processes
[ FAIL 16 | WARN 2 | SKIP 9 | PASS 206 ]

══ Skipped tests (9) ═══════════════════════════════════════════════════════════
• "pkgload" %in% dev_packages() is not TRUE (1): 'test-shim.R:126:3'
• On CRAN (8): 'test-depend.R:5:3', 'test-depend.R:15:3', 'test-depend.R:43:3',
  'test-load.R:44:3', 'test-namespace.R:140:3', 'test-shim.R:59:3',
  'test-shim.R:135:3', 'test-source.R:2:3'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-data.R:8:3'): data available when lazydata not true ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(exists("a")) at test-data.R:8:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-data.R:3:1'): (code run outside of `test_that()`) ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-data.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-data.R:3:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-dll.R:17:3'): unload() unloads DLLs from packages loaded with library() ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(require(testDllLoad, quietly = TRUE)) at test-dll.R:17:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-dll.R:3:1'): (code run outside of `test_that()`) ───────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-dll.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-dll.R:3:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-description.R:6:3'): Parse DESCRIPTION file ────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(package_version("0.1"), pkg$get_version()) at test-description.R:6:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-description.R:3:1'): (code run outside of `test_that()`) ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-description.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-description.R:3:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-examples.R:5:3'): default run_example ignores donttest and dontrun  ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(env$a, 1) at test-examples.R:5:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-examples.R:3:1'): (code run outside of `test_that()`) ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-examples.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-examples.R:3:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-help.R:7:3'): shim_help behaves the same as utils::help for non-devtools-loaded packages ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(shim_help(lm)[1], utils::help(lm)[1]) at test-help.R:7:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-help.R:3:1'): (code run outside of `test_that()`) ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-help.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-help.R:3:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-load-collate.R:6:3'): If collate absent, load in alphabetical order ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(a, 3) at test-load-collate.R:6:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-load-collate.R:3:1'): (code run outside of `test_that()`) ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-load-collate.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-load-collate.R:3:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-load-hooks.R:24:3'): hooks called in correct order ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-load-hooks.R:24:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-load-hooks.R:3:1'): (code run outside of `test_that()`) ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-load-hooks.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-load-hooks.R:3:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Failure ('test-package.R:4:3'): it can load from outside of package root ────
"testHooks" %in% loadedNamespaces() is not FALSE

`actual`:   TRUE 
`expected`: FALSE
── Error ('test-po.R:35:5'): modified translations are correctly reloaded ──────
Error in `eval(code, test_env)`: Failed to run msgfmt

[ FAIL 16 | WARN 2 | SKIP 9 | PASS 206 ]
Error: Test failures
Execution halted
